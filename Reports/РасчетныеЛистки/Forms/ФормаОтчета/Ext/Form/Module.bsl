////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Функция формирует и выполняет запрос.
//
Функция ВыполнитьЗапрос()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияИУдержания.Сотрудник КАК Физлицо,
	|	НачисленияИУдержания.Сотрудник.Код КАК ТабельныйНомер,
	|	НачисленияИУдержания.СтруктурнаяЕдиница КАК Подразделение,
	|	НачисленияИУдержания.СтруктурнаяЕдиница.Наименование КАК ПодразделениеПредставление,
	|	СотрудникиСрезПоследних.Должность КАК Должность,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ТОГДА НачисленияИУдержания.ВидНачисленияУдержания
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Начисление,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ТОГДА NULL
	|		ИНАЧЕ НачисленияИУдержания.ВидНачисленияУдержания
	|	КОНЕЦ КАК Удержание,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|				ТОГДА ЕСТЬNULL(НачисленияИУдержания.СуммаВал, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачислено,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(НачисленияИУдержания.СуммаВал, 0)
	|		КОНЕЦ) КАК СуммаУдержано,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата)
	|				ИЛИ НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент)
	|			ТОГДА &ПериодРегистрации
	|		ИНАЧЕ НачисленияИУдержания.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата)
	|				ИЛИ НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент)
	|			ТОГДА КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ НачисленияИУдержания.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания,
	|	СУММА(НачисленияИУдержания.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(НачисленияИУдержания.ОтработаноЧасов) КАК ОтработаноЧасов,
	|	ЕСТЬNULL(ДолгНаКонец.СуммаВалОстаток, 0) КАК СальдоНаКонец,
	|	ЕСТЬNULL(ДолгНаНачало.СуммаВалОстаток, 0) КАК СальдоНаНачало,
	|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") <> """"
	|			ТОГДА ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|		ИНАЧЕ НачисленияИУдержания.Сотрудник.Наименование
	|	КОНЕЦ КАК СотрудникПредставление
	|ИЗ
	|	РегистрНакопления.НачисленияИУдержания КАК НачисленияИУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПерсоналом.Остатки(
	|				&ПериодРегистрации,
	|				Организация = &Организация
	|					И Валюта = &Валюта
	|					" + ?(НЕ ЗначениеЗаполнено(Подразделение), "", "И СтруктурнаяЕдиница = &Подразделение") + ") КАК ДолгНаНачало
	|		ПО НачисленияИУдержания.Сотрудник = ДолгНаНачало.Сотрудник
	|			И НачисленияИУдержания.СтруктурнаяЕдиница = ДолгНаНачало.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПерсоналом.Остатки(
	|				&ПериодРегистрацииКонец,
	|				Организация = &Организация
	|					И Валюта = &Валюта
	|					" + ?(НЕ ЗначениеЗаполнено(Подразделение), "", "И СтруктурнаяЕдиница = &Подразделение") + ") КАК ДолгНаКонец
	|		ПО НачисленияИУдержания.Сотрудник = ДолгНаКонец.Сотрудник
	|			И НачисленияИУдержания.СтруктурнаяЕдиница = ДолгНаКонец.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники.СрезПоследних(
	|				&ПериодРегистрацииКонец,
	|				Организация = &Организация
	|					И СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СотрудникиСрезПоследних
	|		ПО НачисленияИУдержания.Сотрудник = СотрудникиСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ПериодРегистрацииКонец, ) КАК ФИОФизЛицСрезПоследних
	|		ПО НачисленияИУдержания.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	НачисленияИУдержания.Организация = &Организация
	|	И НачисленияИУдержания.ПериодРегистрации = &ПериодРегистрации
	|	И НачисленияИУдержания.Валюта = &Валюта" + ?(НЕ ЗначениеЗаполнено(Подразделение), "", "
	|	И НачисленияИУдержания.СтруктурнаяЕдиница = &Подразделение") + " " + ?(НЕ ЗначениеЗаполнено(Сотрудник), "", "
	|	И НачисленияИУдержания.Сотрудник = &Сотрудник") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияИУдержания.Сотрудник.Код,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата)
	|				ИЛИ НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент)
	|			ТОГДА &ПериодРегистрации
	|		ИНАЧЕ НачисленияИУдержания.ДатаНачала
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата)
	|				ИЛИ НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент)
	|			ТОГДА КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ НачисленияИУдержания.ДатаОкончания
	|	КОНЕЦ,
	|	НачисленияИУдержания.Сотрудник,
	|	НачисленияИУдержания.СтруктурнаяЕдиница,
	|	НачисленияИУдержания.СтруктурнаяЕдиница.Наименование,
	|	СотрудникиСрезПоследних.Должность,
	|	ЕСТЬNULL(ДолгНаКонец.СуммаВалОстаток, 0),
	|	ЕСТЬNULL(ДолгНаНачало.СуммаВалОстаток, 0),
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ТОГДА НачисленияИУдержания.ВидНачисленияУдержания
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ТОГДА NULL
	|		ИНАЧЕ НачисленияИУдержания.ВидНачисленияУдержания
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") <> """"
	|			ТОГДА ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|		ИНАЧЕ НачисленияИУдержания.Сотрудник.Наименование
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодразделениеПредставление,
	|	СотрудникПредставление,
	|	ДатаНачала
	|ИТОГИ
	|	МАКСИМУМ(ПодразделениеПредставление),
	|	МАКСИМУМ(Должность),
	|	СУММА(СуммаНачислено),
	|	СУММА(СуммаУдержано),
	|	МАКСИМУМ(СальдоНаКонец),
	|	МАКСИМУМ(СальдоНаНачало),
	|	МАКСИМУМ(Фамилия),
	|	МАКСИМУМ(Имя),
	|	МАКСИМУМ(Отчество)
	|ПО
	|	Подразделение,
	|	Физлицо
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыСПерсоналомОбороты.Регистратор ССЫЛКА Документ.РасходИзКассы
	|			ТОГДА ""Через кассу ""
	|		ИНАЧЕ ""С расч. счета ""
	|	КОНЕЦ КАК ПредставлениеДокумента,
	|	ВЫБОР
	|		КОГДА РасчетыСПерсоналомОбороты.Регистратор.ДокументОснование ССЫЛКА Документ.ПлатежнаяВедомость
	|				И РасчетыСПерсоналомОбороты.Регистратор.ДокументОснование.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежнаяВедомость.Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакАванса,
	|	РасчетыСПерсоналомОбороты.Регистратор.Номер КАк Номер,
	|	РасчетыСПерсоналомОбороты.Регистратор.Дата КАК Дата,
	|	РасчетыСПерсоналомОбороты.Регистратор,
	|	РасчетыСПерсоналомОбороты.Сотрудник,
	|	РасчетыСПерсоналомОбороты.СуммаВалРасход КАК СуммаВыплаты
	|ИЗ
	|	РегистрНакопления.РасчетыСПерсоналом.Обороты(
	|			&ПериодРегистрации,
	|			&ПериодРегистрацииКонец,
	|			Запись,
	|			Организация = &Организация
	|				И Валюта = &Валюта" + ?(НЕ ЗначениеЗаполнено(Подразделение), "", "
	|				И СтруктурнаяЕдиница = &Подразделение") + " " + ?(НЕ ЗначениеЗаполнено(Сотрудник), "", "
	|				И Сотрудник = &Сотрудник") + ") КАК РасчетыСПерсоналомОбороты
	|ГДЕ
	|	(РасчетыСПерсоналомОбороты.Регистратор ССЫЛКА Документ.РасходИзКассы
	|			ИЛИ РасчетыСПерсоналомОбороты.Регистратор ССЫЛКА Документ.РасходСоСчета)
    |
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПерсоналомОбороты.Регистратор.ДокументОснование.Дата,
	|	РасчетыСПерсоналомОбороты.Регистратор.Дата";
	
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодРегистрацииКонец", КонецМесяца(ПериодРегистрации)); 
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ВидДоговораДоговорЗайма", Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;

КонецФункции // ВыполнитьЗапрос()

&НаСервере
// Процедура формирует отчет.
//
Процедура СформироватьВыполнить()

	Если Константы.ИспользоватьНесколькоОрганизаций.Получить() И НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана организация!'");
		ПолеСообщения = "Организация";
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(Отчет, ТекстСообщения,,,ПолеСообщения);
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран период регистрации!'");
		ПолеСообщения = "ПериодРегистрации";
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(Отчет, ТекстСообщения,,,ПолеСообщения);
		Возврат;
	КонецЕсли;

	Если НЕ Константы.ФункциональнаяУчетВалютныхОпераций.Получить() И НЕ ЗначениеЗаполнено(Валюта) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана валюта!'");
		ПолеСообщения = "Валюта";
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(Отчет, ТекстСообщения,,,ПолеСообщения);
		Возврат;
	КонецЕсли;

	РезультатЗапроса = ВыполнитьЗапрос();

	Если РезультатЗапроса[0].Пустой() Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Нет данных для формирования отчета!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	Макет = Отчеты.РасчетныеЛистки.ПолучитьМакет("Макет");

	ОбластьШапка 				= Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовок 			= Макет.ПолучитьОбласть("Заголовок");
	ОбластьНачисленоУдержано 	= Макет.ПолучитьОбласть("НачисленоУдержано");
	ОбластьДетали 				= Макет.ПолучитьОбласть("Детали");
	ОбластьДоходыВыплачено 		= Макет.ПолучитьОбласть("ДоходыВыплачено");
	ОбластьДеталиВыплаты 		= Макет.ПолучитьОбласть("ДеталиВыплаты");
	ОбластьВсего 				= Макет.ПолучитьОбласть("Всего");
	ОбластьПодвал 				= Макет.ПолучитьОбласть("Подвал");
	ОбластьОтбивка 				= Макет.ПолучитьОбласть("Отбивка");

	ТабличныйДокумент.Очистить();

    ОбластьОтбивка.Параметры.ТекстОтбивки = Формат(ПериодРегистрации , "ДФ=""ММММ гггг 'г.' """);
	ТабличныйДокумент.Вывести(ОбластьОтбивка);

    ОбластьОтбивка.Параметры.ТекстОтбивки = "Организация: " + Организация;
	ТабличныйДокумент.Вывести(ОбластьОтбивка);

	ВыборкаПодразделение = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
	Пока ВыборкаПодразделение.Следующий() Цикл

        ОбластьОтбивка.Параметры.ТекстОтбивки = "Подразделение: " + ВыборкаПодразделение.Подразделение;
		ТабличныйДокумент.Вывести(ОбластьОтбивка);
        ТабличныйДокумент.НачатьГруппуСтрок();
		
		ВыборкаФизлицо = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ФизЛицо");
		Пока ВыборкаФизлицо.Следующий() Цикл

			ОбластьШапка.Параметры.Заголовок = "Расчетный листок за " + Формат(ПериодРегистрации , "ДФ=""ММММ гггг 'г.' """);
			ОбластьШапка.Параметры.Организация = Организация;
			ОбластьШапка.Параметры.Заполнить(ВыборкаФизлицо);
			ПредставлениеФизЛицо = УправлениеНебольшойФирмойСервер.ПолучитьФамилиюИмяОтчество(ВыборкаФизлицо.Фамилия, ВыборкаФизлицо.Имя, ВыборкаФизлицо.Отчество, Истина);
			ОбластьШапка.Параметры.ФизЛицо = ?(ЗначениеЗаполнено(ПредставлениеФизЛицо), ПредставлениеФизЛицо, ВыборкаФизлицо.Физлицо);
			ТабличныйДокумент.Вывести(ОбластьШапка);
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);
			ТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);

			ПоследнееНачисление = ТабличныйДокумент.ВысотаТаблицы;
			ПоследнееУдержание = ТабличныйДокумент.ВысотаТаблицы;
			
			ВыборкаДетали = ВыборкаФизлицо.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
			
				Если ВыборкаДетали.Удержание = NULL Тогда
					
					Если ПоследнееНачисление < ПоследнееУдержание Тогда
						
						ТабличныйДокумент.Область(ПоследнееНачисление + 1, 1).Текст = ВыборкаДетали.Начисление;
						ТабличныйДокумент.Область(ПоследнееНачисление + 1, 2, ПоследнееНачисление + 1, 3).Текст = "" + День(ВыборкаДетали.ДатаНачала) + "-" + День(ВыборкаДетали.ДатаОкончания) + " " + Формат(ВыборкаДетали.ДатаОкончания , "ДФ=""МММ гг""");
						ТабличныйДокумент.Область(ПоследнееНачисление + 1, 4).Текст = ВыборкаДетали.ОтработаноДней;
						ТабличныйДокумент.Область(ПоследнееНачисление + 1, 5).Текст = ВыборкаДетали.ОтработаноЧасов;
						ТабличныйДокумент.Область(ПоследнееНачисление + 1, 6, ПоследнееНачисление + 1, 7).Текст = ВыборкаДетали.СуммаНачислено;
					
					Иначе
					
						ОбластьДетали.Параметры.Начисление = ВыборкаДетали.Начисление;
						ОбластьДетали.Параметры.ПериодНачисление = "" + День(ВыборкаДетали.ДатаНачала) + "-" + День(ВыборкаДетали.ДатаОкончания) + " " + Формат(ВыборкаДетали.ДатаОкончания , "ДФ=""МММ гг""");
						ОбластьДетали.Параметры.ОтработаноДнейНачисление = ВыборкаДетали.ОтработаноДней;
						ОбластьДетали.Параметры.ОтработаноЧасовНачисление = ВыборкаДетали.ОтработаноЧасов;
						ОбластьДетали.Параметры.СуммаНачисление = ВыборкаДетали.СуммаНачислено;
						
						ТабличныйДокумент.Вывести(ОбластьДетали);
						
						ОбластьДетали.Параметры.Начисление = Справочники.ВидыНачисленийИУдержаний.ПустаяСсылка();
						ОбластьДетали.Параметры.ПериодНачисление = "";
						ОбластьДетали.Параметры.ОтработаноДнейНачисление = 0;
						ОбластьДетали.Параметры.ОтработаноЧасовНачисление = 0;
						ОбластьДетали.Параметры.СуммаНачисление = 0;
					
					КонецЕсли; 
					
					ПоследнееНачисление = ПоследнееНачисление + 1;
				
				Иначе
					
					Если ПоследнееУдержание < ПоследнееНачисление Тогда
					
						ТабличныйДокумент.Область(ПоследнееУдержание + 1, 8, ПоследнееУдержание + 1, 10).Текст = ВыборкаДетали.Удержание;	
						ТабличныйДокумент.Область(ПоследнееУдержание + 1, 11, ПоследнееУдержание + 1, 12).Текст = "" + День(ВыборкаДетали.ДатаНачала) + "-" + День(ВыборкаДетали.ДатаОкончания) + " " + Формат(ВыборкаДетали.ДатаОкончания , "ДФ=""МММ гг""");
						ТабличныйДокумент.Область(ПоследнееУдержание + 1, 13, ПоследнееУдержание + 1, 14).Текст = ВыборкаДетали.СуммаУдержано;
					
					Иначе
					
						ОбластьДетали.Параметры.Удержание = ВыборкаДетали.Удержание;
						ОбластьДетали.Параметры.ПериодУдержание = "" + День(ВыборкаДетали.ДатаНачала) + "-" + День(ВыборкаДетали.ДатаОкончания) + " " + Формат(ВыборкаДетали.ДатаОкончания , "ДФ=""МММ гг""");
						ОбластьДетали.Параметры.СуммаУдержание = ВыборкаДетали.СуммаУдержано;
						
						ТабличныйДокумент.Вывести(ОбластьДетали);
						
						ОбластьДетали.Параметры.Удержание = Справочники.ВидыНачисленийИУдержаний.ПустаяСсылка();
						ОбластьДетали.Параметры.ПериодУдержание = "";
						ОбластьДетали.Параметры.СуммаУдержание = 0;
					
					КонецЕсли; 
					
					ПоследнееУдержание = ПоследнееУдержание + 1;
				
				КонецЕсли; 
		
			КонецЦикла;

			ОбластьВсего.Параметры.ВсегоНачисления = ВыборкаФизлицо.СуммаНачислено;
			ОбластьВсего.Параметры.ВсегоУдержания = ВыборкаФизлицо.СуммаУдержано;
			ТабличныйДокумент.Вывести(ОбластьВсего);
			
			ТабличныйДокумент.Вывести(ОбластьДоходыВыплачено);
			ВыборкаВыплатСотрудника		= РезультатЗапроса[1].Выбрать();
			
			СтруктураПоискиПоВыборкей	= Новый Структура("Сотрудник", ВыборкаФизлицо.Физлицо);
			Пока ВыборкаВыплатСотрудника.НАйтиСледующий(СтруктураПоискиПоВыборкей) Цикл
				
				ОбластьДеталиВыплаты.Параметры.Заполнить(ВыборкаВыплатСотрудника);
				ОбластьДеталиВыплаты.Параметры.ТекстВыплаты = "" + ВыборкаВыплатСотрудника.ПредставлениеДокумента + ?(ВыборкаВыплатСотрудника.ПризнакАванса, "(аванс) №", " №") + 
																СокрЛП(ВыборкаВыплатСотрудника.Номер) + " от " + Формат(ВыборкаВыплатСотрудника.Дата, "ДФ=dd.MM.yyyy");
				ОбластьДеталиВыплаты.Параметры.ПериодВыплат		= "" + День(ПериодРегистрации) + "-" + День(КонецМесяца(ПериодРегистрации)) + " " + Формат(КонецМесяца(ПериодРегистрации) , "ДФ=""МММ гг""");
				
				ТабличныйДокумент.Вывести(ОбластьДеталиВыплаты);
				
			КонецЦикла;
			
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = ВыборкаФизлицо.СальдоНаНачало;
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода = ВыборкаФизлицо.СальдоНаКонец;
			Если ВыборкаФизлицо.СальдоНаНачало < 0 Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за работником на начало месяца:";
			Иначе	
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за организацией на начало месяца:";
			КонецЕсли; 
			Если ВыборкаФизлицо.СальдоНаКонец < 0 Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца:";
			Иначе	
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за организацией на конец месяца:";
			КонецЕсли; 
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			
		КонецЦикла;

        ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЦикла;	

КонецПроцедуры // Сформировать()

&НаКлиенте
// Процедура - обработчик команды Сформировать.
//
Процедура Сформировать(Команда)
	
	СформироватьВыполнить();
	
КонецПроцедуры

 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события формы ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПериодРегистрации 				= НачалоМесяца(ТекущаяДата());
	ОтображениеПериодаРегистрации 	= Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");
	
	Если Константы.УчетПоКомпании.Получить() Тогда
		
		Организация = Константы.Компания.Получить();
		Элементы.Организация.Видимость = Ложь;
		
	Иначе
		
		Организация 				= УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Справочники.Организации.ОсновнаяОрганизация);
		
	КонецЕсли;
	
	Валюта 							= Константы.ВалютаУчета.Получить();

	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить() Тогда
		
		Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы ОбработкаВыбора
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаКалендаря") > 0 Тогда
		
		ПериодРегистрации = КонецДня(ВыбранноеЗначение);
		УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события Регулирования реквизита ПериодРегистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УправлениеНебольшойФирмойКлиент.ПриРегулированииПериодаРегистрации(ЭтаФорма, Направление);
	УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтаФорма);
	
КонецПроцедуры //ПериодРегистрацииРегулирование()

&НаКлиенте
// Процедура - обработчик события НачалоВыбора реквизита ПериодРегистрации.
//
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	 = Ложь;
	
	ДатаКалендаряПриОткрытии = ?(ЗначениеЗаполнено(ПериодРегистрации), ПериодРегистрации, УправлениеНебольшойФирмойПовтИсп.ПолучитьТекущуюДатаСеанса());
	
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", УправлениеНебольшойФирмойКлиент.ПолучитьПараметрыОткрытияФормыКалендаря(ДатаКалендаряПриОткрытии), ЭтаФорма);
	
КонецПроцедуры //ПериодРегистрацииНачалоВыбора()

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры
