&НаКлиенте
Перем ПараметрыОбработчикаОжидания; 

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Настройки по-умолчанию
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		ОрганизацияПоУмолчанию = Параметры.Организация;
	Иначе
		ОрганизацияПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
		Если Не ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
			ОрганизацияПоУмолчанию =УправлениеНебольшойФирмойСервер.ПолучитьПредопределеннуюОрганизацию();
		КонецЕсли;
	КонецЕсли;
	
	Отчет.Организация = ?(ОрганизацияПоУмолчанию.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
		ОрганизацияПоУмолчанию, Справочники.Организации.ПустаяСсылка());
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	
	Если ЗначениеЗаполнено(Параметры.Патент) Тогда
		Отчет.Патент = Параметры.Патент;
	КонецЕсли;
	УстановитьПериодНаСервере();
	
	Результат.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	Результат.АвтоМасштаб			= Истина;
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если ЗначениеЗаполнено(Отчет.Организация) И ЗначениеЗаполнено(Отчет.Патент)
		И ЗначениеЗаполнено(Отчет.НачалоПериода)
		И ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
		РезультатВыполнения = СформироватьОтчетНаСервере();
		ЗаданиеВыполнилось = РезультатВыполнения.ЗаданиеВыполнено;
	Иначе
		ЗаданиеВыполнилось = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Не ЗаданиеВыполнилось Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.СохранениеПечатнойФормы") Тогда
		
		Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
			ФайлыВоВременномХранилище = ПоместитьТабличныеДокументыВоВременноеХранилище(ВыбранноеЗначение);
			СохранитьПечатныеФормыВПапку(ФайлыВоВременномХранилище, ВыбранноеЗначение.ПапкаДляСохранения);			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	
	ПатентПриИзмененииНаСервере();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = НСтр("ru = 'Книга доходов по патенту'");
	
	Если ЗначениеЗаполнено(Отчет.Патент) Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " " + Отчет.Патент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " "
			+ Отчет.Организация;
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ЗаполнитьСписокВыбораПатентаНаСервере();
	
	ОбновитьТекстЗаголовка(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПатентПриИзмененииНаСервере()
	
	УстановитьПериодНаСервере();
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПатентаНаСервере()

	МассивПатентов	= Справочники.Патенты.ПолучитьПатентыОрганизации(Отчет.Организация);
	Элементы.Патент.СписокВыбора.ЗагрузитьЗначения(МассивПатентов);
	
	Если МассивПатентов.Количество() = 1 Тогда
		Отчет.Патент	= МассивПатентов[0];
	Иначе
		Если МассивПатентов.Найти(Отчет.Патент) = Неопределено Тогда
			Отчет.Патент	= Справочники.Патенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПериодНаСервере();

КонецПроцедуры

&НаСервере
Процедура УстановитьПериодНаСервере()

	Если ЗначениеЗаполнено(Отчет.Патент) Тогда
		СвойстваПатента	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отчет.Патент, "ДатаНачала, ДатаОкончания");
		Отчет.НачалоПериода	= НачалоДня(СвойстваПатента.ДатаНачала);
		Отчет.КонецПериода	= КонецДня(СвойстваПатента.ДатаОкончания);
	Иначе
		Отчет.НачалоПериода	= '00010101';
		Отчет.КонецПериода	= '00010101';
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура("Организация, Патент, НачалоПериода, КонецПериода, СписокСформированныхЛистов");
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, Отчет);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Отчеты.КнигаУчетаДоходовПатент.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	Отчет.СписокСформированныхЛистов = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	// Выводим все листы:
	Результат.Очистить();
	Результат.АвтоМасштаб = Истина;
	
	Для Каждого Лист Из Отчет.СписокСформированныхЛистов Цикл
		ТабДок = Лист.Значение;
		ТабДок.Область().СоздатьФорматСтрок();
		Результат.Вывести(ТабДок);
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектыПечати", Новый СписокЗначений);
	ОткрытьФорму("ОбщаяФорма.СохранениеПечатнойФормы", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПечатныеФормыВПапку(СписокФайловВоВременномХранилище, Знач Папка = "")
	
	#Если ВебКлиент Тогда
		Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
			ПолучитьФайл(ФайлДляЗаписи.АдресВоВременномХранилище, ФайлДляЗаписи.Представление);
		КонецЦикла;
		Возврат;
	#КонецЕсли
	
	Папка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Папка);
	Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлДляЗаписи.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(УникальноеИмяФайла(Папка + ФайлДляЗаписи.Представление));
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Сохранение успешно завершено'"), , НСтр("ru = 'в папку:'") + " " + Папка);
	
КонецПроцедуры

Функция ПоместитьТабличныеДокументыВоВременноеХранилище(НастройкиСохранения)
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	РезультирующийМассив = Новый Массив;
	
	// подготовка архива
	Если НастройкиСохранения.УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ИспользованныеИменаФайлов = Новый Соответствие;
	
	ВыбранныеФорматыСохранения = НастройкиСохранения.ФорматыСохранения;
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	
	ПрефиксИмени = НСтр("ru = 'Книга учета доходов '") + Отчеты.КнигаУчетаДоходовИРасходов.ПолучитьПредставлениеПериода(КонецКвартала(Отчет.КонецПериода));
	ПрефиксИмени = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ПрефиксИмени);
	
	// сохранение печатных форм
	ОбработанныеПечатныеФормы = Новый Массив;
		
	ПечатнаяФорма = Результат;
	
	ОбработанныеПечатныеФормы.Добавить(ПечатнаяФорма);
		
	Для Каждого ТипФайла Из ВыбранныеФорматыСохранения Цикл
		НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
		
		ИмяФайла = ПрефиксИмени ;
		ИмяФайла = ИмяФайла + "." + НастройкиФормата.Расширение;
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
		
		ПолноеИмяФайла = УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);
		ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
		
		Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
			ВставитьКартинкиВHTML(ПолноеИмяФайла);
		КонецЕсли;
		
		Если ЗаписьZipФайла <> Неопределено Тогда 
			ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
		Иначе
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("Представление", ИмяФайла);
			ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
			Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
				ОписаниеФайла.Вставить("Кодировка", "windows-1251");
			КонецЕсли;
			РезультирующийМассив.Добавить(ОписаниеФайла);
		КонецЕсли;
	КонецЦикла;
	
	// Если архив подготовлен, записываем и помещаем его во временное хранилище.
	Если ЗаписьZipФайла <> Неопределено Тогда 
		ЗаписьZipФайла.Записать();
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
		ОписаниеФайла = Новый Структура;
		Если Прав(ПрефиксИмени, 1) = "." Тогда
			ИмяФайлаАрхива = ПрефиксИмени + "zip"
		Иначе
			ИмяФайлаАрхива = ПрефиксИмени + ".zip"
		КонецЕсли;
		ОписаниеФайла.Вставить("Представление", ИмяФайлаАрхива);
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
		РезультирующийМассив.Добавить(ОписаниеФайла);
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат РезультирующийМассив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УникальноеИмяФайла(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	Расширение = Файл.Расширение;
	Папка = Файл.Путь;
	
	Счетчик = 1;
	Пока Файл.Существует() Цикл
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
	КонецЦикла;
	
	Возврат Файл.ПолноеИмя;

КонецФункции

&НаСервере
Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// Ожидается, что в папке будут только картинки.
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

#КонецОбласти
