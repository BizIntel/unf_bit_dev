
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Функция возвращает непустые движения документа.
//
Функция ОпределитьНаличиеДвиженийПоРегистратору() 
	
	ТекстЗапроса = "";	
	ДвиженияДокумента = Отчет.Документ.Метаданные().Движения;
	
	Если ДвиженияДокумента.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ ДвиженияДокумента Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", Отчет.Документ);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Индексы.Добавить("Имя");
	
	Для Каждого СтрокаТаблицыДвижений Из ТаблицаЗапроса Цикл		
		СтрокаТаблицыДвижений.Имя = Врег(СокрЛП(СтрокаТаблицыДвижений.Имя));
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;			
		
КонецФункции

&НаСервере
// Функция возвращает вид регистра.
//
Функция ОпределитьВидРегистра(МетаданныеРегистра)
	
	Если Метаданные.РегистрыНакопления.Индекс(МетаданныеРегистра) >= 0 Тогда
		Возврат "Накопления";
		
	ИначеЕсли Метаданные.РегистрыСведений.Индекс(МетаданныеРегистра) >= 0 Тогда
		Возврат "Сведений";	
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Индекс(МетаданныеРегистра) >= 0 Тогда
		Возврат "Бухгалтерии";
		
	Иначе
		Возврат "";
			
	КонецЕсли;
    	
КонецФункции

&НаСервере
// Процедура формирует список полей для запроса.
//
Процедура СформироватьСписокПолей(МетаданныеРесурса, ТаблицаПолей, СписокПолей)
	
	Для Каждого Ресурс Из МетаданныеРесурса Цикл
		                           
		Если (Ресурс.Тип.СодержитТип(Тип("СправочникСсылка.ХарактеристикиНоменклатуры")) И НЕ Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить())
			ИЛИ (Ресурс.Тип.СодержитТип(Тип("СправочникСсылка.ПартииНоменклатуры")) И НЕ Константы.ФункциональнаяОпцияИспользоватьПартии.Получить())
			ИЛИ (Ресурс.Тип.СодержитТип(Тип("СправочникСсылка.Проекты")) И НЕ Константы.ФункциональнаяОпцияУчетПоПроектам.Получить())
			И (Ресурс.Имя <> "Аналитика") // Прочие расчеты
			Тогда

			Продолжить;
			
		КонецЕсли;
		
		СписокПолей = СписокПолей + ", "+ Ресурс.Имя;
		ТаблицаПолей.Колонки.Добавить(Ресурс.Имя, , Ресурс.Синоним);
		
	КонецЦикла;
			 
			 
КонецПроцедуры

&НаСервере
// Процедура добавляет период в список полей для запроса.
//
Процедура ДобавитьПериодВСписокПолей(ТаблицаПолей, СписокПолей)
	
	СписокПолей = СписокПолей + ", Период";
	ТаблицаПолей.Колонки.Добавить("Период", , "Период");
	
КонецПроцедуры

&НаСервере
// Процедура выводит движения по регистрам сведений и накопления.
//
Процедура ОбработатьВыводДанныхПоМассиву(СписокПолей, ТаблицаРесурсов, ТаблицаИзмерений, ТаблицаРеквизитов, ТаблицаВидДвижений = Неопределено, Знач ИмяРегистра, СинонимРегистра)
	
	Если НЕ ЗначениеЗаполнено(СписокПолей) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ " + СписокПолей +"
		|{ВЫБРАТЬ " + СписокПолей +"}
		|ИЗ " + ИмяРегистра + " КАК Рег
		|ГДЕ Рег.Регистратор = &ДокументОтчета
		|	 И Рег.Активность";
		
	Запрос.УстановитьПараметр("ДокументОтчета", Отчет.Документ);	
        	
    ТаблицаРезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаРезультата Из ТаблицаРезультатЗапроса Цикл
		Если ТаблицаВидДвижений <> Неопределено Тогда
			НоваяСтрока = ТаблицаВидДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
		КонецЕсли;
		НоваяСтрока = ТаблицаРесурсов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
		НоваяСтрока = ТаблицаИзмерений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
	КонецЦикла; 
	
	Макет = Отчеты.ДвиженияДокумента.ПолучитьМакет("Макет");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокОтчета");
		
	ОбластьЗаголовок.Параметры.СинонимРегистра = Строка(СинонимРегистра);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	ТабличныйДокумент.НачатьГруппуСтрок();
	 
	КоличествоСтрокРезультата = ТаблицаРезультатЗапроса.Количество();	
		
	Если Отчет.СпособВыводаОтчета = Перечисления.СпособВыводаОтчета.ПоГоризонтали Тогда
	
		// Вывод в строку
		
		ОбластьЗаголовокЯчейки	 		= Макет.ПолучитьОбласть("ЗаголовокЯчейки");
		ОбластьЯчейка			 		= Макет.ПолучитьОбласть("Ячейка");
		ОбластьОтступ 					= Макет.ПолучитьОбласть("Отступ1");
		
		ТабличныйДокумент.Вывести(ОбластьОтступ);
		Если ТаблицаВидДвижений <> Неопределено Тогда
			ОбластьЗаголовокЯчейки.Параметры.ЗаголовокКолонки = "Вид движения";
	        ТабличныйДокумент.Присоединить(ОбластьЗаголовокЯчейки);
		КонецЕсли;
		Для каждого Колонка Из ТаблицаИзмерений.Колонки Цикл
			ОбластьЗаголовокЯчейки.Параметры.ЗаголовокКолонки = Колонка.Заголовок;
	        ТабличныйДокумент.Присоединить(ОбластьЗаголовокЯчейки);
		КонецЦикла; 
		Для каждого Колонка Из ТаблицаРесурсов.Колонки Цикл
			ОбластьЗаголовокЯчейки.Параметры.ЗаголовокКолонки = Колонка.Заголовок;
	        ТабличныйДокумент.Присоединить(ОбластьЗаголовокЯчейки);
		КонецЦикла;
	    Для каждого Колонка Из ТаблицаРеквизитов.Колонки Цикл
			ОбластьЗаголовокЯчейки.Параметры.ЗаголовокКолонки = Колонка.Заголовок;
	        ТабличныйДокумент.Присоединить(ОбластьЗаголовокЯчейки);
		КонецЦикла;
		
		Для НомерСтроки = 1 По КоличествоСтрокРезультата Цикл
			
			ТабличныйДокумент.Вывести(ОбластьОтступ);
			Если ТаблицаВидДвижений <> Неопределено Тогда
				ОбластьЯчейка.Параметры.Значение = ТаблицаВидДвижений[НомерСтроки-1].ВидДвижения;
				ТабличныйДокумент.Присоединить(ОбластьЯчейка);
				Если ТаблицаВидДвижений[НомерСтроки-1].ВидДвижения = ВидДвиженияНакопления.Расход Тогда
					Область = ТабличныйДокумент.Область("Ячейка");
					Область.ЦветТекста = Новый Цвет(255, 0, 0);
				Иначе
				    Область = ТабличныйДокумент.Область("Ячейка");
					Область.ЦветТекста = Новый Цвет(0, 0, 255);
				КонецЕсли;
			КонецЕсли;
			Для каждого Колонка Из ТаблицаИзмерений.Колонки Цикл
				Значение = ТаблицаИзмерений[НомерСтроки-1][Колонка.Имя]; 
				ОбластьЯчейка.Параметры.Значение = Значение;
		        Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) <> Тип("Дата") И ТипЗнч(Значение) <> Тип("Число")
					И ТипЗнч(Значение) <> Тип("Булево") И ТипЗнч(Значение) <> Тип("Строка") Тогда
					ОбластьЯчейка.Параметры.ЗначениеРасшифровки = Значение;
				Иначе
					ОбластьЯчейка.Параметры.ЗначениеРасшифровки = Неопределено;				
				КонецЕсли; 
		        ТабличныйДокумент.Присоединить(ОбластьЯчейка);
			КонецЦикла; 
			Для каждого Колонка Из ТаблицаРесурсов.Колонки Цикл
				Значение = ТаблицаРесурсов[НомерСтроки-1][Колонка.Имя]; 
				ОбластьЯчейка.Параметры.Значение = Значение;
				Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) <> Тип("Дата") И ТипЗнч(Значение) <> Тип("Число")
					И ТипЗнч(Значение) <> Тип("Булево") И ТипЗнч(Значение) <> Тип("Строка") Тогда
					ОбластьЯчейка.Параметры.ЗначениеРасшифровки = Значение;
				Иначе
					ОбластьЯчейка.Параметры.ЗначениеРасшифровки = Неопределено;
				КонецЕсли; 
		        ТабличныйДокумент.Присоединить(ОбластьЯчейка);
			КонецЦикла; 
			Для каждого Колонка Из ТаблицаРеквизитов.Колонки Цикл
				Значение = ТаблицаРеквизитов[НомерСтроки-1][Колонка.Имя]; 
				ОбластьЯчейка.Параметры.Значение = Значение;
		        Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) <> Тип("Дата") И ТипЗнч(Значение) <> Тип("Число")
					И ТипЗнч(Значение) <> Тип("Булево") И ТипЗнч(Значение) <> Тип("Строка") Тогда
					ОбластьЯчейка.Параметры.ЗначениеРасшифровки = Значение;
				Иначе
					ОбластьЯчейка.Параметры.ЗначениеРасшифровки = Неопределено;				
				КонецЕсли; 
		        ТабличныйДокумент.Присоединить(ОбластьЯчейка);
			КонецЦикла; 
			
		КонецЦикла; 
		
	Иначе
	
		// Вывод таблицы
		
		Если ТаблицаВидДвижений <> Неопределено Тогда
			ОбластьШапки 					= Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьДеталиШапки 				= Макет.ПолучитьОбласть("ДеталиШапки");
			ОбластьДетали 					= Макет.ПолучитьОбласть("Детали");
			ОбластьШапкиВидДвижения 		= Макет.ПолучитьОбласть("ШапкаТаблицыВидДвижения");
			ОбластьДеталиШапкиВидДвижения 	= Макет.ПолучитьОбласть("ДеталиШапкиВидДвижения");
			ОбластьДеталиВидДвижения 		= Макет.ПолучитьОбласть("ДеталиВидДвижения");
			ОбластьОтступ 					= Макет.ПолучитьОбласть("Отступ");
		Иначе	
		    ОбластьШапки 					= Макет.ПолучитьОбласть("ШапкаТаблицы1");
			ОбластьДеталиШапки 				= Макет.ПолучитьОбласть("ДеталиШапки1");
			ОбластьДетали 					= Макет.ПолучитьОбласть("Детали1");
			ОбластьОтступ 					= Макет.ПолучитьОбласть("Отступ2");
		КонецЕсли;
		
			
		
		ТабличныйДокумент.Вывести(ОбластьОтступ);
		
		Если ТаблицаВидДвижений <> Неопределено Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкиВидДвижения);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапки);
	 	
		КоличествоСтрокШапки = Макс(ТаблицаРесурсов.Колонки.Количество(), ТаблицаИзмерений.Колонки.Количество(), ТаблицаРеквизитов.Колонки.Количество());
		ТолстаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
		ТонкаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		
		Для НомерСтроки = 1 По КоличествоСтрокШапки Цикл
			
			ОбластьДеталиШапки.Параметры.Ресурсы = "";
			ОбластьДеталиШапки.Параметры.Измерения = "";
			ОбластьДеталиШапки.Параметры.Реквизиты = "";
			
			Если ТаблицаРесурсов.Колонки.Количество() >= НомерСтроки Тогда
				ОбластьДеталиШапки.Параметры.Ресурсы = ТаблицаРесурсов.Колонки[НомерСтроки-1].Заголовок;
			КонецЕсли; 	
			Если ТаблицаИзмерений.Колонки.Количество() >= НомерСтроки Тогда
				ОбластьДеталиШапки.Параметры.Измерения = ТаблицаИзмерений.Колонки[НомерСтроки-1].Заголовок;
			КонецЕсли; 	
			Если ТаблицаРеквизитов.Колонки.Количество() >= НомерСтроки Тогда
				ОбластьДеталиШапки.Параметры.Реквизиты = ТаблицаРеквизитов.Колонки[НомерСтроки-1].Заголовок;
			КонецЕсли;
						
			ТабличныйДокумент.Вывести(ОбластьОтступ);
			Если ТаблицаВидДвижений <> Неопределено Тогда
				ТабличныйДокумент.Присоединить(ОбластьДеталиШапкиВидДвижения);	
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьДеталиШапки);	
						
			Если НомерСтроки = КоличествоСтрокШапки Тогда
			    Если ТаблицаВидДвижений <> Неопределено Тогда
					Область = ТабличныйДокумент.Область("ДеталиШапкиВидДвижения");
					Область.Обвести(ТолстаяЛиния, , ТолстаяЛиния, ТолстаяЛиния);
					Область = ТабличныйДокумент.Область("ДеталиШапки");
					Область.Обвести(ТолстаяЛиния, , ТолстаяЛиния, ТолстаяЛиния);
				Иначе	
					Область = ТабличныйДокумент.Область("ДеталиШапки1");
					Область.Обвести(ТолстаяЛиния, , ТолстаяЛиния, ТолстаяЛиния);
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		Для НомерСтроки = 1 По КоличествоСтрокРезультата Цикл
			
			ФлагВыведенВидДвижения = Ложь;
			
			Для НомерКолонки = 1 По КоличествоСтрокШапки Цикл
			
				ОбластьДетали.Параметры.Ресурсы = "";
				ОбластьДетали.Параметры.Измерения = "";
				ОбластьДетали.Параметры.Реквизиты = "";
				
				Если ТаблицаРесурсов.Колонки.Количество() >= НомерКолонки Тогда
					ИмяКолонки = ТаблицаРесурсов.Колонки[НомерКолонки-1].Имя;
					Значение = ТаблицаРесурсов[НомерСтроки-1][ИмяКолонки]; 
					ОбластьДетали.Параметры.Ресурсы = Значение;
					Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) <> Тип("Дата") И ТипЗнч(Значение) <> Тип("Число")
						И ТипЗнч(Значение) <> Тип("Булево") И ТипЗнч(Значение) <> Тип("Строка") Тогда
						ОбластьДетали.Параметры.РесурсыРасшифровка = Значение;
					Иначе
						ОбластьДетали.Параметры.РесурсыРасшифровка = Неопределено;
					КонецЕсли;
				КонецЕсли; 	
				Если ТаблицаИзмерений.Колонки.Количество() >= НомерКолонки Тогда
					ИмяКолонки = ТаблицаИзмерений.Колонки[НомерКолонки-1].Имя;
					Значение = ТаблицаИзмерений[НомерСтроки-1][ИмяКолонки]; 
					ОбластьДетали.Параметры.Измерения = Значение;
					Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) <> Тип("Дата") И ТипЗнч(Значение) <> Тип("Число")
						И ТипЗнч(Значение) <> Тип("Булево") И ТипЗнч(Значение) <> Тип("Строка") Тогда
						ОбластьДетали.Параметры.ИзмеренияРасшифровка = Значение;
					Иначе
						ОбластьДетали.Параметры.ИзмеренияРасшифровка = Неопределено;
					КонецЕсли;
				КонецЕсли; 	
				Если ТаблицаРеквизитов.Колонки.Количество() >= НомерКолонки Тогда
					ИмяКолонки = ТаблицаРеквизитов.Колонки[НомерКолонки-1].Имя;
					Значение = ТаблицаРеквизитов[НомерСтроки-1][ИмяКолонки]; 
					ОбластьДетали.Параметры.Реквизиты = Значение;
					Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) <> Тип("Дата") И ТипЗнч(Значение) <> Тип("Число")
						И ТипЗнч(Значение) <> Тип("Булево") И ТипЗнч(Значение) <> Тип("Строка") Тогда
						ОбластьДетали.Параметры.РеквизитыРасшифровка = Значение;
					Иначе
						ОбластьДетали.Параметры.РеквизитыРасшифровка = Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьОтступ);
				
				Если ТаблицаВидДвижений <> Неопределено Тогда

					Если ФлагВыведенВидДвижения Тогда
						ЗначениеПараметра = "";
					Иначе
						ЗначениеПараметра = ТаблицаВидДвижений[НомерСтроки-1]["ВидДвижения"];
						ФлагВыведенВидДвижения = Истина;
					КонецЕсли;

					ОбластьДеталиВидДвижения.Параметры.ВидДвижения = ЗначениеПараметра;
					ТабличныйДокумент.Присоединить(ОбластьДеталиВидДвижения);

                    Если ЗначениеПараметра = ВидДвиженияНакопления.Расход Тогда
						Область = ТабличныйДокумент.Область("ДеталиВидДвижения");
						Область.ЦветТекста = Новый Цвет(255, 0, 0);
					ИначеЕсли ЗначениеПараметра = ВидДвиженияНакопления.Приход Тогда
					    Область = ТабличныйДокумент.Область("ДеталиВидДвижения");
						Область.ЦветТекста = Новый Цвет(0, 0, 255);
					КонецЕсли;
				КонецЕсли;
				
				ТабличныйДокумент.Присоединить(ОбластьДетали);
				
                Если НомерКолонки = КоличествоСтрокШапки Тогда
				    Если ТаблицаВидДвижений <> Неопределено Тогда
						Область = ТабличныйДокумент.Область("ДеталиВидДвижения");
						Область.Обвести(ТонкаяЛиния, , ТонкаяЛиния, ТонкаяЛиния);
                        Область = ТабличныйДокумент.Область("Детали");
						Область.Обвести(ТонкаяЛиния, , ТонкаяЛиния, ТонкаяЛиния);
                    Иначе
                        Область = ТабличныйДокумент.Область("Детали1");
						Область.Обвести(ТонкаяЛиния, , ТонкаяЛиния, ТонкаяЛиния);
					КонецЕсли;
					
				КонецЕсли;

			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЕсли;	
		
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
			    	
КонецПроцедуры

&НаСервере
// Процедура выводит движения по регистру бухгалтерии.
//
Процедура ВывестиЖурналПроводок()
		
	Макет 				= Отчеты.ДвиженияДокумента.ПолучитьМакет("Макет");
	МакетЖурналПроводок = Отчеты.ДвиженияДокумента.ПолучитьМакет("МакетЖурналПроводок");
	ОбластьЗаголовок 	= Макет.ПолучитьОбласть("ЗаголовокОтчета");
	ОбластьШапка 		= МакетЖурналПроводок.ПолучитьОбласть("Шапка");
	ОбластьДетали 		= МакетЖурналПроводок.ПолучитьОбласть("Детали");
		
	ОбластьЗаголовок.Параметры.СинонимРегистра = "Регистр бухгалтерии ""Управленческий""";
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	ТабличныйДокумент.НачатьГруппуСтрок();
	
    ТабличныйДокумент.Вывести(ОбластьШапка);	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Управленческий.Период КАК Период,
	|	Управленческий.Регистратор КАК Регистратор,
	|	Управленческий.НомерСтроки КАК НомерСтроки,
	|	Управленческий.Активность КАК Активность,
	|	Управленческий.СчетДт КАК СчетДт,
	|	Управленческий.СчетКт КАК СчетКт,
	|	Управленческий.Организация КАК Организация,
	|	Управленческий.СценарийПланирования КАК СценарийПланирования,
	|	Управленческий.ВалютаДт КАК ВалютаДт,
	|	Управленческий.ВалютаКт КАК ВалютаКт,
	|	Управленческий.Сумма КАК Сумма,
	|	Управленческий.СуммаВалДт КАК СуммаВалДт,
	|	Управленческий.СуммаВалКт КАК СуммаВалКт,
	|	Управленческий.Содержание КАК Содержание
	|ИЗ
	|	РегистрБухгалтерии.Управленческий КАК Управленческий
	|ГДЕ
	|	Управленческий.Регистратор = &ДокументОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
    
	Запрос.УстановитьПараметр("ДокументОтчета", 	Отчет.Документ);	
			
	ТаблицаРезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаРезультата Из ТаблицаРезультатЗапроса Цикл
			
        ЗаполнитьЗначенияСвойств(ОбластьДетали.Параметры, СтрокаРезультата);
        ТабличныйДокумент.Вывести(ОбластьДетали);

	КонецЦикла; 
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
			    	
КонецПроцедуры

&НаСервере                                              
// Процедура формирует отчет на сервере.
//
Процедура СформироватьОтчет()
	
    Если НЕ ЗначениеЗаполнено(Отчет.Документ) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не выбран документ!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент.Очистить();
	Макет = Отчеты.ДвиженияДокумента.ПолучитьМакет("Макет");
	ДвиженияДокумента = Отчет.Документ.Метаданные().Движения;
		
	// Вывод заголовка
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ГлавныйЗаголовок");
	ОбластьЗаголовок.Параметры.Документ = Строка(Отчет.Документ);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);

    // Поиск регистров, по которым есть движения
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоРегистратору();
	
    ВыводитьЖурналПроводок = Ложь;
			
	// Перебор движений
	Для Каждого СвойстваОбъекта Из ДвиженияДокумента Цикл
		
		// Проверка, есть ли движения по регистру
		СтрокаВТаблицеРегистров = ТаблицаДвижений.Найти(Врег(СвойстваОбъекта.ПолноеИмя()), "Имя");
		
		Если СтрокаВТаблицеРегистров = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВидРегистра = ОпределитьВидРегистра(СвойстваОбъекта);
 		ИмяРегистра = "Регистр" + ВидРегистра + "." + СвойстваОбъекта.Имя;
		СинонимРегистра = "Регистр " + НРег(ВидРегистра) + " """ + СвойстваОбъекта.Синоним + """";
		
		Если ВидРегистра = "Сведений" ИЛИ ВидРегистра = "Накопления" Тогда
			
			СписокПолей = "";
			ТаблицаРесурсов = Новый ТаблицаЗначений;                                            
			ТаблицаИзмерений = Новый ТаблицаЗначений;
			ТаблицаРеквизитов = Новый ТаблицаЗначений;
			
			Если ВидРегистра = "Сведений" И СвойстваОбъекта.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			Иначе
				ДобавитьПериодВСписокПолей(ТаблицаИзмерений, СписокПолей);
			КонецЕсли;
			СформироватьСписокПолей(СвойстваОбъекта.Ресурсы, ТаблицаРесурсов, СписокПолей);
            СформироватьСписокПолей(СвойстваОбъекта.Измерения, ТаблицаИзмерений, СписокПолей);
			СформироватьСписокПолей(СвойстваОбъекта.Реквизиты, ТаблицаРеквизитов, СписокПолей);
            СписокПолей = Прав(СписокПолей, СтрДлина(СписокПолей)-2);
			
			Если (ВидРегистра = "Накопления") И (СвойстваОбъекта.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки) Тогда
				СписокПолей = СписокПолей + ", ВидДвижения";
				ТаблицаВидДвижений = Новый ТаблицаЗначений;
			    ТаблицаВидДвижений.Колонки.Добавить("ВидДвижения", , "Вид движения");
            	ОбработатьВыводДанныхПоМассиву(СписокПолей, ТаблицаРесурсов, ТаблицаИзмерений, ТаблицаРеквизитов, ТаблицаВидДвижений, ИмяРегистра, СинонимРегистра);
			Иначе
                ОбработатьВыводДанныхПоМассиву(СписокПолей, ТаблицаРесурсов, ТаблицаИзмерений, ТаблицаРеквизитов, , ИмяРегистра, СинонимРегистра);
			КонецЕсли; 
            
		ИначеЕсли ВидРегистра = "Бухгалтерии" Тогда
         	
            ВыводитьЖурналПроводок = Истина;

		КонецЕсли;

	КонецЦикла;	
	
	Если ВыводитьЖурналПроводок Тогда
		 ВывестиЖурналПроводок();
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("Документ") Тогда
		Отчет.Документ = Параметры.Документ;
	КонецЕсли; 
	
	Отчет.СпособВыводаОтчета = Перечисления.СпособВыводаОтчета.ПоГоризонтали;
	СпособВыводаОтчета = Отчет.СпособВыводаОтчета;
	ОтчетСформирован = Ложь;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПриСохраненииДанныхВНастройкахНаСервере формы.
//
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("СпособВыводаОтчета", СпособВыводаОтчета);
	
КонецПроцедуры

// Процедура - обработчик события ПриЗагрузкеДанныхИзНастроекНаСервере формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Значение = Настройки.Получить("СпособВыводаОтчета");
	Если Значение <> Неопределено Тогда
		Отчет.СпособВыводаОтчета = Значение;
		СпособВыводаОтчета = Значение;
	КонецЕсли;
		
	ОтчетСформирован = Истина;
	СформироватьОтчет();
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ОтчетСформирован Тогда
		// Отчёт будет не сформирован только один раз при первом открытии этой формы.
		// Т.к. обработчик ПриЗагрузкеДанныхИзНастроекНаСервере не вызывается.
		СформироватьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик нажатия на кнопку "Сформировать".
//
Процедура СформироватьВыполнить()
	
	СформироватьОтчет();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события ПриИзменении элемента СпособВыводаОтчета формы.
//
&НаКлиенте
Процедура СпособВыводаОтчетаПриИзменении(Элемент)
	
	СпособВыводаОтчета = Отчет.СпособВыводаОтчета;
	СформироватьВыполнить();
	
КонецПроцедуры

#КонецОбласти