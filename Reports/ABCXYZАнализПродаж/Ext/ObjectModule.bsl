#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	НастройкиОтчета.ПрограммноеИзменениеФормыОтчета = Истина;
	НастройкиОтчета.ПоказыватьГруппуКолонкиНаФормеОтчета = Ложь;
	НастройкиОтчета.РазрешитьРедактироватьСКД = Ложь;
	
	ЗаполнитьПредопределенныеВариантыОформления(НастройкиВариантов);
	УстановитьТегиВариантов(НастройкиВариантов);
	ДобавитьОписанияСвязанныхПолей(НастройкиВариантов);
	
КонецПроцедуры

Процедура ОбновитьНастройкиНаФорме(НастройкиОтчета, НастройкиСКД, Форма) Экспорт
	
	ДобавитьПолеВыбораПериодичности(НастройкиСКД, Форма);
	
	Для Каждого ТекСтрокаРеквизит Из Форма.ПоляНастроек.ПолучитьЭлементы() Цикл
		
		Если НЕ ТекСтрокаРеквизит.Тип="Параметр" Тогда
			Продолжить;
		КонецЕсли; 
		
		Для Каждого ТекСтрокаЭлемент Из ТекСтрокаРеквизит.Элементы Цикл
			
			ТекЭлемент = Форма.Элементы[ТекСтрокаЭлемент.Ключ];
			
			Если ТекЭлемент.Вид = ВидПоляФормы.ПолеВвода Тогда
				ТекЭлемент.КнопкаВыбора = Ложь;
			КонецЕсли;
			
			Если ТекСтрокаРеквизит.Поле = "ВыводитьЗаголовок" Тогда
				КлючЭлементаВыводитьЗаголовок = ТекСтрокаЭлемент.Ключ;
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрокаРеквизит.Поле = "ПараметрАнализа" Тогда
				ТекЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
				Продолжить;
			КонецЕсли;
			
			Если СтрНачинаетсяС(ТекСтрокаРеквизит.Поле, "Количество") Тогда
				ТекЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
				КлючЭлементаКоличество = ТекЭлемент.Родитель.Имя;
				Продолжить;
			КонецЕсли;
			
			Если СтрНачинаетсяС(ТекСтрокаРеквизит.Поле, "Процент") Тогда
				ТекЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
				Продолжить;
			КонецЕсли;
			
			Если СтрНачинаетсяС(ТекСтрокаРеквизит.Поле, "Параметр") Тогда
				ОбработатьЭлементыПараметровНачКон(ТекЭлемент, ТекСтрокаРеквизит.Поле, Форма);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПереместитьВнизЭлементВыводитьЗаголовок(КлючЭлементаВыводитьЗаголовок, Форма);
	
	ПереместитьПериодичность(КлючЭлементаКоличество, Форма);
	
КонецПроцедуры

Процедура ПриИзмененииНестандартногоРеквизита(Тип, ИмяПоля, СтруктураЗначений, НастройкиСКД, Форма, ИмяЭлемента) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	УправлениеНебольшойФирмойОтчеты.ИсправитьНастройкиГруппировок(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы);
	
	НастройкиОтчета = КомпоновщикНастроек.Настройки;
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(НастройкиОтчета);
	
	СуммаПроцентов = ПараметрыОтчета.ПроцентAКласса + ПараметрыОтчета.ПроцентBКласса + ПараметрыОтчета.ПроцентCКласса;
	Если СуммаПроцентов <> 100 Тогда
		ВызватьИсключение "Сумма процентов критериев распределения по АВС-классам должна быть равна 100%";
	КонецЕсли; 
	
	ОтчетыУНФ.СтандартизироватьСхему(СхемаКомпоновкиДанных);
	ОтчетыУНФ.ДобавитьВычисляемыеПоля(СхемаКомпоновкиДанных);
	
	УправлениеНебольшойФирмойОтчеты.УстановитьМакетОформленияОтчета(НастройкиОтчета);
	УправлениеНебольшойФирмойОтчеты.ВывестиЗаголовокОтчета(ПараметрыОтчета, ДокументРезультат);
	
	РезультатРаспределения = ПолучитьРезультатРаспределения(ПараметрыОтчета);
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаКлассовОбъектов", РезультатРаспределения);
	
	Для каждого ЭлементСтруктуры Из НастройкиОтчета.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ЭлементСтруктуры.Выбор.Элементы.Очистить();
			ПолеПоиска = Новый ПолеКомпоновкиДанных(ПараметрыОтчета.ПараметрАнализа);
			НайденноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.Элементы.Найти(ПолеПоиска);
			Если НайденноеПоле <> Неопределено Тогда
				ВыбранноеПоле = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ПолеПоиска;
				ВыбранноеПоле.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыУсловногоОФормления = ПараметрыОтчета.НастройкиОтчета.УсловноеОформление.Элементы;
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из ЭлементыУсловногоОФормления Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ОформлениеПараметраАнализа" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		ЭлементыУсловногоОФормления.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ЭлементУсловногоОформления = ЭлементыУсловногоОФормления.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(230, 230, 230));
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ОформлениеПараметраАнализа";
	ЭлементУсловногоОформления.Представление = "Оформление параметра анализа";
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПараметрыОтчета.ПараметрАнализа);
	ОформляемоеПоле.Использование = Истина;
	
	Если ПараметрыОтчета.ОбъектАнализа = "Номенклатура" 
		И ПараметрыОтчета.ЕстьХарактеристики Тогда
		
		НовоеПоле = СхемаКомпоновкиДанных.НаборыДанных.КлассификацияОбъектов.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = "Характеристика";
		НовоеПоле.ПутьКДанным = "Характеристика";
		НовоеПоле.Роль.Измерение = Истина;
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		
		Если ПараметрыОтчета.ОбъектАнализа = "Номенклатура" Тогда
			НоваяСвязь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
			НоваяСвязь.ВыражениеИсточник = "Характеристика";
			НоваяСвязь.ВыражениеПриемник = "Характеристика";
			НоваяСвязь.НаборДанныхИсточник = "КлассификацияОбъектов";
			НоваяСвязь.НаборДанныхПриемник = "ДанныеПоПродажам";
		КонецЕсли;
		
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	//Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);

	//Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	//Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	ТаблицаЗафиксирована = Ложь;

	ДокументРезультат.ФиксацияСверху = 0;
	
	//Основной цикл вывода отчета
	ОбластиКУдалению = Новый Массив;
	КоличествоДиаграмм = 0;
	Пока Истина Цикл
		//Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();

		Если ЭлементРезультата = Неопределено Тогда
			//Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
		Иначе
			// Зафиксируем шапку
			Если  Не ТаблицаЗафиксирована 
				  И ЭлементРезультата.ЗначенияПараметров.Количество() > 0 
				  И ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) <> Тип("ДиаграммаКомпоновкиДанных") Тогда

				ТаблицаЗафиксирована = Истина;
				ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;

			КонецЕсли;
			//Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();
	
	Для каждого Область Из ОбластиКУдалению Цикл
		ДокументРезультат.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЦикла;
	
	ОтчетыУНФ.ОбоработатьДиаграммыТабличногоДокумента(ДокументРезультат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПредопределенныеВариантыОформления(НастройкиВариантов)
	
	Для каждого НастройкиТекВарианта Из НастройкиВариантов Цикл
		
		ВариантыОформления = НастройкиТекВарианта.Значение.ВариантыОформления;
		ОтчетыУНФ.ДобавитьВариантыОформленияСумм(ВариантыОформления, "Сумма");
			
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьТегиВариантов(НастройкиВариантов)
	
	НастройкиВариантов["ABCXYZанализПродажПоНоменклатуре"].Теги = НСТР("ru = 'Номенклатура,Продажи'");
	НастройкиВариантов["ABCXYZанализПродажПоКатегориямНоменклатуры"].Теги = НСТР("ru = 'Категории,Продажи'");
	НастройкиВариантов["ABCXYZанализПродажПоПокупателям"].Теги = НСТР("ru = 'Покупатели,Контрагенты,Продажи,CRM'");
	НастройкиВариантов["ABCXYZанализПродажПоМенеджерам"].Теги = НСТР("ru = 'Менеджеры,Сотрудники,Продажи'");
	
КонецПроцедуры

Процедура ДобавитьОписанияСвязанныхПолей(НастройкиВариантов)
	
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["ABCXYZанализПродажПоНоменклатуре"].СвязанныеПоля, "Номенклатура", "Справочник.Номенклатура");
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["ABCXYZанализПродажПоКатегориямНоменклатуры"].СвязанныеПоля, "Номенклатура.КатегорияНоменклатуры", "Справочник.КатегорииНоменклатуры");
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["ABCXYZанализПродажПоПокупателям"].СвязанныеПоля, "Контрагент", "Справочник.Контрагенты");
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["ABCXYZанализПродажПоМенеджерам"].СвязанныеПоля, "Ответственный", "Справочник.Сотрудники");
	
КонецПроцедуры
 
Функция ПолучитьРезультатРаспределения(ПараметрыОтчета)

	Запрос = Новый Запрос;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ПараметрыОтчета.НастройкиОтчета);
	
	Запрос.Текст = СхемаКомпоновкиДанных.НаборыДанных.ДанныеПоПродажам.Запрос;
	
	ЕстьХарактеристики = СтрНайти(Запрос.Текст, "Характеристика") <> 0 И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ПараметрыОтчета.Вставить("ЕстьХарактеристики", ЕстьХарактеристики);
	
	Если Не ЕстьХарактеристики Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(Сумма),
		|	СУММА(Себестоимость),
		|	СУММА(ВаловаяПрибыль)
		|ПО
		|	ПродажиОбороты.Период ПЕРИОДАМИ("+ПараметрыОтчета.Периодичность+", &НачалоПериода, &КонецПериода),
		|	ОбъектАнализа КАК ОбъектАнализа";
	Иначе
		Запрос.Текст = Запрос.Текст +
		"
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(Сумма),
		|	СУММА(Себестоимость),
		|	СУММА(ВаловаяПрибыль)
		|ПО
		|	ПродажиОбороты.Период ПЕРИОДАМИ("+ПараметрыОтчета.Периодичность+", &НачалоПериода, &КонецПериода),
		|	ОбъектАнализа КАК ОбъектАнализа,
		|	Характеристика";
	КонецЕсли;
	
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить();
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));

	КвалификаторЧисла = Новый КвалификаторыЧисла(15, 2);
	ОписаниеТипаЧисло = Новый ОписаниеТипов(Массив, КвалификаторЧисла);
	
	ТаблицаКлассовОбъектов = Новый ТаблицаЗначений;
	ТаблицаКлассовОбъектов.Колонки.Добавить("Объект");
	ТаблицаКлассовОбъектов.Колонки.Добавить("Характеристика");
	ТаблицаКлассовОбъектов.Колонки.Добавить("КлассABC");
	ТаблицаКлассовОбъектов.Колонки.Добавить("КлассXYZ");
	ТаблицаКлассовОбъектов.Колонки.Добавить("КоэффициентВариации", ОписаниеТипаЧисло);
	ТаблицаКлассовОбъектов.Колонки.Добавить("СреднееЗначение", ОписаниеТипаЧисло);
	ТаблицаКлассовОбъектов.Колонки.Добавить("Доля", ОписаниеТипаЧисло);
	ТаблицаКлассовОбъектов.Колонки.Добавить("РаспределениеПоПериодам");
	ТаблицаКлассовОбъектов.Колонки.Добавить("Сумма", ОписаниеТипаЧисло);
	ТаблицаКлассовОбъектов.Колонки.Добавить("Себестоимость", ОписаниеТипаЧисло);
	ТаблицаКлассовОбъектов.Колонки.Добавить("ВаловаяПрибыль", ОписаниеТипаЧисло);
	ТаблицаКлассовОбъектов.Колонки.Добавить("Количество", ОписаниеТипаЧисло);
	
	ЗаполнитьТаблицуКлассовОбъектов(Результат, ТаблицаКлассовОбъектов, ПараметрыОтчета);
	
	Возврат ТаблицаКлассовОбъектов;
	
КонецФункции

// Процедура заполняет данными таблицу значений, распределяет объекты отчета по АВС-классам
// 
// Параметры
//  Выборка                - ВыборкаИзРезультатаЗапроса, по группировке объекта отчета
//  ТаблицаКлассовОбъектов - таблица значений, таблица с распределенными объектами отчета по классам
//
// Возвращаемые значения
//  НЕТ
//
Процедура ЗаполнитьТаблицуКлассовОбъектов(Результат, ТаблицаКлассовОбъектов, ПараметрыОтчета)

	ПараметрАнализа = ПараметрыОтчета.ПараметрАнализа;
	
	КоличествоПериодовАнализа = ПараметрыОтчета.КоличествоПериодовАнализа;
	ПараметрXКлассаНач = ПараметрыОтчета.ПараметрXКлассаНач;
	ПараметрXКлассаКон = ПараметрыОтчета.ПараметрXКлассаКон;
	ПараметрYКлассаНач = ПараметрыОтчета.ПараметрYКлассаНач;
	ПараметрYКлассаКон = ПараметрыОтчета.ПараметрYКлассаКон;
	ПараметрZКлассаНач = ПараметрыОтчета.ПараметрZКлассаНач;
	ПараметрZКлассаКон = ПараметрыОтчета.ПараметрZКлассаКон;
	
	Если ПараметрыОтчета.ОбъектАнализа = "Номенклатура"
		И ПараметрыОтчета.ЕстьХарактеристики Тогда
		
		ВыборкаОбъектовАнализа = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОбъектАнализа");
		Пока ВыборкаОбъектовАнализа.Следующий() Цикл
			
			ВыборкаОбъектов = ВыборкаОбъектовАнализа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Характеристика");
			Пока ВыборкаОбъектов.Следующий() Цикл
				
				СуммаПараметровЗаВсеПериоды = ВыборкаОбъектов[ПараметрАнализа];
				
				СреднееЗначениеПараметра = ?(КоличествоПериодовАнализа = 0, 0, (СуммаПараметровЗаВсеПериоды/КоличествоПериодовАнализа));
				
				СуммаПодкоренногоВыражения = 0;
				НомерПериода = 0;
				
				РаспределениеПоПериодам = Новый Соответствие;
				
				ВыборкаПериодов = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
				Пока ВыборкаПериодов.Следующий() Цикл
					
					Если ВыборкаПериодов.Период = NULL Тогда
						Продолжить;
					Иначе
						Если ВыборкаПериодов[ПараметрАнализа] = NULL Тогда
							СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((0 - СреднееЗначениеПараметра), 2);
							РаспределениеПоПериодам.Вставить(ВыборкаПериодов.Период,0);
						Иначе
							СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((ВыборкаПериодов[ПараметрАнализа] - СреднееЗначениеПараметра), 2);
							РаспределениеПоПериодам.Вставить(ВыборкаПериодов.Период,ВыборкаПериодов[ПараметрАнализа]);
						КонецЕсли; 
					КонецЕсли; 
					
				КонецЦикла;
				
				ЗначениеКорня = SQRT(?(КоличествоПериодовАнализа = 0, 0, (СуммаПодкоренногоВыражения/КоличествоПериодовАнализа)));
				
				КоэфОтносительнойВариации = ?(СреднееЗначениеПараметра = 0, 0, (ЗначениеКорня*100/СреднееЗначениеПараметра));
				КоэфОтносительнойВариации = ?(КоэфОтносительнойВариации<0,-КоэфОтносительнойВариации,КоэфОтносительнойВариации);
				
				НоваяСтрока = ТаблицаКлассовОбъектов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОбъектов);
				НоваяСтрока.Объект                  = ВыборкаОбъектов.ОбъектАнализа;
				НоваяСтрока.КоэффициентВариации     = КоэфОтносительнойВариации;
				НоваяСтрока.СреднееЗначение         = СреднееЗначениеПараметра;
				НоваяСтрока.РаспределениеПоПериодам = РаспределениеПоПериодам;
				
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		ВыборкаОбъектов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОбъектАнализа");
		Пока ВыборкаОбъектов.Следующий() Цикл
			
			СуммаПараметровЗаВсеПериоды = ВыборкаОбъектов[ПараметрАнализа];
			
			СреднееЗначениеПараметра = ?(КоличествоПериодовАнализа = 0, 0, (СуммаПараметровЗаВсеПериоды/КоличествоПериодовАнализа));
			
			СуммаПодкоренногоВыражения = 0;
			НомерПериода = 0;
			
			РаспределениеПоПериодам = Новый Соответствие;
			
			ВыборкаПериодов = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
			Пока ВыборкаПериодов.Следующий() Цикл
				
				Если ВыборкаПериодов.Период = NULL Тогда
					Продолжить;
				Иначе
					Если ВыборкаПериодов[ПараметрАнализа] = NULL Тогда
						СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((0 - СреднееЗначениеПараметра), 2);
						РаспределениеПоПериодам.Вставить(ВыборкаПериодов.Период,0);
					Иначе
						СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((ВыборкаПериодов[ПараметрАнализа] - СреднееЗначениеПараметра), 2);
						РаспределениеПоПериодам.Вставить(ВыборкаПериодов.Период,ВыборкаПериодов[ПараметрАнализа]);
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЦикла;
			
			ЗначениеКорня = SQRT(?(КоличествоПериодовАнализа = 0, 0, (СуммаПодкоренногоВыражения/КоличествоПериодовАнализа)));
			
			КоэфОтносительнойВариации = ?(СреднееЗначениеПараметра = 0, 0, (ЗначениеКорня*100/СреднееЗначениеПараметра));
			КоэфОтносительнойВариации = ?(КоэфОтносительнойВариации<0,-КоэфОтносительнойВариации,КоэфОтносительнойВариации);
			
			НоваяСтрока = ТаблицаКлассовОбъектов.Добавить();
			НоваяСтрока.Объект                  = ВыборкаОбъектов.ОбъектАнализа;
			НоваяСтрока.КоэффициентВариации     = КоэфОтносительнойВариации;
			НоваяСтрока.СреднееЗначение         = СреднееЗначениеПараметра;
			НоваяСтрока.РаспределениеПоПериодам = РаспределениеПоПериодам;
			НоваяСтрока.Сумма = ВыборкаОбъектов.Сумма;
			НоваяСтрока.Себестоимость = ВыборкаОбъектов.Себестоимость;
			НоваяСтрока.ВаловаяПрибыль = ВыборкаОбъектов.ВаловаяПрибыль;
			НоваяСтрока.Количество = ВыборкаОбъектов.Количество;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаКлассовОбъектов.Сортировать("КоэффициентВариации ВОЗР");

	Для каждого Строки Из ТаблицаКлассовОбъектов Цикл
		
		Если Строки.КоэффициентВариации >= ПараметрXКлассаНач И Строки.КоэффициентВариации <= ПараметрXКлассаКон Тогда
			Строки.КлассXYZ = "X-класс";
		ИначеЕсли Строки.КоэффициентВариации > ПараметрYКлассаНач И Строки.КоэффициентВариации <= ПараметрYКлассаКон Тогда
			Строки.КлассXYZ = "Y-класс";
		ИначеЕсли Строки.КоэффициентВариации > ПараметрZКлассаНач И Строки.КоэффициентВариации <= ПараметрZКлассаКон Тогда
			Строки.КлассXYZ = "Z-класс";
		Иначе
			Строки.КлассXYZ = "<Не определен>";
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаКлассовОбъектов.Сортировать(ПараметрАнализа + " ВОЗР");
	
	ВсегоСумма = ТаблицаКлассовОбъектов.Итог(ПараметрАнализа);

	СуммаВысокая = Окр((ВсегоСумма * ПараметрыОтчета.ПроцентAКласса / 100), 2);
	СуммаСредняя = Окр((ВсегоСумма * ПараметрыОтчета.ПроцентBКласса / 100), 2);
	СуммаНизкая = ВсегоСумма - СуммаВысокая - СуммаСредняя;

	СуммаНакопления = 0;
	Для каждого Строки Из ТаблицаКлассовОбъектов Цикл
		
		СуммаНакопления = СуммаНакопления + Строки[ПараметрАнализа];
		
		Если СуммаНакопления <= СуммаНизкая Тогда
			ABCКлассификация = "C-класс";
		ИначеЕсли СуммаНакопления <= (СуммаНизкая + СуммаСредняя) Тогда
			ABCКлассификация = "B-класс";
		Иначе
			ABCКлассификация = "A-класс";
		КонецЕсли;
		
		Строки.КлассABC = ABCКлассификация;
		Строки.Доля     = ?(ВсегоСумма=0,0,Строки[ПараметрАнализа]/ВсегоСумма*100);
		
	КонецЦикла;
	
	СтрокаСортировки = "КлассABC, КлассXYZ";
	ТаблицаКлассовОбъектов.Сортировать(СтрокаСортировки + ", "+ ПараметрАнализа + " УБЫВ");
	
КонецПроцедуры

Функция ПодготовитьПараметрыОтчета(НастройкиОтчета)
	
	НачалоПериода = Дата(1,1,1);
	КонецПериода  = Дата(1,1,1);
	Период = Дата(1,1,1);
	Периодичность = Перечисления.Периодичность.Месяц;
	КоличествоПериодовАнализа = 1;
	ВыводитьЗаголовок = Ложь;
	Заголовок = "ABC/XYZ - анализ продаж";
	
	ОбъектАнализа = "Номенклатура";
	ПараметрАнализа = "Сумма";
	
	ПроцентAКласса = 80;
	ПроцентBКласса = 15;
	ПроцентCКласса = 5;
	
	ПараметрXКлассаНач = 0;
	ПараметрXКлассаКон = 10;
	ПараметрYКлассаНач = 10;
	ПараметрYКлассаКон = 25;
	ПараметрZКлассаНач = 25;
	ПараметрZКлассаКон = 10000;
	
	ПараметрыВключаемыеВТекстОтбора = Новый Массив;
	
	ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ПараметрПериод <> Неопределено
		И ПараметрПериод.Использование
		И ЗначениеЗаполнено(ПараметрПериод.Значение) Тогда
		
		Если ТипЗнч(ПараметрПериод.Значение) = Тип("СтандартнаяДатаНачала") Тогда
			Период = ПараметрПериод.Значение.Дата;
		Иначе
			Период = ПараметрПериод.Значение;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрПериодичность = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Периодичность"));
	Если ПараметрПериодичность <> Неопределено
		И ПараметрПериодичность.Использование
		И ЗначениеЗаполнено(ПараметрПериодичность.Значение) Тогда
		
		Периодичность = ПараметрПериодичность.Значение;
		ПараметрПериодичность.ПредставлениеПользовательскойНастройки = "Периодичность";
		ПараметрыВключаемыеВТекстОтбора.Добавить(ПараметрПериодичность);
	КонецЕсли;
	
	ПараметрКоличествоПериодовАнализа = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КоличествоПериодовАнализа"));
	Если ПараметрКоличествоПериодовАнализа <> Неопределено
		И ПараметрКоличествоПериодовАнализа.Использование Тогда
		
		КоличествоПериодовАнализа = ПараметрКоличествоПериодовАнализа.Значение;
		Если КоличествоПериодовАнализа = 0 Тогда
			КоличествоПериодовАнализа = 1;
		КонецЕсли;
	КонецЕсли;
	
	ПериодКлассификации = РасширенныйПериод(Период, Периодичность, -КоличествоПериодовАнализа);
	
	ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрПериод <> Неопределено Тогда
		
		ПараметрПериод.Значение = ПериодКлассификации.ДатаНачала;
		ПараметрПериод.Использование = Истина;
		
		НачалоПериода = ПараметрПериод.Значение;
	КонецЕсли;
	
	ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрПериод <> Неопределено
		И ЗначениеЗаполнено(Период) Тогда
		
		ПараметрПериод.Значение = ПериодКлассификации.ДатаОкончания;
		ПараметрПериод.Использование = Истина;
		
		КонецПериода = ПараметрПериод.Значение;
	КонецЕсли;
	
	ПараметрВыводитьЗаголовок = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	Если ПараметрВыводитьЗаголовок <> Неопределено
		И ПараметрВыводитьЗаголовок.Использование Тогда
		
		ВыводитьЗаголовок = ПараметрВыводитьЗаголовок.Значение;
	КонецЕсли;
	
	ПараметрВывода = НастройкиОтчета.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
	Если ПараметрВывода <> Неопределено
		И ПараметрВывода.Использование Тогда
		Заголовок = ПараметрВывода.Значение;
	КонецЕсли;
	
	ПараметрОбъектАнализа = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОбъектАнализа"));
	Если ПараметрОбъектАнализа <> Неопределено
		И ПараметрОбъектАнализа.Использование Тогда
		
		ОбъектАнализа = ПараметрОбъектАнализа.Значение;
		ПараметрОбъектАнализа.ПредставлениеПользовательскойНастройки = "Объект анализа";
		ПараметрыВключаемыеВТекстОтбора.Добавить(ПараметрОбъектАнализа);
	КонецЕсли;
	
	ПараметрДляАнализа = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрАнализа"));
	Если ПараметрДляАнализа <> Неопределено
		И ПараметрДляАнализа.Использование Тогда
		
		ПараметрАнализа = ПараметрДляАнализа.Значение;
		ПараметрДляАнализа.ПредставлениеПользовательскойНастройки = "Параметр анализа";
		ПараметрыВключаемыеВТекстОтбора.Добавить(ПараметрДляАнализа);
	КонецЕсли;
	
	ПараметрПроцентAКласса = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПроцентAКласса"));
	Если ПараметрПроцентAКласса <> Неопределено
		И ПараметрПроцентAКласса.Использование Тогда
		
		ПроцентAКласса = ПараметрПроцентAКласса.Значение;
	КонецЕсли;
	
	ПараметрПроцентBКласса = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПроцентBКласса"));
	Если ПараметрПроцентBКласса <> Неопределено
		И ПараметрПроцентBКласса.Использование Тогда
		
		ПроцентBКласса = ПараметрПроцентBКласса.Значение;
	КонецЕсли;
	
	ПараметрПроцентCКласса = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПроцентCКласса"));
	Если ПараметрПроцентCКласса <> Неопределено
		И ПараметрПроцентCКласса.Использование Тогда
		
		ПроцентCКласса = ПараметрПроцентCКласса.Значение;
	КонецЕсли;
	
	ЗначениеПараметраXКлассНач = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрXКлассаНач"));
	Если ЗначениеПараметраXКлассНач <> Неопределено
		И ЗначениеПараметраXКлассНач.Использование Тогда
		
		ПараметрXКлассаНач = ЗначениеПараметраXКлассНач.Значение;
	КонецЕсли;
	
	ЗначениеПараметраXКлассКон = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрXКлассаКон"));
	Если ЗначениеПараметраXКлассКон <> Неопределено
		И ЗначениеПараметраXКлассКон.Использование Тогда
		
		ПараметрXКлассаКон = ЗначениеПараметраXКлассКон.Значение;
	КонецЕсли;
	
	ЗначениеПараметраYКлассНач = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрYКлассаНач"));
	Если ЗначениеПараметраYКлассНач <> Неопределено
		И ЗначениеПараметраYКлассНач.Использование Тогда
		
		ПараметрYКлассаНач = ЗначениеПараметраYКлассНач.Значение;
	КонецЕсли;
	
	ЗначениеПараметраYКлассКон = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрYКлассаКон"));
	Если ЗначениеПараметраYКлассКон <> Неопределено
		И ЗначениеПараметраYКлассКон.Использование Тогда
		
		ПараметрYКлассаКон = ЗначениеПараметраYКлассКон.Значение;
	КонецЕсли;
	
	ЗначениеПараметраZКлассНач = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрZКлассаНач"));
	Если ЗначениеПараметраZКлассНач <> Неопределено
		И ЗначениеПараметраZКлассНач.Использование Тогда
		
		ПараметрZКлассаНач = ЗначениеПараметраZКлассНач.Значение;
	КонецЕсли;
	
	ЗначениеПараметраZКлассКон = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрZКлассаКон"));
	Если ЗначениеПараметраZКлассКон <> Неопределено
		И ЗначениеПараметраZКлассКон.Использование Тогда
		
		ПараметрZКлассаКон = ЗначениеПараметраZКлассКон.Значение;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода"                  , НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                   , КонецПериода);
	ПараметрыОтчета.Вставить("Периодичность"                  , Периодичность);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"              , ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("Заголовок"                      , Заголовок);
	ПараметрыОтчета.Вставить("ОбъектАнализа"                  , ОбъектАнализа);
	ПараметрыОтчета.Вставить("ПараметрАнализа"                , ПараметрАнализа);
	ПараметрыОтчета.Вставить("ПроцентAКласса"                 , ПроцентAКласса);
	ПараметрыОтчета.Вставить("ПроцентBКласса"                 , ПроцентBКласса);
	ПараметрыОтчета.Вставить("ПроцентCКласса"                 , ПроцентCКласса);
	ПараметрыОтчета.Вставить("КоличествоПериодовАнализа"      , КоличествоПериодовАнализа);
	ПараметрыОтчета.Вставить("ПараметрXКлассаНач"             , ПараметрXКлассаНач);
	ПараметрыОтчета.Вставить("ПараметрXКлассаКон"             , ПараметрXКлассаКон);
	ПараметрыОтчета.Вставить("ПараметрYКлассаНач"             , ПараметрYКлассаНач);
	ПараметрыОтчета.Вставить("ПараметрYКлассаКон"             , ПараметрYКлассаКон);
	ПараметрыОтчета.Вставить("ПараметрZКлассаНач"             , ПараметрZКлассаНач);
	ПараметрыОтчета.Вставить("ПараметрZКлассаКон"             , ПараметрZКлассаКон);
	ПараметрыОтчета.Вставить("ПараметрыВключаемыеВТекстОтбора", ПараметрыВключаемыеВТекстОтбора);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"            , "ABCXYZАнализПродаж");
	ПараметрыОтчета.Вставить("НастройкиОтчета"                , НастройкиОтчета);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Возвращает период, увеличенный на количество периодов
//Параметры:
//БазоваяДата - дата, относительно которой рассчитывается период
//Периодичность - размер периода,
//КоличествоПериодов - количество периодов, на которое нужно расширить базовый.
//                     если = 0, то возвращается период, в котором находится базовая дата,
//                     если < 0, то возвращаются период, соответсвующий предыдущим периодам,
//                     если > 0, то возвращаются период, соответсвующий следующим периодам.
//
Функция РасширенныйПериод(БазоваяДата, Периодичность, КоличествоПериодов = 0)

	ОдинДень = 86400;
	Период = Новый СтандартныйПериод;
	Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;

	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда

		Период.ДатаНачала    = НачалоДня(БазоваяДата);
		Период.ДатаОкончания = КонецДня(БазоваяДата);

		Если КоличествоПериодов < 0 Тогда
			Период.ДатаОкончания = Период.ДатаНачала - 1;
			Период.ДатаНачала    = Период.ДатаНачала + ОдинДень * КоличествоПериодов;
		ИначеЕсли КоличествоПериодов > 0 Тогда
			Период.ДатаНачала    = Период.ДатаОкончания + 1;
			Период.ДатаОкончания = Период.ДатаОкончания + ОдинДень * КоличествоПериодов;
		КонецЕсли;

	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда

		Период.ДатаНачала    = НачалоНедели(БазоваяДата);
		Период.ДатаОкончания = КонецНедели(БазоваяДата);

		Если КоличествоПериодов < 0 Тогда
			Период.ДатаОкончания = Период.ДатаНачала - 1;
			Период.ДатаНачала    = Период.ДатаНачала + ОдинДень * 7 * КоличествоПериодов;
		ИначеЕсли КоличествоПериодов > 0 Тогда
			Период.ДатаНачала    = Период.ДатаОкончания + 1;
			Период.ДатаОкончания = Период.ДатаОкончания + ОдинДень * 7 * КоличествоПериодов;
		КонецЕсли;

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада")) Тогда

		ДеньМесяца = День(БазоваяДата);
		Если ДеньМесяца <= 10 Тогда
			НомерДекады = 1;
		ИначеЕсли ДеньМесяца <= 20 Тогда
			НомерДекады = 2;
		Иначе
			НомерДекады = 3;
		КонецЕсли;

		НомерДекады = НомерДекады + КоличествоПериодов;

		Если НомерДекады > 0 Тогда
			СмещениеМесяцев = Цел((НомерДекады-1)/3);
		Иначе
			СмещениеМесяцев = -1 - Цел((-НомерДекады)/3);
		КонецЕсли;

		НомерДекады = НомерДекады - 3*СмещениеМесяцев;
		СмещеннаяДата = ДобавитьМесяц(НачалоМесяца(БазоваяДата), СмещениеМесяцев) + (НомерДекады-1) * 10 * ОдинДень;
		ДеньМесяца = День(СмещеннаяДата);

		Если ДеньМесяца <= 10 Тогда
			Период.ДатаНачала    = НачалоМесяца(СмещеннаяДата);
			Период.ДатаОкончания = Период.ДатаНачала + ОдинДень * 9;
		ИначеЕсли ДеньМесяца <= 20 Тогда
			Период.ДатаНачала    = НачалоМесяца(СмещеннаяДата) + ОдинДень * 9;
			Период.ДатаОкончания = НачалоМесяца(СмещеннаяДата) + ОдинДень * 19;
		Иначе
			Период.ДатаНачала    = НачалоМесяца(СмещеннаяДата) + ОдинДень * 19;
			Период.ДатаОкончания = КонецМесяца(СмещеннаяДата);
		КонецЕсли;

	ИначеЕсли (Периодичность= ПредопределенноеЗначение("Перечисление.Периодичность.Месяц")) Тогда

		Период.ДатаНачала    = НачалоМесяца(БазоваяДата);
		Период.ДатаОкончания = КонецМесяца(БазоваяДата);

		Если КоличествоПериодов < 0 Тогда
			Период.ДатаОкончания = Период.ДатаНачала - 1;
			Период.ДатаНачала = ДобавитьМесяц(Период.ДатаНачала, КоличествоПериодов);
		ИначеЕсли КоличествоПериодов > 0 Тогда
			Период.ДатаНачала = Период.ДатаОкончания + 1;
			Период.ДатаОкончания = ДобавитьМесяц(Период.ДатаОкончания, КоличествоПериодов);
		КонецЕсли;

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал")) Тогда

		Период.ДатаНачала    = НачалоКвартала(БазоваяДата);
		Период.ДатаОкончания = КонецКвартала(БазоваяДата);

		Если КоличествоПериодов < 0 Тогда
			Период.ДатаОкончания = Период.ДатаНачала - 1;
			Период.ДатаНачала    = ДобавитьМесяц(Период.ДатаНачала, 3*КоличествоПериодов);
		ИначеЕсли КоличествоПериодов > 0 Тогда
			Период.ДатаНачала    = Период.ДатаОкончания + 1;
			Период.ДатаОкончания = ДобавитьМесяц(Период.ДатаОкончания, 3*КоличествоПериодов);
		КонецЕсли;

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие")) Тогда

		Если Месяц(БазоваяДата) < 7 Тогда
			Период.ДатаНачала    = НачалоГода(БазоваяДата);
			Период.ДатаОкончания = КонецГода(ДобавитьМесяц(Период.ДатаНачала, - 6));
		Иначе
			Период.ДатаНачала    = ДобавитьМесяц(НачалоГода(БазоваяДата), 6);
			Период.ДатаОкончания = КонецГода(БазоваяДата);
		КонецЕсли;

		Если КоличествоПериодов < 0 Тогда
			Период.ДатаОкончания = Период.ДатаНачала - 1;
			Период.ДатаНачала    = ДобавитьМесяц(Период.ДатаНачала, 6*КоличествоПериодов);
		ИначеЕсли КоличествоПериодов > 0 Тогда
			Период.ДатаНачала    = Период.ДатаОкончания + 1;
			Период.ДатаОкончания = ДобавитьМесяц(Период.ДатаОкончания, 6*КоличествоПериодов);
		КонецЕсли;

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год")) Тогда

		Период.ДатаНачала    = НачалоГода(БазоваяДата);
		Период.ДатаОкончания = КонецГода(БазоваяДата);

		Если КоличествоПериодов < 0 Тогда
			Период.ДатаОкончания = Период.ДатаНачала - 1;
			Период.ДатаНачала    = ДобавитьМесяц(Период.ДатаНачала, 12*КоличествоПериодов);
		ИначеЕсли КоличествоПериодов > 0 Тогда
			Период.ДатаНачала    = Период.ДатаОкончания + 1;
			Период.ДатаОкончания = ДобавитьМесяц(Период.ДатаОкончания, 12*КоличествоПериодов);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Период;
	
КонецФункции

Процедура ОбработатьЭлементыПараметровНачКон(Элемент, ИмяПоля, Форма)
	
	Если Не СтрЗаканчиваетсяНа(ИмяПоля, "Нач")
		И Не СтрЗаканчиваетсяНа(ИмяПоля, "Кон") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяГруппы = Лев(ИмяПоля, СтрДлина(ИмяПоля) - 3);
	
	Группа = Форма.Элементы.Найти(ИмяГруппы);
	
	Если Группа = Неопределено Тогда
		Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Форма.Элементы.ГруппаПараметрыЭлементы);
	КонецЕсли;
	
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Группа.ОтображатьЗаголовок = Ложь;
	
	Если СтрЗаканчиваетсяНа(ИмяПоля, "Нач") Тогда
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Иначе
		Дефис = Форма.Элементы.Добавить(ИмяГруппы + "Дефис", Тип("ДекорацияФормы"), Группа);
		Дефис.Вид = ВидДекорацииФормы.Надпись;
		Дефис.Заголовок = "-";
		Элемент.Ширина = 12;
	КонецЕсли;
	
	Форма.Элементы.Переместить(Элемент, Группа);
	
КонецПроцедуры

Процедура ДобавитьПолеВыбораПериодичности(НастройкиСКД, Форма)
	
	ЗначениеПараметраПериодичность = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Периодичность");
	
	Если Не ЗначениеЗаполнено(ЗначениеПараметраПериодичность.ИдентификаторПользовательскойНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрСтПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СтПериод");
	
	Если ЗначениеЗаполнено(ЗначениеПараметраПериодичность.Значение) Тогда
		ЗначениеПоУмолчанию = ЗначениеПараметраПериодичность.Значение
	Иначе
		ЗначениеПоУмолчанию = УправлениеНебольшойФирмойОтчеты.ПолучитьЗначениеПериодичности(
		ПараметрСтПериод.Значение.ДатаНачала,
		ПараметрСтПериод.Значение.ДатаОкончания);
	КонецЕсли;
	
	Стр = Форма.ПоляНастроек.ПолучитьЭлементы().Добавить();
	Стр.Тип = "Параметр";
	Стр.Поле = "Периодичность";
	Стр.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность");
	Стр.Заголовок = НСтр("ru = 'Периодичность'");
	Стр.ВидЭлемента = "Поле";
	Стр.Реквизиты = Новый Структура;
	Стр.Элементы = Новый Структура;
	Стр.ДополнительныеПараметры = Новый Структура;
	ИмяРеквизита = "ПараметрПериодичность";
	Стр.Реквизиты.Вставить(ИмяРеквизита, ЗначениеПоУмолчанию);
	МассивРеквизитов = Новый Массив;
	Для каждого Элемент Из Стр.Реквизиты Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Элемент.Ключ, Стр.ТипЗначения,, Стр.Заголовок));
	КонецЦикла;
	Стр.Создан = Истина;
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	Форма[ИмяРеквизита] = ЗначениеПоУмолчанию;
	НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра(Стр.Поле, ЗначениеПоУмолчанию);
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Форма.Элементы.ГруппаПараметрыЭлементы);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.КнопкаОткрытия = Ложь;
	Элемент.КнопкаВыбора = Ложь;
	Элемент.КнопкаСоздания = Ложь;
	Элемент.БыстрыйВыбор = Истина;
	Элемент.ЦветРамки = ЦветаСтиля.НедоступныеДанныеЦвет;
	Элемент.ПодсказкаВвода = Стр.Заголовок;
	Элемент.Ширина = 23;
	Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
	Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	
КонецПроцедуры

Процедура ПереместитьПериодичность(КлючЭлементаКоличество, Форма)
	
	Если Не ЗначениеЗаполнено(КлючЭлементаКоличество) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.Переместить(Форма.Элементы.ПараметрПериодичность, Форма.Элементы.ГруппаПараметрыЭлементы, Форма.Элементы[КлючЭлементаКоличество]);
	
КонецПроцедуры

Процедура ПереместитьВнизЭлементВыводитьЗаголовок(КлючЭлементаВыводитьЗаголовок, Форма)
	
	Если Не ЗначениеЗаполнено(КлючЭлементаВыводитьЗаголовок) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.Переместить(Форма.Элементы[КлючЭлементаВыводитьЗаголовок], Форма.Элементы.ГруппаПараметрыЭлементы);
	
КонецПроцедуры

#КонецОбласти

ЭтоОтчетУНФ = Истина;

#КонецЕсли