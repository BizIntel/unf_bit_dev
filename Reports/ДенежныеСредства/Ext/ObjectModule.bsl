#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	НастройкиОтчета.ИспользоватьСравнение = Истина;
	НастройкиОтчета.ИспользоватьПериодичность = Истина;
	НастройкиОтчета.ПрограммноеИзменениеФормыОтчета = Истина;
	
	НастройкиОтчета.ДополнительныеГруппировкиСтрок.Добавить("Статья");
	НастройкиОтчета.ДополнительныеГруппировкиСтрок.Добавить("Аналитика");
	НастройкиОтчета.ДополнительныеГруппировкиСтрок.Добавить("ХозяйственнаяОперация");
	НастройкиОтчета.ДополнительныеГруппировкиКолонок.Добавить("Статья");
	НастройкиОтчета.ДополнительныеГруппировкиКолонок.Добавить("Аналитика");
	НастройкиОтчета.ДополнительныеГруппировкиКолонок.Добавить("ХозяйственнаяОперация");
	
	НастройкиВариантов["Анализ движений в валюте"].Рекомендуемый = Истина;
	НастройкиВариантов["ВедомостьВВалюте"].Рекомендуемый = Истина;
	НастройкиВариантов["ОстаткиВВалюте"].Рекомендуемый = Истина;
	
	НастройкиВариантов["Остатки"].Вставить("РежимПериода", "НаДату");
	НастройкиВариантов["Остатки"].Вставить("ТолькоРесурсыОстатков", Истина);
	НастройкиВариантов["ОстаткиВВалюте"].Вставить("РежимПериода", "НаДату");
	НастройкиВариантов["ОстаткиВВалюте"].Вставить("ТолькоРесурсыОстатков", Истина);
	
	НастройкиВариантов["ВедомостьВВалюте"].Вставить("РежимПериода", "ЗаПериод");
	НастройкиВариантов["Анализ движений"].Вставить("РежимПериода", "ЗаПериод");
	НастройкиВариантов["Анализ движений в валюте"].Вставить("РежимПериода", "ЗаПериод");
	НастройкиВариантов["ДинамикаПоступленияДенежныхСредств"].Вставить("РежимПериода", "ЗаПериод");
	НастройкиВариантов["ДинамикаРасходаДенежныхСредств"].Вставить("РежимПериода", "ЗаПериод");
	
	НастройкиВариантов["Анализ движений"].ИмяМакетаОбразца = "ОбразецАнализДвижений";
	НастройкиВариантов["Анализ движений в валюте"].ИмяМакетаОбразца = "ОбразецАнализДвиженийВВалюте";
	
	// Функциональные опции вариантов
	НастройкиВариантов["Анализ движений"].ФункциональнаяОпция = "УчетВалютныхОпераций";
	НастройкиВариантов["Ведомость"].ФункциональнаяОпция = "УчетВалютныхОпераций";
	НастройкиВариантов["Остатки"].ФункциональнаяОпция = "УчетВалютныхОпераций";
	
	
	ЗаполнитьПредопределенныеВариантыОформления(НастройкиВариантов);
	УстановитьТегиВариантов(НастройкиВариантов);
	
КонецПроцедуры

Процедура ОбновитьНастройкиНаФорме(НастройкиОтчета, НастройкиСКД, Форма) Экспорт
	
	ДобавитьПолеВыбораПериодичности(НастройкиСКД, Форма);
	
	// Ограничение выбора банковских счетов только счетами организации
	СтрНастройки = Форма.СтрокаОписанияПоляВызов("Фильтр", "БанковскийСчетКасса");
	Если СтрНастройки<>Неопределено Тогда
		Для каждого ОписаниеЭлемента Из СтрНастройки.Элементы Цикл
			ЭлементФормы = Форма.Элементы[ОписаниеЭлемента.Ключ];
			Если ТипЗнч(ЭлементФормы)=Тип("ПолеФормы") И ЭлементФормы.Вид=ВидПоляФормы.ПолеВвода Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Организации.Ссылка
				|ИЗ
				|	Справочник.Организации КАК Организации";
				МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				ПараметрВыбора = Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(МассивОрганизаций));
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(ПараметрВыбора);
				ЭлементФормы.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриИзмененииНестандартногоРеквизита(Тип, ИмяПоля, СтруктураЗначений, НастройкиСКД, Форма, ИмяЭлемента) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ОтчетыУНФ.ПриКомпоновкеРезультата(КомпоновщикНастроек, СхемаКомпоновкиДанных, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПредопределенныеВариантыОформления(НастройкиВариантов)
	
	МассивПолейСумм = Новый Массив;
	Для каждого ДоступноеПоле Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если НЕ ДоступноеПоле.Ресурс Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоля = Строка(ДоступноеПоле.Поле);
		МассивПолейСумм.Добавить(ИмяПоля);
	КонецЦикла; 
	
	Для каждого НастройкиТекВарианта Из НастройкиВариантов Цикл
		ВариантыОформления = НастройкиТекВарианта.Значение.ВариантыОформления;
		ОтчетыУНФ.ДобавитьВариантыОформленияСумм(ВариантыОформления, МассивПолейСумм);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьТегиВариантов(НастройкиВариантов)
	
	НастройкиВариантов["Ведомость"].Теги = НСтр("ru = 'Деньги,Кассы,Банки'");
	НастройкиВариантов["Остатки"].Теги = НСтр("ru = 'Деньги,Кассы,Банки'");
	НастройкиВариантов["Анализ движений"].Теги = НСтр("ru = 'Деньги'");
	НастройкиВариантов["ВедомостьВВалюте"].Теги = НСтр("ru = 'Главное,Деньги,Кассы,Банки,Валюты'");
	НастройкиВариантов["ОстаткиВВалюте"].Теги = НСтр("ru = 'Деньги,Кассы,Банки,Валюты'");
	НастройкиВариантов["Анализ движений в валюте"].Теги = НСтр("ru = 'Деньги,Валюты'");
	НастройкиВариантов["ДинамикаПоступленияДенежныхСредств"].Теги = НСтр("ru = 'Деньги,Поступления'");
	НастройкиВариантов["ДинамикаРасходаДенежныхСредств"].Теги = НСтр("ru = 'Деньги,Платежи'");
	
КонецПроцедуры

Процедура ДобавитьПолеВыбораПериодичности(НастройкиСКД, Форма)
	
	ЗначениеПараметраПериодичность = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Периодичность");
	
	Если Не ЗначениеЗаполнено(ЗначениеПараметраПериодичность.ИдентификаторПользовательскойНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрСтПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СтПериод");
	
	Если ЗначениеЗаполнено(ЗначениеПараметраПериодичность.Значение) Тогда
		ЗначениеПоУмолчанию = ЗначениеПараметраПериодичность.Значение
	Иначе
		ЗначениеПоУмолчанию = УправлениеНебольшойФирмойОтчеты.ПолучитьЗначениеПериодичности(
		ПараметрСтПериод.Значение.ДатаНачала,
		ПараметрСтПериод.Значение.ДатаОкончания);
	КонецЕсли;
	
	Стр = Форма.ПоляНастроек.ПолучитьЭлементы().Добавить();
	Стр.Тип = "Параметр";
	Стр.Поле = "Периодичность";
	Стр.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность");
	Стр.Заголовок = НСтр("ru = 'Периодичность'");
	Стр.ВидЭлемента = "Поле";
	Стр.Реквизиты = Новый Структура;
	Стр.Элементы = Новый Структура;
	Стр.ДополнительныеПараметры = Новый Структура;
	ИмяРеквизита = "ПараметрПериодичность";
	Стр.Реквизиты.Вставить(ИмяРеквизита, ЗначениеПоУмолчанию);
	МассивРеквизитов = Новый Массив;
	Для каждого Элемент Из Стр.Реквизиты Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Элемент.Ключ, Стр.ТипЗначения,, Стр.Заголовок));
	КонецЦикла;
	Стр.Создан = Истина;
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	Форма[ИмяРеквизита] = ЗначениеПоУмолчанию;
	НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра(Стр.Поле, ЗначениеПоУмолчанию);
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Форма.Элементы.ГруппаПараметрыЭлементы);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.КнопкаОткрытия = Ложь;
	Элемент.КнопкаВыбора = Ложь;
	Элемент.КнопкаСоздания = Ложь;
	Элемент.БыстрыйВыбор = Истина;
	Элемент.ЦветРамки = ЦветаСтиля.НедоступныеДанныеЦвет;
	Элемент.ПодсказкаВвода = Стр.Заголовок;
	Элемент.Ширина = 23;
	Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
	Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	
	ПереместитьВнизЭлементВыводитьЗаголовок(Форма);
	
КонецПроцедуры

Процедура ПереместитьВнизЭлементВыводитьЗаголовок(Знач Форма)
	
	Для Каждого ТекСтрокаРеквизит Из Форма.ПоляНастроек.ПолучитьЭлементы() Цикл
		
		Если НЕ ТекСтрокаРеквизит.Тип = "Параметр" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСтрокаЭлемент Из ТекСтрокаРеквизит.Элементы Цикл
			
			Если ТекСтрокаРеквизит.Поле = "ВыводитьЗаголовок" Тогда
				Форма.Элементы.Переместить(Форма.Элементы[ТекСтрокаЭлемент.Ключ], Форма.Элементы.ГруппаПараметрыЭлементы);
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

ЭтоОтчетУНФ = Истина;

#КонецЕсли