//Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

//Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

//#Если Клиент Тогда
//	
//// Формирование отчета
//Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
//	
//	Настройка                  = КомпоновщикНастроек.ПолучитьНастройки();
//	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
//	
//	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета);
//	
//	УдалитьЛишниеПредставленияВШапке(Результат);
//	КомпоновщикНастроек.ЗагрузитьНастройки(Настройка);
//	
//КонецФункции

//Процедура УдалитьЛишниеПредставленияВШапке(Результат)
//	
//	Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
//	Пока Ячейка <> Неопределено Цикл
//		УдаляемаяОбласть = Результат.Область("R"+Ячейка.Верх);
//		Результат.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
//		Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
//	КонецЦикла;
//	
//КонецПроцедуры

//// Сохранение настроек отчета
//Процедура СохранитьНастройку() Экспорт

//	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
//	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
//	
//КонецПроцедуры

//// Применение сохраненных настроек отчета
//Процедура ПрименитьНастройку() Экспорт
//	
//	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

//	// Считываение структуры настроек отчета
// 	Если Не СохраненнаяНастройка.Пустая() Тогда
//		
//		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
//		Если Не СтруктураНастроек = Неопределено Тогда
//			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
//			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
//		Иначе
//			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
//		КонецЕсли;
//		
//	Иначе
//		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
//	КонецЕсли;

//КонецПроцедуры

//	
//// Настройка отчета при отработки расшифровки
//Процедура Настроить(Отбор) Экспорт
//	
//	// Настройка отбора
//	Для каждого ЭлементОтбора Из Отбор Цикл
//		
//		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
//			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
//		Иначе
//			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
//		КонецЕсли;
//		
//		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
//			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
//		Иначе
//			НовыйЭлементОтбора.Использование  = Истина;
//			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
//			Если ЭлементОтбора.Иерархия Тогда
//				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
//					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
//				Иначе
//					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
//				КонецЕсли;
//			Иначе
//				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
//					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
//				Иначе
//					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//				КонецЕсли;
//			КонецЕсли;
//			
//			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
//			
//		КонецЕсли;                                    
//				
//	КонецЦикла;
//	
//	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
//	
//КонецПроцедуры

//Функция ЕстьДетальныеПоля(ВыбранныеПоля)
//	ЕстьРесурсы = ложь;
//	Для каждого ВыбраноеПоле из ВыбранныеПоля Цикл
//		ДоступноеПоле = ТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбраноеПоле.Поле, КомпоновщикНастроек);
//		Если ДоступноеПоле <> Неопределено тогда
//			Если ДоступноеПоле.Ресурс тогда
//				ЕстьРесурсы = истина;
//			Иначе
//				ЕстьРесурсы = ложь;
//				Прервать;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	Возврат Не ЕстьРесурсы;
//КонецФункции

//// Доработка компоновщика отчетов перед выводом
//Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
//	
//	ЕстьКодДохода                = ПрисутствуетПоле("КодДохода");
//	ЕстьВидРасчета               = ПрисутствуетПоле("ВидРасчета");
//	ЕстьРегистратор              = ПрисутствуетПоле("Регистратор"); 
//	ЕстьСтавкаНалогообложения    = ПрисутствуетПоле("НДФЛ.СтавкаНалогообложенияНДФЛ"); 
//	ЕстьФизЛицо                  = ПрисутствуетПоле("Сотрудник");
//	ЕстьФизЛицо                  = ЕстьФизЛицо или ПрисутствуетПоле("Сотрудник.ФизЛицо");
//	ЕстьНалоговыйРежим           = ПрисутствуетПоле("НалоговыйРежим");
//	ЕстьВидПособия               = ПрисутствуетПоле("Пособия.ВидПособия");
//	ЕстьРебенок                  = ПрисутствуетПоле("Пособия.Ребенок");
//	ЕстьВидЗанятости             = ПрисутствуетПоле("Пособия.ВидЗанятости");
//	ЕстьСреднийЗаработок         = ПрисутствуетПоле("Пособия.РазмерСреднегоЗаработка");
//	ЕстьВидСтрахования           = ПрисутствуетПоле("Пособия.ВидСтрахования");
//	ЕстьКодПоОКАТО               = ПрисутствуетПоле("НДФЛ.КодПоОКАТО"); 
//	ЕстьВычет                    = ПрисутствуетПоле("НДФЛ.КодВычетНДФЛ"); 
//	
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КодДохода",   ЕстьКодДохода);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ЕстьВидРасчета",  ЕстьВидРасчета);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Регистратор", ЕстьРегистратор);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СтавкаНалогообложенияРезидента", ЕстьСтавкаНалогообложения);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ФизЛицо",     ЕстьФизЛицо);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НалоговыйРежим",     ЕстьНалоговыйРежим);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидПособия",              ЕстьВидПособия);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Ребенок",                 ЕстьРебенок);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидЗанятости",            ЕстьВидЗанятости);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "РазмерСреднегоЗаработка", ЕстьСреднийЗаработок);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидСтрахования",          ЕстьВидСтрахования);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КодПоОКАТО",              ЕстьКодПоОКАТО);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Вычет",                   ЕстьВычет);
//	
//	Если ЕстьВычет тогда 
//		Если ЕстьКодДохода тогда 
//			Сообщить("Поле Вычет не возможно использовать с группировкой или отбором по полю ""Код дохода"".");
//		КонецЕсли;
//	КонецЕсли;
//	
//	ВыбранныеПоля = ТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
//	
//	СписокПолей = Новый СписокЗначений;
//	
//	Для каждого ВыбранноеПоле из ВыбранныеПоля Цикл
//		ДоступноеПоле = ТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбранноеПоле.Поле, КомпоновщикНастроек);
//		Если ДоступноеПоле <> Неопределено И ДоступноеПоле.Родитель <> Неопределено тогда
//			Если ЕстьКодДохода тогда
//				Если Найти(ДоступноеПоле.Поле, "Пособия.") <> 0 тогда
//					Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Код по ОКАТО"".");
//					ДобавитьПустоеОформдениеПоля(ВыбранноеПоле.Поле);
//					СписокПолей.Добавить(ДоступноеПоле.Поле);
//				КонецЕсли;
//				Если Найти(ДоступноеПоле.Поле, "ЕСН.") = 0 и Найти(ДоступноеПоле.Поле, "База") = 0 и Строка(ДоступноеПоле.Поле) <> "ЕСН.Начислено" и Строка(ДоступноеПоле.Поле) <> "ЕСН.НачисленоСкидка" тогда
//					Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Вид расчета"".");
//					ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
//					СписокПолей.Добавить(ДоступноеПоле.Поле);
//				КонецЕсли;
//			КонецЕсли;
//			Если ЕстьВидРасчета тогда
//				Если Найти(ДоступноеПоле.Поле, "База") = 0 и Строка(ДоступноеПоле.Поле) <> "ЕСН.Начислено" и Строка(ДоступноеПоле.Поле) <> "ЕСН.НачисленоСкидка" тогда
//					Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Вид расчета"".");
//					ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
//					СписокПолей.Добавить(ДоступноеПоле.Поле);
//				КонецЕсли;
//			КонецЕсли;
//			Если ЕстьРегистратор тогда
//				Если Найти(ДоступноеПоле.Поле, "ФССНС.") <> 0 тогда
//					Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Регистратор"".");
//					ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
//					СписокПолей.Добавить(ДоступноеПоле.Поле);
//				КонецЕсли;
//			КонецЕсли;
//			Если ЕстьСтавкаНалогообложения	тогда
//				Если Найти(ДоступноеПоле.Поле, "НДФЛ.") = 0 тогда
//					Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Ставка налогообложения"".");
//					ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
//					СписокПолей.Добавить(ДоступноеПоле.Поле);
//				КонецЕсли;
//			КонецЕсли;
//			Если ЕстьФизЛицо тогда
//				Если Найти(ДоступноеПоле.Поле, "ФССНС.") <> 0 тогда
//					Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Сотрудник"".");
//					ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
//					СписокПолей.Добавить(ДоступноеПоле.Поле);
//				КонецЕсли;
//			КонецЕсли;
//			Если ЕстьВидПособия или ЕстьРебенок или ЕстьВидЗанятости или ЕстьСреднийЗаработок или ЕстьВидСтрахования тогда
//				Если Найти(ДоступноеПоле.Поле, "Пособия.") = 0 тогда
//					Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Вид пособия"".");
//					ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
//					СписокПолей.Добавить(ДоступноеПоле.Поле);
//				КонецЕсли;
//			КонецЕсли;
//			Если ЕстьНалоговыйРежим тогда
//				Если Найти(ДоступноеПоле.Поле, "ЕСН.") = 0 и Найти(ДоступноеПоле.Поле, "ПФР.") = 0 тогда
//					Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Налоговый режим"".");
//					ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
//					СписокПолей.Добавить(ДоступноеПоле.Поле);
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;

//	Если ЕстьДетальныеПоля(ВыбранныеПоля) тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДобавитьОтборИлиПоВсемПоказателям(КомпоновщикНастроек.Настройки, ВыбранныеПоля, СписокПолей);
//	
//КонецПроцедуры

//Процедура ДобавитьПустоеОформдениеПоля(Поле)
//	
//	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
//	ЗначениеТекст = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Text"));
//	ЗначениеТекст.Значение = "-";
//	ЗначениеТекст.Использование = Истина;
//	
//	ПолеОформления = УсловноеОформление.Поля.Элементы.Добавить();
//	ПолеОформления.Использование = Истина;
//	ПолеОформления.Поле = Поле;
//	
//КонецПроцедуры


//Процедура ДобавитьОтборИлиПоВсемПоказателям(СтруктураОтчета, ВыбранныеПоля, СписокПолей)
//	// создадим отбор или 
//	ГруппаИли = СтруктураОтчета.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
//	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
//	Для каждого ВыбранноеПоле из ВыбранныеПоля Цикл
//		Если Найти(Строка(ВыбранноеПоле.Поле), "UserField") > 0 или СписокПолей.НайтиПоЗначению(ВыбранноеПоле.Поле) <> Неопределено тогда
//			Продолжить;
//		КонецЕсли;
//		ТиповыеОтчеты.ДобавитьОтбор(ГруппаИли, Строка(ВыбранноеПоле.Поле), 0, ВидСравненияКомпоновкиДанных.НеРавно);
//	КонецЦикла;
//	Если ГруппаИли.Элементы.Количество() = 0 тогда
//		ГруппаИли.Использование = истина;
//	КонецЕсли;
//КонецПроцедуры


//Функция ПрисутствуетПоле(Поле)
//	
//	ЕстьГруппировка = ложь;
//	
//	ЕстьГруппировка = НайтиПоле(КомпоновщикНастроек.Настройки.Структура, Поле);

//	
//	//Для каждого ЭлементСтруктуры из КомпоновщикНастроек.Настройки.Структура Цикл
//	//	
//	//	Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
//	//		
//	//		ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Строки, Поле) или НайтиПоле(ЭлементСтруктуры.Колонки, Поле);
//	//		
//	//	ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") тогда
//	//		
//	//		ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Структура, Поле);
//	//		
//	//	ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
//	//		
//	//		Если ЭлементСтруктуры.Точки.Количество() <> 0 тогда
//	//			
//	//			ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Точки, Поле) ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле);
//	//			
//	//		КонецЕсли;
//	//		
//	//	КонецЕсли;
//	//	
//	//КонецЦикла;
//	
//	Если ЕстьГруппировка тогда
//		Возврат ЕстьГруппировка;
//	КонецЕсли;
//	
//	// найти поле группировки в отборе
//	Для каждого ОтборПоле из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
//		
//		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
//		
//		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
//			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
//		Иначе
//			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
//				
//				ЕстьГруппировка = истина;
//				
//				Прервать;
//				
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	ВыбранныеПоля = ТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
//	
//	Для каждого ПолеВыбора из ВыбранныеПоля Цикл
//		
//		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
//		
//		Если ТипЗНЧ(ПолеВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") И ПолеВыбора.Использование И ПолеВыбора.Поле = ПолеПериодРегистрации тогда
//			
//			ЕстьГруппировка = истина;
//			
//			Прервать;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	
//	Возврат ЕстьГруппировка;
//	
//КонецФункции 

//Функция ИспользуетсяОтбор(Элементы, ПолеПериодРегистрации)
//	
//	ЕстьГруппировка = ложь;
//	
//	Для каждого ОтборПоле из Элементы Цикл
//		
//		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
//			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
//		Иначе
//			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
//				
//				ЕстьГруппировка = истина;
//				
//				Прервать;
//				
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат ЕстьГруппировка;
//	
//КонецФункции

//// Функция возвращает значение истина, если в группировках элементов структуры присутствует поле "Период регистрации"
////
//Функция НайтиПоле(Структура, Поле)
//	
//	ЕстьПоле = ложь;
//	
//	Если ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") 
//	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
//	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
//	 тогда
//		
//		Возврат ЕстьПоле;
//		
//	КонецЕсли;
//	
//	ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
//	
//	Для каждого ЭлементСтруктуры из Структура Цикл
//		
//		Если Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
//			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
//			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
//			Для каждого ПолеГруппировки из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
//				Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеПериодРегистрации тогда
//					ЕстьПоле = истина;
//					Прервать;
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
//		
//		Если ЕстьПоле тогда
//			Прервать;
//		КонецЕсли;
//		Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
//			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Строки, Поле) или НайтиПоле(ЭлементСтруктуры.Колонки, Поле);
//		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
//			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
//			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
//			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Структура, Поле);
//		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
//			Если ЭлементСтруктуры.Точки.Количество() <> 0 тогда
//				ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Точки, Поле) ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле);
//			КонецЕсли;
//		КонецЕсли;

//	КонецЦикла;
//	
//	Возврат ЕстьПоле;
//	
//КонецФункции //НайтиПоле()
//#КонецЕсли



//Если СохраненнаяНастройка = Неопределено Тогда
//	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
//КонецЕсли;

//Если КомпоновщикНастроек = Неопределено Тогда
//	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
//КонецЕсли;