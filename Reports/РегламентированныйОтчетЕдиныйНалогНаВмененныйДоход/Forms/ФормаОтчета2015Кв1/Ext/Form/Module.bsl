&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2015Кв1";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхРаздел1   = Новый Структура;
	СтруктураДанныхРаздел3   = Новый Структура;
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2));
	
	СтруктураРеквизитовФормы.ИдМСЧ_Раздел1   = "П00001000";
	СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1 = "П0000200062";
	СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2 = "П0000200065";
	
	КолИсхСтрокМСЧ_Раздел1   = 1;
	КолИсхСтрокМСЧ_Раздел2_1 = 1;
	КолИсхСтрокМСЧ_Раздел2_2 = 1;
	
	КолКолонокИдМСЧ_Раздел1   = 2;
	КолКолонокИдМСЧ_Раздел2_1 = 1;
	КолКолонокИдМСЧ_Раздел2_2 = 1;
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел1,   СтруктураРеквизитовФормы.ИдМСЧ_Раздел1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1, СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2, СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2);
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел1,   КолИсхСтрокМСЧ_Раздел1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1, КолИсхСтрокМСЧ_Раздел2_1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2, КолИсхСтрокМСЧ_Раздел2_2);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел1,   КолКолонокИдМСЧ_Раздел1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1, КолКолонокИдМСЧ_Раздел2_1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2, КолКолонокИдМСЧ_Раздел2_2);
	
	ИнициализацияМногостраничныхРазделов();
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2", "ТаблицаСтраницыРаздела2");
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2015";
	
	СтруктураРеквизитовФормы.мКодОтчета = "1152016";
	
	СтруктураРеквизитовФормы.мПечатныеформы     = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.РегистрацияВНалОргане    = Параметры.НалоговыйОрган;
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчетаДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("МногострочныеИсключения");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("ОбязРазделов");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("РегистрацияВНалОргане");
	СтруктураРеквизитовФормы.Вставить("ПеречисленияЮрФизЛицо");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ПолноеНаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("мВерсияОтчета");
	СтруктураРеквизитовФормы.Вставить("мДанныеОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЕстьВыбранные");
	СтруктураРеквизитовФормы.Вставить("мИнтервалАвтосохранения");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("ОпределятьТрудНаемныхРабочих");
	СтруктураРеквизитовФормы.Вставить("ИПИспользуетТрудНаемныхРаботников");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел1");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел2_1");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел2_2");
	СтруктураРеквизитовФормы.Вставить("РасчетныйКалендарь");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("СообщатьОНезаполненномКодеПоОКТМОВРазделе2", Истина);
	
	// Свойство "ОтображатьКнопкуРасшифровать" необходимо для работы
	// универсального механизма раскраски ячеек с показателями.
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздела2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	УстановитьМаскиВПоляхВвода(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	Если НЕ БезОткрытияФормы Тогда
		
		СформироватьСпискиВыбора();
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	СтруктураРеквизитовФормы.ОпределятьТрудНаемныхРабочих = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	СтруктураРеквизитовФормы.ИПИспользуетТрудНаемныхРаботников = РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(СтруктураРеквизитовФормы.Организация);
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ИсходнаяОрганизация = СтруктураРеквизитовФормы.Организация;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ОтобразитьНомерКорректировки(ЭтаФорма);
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		ЗаполнитьКодПоМестуПоУмолчанию();
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			
			ИсходнаяОрганизация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
			ИсходныйПериод = КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
			
			Если ИсходнаяОрганизация <> СтруктураРеквизитовФормы.Организация Тогда
				
				ЗаполнитьКодПоМестуПоУмолчанию();
				
				СтароеЗначениеПризнакаНалогоплательщика = СтруктураДанныхРаздел3.П000030000503;
				
				Если СтруктураРеквизитовФормы.ОпределятьТрудНаемныхРабочих И СтруктураРеквизитовФормы.ИП
					И НЕ СтруктураРеквизитовФормы.ИПИспользуетТрудНаемныхРаботников Тогда
					СтруктураДанныхРаздел3.П000030000503 = "2";
				Иначе
					СтруктураДанныхРаздел3.П000030000503 = "1";
				КонецЕсли;
				
				Если СтароеЗначениеПризнакаНалогоплательщика <> СтруктураДанныхРаздел3.П000030000503 Тогда
					СтруктураДанныхРаздел3.П000030002003 = 0;
					СтруктураДанныхРаздел3.П000030003003 = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИсходнаяОрганизация <> СтруктураРеквизитовФормы.Организация
			 ИЛИ ИсходныйПериод <> СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета Тогда
				
				ТабличныйДокумент.Области.ФормаРеорганизации.Очистить();
				ТабличныйДокумент.Области.РеорганизацияИНН.Очистить();
				ТабличныйДокумент.Области.РеорганизацияКПП.Очистить();
				
				НайденноеЗначение = Неопределено;
				
				мСтруктураМногостраничныхРазделов.Свойство("Раздел2", НайденноеЗначение);
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
					
					Если НайденноеЗначение[0].Свойство("Данные") Тогда
						
						Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
							
							Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
								
								СтрокаТаблЗнач.ДанныеДопСтрок[0].Значение["П0000200062"].Очистить();
								СтрокаТаблЗнач.ДанныеДопСтрок[0].Значение["П0000200062"].Добавить();
								СтрокаТаблЗнач.Данные[0].Значение.П000020006201_1 = Неопределено;
								
								СтрокаТаблЗнач.ДанныеДопСтрок[0].Значение["П0000200065"].Очистить();
								СтрокаТаблЗнач.ДанныеДопСтрок[0].Значение["П0000200065"].Добавить();
								СтрокаТаблЗнач.Данные[0].Значение.П000020006501_1 = Неопределено;
								
								СтрокаТаблЗнач.Данные[0].Значение.П000020005003 = ЗначениеК1(ЭтаФорма);
								
								СтрокаТаблЗнач.Данные[0].Значение.П000020006101 = "";
								СтрокаТаблЗнач.Данные[0].Значение.П000020006401 = "";
								СтрокаТаблЗнач.Данные[0].Значение.П000020006102 = "V";
								СтрокаТаблЗнач.Данные[0].Значение.П000020006402 = "V";
								
								СтрокаТаблЗнач.Данные[0].Значение.П000020007003 = 0;
								СтрокаТаблЗнач.Данные[0].Значение.П000020008003 = 0;
								СтрокаТаблЗнач.Данные[0].Значение.П000020009003 = 0;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				РасчетНаСервере("Раздел2");
				
				СтруктураДанныхРаздел3.П000030001003 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, "П000020011003", Истина);
				
				РасчетНаСервере("Раздел3");
				
				СформироватьРаздел1НаСервере();
				
			КонецЕсли;
			
			ДатаПодписи = ТекущаяДатаСеанса();
			ЗаполнитьДатуПодписи(ЭтаФорма);
			
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
			
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	// Подготовка расчетного календаря.
	//
	СтруктураРеквизитовФормы.РасчетныйКалендарь = Новый Массив;
	
	ПервыйМесяцКвартала = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ДеньПериода = НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	КонечнаяДата = КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Пока ДеньПериода <= КонечнаяДата Цикл
		
		ДанныеРасчетногоКалендаря = Новый Структура;
		
		ДанныеРасчетногоКалендаря.Вставить("Дата", ДеньПериода);
		ДанныеРасчетногоКалендаря.Вставить("МесяцКвартала", Месяц(ДеньПериода) - ПервыйМесяцКвартала + 1);
		ДанныеРасчетногоКалендаря.Вставить("Деятельность", 0);
		
		СтруктураРеквизитовФормы.РасчетныйКалендарь.Добавить(ДанныеРасчетногоКалендаря);
		
		ДеньПериода = ДеньПериода + 86400; // следующий день
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если (НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
	 ИЛИ НЕ ИсходнаяОрганизация = СтруктураРеквизитовФормы.Организация)
	 И (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически) Тогда 
	 
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
		РегистрацияВНО = СтруктураРеквизитовФормы.РегистрацияВНалОргане;
		
		Если ТипЗнч(РегистрацияВНО) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
			
			Если НЕ РегистрацияВНО.Пустая() Тогда
				
				ЗаполнитьПустыеСтруктурыДанных();
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(РегистрацияВНО.Код);
				СтруктураДанныхТитульный.КПП1    = СокрЛП(РегистрацияВНО.КПП);
				
				Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
					
					ТабличныйДокумент.Области.КодИМНС.Значение = СтруктураДанныхТитульный.КодИМНС;
					ТабличныйДокумент.Области.КПП1.Значение    = СтруктураДанныхТитульный.КПП1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе	
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейкахНаСервере();
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "НаимЮЛПол, ФИО");
		
	Если СтруктураРеквизитовФормы.ИП Тогда
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
	КонецЕсли;
		
	СтруктураРеквизитовФормы.Вставить("ПолноеНаимОрганизации", НаименованиеОрганизации);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ОтчетЗаполненУспешно = Ложь;
		ЗаполнитьАвтоНаСервере(ОтчетЗаполненУспешно);
		Если ОтчетЗаполненУспешно Тогда
			СформироватьДеревоРазделовОтчетаНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКодПоМестуПоУмолчанию()
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		ТабличныйДокумент.Области.ПоМесту.Значение = "120";
	Иначе
		ТабличныйДокумент.Области.ПоМесту.Значение = "214";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020007004", "П000020004003;П000020005003;П000020006003;П000020007002;П000020008002;П000020009002;П000020006201;П000020006501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020008004", "П000020004003;П000020005003;П000020006003;П000020007002;П000020008002;П000020009002;П000020006201;П000020006501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020009004", "П000020004003;П000020005003;П000020006003;П000020007002;П000020008002;П000020009002;П000020006201;П000020006501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020010003", "П000020004003;П000020005003;П000020006003;П000020007002;П000020008002;П000020009002;П000020010503;П000020006201;П000020006501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020011003", "П000020004003;П000020005003;П000020006003;П000020007002;П000020008002;П000020010503;П000020009002;П000020006201;П000020006501");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030004003", "П000030001003;П000030002003;П000030003003;П000030000503");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			
			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	// Защита от случая, когда передают многострочную часть с количеством строк менее чем исходное.
	Если ИсходноеКоличествоСтрокГруппы > ТекущееКоличествоСтрокГруппы Тогда
		Для Инд = 1 По (ИсходноеКоличествоСтрокГруппы - ТекущееКоличествоСтрокГруппы) Цикл
			СтруктураГруппы.Добавить();
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1
		 ИЛИ ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2 Тогда
		 
		 // Обработка многострочной части калькулятора календарных дней.
			Для НомерНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
				
				ИмяГиперссылки = Неопределено;
				Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1 Тогда
					ИмяГиперссылки = "П000020006301";
				ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2 Тогда
					ИмяГиперссылки = "П000020006601";
				КонецЕсли;
				
				ОпорнаяОбласть = Форма.ТабличныйДокумент.Области[ИмяГиперссылки + "_" + СтрокаЧГ0(НомерНовойСтроки - 1)];
				
				ОбластьКопированияВерх = ОпорнаяОбласть.Верх;
				ОбластьКопированияНиз = ОбластьКопированияВерх + 1;
				ОбластьКопирования = Форма.ТабличныйДокумент.ПолучитьОбласть(ОбластьКопированияВерх, , ОбластьКопированияНиз, );
				
				ПромежуточныйДокумент = Новый ТабличныйДокумент;
				ПромежуточныйДокумент.Вывести(ОбластьКопирования);
				ПромежуточныйДокумент.Области[ОпорнаяОбласть.Имя].Имя = ИмяГиперссылки + "_" + СтрокаЧГ0(НомерНовойСтроки);
				
				ВставляемаяОбласть = ПромежуточныйДокумент.Область(1, , ПромежуточныйДокумент.ВысотаТаблицы, );
				
				ПозицияВставки = ОбластьКопированияВерх + 2;
				ОбластьВставки = Форма.ТабличныйДокумент.Область(ПозицияВставки, , ПозицияВставки, );
				
				Форма.ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьВставки, ТипСмещенияТабличногоДокумента.ПоВертикали);
				
				ОпорнаяОбласть.Текст = "Удалить дату";
				
				ИсходнаяОбластьВводаДаты = Форма.ТабличныйДокумент.Области[ИмяГруппы + "01_1"];
				НоваяОбластьВводаДаты = Форма.ТабличныйДокумент.Область(ОбластьКопированияВерх, 9, ОбластьКопированияВерх, 9);
				
				Форма.ТабличныйДокумент.ВставитьОбласть(ИсходнаяОбластьВводаДаты, НоваяОбластьВводаДаты, ТипСмещенияТабличногоДокумента.БезСмещения, Ложь);
				НоваяОбластьВводаДаты.Имя = ИмяГруппы + "01_" + СтрокаЧГ0(НомерНовойСтроки);
				НоваяОбластьВводаДаты.Очистить();
				
			КонецЦикла;
			
		Иначе
			
			НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
			ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
			
			Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);
			
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел1 Тогда
				
				// Отдельный алгоритм для раздела 1.
				КолонкаТаблицыИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
						ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
					Иначе
						ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ЗначениеЯчейки = СтрокаТаблицы[КолонкаТаблицыИмя];
					ИмяЯчейки      = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
					
					ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
						ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
					Иначе
						ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел1 Тогда
		ТаблицаДопСтрок = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел1].Добавить().Таблица;
	ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1 Тогда
		ТаблицаДопСтрок = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1].Добавить().Таблица;
	ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2 Тогда
		ТаблицаДопСтрок = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2].Добавить().Таблица;
	КонецЕсли;
	
	КопироватьДанныеФормы(СтруктураГруппы, ТаблицаДопСтрок);
	
	КопироватьДанныеФормы(ТаблицаДопСтрок, Форма[Форма.мСтруктураМногострочныхРазделов[ИмяГруппы]]);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительнуюСтрокуДаты(ИмяОбласти, МногострочнаяЧасть, ИдМСЧ)
	
	ПозицияРазделителя = СтрНайти(ИмяОбласти, "_");
	ОсновноеИмяГиперссылки = Лев(ИмяОбласти, ПозицияРазделителя - 1);
	НомерГиперссылки = Число(Сред(ИмяОбласти, ПозицияРазделителя + 1));
	
	ОпорнаяОбласть = ТабличныйДокумент.Области[ИмяОбласти];
	
	ОбластьКопированияВерх = ОпорнаяОбласть.Верх;
	ОбластьКопированияНиз = ОбластьКопированияВерх + 1;
	ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(ОбластьКопированияВерх, , ОбластьКопированияНиз, );
	
	ПромежуточныйДокумент = Новый ТабличныйДокумент;
	ПромежуточныйДокумент.Вывести(ОбластьКопирования);
	ПромежуточныйДокумент.Области[ИмяОбласти].Имя = ОсновноеИмяГиперссылки + "_" + СтрокаЧГ0(НомерГиперссылки + 1);
	
	ВставляемаяОбласть = ПромежуточныйДокумент.Область(1, , ПромежуточныйДокумент.ВысотаТаблицы, );
	
	ПозицияВставки = ОбластьКопированияВерх + 2;
	ОбластьВставки = ТабличныйДокумент.Область(ПозицияВставки, , ПозицияВставки, );
	
	ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьВставки, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	ОпорнаяОбласть.Текст = "Удалить дату";
	
	МногострочнаяЧасть.Добавить();
	
	ИсходнаяОбластьВводаДаты = ТабличныйДокумент.Области[ИдМСЧ + "01_1"];
	НоваяОбластьВводаДаты = ТабличныйДокумент.Область(ОбластьКопированияВерх, 9, ОбластьКопированияВерх, 9);
	
	ТабличныйДокумент.ВставитьОбласть(ИсходнаяОбластьВводаДаты, НоваяОбластьВводаДаты, ТипСмещенияТабличногоДокумента.БезСмещения, Ложь);
	НоваяОбластьВводаДаты.Имя = ИдМСЧ + "01_" + СтрокаЧГ0(МногострочнаяЧасть.Количество());
	НоваяОбластьВводаДаты.Очистить();
	
	ТабличныйДокумент.ТекущаяОбласть = НоваяОбластьВводаДаты;
	
	Модифицированность = Истина;
	
	КопироватьДанныеФормы(МногострочнаяЧасть, ЭтаФорма[мСтруктураМногострочныхРазделов[ИдМСЧ]]);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				
				ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
				
				Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
					
					ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЕсли;
				
			Иначе
				
				Если Прав(ИмяГруппы, 2) = "20" Тогда
					ИмяКолонки = ИмяГруппы + Формат((НомерГрафы + 1) * 10, "ЧЦ=2; ЧВН=");
				Иначе
					ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				КонецЕсли;
				
				Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
					
					ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЕсли;
				
			Конецесли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДополнительнуюСрокуДаты(ИмяОбласти)
	
	Перем МногострочнаяЧасть;
	
	Если СтрНайти(ИмяОбласти, "П000020006301") = 1 Тогда
		ИдМСЧ = СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1;
	ИначеЕсли СтрНайти(ИмяОбласти, "П000020006601") = 1 Тогда
		ИдМСЧ = СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2;
	Иначе
		ВызватьИсключение "Вызов процедуры ОбработатьДополнительнуюСроку() с недопустимым параметром";
	КонецЕсли;
	
	мСтруктураМногострочныхРазделов.Свойство(ИдМСЧ, МногострочнаяЧасть);
	МногострочнаяЧасть = ЭтаФорма[МногострочнаяЧасть];
	
	ПозицияРазделителя = СтрНайти(ИмяОбласти, "_");
	НомерГиперссылки = Число(Сред(ИмяОбласти, ПозицияРазделителя + 1));
	
	Если НомерГиперссылки < МногострочнаяЧасть.Количество() Тогда
		
		ДополнительныеПараметры = Новый Структура("ИдМСЧ, ИмяОбласти, МногострочнаяЧасть", ИдМСЧ, ИмяОбласти, МногострочнаяЧасть);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДополнительнуюСрокуДатыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru='Удалить выбранную дату?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	Иначе
		
		ДобавитьДополнительнуюСтрокуДаты(ИмяОбласти, МногострочнаяЧасть, ИдМСЧ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДополнительнуюСрокуДатыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИдМСЧ = ДополнительныеПараметры.ИдМСЧ;
	ИмяОбласти = ДополнительныеПараметры.ИмяОбласти;
	МногострочнаяЧасть = ДополнительныеПараметры.МногострочнаяЧасть;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуДаты(ИмяОбласти, МногострочнаяЧасть, ИдМСЧ);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСписокДат(ИдМСЧ)
	
	МногострочнаяЧасть = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдМСЧ]];
	ИсходноеЧислоСтрок = мСтруктураИсхКолвоСтрокРазделов[ИдМСЧ];
	АктуальноеЧислоСтрок = МногострочнаяЧасть.Количество();
	
	Если АктуальноеЧислоСтрок > ИсходноеЧислоСтрок Тогда
		ВерхняяОбласть = ТабличныйДокумент.Области[ИдМСЧ + "01_" + СтрокаЧГ0(ИсходноеЧислоСтрок + 1)];
		НижняяОбласть  = ТабличныйДокумент.Области[ИдМСЧ + "01_" + СтрокаЧГ0(АктуальноеЧислоСтрок)];
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхняяОбласть.Верх, , НижняяОбласть.Верх + 1, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если ИдМСЧ = СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1 Тогда
			ИмяГиперссылки = "П000020006301";
		ИначеЕсли ИдМСЧ = СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2 Тогда
			ИмяГиперссылки = "П000020006601";
		КонецЕсли;
		
		ОбластьГиперссылки = ТабличныйДокумент.Области[ИмяГиперссылки + "_" + СтрокаЧГ0(АктуальноеЧислоСтрок)];
		ОбластьГиперссылки.Имя = ИмяГиперссылки + "_1";
	КонецЕсли;
	
	МногострочнаяЧасть.Очистить();
	Для Инд = 1 По ИсходноеЧислоСтрок Цикл
		МногострочнаяЧасть.Добавить();
	КонецЦикла;
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИдМСЧ, МногострочнаяЧасть);
	
	Модифицированность = Истина;
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДниОсуществленияДеятельности()
	
	ПервыйМесяцКвартала = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	ОбластиРасчета = Новый Соответствие();
	ОбластиРасчета.Вставить(1, ТабличныйДокумент.Области.П000020007003);
	ОбластиРасчета.Вставить(2, ТабличныйДокумент.Области.П000020008003);
	ОбластиРасчета.Вставить(3, ТабличныйДокумент.Области.П000020009003);
	
	ЕстьСобытиеВМесяце = Новый Соответствие;
	ЕстьСобытиеВМесяце.Вставить(1, Ложь);
	ЕстьСобытиеВМесяце.Вставить(2, Ложь);
	ЕстьСобытиеВМесяце.Вставить(3, Ложь);
	
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	ДатыСобытий = Новый ТаблицаЗначений;
	ДатыСобытий.Колонки.Добавить("ДатаСобытия", ОписаниеТиповДата);
	ДатыСобытий.Колонки.Добавить("ВидСобытия", ОписаниеТиповЧисло); // 0 - постановка, 1 - снятие
	
	ДатыСобытий.Индексы.Добавить("ДатаСобытия, ВидСобытия");
	
	ДатыПостановкиНаУчет = ЭтаФорма[мСтруктураМногострочныхРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1]];
	Для Инд = 1 По ДатыПостановкиНаУчет.Количество() Цикл
		НомерСтроки = СтрокаЧГ0(Инд);
		ЗначениеДаты = ТабличныйДокумент.Области[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1 + "01_" + НомерСтроки].Значение;
		Если ЗначениеЗаполнено(ЗначениеДаты)
		   И (НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <= ЗначениеДаты И ЗначениеДаты <= КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) Тогда
			СтрокаДаты = ДатыСобытий.Добавить();
			СтрокаДаты.ДатаСобытия = ЗначениеДаты;
			СтрокаДаты.ВидСобытия  = 0;
			
			МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
			ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ДатыСнятияСУчета = ЭтаФорма[мСтруктураМногострочныхРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2]];
	Для Инд = 1 По ДатыСнятияСУчета.Количество() Цикл
		НомерСтроки = СтрокаЧГ0(Инд);
		ЗначениеДаты = ТабличныйДокумент.Области[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2 + "01_" + НомерСтроки].Значение;
		Если ЗначениеЗаполнено(ЗначениеДаты)
		   И (НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <= ЗначениеДаты И ЗначениеДаты <= КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) Тогда
			СтрокаПроверки = ДатыСобытий.Добавить();
			СтрокаПроверки.ДатаСобытия = ЗначениеДаты;
			СтрокаПроверки.ВидСобытия  = 1;
			
			МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
			ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ДатыСобытий.Сортировать("ДатаСобытия, ВидСобытия");
	
	Если ДатыСобытий.Количество() > 0 Тогда
		Если НачалоДня(ДатыСобытий[0].ДатаСобытия) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			НачальноеСостяние = 1 - ДатыСобытий[0].ВидСобытия;
			НачальноеСобытие = ДатыСобытий.Вставить(0);
			НачальноеСобытие.ДатаСобытия = НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
			НачальноеСобытие.ВидСобытия = НачальноеСостяние
		КонецЕсли;
		
		Для Инд = 0 По ДатыСобытий.Количество() - 1 Цикл
			Событие = ДатыСобытий[Инд];
			ВедениеДеятельности = 1 - Событие.ВидСобытия; // 0 - деятельнось не велась, 1 - деятельность велась
			ДатаИзменения = НачалоДня(Событие.ДатаСобытия);
			
			Для Каждого ДеньКалендаря Из СтруктураРеквизитовФормы.РасчетныйКалендарь Цикл
				Если ДеньКалендаря.Дата >= ДатаИзменения Тогда
					ДеньКалендаря.Деятельность = ВедениеДеятельности;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	РасчетныйКалендарь = Новый ТаблицаЗначений;
	
	РасчетныйКалендарь.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	РасчетныйКалендарь.Колонки.Добавить("МесяцКвартала", Новый ОписаниеТипов("Число"));
	РасчетныйКалендарь.Колонки.Добавить("Деятельность", Новый ОписаниеТипов("Число"));
	
	Для Каждого ЭлементМассива Из СтруктураРеквизитовФормы.РасчетныйКалендарь Цикл
		
		НоваяСтрока = РасчетныйКалендарь.Добавить();
		НоваяСтрока.Дата = ЭлементМассива.Дата;
		НоваяСтрока.МесяцКвартала = ЭлементМассива.МесяцКвартала;
		НоваяСтрока.Деятельность = ЭлементМассива.Деятельность;
		
	КонецЦикла;
		
	Для Инд = 1 По 3 Цикл
		Если ЕстьСобытиеВМесяце[Инд] Тогда
			СтрокиМесяца = РасчетныйКалендарь.НайтиСтроки(Новый Структура("МесяцКвартала", Инд));
			КалендарьМесяца = РасчетныйКалендарь.Скопировать(СтрокиМесяца);
			КоличествоДнейДеятельности = КалендарьМесяца.Итог("Деятельность");
		Иначе
			КоличествоДнейДеятельности = 0;
		КонецЕсли;
		ОбластиРасчета[Инд].Значение = КоличествоДнейДеятельности;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДниОсуществленияДеятельностиВТаблицеРаздела2()
	
	ИмяРеквизитаФормы = Неопределено;
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство("Раздел2", ИмяРеквизитаФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблСтраницРаздела2 = ЭтаФорма[ИмяРеквизитаФормы];
	
	ПервыйМесяцКвартала = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	Для каждого СтраницаРаздела2 Из ТаблСтраницРаздела2 Цикл
		
		ДанныеСтраницыРаздела2 = СтраницаРаздела2.Данные[0].Значение;
		
		РассчПоказатели = Новый Соответствие();
		РассчПоказатели.Вставить(1, "П000020007003");
		РассчПоказатели.Вставить(2, "П000020008003");
		РассчПоказатели.Вставить(3, "П000020009003");
		
		ЕстьСобытиеВМесяце = Новый Соответствие;
		ЕстьСобытиеВМесяце.Вставить(1, Ложь);
		ЕстьСобытиеВМесяце.Вставить(2, Ложь);
		ЕстьСобытиеВМесяце.Вставить(3, Ложь);
		
		ДатыСобытий = Новый ТаблицаЗначений;
		ДатыСобытий.Колонки.Добавить("ДатаСобытия", ОписаниеТиповДата);
		ДатыСобытий.Колонки.Добавить("ВидСобытия", ОписаниеТиповЧисло); // 0 - постановка, 1 - снятие
		
		ДатыСобытий.Индексы.Добавить("ДатаСобытия, ВидСобытия");
		
		НомСтр = 1;
		Пока ДанныеСтраницыРаздела2.Свойство(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1 + "01_" + СтрокаЧГ0(НомСтр)) Цикл
			ЗначениеДаты = ДанныеСтраницыРаздела2[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1 + "01_" + СтрокаЧГ0(НомСтр)];
			Если ЗначениеЗаполнено(ЗначениеДаты)
				И (НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <= ЗначениеДаты
				И ЗначениеДаты <= КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) Тогда
				СтрокаДаты = ДатыСобытий.Добавить();
				СтрокаДаты.ДатаСобытия = ЗначениеДаты;
				СтрокаДаты.ВидСобытия  = 0;
				МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
				ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		НомСтр = 1;
		Пока ДанныеСтраницыРаздела2.Свойство(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2 + "01_" + СтрокаЧГ0(НомСтр)) Цикл
			ЗначениеДаты = ДанныеСтраницыРаздела2[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2 + "01_" + СтрокаЧГ0(НомСтр)];
			Если ЗначениеЗаполнено(ЗначениеДаты)
				И (НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <= ЗначениеДаты
				И ЗначениеДаты <= КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) Тогда
				СтрокаПроверки = ДатыСобытий.Добавить();
				СтрокаПроверки.ДатаСобытия = ЗначениеДаты;
				СтрокаПроверки.ВидСобытия  = 1;
				МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
				ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		ДатыСобытий.Сортировать("ДатаСобытия, ВидСобытия");
		
		Если ДатыСобытий.Количество() > 0 Тогда
			Если НачалоДня(ДатыСобытий[0].ДатаСобытия) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
				НачальноеСостяние = 1 - ДатыСобытий[0].ВидСобытия;
				НачальноеСобытие = ДатыСобытий.Вставить(0);
				НачальноеСобытие.ДатаСобытия = НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
				НачальноеСобытие.ВидСобытия = НачальноеСостяние
			КонецЕсли;
			
			Для Инд = 0 По ДатыСобытий.Количество() - 1 Цикл
				Событие = ДатыСобытий[Инд];
				ВедениеДеятельности = 1 - Событие.ВидСобытия; // 0 - деятельнось не велась, 1 - деятельность велась
				ДатаИзменения = НачалоДня(Событие.ДатаСобытия);
				Для Каждого ДеньКалендаря Из СтруктураРеквизитовФормы.РасчетныйКалендарь Цикл
					Если ДеньКалендаря.Дата >= ДатаИзменения Тогда
						ДеньКалендаря.Деятельность = ВедениеДеятельности;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		РасчетныйКалендарь = Новый ТаблицаЗначений;
		РасчетныйКалендарь.Колонки.Добавить("Дата", ОписаниеТиповДата);
		РасчетныйКалендарь.Колонки.Добавить("МесяцКвартала", ОписаниеТиповЧисло);
		РасчетныйКалендарь.Колонки.Добавить("Деятельность", ОписаниеТиповЧисло);
		
		Для Каждого ЭлементМассива Из СтруктураРеквизитовФормы.РасчетныйКалендарь Цикл
			НоваяСтрока = РасчетныйКалендарь.Добавить();
			НоваяСтрока.Дата = ЭлементМассива.Дата;
			НоваяСтрока.МесяцКвартала = ЭлементМассива.МесяцКвартала;
			НоваяСтрока.Деятельность = ЭлементМассива.Деятельность;
		КонецЦикла;
		
		Для Инд = 1 По 3 Цикл
			Если ЕстьСобытиеВМесяце[Инд] Тогда
				СтрокиМесяца = РасчетныйКалендарь.НайтиСтроки(Новый Структура("МесяцКвартала", Инд));
				КалендарьМесяца = РасчетныйКалендарь.Скопировать(СтрокиМесяца);
				КоличествоДнейДеятельности = КалендарьМесяца.Итог("Деятельность");
			Иначе
				КоличествоДнейДеятельности = 0;
			КонецЕсли;
			ДанныеСтраницыРаздела2.Вставить(РассчПоказатели[Инд], КоличествоДнейДеятельности);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницы) Экспорт
	
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяСтраницы = "Раздел2" Тогда
		
		// Так как раздел содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1);
		ОбновитьСтруктуруМногострочногоРаздела(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1, ПромежуточнаяТаблица);
		ПромежуточнаяТаблица = ЭтаФорма[ПромежуточнаяТаблица];
		ТаблицаДопСтрокРаздел2_1 = ЭтаФорма["Хранилище" + СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1].Добавить().Таблица;
		КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРаздел2_1);
		СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1, ТаблицаДопСтрокРаздел2_1);
		
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2, ПромежуточнаяТаблица);
		ПромежуточнаяТаблица = ЭтаФорма[ПромежуточнаяТаблица];
		ТаблицаДопСтрокРаздел2_2 = ЭтаФорма["Хранилище" + СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2].Добавить().Таблица;
		КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРаздел2_2);
		СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2, ТаблицаДопСтрокРаздел2_2);
		
	КонецЕсли;
	
	Возврат СтруктураДанныхДопСтрокРаздела;
	
КонецФункции

&НаСервере
Процедура УдалитьДополнительнуюСтрокуДаты(ИмяОбласти, МногострочнаяЧасть, ИдМСЧ)
	
	ПозицияРазделителя = СтрНайти(ИмяОбласти, "_");
	ОсновноеИмяГиперссылки = Лев(ИмяОбласти, ПозицияРазделителя - 1);
	НомерГиперссылки = Число(Сред(ИмяОбласти, ПозицияРазделителя + 1));
	
	ОпорнаяОбласть = ТабличныйДокумент.Области[ИмяОбласти];
	
	УдаляемаяОбласть = ТабличныйДокумент.Область(ОпорнаяОбласть.Верх, , ОпорнаяОбласть.Верх + 1, );
	ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для Инд = НомерГиперссылки + 1 По МногострочнаяЧасть.Количество() Цикл
		ОбластьГиперссылки = ТабличныйДокумент.Области[ОсновноеИмяГиперссылки + "_" + СтрокаЧГ0(Инд)];
		ОбластьГиперссылки.Имя = ОсновноеИмяГиперссылки + "_" + СтрокаЧГ0(Инд - 1);
	КонецЦикла;
		
	Для Инд = НомерГиперссылки + 2 По МногострочнаяЧасть.Количество() Цикл
		ОбластьВводаДаты = ТабличныйДокумент.Области[ИдМСЧ + "01_" + СтрокаЧГ0(Инд)];
		ОбластьВводаДаты.Имя = ИдМСЧ + "01_" + СтрокаЧГ0(Инд - 1);
	КонецЦикла;
	
	ИндексУдаляемойСтроки = НомерГиперссылки;
	МногострочнаяЧасть.Удалить(ИндексУдаляемойСтроки);
	
	КопироватьДанныеФормы(МногострочнаяЧасть, ЭтаФорма[мСтруктураМногострочныхРазделов[ИдМСЧ]]);
	
	РассчитатьДниОсуществленияДеятельности();
	
	Модифицированность = Истина;
	
	РасчетНаСервере("Раздел2", ИдМСЧ);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач СохраненныйДок)
	
	Если СохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(СохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			СохраненныйДок = СохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не СохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			СохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				СохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета()

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 5;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000020000100";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000030000100";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтроку(, , Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку(ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "1003_" + КолСтрокСтр;
	ИмяТекущейОбласти = ИмяГруппы + "1003_" + КолСтрокСтр1;
	
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
		
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк.
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "1003_" + Инд);
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	
	Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	ТекущийЭлемент = Элементы[ТекТабличноеПолеИмя];
	
	СтруктураГруппы.Добавить();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если ВставляемаяОбласть.Имя = "МногострочнаяЧасть" Тогда
		НазначитьИмяОбластиМЧ = Истина;
	КонецЕсли; 
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = "МногострочнаяЧасть";
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтроку(СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1;
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "1003_" + НомУдаляемойСтроки;
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		
	КонецЕсли;
	
	Если СтруктураГруппы.Количество() = 1 Тогда
		Обл = ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяГруппы + "1003_1"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	КонецЕсли;
	
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяГруппы + "1003_" + НомТекущейСтроки;
	
	Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	ТекущийЭлемент = Элементы[ТекТабличноеПолеИмя];
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	
	// Определим область удаляемой строки.
	НазначитьИмяОбластиМЧ = Ложь;
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
	Если УдаляемаяОбласть.Имя = "МногострочнаяЧасть" Тогда
		НазначитьИмяОбластиМЧ = Истина;
	КонецЕсли;
	// Непосредственно удаляем область строки табличного документа.
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = "МногострочнаяЧасть";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2015Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			// Только для данного отчета (ЕНВД) вводится дополнительная колонка.
			ТаблСписка.Колонки.Добавить("БазоваяДоходность",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
					// Только для данного отчета (ЕНВД) вводится дополнительная колонка.
					ТекстБазоваяДоходность = СокрП(МакетСоставаПоказателей.Область(НомСтр, 4).Текст);
					НовСтрока.БазоваяДоходность = ?(РегламентированнаяОтчетностьКлиентСервер.ЯвляетсяЧислом(ТекстБазоваяДоходность), Число(ТекстБазоваяДоходность), 0);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"Период", 2, , "Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"ФормаРеорганизации", 1, , "Выбор формы реорганизации", КоллекцияСписковВыбора["ФормыРеорганизации"]);

	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000020001000", 2, , "Выбор кода вида предпринимательской деятельности", КоллекцияСписковВыбора["КодыВидовДеятельности"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000030000503", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщика"]);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("ИдМСЧ_Раздел1",   СтруктураРеквизитовФормы.ИдМСЧ_Раздел1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел2_1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел2_2", СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("ИдМСЧ_Раздел1",   СтруктураРеквизитовФормы.ИдМСЧ_Раздел1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел2_1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел2_2", СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = ИдГрупп.ИдМСЧ_Раздел1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = ИдГрупп.ИдМСЧ_Раздел2_1;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("ИдМСЧ_Раздел1",   СтруктураРеквизитовФормы.ИдМСЧ_Раздел1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел2_1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел2_2", СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("ИдМСЧ_Раздел1",   СтруктураРеквизитовФормы.ИдМСЧ_Раздел1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел2_1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел2_2", СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.ИдМСЧ_Раздел1 Тогда
		ТекТабличноеПоле = "Раздел1";
	ИначеЕсли ИдГруппы = ИдГрупп.ИдМСЧ_Раздел2_1 ИЛИ ИдГруппы = ИдГрупп.ИдМСЧ_Раздел2_2 Тогда
		ТекТабличноеПоле = "Раздел2";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	Перем ВерсияФормы;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					Если ЭлементСтруктуры.Ключ = "Раздел3" Тогда
						
						Элемент = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", "П000030001003"));
						
						Если Элемент.Количество() > 0 Тогда
						
							ЭлементМассива.Удалить(ЭлементМассива.Индекс(Элемент[0]));
						
						КонецЕсли;
						
						Элемент = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", "П000030002003"));
						
						Если Элемент.Количество() > 0 Тогда
						
							ЭлементМассива.Удалить(ЭлементМассива.Индекс(Элемент[0]));
						
						КонецЕсли; 
					КонецЕсли;
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	ВерсияФормыИзменилась = Ложь;
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) И (ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы) Тогда
		ВерсияФормыИзменилась = Истина;
	КонецЕсли;
	
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			ИдМСЧ = ЭлементСтруктуры.Ключ;
			
			Если ИдМСЧ = СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1
			 ИЛИ ИдМСЧ = СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если ЭлементСтруктуры.Ключ = "П0000100010"
				И СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Свойство("ИНН1_1") Тогда
				
				// Случай перехода с 2.0 на 3.0.
				НайденноеЗначение = "П00001000";
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				ПоказателиРаздела1 = ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
				Для НомСтроки = 0 По ЭтаФорма[НайденноеЗначение].Количество() - 1 Цикл
					НомСтроки_ = Формат(НомСтроки + 1, "ЧГ=0");
					Для НомПодстроки = 1 По 2 Цикл
						ЭтаФорма[НайденноеЗначение][НомСтроки]["П00001000" + НомПодстроки + "003"]
						= ПоказателиРаздела1["П00001000" + НомПодстроки + "003_" + НомСтроки_];
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	РасчетНаСервере("Раздел3");
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН1, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН1 = Лев(СтруктураДанныхТитульный.ИНН1, СтрНайти(СтруктураДанныхТитульный.ИНН1, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки) + ПоказателиТаблПоле["НомерКорректировки" + Ном];
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период" + Ном];
				СтруктураДанныхТитульный.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	Форма.ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаВПоляхВводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	Если СокрЛП(ТабличныйДокумент.Области.Период.Значение) = "" ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		// Выводим признак периода на титульный лист.
		НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ТабличныйДокумент.Области.Период.Значение = "2" + Строка(НомерМесяца / 3);
		
	КонецЕсли;
	
	// Выводим год на титульный лист.
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ТабличныйДокумент.Области.ОтчетГод.Значение = ОтчетныйГод;
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ИзмененаДатаПодписи = Ложь)
	
	Если НЕ ИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		Форма.ТабличныйДокумент.Области.ИНН1.Значение = ИНН;
		
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		Форма.ТабличныйДокумент.Области.КПП1.Значение = КПП;
						
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Форма.ТабличныйДокумент.Области.КодИМНС.Значение = КодНО;
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
		
		Форма.СтруктураРеквизитовФормы.Вставить("ПолноеНаимОрганизации", НаименованиеОрганизации);
		
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = НаименованиеОрганизации;
		
		Форма.ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
																	 Форма.СтруктураРеквизитовФормы,
																	 Форма.ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	// Выясним, есть ли представитель.
	КодНО = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомерКорректировки) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , ПоказателиОтчета);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	   И НЕ ТипЗнч(СтруктураРеквизитовФормы.мСохраненныйДок) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// Установим текущие значения реквизитов документа.
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета
		= Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета
		= Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки           = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// Формируем данные редактируемых ячеек таблицы.
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// Формируем список сохранения.
	СписокСохранения = Новый Структура();

	// Вставляем данные редактируемых ячеек таблицы.
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многострочных разделов.
	ДанныеМногострочныхРазделов = Новый Структура;
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(
			ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
						
						СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
						
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Вставляем данные многостраничных разделов.
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// Записываем документ, хранящий данные отчета.
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) >= '2015-10-01'
				И Раздел.ИмяСтраницы = "Раздел2" Тогда
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
				Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы + "_Строка105"));
				
			Иначе
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
				Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
				
			КонецЕсли;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) >= '2015-10-01'
				И Раздел.ИмяСтраницы = "Раздел2" Тогда
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
				Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы + "_Строка105"));
				
			Иначе
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
				Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
				
			КонецЕсли;
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Перем ТаблицаСтраниц;
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.ИмяСтраницы = "Раздел3" Тогда
			Если НЕ ЗначениеЗаполнено(ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]["П000030000503"]) Тогда
				Если СтруктураРеквизитовФормы.ОпределятьТрудНаемныхРабочих И СтруктураРеквизитовФормы.ИП
					И НЕ СтруктураРеквизитовФормы.ИПИспользуетТрудНаемныхРаботников Тогда
					ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]["П000030000503"] = "2";
				Иначе
					ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]["П000030000503"] = "1";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт
	
	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если (СтрНайти(Область.Имя, "П000020006301") = 1 И ЗначениеЗаполнено(ТабличныйДокумент.Области.П000020006101.Значение))
	 ИЛИ (СтрНайти(Область.Имя, "П000020006601") = 1 И ЗначениеЗаполнено(ТабличныйДокумент.Области.П000020006401.Значение)) Тогда
		ОбработатьДополнительнуюСрокуДаты(Область.Имя);
	КонецЕсли;
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли Область.Имя = "СобратьДанные" Тогда 
		СобратьДанные(Неопределено);
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = Область.Имя;
	ИсходноеЗначениеЯчейки = Область.Значение;
	
	Если Лев(ИмяЯчейки, 7) = "КодИМНС" Тогда
		ОбработкаВыбораИФНС();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	// Форма заполнения адреса раздела 2.
	Если (ИмяЯчейки = "П000020002001")
	 ИЛИ (ИмяЯчейки = "П000020002002")
	 ИЛИ (ИмяЯчейки = "П000020002003")
	 ИЛИ (ИмяЯчейки = "П000020002004")
	 ИЛИ (ИмяЯчейки = "П000020002005")
	 ИЛИ (ИмяЯчейки = "П000020002006")
	 ИЛИ (ИмяЯчейки = "П000020002007")
	 ИЛИ (ИмяЯчейки = "П000020002008")
	 ИЛИ (ИмяЯчейки = "П000020002009") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",	        ТабличныйДокумент.Области.П000020002001.Значение);
		РоссийскийАдрес.Вставить("Регион",          ТабличныйДокумент.Области.П000020002002.Значение);
		РоссийскийАдрес.Вставить("КодРегиона",      ТабличныйДокумент.Области.П000020002002.Значение);
		РоссийскийАдрес.Вставить("Район",           ТабличныйДокумент.Области.П000020002003.Значение);
		РоссийскийАдрес.Вставить("Город",           ТабличныйДокумент.Области.П000020002004.Значение);
		РоссийскийАдрес.Вставить("НаселенныйПункт", ТабличныйДокумент.Области.П000020002005.Значение);
		РоссийскийАдрес.Вставить("Улица",           ТабличныйДокумент.Области.П000020002006.Значение);
		РоссийскийАдрес.Вставить("Дом",             ТабличныйДокумент.Области.П000020002007.Значение);
		РоссийскийАдрес.Вставить("Корпус",          ТабличныйДокумент.Области.П000020002008.Значение);
		РоссийскийАдрес.Вставить("Квартира",        ТабличныйДокумент.Области.П000020002009.Значение);
		
		Если Регионы.Количество() = 0 Тогда
			ЗаполнитьРегионыНаСервере();
		КонецЕсли;
		
		Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["Регион"])));
		
		Если Регион.Количество() > 0 Тогда
			РоссийскийАдрес["Регион"] = Регион[0].Наим;
		КонецЕсли;
		
		ЗначенияПолей = Новый СписокЗначений;
		
		ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
		ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
		ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
		
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
																												  + РоссийскийАдрес["Регион"] + ","
																												  + РоссийскийАдрес["Район"] + ","
																												  + РоссийскийАдрес["Город"] + ","
																												  + РоссийскийАдрес["НаселенныйПункт"] + ","
																												  + РоссийскийАдрес["Улица"] + ","
																												  + РоссийскийАдрес["Дом"] + ","
																												  + РоссийскийАдрес["Корпус"] + ","
																												  + РоссийскийАдрес["Квартира"]);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей",           ЗначенияПолей);
		ПараметрыФормы.Вставить("Представление",           ПредставлениеАдреса);
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
		
	КонецЕсли;
	
	Если ИмяЯчейки = "П000020006101" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда
			ТабличныйДокумент.Области.П000020006101.Значение = "V";
			ТабличныйДокумент.Области.П000020006102.Значение = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяЯчейки = "П000020006102" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда
			
			ТабличныйДокумент.Области.П000020006101.Значение = "";
			ТабличныйДокумент.Области.П000020006102.Значение = "V";
			
			ОчиститьСписокДат(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяЯчейки = "П000020006401" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда
			
			ТабличныйДокумент.Области.П000020006401.Значение = "V";
			ТабличныйДокумент.Области.П000020006402.Значение = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяЯчейки = "П000020006402" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда
			
			ТабличныйДокумент.Области.П000020006401.Значение = "";
			ТабличныйДокумент.Области.П000020006402.Значение = "V";
			
			ОчиститьСписокДат(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2);
			
		КонецЕсли;
		
	КонецЕсли;
		
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяЯчейки);
	
	// Создание динамического списка выбора.
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		// Обработка таблицы значений - удаление вариантов, не проходящих по условиям.
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		
		ТребРезультат = 0;
		Если КодПоказателя = "Период" Тогда
			
			// Код периода.
			НомерКвартала = Число(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к"));
			ТребРезультат = НомерКвартала;
			
		КонецЕсли;
		
		Если ТребРезультат <> 0 Тогда
			// Из ТЗВыбора удаляются элементы, у которых результат отличается от нуля и ТребРезультат.
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
					ТЗВыбора.Удалить(ЭлементТЗ);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяЯчейки = "ПоМесту"
	 ИЛИ ИмяЯчейки = "ФормаРеорганизации"
	 ИЛИ ИмяЯчейки = "П000030000503" Тогда
	 
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	Если ИмяЯчейки = "П000020001000"
	 ИЛИ ИмяЯчейки = "П000020006101"
	 ИЛИ ИмяЯчейки = "П000020006102"
	 ИЛИ ИмяЯчейки = "П000020006401"
	 ИЛИ ИмяЯчейки = "П000020006402" Тогда
	 
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		РассчитатьДниОсуществленияДеятельности();
		РасчетНаКлиенте("Раздел2", ИмяЯчейки);
		
	КонецЕсли;
	
	Если ИмяЯчейки = "П000010001003" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		// Изменим во всех листах многостраничного документа.
		мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела);
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
			Если Страница.Данные.Количество() > 0 Тогда
				Страница.Данные[0].Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ТабличныйДокумент.Области.П000020002001.Значение = РоссийскийАдрес_["Индекс"];
		ТабличныйДокумент.Области.П000020002002.Значение = РоссийскийАдрес_["КодРегиона"];
		ТабличныйДокумент.Области.П000020002003.Значение = РоссийскийАдрес_["Район"];
		ТабличныйДокумент.Области.П000020002004.Значение = РоссийскийАдрес_["Город"];
		ТабличныйДокумент.Области.П000020002005.Значение = РоссийскийАдрес_["НаселенныйПункт"];
		ТабличныйДокумент.Области.П000020002006.Значение = РоссийскийАдрес_["Улица"];
		ТабличныйДокумент.Области.П000020002007.Значение = РоссийскийАдрес_["Дом"];
		ТабличныйДокумент.Области.П000020002008.Значение = РоссийскийАдрес_["Корпус"];
		ТабличныйДокумент.Области.П000020002009.Значение = РоссийскийАдрес_["Квартира"];
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда	
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области.КодИМНС.Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области.КПП1.Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ СтрНайти(Область.Имя, "П0000200015") > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ИсходноеЗначениеЯчейки = Область.Значение;
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, ИсходноеЗначениеЯчейки", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, ИсходноеЗначениеЯчейки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	ИсходноеЗначениеЯчейки = ДополнительныеПараметры.ИсходноеЗначениеЯчейки;
	ИмяЯчейки = Область.Имя;
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ СтрНайти(Область.Имя, "П0000200015") > 0 Тогда	
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение базовой доходности в разделе 2.
	Если КодПоказателя = "П000020001000" Тогда
		
		БазоваяДоходность = РезультатВыбора.БазоваяДоходность;
		ТабличныйДокумент.Области.П000020004003.Значение = БазоваяДоходность;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ИмяОбласти = Область.Имя;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
		
		Если СтрЧислоВхождений("П000020001000;П000020004003;П000020005003;П000020006003;П000020007003;П000020008003;П000020009003", ИмяОбласти) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		РасчетНаКлиенте("Раздел2", ИмяОбласти);
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		
		Если ИмяОбласти = "П000030000503" Тогда
			РасчетНаКлиенте("Раздел3", ИмяОбласти);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяЯчейки = "ПоМесту"
	 ИЛИ ИмяЯчейки = "ФормаРеорганизации"
	 ИЛИ ИмяЯчейки = "П000030000503" Тогда
		
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	Если ИмяЯчейки = "П000020001000"
	 ИЛИ ИмяЯчейки = "П000020006101"
	 ИЛИ ИмяЯчейки = "П000020006102"
	 ИЛИ ИмяЯчейки = "П000020006401"
	 ИЛИ ИмяЯчейки = "П000020006402" Тогда
		
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		РассчитатьДниОсуществленияДеятельности();
		РасчетНаКлиенте("Раздел2", ИмяЯчейки);
		
	КонецЕсли;
	
	Если ИмяЯчейки = "П000010001003" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		// Изменим во всех листах многостраничного документа.
		мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела);
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
			Если Страница.Данные.Количество() > 0 Тогда
				Страница.Данные[0].Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "", ПриИзмененииСодержимогоОбласти = Ложь) Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "", ПриИзмененииСодержимогоОбласти = Ложь) Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "", ПриИзмененииСодержимогоОбласти = Ложь)
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "" Тогда
		
		ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		
	Иначе
		
		ИмяТекущейСтраницыПанели = ИмяСтраницыПанели;
		
	КонецЕсли;
	
	Если СтрЧислоВхождений(ОбластьИмя, "_") > 0 Тогда
		ОбластьИмя = Лев(ОбластьИмя, СтрНайти(ОбластьИмя, "_") - 1);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Раздел2" Тогда
		
		Если ОбластьИмя = "П000020001000"
		 ИЛИ ОбластьИмя = "П000020006101"
		 ИЛИ ОбластьИмя = "П000020006102"
		 ИЛИ ОбластьИмя = "П000020006401"
		 ИЛИ ОбластьИмя = "П000020006402" Тогда
			
			Расчет(Форма, "Раздел2", "П000020005003", ПриИзмененииСодержимогоОбласти);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020010003, ОбластьИмя) > 0 Тогда
			
			СтруктураРаздела = Неопределено;
			Форма.мСтруктураМногостраничныхРазделов.Свойство("Раздел2", СтруктураРаздела);
			СтруктураРаздела = Форма[СтруктураРаздела];
			
			Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
				
				ОбработкаВТабличномПоле = СтраницаРаздела.АктивнаяСтраница
					И ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
				
				Если ОбработкаВТабличномПоле Тогда
					РазмещениеДанных = Форма.ТабличныйДокумент;
				Иначе
					РазмещениеДанных = СтраницаРаздела.Данные;
				КонецЕсли;
				
				Если ТипЗнч(РазмещениеДанных) = Тип("СписокЗначений") Тогда
					Если РазмещениеДанных.Количество() > 0 Тогда
						РасчетЛистаРаздел2(Форма, РазмещениеДанных);
					КонецЕсли;
				Иначе
					РасчетЛистаРаздел2(Форма, РазмещениеДанных);
				КонецЕсли;
				
				Если ОбработкаВТабличномПоле И ПриИзмененииСодержимогоОбласти Тогда
					
					СтраницаРаздела.Данные.Вставить("П000020003000", Форма.ТабличныйДокумент.Области.П000020003000.Значение);
					СтраницаРаздела.Данные.Вставить("П000020010003", Форма.ТабличныйДокумент.Области.П000020010003.Значение);
					СтраницаРаздела.Данные.Вставить("П000020011003", Форма.ТабличныйДокумент.Области.П000020011003.Значение);
					
				КонецЕсли;
				
				Если НЕ ОбработкаВТабличномПоле Тогда
					Если ТипЗнч(РазмещениеДанных) = Тип("СписокЗначений") Тогда
						Если РазмещениеДанных.Количество() > 0 Тогда
							РазмещениеДанных[0].Пометка = Ложь; //для инициализации обмена с сервером
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030004003, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				
				ПризнакНалогоплательщика = Форма.ТабличныйДокумент.Области.П000030000503.Значение;
				
				Строка010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000030001003.Значение);
				Строка020 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000030002003.Значение);
				Строка030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000030003003.Значение);
				
				Если ПризнакНалогоплательщика = "1" Тогда
					РазмерОграничения = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Окр(Строка010 * 50/100, 2));
					ЗначениеСтроки040 = Макс(РазмерОграничения, Строка010 - Строка020);
				Иначе
					ЗначениеСтроки040 = Макс(0, Строка010 - Строка030);
				КонецЕсли;
				Форма.ТабличныйДокумент.Области.П000030004003.Значение = ЗначениеСтроки040;
				
			Иначе
				
				Если Форма.СтруктураДанныхРаздел3.Количество() > 0 Тогда
					
					ПризнакНалогоплательщика = Форма.СтруктураДанныхРаздел3.П000030000503;
					
					Строка010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030001003);
					Строка020 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030002003);
					Строка030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030003003);
					
					Если ПризнакНалогоплательщика = "1" Тогда
						РазмерОграничения = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Окр(Строка010 * 50/100, 2));
						ЗначениеСтроки040 = Макс(РазмерОграничения, Строка010 - Строка020);
					Иначе
						ЗначениеСтроки040 = Макс(0, Строка010 - Строка030);
					КонецЕсли;
					Форма.СтруктураДанныхРаздел3.П000030004003 = ЗначениеСтроки040;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчетВСтруктуре() Экспорт
	
	Если СтруктураДанныхРаздел3.Количество() = 0 Тогда
		Если СтруктураРеквизитовФормы.ОпределятьТрудНаемныхРабочих И СтруктураРеквизитовФормы.ИП
			И НЕ СтруктураРеквизитовФормы.ИПИспользуетТрудНаемныхРаботников Тогда
			ПрНпл = "2";
		Иначе
			ПрНпл = "1";
		КонецЕсли;
		СтруктураДанныхРаздел3.Вставить("П000030000503", ПрНпл);
		СтруктураДанныхРаздел3.Вставить("П000030001003", 0);
		СтруктураДанныхРаздел3.Вставить("П000030002003", 0);
		СтруктураДанныхРаздел3.Вставить("П000030003003", 0);
		СтруктураДанныхРаздел3.Вставить("П000030004003", 0);
	КонецЕсли;
	
	РасчетНаСервере("Раздел2");
	
	// Сбор данных в раздел 3.
	ЗначП000030001003 = 0;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		Для Каждого СтраницаРаздела Из ТаблицаСтраницыРаздела2 Цикл
			Если СтраницаРаздела.АктивнаяСтраница Тогда
				СтраницаРаздела.Данные[0].Значение.Вставить("П000020011003", ТабличныйДокумент.Области.П000020011003.Значение);
			КонецЕсли;
			ЗначП000030001003 = ЗначП000030001003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, СтраницаРаздела.Данные[0].Значение["П000020011003"]);
		КонецЦикла;
	Иначе
		ЗначП000030001003 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, "П000020011003", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		ТабличныйДокумент.Области.П000030001003.Значение = ЗначП000030001003;
	Иначе
		СтруктураДанныхРаздел3.П000030001003 = ЗначП000030001003;
	КонецЕсли;
	
	РасчетНаСервере("Раздел3");
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		СтруктураДанныхРаздел3.П000030001003 = ТабличныйДокумент.Области.П000030001003.Значение;
		СтруктураДанныхРаздел3.П000030004003 = ТабличныйДокумент.Области.П000030004003.Значение;
	КонецЕсли;
	
	// Формирование раздела 1.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ОчиститьТабличноеПолеНаСервере("Раздел1");
	КонецЕсли;
	СформироватьРаздел1НаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетЛистаРаздел2(Форма, МестоРазмещенияДанных)
	
	КоличествоДней = КалендарныеДниПериода(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Строка040 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020004003");
	Строка040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка040);
	
	Строка050 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020005003");
	Строка060 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020006003");
	
	Строка070Графа2 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020007002");
	Строка080Графа2 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020008002");
	Строка090Графа2 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020009002");
	
	// Календарные дни в отчетных периодах.
	Строка070КоличествоДней = КоличествоДней.ПервыйМесяц;
	Строка080КоличествоДней = КоличествоДней.ВторойМесяц;
	Строка090КоличествоДней = КоличествоДней.ТретийМесяц;
	
	// Количество дней осуществления деятельности.
	Строка070Графа3 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020007003");
	Строка080Графа3 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020008003");
	Строка090Графа3 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020009003");
	
	Строка070Графа3 = ?(Строка070Графа3 = 0, Строка070КоличествоДней, Строка070Графа3);
	Строка080Графа3 = ?(Строка080Графа3 = 0, Строка080КоличествоДней, Строка080Графа3);
	Строка090Графа3 = ?(Строка090Графа3 = 0, Строка090КоличествоДней, Строка090Графа3);
	
	// Учет времени осуществления деятельности.
	ЗначениеСтроки070Графа4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
	Строка040 * Строка050 * Строка060 * Строка070Графа2 * Строка070Графа3 / Строка070КоличествоДней);
	
	ЗначениеСтроки080Графа4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
	Строка040 * Строка050 * Строка060 * Строка080Графа2 * Строка080Графа3 / Строка080КоличествоДней);
	
	ЗначениеСтроки090Графа4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
	Строка040 * Строка050 * Строка060 * Строка090Графа2 * Строка090Графа3 / Строка090КоличествоДней);
	
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020007004", ЗначениеСтроки070Графа4);
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020008004", ЗначениеСтроки080Графа4);
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020009004", ЗначениеСтроки090Графа4);
	
	Строка070Графа4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020007004"));
	Строка080Графа4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020008004"));
	Строка090Графа4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020009004"));
	
	ЗначениеСтроки100 = Строка070Графа4 + Строка080Графа4 + Строка090Графа4;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020010003", ЗначениеСтроки100);
	
	Строка100 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020010003");
	Строка100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Число(Формат(Строка100, "ЧЦ=12;ЧДЦ=2;ЧН=")));
	
	Если НачалоМесяца(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) >= '2015-10-01' Тогда
		
		Если ТипЗнч(МестоРазмещенияДанных) = Тип("СписокЗначений")
		   И НЕ МестоРазмещенияДанных[0].Значение.Свойство("П000020010503") Тогда
		   
			МестоРазмещенияДанных[0].Значение.Вставить("П000020010503", 15);
		   
	   	КонецЕсли;
	   
		ЗначениеСтроки110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
		Строка100 * ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020010503") / 100);
		
	Иначе
		
		ЗначениеСтроки110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
		Строка100 * 15 / 100);
		
	КонецЕсли;
	
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020011003", ЗначениеСтроки110);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КалендарныеДниПериода(мДатаКонцаПериодаОтчета)
	
	Результат = Новый Структура;
	
	ПервыйМесяц = День(КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -2)));
	Результат.Вставить("ПервыйМесяц", ПервыйМесяц);
	
	ВторойМесяц = День(КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -1)));
	Результат.Вставить("ВторойМесяц", ВторойМесяц);
	
	ТретийМесяц = День(КонецМесяца(мДатаКонцаПериодаОтчета));
	Результат.Вставить("ТретийМесяц", ТретийМесяц);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, АдресДанных)
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("СписокЗначений")
	 ИЛИ ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		ЗначениеВСтруктуре = Неопределено;
		Если МестоРазмещенияДанных[0].Значение.Свойство(АдресДанных, ЗначениеВСтруктуре) Тогда
			Возврат ЗначениеВСтруктуре;
		Иначе
			ВызватьИсключение "Невозможно получить данные из структуры: поле " + АдресДанных + " не существует";
		КонецЕсли;
	Иначе
		// Это должны быть данные в поле табличного документа.
		Возврат МестоРазмещенияДанных.Области[АдресДанных].Значение;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, АдресДанных, ЗначениеДанных)
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("СписокЗначений") Тогда
		МестоРазмещенияДанных[0].Значение.Вставить(АдресДанных, ЗначениеДанных);
	Иначе
		МестоРазмещенияДанных.Области[АдресДанных].Значение = ЗначениеДанных;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел3()
	
	ОчисткаИПодготовкаРаздела3НаСервере();
	
	ТабличныйДокумент.Области.П000030001003.Значение = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, "П000020011003", Истина);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Расчет(ЭтаФорма, "Раздел3", "П000030001003");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СуммаПоказателяПоВсемСтраницам(Форма, Показатель, Округлять)
	
	Результат = 0;
	
	Для Каждого Лист Из Форма.ТаблицаСтраницыРаздела2 Цикл
		
		Если Лист.Данные.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ДанныеТаблПоле = Лист.Данные[0];
		
		Если Не ЗначениеЗаполнено(ДанныеТаблПоле.Значение.П000020003000) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.СообщатьОНезаполненномКодеПоОКТМОВРазделе2 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не заполнен код ОКТМО на странице Раздела 2!'");
				Сообщение.Сообщить();
			КонецЕсли;
			
			Возврат 0;
			
		КонецЕсли;
		
		Результат = Результат + ?(Округлять, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ДанныеТаблПоле.Значение[Показатель]), ДанныеТаблПоле.Значение[Показатель]);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Перем ТаблицаСтраницРаздела;
	
	Если СтрНайти(Область.Имя, "П000010001003") > 0 ИЛИ Область.Имя = "П000020003000" Тогда
		
		ЗначОКТМО = СтрЗаменить(Область.Значение, " ", "");
		ДлинаОКТМО = СтрДлина(ЗначОКТМО);
		
		Если НЕ (ДлинаОКТМО = 0 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 11) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Код по ОКТМО должен состоять из 8 или 11 цифр!'");
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		Область.Значение = ЗначОКТМО;
		
	КонецЕсли;
	
	Если Область.Имя = "ОКВЭД" Тогда
		
		Если НЕ ПустаяСтрока(Область.Значение) И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Область.Имя = "РеорганизацияИНН"
	 ИЛИ Область.Имя = "ФормаРеорганизации"
	 ИЛИ Область.Имя = "П000020001000"
	 ИЛИ Область.Имя = "П000030000503" Тогда
		
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	Если Область.Имя = "П000020010503" Тогда
		
		Если Область.Значение < 7.5
		 ИЛИ Область.Значение > 15 Тогда
		 
		    ПоказатьПредупреждение(,НСтр("ru='Ставка единого налога может быть установлена в пределах от 7.5 до 15 процентов.'"));
			
			Область.Значение = 15;
		    								
		КонецЕсли;
		
	КонецЕсли;
		
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел2" 
	 ИЛИ ИмяРаздела = "Раздел3" Тогда
		
		ИмяОбласти = Область.Имя;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти, Истина);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеК1(Форма)
				
	Если Год(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) >= 2015 Тогда
		
		Возврат 1.798;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели = "")
	
	Если ИмяСтраницыПанели = "Титульный" Тогда
		
		ОпределяющаяОбласть    = Форма.ТабличныйДокумент.Области.ФормаРеорганизации;
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.РеорганизацияИНН;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.РеорганизацияКПП;
		
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
			ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
			
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			
		Иначе
			
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			
		КонецЕсли;
		
		Если Форма.ТабличныйДокумент.Области.ПоМесту.Значение = "215"
			И ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.ФормаРеорганизации.Значение)
			И ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.РеорганизацияИНН.Значение) Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.НаимОрг);
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.НаимОрг);
			
			Форма.ТабличныйДокумент.Области.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.ПолноеНаимОрганизации;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
		
		П000020006101_АвтоЗап = Ложь;
		П000020006401_АвтоЗап = Ложь;
		Для каждого Эл Из Форма.ТаблицаВариантыЗаполненияРаздел2[0].ТаблицаВариантовЗаполнения Цикл
			Если Эл.КодПоказателя = "П000020006101" Тогда
				П000020006101_АвтоЗап = (Эл.ВариантЗаполнения = 3);
			ИначеЕсли Эл.КодПоказателя = "П000020006401" Тогда
				П000020006401_АвтоЗап = (Эл.ВариантЗаполнения = 3);
			КонецЕсли;
		КонецЦикла;
		
		ЕстьДатыПостановкиНаУчет = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.П000020006101.Значение);
		Если ЕстьДатыПостановкиНаУчет Тогда
			ЦветГиперссылки = Новый Цвет(0, 0, 255);
			ОтображатьГиперссылку = Истина;
			Если П000020006101_АвтоЗап Тогда
				ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
			Иначе
				ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			КонецЕсли;
			ЗащитаПолей = Ложь;
		Иначе
			ЦветГиперссылки = Новый Цвет(128, 128, 128);
			ОтображатьГиперссылку = Ложь;
			ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"];
			ЗащитаПолей = Истина;
		КонецЕсли;
		
		Инд = 1;
		Пока Истина Цикл
			ИмяПоляДаты        = "П000020006201_" + СтрокаЧГ0(Инд);
			ИмяПоляГиперссылки = "П000020006301_" + СтрокаЧГ0(Инд);
			
			Если Форма.ТабличныйДокумент.Области.Найти(ИмяПоляДаты) = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ОбластьПоляДаты        = Форма.ТабличныйДокумент.Области[ИмяПоляДаты];
			ОбластьПоляГиперссылки = Форма.ТабличныйДокумент.Области[ИмяПоляГиперссылки];
			
			ОбластьПоляДаты.Защита   = ЗащитаПолей;
			ОбластьПоляДаты.ЦветФона = ЦветФона;
			
			ОбластьПоляГиперссылки.ЦветТекста  = ЦветГиперссылки;
			ОбластьПоляГиперссылки.Гиперссылка = ОтображатьГиперссылку;
			
			Инд = Инд + 1;
		КонецЦикла;
		
		ЕстьДатыПостановкиНаУчет = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.П000020006401.Значение);
		Если ЕстьДатыПостановкиНаУчет Тогда
			ЦветГиперссылки = Новый Цвет(0, 0, 255);
			ОтображатьГиперссылку = Истина;
			Если П000020006401_АвтоЗап Тогда
				ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
			Иначе
				ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			КонецЕсли;
			ЗащитаПолей = Ложь;
		Иначе
			ЦветГиперссылки = Новый Цвет(128, 128, 128);
			ОтображатьГиперссылку = Ложь;
			ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"];
			ЗащитаПолей = Истина;
		КонецЕсли;
		
		Инд = 1;
		Пока Истина Цикл
			ИмяПоляДаты        = "П000020006501_" + СтрокаЧГ0(Инд);
			ИмяПоляГиперссылки = "П000020006601_" + СтрокаЧГ0(Инд);
			
			Если Форма.ТабличныйДокумент.Области.Найти(ИмяПоляДаты) = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ОбластьПоляДаты        = Форма.ТабличныйДокумент.Области[ИмяПоляДаты];
			ОбластьПоляГиперссылки = Форма.ТабличныйДокумент.Области[ИмяПоляГиперссылки];
			
			ОбластьПоляДаты.Защита   = ЗащитаПолей;
			ОбластьПоляДаты.ЦветФона = ЦветФона;
			
			ОбластьПоляГиперссылки.ЦветТекста  = ЦветГиперссылки;
			ОбластьПоляГиперссылки.Гиперссылка = ОтображатьГиперссылку;
			
			Инд = Инд + 1;
		КонецЦикла;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3" Тогда
		
		П000030000503_АвтоЗап = Ложь;
		П000030002003_АвтоЗап = Ложь;
		П000030003003_АвтоЗап = Ложь;
		Для каждого Эл Из Форма.ТаблицаВариантыЗаполненияРаздел3[0].ТаблицаВариантовЗаполнения Цикл
			Если Эл.КодПоказателя = "П000030000503" Тогда
				П000030000503_АвтоЗап = (Эл.ВариантЗаполнения = 3);
			ИначеЕсли Эл.КодПоказателя = "П000030002003" Тогда
				П000030002003_АвтоЗап = (Эл.ВариантЗаполнения = 3);
			ИначеЕсли Эл.КодПоказателя = "П000030003003" Тогда
				П000030003003_АвтоЗап = (Эл.ВариантЗаполнения = 3);
			КонецЕсли;
		КонецЦикла;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000030000503;
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
			ОбрабатываемаяОбласть.Защита   = Истина;
			ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			Если П000030000503_АвтоЗап Тогда
				ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
			КонецЕсли;
		КонецЕсли;
		
		ПризнакНалогоплательщика = СокрЛП(Форма.ТабличныйДокумент.Области.П000030000503.Значение);
		
		Если ПризнакНалогоплательщика = "1" Тогда
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000030002003);
			Если П000030002003_АвтоЗап Тогда
				Форма.ТабличныйДокумент.Области.П000030002003.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
			КонецЕсли;
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000030002003);
		КонецЕсли;
		
		Если ПризнакНалогоплательщика = "2" Тогда
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000030003003);
			Если П000030003003_АвтоЗап Тогда
				Форма.ТабличныйДокумент.Области.П000030003003.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
			КонецЕсли;
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000030003003);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
	Если ТипЗначенияОбласти = Тип("Число") Тогда
		ОбрабатываемаяОбласть.Значение = 0;
	ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
		ОбрабатываемаяОбласть.Значение = "";
	Иначе
		ОбрабатываемаяОбласть.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
																	ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		КМенюРО.Видимость = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость  = Истина;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость  = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		
		ТабличныйДокумент.Области.П000020006301_1.Гиперссылка = Истина;
		ТабличныйДокумент.Области.П000020006601_1.Гиперссылка = Истина;
		
		Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) >= '2015-10-01'
		   И НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.П000020010503.Значение) Тогда
		
			ТабличныйДокумент.Области.П000020010503.Значение = 15;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многострочные разделы.
	//
	Если НаимРаздела = "Раздел1" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел2" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ЗагТекущейСтраницыПанели = СтрТаблицаСтраницы.Представление;
			
			Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) 
				ИЛИ (СтрТаблицаСтраницы.Представление = "Новая страница") Тогда
				
				НаименованиеДопСтраницы = ТабличныйДокумент.Области.П000020001000.Значение;
				
				Если Не ПустаяСтрока(НаименованиеДопСтраницы) Тогда
					ЗагТекущейСтраницыПанели = НаименованиеДопСтраницы;
				Иначе
					ЗагТекущейСтраницыПанели = "Новая страница";
				КонецЕсли;
				
				СтрТаблицаСтраницы.Представление = ЗагТекущейСтраницыПанели;
			КонецЕсли;
			
			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
			
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	
	Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) >= '2015-10-01'
	   И ИмяТекРаздела = "Раздел2" Тогда
		
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела + "_Строка105"));
		
	Иначе
		
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
		
	КонецЕсли;
	
	// Многострочные разделы.
	//
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		ЕстьДопСтроки = Ложь;
		
		Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				ЕстьДопСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьДопСтроки Тогда
			Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Гиперссылка = Истина;
					ОбластьТД.Текст = "х";
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Гиперссылка = Ложь;
					ОбластьТД.Текст = "";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		Иначе	
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
		
		Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			И (НовДанныеДопСтрокРаздела.Количество() > 0)
			И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			
		Иначе
			
			НовДанныеДопСтрокРаздела = Неопределено;
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;
				
				ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Если ИмяТекРаздела = "Раздел3" Тогда
			
			РазделЗаполнен = Ложь;
			
			Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
				
				Если ЗначениеЗаполнено(ЭлСтруктуры.Значение) Тогда
					
					РазделЗаполнен = Истина;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ РазделЗаполнен Тогда
				
				ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		УправлениеЛистамиНаСервере();
		
	Иначе
		
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
	КонецЕсли;
	
	УстановитьМаскиВПоляхВвода(ИмяТекРаздела);
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМаскиВПоляхВвода(ИмяТекРаздела)
	
	МаскаОКТМО = "99999999999";

	Если ИмяТекРаздела = "Титульный" Тогда
		
		ТабличныйДокумент.Области["Период"].Маска = "99";
		ТабличныйДокумент.Области["Прил"].Маска = "999";
		ТабличныйДокумент.Области["ПоМесту"].Маска = "999";
		ТабличныйДокумент.Области["КодИМНС"].Маска = "9999";
		ТабличныйДокумент.Области["ФормаРеорганизации"].Маска = "9";
		ТабличныйДокумент.Области["РеорганизацияИНН"].Маска = "9999999999";
		ТабличныйДокумент.Области["РеорганизацияКПП"].Маска = "999999999";
		
	ИначеЕсли ИмяТекРаздела = "Раздел1" Тогда
		
		ТабличныйДокумент.Области["П000010001003_1"].Маска = МаскаОКТМО;
		
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		ТабличныйДокумент.Области["П000020001000"].Маска = "99";
		ТабличныйДокумент.Области["П000020002001"].Маска = "999999";
		ТабличныйДокумент.Области["П000020002002"].Маска = "99";
		ТабличныйДокумент.Области["П000020003000"].Маска = МаскаОКТМО;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "Раздел2" Тогда
		
		ТабличныйДокумент.Области.П000020005003.Значение = ЗначениеК1(ЭтаФорма);
		ТабличныйДокумент.Области.П000020006003.Значение = 1;
		
		ТабличныйДокумент.Области.П000020006101.Значение = "";
		ТабличныйДокумент.Области.П000020006401.Значение = "";
		ТабличныйДокумент.Области.П000020006102.Значение = "V";
		ТабличныйДокумент.Области.П000020006402.Значение = "V";
		
		ТабличныйДокумент.Области.П000020007003.Значение = 0;
		ТабличныйДокумент.Области.П000020008003.Значение = 0;
		ТабличныйДокумент.Области.П000020009003.Значение = 0;
		
	ИначеЕсли НаимРаздела = "Раздел3" Тогда
		
		Если СтруктураРеквизитовФормы.ОпределятьТрудНаемныхРабочих И СтруктураРеквизитовФормы.ИП
			И НЕ СтруктураРеквизитовФормы.ИПИспользуетТрудНаемныхРаботников Тогда
			
			ТабличныйДокумент.Области.П000030000503.Значение = "2";
			
		Иначе
			
			ТабличныйДокумент.Области.П000030000503.Значение = "1";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		
		ТабличныйДокумент.Области.П000020005003.Значение = ЗначениеК1(ЭтаФорма);
		ТабличныйДокумент.Области.П000020006003.Значение = 1;
		
		ТабличныйДокумент.Области.П000020006101.Значение = "";
		ТабличныйДокумент.Области.П000020006401.Значение = "";
		ТабличныйДокумент.Области.П000020006102.Значение = "V";
		ТабличныйДокумент.Области.П000020006402.Значение = "V";
		
		ТабличныйДокумент.Области.П000020007003.Значение = 0;
		ТабличныйДокумент.Области.П000020008003.Значение = 0;
		ТабличныйДокумент.Области.П000020009003.Значение = 0;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ВставитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели);
		РассчитатьДниОсуществленияДеятельности();
	Иначе
		РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Ложь);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели)
	
	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = ЭтаФорма[ИмяТекТабличногоПоля];
	
	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТекТабличногоПоля);
	
	ОбновитьСтруктуруМногострочногоРаздела(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1);
	ОбновитьСтруктуруМногострочногоРаздела(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2);
	
	СтруктураДанныхДопСтрокРаздела = Новый Структура;
	
	ПромежуточнаяТаблица = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1, ПромежуточнаяТаблица);
	ПромежуточнаяТаблица = ЭтаФорма[ПромежуточнаяТаблица];
	ТаблицаДопСтрокРаздел2_1 = ЭтаФорма["Хранилище" + СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1].Добавить().Таблица;
	КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРаздел2_1);
	СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1, ТаблицаДопСтрокРаздел2_1);
	
	ПромежуточнаяТаблица = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2, ПромежуточнаяТаблица);
	ПромежуточнаяТаблица = ЭтаФорма[ПромежуточнаяТаблица];
	ТаблицаДопСтрокРаздел2_2 = ЭтаФорма["Хранилище" + СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2].Добавить().Таблица;
	КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРаздел2_2);
	СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2, ТаблицаДопСтрокРаздел2_2);
	
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
		
	КонецЕсли;
	
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) 
			ИЛИ (СтрТаблицаСтраницы.Представление = "Новая страница") Тогда
			
			СтрТаблицаСтраницы.Представление = "Новая страница";
			
		КонецЕсли;
		
		Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
			СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
		Иначе
			СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
		КонецЕсли;
		
		Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
			СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
		Иначе
			СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
		КонецЕсли;
		
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;
		
		ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
		
		РасчетНаСервере(ИмяТекущейСтраницыПанели);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	УстановитьЦветФонаЯчейкиНаСервере(, , ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели);
	Иначе
		РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели)
	
	Перем ТаблицаСтраницРаздела;
	
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = ЭтаФорма[ИмяТекТабличногоПоля];
	
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);
		
		ОчиститьТабличноеПоле(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();
		
		Если КолвоДопСтраниц > 0 Тогда
			
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];
			
			ДанныеДопСтрокРаздела = СтрТаблицаСтраницыЗамена.ДанныеДопСтрок[0].Значение;
			
			Если ДанныеДопСтрокРаздела <> Неопределено Тогда
				Для Каждого ГруппаСтрок Из ДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					
				КонецЦикла;
			КонецЕсли;
			
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные[0].Значение;
			
			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл
				
				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;
				
				Попытка
					ЭтаФорма[ИмяТекТабличногоПоля].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
		КонецЕсли;
		
		РасчетНаСервере(ИмяТекущейСтраницыПанели);
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьЦветФонаЯчейкиНаСервере(, , ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	МассивМногострочныхБлоков = Новый Массив;
	
	Если ВыбТабличноеПолеИмя = "Раздел2" Тогда
		
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1);
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2);
		
		Форма.УдалитьОбластьИзТабличногоДокументаНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, МассивМногострочныхБлоков);
		
		Форма.ТабличныйДокумент = ВыбТабличноеПоле;
		
	КонецЕсли;
	
	Если ВыбТабличноеПолеИмя = "Раздел1" Тогда
		
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел1);
		
		Форма.УдалитьОбластьИзТабличногоДокументаНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, МассивМногострочныхБлоков);
		
		Форма.ТабличныйДокумент = ВыбТабличноеПоле;
		
	КонецЕсли;

	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для Инд = 0 По (МассивМногострочныхБлоков.Количество() - 1) Цикл
		
		ИмяГруппыДопСтрок = МассивМногострочныхБлоков.Получить(Инд);
		
		Если ИмяГруппыДопСтрок <> Неопределено Тогда
			
			Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);
			
			ИмяСтраницыПанели = ВыбТабличноеПолеИмя;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОбластьИзТабличногоДокументаНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, МассивМногострочныхБлоков) Экспорт
	
	Для Инд = 0 По (МассивМногострочныхБлоков.Количество() - 1) Цикл
		
		ИмяГруппыДопСтрок = МассивМногострочныхБлоков.Получить(Инд);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
		
		ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
		
		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
		
		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
		
		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			
			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			
			СохрНСтр = НСтр;
			
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
				
				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
				
				НомерГрафы = 1;
					
				Если ВыбТабличноеПолеИмя = "Раздел1" Тогда
					
					ИмяПервойКолонки = ИмяГруппыДопСтрок + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
					ИмяПервойЯчейкиУдаляемойСтроки = ИмяПервойКолонки + "_" + НСтр;
					
					ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
					
					НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
					НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + 4;
					
				Иначе
					
					ИмяПервойКолонки = ИмяГруппыДопСтрок + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					ИмяПервойЯчейкиУдаляемойСтроки = ИмяПервойКолонки + "_" + НСтр;
					
					ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
					
					НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
					НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + 1;
					
				КонецЕсли;
				
				РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ВыбТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
				
				ЭтаФорма.ТабличныйДокумент = ВыбТабличноеПоле;
				
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
				
				НСтр = НСтр - 1;
				
			КонецЦикла;
			
			Если ИмяГруппыДопСтрок = СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1 Тогда
				
				ОбластьГиперссылки = ВыбТабличноеПоле.Области.Найти("П000020006301_" + СохрНСтр);
				ОбластьГиперссылки.Имя = "П000020006301_1";
				
			ИначеЕсли ИмяГруппыДопСтрок = СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2 Тогда
				
				ОбластьГиперссылки = ВыбТабличноеПоле.Области.Найти("П000020006601_" + СохрНСтр);
				ОбластьГиперссылки.Имя = "П000020006601_1";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные(Команда)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		СформироватьРаздел1НаСервере();
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
		СформироватьРаздел3();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1НаСервере()
	
	Перем ТаблицаСтраницРаздела2;
	
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство("Раздел2", ТаблицаСтраницРаздела2) Тогда
		Возврат;
	КонецЕсли;
	
	ИтоговаяТаблица = Новый ТаблицаЗначений;
	ИтоговаяТаблица.Колонки.Добавить("ОКТМО");
	ИтоговаяТаблица.Колонки.Добавить("Сумма");
	
	ТаблДанных = ЭтаФорма[мСтруктураМногостраничныхРазделов.Раздел2];
	Для Каждого Стр из ТаблДанных Цикл
		
		Если Стр.Данные.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОКТМО = СокрЛП(Стр.Данные[0].Значение.П000020003000);
		
		Если НЕ ПустаяСтрока(ОКТМО) Тогда
			НовСтр = ИтоговаяТаблица.Добавить();
			НовСтр.ОКТМО = ОКТМО;
			НовСтр.Сумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Стр.Данные[0].Значение.П000020011003);
		КонецЕсли;
		
	КонецЦикла;
	ИтоговаяТаблица.Свернуть("ОКТМО", "Сумма");
	
	ТаблицаМСЧРаздела1 = ЭтаФорма[мСтруктураМногострочныхРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Раздел1]];
	ТаблицаМСЧРаздела1.Очистить();
	
	Если СтруктураДанныхРаздел3.Количество() > 0 Тогда
		Раздел3Строка010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураДанныхРаздел3.П000030001003);
		Раздел3Строка040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураДанныхРаздел3.П000030004003);
	Иначе
		Раздел3Строка010 = 0;
		Раздел3Строка040 = 0;
	КонецЕсли;
	
	ОсталосьОтразить = Раздел3Строка040;
	
	Если ИтоговаяТаблица.Количество() > 0 Тогда
		
		Для Инд = 0 По ИтоговаяТаблица.Количество() - 1 Цикл
			ТекСтр = ИтоговаяТаблица[Инд];
			
			ЭтоПоследняяСтрока = (Инд = ИтоговаяТаблица.Количество() - 1);
			Если ЭтоПоследняяСтрока Тогда
				// Учет округлений в последней строке.
				СуммаНалога = ОсталосьОтразить;
			Иначе
				Если Раздел3Строка010 = 0 Тогда
					СуммаНалога = 0;
				Иначе
					СуммаНалога = Окр(ТекСтр.Сумма * (Раздел3Строка040 / Раздел3Строка010), 2);
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрокаМСЧ = ТаблицаМСЧРаздела1.Добавить();
			
			НоваяСтрокаМСЧ.П000010001003 = ТекСтр.ОКТМО;
			НоваяСтрокаМСЧ.П000010002003 = СуммаНалога;
			
			ОсталосьОтразить = ОсталосьОтразить - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СуммаНалога);
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаМСЧРаздела1.Добавить();
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ВывестиРазделВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.ИдМСЧ_Раздел1, ТаблицаМСЧРаздела1);
	Иначе
		СохрНомерТекущейСтраницы = СтруктураРеквизитовФормы.НомерТекущейСтраницы;
		СохрНаимТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		СохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
		
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1";
		ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(СохрТаблДок);
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = СохрНаимТекущегоРаздела;
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = СохрНомерТекущейСтраницы;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаИПодготовкаРаздела3НаСервере()
	
	П000030000503 = ТабличныйДокумент.Области.П000030000503.Значение;
	П000030002003 = ТабличныйДокумент.Области.П000030002003.Значение;
	П000030003003 = ТабличныйДокумент.Области.П000030003003.Значение;
	
	ОчиститьТабличноеПолеНаСервере("Раздел3");
	
	ТабличныйДокумент.Области.П000030000503.Значение = П000030000503;
	ТабличныйДокумент.Области.П000030002003.Значение = П000030002003;
	ТабличныйДокумент.Области.П000030003003.Значение = П000030003003;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел3");
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	РасчетНаКлиенте("Раздел3");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Выполнение проверок перед заполнением отчета.
	
	КодыСТитЛиста = КодыСТитульногоЛиста(ЭтаФорма);
	КПП   = КодыСТитЛиста.КПП;
	КодНО = КодыСТитЛиста.КодНО;
	
	СтатусПроверки = Истина;
	
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
				"ru='Для заполнения отчета необходимо значение КПП налогоплательщика. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(КПП) <> 9 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
				"ru='Задан КПП налогоплательщика, не состоящий из 9 символов. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодНО) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задан код налогового органа, в который представляется декларация.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(КодНО) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНО) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Задан код налогового органа, не состоящий из 4 цифр.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ СтатусПроверки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Заполнение отчета прервано.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	// Заполнение отчета.
	
	ОтчетЗаполненУспешно = Ложь;
	
	ЗаполнитьАвтоНаСервере(ОтчетЗаполненУспешно);
	
	Если ОтчетЗаполненУспешно Тогда
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='Для налогоплательщика по %1 не найдена соответствующая запись в справочнике ""Регистрации в налоговом органе"". Заполнение декларации прервано.'"),
			?(СтруктураРеквизитовФормы.ИП, "значению кода налогового органа", "значениям КПП и кода налогового органа"));
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ОтчетЗаполненУспешно)
	
	КодыСТитЛиста = КодыСТитульногоЛиста(ЭтаФорма);
	
	ПараметрыОтбораРегистрацийВНО = Новый Структура;
	
	ПараметрыОтбораРегистрацийВНО.Вставить("КодНО", КодыСТитЛиста.КодНО);
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		ПараметрыОтбораРегистрацийВНО.Вставить("КПП", КодыСТитЛиста.КПП);
	КонецЕсли;
	
	РегистрацииВНО = РегламентированнаяОтчетность.РегистрацииОрганизацииВНалоговомОргане(
		СтруктураРеквизитовФормы.Организация, ПараметрыОтбораРегистрацийВНО);
	
	Если РегистрацииВНО.Количество() > 0 Тогда
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
		
		ОчиститьНаСервере();
		
		ЗаполнитьПустыеСтруктурыДанных();
		
		ТаблицаСтраницыРаздела2[0].Данные[0].Значение.П000020010503 = 15;
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("Организация",             СтруктураРеквизитовФормы.Организация);
		ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ПараметрыОтчета.Вставить("РегистрацииВНО",          РегистрацииВНО);
		
		Контейнер = Новый Структура;
		Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
		Контейнер.Вставить("Раздел2", СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыРаздела2"));
		Контейнер.Вставить("Раздел3", СтруктураДанныхРаздел3);
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(
			Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7),
			Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета, Контейнер);
		
		ВосстановитьМногостраничныйРазделИзТаблицы("Раздел2", Контейнер.Раздел2);
		
		РассчитатьДниОсуществленияДеятельностиВТаблицеРаздела2();
		
		ЗаполнитьПустыеСтруктурыДанных();
		
		ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		СтруктураРеквизитовФормы.СообщатьОНезаполненномКодеПоОКТМОВРазделе2 = Ложь;
		
		РасчетВСтруктуре();
		
		СтруктураРеквизитовФормы.СообщатьОНезаполненномКодеПоОКТМОВРазделе2 = Истина;
		
		ОтчетЗаполненУспешно = Истина;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КодыСТитульногоЛиста(Форма)
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		КПП   = СокрЛП(Форма.ТабличныйДокумент.Области.КПП1.Значение);
		КодНО = СокрЛП(Форма.ТабличныйДокумент.Области.КодИМНС.Значение);
	Иначе
		КПП   = СокрЛП(Форма.СтруктураДанныхТитульный.КПП1);
		КодНО = СокрЛП(Форма.СтруктураДанныхТитульный.КодИМНС);
	КонецЕсли;
	
	Возврат Новый Структура("КПП,КодНО", КПП, КодНО);
	
КонецФункции

&НаСервере
Функция СведенияМногостраничногоРазделаВТаблице(ИмяСтруктурыДанных)
	
	ОписаниеТиповНеопределено = Новый ОписаниеТипов("Неопределено");
	
	ТаблицаЗначенийСДанными = ДанныеФормыВЗначение(ЭтаФорма[ИмяСтруктурыДанных], Тип("ТаблицаЗначений"));
	
	Если ТаблицаЗначенийСДанными <> Неопределено Тогда
		
		Если ТаблицаЗначенийСДанными.Колонки.Найти("Данные") <> Неопределено Тогда
			ТаблицаЗначенийСДанными.Колонки.Удалить("Данные");
			ТаблицаЗначенийСДанными.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
			Ном = 0;
			Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийСДанными Цикл
				СтрокаТаблицыЗначений.Данные = ЭтаФорма[ИмяСтруктурыДанных][Ном].Данные[0].Значение;
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если ТаблицаЗначенийСДанными.Колонки.Найти("ДанныеДопСтрок") <> Неопределено Тогда
			ТаблицаЗначенийСДанными.Колонки.Удалить("ДанныеДопСтрок");
			ТаблицаЗначенийСДанными.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
			Ном = 0;
			Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийСДанными Цикл
				СтруктураДанныхДопСтрок = Новый Структура;
				Для Каждого ЭлСтруктуры Из ЭтаФорма[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок[0].Значение Цикл
					СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
				КонецЦикла;
				СтрокаТаблицыЗначений.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаЗначенийСДанными;
	
КонецФункции

&НаСервере
Процедура ВосстановитьМногостраничныйРазделИзТаблицы(ИмяРаздела, ТаблицаСДанными)
	
	ИмяРеквизитаФормы = Неопределено;
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяРеквизитаФормы) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитФормы = ЭтаФорма[ИмяРеквизитаФормы];
	ЗначениеВДанныеФормы(ТаблицаСДанными, РеквизитФормы);
	
	Если РеквизитФормы[0].Свойство("Данные") Тогда
		Для Каждого СтрокаТаблицы Из РеквизитФормы Цикл
			Если ТипЗнч(СтрокаТаблицы.Данные) = Тип("СписокЗначений") Тогда
				СтрокаТаблицы.Данные.Очистить();
				СтрокаТаблицы.Данные.Добавить(ТаблицаСДанными[РеквизитФормы.Индекс(СтрокаТаблицы)].Данные);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РеквизитФормы[0].Свойство("ДанныеДопСтрок") Тогда
		Ном = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаСДанными Цикл
			СтруктураДанныхДопСтрок = Новый Структура;
			Для Каждого ЭлСтруктуры Из СтрокаТаблицы.ДанныеДопСтрок Цикл
				ТаблЗнач = ЭлСтруктуры.Значение;
				СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
				ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
				СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
			КонецЦикла;
			Если РеквизитФормы[Ном].ДанныеДопСтрок.Количество() = 0 Тогда
				РеквизитФормы[Ном].ДанныеДопСтрок.Добавить();
			КонецЕсли;
			РеквизитФормы[Ном].ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрок;
			РеквизитФормы[Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела";
			Ном = Ном + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
		СтруктураРеквизитовФормы.ВидДокумента = 0;
	Иначе 
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
		"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
		ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
				ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетВСтруктуре();
	
	#Если ВебКлиент Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	#Иначе
		РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	#КонецЕсли
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета	= ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны			= ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм				= ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт					= ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		УстановитьФорматВыводаВПоляхВводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Раздел2" Тогда
		РасчетНаКлиенте("Раздел2");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2015Кв1_";
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	СоответствиеРазделовМакетам.Вставить("Титульный", ПрефиксИменМакетов + "Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",   ПрефиксИменМакетов + "Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",   ПрефиксИменМакетов + "Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел3",   ПрефиксИменМакетов + "Раздел3");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		Если Парам1.ИмяСтраницы = "Раздел1" Тогда
			ИсхКолвоСтрокБлока = 8;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;
			КонецЕсли;
			
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина);
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					
					СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина);
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
				КонецЦикла;
				
				Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
					
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);

				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		НовСтр = Показатели.Найти("НомерКорректировки", "Имя");
		Если НовСтр = Неопределено Тогда 
			НовСтр = Показатели.Добавить();
		КонецЕсли;
		НовСтр.Имя = "НомерКорректировки";
		НовСтр.Значение = Строка(НомерКорректировки);
		НовСтр.ЗначениеМЧБ = Лев(Строка(НомерКорректировки) + "---", 3);
	КонецЕсли;
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// Особая обработка ОКВЭД.
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;

	// ОКТМО.
	Для Каждого Показатель Из Показатели Цикл
		Если СтрНайти(Показатель.Имя, "П000010001003") = 1
		 ИЛИ СтрНайти(Показатель.Имя, "П000020003000") = 1 Тогда
			ОКТМО = СокрЛП(Показатель.Значение);
			ОКТМО = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОКТМО, 11, "-", 1);
			Показатель.ЗначениеМЧБ = ОКТМО;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
					
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							// Разделение числа на 2 части.
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Формат(Цел(РезультатПоиска.Значение), "ЧГ=0");
							СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							// Разделение областей показателя на 2 части.
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								// На МЧБ нет разделения на целую и дробную части.
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								// Определяем какая часть выводится (целая, дробная или точка).
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится целая часть.
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится дробная часть.
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									// Выводится точка.
									// Присваивать ничего не будем, считаем, что область заполненяется корректно.
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеВыведено
						И ПараметрыПечати.ИмяСтраницы = "Раздел1" Тогда
						
						ЗначениеВыведено = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
	
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатныеЛисты[0].Значение, СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
	
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Если Область.Имя = "Приказ" Тогда
			Область.Значение = Значение;
		Иначе
			Область.Значение = ВРЕГ(Значение);
		КонецЕсли;
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;
	
	ТаблДок = ЭтаФорма[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(СтруктураПараметровЛиста.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;	
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),"ФП = Истина");
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	Перем ТаблицаМногостраничногоДокумента;
	
	СтруктураРеквизитовФормы.мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		СтруктураРеквизитовФормы.мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	СохрСтруктура.ДанныеМногостраничныхРазделов.Свойство("Раздел2", ТаблицаМногостраничногоДокумента);
	
	Если ТаблицаМногостраничногоДокумента.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
		
		ТаблицаМногостраничногоДокумента.Колонки.Добавить("ДанныеДопСтрок");
		
		СтруктураМногострочногоРаздела2_1 = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1]], Тип("ТаблицаЗначений"));
		СтруктураМногострочногоРаздела2_2 = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2]], Тип("ТаблицаЗначений"));
		
		Для Каждого Страница Из ТаблицаМногостраничногоДокумента Цикл
			
			Если Страница.ДанныеДопСтрок = Неопределено Тогда
				
				ДанныеМСЧ = Новый Структура;
				ДанныеМСЧ.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1, СтруктураМногострочногоРаздела2_1.Скопировать());
				ДанныеМСЧ.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2, СтруктураМногострочногоРаздела2_2.Скопировать());
				Страница.ДанныеДопстрок = ДанныеМСЧ;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						СтруктураДопСтрок = Новый Структура;
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
							
							СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
							
						КонецЦикла;
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		СтруктураРеквизитовФормы.мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",		РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",			"1152016");
	ПараметрыВыгрузки.Вставить("ДатаДок",		Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч",	Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",		СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",		СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("ВидДок",		Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",		СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭДОрг",		СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("ТелОрг",		СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",		СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",		СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",		СокрЛП(Титульный.КПП1));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ФормаРеорганизации", СокрЛП(Титульный.ФормаРеорганизации));
	ПараметрыВыгрузки.Вставить("РеорганизацияИНН", СокрЛП(Титульный.РеорганизацияИНН));
	ПараметрыВыгрузки.Вставить("РеорганизацияКПП", СокрЛП(Титульный.РеорганизацияКПП));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",	СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",		ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",			ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП",	ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",		НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",		?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",		СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",		ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",			ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта",	ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_ENVD");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ЕНВД");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузкаВозможна(ПараметрыВыгрузки)
	
	СтатусПроверки = Истина;
	
	СочетаниеРазделов = Новый ТаблицаЗначений;
	СочетаниеРазделов.Колонки.Добавить("ОКТМО");
	СочетаниеРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Страница", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("ИмяОбласти");
	СочетаниеРазделов.Колонки.Добавить("Счетчик1", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Счетчик2", Новый ОписаниеТипов("Число"));
	
	ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел1(СочетаниеРазделов, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел2(СочетаниеРазделов, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел3(СтатусПроверки);
	
	ПроверитьЗаполнение_СочетаниеРазделов(СочетаниеРазделов, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки)
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда 
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ТекстОписанияОшибки = "Не задан ИНН индивидуального предпринимателя";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			ТекстОписанияОшибки = "Неверно задан ИНН индивидуального предпринимателя";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		КонецЕсли;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ТекстОписанияОшибки = "Не задан ИНН организации";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			ТекстОписанияОшибки = "Неверно задан ИНН организации";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		КонецЕсли;
		
		КПП = ПараметрыВыгрузки.КППОрг;
		ПричинаПостановки = Сред(КПП, 5, 2);
		
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
			ТекстОписанияОшибки = "Не задан КПП организации";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КПП1");
		ИначеЕсли СтрДлина(КПП) <> 9 Тогда
			ТекстОписанияОшибки = "Неверно задан КПП организации";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КПП1");
		ИначеЕсли НЕ ЗначениеСодержитсяВСписке(ПричинаПостановки, "35, 77") Тогда
			ТекстОписанияОшибки = "Код причины постановки на учет в КПП организации должен быть равен 35 или 77";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КПП1");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПериодОтч) Тогда
		ТекстОписанияОшибки = "На титульном листе не задан код отчетного периода";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "Период1");
	ИначеЕсли НЕ ЗначениеСодержитсяВСписке(ПараметрыВыгрузки.ПериодОтч, "21, 22, 23, 24, 51, 54, 55, 56, 50") Тогда
		ТекстОписанияОшибки = "На титульном листе задан некорректный код отчетного периода";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "Период1");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодИФНС) Тогда
		ТекстОписанияОшибки = "Не задан код налогового органа";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КодИМНС1");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		ТекстОписанияОшибки = "На титульном листе не задан код по месту учета";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ПоМесту");
	ИначеЕсли НЕ ЗначениеСодержитсяВСписке(ПараметрыВыгрузки.ПоМесту, "120, 214, 215, 245, 310, 320, 331") Тогда
		ТекстОписанияОшибки = "На титульном листе задан некорректный код по месту учета";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ПоМесту");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		ТекстОписанияОшибки = "Не указано полное наименование налогоплательщика";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "НаимОрг");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		ТекстОписанияОшибки = "На титульном листе не задано значение кода вида деятельности по ОКВЭД";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ОКВЭД");
	ИначеЕсли НЕ ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		ТекстОписанияОшибки = "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра)";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ОКВЭД");
	КонецЕсли;
	
	Если ЗначениеСодержитсяВСписке(ПараметрыВыгрузки.ФормаРеорганизации, "1, 2, 3, 5, 6") Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.РеорганизацияИНН) Тогда
			ТекстОписанияОшибки = "Не задан ИНН реорганизованной организации";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "РеорганизацияИНН");
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.РеорганизацияИНН) <> 10 Тогда
			ТекстОписанияОшибки = "Неверно задан ИНН реорганизованной организации";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "РеорганизацияИНН");
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.РеорганизацияКПП) Тогда
			ТекстОписанияОшибки = "Не задан КПП реорганизованной организации";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "РеорганизацияКПП");
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.РеорганизацияКПП) <> 9 Тогда
			ТекстОписанияОшибки = "Неверно задан КПП реорганизованной организации";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "РеорганизацияКПП");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта!", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел1(СочетаниеРазделов, СтатусПроверки)
	
	ДанныеРаздела = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	
	НомерСтроки = 1;
	Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
	
	Пока ДанныеРаздела.Свойство("П000010001003" + Постфикс) Цикл
		
		БлокЗаполнен = ЗначениеЗаполнено(ДанныеРаздела["П000010001003" + Постфикс])
			ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000010002003" + Постфикс]);
		
		Если БлокЗаполнен Тогда
			
			ИмяОбластиОКТМО = "П000010001003" + Постфикс;
			ОКТМО = СокрЛП(ДанныеРаздела[ИмяОбластиОКТМО]);
			ДлинаОКТМО = СтрДлина(ОКТМО);
			
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				ТекстОписанияОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " раздела 1 не" + ?(ДлинаОКТМО = 0, "", "верно") + " задан код по ОКТМО!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ИмяОбластиОКТМО);
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ОКТМО      = ОКТМО;
			Сочетание.Раздел     = 1;
			Сочетание.Страница   = 1;
			Сочетание.ИмяОбласти = ИмяОбластиОКТМО;
			Сочетание.Счетчик1   = 1;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел2(СочетаниеРазделов, СтатусПроверки)
	
	ДанныеРаздела = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		НомерЛиста = ДанныеРаздела.Индекс(ЛистРаздела) + 1;
		
		Если ЗначениеЗаполнено(ДанныеЛиста.П000020001000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002001)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002002) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002003)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002004) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002005)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002006) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002007)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002008) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002009)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020003000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020004003)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020007002) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020007003)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020007004)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020008002) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020008003)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020008004)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020009002) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020009003)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020009004)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020010003)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020011003) Тогда
			
			П000020001000 = СокрЛП(ДанныеЛиста.П000020001000);
			ДлинаП000020001000 = СтрДлина(П000020001000);
			Если ДлинаП000020001000 <> 2 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаП000020001000 = 0, "", "верно") + " указано значение кода вида предпринимательской деятельности!", "Раздел2", "П000020001000", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			П000020002002 = СокрЛП(ДанныеЛиста.П000020002002);
			ДлинаП000020002002 = СтрДлина(П000020002002);
			Если ДлинаП000020002002 <> 2 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(П000020002002) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаП000020002002 = 0, "", "верно") + " указан код субъекта в адресе места осуществления предпринимательской деятельности!", "Раздел2", "П000020002002", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ОКТМО = СокрЛП(ДанныеЛиста.П000020003000);
			ДлинаОКТМО = СтрДлина(ОКТМО);
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаОКТМО = 0, "", "верно") + " указан код по ОКТМО!", "Раздел2", "П000020003000", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ТаблЗначРаздел2 = ДанныеФормыВЗначение(ДанныеРаздела, Тип("ТаблицаЗначений"));
			
			// Анализ дат постановки/снятия с учета.
			Если НЕ ТаблЗначРаздел2.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
				
				ТаблицаПроверки = Новый ТаблицаЗначений;
				ТаблицаПроверки.Колонки.Добавить("ДатаСобытия", ОписаниеТиповДата);
				ТаблицаПроверки.Колонки.Добавить("ВидСобытия");
				
				ТаблицаПроверки.Индексы.Добавить("ДатаСобытия");
				
				ДатыПостановкиНаУчет = ЛистРаздела.ДанныеДопстрок[0].Значение[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1];
				Для Каждого ДатаПостановки Из ДатыПостановкиНаУчет Цикл
					ЗначениеДаты = ДатаПостановки["П000020006201"];
					Если ЗначениеЗаполнено(ЗначениеДаты) Тогда
						СтрокаПроверки = ТаблицаПроверки.Добавить();
						СтрокаПроверки.ДатаСобытия = ЗначениеДаты;
						СтрокаПроверки.ВидСобытия  = "Постановка";
						
						Если НЕ (НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <= ЗначениеДаты И ЗначениеДаты <= КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) Тогда
							НомерСтроки = СтрокаЧГ0(ДатыПостановкиНаУчет.Индекс(ДатаПостановки) + 1);
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 дата постановки на учет выходит за границы отчетного периода!", "Раздел2", "П000020006201_" + НомерСтроки, НомерЛиста);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ДатыСнятияСУчета = ЛистРаздела.ДанныеДопстрок[0].Значение[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2];
				Для Каждого ДатаСнятия Из ДатыСнятияСУчета Цикл
					ЗначениеДаты = ДатаСнятия["П000020006501"];
					Если ЗначениеЗаполнено(ЗначениеДаты) Тогда
						СтрокаПроверки = ТаблицаПроверки.Добавить();
						СтрокаПроверки.ДатаСобытия = ЗначениеДаты;
						СтрокаПроверки.ВидСобытия  = "Снятие";
						
						Если НЕ (НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <= ЗначениеДаты И ЗначениеДаты <= КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) Тогда
							НомерСтроки = СтрокаЧГ0(ДатыСнятияСУчета.Индекс(ДатаСнятия) + 1);
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 дата снятия с учета выходит за границы отчетного периода!", "Раздел2", "П000020006501_" + НомерСтроки, НомерЛиста);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ТаблицаПроверки.Сортировать("ДатаСобытия");
				
				Если ТаблицаПроверки.Количество() > 1 Тогда
					ПредыдущееСобытие = ТаблицаПроверки[0].ВидСобытия;
					Для Инд = 1 По ТаблицаПроверки.Количество() - 1 Цикл
						ТекущееСобытие = ТаблицаПроверки[Инд].ВидСобытия;
						Если ПредыдущееСобытие = ТекущееСобытие Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 задана некорректная последовательность событий постановки/снятия с учета!", "Раздел2", "П000020006201_1", НомерЛиста);
							СтатусПроверки = Ложь;
							Прервать;
						КонецЕсли;
						ПредыдущееСобытие = ТекущееСобытие;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ОКТМО      = ОКТМО;
			Сочетание.Раздел     = 2;
			Сочетание.Страница   = НомерЛиста;
			Сочетание.ИмяОбласти = "П000020003000";
			Сочетание.Счетчик2   = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел3(СтатусПроверки)
	
	ИмяОбластиПризнакаНП = "П000030000503";
	
	ПризнакНП = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел3[ИмяОбластиПризнакаНП];
	
	Если НЕ ЗначениеЗаполнено(ПризнакНП) Тогда
		ТекстОписанияОшибки = "В разделе 3 не задан признак налогоплательщика";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел3", ИмяОбластиПризнакаНП);
	ИначеЕсли НЕ ЗначениеСодержитсяВСписке(ПризнакНП, "1, 2") Тогда
		ТекстОписанияОшибки = "В разделе 3 задан некорректный признак налогоплательщика";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел3", ИмяОбластиПризнакаНП);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_СочетаниеРазделов(СочетаниеРазделов, СтатусПроверки)
	
	СочетанияРаздела1 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 1));
	СочетанияРаздела2 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 2));
	
	СокращеннаяПроверка = Ложь;
	
	Если СочетанияРаздела1.Количество() = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не заполнен ни один блок с информацией о суммах налога!", "Раздел1", "П000010001003_1");
		СтатусПроверки = Ложь;
		
		СокращеннаяПроверка = Истина;
	КонецЕсли;
	
	Если СочетанияРаздела2.Количество() = 0  Тогда
		СообщениеОбОшибке = "В декларации отсутствуют заполненные листы раздела 2!";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Раздел2", "П000020001000", 1);
		СтатусПроверки = Ложь;
		
		СокращеннаяПроверка = Истина;
	КонецЕсли;
	
	Если СокращеннаяПроверка Тогда
		Возврат;
	КонецЕсли;
	
	ПовторенияРаздела1 = СочетаниеРазделов.Скопировать(СочетанияРаздела1);
	ПовторенияРаздела1.Свернуть("ОКТМО", "Счетчик1");
	
	Для Каждого СтрокаПроверки Из ПовторенияРаздела1 Цикл
		Если СтрокаПроверки.Счетчик1 > 1 И ЗначениеЗаполнено(СтрокаПроверки.ОКТМО) Тогда
			УсловияПоиска = Новый Структура("ОКТМО, Раздел", СтрокаПроверки.ОКТМО, 1);
			СтрокиДубликатов = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			ТаблицаДубликатов = СочетаниеРазделов.Скопировать(СтрокиДубликатов);
			ТаблицаДубликатов.Сортировать("ИмяОбласти");
			
			ПозицияПерехода = ТаблицаДубликатов[0].ИмяОбласти;
			
			СообщениеОбОшибке = "Обнаружены дублирующиеся значения кода по ОКТМО " + СтрокаПроверки.ОКТМО + " в разделе 1!";
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Раздел1", ПозицияПерехода);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СочетаниеРазделовСвернутое = СочетаниеРазделов.Скопировать();
	СочетаниеРазделовСвернутое.Свернуть("ОКТМО", "Счетчик1, Счетчик2");
	
	Для Каждого Сочетание Из СочетаниеРазделовСвернутое Цикл
		// Связи раздела 1.
		Если Сочетание.Счетчик1 <> 0 И Сочетание.Счетчик2 = 0 И ЗначениеЗаполнено(Сочетание.ОКТМО) Тогда
			УсловияПоиска = Новый Структура("ОКТМО, Раздел", Сочетание.ОКТМО, 1);
			НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			
			ПозицияПерехода = НесвязанныеСтроки[0].ИмяОбласти;
			СообщениеОбОшибке = "Для кода по ОКТМО " + Сочетание.ОКТМО
			                  + " раздела 1 не обнаружены заполненые листы разделов определения налоговой базы";
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Раздел1", ПозицияПерехода);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Связи раздела 2.
		Если Сочетание.Счетчик1 = 0 И Сочетание.Счетчик2 <> 0 И ЗначениеЗаполнено(Сочетание.ОКТМО) Тогда
			УсловияПоиска = Новый Структура("ОКТМО, Раздел", Сочетание.ОКТМО, 2);
			НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			
			СтраницаПерехода = НесвязанныеСтроки[0].Страница;
			ПозицияПерехода = "П000020001001";
			
			СообщениеОбОшибке = "Для кода по ОКТМО " + НесвязанныеСтроки[0].ОКТМО + " на листе " + СтрокаЧГ0(СтраницаПерехода)
			                  + " раздела 2 не найдены соответствующие значения кода по ОКТМО в разделе 1";
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Раздел2", ПозицияПерехода, СтраницаПерехода);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, Раздел, Показатель, ЛистРаздела = Неопределено)
	
	СтатусПроверки = Ложь;
	Если ЛистРаздела = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, Раздел, Показатель);
	Иначе
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, Раздел, Показатель, ЛистРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСодержитсяВСписке(ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

&НаСервере
Функция ОКВЭДСоответствуетТребованиям(Знач ОКВЭД) Экспорт
	
	ОКВЭД = СокрЛП(ОКВЭД);
	Для Инд = 1 По СтрДлина(ОКВЭД) Цикл
		ТекСимв = Сред(ОКВЭД, Инд, 1);
		Если ТекСимв >= "0" И ТекСимв <= "8" Тогда
			ОКВЭД = Лев(ОКВЭД, Инд - 1) + "9" + Сред(ОКВЭД, Инд + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОКВЭД = "99" ИЛИ ОКВЭД = "99.9" ИЛИ ОКВЭД = "99.99" ИЛИ ОКВЭД = "99.99.9" ИЛИ ОКВЭД = "99.99.99";
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки505");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
			+ "_" + ПараметрыВыгрузки.КодИФНС
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(СтруктураРеквизитовФормы.мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Раздел1 = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	Раздел3 = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	Узел_СумНалПУВД = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУВД");
	
	ПрототипУзла_СумПУВД = ПолучитьПодчиненныйЭлемент(Узел_СумНалПУВД, "СумПУВД");
	
	НомерСтрокиМСЧ = 1;
	Постфикс = "_" + СтрокаЧГ0(НомерСтрокиМСЧ);
	Пока Раздел1.Свойство("П000010001003" + Постфикс) Цикл
		ОКТМО = СокрЛП(Раздел1["П000010001003" + Постфикс]);
		НалПУ = Раздел1["П000010002003" + Постфикс];
		
		Если ЗначениеЗаполнено(ОКТМО) Тогда
			Узел_СумПУВД = НовыйУзелИзПрототипа(ПрототипУзла_СумПУВД);
			ЗадатьЗначениеЭлемента(Узел_СумПУВД, "ОКТМО", ОКТМО);
			ЗадатьЗначениеЭлемента(Узел_СумПУВД, "НалПУ", НалПУ);
			
			ПрототипУзла_РасчНалВД = ПолучитьПодчиненныйЭлемент(Узел_СумПУВД, "РасчНалВД");
			
			Для Каждого ЛистРаздела2 Из Раздел2 Цикл
				ДанныеЛистаРаздела2 = ЛистРаздела2.Данные[0].Значение;
				Если ОКТМО <> СокрЛП(ДанныеЛистаРаздела2.П000020003000) Тогда
					Продолжить;
				КонецЕсли;
				
				Узел_РасчНалВД = НовыйУзелИзПрототипа(ПрототипУзла_РасчНалВД);
				
				ЗаполнитьДаннымиУзел(ДанныеЛистаРаздела2, Узел_РасчНалВД);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_РасчНалВД);
			
		КонецЕсли;
		
		НомерСтрокиМСЧ = НомерСтрокиМСЧ + 1;
		Постфикс = "_" + СтрокаЧГ0(НомерСтрокиМСЧ);
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СумПУВД);
	
	Узел_СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	ЗаполнитьДаннымиУзел(Раздел3, Узел_СумНалПУ);
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ТипНП);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ТипНП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(ТипНП = Неопределено)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УстановитьДоступностьОбластей(ЭтаФорма, ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяСтраницы);
	
	Если ИмяСтраницы = "Раздел2" Тогда
		
		РассчитатьДниОсуществленияДеятельности();
		
		Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) >= '2015-10-01' Тогда
			
			ТабличныйДокумент.Области.П000020010503.Значение = 15;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаКлиенте("ПолеТабличногоДокумента" + ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте("ПолеТабличногоДокумента" + ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
 КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если СтрНайти(Область.Имя, "П000020006201") = 1
	 ИЛИ СтрНайти(Область.Имя, "П000020006501") = 1 Тогда
		РассчитатьДниОсуществленияДеятельности();
	КонецЕсли;
	
	Если Область.Имя = "ДатаПодписи" Тогда 
		ДатаПодписи = Область.Значение;
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
		ЗаполнитьДатуВЯчейкахНаКлиенте();
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел3.Очистить();
	
	ТаблицаСтраницыРаздела2.Очистить();
	
	Для Каждого МнЧРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[МнЧРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ИнициализацияМногостраничныхРазделов();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный"  Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел1;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Если ИмяГруппы <> "П0000200062" И ИмяГруппы <> "П0000200065" Тогда
			
			ТестовоеИмя = ИмяГруппы + "1003_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
			Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
			Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
				ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПРОВЕРКИ КОНТРОЛЬНЫХ СООТНОШЕНИЙ

#Область МеханизмПроверкиКонтрольныхСоотношений

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда 
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда 
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	Иначе
		СписокРасшифровкиформулы.Очистить();
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	ПроверитьКС_1(СтруктураРезультата);
	ПроверитьКС_2(СтруктураРезультата);
	ПроверитьКС_3(СтруктураРезультата);
	ПроверитьКС_4(СтруктураРезультата);
	ПроверитьКС_5(СтруктураРезультата);
	ПроверитьКС_6_1(СтруктураРезультата);
	ПроверитьКС_6_2(СтруктураРезультата);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда 
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор);
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", АдресВоВременномХранилище);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ПроверитьКС_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 1 (КС 1)'");
	ОписаниеКС = НСтр("ru='Сумма единого налога на вмененный доход, подлежащая уплате за налоговый период (строка 020 Раздел1 по ОКТМО = %1)
							|должна быть равна произведению суммы налога, подлежащей уплате в бюджет (строка 040 Раздела 3) и результата деления суммы строк 110
							|всех Разделов 2 (по ОКТМО = %1) и суммы налога, исчисленного по всем ОКТМО (строка 010 Раздела 3)'");
	
	Нарушение      = НСтр("ru='Арифметическая ошибка'");
	ОписаниеОшибки = НСтр("ru=''");
	
	СтруктураРаздела1 = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела3 = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Подсчитываем число заполненых ОКТМО
	КоличествоБлоков = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000010002003_1");
	ВсегоБлоков = 0;
	ТекущийБлок = 0;
	
	НомерСтраницы = 1;
	
	Для Индекс = 1 По КоличествоБлоков Цикл
		ИмяПоказателяОКТМО = "П000010002003_" + Индекс;
		КодОКТМО = СокрЛП(СтруктураРаздела1[ИмяПоказателяОКТМО]);
		
		Если НЕ ПустаяСтрока(КодОКТМО) Тогда 
			ВсегоБлоков = ВсегоБлоков + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс = 1 По КоличествоБлоков Цикл
		
		КодОКТМО = ПоказательПоСтроке("КодОКТМО");
		ВставитьЗначениеМногострочногоПоказателя(СтруктураРаздела1, КодОКТМО, Индекс);
		Если ПустаяСтрока(КодОКТМО.Значение) Тогда
			Продолжить;
			
		КонецЕсли;
		
		ТекущийБлок = ТекущийБлок + 1;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеКС, КодОКТМО.ЗначениеСтр));
		
		Р1Стр020 = ПоказательПоСтроке("Р1Стр020");
		ВставитьЗначениеМногострочногоПоказателя(СтруктураРаздела1, Р1Стр020, Индекс);
		ВнестиПоказательВРасшифровку(Р1Стр020, "Раздел1");
		
		Р3Стр010 = ПоказательПоСтроке("Р3Стр010");
		ВставитьЗначениеПоказателя(СтруктураРаздела3, Р3Стр010);
		ВнестиПоказательВРасшифровку(Р3Стр010, "Раздел3");
		
		Р3Стр040 = ПоказательПоСтроке("Р3Стр040");
		ВставитьЗначениеПоказателя(СтруктураРаздела3, Р3Стр040);
		ВнестиПоказательВРасшифровку(Р3Стр040, "Раздел3");
		СуммаНалогаДолжноБытьВсего = Р3Стр040.Значение;
		СуммаНалогаПоВсемОКТМО = 0;
		
		СуммаР2Стр110 = 0;
		
		Для каждого СтраницаР2 Из СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2 Цикл
			НомерСтраницыР2 = Строка(СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2.Индекс(СтраницаР2) + 1);
			
			КодОКТМОНаСтранице = СтраницаР2.Данные[0].Значение["П000020003000"];
			Если ПустаяСтрока(КодОКТМОНаСтранице) ИЛИ КодОКТМО.Значение <> КодОКТМОНаСтранице Тогда 
				Продолжить;
				
			КонецЕсли;
			
			Р2Стр110 = ПоказательПоСтроке("Р2Стр110");
			ВставитьЗначениеПоказателя(СтраницаР2.Данные[0].Значение, Р2Стр110);
			ВнестиПоказательВРасшифровку(Р2Стр110, "Раздел2", НомерСтраницыР2);
			СуммаР2Стр110 = СуммаР2Стр110 + Р2Стр110.Значение;
			
		КонецЦикла;
		
		СуммаР2Стр110Стр = Формат(СуммаР2Стр110, "ЧРД=.;ЧН=0");
		
		Если ТекущийБлок = ВсегоБлоков Тогда 
			// Крайний ОКТМО, значит правая часть КС 
			ПраваяЧасть = СуммаНалогаДолжноБытьВсего - СуммаНалогаПоВсемОКТМО;
			ПраваяЧастьРасшифровка = Формат(СуммаНалогаДолжноБытьВсего, "ЧРД=.;ЧН=0") + " - "
				+ Формат(СуммаНалогаПоВсемОКТМО, "ЧРД=.;ЧН=0");
			
		Иначе
			// Очередной ОКТМО, вычисляем по формуле КС
			ПраваяЧасть = ?(Р3Стр010.Значение = 0, 0, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
				Р3Стр040.Значение * СуммаР2Стр110 / Р3Стр010.Значение));
			СуммаНалогаПоВсемОКТМО = СуммаНалогаПоВсемОКТМО + ПраваяЧасть;
			
			Если Р3Стр010.Значение = 0 Тогда
				ПраваяЧастьРасшифровка = Формат(0, "ЧРД=.;ЧН=0");
				
			Иначе
				ПраваяЧастьРасшифровка = Р3Стр040.ЗначениеСтр + " * " + СуммаР2Стр110Стр + " / " + Р3Стр010.ЗначениеСтр;
				
			КонецЕсли;
			
		КонецЕсли;
		
		КС = ПоказателиКС(Р1Стр020.Значение, ПраваяЧасть);
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + ПраваяЧастьРасшифровка + " Итог [" + КС.ПраваяЧастьСтр + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеКС, КодОКТМО.ЗначениеСтр), ОбщееЧислоОшибок,
			ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 2 (КС 2)'");
	ОписаниеКС = НСтр("ru='Значение базовой доходности на единицу физического показателя (строка 040 Раздела 2) должно соответствовать значению из Справочника ""Коды видов предпринимательской деятельности и значения базовой доходности на единицу физического показателя""'");
	
	Нарушение      = НСтр("ru='Неправильное применение значений базовой доходности на единицу физического показателя'");
	ОписаниеОшибки = НСтр("ru=''");
	
	ИмяРаздела = "Раздел2";
	НазваниеСписка = "СпискиВыбора2015Кв1";
	НазваниеОбласти = "КодыВидовДеятельности";
	ТекстВЗаголовкеКРасшифровке = "Значение базовой доходности на единицу физического показателя";
	ПустоеЗначениеЯвляетсяОшибкой = "0";
	
	Р2Стр010 = ПоказательПоСтроке("Р2Стр010");
	Р2Стр040 = ПоказательПоСтроке("Р2Стр040");
	
	ВозможныеЗначения = ПолучитьВозможныеЗначения(НазваниеСписка, НазваниеОбласти);
	
	НомерСтраницы = 1;
	
	// РАЗДЕЛ МНОГОСТРАНИЧНЫЙ
	Для Каждого Страница Из СтруктураРеквизитовФормы.мДанныеОтчета[ИмяРаздела] Цикл
		
		Раздел2 = Страница.Данные[0].Значение;
		ВставитьЗначениеПоказателя(Раздел2, Р2Стр010);
		ВставитьЗначениеПоказателя(Раздел2, Р2Стр040);
		
		// Регистрируем формулу для каждого экземпляра листа.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		// Код вида предпринимательской деятельности (код стр. 010)
		ВнестиПоказательВРасшифровку(Р2Стр010, ИмяРаздела, НомерСтраницы);
		ВнестиПоказательВРасшифровку(Р2Стр040, ИмяРаздела, НомерСтраницы);
		
		//Непосредственно проверяем на ошибку
		НайденнаяСтр = Неопределено;
		НайденнаяСтр = ВозможныеЗначения.Найти(Р2Стр010.Значение, "Код");
		Если НайденнаяСтр = Неопределено Тогда
			ПраваяЧасть = 0;
		ИначеЕсли НайденнаяСтр.Код = "20" Тогда 
			Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2013-01-01' Тогда
				ПраваяЧасть = 10000;
			Иначе
				ПраваяЧасть = 5000;
			КонецЕсли;
		Иначе
			ПраваяЧасть = НайденнаяСтр.Значение;
		КонецЕсли;
		
		КС = ПоказателиКС(Р2Стр040.Значение, ПраваяЧасть);
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ЭтоОшибка = Ложь;
			
		Иначе
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ЭтоОшибка = Истина;
			
		КонецЕсли;
		
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
			
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 2 (КС 3)'");
	ОписаниеКС   = НСтр("ru='Сумма налоговой базы по ЕНВД (строка 100 Раздела 2) должна быть равна сумме значений по строкам 070, 080, 090 графы 4 Раздела 2 по одноименному ОКТМО (строка 030)'");
	
	Нарушение      = НСтр("ru='п.п. 2, 4 ст.346.29 НК РФ'");
	ОписаниеОшибки = НСтр("ru='Неправильно исчислена налоговая база за налоговый период.'");
	
	Р2Стр100 = ПоказательПоСтроке("Р2Стр100");
	Р2Стр070 = ПоказательПоСтроке("Р2Стр070");
	Р2Стр080 = ПоказательПоСтроке("Р2Стр080");
	Р2Стр090 = ПоказательПоСтроке("Р2Стр090");
	
	НомерСтраницы = 1;
	
	Для каждого Страница Из СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2 Цикл
		
		Раздел2 = Страница.Данные[0].Значение;
		
		ВставитьЗначениеПоказателя(Раздел2, Р2Стр100);
		ВставитьЗначениеПоказателя(Раздел2, Р2Стр070);
		ВставитьЗначениеПоказателя(Раздел2, Р2Стр080);
		ВставитьЗначениеПоказателя(Раздел2, Р2Стр090);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр100, "Раздел2", НомерСтраницы);
		ВнестиПоказательВРасшифровку(Р2Стр070, "Раздел2", НомерСтраницы);
		ВнестиПоказательВРасшифровку(Р2Стр080, "Раздел2", НомерСтраницы);
		ВнестиПоказательВРасшифровку(Р2Стр090, "Раздел2", НомерСтраницы);
		
		КС = ПоказателиКС(Р2Стр100.Значение, (Р2Стр070.Значение + Р2Стр080.Значение + Р2Стр090.Значение));
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р2Стр070.ЗначениеСтр + " + " + Р2Стр080.ЗначениеСтр + " + " + Р2Стр090.ЗначениеСтр + " Итог ["
			+ КС.ПраваяЧастьСтр + "]";
	
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 2 (КС 4)'");
	ОписаниеКС   = НСтр("ru='Сумма исчисленного единого налога на вмененный доход (строка 110 Раздела 2) должна быть равна произведению налоговой базы (строка 100 Раздела 2) и налоговой ставки 15% по одноименному ОКТМО.'");
	
	Нарушение      = НСтр("ru='п.п. 2, 4 ст.346.29 и ст.246.31 НК РФ'");
	ОписаниеОшибки = НСтр("ru='Неправильное исчисление суммы ЕНВД за налоговый период'");
	
	Р2Стр100 = ПоказательПоСтроке("Р2Стр100");
	Р2Стр110 = ПоказательПоСтроке("Р2Стр110");
	
	НомерСтраницы = 1;
	
	Для каждого Страница Из СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2 Цикл
		
		Раздел2 = Страница.Данные[0].Значение;
		
		ВставитьЗначениеПоказателя(Раздел2, Р2Стр110);
		ВставитьЗначениеПоказателя(Раздел2, Р2Стр100);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр100, "Раздел2", НомерСтраницы);
		ВнестиПоказательВРасшифровку(Р2Стр110, "Раздел2", НомерСтраницы);
		
		КС = ПоказателиКС(Р2Стр110.Значение, (Р2Стр100.Значение * 0.15));
		
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р2Стр100.ЗначениеСтр + " * 15% Итог [" + КС.ПраваяЧастьСтр + "]";
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 3 (КС 5)'");
	ОписаниеКС   = НСтр("ru='Сумма исчисленного единого налога на вмененный доход (строка 010 Раздел 3) должна быть равна сумме строк 110 всех заполненных Разделов 2'");
	
	Нарушение      = НСтр("ru='Арифметическая ошибка'");
	ОписаниеОшибки = НСтр("ru=''");
	
	Р2Стр110 = ПоказательПоСтроке("Р2Стр110");
	Р3Стр010 = ПоказательПоСтроке("Р3Стр010");
	
	Раздел3 = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	ВставитьЗначениеПоказателя(Раздел3, Р3Стр010);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р3Стр010, "Раздел3");
	
	СуммаР2Стр110 = 0;
	Расшифровка = "";
	
	НомерСтраницы = 1;
	Для каждого Страница Из СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2 Цикл
		
		Раздел2 = Страница.Данные[0].Значение;
		ВставитьЗначениеПоказателя(Раздел2, Р2Стр110);
		ВнестиПоказательВРасшифровку(Р2Стр110, "Раздел2", НомерСтраницы);
		
		СуммаР2Стр110 = СуммаР2Стр110 + Р2Стр110.Значение;
		Если Р2Стр110.Значение > 0 Тогда
			Расшифровка = Расшифровка + ?(ЗначениеЗаполнено(Расшифровка), " + ", "") + Р2Стр110.Значение;
			
		КонецЕсли;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	КС = ПоказателиКС(Р3Стр010.Значение, СуммаР2Стр110);
	
	Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Расшифровка + " Итог [" + КС.ПраваяЧастьСтр + "]";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
		Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 3 (КС 6.1)'");
	ОписаниеКС   = НСтр("ru='Сумма единого налога на вмененный доход, подлежащий к уплате (строка 040 Раздела 3) должна быть равна разнице значений по строке 010 Раздела 3 и по строке 020 Раздела 3, если результат такого вычитания больше или равен 50% строки 010 Раздела 3 и строка 005 Раздела 3 = ""1""'");
	
	Нарушение      = НСтр("ru='Арифметическая ошибка'");
	ОписаниеОшибки = НСтр("ru=''");
	
	Р3Стр040 = ПоказательПоСтроке("Р3Стр040");
	Р3Стр010 = ПоказательПоСтроке("Р3Стр010");
	Р3Стр020 = ПоказательПоСтроке("Р3Стр020");
	Р3Стр005 = ПоказательПоСтроке("Р3Стр005");
	
	Раздел3 = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	ВставитьЗначениеПоказателя(Раздел3, Р3Стр040);
	ВставитьЗначениеПоказателя(Раздел3, Р3Стр010);
	ВставитьЗначениеПоказателя(Раздел3, Р3Стр020);
	ВставитьЗначениеПоказателя(Раздел3, Р3Стр005);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р3Стр040, "Раздел3");
	ВнестиПоказательВРасшифровку(Р3Стр010, "Раздел3");
	ВнестиПоказательВРасшифровку(Р3Стр020, "Раздел3");
	ВнестиПоказательВРасшифровку(Р3Стр005, "Раздел3");
	
	КС = ПоказателиКС(Р3Стр040.Значение, Р3Стр010.Значение - Р3Стр020.Значение);
	
	УсловиеВыполнено = (Р3Стр005.Значение = 1) И (КС.ПраваяЧасть >= Р3Стр010.Значение / 2);
	
	Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р3Стр010.ЗначениеСтр + " - " + Р3Стр020.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "], когда "
		+ КС.ПраваяЧастьСтр + " >= " + Формат(Р3Стр010.Значение / 2, "ЧРД=.;ЧН=0") + " и " + Р3Стр005.Значение + " = 1";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
		Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 3 (КС 6.2)'");
	ОписаниеКС   = НСтр("ru='Сумма единого налога на вмененный доход, подлежащий к уплате (строка 040 Раздела 3) должна быть равна разнице значений по строкам 010 Раздела 3 и по строке 030 Раздела 3, если результат такого вычитания больше или равен нулю и строка 005 Раздела 3 = ""2""'");
	
	Нарушение      = НСтр("ru='Арифметическая ошибка'");
	ОписаниеОшибки = НСтр("ru=''");
	
	Р3Стр040 = ПоказательПоСтроке("Р3Стр040");
	Р3Стр010 = ПоказательПоСтроке("Р3Стр010");
	Р3Стр030 = ПоказательПоСтроке("Р3Стр030");
	Р3Стр005 = ПоказательПоСтроке("Р3Стр005");
	
	Раздел3 = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	ВставитьЗначениеПоказателя(Раздел3, Р3Стр040);
	ВставитьЗначениеПоказателя(Раздел3, Р3Стр010);
	ВставитьЗначениеПоказателя(Раздел3, Р3Стр030);
	ВставитьЗначениеПоказателя(Раздел3, Р3Стр005);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р3Стр040, "Раздел3");
	ВнестиПоказательВРасшифровку(Р3Стр010, "Раздел3");
	ВнестиПоказательВРасшифровку(Р3Стр030, "Раздел3");
	ВнестиПоказательВРасшифровку(Р3Стр005, "Раздел3");
	
	КС = ПоказателиКС(Р3Стр040.Значение, Р3Стр010.Значение - Р3Стр030.Значение);
	
	УсловиеВыполнено = (Р3Стр005.Значение = 2) И (КС.ПраваяЧасть >= 0);
	
	Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р3Стр010.ЗначениеСтр + " - " + Р3Стр030.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "], когда "
		+ КС.ПраваяЧастьСтр + " >= 0 и " + Р3Стр005.ЗначениеСтр + " = 2";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
		Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Функция ПоказательПоСтроке(УсловныйКодПоказателя)
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	
	Если УсловныйКодПоказателя = "КодОКТМО" Тогда
		Результат.Вставить("Имя", "П000010001003_%1");
		Результат.Вставить("Представление", НСтр("ru='Код по ОКТМО (строка 010 раздела 1)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр010" Тогда
		Результат.Вставить("Имя", "П000030001003");
		Результат.Вставить("Представление", НСтр("ru='Сумма исчисленного за налоговый период единого налога на вмененный доход'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр020" Тогда
		Результат.Вставить("Имя", "П000010002003_%1");
		Результат.Вставить("Представление", НСтр("ru='Сумма единого налога на вмененный доход, подлежащая уплате за налоговый период (строка 020 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр040" Тогда
		Результат.Вставить("Имя", "П000030004003");
		Результат.Вставить("Представление", НСтр("ru='Общая сумма единого налога на вмененный доход, подлежащая уплате в бюджет за налоговый период'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр110" Тогда
		Результат.Вставить("Имя", "П000020011003");
		Результат.Вставить("Представление", НСтр("ru='Сумма исчисленного единого налога на вмененный доход за налоговый период'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр100" Тогда
		Результат.Вставить("Имя", "П000020010003");
		Результат.Вставить("Представление", НСтр("ru='Налоговая база всего'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр070" Тогда
		Результат.Вставить("Имя", "П000020007004");
		Результат.Вставить("Представление", НСтр("ru='Налоговая база в 1 месяце квартала'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр080" Тогда
		Результат.Вставить("Имя", "П000020008004");
		Результат.Вставить("Представление", НСтр("ru='Налоговая база во 2 месяце квартала'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр090" Тогда
		Результат.Вставить("Имя", "П000020009004");
		Результат.Вставить("Представление", НСтр("ru='Налоговая база в 3 месяце квартала'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр110" Тогда
		Результат.Вставить("Имя", "П000020011003");
		Результат.Вставить("Представление", НСтр("ru='Сумма исчисленного единого налога на вмененный доход за налоговый период'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр010" Тогда
		Результат.Вставить("Имя", "П000030001003");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа к уменьшению'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр020" Тогда
		Результат.Вставить("Имя", "П000030002003");
		Результат.Вставить("Представление", НСтр("ru='Сумма страховых взносов, на которые может быть уменьшена сумма исчисленного за налоговый период налога'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр030" Тогда
		Результат.Вставить("Имя", "П000030003003");
		Результат.Вставить("Представление", НСтр("ru='Сумма стаховых взносов, уплаченных индивидуальным предпринимателем в Пенсионный фонд Российской Федерации и в Федеральный фонд обязательного медицинского страхования в фиксированном размере'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр005" Тогда
		Результат.Вставить("Имя", "П000030000503");
		Результат.Вставить("Представление", НСтр("ru='Признак налогоплательщика'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр040" Тогда
		Результат.Вставить("Имя", "П000020004003");
		Результат.Вставить("Представление", НСтр("ru='Базовая доходность на единицу физического показателя в месяц'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр010" Тогда
		Результат.Вставить("Имя", "П000020001000");
		Результат.Вставить("Представление", НСтр("ru='Код вида предпринимательской деятельности'"));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель)
	
	Если ИсточникДанных.Свойство(Показатель.Имя) Тогда
		ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеМногострочногоПоказателя(ИсточникДанных, Показатель, НомерСтроки)
	
	НомерСтрокиСтр = СтрокаЧГ0(НомерСтроки);
	ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, НомерСтрокиСтр);
	
	Если ИсточникДанных.Свойство(ИмяПоказателя) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	Показатель.Вставить("НомерСтроки", НомерСтрокиСтр);
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Процедура ВнестиПоказательВРасшифровку(Показатель, ИмяСтраницы, НомерСтраницы = Неопределено)
	
	ПредставлениеПоказателя = Показатель.Представление;
	
	ЗначениеПоказателя = ?(ТипЗнч(Показатель.Значение) = Тип ("Дата"), Показатель.ЗначениеСтр, Показатель.Значение);
	
	Если Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		ПредставлениеПоказателя,
		ЗначениеПоказателя,
		"",
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
		ИмяСтраницы,
		Неопределено,
		НомерСтраницы,
		СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция ПоказателиКС(ЛеваяЧасть, ПраваяЧасть, РазмерЛев = Истина, РазмерПрав = Истина)
	
	ПоказателиКС = Новый Структура();
	
	Если РазмерЛев Тогда 
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть);
	КонецЕсли;
	
	Если РазмерПрав Тогда 
		ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть);
	КонецЕсли;
	
	ПоказателиКС.Вставить("ЛеваяЧасть", ЛеваяЧасть);
	ПоказателиКС.Вставить("ЛеваяЧастьСтр", Формат(ЛеваяЧасть, "ЧРД=,; ЧН="));
	
	ПоказателиКС.Вставить("ПраваяЧасть", ПраваяЧасть);
	ПоказателиКС.Вставить("ПраваяЧастьСтр", Формат(ПраваяЧасть, "ЧРД=,; ЧН="));
	
	Возврат ПоказателиКС;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание = Неопределено, Нарушение = Неопределено)
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Описание));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Нарушение));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВозможныеЗначения(НазваниеСписка, НазваниеОбласти)
	
	ТаблРезультат = Новый ТаблицаЗначений;
	ТаблРезультат.Колонки.Добавить("Код");
	ТаблРезультат.Колонки.Добавить("Название");
	
	Если НазваниеОбласти = "КодыВидовДеятельности" Тогда 
		ТаблРезультат.Колонки.Добавить("Значение");
	КонецЕсли;
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(НазваниеСписка);
	ТекОбласть = Макет.Области.Найти(НазваниеОбласти);
	
	Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
		// Перебираем строки макета.
		Код = СокрП(Макет.Область(Ном, 1).Текст);
		Название = СокрП(Макет.Область(Ном, 2).Текст);
		Если НазваниеОбласти = "КодыВидовДеятельности" Тогда 
			Значение = СокрП(Макет.Область(Ном, 4).Текст);
			Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), 0);
		КонецЕсли;
		Если Код = "###" Тогда
			Прервать;
		Иначе
			НовСтрока = ТаблРезультат.Добавить();
			НовСтрока.Код= Код;
			НовСтрока.Название = Название;
			Если НазваниеОбласти = "КодыВидовДеятельности" Тогда 
				НовСтрока.Значение = Значение;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблРезультат;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры