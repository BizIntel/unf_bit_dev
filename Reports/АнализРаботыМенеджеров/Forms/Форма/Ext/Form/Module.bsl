
&НаКлиенте
Перем ДанныеВыбораПериодаИзВыпадающегоСписка;

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПараметрыИзмененияФормы = Новый Структура;
	ПараметрыИзмененияФормы.Вставить("РеквизитыКУдалению", Новый Массив);
	ПараметрыИзмененияФормы.Вставить("СоответствиеКолонок", Новый Соответствие);
	
	Если НЕ ЗначениеЗаполнено(ОтборПериодЗначение) Тогда
		ОтборПериодЗначение.Вариант = ВариантСтандартногоПериода.Месяц;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппаПоказателей) Тогда
		ГруппаПоказателей = "События";
	КонецЕсли;
	
	ОтборПериодВид = ОтчетыКлиентСервер.ПолучитьВидСтандартногоПериода(ОтборПериодЗначение, Элементы.ОтборПериодВид.СписокВыбора);
	ОтборПериодПредставление = ОтчетыУНФКлиентСервер.ПредставлениеСтандартногоПериода(ОтборПериодЗначение, ОтборПериодВид);
	Если ОтборПериодВид = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		Элементы.СтраницыПериода.ТекущаяСтраница = Элементы.СтраницаПроизвольныйПериод;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("СФормироватьПриОткрытии", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
Процедура ГруппаПоказателейПриИзменении(Элемент)
	
	СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодВидПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборПериодВид) Тогда
		ВыбранПроизвольный = ОтборПериодВид = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
	Иначе
		ОтборПериодВид = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
		ВыбранПроизвольный = Истина;
	КонецЕсли;
	
	Если ВыбранПроизвольный Тогда
		
		// Переключение страницы.
		Элементы.СтраницыПериода.ТекущаяСтраница = Элементы.СтраницаПроизвольныйПериод;
		
		ОтборПериодЗначение.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		
	Иначе
		
		// Переключение страницы.
		Элементы.СтраницыПериода.ТекущаяСтраница = Элементы.СтраницаСтандартныйПериод;
		
		// Приведение значения периода в соответствие с выбранным видом.
		ДатаСеанса = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		НачалоПериода = НачалоДня(ОтборПериодЗначение.ДатаНачала);
		КонецПериода = КонецДня(ОтборПериодЗначение.ДатаОкончания);
		Если Не ЗначениеЗаполнено(НачалоПериода)
			Или (ДатаСеанса >= НачалоПериода И ДатаСеанса <= КонецПериода) Тогда
			НачалоПериода = ДатаСеанса;
		КонецЕсли;
		НачалоПериода = ОтчетыКлиентСервер.НачалоПериодаОтчета(ОтборПериодВид, НачалоПериода);
		КонецПериода  = ОтчетыКлиентСервер.КонецПериодаОтчета(ОтборПериодВид, НачалоПериода);
		
		ОтборПериодЗначение.ДатаНачала    = НачалоПериода;
		ОтборПериодЗначение.ДатаОкончания = КонецПериода;
		
	КонецЕсли;
	
	ОтборПериодПредставление = ОтчетыУНФКлиентСервер.ПредставлениеСтандартногоПериода(ОтборПериодЗначение, ОтборПериодВид);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = ОтборПериодЗначение.ДатаНачала;
	Если НачалоПериода = '00010101' Тогда
		НачалоПериода = ОтчетыКлиентСервер.НачалоПериодаОтчета(ОтборПериодВид, ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	// Параметры для чтения из обработчиков:
	ПараметрыВыбора = Новый Структура;
	// Для выбора значения:
	ПараметрыВыбора.Вставить("Значение",               ОтборПериодЗначение);
	ПараметрыВыбора.Вставить("Элемент",                Элемент);
	// Для загрузки значения:
	ПараметрыВыбора.Вставить("ВидПериода",             ОтборПериодВид);
	
	ВыборПериодаИзВыпадающегоСписка(-1, ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодДатаНачалаПриИзменении(Элемент)
	
	Если ОтборПериодЗначение.ДатаНачала <> '00010101' Тогда
		ОтборПериодЗначение.ДатаНачала = НачалоДня(ОтборПериодЗначение.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодДатаОкончанияПриИзменении(Элемент)
	
	Если ОтборПериодЗначение.ДатаОкончания <> '00010101' Тогда
		ОтборПериодЗначение.ДатаОкончания = КонецДня(ОтборПериодЗначение.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМенеджерыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ОтборМенеджерыЗавершениеВыбора", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючУникальности",							ЭтаФорма.КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("Отмеченные",								ОтборМенеджеры);
	ПараметрыФормы.Вставить("ЗначенияДляВыбора",						ОтборМенеджерыВсе);
	ПараметрыФормы.Вставить("ВыводитьФлажок",							Истина);
	ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями",	Ложь);
	ПараметрыФормы.Вставить("ОписаниеТипов",							Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПараметрыФормы.Вставить("Представление",							НСтр("ru = 'менеджеры'"));
	
	// Использование формы БСП 2.2.5
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМенеджерыОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборМенеджерыВсе.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяДиаграммаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ГруппаПоказателей = "Выручка" Тогда
		
		ТекстОтборов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выручка от продаж по менеджеру: %1, за период: с %2 по %3'"),
			?(ЗначениеЗаполнено(Расшифровка.Точка), Расшифровка.Точка, НСтр("ru = '<Менеджер не указан>'")),
			Формат(ОтборПериодЗначение.ДатаНачала, "ДФ=dd.MM.yyyy"),
			Формат(ОтборПериодЗначение.ДатаОкончания, "ДФ=dd.MM.yyyy"));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Анализ работы менеджеров (расшифровка продаж)'"));
		ПараметрыФормы.Вставить("ПредставлениеОтборов", Новый ФорматированнаяСтрока(ТекстОтборов, Новый Шрифт(,,Истина)));
		ПараметрыФормы.Вставить("АдресТабличногоДокумента", СформироватьРасшифровкуВыручки(Расшифровка.Точка));
		
		ОткрытьФорму("ОбщаяФорма.ДополнительнаяРасшифровка", ПараметрыФормы, ЭтаФорма, Истина);
		
	ИначеЕсли ГруппаПоказателей = "Заказы" Тогда
		
		СтрокаЛегенды = ЛегендаДиаграммы.НайтиСтроки(Новый Структура("Точка", Расшифровка.Точка))[0];
		ИмяКолонки = СтрЗаменить(Расшифровка.Серия, "Серия_", "Расшифровка_");
		ЗначениеРасшифровки = СтрокаЛегенды[ИмяКолонки];
		
		ТекстОтборов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказы по менеджеру: %1, за период: с %2 по %3 %4'"),
			?(ЗначениеЗаполнено(Расшифровка.Точка), Расшифровка.Точка, НСтр("ru = '<Менеджер не указан>'")),
			Формат(ОтборПериодЗначение.ДатаНачала, "ДФ=dd.MM.yyyy"),
			Формат(ОтборПериодЗначение.ДатаОкончания, "ДФ=dd.MM.yyyy"),
			?(ЗначениеЗаполнено(Расшифровка.ЗаголовокСерии), "признак: " + Расшифровка.ЗаголовокСерии, ""));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Анализ работы менеджеров (расшифровка заказов)'"));
		ПараметрыФормы.Вставить("ПредставлениеОтборов", Новый ФорматированнаяСтрока(ТекстОтборов, Новый Шрифт(,,Истина)));
		ПараметрыФормы.Вставить("АдресТабличногоДокумента", СформироватьРасшифровкуЗаказов(ЗначениеРасшифровки, УникальныйИдентификатор));
		
		ОткрытьФорму("ОбщаяФорма.ДополнительнаяРасшифровка", ПараметрыФормы, ЭтаФорма, Истина);
		
	ИначеЕсли ГруппаПоказателей = "Задолженность" Тогда
		
		ТекстОтборов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Задолженность клиентов менеджера: %1, по состоянию на %2'"),
			?(ЗначениеЗаполнено(Расшифровка.Точка), Расшифровка.Точка, НСтр("ru = '<Менеджер не указан>'")),
			Формат(ОтборПериодЗначение.ДатаОкончания, "ДФ=dd.MM.yyyy"));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Анализ работы менеджеров (расшифровка задолженности)'"));
		ПараметрыФормы.Вставить("ПредставлениеОтборов", Новый ФорматированнаяСтрока(ТекстОтборов, Новый Шрифт(,,Истина)));
		ПараметрыФормы.Вставить("АдресТабличногоДокумента", СформироватьРасшифровкуЗадолженности(Расшифровка.Точка));
		
		ОткрытьФорму("ОбщаяФорма.ДополнительнаяРасшифровка", ПараметрыФормы, ЭтаФорма, Истина);
		
	ИначеЕсли ГруппаПоказателей = "События" Тогда
		
		СтрокаЛегенды = ЛегендаДиаграммы.НайтиСтроки(Новый Структура("Точка", Расшифровка.Точка))[0];
		ИндексСерии = ПараметрыИзмененияФормы.СоответствиеКолонок.Получить(Расшифровка.Серия);
		ЗначениеРасшифровки = СтрокаЛегенды["Расшифровка_" + ИндексСерии];
		
		ТекстОтборов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'События по менеджеру: %1, за период: с %2 по %3 %4'"),
			?(ЗначениеЗаполнено(Расшифровка.Точка), Расшифровка.Точка, НСтр("ru = '<Менеджер не указан>'")),
			Формат(ОтборПериодЗначение.ДатаНачала, "ДФ=dd.MM.yyyy"),
			Формат(ОтборПериодЗначение.ДатаОкончания, "ДФ=dd.MM.yyyy"),
			?(ЗначениеЗаполнено(Расшифровка.Серия), "в состоянии: " + Расшифровка.Серия, ""));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Анализ работы менеджеров (расшифровка событий)'"));
		ПараметрыФормы.Вставить("ПредставлениеОтборов", Новый ФорматированнаяСтрока(ТекстОтборов, Новый Шрифт(,,Истина)));
		ПараметрыФормы.Вставить("АдресТабличногоДокумента", СформироватьРасшифровкуСобытий(ЗначениеРасшифровки, УникальныйИдентификатор));
		
		ОткрытьФорму("ОбщаяФорма.ДополнительнаяРасшифровка", ПараметрыФормы, ЭтаФорма, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛегендаДиаграммыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаЛегенды = ЛегендаДиаграммы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаЛегенды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ГруппаПоказателей = "Выручка" Тогда
		
		Точка = СтрокаЛегенды.Точка;
		
		ТекстОтборов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выручка от продаж по менеджеру: %1, за период: с %2 по %3'"),
			?(ЗначениеЗаполнено(Точка), Точка, НСтр("ru = '<Менеджер не указан>'")),
			Формат(ОтборПериодЗначение.ДатаНачала, "ДФ=dd.MM.yyyy"),
			Формат(ОтборПериодЗначение.ДатаОкончания, "ДФ=dd.MM.yyyy"));
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Анализ работы менеджеров (расшифровка продаж)'"));
		ПараметрыФормы.Вставить("ПредставлениеОтборов", Новый ФорматированнаяСтрока(ТекстОтборов, Новый Шрифт(,,Истина)));
		ПараметрыФормы.Вставить("АдресТабличногоДокумента", СформироватьРасшифровкуВыручки(Точка));
		
		ОткрытьФорму("ОбщаяФорма.ДополнительнаяРасшифровка", ПараметрыФормы, ЭтаФорма, Истина);
		
	ИначеЕсли ГруппаПоказателей = "Заказы" Тогда
		
		Точка = СтрокаЛегенды.Точка;
		
		Если Лев(Поле.Имя, 6) = "Серия_" Тогда
			Серия = Поле.Заголовок;
			ИмяСерии = Сред(Поле.Имя, 7);
			ЗначениеРасшифровки = СтрокаЛегенды["Расшифровка_" + ИмяСерии];
		Иначе
			ЗначениеРасшифровки = СтрокаЛегенды["Расшифровка_ЗаказыВсего"];
		КонецЕсли;
		
		ТекстОтборов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказы по менеджеру: %1, за период: с %2 по %3 %4'"),
			?(ЗначениеЗаполнено(Точка), Точка, НСтр("ru = '<Менеджер не указан>'")),
			Формат(ОтборПериодЗначение.ДатаНачала, "ДФ=dd.MM.yyyy"),
			Формат(ОтборПериодЗначение.ДатаОкончания, "ДФ=dd.MM.yyyy"),
			?(ЗначениеЗаполнено(Серия), "признак: " + Серия, ""));
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Анализ работы менеджеров (расшифровка заказов)'"));
		ПараметрыФормы.Вставить("ПредставлениеОтборов", Новый ФорматированнаяСтрока(ТекстОтборов, Новый Шрифт(,,Истина)));
		ПараметрыФормы.Вставить("АдресТабличногоДокумента", СформироватьРасшифровкуЗаказов(ЗначениеРасшифровки, УникальныйИдентификатор));
		
		ОткрытьФорму("ОбщаяФорма.ДополнительнаяРасшифровка", ПараметрыФормы, ЭтаФорма, Истина);
		
	ИначеЕсли ГруппаПоказателей = "Задолженность" Тогда
		
		Точка = СтрокаЛегенды.Точка;
		
		ТекстОтборов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Задолженность клиентов менеджера: %1, по состоянию на %2'"),
			?(ЗначениеЗаполнено(Точка), Точка, НСтр("ru = '<Менеджер не указан>'")),
			Формат(ОтборПериодЗначение.ДатаОкончания, "ДФ=dd.MM.yyyy"));
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Анализ работы менеджеров (расшифровка задолженности)'"));
		ПараметрыФормы.Вставить("ПредставлениеОтборов", Новый ФорматированнаяСтрока(ТекстОтборов, Новый Шрифт(,,Истина)));
		ПараметрыФормы.Вставить("АдресТабличногоДокумента", СформироватьРасшифровкуЗадолженности(Точка));
		
		ОткрытьФорму("ОбщаяФорма.ДополнительнаяРасшифровка", ПараметрыФормы, ЭтаФорма, Истина);
		
	ИначеЕсли ГруппаПоказателей = "События" Тогда
		
		Точка = СтрокаЛегенды.Точка;
		
		Если Лев(Поле.Имя, 6) = "Серия_" Тогда
			ИндексСерии = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(Поле.Имя, 7));
			ЗначениеРасшифровки = СтрокаЛегенды["Расшифровка_" + ИндексСерии];
			Для Каждого КлючИЗначение Из ПараметрыИзмененияФормы.СоответствиеКолонок Цикл
				Если КлючИЗначение.Значение = Число(ИндексСерии) Тогда
					Серия = КлючИЗначение.Ключ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗначениеРасшифровки = Новый Массив;
			Для Каждого ПутьРеквизита Из ПараметрыИзмененияФормы.РеквизитыКУдалению Цикл
				Если Лев(ПутьРеквизита, 29) <> "ЛегендаДиаграммы.Расшифровка_" Тогда
					Продолжить;
				КонецЕсли;
				ИмяКолонки = Сред(ПутьРеквизита, 18);
				Для Каждого ЗначениеСписка Из СтрокаЛегенды[ИмяКолонки] Цикл
					ЗначениеРасшифровки.Добавить(ЗначениеСписка.Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ТекстОтборов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'События по менеджеру: %1, за период: с %2 по %3 %4'"),
			?(ЗначениеЗаполнено(Точка), Точка, НСтр("ru = '<Менеджер не указан>'")),
			Формат(ОтборПериодЗначение.ДатаНачала, "ДФ=dd.MM.yyyy"),
			Формат(ОтборПериодЗначение.ДатаОкончания, "ДФ=dd.MM.yyyy"),
			?(ЗначениеЗаполнено(Серия), "в состоянии: " + Серия, ""));
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Анализ работы менеджеров (расшифровка событий)'"));
		ПараметрыФормы.Вставить("ПредставлениеОтборов", Новый ФорматированнаяСтрока(ТекстОтборов, Новый Шрифт(,,Истина)));
		ПараметрыФормы.Вставить("АдресТабличногоДокумента", СформироватьРасшифровкуСобытий(ЗначениеРасшифровки, УникальныйИдентификатор));
		
		ОткрытьФорму("ОбщаяФорма.ДополнительнаяРасшифровка", ПараметрыФормы, ЭтаФорма, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьОтчет();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьОтчет()
	
	ЦветаСерийДиаграммы = РаботаСЦветомКлиентСервер.ЦветаСерийДиаграмм();
	
	Если ГруппаПоказателей = "Выручка" Тогда
		ОбновитьПоказателиВыручка();
	ИначеЕсли ГруппаПоказателей = "Заказы" Тогда
		ОбновитьПоказателиЗаказы();
	ИначеЕсли ГруппаПоказателей = "Задолженность" Тогда
		ОбновитьПоказателиЗадолженность();
	ИначеЕсли ГруппаПоказателей = "События" Тогда
		ОбновитьПоказателиСобытия();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиВыручка()
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродажиОбороты.Ответственный КАК Ответственный,
		|	ПродажиОбороты.ЗаказПокупателя КАК Заказ,
		|	ПродажиОбороты.СуммаОборот КАК Выручка,
		|	ПродажиОбороты.СебестоимостьОборот КАК Себестоимость,
		|	ПродажиОбороты.СуммаОборот - ПродажиОбороты.СебестоимостьОборот КАК ВаловаяПрибыль,
		|	ПродажиОбороты.СуммаОборот КАК СредняяВыручка,
		|	ПРЕДСТАВЛЕНИЕ(ПродажиОбороты.Ответственный) КАК ПредставлениеОтветственного
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ПериодНачало, &ПериодОкончание, , ) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПродажиОбороты.Ответственный.Наименование,
		|	Выручка
		|ИТОГИ
		|	СУММА(Выручка),
		|	СУММА(Себестоимость),
		|	СУММА(ВаловаяПрибыль),
		|	СРЕДНЕЕ(СредняяВыручка)
		|ПО
		|	Ответственный,
		|	Заказ";
	
	Если ОтборМенеджеры.Количество() > 0 Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Параметры[3].Выражение = Новый ВыражениеСхемыЗапроса(
			 "Ответственный В (&ОтборМенеджеры)");
		
		Запрос.УстановитьПараметр("ОтборМенеджеры", ОтборМенеджеры);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодНачало", ОтборПериодЗначение.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодОкончание", ОтборПериодЗначение.ДатаОкончания);
	
	ОсновнаяДиаграмма.Обновление = Ложь;
	ОсновнаяДиаграмма.Очистить();
	ОсновнаяДиаграмма.АвтоТранспонирование = Ложь;
	ОсновнаяДиаграмма.ТипДиаграммы = ТипДиаграммы.ГистограммаОбъемная;
	ОсновнаяДиаграмма.МаксимумСерий = МаксимумСерий.НеЗадано;
	ОсновнаяДиаграмма.ВидПодписей = ВидПодписейКДиаграмме.Нет;
	ОсновнаяДиаграмма.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	ОсновнаяДиаграмма.ФорматЗначенийВПодписях = "ЧДЦ=2; ЧН=' '";
	ОсновнаяДиаграмма.АвтоУстановкаТекстаТочек = Ложь;
	ОсновнаяДиаграмма.ОбластьПостроения.ФорматШкалыЗначений = "ЧН=' '";
	ОсновнаяДиаграмма.ОбластьПостроения.ОтображатьПодписиШкалыТочек = Истина;
	ОсновнаяДиаграмма.ОбластьПостроения.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	
	Серия_Выручка = ОсновнаяДиаграмма.Серии.Добавить("Выручка");
	Серия_Выручка.Текст = "Выручка";
	
	Серия_Себестоимость = ОсновнаяДиаграмма.Серии.Добавить("Себестоимость");
	Серия_Себестоимость.Текст = "Себестоимость";
	
	Серия_ВаловаяПрибыль = ОсновнаяДиаграмма.Серии.Добавить("Валовая прибыль");
	Серия_ВаловаяПрибыль.Текст = "Валовая прибыль";
	
	Серия_СредняяВыручка = ОсновнаяДиаграмма.Серии.Добавить("Средняя выручка по заказу");
	Серия_СредняяВыручка.Текст = "Средняя выручка по заказу";
	
	ДанныеЛегендыДиаграммы = Новый ТаблицаЗначений;
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Точка", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеЛегендыДиаграммы.Колонки.Добавить("ПредставлениеТочки", Новый ОписаниеТипов("Строка"), "Менеджеры");
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Серия_Выручка", ОписаниеТипаЧисло, "Выручка");
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Серия_Себестоимость", ОписаниеТипаЧисло, "Себестоимость");
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Серия_ВаловаяПрибыль", ОписаниеТипаЧисло, "Валовая прибыль");
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Серия_СредняяВыручка", ОписаниеТипаЧисло, "Средняя выручка по заказу");
	
	ВыборкаОтветственный = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОтветственный.Следующий() Цикл
		
		ПредставлениеОтветственного = ?(ЗначениеЗаполнено(ВыборкаОтветственный.Ответственный), ВыборкаОтветственный.ПредставлениеОтветственного, НСтр("ru = '<Менеджер не указан>'"));
		
		Точка = ОсновнаяДиаграмма.Точки.Добавить(ПредставлениеОтветственного);
		Точка.Текст = ПредставлениеОтветственного;
		
		СтрокаЛегенды = ДанныеЛегендыДиаграммы.Добавить();
		СтрокаЛегенды.Точка = ВыборкаОтветственный.Ответственный;
		СтрокаЛегенды.ПредставлениеТочки = ПредставлениеОтветственного;
		СтрокаЛегенды.Серия_Выручка = ВыборкаОтветственный.Выручка;
		СтрокаЛегенды.Серия_Себестоимость = ВыборкаОтветственный.Себестоимость;
		СтрокаЛегенды.Серия_ВаловаяПрибыль = ВыборкаОтветственный.ВаловаяПрибыль;
		СтрокаЛегенды.Серия_СредняяВыручка = ВыборкаОтветственный.СредняяВыручка;
		
		Расшифровка = Новый Структура("Точка", ВыборкаОтветственный.Ответственный);
		Подсказка = ПредставлениеОтветственного + НСтр("ru = ', выручка: '") + ВыборкаОтветственный.Выручка;
		ОсновнаяДиаграмма.УстановитьЗначение(Точка, Серия_Выручка, ВыборкаОтветственный.Выручка, Расшифровка, Подсказка);
		
		Расшифровка = Новый Структура("Точка", ВыборкаОтветственный.Ответственный);
		Подсказка = ПредставлениеОтветственного + НСтр("ru = ', себестоимость: '") + ВыборкаОтветственный.Себестоимость;
		ОсновнаяДиаграмма.УстановитьЗначение(Точка, Серия_Себестоимость, ВыборкаОтветственный.Себестоимость, Расшифровка, Подсказка);
		
		Расшифровка = Новый Структура("Точка", ВыборкаОтветственный.Ответственный);
		Подсказка = ПредставлениеОтветственного + НСтр("ru = ', валовая прибыль: '") + ВыборкаОтветственный.ВаловаяПрибыль;
		ОсновнаяДиаграмма.УстановитьЗначение(Точка, Серия_ВаловаяПрибыль, ВыборкаОтветственный.ВаловаяПрибыль, Расшифровка, Подсказка);
		
		Расшифровка = Новый Структура("Точка", ВыборкаОтветственный.Ответственный);
		Подсказка = ПредставлениеОтветственного + НСтр("ru = ', средняя выручка по заказу: '") + ВыборкаОтветственный.СредняяВыручка;
		ОсновнаяДиаграмма.УстановитьЗначение(Точка, Серия_СредняяВыручка, ВыборкаОтветственный.СредняяВыручка, Расшифровка, Подсказка);
		
	КонецЦикла;
	
	УстановитьЦветаСерийДиаграммы(ОсновнаяДиаграмма);
	ОсновнаяДиаграмма.Обновление = Истина;
	
	// Удаление элементов-колонок
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Элемент Из Элементы.ЛегендаДиаграммы.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	// Добавление реквизитов-колонок
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Колонка Из ДанныеЛегендыДиаграммы.Колонки Цикл
		КолонкаРеквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ЛегендаДиаграммы", Колонка.Заголовок);
		ДобавляемыеРеквизиты.Добавить(КолонкаРеквизит);
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, ПараметрыИзмененияФормы.РеквизитыКУдалению);
	
	ПараметрыИзмененияФормы.РеквизитыКУдалению.Очистить();
	Для Каждого Колонка Из ДанныеЛегендыДиаграммы.Колонки Цикл
		ПараметрыИзмененияФормы.РеквизитыКУдалению.Добавить("ЛегендаДиаграммы." + Колонка.Имя);
	КонецЦикла;
	
	// Добавление элементов-колонок
	Для Каждого Колонка Из ДанныеЛегендыДиаграммы.Колонки Цикл
		
		Если Колонка.Заголовок = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКолонка = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы.ЛегендаДиаграммы);
		ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементКолонка.ПутьКДанным = "ЛегендаДиаграммы." + Колонка.Имя;
		ЭлементКолонка.Заголовок = Колонка.Заголовок;
		ЭлементКолонка.Формат = "ЧДЦ=2; ЧН=0";
		
		Если Колонка.Имя = "ПредставлениеТочки" Тогда
			
			ЭлементКолонка.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			
		ИначеЕсли Лев(Колонка.Имя, 6) = "Серия_" Тогда
			
			Если Колонка.Имя = "Серия_Выручка" Тогда
				ИндексСерии = 0;
				ЭлементКолонка.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
			ИначеЕсли Колонка.Имя = "Серия_Себестоимость" Тогда
				ИндексСерии = 1;
			ИначеЕсли Колонка.Имя = "Серия_ВаловаяПрибыль" Тогда
				ИндексСерии = 2;
			ИначеЕсли Колонка.Имя = "Серия_СредняяВыручка" Тогда
				ИндексСерии = 3;
			КонецЕсли;
			
			Серия = ОсновнаяДиаграмма.Серии.Получить(ИндексСерии);
			ЭлементКолонка.ЦветФонаЗаголовка = Серия.Цвет;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение данных
	ЛегендаДиаграммы.Очистить();
	Для Каждого СтрокаЛегенды Из ДанныеЛегендыДиаграммы Цикл
		НоваяСтрока = ЛегендаДиаграммы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЛегенды);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиЗаказы()
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ОписаниеТипаСписок = Новый ОписаниеТипов("СписокЗначений");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Заказ
		|ПОМЕСТИТЬ втПервичныеЗаказы
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателяПредыдущие
		|		ПО ЗаказПокупателя.Контрагент = ЗаказПокупателяПредыдущие.Контрагент
		|			И ЗаказПокупателя.МоментВремени > ЗаказПокупателяПредыдущие.МоментВремени
		|ГДЕ
		|	ЗаказПокупателя.Проведен = ИСТИНА
		|	И ЗаказПокупателя.Дата МЕЖДУ &ПериодНачало И &ПериодОкончание
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателя.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ЗаказПокупателяПредыдущие.Ссылка) = 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ответственный КАК Ответственный,
		|	ЗаказПокупателя.Ссылка КАК ЗаказыВсего,
		|	втПервичныеЗаказы.Заказ КАК Первичные,
		|	ВЫБОР
		|		КОГДА ФактОплатыЗаказов.Сумма <= ФактОплатыЗаказов.СуммаАванса + ФактОплатыЗаказов.СуммаОплаты
		|			ТОГДА ЗаказПокупателя.Ссылка
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Оплаченные,
		|	ВЫБОР
		|		КОГДА ФактОплатыЗаказов.СуммаАванса + ФактОплатыЗаказов.СуммаОплаты > 0
		|				И ФактОплатыЗаказов.СуммаАванса + ФактОплатыЗаказов.СуммаОплаты < ФактОплатыЗаказов.Сумма
		|			ТОГДА ЗаказПокупателя.Ссылка
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ЧастичноОплаченные,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ФактОплатыЗаказов.Сумма, 0) > 0
		|				И ЕСТЬNULL(ФактОплатыЗаказов.СуммаАванса, 0) + ЕСТЬNULL(ФактОплатыЗаказов.СуммаОплаты, 0) = 0
		|			ТОГДА ЗаказПокупателя.Ссылка
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Неоплаченные,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Ответственный) КАК ПредставлениеОтветственного
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФактОплатыЗаказов КАК ФактОплатыЗаказов
		|		ПО (ЗаказПокупателя.Ссылка = (ВЫРАЗИТЬ(ФактОплатыЗаказов.СчетНаОплату КАК Документ.ЗаказПокупателя)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПервичныеЗаказы КАК втПервичныеЗаказы
		|		ПО ЗаказПокупателя.Ссылка = втПервичныеЗаказы.Заказ
		|ГДЕ
		|	ЗаказПокупателя.Проведен = ИСТИНА
		|	И ЗаказПокупателя.Дата МЕЖДУ &ПериодНачало И &ПериодОкончание
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателя.Ответственный.Наименование
		|ИТОГИ
		|	КОЛИЧЕСТВО(ЗаказыВсего),
		|	КОЛИЧЕСТВО(Первичные),
		|	КОЛИЧЕСТВО(Оплаченные),
		|	КОЛИЧЕСТВО(ЧастичноОплаченные),
		|	КОЛИЧЕСТВО(Неоплаченные)
		|ПО
		|	Ответственный";
	
	Если ОтборМенеджеры.Количество() > 0 Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[1].Операторы[0].Отбор;
		
		ОтборЗапроса.Добавить("ЗаказПокупателя.Ответственный В (&ОтборМенеджеры)");
		Запрос.УстановитьПараметр("ОтборМенеджеры", ОтборМенеджеры);
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодНачало", ОтборПериодЗначение.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодОкончание", ОтборПериодЗначение.ДатаОкончания);
	
	ОсновнаяДиаграмма.Обновление = Ложь;
	ОсновнаяДиаграмма.Очистить();
	ОсновнаяДиаграмма.АвтоТранспонирование = Ложь;
	ОсновнаяДиаграмма.ТипДиаграммы = ТипДиаграммы.ГистограммаОбъемная;
	ОсновнаяДиаграмма.МаксимумСерий = МаксимумСерий.НеЗадано;
	ОсновнаяДиаграмма.ВидПодписей = ВидПодписейКДиаграмме.Значение;
	ОсновнаяДиаграмма.ПоложениеПодписей = ПоложениеПодписейКДиаграмме.Центр;
	ОсновнаяДиаграмма.ШрифтПодписей = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ОсновнаяДиаграмма.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	ОсновнаяДиаграмма.ФорматЗначенийВПодписях = "ЧДЦ=; ЧН=' '";
	ОсновнаяДиаграмма.АвтоУстановкаТекстаТочек = Ложь;
	ОсновнаяДиаграмма.ОбластьПостроения.ФорматШкалыЗначений = "ЧН=' '";
	ОсновнаяДиаграмма.ОбластьПостроения.ОтображатьПодписиШкалыТочек = Истина;
	ОсновнаяДиаграмма.ОбластьПостроения.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	
	ЦветаСерий = РаботаСЦветомКлиентСервер.ЦветаСерийДиаграмм();
	
	Серия_ЗаказыВсего = ОсновнаяДиаграмма.Серии.Добавить("Заказы всего");
	Серия_ЗаказыВсего.Текст = "Заказы всего";
	Серия_ЗаказыВсего.Цвет = ЦветаСерий[3];
	
	Серия_Первичные = ОсновнаяДиаграмма.Серии.Добавить("Первичные");
	Серия_Первичные.Текст = "Заказы новых клиентов";
	Серия_Первичные.Цвет = ЦветаСерий[1];
	
	Серия_Оплаченные = ОсновнаяДиаграмма.Серии.Добавить("Оплаченные");
	Серия_Оплаченные.Текст = "Оплаченные";
	Серия_Оплаченные.Цвет = ЦветаСерий[4];
	
	Серия_ЧастичноОплаченные = ОсновнаяДиаграмма.Серии.Добавить("Частично оплаченные");
	Серия_ЧастичноОплаченные.Текст = "Частично оплаченные";
	Серия_ЧастичноОплаченные.Цвет = ЦветаСерий[2];
	
	Серия_Неоплаченные = ОсновнаяДиаграмма.Серии.Добавить("Неоплаченные");
	Серия_Неоплаченные.Текст = "Неоплаченные";
	Серия_Неоплаченные.Цвет = ЦветаСерий[0];
	
	ДанныеЛегендыДиаграммы = Новый ТаблицаЗначений;
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Точка", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеЛегендыДиаграммы.Колонки.Добавить("ПредставлениеТочки", Новый ОписаниеТипов("Строка"), "Менеджеры");
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Серия_ЗаказыВсего", ОписаниеТипаЧисло, "Заказы всего");
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Серия_Первичные", ОписаниеТипаЧисло, "Заказы новых клиентов");
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Серия_Оплаченные", ОписаниеТипаЧисло, "Оплаченные");
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Серия_ЧастичноОплаченные", ОписаниеТипаЧисло, "Частично оплаченные");
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Серия_Неоплаченные", ОписаниеТипаЧисло, "Неоплаченные");
	
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Расшифровка_ЗаказыВсего", ОписаниеТипаСписок);
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Расшифровка_Первичные", ОписаниеТипаСписок);
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Расшифровка_Оплаченные", ОписаниеТипаСписок);
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Расшифровка_ЧастичноОплаченные", ОписаниеТипаСписок);
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Расшифровка_Неоплаченные", ОписаниеТипаСписок);
	
	ВыборкаОтветственный = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОтветственный.Следующий() Цикл
		
		ПредставлениеОтветственного = ?(ЗначениеЗаполнено(ВыборкаОтветственный.Ответственный), ВыборкаОтветственный.ПредставлениеОтветственного, НСтр("ru = '<Менеджер не указан>'"));
		
		Точка = ОсновнаяДиаграмма.Точки.Добавить(ПредставлениеОтветственного);
		Точка.Текст = ПредставлениеОтветственного;
		
		СтрокаЛегенды = ДанныеЛегендыДиаграммы.Добавить();
		СтрокаЛегенды.Точка = ВыборкаОтветственный.Ответственный;
		СтрокаЛегенды.ПредставлениеТочки = ПредставлениеОтветственного;
		СтрокаЛегенды.Серия_ЗаказыВсего = ВыборкаОтветственный.ЗаказыВсего;
		СтрокаЛегенды.Серия_Первичные = ВыборкаОтветственный.Первичные;
		СтрокаЛегенды.Серия_Оплаченные = ВыборкаОтветственный.Оплаченные;
		СтрокаЛегенды.Серия_ЧастичноОплаченные = ВыборкаОтветственный.ЧастичноОплаченные;
		СтрокаЛегенды.Серия_Неоплаченные = ВыборкаОтветственный.Неоплаченные;
		
		Расшифровка = Новый Структура("Серия, ЗаголовокСерии, Точка", "Серия_ЗаказыВсего", ДанныеЛегендыДиаграммы.Колонки.Серия_ЗаказыВсего.Заголовок, ВыборкаОтветственный.Ответственный);
		Подсказка = ПредставлениеОтветственного + НСтр("ru = ', заказов всего: '") + ВыборкаОтветственный.ЗаказыВсего;
		ОсновнаяДиаграмма.УстановитьЗначение(Точка, Серия_ЗаказыВсего, ВыборкаОтветственный.ЗаказыВсего, Расшифровка, Подсказка);
		
		Расшифровка = Новый Структура("Серия, ЗаголовокСерии, Точка", "Серия_Первичные", ДанныеЛегендыДиаграммы.Колонки.Серия_Первичные.Заголовок, ВыборкаОтветственный.Ответственный);
		Подсказка = ПредставлениеОтветственного + НСтр("ru = ', заказов новых клиентов: '") + ВыборкаОтветственный.Первичные;
		ОсновнаяДиаграмма.УстановитьЗначение(Точка, Серия_Первичные, ВыборкаОтветственный.Первичные, Расшифровка, Подсказка);
		
		Расшифровка = Новый Структура("Серия, ЗаголовокСерии, Точка", "Серия_Оплаченные", ДанныеЛегендыДиаграммы.Колонки.Серия_Оплаченные.Заголовок, ВыборкаОтветственный.Ответственный);
		Подсказка = ПредставлениеОтветственного + НСтр("ru = ', оплаченных заказов: '") + ВыборкаОтветственный.Оплаченные;
		ОсновнаяДиаграмма.УстановитьЗначение(Точка, Серия_Оплаченные, ВыборкаОтветственный.Оплаченные, Расшифровка, Подсказка);
		
		Расшифровка = Новый Структура("Серия, ЗаголовокСерии, Точка", "Серия_ЧастичноОплаченные", ДанныеЛегендыДиаграммы.Колонки.Серия_ЧастичноОплаченные.Заголовок, ВыборкаОтветственный.Ответственный);
		Подсказка = ПредставлениеОтветственного + НСтр("ru = ', частично оплаченных заказов: '") + ВыборкаОтветственный.ЧастичноОплаченные;
		ОсновнаяДиаграмма.УстановитьЗначение(Точка, Серия_ЧастичноОплаченные, ВыборкаОтветственный.ЧастичноОплаченные, Расшифровка, Подсказка);
		
		Расшифровка = Новый Структура("Серия, ЗаголовокСерии, Точка", "Серия_Неоплаченные", ДанныеЛегендыДиаграммы.Колонки.Серия_Неоплаченные.Заголовок, ВыборкаОтветственный.Ответственный);
		Подсказка = ПредставлениеОтветственного + НСтр("ru = ', неоплаченных заказов: '") + ВыборкаОтветственный.Неоплаченные;
		ОсновнаяДиаграмма.УстановитьЗначение(Точка, Серия_Неоплаченные, ВыборкаОтветственный.Неоплаченные, Расшифровка, Подсказка);
		
		Выборка = ВыборкаОтветственный.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.ЗаказыВсего = Null Тогда
				СтрокаЛегенды.Расшифровка_ЗаказыВсего.Добавить(Выборка.ЗаказыВсего);
			КонецЕсли;
			Если НЕ Выборка.Первичные = Null Тогда
				СтрокаЛегенды.Расшифровка_Первичные.Добавить(Выборка.Первичные);
			КонецЕсли;
			Если НЕ Выборка.Оплаченные = Null Тогда
				СтрокаЛегенды.Расшифровка_Оплаченные.Добавить(Выборка.Оплаченные);
			КонецЕсли;
			Если НЕ Выборка.ЧастичноОплаченные = Null Тогда
				СтрокаЛегенды.Расшифровка_ЧастичноОплаченные.Добавить(Выборка.ЧастичноОплаченные);
			КонецЕсли;
			Если НЕ Выборка.Неоплаченные = Null Тогда
				СтрокаЛегенды.Расшифровка_Неоплаченные.Добавить(Выборка.Неоплаченные);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ОсновнаяДиаграмма.Обновление = Истина;
	
	// Удаление элементов-колонок
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Элемент Из Элементы.ЛегендаДиаграммы.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	// Добавление реквизитов-колонок
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Колонка Из ДанныеЛегендыДиаграммы.Колонки Цикл
		КолонкаРеквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ЛегендаДиаграммы", Колонка.Заголовок);
		ДобавляемыеРеквизиты.Добавить(КолонкаРеквизит);
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, ПараметрыИзмененияФормы.РеквизитыКУдалению);
	
	ПараметрыИзмененияФормы.РеквизитыКУдалению.Очистить();
	Для Каждого Колонка Из ДанныеЛегендыДиаграммы.Колонки Цикл
		ПараметрыИзмененияФормы.РеквизитыКУдалению.Добавить("ЛегендаДиаграммы." + Колонка.Имя);
	КонецЦикла;
	
	// Добавление элементов-колонок
	Для Каждого Колонка Из ДанныеЛегендыДиаграммы.Колонки Цикл
		
		Если Колонка.Заголовок = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКолонка = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы.ЛегендаДиаграммы);
		ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементКолонка.ПутьКДанным = "ЛегендаДиаграммы." + Колонка.Имя;
		ЭлементКолонка.Заголовок = Колонка.Заголовок;
		ЭлементКолонка.Формат = "ЧДЦ=; ЧН=0";
		
		Если Колонка.Имя = "ПредставлениеТочки" Тогда
			
			ЭлементКолонка.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			
		ИначеЕсли Лев(Колонка.Имя, 6) = "Серия_" Тогда
			
			Если Колонка.Имя = "Серия_ЗаказыВсего" Тогда
				ИндексСерии = 0;
				ЭлементКолонка.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
			ИначеЕсли Колонка.Имя = "Серия_Первичные" Тогда
				ИндексСерии = 1;
			ИначеЕсли Колонка.Имя = "Серия_Оплаченные" Тогда
				ИндексСерии = 2;
			ИначеЕсли Колонка.Имя = "Серия_ЧастичноОплаченные" Тогда
				ИндексСерии = 3;
			ИначеЕсли Колонка.Имя = "Серия_Неоплаченные" Тогда
				ИндексСерии = 4;
			КонецЕсли;
			
			Серия = ОсновнаяДиаграмма.Серии.Получить(ИндексСерии);
			ЭлементКолонка.ЦветФонаЗаголовка = Серия.Цвет;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение данных
	ЛегендаДиаграммы.Очистить();
	Для Каждого СтрокаЛегенды Из ДанныеЛегендыДиаграммы Цикл
		НоваяСтрока = ЛегендаДиаграммы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЛегенды);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиЗадолженность()
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетыСПокупателямиОстатки.Контрагент) КАК Должники,
		|	РасчетыСПокупателямиОстатки.Контрагент.Ответственный КАК Ответственный,
		|	ПРЕДСТАВЛЕНИЕ(РасчетыСПокупателямиОстатки.Контрагент.Ответственный) КАК ПредставлениеОтветственного,
		|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК Задолженность,
		|	СУММА(ЕСТЬNULL(РасчетыСПокупателямиОстаткиПросрочено.СуммаОстаток, 0)) КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(&ПериодОкончание, ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыСПокупателямиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(
		|				&ПериодОкончание,
		|				ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
		|					И Договор.СрокОплатыПокупателя > 0
		|					И РАЗНОСТЬДАТ(Документ.Дата, &ПериодОкончание, ДЕНЬ) > Договор.СрокОплатыПокупателя) КАК РасчетыСПокупателямиОстаткиПросрочено
		|		ПО РасчетыСПокупателямиОстатки.Контрагент = РасчетыСПокупателямиОстаткиПросрочено.Контрагент
		|			И РасчетыСПокупателямиОстатки.Заказ = РасчетыСПокупателямиОстаткиПросрочено.Заказ
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПокупателямиОстатки.Контрагент.Ответственный
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасчетыСПокупателямиОстатки.Контрагент.Ответственный.Наименование";
	
	Если ОтборМенеджеры.Количество() > 0 Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Параметры[1].Выражение = Новый ВыражениеСхемыЗапроса(
			 Строка(СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Параметры[1].Выражение) + "
			 |	И Заказ.Ответственный В (&ОтборМенеджеры)");
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[1].Источник.Параметры[1].Выражение = Новый ВыражениеСхемыЗапроса(
			 Строка(СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[1].Источник.Параметры[1].Выражение) + "
			 |	И Заказ.Ответственный В (&ОтборМенеджеры)");
		
		Запрос.УстановитьПараметр("ОтборМенеджеры", ОтборМенеджеры);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодОкончание", ОтборПериодЗначение.ДатаОкончания);
	
	ОсновнаяДиаграмма.Обновление = Ложь;
	ОсновнаяДиаграмма.Очистить();
	ОсновнаяДиаграмма.АвтоТранспонирование = Ложь;
	ОсновнаяДиаграмма.ТипДиаграммы = ТипДиаграммы.ГистограммаОбъемная;
	ОсновнаяДиаграмма.МаксимумСерий = МаксимумСерий.НеЗадано;
	ОсновнаяДиаграмма.ВидПодписей = ВидПодписейКДиаграмме.Нет;
	ОсновнаяДиаграмма.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	ОсновнаяДиаграмма.АвтоУстановкаТекстаТочек = Ложь;
	ОсновнаяДиаграмма.ОбластьПостроения.ФорматШкалыЗначений = "ЧН=' '";
	ОсновнаяДиаграмма.ОбластьПостроения.ОтображатьПодписиШкалыТочек = Истина;
	ОсновнаяДиаграмма.ОбластьПостроения.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	
	Серия_Задолженность = ОсновнаяДиаграмма.Серии.Добавить("Задолженность");
	Серия_Задолженность.Текст = "Задолженность";
	
	Серия_ПросроченнаяЗадолженность = ОсновнаяДиаграмма.Серии.Добавить("Просроченная задолженность");
	Серия_ПросроченнаяЗадолженность.Текст = "Просроченная задолженность";
	
	ДанныеЛегендыДиаграммы = Новый ТаблицаЗначений;
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Точка", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеЛегендыДиаграммы.Колонки.Добавить("ПредставлениеТочки", Новый ОписаниеТипов("Строка"), "Менеджеры");
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Серия_Задолженность", ОписаниеТипаЧисло, "Задолженность");
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Серия_ПросроченнаяЗадолженность", ОписаниеТипаЧисло, "Просроченная задолженность");
	
	ДанныеЛегендыДиаграммы.Колонки.Добавить("КоличествоДолжников", ОписаниеТипаЧисло);
	ДанныеЛегендыДиаграммы.Колонки.Добавить("ПредставлениеДолжников", Новый ОписаниеТипов("Строка"), "Должники");
	
	ВсегоДолжников = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеОтветственного = ?(ЗначениеЗаполнено(Выборка.Ответственный), Выборка.ПредставлениеОтветственного, НСтр("ru = '<Менеджер не указан>'"));
		
		Точка = ОсновнаяДиаграмма.Точки.Добавить(ПредставлениеОтветственного);
		Точка.Текст = ПредставлениеОтветственного;
		
		СтрокаЛегенды = ДанныеЛегендыДиаграммы.Добавить();
		СтрокаЛегенды.Точка = Выборка.Ответственный;
		СтрокаЛегенды.ПредставлениеТочки = ПредставлениеОтветственного;
		СтрокаЛегенды.Серия_Задолженность = Выборка.Задолженность;
		СтрокаЛегенды.Серия_ПросроченнаяЗадолженность = Выборка.ПросроченнаяЗадолженность;
		СтрокаЛегенды.КоличествоДолжников = Выборка.Должники;
		
		Расшифровка = Новый Структура("Точка", Выборка.Ответственный);
		Подсказка = ПредставлениеОтветственного + НСтр("ru = ', задолженность: '") + Выборка.Задолженность;
		ОсновнаяДиаграмма.УстановитьЗначение(Точка, Серия_Задолженность, Выборка.Задолженность, Расшифровка, Подсказка);
		
		Расшифровка = Новый Структура("Точка", Выборка.Ответственный);
		Подсказка = ПредставлениеОтветственного + НСтр("ru = ', просроченная задолженность: '") + Выборка.ПросроченнаяЗадолженность;
		ОсновнаяДиаграмма.УстановитьЗначение(Точка, Серия_ПросроченнаяЗадолженность, Выборка.ПросроченнаяЗадолженность, Расшифровка, Подсказка);
		
		ВсегоДолжников = ВсегоДолжников + Выборка.Должники;
		
	КонецЦикла;
	
	// Построим вывод количества должников
	Для Каждого СтрокаЛегенды Из ДанныеЛегендыДиаграммы Цикл
		СтрокаЛегенды.ПредставлениеДолжников = ПолучитьПредставлениеДолжников(СтрокаЛегенды.КоличествоДолжников, ВсегоДолжников);
	КонецЦикла;
	
	УстановитьЦветаСерийДиаграммы(ОсновнаяДиаграмма);
	ОсновнаяДиаграмма.Обновление = Истина;
	
	// Удаление элементов-колонок
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Элемент Из Элементы.ЛегендаДиаграммы.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	// Добавление реквизитов-колонок
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Колонка Из ДанныеЛегендыДиаграммы.Колонки Цикл
		КолонкаРеквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ЛегендаДиаграммы", Колонка.Заголовок);
		ДобавляемыеРеквизиты.Добавить(КолонкаРеквизит);
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, ПараметрыИзмененияФормы.РеквизитыКУдалению);
	
	ПараметрыИзмененияФормы.РеквизитыКУдалению.Очистить();
	Для Каждого Колонка Из ДанныеЛегендыДиаграммы.Колонки Цикл
		ПараметрыИзмененияФормы.РеквизитыКУдалению.Добавить("ЛегендаДиаграммы." + Колонка.Имя);
	КонецЦикла;
	
	// Добавление элементов-колонок
	Для Каждого Колонка Из ДанныеЛегендыДиаграммы.Колонки Цикл
		
		Если Колонка.Заголовок = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКолонка = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы.ЛегендаДиаграммы);
		ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементКолонка.ПутьКДанным = "ЛегендаДиаграммы." + Колонка.Имя;
		ЭлементКолонка.Заголовок = Колонка.Заголовок;
		
		Если Колонка.Имя = "ПредставлениеТочки" Тогда
			
			ЭлементКолонка.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			
		ИначеЕсли Лев(Колонка.Имя, 6) = "Серия_" Тогда
			
			Если Колонка.Имя = "Серия_Задолженность" Тогда
				ИндексСерии = 0;
			ИначеЕсли Колонка.Имя = "Серия_ПросроченнаяЗадолженность" Тогда
				ИндексСерии = 1;
			КонецЕсли;
			
			Серия = ОсновнаяДиаграмма.Серии.Получить(ИндексСерии);
			ЭлементКолонка.ЦветФонаЗаголовка = Серия.Цвет;
			ЭлементКолонка.Формат = "ЧДЦ=2; ЧН=0";
			
		ИначеЕсли Колонка.Имя = "ПредставлениеДолжников" Тогда
			
			ЭлементКолонка.ЦветТекста = ЦветаСтиля.ЦветТекстаСвязаннойИнформации;
			ЭлементКолонка.Шрифт = Новый Шрифт(,,Истина);
			ЭлементКолонка.Формат = "ЧДЦ=0; ЧН=0";
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение данных
	ЛегендаДиаграммы.Очистить();
	Для Каждого СтрокаЛегенды Из ДанныеЛегендыДиаграммы Цикл
		НоваяСтрока = ЛегендаДиаграммы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЛегенды);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиСобытия()
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ОписаниеТипаСписок = Новый ОписаниеТипов("СписокЗначений");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Событие.Ответственный КАК Ответственный,
		|	Событие.Состояние КАК Состояние,
		|	Событие.Состояние.Цвет КАК ЦветСостояния,
		|	Событие.Ссылка КАК КоличествоСобытий,
		|	ПРЕДСТАВЛЕНИЕ(Событие.Ответственный) КАК ПредставлениеОтветственного,
		|	ПРЕДСТАВЛЕНИЕ(Событие.Состояние) КАК ПредставлениеСостояния
		|ИЗ
		|	Документ.Событие КАК Событие
		|ГДЕ
		|	Событие.ПометкаУдаления = ЛОЖЬ
		|	И Событие.НачалоСобытия МЕЖДУ &ПериодНачало И &ПериодОкончание
		|
		|УПОРЯДОЧИТЬ ПО
		|	Событие.Ответственный.Наименование,
		|	Событие.Состояние.Наименование
		|ИТОГИ
		|	КОЛИЧЕСТВО(КоличествоСобытий)
		|ПО
		|	Ответственный,
		|	Состояние";
	
	Если ОтборМенеджеры.Количество() > 0 Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
		
		ОтборЗапроса.Добавить("Событие.Ответственный В (&ОтборМенеджеры)");
		Запрос.УстановитьПараметр("ОтборМенеджеры", ОтборМенеджеры);
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодНачало", ОтборПериодЗначение.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодОкончание", ОтборПериодЗначение.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОсновнаяДиаграмма.Обновление = Ложь;
	ОсновнаяДиаграмма.Очистить();
	ОсновнаяДиаграмма.АвтоТранспонирование = Ложь;
	ОсновнаяДиаграмма.ТипДиаграммы = ТипДиаграммы.ГистограммаОбъемная;
	ОсновнаяДиаграмма.МаксимумСерий = МаксимумСерий.НеЗадано;
	ОсновнаяДиаграмма.ВидПодписей = ВидПодписейКДиаграмме.Значение;
	ОсновнаяДиаграмма.ПоложениеПодписей = ПоложениеПодписейКДиаграмме.Центр;
	ОсновнаяДиаграмма.ШрифтПодписей = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ОсновнаяДиаграмма.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	ОсновнаяДиаграмма.ФорматЗначенийВПодписях = "ЧДЦ=; ЧН=' '";
	ОсновнаяДиаграмма.АвтоУстановкаТекстаТочек = Ложь;
	ОсновнаяДиаграмма.ОбластьПостроения.ФорматШкалыЗначений = "ЧН=' '";
	ОсновнаяДиаграмма.ОбластьПостроения.ОтображатьПодписиШкалыТочек = Истина;
	ОсновнаяДиаграмма.ОбластьПостроения.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	
	ДанныеЛегендыДиаграммы = Новый ТаблицаЗначений;
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Точка", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеЛегендыДиаграммы.Колонки.Добавить("ПредставлениеТочки", Новый ОписаниеТипов("Строка"), "Менеджеры");
	ДанныеЛегендыДиаграммы.Колонки.Добавить("Итого", ОписаниеТипаЧисло, "Итого");
	
	ПараметрыИзмененияФормы.СоответствиеКолонок = Новый Соответствие;
	
	ВыборкаОтветственный = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОтветственный.Следующий() Цикл
		
		ПредставлениеОтветственного = ?(ЗначениеЗаполнено(ВыборкаОтветственный.Ответственный), ВыборкаОтветственный.ПредставлениеОтветственного, НСтр("ru = '<Менеджер не указан>'"));
		
		Точка = ОсновнаяДиаграмма.Точки.Добавить(ПредставлениеОтветственного);
		Точка.Текст = ПредставлениеОтветственного;
		
		СтрокаЛегенды = ДанныеЛегендыДиаграммы.Добавить();
		СтрокаЛегенды.Точка = ВыборкаОтветственный.Ответственный;
		СтрокаЛегенды.ПредставлениеТочки = ПредставлениеОтветственного;
		СтрокаЛегенды.Итого = ВыборкаОтветственный.КоличествоСобытий;
		
		ВыборкаСостояние = ВыборкаОтветственный.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Состояние", "ВСЕ");
		
		Пока ВыборкаСостояние.Следующий() Цикл
			
			ИндексСерии = ПараметрыИзмененияФормы.СоответствиеКолонок.Получить(ВыборкаСостояние.Состояние);
			Если ИндексСерии = Неопределено Тогда
				Серия = ОсновнаяДиаграмма.Серии.Добавить(ВыборкаСостояние.ПредставлениеСостояния);
				ИндексСерии = ОсновнаяДиаграмма.Серии.Индекс(Серия);
				ДанныеЛегендыДиаграммы.Колонки.Добавить("Серия_" + ИндексСерии, ОписаниеТипаЧисло, ВыборкаСостояние.ПредставлениеСостояния);
				ДанныеЛегендыДиаграммы.Колонки.Добавить("Расшифровка_" + ИндексСерии, ОписаниеТипаСписок);
				ПараметрыИзмененияФормы.СоответствиеКолонок.Вставить(ВыборкаСостояние.Состояние, ИндексСерии);
			Иначе
				Серия = ОсновнаяДиаграмма.Серии.Получить(ИндексСерии);
			КонецЕсли;
			
			ЦветСостояния = ВыборкаСостояние.ЦветСостояния.Получить();
			Если ЦветСостояния <> Неопределено Тогда
				Серия.Цвет = ЦветСостояния;
			КонецЕсли;
			
			КоличествоСобытий = ?(ВыборкаСостояние.КоличествоСобытий = Null, 0, ВыборкаСостояние.КоличествоСобытий);
			Расшифровка = Новый Структура("Серия, Точка", ВыборкаСостояние.Состояние, ВыборкаОтветственный.Ответственный);
			Подсказка = ПредставлениеОтветственного + НСтр("ru = ', событий в состоянии: '") + ВыборкаСостояние.ПредставлениеСостояния + " = " + КоличествоСобытий;
			ОсновнаяДиаграмма.УстановитьЗначение(Точка, Серия, КоличествоСобытий, Расшифровка, Подсказка);
			
			СтрокаЛегенды["Серия_" + ИндексСерии] = ВыборкаСостояние.КоличествоСобытий;
			
			ВыборкаСобытие = ВыборкаСостояние.Выбрать();
			Пока ВыборкаСобытие.Следующий() Цикл
				СтрокаЛегенды["Расшифровка_" + ИндексСерии].Добавить(ВыборкаСобытие.КоличествоСобытий);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОсновнаяДиаграмма.Обновление = Истина;
	
	// Удаление элементов-колонок
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Элемент Из Элементы.ЛегендаДиаграммы.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	// Добавление реквизитов-колонок
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Колонка Из ДанныеЛегендыДиаграммы.Колонки Цикл
		КолонкаРеквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ЛегендаДиаграммы", Колонка.Заголовок);
		ДобавляемыеРеквизиты.Добавить(КолонкаРеквизит);
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, ПараметрыИзмененияФормы.РеквизитыКУдалению);
	
	ПараметрыИзмененияФормы.РеквизитыКУдалению.Очистить();
	Для Каждого Колонка Из ДанныеЛегендыДиаграммы.Колонки Цикл
		ПараметрыИзмененияФормы.РеквизитыКУдалению.Добавить("ЛегендаДиаграммы." + Колонка.Имя);
	КонецЦикла;
	
	// Добавление элементов-колонок
	Для Каждого Колонка Из ДанныеЛегендыДиаграммы.Колонки Цикл
		
		Если Колонка.Заголовок = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКолонка = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы.ЛегендаДиаграммы);
		ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементКолонка.ПутьКДанным = "ЛегендаДиаграммы." + Колонка.Имя;
		ЭлементКолонка.Заголовок = Колонка.Заголовок;
		ЭлементКолонка.Формат = "ЧДЦ=; ЧН=0";
		
		Если Колонка.Имя = "ПредставлениеТочки" Тогда
			
			ЭлементКолонка.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			
		ИначеЕсли Лев(Колонка.Имя, 6) = "Серия_" Тогда
			
			ИндексСерии = Сред(Колонка.Имя, 7);
			Серия = ОсновнаяДиаграмма.Серии.Получить(ИндексСерии);
			ЭлементКолонка.ЦветФонаЗаголовка = Серия.Цвет;
			
			Если Серия.Цвет.Вид <> ВидЦвета.Абсолютный Тогда
				ЭлементКолонка.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
			Иначе
				ЭлементКолонка.ЦветТекстаЗаголовка = ?(Серия.Цвет.Зеленый + Серия.Цвет.Красный + Серия.Цвет.Синий > 384, ЦветаСтиля.ЦветТекстаФормы, ЦветаСтиля.ЦветФонаФормы);
			КонецЕсли;
			
		ИначеЕсли Лев(Колонка.Имя, 6) = "Итого" Тогда
			
			КолонкаИтого = ЭлементКолонка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сдвиг колонки Итого в конец таблицы
	Если КолонкаИтого <> Неопределено Тогда
		Элементы.Переместить(КолонкаИтого, Элементы.ЛегендаДиаграммы);
	КонецЕсли;
	
	// Заполнение данных
	ЛегендаДиаграммы.Очистить();
	Для Каждого СтрокаЛегенды Из ДанныеЛегендыДиаграммы Цикл
		НоваяСтрока = ЛегендаДиаграммы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЛегенды);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СФормироватьПриОткрытии()
	
	СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаИзВыпадающегоСписка(Результат, ПараметрыВыбора) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат; // Отмена выбора.
	КонецЕсли;
	
	Если Результат = -1 Тогда // Начало выбора.
		// Чтение параметров для формирования списка из сохраненного значения периода.
		ПараметрыВыбора.Вставить("НачалоПериода", ПараметрыВыбора.Значение.ДатаНачала);
		ПараметрыВыбора.Вставить("Вариант",       ПараметрыВыбора.Значение.Вариант);
		ИндексНачальногоЗначения = Неопределено;
	ИначеЕсли ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
		// Чтение параметров для формирования списка из выбранного значения.
		ПараметрыВыбора.Вставить("НачалоПериода", Результат.Значение.НачалоПериода);
		ПараметрыВыбора.Вставить("Вариант",       Результат.Значение.Вариант);
		ИндексНачальногоЗначения = Результат.Значение.ИндексНачальногоЗначения;
	Иначе
		// Загрузка результата выбора.
		ЗагрузитьРезультатВыбораПериодаИзВыпадающегоСписка(Результат, ПараметрыВыбора);
		Возврат;
	КонецЕсли;
	
	// Формирование списка выбора.
	Если ПараметрыВыбора.Вариант = Неопределено Или ПараметрыВыбора.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		
		СписокПериодов = ОтчетыУНФКлиентСервер.СписокФиксированныхПериодов(ПараметрыВыбора.НачалоПериода, ПараметрыВыбора.ВидПериода);
		
		Если ИндексНачальногоЗначения = Неопределено Тогда
			ИндексНачальногоЗначения = СписокПериодов.НайтиПоЗначению(ПараметрыВыбора.НачалоПериода);
		КонецЕсли;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            СписокПериодов[0].Значение);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  Неопределено);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", 0);
		СписокПериодов[0].Значение = ОписаниеНавигационногоЭлемента;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            СписокПериодов[8].Значение);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  Неопределено);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", 8);
		СписокПериодов[8].Значение = ОписаниеНавигационногоЭлемента;
		
		Если Не ПараметрыВыбора.Свойство("ВариантСтандартногоПериодаПоВиду") Тогда
			ПараметрыВыбора.Вставить("ВариантСтандартногоПериодаПоВиду", ОтчетыУНФКлиентСервер.ПривестиВидПериодаКСтандартному(ПараметрыВыбора.ВидПериода));
		КонецЕсли;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            ПараметрыВыбора.НачалоПериода);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  ПараметрыВыбора.ВариантСтандартногоПериодаПоВиду);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", Неопределено);
		СписокПериодов.Добавить(ОписаниеНавигационногоЭлемента, НСтр("ru = 'Относительный...'"));
		
	Иначе
		
		СписокПериодов = ОтчетыУНФКлиентСервер.СписокВычисляемыхПериодов(ПараметрыВыбора.ВидПериода);
		
		Если ИндексНачальногоЗначения = Неопределено Тогда
			ИндексНачальногоЗначения = СписокПериодов.НайтиПоЗначению(ПараметрыВыбора.Вариант);
		КонецЕсли;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            ПараметрыВыбора.НачалоПериода);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  Неопределено);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", Неопределено);
		СписокПериодов.Добавить(ОписаниеНавигационногоЭлемента, НСтр("ru = 'Фиксированный...'"));
		
	КонецЕсли;
	
	Если ИндексНачальногоЗначения = Неопределено Тогда
		ИндексНачальногоЗначения = СписокПериодов.Количество() - 1;
	КонецЕсли;
	
	ДанныеВыбораПериодаИзВыпадающегоСписка = Новый Структура;
	ДанныеВыбораПериодаИзВыпадающегоСписка.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	ДанныеВыбораПериодаИзВыпадающегоСписка.Вставить("СписокПериодов", СписокПериодов);
	ДанныеВыбораПериодаИзВыпадающегоСписка.Вставить("ИндексНачальногоЗначения", ИндексНачальногоЗначения);
	Если Результат = -1 Тогда
		НачатьВыборПериодаИзВыпадающегоСписка();
	Иначе
		ПодключитьОбработчикОжидания("НачатьВыборПериодаИзВыпадающегоСписка", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборПериодаИзВыпадающегоСписка()
	
	Если ДанныеВыбораПериодаИзВыпадающегоСписка.Свойство("ПараметрыВыбора") Тогда
		Контекст = ДанныеВыбораПериодаИзВыпадающегоСписка;
		ДанныеВыбораПериодаИзВыпадающегоСписка = Новый Структура;
		Обработчик = Новый ОписаниеОповещения("ВыборПериодаИзВыпадающегоСписка", ЭтотОбъект, Контекст.ПараметрыВыбора);
		ПоказатьВыборИзСписка(Обработчик, Контекст.СписокПериодов, Контекст.ПараметрыВыбора.Элемент, Контекст.ИндексНачальногоЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатВыбораПериодаИзВыпадающегоСписка(Результат, ПараметрыВыбора)
	
	Значение = ПараметрыВыбора.Значение;
	
	// Запись результата выбора в данные формы и пользовательские настройки КД.
	Если ТипЗнч(Результат.Значение) = Тип("ВариантСтандартногоПериода") Тогда
		ОтборПериодПредставление = ?(ПустаяСтрока(Результат.Представление), Строка(Результат.Значение), Результат.Представление);
		Значение.Вариант = Результат.Значение;
	Иначе
		НачалоПериода = ОтчетыКлиентСервер.НачалоПериодаОтчета(ПараметрыВыбора.ВидПериода, Результат.Значение);
		КонецПериода  = ОтчетыКлиентСервер.КонецПериодаОтчета(ПараметрыВыбора.ВидПериода, Результат.Значение);
		
		ОтборПериодПредставление = Результат.Представление;
		
		Значение.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		Значение.ДатаНачала    = НачалоПериода;
		Значение.ДатаОкончания = КонецПериода;
	КонецЕсли;
	
	ОтборПериодЗначение = Значение;
	
КонецПроцедуры

&НаСервере
Функция СформироватьРасшифровкуВыручки(Менеджер)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_Продажи";
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Продажи";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	СтруктураОбластей = Новый Структура;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализРаботыМенеджеров.ПФ_MXL_ВыручкаРасшифровка");
	
	СтруктураОбластей.Вставить("Шапка",	 Макет.ПолучитьОбласть("Шапка"));
	СтруктураОбластей.Вставить("Строка", Макет.ПолучитьОбласть("Строка"));
	СтруктураОбластей.Вставить("Итог",	 Макет.ПолучитьОбласть("Итог"));
	СтруктураОбластей.Вставить("Отступ", Макет.ПолучитьОбласть("Отступ"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродажиОбороты.Период КАК Период,
		|	ПродажиОбороты.Регистратор КАК Регистратор,
		|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		|			КОГДА ПродажиОбороты.Регистратор ССЫЛКА Документ.ЗаказПокупателя
		|				ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Регистратор КАК Документ.ЗаказПокупателя).ВидОперации
		|			КОГДА ПродажиОбороты.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
		|				ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Регистратор КАК Документ.ПриходнаяНакладная).ВидОперации
		|			КОГДА ПродажиОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
		|				ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Регистратор КАК Документ.РасходнаяНакладная).ВидОперации
		|			ИНАЧЕ """"
		|		КОНЕЦ) КАК ВидОперации,
		|	ПродажиОбороты.ЗаказПокупателя КАК Заказ,
		|	ПродажиОбороты.СуммаОборот КАК Выручка,
		|	ПродажиОбороты.СебестоимостьОборот КАК Себестоимость,
		|	ПродажиОбороты.СуммаОборот - ПродажиОбороты.СебестоимостьОборот КАК ВаловаяПрибыль,
		|	ПРЕДСТАВЛЕНИЕ(ПродажиОбороты.Регистратор) КАК ПредставлениеРегистратора,
		|	ПРЕДСТАВЛЕНИЕ(ПродажиОбороты.ЗаказПокупателя) КАК ПредставлениеЗаказа
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ПериодНачало, &ПериодОкончание, Регистратор, Ответственный = &Менеджер) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	Запрос.УстановитьПараметр("ПериодНачало", ОтборПериодЗначение.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодОкончание", ОтборПериодЗначение.ДатаОкончания);
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	
	ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
	ТабличныйДокумент.Вывести(СтруктураОбластей.Шапка);
	ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
	
	ВыручкаИтог = 0;
	СебестоимостьИтог = 0;
	ВаловаяПрибыльИтог = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураОбластей.Строка.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(СтруктураОбластей.Строка);
		
		ВыручкаИтог = ВыручкаИтог + Выборка.Выручка;
		СебестоимостьИтог = СебестоимостьИтог + Выборка.Себестоимость;
		ВаловаяПрибыльИтог = ВаловаяПрибыльИтог + Выборка.ВаловаяПрибыль;
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
	
	СтруктураОбластей.Итог.Параметры.ВыручкаИтог = ВыручкаИтог;
	СтруктураОбластей.Итог.Параметры.СебестоимостьИтог = СебестоимостьИтог;
	СтруктураОбластей.Итог.Параметры.ВаловаяПрибыльИтог = ВаловаяПрибыльИтог;
	ТабличныйДокумент.Вывести(СтруктураОбластей.Итог);
	
	Возврат ПоместитьВоВременноеХранилище(ТабличныйДокумент, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьРасшифровкуЗаказов(Заказы, УникальныйИдентификатор)
	
	Возврат ПоместитьВоВременноеХранилище(Документы.ЗаказПокупателя.ПечатнаяФормаКарточкиЗаказов(Заказы, Истина, Истина), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СформироватьРасшифровкуЗадолженности(Менеджер)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_Продажи";
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Продажи";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	СтруктураОбластей = Новый Структура;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализРаботыМенеджеров.ПФ_MXL_ЗадолженностьРасшифровка");
	
	СтруктураОбластей.Вставить("Шапка",	 Макет.ПолучитьОбласть("Шапка"));
	СтруктураОбластей.Вставить("Строка", Макет.ПолучитьОбласть("Строка"));
	СтруктураОбластей.Вставить("Итог",	 Макет.ПолучитьОбласть("Итог"));
	СтруктураОбластей.Вставить("Отступ", Макет.ПолучитьОбласть("Отступ"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
		|	ПРЕДСТАВЛЕНИЕ(РасчетыСПокупателямиОстатки.Контрагент) КАК ПредставлениеКонтрагента,
		|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК Задолженность,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстаткиПросрочено.СуммаОстаток, 0) КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(
		|			&ПериодОкончание,
		|			ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
		|				И Контрагент.Ответственный = &Менеджер) КАК РасчетыСПокупателямиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(
		|				&ПериодОкончание,
		|				ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
		|					И Договор.СрокОплатыПокупателя > 0
		|					И РАЗНОСТЬДАТ(Документ.Дата, &ПериодОкончание, ДЕНЬ) > Договор.СрокОплатыПокупателя
		|					И Контрагент.Ответственный = &Менеджер) КАК РасчетыСПокупателямиОстаткиПросрочено
		|		ПО РасчетыСПокупателямиОстатки.Контрагент = РасчетыСПокупателямиОстаткиПросрочено.Контрагент
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасчетыСПокупателямиОстатки.Контрагент.Наименование";
	
	Запрос.УстановитьПараметр("ПериодОкончание", ОтборПериодЗначение.ДатаОкончания);
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	
	ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
	ТабличныйДокумент.Вывести(СтруктураОбластей.Шапка);
	ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
	
	ЗадолженностьИтог = 0;
	ПросроченнаяЗадолженностьИтог = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураОбластей.Строка.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(СтруктураОбластей.Строка);
		
		ЗадолженностьИтог = ЗадолженностьИтог + Выборка.Задолженность;
		ПросроченнаяЗадолженностьИтог = ПросроченнаяЗадолженностьИтог + Выборка.ПросроченнаяЗадолженность;
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
	
	СтруктураОбластей.Итог.Параметры.ЗадолженностьИтог = ЗадолженностьИтог;
	СтруктураОбластей.Итог.Параметры.ПросроченнаяЗадолженностьИтог = ПросроченнаяЗадолженностьИтог;
	ТабличныйДокумент.Вывести(СтруктураОбластей.Итог);
	
	Возврат ПоместитьВоВременноеХранилище(ТабличныйДокумент, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьРасшифровкуСобытий(События, УникальныйИдентификатор)
	
	Возврат ПоместитьВоВременноеХранилище(Документы.Событие.ПечатнаяФормаКарточкиСобытий(События), УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеДолжников(КоличествоДолжников, МаксКоличество)
	
	СимволовВДиаграмме = 12;
	
	ДлинаСтроки = Окр(КоличествоДолжников * СимволовВДиаграмме / МаксКоличество);
	
	Возврат СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("█", ДлинаСтроки) + "  " + КоличествоДолжников;
	
КонецФункции

&НаКлиенте
Процедура ОтборМенеджерыЗавершениеВыбора(РезультатВыбора, ПараметрыОбработчика) Экспорт
	
	Если ТипЗнч(РезультатВыбора) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ОтборМенеджерыВсе = РезультатВыбора;
	
	ОтборМенеджеры = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из РезультатВыбора Цикл
		Если ЭлементСписка.Пометка Тогда
			ОтборМенеджеры.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, ЭлементСписка.Пометка, ЭлементСписка.Картинка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЦветаСерийДиаграммы(Диаграмма)
	
	ЦветаСерий = РаботаСЦветомКлиентСервер.ЦветаСерийДиаграмм();
	
	Для ИндексСерии = 0 По Диаграмма.Серии.Количество() - 1 Цикл
		
		Серия = Диаграмма.Серии[ИндексСерии];
		Серия.Цвет = ЦветаСерий[ИндексСерии];
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
