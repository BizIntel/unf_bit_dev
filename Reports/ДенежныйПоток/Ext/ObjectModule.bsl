#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	НастройкиОтчета.ПоказыватьНастройкиДиаграммыНаФормеОтчета = Ложь;
	НастройкиОтчета.ПоказыватьГруппуСтрокиНаФормеОтчета = Ложь;
	НастройкиОтчета.ПоказыватьПоказателиНаФормеОтчета = Ложь;
	НастройкиОтчета.ПоказыватьГруппировкиКолонокНаФормеОтчета = Ложь;
	НастройкиОтчета.РазрешитьРедактироватьСКД = Ложь;
	НастройкиОтчета.ИспользоватьСравнение = Истина;
	НастройкиОтчета.ИспользоватьДополнительныеРежимыСравнения = Истина;
	НастройкиОтчета.ИспользоватьПериодичность = Истина;
	НастройкиОтчета.РазрешитьДобавлениеПрочихПолейСравнения = Ложь;
	НастройкиОтчета.Вставить("ФиксироватьКолонки", Истина);
	
	НастройкиВариантов["Денежный поток"].ИмяМакетаОбразца = "ОбразецДенежныйПоток";
	НастройкиВариантов["Денежный поток"].Рекомендуемый = Истина;
	НастройкиВариантов["Денежный поток"].Теги = НСТР("ru = 'Главное,Деньги,Поступления,Платежи'");
	
	НастройкиОтчета.Вставить("ВариантыРасшифровки", Новый Массив);
	ОтчетыУНФ.ДобавитьВариантРасшифровки(НастройкиОтчета.ВариантыРасшифровки, "Отчет.ДенежныйПоток", "Денежный поток");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РежимРасшифровки = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("РежимРасшифровки") И КомпоновщикНастроек.Настройки.ДополнительныеСвойства.РежимРасшифровки;
	
	ПараметрыОтчета = ОтчетыУНФ.ПараметрыФормированияОтчета(КомпоновщикНастроек.Настройки);
	ПараметрыОтчета.Вставить("ПоМестамХраненияДенег", КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПоМестамХраненияДенег")).Значение);
	ПараметрыОтчета.Вставить("ВалютаУчета", Константы.ВалютаУчета.Получить());
	
	ОтчетыУНФ.СтандартизироватьСхему(СхемаКомпоновкиДанных);
	
	УправлениеНебольшойФирмойОтчеты.УстановитьМакетОформленияОтчета(КомпоновщикНастроек.Настройки);
	УправлениеНебольшойФирмойОтчеты.ВывестиЗаголовокОтчета(ПараметрыОтчета, ДокументРезультат);
	УправлениеНебольшойФирмойОтчеты.НастроитьДинамическийПериод(СхемаКомпоновкиДанных, ПараметрыОтчета);
	
	Если РежимРасшифровки Тогда
		ТабличныйДокумент = СформироватьРасшифровку(ПараметрыОтчета);
	ИначеЕсли ПараметрыОтчета.Свойство("Сравнение")
		И ЗначениеЗаполнено(ПараметрыОтчета.Сравнение) 
		И ТипЗнч(ПараметрыОтчета.Сравнение)=Тип("ПеречислениеСсылка.Периодичность") 
		И НЕ ПараметрыОтчета.Сравнение=Перечисления.Периодичность.ПустаяСсылка() Тогда
		ТабличныйДокумент = СформироватьОтчетДенежныйПотокВДинамике(ПараметрыОтчета, ДанныеРасшифровки);
	Иначе
		ТабличныйДокумент = СформироватьОтчетДенежныйПоток(ПараметрыОтчета, ДанныеРасшифровки);
	КонецЕсли; 
	
	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы; 
	Если ВысотаЗаголовка > 0 Тогда
		ТабличныйДокумент.Область().СоздатьФорматСтрок();
	КонецЕсли;
	
	ДокументРезультат.ФиксацияСверху = ?(ТабличныйДокумент.ФиксацияСверху > 0, ВысотаЗаголовка + ТабличныйДокумент.ФиксацияСверху, 0);
	ДокументРезультат.ФиксацияСлева = ТабличныйДокумент.ФиксацияСлева;
	ДокументРезультат.Вывести(ТабличныйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбычныйРежим

Функция СформироватьОтчетДенежныйПоток(ПараметрыОтчета, ДанныеРасшифровки)
	
	Отчет = Новый ТабличныйДокумент;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	Настройки = КомпоновщикНастроек.Настройки;
	ТаблицаОстатков = РассчитатьОстатки(ПараметрыОтчета, Настройки);
	
	Макет = ПолучитьМакет("Макет");
	
	Настройки.Структура.Очистить();
	СкопироватьСтруктуруРекурсивно(СхемаКомпоновкиДанных.ВариантыНастроек[0].Настройки.Структура, Настройки.Структура, СхемаКомпоновкиДанных);
	Если ПараметрыОтчета.ПоМестамХраненияДенег Тогда
		ДобавитьГруппировкуПоСчетуКассе(Настройки.Структура);
	КонецЕсли; 

	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Построение таблицы значений.
	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(МакетКомпоновкиДанных,, ДанныеРасшифровки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ИсходныеДанные = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ИсходныеДанные);
	ПроцессорВывода.Вывести(Процессор);
	
	Область = Макет.ПолучитьОбласть("Шапка|БезПериодов");
	Отчет.Вывести(Область);
	
	Отчет.ФиксацияСверху = Отчет.ВысотаТаблицы;
	
	Для каждого СтрСчетКасса Из ИсходныеДанные.Строки Цикл
		Если ПараметрыОтчета.ПоМестамХраненияДенег Тогда
			Область = Макет.ПолучитьОбласть("Отступ|БезПериодов");
			Отчет.Вывести(Область);
			Область = Макет.ПолучитьОбласть("ГруппировкаБанковскийСчетКасса|БезПериодов");
			Область.Параметры.Заполнить(СтрСчетКасса);
			РасшифровкаСчетКасса = ДобавитьРасшифровку(ДанныеРасшифровки,,, СтрСчетКасса, Область, "БанковскийСчетКасса");
			Отчет.Вывести(Область);
			СтрОстатков = ТаблицаОстатков.Найти(СтрСчетКасса.БанковскийСчетКасса, "БанковскийСчетКасса");
		Иначе
			СтрСчетКасса = ИсходныеДанные;
			СтрОстатков = ?(ТаблицаОстатков.Количество()=0, Неопределено, ТаблицаОстатков[0]);
		КонецЕсли; 
		Если НЕ СтрОстатков=Неопределено И ПараметрыОтчета.Свойство("НачалоПериода") И ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) И ЗначениеЗаполнено(СтрОстатков.НачальныйОстаток) Тогда
			Область = Макет.ПолучитьОбласть("Остаток|БезПериодов");
			Область.Параметры.Дата = Формат(ПараметрыОтчета.НачалоПериода, "ДЛФ=D");
			Область.Параметры.Сумма = СтрОстатков.НачальныйОстаток;
			Отчет.Вывести(Область);
		КонецЕсли;
		Для каждого СтрПриходРасход Из СтрСчетКасса.Строки Цикл
			Область = Макет.ПолучитьОбласть(?(СтрПриходРасход.ПриходРасход,
			"ГруппировкаПоступление|БезПериодов",
			"ГруппировкаПлатеж|БезПериодов"));
			Область.Параметры.Сумма = СтрПриходРасход.Сумма;
			РасшифровкаПоступлениеПлатеж = ДобавитьРасшифровку(ДанныеРасшифровки,?(ПараметрыОтчета.ПоМестамХраненияДенег, РасшифровкаСчетКасса, Неопределено),, СтрПриходРасход, Область, "ПриходРасход");
			ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаПоступлениеПлатеж,, СтрПриходРасход, Область, "Сумма");
			Отчет.Вывести(Область);
			Отчет.НачатьАвтогруппировкуСтрок();
			Для каждого СтрХозОперация Из СтрПриходРасход.Строки Цикл
				Область = Макет.ПолучитьОбласть("ГруппировкаХозОперация|БезПериодов");
				Область.Параметры.Заполнить(СтрХозОперация);
				РасшифровкаХозоперация = ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаПоступлениеПлатеж,, СтрХозОперация, Область, "ХозОперация");
				ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаХозоперация,, СтрХозОперация, Область, "Сумма");
				Отчет.Вывести(Область, 1,, Ложь);
				Для каждого СтрАналитика Из СтрХозОперация.Строки Цикл
					Область = Макет.ПолучитьОбласть("ГруппировкаАналитика|БезПериодов");
					Область.Параметры.Заполнить(СтрАналитика);
					УстановитьПризнакЭкв(СтрАналитика, Область);
					РасшифровкаАналитика = ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаХозоперация,, СтрАналитика, Область, "Аналитика");
					ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаАналитика,, СтрАналитика, Область, "Сумма");
					Отчет.Вывести(Область, 2,, Ложь);
					Если СтрАналитика.Сумма=СтрАналитика.СуммаВал Тогда
						Продолжить;
					КонецЕсли; 
					Для каждого СтрВалюта Из СтрАналитика.Строки Цикл
						Область = Макет.ПолучитьОбласть("ГруппировкаВалюта|БезПериодов");
						Область.Параметры.Заполнить(СтрВалюта);
						РасшифровкаВалюта = ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаАналитика,, СтрВалюта, Область, "Валюта");
						ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаВалюта,, СтрВалюта, Область, "СуммаДляИтогов");
						Отчет.Вывести(Область, 3,, Ложь);
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла;  
			Отчет.ЗакончитьАвтогруппировкуСтрок();
		КонецЦикла;
		Если НЕ СтрОстатков=Неопределено И ЗначениеЗаполнено(СтрОстатков.КонечныйОстаток) Тогда
			Область = Макет.ПолучитьОбласть("Остаток|БезПериодов");
			КонецПериодаПредставление = ?(НЕ ПараметрыОтчета.Свойство("КонецПериода") ИЛИ ПараметрыОтчета.КонецПериода='0001-01-01' ИЛИ ПараметрыОтчета.КонецПериода='3999-12-31 23:59:59', НСтр("ru = 'текущий момент'"), Формат(ПараметрыОтчета.КонецПериода, "ДЛФ=D"));
			Область.Параметры.Дата = КонецПериодаПредставление;
			Область.Параметры.Сумма = СтрОстатков.КонечныйОстаток;
			Отчет.Вывести(Область);
		КонецЕсли;
		Область = Макет.ПолучитьОбласть("ОбщиеИтоги|БезПериодов");
		Если ПараметрыОтчета.ПоМестамХраненияДенег Тогда
			Область.Параметры.Сумма = СтрСчетКасса.СуммаДляИтогов;
			ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаСчетКасса,, СтрСчетКасса, Область, "Сумма");
		Иначе
			Область.Параметры.Сумма = ИсходныеДанные.Строки.Итог("СуммаДляИтогов", Ложь);
		КонецЕсли;
		Область.Параметры.Валюта = ПараметрыОтчета.ВалютаУчета;
		Отчет.Вывести(Область);
		Если НЕ ПараметрыОтчета.ПоМестамХраненияДенег Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Отчет;
	
КонецФункции

Процедура УстановитьПризнакЭкв(Строка, Область)
	
	Если НЕ Строка.Сумма=Строка.СуммаВал Тогда
		Область.Параметры.Экв = НСтр("ru = 'экв.'");
	КонецЕсли; 
	
КонецПроцедуры

Функция ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаРодительСтроки = Неопределено, РасшифровкаРодительКолонки = Неопределено, Строка, Область, Поля)
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля);
	Если НЕ РасшифровкаРодительСтроки=Неопределено ИЛИ НЕ РасшифровкаРодительКолонки=Неопределено Тогда
		МассивРодителей = Новый Массив;
		Если НЕ РасшифровкаРодительСтроки=Неопределено Тогда
			МассивРодителей.Добавить(РасшифровкаРодительСтроки);
		КонецЕсли; 
		Если НЕ РасшифровкаРодительКолонки=Неопределено Тогда
			МассивРодителей.Добавить(РасшифровкаРодительКолонки);
		КонецЕсли; 
	Иначе
		МассивРодителей = Неопределено;
	КонецЕсли; 
	ЗначенияПолей = Новый ЗначенияПолейРасшифровкиКомпоновкиДанных;
	Для каждого Поле Из МассивПолей Цикл
		ПолеРасшифровки = ЗначенияПолей.Добавить();
		ПолеРасшифровки.Поле = Поле;
		Если НЕ Поля="Сумма" Тогда
			ПолеРасшифровки.Значение = ?(ТипЗнч(Строка)=Тип("ЭлементСпискаЗначений"), Строка.Значение, Строка[Поле]);
		КонецЕсли; 
	КонецЦикла;
	Если Поля="Сумма" Тогда
		// Ресурс
		ЭлементРасшифровки = ДанныеРасшифровки.Элементы.Добавить(Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля"), МассивРодителей, ЗначенияПолей);
		ЭлементРасшифровки.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать;
		Область.Параметры.РасшифровкаПоказатель = ЭлементРасшифровки.Идентификатор;
		Возврат ЭлементРасшифровки;
	Иначе
		// Группировка
		РасшифровкаГруппировка = ДанныеРасшифровки.Элементы.Добавить(Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка"), МассивРодителей, "Группировка"+?(ТипЗнч(Строка)=Тип("ЭлементСпискаЗначений") ИЛИ Строка.Уровень()=0, "", Строка(Строка.Уровень()+1)));
		МассивРодителей = Новый Массив;
		МассивРодителей.Добавить(РасшифровкаГруппировка);
		ЭлементРасшифровки = ДанныеРасшифровки.Элементы.Добавить(Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля"), МассивРодителей, ЗначенияПолей);
		ЭлементРасшифровки.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать;
		МассивРодителей = Новый Массив;
		МассивРодителей.Добавить(ЭлементРасшифровки);
		ПодЭлементРасшифровки = ДанныеРасшифровки.Элементы.Добавить(Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля"), МассивРодителей, ЗначенияПолей);
		ПодЭлементРасшифровки.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать;
		Область.Параметры.Расшифровка = ПодЭлементРасшифровки.Идентификатор;
		Возврат ПодЭлементРасшифровки;
	КонецЕсли; 
	
КонецФункции

#КонецОбласти 

#Область ВДинамике

Функция СформироватьОтчетДенежныйПотокВДинамике(ПараметрыОтчета, ДанныеРасшифровки)
	
	Если НЕ ПараметрыОтчета.Свойство("Сравнение") Тогда
		ПараметрыОтчета.Вставить("Сравнение", Перечисления.Периодичность.Месяц);
	КонецЕсли; 
	
	Периодичность = ПараметрыОтчета.Сравнение;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Настройки.Структура.Очистить();
	СкопироватьСтруктуруРекурсивно(СхемаКомпоновкиДанных.ВариантыНастроек[0].Настройки.Структура, Настройки.Структура, СхемаКомпоновкиДанных);
	ДобавитьПериодичностьВСтруктуруОтчета(Настройки);
	
	ПолеСортировки = Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ПолеСортировки.Использование = Истина;
	ПолеСортировки.Поле = Новый ПолеКомпоновкиДанных("ДинамическийПериод");
	
	Если ПараметрыОтчета.ПоМестамХраненияДенег Тогда
		ДобавитьГруппировкуПоСчетуКассе(Настройки.Структура);
	КонецЕсли; 
	
	Отчет = Новый ТабличныйДокумент;
	
	ТаблицаОстатков = РассчитатьОстатки(ПараметрыОтчета, Настройки);
	
	Макет = ПолучитьМакет("Макет");
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Построение таблицы значений.
	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(МакетКомпоновкиДанных,, ДанныеРасшифровки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ИсходныеДанные = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ИсходныеДанные);
	ПроцессорВывода.Вывести(Процессор);
	
	ТаблицаИтогов = Новый ТаблицаЗначений;
	Для каждого Колонка Из ИсходныеДанные.Колонки Цикл
		ТаблицаИтогов.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения); 
	КонецЦикла;
	
	ЗаполнитьТаблицуИтогов(ИсходныеДанные, ТаблицаИтогов);
	
	СписокДат = Новый СписокЗначений;
	ВыделитьДатыРекурсивно(ИсходныеДанные, СписокДат);
	СписокДат.СортироватьПоЗначению();
	
	ПолеПериод = ОпределитьПолеПериода(Периодичность);
	СоответсвиеГоризонтальныхРасшифровок = Новый Соответствие;
	
	// Шапка
	Область = Макет.ПолучитьОбласть("Шапка|Основа");
	Отчет.Вывести(Область);
	Для каждого Элемент Из СписокДат Цикл
		Область = Макет.ПолучитьОбласть("Шапка|Период");
		РасшифровкаПериод = ДобавитьРасшифровку(ДанныеРасшифровки,,, Элемент, Область, ПолеПериод);
		СоответсвиеГоризонтальныхРасшифровок.Вставить(Элемент.Значение, РасшифровкаПериод);
		Область.Параметры.Период = ПреставлениеПериодаПоДате(Элемент.Значение, Периодичность);
		ОбластьЯчеек = Отчет.Присоединить(Область);
		ШиринаЗаголовка = 2;
		Если СписокДат.Индекс(Элемент)>0 Тогда
			Область = Макет.ПолучитьОбласть("Шапка|ИконкаИзменение");
			Отчет.Присоединить(Область);
			ШиринаЗаголовка = ШиринаЗаголовка+1;
			Если ПараметрыОтчета.Свойство("ПоказыватьАбсолютноеИзменение") И ПараметрыОтчета.ПоказыватьАбсолютноеИзменение Тогда
				Область = Макет.ПолучитьОбласть("Шапка|Разница");
				Отчет.Присоединить(Область);
				ШиринаЗаголовка = ШиринаЗаголовка+1;
			КонецЕсли; 
			Если ПараметрыОтчета.Свойство("ПоказыватьОтносительноеИзменение") И ПараметрыОтчета.ПоказыватьОтносительноеИзменение Тогда
				Область = Макет.ПолучитьОбласть("Шапка|Прирост");
				Отчет.Присоединить(Область);
				ШиринаЗаголовка = ШиринаЗаголовка+1;
			КонецЕсли; 
		КонецЕсли;
		Отчет.Область(ОбластьЯчеек.Верх+1, ОбластьЯчеек.Лево, ОбластьЯчеек.Верх+1, ОбластьЯчеек.Лево+ШиринаЗаголовка-1).Объединить(); 
	КонецЦикла; 
	Область = Макет.ПолучитьОбласть("Шапка|Период");
	Область.Параметры.Период = НСтр("ru = 'За весь период'");
	Отчет.Присоединить(Область);
	
	Отчет.ФиксацияСверху = Отчет.ВысотаТаблицы;
	Отчет.ФиксацияСлева = 1;
	
	// Таблица отчета
	Для каждого СтрСчетКасса Из ИсходныеДанные.Строки Цикл
		Если ПараметрыОтчета.ПоМестамХраненияДенег Тогда
			Область = Макет.ПолучитьОбласть("Отступ|Основа");
			Отчет.Вывести(Область);
			Область = Макет.ПолучитьОбласть("ГруппировкаБанковскийСчетКасса|Основа");
			Область.Параметры.Заполнить(СтрСчетКасса);
			РасшифровкаСчетКасса = ДобавитьРасшифровку(ДанныеРасшифровки,,, СтрСчетКасса, Область, "БанковскийСчетКасса");
			Отчет.Вывести(Область);
			Для каждого Элемент Из СписокДат Цикл
				Область = Макет.ПолучитьОбласть("ГруппировкаБанковскийСчетКасса|Период");
				Отчет.Присоединить(Область);
				Если СписокДат.Индекс(Элемент)>0 Тогда
					Область = Макет.ПолучитьОбласть("ГруппировкаБанковскийСчетКасса|ИконкаИзменение");
					Отчет.Присоединить(Область);
					Если ПараметрыОтчета.Свойство("ПоказыватьАбсолютноеИзменение") И ПараметрыОтчета.ПоказыватьАбсолютноеИзменение Тогда
						Область = Макет.ПолучитьОбласть("ГруппировкаБанковскийСчетКасса|Разница");
						Отчет.Присоединить(Область);
					КонецЕсли; 
					Если ПараметрыОтчета.Свойство("ПоказыватьОтносительноеИзменение") И ПараметрыОтчета.ПоказыватьОтносительноеИзменение Тогда
						Область = Макет.ПолучитьОбласть("ГруппировкаБанковскийСчетКасса|Прирост");
						Отчет.Присоединить(Область);
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			Область = Макет.ПолучитьОбласть("ГруппировкаБанковскийСчетКасса|Период");
			Отчет.Присоединить(Область);
		Иначе
			СтрСчетКасса = ИсходныеДанные;
		КонецЕсли;
		// Начальные остатки
		Область = Макет.ПолучитьОбласть("Остаток|Основа");
		Область.Параметры.Дата = НСтр("ru = 'начало периода'");
		Отчет.Вывести(Область);
		СуммаПредыдущая = 0;
		СтруктураОтбораОстатков = Новый Структура;
		Если ПараметрыОтчета.ПоМестамХраненияДенег Тогда
			СтруктураОтбораОстатков.Вставить("БанковскийСчетКасса", СтрСчетКасса.БанковскийСчетКасса);
		КонецЕсли; 
		Для каждого Элемент Из СписокДат Цикл
			Область = Макет.ПолучитьОбласть("Остаток|Период");
			НачалоПериода = Элемент.Значение;
			СтруктураОтбораОстатков.Вставить("Период", НачалоПериода);
			СтрокиОстатоков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбораОстатков);
			Если НЕ СтрокиОстатоков.Количество()=0 Тогда
				СуммаОстаток = СтрокиОстатоков[0].НачальныйОстаток;
			Иначе
				СуммаОстаток = 0;
			КонецЕсли; 
			Область.Параметры.Сумма = СуммаОстаток;
			Отчет.Присоединить(Область);
			Если СписокДат.Индекс(Элемент)>0 Тогда
				СуммаПредыдущая = ВывестиОбластиСравненияОстатков(Отчет, Макет, ПараметрыОтчета, СуммаОстаток, СуммаПредыдущая); 
			КонецЕсли; 
		КонецЦикла;
		СтруктураОтбораОстатков.Вставить("Период", Null);
		СтрокиОстатоков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбораОстатков);
		Область = Макет.ПолучитьОбласть("Остаток|Период");
		Если СтрокиОстатоков.Количество()>0 Тогда
			Область.Параметры.Сумма = СтрокиОстатоков[0].НачальныйОстаток;
		КонецЕсли;  
		Отчет.Присоединить(Область);
		Для каждого СтрПриходРасход Из СтрСчетКасса.Строки Цикл
			// Группировка ПриходРасход
			Область = Макет.ПолучитьОбласть(?(СтрПриходРасход.ПриходРасход,
			"ГруппировкаПоступление|Основа",
			"ГруппировкаПлатеж|Основа"));
			РасшифровкаПриходРасход = ДобавитьРасшифровку(ДанныеРасшифровки,?(ПараметрыОтчета.ПоМестамХраненияДенег, РасшифровкаСчетКасса, Неопределено),, СтрПриходРасход, Область, "ПриходРасход");
			Отчет.Вывести(Область);
			СуммаПредыдущая1 = 0;
			Для каждого Элемент Из СписокДат Цикл
				ИмяОбласти = ?(СтрПриходРасход.ПриходРасход, "ГруппировкаПоступление", "ГруппировкаПлатеж");
				Отбор = СтруктураОтбора(СтрПриходРасход, "ПриходРасход"+?(ПараметрыОтчета.ПоМестамХраненияДенег, ",БанковскийСчетКасса", ""));
				Отбор.Вставить("ДинамическийПериод", Элемент.Значение);
				СуммаПредыдущая1 = ВывестиОбластьОтчета(Отчет, Макет, ИмяОбласти, ПараметрыОтчета, ТаблицаИтогов, Отбор, СуммаПредыдущая1, ДанныеРасшифровки, РасшифровкаПриходРасход, СоответсвиеГоризонтальныхРасшифровок[Элемент.Значение],, СписокДат.Индекс(Элемент)=0);
			КонецЦикла;
			Область = Макет.ПолучитьОбласть(?(СтрПриходРасход.ПриходРасход,
			"ГруппировкаПоступление|Период",
			"ГруппировкаПлатеж|Период"));
			Отбор = СтруктураОтбора(СтрПриходРасход, "ПриходРасход"+?(ПараметрыОтчета.ПоМестамХраненияДенег, ",БанковскийСчетКасса", ""));
			Итоги = РассчитатьИтог(ТаблицаИтогов, Отбор);
			Область.Параметры.Сумма = Итоги.Сумма;
			ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаПриходРасход,, Итоги, Область, "Сумма");
			Отчет.Присоединить(Область);
			
			Отчет.НачатьАвтогруппировкуСтрок();
			Для каждого СтрХозОперация Из СтрПриходРасход.Строки Цикл
				// Группировка Статьи
				Область = Макет.ПолучитьОбласть("ГруппировкаХозОперация|Основа");
				Область.Параметры.Заполнить(СтрХозОперация);
				РасшифровкаХозОперация = ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаПриходРасход,, СтрХозОперация, Область, "ХозОперация");
				Отчет.Вывести(Область, 1,, Ложь);
				СуммаПредыдущая2 = 0;
				Для каждого Элемент Из СписокДат Цикл
					ИмяОбласти = "ГруппировкаХозОперация";
					Отбор = СтруктураОтбора(СтрХозОперация, "ПриходРасход,ХозОперация"+?(ПараметрыОтчета.ПоМестамХраненияДенег, ",БанковскийСчетКасса", ""));
					Отбор.Вставить("ДинамическийПериод", Элемент.Значение);
					СуммаПредыдущая2 = ВывестиОбластьОтчета(Отчет, Макет, ИмяОбласти, ПараметрыОтчета, ТаблицаИтогов, Отбор, СуммаПредыдущая2, ДанныеРасшифровки, РасшифровкаХозОперация, СоответсвиеГоризонтальныхРасшифровок[Элемент.Значение], 1, СписокДат.Индекс(Элемент)=0);
				КонецЦикла;
				Область = Макет.ПолучитьОбласть("ГруппировкаХозОперация|Период");
				Отбор = СтруктураОтбора(СтрХозОперация, "ПриходРасход,ХозОперация"+?(ПараметрыОтчета.ПоМестамХраненияДенег, ",БанковскийСчетКасса", ""));
				Итоги = РассчитатьИтог(ТаблицаИтогов, Отбор);
				Область.Параметры.Сумма = Итоги.Сумма;
				ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаХозОперация,, Итоги, Область, "Сумма");
				Отчет.Присоединить(Область, 1,, Ложь);
				
				Для каждого СтрАналитика Из СтрХозОперация.Строки Цикл
					// Группировка Аналитика
					Область = Макет.ПолучитьОбласть("ГруппировкаАналитика|Основа");
					Область.Параметры.Заполнить(СтрАналитика);
					РасшифровкаАналитика = ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаХозОперация,, СтрАналитика, Область, "Аналитика");
					Отчет.Вывести(Область, 2,, Ложь);
					СуммаПредыдущая3 = 0;
					Для каждого Элемент Из СписокДат Цикл
						ИмяОбласти = "ГруппировкаАналитика";
						Отбор = СтруктураОтбора(СтрАналитика, "ПриходРасход,ХозОперация,Аналитика"+?(ПараметрыОтчета.ПоМестамХраненияДенег, ",БанковскийСчетКасса", ""));
						Отбор.Вставить("ДинамическийПериод", Элемент.Значение);
						СуммаПредыдущая3 = ВывестиОбластьОтчета(Отчет, Макет, ИмяОбласти, ПараметрыОтчета, ТаблицаИтогов, Отбор, СуммаПредыдущая3, ДанныеРасшифровки, РасшифровкаАналитика, СоответсвиеГоризонтальныхРасшифровок[Элемент.Значение], 2, СписокДат.Индекс(Элемент)=0);
					КонецЦикла;
					Область = Макет.ПолучитьОбласть("ГруппировкаАналитика|Период");
					Отбор = СтруктураОтбора(СтрАналитика, "ПриходРасход,ХозОперация,Аналитика"+?(ПараметрыОтчета.ПоМестамХраненияДенег, ",БанковскийСчетКасса", ""));
					Итоги = РассчитатьИтог(ТаблицаИтогов, Отбор);
					Область.Параметры.Сумма = Итоги.Сумма;
					УстановитьПризнакЭкв(Итоги, Область);
					ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаАналитика,, Итоги, Область, "Сумма");
					Отчет.Присоединить(Область, 2,, Ложь);
					
					Если СтрАналитика.Сумма=СтрАналитика.СуммаВал Тогда
						Продолжить;
					КонецЕсли; 
					Для каждого СтрВалюта Из СтрАналитика.Строки Цикл
						// Группировка Валюта
						Область = Макет.ПолучитьОбласть("ГруппировкаВалюта|Основа");
						РасшифровкВалюта = ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаАналитика,, СтрВалюта, Область, "Валюта");
						Отчет.Вывести(Область, 3,, Ложь);
						Для каждого Элемент Из СписокДат Цикл
							Область = Макет.ПолучитьОбласть("ГруппировкаВалюта|Период");
							Отбор = СтруктураОтбора(СтрВалюта, "ПриходРасход,ХозОперация,Аналитика,Валюта"+?(ПараметрыОтчета.ПоМестамХраненияДенег, ",БанковскийСчетКасса", ""));
							Отбор.Вставить("ДинамическийПериод", Элемент.Значение);
							Итоги = РассчитатьИтог(ТаблицаИтогов, Отбор);
							Область.Параметры.СуммаВал = Итоги.СуммаВал;
							Область.Параметры.Валюта = ?(Итоги.СуммаВал<>0, СтрВалюта.Валюта, "");
							ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкВалюта, СоответсвиеГоризонтальныхРасшифровок[Элемент.Значение], Итоги, Область, "Сумма");
							Отчет.Присоединить(Область, 3,, Ложь);
							Если СписокДат.Индекс(Элемент)>0 Тогда
								Область = Макет.ПолучитьОбласть("ГруппировкаВалюта|ИконкаИзменение");
								Отчет.Присоединить(Область, 3,, Ложь);
								Если ПараметрыОтчета.Свойство("ПоказыватьАбсолютноеИзменение") И ПараметрыОтчета.ПоказыватьАбсолютноеИзменение Тогда
									Область = Макет.ПолучитьОбласть("ГруппировкаВалюта|Разница");
									Отчет.Присоединить(Область, 3,, Ложь);
								КонецЕсли; 
								Если ПараметрыОтчета.Свойство("ПоказыватьОтносительноеИзменение") И ПараметрыОтчета.ПоказыватьОтносительноеИзменение Тогда
									Область = Макет.ПолучитьОбласть("ГруппировкаВалюта|Прирост");
									Отчет.Присоединить(Область, 3,, Ложь);
								КонецЕсли; 
							КонецЕсли; 
						КонецЦикла;
						Область = Макет.ПолучитьОбласть("ГруппировкаВалюта|Период");
						Отбор = СтруктураОтбора(СтрВалюта, "ПриходРасход,ХозОперация,Аналитика,Валюта"+?(ПараметрыОтчета.ПоМестамХраненияДенег, ",БанковскийСчетКасса", ""));
						Итоги = РассчитатьИтог(ТаблицаИтогов, Отбор);
						Область.Параметры.СуммаВал = Итоги.СуммаВал;
						Область.Параметры.Валюта = ?(Итоги.СуммаВал<>0, СтрВалюта.Валюта, "");
						ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкВалюта,, Итоги, Область, "Сумма");
						Отчет.Присоединить(Область, 3,, Ложь);
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла;  
			Отчет.ЗакончитьАвтогруппировкуСтрок();
		КонецЦикла;
		// Конечные остатки
		Область = Макет.ПолучитьОбласть("Остаток|Основа");
		Область.Параметры.Дата = НСтр("ru = 'конец периода'");
		Отчет.Вывести(Область);
		СуммаПредыдущая = 0;
		СтруктураОтбораОстатков = Новый Структура;
		Если ПараметрыОтчета.ПоМестамХраненияДенег Тогда
			СтруктураОтбораОстатков.Вставить("БанковскийСчетКасса", СтрСчетКасса.БанковскийСчетКасса);
		КонецЕсли; 
		Для каждого Элемент Из СписокДат Цикл
			Область = Макет.ПолучитьОбласть("Остаток|Период");
			НачалоПериода = Элемент.Значение;
			СтруктураОтбораОстатков.Вставить("Период", НачалоПериода);
			СтрокиОстатоков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбораОстатков);
			Если НЕ СтрокиОстатоков.Количество()=0 Тогда
				СуммаОстаток = СтрокиОстатоков[0].КонечныйОстаток;
			Иначе
				СуммаОстаток = 0;
			КонецЕсли; 
			Область.Параметры.Сумма = СуммаОстаток;
			Отчет.Присоединить(Область);
			Если СписокДат.Индекс(Элемент)>0 Тогда
				СуммаПредыдущая = ВывестиОбластиСравненияОстатков(Отчет, Макет, ПараметрыОтчета, СуммаОстаток, СуммаПредыдущая); 
			КонецЕсли; 
		КонецЦикла;
		СтруктураОтбораОстатков.Вставить("Период", Null);
		СтрокиОстатоков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбораОстатков);
		Область = Макет.ПолучитьОбласть("Остаток|Период");
		Если СтрокиОстатоков.Количество()>0 Тогда
			Область.Параметры.Сумма = СтрокиОстатоков[0].КонечныйОстаток;
		КонецЕсли;  
		Отчет.Присоединить(Область);
		// Итоги
		Область = Макет.ПолучитьОбласть("ОбщиеИтоги|Основа");
		Отчет.Вывести(Область);
		СуммаПредыдущая0 = 0;
		Для каждого Элемент Из СписокДат Цикл
			ИмяОбласти = "ОбщиеИтоги";
			Если ПараметрыОтчета.ПоМестамХраненияДенег Тогда
				Отбор = СтруктураОтбора(СтрСчетКасса, "БанковскийСчетКасса");
				Отбор.Вставить("ДинамическийПериод", Элемент.Значение);
				СуммаПредыдущая0 = ВывестиОбластьОтчета(Отчет, Макет, ИмяОбласти, ПараметрыОтчета, ТаблицаИтогов, Отбор, СуммаПредыдущая0, ДанныеРасшифровки, РасшифровкаСчетКасса, СоответсвиеГоризонтальныхРасшифровок[Элемент.Значение],, СписокДат.Индекс(Элемент)=0, "СуммаДляИтогов");
			Иначе
				Отбор = Новый Структура;
				Отбор.Вставить("ДинамическийПериод", Элемент.Значение);
				СуммаПредыдущая0 = ВывестиОбластьОтчета(Отчет, Макет, ИмяОбласти, ПараметрыОтчета, ТаблицаИтогов, Отбор, СуммаПредыдущая0, ДанныеРасшифровки, РасшифровкаСчетКасса, СоответсвиеГоризонтальныхРасшифровок[Элемент.Значение],, СписокДат.Индекс(Элемент)=0, "СуммаДляИтогов");
			КонецЕсли; 
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ОбщиеИтоги|Период");
		Если ПараметрыОтчета.ПоМестамХраненияДенег Тогда
			Отбор = СтруктураОтбора(СтрСчетКасса, "БанковскийСчетКасса");
			Итоги = РассчитатьИтог(ТаблицаИтогов, Отбор);
		Иначе
			Итоги = РассчитатьИтог(ТаблицаИтогов);
		КонецЕсли; 
		Область.Параметры.Сумма = Итоги.СуммаДляИтогов;
		Область.Параметры.Валюта = ПараметрыОтчета.ВалютаУчета;
		Отчет.Присоединить(Область);
		Если НЕ ПараметрыОтчета.ПоМестамХраненияДенег Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	
	Возврат Отчет;
	
КонецФункции

Функция ОпределитьПолеПериода(Периодичность)
	
	Если ЗначениеЗаполнено(Периодичность) Тогда
		СтрокаДлительностьПериода = ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность);
		Возврат "Период" + СтрокаДлительностьПериода;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Функция ВывестиОбластьОтчета(Отчет, Макет, ИмяОбласти, ПараметрыОтчета, ТаблицаИтогов, Отбор, СуммаПредыдущая, ДанныеРасшифровки, РасшифровкаВертикальная, РасшифровкаГоризонтальная, Уровень = 0, ТолькоЗначение = Ложь, ПолеИтогов = "Сумма")
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти+"|Период");
	Итоги = РассчитатьИтог(ТаблицаИтогов, Отбор);
	ДобавитьРасшифровку(ДанныеРасшифровки, РасшифровкаВертикальная, РасшифровкаГоризонтальная, Итоги, Область, "Сумма");
	Область.Параметры.Сумма = Итоги[ПолеИтогов];
	Если ИмяОбласти="ГруппировкаАналитика" Тогда
		УстановитьПризнакЭкв(Итоги, Область);
	КонецЕсли;
	Если ПолеИтогов="СуммаДляИтогов" И ЗначениеЗаполнено(Итоги[ПолеИтогов]) Тогда
		Область.Параметры.Валюта = ПараметрыОтчета.ВалютаУчета;
	КонецЕсли; 
	Отчет.Присоединить(Область, Уровень,, НЕ Уровень=0);
	
	Если НЕ ТолькоЗначение Тогда
		
		Область = Макет.ПолучитьОбласть(ИмяОбласти+"|ИконкаИзменение");
		ОбластьЯчеек = Отчет.Присоединить(Область, Уровень,, НЕ Уровень=0);
		Если НЕ Итоги[ПолеИтогов]=СуммаПредыдущая Тогда
			Изображение = Отчет.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			Изображение.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
			Изображение.ГраницаСверху = Ложь;
			Изображение.ГраницаСнизу = Ложь;
			Изображение.ГраницаСправа = Ложь;
			Изображение.ГраницаСлева = Ложь;
			Изображение.ГраницаСлева = Ложь;
			Изображение.ЦветФона = Новый Цвет;
			Изображение.Расположить(ОбластьЯчеек);
			Если Итоги[ПолеИтогов]>СуммаПредыдущая Тогда
				Изображение.Картинка = БиблиотекаКартинок.ЗначениеУвеличилось;
			ИначеЕсли Итоги[ПолеИтогов]<СуммаПредыдущая Тогда
				Изображение.Картинка = БиблиотекаКартинок.ЗначениеУменьшилось;
			КонецЕсли; 
		КонецЕсли;
		
		Если ПараметрыОтчета.Свойство("ПоказыватьАбсолютноеИзменение") И ПараметрыОтчета.ПоказыватьАбсолютноеИзменение Тогда
			Область = Макет.ПолучитьОбласть(ИмяОбласти+"|Разница");
			Область.Параметры.Разница = (Итоги[ПолеИтогов]-СуммаПредыдущая);
			Отчет.Присоединить(Область, Уровень,, НЕ Уровень=0);
		КонецЕсли; 
		
		Если ПараметрыОтчета.Свойство("ПоказыватьОтносительноеИзменение") И ПараметрыОтчета.ПоказыватьОтносительноеИзменение Тогда
			Область = Макет.ПолучитьОбласть(ИмяОбласти+"|Прирост");
			Область.Параметры.Прирост = ?(СуммаПредыдущая=0, "-", (Итоги[ПолеИтогов]-СуммаПредыдущая)/СуммаПредыдущая);
			Отчет.Присоединить(Область, Уровень,, НЕ Уровень=0);
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Итоги[ПолеИтогов];
	
КонецФункции

Функция ВывестиОбластиСравненияОстатков(Отчет, Макет, ПараметрыОтчета, Сумма, СуммаПредыдущая)
	
	Область = Макет.ПолучитьОбласть("Остаток|ИконкаИзменение");
	ОбластьЯчеек = Отчет.Присоединить(Область);
	Если НЕ Сумма=СуммаПредыдущая Тогда
		Изображение = Отчет.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Изображение.РазмерКартинки = РазмерКартинки.Пропорционально;
		Изображение.ГраницаСверху = Ложь;
		Изображение.ГраницаСнизу = Ложь;
		Изображение.ГраницаСправа = Ложь;
		Изображение.ГраницаСлева = Ложь;
		Изображение.ГраницаСлева = Ложь;
		Изображение.ЦветФона = Новый Цвет;
		Изображение.Расположить(ОбластьЯчеек);
		Если Сумма>СуммаПредыдущая Тогда
			Изображение.Картинка = БиблиотекаКартинок.ЗначениеУвеличилось;
		ИначеЕсли Сумма<СуммаПредыдущая Тогда
			Изображение.Картинка = БиблиотекаКартинок.ЗначениеУменьшилось;
		КонецЕсли; 
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ПоказыватьАбсолютноеИзменение") И ПараметрыОтчета.ПоказыватьАбсолютноеИзменение Тогда
		Область = Макет.ПолучитьОбласть("Остаток|Разница");
		Область.Параметры.Разница = (Сумма-СуммаПредыдущая);
		Отчет.Присоединить(Область);
	КонецЕсли; 
	
	Если ПараметрыОтчета.Свойство("ПоказыватьОтносительноеИзменение") И ПараметрыОтчета.ПоказыватьОтносительноеИзменение Тогда
		Область = Макет.ПолучитьОбласть("Остаток|Прирост");
		Область.Параметры.Прирост = ?(СуммаПредыдущая=0, "-", (Сумма-СуммаПредыдущая)/СуммаПредыдущая);
		Отчет.Присоединить(Область);
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

Процедура ДобавитьПериодичностьВСтруктуруОтчета(Настройки)
	
	Если Настройки.Структура.Количество()>0 Тогда
		ДобавитьПериодичностьВСтруктуруОтчета(Настройки.Структура[0]);
	Иначе
		ЭлементСтруктуры = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Поле = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		Поле.Использование = Истина;
		Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		Поле.Поле = Новый ПолеКомпоновкиДанных("ДинамическийПериод");
		ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыделитьДатыРекурсивно(Дерево, Список)
	
	Для каждого Стр Из Дерево.Строки Цикл
		Если Стр.Строки.Количество()>0 Тогда
			ВыделитьДатыРекурсивно(Стр, Список);
		Иначе
			Значение = Стр.ДинамическийПериод;
			Если Список.НайтиПоЗначению(Значение)=Неопределено Тогда
				Список.Добавить(Значение);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Функция ПреставлениеПериодаПоДате(Дата, Периодичность)
	
	Если Периодичность=Перечисления.Периодичность.День Тогда
		Возврат ПредставлениеПериода(НачалоДня(Дата), КонецДня(Дата));
	ИначеЕсли Периодичность=Перечисления.Периодичность.Неделя Тогда
		Возврат ПредставлениеПериода(НачалоНедели(Дата), КонецНедели(Дата));
	ИначеЕсли Периодичность=Перечисления.Периодичность.Декада Тогда
		День = День(Дата);
		Если День<=10 Тогда
			Возврат ПредставлениеПериода(НачалоМесяца(Дата), НачалоМесяца(Дата)+10*86400-1);
		ИначеЕсли День<=20 Тогда
			Возврат ПредставлениеПериода(НачалоМесяца(Дата)+10*86400, НачалоМесяца(Дата)+20*86400-1);
		Иначе
			Возврат ПредставлениеПериода(НачалоМесяца(Дата)+20*86400, КонецМесяца(Дата));
		КонецЕсли; 
	ИначеЕсли Периодичность=Перечисления.Периодичность.Месяц Тогда
		Возврат ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	ИначеЕсли Периодичность=Перечисления.Периодичность.Квартал Тогда
		Возврат ПредставлениеПериода(НачалоКвартала(Дата), КонецКвартала(Дата));
	ИначеЕсли Периодичность=Перечисления.Периодичность.Полугодие Тогда
		Месяц = Месяц(Дата);
		Если Месяц<=6 Тогда
			Возврат ПредставлениеПериода(НачалоГода(Дата), ДобавитьМесяц(НачалоГода(Дата), 6)-1);
		Иначе
			Возврат ПредставлениеПериода(ДобавитьМесяц(НачалоГода(Дата), 6), КонецГода(Дата));
		КонецЕсли; 
	ИначеЕсли Периодичность=Перечисления.Периодичность.Год Тогда
		Возврат ПредставлениеПериода(НачалоГода(Дата), КонецГода(Дата));
	Иначе
		Возврат "";
	КонецЕсли; 
	
КонецФункции

Процедура ЗаполнитьТаблицуИтогов(Дерево, ТаблицаИтогов)
	
	Для каждого Стр Из Дерево.Строки Цикл
		Если Стр.Строки.Количество()>0 Тогда
			ЗаполнитьТаблицуИтогов(Стр, ТаблицаИтогов);
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаИтогов.Добавить(), Стр); 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Функция СтруктураОтбора(Строка, ИменаПолей)
	
	Результат = Новый Структура;
	Поля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолей);
	Для каждого Поле Из Поля Цикл
		Результат.Вставить(Поле, Строка[Поле]);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция РассчитатьИтог(Данные, Отбор = Неопределено)
	
	Если Отбор=Неопределено Тогда
		ТаблицаСОтбором = Данные;
	Иначе
		ТаблицаСОтбором = Данные.Скопировать(Отбор, "Сумма,СуммаВал,СуммаДляИтогов");
	КонецЕсли;
	Возврат Новый Структура("Сумма,СуммаВал,СуммаДляИтогов", 
	ТаблицаСОтбором.Итог("Сумма"), 
	ТаблицаСОтбором.Итог("СуммаВал"), 
	ТаблицаСОтбором.Итог("СуммаДляИтогов"));
	
КонецФункции

#КонецОбласти

#Область Расшифровка

Функция СформироватьРасшифровку(ПараметрыОтчета)
	
	Отчет = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Макет");
	
	Настройки = КомпоновщикНастроек.Настройки;
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	// Группировка по документам движения
	Настройки.Структура.Очистить();
	ГруппировкаРегистратор = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаРегистратор.Использование = Истина;
	ПолеГруппировки = ГруппировкаРегистратор.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование = Истина;
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Регистратор");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	ГруппировкаРегистратор.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаРегистратор.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	// Группировка по валюте
	ГруппировкаВалюта = ГруппировкаРегистратор.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаВалюта.Использование = Истина;
	ПолеГруппировки = ГруппировкаВалюта.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование = Истина;
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Валюта");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	ГруппировкаВалюта.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаВалюта.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Построение таблицы значений.
	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ИсходныеДанные = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ИсходныеДанные);
	ПроцессорВывода.Вывести(Процессор);
	
	Область = Макет.ПолучитьОбласть("ШапкаРасшифровка|БезПериодов");
	Отчет.Вывести(Область);
	
	Отчет.ФиксацияСверху = Отчет.ВысотаТаблицы;
	
	Отчет.НачатьАвтогруппировкуСтрок();
	Для каждого СтрРасшифровка Из ИсходныеДанные.Строки Цикл
		Если НЕ ЗначениеЗаполнено(СтрРасшифровка.Регистратор) Тогда
			Продолжить;
		КонецЕсли; 
		Область = Макет.ПолучитьОбласть("ГруппировкаРасшифровка|БезПериодов");
		Область.Параметры.Заполнить(СтрРасшифровка);
		Если СтрРасшифровка.Строки.Количество()=1 Тогда
			Область.Параметры.Заполнить(СтрРасшифровка.Строки[0]);
			Отчет.Вывести(Область, 1);
		Иначе
			Область.Параметры.Валюта = НСтр("ru = 'экв.'");
			Отчет.Вывести(Область);
			Для каждого СтрВалюта Из СтрРасшифровка.Строки Цикл
				Если НЕ ЗначениеЗаполнено(СтрВалюта.Сумма) Тогда
					Продолжить;
				КонецЕсли; 
				Область = Макет.ПолучитьОбласть("ГруппировкаВалюта|БезПериодов");
				Область.Параметры.Заполнить(СтрВалюта);
				Отчет.Вывести(Область, 2,, Ложь);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Область.ЗакончитьАвтогруппировкуСтрок();
	
	Область = Макет.ПолучитьОбласть("ОбщиеИтоги|БезПериодов");
	Область.Параметры.Сумма = ИсходныеДанные.Строки.Итог("СуммаДляИтогов", Ложь);
	Область.Параметры.Валюта = ПараметрыОтчета.ВалютаУчета;
	Отчет.Вывести(Область);
	
	Возврат Отчет;
	
КонецФункции

#КонецОбласти

Процедура ДобавитьГруппировкуПоСчетуКассе(Структура)
	
	ГруппировкаСчетКасса = Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));;
	Поле = ГруппировкаСчетКасса.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	Поле.Использование = Истина;
	Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	Поле.Поле = Новый ПолеКомпоновкиДанных("БанковскийСчетКасса");
	ГруппировкаСчетКасса.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаСчетКасса.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	СкопироватьСтруктуруРекурсивно(Структура, ГруппировкаСчетКасса.Структура, СхемаКомпоновкиДанных);
	Структура.Удалить(Структура[0]);
	
КонецПроцедуры

Процедура СкопироватьСтруктуруРекурсивно(Источник, Приемник, СхемаКомпоновкиДанных, СкрытьПериодичность = Ложь)
	
	Для каждого ЭлементИсточник Из Источник Цикл
		Если ТипЗнч(ЭлементИсточник)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(ЭлементИсточник)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Если ЭлементИсточник.Структура=Приемник Тогда
				Продолжить;
			КонецЕсли; 
			Если ТипЗнч(Приемник)=Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
				ЭлементПриемник = Приемник.Добавить();
			Иначе
				ЭлементПриемник = Приемник.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли; 
			ЭлементПриемник.Использование = ЭлементИсточник.Использование;
			СкопироватьВыборРекурсивно(ЭлементИсточник.Выбор.Элементы, ЭлементПриемник.Выбор.Элементы);
			Для каждого ПолеИсточник Из ЭлементИсточник.ПоляГруппировки.Элементы Цикл
				ПолеПриемник = ЭлементПриемник.ПоляГруппировки.Элементы.Добавить(ТипЗнч(ПолеИсточник));
				Если ТипЗнч(ПолеИсточник)=Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
					ПолеПриемник.Использование = ПолеИсточник.Использование;
					ПолеПриемник.Поле = ПолеИсточник.Поле;
					ПолеПриемник.ТипГруппировки = ПолеИсточник.ТипГруппировки;
					ПолеПриемник.ТипДополнения = ПолеИсточник.ТипДополнения;
					ПолеПриемник.НачалоПериода = ПолеИсточник.НачалоПериода;
					ПолеПриемник.КонецПериода = ПолеИсточник.КонецПериода;
					ПолеСхемы = ПолеСхемы(СхемаКомпоновкиДанных, ПолеИсточник.Поле);
					Если НЕ ПолеСхемы=Неопределено И ПолеСхемы.Роль.НомерПериода>0 Тогда
						ЭлементПриемник.Использование = НЕ СкрытьПериодичность;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			Для каждого ПорядокИсточник Из ЭлементИсточник.Порядок.Элементы Цикл
				ПорядокПриемник = ЭлементПриемник.Порядок.Элементы.Добавить(ТипЗнч(ПорядокИсточник));
				Если ТипЗнч(ПорядокИсточник)=Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
					ПорядокПриемник.Использование = ПорядокИсточник.Использование;
					ПорядокПриемник.Поле = ПорядокИсточник.Поле;
					ПорядокПриемник.ТипУпорядочивания = ПорядокИсточник.ТипУпорядочивания;
				КонецЕсли; 
			КонецЦикла; 
			СкопироватьСтруктуруРекурсивно(ЭлементИсточник.Структура, ЭлементПриемник.Структура, СхемаКомпоновкиДанных, СкрытьПериодичность);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолеСхемы(Схема, Поле)
	
	ИмяПоля = Строка(Поле);
	Для каждого Набор Из Схема.НаборыДанных Цикл
		ПолеСхемы = Набор.Поля.Найти(ИмяПоля);
		Если НЕ ПолеСхемы=Неопределено Тогда
			Возврат ПолеСхемы;
		КонецЕсли;  
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Процедура СкопироватьВыборРекурсивно(Источник, Приемник)
	
	Для каждого ИсточникВыбор Из Источник Цикл
		ПриемникВыбор = Приемник.Добавить(ТипЗнч(ИсточникВыбор));
		ПриемникВыбор.Использование = ИсточникВыбор.Использование;
		Если ТипЗнч(ИсточникВыбор)=Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			ПриемникВыбор.Поле = ИсточникВыбор.Поле;
		ИначеЕсли ТипЗнч(ИсточникВыбор)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьВыборРекурсивно(ИсточникВыбор.Элементы, ПриемникВыбор.Элементы);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Функция РассчитатьОстатки(ПараметрыОтчета, Настройки)
	
	Построитель = Новый ПостроительЗапроса;
	Если ПараметрыОтчета.Свойство("Сравнение")
		И ЗначениеЗаполнено(ПараметрыОтчета.Сравнение) 
		И ТипЗнч(ПараметрыОтчета.Сравнение)=Тип("ПеречислениеСсылка.Периодичность") 
		И НЕ ПараметрыОтчета.Сравнение=Перечисления.Периодичность.ПустаяСсылка() Тогда
		Построитель.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДенежныеСредстваОстаткиИОбороты.Период КАК Период,
		|	ДенежныеСредстваОстаткиИОбороты.БанковскийСчетКасса КАК БанковскийСчетКасса,
		|	ДенежныеСредстваОстаткиИОбороты.СуммаНачальныйОстаток КАК НачальныйОстаток,
		|	ДенежныеСредстваОстаткиИОбороты.СуммаКонечныйОстаток КАК КонечныйОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, МЕСЯЦ, ДвиженияИГраницыПериода, ) КАК ДенежныеСредстваОстаткиИОбороты
		|{ГДЕ
		|	ДенежныеСредстваОстаткиИОбороты.Организация.*,
		|	ДенежныеСредстваОстаткиИОбороты.ТипДенежныхСредств.*,
		|	ДенежныеСредстваОстаткиИОбороты.БанковскийСчетКасса.*,
		|	ДенежныеСредстваОстаткиИОбороты.Валюта.*}
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	БанковскийСчетКасса
		|ИТОГИ
		|	СУММА(НачальныйОстаток),
		|	СУММА(КонечныйОстаток)
		|ПО
		|	БанковскийСчетКасса,
		|	Период ПЕРИОДАМИ(МЕСЯЦ, &НачалоПериода, &КонецПериода)";
		Построитель.Текст = СтрЗаменить(Построитель.Текст, "МЕСЯЦ", ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрыОтчета.Сравнение));
	Иначе
		Построитель.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&НачалоПериода КАК Период,
		|	ДенежныеСредстваОстаткиИОбороты.БанковскийСчетКасса КАК БанковскийСчетКасса,
		|	ДенежныеСредстваОстаткиИОбороты.СуммаНачальныйОстаток КАК НачальныйОстаток,
		|	ДенежныеСредстваОстаткиИОбороты.СуммаКонечныйОстаток КАК КонечныйОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, ДвиженияИГраницыПериода, ) КАК ДенежныеСредстваОстаткиИОбороты
		|{ГДЕ
		|	ДенежныеСредстваОстаткиИОбороты.Организация.*,
		|	ДенежныеСредстваОстаткиИОбороты.ТипДенежныхСредств.*,
		|	ДенежныеСредстваОстаткиИОбороты.БанковскийСчетКасса.*,
		|	ДенежныеСредстваОстаткиИОбороты.Валюта.*}
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	БанковскийСчетКасса
		|ИТОГИ
		|	СУММА(НачальныйОстаток),
		|	СУММА(КонечныйОстаток)
		|ПО
		|	БанковскийСчетКасса,
		|	Период"
	КонецЕсли;
	НаложитьОтоборыРекурсивно(Построитель, Настройки.Отбор.Элементы);
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Период");
	Если ПараметрыОтчета.ПоМестамХраненияДенег Тогда
		Результат.Колонки.Добавить("БанковскийСчетКасса");
	КонецЕсли; 
	Результат.Колонки.Добавить("НачальныйОстаток");
	Результат.Колонки.Добавить("КонечныйОстаток");
	Запрос = Построитель.ПолучитьЗапрос();
	Если ПараметрыОтчета.Свойство("НачалоПериода") Тогда
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", '0001-01-01');
	КонецЕсли;
	Если ПараметрыОтчета.Свойство("КонецПериода") Тогда
		Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Иначе
		Запрос.УстановитьПараметр("КонецПериода", '0001-01-01');
	КонецЕсли; 
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
		ВыборкаПериод = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
		Пока ВыборкаПериод.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), ВыборкаПериод);
		КонецЦикла; 
	КонецЦикла;
	Если НЕ ПараметрыОтчета.ПоМестамХраненияДенег Тогда
		Результат.Свернуть("Период", "НачальныйОстаток,КонечныйОстаток");
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

Процедура НаложитьОтоборыРекурсивно(Построитель, ОтборыЭлементы)
	
	ПоляОтбора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Организация,ТипДенежныхСредств,БанковскийСчетКасса,Валюта");
	Для каждого ОтборЭлемент Из ОтборыЭлементы Цикл
		Если НЕ ОтборЭлемент.Использование Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ОтборЭлемент)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НаложитьОтоборыРекурсивно(Построитель, ОтборЭлемент.Элементы);
			Продолжить;
		КонецЕсли;
		ИмяПоля = Строка(ОтборЭлемент.ЛевоеЗначение);
		Если ПоляОтбора.Найти(ИмяПоля)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ВидСравненияПостроителя = ВидСравненияИзВидаСравненияКомпоновки(ОтборЭлемент.ВидСравнения);
		Если ВидСравненияПостроителя=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		НовыйОтбор = Построитель.Отбор.Добавить(ИмяПоля);
		НовыйОтбор.ВидСравнения = ВидСравненияПостроителя;
		НовыйОтбор.Значение = ОтборЭлемент.ПравоеЗначение;
		НовыйОтбор.Использование = Истина;
	КонецЦикла; 
	
КонецПроцедуры

Функция ВидСравненияИзВидаСравненияКомпоновки(ВидСравненияКомпоновки)
	
	Если ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.Больше Тогда
		Возврат ВидСравнения.Больше;
	ИначеЕсли ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Возврат ВидСравнения.БольшеИлиРавно;
	ИначеЕсли ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Возврат ВидСравнения.ВИерархии;
	ИначеЕсли ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Возврат ВидСравнения.ВСписке;
	ИначеЕсли ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Возврат ВидСравнения.ВСпискеПоИерархии;
	ИначеЕсли ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.Меньше Тогда
		Возврат ВидСравнения.Меньше;
	ИначеЕсли ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Возврат ВидСравнения.МеньшеИлиРавно;
	ИначеЕсли ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Возврат ВидСравнения.НеВИерархии;
	ИначеЕсли ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Возврат ВидСравнения.НеВСписке;
	ИначеЕсли ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Возврат ВидСравнения.НеВСпискеПоИерархии;
	ИначеЕсли ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Возврат ВидСравнения.НеРавно;
	ИначеЕсли ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Возврат ВидСравнения.НеСодержит;
	ИначеЕсли ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.Равно Тогда
		Возврат ВидСравнения.Равно;
	ИначеЕсли ВидСравненияКомпоновки=ВидСравненияКомпоновкиДанных.Содержит Тогда
		Возврат ВидСравнения.Содержит;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

#КонецОбласти

ЭтоОтчетУНФ = Истина;

#КонецЕсли