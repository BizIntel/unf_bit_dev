#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	НастройкиВариантов["ВоронкаПродаж"].Теги = НСтр("ru = 'CRM'");
	НастройкиВариантов["ВоронкаПродаж"].Рекомендуемый = Истина;

	НастройкиОтчета.ПоказыватьГруппуСтрокиНаФормеОтчета = Ложь;
	НастройкиОтчета.ПоказыватьГруппуКолонкиНаФормеОтчета = Ложь;
	НастройкиОтчета.ПоказыватьНастройкиДиаграммыНаФормеОтчета = Ложь;
	НастройкиОтчета.РазрешитьРедактироватьСКД = Ложь;
	НастройкиОтчета.ПрограммноеИзменениеФормыОтчета = Истина;
	
КонецПроцедуры

Процедура ОбновитьНастройкиНаФорме(НастройкиОтчета, НастройкиСКД, Форма) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	СуществующиеРевизиты = Форма.ПолучитьРеквизиты();
	ИменаРеквизитов = Новый Массив;
	Для Каждого Реквизит Из СуществующиеРевизиты Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Форма.Элементы.ГруппаФильтры.Поведение = ПоведениеОбычнойГруппы.Обычное;
	Форма.Элементы.ГруппаПараметрыЭлементы.Поведение = ПоведениеОбычнойГруппы.Обычное;
	Форма.Элементы.ГруппаПараметрыЭлементы.Заголовок = НСтр("ru = 'Вариант воронки'");
	
	Если Не ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
		СпрятатьВариантПоПодразделениям(Форма);
	КонецЕсли;
	
	Идентификатор = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	ГруппаФильтрВидОперацииВидЗаказа = Форма.Элементы.Вставить("ГруппаФильтр" + Идентификатор, Тип("ГруппаФормы"), Форма.Элементы.ГруппаФильтры, Форма.Элементы.ГруппаФильтрЭлементы);
	ГруппаФильтрВидОперацииВидЗаказа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФильтрВидОперацииВидЗаказа.ОтображатьЗаголовок = Ложь;
	ГруппаФильтрВидОперацииВидЗаказа.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаФильтрВидОперацииВидЗаказа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы") Тогда
		СтрВидОперации = ДобавитьПолеНастройки(Форма.ПоляНастроек, "Фильтр", "ВидОперации", Новый ОписаниеТипов("Булево"), НСтр("ru = 'Вид операции'"), "Флажок");
		СтрВидОперации.Создан = Истина;
		СтрВидОперации.ИмяГруппы = ГруппаФильтрВидОперацииВидЗаказа.Имя;
		СтрВидОперации.Поле = "ВидОперации";
		
		ДобавитьОписаниеРеквизита(ДобавляемыеРеквизиты, "ФильтрЗаказыПокупателей", НСтр("ru = 'Заказы покупателей'"), СтрВидОперации.ТипЗначения, СтрВидОперации, ИменаРеквизитов);
		ДобавитьОписаниеРеквизита(ДобавляемыеРеквизиты, "ФильтрЗаказНаряды", НСтр("ru = 'Заказ-наряды'"), СтрВидОперации.ТипЗначения, СтрВидОперации, ИменаРеквизитов);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Или
		ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов") Тогда
		СтрВидЗаказа = ДобавитьПолеНастройки(Форма.ПоляНастроек, "Фильтр", "ВидЗаказа", Новый ОписаниеТипов, НСтр("ru = 'Вид заказа'"), "Поле");
		СтрВидЗаказа.НестандартныйОбработчик = Ложь;
		СтрВидЗаказа.Создан = Истина;
		СтрВидЗаказа.ИмяГруппы = ГруппаФильтрВидОперацииВидЗаказа.Имя;
		СтрВидЗаказа.Поле = "ВидЗаказа";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
		ДобавитьОписаниеРеквизита(ДобавляемыеРеквизиты, "ФильтрВидЗаказаПокупателя", НСтр("ru = 'Вид заказа покупателя'"), Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказовПокупателей"), СтрВидЗаказа, ИменаРеквизитов);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов") Тогда
		ДобавитьОписаниеРеквизита(ДобавляемыеРеквизиты, "ФильтрВидЗаказНаряда", НСтр("ru = 'Вид заказ-наряда'"), Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказНарядов"), СтрВидЗаказа, ИменаРеквизитов);
	КонецЕсли;
	
	Если Не МенееДвухПокупателейВСправочникеКонтрагенты() Тогда
		СтрКонтрагент = ДобавитьПолеНастройки(Форма.ПоляНастроек, "Фильтр", "Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"), НСтр("ru = 'Покупатель'"), "Поле");
		СтрКонтрагент.НестандартныйОбработчик = Ложь;
		СтрКонтрагент.Создан = Истина;
		СтрКонтрагент.Поле = "Контрагент";
		ДобавитьОписаниеРеквизита(ДобавляемыеРеквизиты, "ФильтрПокупатель", НСтр("ru = 'Покупатель'"), СтрКонтрагент.ТипЗначения, СтрКонтрагент, ИменаРеквизитов);
	КонецЕсли;
	
	Если Не МенееДвухЭлементовВСправочникеСотрудники() Тогда
		СтрОтветственный = ДобавитьПолеНастройки(Форма.ПоляНастроек, "Фильтр", "Ответственный", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"), НСтр("ru = 'Менеджер'"), "Поле");
		СтрОтветственный.НестандартныйОбработчик = Ложь;
		СтрОтветственный.Создан = Истина;
		СтрОтветственный.Поле = "Ответственный";
		ДобавитьОписаниеРеквизита(ДобавляемыеРеквизиты, "ФильтрМенеджер", НСтр("ru = 'Менеджер'"), СтрОтветственный.ТипЗначения, СтрОтветственный, ИменаРеквизитов);
	КонецЕсли;
	
	Если Не МенееДвухПодразделенийВСправочникеСтруктурныеЕдиницы() 
		И ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
		СтрСтруктурнаяЕдиницаПродажи = ДобавитьПолеНастройки(Форма.ПоляНастроек, "Фильтр", "СтруктурнаяЕдиницаПродажи", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"), НСтр("ru = 'Подразделение'"), "Поле");
		СтрСтруктурнаяЕдиницаПродажи.НестандартныйОбработчик = Ложь;
		СтрСтруктурнаяЕдиницаПродажи.Создан = Истина;
		СтрСтруктурнаяЕдиницаПродажи.Поле = "СтруктурнаяЕдиницаПродажи";
		ДобавитьОписаниеРеквизита(ДобавляемыеРеквизиты, "ФильтрПодразделение", НСтр("ru = 'Подразделение'"), СтрСтруктурнаяЕдиницаПродажи.ТипЗначения, СтрСтруктурнаяЕдиницаПродажи, ИменаРеквизитов);
	КонецЕсли;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы") Тогда
		ДобавитьФлажок("ФильтрЗаказыПокупателей", СтрВидОперации, Форма);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
		ДобавитьПолеВвода("ФильтрВидЗаказаПокупателя", НСтр("ru = 'Вид заказа покупателя'"), СтрВидЗаказа, Форма);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы") Тогда
		ДобавитьФлажок("ФильтрЗаказНаряды", СтрВидОперации, Форма);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов") Тогда
		ДобавитьПолеВвода("ФильтрВидЗаказНаряда", НСтр("ru = 'Вид заказ-наряда'"), СтрВидЗаказа, Форма);
	КонецЕсли;
	
	Если СтрКонтрагент <> Неопределено Тогда
		ПолеКонтрагент = НастройкиСКД.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(СтрКонтрагент.Поле));
		ОтчетыУНФ.СоздатьФильтрПолеВвода(СтрКонтрагент, Форма, Форма.Элементы, ПолеКонтрагент.ПолучитьПараметрыВыбора(), ПолеКонтрагент.ПолучитьСвязиПараметровВыбора());
	КонецЕсли;
	
	Если СтрОтветственный <> Неопределено Тогда
		ПолеОтветственный = НастройкиСКД.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(СтрОтветственный.Поле));
		ОтчетыУНФ.СоздатьФильтрПолеВвода(СтрОтветственный, Форма, Форма.Элементы, ПолеОтветственный.ПолучитьПараметрыВыбора(), ПолеОтветственный.ПолучитьСвязиПараметровВыбора());
	КонецЕсли;
	
	Если СтрСтруктурнаяЕдиницаПродажи <> Неопределено Тогда
		ПолеПодразделение = НастройкиСКД.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(СтрСтруктурнаяЕдиницаПродажи.Поле));
		ОтчетыУНФ.СоздатьФильтрПолеВвода(СтрСтруктурнаяЕдиницаПродажи, Форма, Форма.Элементы, ПолеПодразделение.ПолучитьПараметрыВыбора(), ПолеПодразделение.ПолучитьСвязиПараметровВыбора());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииНестандартногоРеквизита(Тип, ИмяПоля, СтруктураЗначений, НастройкиСКД, Форма, ИмяЭлемента) Экспорт
	
	Если Тип = "Фильтр" И ИмяПоля = "ВидОперации" Тогда
		Если НЕ СтруктураЗначений.ФильтрЗаказыПокупателей И НЕ СтруктураЗначений.ФильтрЗаказНаряды Тогда
			ВидОперации = Неопределено;
		ИначеЕсли СтруктураЗначений.ФильтрЗаказыПокупателей И СтруктураЗначений.ФильтрЗаказНаряды Тогда
			ВидОперации = Новый СписокЗначений;
			ВидОперации.Добавить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу);
			ВидОперации.Добавить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
		ИначеЕсли СтруктураЗначений.ФильтрЗаказыПокупателей Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
		ИначеЕсли СтруктураЗначений.ФильтрЗаказНаряды Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
		КонецЕсли;
		ИзменитьОтбор("ВидОперации", ВидОперации, НастройкиСКД);
		Форма.ОбновитьОтображениеОтметокФильтровВызов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МакетОтчета = ПолучитьМакет("ТД_ВоронкаПродаж");
	
	Если НеУстановленыОбязательныеФильтры(КомпоновщикНастроек.Настройки, ДокументРезультат, МакетОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	ВариантВоронки = Отчеты.ВоронкаПродаж.ВариантВоронки(КомпоновщикНастроек.Настройки);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ПолеГруппировки КАК ПолеГруппировки,
	|	ИсторияСостоянийЗаказовСрезПоследних.Заказ КАК Заказ,
	|	ИсторияСостоянийЗаказовСрезПоследних.Заказ.ВидЗаказа КАК ВидЗаказа,
	|	ИсторияСостоянийЗаказовСрезПоследних.Состояние КАК СостояниеОтмены,
	|	ИсторияСостоянийЗаказовСрезПоследних.Заказ.ПричинаОтмены КАК ПричинаОтмены,
	|	ИсторияСостоянийЗаказовСрезПоследних.Заказ.СуммаДокумента КАК СуммаДокумента,
	|	1 КАК Потеря
	|ИЗ
	|	РегистрСведений.ИсторияСостоянийЗаказов.СрезПоследних(
	|			,
	|			Заказ.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|				И Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
	|				И Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказНарядов.Завершен)
	|				И Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_Заказы.Заказ
	|					ИЗ
	|						ВТ_Заказы)) КАК ИсторияСостоянийЗаказовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеВоронкиПродаж.Порядок КАК Порядок,
	|	ВТ_ДанныеВоронкиПродаж.ПолеГруппировки КАК ПолеГруппировки,
	|	ВТ_ДанныеВоронкиПродаж.ВидЗаказа КАК ВидЗаказа,
	|	ВТ_ДанныеВоронкиПродаж.ВидОперации КАК ВидОперации,
	|	ВТ_ДанныеВоронкиПродаж.Состояние КАК Состояние,
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеВоронкиПродаж.Длительность <> 0
	|			ТОГДА ВТ_ДанныеВоронкиПродаж.Длительность
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Длительность,
	|	ВТ_ДанныеВоронкиПродаж.УчитыватьВВоронке КАК УчитыватьВВоронке,
	|	ВТ_ДанныеВоронкиПродаж.СуммаДокумента * ВТ_ДанныеВоронкиПродаж.УчитыватьВВоронке КАК СуммаДокумента
	|ИЗ
	|	ВТ_ДанныеВоронкиПродаж КАК ВТ_ДанныеВоронкиПродаж
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеГруппировки,
	|	ВидЗаказа,
	|	Порядок,
	|	Состояние
	|ИТОГИ
	|	СРЕДНЕЕ(Длительность),
	|	СУММА(УчитыватьВВоронке),
	|	СУММА(СуммаДокумента)
	|ПО
	|	ПолеГруппировки,
	|	ВидЗаказа,
	|	Порядок,
	|	Состояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ДанныеВоронкиПродаж.ВидОперации КАК ВидОперации
	|ИЗ
	|	ВТ_ДанныеВоронкиПродаж КАК ВТ_ДанныеВоронкиПродаж";
	
	ЗапросВоронкаПродаж = Новый Запрос;
	ЗапросВоронкаПродаж.Текст = Отчеты.ВоронкаПродаж.ТекстЗапросаСУстановленнымПолемГруппировки(ТекстЗапроса, "ИсторияСостоянийЗаказовСрезПоследних", КомпоновщикНастроек.Настройки);
	ЗапросВоронкаПродаж.МенеджерВременныхТаблиц = Отчеты.ВоронкаПродаж.ВременныеТаблицыВоронкиПродаж(КомпоновщикНастроек.Настройки);
	
	РезультатыЗапросаВоронкаПродаж = ЗапросВоронкаПродаж.ВыполнитьПакет();
	
	Если РезультатыЗапросаВоронкаПродаж[2].Пустой() Тогда
		ДокументРезультат.Вывести(МакетОтчета.ПолучитьОбласть("СтрокаОтсутствуютДанные"));
		Возврат;
	КонецЕсли;
	
	ОбластьГруппировка = МакетОтчета.ПолучитьОбласть("СтрокаГруппировка");
	ОбластьШапка = МакетОтчета.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Валюта = Константы.НациональнаяВалюта.Получить();
	
	ОбластьПодвал = МакетОтчета.ПолучитьОбласть("Подвал");
	
	ЦветСостояния = Новый Соответствие;
	ТаблицаПотерь = РезультатыЗапросаВоронкаПродаж[0].Выгрузить();
	ДанныеПоПотерям = ДанныеПоПотерям(ТаблицаПотерь);
	ДанныеРасшифровки.Настройки.ДополнительныеСвойства.Вставить("ЦветаГрадиента", ЦветаГрадиентаПричин(ТаблицаПотерь));
	
	ДокументРезультат.Вывести(ОбластьШапка);
	
	ВыборкаВоронкаПродажГруппировка = РезультатыЗапросаВоронкаПродаж[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВоронкаПродажГруппировка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаВоронкаПродажГруппировка.УчитыватьВВоронке) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаВоронкаПродажВидЗаказа = ВыборкаВоронкаПродажГруппировка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВоронкаПродажВидЗаказа.Следующий() Цикл
			
			ОбластьГруппировка.Параметры.ПредставлениеГруппировки = ПредставлениеГруппировки(ВариантВоронки, ВыборкаВоронкаПродажВидЗаказа);
			ДокументРезультат.Вывести(ОбластьГруппировка);
			
			ВывестиДетализациюСостояние(ДокументРезультат, ВыборкаВоронкаПродажВидЗаказа, ДанныеПоПотерям, ДанныеРасшифровки, МакетОтчета, ЦветСостояния);
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(ОбластьПодвал);
		
	КонецЦикла;
	
	
	ВывестиЛегендуПотерь(ДокументРезультат, МакетОтчета, ДанныеРасшифровки.Настройки.ДополнительныеСвойства.ЦветаГрадиента);
	
КонецПроцедуры

Процедура ВывестиДетализациюСостояние(Знач ДокументРезультат, Знач ВыборкаВоронкаПродажВидЗаказа, Знач ДанныеПоПотерям, Знач ДанныеРасшифровки, Знач МакетОтчета, Знач ЦветСостояния)
	
	КоличествоСостоянийПоВидуЗаказа = Неопределено;
	КоличествоПредыдущейСтроки = Неопределено;
	
	ВыборкаВоронкаПродажПорядок = ВыборкаВоронкаПродажВидЗаказа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВоронкаПродажПорядок.Следующий() Цикл
		
		ВыборкаВоронкаПродажСостояние = ВыборкаВоронкаПродажПорядок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВоронкаПродажСостояние.Следующий() Цикл
			
			ОбластьСостояние = МакетОтчета.ПолучитьОбласть("СтрокаСостояние");
			
			ОбластьСостояние.Параметры.Расшифровка = ИдентификаторЭлементаРасшифровки(ДанныеРасшифровки, ВыборкаВоронкаПродажСостояние, Ложь);
			ОбластьСостояние.Параметры.РасшифровкаПотери = ИдентификаторЭлементаРасшифровки(ДанныеРасшифровки, ВыборкаВоронкаПродажСостояние, Истина);
			
			ОбластьСостояние.Параметры.Состояние = ВыборкаВоронкаПродажСостояние.Состояние;
			ОбластьСостояние.Параметры.Количество = ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке;
			
			Если ЗначениеЗаполнено(ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке)
				И ЗначениеЗаполнено(КоличествоПредыдущейСтроки) Тогда
				ОбластьСостояние.Параметры.Конверсия = СтрШаблон("%1%%",
				Формат(ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке / КоличествоПредыдущейСтроки * 100, "ЧЦ=3"));
			КонецЕсли;
			
			КоличествоПредыдущейСтроки = ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке;
			
			Если ЗначениеЗаполнено(ВыборкаВоронкаПродажСостояние.Длительность) Тогда
				ОбластьСостояние.Параметры.Длительность = Окр(ВыборкаВоронкаПродажСостояние.Длительность / 60 / 60, 2);
			КонецЕсли;
			
			ОбластьСостояние.Параметры.СуммаДокумента = Формат(ВыборкаВоронкаПродажСостояние.СуммаДокумента, "ЧЦ=15; ЧДЦ=2");
			
			Если ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние] = Неопределено Тогда
				ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние] = ВыборкаВоронкаПродажСостояние.Состояние.Цвет.Получить();
			КонецЕсли;
			
			Если ТипЗнч(ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние]) = Тип("Цвет") Тогда
				ОбластьСостояние.Область("R1C3:R1C3").ЦветТекста = ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние];
			Иначе
				ОбластьСостояние.Область("R1C3:R1C3").ЦветТекста = Новый Цвет;
			КонецЕсли;
			
			Если КоличествоСостоянийПоВидуЗаказа = Неопределено Тогда
				КоличествоСостоянийПоВидуЗаказа = ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке;
				ОбластьСостояние.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентов(100);
			Иначе
				Проценты = Окр(ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке / КоличествоСостоянийПоВидуЗаказа * 100);
				ОбластьСостояние.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентов(Проценты);
			КонецЕсли;
			
			ЗаполнитьПотери(ОбластьСостояние, ВыборкаВоронкаПродажСостояние, ДанныеПоПотерям, КоличествоСостоянийПоВидуЗаказа, ДанныеРасшифровки.Настройки.ДополнительныеСвойства.ЦветаГрадиента);
			
			ДокументРезультат.Вывести(ОбластьСостояние);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СпрятатьВариантПоПодразделениям(Форма)
	
	Для Каждого ТекСтрПолеНастройки Из Форма.ПоляНастроек.ПолучитьЭлементы() Цикл
		
		Если ТекСтрПолеНастройки.Поле <> "ВариантВоронки" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрПолеНастройки.Тип <> "Параметр" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из ТекСтрПолеНастройки.Элементы Цикл
			
			Если ТипЗнч(Форма.Элементы[ТекЭлемент.Значение]) <> Тип("ПолеФормы") Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементПоПодразделениям = Форма.Элементы[ТекЭлемент.Значение].СписокВыбора.НайтиПоЗначению("ПоПодразделениям");
			Если ЭлементПоПодразделениям <> Неопределено Тогда
				Форма.Элементы[ТекЭлемент.Значение].СписокВыбора.Удалить(ЭлементПоПодразделениям);
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьПолеНастройки(ПоляНастроек, Тип, Поле, ТипЗначения, Заголовок, ВидЭлемента)
	
	Результат = ПоляНастроек.ПолучитьЭлементы().Добавить();
	Результат.Тип = Тип;
	Результат.Поле = Поле;
	Результат.ТипЗначения = ТипЗначения;
	Результат.Заголовок = Заголовок;
	Результат.ВидЭлемента = ВидЭлемента;
	Результат.НестандартныйОбработчик = Истина;
	Результат.Реквизиты = Новый Структура;
	Результат.Элементы = Новый Структура;
	Результат.ДополнительныеПараметры = Новый Структура;
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОписаниеРеквизита(Знач ДобавляемыеРеквизиты, Знач ИмяРеквизита, Знач ЗаголовокРеквизита, Знач ТипЗначения, Знач СтрПоляНастроек, Знач ИменаРеквизитов)
	
	Если ИменаРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипЗначения,, ЗаголовокРеквизита));
	КонецЕсли;
	
	СтрПоляНастроек.Реквизиты.Вставить(ИмяРеквизита, ТипЗначения.ПривестиЗначение());
	СтрПоляНастроек.Элементы.Вставить(ИмяРеквизита, ИмяРеквизита);

КонецПроцедуры

Процедура ДобавитьФлажок(Знач ИмяРеквизита, Знач СтрПоляНастроек, Знач Форма)
	
	Элемент = Форма.Элементы.Найти(ИмяРеквизита);
	Если НЕ Элемент=Неопределено Тогда
		Форма.Элементы.Удалить(Элемент);
	КонецЕсли;
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Форма.Элементы[СтрПоляНастроек.ИмяГруппы]);
	Элемент.Вид = ВидПоляФормы.ПолеФлажка;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.ЦветРамки = ЦветаСтиля.НедоступныеДанныеЦвет;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
	Форма[ИмяРеквизита] = СтрПоляНастроек.Реквизиты[ИмяРеквизита];

КонецПроцедуры

Процедура ДобавитьПолеВвода(Знач ИмяРеквизита, Знач ПодсказкаВвода, Знач СтрПоляНастроек, Знач Форма)
	
	Элемент = Форма.Элементы.Найти(ИмяРеквизита);
	Если НЕ Элемент=Неопределено Тогда
		Форма.Элементы.Удалить(Элемент);
	КонецЕсли;
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Форма.Элементы[СтрПоляНастроек.ИмяГруппы]);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.ПодсказкаВвода = ПодсказкаВвода;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.ЦветРамки = ЦветаСтиля.НедоступныеДанныеЦвет;
	Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ФильтрНачалоВыбора");
	Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ФильтрОбработкаВыбора");
	Форма[ИмяРеквизита] = СтрПоляНастроек.Реквизиты[ИмяРеквизита];

КонецПроцедуры

Процедура ИзменитьОтбор(ИмяПоля, Значение, НастройкиСКД)
	
	ПолеКД = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Отбор = ОтчетыУНФКлиентСервер.НайтиПолеРекурсивно(ПолеКД, НастройкиСКД.Отбор.Элементы);
	Если Отбор = Неопределено И НЕ Значение = Неопределено Тогда
		Отбор = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = ПолеКД;
		Отбор.Использование = Истина;
	ИначеЕсли НЕ Отбор=Неопределено И Значение=Неопределено Тогда
		Отбор.Использование = Ложь;
	КонецЕсли;
	Если НЕ Значение=Неопределено Тогда
		Отбор.ВидСравнения = ?(ТипЗнч(Значение)=Тип("СписокЗначений"), ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.Равно);
		Отбор.ПравоеЗначение = Значение;
		Отбор.Использование = Истина;
		Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
КонецПроцедуры

Функция НеУстановленыОбязательныеФильтры(НастройкиКД, ДокументРезультат, МакетОтчета)
	
	ВариантВоронки = Отчеты.ВоронкаПродаж.ВариантВоронки(НастройкиКД);
	
	ПолеДляОбязательногоФильтра = ОбязательныйФильтрПолеКомпоновкиДанных(ВариантВоронки);
	Если ПолеДляОбязательногоФильтра = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из НастройкиКД.Отбор.Элементы Цикл
		
		Если ТекЭлемент.ЛевоеЗначение = ПолеДляОбязательногоФильтра
			И ТекЭлемент.Использование Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьТребуетсяФильтр = МакетОтчета.ПолучитьОбласть("СтрокаТребуетсяФильтр");
	ОбластьТребуетсяФильтр.Параметры.ТекстСообщения = ТекстСообщенияТребуетсяФильтр(ВариантВоронки, ПолеДляОбязательногоФильтра, НастройкиКД);
	
	ДокументРезультат.Вывести(ОбластьТребуетсяФильтр);
	
	Возврат Истина;
	
КонецФункции

Функция ТекстСообщенияТребуетсяФильтр(ВариантВоронки, ПолеДляОбязательногоФильтра, НастройкиКД)
	
	Если ВариантВоронки = ВариантВоронкиПоПокупателям() И МенееДвухПокупателейВСправочникеКонтрагенты() Тогда
		Возврат НСтр("ru = 'Для формирования воронки по покупателям требуется, чтобы в справочнике ""Контрагенты"" было не менее двух покупателей.'");
	КонецЕсли;
	
	Если ВариантВоронки = ВариантВоронкиПоМенеджерам() И МенееДвухЭлементовВСправочникеСотрудники() Тогда
		Возврат НСтр("ru = 'Для формирования воронки по менеджерам требуется, чтобы в справочнике ""Сотрудники"" было не менее двух элементов.'");
	КонецЕсли;
	
	Если ВариантВоронки = ВариантВоронкиПоПодразделениям() И МенееДвухПодразделенийВСправочникеСтруктурныеЕдиницы() Тогда
		Возврат НСтр("ru = 'Для формирования воронки по подразделениям требуется, чтобы в справочнике ""Подразделения"" было не менее двух элементов.'");
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = 'Для формирования воронки %1 установите фильтр %2.'"),
	ПредставлениеВариантаВоронки(ВариантВоронки, НастройкиКД),
	НастройкиКД.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеДляОбязательногоФильтра).Заголовок);
	
КонецФункции

Функция ПредставлениеВариантаВоронки(ВариантВоронки, НастройкиКД)
	
	ВариантыВоронки = НастройкиКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(
	Новый ПараметрКомпоновкиДанных("ВариантВоронки")).ДоступныеЗначения;
	
	Возврат НРег(ВариантыВоронки.НайтиПоЗначению(ВариантВоронки).Представление);
	
КонецФункции

Функция МенееДвухПокупателейВСправочникеКонтрагенты()
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Покупатель");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() < 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция МенееДвухЭлементовВСправочникеСотрудники()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() < 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция МенееДвухПодразделенийВСправочникеСтруктурныеЕдиницы()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() < 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОбязательныйФильтрПолеКомпоновкиДанных(ВариантВоронки)
	
	Результат = Новый Соответствие;
	Результат[ВариантВоронкиПоПокупателям()] = Новый ПолеКомпоновкиДанных("Контрагент");
	Результат[ВариантВоронкиПоМенеджерам()] = Новый ПолеКомпоновкиДанных("Ответственный");
	Результат[ВариантВоронкиПоПодразделениям()] = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиницаПродажи");
	
	Возврат Результат[ВариантВоронки];
	
КонецФункции

Функция ПредставлениеГруппировки(ВариантВоронки, Выборка)
	
	КомпонентыПредставления = Новый Массив;
	
	Если ВариантВоронки = ВариантВоронкиПоПокупателям() Тогда
		ЗаголовокПоля = НСтр("ru = 'Покупатель'");
	КонецЕсли;
	
	Если ВариантВоронки = ВариантВоронкиПоМенеджерам() Тогда
		ЗаголовокПоля = НСтр("ru = 'Менеджер'");
	КонецЕсли;
	
	Если ВариантВоронки = ВариантВоронкиПоПодразделениям() Тогда
		ЗаголовокПоля = НСтр("ru = 'Подразделение'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаголовокПоля) Тогда
		КомпонентыПредставления.Добавить(СтрШаблон("%1: %2", ЗаголовокПоля, Выборка.ПолеГруппировки));
	КонецЕсли;
	
	КомпонентыПредставления.Добавить(ПредставлениеВидЗаказа(Выборка.ВидЗаказа));
	
	Возврат СтрСоединить(КомпонентыПредставления, ", ");
	
КонецФункции

Функция ВариантВоронкиПоПокупателям()
	
	Возврат "ПоПокупателям"; // Не локализуется
	
КонецФункции

Функция ВариантВоронкиПоМенеджерам()
	
	Возврат "ПоМенеджерам"; // Не локализуется
	
КонецФункции

Функция ВариантВоронкиПоПодразделениям()
	
	Возврат "ПоПодразделениям"; // Не локализуется
	
КонецФункции

Функция ПредставлениеВидЗаказа(ВидЗаказа)
	
	Если ТипЗнч(ВидЗаказа) = Тип("СправочникСсылка.ВидыЗаказовПокупателей") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			Возврат  СтрШаблон("%1: %2", ТипЗнч(ВидЗаказа), ВидЗаказа);
		Иначе
			Возврат НСтр("ru = 'Заказы покупателей'");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВидЗаказа) = Тип("СправочникСсылка.ВидыЗаказНарядов") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов") Тогда
			Возврат  СтрШаблон("%1: %2", ТипЗнч(ВидЗаказа), ВидЗаказа);
		Иначе
			Возврат НСтр("ru = 'Заказ-наряды'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ДанныеПоПотерям(Знач ТаблицаПотерь)
	
	Результат = Новый Соответствие;
	
	Для Каждого ТекСтр Из ТаблицаПотерь Цикл
		
		Если Результат[ТекСтр.ПолеГруппировки] = Неопределено Тогда
			Результат[ТекСтр.ПолеГруппировки] = Новый Соответствие;
		КонецЕсли;
		
		Если Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены] = Неопределено Тогда
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены] = Новый Структура;
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Вставить("Потери", 0);
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Вставить("СуммаПотерь", 0);
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Вставить("Причины", Новый Соответствие);
		КонецЕсли;
		
		Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Потери = Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Потери + 1;
		Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].СуммаПотерь = Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].СуммаПотерь + ТекСтр.СуммаДокумента;
		
		Если Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] = Неопределено Тогда
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] = 0;
		КонецЕсли;
		
		Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] = Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЦветаГрадиентаПричин(Знач ТаблицаПотерь)
	
	Результат = Новый Соответствие;
	Диаграмма = Новый Диаграмма;
	
	Для Каждого ТекСтр Из ТаблицаПотерь Цикл
		
		Если Результат[ТекСтр.ПричинаОтмены] = Неопределено Тогда
			Серия = Диаграмма.Серии.Добавить();
			Результат.Вставить(ТекСтр.ПричинаОтмены, Серия.Цвет);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

Функция ПредставлениеПроцентов(Проценты, ОтображатьЗаголовок = Истина)
	
	Если ТипЗнч(Проценты) <> Тип("Число") Тогда
		Возврат "";
	КонецЕсли;
	
	Если Окр(Проценты) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Лев("████████████████████", Проценты * 0.2)
	+ Символы.НПП
	+ ?(ОтображатьЗаголовок, Формат(Проценты, "ЧЦ=3; ЧН=") + "%", "");
	
КонецФункции

Процедура ЗаполнитьПотери(Знач ОбластьСостояние, Знач ВыборкаВоронкаПродажСостояние, Знач ДанныеПоПотерям, Знач КоличествоСостоянийПоВидуЗаказа, Знач ЦветаГрадиента)
	
	Если Не ЗначениеЗаполнено(КоличествоСостоянийПоВидуЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоПотерям[ВыборкаВоронкаПродажСостояние.ПолеГруппировки] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПотериПоВидуЗаказаИСостоянию = ДанныеПоПотерям[ВыборкаВоронкаПродажСостояние.ПолеГруппировки][ВыборкаВоронкаПродажСостояние.Состояние];
	Если ПотериПоВидуЗаказаИСостоянию = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиГрадиента = Новый ТаблицаЗначений;
	ОбластиГрадиента.Колонки.Добавить("Причина", Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказа"));
	ОбластиГрадиента.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ОбластиГрадиента.Колонки.Добавить("ПриведенноеКоличество", Новый ОписаниеТипов("Число"));
	
	ПустаяОбластьГрадиента = ОбластиГрадиента.Добавить();
	ПустаяОбластьГрадиента.Количество = КоличествоСостоянийПоВидуЗаказа - ПотериПоВидуЗаказаИСостоянию.Потери;
	
	Для Каждого ТекПричина Из ПотериПоВидуЗаказаИСостоянию.Причины Цикл
		НоваяОбласть = ОбластиГрадиента.Добавить();
		НоваяОбласть.Причина = ТекПричина.Ключ;
		НоваяОбласть.Количество = ТекПричина.Значение;
	КонецЦикла;
	
	Для Каждого ТекПричина Из ОбластиГрадиента Цикл
		ТекПричина.ПриведенноеКоличество = Окр(ТекПричина.Количество / ОбластиГрадиента.Итог("Количество") * КоличествоЯчеекГрадиентаПотерь());
	КонецЦикла;
	
	Если ОбластиГрадиента.Итог("ПриведенноеКоличество") <> КоличествоЯчеекГрадиентаПотерь() Тогда
		СуммаВсехКромеПервой = ОбластиГрадиента.Итог("ПриведенноеКоличество") - ОбластиГрадиента[0].ПриведенноеКоличество;
		ОбластиГрадиента[0].ПриведенноеКоличество = КоличествоЯчеекГрадиентаПотерь() - СуммаВсехКромеПервой;
	КонецЕсли;
	
	ТекПозиция = НачалоОтображенияГрадиентаПотерь();
	
	Для Каждого ТекПричина Из ОбластиГрадиента Цикл
		
		Если ЗначениеЗаполнено(ТекПричина.Причина)
			И ЗначениеЗаполнено(ТекПричина.ПриведенноеКоличество) Тогда
			
			ОбластьПокраски = СтрШаблон(
			"R1C%1:R1C%2",
			Формат(ТекПозиция, "ЧГ="),
			Формат(ТекПозиция + ТекПричина.ПриведенноеКоличество - 1, "ЧГ="));
			
			ОбластьСостояние.Область(ОбластьПокраски).ЦветФона = ЦветаГрадиента[ТекПричина.Причина];
			
		КонецЕсли;
		
		ТекПозиция = ТекПозиция + ТекПричина.ПриведенноеКоличество;
		
	КонецЦикла;
	
	ПроцентПотерь = Окр(ПотериПоВидуЗаказаИСостоянию.Потери / КоличествоСостоянийПоВидуЗаказа * 100);
	
	ОбластьСостояние.Параметры.Потери = СтрШаблон("%1 (%2%%)",
	ПотериПоВидуЗаказаИСостоянию.Потери,
	ПроцентПотерь);
	
	ОбластьСостояние.Параметры.СуммаПотерь = ПотериПоВидуЗаказаИСостоянию.СуммаПотерь;
	
КонецПроцедуры

Процедура ВывестиЛегендуПотерь(Знач ДокументРезультат, Знач МакетОтчета, Знач ЦветаГрадиента)
	
	Если Не ЗначениеЗаполнено(ЦветаГрадиента) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Вывести(МакетОтчета.ПолучитьОбласть("Легенда"));
	
	Для Каждого ТекЦвет Из ЦветаГрадиента Цикл
		
		ОбластьПричина = МакетОтчета.ПолучитьОбласть("СтрокаПричина");
		ОбластьПричина.Параметры.ПричинаОтмены = ТекЦвет.Ключ;
		ОбластьПричина.Область("R1C8:R1C12").ЦветФона = ТекЦвет.Значение;
		
		ДокументРезультат.Вывести(ОбластьПричина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НачалоОтображенияГрадиентаПотерь()
	
	Возврат 7;
	
КонецФункции

Функция КоличествоЯчеекГрадиентаПотерь()
	
	Возврат 50;
	
КонецФункции

Функция ИдентификаторЭлементаРасшифровки(ДанныеРасшифровки, Выборка, ЭтоПотери)
	
	ЗначенияПолей = Новый ЗначенияПолейРасшифровкиКомпоновкиДанных;
	
	ЗначениеПоле = ЗначенияПолей.Добавить();
	ЗначениеПоле.Поле = "СуммаДокумента";
	
	ЗначениеПолеГруппировка = ЗначенияПолей.Добавить();
	ЗначениеПолеГруппировка.Поле = "ПолеГруппировки";
	ЗначениеПолеГруппировка.Значение = Выборка.ПолеГруппировки;
	
	ЗначениеВидЗаказа = ЗначенияПолей.Добавить();
	ЗначениеВидЗаказа.Поле = "ВидЗаказа";
	ЗначениеВидЗаказа.Значение = Выборка.ВидЗаказа;
	
	ЗначениеСостояние = ЗначенияПолей.Добавить();
	ЗначениеСостояние.Поле = "Состояние";
	ЗначениеСостояние.Значение = Выборка.Состояние;
	
	ЗначениеЭтоПотери = ЗначенияПолей.Добавить();
	ЗначениеЭтоПотери.Поле = "ЭтоПотери";
	ЗначениеЭтоПотери.Значение = ЭтоПотери;
	
	ЭлементРасшифровки = ДанныеРасшифровки.Элементы.Добавить(Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля"),, ЗначенияПолей);
	ЭлементРасшифровки.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать;
	
	Возврат ЭлементРасшифровки.Идентификатор;
	
КонецФункции

#КонецОбласти

ЭтоОтчетУНФ = Истина;

#КонецЕсли