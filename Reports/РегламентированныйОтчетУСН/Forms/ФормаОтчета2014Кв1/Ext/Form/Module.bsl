&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.НаименованиеОтчета = Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7);
	СтруктураРеквизитовФормы.НаименованиеФормыОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета"));
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2014Кв1";
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхРаздел11  = Новый Структура;
	СтруктураДанныхРаздел12  = Новый Структура;
	СтруктураДанныхРаздел21  = Новый Структура;
	СтруктураДанныхРаздел22  = Новый Структура;
	СтруктураДанныхРаздел3   = Новый Структура;
	
	СтруктураРеквизитовФормы.мИдГруппы = "П0000300001";
	
	КолИсхСтрокИдГруппы = 1;
	КолКолонокИдГруппы  = 7;
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы, СтруктураРеквизитовФормы.мИдГруппы);
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы, КолИсхСтрокИдГруппы);

	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы, КолКолонокИдГруппы);
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураМногостраничныхРазделов  = Новый Структура;
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "25/05/2015";
	
	СтруктураРеквизитовФормы.мКодОтчета = "1152017";
	
	ВариантыФорматовВыгрузки = Новый СписокЗначений;
	ВариантыФорматовВыгрузки.Добавить("СхемаВыгрузки504", "Формат 5.04", Истина);
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(
		СтруктураРеквизитовФормы.НаименованиеФормыОтчета + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
		= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически
		= Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить(
	"ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить(
	"ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить(
	"ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияОтчета");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета");
	СтруктураРеквизитовФормы.Вставить("НаименованиеФормыОтчета");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("МестоПостановкиНаУчетИзменено", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("ИПИспользуетТрудНаемныхРаботников");
	СтруктураРеквизитовФормы.Вставить("ОпределятьТрудНаемныхРабочих");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ВПрограммеИзмененаОрганизация", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтавкаУСНДоИзменения");
	СтруктураРеквизитовФормы.Вставить("ЭтоПлательщикТорговогоСбора");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");	
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	НомерКорректировки = 0;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		СкрытьЛистыПоОбъектуНалогообложения();
		
		СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
		СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
		
		Модифицированность = Истина;
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			ВосстановленнаяОрганизация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	СтруктураРеквизитовФормы.ОпределятьТрудНаемныхРабочих = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	СтруктураРеквизитовФормы.ИПИспользуетТрудНаемныхРаботников = РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(СтруктураРеквизитовФормы.Организация);
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.СтавкаУСНДоИзменения = 6;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		ИсходныйГод = СтруктураДанныхТитульный.ОтчетГод;
		ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
		Если ИсходныйГод <> ОтчетныйГод ИЛИ СтруктураРеквизитовФормы.Организация <> ВосстановленнаяОрганизация Тогда
			ОбновитьНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	И НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма))
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			// Для нового док-та установим возведенный флаг проверки соотношений.
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
		КонецЕсли;
		
		ЗаполнитьПустыеСтруктурыДанных();
		ЗаполнитьСведенияОбОрганизации();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьПодменюПечать(ЭтаФорма);
		УстановитьНадписиНаТитульномЛисте();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьАвтоНаСервере();
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПодменюПечать(Форма)
	
	ПечатьPDF417Разрешена = Истина;
	
	СтавкаНалога = 0;
	
	Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2015 Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
			СтавкаНалога = Форма.ТабличныйДокумент.Области.П000210012003.Значение;
		Иначе
			Форма.СтруктураДанныхРаздел21.Свойство("П000210012003", СтавкаНалога);
		КонецЕсли;
		
		Если СтавкаНалога < 6 Тогда
			ПечатьPDF417Разрешена = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПечатьPDF417Разрешена Тогда
		
		Форма.СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Истина;
		
		Форма.Элементы.ПоказатьСДвухмернымШтрихкодомPDF417.Видимость = Истина;
		
	Иначе
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2015 И СтавкаНалога < 6 Тогда
			Форма.СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Истина;
		КонецЕсли;
		
		Форма.СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Ложь;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(Форма);
	
	Если НЕ ПечатьPDF417Разрешена Тогда
		
		Форма.Элементы.ПоказатьСДвухмернымШтрихкодомPDF417.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьЛистыПоОбъектуНалогообложения()
	
	Если ПрименяетсяУСН(ЭтаФорма) Тогда
		
		ВидОбъектаНалогообложения = КодВидаОбъектаНалогообложения(ЭтаФорма);
		
		Если ВидОбъектаНалогообложения = 1 Тогда
			
			НастройкиСтраницыРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				мДеревоВыбранныхСтраниц.ПолучитьЭлементы(), "ИмяСтраницы", "Раздел12");
			Если НастройкиСтраницыРаздела <> Неопределено Тогда
				НастройкиСтраницыРаздела.ВыводНаПечать    = 0;
				НастройкиСтраницыРаздела.ПоказатьСтраницу = 0;
			КонецЕсли;
			
			НастройкиСтраницыРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				мДеревоВыбранныхСтраниц.ПолучитьЭлементы(), "ИмяСтраницы", "Раздел22");
			Если НастройкиСтраницыРаздела <> Неопределено Тогда
				НастройкиСтраницыРаздела.ВыводНаПечать    = 0;
				НастройкиСтраницыРаздела.ПоказатьСтраницу = 0;
			КонецЕсли;
			
			КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
			СформироватьДеревоРазделовОтчетаНаСервере();
			
		ИначеЕсли ВидОбъектаНалогообложения = 2 Тогда
			
			НастройкиСтраницыРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				мДеревоВыбранныхСтраниц.ПолучитьЭлементы(), "ИмяСтраницы", "Раздел11");
			Если НастройкиСтраницыРаздела <> Неопределено Тогда
				НастройкиСтраницыРаздела.ВыводНаПечать    = 0;
				НастройкиСтраницыРаздела.ПоказатьСтраницу = 0;
			КонецЕсли;
			
			НастройкиСтраницыРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				мДеревоВыбранныхСтраниц.ПолучитьЭлементы(), "ИмяСтраницы", "Раздел21");
			Если НастройкиСтраницыРаздела <> Неопределено Тогда
				НастройкиСтраницыРаздела.ВыводНаПечать    = 0;
				НастройкиСтраницыРаздела.ПоказатьСтраницу = 0;
			КонецЕсли;
			
			КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
			СформироватьДеревоРазделовОтчетаНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписиНаТитульномЛисте()
	
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ТабличныйДокумент.Области.НадписьИзменениеМестаПостановкиНаУчет.Текст
		= "Место постановки на учет менялось в " + ОтчетныйГод + " году";
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2015 Тогда
		СтавкаНалога = Неопределено;
		Если СтруктураДанныхРаздел21.Свойство("П000210012003", СтавкаНалога) Тогда
			ТабличныйДокумент.Области.ТекстПриказа.Текст = "Приложение № 1" + Символы.ПС
				+ "к приказу ФНС России" + Символы.ПС + "от ""04"" июля 2014 г. № ММВ-7-3/352@";
			Если СтавкаНалога < 6 Тогда
				ТабличныйДокумент.Области.ТекстПриказа.Текст
					= ТабличныйДокумент.Области.ТекстПриказа.Текст + Символы.ПС
					+ "(в редакции письма ФНС России" + Символы.ПС
					+ "от ""20"" мая 2015 г. № ГД-4-3/8533@)";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
				
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// Создаем исходную структуру многострочных разделов.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			СтруктураГруппы.Добавить();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета()
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел11";
	СтрокаУровня1.Представление            = "Раздел 1.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел12";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел21";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел22";
	СтрокаУровня1.Представление            = "Раздел 2.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел11";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел12";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел21";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел22";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет("СпискиВыбора2014Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	// Титульный.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(
		СвойстваПоказателей, "Период", 2, , "Выбор кода налогового периода", КоллекцияСписковВыбора["КодыНалоговыхПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(
		СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["КодыПоМестуНахождения"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(
		СвойстваПоказателей, "КодФормыРеорганизации", 1, , "Выбор кода формы реорганизации, ликвидации", КоллекцияСписковВыбора["КодыФормыРеорганизации"]);
	
	// Раздел 2.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000210010203", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщика"]);
	
	// Раздел 3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(
		СвойстваПоказателей, "П000030000101", 3, , "Выбор кода вида поступления", КоллекцияСписковВыбора["КодыВидовПоступления"]);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если ЭлементСтруктуры.Ключ = "П0000300001"
				И СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Свойство("ИНН1_1") Тогда
				
				// Случай перехода с 2.0 на 3.0.
				
				НайденноеЗначение = "П0000300001";
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				ПоказателиРаздела3 = ПоказателиОтчета.ПолеТабличногоДокументаРаздел3;
				Для НомСтроки = 0 По ЭтаФорма[НайденноеЗначение].Количество() - 1 Цикл
					НомСтроки_ = Формат(НомСтроки + 1, "ЧГ=0");
					Для НомГрафы = 1 По 7 Цикл
						ЭтаФорма[НайденноеЗначение][НомСтроки]["П00003000010" + НомГрафы]
						= ПоказателиРаздела3["П00003000010" + НомГрафы + "_" + НомСтроки_];
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			мСтруктураВариантыЗаполнения.Очистить();
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Свойство("ЭтоПлательщикТорговогоСбора", СтруктураРеквизитовФормы.ЭтоПлательщикТорговогоСбора);
	Если СтруктураРеквизитовФормы.ЭтоПлательщикТорговогоСбора = Неопределено Тогда
		СтруктураРеквизитовФормы.ЭтоПлательщикТорговогоСбора
			= РегламентированнаяОтчетность.ПлательщикТорговогоСбораЗаПериод(СтруктураРеквизитовФормы.Организация,
			НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, - 12)),
			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = 
		?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтруктураДанныхРаздел21.Свойство("П000210012003") Тогда
		СтруктураДанныхРаздел21.Вставить("П000210012003", 6);
	КонецЕсли;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	
	ЕдиницаИзмерения = Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	Если ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоляТаблДокумента		= СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// Определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам.
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьФорматПоказателей(Форма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	Если СокрЛП(ТабличныйДокумент.Области.Период.Значение) = "" ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		ТабличныйДокумент.Области.Период.Значение = "34";
	КонецЕсли;
	
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ТабличныйДокумент.Области.ОтчетГод.Значение = ОтчетныйГод;
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		
		СтрокаСведений = "НаимЮЛПол";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		НаимОрганизации = "";
		СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
		
		Возврат СокрЛП(НаимОрганизации);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ИзмененаДатаПодписи = Ложь)
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКАТО, ОКТМО";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	Если НЕ ИзмененаДатаПодписи Тогда
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		ТабличныйДокумент.Области["ИНН"].Значение = ИНН;
		
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		ТабличныйДокумент.Области["КПП"].Значение = КПП;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = КодНО;
		
		ПоМесту = "   ";
		Если СведенияОбОрганизации.ТипНП = 1 Тогда
			ПоМесту = "210";
		ИначеЕсли СведенияОбОрганизации.ТипНП = 3 Тогда
			ПоМесту = "120";
		КонецЕсли;
		
		ТабличныйДокумент.Области["ПоМесту"].Значение = ПоМесту;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
		
		ТабличныйДокумент.Области.НаимОрг.Значение = НаименованиеОрганизации;
		
		ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
				
		ЗаполнитьСведенияОПодписантах();
		
	КонецЕсли;
	
	Если НЕ ТабличныйДокумент.Области.Найти("ОКВЭД") = Неопределено Тогда
	
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 	 СтруктураРеквизитовФормы,
																	 	 ТабличныйДокумент.Области.ОКВЭД.Значение);
																		 
	КонецЕсли;																	 
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхРаздел11.П000110001003)
		ИЛИ СтруктураРеквизитовФормы.ВПрограммеИзмененаОрганизация Тогда
		СтруктураДанныхРаздел11.Вставить("П000110001003", СокрЛП(СведенияОбОрганизации.ОКТМО));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхРаздел12.П000120001003)
		ИЛИ СтруктураРеквизитовФормы.ВПрограммеИзмененаОрганизация Тогда
		СтруктураДанныхРаздел12.Вставить("П000120001003", СокрЛП(СведенияОбОрганизации.ОКТМО));
	КонецЕсли;
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2015 Тогда
		
		СтруктураДанныхРаздел21.Вставить("П000210012003", СтавкаНалогаУСН("Раздел21",
			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		
		ИзмененитьФормуПриИзмененииСтавки(ЭтаФорма,
			СтруктураДанныхРаздел21.П000210012003, СтруктураРеквизитовФормы.СтавкаУСНДоИзменения);
		
	КонецЕсли;
	
	СтруктураДанныхРаздел22.Вставить("П000220026003", СтавкаНалогаУСН("Раздел22",
		КонецДня(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -9))));
	СтруктураДанныхРаздел22.Вставить("П000220026103", СтавкаНалогаУСН("Раздел22",
		КонецДня(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -6))));
	СтруктураДанныхРаздел22.Вставить("П000220026203", СтавкаНалогаУСН("Раздел22",
		КонецДня(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -3))));
	СтруктураДанныхРаздел22.Вставить("П000220026303", СтавкаНалогаУСН("Раздел22",
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	СтруктураРеквизитовФормы.ЭтоПлательщикТорговогоСбора
		= РегламентированнаяОтчетность.ПлательщикТорговогоСбораЗаПериод(СтруктураРеквизитовФормы.Организация,
		НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, - 12)),
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	// Выясним, есть ли представитель.
	КодНО = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "НалоговыйОрган");
	КПП   = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП");
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант 							 = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 				 = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;
	
	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ТабличныйДокумент";
		
		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
		
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		
		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					// В многострочном блоке встречаются строки, которые не должны быть закрашены в стандартный зеленый цвет.
					
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрименяетсяУСН(Форма)
	
	Если (Форма.СтруктураРеквизитовФормы.Организация = Неопределено)
	 ИЛИ (Форма.СтруктураРеквизитовФормы.Организация
		= РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат 0;
	КонецЕсли;

	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "ПрименяетсяУСН");
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Форма.СтруктураРеквизитовФормы.Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, Сведения);
	
	ПрименяетсяУСН = Ложь;
	
	ОргСведения.Свойство("ПрименяетсяУСН", ПрименяетсяУСН);
	
	// Учет случая, когда значение ПрименяетсяУСН
	// не заполнено или тип значения отличен от Булево.
	ПрименяетсяУСН = ?(ПрименяетсяУСН = Истина, ПрименяетсяУСН, Ложь);
	
	Возврат ПрименяетсяУСН;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодВидаОбъектаНалогообложения(Форма)
	
	Если (Форма.СтруктураРеквизитовФормы.Организация = Неопределено)
	 ИЛИ (Форма.СтруктураРеквизитовФормы.Организация
		= РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат 0;
	КонецЕсли;

	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "ОбъектНалогообложенияУСН");
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Форма.СтруктураРеквизитовФормы.Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, Сведения);
	
	КодВида = "";
	
	ОргСведения.Свойство("ОбъектНалогообложенияУСН", КодВида);
	Возврат КодВида;
	
КонецФункции

&НаСервере
Функция СтавкаНалогаУСН(ИмяРаздела, ДатаОкончанияПериода)
	
	Если (СтруктураРеквизитовФормы.Организация = Неопределено)
	 ИЛИ (СтруктураРеквизитовФормы.Организация
		= РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Если ИмяРаздела = "Раздел21" Тогда
			Возврат 6;
		ИначеЕсли ИмяРаздела = "Раздел22" Тогда
			Возврат 15;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтавкаНалогаУСН");
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаОкончанияПериода, Сведения);
	
	СтавкаНалогаУСН = 0;
	
	ОргСведения.Свойство("СтавкаНалогаУСН", СтавкаНалогаУСН);
	
	Если ИмяРаздела = "Раздел21" Тогда
		Если ПрименяетсяУСН(ЭтаФорма) И КодВидаОбъектаНалогообложения(ЭтаФорма) = 1 Тогда
			СтавкаНалогаУСН = ?(ТипЗнч(СтавкаНалогаУСН) = Тип("Число"), СтавкаНалогаУСН, 6);
			СтавкаНалогаУСН = Окр(СтавкаНалогаУСН, 0, РежимОкругления.Окр15как20);
		Иначе
			СтавкаНалогаУСН = 6;
		КонецЕсли;
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда
		Если ПрименяетсяУСН(ЭтаФорма) И КодВидаОбъектаНалогообложения(ЭтаФорма) = 2 Тогда
			СтавкаНалогаУСН = ?(ТипЗнч(СтавкаНалогаУСН) = Тип("Число"), СтавкаНалогаУСН, 15);
			СтавкаНалогаУСН = Окр(СтавкаНалогаУСН, 1, РежимОкругления.Окр15как20);
		Иначе
			СтавкаНалогаУСН = 15;
		КонецЕсли;
	Иначе
		СтавкаНалогаУСН = 0;
	КонецЕсли;
	
	Возврат СтавкаНалогаУСН;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru='Изменилась версия формы отчета. Выполняется обновление пользовательских настроек...'");
	Сообщение.Сообщить();
	
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();
	
	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		
		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");
		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");
		Сообщение.Сообщить();			
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
    МакетСоставаПоказателей = Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));

	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
								
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
                				
				МассивВариантовЗаполненияСтраниц.Очистить();
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);

				ЕстьИзменения = Истина;				
				
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						КодПоказателяПоСтруктуре = СтрокаТаблицы.КодПоказателяПоСтруктуре;

						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда	
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Выгрузить();

					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева).
	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки.
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;
		
		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	ЗаполнитьСведенияОПодписантах();
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	СформироватьПодменюПечать(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
		"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
		ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	СформироватьПодменюПечать(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			
			флЗначенияИдентичны = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
				ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли
			
			ИзменитьФорматПоказателей(Этаформа, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	ОткорректироватьСуммыСтраховыхВзносов(ТекущийРазделОтчетаСокрНаим, "П000210010203");
	
	#Если ВебКлиент Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	#Иначе
		РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	#КонецЕсли
	
	ИзменитьФорматПоказателей(Этаформа, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета	= ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны			= ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм				= ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт					= ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		УстановитьФорматВыводаВПоляхВводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 1.1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110002003", "П000210012003;П000210011003;П000210014003;П000210010203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110004003", "П000210012003;П000210011003;П000210014003;П000210011103;П000210014103;П000210010203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110005003", "П000210012003;П000210011003;П000210014003;П000210011103;П000210014103;П000210010203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110007003", "П000210012003;П000210011203;П000210014203;П000210011003;П000210014003;П000210011103;П000210014103;П000210010203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110008003", "П000210012003;П000210011203;П000210014203;П000210011003;П000210014003;П000210011103;П000210014103;П000210010203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110010003", "П000210012003;П000210011303;П000210014303;П000210011203;П000210014203;П000210011003;П000210014003;П000210011103;П000210014103;П000210010203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110011003", "П000210012003;П000210011303;П000210014303;П000210011203;П000210014203;П000210011003;П000210014003;П000210011103;П000210014103;П000210010203");
	
	// Раздел 1.2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000120002003", "П000220021003;П000220022003;П000220026003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000120004003", "П000220021103;П000220022103;П000220026103;П000220021003;П000220022003;П000220026003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000120005003", "П000220021103;П000220022103;П000220026103;П000220021003;П000220022003;П000220026003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000120007003", "П000220021203;П000220022203;П000220026203;П000220021103;П000220022103;П000220026103;П000220021003;П000220022003;П000220026003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000120008003", "П000220021203;П000220022203;П000220026203;П000220021103;П000220022103;П000220026103;П000220021003;П000220022003;П000220026003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000120010003", "П000220021303;П000220022303;П000220023003;П000220026303;П000220021203;П000220022203;П000220026203;П000220021103;П000220022103;П000220026103;П000220021003;П000220022003;П000220026003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000120011003", "П000220021303;П000220022303;П000220023003;П000220026303;П000220021203;П000220022203;П000220026203;П000220021103;П000220022103;П000220026103;П000220021003;П000220022003;П000220026003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000120012003", "П000220021303;П000220022303;П000220023003;П000220026303;П000220021203;П000220022203;П000220026203;П000220021103;П000220022103;П000220026103;П000220021003;П000220022003;П000220026003");
	
	// Раздел 2.1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210013003", "П000210012003;П000210011003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210013103", "П000210012003;П000210011103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210013203", "П000210012003;П000210011203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210013303", "П000210012003;П000210011303");
	
	// Раздел 2.2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220024003", "П000220021003;П000220022003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220024103", "П000220021103;П000220022103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220024203", "П000220021203;П000220022203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220024303", "П000220021303;П000220022303;П000220023003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220025003", "П000220021003;П000220022003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220025103", "П000220021103;П000220022103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220025203", "П000220021203;П000220022203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220025303", "П000220021303;П000220022303");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220027003", "П000220021003;П000220022003;П000220026003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220027103", "П000220021103;П000220022103;П000220026103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220027203", "П000220021203;П000220022203;П000220026203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220027303", "П000220021303;П000220022303;П000220023003;П000220026303");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220028003", "П000220021303;П000220026003;П000220026103;П000220026203;П000220026303");
	
	// Раздел 3.
	// Для вычисления значения в строке многострочной части по колонке 7.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030000107", "П000030000103;П000030000104;П000030000106");
	// Для вычисления "Итого" по колонкам 3, 4, 6, 7 многострочной части.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030000203", "П000030000103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030000204", "П000030000104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030000206", "П000030000106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030000207", "П000030000103;П000030000104;П000030000106");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "")
	
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		ИзменитьФорматПоказателей(Форма, ИмяРаздела);
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел11" Тогда
		
		// Данные раздела 1.1 рассчитываются по данным раздела 2.1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел11" Тогда
			
			Форма.ТабличныйДокумент.Области["П000110002003"].Значение = Форма.СтруктураДанныхРаздел11.П000110002003;
			Форма.ТабличныйДокумент.Области["П000110004003"].Значение = Форма.СтруктураДанныхРаздел11.П000110004003;
			Форма.ТабличныйДокумент.Области["П000110005003"].Значение = Форма.СтруктураДанныхРаздел11.П000110005003;
			Форма.ТабличныйДокумент.Области["П000110007003"].Значение = Форма.СтруктураДанныхРаздел11.П000110007003;
			Форма.ТабличныйДокумент.Области["П000110008003"].Значение = Форма.СтруктураДанныхРаздел11.П000110008003;
			Форма.ТабличныйДокумент.Области["П000110010003"].Значение = Форма.СтруктураДанныхРаздел11.П000110010003;
			Форма.ТабличныйДокумент.Области["П000110011003"].Значение = Форма.СтруктураДанныхРаздел11.П000110011003;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел12" Тогда
		
		// Данные раздела 1.2 рассчитываются по данным раздела 2.2.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12" Тогда
			
			Форма.ТабличныйДокумент.Области["П000120002003"].Значение = Форма.СтруктураДанныхРаздел12.П000120002003;
			Форма.ТабличныйДокумент.Области["П000120004003"].Значение = Форма.СтруктураДанныхРаздел12.П000120004003;
			Форма.ТабличныйДокумент.Области["П000120005003"].Значение = Форма.СтруктураДанныхРаздел12.П000120005003;
			Форма.ТабличныйДокумент.Области["П000120007003"].Значение = Форма.СтруктураДанныхРаздел12.П000120007003;
			Форма.ТабличныйДокумент.Области["П000120008003"].Значение = Форма.СтруктураДанныхРаздел12.П000120008003;
			Форма.ТабличныйДокумент.Области["П000120010003"].Значение = Форма.СтруктураДанныхРаздел12.П000120010003;
			Форма.ТабличныйДокумент.Области["П000120011003"].Значение = Форма.СтруктураДанныхРаздел12.П000120011003;
			Форма.ТабличныйДокумент.Области["П000120012003"].Значение = Форма.СтруктураДанныхРаздел12.П000120012003;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		
		// Расчет данных раздела 2.1.
		
		// Стр. 130  = стр. 110 х стр. 120 / 100.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210013003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				Окр_П000210011003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210011003"].Значение);
				Форма.ТабличныйДокумент.Области["П000210013003"].Значение = Окр_П000210011003
					* Форма.ТабличныйДокумент.Области["П000210012003"].Значение / 100;
			Иначе
				Окр_П000210011003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210011003);
				Форма.СтруктураДанныхРаздел21.П000210013003 = Окр_П000210011003
					* Форма.СтруктураДанныхРаздел21.П000210012003 / 100;
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 131 = стр. 111 х стр. 120 / 100.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210013103, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				Окр_П000210011103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210011103"].Значение);
				Форма.ТабличныйДокумент.Области["П000210013103"].Значение = Окр_П000210011103
					* Форма.ТабличныйДокумент.Области["П000210012003"].Значение / 100;
			Иначе
				Окр_П000210011103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210011103);
				Форма.СтруктураДанныхРаздел21.П000210013103 = Окр_П000210011103
					* Форма.СтруктураДанныхРаздел21.П000210012003 / 100;
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 132 = стр. 112 х стр. 120 / 100.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210013203, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				Окр_П000210011203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210011203"].Значение);
				Форма.ТабличныйДокумент.Области["П000210013203"].Значение = Окр_П000210011203
					* Форма.ТабличныйДокумент.Области["П000210012003"].Значение / 100;
			Иначе
				Окр_П000210011203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210011203);
				Форма.СтруктураДанныхРаздел21.П000210013203 = Окр_П000210011203
					* Форма.СтруктураДанныхРаздел21.П000210012003 / 100;
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 133 = стр. 113 х стр. 120 / 100.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210013303, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				Окр_П000210011303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210011303"].Значение);
				Форма.ТабличныйДокумент.Области["П000210013303"].Значение = Окр_П000210011303
					* Форма.ТабличныйДокумент.Области["П000210012003"].Значение / 100;
			Иначе
				Окр_П000210011303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210011303);
				Форма.СтруктураДанныхРаздел21.П000210013303 = Окр_П000210011303
					* Форма.СтруктураДанныхРаздел21.П000210012003 / 100;
			КонецЕсли;
		КонецЕсли;
		
		// Расчет данных раздела 1.1. по данным раздела 2.1.
		
		// Стр. 020 разд. 1.1 = стр. 130 разд. 2.1 - стр. 140 разд. 2.1.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110002003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				Окр_П000210013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210013003"].Значение);
				Окр_П000210014003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210014003"].Значение);
			Иначе
				Окр_П000210013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210013003);
				Окр_П000210014003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210014003);
			КонецЕсли;
			Форма.СтруктураДанныхРаздел11.П000110002003 = Окр_П000210013003 - Окр_П000210014003;
		КонецЕсли;
		
		// Стр. 040 разд. 1.1 = (стр. 131 - стр. 141) разд. 2.1 - стр. 020 разд. 1.1,
		// если (стр. 131 - стр. 141) разд. 2.1 - стр. 020 разд. 1.1 >= 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110004003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				Окр_П000210013103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210013103"].Значение);
				Окр_П000210014103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210014103"].Значение);
			Иначе
				Окр_П000210013103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210013103);
				Окр_П000210014103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210014103);
			КонецЕсли;
			Окр_П000110002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110002003);
			Форма.СтруктураДанныхРаздел11.П000110004003 = Макс(0,(Окр_П000210013103 - Окр_П000210014103) - Окр_П000110002003);
		КонецЕсли;
			
		// Стр. 050 разд. 1.1 = стр. 020 разд. 1.1 - (стр. 131 - стр. 141) разд. 2.1,
		// если (стр. 131 - стр. 141) разд. 2.1 - стр. 020 разд. 1.1 < 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110005003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				Окр_П000210013103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210013103"].Значение);
				Окр_П000210014103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210014103"].Значение);
			Иначе
				Окр_П000210013103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210013103);
				Окр_П000210014103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210014103);
			КонецЕсли;
			Окр_П000110002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110002003);
			Форма.СтруктураДанныхРаздел11.П000110005003 = - Мин(0, (Окр_П000210013103 - Окр_П000210014103) - Окр_П000110002003);
		КонецЕсли;
		
		// Стр. 070 разд. 1.1 = (стр. 132 - стр. 142) разд. 2.1 - (стр. 020 + стр. 040 - стр. 050) разд. 1.1,
		// если (стр. 132 - стр. 142) разд. 2.1 - (стр. 020 + стр. 040 - стр. 050) разд. 1.1 >= 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110007003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				Окр_П000210013203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210013203"].Значение);
				Окр_П000210014203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210014203"].Значение);
			Иначе
				Окр_П000210013203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210013203);
				Окр_П000210014203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210014203);
			КонецЕсли;
			Окр_П000110002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110002003);
			Окр_П000110004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110004003);
			Окр_П000110005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110005003);
			Форма.СтруктураДанныхРаздел11.П000110007003 = Макс(0,
				(Окр_П000210013203 - Окр_П000210014203) - (Окр_П000110002003 + Окр_П000110004003 - Окр_П000110005003));
		КонецЕсли;
		
		// Стр. 080 разд. 1.1 = (стр. 020 + стр. 040 - стр. 050) разд. 1.1 - (стр. 132 - стр. 142) разд. 2.1,
		// если (стр. 132 - стр. 142) разд. 2.1 - (стр. 020 + стр. 040 - стр. 050) разд. 1.1 < 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110008003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				Окр_П000210013203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210013203"].Значение);
				Окр_П000210014203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210014203"].Значение);
			Иначе
				Окр_П000210013203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210013203);
				Окр_П000210014203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210014203);
			КонецЕсли;
			Окр_П000110002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110002003);
			Окр_П000110004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110004003);
			Окр_П000110005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110005003);
			Форма.СтруктураДанныхРаздел11.П000110008003 = - Мин(0,
				(Окр_П000210013203 - Окр_П000210014203) - (Окр_П000110002003 + Окр_П000110004003 - Окр_П000110005003));
		КонецЕсли;
		
		// Стр. 100 разд. 1.1 = (стр. 133 - стр. 143) разд. 2.1 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) разд. 1.1,
		// если (стр. 133 - стр. 143) разд. 2.1 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) разд. 1.1 >= 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110010003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				Окр_П000210013303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210013303"].Значение);
				Окр_П000210014303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210014303"].Значение);
			Иначе
				Окр_П000210013303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210013303);
				Окр_П000210014303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210014303);
			КонецЕсли;
			Окр_П000110002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110002003);
			Окр_П000110004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110004003);
			Окр_П000110005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110005003);
			Окр_П000110007003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110007003);
			Окр_П000110008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110008003);
			Форма.СтруктураДанныхРаздел11.П000110010003 = Макс(0, (Окр_П000210013303 - Окр_П000210014303)
				- (Окр_П000110002003 + Окр_П000110004003 - Окр_П000110005003 + Окр_П000110007003 - Окр_П000110008003));
		КонецЕсли;
		
		// Стр. 110 разд. 1.1 = (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) разд. 1.1 - (стр. 133 - стр. 143) разд. 2.1,
		// если (стр. 133 - стр. 143) разд. 2.1 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) разд. 1.1 < 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110011003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				Окр_П000210013303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210013303"].Значение);
				Окр_П000210014303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000210014303"].Значение);
			Иначе
				Окр_П000210013303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210013303);
				Окр_П000210014303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел21.П000210014303);
			КонецЕсли;
			Окр_П000110002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110002003);
			Окр_П000110004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110004003);
			Окр_П000110005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110005003);
			Окр_П000110007003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110007003);
			Окр_П000110008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел11.П000110008003);
			Форма.СтруктураДанныхРаздел11.П000110011003 = - Мин(0, (Окр_П000210013303 - Окр_П000210014303)
				- (Окр_П000110002003 + Окр_П000110004003 - Окр_П000110005003 + Окр_П000110007003 - Окр_П000110008003));
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда
		
		// Расчет данных раздела 2.2.
		
		// Стр. 240 = стр. 210 - стр. 220, если стр. 210 - стр. 220 > 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220024003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220021003"].Значение);
				Окр_П000220022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220022003"].Значение);
				Форма.ТабличныйДокумент.Области["П000220024003"].Значение = Макс(0, Окр_П000220021003 - Окр_П000220022003);
			Иначе
				Окр_П000220021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220021003);
				Окр_П000220022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220022003);
				Форма.СтруктураДанныхРаздел22.П000220024003 = Макс(0, Окр_П000220021003 - Окр_П000220022003);
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 241 = стр. 211 - стр. 221, если стр. 211 - стр. 221 > 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220024103, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220021103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220021103"].Значение);
				Окр_П000220022103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220022103"].Значение);
				Форма.ТабличныйДокумент.Области["П000220024103"].Значение = Макс(0, Окр_П000220021103 - Окр_П000220022103);
			Иначе
				Окр_П000220021103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220021103);
				Окр_П000220022103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220022103);
				Форма.СтруктураДанныхРаздел22.П000220024103 = Макс(0, Окр_П000220021103 - Окр_П000220022103);
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 242 = стр. 212 - стр. 222, если стр. 212 - стр. 222 > 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220024203, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220021203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220021203"].Значение);
				Окр_П000220022203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220022203"].Значение);
				Форма.ТабличныйДокумент.Области["П000220024203"].Значение = Макс(0, Окр_П000220021203 - Окр_П000220022203);
			Иначе
				Окр_П000220021203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220021203);
				Окр_П000220022203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220022203);
				Форма.СтруктураДанныхРаздел22.П000220024203 = Макс(0, Окр_П000220021203 - Окр_П000220022203);
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 243 = стр. 213 - стр. 223 - стр. 230, стр. 213 - стр. 223 - стр. 230 > 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220024303, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220021303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220021303"].Значение);
				Окр_П000220022303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220022303"].Значение);
				Окр_П000220023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220023003"].Значение);
				Форма.ТабличныйДокумент.Области["П000220024303"].Значение = Макс(0,
					Окр_П000220021303 - Окр_П000220022303 - Окр_П000220023003);
			Иначе
				Окр_П000220021303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220021303);
				Окр_П000220022303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220022303);
				Окр_П000220023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220023003);
				Форма.СтруктураДанныхРаздел22.П000220024303 = Макс(0,
					Окр_П000220021303 - Окр_П000220022303 - Окр_П000220023003);
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 250 = стр. 220 - стр. 210, если стр. 210 < стр. 220.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220025003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220021003"].Значение);
				Окр_П000220022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220022003"].Значение);
				Форма.ТабличныйДокумент.Области["П000220025003"].Значение = Макс(0, Окр_П000220022003 - Окр_П000220021003);
			Иначе
				Окр_П000220021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220021003);
				Окр_П000220022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220022003);
				Форма.СтруктураДанныхРаздел22.П000220025003 = Макс(0, Окр_П000220022003 - Окр_П000220021003);
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 251 = стр. 221 - стр. 211, если стр. 211 < стр. 221.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220025103, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220021103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220021103"].Значение);
				Окр_П000220022103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220022103"].Значение);
				Форма.ТабличныйДокумент.Области["П000220025103"].Значение = Макс(0, Окр_П000220022103 - Окр_П000220021103);
			Иначе
				Окр_П000220021103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220021103);
				Окр_П000220022103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220022103);
				Форма.СтруктураДанныхРаздел22.П000220025103 = Макс(0, Окр_П000220022103 - Окр_П000220021103);
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 252 = стр. 222 - стр. 212, если стр. 212 < стр. 222.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220025203, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220021203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220021203"].Значение);
				Окр_П000220022203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220022203"].Значение);
				Форма.ТабличныйДокумент.Области["П000220025203"].Значение = Макс(0, Окр_П000220022203 - Окр_П000220021203);
			Иначе
				Окр_П000220021203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220021203);
				Окр_П000220022203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220022203);
				Форма.СтруктураДанныхРаздел22.П000220025203 = Макс(0, Окр_П000220022203 - Окр_П000220021203);
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 253 = стр. 223 - стр. 213, если стр. 213 < стр. 223.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220025303, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220021303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220021303"].Значение);
				Окр_П000220022303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220022303"].Значение);
				Форма.ТабличныйДокумент.Области["П000220025303"].Значение = Макс(0, Окр_П000220022303 - Окр_П000220021303);
			Иначе
				Окр_П000220021303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220021303);
				Окр_П000220022303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220022303);
				Форма.СтруктураДанныхРаздел22.П000220025303 = Макс(0, Окр_П000220022303 - Окр_П000220021303);
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 270 = стр. 240 х стр. 260 / 100.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220027003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220024003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220024003"].Значение);
				СтН_П000220026003 = Форма.ТабличныйДокумент.Области["П000220026003"].Значение;
				Форма.ТабличныйДокумент.Области["П000220027003"].Значение = Окр_П000220024003 * СтН_П000220026003 / 100;
			Иначе
				Окр_П000220024003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220024003);
				СтН_П000220026003 = Форма.СтруктураДанныхРаздел22.П000220026003;
				Форма.СтруктураДанныхРаздел22.П000220027003 = Окр_П000220024003 * СтН_П000220026003 / 100;
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 271 = стр. 241 х стр. 261 / 100.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220027103, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220024103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220024103"].Значение);
				СтН_П000220026103 = Форма.ТабличныйДокумент.Области["П000220026103"].Значение;
				Форма.ТабличныйДокумент.Области["П000220027103"].Значение = Окр_П000220024103 * СтН_П000220026103 / 100;
			Иначе
				Окр_П000220024103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220024103);
				СтН_П000220026103 = Форма.СтруктураДанныхРаздел22.П000220026103;
				Форма.СтруктураДанныхРаздел22.П000220027103 = Окр_П000220024103 * СтН_П000220026103 / 100;
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 272 = стр. 242 х стр. 262 / 100.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220027203, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220024203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220024203"].Значение);
				СтН_П000220026203 = Форма.ТабличныйДокумент.Области["П000220026203"].Значение;
				Форма.ТабличныйДокумент.Области["П000220027203"].Значение = Окр_П000220024203 * СтН_П000220026203 / 100;
			Иначе
				Окр_П000220024203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220024203);
				СтН_П000220026203 = Форма.СтруктураДанныхРаздел22.П000220026203;
				Форма.СтруктураДанныхРаздел22.П000220027203 = Окр_П000220024203 * СтН_П000220026203 / 100;
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 273 = стр. 243 х стр. 263 / 100.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220027303, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220024303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220024303"].Значение);
				СтН_П000220026303 = Форма.ТабличныйДокумент.Области["П000220026303"].Значение;
				Форма.ТабличныйДокумент.Области["П000220027303"].Значение = Окр_П000220024303 * СтН_П000220026303 / 100;
			Иначе
				Окр_П000220024303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220024303);
				СтН_П000220026303 = Форма.СтруктураДанныхРаздел22.П000220026303;
				Форма.СтруктураДанныхРаздел22.П000220027303 = Окр_П000220024303 * СтН_П000220026303 / 100;
			КонецЕсли;
		КонецЕсли;
		
		// Если ИП и (2015 <= отч. год <= 2020) и (строки 260-263 раздела 2.2 = 0), то Стр. 280 = 0.
		// Иначе Стр. 280 = стр. 213 х 1 / 100 (ставка налога 1%).
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220028003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Если Форма.СтруктураРеквизитовФормы.ИП
					И Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2015
					И Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) <= 2020
					И Форма.ТабличныйДокумент.Области["П000220026003"].Значение = 0
					И Форма.ТабличныйДокумент.Области["П000220026103"].Значение = 0
					И Форма.ТабличныйДокумент.Области["П000220026203"].Значение = 0
					И Форма.ТабличныйДокумент.Области["П000220026303"].Значение = 0 Тогда
					Форма.ТабличныйДокумент.Области["П000220028003"].Значение = 0;
				Иначе
					Окр_П000220021303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области["П000220021303"].Значение);
					Форма.ТабличныйДокумент.Области["П000220028003"].Значение = Окр_П000220021303 / 100;
				КонецЕсли;
			Иначе
				Если Форма.СтруктураРеквизитовФормы.ИП
					И Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2015
					И Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) <= 2020
					И Форма.СтруктураДанныхРаздел22.П000220026003 = 0
					И Форма.СтруктураДанныхРаздел22.П000220026103 = 0
					И Форма.СтруктураДанныхРаздел22.П000220026203 = 0
					И Форма.СтруктураДанныхРаздел22.П000220026303 = 0 Тогда
					Форма.СтруктураДанныхРаздел22.П000220028003 = 0;
				Иначе
					Окр_П000220021303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.СтруктураДанныхРаздел22.П000220021303);
					Форма.СтруктураДанныхРаздел22.П000220028003 = Окр_П000220021303 / 100;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Расчет данных раздела 1.2. по данным раздела 2.2.
		
		// Стр. 020 разд. 1.2 = стр. 270 разд. 2.2.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120002003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				П000220027003 = Форма.ТабличныйДокумент.Области["П000220027003"].Значение;
			Иначе
				П000220027003 = Форма.СтруктураДанныхРаздел22.П000220027003;
			КонецЕсли;
			Форма.СтруктураДанныхРаздел12.П000120002003 = П000220027003;
		КонецЕсли;
		
		// Стр. 040 разд. 1.2 = стр. 271 разд. 2.2 - стр. 020 разд. 1.2,
		// если стр. 271 разд. 2.2 - стр. 020 разд. 1.2 >= 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120004003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220027103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220027103"].Значение);
			Иначе
				Окр_П000220027103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220027103);
			КонецЕсли;
			Окр_П000120002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120002003);
			Форма.СтруктураДанныхРаздел12.П000120004003 = Макс(0, Окр_П000220027103 - Окр_П000120002003);
		КонецЕсли;
		
		// Стр. 050 разд. 1.2 = стр. 020 разд. 1.2 - стр. 271 разд. 2.2,
		// если стр. 271 разд. 2.2 - стр. 020 разд. 1.2 < 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120005003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220027103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220027103"].Значение);
			Иначе
				Окр_П000220027103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220027103);
			КонецЕсли;
			Окр_П000120002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120002003);
			Форма.СтруктураДанныхРаздел12.П000120005003 = - Мин(0, Окр_П000220027103 - Окр_П000120002003);
		КонецЕсли;
		
		// Стр. 070 разд. 1.2 = стр. 272 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050) разд. 1.2,
		// если стр. 272 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050) разд. 1.2 >= 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120007003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220027203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220027203"].Значение);
			Иначе
				Окр_П000220027203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220027203);
			КонецЕсли;
			Окр_П000120002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120002003);
			Окр_П000120004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120004003);
			Окр_П000120005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120005003);
			Форма.СтруктураДанныхРаздел12.П000120007003 = Макс(0,
				Окр_П000220027203 - (Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003));
		КонецЕсли;
		
		// Стр. 080 разд. 1.2 = (стр. 020 + стр. 040 - стр. 050) разд. 1.2 - стр. 272 разд. 2.2,
		// если стр. 272 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050) разд. 1.2 < 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120008003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220027203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220027203"].Значение);
			Иначе
				Окр_П000220027203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220027203);
			КонецЕсли;
			Окр_П000120002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120002003);
			Окр_П000120004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120004003);
			Окр_П000120005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120005003);
			Форма.СтруктураДанныхРаздел12.П000120008003 = - Мин(0,
				Окр_П000220027203 - (Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003));
		КонецЕсли;
		
		// Стр. 100 разд. 1.2 = стр. 273 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) разд. 1.2,
		// если стр. 273 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) разд. 1.2 >= 0
		// и стр. 273 разд. 2.2 >= стр. 280 разд. 2.2.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120010003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220027303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220027303"].Значение);
				Окр_П000220028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220028003"].Значение);
			Иначе
				Окр_П000220027303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220027303);
				Окр_П000220028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220028003);
			КонецЕсли;
			Окр_П000120002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120002003);
			Окр_П000120004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120004003);
			Окр_П000120005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120005003);
			Окр_П000120007003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120007003);
			Окр_П000120008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120008003);
			Если Окр_П000220027303 >= Окр_П000220028003 Тогда
				Форма.СтруктураДанныхРаздел12.П000120010003 = Макс(0, Окр_П000220027303
					- (Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003));
			Иначе
				Форма.СтруктураДанныхРаздел12.П000120010003 = 0;
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 110 разд. 1.2 = (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) разд. 1.2 - стр. 273 разд. 2.2,
		// если стр. 273 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) разд. 1.2 < 0
		// и стр. 273 разд. 2.2 >= стр. 280 разд. 2.2
		// или (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) разд. 1.2 - стр. 280 разд. 2.2,
		// если стр. 273 разд. 2.2 < стр. 280 разд. 2.2
		// и (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) разд. 1.2 > стр. 280 разд. 2.2.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120011003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220027303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220027303"].Значение);
				Окр_П000220028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220028003"].Значение);
			Иначе
				Окр_П000220027303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220027303);
				Окр_П000220028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220028003);
			КонецЕсли;
			Окр_П000120002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120002003);
			Окр_П000120004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120004003);
			Окр_П000120005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120005003);
			Окр_П000120007003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120007003);
			Окр_П000120008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120008003);
			Если Окр_П000220027303 >= Окр_П000220028003 Тогда
				Форма.СтруктураДанныхРаздел12.П000120011003 = - Мин(0,
					Окр_П000220027303
					- (Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003));
			Иначе
				Форма.СтруктураДанныхРаздел12.П000120011003 = Макс(0,
					(Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003)
					- Окр_П000220028003);
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 120 разд. 1.2 = стр. 280 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) разд. 1.2,
		// если стр. 280 разд. 2.2 > стр. 273 разд. 2.2
		// и стр. 280 разд. 2.2 > (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) разд. 1.2.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120012003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Окр_П000220027303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220027303"].Значение);
				Окр_П000220028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000220028003"].Значение);
			Иначе
				Окр_П000220027303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220027303);
				Окр_П000220028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел22.П000220028003);
			КонецЕсли;
			Окр_П000120002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120002003);
			Окр_П000120004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120004003);
			Окр_П000120005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120005003);
			Окр_П000120007003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120007003);
			Окр_П000120008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел12.П000120008003);
			Если Окр_П000220028003 > Окр_П000220027303 Тогда
				Форма.СтруктураДанныхРаздел12.П000120012003 = Макс(0, Окр_П000220028003
					- (Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003));
			Иначе
				Форма.СтруктураДанныхРаздел12.П000120012003 = 0;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		// Расчет в графе 7 текущей строки многострочной части раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030000107, Лев(ОбластьИмя, 13)) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				// Расчет в текущей строке многострочной части табличного документа.
				НомСтроки = Сред(ОбластьИмя, 15);
				Окр_П000030000103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000030000103_" + НомСтроки].Значение);
				Окр_П000030000104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000030000104_" + НомСтроки].Значение);
				Окр_П000030000106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000030000106_" + НомСтроки].Значение);
				
				Форма.ТабличныйДокумент.Области["П000030000107_" + НомСтроки].Значение
					= Окр_П000030000103 - Окр_П000030000104 - Окр_П000030000106;
				
			Иначе
				
				Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы, ТаблицаБлока);
				ТаблицаБлока = Форма[ТаблицаБлока];
				
				Для каждого Зап Из ТаблицаБлока Цикл
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
						
						// Расчет во всех строках многострочной части табличного документа.
						НомСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
						Окр_П000030000103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, Форма.ТабличныйДокумент.Области["П000030000103_" + НомСтроки].Значение);
						Окр_П000030000104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, Форма.ТабличныйДокумент.Области["П000030000104_" + НомСтроки].Значение);
						Окр_П000030000106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, Форма.ТабличныйДокумент.Области["П000030000106_" + НомСтроки].Значение);
						
						Форма.ТабличныйДокумент.Области["П000030000107_" + НомСтроки].Значение
							= Окр_П000030000103 - Окр_П000030000104 - Окр_П000030000106;
						
					Иначе
						
						// Расчет во всех записях, хранящихся в реквизите формы.
						Окр_П000030000103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000030000103);
						Окр_П000030000104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000030000104);
						Окр_П000030000106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000030000106);
						
						Зап.П000030000107 = Окр_П000030000103 - Окр_П000030000104 - Окр_П000030000106;
					
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Расчет в графе 3 строки "Итого по отчету" раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030000203, Лев(ОбластьИмя, 13)) > 0) Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка3 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области["П000030000103_" + Ном].Значение);
				Иначе
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТаблицаБлока[Ном - 1].П000030000103);
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				Форма.ТабличныйДокумент.Области.П000030000203.Значение = Колонка3;
			Иначе
				Форма.СтруктураДанныхРаздел3.Вставить("П000030000203", Колонка3);
			КонецЕсли;
		КонецЕсли;
		
		// Расчет в графе 4 строки "Итого по отчету" раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030000204, Лев(ОбластьИмя, 13)) > 0) Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка4 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
					Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области["П000030000104_" + Ном].Значение);
				Иначе
					Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТаблицаБлока[Ном - 1].П000030000104);
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				Форма.ТабличныйДокумент.Области.П000030000204.Значение = Колонка4;
			Иначе
				Форма.СтруктураДанныхРаздел3.Вставить("П000030000204", Колонка4);
			КонецЕсли;
		КонецЕсли;
		
		// Расчет в графе 6 строки "Итого по отчету" раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030000206, Лев(ОбластьИмя, 13)) > 0) Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка6 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
					Колонка6 = Колонка6 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области["П000030000106_" + Ном].Значение);
				Иначе
					Колонка6 = Колонка6 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТаблицаБлока[Ном - 1].П000030000106);
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				Форма.ТабличныйДокумент.Области.П000030000206.Значение = Колонка6;
			Иначе
				Форма.СтруктураДанныхРаздел3.Вставить("П000030000206", Колонка6);
			КонецЕсли;
		КонецЕсли;
		
		// Расчет в графе 7 строки "Итого по отчету" раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030000207, Лев(ОбластьИмя, 13)) > 0) Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка7 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
					Колонка7 = Колонка7 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области["П000030000107_" + Ном].Значение);
				Иначе
					Колонка7 = Колонка7 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТаблицаБлока[Ном - 1].П000030000107);
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				Форма.ТабличныйДокумент.Области.П000030000207.Значение = Колонка7;
			Иначе
				Форма.СтруктураДанныхРаздел3.Вставить("П000030000207", Колонка7);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Расчет(Форма, "Раздел3",   "");
		Расчет(Форма, "Раздел22", "");
		Расчет(Форма, "Раздел21", "");
		Расчет(Форма, "Раздел12", "");
		Расчет(Форма, "Раздел11", "");
		
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		ИзменитьФорматПоказателей(Форма, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткорректироватьСуммыСтраховыхВзносов(ИмяРаздела, ИмяПоказателя)
	
	// Обработка в разделе 2.1 значений в строках 140-143,
	// в зависимости от значений в строках 102, 120 и 130-133.
	Если ИмяРаздела = "Раздел21" Тогда
		ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(ТабличныйДокумент, ТабличныйДокумент.Области[ИмяПоказателя]);
	Иначе
		ПризнакНпл = СтруктураДанныхРаздел21.П000210010203;
		
		Если ПризнакНпл = "1" Тогда
			Если СтруктураРеквизитовФормы.ЭтоПлательщикТорговогоСбора Тогда
				Коэффициент = 1;
				ПарамКоэффициент = "100%";
			Иначе
				Коэффициент = 0.5;
				ПарамКоэффициент = "50%";
			КонецЕсли;
		Иначе // ПризнакНпл = "2"
			Коэффициент = 1;
			ПарамКоэффициент = "100%";
		КонецЕсли;
		
		ПарамКодыНалога  = "";
		ПарамКодыВзносов = "";
		
		МассивНомСтр = Новый Массив;
		
		Для НомСтр = 0 По 3 Цикл
			
			СуммаНалога  = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, СтруктураДанныхРаздел21["П000210013" + НомСтр + "03"]);
			СуммаВзносов = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, СтруктураДанныхРаздел21["П000210014" + НомСтр + "03"]);
			
			МаксимальнаяСуммаНалога = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, СуммаНалога * Коэффициент);
			
			Если СуммаВзносов > МаксимальнаяСуммаНалога Тогда
				
				МассивНомСтр.Добавить(НомСтр);
				
				ПарамКодыНалога  = ПарамКодыНалога  + "13" + НомСтр + ", ";
				ПарамКодыВзносов = ПарамКодыВзносов + "14" + НомСтр + ", ";
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПарамКодыНалога) Тогда
			
			ПарамКодыНалога  = Сред(ПарамКодыНалога,  1, СтрДлина(ПарамКодыНалога)  - 2);
			ПарамКодыВзносов = Сред(ПарамКодыВзносов, 1, СтрДлина(ПарамКодыВзносов) - 2);
			
			ДополнительныеПараметры = Новый Структура(
				"ИмяПоказателя, ИмяРаздела, МассивНомСтр, Коэффициент",
				"", ИмяРаздела, МассивНомСтр, Коэффициент);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВопросСуммаУплаченныхНалоговУменьшаетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ТекстВопроса = НСтр("ru='Сумма страховых взносов, выплаченных работникам пособий по временной
									|нетрудоспособности и платежей (взносов) по договорам добровольного
									|личного страхования (нарастающим итогом) по код%1 стр. %2,
									|предусмотренных пунктом 3.1 статьи 346.21 Кодекса, уменьшает сумму
									|исчисленного налога (авансового платежа по налогу) по код%1 стр. %3
									|более чем на %4. Исправить?'");
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстВопроса, ?(МассивНомСтр.Количество() > 1, "ам", "у"), ПарамКодыВзносов, ПарамКодыНалога, ПарамКоэффициент);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	ОткорректироватьСуммыСтраховыхВзносов(
		СтруктураРеквизитовФормы.НаимТекущегоРаздела, "П000210012003");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	СтавкаНалогаВСтр120ДоОбновления = 0;
	
	СтавкаНалогаВСтр260ДоОбновления = 0;
	СтавкаНалогаВСтр261ДоОбновления = 0;
	СтавкаНалогаВСтр262ДоОбновления = 0;
	СтавкаНалогаВСтр263ДоОбновления = 0;
	
	СтруктураДанныхРаздел21.Свойство("П000210012003", СтавкаНалогаВСтр120ДоОбновления);
	
	СтруктураДанныхРаздел22.Свойство("П000220026003", СтавкаНалогаВСтр260ДоОбновления);
	СтруктураДанныхРаздел22.Свойство("П000220026103", СтавкаНалогаВСтр261ДоОбновления);
	СтруктураДанныхРаздел22.Свойство("П000220026203", СтавкаНалогаВСтр262ДоОбновления);
	СтруктураДанныхРаздел22.Свойство("П000220026303", СтавкаНалогаВСтр263ДоОбновления);
	
	СтруктураРеквизитовФормы.ВПрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
	
	СтруктураРеквизитовФормы.ВПрограммеИзмененаОрганизация = Ложь;
	
	ПрНалогоплательщикаПослеОбновления = "";
	
	СтавкаНалогаВСтр120ПослеОбновления = 0;
	
	СтавкаНалогаВСтр260ПослеОбновления = 0;
	СтавкаНалогаВСтр261ПослеОбновления = 0;
	СтавкаНалогаВСтр262ПослеОбновления = 0;
	СтавкаНалогаВСтр263ПослеОбновления = 0;
	
	НеобходимПересчет = Ложь;
	
	Если СтруктураДанныхРаздел21.Свойство("П000210012003", СтавкаНалогаВСтр120ПослеОбновления) Тогда
		Если СтавкаНалогаВСтр120ДоОбновления <> СтавкаНалогаВСтр120ПослеОбновления Тогда
			НеобходимПересчет = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанныхРаздел22.Свойство("П000220026003", СтавкаНалогаВСтр260ПослеОбновления) Тогда
		Если СтавкаНалогаВСтр260ДоОбновления <> СтавкаНалогаВСтр260ПослеОбновления Тогда
			НеобходимПересчет = Истина;
		КонецЕсли;
	КонецЕсли;
	Если СтруктураДанныхРаздел22.Свойство("П000220026103", СтавкаНалогаВСтр261ПослеОбновления) Тогда
		Если СтавкаНалогаВСтр261ДоОбновления <> СтавкаНалогаВСтр261ПослеОбновления Тогда
			НеобходимПересчет = Истина;
		КонецЕсли;
	КонецЕсли;
	Если СтруктураДанныхРаздел22.Свойство("П000220026203", СтавкаНалогаВСтр262ПослеОбновления) Тогда
		Если СтавкаНалогаВСтр262ДоОбновления <> СтавкаНалогаВСтр262ПослеОбновления Тогда
			НеобходимПересчет = Истина;
		КонецЕсли;
	КонецЕсли;
	Если СтруктураДанныхРаздел22.Свойство("П000220026303", СтавкаНалогаВСтр263ПослеОбновления) Тогда
		Если СтавкаНалогаВСтр263ДоОбновления <> СтавкаНалогаВСтр263ПослеОбновления Тогда
			НеобходимПересчет = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НеобходимПересчет Тогда
		РасчетНаСервере();
	КонецЕсли;
	
	УстановитьНадписиНаТитульномЛисте();
	
КонецПроцедуры

#Область МеханизмДобавленияИУдаленияСтрокМногострочнойЧасти

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		ДобавитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	// Определяем последнюю строку многострочной группы.
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;

	// Область первой ячейки последней строки многострочного раздела.
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// Номера строк исходной области.
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// Номера строк вставляемой области.
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01" Тогда
				ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
			КонецЕсли;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01" Тогда
				ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы.
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// Установим фокус на поле табличн. документа.
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	// Добавляем в структуру многострочной группы новую строку.
	СтруктураГруппы.Добавить();
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// Предварительно обновим структуру многострочных разделов.
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// Номер строки многострочного раздела определим
	// по имени выделенной ячейки.
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// Удаляется добавленная строка.
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + НомУдаляемойСтроки;
		
		// Область первой ячейки удаляемой строки многострочного раздела.
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// Номера строк удаляемой области.
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// Обновим имена ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если НомерГрафы = 1 Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
					КонецЕсли;
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// Обновляем порядковый номер строки.
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							// Обновляем значение элемента таблицы значений.
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Обновляем структуру многострочного раздела.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// Строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк.
		
		// Обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// Обновляем порядковые номера строк, выводимых в табличный документ.
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки            = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// Обновляем порядковый номер строки.
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях.
		// Обновляем экранную форму табличного документа.
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
		
	Расчет(Форма, ТекущаяСтраница);
	
	// Назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае.
	
	// Определяем текущую область таблицы.
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличн. документа.
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДопПараметр = Неопределено;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		ДопПараметр = ТабличныйДокумент.Области["П000210012003"].Значение;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДопПараметр);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		
		Если ДополнительныеПараметры <> Неопределено Тогда
			ТабличныйДокумент.Области["П000210012003"].Значение = ДополнительныеПараметры;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(
			Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость  = Истина;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость  = Ложь;
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		СохрСтавкаУСН = ТабличныйДокумент.Области["П000210012003"].Значение;
	Иначе
		СохрСтавкаУСН = СтруктураДанныхРаздел21.П000210012003;
	КонецЕсли;
	
	СтруктураДанныхРаздел11.Очистить();
	СтруктураДанныхРаздел12.Очистить();
	СтруктураДанныхРаздел21.Очистить();
	СтруктураДанныхРаздел22.Очистить();
	СтруктураДанныхРаздел3.Очистить();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		ТабличныйДокумент.Области["П000210012003"].Значение = СохрСтавкаУСН;
	Иначе
		СтруктураДанныхРаздел21.П000210012003 = СохрСтавкаУСН;
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа.
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области.НалоговыйОрган.Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области.КПП.Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьФорматПоказателей(Форма, НаимРаздела)
	
	Если НаимРаздела <> "Раздел22" Тогда
		Возврат;
	КонецЕсли;
	
	СписокДляИзменения = Новый СписокЗначений; //список показателей с представлением нуля "0" или "-"
	
	Если (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, Форма.ТабличныйДокумент.Области["П000220021303"].Значение)
		- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, Форма.ТабличныйДокумент.Области["П000220022303"].Значение)
		- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, Форма.ТабличныйДокумент.Области["П000220023003"].Значение)) >= 0 Тогда
		СписокДляИзменения.Добавить("П000220024303","0");
	Иначе
		СписокДляИзменения.Добавить("П000220024303","-");
	КонецЕсли;
	
	Для каждого Показатель Из СписокДляИзменения Цикл
		
		КодПоказателя = Показатель.Значение;
		
		ТекущийФормат = Форма.ТабличныйДокумент.Области[КодПоказателя].Формат;
		ПозЧН = СтрНайти(ТекущийФормат,"ЧН=");
		ТекЗначЧН = Сред(ТекущийФормат, ПозЧН, 4);
		НовЗначЧН = Лев(ТекЗначЧН, 3) + Показатель.Представление;
		Форма.ТабличныйДокумент.Области[КодПоказателя].Формат = СтрЗаменить(ТекущийФормат, ТекЗначЧН, НовЗначЧН);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность  = Ложь;
	
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000300001") > 0
	   И СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "УдалитьСтроку") = 0 Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	ИмяЯчейки = Область.Имя;
	
	Если СтрЧислоВхождений(ИмяЯчейки, "ДобавитьСтроку") > 0 Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(ИмяЯчейки, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		УдалитьСтроку("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяЯчейки = "НалоговыйОрган" Тогда
		ОбработкаВыбораИФНС();
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ИмяЯчейки, "ИзменениеМестаПостановкиНаУчет") = 1 Тогда
		Область.Значение = ?(СокрЛП(Область.Значение) = "", "V", "");
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "П000210012003" Тогда
		СтруктураРеквизитовФормы.СтавкаУСНДоИзменения = Область.Значение;
		Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			Возврат;
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		Ставки = Новый СписокЗначений;
		Ставки.Добавить(0);
		Ставки.Добавить(3);
		Ставки.Добавить(6);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаСтавкуНалогаВРазделе21Завершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, Ставки, , Ставки.НайтиПоЗначению(Область.Значение));
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяЯчейки);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаСтавкуНалогаВРазделе21Завершение(Ставка, ДополнительныеПараметры) Экспорт
	
	Если Ставка <> Неопределено Тогда
		ТабличныйДокумент.Области["П000210012003"].Значение = Ставка.Значение;
		ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента("", ТабличныйДокумент.Области["П000210012003"]);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя
		ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
		"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
		ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
		ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя
		ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
				= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяПоказателя = "ОКВЭД" Тогда
		
		Если НЕ ПустаяСтрока(Область.Значение) И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра)'"), Символы.ПС, Символы.ПС);
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяПоказателя = "П000210012003" Тогда
		
		Если ЗначПоказателя > 6 Тогда
			Область.Значение = 6;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Значение ставки налога не может быть больше 6%'");
			Сообщение.Сообщить();
		КонецЕсли;
		
		ИзмененитьФормуПриИзмененииСтавки(ЭтаФорма,
			ЗначПоказателя, СтруктураРеквизитовФормы.СтавкаУСНДоИзменения);
		
	КонецЕсли;
	
	Если ИмяПоказателя = "П000220026003" ИЛИ ИмяПоказателя = "П000220026103"
		ИЛИ ИмяПоказателя = "П000220026203" ИЛИ ИмяПоказателя = "П000220026303" Тогда
		Если ЗначПоказателя < 5 И ЗначПоказателя <> 0 Тогда
			Область.Значение = 5;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Значение ставки налога не может быть меньше 5%'");
			Сообщение.Сообщить();
		ИначеЕсли ЗначПоказателя > 15 Тогда
			Область.Значение = 15;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Значение ставки налога не может быть больше 15%'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если (ИмяПоказателя = "П000110001003"
	  ИЛИ ИмяПоказателя = "П000110003003"
	  ИЛИ ИмяПоказателя = "П000110006003"
	  ИЛИ ИмяПоказателя = "П000110009003"
	  ИЛИ ИмяПоказателя = "П000120001003"
	  ИЛИ ИмяПоказателя = "П000120003003"
	  ИЛИ ИмяПоказателя = "П000120006003"
	  ИЛИ ИмяПоказателя = "П000120009003")
		И ЗначениеЗаполнено(ЗначПоказателя) Тогда
		Область.Значение = СтрЗаменить(СокрЛП(Область.Значение), " ", "");
		ДлинаЗначения = СтрДлина(Область.Значение);
		Если НЕ ДлинаЗначения = 8 И НЕ ДлинаЗначения = 11 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Код ОКТМО должен состоять из 8 или 11 цифр'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000210010203" Тогда
		
		Если НЕ (ЗначПоказателя = "1" ИЛИ ЗначПоказателя = "2") Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В разделе 2.1 задано некорректное значение признака налогоплательщика!%1Допустимы значения 1 или 2'"), Символы.ПС);
			Сообщение.Сообщить();
			
			Если СтруктураРеквизитовФормы.ОпределятьТрудНаемныхРабочих И СтруктураРеквизитовФормы.ИП
				И НЕ СтруктураРеквизитовФормы.ИПИспользуетТрудНаемныхРаботников Тогда
				Область.Значение = "2";
			Иначе
				Область.Значение = "1";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрНайти(ИмяПоказателя, "П000210011") > 0 Тогда
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
	КонецЕсли;
	
	// Обработка в разделе 2.1 значений в строках 140-143,
	// в зависимости от значений в строке 102 и строках 130-133.
	Если ИмяПоказателя = "П000210010203"
		ИЛИ СтрНайти(ИмяПоказателя, "П000210011") > 0
		ИЛИ СтрНайти(ИмяПоказателя, "П000210013") > 0 // случай отключенного авторасчета
		ИЛИ СтрНайти(ИмяПоказателя, "П000210014") > 0
		ИЛИ ИмяПоказателя = "П000210012003" Тогда
		
		Если ИмяПоказателя = "П000210012003" Тогда
			РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
		КонецЕсли;
		
		ПризнакНпл = ТабличныйДокумент.Области.П000210010203.Значение;
		
		Если ПризнакНпл = "1" Тогда
			Если СтруктураРеквизитовФормы.ЭтоПлательщикТорговогоСбора Тогда
				Коэффициент = 1;
				ПарамКоэффициент = "100%";
			Иначе
				Коэффициент = 0.5;
				ПарамКоэффициент = "50%";
			КонецЕсли;
		Иначе // ПризнакНпл = "2"
			Коэффициент = 1;
			ПарамКоэффициент = "100%";
		КонецЕсли;
		
		ПарамКодыНалога  = "";
		ПарамКодыВзносов = "";
		
		МассивНомСтр = Новый Массив;
		
		Для НомСтр = 0 По 3 Цикл
			
			СуммаНалога  = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, ТабличныйДокумент.Области["П000210013" + НомСтр + "03"].Значение);
			СуммаВзносов = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, ТабличныйДокумент.Области["П000210014" + НомСтр + "03"].Значение);
			
			МаксимальнаяСуммаНалога = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, СуммаНалога * Коэффициент);
			
			Если СуммаВзносов > МаксимальнаяСуммаНалога Тогда
				
				МассивНомСтр.Добавить(НомСтр);
				
				ПарамКодыНалога  = ПарамКодыНалога  + "13" + НомСтр + ", ";
				ПарамКодыВзносов = ПарамКодыВзносов + "14" + НомСтр + ", ";
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПарамКодыНалога) Тогда
			
			ПарамКодыНалога  = Сред(ПарамКодыНалога,  1, СтрДлина(ПарамКодыНалога)  - 2);
			ПарамКодыВзносов = Сред(ПарамКодыВзносов, 1, СтрДлина(ПарамКодыВзносов) - 2);
			
			ДополнительныеПараметры = Новый Структура(
				"ИмяПоказателя, ИмяРаздела, МассивНомСтр, Коэффициент",
				ИмяПоказателя, ИмяРаздела, МассивНомСтр, Коэффициент);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВопросСуммаУплаченныхНалоговУменьшаетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ТекстВопроса = НСтр("ru='Сумма страховых взносов, выплаченных работникам пособий по временной
									|нетрудоспособности и платежей (взносов) по договорам добровольного
									|личного страхования (нарастающим итогом) по код%1 стр. %2,
									|предусмотренных пунктом 3.1 статьи 346.21 Кодекса, уменьшает сумму
									|исчисленного налога (авансового платежа по налогу) по код%1 стр. %3
									|более чем на %4. Исправить?'");
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстВопроса, ?(МассивНомСтр.Количество() > 1, "ам", "у"), ПарамКодыВзносов, ПарамКодыНалога, ПарамКоэффициент);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаЗавершение(ИмяПоказателя, ИмяРаздела);
			
		КонецЕсли;
		
	Иначе
		
		ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаЗавершение(ИмяПоказателя, ИмяРаздела);
		
	КонецЕсли;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		ДатаПодписиПриИзмененииНаСервере();
		
	КонецЕсли;
	
	Если ИмяПоказателя = "НомерКорректировки" Тогда
		
		НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
		СтруктураРеквизитовФормы.ВидДокумента = ?(Область.Значение = 0, 0, 1);
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзмененитьФормуПриИзмененииСтавки(Форма, НовоеЗначение, СтароеЗначение)
	
	Если НовоеЗначение < 6 И СтароеЗначение = 6 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для ставки налога отличной от 6% используется форма, рекомендованная письмом ФНС от 20.05.2015 № ГД-4-3/8533@. Внимание! Для этой формы не предусмотрена печать на бланках с двухмерным штрихкодом PDF417.'");
		Сообщение.Сообщить();
	ИначеЕсли НовоеЗначение = 6 И СтароеЗначение < 6 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для ставки налога 6% используется форма, утвержденная приказом ФНС России от 04.07.2014 № ММВ-7-3/352@.'");
		Сообщение.Сообщить();
	КонецЕсли;
	
	Форма.СтруктураРеквизитовФормы.СтавкаУСНДоИзменения = НовоеЗначение;
	
	СформироватьПодменюПечать(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСуммаУплаченныхНалоговУменьшаетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	ИмяРаздела    = ДополнительныеПараметры.ИмяРаздела;
	МассивНомСтр  = ДополнительныеПараметры.МассивНомСтр;
	Коэффициент   = ДополнительныеПараметры.Коэффициент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого НомСтр Из МассивНомСтр Цикл
			Если ИмяРаздела = "Раздел21" Тогда
				ТабличныйДокумент.Области["П000210014" + НомСтр + "03"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
					ТабличныйДокумент.Области["П000210013" + НомСтр + "03"].Значение) * Коэффициент);
			Иначе // вызывается при повторном включении авторасчета в "Настройках"
				СтруктураДанныхРаздел21["П000210014" + НомСтр + "03"]
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
					СтруктураДанныхРаздел21["П000210013" + НомСтр + "03"]) * Коэффициент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел21" Тогда
		ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаЗавершение(ИмяПоказателя, ИмяРаздела);
	Иначе // вызывается при повторном включении авторасчета в "Настройках"
		Расчет(ЭтаФорма, "", "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаЗавершение(ИмяПоказателя, ИмяРаздела)
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	ВключитьПечатьЗаполненногоНеобязательногоРаздела(ИмяРаздела);
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПечатьЗаполненногоНеобязательногоРаздела(ИмяРаздела)
	
	ОбязательныеРазделы = Новый Массив;
	ОбязательныеРазделы.Добавить("Титульный");
	ОбязательныеРазделы.Добавить("Раздел11");
	ОбязательныеРазделы.Добавить("Раздел12");
	ОбязательныеРазделы.Добавить("Раздел21");
	ОбязательныеРазделы.Добавить("Раздел22");
	
	Если ОбязательныеРазделы.Найти(ИмяРаздела) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСтраницыРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		мДеревоВыбранныхСтраниц.ПолучитьЭлементы(), "ИмяСтраницы", ИмяРаздела);
	Если НастройкиСтраницыРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВРазделеОтключенаПечать = (НастройкиСтраницыРаздела.ВыводНаПечать = 0);
	
	Если ВРазделеОтключенаПечать Тогда
		Если РазделЗаполнен(ИмяРаздела) Тогда
			НастройкиСтраницыРаздела.ВыводНаПечать = 1;
		КонецЕсли;
	КонецЕсли;
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
КонецПроцедуры

&НаКлиенте
Функция РазделЗаполнен(ИмяСтраницы)
	
	Если ИмяСтраницы = "Раздел3" Тогда
		
		Возврат ЗаполненРаздел3();
		
	Иначе
		
		Возврат Истина; // остальные разделы считаются всегда заполненными
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЗаполненРаздел3()
	
	ПрефиксПоказателейРаздела = "П00003";
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				ЭтоПоказатель = (СтрНайти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
				Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Для Каждого Показатель Из СтруктураДанныхРаздел21 Цикл
			ЭтоПоказатель = (СтрНайти(Показатель.Ключ, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ЗначениеЗаполнено(Показатель.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПоказательЗаполнен(ОбластьПоказателя)
	
	Если ОбластьПоказателя.СодержитЗначение Тогда
		ЗначениеОбласти = ОбластьПоказателя.Значение;
		ТипЗначенияОбласти = ТипЗнч(ЗначениеОбласти);
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			Возврат (ЗначениеОбласти <> 0);
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			Возврат (НЕ ПустаяСтрока(ЗначениеОбласти));
		Иначе
			Возврат ЗначениеЗаполнено(ЗначениеОбласти);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомерКорректировки) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , ПоказателиОтчета);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
						
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
						
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
						
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
						
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);

	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
		
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ЭтоПлательщикТорговогоСбора", СтруктураРеквизитовФормы.ЭтоПлательщикТорговогоСбора);

	СписокСохранения.Вставить("ВерсияФормы",                  СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлПодсчетСтраниц",             СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Вставить("ФлОтклВыборЗначений",          СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение",               СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена",  СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.ИмяСтраницы = "Раздел21" Тогда
			Если НЕ ЗначениеЗаполнено(ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]["П000210010203"]) Тогда
				Если СтруктураРеквизитовФормы.ОпределятьТрудНаемныхРабочих И СтруктураРеквизитовФормы.ИП
					И НЕ СтруктураРеквизитовФормы.ИПИспользуетТрудНаемныхРаботников Тогда
					ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]["П000210010203"] = "2";
				Иначе
					ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]["П000210010203"] = "1";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт
	
	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
		
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	ПрефиксВНаимМакетов = "ПечатныйБланк2014Кв1_";
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2015 Тогда
		СтавкаНалога = Неопределено;
		Если СтруктураДанныхРаздел21.Свойство("П000210012003", СтавкаНалога) Тогда
			Если СтавкаНалога < 6 Тогда
				ПрефиксВНаимМакетов = ПрефиксВНаимМакетов + "Вспом_";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", ПрефиксВНаимМакетов + "Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел11",  ПрефиксВНаимМакетов + "Раздел11");
	СоответствиеРазделовМакетам.Вставить("Раздел12",  ПрефиксВНаимМакетов + "Раздел12");
	СоответствиеРазделовМакетам.Вставить("Раздел21",  ПрефиксВНаимМакетов + "Раздел21");
	СоответствиеРазделовМакетам.Вставить("Раздел22",  ПрефиксВНаимМакетов + "Раздел22");
	СоответствиеРазделовМакетам.Вставить("Раздел3",   ПрефиксВНаимМакетов + "Раздел3");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		Если Парам1.ИмяСтраницы = "Раздел3" Тогда
			ИсхКолвоСтрокБлока = 9;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			// Определение общего количества листов МЧБ.
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;
			КонецЕсли;
			
			// Заполнение строки имен показателей (для проверки перед переименованием).
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			// Заполнение списка листов МЧБ.
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						// Проверка на вхождение в данную многострочную часть.
						Продолжить;
					КонецЕсли;
					
					// Определение и обрасывание НомерЯчейки.
					ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					// Определение СмысловаяЧасть и ТекущийСчетчик.
					СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					// Окончательная проверка на вхождение в данную многострочную часть.
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						// Очищение происходит после этого цикла.
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					// Подготовка к переименованию.
					// Заполнение списка: значение - область, представление - будущее имя.
					СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
				КонецЦикла;
				
				// Очищение.
				Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				// Переименование.
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
				
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
				
				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЛистМЧБ.ПолеСверху = 5;
				ЛистМЧБ.ПолеСправа = 5;
				ЛистМЧБ.ПолеСнизу  = 5;
				ЛистМЧБ.ПолеСлева  = 5;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					// Выводится не последний лист многострочной серии листов МЧБ.
					// Необходимо обнулить итоговые показатели.
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения.
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		// Особая обработка ФИО на титульном листе.
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// Особая обработка ОКВЭД.
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							// Разделение числа на 2 части.
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Строка(Цел(РезультатПоиска.Значение));
							СтрДообнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							// Разделение областей показателя на 2 части.
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								// На МЧБ нет разделения на целую и дробную части.
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								// Определяем какая часть выводится (целая, дробная или точка).
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится целая часть.
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится дробная часть.
									ПрисвоитьЗначениеОбласти(Область, СтрДообнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									// Выводится точка.
									// Присваивать ничего не будем, но считаем, что область заполненяется корректно.
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					Сообщение.Сообщить();
				КонецЕсли;
			Иначе
				Если ИмяОбласти = "П000210012003" Тогда
					ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.Значение = 0, "0", РезультатПоиска.ЗначениеМЧБ));
				Иначе
					ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
	
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатныеЛисты[0].Значение, СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
	
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, Дополнять_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(Дополнять_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) И Дополнять_ Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;
	
	ТаблДок = ЭтаФорма[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(СтруктураПараметровЛиста.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ИзвлечьСохраненныеПоказателиОтчета()
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ДополнитьСохраненныеПоказателиОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСохраненныеПоказателиОтчета()
	
	Раздел11 = мДанныеОтчета.ПолеТабличногоДокументаРаздел11;
	Раздел11.Вставить("П100110004003", Раздел11["П000110004003"] - Раздел11["П000110005003"]);
	Раздел11.Вставить("П100110007003", Раздел11["П000110007003"] - Раздел11["П000110008003"]);
	Раздел11.Вставить("П100110010003", Раздел11["П000110010003"] - Раздел11["П000110011003"]);
	
	Раздел12 = мДанныеОтчета.ПолеТабличногоДокументаРаздел12;
	Раздел12.Вставить("П100120004003", Раздел12["П000120004003"] - Раздел12["П000120005003"]);
	Раздел12.Вставить("П100120007003", Раздел12["П000120007003"] - Раздел12["П000120008003"]);
	Раздел12.Вставить("П100120010003", Раздел12["П000120010003"] - Раздел12["П000120011003"]);
	
	Раздел21 = мДанныеОтчета.ПолеТабличногоДокументаРаздел21;
	Если НЕ Раздел21.Свойство("П000210012003") Тогда
		Раздел21.Вставить("П000210012003", 6);
	КонецЕсли;
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	Раздел22.Вставить("П100220024003", Раздел22["П000220024003"] - Раздел22["П000220025003"]);
	Раздел22.Вставить("П100220024103", Раздел22["П000220024103"] - Раздел22["П000220025103"]);
	Раздел22.Вставить("П100220024203", Раздел22["П000220024203"] - Раздел22["П000220025203"]);
	Раздел22.Вставить("П100220024303", Раздел22["П000220024303"] - Раздел22["П000220025303"]);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыгрузкиОтчета()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	
	ПараметрыВыгрузки.Вставить("КодНО",   СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр", Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("ОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("Тлф",   СокрЛП(Титульный.ТелОрганизации));
	
	Если ЭтоПБОЮЛ Тогда
		ПараметрыВыгрузки.Вставить("ИННФЛ", СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
		
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
		ПараметрыВыгрузки.Вставить("ФЛФамилия",  ФИО.Фамилия);
		ПараметрыВыгрузки.Вставить("ФЛИмя",      ФИО.Имя);
		ПараметрыВыгрузки.Вставить("ФЛОтчество", ФИО.Отчество);
	Иначе
		// Случай перехода 2.0 -> 3.0.
		Если НЕ Титульный.Свойство("КПП") И Титульный.Свойство("КПП1_1")Тогда
			Титульный.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				Титульный.КПП = СокрЛП(Титульный.КПП) + ?(Титульный["КПП1_" + Ном] = "-", "", Титульный["КПП1_" + Ном]);
				Титульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
		ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
		ПараметрыВыгрузки.Вставить("КППОрг",  СокрЛП(Титульный.КПП));
		
		ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
		ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
		ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ПрПодп", СокрЛП(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПодпНаимДок", СокрЛП(Титульный.ДокУпПред));
	ПараметрыВыгрузки.Вставить("ПодпНаимОрг", СокрЛП(Титульный.ОргУп));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_USN");
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	// Условия выгрузки отдельных ветвей файла электронного представления.
	Раздел11 = мДанныеОтчета.ПолеТабличногоДокументаРаздел11;
	Раздел12 = мДанныеОтчета.ПолеТабличногоДокументаРаздел12;
	
	ЗаполненРаздел11 = ЗаполненРаздел11(Раздел11);
	ЗаполненРаздел12 = ЗаполненРаздел12(Раздел12);
	
	Если ЗаполненРаздел11 И НЕ ЗаполненРаздел12 Тогда
		ВыгружатьРаздел11 = Истина;
		ВыгружатьРаздел12 = Ложь;
	ИначеЕсли НЕ ЗаполненРаздел11 И ЗаполненРаздел12 Тогда
		ВыгружатьРаздел11 = Ложь;
		ВыгружатьРаздел12 = Истина;
	Иначе
		Если ПрименяетсяУСН(ЭтаФорма) Тогда
			ВидОбъектаНалогообложения = КодВидаОбъектаНалогообложения(ЭтаФорма);
			Если ВидОбъектаНалогообложения = 1 Тогда
				ВыгружатьРаздел11 = Истина;
				ВыгружатьРаздел12 = Ложь;
			ИначеЕсли ВидОбъектаНалогообложения = 2 Тогда
				ВыгружатьРаздел11 = Ложь;
				ВыгружатьРаздел12 = Истина;
			Иначе
				ВыгружатьРаздел11 = Ложь;
				ВыгружатьРаздел12 = Ложь;
			КонецЕсли;
		Иначе
			// Попытка получить объекта налогообложения в случае, если в отчетном периоде УСН применялась.
			ВидОбъектаНалогообложения = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
			СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,
			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Если ВидОбъектаНалогообложения = 1 Тогда
				ВыгружатьРаздел11 = Истина;
				ВыгружатьРаздел12 = Ложь;
			ИначеЕсли ВидОбъектаНалогообложения = 2 Тогда
				ВыгружатьРаздел11 = Ложь;
				ВыгружатьРаздел12 = Истина;
			Иначе
				ВыгружатьРаздел11 = Ложь;
				ВыгружатьРаздел12 = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел11", ВыгружатьРаздел11);
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел12", ВыгружатьРаздел12);
	ВыгружатьРаздел21 = ВыгружатьРаздел11;
	ВыгружатьРаздел22 = ВыгружатьРаздел12;
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел21", ВыгружатьРаздел21);
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел22", ВыгружатьРаздел22);
	
	ВыгружатьРаздел21_100 = ЗначениеЗаполнено(Раздел12.П000120010003) ИЛИ ЗначениеЗаполнено(Раздел12.П000120011003) ИЛИ НЕ ЗначениеЗаполнено(Раздел12.П000120012003);
	ВыгружатьРаздел21_120 = НЕ ВыгружатьРаздел21_100;
	
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел21_100", ВыгружатьРаздел21_100);
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел21_120", ВыгружатьРаздел21_120);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет =Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет("СхемаВыгрузки504");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ВыгрузкаВозможна(ПараметрыВыгрузки)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки);
	
	СочетаниеРазделовКорректно = Истина;
	
	ЗаполненРаздел11 = ЗаполненРаздел11(мДанныеОтчета.ПолеТабличногоДокументаРаздел11);
	ЗаполненРаздел12 = ЗаполненРаздел12(мДанныеОтчета.ПолеТабличногоДокументаРаздел12);
	ЗаполненРаздел21 = ЗаполненРаздел21(мДанныеОтчета.ПолеТабличногоДокументаРаздел21);
	ЗаполненРаздел22 = ЗаполненРаздел22(мДанныеОтчета.ПолеТабличногоДокументаРаздел22);
	
	ЗаполненоПоКоду1 = ЗаполненРаздел11 ИЛИ ЗаполненРаздел21;
	ЗаполненоПоКоду2 = ЗаполненРаздел12 ИЛИ ЗаполненРаздел22;
	
	КодВидаОбъекта = Неопределено;
	Если ПрименяетсяУСН(ЭтаФорма) Тогда
		КодВидаОбъекта = КодВидаОбъектаНалогообложения(ЭтаФорма);
	Иначе
		// Попытка получить объект налогообложения в случае, если в отчетном периоде УСН применялась.
		КодВидаОбъекта = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
		СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	Если КодВидаОбъекта = 1 Тогда
		Если ЗаполненоПоКоду2 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "При действующей системе налогообложения не допускается заполнение отчета по объектам налогообложения с кодом 2", "Раздел12", "П000120001003");
			СтатусПроверки = Ложь;
			СочетаниеРазделовКорректно = Ложь;
		КонецЕсли;
		
	ИначеЕсли КодВидаОбъекта = 2 Тогда
		Если ЗаполненоПоКоду1 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "При действующей системе налогообложения не допускается заполнение отчета по объектам налогообложения с кодом 1", "Раздел11", "П000110001003");
			СтатусПроверки = Ложь;
			СочетаниеРазделовКорректно = Ложь;
		КонецЕсли;
		
	Иначе
		Если ЗаполненоПоКоду1 И ЗаполненоПоКоду2 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не допускается одновременное заполнение отчета по объектам налогообложения с кодами 1 и 2", "Раздел11", "П000110001003");
			СтатусПроверки = Ложь;
			СочетаниеРазделовКорректно = Ложь;
		Иначе
			Если НЕ ПараметрыВыгрузки.ВыгружатьРаздел11 И НЕ ПараметрыВыгрузки.ВыгружатьРаздел12 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указан объект налогообложения УСН", "Раздел11", "П000110001003");
				СтатусПроверки = Ложь;
				СочетаниеРазделовКорректно = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СочетаниеРазделовКорректно Тогда
		
		ПроверятьПоКоду1 = (КодВидаОбъекта = 1)
		               ИЛИ (КодВидаОбъекта <> 2 И ЗаполненоПоКоду1)
		               ИЛИ (КодВидаОбъекта <> 2 И НЕ ЗаполненоПоКоду2);
		
		ПроверятьПоКоду2 = НЕ ПроверятьПоКоду1;
		
		Если ПроверятьПоКоду1 Тогда
			ПроверитьЗаполнение_Раздел11(СтатусПроверки);
			ПроверитьЗаполнение_Раздел21(СтатусПроверки);
		КонецЕсли;
		
		Если ПроверятьПоКоду2 Тогда
			ПроверитьЗаполнение_Раздел12(СтатусПроверки);
			ПроверитьЗаполнение_Раздел22(СтатусПроверки);
		КонецЕсли;
		
		ПроверитьЗаполнение_Раздел3(СтатусПроверки);
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел11(ДанныеРаздела)
	
	СписокПоказателей = "П000110002003,П000110003003,П000110004003,П000110005003,П000110006003,
	                    |П000110007003,П000110008003,П000110009003,П000110010003,П000110011003";
	Возврат РазделЗаполнен_(ДанныеРаздела, СписокПоказателей);
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел12(ДанныеРаздела)
	
	СписокПоказателей = "П000120002003,П000120003003,П000120004003,П000120005003,П000120006003,
	                    |П000120007003,П000120008003,П000120009003,П000120010003,П000120011003,П000120012003";
	Возврат РазделЗаполнен_(ДанныеРаздела, СписокПоказателей);
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел21(ДанныеРаздела)
	
	СписокПоказателей = "П000210011003,П000210011103,П000210011203,П000210011303,П000210013003,П000210013103,
	                    |П000210013203,П000210013303,П000210014003,П000210014103,П000210014203,П000210014303";
	Возврат РазделЗаполнен_(ДанныеРаздела, СписокПоказателей);
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел22(ДанныеРаздела)
	
	СписокПоказателей = "П000220021003,П000220021103,П000220021203,П000220021303,П000220022003,П000220022103,
	                    |П000220022203,П000220022303,П000220023003,П000220024003,П000220024103,П000220024203,
	                    |П000220024303,П000220025003,П000220025103,П000220025203,П000220025303,П000220027003,
	                    |П000220027103,П000220027203,П000220027303,П000220028003";
	Возврат РазделЗаполнен_(ДанныеРаздела, СписокПоказателей);
	
КонецФункции

&НаСервере
Функция РазделЗаполнен_(ДанныеРаздела, СписокПоказателей)
	
	ИменаПоказателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПоказателей);
	
	Результат = Ложь;
	
	Для Каждого ИмяПоказателя Из ИменаПоказателей Цикл
		ИмяПоказателя = СокрЛП(ИмяПоказателя);
		Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя]) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки)
	
	ЭтоПБОЮЛ = ПараметрыВыгрузки.ЭтоПБОЮЛ;
	
	ВозможныеКодыПериода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("34,50,95,96"); // ограничено форматом выгрузки
	ВозможныеКодыПоМесту = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("120,210,215"); // ограничено форматом выгрузки
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(СокрЛП(ПараметрыВыгрузки.КодНО)) <> 4 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе неверно задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код места, по которому представляется документ", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код места, по которому представляется документ", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода вида деятельности по ОКВЭД", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД. Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЭтоПБОЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННФЛ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН индивидуального предпринимателя", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННФЛ) <> 12 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан ИНН индивидуального предпринимателя", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФЛФамилия) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе  не указана фамилия индивидуального предпринимателя", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФЛИмя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе  не указано имя индивидуального предпринимателя", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан ИНН организации", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан КПП организации", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указано полное наименование организации", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг) ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг) ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			Если ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код формы реорганизации", "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ИННРеорг) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации", "Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации", "Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	ПодписаноИндивидуальнымПредпринимателем = (ЭтоПБОЮЛ И ПараметрыВыгрузки.ПрПодп = "1");
	Если НЕ ПодписаноИндивидуальнымПредпринимателем Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И ПустаяСтрока(ПараметрыВыгрузки.ПодпНаимДок) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел11(СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел11;
	
	ОКТМО = СокрЛП(ДанныеРаздела.П000110001003);
	ДлинаОКТМО = СтрДлина(ОКТМО);
	Если ДлинаОКТМО = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке 010 раздела 1.1 не указан код по ОКТМО", "Раздел11", "П000110001003");
		СтатусПроверки = Ложь;
	ИначеЕсли ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке 010 раздела 1.1 неверно указан код по ОКТМО", "Раздел11", "П000110001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПроверитьОКТМО(ДанныеРаздела, "П000110003003", СтатусПроверки);
	ПроверитьОКТМО(ДанныеРаздела, "П000110006003", СтатусПроверки);
	ПроверитьОКТМО(ДанныеРаздела, "П000110009003", СтатусПроверки);
	
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000110004003,П000110005003", СтатусПроверки);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000110007003,П000110008003", СтатусПроверки);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000110010003,П000110011003", СтатусПроверки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел12(СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел12;
	
	ОКТМО = СокрЛП(ДанныеРаздела.П000120001003);
	ДлинаОКТМО = СтрДлина(ОКТМО);
	Если ДлинаОКТМО = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке 010 раздела 1.2 не указан код по ОКТМО", "Раздел12", "П000120001003");
		СтатусПроверки = Ложь;
	ИначеЕсли ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке 010 раздела 1.2 неверно указан код по ОКТМО", "Раздел12", "П000120001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПроверитьОКТМО(ДанныеРаздела, "П000120003003", СтатусПроверки);
	ПроверитьОКТМО(ДанныеРаздела, "П000120006003", СтатусПроверки);
	ПроверитьОКТМО(ДанныеРаздела, "П000120009003", СтатусПроверки);
	
	СочетаниеСтрок = ?(ЗначениеЗаполнено(ДанныеРаздела.П000120010003), 1, 0)
	               + ?(ЗначениеЗаполнено(ДанныеРаздела.П000120011003), 1, 0)
	               + ?(ЗначениеЗаполнено(ДанныеРаздела.П000120012003), 1, 0);
	Если СочетаниеСтрок > 1 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Допускается заполнение только одной из строк 100, 110 и 120 раздела 1.2", "Раздел12", "П000120010003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000120004003,П000120005003", СтатусПроверки);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000120007003,П000120008003", СтатусПроверки);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000120010003,П000120011003", СтатусПроверки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел21(СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел21;
	
	ВозможныеПризнакиНалогоплательщика = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("1,2"); // ограничено форматом выгрузки
	Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П000210010203) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке 102 раздела 2.1 не задан признак налогоплательщика", "Раздел21", "П000210010203");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеПризнакиНалогоплательщика.Найти(ДанныеРаздела.П000210010203) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке 102 раздела 2.1 неверно задан признак налогоплательщика", "Раздел21", "П000210010203");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ (ДанныеРаздела.П000210012003 = 0
		ИЛИ ДанныеРаздела.П000210012003 = 3
		ИЛИ ДанныеРаздела.П000210012003 = 6) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке 120 раздела 2.1 задано неверное значение ставки налога (возможные значения: 0%, 3%, 6%)", "Раздел21", "П000210012003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел22(СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П000220026303) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке 263 раздела 2.2 не указана ставка налога", "Раздел22", "П000220026303");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000220024003,П000220025003", СтатусПроверки);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000220024103,П000220025103", СтатусПроверки);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000220024203,П000220025203", СтатусПроверки);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000220024303,П000220025303", СтатусПроверки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел3(СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	Инд = 1;
	Пока ДанныеРаздела.Свойство("П000030000101_" + СтрокаЧГ0(Инд)) Цикл
		
		НомерСтроки = СтрокаЧГ0(Инд);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеРаздела["П000030000101_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000102_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000103_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000104_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000105_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000106_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000107_" + НомерСтроки]);
		
		Если СтрокаЗаполнена Тогда
			
			КодВидаПоступления = СокрЛП(ДанныеРаздела["П000030000101_" + НомерСтроки]);
			Если НЕ ЗначениеЗаполнено(КодВидаПоступления) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + НомерСтроки + " раздела 3 не указан код вида поступлений", "Раздел3", "П000030000101_" + НомерСтроки);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(КодВидаПоступления) <> 3 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + НомерСтроки + " раздела 3 неверно указан код вида поступлений", "Раздел3", "П000030000101_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОКТМО(ДанныеРаздела, ИмяПоказателя, СтатусПроверки)
	
	КодРаздела = Сред(ИмяПоказателя, 5, 2);
	НомерРаздела = Сред(ИмяПоказателя, 5, 1) + "." + Сред(ИмяПоказателя, 6, 1);
	КодСтроки = Сред(ИмяПоказателя, 9, 3);
	
	ОКТМО = СокрЛП(ДанныеРаздела[ИмяПоказателя]);
	ДлинаОКТМО = СтрДлина(ОКТМО);
	Если ДлинаОКТМО <> 0 И ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
		ОписаниеОшибки = "В строке " + КодСтроки + " раздела " + НомерРаздела + " неверно указан код по ОКТМО";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ОписаниеОшибки, "Раздел" + КодРаздела, ИмяПоказателя);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСочетаниеПоказателей(ДанныеРаздела, СписокПоказателей, СтатусПроверки)
	
	Показатели = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПоказателей);
	ИмяПоказателя1 = Показатели[0];
	ИмяПоказателя2 = Показатели[1];
	
	КодРаздела = Сред(ИмяПоказателя1, 5, 2);
	НомерРаздела = Сред(ИмяПоказателя1, 5, 1) + "." + Сред(ИмяПоказателя1, 6, 1);
	КодСтроки1 = Сред(ИмяПоказателя1, 9, 3);
	КодСтроки2 = Сред(ИмяПоказателя2, 9, 3);
	
	ЗаполненПоказатель1 = ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя1]);
	ЗаполненПоказатель2 = ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя2]);
	
	Если ЗаполненПоказатель1 и ЗаполненПоказатель2 Тогда
		ОписаниеОшибки = "Не допускается одновременное заполнение показателей в строках " + КодСтроки1 + " и " + КодСтроки2 + " раздела " + НомерРаздела;
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ОписаниеОшибки, "Раздел" + КодРаздела, ИмяПоказателя1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251");
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННФЛ), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	КоличествоВставленныхУзлов = 0;
	
	Для Каждого Стр из Узел.Строки Цикл
		
		Если КоличествоВставленныхУзлов > 0 Тогда
			КоличествоВставленныхУзлов = КоличествоВставленныхУзлов - 1;
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ДанныеРаздела = мДанныеОтчета[Стр.Раздел];
				Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
					УзелСтраницы = НовыйУзелИзПрототипа(Стр);
					УзелСтраницы.Многостраничность = Ложь;
					ВиртуальныеДанные = Новый Структура(Стр.Раздел, СтраницаРаздела.Данные);
					ЗаполнитьДаннымиУзел(ВиртуальныеДанные, УзелСтраницы);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			ИначеЕсли Стр.Многострочность Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						ДанныеРаздела = ПараметрыВыгрузки[Стр.Раздел];
					Иначе
						ДанныеРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел];
					КонецЕсли;
				Иначе
					ДанныеРаздела = ПараметрыВыгрузки;
				КонецЕсли;
				ИмяКонтрольногоПоказателя = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Стр);
				
				НомерСтроки = 1;
				Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
				
				Пока ДанныеРаздела.Свойство(ИмяКонтрольногоПоказателя + Постфикс) Цикл
					УзелСтроки = НовыйУзелИзПрототипа(Стр);
					УзелСтроки.Многострочность = Ложь;
					ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(УзелСтроки, Постфикс);
					ЗаполнитьДаннымиУзел(ДанныеРаздела, УзелСтроки);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
					
					НомерСтроки = НомерСтроки + 1;
					Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
				КонецЦикла;
				
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) И НЕ ПустаяСтрока(Стр.Ключ) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						// Данные представлены в виде раздела в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Раздел][Стр.Ключ];
					ИначеЕсли ПараметрыВыгрузки.Свойство(Стр.Ключ) Тогда
						// Данные заданы в виде значения в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Ключ];
					Иначе
						// Данные находятся в сохраненных данных отчета.
						ЗначениеЭлемента = мДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел][Стр.Ключ];
					КонецЕсли;
					ВывестиПоказательВXML(Стр, ЗначениеЭлемента);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Узел)
	
	Результат = Неопределено;
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Результат = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(СтрокаУзла);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				Результат = СокрЛП(СтрокаУзла.Ключ);
			КонецЕсли;
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(Узел, Постфикс)
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(СтрокаУзла, Постфикс);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				СтрокаУзла.Ключ = СокрЛП(СтрокаУзла.Ключ) + Постфикс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ВывестиПоказательВXML(Узел, Знач ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") И НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ЗначениеПоказателя = "";
		Иначе
			ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателя), Лев(СокрЛП(ЗначениеПоказателя), МаксШирина), ЗначениеПоказателя);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьНадписиНаТитульномЛисте();
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели = "")
	
	Если ИмяСтраницыПанели = "Титульный" Тогда
		
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
		 ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		КонецЕсли;
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			ОпределяющаяОбласть1 = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
			ОпределяющаяОбласть2 = Форма.ТабличныйДокумент.Области.ПоМесту;
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.НаимОрг;
			Если ЗначениеЗаполнено(ОпределяющаяОбласть1.Значение)
				И ОпределяющаяОбласть1.Значение <> "0"
				И ОпределяющаяОбласть2.Значение = "215" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				Форма.ТабличныйДокумент.Области.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел11" Тогда
		
		Если ЗначениеЗаполнено(Форма.СтруктураДанныхТитульный.ИзменениеМестаПостановкиНаУчет) Тогда
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000110003003);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000110006003);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000110009003);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000110003003);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000110006003);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000110009003);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел12" Тогда
		
		Если ЗначениеЗаполнено(Форма.СтруктураДанныхТитульный.ИзменениеМестаПостановкиНаУчет) Тогда
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000120003003);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000120006003);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000120009003);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000120003003);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000120006003);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000120009003);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел21" Тогда
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 2015 Тогда
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000210012003, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			ОбрабатываемаяОбласть.Значение = 0;
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			ОбрабатываемаяОбласть.Значение = "";
		Иначе
			ОбрабатываемаяОбласть.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	// Многострочные разделы.
	Если НаимРаздела = "Раздел3" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(СтруктураРеквизитовФормы.НаименованиеФормыОтчета + "_" + ИмяТекРаздела));
	
	// Многострочные разделы.
	Если ИмяТекРаздела = "Раздел3" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		СтруктураГруппы = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	// Обычные разделы.
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Если ИмяТекРаздела = "Раздел21" Тогда
			
			РазделЗаполнен = Ложь;
			
			Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
				
				Если ЗначениеЗаполнено(ЭлСтруктуры.Значение) Тогда
					
					РазделЗаполнен = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ РазделЗаполнен Тогда
				
				ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
		Если ИмяТекРаздела = "Раздел22" Тогда
			ИзменитьФорматПоказателей(ЭтаФорма, ИмяТекРаздела);
		КонецЕсли;
		
	Иначе
		
		УстановитьНадписиНаТитульномЛисте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "Раздел21" Тогда
		
		Если СтруктураРеквизитовФормы.ОпределятьТрудНаемныхРабочих И СтруктураРеквизитовФормы.ИП
			И НЕ СтруктураРеквизитовФормы.ИПИспользуетТрудНаемныхРаботников Тогда
			ТабличныйДокумент.Области.П000210010203.Значение = "2";
		Иначе
			ТабличныйДокумент.Области.П000210010203.Значение = "1";
		КонецЕсли;
		
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 2015 Тогда
			ТабличныйДокумент.Области.П000210012003.Значение = 6;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаВПоляхВводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
	
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы Тогда
		
		ТекТабличноеПоле = "Раздел3";
		
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяСтраницы);
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН = СокрЛП(СтруктураДанныхТитульный.ИНН) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН = Сред(СтруктураДанныхТитульный.ИНН, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН = Лев(СтруктураДанныхТитульный.ИНН, СтрНайти(СтруктураДанныхТитульный.ИНН, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП = СокрЛП(СтруктураДанныхТитульный.КПП) + ?(ПоказателиТаблПоле["КПП1_" + Ном] = "-", "", ПоказателиТаблПоле["КПП1_" + Ном]);
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки) + ?(ПоказателиТаблПоле["НомерКорректировки" + Ном] = "-", "", ПоказателиТаблПоле["НомерКорректировки" + Ном]);
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период" + Ном];
				СтруктураДанныхТитульный.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
			СтруктураДанныхТитульный.Вставить("НалоговыйОрган");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.НалоговыйОрган = СокрЛП(СтруктураДанныхТитульный.НалоговыйОрган) + ПоказателиТаблПоле["НалоговыйОрган" + Ном];
				СтруктураДанныхТитульный.Удалить("НалоговыйОрган" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СоставленаНа1" Тогда
			СтруктураДанныхТитульный.Вставить("СоставленаНа");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["СоставленаНа" + Ном];
				СтруктураДанныхТитульный.Удалить("СоставленаНа" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("КПП");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ЗначениеЗаполнено(Область.Значение) Тогда
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		Иначе
			СтрДатаПодписи = "";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ЗаполнитьАвтоНаСервере();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Раздел11", СтруктураДанныхРаздел11);
	Контейнер.Вставить("Раздел12", СтруктураДанныхРаздел12);
	Контейнер.Вставить("Раздел21", СтруктураДанныхРаздел21);
	Контейнер.Вставить("Раздел22", СтруктураДанныхРаздел22);
	Контейнер.Вставить("Раздел3",  СтруктураДанныхРаздел3);
	Контейнер.Вставить("Раздел3_ДанныеДопСтрок", П0000300001);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(
		Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7),
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета, Контейнер);
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СформироватьПодменюПечать(ЭтаФорма);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ СООТНООШЕНИЙ В ДЕКЛАРАЦИИ
///////////////////////////////////////////////////////////////////////////////

#Область МеханизмПроверкиКонтрольныхСоотношений

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	Иначе
		СписокРасшифровкиформулы.Очистить();
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	Если ПрименяетсяУСН(ЭтаФорма) Тогда
		ВидОбъектаНалогообложения = КодВидаОбъектаНалогообложения(ЭтаФорма);
		Если ВидОбъектаНалогообложения = 1 Тогда
			ПроверитьКС_1(СтруктураРезультата);
			ПроверитьКС_2(СтруктураРезультата);
			ПроверитьКС_5(СтруктураРезультата);
			ПроверитьКС_6(СтруктураРезультата);
		ИначеЕсли ВидОбъектаНалогообложения = 2 Тогда
			ПроверитьКС_3(СтруктураРезультата);
			ПроверитьКС_4(СтруктураРезультата);
			ПроверитьКС_7(СтруктураРезультата);
			ПроверитьКС_8(СтруктураРезультата);
			ПроверитьКС_9(СтруктураРезультата);
			ПроверитьКС_10(СтруктураРезультата);
			ПроверитьКС_12_1(СтруктураРезультата);
			ПроверитьКС_12_2(СтруктураРезультата);
			ПроверитьКС_12_3(СтруктураРезультата);
			ПроверитьКС_12_4(СтруктураРезультата);
			ПроверитьКС_16_1(СтруктураРезультата);
			ПроверитьКС_16_2(СтруктураРезультата);
			ПроверитьКС_16_3(СтруктураРезультата);
			ПроверитьКС_16_4(СтруктураРезультата);
			ПроверитьКС_18_1(СтруктураРезультата);
			ПроверитьКС_18_2(СтруктураРезультата);
			ПроверитьКС_18_3(СтруктураРезультата);
			ПроверитьКС_18_4(СтруктураРезультата);
			ПроверитьКС_19_1(СтруктураРезультата);
			ПроверитьКС_19_2(СтруктураРезультата);
			ПроверитьКС_19_3(СтруктураРезультата);
			ПроверитьКС_19_4(СтруктураРезультата);
			ПроверитьКС_21(СтруктураРезультата);
		КонецЕсли;
	Иначе
		ПроверитьКС_1(СтруктураРезультата);
		ПроверитьКС_2(СтруктураРезультата);
		ПроверитьКС_3(СтруктураРезультата);
		ПроверитьКС_4(СтруктураРезультата);
		ПроверитьКС_5(СтруктураРезультата);
		ПроверитьКС_6(СтруктураРезультата);
		ПроверитьКС_7(СтруктураРезультата);
		ПроверитьКС_8(СтруктураРезультата);
		ПроверитьКС_9(СтруктураРезультата);
		ПроверитьКС_10(СтруктураРезультата);
		ПроверитьКС_12_1(СтруктураРезультата);
		ПроверитьКС_12_2(СтруктураРезультата);
		ПроверитьКС_12_3(СтруктураРезультата);
		ПроверитьКС_12_4(СтруктураРезультата);
		ПроверитьКС_16_1(СтруктураРезультата);
		ПроверитьКС_16_2(СтруктураРезультата);
		ПроверитьКС_16_3(СтруктураРезультата);
		ПроверитьКС_16_4(СтруктураРезультата);
		ПроверитьКС_18_1(СтруктураРезультата);
		ПроверитьКС_18_2(СтруктураРезультата);
		ПроверитьКС_18_3(СтруктураРезультата);
		ПроверитьКС_18_4(СтруктураРезультата);
		ПроверитьКС_19_1(СтруктураРезультата);
		ПроверитьКС_19_2(СтруктураРезультата);
		ПроверитьКС_19_3(СтруктураРезультата);
		ПроверитьКС_19_4(СтруктураРезультата);
		ПроверитьКС_21(СтруктураРезультата);
	КонецЕсли;
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор);
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", АдресВоВременномХранилище);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ПроверитьКС_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1.1 (КС 1)'");
	ОписаниеКС     = НСтр("ru='Сумма налога, подлежащая уплате за налоговый период (строка 100 Раздел 1.1) должна быть равна (строка 133 - строка 143) Раздела 2.1 - (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.1, если результат вычитания (строка 133 - строка 143) Раздела 2.1 - (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.1 больше либо равен 0'");
	
	Нарушение       = НСтр("ru='п.3 ст. 346.21 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неправильно исчислена сумма налога, подлежащая уплате за налоговый период'");
	
	Р11Стр100 = ПоказательПоСтроке("Р11Стр100");
	
	Р21Стр133 = ПоказательПоСтроке("Р21Стр133");
	Р21Стр143 = ПоказательПоСтроке("Р21Стр143");
	
	Р11Стр020 = ПоказательПоСтроке("Р11Стр020");
	Р11Стр040 = ПоказательПоСтроке("Р11Стр040");
	Р11Стр050 = ПоказательПоСтроке("Р11Стр050");
	Р11Стр070 = ПоказательПоСтроке("Р11Стр070");
	Р11Стр080 = ПоказательПоСтроке("Р11Стр080");
	
	Раздел11 = мДанныеОтчета.ПолеТабличногоДокументаРаздел11;
	Раздел21 = мДанныеОтчета.ПолеТабличногоДокументаРаздел21;
	
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр100);
	ВставитьЗначениеПоказателя(Раздел21, Р21Стр133);
	ВставитьЗначениеПоказателя(Раздел21, Р21Стр143);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр020);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр040);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр050);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр070);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр080);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р11Стр100, "Раздел11");
	
	ВнестиПоказательВРасшифровку(Р21Стр133, "Раздел21");
	ВнестиПоказательВРасшифровку(Р21Стр143, "Раздел21");
	
	ВнестиПоказательВРасшифровку(Р11Стр020, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр040, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр050, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр070, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр080, "Раздел11");
	
	КС = ПоказателиКС(Р11Стр100.Значение, (Р21Стр133.Значение - Р21Стр143.Значение) - (Р11Стр020.Значение + Р11Стр040.ЗначениеСтр - 
		Р11Стр050.Значение + Р11Стр070.Значение - Р11Стр080.Значение));
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = (" + Р21Стр133.ЗначениеСтр + " - " + Р21Стр143.ЗначениеСтр + ") - (" + Р11Стр020.ЗначениеСтр +
		" + " + Р11Стр040.ЗначениеСтр + " - " + Р11Стр050.ЗначениеСтр + " + " + Р11Стр070.ЗначениеСтр + " - " + Р11Стр080.ЗначениеСтр +
		") Итог [" + КС.ПраваяЧастьСтр + "], когда " + КС.ПраваяЧастьСтр + " >= 0";
		
	УсловиеВыполнено = КС.ПраваяЧасть >= 0;
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
		
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
		
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1.1 (КС 2)'");
	ОписаниеКС     = НСтр("ru='Сумма налога, подлежащая уплате за налоговый период (строка 100 Раздел 1.1) должна быть равна 0, если (строка 133 - строка 143) Раздела 2.1 - (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.1  < 0'");
	
	Нарушение       = НСтр("ru='п.3 ст. 346.21 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неправильно исчислена сумма налога, подлежащая уплате за налоговый период'");
	
	Р11Стр100 = ПоказательПоСтроке("Р11Стр100");
	
	Р21Стр133 = ПоказательПоСтроке("Р21Стр133");
	Р21Стр143 = ПоказательПоСтроке("Р21Стр143");
	
	Р11Стр020 = ПоказательПоСтроке("Р11Стр020");
	Р11Стр040 = ПоказательПоСтроке("Р11Стр040");
	Р11Стр050 = ПоказательПоСтроке("Р11Стр050");
	Р11Стр070 = ПоказательПоСтроке("Р11Стр070");
	Р11Стр080 = ПоказательПоСтроке("Р11Стр080");
	
	Раздел11 = мДанныеОтчета.ПолеТабличногоДокументаРаздел11;
	Раздел21 = мДанныеОтчета.ПолеТабличногоДокументаРаздел21;
	
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр100);
	ВставитьЗначениеПоказателя(Раздел21, Р21Стр133);
	ВставитьЗначениеПоказателя(Раздел21, Р21Стр143);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр020);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр040);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр050);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр070);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр080);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р11Стр100, "Раздел11");
	
	ВнестиПоказательВРасшифровку(Р21Стр133, "Раздел21");
	ВнестиПоказательВРасшифровку(Р21Стр143, "Раздел21");
	
	ВнестиПоказательВРасшифровку(Р11Стр020, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр040, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр050, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр070, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр080, "Раздел11");
	
	КС = ПоказателиКС(Р11Стр100.Значение, 0);
	ЗначениеУсловия = (Р21Стр133.Значение - Р21Стр143.Значение) - (Р11Стр020.Значение + Р11Стр040.ЗначениеСтр - Р11Стр050.Значение + 
		Р11Стр070.Значение - Р11Стр080.Значение);
	ЗначениеУсловияСтр = ЧислоСтрЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеУсловия));
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = 0, когда (" + Р21Стр133.ЗначениеСтр + " - " + Р21Стр143.ЗначениеСтр + ") - (" +
		Р11Стр020.ЗначениеСтр + " + " + Р11Стр040.ЗначениеСтр + " - " + Р11Стр050.ЗначениеСтр + " + " + Р11Стр070.ЗначениеСтр + " - " +
		Р11Стр080.ЗначениеСтр + ") Итог [" + ЗначениеУсловияСтр + "] < 0";
		
	УсловиеВыполнено = ЗначениеУсловия < 0;
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1.2 (КС 3)'");
	ОписаниеКС     = НСтр("ru='Сумма налога, подлежащая уплате за налоговый период (строка 100 Раздел 1.2) должна быть равна строке 273 Раздела 2.2 - (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.2, если результат вычитания строка 273 Раздела 2.2 - (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.2 больше либо равен 0 и строка 273 Раздела 2.2 больше либо равна строки 280 Раздела 2.2'");
	
	Нарушение       = НСтр("ru='п.4 ст. 346.21 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неправильно исчислена сумма налога, подлежащая уплате за налоговый период'");
	
	Р12Стр100 = ПоказательПоСтроке("Р12Стр100");
	
	Р22Стр273 = ПоказательПоСтроке("Р22Стр273");
	Р22Стр280 = ПоказательПоСтроке("Р22Стр280");
	
	Р12Стр020 = ПоказательПоСтроке("Р12Стр020");
	Р12Стр040 = ПоказательПоСтроке("Р12Стр040");
	Р12Стр050 = ПоказательПоСтроке("Р12Стр050");
	Р12Стр070 = ПоказательПоСтроке("Р12Стр070");
	Р12Стр080 = ПоказательПоСтроке("Р12Стр080");
	
	Раздел12 = мДанныеОтчета.ПолеТабличногоДокументаРаздел12;
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр100);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр273);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр280);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр020);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр040);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр050);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр070);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр080);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р12Стр100, "Раздел12");
	
	ВнестиПоказательВРасшифровку(Р22Стр273, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр280, "Раздел22");
	
	ВнестиПоказательВРасшифровку(Р12Стр020, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр040, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр050, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр070, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр080, "Раздел12");
	
	КС = ПоказателиКС(Р12Стр100.Значение, Р22Стр273.Значение - (Р12Стр020.Значение + Р12Стр040.Значение - Р12Стр050.Значение +
		Р12Стр070.Значение - Р12Стр080.Значение));
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр273.ЗначениеСтр + " - (" + Р12Стр020.ЗначениеСтр + " + " + Р12Стр040.ЗначениеСтр +
		" - " + Р12Стр050.ЗначениеСтр + " + " + Р12Стр070.ЗначениеСтр + " - " + Р12Стр080.ЗначениеСтр + ") Итог [" + КС.ПраваяЧастьСтр +
		"], когда " + КС.ПраваяЧастьСтр + " >= 0 и " + Р22Стр273.ЗначениеСтр + " >= " + Р22Стр280.ЗначениеСтр;
		
	УсловиеВыполнено = (КС.ПраваяЧасть >= 0) И (Р22Стр273.Значение >= Р22Стр280.Значение);
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1.2 (КС 4)'");
	ОписаниеКС     = НСтр("ru='Сумма налога, подлежащая уплате за налоговый период (строка 100 Раздела 1.2) должна быть равна 0, если результат от вычитания (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.2 из строки 273 Раздела 2.2 < 0'");
	
	Нарушение       = НСтр("ru='п.4 ст. 346.21 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неправильно исчислена сумма налога, подлежащая уплате за налоговый период'");
	
	Р12Стр100 = ПоказательПоСтроке("Р12Стр100");
	
	Р22Стр273 = ПоказательПоСтроке("Р22Стр273");
	
	Р12Стр020 = ПоказательПоСтроке("Р12Стр020");
	Р12Стр040 = ПоказательПоСтроке("Р12Стр040");
	Р12Стр050 = ПоказательПоСтроке("Р12Стр050");
	Р12Стр070 = ПоказательПоСтроке("Р12Стр070");
	Р12Стр080 = ПоказательПоСтроке("Р12Стр080");
	
	Раздел12 = мДанныеОтчета.ПолеТабличногоДокументаРаздел12;
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр100);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр273);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр020);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр040);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр050);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр070);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр080);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р12Стр100, "Раздел12");
	
	ВнестиПоказательВРасшифровку(Р22Стр273, "Раздел22");
	
	ВнестиПоказательВРасшифровку(Р12Стр020, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр040, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр050, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр070, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр080, "Раздел12");
	
	КС = ПоказателиКС(Р12Стр100.Значение, 0);
	ЗначениеУсловия = Р22Стр273.Значение - (Р12Стр020.Значение + Р12Стр040.ЗначениеСтр - Р12Стр050.Значение + Р12Стр070.Значение -
		Р12Стр080.Значение);
	ЗначениеУсловияСтр = ЧислоСтрЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеУсловия));
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = 0, когда " + Р22Стр273.ЗначениеСтр + " - (" + Р12Стр020.ЗначениеСтр + " + " + 
		Р12Стр040.ЗначениеСтр + " - " + Р12Стр050.ЗначениеСтр + " + " + Р12Стр070.ЗначениеСтр + " - " + Р12Стр080.ЗначениеСтр + ") Итог [" +
		ЗначениеУсловияСтр + "] < 0";
		
	УсловиеВыполнено = ЗначениеУсловия < 0;
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1.1 (КС 5)'");
	ОписаниеКС     = НСтр("ru='Сумма налога к уменьшению за налоговый период (строка 110 Раздела 1.1) должна быть равна (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.1 - (строка 133 - строка 143) Раздела 2.1, если результат вычитания (строка 133 - строка 143) Раздела 2.1 - (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.1 меньше 0'");
	
	Нарушение       = НСтр("ru='п. 3 ст. 346.21 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неправильно исчислена сумма налога, подлежащая уплате за налоговый период'");
	
	Р11Стр110 = ПоказательПоСтроке("Р11Стр110");
	
	Р21Стр133 = ПоказательПоСтроке("Р21Стр133");
	Р21Стр143 = ПоказательПоСтроке("Р21Стр143");
	
	Р11Стр020 = ПоказательПоСтроке("Р11Стр020");
	Р11Стр040 = ПоказательПоСтроке("Р11Стр040");
	Р11Стр050 = ПоказательПоСтроке("Р11Стр050");
	Р11Стр070 = ПоказательПоСтроке("Р11Стр070");
	Р11Стр080 = ПоказательПоСтроке("Р11Стр080");
	
	Раздел11 = мДанныеОтчета.ПолеТабличногоДокументаРаздел11;
	Раздел21 = мДанныеОтчета.ПолеТабличногоДокументаРаздел21;
	
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр110);
	ВставитьЗначениеПоказателя(Раздел21, Р21Стр133);
	ВставитьЗначениеПоказателя(Раздел21, Р21Стр143);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр020);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр040);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр050);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр070);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр080);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р11Стр110, "Раздел11");
	
	ВнестиПоказательВРасшифровку(Р11Стр020, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр040, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр050, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр070, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр080, "Раздел11");
	
	ВнестиПоказательВРасшифровку(Р21Стр133, "Раздел21");
	ВнестиПоказательВРасшифровку(Р21Стр143, "Раздел21");
	
	КС = ПоказателиКС(Р11Стр110.Значение,
		(Р11Стр020.Значение + Р11Стр040.ЗначениеСтр - Р11Стр050.Значение + Р11Стр070.Значение - Р11Стр080.Значение) - (Р21Стр133.Значение - Р21Стр143.Значение));
		
	ЗначениеУсловия = (Р21Стр133.Значение - Р21Стр143.Значение) - 
		(Р11Стр020.Значение + Р11Стр040.ЗначениеСтр - Р11Стр050.Значение + Р11Стр070.Значение - Р11Стр080.Значение);
	ЗначениеУсловияСтр = ЧислоСтрЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеУсловия));
		
	Расшифровка = КС.ЛеваяЧастьСтр + " = (" + Р11Стр020.ЗначениеСтр + " + " + Р11Стр040.ЗначениеСтр + " - " + Р11Стр050.ЗначениеСтр +
		" + " + Р11Стр070.ЗначениеСтр + " - " + Р11Стр080.ЗначениеСтр + ") - (" + Р21Стр133.ЗначениеСтр + " - " + Р21Стр143.ЗначениеСтр +
		") Итог [" + КС.ПраваяЧастьСтр + "], когда (" + Р21Стр133.ЗначениеСтр + " - " + Р21Стр143.ЗначениеСтр + ") - (" +
		Р11Стр020.ЗначениеСтр + " + " + Р11Стр040.ЗначениеСтр + " - " + Р11Стр050.ЗначениеСтр + " + " + Р11Стр070.ЗначениеСтр + " - " +
		Р11Стр080.ЗначениеСтр + ") Итог [" + ЗначениеУсловияСтр + "] < 0";
		
	УсловиеВыполнено = ЗначениеУсловия < 0;
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1.1 (КС 6)'");
	ОписаниеКС     = НСтр("ru='Сумма налога к уменьшению за налоговый период (строка 110 Раздела 1.1) должна быть равна 0, если результат вычитания значений (строка 133 - строка 143) Раздела 2.1 - (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.1 больше либо равен 0'");
	
	Нарушение       = НСтр("ru='п.4 ст. 346.21 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неправильно исчислена сумма налога, подлежащая уплате за налоговый период'");
	
	Р11Стр110 = ПоказательПоСтроке("Р11Стр110");
	
	Р21Стр133 = ПоказательПоСтроке("Р21Стр133");
	Р21Стр143 = ПоказательПоСтроке("Р21Стр143");
	
	Р11Стр020 = ПоказательПоСтроке("Р11Стр020");
	Р11Стр040 = ПоказательПоСтроке("Р11Стр040");
	Р11Стр050 = ПоказательПоСтроке("Р11Стр050");
	Р11Стр070 = ПоказательПоСтроке("Р11Стр070");
	Р11Стр080 = ПоказательПоСтроке("Р11Стр080");
	
	Раздел11 = мДанныеОтчета.ПолеТабличногоДокументаРаздел11;
	Раздел21 = мДанныеОтчета.ПолеТабличногоДокументаРаздел21;
	
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр110);
	ВставитьЗначениеПоказателя(Раздел21, Р21Стр133);
	ВставитьЗначениеПоказателя(Раздел21, Р21Стр143);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр020);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр040);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр050);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр070);
	ВставитьЗначениеПоказателя(Раздел11, Р11Стр080);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р11Стр110, "Раздел11");
	
	ВнестиПоказательВРасшифровку(Р21Стр133, "Раздел21");
	ВнестиПоказательВРасшифровку(Р21Стр143, "Раздел21");
	
	ВнестиПоказательВРасшифровку(Р11Стр020, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр040, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр050, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр070, "Раздел11");
	ВнестиПоказательВРасшифровку(Р11Стр080, "Раздел11");
	
	КС = ПоказателиКС(Р11Стр110.Значение, 0);
	ЗначениеУсловия = (Р21Стр133.Значение - Р21Стр143.Значение)
		- (Р11Стр020.Значение + Р11Стр040.ЗначениеСтр - Р11Стр050.Значение + Р11Стр070.Значение - Р11Стр080.Значение);
	
	ЗначениеУсловияСтр = ЧислоСтрЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеУсловия));
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = 0, когда (" + Р21Стр133.ЗначениеСтр + " - " +Р21Стр143.ЗначениеСтр + ") - (" + Р11Стр020.ЗначениеСтр
		+ " + " + Р11Стр040.ЗначениеСтр + " - " + Р11Стр050.ЗначениеСтр + " + " + Р11Стр070.ЗначениеСтр + " - " + Р11Стр080.ЗначениеСтр
		+ ") Итог [" + ЗначениеУсловияСтр + "] >= 0";
		
	УсловиеВыполнено = ЗначениеУсловия >= 0;
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1.2 (КС 7)'");
	ОписаниеКС     = НСтр("ru='Сумма налога к уменьшению за налоговый период (строка 110 Раздел 1.2) должна быть равна (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.2 - строка 273 Раздела 2.2, если строка 273 Раздела 2.2 ≥ строка 280 Раздела 2.2 и Строка 273 Раздела 2.2 - (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.2 < 0'");
	
	Нарушение      = НСтр("ru='п.4 ст. 346.21 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неправильно исчислена сумма налога, подлежащая уплате за налоговый период'");
	
	Р12Стр110 = ПоказательПоСтроке("Р12Стр110");
	
	Р22Стр273 = ПоказательПоСтроке("Р22Стр273");
	Р22Стр280 = ПоказательПоСтроке("Р22Стр280");
	
	Р12Стр020 = ПоказательПоСтроке("Р12Стр020");
	Р12Стр040 = ПоказательПоСтроке("Р12Стр040");
	Р12Стр050 = ПоказательПоСтроке("Р12Стр050");
	Р12Стр070 = ПоказательПоСтроке("Р12Стр070");
	Р12Стр080 = ПоказательПоСтроке("Р12Стр080");
	
	Раздел12 = мДанныеОтчета.ПолеТабличногоДокументаРаздел12;
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр110);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр273);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр280);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр020);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр040);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр050);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр070);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр080);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р12Стр110, "Раздел12");
	
	ВнестиПоказательВРасшифровку(Р22Стр273, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр280, "Раздел22");
	
	ВнестиПоказательВРасшифровку(Р12Стр020, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр040, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр050, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр070, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр080, "Раздел12");
	
	КС = ПоказателиКС(Р12Стр110.Значение, (Р12Стр020.Значение + Р12Стр040.ЗначениеСтр - Р12Стр050.Значение +
		Р12Стр070.Значение - Р12Стр080.Значение) - Р22Стр273.Значение);
	
	ЗначениеУсловия = Р22Стр273.Значение -
		(Р12Стр020.Значение + Р12Стр040.Значение - Р12Стр050.Значение + Р12Стр070.Значение - Р12Стр080.Значение);
	ЗначениеУсловияСтр = ЧислоСтрЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеУсловия));
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = (" + Р12Стр020.ЗначениеСтр + " + " + Р12Стр040.ЗначениеСтр + " - " + Р12Стр050.ЗначениеСтр + " + "
		+ Р12Стр070.ЗначениеСтр + " - " + Р12Стр080.ЗначениеСтр + ") - " + Р22Стр273.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "], когда "
		+ Р22Стр273.ЗначениеСтр + " >= " + Р22Стр280.ЗначениеСтр + " и " + Р22Стр273.ЗначениеСтр + " - (" + Р12Стр020.ЗначениеСтр + " + "
		+ Р12Стр040.ЗначениеСтр + " - " + Р12Стр050.ЗначениеСтр + " + " + Р12Стр070.ЗначениеСтр + " - " + Р12Стр080.ЗначениеСтр + ") " +
		" Итог [" + ЗначениеУсловияСтр + "] < 0";
	
	УсловиеВыполнено = (Р22Стр273.Значение >= Р22Стр280.Значение) И (ЗначениеУсловия < 0);
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_8(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1.2 (КС 8)'");
	ОписаниеКС     = НСтр("ru='Сумма налога к уменьшению за налоговый период (строка 110 Раздел 1.2) должна быть равна (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.2 - строка 280 Раздела 2.2, если строка 273 Раздела 2.2 < строка 280 Раздела 2.2 и (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.2 > строки 280 Раздела 2.2'");
	
	Нарушение      = НСтр("ru='п.4 ст. 346.21 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неправильно исчислена сумма налога, подлежащая уплате за налоговый период'");
	
	Р12Стр110 = ПоказательПоСтроке("Р12Стр110");
	
	Р22Стр273 = ПоказательПоСтроке("Р22Стр273");
	Р22Стр280 = ПоказательПоСтроке("Р22Стр280");
	
	Р12Стр020 = ПоказательПоСтроке("Р12Стр020");
	Р12Стр040 = ПоказательПоСтроке("Р12Стр040");
	Р12Стр050 = ПоказательПоСтроке("Р12Стр050");
	Р12Стр070 = ПоказательПоСтроке("Р12Стр070");
	Р12Стр080 = ПоказательПоСтроке("Р12Стр080");
	
	Раздел12 = мДанныеОтчета.ПолеТабличногоДокументаРаздел12;
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр110);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр273);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр280);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр020);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр040);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр050);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр070);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр080);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р12Стр110, "Раздел12");
	
	ВнестиПоказательВРасшифровку(Р22Стр273, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр280, "Раздел22");
	
	ВнестиПоказательВРасшифровку(Р12Стр020, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр040, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр050, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр070, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр080, "Раздел12");
	
	КС = ПоказателиКС(Р12Стр110.Значение, (Р12Стр020.Значение + Р12Стр040.ЗначениеСтр - Р12Стр050.Значение +
		Р12Стр070.Значение - Р12Стр080.Значение) - Р22Стр280.Значение);
	
	ЗначениеУсловия = (Р12Стр020.Значение + Р12Стр040.Значение - Р12Стр050.Значение + Р12Стр070.Значение - Р12Стр080.Значение);
	ЗначениеУсловияСтр = ЧислоСтрЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеУсловия));
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = (" + Р12Стр020.ЗначениеСтр + " + " + Р12Стр040.ЗначениеСтр + " - " + Р12Стр050.ЗначениеСтр + " + "
		+ Р12Стр070.ЗначениеСтр + " - " + Р12Стр080.ЗначениеСтр + ") - " + Р22Стр280.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "], когда "
		+ Р22Стр273.ЗначениеСтр + " < " + Р22Стр280.ЗначениеСтр + " и " + "(" + Р12Стр020.ЗначениеСтр + " + " + Р12Стр040.ЗначениеСтр +
		" - " + Р12Стр050.ЗначениеСтр + " + " + Р12Стр070.ЗначениеСтр + " - " + Р12Стр080.ЗначениеСтр + ") Итог [" + ЗначениеУсловияСтр +
		"] > " + Р22Стр280.ЗначениеСтр;
	
	УсловиеВыполнено = (Р22Стр273.Значение < Р22Стр280.Значение) И (ЗначениеУсловия > Р22Стр280.Значение);
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_9(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1.2 (КС 9)'");
	ОписаниеКС     = НСтр("ru='Сумма налога к уменьшению за налоговый период (строка 110 Раздел 1.2) должна быть равна 0, если строка 273 Раздела 2.2 < строка 280 Раздела 2.2 и Строка 273 Раздела 2.2 - (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.2 > 0 или строка 273 Раздела 2.2 > строка 280 Раздела 2.2 и (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.2 < строки 280 Раздела 2.2'");
	
	Нарушение      = НСтр("ru='п.4 ст. 346.21 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неправильно исчислена сумма налога, подлежащая уплате за налоговый период'");
	
	Р12Стр110 = ПоказательПоСтроке("Р12Стр110");
	
	Р22Стр273 = ПоказательПоСтроке("Р22Стр273");
	Р22Стр280 = ПоказательПоСтроке("Р22Стр280");
	
	Р12Стр020 = ПоказательПоСтроке("Р12Стр020");
	Р12Стр040 = ПоказательПоСтроке("Р12Стр040");
	Р12Стр050 = ПоказательПоСтроке("Р12Стр050");
	Р12Стр070 = ПоказательПоСтроке("Р12Стр070");
	Р12Стр080 = ПоказательПоСтроке("Р12Стр080");
	
	Раздел12 = мДанныеОтчета.ПолеТабличногоДокументаРаздел12;
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр110);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр273);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр280);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр020);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр040);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр050);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр070);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр080);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р12Стр110, "Раздел12");
	
	ВнестиПоказательВРасшифровку(Р22Стр273, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр280, "Раздел22");
	
	ВнестиПоказательВРасшифровку(Р12Стр020, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр040, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр050, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр070, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр080, "Раздел12");
	
	КС = ПоказателиКС(Р12Стр110.Значение, 0);
	
	ЗначениеУсловия1 = Р22Стр273.Значение -
		(Р12Стр020.Значение + Р12Стр040.Значение - Р12Стр050.Значение + Р12Стр070.Значение - Р12Стр080.Значение);
	ЗначениеУсловия1Стр = ЧислоСтрЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеУсловия1));
	
	ЗначениеУсловия2 = Р12Стр020.Значение + Р12Стр040.Значение - Р12Стр050.Значение + Р12Стр070.Значение - Р12Стр080.Значение;
	ЗначениеУсловия2Стр = ЧислоСтрЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеУсловия2));
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = 0, когда " + Р22Стр273.ЗначениеСтр + " < " + Р22Стр280.ЗначениеСтр + " и " + Р22Стр273.ЗначениеСтр
		+ " - (" + Р12Стр020.ЗначениеСтр + " + " + Р12Стр040.ЗначениеСтр + " - " + Р12Стр050.ЗначениеСтр + " + " + Р12Стр070.ЗначениеСтр + 
		" - " + Р12Стр080.ЗначениеСтр + ") Итог [" + ЗначениеУсловия1Стр + "] > 0 или " + Р22Стр273.ЗначениеСтр + " > " + 
		Р22Стр280.ЗначениеСтр + " и (" + Р12Стр020.ЗначениеСтр + " + " + Р12Стр040.ЗначениеСтр + " - " + Р12Стр050.ЗначениеСтр + " + " + 
		Р12Стр070.ЗначениеСтр + " - " + Р12Стр080.ЗначениеСтр + ") Итог [" + ЗначениеУсловия2Стр + "] < " + Р22Стр280.ЗначениеСтр;
	
	УсловиеВыполнено = ((Р22Стр273.Значение < Р22Стр280.Значение) И (ЗначениеУсловия1 > 0))
		ИЛИ ((Р22Стр273.Значение > Р22Стр280.Значение) И (ЗначениеУсловия2 < Р22Стр280.Значение));
	
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_10(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1.2 (КС 10)'");
	ОписаниеКС     = НСтр("ru='Сумма минимального налога, подлежащая уплате за налоговый период (строка 120 Раздел 1.2) должна быть равна значению по строке 280 Раздел 2.2 - (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.2, если значение по строке 280 Раздела 2.2 > строки 273 Раздела 2.2 и строка 280 Раздела 2.2 > (строка 020 + строка 040 - строка 050 + строка 070 - строка 080) Раздела 1.2'");
	
	Нарушение      = НСтр("ru='п. 6 ст. 346.18 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Не исчислена сумма минимального налога за налоговый период'");
	
	Р12Стр120 = ПоказательПоСтроке("Р12Стр120");
	
	Р22Стр273 = ПоказательПоСтроке("Р22Стр273");
	Р22Стр280 = ПоказательПоСтроке("Р22Стр280");
	
	Р12Стр020 = ПоказательПоСтроке("Р12Стр020");
	Р12Стр040 = ПоказательПоСтроке("Р12Стр040");
	Р12Стр050 = ПоказательПоСтроке("Р12Стр050");
	Р12Стр070 = ПоказательПоСтроке("Р12Стр070");
	Р12Стр080 = ПоказательПоСтроке("Р12Стр080");
	
	Раздел12 = мДанныеОтчета.ПолеТабличногоДокументаРаздел12;
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр120);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр273);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр280);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр020);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр040);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр050);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр070);
	ВставитьЗначениеПоказателя(Раздел12, Р12Стр080);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р12Стр120, "Раздел12");
	
	ВнестиПоказательВРасшифровку(Р22Стр273, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр280, "Раздел22");
	
	ВнестиПоказательВРасшифровку(Р12Стр020, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр040, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр050, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр070, "Раздел12");
	ВнестиПоказательВРасшифровку(Р12Стр080, "Раздел12");
	
	КС = ПоказателиКС(Р12Стр120.Значение, Р22Стр280.Значение - (Р12Стр020.Значение + Р12Стр040.Значение - Р12Стр050.Значение + Р12Стр070.Значение - Р12Стр080.Значение));
	
	ЗначениеУсловия = Р12Стр020.Значение + Р12Стр040.Значение - Р12Стр050.Значение + Р12Стр070.Значение - Р12Стр080.Значение;
	ЗначениеУсловияСтр = ЧислоСтрЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеУсловия));
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда " + Р22Стр280.ЗначениеСтр + " > " + Р22Стр273.ЗначениеСтр + " и " + Р22Стр280.ЗначениеСтр
		+ " > (" + Р12Стр020.ЗначениеСтр + " + " + Р12Стр040.ЗначениеСтр + " - " + Р12Стр050.ЗначениеСтр + " + " + Р12Стр070.ЗначениеСтр + 
		" - " + Р12Стр080.ЗначениеСтр + ") Итог [" + ЗначениеУсловияСтр + "]";
	
	УсловиеВыполнено = ((Р22Стр280.Значение > Р22Стр273.Значение) И (Р22Стр280.Значение > ЗначениеУсловия));
	
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_12_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 12.1)'");
	ОписаниеКС     = НСтр("ru='Ставка налога (строка 260 Раздел 2.2) должна быть больше либо равна 5%, но меньше либо равна 15%'");
	
	Нарушение       = НСтр("ru='п.2 ст. 346.20 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неправильное применение налоговой ставки'");
	
	Р22Стр260 = ПоказательПоСтроке("Р22Стр260");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	Если НЕ ЗаполненРаздел22(Раздел22) Тогда
		Возврат;
	КонецЕсли;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр260);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр260, "Раздел22");
	
	
	Расшифровка = Р22Стр260.ЗначениеСтр + "% <= 5%, " + Р22Стр260.ЗначениеСтр + "% >= 15%";
	
	Если Р22Стр260.Значение >= 5 И Р22Стр260.Значение <= 15 Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
	ЭтоОшибка, ОписаниеОшибки1, Нарушение,
		НСтр("ru='Исключение: Налоговая ставка налога может быть понижена для отдельных категорий налогоплательщиков (пп.3, 4 ст.346.20)'"));
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_12_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 12.2)'");
	ОписаниеКС     = НСтр("ru='Ставка налога (строка 261 Раздел 2.2) должна быть больше либо равна 5%, но меньше либо равна 15%'");
	
	Нарушение       = НСтр("ru='п.2 ст. 346.20 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неправильное применение налоговой ставки'");
	
	Р22Стр261 = ПоказательПоСтроке("Р22Стр261");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	Если НЕ ЗаполненРаздел22(Раздел22) Тогда
		Возврат;
	КонецЕсли;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр261);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр261, "Раздел22");
	
	Расшифровка = Р22Стр261.ЗначениеСтр + "% <= 5%, " + Р22Стр261.ЗначениеСтр + "% >= 15%";
	
	Если Р22Стр261.Значение >= 5 И Р22Стр261.Значение <= 15 Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
		ЭтоОшибка, ОписаниеОшибки1, Нарушение,
		НСтр("ru='Исключение: Налоговая ставка налога может быть понижена для отдельных категорий налогоплательщиков (пп.3, 4 ст.346.20)'"));
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_12_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 12.3)'");
	ОписаниеКС     = НСтр("ru='Ставка налога (строка 262 Раздел 2.2) должна быть больше либо равна 5%, но меньше либо равна 15%'");
	
	Нарушение       = НСтр("ru='п.2 ст. 346.20 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неправильное применение налоговой ставки'");
	
	Р22Стр262 = ПоказательПоСтроке("Р22Стр262");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	Если НЕ ЗаполненРаздел22(Раздел22) Тогда
		Возврат;
	КонецЕсли;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр262);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр262, "Раздел22");
	
	
	Расшифровка = Р22Стр262.ЗначениеСтр + "% <= 5%, " + Р22Стр262.ЗначениеСтр + "% >= 15%";
	
	Если Р22Стр262.Значение >= 5 И Р22Стр262.Значение <= 15 Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
		ЭтоОшибка, ОписаниеОшибки1, Нарушение,
		НСтр("ru='Исключение: Налоговая ставка налога может быть понижена для отдельных категорий налогоплательщиков (пп.3, 4 ст.346.20)'"));
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_12_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 12.4)'");
	ОписаниеКС     = НСтр("ru='Ставка налога (строка 263 Раздел 2.2) должна быть больше либо равна 5%, но меньше либо равна 15%'");
	
	Нарушение       = НСтр("ru='п.2 ст. 346.20 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неправильное применение налоговой ставки'");
	
	Р22Стр263 = ПоказательПоСтроке("Р22Стр263");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	Если НЕ ЗаполненРаздел22(Раздел22) Тогда
		Возврат;
	КонецЕсли;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр263);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр263, "Раздел22");
	
	Расшифровка = Р22Стр263.ЗначениеСтр + "% <= 5%, " + Р22Стр263.ЗначениеСтр + "% >= 15%";
	
	Если Р22Стр263.Значение >= 5 И Р22Стр263.Значение <= 15 Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
		ЭтоОшибка, ОписаниеОшибки1, Нарушение,
		НСтр("ru='Исключение: Налоговая ставка налога может быть понижена для отдельных категорий налогоплательщиков (пп.3, 4 ст.346.20)'"));
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_16_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 16.1)'");
	ОписаниеКС     = НСтр("ru='Налоговая база для исчисления налога за первый квартал (строка 240 Раздел 2.2) должна быть равна результату вычитания значения строки 220 Раздела 2.2 из величины по строке 210 Раздела 2.2, если результат этого вычитания больше нуля'");
	
	Нарушение       = НСтр("ru='п. 2 и п. 7 ст. 346.18 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неверно определена налоговая база за отчетный период'");
	
	Р22Стр240 = ПоказательПоСтроке("Р22Стр240");
	Р22Стр220 = ПоказательПоСтроке("Р22Стр220");
	Р22Стр210 = ПоказательПоСтроке("Р22Стр210");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр240);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр220);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр210);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр240, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр220, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр210, "Раздел22");
	
	КС = ПоказателиКС(Р22Стр240.Значение, Р22Стр210.Значение - Р22Стр220.Значение);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр210.ЗначениеСтр + " - " + Р22Стр220.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + 
		"], когда " + КС.ПраваяЧастьСтр + " > 0";
		
	УсловиеВыполнено = КС.ПраваяЧасть > 0;
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
			
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_16_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 16.2)'");
	ОписаниеКС     = НСтр("ru='Налоговая база для исчисления налога за полугодие (строка 241 Раздел 2.2) должна быть равна результату вычитания значения строки 221 Раздела 2.2 из величины по строке 211 Раздела 2.2, если результат этого вычитания больше 0'");
	
	Нарушение       = НСтр("ru='п. 2 и п. 7 ст. 346.18 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неверно определена налоговая база за отчетный период'");
	
	Р22Стр241 = ПоказательПоСтроке("Р22Стр241");
	Р22Стр221 = ПоказательПоСтроке("Р22Стр221");
	Р22Стр211 = ПоказательПоСтроке("Р22Стр211");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр241);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр221);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр211);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр241, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр221, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр211, "Раздел22");
	
	КС = ПоказателиКС(Р22Стр241.Значение, Р22Стр211.Значение - Р22Стр221.Значение);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр211.ЗначениеСтр + " - " + Р22Стр221.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + 
		"], когда " + КС.ПраваяЧастьСтр + " > 0";
		
	УсловиеВыполнено = КС.ПраваяЧасть > 0;
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
			
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_16_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 16.3)'");
	ОписаниеКС     = НСтр("ru='Налоговая база для исчисления налога за девять месяцев (строка 242 Раздел 2.2) должна быть равна результату вычитания значения строки 222 Раздела 2.2 из величины по строке 212 Раздела 2.2, если результат этого вычитания больше 0'");
	
	Нарушение       = НСтр("ru='п. 2 и п. 7 ст. 346.18 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неверно определена налоговая база за отчетный период'");
	
	Р22Стр242 = ПоказательПоСтроке("Р22Стр242");
	Р22Стр222 = ПоказательПоСтроке("Р22Стр222");
	Р22Стр212 = ПоказательПоСтроке("Р22Стр212");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр242);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр222);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр212);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр242, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр222, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр212, "Раздел22");
	
	КС = ПоказателиКС(Р22Стр242.Значение, Р22Стр212.Значение - Р22Стр222.Значение);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр212.ЗначениеСтр + " - " + Р22Стр222.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + 
		"], когда " + КС.ПраваяЧастьСтр + " > 0";
		
	УсловиеВыполнено = КС.ПраваяЧасть > 0;
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
			
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_16_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 16.4)'");
	ОписаниеКС     = НСтр("ru='Налоговая база для исчисления налога за налоговый период (строка 243 Раздел 2.2) должна быть равна результату вычитания значения строки 223 и 230 Раздела 2.2 из величины по строке 213 Раздела 2.2, если результат этого вычитания больше 0'");
	
	Нарушение       = НСтр("ru='п. 2 и п. 7 ст. 346.18 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неверно определена налоговая база за отчетный период'");
	
	Р22Стр243 = ПоказательПоСтроке("Р22Стр243");
	Р22Стр230 = ПоказательПоСтроке("Р22Стр230");
	Р22Стр223 = ПоказательПоСтроке("Р22Стр223");
	Р22Стр213 = ПоказательПоСтроке("Р22Стр213");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр243);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр230);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр223);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр213);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр243, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр230, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр223, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр213, "Раздел22");
	
	КС = ПоказателиКС(Р22Стр243.Значение, Р22Стр213.Значение - Р22Стр223.Значение - Р22Стр230.Значение);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр213.ЗначениеСтр + " - " + Р22Стр223.ЗначениеСтр + " - " + Р22Стр230.ЗначениеСтр
		+ " Итог [" + КС.ПраваяЧастьСтр + "], когда " + КС.ПраваяЧастьСтр + " > 0";
		
	УсловиеВыполнено = КС.ПраваяЧасть > 0;
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
			
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_18_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 18.1)'");
	ОписаниеКС     = НСтр("ru='Сумма убытка, полученного за первый квартал (строка 250 Раздел 2.2) должна быть равна разнице значений по строкам 220 и 210 Раздела 2.2, если значение строки 210 Раздела 2.2 меньше значения по строке 220 Раздела 2.2'");
	
	Нарушение       = НСтр("ru='п. 2 и п. 7 ст. 346.18 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неверно определена налоговая база за отчетный период'");
	
	Р22Стр250 = ПоказательПоСтроке("Р22Стр250");
	Р22Стр220 = ПоказательПоСтроке("Р22Стр220");
	Р22Стр210 = ПоказательПоСтроке("Р22Стр210");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр250);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр220);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр210);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр250, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр220, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр210, "Раздел22");
	
	КС = ПоказателиКС(Р22Стр250.Значение, Р22Стр220.Значение - Р22Стр210.Значение);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр220.ЗначениеСтр + " - " + Р22Стр210.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + 
		"], когда " + Р22Стр210.ЗначениеСтр + " < " + Р22Стр220.ЗначениеСтр;
		
	УсловиеВыполнено = Р22Стр210.Значение < Р22Стр220.Значение;
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
			
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_18_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 18.2)'");
	ОписаниеКС     = НСтр("ru='Сумма убытка, полученного за полугодие (строка 251 Раздел 2.2) должна быть равна разнице значений по строкам 221 и 211 Раздела 2.2, если значение строки 211 Раздела 2.2 меньше значения по строке 221 Раздела 2.2'");
	
	Нарушение       = НСтр("ru='п. 2 и п. 7 ст. 346.18 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неверно определена налоговая база за отчетный период'");
	
	Р22Стр251 = ПоказательПоСтроке("Р22Стр251");
	Р22Стр221 = ПоказательПоСтроке("Р22Стр221");
	Р22Стр211 = ПоказательПоСтроке("Р22Стр211");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр251);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр221);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр211);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр251, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр221, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр211, "Раздел22");
	
	КС = ПоказателиКС(Р22Стр251.Значение, Р22Стр221.Значение - Р22Стр211.Значение);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр221.ЗначениеСтр + " - " + Р22Стр211.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + 
		"], когда " + Р22Стр211.ЗначениеСтр + " < " + Р22Стр221.ЗначениеСтр;
		
	УсловиеВыполнено = Р22Стр211.Значение < Р22Стр221.Значение;
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
			
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_18_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 18.3)'");
	ОписаниеКС     = НСтр("ru='Сумма убытка, полученного за девять месяцев (строка 252 Раздел 2.2) должна быть равна разнице значений по строкам 222 и 212 Раздела 2.2, если значение строки 212 Раздела 2.2 меньше значения по строке 222 Раздела 2.2'");
	
	Нарушение       = НСтр("ru='п. 2 и п. 7 ст. 346.18 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неверно определена налоговая база за отчетный период'");
	
	Р22Стр252 = ПоказательПоСтроке("Р22Стр252");
	Р22Стр222 = ПоказательПоСтроке("Р22Стр222");
	Р22Стр212 = ПоказательПоСтроке("Р22Стр212");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр252);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр222);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр212);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр252, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр222, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр212, "Раздел22");
	
	КС = ПоказателиКС(Р22Стр252.Значение, Р22Стр222.Значение - Р22Стр212.Значение);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр222.ЗначениеСтр + " - " + Р22Стр212.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + 
		"], когда " + Р22Стр212.ЗначениеСтр + " < " + Р22Стр222.ЗначениеСтр;
		
	УсловиеВыполнено = Р22Стр212.Значение < Р22Стр222.Значение;
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
			
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_18_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 18.4)'");
	ОписаниеКС     = НСтр("ru='Сумма убытка, полученного за налоговый период (строка 253 Раздел 2.2) должна быть равна разнице значений по строкам 223 и 213 Раздела 2.2, если значение строки 213 Раздела 2.2 меньше значения по строке 223 Раздела 2.2'");
	
	Нарушение       = НСтр("ru='п. 2 и п. 7 ст. 346.18 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неверно определена налоговая база за отчетный период'");
	
	Р22Стр253 = ПоказательПоСтроке("Р22Стр253");
	Р22Стр223 = ПоказательПоСтроке("Р22Стр223");
	Р22Стр213 = ПоказательПоСтроке("Р22Стр213");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр253);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр223);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр213);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр253, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр223, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр213, "Раздел22");
	
	КС = ПоказателиКС(Р22Стр253.Значение, Р22Стр223.Значение - Р22Стр213.Значение);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр223.ЗначениеСтр + " - " + Р22Стр213.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + 
		"], когда " + Р22Стр213.ЗначениеСтр + " < " + Р22Стр223.ЗначениеСтр;
		
	УсловиеВыполнено = Р22Стр213.Значение < Р22Стр223.Значение;
	Если УсловиеВыполнено И НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
			
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_19_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 19.1)'");
	ОписаниеКС     = НСтр("ru='Сумма исчисленного налога за первый квартал (строка 270 Раздела 2.2) должна быть равна произведению налоговой базы (строка 240 Раздел 2.2) и налоговой ставки (строка 260 Раздел 2.2) деленной на 100'");
	
	Нарушение       = НСтр("ru='п. 1 ст. 246.21 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неверно исчислена сумма налога за налоговый период'");
	
	Р22Стр270 = ПоказательПоСтроке("Р22Стр270");
	Р22Стр240 = ПоказательПоСтроке("Р22Стр240");
	Р22Стр260 = ПоказательПоСтроке("Р22Стр260");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр270);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр240);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр260);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр270, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр240, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр260, "Раздел22");
	
	КС = ПоказателиКС(Р22Стр270.Значение, Р22Стр240.Значение * Р22Стр260.Значение / 100);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр240.ЗначениеСтр + " * " + Р22Стр260.ЗначениеСтр + " / 100 Итог [" + КС.ПраваяЧастьСтр + "]";
	
	Если НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
			
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_19_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 19.2)'");
	ОписаниеКС     = НСтр("ru='Сумма исчисленного налога за полугодие (строка 271 Раздела 2.2) должна быть равна произведению налоговой базы (строка 241 Раздел 2.2) и налоговой ставки (строка 261 Раздел 2.2) деленой на 100'");
	
	Нарушение       = НСтр("ru='п. 1 ст. 246.21 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неверно исчислена сумма налога за налоговый период'");
	
	Р22Стр271 = ПоказательПоСтроке("Р22Стр271");
	Р22Стр241 = ПоказательПоСтроке("Р22Стр241");
	Р22Стр261 = ПоказательПоСтроке("Р22Стр261");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр271);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр241);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр261);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр271, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр241, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр261, "Раздел22");
	
	КС = ПоказателиКС(Р22Стр271.Значение, Р22Стр241.Значение * Р22Стр261.Значение / 100);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр241.ЗначениеСтр + " * " + Р22Стр261.ЗначениеСтр + " / 100 Итог [" + КС.ПраваяЧастьСтр + "]";
	
	Если НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
			
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_19_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 19.3)'");
	ОписаниеКС     = НСтр("ru='Сумма исчисленного налога за девять месяцев (строка 272 Раздела 2.2) должна быть равна произведению налоговой базы (строка 242 Раздел 2.2) и налоговой ставки (строка 262 Раздел 2.2) деленой на 100'");
	
	Нарушение       = НСтр("ru='п. 1 ст. 246.21 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неверно исчислена сумма налога за налоговый период'");
	
	Р22Стр272 = ПоказательПоСтроке("Р22Стр272");
	Р22Стр242 = ПоказательПоСтроке("Р22Стр242");
	Р22Стр262 = ПоказательПоСтроке("Р22Стр262");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр272);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр242);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр262);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр272, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр242, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр262, "Раздел22");
	
	КС = ПоказателиКС(Р22Стр272.Значение, Р22Стр242.Значение * Р22Стр262.Значение / 100);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр242.ЗначениеСтр + " * " + Р22Стр262.ЗначениеСтр + " / 100 Итог [" + КС.ПраваяЧастьСтр + "]";
	
	Если НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
			
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_19_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 19.4)'");
	ОписаниеКС     = НСтр("ru='Сумма исчисленного налога за налоговый период (строка 273 Раздела 2.2) должна быть равна произведению налоговой базы (строка 243 Раздел 2.2) и налоговой ставки (строка 263 Раздел 2.2) деленой на 100'");
	
	Нарушение       = НСтр("ru='п. 1 ст. 246.21 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Неверно исчислена сумма налога за налоговый период'");
	
	Р22Стр273 = ПоказательПоСтроке("Р22Стр273");
	Р22Стр243 = ПоказательПоСтроке("Р22Стр243");
	Р22Стр263 = ПоказательПоСтроке("Р22Стр263");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр273);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр243);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр263);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр273, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр243, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр263, "Раздел22");
	
	КС = ПоказателиКС(Р22Стр273.Значение, Р22Стр243.Значение * Р22Стр263.Значение / 100);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр243.ЗначениеСтр + " * " + Р22Стр263.ЗначениеСтр + " / 100 Итог [" + КС.ПраваяЧастьСтр + "]";
	
	Если НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
			
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_21(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2.2 (КС 21)'");
	ОписаниеКС     = НСтр("ru='Сумма исчисленного минимального налога за налоговый период (строка 280 Раздел 2.2) должна быть равна 1% от значения по строке 213 Раздела 2.2'");
	
	Нарушение       = НСтр("ru='п. 6 ст. 346.18 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Не исчислена сумма минимального налога за налоговый период'");
	
	Р22Стр280 = ПоказательПоСтроке("Р22Стр280");
	Р22Стр213 = ПоказательПоСтроке("Р22Стр213");
	
	Раздел22 = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр280);
	ВставитьЗначениеПоказателя(Раздел22, Р22Стр213);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р22Стр280, "Раздел22");
	ВнестиПоказательВРасшифровку(Р22Стр213, "Раздел22");
	
	КС = ПоказателиКС(Р22Стр280.Значение, Р22Стр213.Значение / 100);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Стр213.ЗначениеСтр + " * 1% Итог [" + КС.ПраваяЧастьСтр + "]";
	
	Если НЕ КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
			
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки1, Нарушение);
			
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Функция ПоказательПоСтроке(УсловныйКодПоказателя)
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	
	Если УсловныйКодПоказателя = "Р11Стр020" Тогда // Раздел 1.1
		Результат.Вставить("Имя", "П000110002003");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа к уплате по сроку не позднее 25-го апреля отчетного года'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р11Стр040" Тогда
		Результат.Вставить("Имя", "П000110004003");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа к уплате по сроку не позднее 25-го июля отчетного года'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р11Стр050" Тогда
		Результат.Вставить("Имя", "П000110005003");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа к уменьшению'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р11Стр070" Тогда
		Результат.Вставить("Имя", "П000110007003");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа к уплате по сроку не позднее 25-го октября отчетного года'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р11Стр080" Тогда
		Результат.Вставить("Имя", "П000110008003");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа к уменьшению'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р11Стр100" Тогда
		Результат.Вставить("Имя", "П000110010003");
		Результат.Вставить("Представление", НСтр("ru='Сумма налога, подлежащая доплате за налоговый период'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р11Стр110" Тогда
		Результат.Вставить("Имя", "П000110011003");
		Результат.Вставить("Представление", НСтр("ru='Сумма налога к уменьшению'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р12Стр020" Тогда // Раздел 1.2
		Результат.Вставить("Имя", "П000120002003");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа к уплате по сроку не позднее 25-го апреля отчетного года'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р12Стр040" Тогда
		Результат.Вставить("Имя", "П000120004003");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа к уплате по сроку не позднее 25-го июля отчетного года'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р12Стр050" Тогда
		Результат.Вставить("Имя", "П000120005003");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа к уменьшению'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р12Стр070" Тогда
		Результат.Вставить("Имя", "П000120007003");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа к уплате по сроку не позднее 25-го октября отчетного года'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р12Стр080" Тогда
		Результат.Вставить("Имя", "П000120008003");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа к уменьшению'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р12Стр100" Тогда
		Результат.Вставить("Имя", "П000120010003");
		Результат.Вставить("Представление", НСтр("ru='Сумма налога, подлежащая доплате за налоговый период'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р12Стр110" Тогда
		Результат.Вставить("Имя", "П000120011003");
		Результат.Вставить("Представление", НСтр("ru='Сумма налога к уменьшению'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р12Стр120" Тогда
		Результат.Вставить("Имя", "П000120012003");
		Результат.Вставить("Представление", НСтр("ru='Сумма минимального налога, подлежащая уплате за налоговый период'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р21Стр133" Тогда // Раздел 2.1
		Результат.Вставить("Имя", "П000210013303");
		Результат.Вставить("Представление", НСтр("ru='Сумма исчисленного налога за налоговый период'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р21Стр143" Тогда
		Результат.Вставить("Имя", "П000210014303");
		Результат.Вставить("Представление", НСтр("ru='Строка 143 Раздел 2.1.'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр210" Тогда // Раздел 2.2
		Результат.Вставить("Имя", "П000220021003");
		Результат.Вставить("Представление", НСтр("ru='Сумма полученных доходов нарастающим итогом'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр211" Тогда
		Результат.Вставить("Имя", "П000220021103");
		Результат.Вставить("Представление", НСтр("ru='Сумма полученных доходов нарастающим итогом'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр212" Тогда
		Результат.Вставить("Имя", "П000220021203");
		Результат.Вставить("Представление", НСтр("ru='Сумма полученных доходов нарастающим итогом'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр213" Тогда
		Результат.Вставить("Имя", "П000220021303");
		Результат.Вставить("Представление", НСтр("ru='Сумма полученных доходов нарастающим итогом'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр220" Тогда
		Результат.Вставить("Имя", "П000220022003");
		Результат.Вставить("Представление", НСтр("ru='Сумма произведенных расходов нарастающим итогом'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр221" Тогда
		Результат.Вставить("Имя", "П000220022103");
		Результат.Вставить("Представление", НСтр("ru='Сумма произведенных расходов нарастающим итогом'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр222" Тогда
		Результат.Вставить("Имя", "П000220022203");
		Результат.Вставить("Представление", НСтр("ru='Сумма произведенных расходов нарастающим итогом'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр223" Тогда
		Результат.Вставить("Имя", "П000220022303");
		Результат.Вставить("Представление", НСтр("ru='Сумма произведенных расходов нарастающим итогом'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр230" Тогда
		Результат.Вставить("Имя", "П000220023003");
		Результат.Вставить("Представление", НСтр("ru='Сумма убытка, полученного в предыдущем налоговом периоде'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр240" Тогда
		Результат.Вставить("Имя", "П000220024003");
		Результат.Вставить("Представление", НСтр("ru='Налоговая база для исчисления налога (авансового платежа по налогу)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр241" Тогда
		Результат.Вставить("Имя", "П000220024103");
		Результат.Вставить("Представление", НСтр("ru='Налоговая база для исчисления налога (авансового платежа по налогу)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр242" Тогда
		Результат.Вставить("Имя", "П000220024203");
		Результат.Вставить("Представление", НСтр("ru='Налоговая база для исчисления налога (авансового платежа по налогу)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр243" Тогда
		Результат.Вставить("Имя", "П000220024303");
		Результат.Вставить("Представление", НСтр("ru='Налоговая база для исчисления налога (авансового платежа по налогу)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр250" Тогда
		Результат.Вставить("Имя", "П000220025003");
		Результат.Вставить("Представление", НСтр("ru='Сумма полученного убытка за истекший налоговый (отчетный) период'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр251" Тогда
		Результат.Вставить("Имя", "П000220025103");
		Результат.Вставить("Представление", НСтр("ru='Сумма полученного убытка за истекший налоговый (отчетный) период'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр252" Тогда
		Результат.Вставить("Имя", "П000220025203");
		Результат.Вставить("Представление", НСтр("ru='Сумма полученного убытка за истекший налоговый (отчетный) период'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр253" Тогда
		Результат.Вставить("Имя", "П000220025303");
		Результат.Вставить("Представление", НСтр("ru='Сумма полученного убытка за истекший налоговый (отчетный) период'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр260" Тогда
		Результат.Вставить("Имя", "П000220026003");
		Результат.Вставить("Представление", НСтр("ru='Ставка налога (%)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр261" Тогда
		Результат.Вставить("Имя", "П000220026103");
		Результат.Вставить("Представление", НСтр("ru='Ставка налога (%)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр262" Тогда
		Результат.Вставить("Имя", "П000220026203");
		Результат.Вставить("Представление", НСтр("ru='Ставка налога (%)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр263" Тогда
		Результат.Вставить("Имя", "П000220026303");
		Результат.Вставить("Представление", НСтр("ru='Ставка налога (%)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр270" Тогда
		Результат.Вставить("Имя", "П000220027003");
		Результат.Вставить("Представление", НСтр("ru='Сумма исчисленного налога (авансового платежа по налогу)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр271" Тогда
		Результат.Вставить("Имя", "П000220027103");
		Результат.Вставить("Представление", НСтр("ru='Сумма исчисленного налога (авансового платежа по налогу)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр272" Тогда
		Результат.Вставить("Имя", "П000220027203");
		Результат.Вставить("Представление", НСтр("ru='Сумма исчисленного налога (авансового платежа по налогу)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр273" Тогда
		Результат.Вставить("Имя", "П000220027303");
		Результат.Вставить("Представление", НСтр("ru='Сумма исчисленного налога (авансового платежа по налогу)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р22Стр280" Тогда
		Результат.Вставить("Имя", "П000220028003");
		Результат.Вставить("Представление", НСтр("ru='Сумма исчисленного минимального налога за налоговый период (ставка налога 1%)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель)
	
	Если ИсточникДанных.Свойство(Показатель.Имя) Тогда
		ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Процедура ВнестиПоказательВРасшифровку(Показатель, ИмяСтраницы, НомерСтраницы = Неопределено)
	
	ПредставлениеПоказателя = Показатель.Представление;
	
	ЗначениеПоказателя = ?(ТипЗнч(Показатель.Значение) = Тип ("Дата"), Показатель.ЗначениеСтр, Показатель.Значение);
	
	Если Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		ПредставлениеПоказателя,
		ЗначениеПоказателя,
		"",
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
		ИмяСтраницы,
		Неопределено,
		НомерСтраницы,
		СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
	ЭтоОшибка, Описание = Неопределено, Нарушение = Неопределено, Коммент = Неопределено)
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Описание));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Нарушение));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	СтруктураОшибок.Вставить("Комментарий" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Коммент);
	
КонецПроцедуры

&НаСервере
Функция ЧислоСтрЧГ0(ПреобразуемоеЧисло)
	
	Возврат Формат(ПреобразуемоеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаСервере
Функция ПоказателиКС(ЛеваяЧасть, ПраваяЧасть, РазмерЛев = Истина, РазмерПрав = Истина)
	
	ПоказателиКС = Новый Структура();
	
	Если РазмерЛев Тогда 
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть);
	КонецЕсли;
	
	Если РазмерПрав Тогда 
		ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть);
	КонецЕсли;
	
	ПоказателиКС.Вставить("ЛеваяЧасть", ЛеваяЧасть);
	ПоказателиКС.Вставить("ЛеваяЧастьСтр", Формат(ЛеваяЧасть, "ЧРД=,; ЧН="));
	
	ПоказателиКС.Вставить("ПраваяЧасть", ПраваяЧасть);
	ПоказателиКС.Вставить("ПраваяЧастьСтр", Формат(ПраваяЧасть, "ЧРД=,; ЧН="));
	
	Возврат ПоказателиКС;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры