&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	// вспомогательные реквизиты, для избежания повторных вычислений
	СтруктураРеквизитовФормы.НаименованиеОтчета      = Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7);
    СтруктураРеквизитовФормы.НаименованиеФормыОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета"));
    СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2009Кв1";
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2));
		
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураДанныхТитульный     = Новый Структура;
	СтруктураДанныхРаздел1       = Новый Структура;
	СтруктураДанныхРаздел2       = Новый Структура;
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
		
	мСтруктураМногостраничныхРазделов  = Новый Структура;
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "12/03/2009";
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = "1152017";
	
	ВариантыФорматовВыгрузки = Новый СписокЗначений;
	ВариантыФорматовВыгрузки.Добавить("СхемаВыгрузки501", "Формат 5.01", Истина);
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;

	ИмяРаздела = "Титульный";
		
	ТабличныйДокумент.Вывести(Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(СтруктураРеквизитовФормы.НаименованиеФормыОтчета + "_" + ИмяРаздела));

	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация       		  = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
		
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияОтчета");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета");
	СтруктураРеквизитовФормы.Вставить("НаименованиеФормыОтчета");
    СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
    СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
    СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
    СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("ИПИспользуетТрудНаемныхРаботников");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ВПрограммеИзмененаОрганизация", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");	
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;

	ЗаполнитьНачальныеНастройки();

	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	НомерКорректировки = 0;

	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
    
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
		КонецЕсли;
				
		Модифицированность = Истина;
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);

	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();

	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	И НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма))
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
	 
		ЗаполнитьПустыеСтруктурыДанных();
		ЗаполнитьСведенияОбОрганизации();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		ЗаполнитьСведенияОбОрганизации();
		
	КонецЕсли;
				
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета < '20110101' Тогда
		ТабличныйДокумент.Области.стрПриказ.Значение = "Утверждена приказом Минфина РФ от 22.06.2009 г. №58н";
	Иначе
		ТабличныйДокумент.Области.стрПриказ.Значение = "Утверждена приказом Минфина РФ от 22.06.2009 г. №58н
													   |(в ред. приказа Минфина РФ от 20.04.2011 г. №48н)";
	КонецЕсли;
		
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;

	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	СтруктураРеквизитовФормы.ИПИспользуетТрудНаемныхРаботников = РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(СтруктураРеквизитовФормы.Организация);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьАвтоНаСервере();
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрименяетсяФормат503(ДатаПериода)
	
	Возврат (ДатаПериода >= '2013-01-01');
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
				
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет("Списки2009Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	
	//Раздел 1
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000103", 1, , "Выбор объекта налогообложения", КоллекцияСписковВыбора["ОН"]);
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2011 Тогда
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010002003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК1_2011"]);
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010008003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК2_2011"]);	
	Иначе
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010002003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК1_2009"]);
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010008003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК2_2009"]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			  								 = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения 		     = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения    = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий											 = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();

		КонецЕсли;
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);

	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();

	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
		
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
                                 	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность   = Ложь;
		                         	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	
	ЕдиницаИзмерения = Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	Если ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 10; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 10; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 10; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
                                 
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
                                 		
		ИмяПоляТаблДокумента		= СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
                                 		
		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		                         
	КонецЦикла;

	ИзменитьФорматПоказателей(Форма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)

	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
		                         
	Если СокрЛП(ТабличныйДокумент.Области.Период.Значение) = "" ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		ТабличныйДокумент.Области.Период.Значение = "34";
		
	КонецЕсли;
	  	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ТабличныйДокумент.Области.ОтчетГод.Значение = ОтчетныйГод;
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
		                         
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ИзмененаДатаПодписи = Ложь)

	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКАТО, ОКТМО";
		
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	Если НЕ ИзмененаДатаПодписи Тогда
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		ТабличныйДокумент.Области["ИНН1"].Значение = ИНН;
				
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		ТабличныйДокумент.Области["КПП1"].Значение = КПП;
                                 		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["КодИМНС"].Значение = КодНО;
                                 		
		ПоМесту = "   ";
		Если СведенияОбОрганизации.ТипНП = 1 Тогда
			ПоМесту = "210";
		ИначеЕсли СведенияОбОрганизации.ТипНП = 3 Тогда
			ПоМесту = "120";                           		
		КонецЕсли;
		
		ТабличныйДокумент.Области["ПоМесту"].Значение = ПоМесту;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
			
		ТабличныйДокумент.Области.НаимОрг.Значение = НаименованиеОрганизации;
		
		ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
					
		ЗаполнитьСведенияОПодписантах();
							
	КонецЕсли;
	
	Если НЕ ТабличныйДокумент.Области.Найти("ОКВЭД") = Неопределено Тогда
	
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
																	 
	КонецЕсли;																 
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхРаздел1.П000010001003)
		ИЛИ СтруктураРеквизитовФормы.ВПрограммеИзмененаОрганизация Тогда
		
		КодТерриториальногоОбразования = ?(ПрименяетсяФормат503(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), СведенияОбОрганизации.ОКТМО, СведенияОбОрганизации.ОКАТО);
		Если НЕ ПрименяетсяФормат503(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
			КодТерриториальногоОбразования = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КодТерриториальногоОбразования, 11, "0", 1);
		КонецЕсли;
		СтруктураДанныхРаздел1.Вставить("П000010001003", СокрЛП(КодТерриториальногоОбразования));		
		
	КонецЕсли;
	
	ОбъектНалогообложенияУСН = ПолучитьОбъектНалогообложенияУСН(ЭтаФорма);

	Раздел1 = СтруктураДанныхРаздел1;
	Раздел2 = СтруктураДанныхРаздел2;
	
	Если ОбъектНалогообложенияУСН = 1 Тогда

		Раздел1.Вставить("П000010000103", "1");
		
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2011 Тогда
			Раздел1.Вставить("П000010002003", "18210501011011000110");
		Иначе
			Раздел1.Вставить("П000010002003", "18210501012011000110");
		КонецЕсли;
					
		Раздел2.Вставить("П000020020103", 6);
		
	ИначеЕсли ОбъектНалогообложенияУСН = 2 Тогда
		
		Раздел1.Вставить("П000010000103", "2");
		
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2011 Тогда
			Раздел1.Вставить("П000010002003", "18210501021011000110");
		Иначе
			Раздел1.Вставить("П000010002003", "18210501022011000110");
		КонецЕсли;
		
		Раздел2.Вставить("П000020020103", ПолучитьСтавкуНалогаУСН(ЭтаФорма));
		
	ИначеЕсли ОбъектНалогообложенияУСН = 0 Тогда

		Раздел1.Вставить("П000010000103", "");
		Раздел1.Вставить("П000010002003", "");
		Раздел2.Вставить("П000020020103", 0);
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Для налогоплательщика не выбран специальный налоговый режим.'");
				
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	ИзменитьФорматПоказателей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП   = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1");

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					// В многострочном блоке встречаются строки, которые не должны быть закрашены в стандартный зеленый цвет.
					
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура БлокироватьЯчейки(Форма)

	ОН = Форма.СтруктураДанныхРаздел1.П000010000103;
	
	НаимРаздела = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
                         	
	Раздел1 = Форма.СтруктураДанныхРаздел1;
	Раздел2 = Форма.СтруктураДанныхРаздел2;
	
	//// Получим объект налогообложения
	ОбъектНалогообложенияУСН = ПолучитьОбъектНалогообложенияУСН(Форма);

	Если ОН = Строка(ОбъектНалогообложенияУСН) 
		И (ОбъектНалогообложенияУСН = 1 ИЛИ ОбъектНалогообложенияУСН = 2) Тогда

		Форма.СтруктураДанныхРаздел1.Вставить("П000010000103", Строка(ОбъектНалогообложенияУСН));
		
		Если НаимРаздела = "Раздел1" Тогда
		
			Форма.ТабличныйДокумент.Области.П000010000103.Значение = Раздел1.П000010000103;
			УстановитьЦветФонаЯчейки(Форма, "П000010000103", 5);
			
		КонецЕсли;	
		
				
		Если ОбъектНалогообложенияУСН = 1 И НаимРаздела = "Раздел2" Тогда
			УстановитьЦветФонаЯчейки(Форма, "П000020020103", 5);
		ИначеЕсли НаимРаздела = "Раздел2" Тогда
			УстановитьЦветФонаЯчейки(Форма, "П000020020103", 0);
		КонецЕсли;
			
	Иначе 
		
		Если НаимРаздела = "Раздел1" Тогда
		
			УстановитьЦветФонаЯчейки(Форма, "П000010000103", 0);
		
		КонецЕсли;
		
		Если НаимРаздела = "Раздел2" Тогда

			УстановитьЦветФонаЯчейки(Форма, "П000020020103", 0);
			
		КонецЕсли;
	КонецЕсли;
			
	Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2011 Тогда
		Если ОН = "1" Тогда
			Раздел1.Вставить("П000010002003", "18210501011011000110");
		ИначеЕсли ОН = "2" Тогда
			Раздел1.Вставить("П000010002003", "18210501021011000110");
		КонецЕсли;
		
	Иначе
		Если ОН = "1" Тогда
			Раздел1.Вставить("П000010002003", "18210501012011000110");
		ИначеЕсли ОН = "2" Тогда
			Раздел1.Вставить("П000010002003", "18210501022011000110");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НаимРаздела = "Раздел1" Тогда
		
		Форма.ТабличныйДокумент.Области.П000010002003.Значение = Раздел1.П000010002003;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФорматПоказателейНаСервере(ИмяРаздела)
	
	ИзменитьФорматПоказателей(ЭтаФорма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьФорматПоказателей(Форма, НаимРаздела)
                                 	
	Если Лев(НаимРаздела,6) <> "Раздел" Тогда
		 Возврат;
	КонецЕсли;	
	
	НомерРаздела = Прав(НаимРаздела, 1);
                                 	
	СписокДляИзменения = Новый СписокЗначений; //список показателей с представлением нуля "0" или "-"
	
	Раздел = Форма.ТабличныйДокумент;
                                 	
	ОН = Форма.СтруктураДанныхРаздел1.П000010000103;
	
	Если НомерРаздела = "1" Тогда 	
		
		П000010006003 = Раздел.Области.П000010006003.Значение;
		П000010007003 = Раздел.Области.П000010007003.Значение;

		Если ОН = "1" Тогда
			
			Если П000010006003 = 0 И П000010007003 = 0 Тогда
				СписокДляИзменения.Добавить("П000010006003","0");
			Иначе
				СписокДляИзменения.Добавить("П000010006003","-");
			КонецЕсли;
			
		ИначеЕсли ОН = "2" Тогда
			
			Если П000010006003 = 0 И П000010007003 = 0 Тогда
				СписокДляИзменения.Добавить("П000010006003","0");
			Иначе
				СписокДляИзменения.Добавить("П000010006003","-");
			КонецЕсли;
			
		Иначе
			СписокДляИзменения.Добавить("П000010006003","-");
		КонецЕсли;
		
	Иначе
		
		П000020024003 = Раздел.Области.П000020024003.Значение;
	    П000020025003 = Раздел.Области.П000020025003.Значение;
		
		Если ОН = "1" Тогда
			
			СписокДляИзменения.Добавить("П000020020103","0");
			СписокДляИзменения.Добавить("П000020021003","0");
			СписокДляИзменения.Добавить("П000020022003","-");
			
			Если П000020024003 = 0 И П000020025003 = 0 Тогда
				СписокДляИзменения.Добавить("П000020024003","0");
			Иначе
				СписокДляИзменения.Добавить("П000020024003","-");
			КонецЕсли;
			
			СписокДляИзменения.Добавить("П000020026003","0");
			СписокДляИзменения.Добавить("П000020027003","-");
			СписокДляИзменения.Добавить("П000020028003","0");
			
		ИначеЕсли ОН = "2" Тогда
			
			СписокДляИзменения.Добавить("П000020020103","0");
			СписокДляИзменения.Добавить("П000020021003","0");
			СписокДляИзменения.Добавить("П000020022003","0");
			
			Если П000020024003 = 0 И П000020025003 = 0 Тогда
				СписокДляИзменения.Добавить("П000020024003","0");
			Иначе
				СписокДляИзменения.Добавить("П000020024003","-");
			КонецЕсли;
			
			СписокДляИзменения.Добавить("П000020026003","-");
			СписокДляИзменения.Добавить("П000020027003","0");
			СписокДляИзменения.Добавить("П000020028003","-");
			
		Иначе
			
			СписокДляИзменения.Добавить("П000020020103","-");
			СписокДляИзменения.Добавить("П000020021003","-");
			СписокДляИзменения.Добавить("П000020022003","-");
			СписокДляИзменения.Добавить("П000020024003","-");
			СписокДляИзменения.Добавить("П000020026003","-");
			СписокДляИзменения.Добавить("П000020027003","-");
			СписокДляИзменения.Добавить("П000020028003","-");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Показатель Из СписокДляИзменения Цикл
		
		КодПоказателя = Показатель.Значение;
					
		ТекущийФормат = Форма.ТабличныйДокумент.Области[КодПоказателя].Формат;
		ПозЧН = СтрНайти(ТекущийФормат,"ЧН=");
		ТекЗначЧН = Сред(ТекущийФормат, ПозЧН, 4);
		НовЗначЧН = Лев(ТекЗначЧН, 3) + Показатель.Представление;
		Форма.ТабличныйДокумент.Области[КодПоказателя].Формат = СтрЗаменить(ТекущийФормат, ТекЗначЧН, НовЗначЧН);
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОбъектНалогообложенияУСН(Форма)
	
	Если (Форма.СтруктураРеквизитовФормы.Организация = Неопределено)
	 ИЛИ (Форма.СтруктураРеквизитовФормы.Организация
		= РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат 0;
	КонецЕсли;

	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "ОбъектНалогообложенияУСН");
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Форма.СтруктураРеквизитовФормы.Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, Сведения);
	
	ОбъектНалогообложенияУСН = "";
	
	ОргСведения.Свойство("ОбъектНалогообложенияУСН", ОбъектНалогообложенияУСН);
	Возврат ОбъектНалогообложенияУСН;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтавкуНалогаУСН(Форма)
	
	Если (Форма.СтруктураРеквизитовФормы.Организация = Неопределено)
	 ИЛИ (Форма.СтруктураРеквизитовФормы.Организация
		= РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат 15;
	КонецЕсли;
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтавкаНалогаУСН");
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Форма.СтруктураРеквизитовФормы.Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, Сведения);
	
	СтавкаНалогаУСН = "";
	
	ОргСведения.Свойство("СтавкаНалогаУСН", СтавкаНалогаУСН);
	Возврат ?(ЗначениеЗаполнено(СтавкаНалогаУСН), СтавкаНалогаУСН, 15);
	
КонецФункции

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
    					
	Сообщение = Новый СообщениеПользователю;
								
	Сообщение.Текст = НСтр("ru='Изменилась версия формы отчета. Выполняется обновление пользовательских настроек...'");
				
	Сообщение.Сообщить();			

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
        		
		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");
				
		Сообщение.Сообщить();			

	Иначе
        		
		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");
				
		Сообщение.Сообщить();			

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
    МакетСоставаПоказателей = Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));

	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
								
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
                				
				МассивВариантовЗаполненияСтраниц.Очистить();
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);

				ЕстьИзменения = Истина;				
				
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						КодПоказателяПоСтруктуре = СтрокаТаблицы.КодПоказателяПоСтруктуре;

						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда	
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Выгрузить();

					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;
		
		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
			
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, Элементы.Страницы.ТекущаяСтраница, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, Элементы.Страницы.ТекущаяСтраница, ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
    	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел3_Прил1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы31;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел3_Прил2" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы32;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы4;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы5;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел6" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы6;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел7" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы7;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
    	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	БлокироватьЯчейки(ЭтаФорма);
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()

	ПроверитьТочность();
	
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		УстановитьФорматВыводаВПоляхВводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
      		
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры
    
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")

	Если Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		
		Возврат; 
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		ИзменитьФорматПоказателей(Форма, ИмяСтраницыПанели);
		
		Возврат;
		
	КонецЕсли;	
	  	
	Раздел  = Форма.ТабличныйДокумент;
    Раздел1 = Форма.СтруктураДанныхРаздел1;
	Раздел2 = Форма.СтруктураДанныхРаздел2;
	  	
	// Занесем данные текущего раздела в структуру, чтобы избежать в дальнейшем обращения к областям.
	Если ИмяСтраницыПанели = "Раздел1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
			
			Раздел1.Вставить("П000010000103", Раздел.Области.П000010000103.Значение);
			Раздел1.Вставить("П000010005003", Раздел.Области.П000010005003.Значение);
			
		Иначе
			
			Если НЕ Раздел1.Свойство("П000010000103") Тогда
				Раздел1.Вставить("П000010000103", 0);
			КонецЕсли;	
			
			Если НЕ Раздел1.Свойство("П000010005003") Тогда
				Раздел1.Вставить("П000010005003", 0);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если НЕ Раздел2.Свойство("П000020020103") Тогда
			Раздел2.Вставить("П000020020103", 0);
		КонецЕсли;
		
		Если НЕ Раздел2.Свойство("П000020021003") Тогда
			Раздел2.Вставить("П000020021003", 0);
		КонецЕсли;
		
		Если НЕ Раздел2.Свойство("П000020022003") Тогда
			Раздел2.Вставить("П000020022003", 0);
		КонецЕсли;
		
		Если НЕ Раздел2.Свойство("П000020023003") Тогда
			Раздел2.Вставить("П000020023003", 0);
		КонецЕсли;
		
		Если НЕ Раздел2.Свойство("П000020026003") Тогда
			Раздел2.Вставить("П000020026003", 0);
		КонецЕсли;
		
		Если НЕ Раздел2.Свойство("П000020027003") Тогда
			Раздел2.Вставить("П000020027003", 0);
		КонецЕсли;
		
		Если НЕ Раздел2.Свойство("П000020028003") Тогда
			Раздел2.Вставить("П000020028003", 0);
		КонецЕсли;
		          		
	ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			
			Раздел2.Вставить("П000020020103", Раздел.Области.П000020020103.Значение);
			Раздел2.Вставить("П000020021003", Раздел.Области.П000020021003.Значение);
			Раздел2.Вставить("П000020022003", Раздел.Области.П000020022003.Значение);
			Раздел2.Вставить("П000020023003", Раздел.Области.П000020023003.Значение);
			Раздел2.Вставить("П000020026003", Раздел.Области.П000020026003.Значение);
			Раздел2.Вставить("П000020027003", Раздел.Области.П000020027003.Значение);
			Раздел2.Вставить("П000020028003", Раздел.Области.П000020028003.Значение);
			
		Иначе
			
			Если НЕ Раздел2.Свойство("П000020020103") Тогда
				Раздел2.Вставить("П000020020103", 0);
			КонецЕсли;
			Если НЕ Раздел2.Свойство("П000020021003") Тогда
				Раздел2.Вставить("П000020021003", 0);
			КонецЕсли;
			Если НЕ Раздел2.Свойство("П000020022003") Тогда
				Раздел2.Вставить("П000020022003", 0);
			КонецЕсли;
			Если НЕ Раздел2.Свойство("П000020023003") Тогда
				Раздел2.Вставить("П000020023003", 0);
			КонецЕсли;
			Если НЕ Раздел2.Свойство("П000020026003") Тогда
				Раздел2.Вставить("П000020026003", 0);
			КонецЕсли;
			Если НЕ Раздел2.Свойство("П000020027003") Тогда
				Раздел2.Вставить("П000020027003", 0);
			КонецЕсли;
			Если НЕ Раздел2.Свойство("П000020028003") Тогда
				Раздел2.Вставить("П000020028003", 0);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Раздел1.Свойство("П000010003003") Тогда
			Раздел1.Вставить("П000010003003", 0);
		КонецЕсли;
		
		Если НЕ Раздел1.Свойство("П000010004003") Тогда
			Раздел1.Вставить("П000010004003", 0);
		КонецЕсли;
		
		Если НЕ Раздел1.Свойство("П000010005003") Тогда
			Раздел1.Вставить("П000010005003", 0);
		КонецЕсли;
		
		Если НЕ Раздел1.Свойство("П000010006003") Тогда
			Раздел1.Вставить("П000010006003", 0);
		КонецЕсли;
		
		Если НЕ Раздел1.Свойство("П000010007003") Тогда
			Раздел1.Вставить("П000010007003", 0);
		КонецЕсли;
		
		Если НЕ Раздел1.Свойство("П000010008003") Тогда
			Раздел1.Вставить("П000010008003", 0);
		КонецЕсли;
		
		Если НЕ Раздел1.Свойство("П000010009003") Тогда
			Раздел1.Вставить("П000010009003", 0);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "" Тогда
				
		Расчет(Форма, "Раздел2");
		Расчет(Форма, "Раздел1");
				
	КонецЕсли;
	
	ОН = Раздел1.П000010000103;
	  	
	// Рассчитываем Раздел 2
    РасчетРаздела2НеТребуется = ОбластьИмя = "П000020028000" Или ОбластьИмя = "П000010001000" Или ОбластьИмя = "П000010003000"
	        				Или ОбластьИмя = "П000010004000" Или ОбластьИмя = "П000010005000";
		  			  
	Если Не РасчетРаздела2НеТребуется Тогда
		                      				
		ОкрП000020021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Раздел2.П000020021003);
		ОкрП000020022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Раздел2.П000020022003);
		ОкрП000020023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Раздел2.П000020023003);
		
		Строка240 = 0;
		Строка250 = 0;
		Строка270 = 0;

		Если ОН = "1" Тогда
			Строка240 = ОкрП000020021003;
			
		ИначеЕсли ОН = "2" Тогда
			Строка240 = Макс(ОкрП000020021003 - ОкрП000020022003 - ОкрП000020023003, 0);
			Строка250 = Макс(ОкрП000020022003 - ОкрП000020021003, 0);
			Строка270 = ОкрП000020021003 * 1 / 100;
		КонецЕсли;
		                                                     
		ОкрП000020024003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, строка240);
		Строка260 =  ОкрП000020024003 * Раздел2.П000020020103 / 100;

		Раздел2.Вставить("П000020024003" , Строка240);
		Раздел2.Вставить("П000020025003" , Строка250);
		Раздел2.Вставить("П000020026003" , Строка260);
        Раздел2.Вставить("П000020027003" , Строка270);
		
		Если ИмяСтраницыПанели = "Раздел2" Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			
				Раздел.Области.П000020024003.Значение = Строка240;
				Раздел.Области.П000020025003.Значение = Строка250;
				Раздел.Области.П000020026003.Значение = Строка260;
				Раздел.Области.П000020027003.Значение = Строка270;
				
			Иначе
				
				Раздел2.Вставить("П000020024003", Строка240);
				Раздел2.Вставить("П000020025003", Строка250);
				Раздел2.Вставить("П000020026003", Строка260);
				Раздел2.Вставить("П000020027003", Строка270);
				
			КонецЕсли;
						
		КонецЕсли;	
		   		  
	КонецЕсли;

	// Рассчитываем Раздел 1
	
	ОкрП000010005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Раздел1.П000010005003);
	ОкрП000020026003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Раздел2.П000020026003);
	ОкрП000020027003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Раздел2.П000020027003);
	ОкрП000020028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Раздел2.П000020028003);
	
	Строка60 = 0;
	Строка70 = 0;
	Строка90 = 0;
	
	//строки 60, 70, 90
	Если ОН = "1" Тогда
		
		Строка60 = Макс(ОкрП000020026003 - ОкрП000020028003 - ОкрП000010005003, 0);
		Строка70 = Макс(ОкрП000010005003 - (ОкрП000020026003 - ОкрП000020028003), 0);
		
	ИначеЕсли ОН = "2" Тогда
		
		Если ОкрП000020026003 >= ОкрП000020027003 Тогда
			Строка60 = Макс(ОкрП000020026003 - ОкрП000010005003, 0);
			Строка70 = Макс(ОкрП000010005003 - ОкрП000020026003, 0);
		Иначе
			Строка70 = ОкрП000010005003;
			Строка90 = ОкрП000020027003;
		КонецЕсли;
		
	КонецЕсли;
	
	Раздел1.Вставить("П000010006003" , Строка60);
	Раздел1.Вставить("П000010007003" , Строка70);
	Раздел1.Вставить("П000010009003" , Строка90);
	
	Если ИмяСтраницыПанели = "Раздел1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		
			Раздел.Области.П000010006003.Значение = Строка60;
			Раздел.Области.П000010007003.Значение = Строка70;
			Раздел.Области.П000010009003.Значение = Строка90;
			
		Иначе
			
			Раздел1.Вставить("П000010006003", Строка60);
			Раздел1.Вставить("П000010007003", Строка70);
			Раздел1.Вставить("П000010009003", Строка90);
			
		КонецЕсли;
				
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
		ИзменитьФорматПоказателей(Форма, ИмяСтраницыПанели);
	КонецЕсли;
			                      	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	СтавкаНалогаДоЗаполненияСведенийОбОрганизации    = 0;
	СтавкаНалогаПослеЗаполненияСведенийОбОрганизации = 0;
	
	СтруктураДанныхРаздел2.Свойство("П000020020103", СтавкаНалогаДоЗаполненияСведенийОбОрганизации);
	
	СтруктураРеквизитовФормы.ВПрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
	
	СтруктураРеквизитовФормы.ВПрограммеИзмененаОрганизация = Ложь;
	
	БлокироватьЯчейки(ЭтаФорма);
	
	Если СтруктураДанныхРаздел2.Свойство("П000020020103", СтавкаНалогаПослеЗаполненияСведенийОбОрганизации) Тогда
		Если СтавкаНалогаДоЗаполненияСведенийОбОрганизации
		  <> СтавкаНалогаПослеЗаполненияСведенийОбОрганизации Тогда
			РасчетНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
		
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		           		
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность                  = Истина;
	Иначе
		Элементы.Обновить.Доступность                  = Ложь;
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение) Экспорт
    			
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел2.Очистить();
				
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
    ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
    	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа.
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
    	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);

КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)

	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;

	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры
              
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = Область.Имя;

	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяЯчейки);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
				
		ТребРезультат = 0;
		Если КодПоказателя = "П000010002003" Тогда
			//код КБК 1 раздела 1	
			//Объект налогообложения
			Критерий1 = ТабличныйДокумент.Области.П000010000103.Значение;
			
			Если Критерий1 = "1" Тогда
				ТребРезультат = 1;	
			ИначеЕсли Критерий1 = "2" Тогда
				ТребРезультат = 2;	
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребРезультат <> 0 Тогда
			//из ТЗВыбора удаляются элементы, у которых результат отличается от нуля и ТребРезультат
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
					ТЗВыбора.Удалить(ЭлементТЗ);
			 	КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
				
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	

	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	Модифицированность = Истина;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
		
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяПоказателя = "ОКВЭД" Тогда
				
		Если НЕ ПустаяСтрока(Область.Значение) И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда	
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);

			Сообщение.Сообщить();

		КонецЕсли;
		
	КонецЕсли;
	
	Если Область.Имя = "П000010001003" И НЕ ПрименяетсяФормат503(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) И ЗначениеЗаполнено(Область.Значение) Тогда	
		ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
		Для Инд = ДлинаЗначения + 1 По 11 Цикл
			Область.Значение = СокрЛП(Область.Значение) + "0";
		КонецЦикла;
	КонецЕсли;
						  	
	Если ИмяПоказателя = "П000010000103" Тогда
		
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2011 Тогда
			Если ЗначПоказателя = "1" Тогда
				ТабличныйДокумент.Области.П000010002003.Значение = "18210501011011000110";	
			ИначеЕсли ЗначПоказателя = "2" Тогда		
				ТабличныйДокумент.Области.П000010002003.Значение = "18210501021011000110";	
			КонецЕсли;
		Иначе
			Если ЗначПоказателя = "1" Тогда
				ТабличныйДокумент.Области.П000010002003.Значение = "18210501012011000110";	
			ИначеЕсли ЗначПоказателя = "2" Тогда		
				ТабличныйДокумент.Области.П000010002003.Значение = "18210501022011000110";	
			КонецЕсли;
		КонецЕсли;
		
		ИзменитьФорматПоказателейНаСервере(ИмяРаздела);
				
	КонецЕсли;
	
	Если ИмяПоказателя = "П000020028003" Тогда
		П000020026003 = ТабличныйДокумент.Области.П000020026003.Значение;
		Если (НЕ СтруктураРеквизитовФормы.ИП ИЛИ (СтруктураРеквизитовФормы.ИП И СтруктураРеквизитовФормы.ИПИспользуетТрудНаемныхРаботников))
		   И РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначПоказателя) > РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, П000020026003) * 0.5  Тогда
			
			Ответ = Неопределено;

			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСуммаУплаченныхНалоговУменьшаетЗавершение", ЭтотОбъект, Новый Структура("ЗначПоказателя, ИмяПоказателя, ИмяРаздела, Область, П000020026003", ЗначПоказателя, ИмяПоказателя, ИмяРаздела, Область, П000020026003));
			ТекстВопроса = НСтр("ru='Сумма уплаченных за налоговый (отчетный) период страховых
					|взносов на обязательное пенсионное страхование, а также
					|выплаченных работникам в течение налогового (отчетного)
					|периода из средств налогоплательщика пособий по временной
					|нетрудоспособности, уменьшает сумму исчисленного налога
					|по коду стр.260 более чем на 50%. Исправить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			Если ЗначПоказателя = "1" Тогда
				П000020026003 = ТабличныйДокумент.Области.П000020026003.Значение;
			ИначеЕсли ЗначПоказателя = "2" Тогда		
				ТабличныйДокумент.Области.П000010002003.Значение = "18210501021011000110";	
			КонецЕсли;
			ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаЗавершение(ЗначПоказателя, ИмяПоказателя, ИмяРаздела, Область);
		КонецЕсли;
	Иначе
		ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаЗавершение(ЗначПоказателя, ИмяПоказателя, ИмяРаздела, Область);
	КонецЕсли;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		ДатаПодписиПриИзмененииНаСервере();
		
	КонецЕсли;
	
	Если ИмяПоказателя = "НомерКорректировки" Тогда	
			
		НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
			
		СтруктураРеквизитовФормы.ВидДокумента = ?(Область.Значение = 0, 0, 1);
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		
		Модифицированность = Истина;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросСуммаУплаченныхНалоговУменьшаетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	ЗначПоказателя = ДополнительныеПараметры.ЗначПоказателя;
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	Область = ДополнительныеПараметры.Область;
	П000020026003 = ДополнительныеПараметры.П000020026003;
	
	Если  РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Область.Значение = Цел(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, П000020026003) * 0.5);
	КонецЕсли;
	Если ЗначПоказателя = "1" Тогда
		П000020026003 = ТабличныйДокумент.Области.П000020026003.Значение;
	ИначеЕсли ЗначПоказателя = "2" Тогда		
		ТабличныйДокумент.Области.П000010002003.Значение = "18210501021011000110";	
	КонецЕсли;
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаЗавершение(ЗначПоказателя, ИмяПоказателя, ИмяРаздела, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаЗавершение(ЗначПоказателя, ИмяПоказателя, ИмяРаздела, Область)
	
	СвойстваПоказателя = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если СвойстваПоказателя <> Неопределено И СвойстваПоказателя.ТаблицаЗначений.Количество() > 0 Тогда
		КодПоказателя = СвойстваПоказателя.Показатель;
		КопироватьДанныеФормы(СвойстваПоказателя.ТаблицаЗначений, ТЗВыбора);
		
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		Если ЭлТЗВыбора.Количество() > 0 И РегламентированнаяОтчетностьКлиентСервер.ЯвляетсяЧислом(ЭлТЗВыбора[0].РезультатПроверки) Тогда
			ЭлТЗВыбора = ЭлТЗВыбора[0];
			
			Рез = Число(ЭлТЗВыбора.РезультатПроверки);
			Если Рез > 0 Тогда
				
				ТЗКритерии.Очистить();
				
				Если КодПоказателя = "П000010002003" Тогда
					Если Рез = 1 Тогда
						
						НовСтрока = ТЗКритерии.Добавить();
						НовСтрока.ОбластьЗначение = ТабличныйДокумент.Области.П000010000103.Значение;
						НовСтрока.ТребЗнач = "1";
						
					ИначеЕсли Рез = 2 Тогда
						
						НовСтрока = ТЗКритерии.Добавить();
						НовСтрока.ОбластьЗначение = ТабличныйДокумент.Области.П000010000103.Значение;
						НовСтрока.ТребЗнач = "2";
						
					КонецЕсли;
				КонецЕсли;
				
				Для каждого Критерий Из ТЗКритерии Цикл
					Если Критерий.ОбластьЗначение <> Критерий.ТребЗнач Тогда
						Критерий.ОбластьЗначение = Критерий.ТребЗнач;
						ТабличныйДокумент.Области.П000010000103.Значение = Критерий.ОбластьЗначение;
					КонецЕсли;   
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СвойстваПоказателя <> Неопределено Тогда
		КодКритерия = СвойстваПоказателя.Показатель;
		ЗначКритерия = Область.Значение;
		
		ТЗЗависимЗнач.Очистить();
		
		Если КодКритерия = "П000010000103" Тогда
			
			Если ЗначКритерия = "1" Тогда
				
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ОбластьПоказателяИмя = ТабличныйДокумент.Области.П000010002003.Имя;
				НовСтрока.ОбластьПоказателяЗначение = ТабличныйДокумент.Области.П000010002003.Значение;
				НовСтрока.ТребРез = 1;
				
			ИначеЕсли ЗначКритерия = "2" Тогда
				
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ОбластьПоказателяИмя = ТабличныйДокумент.Области.П000010002003.Имя;
				НовСтрока.ОбластьПоказателяЗначение = ТабличныйДокумент.Области.П000010002003.Значение;
				НовСтрока.ТребРез = 2;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для каждого ЗависимЗнач Из ТЗЗависимЗнач Цикл
			СвойстваЗависимогоПоказателя = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ЗависимЗнач.ОбластьПоказателяИмя);
			Если СвойстваЗависимогоПоказателя <> Неопределено И СвойстваЗависимогоПоказателя.ТаблицаЗначений.Количество() > 0 Тогда
				СтрокаСписка=СвойстваЗависимогоПоказателя.ТаблицаЗначений.НайтиСтроки(Новый Структура("Код", СокрЛП(Строка(ЗависимЗнач.ОбластьПоказателяЗначение))));
				Если СтрокаСписка.Количество() > 0 Тогда
					СтрокаСписка = СтрокаСписка[0];
					Рез = ?(СтрокаСписка.РезультатПроверки = "",0,Число(СтрокаСписка.РезультатПроверки));
					Если РегламентированнаяОтчетностьКлиентСервер.ЯвляетсяЧислом(Рез) И Рез > 0 Тогда
						Если ЗависимЗнач.ТребРез <> Рез Тогда
							ЗависимЗнач.ОбластьПоказателяЗначение = "";
							ТабличныйДокумент.Области.П000010002003.Значение = ЗависимЗнач.ОбластьПоказателяЗначение;
						КонецЕсли;					
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;                            		
		
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомерКорректировки) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , ПоказателиОтчета);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета             = Метаданные.Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета         = Метаданные.Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала                 = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания              = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность              = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма             = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация                = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения           = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий                = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана        = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        				= КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                        = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида          = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);	
		
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
		
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);

	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
    	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");

		Сообщение.Сообщить();

		Возврат Ложь;
		
	КонецЕсли;
		
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;

	СоответствиеРазделовМакетам.Вставить("Раздел1",		"МЧБ_2009Кв1_2");
	
	Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета < '20110101' Тогда  
		СоответствиеРазделовМакетам.Вставить("Титульный", "МЧБ_2009Кв1_1");
		СоответствиеРазделовМакетам.Вставить("Раздел2",	  "МЧБ_2009Кв1_3");		
	Иначе
		СоответствиеРазделовМакетам.Вставить("Титульный", "МЧБ_2009Кв1_1_2010");
		СоответствиеРазделовМакетам.Вставить("Раздел2",	  "МЧБ_2009Кв1_3_2010");
	КонецЕсли;
	    	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
		
	МакетМЧБ = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу = 5;
	МакетМЧБ.ПолеСлева = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
					
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
    		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;

	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	// особая обработка ФИО на титульном листе
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
		
	// особая обработка ОКВЭД
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
						ЗначениеВыведено = Истина;
					КонецЕсли;
				Иначе
				
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);

					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
					Дополнять_ = НЕ (Лев(РезультатПоиска.Имя, СтрДлина("НомСтр")) = "НомСтр"
								ИЛИ Лев(РезультатПоиска.Имя, СтрДлина("СоставленаНа")) = "СоставленаНа");
				Иначе
					Дополнять_ = Лев(РезультатПоиска.Имя, СтрДлина("НомСтр")) <> "НомСтр";
				КонецЕсли;
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, , Дополнять_);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
		
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатныеЛисты[0].Значение, СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=dd.MM.yyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, Дополнять_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(Дополнять_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) И Дополнять_ Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;

	ТаблДок = ЭтаФорма[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(СтруктураПараметровЛиста.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	КонецЕсли;
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	        	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
			
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",		РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
		
	Год_мДатаКонцаПериодаОтчета = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
	Если ПрименяетсяФормат503(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда	
		ПараметрыВыгрузки.Вставить("ВерсФорм", "5.03");
	Иначе
		Если Год_мДатаКонцаПериодаОтчета < 2011 Тогда
			ПараметрыВыгрузки.Вставить("ВерсФорм", "5.01");
		Иначе
			ПараметрыВыгрузки.Вставить("ВерсФорм", "5.02");
		КонецЕсли;
	КонецЕсли;
	                         	
	ПараметрыВыгрузки.Вставить("КНД",			"1152017");
	ПараметрыВыгрузки.Вставить("ДатаДок",		Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч",	Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",		СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",		СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("ВидДок",		Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",		СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭДОрг",		СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("ТелОрг",		СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",		СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",		СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",		СокрЛП(Титульный.КПП1));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",	СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",		ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",			ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП",	ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",		НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",		?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",		СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",		ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",			ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта",	ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",				"NO_USN_1_030_00_05_01_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_USN");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "УСН");
	
	ПараметрыВыгрузки.Вставить("ИдФайл",		СформироватьИдФайл(ПараметрыВыгрузки));

	ПараметрыВыгрузки.Вставить("ОбНал",			СокрЛП(мДанныеОтчета.ПолеТабличногоДокументаРаздел1.П000010000103));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет =Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет("СхемаВыгрузки501");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("210");
	
	ВозможныеКодыПериода = Новый Массив;
	ВозможныеКодыПериода.Добавить("34");
	ВозможныеКодыПериода.Добавить("50");
	
	Титульный		= мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1			= мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2			= мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	// проверка показателей титульного листа
	Если ПустаяСтрока(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации!", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ПериодОтч) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код отчетного периода!", "Титульный", "Период1");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.ПериодОтч) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код отчетного периода!", "Титульный", "Период1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указан налогоплательщик!", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.КодИФНС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода вида деятельности по ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта!", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// проверка показателей раздела 1
	ОбНал = СокрЛП(Раздел1.П000010000103);
	Если ОбНал <> "1" И ОбНал <> "2" Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не" + ?(НЕ ЗначениеЗаполнено(ОбНал), "", "корректно") + " задан код объекта налогообложения!", "Раздел1", "П000010000103");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ОКАТОРаздел1 = СокрЛП(Раздел1.П000010001003);
	ДлинаОКАТОРаздел1 = СтрДлина(ОКАТОРаздел1);
	
	Если ДлинаОКАТОРаздел1 <> 11 И ДлинаОКАТОРаздел1 <> 8 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не" + ?(ДлинаОКАТОРаздел1 = 0, "", "корректно") + " задан код по ОКТМО(ОКАТО)!", "Раздел1", "П000010001003");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОКАТОРаздел1) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 некорректно задан код по ОКТМО(ОКАТО)!", "Раздел1", "П000010001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	КБКРаздел1 = СокрЛП(Раздел1.П000010002003);
	ДлинаКБКРаздел1 = СтрДлина(КБКРаздел1);
	Если ДлинаКБКРаздел1 <> 20 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не" + ?(ДлинаКБКРаздел1= 0, "", "корректно") + " задан код бюджетной классификации!", "Раздел1", "П000010002003");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КБКРаздел1) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 некорректно задан код бюджетной классификации!", "Раздел1", "П000010002003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// если объект налогообложения - доходы, уменьшенные на величину расходов, то
	// проверим корректность заполнения строк с кодами 080 и 090
	Если ОбНал = "2" И ЗначениеСуммыЗаполнено(Раздел1.П000010009003) Тогда
		КБКМинРаздел1 = СокрЛП(Раздел1.П000010008003);
		ДлинаКБКМинРаздел1 = СтрДлина(КБКМинРаздел1);
		Если ДлинаКБКМинРаздел1 <> 20 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не" + ?(ДлинаКБКМинРаздел1= 0, "", "корректно") + " задан код бюджетной классификации по строке 80!", "Раздел1", "П000010008003");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КБКМинРаздел1) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 некорректно задан код бюджетной классификации по строке 80!", "Раздел1", "П000010008003");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	ПостобработкаДереваВыгрузки(ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
			+ "_" + ПараметрыВыгрузки.КодИФНС
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
			
КонецФункции

&НаСервере
Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПостобработкаДереваВыгрузки(ДеревоВыгрузки)
	
	// свертка симметричных показателей узла РасчНал2
	СоответствиеИменСимметричныхПоказателей = Новый Соответствие;
	СоответствиеИменСимметричныхПоказателей.Вставить("НалБазаУбыт2", "НалБазаУбыт");
	СоответствиеИменСимметричныхПоказателей.Вставить("НалПУ2", "НалПУ");
	
	Для Каждого Эл Из СоответствиеИменСимметричныхПоказателей Цикл
		РезультатПоиска = ДеревоВыгрузки.Строки.Найти(Эл.Ключ, "Код", Истина);
		Если РезультатПоиска <> Неопределено Тогда
			Если ЗначениеЗаполнено(РезультатПоиска.Значение) И РезультатПоиска.Значение <> "0" Тогда
				СимметричныйПоказатель = РезультатПоиска.Родитель.Строки.Найти(Эл.Значение, "Код");
				Если СимметричныйПоказатель <> Неопределено Тогда
					ТипЗначенияПоказателя = ТипЗнч(РезультатПоиска.Значение);
					Если ТипЗначенияПоказателя = Тип("Число") Тогда
						СимметричныйПоказатель.Значение = 0 - РезультатПоиска.Значение;
					ИначеЕсли ТипЗначенияПоказателя = Тип("Строка") Тогда
						СимметричныйПоказатель.Значение = ?(Лев(РезультатПоиска.Значение, 1) = "-", Сред(РезультатПоиска.Значение, 2), "-" + РезультатПоиска.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			РезультатПоиска.Родитель.Строки.Удалить(РезультатПоиска);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	СтруктурыДанных = Новый Массив;
	СтруктурыДанных.Добавить(мДанныеОтчета.ПолеТабличногоДокументаРаздел1);
	СтруктурыДанных.Добавить(мДанныеОтчета.ПолеТабличногоДокументаРаздел2);
	СовмещеннаяСтруктураДанных = СовместитьСтруктурыПараметров(СтруктурыДанных);
	
	ЗаполнитьДаннымиУзел(СовмещеннаяСтруктураДанных, УзелРодитель);
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Функция СовместитьСтруктурыПараметров(СтруктурыДаных)
	
	Результат = Новый Структура;
	Для Каждого ЕдиницаСтруктурДанных Из СтруктурыДаных Цикл
		Для Каждого КлючИЗначение Из ЕдиницаСтруктурДанных Цикл
			Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
						
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
			
	ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(СтруктураРеквизитовФормы.НаименованиеФормыОтчета + "_" + ИмяТекРаздела));
			
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета < '20110101' Тогда
			
			ТабличныйДокумент.Области.стрПриказ.Значение = "Утверждена приказом Минфина РФ от 22.06.2009 г. №58н";
					
		Иначе
			
			ТабличныйДокумент.Области.стрПриказ.Значение = "Утверждена приказом Минфина РФ от 22.06.2009 г. №58н
														   |(в ред. приказа Минфина РФ от 20.04.2011 г. №48н)";
			
		КонецЕсли;
				
	Иначе
		
		Если ИмяТекРаздела = "Раздел2" Тогда
			
			Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета < '20110101' Тогда
				
				ТабличныйДокумент.Области.стрНаименованиеСтроки280.Значение = 
				"Сумма уплаченных за налоговый период страховых взносов на обязательное
				|пенсионное страхование, а также выплаченных работникам в течение налогового
				|периода из средств налогоплательщика пособий по временной нетрудоспособности,
				|уменьшающая (но не более чем на 50%) сумму исчисленного налога
				|для стр.001=""1""";
				
			Иначе
				
				ТабличныйДокумент.Области.стрНаименованиеСтроки280.Значение = 
				"Сумма уплаченных за налоговый период страховых взносов на обязательное
				|пенсионное страхование, обязательное социальное страхование на случай
				|временной нетрудоспособности и в связи с материнством, обязательное
				|медицинское страхование, обязательное социальное страхование от несчастных
				|случаев на производстве и профессиональных заболеваний, а также выплаченных 
				|работникам в течение налогового периода из средств налогоплательщика 
				|пособий по временной нетрудоспособности, уменьшающая (но не более чем на 50%) 
				|сумму исчисленного налога для стр.001=""1""";																			    
				
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
						
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаВПоляхВводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	СохрП000010000103 = СтруктураДанныхРаздел1.П000010000103;
	
	СтруктураДанныхРаздел1.П000010000103 = "";
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураДанныхРаздел1.П000010000103 = СохрП000010000103;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	СохрП000010000103 = СтруктураДанныхРаздел1.П000010000103;
	
	СтруктураДанныхРаздел1.П000010000103 = "";
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураДанныхРаздел1.П000010000103 = СохрП000010000103;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН1, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН1 = Лев(СтруктураДанныхТитульный.ИНН1, СтрНайти(СтруктураДанныхТитульный.ИНН1, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки)
					+ СтрЗаменить(ПоказателиТаблПоле["НомерКорректировки" + Ном], "-", "");
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;				
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период" + Ном];
				СтруктураДанныхТитульный.Удалить("Период" + Ном);
			КонецЦикла;					
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;						
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;		
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;			
		ИначеЕсли ИмяПоказателя = "СоставленаНа1" Тогда
			СтруктураДанныхТитульный.Вставить("СоставленаНа");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["СоставленаНа" + Ном];
				СтруктураДанныхТитульный.Удалить("СоставленаНа" + Ном);
			КонецЦикла;			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
					
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
								
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
						
		Если ЗначениеЗаполнено(Область.Значение) Тогда
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		Иначе
			СтрДатаПодписи = "";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
									
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
		
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ СООТНООШЕНИЙ В ДЕКЛАРАЦИИ
///////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
			
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	Если СписокРасшифровкиПоказателей = Неопределено Тогда 
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда 
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	Иначе
		СписокРасшифровкиформулы.Очистить();
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;

	ПроверкаКС_1_0(СтруктураРезультата);
	ПроверкаКС_1_1(СтруктураРезультата);
	ПроверкаКС_1_2(СтруктураРезультата);
	ПроверкаКС_1_3(СтруктураРезультата);
	ПроверкаКС_1_4(СтруктураРезультата);
	ПроверкаКС_1_5(СтруктураРезультата);
	ПроверкаКС_1_6(СтруктураРезультата);
	ПроверкаКС_1_7(СтруктураРезультата);
	ПроверкаКС_1_8(СтруктураРезультата);
	ПроверкаКС_1_9(СтруктураРезультата);
	ПроверкаКС_1_10(СтруктураРезультата);
	ПроверкаКС_1_11(СтруктураРезультата);
	ПроверкаКС_1_12(СтруктураРезультата);
	ПроверкаКС_1_13(СтруктураРезультата);
	ПроверкаКС_1_14(СтруктураРезультата);
	ПроверкаКС_1_15(СтруктураРезультата);
	ПроверкаКС_1_16(СтруктураРезультата);
	ПроверкаКС_1_17(СтруктураРезультата);
	ПроверкаКС_1_18(СтруктураРезультата);
	ПроверкаКС_1_19(СтруктураРезультата);
	ПроверкаКС_1_20(СтруктураРезультата);
	ПроверкаКС_4_3_3(СтруктураРезультата);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор));
	КонецЕсли;

	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ПроверкаКС_1_0(СтруктураРезультата)
	
	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	
	СтруктураОшибок = Новый Структура;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма налога, подлежащая уплате за налоговый период (строка 060 Раздел 1) должна быть равна результату вычитания значений по строке 050 Раздела 1 и по строке 280 Раздела 2 из величины по строке 260 Раздела 2, если этот результат от вычитания больше либо равен нулю и при условии, что код строки 001 Раздела 1 равен ""1""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
		
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР1Ст060 = "П000010006003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст060]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст060 = "Сумма налога, подлежащая уплате за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст060, НаименованиеР1Ст060, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР2Ст260 = "П000020026003";
	ЗначениеР2Ст260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст260]);
	ЗначениеР2Ст260Стр = Формат(ЗначениеР2Ст260, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст260 = "Сумма исчисленного налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст260, НаименованиеР2Ст260, ЗначениеР2Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст280 = "П000020028003";
	ЗначениеР2Ст280 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст280]);
	ЗначениеР2Ст280Стр = Формат(ЗначениеР2Ст280, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст280 = "Сумма уплаченных за налоговый период страховых взносов на обязательное пенсионное страхование";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст280, НаименованиеР2Ст280, ЗначениеР2Ст280, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР1Ст050 = "П000010005003";
	ЗначениеР1Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст050]);
	ЗначениеР1Ст050Стр = Формат(ЗначениеР1Ст050, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст050 = "Сумма авансового платежа по налогу, подлежащая уплате за девять месяцев";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст050, НаименованиеР1Ст050, ЗначениеР1Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст260 - ЗначениеР2Ст280 - ЗначениеР1Ст050;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (НЕ ЗначениеР1Ст001 = "1") ИЛИ (НЕ ПраваяЧасть >= 0) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли (ЛеваяЧасть = ПраваяЧасть) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст260Стр + " - " + ЗначениеР2Ст280Стр + " - " + ЗначениеР1Ст050Стр + " Итог ["
	+ ПраваяЧастьСтр + "], когда """ + ЗначениеР1Ст001 + """ = ""1"" и " + ЗначениеР2Ст260Стр + " - "
	+ ЗначениеР2Ст280Стр + " - " + ЗначениеР1Ст050Стр + " Итог [" + ПраваяЧастьСтр + "] >= 0";
	Описание = "Неправильно исчислена сумма налога, подлежащая уплате за налоговый период";
	Нарушение = "п.3 ст. 346.21 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма налога, подлежащая уплате за налоговый период (строка 060 Раздел 1) должна быть равна нулю, если результат вычитания значений по строке 050 Раздела 1 и по строке 280 Раздела 2 из значения по строке 260 Раздела 2 меньше либо равен нулю и при условии, что код строки 001 Раздела 1 равен ""1""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
		
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР1Ст060 = "П000010006003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст060]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст060 = "Сумма налога, подлежащая уплате за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст060, НаименованиеР1Ст060, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР2Ст260 = "П000020026003";
	ЗначениеР2Ст260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст260]);
	ЗначениеР2Ст260Стр = Формат(ЗначениеР2Ст260, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст260 = "Сумма исчисленного налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст260, НаименованиеР2Ст260, ЗначениеР2Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст280 = "П000020028003";
	ЗначениеР2Ст280 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст280]);
	ЗначениеР2Ст280Стр = Формат(ЗначениеР2Ст280, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст280 = "Сумма уплаченных за налоговый период страховых взносов на обязательное пенсионное страхование";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст280, НаименованиеР2Ст280, ЗначениеР2Ст280, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР1Ст050 = "П000010005003";
	ЗначениеР1Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст050]);
	ЗначениеР1Ст050Стр = Формат(ЗначениеР1Ст050, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст050 = "Сумма авансового платежа по налогу, подлежащая уплате за девять месяцев";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст050, НаименованиеР1Ст050, ЗначениеР1Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст260 - ЗначениеР2Ст280 - ЗначениеР1Ст050;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (НЕ ЗначениеР1Ст001 = "1") ИЛИ (НЕ ПраваяЧасть <= 0) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли (ЛеваяЧасть = 0) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + "0, когда """ + ЗначениеР1Ст001 + """ = ""1"" и " + ЗначениеР2Ст260Стр + " - "
	+ ЗначениеР2Ст280Стр + " - " + ЗначениеР1Ст050Стр + " Итог [" + ПраваяЧастьСтр + "] <= 0";
	Описание = "Неправильно исчислена сумма налога, подлежащая уплате за налоговый период";
	Нарушение = "п.3 ст. 346.21 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма налога, подлежащая уплате за налоговый период (строка 060 Раздел 1) должна быть равна результату вычитания значения строки 050 Раздела 1 из величины по строке 260 Раздела 2, если значение строки 260 Раздела 2 больше либо равно значения по строке 050 Раздела 1 и больше либо равно значения по строке 270 Раздела 2, при условии, что код строки 001 Раздела 1 равен ""2""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР1Ст060 = "П000010006003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст060]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст060 = "Сумма налога, подлежащая уплате за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст060, НаименованиеР1Ст060, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР2Ст260 = "П000020026003";
	ЗначениеР2Ст260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст260]);
	ЗначениеР2Ст260Стр = Формат(ЗначениеР2Ст260, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст260 = "Сумма исчисленного налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст260, НаименованиеР2Ст260, ЗначениеР2Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст270 = "П000020027003";
	ЗначениеР2Ст270 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст270]);
	ЗначениеР2Ст270Стр = Формат(ЗначениеР2Ст270, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст270 = "Сумма исчисленного минимального налога за налоговый период (ставка налога 1%)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст270, НаименованиеР2Ст270, ЗначениеР2Ст270, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР1Ст050 = "П000010005003";
	ЗначениеР1Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст050]);
	ЗначениеР1Ст050Стр = Формат(ЗначениеР1Ст050, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст050 = "Сумма авансового платежа по налогу, подлежащая уплате за девять месяцев";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст050, НаименованиеР1Ст050, ЗначениеР1Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст260 - ЗначениеР1Ст050;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (НЕ ЗначениеР1Ст001 = "2") ИЛИ (НЕ ЗначениеР2Ст260 >= ЗначениеР1Ст050) ИЛИ (НЕ ЗначениеР2Ст260 >= ЗначениеР2Ст270) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли (ЛеваяЧасть = ПраваяЧасть) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст260Стр + " - " + ЗначениеР1Ст050Стр  + " Итог [" + ПраваяЧастьСтр 
	+ "] , когда """ + ЗначениеР1Ст001 + """ = ""2"" и " + ЗначениеР2Ст260Стр + " >= " + ЗначениеР1Ст050Стр + " и "
	+ ЗначениеР2Ст260Стр + " >= " + ЗначениеР2Ст270Стр;
	Описание = "Неправильно исчислена сумма налога, подлежащая уплате за налоговый период";
	Нарушение = "п.4 ст. 346.21 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма налога, подлежащая уплате за налоговый период (строка 060 Раздела 1) должна быть равна нулю, если значение строки 260 Раздела 2 меньше либо равно значения по строке 050 Раздела 1 и меньше либо равно значения по строке 270 Раздела 2, при условии, что код строки 001 Раздела 1 равен ""2""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР1Ст060 = "П000010006003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст060]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст060 = "Сумма налога, подлежащая уплате за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст060, НаименованиеР1Ст060, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР2Ст260 = "П000020026003";
	ЗначениеР2Ст260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст260]);
	ЗначениеР2Ст260Стр = Формат(ЗначениеР2Ст260, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст260 = "Сумма исчисленного налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст260, НаименованиеР2Ст260, ЗначениеР2Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст270 = "П000020027003";
	ЗначениеР2Ст270 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст270]);
	ЗначениеР2Ст270Стр = Формат(ЗначениеР2Ст270, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст270 = "Сумма исчисленного минимального налога за налоговый период (ставка налога 1%)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст270, НаименованиеР2Ст270, ЗначениеР2Ст270, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР1Ст050 = "П000010005003";
	ЗначениеР1Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст050]);
	ЗначениеР1Ст050Стр = Формат(ЗначениеР1Ст050, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст050 = "Сумма авансового платежа по налогу, подлежащая уплате за девять месяцев";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст050, НаименованиеР1Ст050, ЗначениеР1Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст260 - ЗначениеР1Ст050;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (НЕ ЗначениеР1Ст001 = "2") ИЛИ (НЕ ЗначениеР2Ст260 <= ЗначениеР1Ст050) ИЛИ (НЕ ЗначениеР2Ст260 <= ЗначениеР2Ст270) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли (ЛеваяЧасть = 0) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = 0, когда """ + ЗначениеР1Ст001 + """ = ""2"" и " + ЗначениеР2Ст260Стр + " <= "
	+ ЗначениеР1Ст050Стр + " и " + ЗначениеР2Ст260Стр + " <= " + ЗначениеР2Ст270Стр;
	Описание = "Неправильно исчислена сумма налога, подлежащая уплате за налоговый период";
	Нарушение = "п.4 ст. 346.21 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма налога к уменьшению за налоговый период (строка 070 Раздела 1)должна быть равна разнице значений по строке 050 Раздела 1 и результата вычитания строки 280 Раздела 2 из строки 260 Раздела 2, если результат вычитания значений по строке 050 Раздела 1 и по строке 280 Раздела 2 из значения по строке 260 Раздела 2 меньше  нуля и при условии, что код строки 001 Раздела 1 равен ""1""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР1Ст070 = "П000010007003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст070]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст070 = "Сумма налога, подлежащая уплате за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст070, НаименованиеР1Ст070, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР1Ст050 = "П000010005003";
	ЗначениеР1Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст050]);
	ЗначениеР1Ст050Стр = Формат(ЗначениеР1Ст050, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст050 = "Сумма авансового платежа по налогу, подлежащая уплате за девять месяцев";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст050, НаименованиеР1Ст050, ЗначениеР1Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст260 = "П000020026003";
	ЗначениеР2Ст260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст260]);
	ЗначениеР2Ст260Стр = Формат(ЗначениеР2Ст260, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст260 = "Сумма исчисленного налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст260, НаименованиеР2Ст260, ЗначениеР2Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст280 = "П000020028003";
	ЗначениеР2Ст280 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст280]);
	ЗначениеР2Ст280Стр = Формат(ЗначениеР2Ст280, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст280 = "Сумма уплаченных за налоговый период страховых взносов на обязательное пенсионное страхование";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст280, НаименованиеР2Ст280, ЗначениеР2Ст280, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР1Ст050 - (ЗначениеР2Ст260 - ЗначениеР2Ст280);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	ЛеваяЧастьУсловия = ЗначениеР2Ст260 - ЗначениеР2Ст280 - ЗначениеР1Ст050;
	ЛеваяЧастьУсловияСтр = Формат(ЛеваяЧастьУсловия, "ЧРД=.;ЧН=0");
	
	Если (НЕ ЗначениеР1Ст001 = "1") ИЛИ (НЕ ЛеваяЧастьУсловия < 0) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли (ЛеваяЧасть = ПраваяЧасть) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР1Ст050Стр + " - (" + ЗначениеР2Ст260Стр + " - " + ЗначениеР2Ст280Стр
	+ ") Итог [" + ПраваяЧастьСтр + "], когда """ + ЗначениеР1Ст001 + """ = ""1"" и " + ЗначениеР2Ст260Стр + " - " 
	+ ЗначениеР2Ст280Стр + " - " + ЗначениеР1Ст050Стр + " Итог [" + ЛеваяЧастьУсловияСтр + "] < 0";
	Описание = "Неправильно исчислена сумма налога, подлежащая уплате за налоговый период";
	Нарушение = "п.3 ст. 346.21 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма налога к уменьшению за налоговый период (строка 070 Раздела 1) должна быть равна нулю, если результат вычитания значений по строке 050 Раздела 1 и по строке 280 Раздела 2 из значения по строке 260 Раздела 2 больше либо равен нулю и при условии, что код строки 001 Раздела 1 равен ""1""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР1Ст070 = "П000010007003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст070]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст070 = "Сумма налога, подлежащая уплате за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст070, НаименованиеР1Ст070, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	
	ИмяР2Ст260 = "П000020026003";
	ЗначениеР2Ст260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст260]);
	ЗначениеР2Ст260Стр = Формат(ЗначениеР2Ст260, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст260 = "Сумма исчисленного налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст260, НаименованиеР2Ст260, ЗначениеР2Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст280 = "П000020028003";
	ЗначениеР2Ст280 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст280]);
	ЗначениеР2Ст280Стр = Формат(ЗначениеР2Ст280, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст280 = "Сумма уплаченных за налоговый период страховых взносов на обязательное пенсионное страхование";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст280, НаименованиеР2Ст280, ЗначениеР2Ст280, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР1Ст050 = "П000010005003";
	ЗначениеР1Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст050]);
	ЗначениеР1Ст050Стр = Формат(ЗначениеР1Ст050, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст050 = "Сумма авансового платежа по налогу, подлежащая уплате за девять месяцев";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст050, НаименованиеР1Ст050, ЗначениеР1Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧастьУсловия = ЗначениеР2Ст260 - ЗначениеР2Ст280 - ЗначениеР1Ст050;
	ЛеваяЧастьУсловияСтр = Формат(ЛеваяЧастьУсловия, "ЧРД=.;ЧН=0");
	
	Если (НЕ ЗначениеР1Ст001 = "1") ИЛИ (НЕ ЛеваяЧастьУсловия >= 0) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли (ЛеваяЧасть = 0) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = 0, когда """ + ЗначениеР1Ст001 + """ = ""1"" и " + ЗначениеР2Ст260Стр + " - "
	+ ЗначениеР2Ст280Стр + " - " + ЗначениеР1Ст050Стр + " Итог [" + ЛеваяЧастьУсловияСтр + "] <= 0";
	
	Описание = "Неправильно исчислена сумма налога, подлежащая уплате за налоговый период";
	Нарушение = "п.4 ст. 346.21 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_6(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма налога к уменьшению за налоговый период (строка 070 Раздел 1) должна быть равна разнице величин по строке 050 Раздел 1 и по строке 260 Раздела 2, если значение по строке 260 Раздела 2 меньше значения строки 050 Раздела 1 и больше либо равно значению по строке 270 Раздела 2 и при условии, что код строки 001 Раздела 1 равен ""2""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР1Ст070 = "П000010007003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст070]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст070 = "Сумма налога, подлежащая уплате за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст070, НаименованиеР1Ст070, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	
	ИмяР2Ст260 = "П000020026003";
	ЗначениеР2Ст260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст260]);
	ЗначениеР2Ст260Стр = Формат(ЗначениеР2Ст260, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст260 = "Сумма исчисленного налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст260, НаименованиеР2Ст260, ЗначениеР2Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст270 = "П000020027003";
	ЗначениеР2Ст270 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст270]);
	ЗначениеР2Ст270Стр = Формат(ЗначениеР2Ст270, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст270 = "Сумма исчисленного минимального налога за налоговый период (ставка налога 1%)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст270, НаименованиеР2Ст270, ЗначениеР2Ст270, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР1Ст050 = "П000010005003";
	ЗначениеР1Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст050]);
	ЗначениеР1Ст050Стр = Формат(ЗначениеР1Ст050, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст050 = "Сумма авансового платежа по налогу, подлежащая уплате за девять месяцев";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст050, НаименованиеР1Ст050, ЗначениеР1Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР1Ст050 - ЗначениеР2Ст260;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (НЕ ЗначениеР1Ст001 = "2") ИЛИ (НЕ ЗначениеР1Ст050 > ЗначениеР2Ст260) ИЛИ (НЕ ЗначениеР2Ст270 <= ЗначениеР2Ст260) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли (ЛеваяЧасть = ПраваяЧасть) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР1Ст050Стр + " - " + ЗначениеР2Ст260Стр + " Итог [" + ПраваяЧастьСтр
	+ "], когда """ + ЗначениеР1Ст001 + """ = ""2"" и " + ЗначениеР1Ст050Стр + " > " + ЗначениеР2Ст260Стр + " и "
	+ ЗначениеР2Ст270Стр + " <= " + ЗначениеР2Ст260Стр;
	Описание = "Неправильно исчислена сумма налога, подлежащая уплате за налоговый период";
	Нарушение = "п.4 ст. 346.21 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма налога к уменьшению за налоговый период (строка 070 Раздел 1) должна быть равна величине по строке 050 Раздел 1, если значение по строке 260 Раздела 2 меньше значения по строке 270 Раздела 2 и при условии, что код строки 001 Раздела 1 равен ""2""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР1Ст070 = "П000010007003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст070]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст070 = "Сумма налога, подлежащая уплате за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст070, НаименованиеР1Ст070, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР1Ст050 = "П000010005003";
	ЗначениеР1Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст050]);
	ЗначениеР1Ст050Стр = Формат(ЗначениеР1Ст050, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст050 = "Сумма авансового платежа по налогу, подлежащая уплате за девять месяцев";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст050, НаименованиеР1Ст050, ЗначениеР1Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст260 = "П000020026003";
	ЗначениеР2Ст260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст260]);
	ЗначениеР2Ст260Стр = Формат(ЗначениеР2Ст260, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст260 = "Сумма исчисленного налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст260, НаименованиеР2Ст260, ЗначениеР2Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст270 = "П000020027003";
	ЗначениеР2Ст270 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст270]);
	ЗначениеР2Ст270Стр = Формат(ЗначениеР2Ст270, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст270 = "Сумма исчисленного минимального налога за налоговый период (ставка налога 1%)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст270, НаименованиеР2Ст270, ЗначениеР2Ст270, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР1Ст050;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (НЕ ЗначениеР1Ст001 = "2") ИЛИ (НЕ ЗначениеР2Ст260 < ЗначениеР2Ст270) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли (ЛеваяЧасть = ПраваяЧасть) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр + ", когда """ + ЗначениеР1Ст001 + """ = ""2"" и " + ЗначениеР2Ст260Стр
	+ " < " + ЗначениеР2Ст270Стр;
	Описание = "Неправильно исчислена сумма налога, подлежащая уплате за налоговый период";
	Нарушение = "п.4 ст. 346.21 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_8(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма налога к уменьшению за налоговый период (строка 070 Раздел 1) должна быть равна нулю, если значение по строке 260 Раздела 2 больше либо равно значению по строке 150 Раздела 1 и больше либо равно значению по строке 270 Раздел 2 и при условии, что код строки 001 Раздела 1 равен ""2""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР1Ст070 = "П000010007003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст070]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст070 = "Сумма налога, подлежащая уплате за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст070, НаименованиеР1Ст070, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР1Ст050 = "П000010005003";
	ЗначениеР1Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст050]);
	ЗначениеР1Ст050Стр = Формат(ЗначениеР1Ст050, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст050 = "Сумма авансового платежа по налогу, подлежащая уплате за девять месяцев";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст050, НаименованиеР1Ст050, ЗначениеР1Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст260 = "П000020026003";
	ЗначениеР2Ст260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст260]);
	ЗначениеР2Ст260Стр = Формат(ЗначениеР2Ст260, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст260 = "Сумма исчисленного налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст260, НаименованиеР2Ст260, ЗначениеР2Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст270 = "П000020027003";
	ЗначениеР2Ст270 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст270]);
	ЗначениеР2Ст270Стр = Формат(ЗначениеР2Ст270, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст270 = "Сумма исчисленного минимального налога за налоговый период (ставка налога 1%)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст270, НаименованиеР2Ст270, ЗначениеР2Ст270, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Если (НЕ ЗначениеР1Ст001 = "2") ИЛИ (НЕ ЗначениеР1Ст050 <= ЗначениеР2Ст260) ИЛИ (НЕ ЗначениеР2Ст270 <= ЗначениеР2Ст260) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли (ЛеваяЧасть = 0) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = 0, когда """ + ЗначениеР1Ст001 + """ = ""2"" и " + ЗначениеР1Ст050Стр + " <= "
	+ ЗначениеР2Ст260Стр + " и " + ЗначениеР2Ст270Стр + " <= " + ЗначениеР2Ст260Стр;
	Описание = "Неправильно исчислена сумма налога, подлежащая уплате за налоговый период";
	Нарушение = "п.4 ст. 346.21 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_9(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма минимального налога, подлежащая уплате за налоговый период (строка 090 Раздел 1) должна быть равна значению по строке 270 Раздел 2, если значение по строке 270 Раздела 2 больше значения по строке 260 Раздела 2, при условии, что код строки 001 Раздела 1 равен ""2""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР1Ст090 = "П000010009003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст090]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст090 = "Сумма налога, подлежащая уплате за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст090, НаименованиеР1Ст090, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	
	ИмяР2Ст270 = "П000020027003";
	ЗначениеР2Ст270 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст270]);
	ЗначениеР2Ст270Стр = Формат(ЗначениеР2Ст270, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст270 = "Сумма исчисленного минимального налога за налоговый период (ставка налога 1%)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст270, НаименованиеР2Ст270, ЗначениеР2Ст270, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст260 = "П000020026003";
	ЗначениеР2Ст260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст260]);
	ЗначениеР2Ст260Стр = Формат(ЗначениеР2Ст260, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст260 = "Сумма исчисленного налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст260, НаименованиеР2Ст260, ЗначениеР2Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст270;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (НЕ ЗначениеР1Ст001 = "2") ИЛИ (НЕ ЗначениеР2Ст270 > ЗначениеР2Ст260) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли (ЛеваяЧасть = ПраваяЧасть) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр + ", когда """ + ЗначениеР1Ст001 + """ = ""2"" и " + ЗначениеР2Ст270Стр
	+ " > " + ЗначениеР2Ст260Стр;
	Описание = "Не исчислена сумма минимального налога за налоговый период";
	Нарушение = "п. 6 ст. 346.18 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_10(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Ставка налога (строка 201 Раздел 2) должна быть равна 6, если код строки 001 Раздел 1 установлен равным ""1""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст201 = "П000020020103";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст201]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст201 = "Ставка налога (%)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст201, НаименованиеР2Ст201, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Если (НЕ ЗначениеР1Ст001 = "1") Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли (ЛеваяЧасть = 6) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = 6, когда """ + ЗначениеР1Ст001 + """ = ""1""";
	Описание = "Неправильное применение налоговой ставки";
	Нарушение = "п. 1 ст. 346.20 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_11(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Ставка налога (строка 201 Раздел 2) должна быть больше либо равна 5, но меньше либо равна 15 , если код строки 001 Раздел 1 установлен равным ""2""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст201 = "П000020020103";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст201]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст201 = "Ставка налога (%)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст201, НаименованиеР2Ст201, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Если (НЕ ЗначениеР1Ст001 = "2") Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли (5 <= ЛеваяЧасть) И (ЛеваяЧасть <= 15) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = "5 <= " + ЛеваяЧастьСтр + " <= 15, когда """ + ЗначениеР1Ст001 + """ = ""2""";
	Описание = "Неправильное применение налоговой ставки";
	Нарушение = "п.2 ст. 346.20 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_12(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма произведенных расходов за налоговый период (строка 220 Раздел 2) должна быть равна нулю, если код строки 001 Раздела 1 установлен равным ""1""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст220 = "П000020022003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст220]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст220 = "Сумма произведенных расходов за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст220, НаименованиеР2Ст220, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Если (НЕ ЗначениеР1Ст001 = "1") Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли ЛеваяЧасть = 0 Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = 0, когда """ + ЗначениеР1Ст001 + """ = ""1""";
	Описание = "Неправомерно указана сумма расходов";
	Нарушение = "п. 1 ст. 346.18 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_13(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма убытка, уменьшающая налоговую базу за налоговый период (строка 230 Раздел 2) должна быть равна нулю, если код строки 001 Раздела 1 установлен равным ""1""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст230 = "П000020023003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст230]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст230 = "Сумма убытка, полученного в предыдущем(-их) налоговом(-ых) периоде(-ах)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст230, НаименованиеР2Ст230, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Если (НЕ ЗначениеР1Ст001 = "1") Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли ЛеваяЧасть = 0 Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = 0, когда """ + ЗначениеР1Ст001 + """ = ""1""";
	Описание = "Неправомерно указана сумма убытка, полученного в предыдущем (предыдущих) налоговом (налоговых) периоде (периодах), уменьшающая налоговую базу за налоговый период";
	Нарушение = "п. 7 ст. 346.18 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_14(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Налоговая база для исчисления налога за налоговый период (строка 240 Раздел 2) должна быть равна значению по строке 210 Раздела 2 при условии, что код строки 001 Раздела 1 установлен равным ""1""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст240 = "П000020024003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст240]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст240 = "Налоговая база для исчисления налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст240, НаименованиеР2Ст240, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР2Ст210 = "П000020021003";
	ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст210]);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст210 = "Сумма полученных доходов за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст210, НаименованиеР2Ст210, ПраваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Если (НЕ ЗначениеР1Ст001 = "1") Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр + ", когда """ + ЗначениеР1Ст001 + """ = ""1""";
	Описание = "Неверно определена налоговая база за отчетный период";
	Нарушение = "п. 1 ст. 346.18 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_15(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Налоговая база для исчисления налога за налоговый период (строка 240 Раздел 2) должна быть равна результату вычитания значений строк 220 и 230 Раздела 2 из величины по строке 210 Раздела 2, если результат этого вычитания больше нуля и, при условии, что код строки 001 Раздела 1 установлен равным ""2""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст240 = "П000020024003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст240]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст240 = "Налоговая база для исчисления налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст240, НаименованиеР2Ст240, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	
	ИмяР2Ст210 = "П000020021003";
	ЗначениеР2Ст210 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст210]);
	ЗначениеР2Ст210Стр = Формат(ЗначениеР2Ст210, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст210 = "Сумма полученных доходов за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст210, НаименованиеР2Ст210, ЗначениеР2Ст210, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст220 = "П000020022003";
	ЗначениеР2Ст220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст220]);
	ЗначениеР2Ст220Стр = Формат(ЗначениеР2Ст220, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст220 = "Сумма произведенных расходов за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст220, НаименованиеР2Ст220, ЗначениеР2Ст220, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст230 = "П000020023003";
	ЗначениеР2Ст230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст230]);
	ЗначениеР2Ст230Стр = Формат(ЗначениеР2Ст230, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст230 = "Сумма убытка, полученного в предыдущем(-их) налоговом(-ых) периоде(-ах)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст230, НаименованиеР2Ст230, ЗначениеР2Ст230, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст210 - ЗначениеР2Ст220 - ЗначениеР2Ст230;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (НЕ ЗначениеР1Ст001 = "2") ИЛИ (НЕ ПраваяЧасть > 0) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст210Стр + " - " + ЗначениеР2Ст220Стр + " - " + ЗначениеР2Ст230Стр
	+ " Итог [" + ПраваяЧастьСтр + "], когда """ + ЗначениеР1Ст001 + """ = ""2"" и " + ЗначениеР2Ст210Стр + " - " 
	+ ЗначениеР2Ст220Стр + " - " + ЗначениеР2Ст230Стр + " Итог [" + ПраваяЧастьСтр + "] > 0";
	
	Описание = "Неверно определена налоговая база за отчетный период";
	Нарушение = "п. 2 и п. 7 ст. 346.18 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_16(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма убытка, полученного за налоговый период (строка 250 Раздел 2) должна быть равна нулю, если код строки 001 Раздела 1 установлен равным ""1""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст250 = "П000020025003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст250]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст250 = "Сумма убытка, полученного за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст250, НаименованиеР2Ст250, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Если (НЕ ЗначениеР1Ст001 = "1") Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли ЛеваяЧасть = 0 Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = 0, когда """ + ЗначениеР1Ст001 + """ = ""1""";
	Описание = "Неправомерно указана сумма убытка, полученного за налоговый период";
	Нарушение = "п. 7 ст. 346.18 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма убытка, полученного за налоговый период (строка 250 Раздел 2) должна быть равна разнице значений по строкам 220 и 210 Раздела 2, если значение строки 210 Раздела 2 меньше значения по строке 220 Раздела 2, при условии, что код строки 001 Раздела 1 установлен равным ""2""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст250 = "П000020025003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст250]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст250 = "Сумма убытка, полученного за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст250, НаименованиеР2Ст250, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	
	ИмяР2Ст220 = "П000020022003";
	ЗначениеР2Ст220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст220]);
	ЗначениеР2Ст220Стр = Формат(ЗначениеР2Ст220, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст220 = "Сумма произведенных расходов за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст220, НаименованиеР2Ст220, ЗначениеР2Ст220, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст210 = "П000020021003";
	ЗначениеР2Ст210 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст210]);
	ЗначениеР2Ст210Стр = Формат(ЗначениеР2Ст210, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст210 = "Сумма полученных доходов за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст210, НаименованиеР2Ст210, ЗначениеР2Ст210, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст220 - ЗначениеР2Ст210;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (НЕ ЗначениеР1Ст001 = "2") ИЛИ (НЕ ЗначениеР2Ст210 < ЗначениеР2Ст220) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст220Стр + " - " + ЗначениеР2Ст210Стр + " Итог [" + ПраваяЧастьСтр
	+ "], когда """ + ЗначениеР1Ст001 + """ = ""2"" и " + ЗначениеР2Ст210Стр + " < " + ЗначениеР2Ст220Стр;
	
	Описание = "Неверно определена налоговая база за отчетный период";
	Нарушение = "п. 2 и п. 7 ст. 346.18 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_18(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма исчисленного налога за налоговый период (строка 260 Раздела 2) должна быть равна произведению налоговой базы (строка 240 Раздел 2) и налоговой ставки (строка 201 раздел 2) деленной на 100";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст260 = "П000020026003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст260]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст260 = "Сумма исчисленного налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст260, НаименованиеР2Ст260, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР2Ст240 = "П000020024003";
	ЗначениеР2Ст240 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст240]);
	ЗначениеР2Ст240Стр = Формат(ЗначениеР2Ст240, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст240 = "Налоговая база для исчисления налога за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст240, НаименованиеР2Ст240, ЗначениеР2Ст240, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст201 = "П000020020103";
	ЗначениеР2Ст201 = СтруктураРаздела2[ИмяР2Ст201];
	ЗначениеР2Ст201Стр = Формат(ЗначениеР2Ст201, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст201 = "Ставка налога (%)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст201, НаименованиеР2Ст201, ЗначениеР2Ст201, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеР2Ст240 * ЗначениеР2Ст201 / 100);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст240Стр + " * " + ЗначениеР2Ст201Стр + " / 100 Итог [" + ПраваяЧастьСтр + "]";
	
	Описание = "Неверно исислена сумма налога за налоговый период";
	Нарушение = "п. 1 ст. 246.21 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_19(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма исчисленного минимального налога за налоговый период (строка 270 Раздел 2) должна быть равна нулю, если код строки 001 Раздела 1 установлен равным ""1""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст270 = "П000020027003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст270]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст270 = "Сумма исчисленного минимального налога за налоговый период (ставка налога 1%)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст270, НаименованиеР2Ст270, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Если (НЕ ЗначениеР1Ст001 = "1") Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли ЛеваяЧасть = 0 Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = 0, когда """ + ЗначениеР1Ст001 + """ = ""1""";
	Описание = "Неправомерно указана сумма исчисленного минимального налога за налоговый период";
	Нарушение = "п.6 ст. 346.18 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_20(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма исчисленного минимального налога за налоговый период (строка 270 Раздел 2) должна быть равна 1% от значения по строке 210 Раздела 2, если  код строки 001 Раздела 1 установлен равным ""2""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	ИмяР1Ст001 = "П000010000103";
	ЗначениеР1Ст001 = СтруктураРаздела1[ИмяР1Ст001];
	НаименованиеР1Ст001 = "Объект налогообложения";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст001, НаименованиеР1Ст001, ЗначениеР1Ст001, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст270 = "П000020027003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст270]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст270 = "Сумма исчисленного минимального налога за налоговый период (ставка налога 1%)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст270, НаименованиеР2Ст270, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	
	ИмяР2Ст210 = "П000020021003";
	ЗначениеР2Ст210 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст210]);
	ЗначениеР2Ст210Стр = Формат(ЗначениеР2Ст210, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст210 = "Сумма полученных доходов за налоговый период";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст210, НаименованиеР2Ст210, ЗначениеР2Ст210, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеР2Ст210 / 100);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (НЕ ЗначениеР1Ст001 = "2") Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст210Стр + " / 100 Итог [" + ПраваяЧастьСтр + "], когда """ + ЗначениеР1Ст001
	+ """ = ""2""";
	Описание = "Не исчислена сумма минимального налога за налоговый период";
	Нарушение = "п. 6 ст. 346.18 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_3_3(СтруктураРезультата)
	
	Если ДанныеФормыВЗначение(мДеревоСтраницОтчета, Тип("ДеревоЗначений")).Строки.Найти("Раздел2").ПоказатьСтраницу = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	ОписаниеКС = "Сумма убытка, полученного в предыдущем налоговом периоде, уменьшающая налоговую базу за налоговый период (строка 230 Раздела 2) должна быть равна величине значения строки 130 Раздела 3 Книги учета доходов и расходов";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, 
		, СчетчикФормулДляРасшифровок);
	
	СтруктураРаздела2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	// Зарегистрируем левую часть соотношения.
	// Добавляем расшифровку для строки 230.
	ЗначениеР2Стр230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2.П000020023003);
	ЗначениеР2Стр230Стр = Формат(ЗначениеР2Стр230, "ЧРД=.;ЧН=0");
	НазваниеПоказателя = "Сумма убытка, полученного в предыдущем (предыдущих ) налоговом (налоговых) периоде (периодах), уменьшающая налоговую базу за налоговый период (Раздел 2, строка 230)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000020023003", НазваниеПоказателя,
		ЗначениеР2Стр230, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = ЗначениеР2Стр230;
	ЛеваяЧастьСтр = ЗначениеР2Стр230Стр;
	
	// Зарегистрируем правую часть соотношения.
	// Междокументные КС
	
	П130 = РегламентированнаяОтчетностьПереопределяемый.СуммаФактическогоУменьшенияНалоговойБазы(СтруктураРеквизитовФормы.мСохраненныйДок.Организация,
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, П130);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	НазваниеПоказателя = "Сумма убытков, на которую налогоплательщик фактически уменьшил налоговую базу за истекший налоговый период (в пределах суммы убытков, указанных по стр. 010) (Раздел 3 Строка 130 Книги учета доходов и расходов)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П1303", НазваниеПоказателя,
		ПраваяЧасть, "", Неопределено, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстОписания = "Неправильное (необоснованное) уменьшение налоговой базы за налоговый период";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстОписания);
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "п. 7 ст. 346.18 НК РФ");
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание = Неопределено, Нарушение = Неопределено)
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Описание));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Нарушение));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ЗаполнитьАвтоНаСервере();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	СохрСтруктураДанныхРаздел1 = Новый Структура;
	СохрСтруктураДанныхРаздел2 = Новый Структура;
	
	Если СтруктураДанныхРаздел1.Количество() = 3 Тогда
		
		Для Каждого ЭлементСтруктуры Из СтруктураДанныхРаздел1 Цикл
			СохрСтруктураДанныхРаздел1.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		СтруктураДанныхРаздел1.Очистить();
		
	КонецЕсли;
	
	Если СтруктураДанныхРаздел2.Количество() = 1 Тогда
		
		Для Каждого ЭлементСтруктуры Из СтруктураДанныхРаздел2 Цикл
			СохрСтруктураДанныхРаздел2.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		СтруктураДанныхРаздел2.Очистить();
		
	КонецЕсли;
		
	ЗаполнитьПустыеСтруктурыДанных();	
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктураДанныхРаздел1 Цикл
		СтруктураДанныхРаздел1.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктураДанныхРаздел2 Цикл
		СтруктураДанныхРаздел2.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	           	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			 СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
	Контейнер = Новый Структура();
	Контейнер.Вставить("Раздел1", СтруктураДанныхРаздел1);
	Контейнер.Вставить("Раздел2", СтруктураДанныхРаздел2);
			
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета, Контейнер);
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры 

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры