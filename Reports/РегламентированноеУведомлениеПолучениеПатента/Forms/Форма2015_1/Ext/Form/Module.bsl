&НаСервере
Процедура ЗагрузитьДанные()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СсылкаНаДанные = Объект.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(ЗначениеКопирования) Тогда 
		Объект.Организация = ЗначениеКопирования.Организация;
		СсылкаНаДанные = ЗначениеКопирования;
	Иначе 
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = СсылкаНаДанные.ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.Титульный;
	НоваяСтрока = ТитульнаяСтраница.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Титульный[0]);
	
	Стр2 = СтруктураПараметров.Страница2;
	НоваяСтрока = Страница2.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр2[0]);
	
	Листы3 = СтруктураПараметров.Листы3;
	Для Каждого Строка Из Листы3 Цикл
		НоваяСтрока = СтраницыЛиста3.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Листы4 = СтруктураПараметров.Листы4;
	Для Каждого Строка Из Листы4 Цикл
		НоваяСтрока = СтраницыЛиста4.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Если СтруктураПараметров.Свойство("Листы3_0") Тогда 
		Листы3_0 = СтруктураПараметров.Листы3_0;
		Для Каждого Строка Из Листы3_0 Цикл
			НоваяСтрока = СтраницыЛиста3_0.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьДанные() Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не Модифицированность Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма;
		Объект.Организация = Организация;
		Объект.Дата = ТекущаяДатаСеанса() 
	КонецЕсли;
	
	Объект.ПодписантТелефон = ТитульнаяСтраница[0].ТЕЛЕФОН;
	Объект.ПодписантДокумент = ТитульнаяСтраница[0].ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ;
	Объект.ПодписантПризнак = ТитульнаяСтраница[0].ПРИЗНАК_НП_ПОДВАЛ;
	Если ЗначениеЗаполнено(ТитульнаяСтраница[0].ДАТА_ПОДПИСИ) Тогда
		Объект.ДатаПодписи = ТитульнаяСтраница[0].ДАТА_ПОДПИСИ;
	Иначе
		Объект.ДатаПодписи = Неопределено;
	КонецЕсли;
	СтруктураПараметров = Новый Структура("Титульный, Страница2, Листы3, Листы4, Листы3_0",
			ТитульнаяСтраница.Выгрузить(),
			Страница2.Выгрузить(),
			СтраницыЛиста3.Выгрузить(),
			СтраницыЛиста4.Выгрузить(),
			СтраницыЛиста3_0.Выгрузить());
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	Документ.Записать();
	ЗначениеВДанныеФормы(Документ, Объект);
	Модифицированность = Ложь;
	ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, " (создание)", "");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТитульный(НовыйЛист)
	НовыйЛист.UID = Новый УникальныйИдентификатор;
	
	СтрокаСведений = "ИННФЛ,ФИО,ТелДом,ФамилияИП,ИмяИП,ОтчествоИП,ОГРН";
	ДП = ?(ЗначениеЗаполнено(Объект.ДатаПодписи), Объект.ДатаПодписи, ТекущаяДатаСеанса());
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДП, СтрокаСведений);
	НовыйЛист.ДАТА_ПОДПИСИ = ДП;
	НовыйЛист.ОГРНИП = СведенияОбОрганизации.ОГРН;
	НовыйЛист.ФАМИЛИЯ_ИП = СведенияОбОрганизации.ФамилияИП;
	НовыйЛист.ИМЯ_ИП = СведенияОбОрганизации.ИмяИП;
	НовыйЛист.ОТЧЕСТВО_ИП = СведенияОбОрганизации.ОтчествоИП;
	НовыйЛист.П_ИНН_1 = СведенияОбОрганизации.ИННФЛ;
	НовыйЛист.ТЕЛЕФОН = СведенияОбОрганизации.ТелДом;
	УстановитьДанныеПоРегистрацииВИФНС();
	
	Попытка
		ИндивидуальныйПредприниматель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ФизическоеЛицо");
	Исключение
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.ЗначенияПолей
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Ссылка", ИндивидуальныйПредприниматель);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		АдресСтруктурой = УправлениеКонтактнойИнформацией.СведенияОбАдресе(Выборка.ЗначенияПолей);
		ЗаполнитьЗначенияСвойств(НовыйЛист, АдресСтруктурой);
		
		Попытка
			Если ТипЗнч(АдресСтруктурой.Помещения) = Тип("Массив")
				И АдресСтруктурой.Помещения.Количество() = 1
				И АдресСтруктурой.Помещения[0].Свойство("Номер") Тогда 
				НовыйЛист.Квартира = АдресСтруктурой.Помещения[0].Номер;
			ИначеЕсли ТипЗнч(АдресСтруктурой.Помещения) = Тип("Структура")
				И АдресСтруктурой.Помещения.Свойство("Номер") Тогда
				НовыйЛист.Квартира = АдресСтруктурой.Помещения.Номер;
			КонецЕсли;
			
			Если ТипЗнч(АдресСтруктурой.Здание) = Тип("Массив")
				И АдресСтруктурой.Здание.Количество() = 1
				И АдресСтруктурой.Здание[0].Свойство("Номер") Тогда 
				НовыйЛист.Дом = АдресСтруктурой.Здание[0].Номер;
			ИначеЕсли ТипЗнч(АдресСтруктурой.Здание) = Тип("Структура")
				И АдресСтруктурой.Здание.Свойство("Номер") Тогда
				НовыйЛист.Дом = АдресСтруктурой.Здание.Номер;
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации("Ошибка получения контактной информации", УровеньЖурналаРегистрации.Предупреждение);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтраницу2(НовыйЛист)
	НовыйЛист.UID = Новый УникальныйИдентификатор;
	НовыйЛист.П_ИНН_2 = ТитульнаяСтраница[0].П_ИНН_1;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛист3(НовыйЛист)
	НовыйЛист.UID = Новый УникальныйИдентификатор;
	НовыйЛист.П_ИНН_3 = ТитульнаяСтраница[0].П_ИНН_1;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛист4(НовыйЛист)
	НовыйЛист.UID = Новый УникальныйИдентификатор;
	НовыйЛист.П_ИНН_4 = ТитульнаяСтраница[0].П_ИНН_1;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛист3_0(НовыйЛист)
	НовыйЛист.UID = Новый УникальныйИдентификатор;
	НовыйЛист.П_ИНН_5 = ТитульнаяСтраница[0].П_ИНН_1;
КонецПроцедуры

&НаСервере
Процедура СформироватьДерево()
	
	КорневойУровень = Разделы.ПолучитьЭлементы();
	Если ТитульнаяСтраница.Количество() = 0 Тогда
		НовыйЛист = ТитульнаяСтраница.Добавить();
		ЗаполнитьТитульный(НовыйЛист);
	КонецЕсли;
	Титульный = КорневойУровень.Добавить();
	Титульный.Наименование = "Титульный лист";
	Титульный.ИндексКартинки = 1;
	Титульный.ТипСтраницы = 1;
	Титульный.UID = ТитульнаяСтраница[0].UID;
	
	Если Страница2.Количество() = 0 Тогда
		НовыйЛист = Страница2.Добавить();
		ЗаполнитьСтраницу2(НовыйЛист);
	КонецЕсли;
	Стр2 = КорневойУровень.Добавить();
	Стр2.Наименование = "Сведения о виде"+Символы.ПС+"деятельности";
	Стр2.ИндексКартинки = 1;
	Стр2.ТипСтраницы = 2;
	Стр2.UID = Страница2[0].UID;
	
	Листы3_0 = КорневойУровень.Добавить();
	Листы3_0.Наименование = "Сведения о месте"+Символы.ПС+"осуществления деятельности";
	СписокЛистов3_0 = Листы3_0.ПолучитьЭлементы();
	
	Если СтраницыЛиста3_0.Количество() = 0 Тогда
		НовыйЛист = СтраницыЛиста3_0.Добавить();
		ЗаполнитьЛист3_0(НовыйЛист);
	КонецЕсли;
	
	Номер = 1;
	Для Каждого Страница3_0 Из СтраницыЛиста3_0 Цикл 
		Лист3_0 = СписокЛистов3_0.Добавить();
		Лист3_0.ИндексКартинки = 1;
		Лист3_0.ТипСтраницы = 5;
		Лист3_0.Наименование = "Стр. " + Номер;
		Лист3_0.UID = Страница3_0.UID;
		Номер = Номер + 1;
	КонецЦикла;
	
	Листы3 = КорневойУровень.Добавить();
	Листы3.Наименование = "Сведения о транспортных"+Символы.ПС+"средствах";
	СписокЛистов3 = Листы3.ПолучитьЭлементы();
	
	Если СтраницыЛиста3.Количество() = 0 Тогда
		НовыйЛист = СтраницыЛиста3.Добавить();
		ЗаполнитьЛист3(НовыйЛист);
	КонецЕсли;
	
	Номер = 1;
	Для Каждого Страница3 Из СтраницыЛиста3 Цикл 
		Лист3 = СписокЛистов3.Добавить();
		Лист3.ИндексКартинки = 1;
		Лист3.ТипСтраницы = 3;
		Лист3.Наименование = "Стр. " + Номер;
		Лист3.UID = Страница3.UID;
		Номер = Номер + 1;
	КонецЦикла;
	
	Листы4 = КорневойУровень.Добавить();
	Листы4.Наименование = "Сведения по объектам";
	СписокЛистов4 = Листы4.ПолучитьЭлементы();
	
	Если СтраницыЛиста4.Количество() = 0 Тогда
		НовыйЛист = СтраницыЛиста4.Добавить();
		ЗаполнитьЛист4(НовыйЛист);
	КонецЕсли;
	
	Номер = 1;
	Для Каждого Страница4 Из СтраницыЛиста4 Цикл 
		Лист4 = СписокЛистов4.Добавить();
		Лист4.ИндексКартинки = 1;
		Лист4.ТипСтраницы = 4;
		Лист4.Наименование = "Стр. " + Номер;
		Лист4.UID = Страница4.UID;
		Номер = Номер + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяОбласти(ТекущийТипСтраницы)
	Если ТекущийТипСтраницы = 1 Тогда
		Возврат "ТитульныйЛист";
	ИначеЕсли ТекущийТипСтраницы = 2 Тогда
		Возврат "Страница2";
	ИначеЕсли ТекущийТипСтраницы = 3 Тогда
		Возврат "СтраницаСведения_1";
	ИначеЕсли ТекущийТипСтраницы = 4 Тогда
		Возврат "СтраницаСведения_2";
	ИначеЕсли ТекущийТипСтраницы = 5 Тогда
		Возврат "СтраницаСведения_0";
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяТаблицы(ТекущийТипСтраницы)
	Если ТекущийТипСтраницы = 1 Тогда
		Возврат "ТитульнаяСтраница";
	ИначеЕсли ТекущийТипСтраницы = 2 Тогда
		Возврат "Страница2";
	ИначеЕсли ТекущийТипСтраницы = 3 Тогда
		Возврат "СтраницыЛиста3";
	ИначеЕсли ТекущийТипСтраницы = 4 Тогда
		Возврат "СтраницыЛиста4";
	ИначеЕсли ТекущийТипСтраницы = 5 Тогда
		Возврат "СтраницыЛиста3_0";
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаСервере
Процедура СформироватьМакетНаСервере()
	Документы.УведомлениеОСпецрежимахНалогообложения.СформироватьМакетОтчетаНаСервере(ЭтотОбъект, Объект.ИмяОтчета, "Форма2015_1", ПолучитьИмяОбласти(ТекущийТипСтраницы), ПолучитьИмяТаблицы(ТекущийТипСтраницы));
	
	Если ТекущийТипСтраницы = 3 Тогда
		ЗащитаОбласти = (Не ЗначениеЗаполнено(ПредставлениеУведомления.Области["КОД_ТС1"].Значение));
		Для Инд = 1 По 3 Цикл 
			ПредставлениеУведомления.Области["ВИН_ТС" + Инд].Защита = ЗащитаОбласти;
			ПредставлениеУведомления.Области["МАРКА_ТС" + Инд].Защита = ЗащитаОбласти;
			ПредставлениеУведомления.Области["ЗНАК_ТС" + Инд].Защита = ЗащитаОбласти;
			ПредставлениеУведомления.Области["ТОННАЖ_ТС" + Инд].Защита = ЗащитаОбласти;
			ПредставлениеУведомления.Области["МЕСТ_ТС" + Инд].Защита = ЗащитаОбласти;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НестандартнаяОбработка(Инфо)
	Если Инфо.Обработчик = "ОбработкаСписка" Тогда
		ОбработкаСписка(Инфо);
	ИначеЕсли Инфо.Обработчик = "ОбработкаСпискаНаличиеРаботников" Тогда
		ОбработкаСпискаНаличиеРаботников(Инфо);
	ИначеЕсли Инфо.Обработчик = "ОбработкаКодаНО" Тогда
		ОбработкаКодаНО(Инфо);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСписка(Инфо)
	
	ИмяНестандартнойОбласти = Инфо.Имя;
	НазваниеСписка = Инфо.ИмяФормы;
	
	СтруктураОтбора = Новый Структура("ИмяСписка", Инфо.ИмяСписка);
	Строки = ТаблицаЗначенийПредопределенныхРеквизитов.НайтиСтроки(СтруктураОтбора);
	ЗагружаемыеКоды.Очистить();
	Для Каждого Строка Из Строки Цикл 
		НоваяСтрока = ЗагружаемыеКоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          НазваниеСписка);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ЗагружаемыеКоды);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПредставлениеУведомления.Области[ИмяНестандартнойОбласти].Значение));
	
	ДополнительныеПараметры = Новый Структура("ИмяНестандартнойОбласти", ИмяНестандартнойОбласти);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСпискаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИмяНестандартнойОбласти = ДополнительныеПараметры.ИмяНестандартнойОбласти;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеУведомления.Области[ИмяНестандартнойОбласти].Значение = РезультатВыбора.Код;
	Модифицированность = Истина;
	
	ИмяОбластиДоп = "";
	РезультатВыбораКод = СокрЛП(РезультатВыбора.Код);
	Если СтрНайти(ИмяНестандартнойОбласти, "КОД_ТС") = 1 Тогда
		ЗащитаОбласти = (Не ЗначениеЗаполнено(ПредставлениеУведомления.Области[ИмяНестандартнойОбласти].Значение));
		Для Инд = 1 По 3 Цикл 
			Если ЗащитаОбласти Тогда 
				ПредставлениеУведомления.Области["ВИН_ТС" + Инд].Значение = "";
				ПредставлениеУведомления.Области["МАРКА_ТС" + Инд].Значение = "";
				ПредставлениеУведомления.Области["ЗНАК_ТС" + Инд].Значение = "";
				ПредставлениеУведомления.Области["ТОННАЖ_ТС" + Инд].Значение = "";
				ПредставлениеУведомления.Области["МЕСТ_ТС" + Инд].Значение = "";
			КонецЕсли;
			ПредставлениеУведомления.Области["ВИН_ТС" + Инд].Защита = ЗащитаОбласти;
			ПредставлениеУведомления.Области["МАРКА_ТС" + Инд].Защита = ЗащитаОбласти;
			ПредставлениеУведомления.Области["ЗНАК_ТС" + Инд].Защита = ЗащитаОбласти;
			ПредставлениеУведомления.Области["ТОННАЖ_ТС" + Инд].Защита = ЗащитаОбласти;
			ПредставлениеУведомления.Области["МЕСТ_ТС" + Инд].Защита = ЗащитаОбласти;
		КонецЦикла;
	КонецЕсли;
	
	ПредставлениеУведомления.Области[ИмяНестандартнойОбласти].Значение = РезультатВыбораКод;
	ИмяОбласти = ПолучитьИмяОбласти(ТекущийТипСтраницы);
	ИмяТаблицы = ПолучитьИмяТаблицы(ТекущийТипСтраницы);
	ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
	Данные = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
	СтруктураЗаписи = Новый Структура(ИмяНестандартнойОбласти, РезультатВыбораКод);
	Если Данные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяОбластиДоп) Тогда 
		СтруктураЗаписи = Новый Структура(ИмяОбластиДоп, "");
		Если Данные.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
		КонецЕсли;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСпискаНаличиеРаботников(Инфо)
	ИмяНестандартнойОбласти = "НаличиеРаботников";
	НазваниеСписка = "НаличиеРаботников";
	
	СтруктураОтбора = Новый Структура("ИмяСписка", ИмяНестандартнойОбласти);
	Строки = ТаблицаЗначенийПредопределенныхРеквизитов.НайтиСтроки(СтруктураОтбора);
	ЗагружаемыеКоды.Очистить();
	Для Каждого Строка Из Строки Цикл 
		НоваяСтрока = ЗагружаемыеКоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          "Наличие работников");
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ЗагружаемыеКоды);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПредставлениеУведомления.Области[ИмяНестандартнойОбласти].Значение));
	
	ДополнительныеПараметры = Новый Структура("ИмяНестандартнойОбласти", ИмяНестандартнойОбласти);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСпискаНаличиеРаботниковЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСпискаНаличиеРаботниковЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИмяНестандартнойОбласти = ДополнительныеПараметры.ИмяНестандартнойОбласти;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеУведомления.Области[ИмяНестандартнойОбласти].Значение = РезультатВыбора.Код;
	Модифицированность = Истина;
	
	РезультатВыбораКод = СокрЛП(РезультатВыбора.Код);
	ПредставлениеУведомления.Области[ИмяНестандартнойОбласти].Значение = РезультатВыбораКод;
	ИмяОбласти = ПолучитьИмяОбласти(ТекущийТипСтраницы);
	ИмяТаблицы = ПолучитьИмяТаблицы(ТекущийТипСтраницы);
	ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
	Данные = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
	СтруктураЗаписи = Новый Структура(ИмяНестандартнойОбласти, РезультатВыбораКод);
	Если Данные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
	КонецЕсли;
	
	Если РезультатВыбораКод = "1" Тогда 
		ПредставлениеУведомления.Области["СредняяЧисленностьРаботников"].Защита = Ложь;
	ИначеЕсли РезультатВыбораКод = "2" Тогда
		Если Данные.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Данные[0], Новый Структура("СредняяЧисленностьРаботников", 0));
		КонецЕсли;
		
		ПредставлениеУведомления.Области["СредняяЧисленностьРаботников"].Значение = 0;
		ПредставлениеУведомления.Области["СредняяЧисленностьРаботников"].Защита = Истина;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставителяПоФизЛицу(Физлицо)
	Если ЗначениеЗаполнено(Физлицо) Тогда 
		ДанныеПредставителя = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(Физлицо, , Объект.ДатаПодписи);
		Объект.ПодписантФамилия = СокрЛП(ДанныеПредставителя.Фамилия);
		Объект.ПодписантИмя = СокрЛП(ДанныеПредставителя.Имя);
		Объект.ПодписантОтчество = СокрЛП(ДанныеПредставителя.Отчество);
		Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
			ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = СокрЛП(Объект.ПодписантФамилия + " " + Объект.ПодписантИмя + " " + Объект.ПодписантОтчество);
		КонецЕсли;
		ТитульнаяСтраница[0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = СокрЛП(Объект.ПодписантФамилия + " " + Объект.ПодписантИмя + " " + Объект.ПодписантОтчество);
	Иначе
		Объект.ПодписантФамилия = "";
		Объект.ПодписантИмя = "";
		Объект.ПодписантОтчество = "";
		Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
			ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = "";
		КонецЕсли;
		ТитульнаяСтраница[0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставителяПоОрганизации()
	Документы.УведомлениеОСпецрежимахНалогообложения.УстановитьДанныеРуководителя(Объект);
	Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
		ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = СокрЛП(Объект.ПодписантФамилия + " " + Объект.ПодписантИмя + " " + Объект.ПодписантОтчество);
	КонецЕсли;
	ТитульнаяСтраница[0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = СокрЛП(Объект.ПодписантФамилия + " " + Объект.ПодписантИмя + " " + Объект.ПодписантОтчество);
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПоРегистрацииВИФНС()
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.РегистрацияВИФНС, "Представитель,ДокументПредставителя,Код");
	Обл_КОД_НО =  ПредставлениеУведомления.Области.Найти("КОД_НО");
	Если Обл_КОД_НО <> Неопределено Тогда 
		Обл_КОД_НО.Значение = Реквизиты.Код;
	КонецЕсли;
	ТитульнаяСтраница[0].КОД_НО = Реквизиты.Код;
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		ПризнакПодписанта = "2";
		УстановитьПредставителяПоФизЛицу(Реквизиты.Представитель);
		Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
			ПредставлениеУведомления.Области["ПРИЗНАК_НП_ПОДВАЛ"].Значение = "2";
			ПредставлениеУведомления.Области["ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ"].Значение = Реквизиты.ДокументПредставителя;
		КонецЕсли;
		ТитульнаяСтраница[0].ПРИЗНАК_НП_ПОДВАЛ = "2";
		ТитульнаяСтраница[0].ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ = Реквизиты.ДокументПредставителя;
	Иначе
		УстановитьПредставителяПоОрганизации();
		ПризнакПодписанта = "1";
		Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
			ПредставлениеУведомления.Области["ПРИЗНАК_НП_ПОДВАЛ"].Значение = "1";
			ПредставлениеУведомления.Области["ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ"].Значение = "";
		КонецЕсли;
		ТитульнаяСтраница[0].ПРИЗНАК_НП_ПОДВАЛ = "1";
		ТитульнаяСтраница[0].ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаНО(Инфо)
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораРегистрацииВИФНС(ЭтотОбъект, Инфо);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаНОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Инфо = ДополнительныеПараметры.Инфо;
	
	Если Результат <> Неопределено Тогда 
		Объект.РегистрацияВИФНС = Результат;
		УстановитьДанныеПоРегистрацииВИФНС();
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования);
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Организация = Объект.Организация;
	Иначе
		Организация = Параметры.Организация;
		Объект.Организация = Параметры.Организация;
		Если Параметры.Свойство("НалоговыйОрган") И ЗначениеЗаполнено(Параметры.НалоговыйОрган) Тогда 
			Объект.РегистрацияВИФНС = Параметры.НалоговыйОрган;
		Иначе
			Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сообщение по форме 26.5-1 можно создавать только для индивидуальных предпринимателей");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ДатаПодписи = ТекущаяДатаСеанса();
		ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + " (создание)";
	КонецЕсли;
	
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭтаФорма.ИмяФормы, ".");
	Объект.ИмяФормы = Разложение[3];
	Объект.ИмяОтчета = Разложение[1];
	
	ЗагрузитьДанные();
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗагрузитьМакетыУведомления(ЭтотОбъект, Объект.ИмяОтчета, "ПараметрыФорма2015_1");
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	СформироватьДерево();
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, , УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = ПолучитьИмяОбласти(ТекущийТипСтраницы);
	Если Не ЗначениеЗаполнено(ИмяОбласти) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "П_ИНН_1" Тогда
		НовИнн = Область.Значение;
		Для Каждого Стр Из Страница2 Цикл 
			Стр.П_ИНН_2 = НовИнн;
		КонецЦикла;
		Для Каждого Стр Из СтраницыЛиста3 Цикл 
			Стр.П_ИНН_3 = НовИнн;
		КонецЦикла;
		Для Каждого Стр Из СтраницыЛиста3_0 Цикл 
			Стр.П_ИНН_5 = НовИнн;
		КонецЦикла;
		Для Каждого Стр Из СтраницыЛиста4 Цикл 
			Стр.П_ИНН_4 = НовИнн;
		КонецЦикла;
	ИначеЕсли Область.Имя = "КОЛИЧЕСТВО_МЕСЯЦЕВ" И Область.Значение > 12 Тогда 
		Область.Значение = 12;
	ИначеЕсли Область.Имя = "ДАТА_ПОДПИСИ" Тогда
		Объект.ДатаПодписи = Область.Значение;
		УстановитьДанныеПоРегистрацииВИФНС();
	КонецЕсли;
	
	ИмяТаблицы = ПолучитьИмяТаблицы(ТекущийТипСтраницы);
	ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
	Данные = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
	СтруктураЗаписи = Новый Структура(Область.Имя, Область.Значение);
	Если Данные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 Тогда
		ДобавитьСтраницу(Неопределено);
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
		УдалитьСтраницу(Неопределено);
	КонецЕсли;
	
	ОтборПоИмениОбласти = Новый Структура("Имя", Область.Имя);
	Поля = ПоляСОсобымПорядкомЗаполнения.НайтиСтроки(ОтборПоИмениОбласти);
	Если Поля.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НестандартнаяОбработка(Поля[0]);
		Возврат;
	КонецЕсли;
	
	ВРЕГ_ИмяЯчейки = ВРЕГ(Область.Имя);
	Если (СтрНайти(ВРЕГ_ИмяЯчейки, "ИНДЕКС") = 1)
		ИЛИ (СтрНайти(ВРЕГ_ИмяЯчейки, "КОДРЕГИОНА") = 1)
		ИЛИ (СтрНайти(ВРЕГ_ИмяЯчейки, "РАЙОН") = 1)
		ИЛИ (СтрНайти(ВРЕГ_ИмяЯчейки, "ГОРОД") = 1)
		ИЛИ (СтрНайти(ВРЕГ_ИмяЯчейки, "НАСЕЛЕННЫЙПУНКТ") = 1)
		ИЛИ (СтрНайти(ВРЕГ_ИмяЯчейки, "УЛИЦА") = 1)
		ИЛИ (СтрНайти(ВРЕГ_ИмяЯчейки, "ДОМ") = 1)
		ИЛИ (СтрНайти(ВРЕГ_ИмяЯчейки, "КОРПУС") = 1)
		ИЛИ (СтрНайти(ВРЕГ_ИмяЯчейки, "КВАРТИРА")= 1) Тогда
		
		ПравыйСимвол = Прав(ВРЕГ_ИмяЯчейки,1);
		Если ПравыйСимвол = "1" Или ПравыйСимвол = "2" Или ПравыйСимвол = "3" Или ПравыйСимвол = "4" Тогда 
			НомерБлока = ПравыйСимвол;
		Иначе 
			НомерБлока = "";
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		Если НомерБлока = "" Тогда 
			ИмяТаблицы = "ТитульнаяСтраница";
		ИначеЕсли НомерБлока = "1" Тогда
			ИмяТаблицы = "СтраницыЛиста4";
		Иначе
			ИмяТаблицы = "СтраницыЛиста3_0";
		КонецЕсли;
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",	        ПредставлениеУведомления.Области["Индекс" + НомерБлока].Значение);
		РоссийскийАдрес.Вставить("КодРегиона",      ПредставлениеУведомления.Области["КодРегиона" + НомерБлока].Значение);
		РоссийскийАдрес.Вставить("Район",           ПредставлениеУведомления.Области["Район" + НомерБлока].Значение);
		РоссийскийАдрес.Вставить("Город",           ПредставлениеУведомления.Области["Город" + НомерБлока].Значение);
		РоссийскийАдрес.Вставить("НаселенныйПункт", ПредставлениеУведомления.Области["НаселенныйПункт" + НомерБлока].Значение);
		РоссийскийАдрес.Вставить("Улица",           ПредставлениеУведомления.Области["Улица" + НомерБлока].Значение);
		РоссийскийАдрес.Вставить("Дом",             ПредставлениеУведомления.Области["Дом" + НомерБлока].Значение);
		РоссийскийАдрес.Вставить("Корпус",          ПредставлениеУведомления.Области["Корпус" + НомерБлока].Значение);
		РоссийскийАдрес.Вставить("Квартира",        ПредставлениеУведомления.Области["Квартира" + НомерБлока].Значение);
		
		Если Регионы.Количество() = 0 Тогда
			ЗаполнитьРегионыНаСервере();
		КонецЕсли;
		
		Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["КодРегиона"])));
		
		Если Регион.Количество() > 0 Тогда
			РоссийскийАдрес["Регион"] = Регион[0].Наим;
		КонецЕсли;
		
		ЗначенияПолей = Новый СписокЗначений;
		
		ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
		ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
		ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
		
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
		+ РоссийскийАдрес["Регион"] + ","
		+ РоссийскийАдрес["Район"] + ","
		+ РоссийскийАдрес["Город"] + ","
		+ РоссийскийАдрес["НаселенныйПункт"] + ","
		+ РоссийскийАдрес["Улица"] + ","
		+ РоссийскийАдрес["Дом"] + ","
		+ РоссийскийАдрес["Корпус"] + ","
		+ РоссийскийАдрес["Квартира"]);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
		ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
		ДополнительныеПараметры.Вставить("НомерБлока", НомерБлока);
		ДополнительныеПараметры.Вставить("ИмяТаблицы", ИмяТаблицы);
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтотОбъект;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
	КонецЕсли;
	
	Если Область.Имя = "ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ" Тогда 
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораФИО(ЭтотОбъект, СтандартнаяОбработка, "ПредставлениеУведомления", "ТитульнаяСтраница");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес, Параметры.НомерБлока, Параметры.ИмяТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес, НомерБлока, ИмяТаблицы)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ПредставлениеУведомления.Области["Индекс" + НомерБлока].Значение = РоссийскийАдрес_["Индекс"];
		ПредставлениеУведомления.Области["КодРегиона" + НомерБлока].Значение = РоссийскийАдрес_["КодРегиона"];
		ПредставлениеУведомления.Области["Район" + НомерБлока].Значение = РоссийскийАдрес_["Район"];
		ПредставлениеУведомления.Области["Город" + НомерБлока].Значение = РоссийскийАдрес_["Город"];
		ПредставлениеУведомления.Области["НаселенныйПункт" + НомерБлока].Значение = РоссийскийАдрес_["НаселенныйПункт"];
		ПредставлениеУведомления.Области["Улица" + НомерБлока].Значение = РоссийскийАдрес_["Улица"];
		ПредставлениеУведомления.Области["Дом" + НомерБлока].Значение = РоссийскийАдрес_["Дом"];
		ПредставлениеУведомления.Области["Корпус" + НомерБлока].Значение = РоссийскийАдрес_["Корпус"];
		ПредставлениеУведомления.Области["Квартира" + НомерБлока].Значение = РоссийскийАдрес_["Квартира"];
		
		ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
		Данные = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
		Если Данные.Количество() > 0 Тогда
			СтрокаДанных = Данные[0];
			СтрокаДанных["Индекс" + НомерБлока] = РоссийскийАдрес_["Индекс"];
			СтрокаДанных["КодРегиона" + НомерБлока] = РоссийскийАдрес_["КодРегиона"];
			СтрокаДанных["Район" + НомерБлока] = РоссийскийАдрес_["Район"];
			СтрокаДанных["Город" + НомерБлока] = РоссийскийАдрес_["Город"];
			СтрокаДанных["НаселенныйПункт" + НомерБлока] = РоссийскийАдрес_["НаселенныйПункт"];
			СтрокаДанных["Улица" + НомерБлока] = РоссийскийАдрес_["Улица"];
			СтрокаДанных["Дом" + НомерБлока] = РоссийскийАдрес_["Дом"];
			СтрокаДанных["Корпус" + НомерБлока] = РоссийскийАдрес_["Корпус"];
			СтрокаДанных["Квартира" + НомерБлока] = РоссийскийАдрес_["Квартира"];
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопок()
	
	ТипСтраницы = Элементы.Разделы.ТекущиеДанные.ТипСтраницы;
	
	КМенюРО = Элементы.Разделы.КонтекстноеМеню;
	Если ТипСтраницы = 3 Тогда
		КМенюРО.Видимость = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюДобавитьСтраницу.Доступность = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюУдалитьСтраницу.Доступность = (СтраницыЛиста3.Количество() > 1);
	ИначеЕсли ТипСтраницы = 4 Тогда
		КМенюРО.Видимость = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюДобавитьСтраницу.Доступность = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюУдалитьСтраницу.Доступность = (СтраницыЛиста4.Количество() > 1);
	ИначеЕсли ТипСтраницы = 5 Тогда
		КМенюРО.Видимость = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюДобавитьСтраницу.Доступность = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюУдалитьСтраницу.Доступность = (СтраницыЛиста3_0.Количество() > 1);
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыЗаявленияПриАктивизацииСтроки(Элемент)
	
	Если ТекущийИдентификаторСтраницы = Элемент.ТекущиеДанные.UID И
		ТекущийТипСтраницы = Элемент.ТекущиеДанные.ТипСтраницы Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ТипСтраницы = 0 Тогда
		ПодчиненныеЭлементыДерева = Элемент.ТекущиеДанные.ПолучитьЭлементы();
		ТекущийИдентификаторСтраницы = ПодчиненныеЭлементыДерева[0].UID;
		ТекущийТипСтраницы = ПодчиненныеЭлементыДерева[0].ТипСтраницы;
		СформироватьМакетНаСервере();
		УстановитьДоступностьКнопок();
		Возврат;
	КонецЕсли;
	
	ТекущийИдентификаторСтраницы = Элемент.ТекущиеДанные.UID;
	ТекущийТипСтраницы = Элемент.ТекущиеДанные.ТипСтраницы;
	СформироватьМакетНаСервере();
	УстановитьДоступностьКнопок();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Если ТекущийТипСтраницы = 3 Или ТекущийТипСтраницы = 4 Или ТекущийТипСтраницы = 5 Тогда
		ДобавитьСтраницуНаСервере();
		ПеренумероватьСтраницы();
		Модифицированность = Истина;
	Иначе 
		Возврат;
	КонецЕсли;
	
	КМенюРО = Элементы.Разделы.КонтекстноеМеню;
	Если ТекущийТипСтраницы = 3 Тогда 
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюУдалитьСтраницу.Доступность = (СтраницыЛиста3.Количество() > 1);
	КонецЕсли;
	Если ТекущийТипСтраницы = 4 Тогда 
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюУдалитьСтраницу.Доступность = (СтраницыЛиста4.Количество() > 1);
	КонецЕсли;
	Если ТекущийТипСтраницы = 5 Тогда 
		КМенюРО.ПодчиненныеЭлементы.РазделыЗаявленияКонтекстноеМенюУдалитьСтраницу.Доступность = (СтраницыЛиста3_0.Количество() > 1);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуНаСервере()
	Если ТекущийТипСтраницы = 3 Тогда
		КорневойУровень = Разделы.ПолучитьЭлементы();
		СписокЛистов3 = КорневойУровень[3].ПолучитьЭлементы();
		НовыйЛист = СтраницыЛиста3.Добавить();
		ЗаполнитьЛист3(НовыйЛист);
		Лист3 = СписокЛистов3.Добавить();
		Лист3.ИндексКартинки = 1;
		Лист3.ТипСтраницы = 3;
		Лист3.Наименование = "Стр. 1";
		Лист3.UID = НовыйЛист.UID;
	ИначеЕсли ТекущийТипСтраницы = 4 Тогда
		КорневойУровень = Разделы.ПолучитьЭлементы();
		СписокЛистов4 = КорневойУровень[4].ПолучитьЭлементы();
		НовыйЛист = СтраницыЛиста4.Добавить();
		ЗаполнитьЛист4(НовыйЛист);
		Лист4 = СписокЛистов4.Добавить();
		Лист4.ИндексКартинки = 1;
		Лист4.ТипСтраницы = 4;
		Лист4.Наименование = "Стр. 1";
		Лист4.UID = НовыйЛист.UID;
	ИначеЕсли ТекущийТипСтраницы = 5 Тогда
		КорневойУровень = Разделы.ПолучитьЭлементы();
		СписокЛистов3_0 = КорневойУровень[2].ПолучитьЭлементы();
		НовыйЛист = СтраницыЛиста3_0.Добавить();
		ЗаполнитьЛист3_0(НовыйЛист);
		Лист3_0 = СписокЛистов3_0.Добавить();
		Лист3_0.ИндексКартинки = 1;
		Лист3_0.ТипСтраницы = 5;
		Лист3_0.Наименование = "Стр. 1";
		Лист3_0.UID = НовыйЛист.UID;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция УдалитьСтраницуНаСервере(UID, ТипСтраницы)
	ОтборСтрок = Новый Структура("UID", UID);
	Таблица = ЭтотОбъект[ПолучитьИмяТаблицы(ТипСтраницы)];
	Строки = Таблица.НайтиСтроки(ОтборСтрок);
	Таблица.Удалить(Строки[0]);
	Возврат Таблица[0].UID;
КонецФункции

&НаКлиенте
Процедура УдалитьСтраницу(Команда)

	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	КопияТекущиеДанные = ТекущиеДанные;
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	UID_новый = УдалитьСтраницуНаСервере(КопияТекущиеДанные.UID, КопияТекущиеДанные.ТипСтраницы);
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	ПеренумероватьСтраницы();
	РегламентированнаяОтчетностьКлиент.УстановитьТекущуюСтрокуВДеревеРазделов(ЭтотОбъект, UID_новый);
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьСтраницы()
	Листы = Разделы.ПолучитьЭлементы()[2].ПолучитьЭлементы();
	Номер = 1;
	Для Каждого Лист Из Листы Цикл 
		Лист.Наименование = "Стр. "+Номер;
		Номер = Номер + 1;
	КонецЦикла;
	
	Листы = Разделы.ПолучитьЭлементы()[3].ПолучитьЭлементы();
	Номер = 1;
	Для Каждого Лист Из Листы Цикл 
		Лист.Наименование = "Стр. "+Номер;
		Номер = Номер + 1;
	КонецЦикла;
	
	Листы = Разделы.ПолучитьЭлементы()[4].ПолучитьЭлементы();
	Номер = 1;
	Для Каждого Лист Из Листы Цикл 
		Лист.Наименование = "Стр. "+Номер;
		Номер = Номер + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	СохранитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
КонецПроцедуры

&НаСервере
Функция СформироватьПечатнуюФорму()
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ПечатьСразу();
КонецФункции

&НаКлиенте
Процедура ПечатьУведомления(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ТекстВопроса = "Перед печатью необходимо сохранить изменения. Сохранить изменения?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьУведомленияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ПФ = СформироватьПечатнуюФорму();
		Если ПФ <> Неопределено Тогда 
			ПФ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУведомленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПФ = СформироватьПечатнуюФорму();
		Если ПФ <> Неопределено Тогда 
			ПФ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = "Перед печатью необходимо сохранить изменения. Сохранить изменения?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	ИначеЕсли Модифицированность Тогда 
		СохранитьДанные();
	КонецЕсли;
	
	МассивПечати = Новый Массив;
	МассивПечати.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.УведомлениеОСпецрежимахНалогообложения",
		"Уведомление", МассивПечати, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьДанные();
		МассивПечати = Новый Массив;
		МассивПечати.Добавить(Объект.Ссылка);
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.УведомлениеОСпецрежимахНалогообложения",
			"Уведомление", МассивПечати, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура СформироватьXML(Команда)
	
	ВыгружаемыеДанные = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если ВыгружаемыеДанные <> Неопределено Тогда 
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.Разделы.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь,ВыполняемоеОповещение = Неопределено) Экспорт 
	
	СохранитьДанные();
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
	Закрыть(Неопределено);
КонецПроцедуры

#Область ОтправкаВФНС
////////////////////////////////////////////////////////////////////////////////
// Отправка в ФНС
&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры
#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция СформироватьВыгрузкуИПолучитьДанные() Экспорт 
	Выгрузка = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если Выгрузка = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	Выгрузка = Выгрузка[0];
	Возврат Новый Структура("ТестВыгрузки,КодировкаВыгрузки,Данные,ИмяФайла", 
			Выгрузка.ТестВыгрузки, Выгрузка.КодировкаВыгрузки, 
			Отчеты[Объект.ИмяОтчета].ПолучитьМакет("TIFF_2015_1"),
			"1150010_5.05000_04.tif");
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьУведомлениеИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры