&НаКлиенте
Перем UID_Пустой;

&НаСервере
Процедура СохранитьДанные() Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не Модифицированность Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС1;
		Объект.Дата = ТекущаяДатаСеанса() 
	КонецЕсли;
	
	Объект.ПодписантТелефон = ТитульнаяСтраница[0].ТЕЛЕФОН;
	Объект.ПодписантДокумент = ТитульнаяСтраница[0].ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ;
	Объект.ПодписантПризнак = ТитульнаяСтраница[0].ПРИЗНАК_НП_ПОДВАЛ;
	Если ЗначениеЗаполнено(ТитульнаяСтраница[0].ДАТА_ПОДПИСИ) Тогда
		Объект.ДатаПодписи = ТитульнаяСтраница[0].ДАТА_ПОДПИСИ;
	Иначе
		Объект.ДатаПодписи = Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Титульный, Сведения, КодПричины, РегОтчет",
									ТитульнаяСтраница.Выгрузить(),
									Сведения.Выгрузить(),
									КодПричины,
									РегОтчет);
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	Документ.Записать();
	ЗначениеВДанныеФормы(Документ, Объект);
	Модифицированность = Ложь;
	
	ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, " (создание)", "");

КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	СохранитьДанные();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанные(ЗначениеКопирования)
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) И (Не ЗначениеЗаполнено(ЗначениеКопирования)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		СтруктураПараметров = Объект.Ссылка.ДанныеУведомления.Получить();
		Титульный = СтруктураПараметров.Титульный;
		НоваяСтрока = ТитульнаяСтраница.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Титульный[0]);
		СтруктураПараметров.Свойство("КодПричины", КодПричины);
		СтруктураПараметров.Свойство("РегОтчет", РегОтчет);
	ИначеЕсли ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		Объект.Организация = ЗначениеКопирования.Организация;
		СтруктураПараметров = ЗначениеКопирования.ДанныеУведомления.Получить();
	КонецЕсли; 
	
	Листы = СтруктураПараметров.Сведения;
	Для Каждого Строка Из Листы Цикл
		НоваяСтрока = Сведения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеТорговойТочки(Данные)
	НужноОповещатьОСоздании = Истина;
	ИФНС = Неопределено;
	ДанныеТорговойТочки = Неопределено;
	АдресБСП = Неопределено;
	ФайлДанных = Неопределено;
	ИмяФайлДанных = Неопределено;
	Данные.Свойство("ИФНС", ИФНС);
	Данные.Свойство("ДанныеТорговойТочки", ДанныеТорговойТочки);
	ДанныеТорговойТочки.Свойство("ИмяФайла", ИмяФайлДанных);
	ДанныеТорговойТочки.Свойство("АдресДвДанных", ФайлДанных);
	
	НоваяСтрока = ТитульнаяСтраница.Добавить();
	Если ЗначениеЗаполнено(ИФНС) И ТипЗнч(ИФНС) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда 
		Объект.РегистрацияВИФНС = ИФНС;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.РегистрацияВИФНС) Тогда 
		Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
	КонецЕсли;
	ЗаполнитьТитульный(НоваяСтрока);
	ДанныеТорговойТочки.Свойство("Т_1", НоваяСтрока.КодПричины);
	КодПричины = НоваяСтрока.КодПричины;
	
	НоваяСтрока = Сведения.Добавить();
	ЗаполнитьДопЛист(НоваяСтрока);
	
	Если ЗначениеЗаполнено(ДанныеТорговойТочки) И ТипЗнч(ДанныеТорговойТочки) = Тип("Структура") Тогда
		ДанныеТорговойТочки.Свойство("Т_1", ТитульнаяСтраница[0].КодПричины);
		ДанныеТорговойТочки.Свойство("ТорговаяТочка", ТорговаяТочка);
		
		ДанныеТорговойТочки.Свойство("П_1_1", НоваяСтрока.ДАТА_ПРАВА);
		ДанныеТорговойТочки.Свойство("П_1_2", НоваяСтрока.КодВидаПД);
		ДанныеТорговойТочки.Свойство("П_2_1", НоваяСтрока.ОКТМО);
		ДанныеТорговойТочки.Свойство("П_2_2", НоваяСтрока.КодВидаТоргОбъекта);
		ДанныеТорговойТочки.Свойство("П_2_3", НоваяСтрока.НаимТоргОб);
		ДанныеТорговойТочки.Свойство("П_2_5", НоваяСтрока.ОснИсп);
		ДанныеТорговойТочки.Свойство("П_2_6", НоваяСтрока.НомерРазр);
		ДанныеТорговойТочки.Свойство("П_2_7", НоваяСтрока.НомЗдание);
		ДанныеТорговойТочки.Свойство("П_2_8", НоваяСтрока.НомПомещ);
		ДанныеТорговойТочки.Свойство("П_2_9", НоваяСтрока.НомУч);
		ДанныеТорговойТочки.Свойство("П_2_10", НоваяСтрока.ПлощТоргЗала);
		ДанныеТорговойТочки.Свойство("П_3_1", НоваяСтрока.СтавкаСбораРуб);
		ДанныеТорговойТочки.Свойство("П_3_2", НоваяСтрока.СтавкаСбораКвм);
		ДанныеТорговойТочки.Свойство("П_3_4", НоваяСтрока.СуммаЛьготы);
		ДанныеТорговойТочки.Свойство("П_3_5", НоваяСтрока.КодЛьготы);
		РасчетЛиста(НоваяСтрока);
		
		ДанныеТорговойТочки.Свойство("П_2_4", АдресБСП);
		Если ЗначениеЗаполнено(АдресБСП) Тогда 
			ЗаполнитьАдресБСП(НоваяСтрока, АдресБСП);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФайлДанных) И ЗначениеЗаполнено(ИмяФайлДанных) Тогда 
		Сведения[0].ИдФайлУв = ИмяФайлДанных;
		ДанныеЗагружены = ЗагрузитьДанныеДляСозданияКорректировки(ФайлДанных, ИмяФайлДанных);
		Если ДанныеЗагружены Тогда
			ДанныеЗаполнения = ОбщегоНазначения.ЗначениеВСтрокуXML(ПредставлениеПоСтроке(Сведения[0]));
			Для Каждого СтрЗагружаемыеСведения Из ЗагружаемыеСведения Цикл 
				Если ДанныеЗаполнения = ОбщегоНазначения.ЗначениеВСтрокуXML(ПредставлениеПоСтроке(СтрЗагружаемыеСведения)) Тогда 
					Сведения[0].НомОбъектУв = СтрЗагружаемыеСведения.НомОбъектУв;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗагружаемыеНомераОбъектов(ЗагружаемыеСведения);
КонецПроцедуры

&НаСервере
Функция ПустаяСтруктураОписанияТорговойТочки()
	Возврат Новый Структура("ГОРОД,ДОМ,ИНДЕКС,КВАРТИРА,КОД_РЕГИОНА,КОРПУС,НАСЕЛЕННЫЙ_ПУНКТ,РАЙОН,УЛИЦА,НаимТоргОб");
КонецФункции

&НаСервере
Функция ПредставлениеПоСтроке(Строка)
	Результат = ПустаяСтруктураОписанияТорговойТочки();
	ЗаполнитьЗначенияСвойств(Результат, Строка);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьЗагружаемыеНомераОбъектов(ЗагружаемыеСведения)
	Для Каждого СтрЗагружаемыеСведения Из ЗагружаемыеСведения Цикл
		НоваяСтрока = ЗагружаемыеНомераОбъектов.Добавить();
		НоваяСтрока.Код = СтрЗагружаемыеСведения.НомОбъектУв;
		НоваяСтрока.Название = СтроковоеОписаниеТорговойТочки(СтрЗагружаемыеСведения);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СтроковоеОписаниеТорговойТочки(СтрСведения)
	Итер = "";
	Результат = "";
	Данные = ПустаяСтруктураОписанияТорговойТочки();
	ЗаполнитьЗначенияСвойств(Данные, СтрСведения);
	СтрСведения.Свойство("НаимТоргОб", Результат);
	Результат = ?(ЗначениеЗаполнено(Результат), Результат, "<без названия>");
	СтрСведения.Свойство("КОД_РЕГИОНА", Итер);
	Если ЗначениеЗаполнено(Итер) Тогда 
		Результат = Результат + "," + Итер;
	КонецЕсли;
	СтрСведения.Свойство("ГОРОД", Итер);
	Если ЗначениеЗаполнено(Итер) Тогда 
		Результат = Результат + "," + Итер;
	КонецЕсли;
	СтрСведения.Свойство("НАСЕЛЕННЫЙ_ПУНКТ", Итер);
	Если ЗначениеЗаполнено(Итер) Тогда 
		Результат = Результат + "," + Итер;
	КонецЕсли;
	СтрСведения.Свойство("РАЙОН", Итер);
	Если ЗначениеЗаполнено(Итер) Тогда 
		Результат = Результат + "," + Итер;
	КонецЕсли;
	СтрСведения.Свойство("УЛИЦА", Итер);
	Если ЗначениеЗаполнено(Итер) Тогда 
		Результат = Результат + "," + Итер;
	КонецЕсли;
	СтрСведения.Свойство("ДОМ", Итер);
	Если ЗначениеЗаполнено(Итер) Тогда 
		Результат = Результат + "," + Итер;
	КонецЕсли;
	СтрСведения.Свойство("КОРПУС", Итер);
	Если ЗначениеЗаполнено(Итер) Тогда 
		Результат = Результат + "," + Итер;
	КонецЕсли;
	СтрСведения.Свойство("КВАРТИРА", Итер);
	Если ЗначениеЗаполнено(Итер) Тогда 
		Результат = Результат + "," + Итер;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура РасчетЛиста(Лист)
	Если ЗначениеЗаполнено(Лист["СтавкаСбораРуб"]) Тогда
		Знач1 = Лист["СтавкаСбораРуб"];
		Знач2 = Знач1 - Лист["СуммаЛьготы"];
		Если Знач2 < 0 Тогда 
			Знач2 = 0;
		КонецЕсли;
	Иначе
		Знач1 = Лист["ПлощТоргЗала"] * Лист["СтавкаСбораКвм"];
		Знач1 = Окр(Знач1, 0, РежимОкругления.Окр15как20);
		Знач2 = Знач1 - Лист["СуммаЛьготы"];
		Если Знач2 < 0 Тогда 
			Знач2 = 0;
		КонецЕсли;
	КонецЕсли;
	
	Лист["ИсчСуммаСбора"] = Знач1;
	Лист["СуммаСбораИтого"] = Знач2;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресБСП(Лист, Адрес)
	Попытка
		АдресСтруктурой = УправлениеКонтактнойИнформацией.СведенияОбАдресе(Адрес);
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(АдресСтруктурой) = Тип("Структура") Тогда
		АдресСтруктурой.Свойство("КодРегиона", Лист.КОД_РЕГИОНА);
		АдресСтруктурой.Свойство("Индекс", Лист.ИНДЕКС);
		АдресСтруктурой.Свойство("Район", Лист.РАЙОН);
		АдресСтруктурой.Свойство("Город", Лист.ГОРОД);
		АдресСтруктурой.Свойство("НаселенныйПункт", Лист.НАСЕЛЕННЫЙ_ПУНКТ);
		АдресСтруктурой.Свойство("Улица", Лист.УЛИЦА);
		
		Доп = "";
		Если АдресСтруктурой.Свойство("УлицаСокращение", Доп)
			И ЗначениеЗаполнено(Доп) Тогда 
			Лист.УЛИЦА = Лист.УЛИЦА + " " + Доп;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("ГородСокращение", Доп)
			И ЗначениеЗаполнено(Доп) Тогда 
			Лист.ГОРОД = Лист.ГОРОД + " " + Доп;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("НаселенныйПунктСокращение", Доп)
			И ЗначениеЗаполнено(Доп) Тогда 
			Лист.НАСЕЛЕННЫЙ_ПУНКТ = Лист.НАСЕЛЕННЫЙ_ПУНКТ + " " + Доп;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("РайонПунктСокращение", Доп)
			И ЗначениеЗаполнено(Доп) Тогда 
			Лист.РАЙОН = Лист.РАЙОН + " " + Доп;
		КонецЕсли;
		
		Здание = Неопределено;
		Корпуса = Неопределено;
		Помещения = Неопределено;
		АдресСтруктурой.Свойство("Здание", Здание);
		АдресСтруктурой.Свойство("Корпуса", Корпуса);
		АдресСтруктурой.Свойство("Помещения", Помещения);
		
		Если ТипЗнч(Здание) = Тип("Структура") Тогда
			Здание.Свойство("Номер", Лист.ДОМ);
		КонецЕсли;
		Если ТипЗнч(Корпуса) = Тип("Структура") Тогда
			Корпуса.Свойство("Номер", Лист.КОРПУС);
		ИначеЕсли ТипЗнч(Корпуса) = Тип("Массив")
			И Корпуса.Количество() > 0
			И ТипЗнч(Корпуса[0]) = Тип("Структура") Тогда
			
			Корпуса[0].Свойство("Номер", Лист.КОРПУС);
		КонецЕсли;
		Если ТипЗнч(Помещения) = Тип("Структура") Тогда
			Помещения.Свойство("Номер", Лист.КВАРТИРА);
		ИначеЕсли ТипЗнч(Помещения) = Тип("Массив")
			И Помещения.Количество() > 0
			И ТипЗнч(Помещения[0]) = Тип("Структура") Тогда
			
			Помещения[0].Свойство("Номер", Лист.КВАРТИРА);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьДерево()
	КорневойУровень = Разделы.ПолучитьЭлементы();
	Если ТитульнаяСтраница.Количество() = 0 Тогда
		НовыйЛист = ТитульнаяСтраница.Добавить();
		ЗаполнитьТитульный(НовыйЛист);
	КонецЕсли;
	Титульный = КорневойУровень.Добавить();
	Титульный.Наименование = "Титульный лист";
	Титульный.ИндексКартинки = 1;
	Титульный.ТипСтраницы = 1;
	Титульный.UID = ТитульнаяСтраница[0].UID;
	
	Листы = КорневойУровень.Добавить();
	Листы.Наименование = "Сведения о" + Символы.ПС + "торговой точке";
	СписокЛистов = Листы.ПолучитьЭлементы();
	
	Если Сведения.Количество() = 0 Тогда
		НовыйЛист = Сведения.Добавить();
		ЗаполнитьДопЛист(НовыйЛист);
	КонецЕсли;
	
	Номер = 1;
	Для Каждого ДопЛист Из Сведения Цикл 
		Лист = СписокЛистов.Добавить();
		Лист.ИндексКартинки = 1;
		Лист.ТипСтраницы = 2;
		Лист.Наименование = "Стр. " + Номер;
		Лист.UID = ДопЛист.UID;
		ДопЛист.П_ИНН1 = ТитульнаяСтраница[0].П_ИНН;
		ДопЛист.П_КПП1 = ТитульнаяСтраница[0].П_КПП;
		Номер = Номер + 1;
	КонецЦикла;
	
	Если ТитульнаяСтраница[0].КОЛИЧЕСТВО_СТРАНИЦ =0 Тогда
		ТитульнаяСтраница[0].КОЛИЧЕСТВО_СТРАНИЦ = 1 + Сведения.Количество();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТитульный(НовыйЛист)
	
	НовыйЛист.ДАТА_ПОДПИСИ = ТекущаяДатаСеанса(); 
	Объект.ДатаПодписи = НовыйЛист.ДАТА_ПОДПИСИ;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
		СтрокаСведений = "ИННЮЛ,КППЮЛ,ОГРН,НаимЮЛПол";
		ДП = ?(ЗначениеЗаполнено(Объект.ДатаПодписи), Объект.ДатаПодписи, ТекущаяДатаСеанса());
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, ДП, СтрокаСведений);
		НовыйЛист.ОГРН = СведенияОбОрганизации.ОГРН;
		НовыйЛист.ОГРНИП = "";
		НовыйЛист.П_ИНН = СведенияОбОрганизации.ИННЮЛ;
		НовыйЛист.П_КПП = СведенияОбОрганизации.КППЮЛ;
		НовыйЛист.КОД_НО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВИФНС, "Код");
		НовыйЛист.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ = СведенияОбОрганизации.НаимЮЛПол;
	Иначе 
		СтрокаСведений = "ИННФЛ,ФИО,ТелДом,ОГРН";
		ДП = ?(ЗначениеЗаполнено(Объект.ДатаПодписи), Объект.ДатаПодписи, ТекущаяДатаСеанса());
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, ДП, СтрокаСведений);
		НовыйЛист.ОГРНИП = СведенияОбОрганизации.ОГРН;
		НовыйЛист.ОГРН = "";
		НовыйЛист.П_ИНН = СведенияОбОрганизации.ИННФЛ;
		НовыйЛист.П_КПП = "";
		НовыйЛист.ТЕЛЕФОН = СведенияОбОрганизации.ТелДом;
		НовыйЛист.КОД_НО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВИФНС, "Код");
		НовыйЛист.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ = СведенияОбОрганизации.ФИО;
		ИндивидуальныйПредприниматель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ФизическоеЛицо");
	КонецЕсли;
	
	НовыйЛист.ДАТА_ПОДПИСИ = ДП;
	УстановитьДанныеПоРегистрацииВИФНС(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДопЛист(НовыйЛист)
	НовыйЛист.П_ИНН1 = ТитульнаяСтраница[0].П_ИНН;
	НовыйЛист.П_КПП1 = ТитульнаяСтраница[0].П_КПП;
	НовыйЛист.UID = Новый УникальныйИдентификатор;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопок()
	Если Элементы.Разделы.ТекущиеДанные = Неопределено Тогда 
		ТипСтраницы = Неопределено;
	Иначе 
		ТипСтраницы = Элементы.Разделы.ТекущиеДанные.ТипСтраницы;
	КонецЕсли;
	
	КМенюРО = Элементы.Разделы.КонтекстноеМеню;
	Если ТипСтраницы = 2 Тогда
		КМенюРО.Видимость = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыКонтекстноеМенюДобавитьСтраницу.Доступность = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыКонтекстноеМенюУдалитьСтраницу.Доступность = (Сведения.Количество() > 1);
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьМакетНаСервере()
	ИмяТаблицы = ПолучитьИмяТаблицы(ТекущийТипСтраницы);
	Документы.УведомлениеОСпецрежимахНалогообложения.СформироватьМакетОтчетаНаСервере(ЭтотОбъект, Объект.ИмяОтчета, "Форма2015_1", ПолучитьИмяОбласти(ТекущийТипСтраницы), ИмяТаблицы);
	
	Если ИмяТаблицы = "Сведения" Тогда 
		ОбластьИнфо = ПредставлениеУведомления.Области.Найти("Инфо");
		
		Если КодПричины = "2" Или КодПричины = "3" Тогда 
			ОбластьИнфо.Видимость = Истина;
			ОбластьИспользоватьФайлАкт = ПредставлениеУведомления.Области.Найти("ИспользоватьФайлАкт");
			УстановитьЦветФайлАкт(ОбластьИспользоватьФайлАкт.Значение, ПредставлениеУведомления);
		Иначе
			ОбластьИнфо.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяОбласти(ТекущийТипСтраницы)
	Если ТекущийТипСтраницы = 1 Тогда
		Возврат "Титульный";
	ИначеЕсли ТекущийТипСтраницы = 2 Тогда
		Возврат "Сведения";
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяТаблицы(ТекущийТипСтраницы)
	Если ТекущийТипСтраницы = 1 Тогда
		Возврат "ТитульнаяСтраница";
	ИначеЕсли ТекущийТипСтраницы = 2 Тогда
		Возврат "Сведения";
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура НестандартнаяОбработка(Инфо, Элемент)
	Если Инфо.Обработчик = "ОбработкаСписка" Тогда
		ОбработкаСписка(Инфо);
	ИначеЕсли Инфо.Обработчик = "ОбработкаКодаНО" Тогда
		ОбработкаКодаНО(Инфо);
	ИначеЕсли Инфо.Обработчик = "ОбработкаАдреса" Тогда
		ОбработкаАдреса(Инфо, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАдреса(Инфо, Элемент)
	РоссийскийАдрес = Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс",	        ПредставлениеУведомления.Области["ИНДЕКС"].Значение);
	РоссийскийАдрес.Вставить("КодРегиона",      ПредставлениеУведомления.Области["КОД_РЕГИОНА"].Значение);
	РоссийскийАдрес.Вставить("Район",           ПредставлениеУведомления.Области["РАЙОН"].Значение);
	РоссийскийАдрес.Вставить("Город",           ПредставлениеУведомления.Области["ГОРОД"].Значение);
	РоссийскийАдрес.Вставить("НаселенныйПункт", ПредставлениеУведомления.Области["НАСЕЛЕННЫЙ_ПУНКТ"].Значение);
	РоссийскийАдрес.Вставить("Улица",           ПредставлениеУведомления.Области["УЛИЦА"].Значение);
	РоссийскийАдрес.Вставить("Дом",             ПредставлениеУведомления.Области["ДОМ"].Значение);
	РоссийскийАдрес.Вставить("Корпус",          ПредставлениеУведомления.Области["КОРПУС"].Значение);
	РоссийскийАдрес.Вставить("Квартира",        ПредставлениеУведомления.Области["КВАРТИРА"].Значение);
	
	Если Регионы.Количество() = 0 Тогда
		ЗаполнитьРегионыНаСервере();
	КонецЕсли;
	
	Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["КодРегиона"])));
	
	Если Регион.Количество() > 0 Тогда
		
		РоссийскийАдрес["Регион"] = Регион[0].Наим;
		
	КонецЕсли;
	
	ЗначенияПолей = Новый СписокЗначений;
	
	ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
	ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
	ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
	
	ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
	+ РоссийскийАдрес["Регион"] + ","
	+ РоссийскийАдрес["КодРегиона"] + ","
	+ РоссийскийАдрес["Район"] + ","
	+ РоссийскийАдрес["Город"] + ","
	+ РоссийскийАдрес["НаселенныйПункт"] + ","
	+ РоссийскийАдрес["Улица"] + ","
	+ РоссийскийАдрес["Дом"] + ","
	+ РоссийскийАдрес["Корпус"] + ","
	+ РоссийскийАдрес["Квартира"]);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
	ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
	
	ТипЗначения = Тип("ОписаниеОповещения");
	ПараметрыКонструктора = Новый Массив(3);
	ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
	ПараметрыКонструктора[1] = ЭтотОбъект;
	ПараметрыКонструктора[2] = ДополнительныеПараметры;
	
	Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
	
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ПредставлениеУведомления.Области["ИНДЕКС"].Значение = РоссийскийАдрес_["Индекс"];
		ПредставлениеУведомления.Области["КОД_РЕГИОНА"].Значение = РоссийскийАдрес_["КодРегиона"];
		ПредставлениеУведомления.Области["РАЙОН"].Значение = РоссийскийАдрес_["Район"];
		ПредставлениеУведомления.Области["ГОРОД"].Значение = РоссийскийАдрес_["Город"];
		ПредставлениеУведомления.Области["НАСЕЛЕННЫЙ_ПУНКТ"].Значение = РоссийскийАдрес_["НаселенныйПункт"];
		ПредставлениеУведомления.Области["УЛИЦА"].Значение = РоссийскийАдрес_["Улица"];
		ПредставлениеУведомления.Области["ДОМ"].Значение = РоссийскийАдрес_["Дом"];
		ПредставлениеУведомления.Области["КОРПУС"].Значение = РоссийскийАдрес_["Корпус"];
		ПредставлениеУведомления.Области["КВАРТИРА"].Значение = РоссийскийАдрес_["Квартира"];
		
		ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
		Данные = ЭтотОбъект[ПолучитьИмяТаблицы(ТекущийТипСтраницы)].НайтиСтроки(ПараметрыОтбора);
		Если Данные.Количество() > 0 Тогда
			СтрокаДанных = Данные[0];
			СтрокаДанных["ИНДЕКС"] = РоссийскийАдрес_["Индекс"];
			СтрокаДанных["КОД_РЕГИОНА"] = РоссийскийАдрес_["КодРегиона"];
			СтрокаДанных["РАЙОН"] = РоссийскийАдрес_["Район"];
			СтрокаДанных["ГОРОД"] = РоссийскийАдрес_["Город"];
			СтрокаДанных["НАСЕЛЕННЫЙ_ПУНКТ"] = РоссийскийАдрес_["НаселенныйПункт"];
			СтрокаДанных["УЛИЦА"] = РоссийскийАдрес_["Улица"];
			СтрокаДанных["ДОМ"] = РоссийскийАдрес_["Дом"];
			СтрокаДанных["КОРПУС"] = РоссийскийАдрес_["Корпус"];
			СтрокаДанных["КВАРТИРА"] = РоссийскийАдрес_["Квартира"];
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСписка(Инфо, ТаблицаКодов = Неопределено)
	ИмяНестандартнойОбласти = Инфо.Имя;
	НазваниеСписка = Инфо.ИмяФормы;
	
	Если ТаблицаКодов = Неопределено Тогда 
		СтруктураОтбора = Новый Структура("ИмяСписка", Инфо.ИмяСписка);
		Строки = ТаблицаЗначенийПредопределенныхРеквизитов.НайтиСтроки(СтруктураОтбора);
		ЗагружаемыеКоды.Очистить();
		Для Каждого Строка Из Строки Цикл 
			НоваяСтрока = ЗагружаемыеКоды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Коды = ЗагружаемыеКоды;
	Иначе
		Коды = ТаблицаКодов;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          НазваниеСписка);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    Коды);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПредставлениеУведомления.Области[ИмяНестандартнойОбласти].Значение));
	
	ДополнительныеПараметры = Новый Структура("ИмяНестандартнойОбласти", ИмяНестандартнойОбласти);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСпискаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИмяНестандартнойОбласти = ДополнительныеПараметры.ИмяНестандартнойОбласти;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбластиДоп = "";
	РезультатВыбораКод = СокрЛП(РезультатВыбора.Код);
	Если "КодПричины" = ИмяНестандартнойОбласти Тогда
		Если КодПричины <> РезультатВыбораКод Тогда 
			КодПричины = РезультатВыбораКод;
			ЗагружаемыеНомераОбъектов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеУведомления.Области[ИмяНестандартнойОбласти].Значение = РезультатВыбораКод;
	ИмяОбласти = ПолучитьИмяОбласти(ТекущийТипСтраницы);
	ИмяТаблицы = ПолучитьИмяТаблицы(ТекущийТипСтраницы);
	ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
	Данные = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
	СтруктураЗаписи = Новый Структура(ИмяНестандартнойОбласти, РезультатВыбораКод);
	Если Данные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяОбластиДоп) Тогда 
		СтруктураЗаписи = Новый Структура(ИмяОбластиДоп, "");
		Если Данные.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
		КонецЕсли;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаНО(Инфо)
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораРегистрацииВИФНС(ЭтотОбъект, Инфо);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаНОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда 
		Объект.РегистрацияВИФНС = Результат;
		УстановитьДанныеПоРегистрацииВИФНС();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставителяПоФизЛицу(Физлицо)
	Если ЗначениеЗаполнено(Физлицо) И ТипЗнч(Физлицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		Фамилия = "";
		Имя = "";
		Отчество = "";
		Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
			ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = "";
			ПредставлениеУведомления.Области["ОРГ_ПРЕДСТАВИТЕЛЬ"].Значение = Физлицо;
		КонецЕсли;
		ТитульнаяСтраница[0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = "";
		ТитульнаяСтраница[0].ОРГ_ПРЕДСТАВИТЕЛЬ = Физлицо;
	ИначеЕсли ЗначениеЗаполнено(Физлицо) Тогда
		ДанныеПредставителя = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(Физлицо, , Объект.ДатаПодписи);
		Фамилия = СокрЛП(ДанныеПредставителя.Фамилия);
		Имя = СокрЛП(ДанныеПредставителя.Имя);
		Отчество = СокрЛП(ДанныеПредставителя.Отчество);
		Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
			ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = СокрЛП(Фамилия + " " + Имя + " " + Отчество);
			ПредставлениеУведомления.Области["ОРГ_ПРЕДСТАВИТЕЛЬ"].Значение = "";
		КонецЕсли;
		ТитульнаяСтраница[0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = СокрЛП(Фамилия + " " + Имя + " " + Отчество);
		ТитульнаяСтраница[0].ОРГ_ПРЕДСТАВИТЕЛЬ = "";
	Иначе
		Фамилия = "";
		Имя = "";
		Отчество = "";
		Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
			ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = "";
			ПредставлениеУведомления.Области["ОРГ_ПРЕДСТАВИТЕЛЬ"].Значение = "";
		КонецЕсли;
		ТитульнаяСтраница[0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = "";
		ТитульнаяСтраница[0].ОРГ_ПРЕДСТАВИТЕЛЬ = "";
	КонецЕсли;
	
	Объект.ПодписантФамилия = Фамилия;
	Объект.ПодписантИмя = Имя;
	Объект.ПодписантОтчество = Отчество;
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставителяПоОрганизации()
	Документы.УведомлениеОСпецрежимахНалогообложения.УстановитьДанныеРуководителя(Объект);
	
	Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
		ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = СокрЛП(Объект.ПодписантФамилия + " " + Объект.ПодписантИмя + " " + Объект.ПодписантОтчество);
		ПредставлениеУведомления.Области["ОРГ_ПРЕДСТАВИТЕЛЬ"].Значение = "";
	КонецЕсли;
	ТитульнаяСтраница[0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = СокрЛП(Объект.ПодписантФамилия + " " + Объект.ПодписантИмя + " " + Объект.ПодписантОтчество);
	ТитульнаяСтраница[0].ОРГ_ПРЕДСТАВИТЕЛЬ = "";
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПоРегистрацииВИФНС(МенятьКПП = Ложь)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.РегистрацияВИФНС, "Представитель,ДокументПредставителя,КПП,Код");
	Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
		Если МенятьКПП = Истина Тогда 
			ПредставлениеУведомления.Области["П_КПП"].Значение = Реквизиты.КПП;
		КонецЕсли;
		ПредставлениеУведомления.Области["КОД_НО"].Значение = Реквизиты.Код;
	КонецЕсли;
	Если МенятьКПП = Истина Тогда 
		ТитульнаяСтраница[0].П_КПП = Реквизиты.КПП;
		Для Каждого Стр Из Сведения Цикл 
			Стр.П_КПП1 = Реквизиты.КПП;
		КонецЦикла;
	КонецЕсли;
	ТитульнаяСтраница[0].КОД_НО = Реквизиты.Код;
	
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
			ПризнакПодписанта = "4";
		Иначе
			ПризнакПодписанта = "2";
		КонецЕсли;
		УстановитьПредставителяПоФизЛицу(Реквизиты.Представитель);
		Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
			ПредставлениеУведомления.Области["ПРИЗНАК_НП_ПОДВАЛ"].Значение = ПризнакПодписанта;
			ПредставлениеУведомления.Области["ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ"].Значение = Реквизиты.ДокументПредставителя;
		КонецЕсли;
		ТитульнаяСтраница[0].ПРИЗНАК_НП_ПОДВАЛ = ПризнакПодписанта;
		ТитульнаяСтраница[0].ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ = Реквизиты.ДокументПредставителя;
	Иначе
		УстановитьПредставителяПоОрганизации();
		Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
			ПризнакПодписанта = "3";
		Иначе
			ПризнакПодписанта = "1";
		КонецЕсли;
		Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
			ПредставлениеУведомления.Области["ПРИЗНАК_НП_ПОДВАЛ"].Значение = ПризнакПодписанта;
			ПредставлениеУведомления.Области["ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ"].Значение = "";
		КонецЕсли;
		ТитульнаяСтраница[0].ПРИЗНАК_НП_ПОДВАЛ = ПризнакПодписанта;
		ТитульнаяСтраница[0].ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьСтраницы()
	Листы = Разделы.ПолучитьЭлементы()[1].ПолучитьЭлементы();
	Номер = 1;
	Для Каждого Лист Из Листы Цикл 
		Лист.Наименование = "Стр. "+Номер;
		Номер = Номер + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ДобавитьСтраницуНаСервере()
	Если ТекущийТипСтраницы = 2 Тогда
		КорневойУровень = Разделы.ПолучитьЭлементы();
		СписокЛистов = КорневойУровень[1].ПолучитьЭлементы();
		НовыйЛист = Сведения.Добавить();
		ЗаполнитьДопЛист(НовыйЛист);
		ДопЛист = СписокЛистов.Добавить();
		ДопЛист.ИндексКартинки = 1;
		ДопЛист.ТипСтраницы = 2;
		ДопЛист.Наименование = "ДопЛист";
		ДопЛист.UID = НовыйЛист.UID;
		Возврат НовыйЛист.UID;
	КонецЕсли;
КонецФункции

&НаСервере
Функция УдалитьСтраницуНаСервере(UID, ТипСтраницы)
	ОтборСтрок = Новый Структура("UID", UID);
	Таблица = ЭтотОбъект[ПолучитьИмяТаблицы(ТипСтраницы)];
	Строки = Таблица.НайтиСтроки(ОтборСтрок);
	Таблица.Удалить(Строки[0]);
	Возврат Таблица[0].UID;
КонецФункции

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
	ОповеститьОСозданииТС1();
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ВыгружаемыеДанные = СформироватьXMLНаСервере(УникальныйИдентификатор);
	ОповеститьОСозданииТС1();
	Если ВыгружаемыеДанные <> Неопределено Тогда 
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	Если ТекущийТипСтраницы = 2 Тогда
		НовыйUID = ДобавитьСтраницуНаСервере();
		ПеренумероватьСтраницы();
		УстановитьДоступностьКнопок();
		ТитульнаяСтраница[0].КОЛИЧЕСТВО_СТРАНИЦ = 1 + Сведения.Количество();
		РегламентированнаяОтчетностьКлиент.УстановитьТекущуюСтрокуВДеревеРазделов(ЭтотОбъект, НовыйUID);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	НайденныйИД = РегламентированнаяОтчетностьКлиентСервер.НайтиИДВДереве(Разделы.ПолучитьЭлементы(), ТекущийИдентификаторСтраницы, UID_Пустой);
	Если ТекущийИдентификаторСтраницы = UID_Пустой Тогда 
		Возврат;
	КонецЕсли;
	ЭлементДерева = Разделы.НайтиПоИдентификатору(НайденныйИД);
	ТС = ЭлементДерева.ТипСтраницы;
	UID = ЭлементДерева.UID;
	ТекущиеДанныеРодитель = ЭлементДерева.ПолучитьРодителя();
	Если ТекущиеДанныеРодитель.ПолучитьЭлементы().Количество() <= 1 Тогда 
		Возврат;
	КонецЕсли;
	UID_новый = УдалитьСтраницуНаСервере(UID, ТС);
	Для Каждого Стр Из ТекущиеДанныеРодитель.ПолучитьЭлементы() Цикл 
		Если Стр.UID = UID Тогда
			ТекущиеДанныеРодитель.ПолучитьЭлементы().Удалить(Стр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ПеренумероватьСтраницы();
	УстановитьДоступностьКнопок();
	
	ТитульнаяСтраница[0].КОЛИЧЕСТВО_СТРАНИЦ = 1 + Сведения.Количество();
	РегламентированнаяОтчетностьКлиент.УстановитьТекущуюСтрокуВДеревеРазделов(ЭтотОбъект, UID_новый);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НужноОповещатьОСоздании = Ложь;
	Данные = Неопределено;
	ЗначениеКопирования = Неопределено;
	Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования);
	Параметры.Свойство("Данные", Данные);
	
	Если Не Параметры.Свойство("Ключ") Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Объект.Организация = Параметры.Организация;
		Если Параметры.Свойство("НалоговыйОрган") И ЗначениеЗаполнено(Параметры.НалоговыйОрган) Тогда 
			Объект.РегистрацияВИФНС = Параметры.НалоговыйОрган;
		Иначе
			Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ДатаПодписи = ТекущаяДатаСеанса();
		ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + " (создание)";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные) И ТипЗнч(Данные) = Тип("Структура") Тогда 
		ЗагрузитьДанныеТорговойТочки(Данные);
	Иначе 
		ЗагрузитьДанные(ЗначениеКопирования);
	КонецЕсли;
	
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭтаФорма.ИмяФормы, ".");
	Объект.ИмяФормы = Разложение[3];
	Объект.ИмяОтчета = Разложение[1];
	
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗагрузитьМакетыУведомления(ЭтотОбъект, Объект.ИмяОтчета, "ПараметрыФорма2015_1");
	СформироватьДерево();
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, , УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	Если ТекущийИдентификаторСтраницы = Элемент.ТекущиеДанные.UID И
		ТекущийТипСтраницы = Элемент.ТекущиеДанные.ТипСтраницы Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ТипСтраницы = 0 Тогда
		ПодчиненныеЭлементыДерева = Элемент.ТекущиеДанные.ПолучитьЭлементы();
		ТекущийИдентификаторСтраницы = ПодчиненныеЭлементыДерева[0].UID;
		ТекущийТипСтраницы = ПодчиненныеЭлементыДерева[0].ТипСтраницы;
		СформироватьМакетНаСервере();
		УстановитьДоступностьКнопок();
		Возврат;
	КонецЕсли;
	
	ТекущийИдентификаторСтраницы = Элемент.ТекущиеДанные.UID;
	ТекущийТипСтраницы = Элемент.ТекущиеДанные.ТипСтраницы;
	СформироватьМакетНаСервере();
	УстановитьДоступностьКнопок();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФайлАкт(Значение, ПредставлениеУведомления)
	ОблАкт1 = ПредставлениеУведомления.Области.Найти("ДатаАкт");
	ОблАкт2 = ПредставлениеУведомления.Области.Найти("НомерАкт");
	ОблФайл1 = ПредставлениеУведомления.Области.Найти("НомОбъектУв");
	ОблФайл2 = ПредставлениеУведомления.Области.Найти("ИдФайлУв");
	Белый = Новый Цвет(255,255,255);
	Желтый = Новый Цвет(255,255,192);
	
	Если Значение Тогда 
		ОблАкт1.Защита = Ложь; ОблАкт1.ЦветФона = Желтый;
		ОблАкт2.Защита = Ложь; ОблАкт2.ЦветФона = Желтый;
		ОблФайл1.Защита = Истина; ОблФайл1.ЦветФона = Белый;
		ОблФайл2.Защита = Истина; ОблФайл2.ЦветФона = Белый;
	Иначе
		ОблАкт1.Защита = Истина; ОблАкт1.ЦветФона = Белый;
		ОблАкт2.Защита = Истина; ОблАкт2.ЦветФона = Белый;
		ОблФайл1.Защита = Ложь; ОблФайл1.ЦветФона = Желтый;
		ОблФайл2.Защита = Ложь; ОблФайл2.ЦветФона = Желтый;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияВыбор(Элемент, Область, СтандартнаяОбработка)
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 Тогда
		ДобавитьСтраницу(Неопределено);
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
		УдалитьСтраницу(Неопределено);
	КонецЕсли;
	
	ОтборПоИмениОбласти = Новый Структура("Имя", Область.Имя);
	Поля = ПоляСОсобымПорядкомЗаполнения.НайтиСтроки(ОтборПоИмениОбласти);
	Если Поля.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НестандартнаяОбработка(Поля[0], Элемент);
	КонецЕсли;
	
	Если Область.Имя = "ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ" Тогда 
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораФИО(ЭтотОбъект, СтандартнаяОбработка, "ПредставлениеУведомления", "ТитульнаяСтраница");
	ИначеЕсли Область.Имя = "ИспользоватьФайлАкт" Тогда 
		Область.Значение = Не Область.Значение;
		ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(Элемент, Область);
		УстановитьЦветФайлАкт(Область.Значение, ПредставлениеУведомления);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Область.Имя = "НомОбъектУв" И ЗагружаемыеНомераОбъектов.Количество() > 0 Тогда
		ОбработкаСписка(Новый Структура("Имя, ИмяФормы", "НомОбъектУв", "Выбор номера объекта"), ЗагружаемыеНомераОбъектов);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = ПолучитьИмяОбласти(ТекущийТипСтраницы);
	Если Не ЗначениеЗаполнено(ИмяОбласти) Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = ПолучитьИмяТаблицы(ТекущийТипСтраницы);
	ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
	Данные = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
	СтруктураЗаписи = Новый Структура(Область.Имя, Область.Значение);
	Если Данные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
	КонецЕсли;
	
	Если Область.Имя = "ПлощТоргЗала" Или Область.Имя = "СтавкаСбораРуб" Или Область.Имя = "СтавкаСбораКвм" Тогда
		Если ЗначениеЗаполнено(ПредставлениеУведомления.Области["СтавкаСбораРуб"].Значение) Тогда
			Знач1 = ПредставлениеУведомления.Области["СтавкаСбораРуб"].Значение;
			Знач2 = Знач1 - ПредставлениеУведомления.Области["СуммаЛьготы"].Значение;
			Если Знач2 < 0 Тогда 
				Знач2 = 0;
			КонецЕсли;
		Иначе
			Знач1 = ПредставлениеУведомления.Области["ПлощТоргЗала"].Значение * ПредставлениеУведомления.Области["СтавкаСбораКвм"].Значение;
			Знач1 = Окр(Знач1, 0, РежимОкругления.Окр15как20);
			Знач2 = Знач1 - ПредставлениеУведомления.Области["СуммаЛьготы"].Значение;
			Если Знач2 < 0 Тогда 
				Знач2 = 0;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураЗаписи = Новый Структура("ИсчСуммаСбора, СуммаСбораИтого", Знач1, Знач2);
		ПредставлениеУведомления.Области["ИсчСуммаСбора"].Значение = Знач1;
		ПредставлениеУведомления.Области["СуммаСбораИтого"].Значение = Знач2;
		Если Данные.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
		КонецЕсли;
	ИначеЕсли Область.Имя = "СуммаЛьготы" Тогда
		Значение = ПредставлениеУведомления.Области["ИсчСуммаСбора"].Значение - ПредставлениеУведомления.Области["СуммаЛьготы"].Значение;
		Если Значение < 0 Тогда 
			Значение = 0;
		КонецЕсли;
		ПредставлениеУведомления.Области["СуммаСбораИтого"].Значение = Значение;
		СтруктураЗаписи = Новый Структура("СуммаСбораИтого", Значение);
		Если Данные.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
		КонецЕсли;
	ИначеЕсли Область.Имя = "П_КПП" Тогда
		Для Каждого Стр Из Сведения Цикл 
			Стр.П_КПП1 = Область.Значение;
		КонецЦикла;
	ИначеЕсли Область.Имя = "П_ИНН" Тогда
		Для Каждого Стр Из Сведения Цикл 
			Стр.П_ИНН1 = Область.Значение;
		КонецЦикла;
	ИначеЕсли Область.Имя = "ДАТА_ПОДПИСИ" Тогда
		Объект.ДатаПодписи = Область.Значение;
		УстановитьДанныеПоРегистрацииВИФНС();
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУведомления(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ТекстВопроса = "Перед печатью необходимо сохранить изменения. Сохранить изменения?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьУведомленияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ПФ = СформироватьПечатнуюФорму();
		Если ПФ <> Неопределено Тогда 
			ПФ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУведомленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПФ = СформироватьПечатнуюФорму();
		ОповеститьОСозданииТС1();
		Если ПФ <> Неопределено Тогда 
			ПФ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = "Перед печатью необходимо сохранить изменения. Сохранить изменения?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	ИначеЕсли Модифицированность Тогда 
		СохранитьДанные();
	КонецЕсли;
	
	МассивПечати = Новый Массив;
	МассивПечати.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.УведомлениеОСпецрежимахНалогообложения",
		"Уведомление", МассивПечати, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьДанные();
		ОповеститьОСозданииТС1();
		МассивПечати = Новый Массив;
		МассивПечати.Добавить(Объект.Ссылка);
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.УведомлениеОСпецрежимахНалогообложения",
			"Уведомление", МассивПечати, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СформироватьПечатнуюФорму()
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ПечатьСразу();
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.Разделы.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	UID_Пустой = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОСозданииТС1()
	Если НужноОповещатьОСоздании Тогда
		Оповестить("Создание_ФормаТС1", ТорговаяТочка, Объект.Ссылка);
		НужноОповещатьОСоздании = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыЗаписи, Объект.Ссылка);
	ОповеститьОСозданииТС1();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
	ОповеститьОСозданииТС1();
	Закрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция СформироватьВыгрузкуИПолучитьДанные() Экспорт 
	Выгрузка = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если Выгрузка = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	Выгрузка = Выгрузка[0];
	Возврат Новый Структура("ТестВыгрузки,КодировкаВыгрузки,Данные,ИмяФайла", 
			Выгрузка.ТестВыгрузки, Выгрузка.КодировкаВыгрузки, 
			Отчеты[Объект.ИмяОтчета].ПолучитьМакет("TIFF_2015_1"),
			"1110050_5.01000_01.tif");
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь,ВыполняемоеОповещение = Неопределено) Экспорт 
	
	СохранитьДанные();
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отправка в ФНС

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОтчета
&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзФайлаПослеНачалаПодключенияРасширения", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаПослеНачалаПодключенияРасширения(Подключено, ДополнительныеПараметры) Экспорт 
	Если Подключено Тогда
		ЗагрузитьИзФайлаПослеУстановкиРасширения(Неопределено);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзФайлаПослеУстановкиРасширения", ЭтотОбъект);
		НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаПослеУстановкиРасширения(ДополнительныеПараметры) Экспорт
	РазделительПутиОС = ПолучитьРазделительПути();
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Длг.Заголовок = "Укажите файл";
	Длг.Фильтр    = "|*.xml|";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьПутьФайлаЗавершение", ЭтотОбъект);
	Длг.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПутьФайлаЗавершение(ВыбранныеФайлы, ВходящийКонтекст) Экспорт
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0 Тогда 
		ИмяФайла = ВыбранныеФайлы[0];
		Оповещение = Новый ОписаниеОповещения("ПолучитьПутьФайлЗавершение", ЭтотОбъект);
		НачатьПомещениеФайлов(Оповещение,,ИмяФайла,Ложь,УникальныйИдентификатор);
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПутьФайлЗавершение(ВыбранныеФайлы, ВходящийКонтекст) Экспорт
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0 Тогда 
		ИмяФайла = ВРег(ВыбранныеФайлы[0].Имя);
		Ошибка = "";
		
		ИндексНачала = СтрНайти(ИмяФайла, "UT_UVTORGSB", НаправлениеПоиска.СКонца);
		Если ИндексНачала = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Имя файла должно начинаться с UT_UVTORGSB");
			Возврат;
		КонецЕсли;
		ИмяФайлаКороткое = СтрЗаменить(Сред(ИмяФайла, ИндексНачала), ".xml", "");
		ИмяФайлаКороткое = СтрЗаменить(ИмяФайлаКороткое, ".XML", "");
		
		Попытка
			Если Не ЗагрузитьОтчет(Ошибка, ВыбранныеФайлы[0].Хранение, ИмяФайлаКороткое) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось загрузить файл: " + Ошибка);
			КонецЕсли;
			
			Элементы.Разделы.Развернуть(Разделы.ПолучитьЭлементы()[1].ПолучитьИдентификатор());
			Элементы.Разделы.ТекущаяСтрока = Разделы.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось загрузить файл:" + ИмяФайла + " не соответсвует формату");
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьОтчет(Ошибка, ВХ, ИмяФайлаКороткое)
	ФайлСрвДанные = ПолучитьИзВременногоХранилища(ВХ);
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ФайлСрвДанные.Записать(ИмяФайла);
	
	Если ПолучитьДанныеИзФайла(ИмяФайла, Ошибка) Тогда
		Для Каждого Стр Из ЗагружаемыеСведения Цикл 
			Стр.ИдФайлУв = ИмяФайлаКороткое;
			Стр.ИспользоватьФайлАкт = Ложь;
		КонецЦикла;
		СформироватьДеревоИзФайла();
		ЗагружаемыеСведения.Очистить();
		Модифицированность = Истина;
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
			ЗаписьЖурналаРегистрации("Не удалось удалить файл "+ИмяФайла, УровеньЖурналаРегистрации.Предупреждение);
		КонецПопытки;
		Возврат Истина;
	КонецЕсли;
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации("Не удалось удалить файл "+ИмяФайла, УровеньЖурналаРегистрации.Предупреждение);
	КонецПопытки;
	ЗагружаемыеСведения.Очистить();
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ЗагрузитьДанныеДляСозданияКорректировки(ВХ, ИмяФайлаКороткое)
	Ошибка = Неопределено;
	ФайлСрвДанные = ПолучитьИзВременногоХранилища(ВХ);
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ФайлСрвДанные.Записать(ИмяФайла);
	
	Если ПолучитьДанныеИзФайла(ИмяФайла, Ошибка) Тогда
		Для Каждого Стр Из ЗагружаемыеСведения Цикл 
			Стр.ИдФайлУв = ИмяФайлаКороткое;
			Стр.ИспользоватьФайлАкт = Ложь;
		КонецЦикла;
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
			ЗаписьЖурналаРегистрации("Не удалось удалить файл "+ИмяФайла, УровеньЖурналаРегистрации.Предупреждение);
		КонецПопытки;
		Возврат Истина;
	КонецЕсли;
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации("Не удалось удалить файл "+ИмяФайла, УровеньЖурналаРегистрации.Предупреждение);
	КонецПопытки;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПрочитатьИПроверитьЗаголовок(ФайлОбмена, Ошибка)
	Если Не ПрочитатьНачалоЭлемента(ФайлОбмена, "Файл", Ошибка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПрочитатьНачалоЭлемента(ФайлОбмена, "Документ", Ошибка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Инд = 0;
	КНД = Неопределено;
	Пока ЗначениеЗаполнено(ФайлОбмена.ИмяАтрибута(Инд)) Цикл
		Если НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("КНД") Тогда 
			КНД = ФайлОбмена.ПолучитьАтрибут(Инд);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если КНД = Неопределено Тогда
		Ошибка = "Не найден обязательный аттрибут ""КНД""";
		Возврат Ложь;
	ИначеЕсли КНД <> "1110050" Тогда
		Ошибка = "Значение КНД не равно 1110050 (это не форма ТС-1)";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПрочитатьНачалоЭлемента(ФайлОбмена, "СвНП", Ошибка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	ПрочитатьДоКонцаЭлемента(ФайлОбмена, "СвНП");
	
	Если Не ПрочитатьНачалоЭлемента(ФайлОбмена, "Подписант", Ошибка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	ПрочитатьДоКонцаЭлемента(ФайлОбмена, "Подписант");
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ДатаИзСтрокиXML(СтрИсх)
	ТипДата = Новый ОписаниеТипов("Дата");
	Если СтрДлина(СтрИсх) = 10 Тогда
		Возврат ТипДата.ПривестиЗначение(Прав(СтрИсх, 4) + Сред(СтрИсх, 4, 2) + Лев(СтрИсх, 2));
	Иначе
		Возврат ТипДата.ПривестиЗначение(СтрИсх);
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПрочитатьДоКонцаЭлемента(ФайлОбмена, Имя)
	Пока (Не ФайлОбмена.ИмеетИмя) Или ФайлОбмена.ТипУзла <> ТипУзлаXML.КонецЭлемента Или НРег(Имя) <> НРег(ФайлОбмена.ЛокальноеИмя) Цикл 
		ФайлОбмена.Прочитать();
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПрочитатьНачалоЭлемента(ФайлОбмена, Имя, Ошибка)
	ФайлОбмена.Прочитать();
	Если (Не ФайлОбмена.ИмеетИмя) Или ФайлОбмена.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или НРег(Имя) <> НРег(ФайлОбмена.ЛокальноеИмя) Тогда 
		Ошибка = "Не найден обязательный аттрибут """+Имя+"""";
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПрочитатьСекциюОбТоргСбор(ФайлОбмена, Ошибка)
	Если Не ПрочитатьНачалоЭлемента(ФайлОбмена, "ОбТоргСбор", Ошибка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПрочитатьНачалоЭлемента(ФайлОбмена, "СведВидПД", Ошибка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	НовСтр = ЗагружаемыеСведения.Добавить();
	
	Инд = 0;
	Пока ЗначениеЗаполнено(ФайлОбмена.ИмяАтрибута(Инд)) Цикл
		Если НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("ДатаВозникИсп") Тогда
			НовСтр.ДАТА_ПРАВА = ДатаИзСтрокиXML(ФайлОбмена.ПолучитьАтрибут(Инд));
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("КодВидТорг") Тогда 
			НовСтр.КодВидаПД = ФайлОбмена.ПолучитьАтрибут(Инд);
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	
	ПрочитатьДоКонцаЭлемента(ФайлОбмена, "СведВидПД");
	
	Если Не ПрочитатьНачалоЭлемента(ФайлОбмена, "СведОбТорг", Ошибка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Инд = 0;
	Пока ЗначениеЗаполнено(ФайлОбмена.ИмяАтрибута(Инд)) Цикл
		Если НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("ОКТМО") Тогда
			НовСтр.ОКТМО = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("КодВидОб") Тогда 
			НовСтр.КодВидаТоргОбъекта = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("НаимТоргОб") Тогда 
			НовСтр.НаимТоргОб = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("ОснПользОб") Тогда 
			НовСтр.ОснИсп = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("НомерРазр") Тогда 
			НовСтр.НомерРазр = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("КадастрНомЗд") Тогда 
			НовСтр.НомЗдание = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("КадастНомПом") Тогда 
			НовСтр.НомПомещ = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("КадастНомЗУ") Тогда 
			НовСтр.НомУч = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("ПлощОбТорг") Тогда 
			НовСтр.ПлощТоргЗала = ФайлОбмена.ПолучитьАтрибут(Инд);
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	
	Если Не ПрочитатьНачалоЭлемента(ФайлОбмена, "НомОбъект", Ошибка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	ФайлОбмена.Прочитать();
	Если ТипУзлаXML.Текст <> ФайлОбмена.ТипУзла Тогда
		Ошибка = "неправильный тип реквизита ""НомОбъект""";
		Возврат Ложь;
	Иначе
		НовСтр.НомОбъектУв = ФайлОбмена.Значение;
	КонецЕсли;
	ПрочитатьДоКонцаЭлемента(ФайлОбмена, "НомОбъект");
	
	Если Не ПрочитатьНачалоЭлемента(ФайлОбмена, "АдрОбТорг", Ошибка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	Инд = 0;
	Пока ЗначениеЗаполнено(ФайлОбмена.ИмяАтрибута(Инд)) Цикл
		Если НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("Индекс") Тогда
			НовСтр.ИНДЕКС = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("КодРегион") Тогда 
			НовСтр.КОД_РЕГИОНА = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("Район") Тогда 
			НовСтр.РАЙОН = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("Город") Тогда 
			НовСтр.ГОРОД = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("НаселПункт") Тогда 
			НовСтр.НАСЕЛЕННЫЙ_ПУНКТ = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("Улица") Тогда 
			НовСтр.УЛИЦА = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("Дом") Тогда 
			НовСтр.ДОМ = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("Корпус") Тогда 
			НовСтр.КОРПУС = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("Кварт") Тогда 
			НовСтр.КВАРТИРА = ФайлОбмена.ПолучитьАтрибут(Инд);
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	ПрочитатьДоКонцаЭлемента(ФайлОбмена, "АдрОбТорг");
	ПрочитатьДоКонцаЭлемента(ФайлОбмена, "СведОбТорг");
	
	Если Не ПрочитатьНачалоЭлемента(ФайлОбмена, "РасчСумСбор", Ошибка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	Инд = 0;
	Пока ЗначениеЗаполнено(ФайлОбмена.ИмяАтрибута(Инд)) Цикл
		Если НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("ИсчислКв") Тогда
			НовСтр.ИсчСуммаСбора = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("СумЛьгот") Тогда 
			НовСтр.СуммаЛьготы = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("КодЛьгот") Тогда 
			НовСтр.КодЛьготы = ФайлОбмена.ПолучитьАтрибут(Инд);
		ИначеЕсли НРег(ФайлОбмена.ИмяАтрибута(Инд)) = НРег("СумСборКв") Тогда 
			НовСтр.СуммаСбораИтого = ФайлОбмена.ПолучитьАтрибут(Инд);
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	
	ФайлОбмена.Прочитать();
	Если (Не ФайлОбмена.ИмеетИмя) Или ФайлОбмена.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		Ошибка = "Неправильный формат секции ""РасчСумСбор""";
		Возврат Ложь;
	Иначе 
		Если НРег("СтавкаОбТорг") = НРег(ФайлОбмена.ЛокальноеИмя) Тогда
			ФайлОбмена.Прочитать();
			Если ТипУзлаXML.Текст <> ФайлОбмена.ТипУзла Тогда
				Ошибка = "неправильный тип реквизита ""СтавкаОбТорг""";
				Возврат Ложь;
			Иначе
				НовСтр.СтавкаСбораРуб = ФайлОбмена.Значение;
			КонецЕсли;
			ПрочитатьДоКонцаЭлемента(ФайлОбмена, "СтавкаОбТорг");
		ИначеЕсли НРег("СтавкаКвМ") = НРег(ФайлОбмена.ЛокальноеИмя) Тогда 
			ФайлОбмена.Прочитать();
			Если ТипУзлаXML.Текст <> ФайлОбмена.ТипУзла Тогда
				Ошибка = "неправильный тип реквизита ""СтавкаКвМ""";
				Возврат Ложь;
			Иначе
				НовСтр.СтавкаСбораКвм = ФайлОбмена.Значение;
			КонецЕсли;
			ПрочитатьДоКонцаЭлемента(ФайлОбмена, "СтавкаКвМ");
		Иначе 
			Ошибка = "Неправильный формат секции ""РасчСумСбор""";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПрочитатьДоКонцаЭлемента(ФайлОбмена, "РасчСумСбор");
	
	ПрочитатьДоКонцаЭлемента(ФайлОбмена, "ОбТоргСбор");
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПрочитатьСодержательнуюЧасть(ФайлОбмена, Ошибка)
	ФайлОбмена.Прочитать();
	Если (Не ФайлОбмена.ИмеетИмя) Или ФайлОбмена.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или НРег("УчетТоргСбор") <> НРег(ФайлОбмена.ЛокальноеИмя) Тогда 
		Ошибка = "Не найден обязательный аттрибут ""УчетТоргСбор""";
		Возврат Ложь;
	КонецЕсли;
	
	Пока ПрочитатьСекциюОбТоргСбор(ФайлОбмена, Ошибка) Цикл
	КонецЦикла;
	
	Возврат (ФайлОбмена.ИмеетИмя И ФайлОбмена.ТипУзла = ТипУзлаXML.КонецЭлемента Или НРег("УчетТоргСбор") = НРег(ФайлОбмена.ЛокальноеИмя));
КонецФункции

&НаСервере
Функция ПолучитьДанныеИзФайла(ФайлСрв, Ошибка)
	ФайлОбмена = Новый ЧтениеXML();
	ФайлОбмена.ОткрытьФайл(ФайлСрв);
	
	Если Не ПрочитатьИПроверитьЗаголовок(ФайлОбмена, Ошибка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ЗагружаемыеСведения.Очистить();
	Если Не ПрочитатьСодержательнуюЧасть(ФайлОбмена, Ошибка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура СформироватьДеревоИзФайла()
	Корень = Разделы.ПолучитьЭлементы();
	Корень.Очистить();
	
	Титульный = Корень.Добавить();
	Титульный.Наименование = "Титульный лист";
	Титульный.ИндексКартинки = 1;
	Титульный.ТипСтраницы = 1;
	Титульный.UID = ТитульнаяСтраница[0].UID;
	
	Листы = Корень.Добавить();
	Листы.Наименование = "Сведения о" + Символы.ПС + "торговом объекте";
	СписокЛистов = Листы.ПолучитьЭлементы();
	
	Номер = 1;
	Сведения.Очистить();
	Для Каждого Стр Из ЗагружаемыеСведения Цикл 
		НовСтр = Сведения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		НовСтр.UID = Новый УникальныйИдентификатор;
		
		Лист = СписокЛистов.Добавить();
		Лист.ИндексКартинки = 1;
		Лист.ТипСтраницы = 2;
		Лист.Наименование = "Стр. " + Номер;
		Лист.UID = НовСтр.UID;
		НовСтр.П_ИНН1 = ТитульнаяСтраница[0].П_ИНН;
		НовСтр.П_КПП1 = ТитульнаяСтраница[0].П_КПП;
		Номер = Номер + 1;
	КонецЦикла;
	
	ТитульнаяСтраница[0].КОЛИЧЕСТВО_СТРАНИЦ = 1 + Сведения.Количество();
	Обл = ПредставлениеУведомления.Области.Найти("КОЛИЧЕСТВО_СТРАНИЦ");
	Если Обл <> Неопределено Тогда 
		Обл.Значение = 1 + Сведения.Количество();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СоздатьНаОснованииУведомления(Команда)
	ОткрытьФорму("Отчет.РегламентированноеУведомлениеТС1.Форма.ФормаВыбораОтправленных", Новый Структура("Организация", Объект.Организация), ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		ЗагрузитьУведомлениеНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУведомлениеНаКлиенте(Уведомление)
	ОписаниеОшибки = "";
	Результат = ЗагрузитьУведомлениеНаСервере(Уведомление, ОписаниеОшибки);
	Если Не Результат Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьУведомлениеНаСервере(Уведомление, ОписаниеОшибки)
	СведенияПоВсемОтправкам = СведенияПоОтправкам.СведенияПоВсемОтправкам(Уведомление);
	
	Для Каждого ОтправленныеСведения Из СведенияПоВсемОтправкам Цикл
		Если ЗначениеЗаполнено(ОтправленныеСведения.ДатаЗавершения) Тогда
			Идентификатор = ОтправленныеСведения.ИдентификаторОтправки;
			СведенияПоОтправке = СведенияПоОтправкам.СведенияПоОтправке(Уведомление, Идентификатор);
			
			Если СведенияПоОтправке.Статус = Перечисления.СтатусыОтправки.Сдан Тогда
				СтруктураПолногоИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СведенияПоОтправке.ИмяФайла);
				ИмяФайла = СтруктураПолногоИмениФайла.ИмяБезРасширения;
				АдресДвДанных = СведенияПоОтправке.АдресДвДанных;
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ОписаниеОшибки = "Данное уведомление не было сдано в налоговую инспекцию";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗагрузитьОтчет(ОписаниеОшибки, АдресДвДанных, ИмяФайла) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ТитульнаяСтраница[0].КодПричины = "2";
	КодПричины = "2";
	Обл = ПредставлениеУведомления.Области.Найти("КодПричины");
	Если Обл <> Неопределено Тогда 
		Обл.Значение = "2";
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ПроверитьВыгрузкуНаСервере()
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ПроверитьДокумент(УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	ПроверитьВыгрузкуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьУведомлениеИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры