&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем ВидДокументаКорректирующий;

&НаКлиенте
Перем КоличествоЗагруженныхФайлов, КаталогЗагруженногоФайла;

&НаКлиенте
Перем ФормаВыгрузкиРеглОтчета; // Обход ошибки в платформе.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.ПерсУчетВедетсяВоВнешнейПрограмме
		= РегламентированнаяОтчетность.ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;

	СтруктураРеквизитовФормы.мЧтоОчищать               = "Расчет";
	СтруктураРеквизитовФормы.мСоставПоказателей        = "СоставПоказателей2015Кв1";
	СтруктураРеквизитовФормы.мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме";

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	СтруктураРеквизитовФормы.мИдГруппы4  = "П0004000001";
	СтруктураРеквизитовФормы.мИдГруппы5  = "П0005000001";
	
	КолИсхСтрокИдГруппы4   = 1;
	КолИсхСтрокИдГруппы5   = 1;
	
	КолКолонокИдГруппы4   = 14;
	КолКолонокИдГруппы5   = 10;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел21.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел24.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел6.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	// Структура содержит данные дополнительных страниц.
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел21", "ТаблицаСтраницыРазделаРаздел21");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел24", "ТаблицаСтраницыРазделаРаздел24");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел6",  "ТаблицаСтраницыРазделаРаздел6");

	СтруктураДанныхТитульный  = Новый Структура;
	СтруктураДанныхРаздел1    = Новый Структура;
	СтруктураДанныхРаздел22   = Новый Структура;
	СтруктураДанныхРаздел31   = Новый Структура;
	СтруктураДанныхРаздел32   = Новый Структура;
	СтруктураДанныхРаздел4    = Новый Структура;
	СтруктураДанныхРаздел5    = Новый Структура;
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  СтруктураРеквизитовФормы.мИдГруппы4);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,  СтруктураРеквизитовФормы.мИдГруппы5);
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  КолИсхСтрокИдГруппы4);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,  КолИсхСтрокИдГруппы5);
	
	мСтруктураКолвоКолонокРазделов  = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  КолКолонокИдГруппы4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,  КолКолонокИдГруппы5);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,  Новый СписокЗначений);
	
	ЦветЗаполняетсяТолькоВручную        = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир        = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир     = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяОднозначноВручную    = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически        = Новый Цвет(255, 255, 255);
	СтруктураРеквизитовФормы.ЦветБелый  = Новый Цвет(255, 255, 255);
	СтруктураРеквизитовФормы.ЦветЖелтый = Новый Цвет(255, 255, 192);
	
	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "11/03/2015";
	
	// Код отчета (условный).
	СтруктураРеквизитовФормы.мКодОтчета = "1169999"; // Условный
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ОбъектОтчет = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ИмяРаздела = "Титульный";
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма                      = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета              = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета             = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма                    = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок                      = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация                          = Параметры.Организация;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	СтруктураРеквизитовФормы.ВидДокумента                         = Параметры.ВидДокумента;
	СтруктураРеквизитовФормы.НеОтображатьПредупреждение           = Истина;
	
	ВидДокументаКорректирующий = ?(СтруктураРеквизитовФормы.ВидДокумента = 1, Истина, Ложь);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
	                                      Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
	                                      Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
	                                      Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.ОписаниеСтраницРаздела6 = Новый Массив;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Заголовок = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,
	                                               СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
    		
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюТД = Элементы.ТабличныйДокументКонтекстноеМеню;
	
	КМенюТД.Видимость = Ложь;
	
	КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета =
			?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
			ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1,
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;
		
		ЗаголовокРаздела = Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено;
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		                                                Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета,
														ЗаголовокРаздела);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		КМенюРО.Видимость = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
		 ИЛИ Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
			
		Иначе
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
					
		КонецЕсли;
		
	Иначе
		
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел25" Тогда
		
		Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел6" Тогда
	
		Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел4"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
		
		КМенюТД.Видимость = Истина;
		
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		
		ТабличныйДокумент.Области.НомерПачки.Значение = НомерПачки;
		
		Элементы.Обновить.Доступность = Истина;
		
		Если НЕ СтруктураРеквизитовФормы.ПерсУчетВедетсяВоВнешнейПрограмме
			И ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
			
			// Отчет был сформирован, когда данные перс. учета велись во внешней программе.
			// В этом случае делаем "номер корректировки" недоступным для изменения.
			ТабличныйДокумент.Области.НомерКорректировки.Защита = Истина;
			ТабличныйДокумент.Области.НомерКорректировки.ЦветФона = СтруктураРеквизитовФормы.ЦветБелый;
			
		Иначе
			
			ДоступноИзменениеВида = ДоступноИзменениеВидаРСВ_1();
			
			ДоступноРедактированиеНомераКорректировки = ДоступноИзменениеВида
				ИЛИ (НЕ ДоступноИзменениеВида И ТабличныйДокумент.Области.НомерКорректировки.Значение > 0);
			
			ТабличныйДокумент.Области.НомерКорректировки.Защита = НЕ ДоступноРедактированиеНомераКорректировки;
			ТабличныйДокумент.Области.НомерКорректировки.ЦветФона = ?(ДоступноРедактированиеНомераКорректировки,
				СтруктураРеквизитовФормы.ЦветЖелтый, СтруктураРеквизитовФормы.ЦветБелый);
			
		КонецЕсли;
		
		УстановитьДоступностьРедактированияТипаКорректировки();
		
	Иначе
		
		Элементы.Обновить.Доступность = Ложь;
		
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборЗавершение(ВыбранныйВариант, ДополнительныеПараметры) Экспорт
	
	ВариантЦифры = ДополнительныеПараметры.ВариантЦифры;
	Если ВыбранныйВариант <> Неопределено Тогда
		ВыбранВариантОтображенияЦифрами = (ВыбранныйВариант = ВариантЦифры);
		СтруктураРеквизитовФормы.НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами = ВыбранВариантОтображенияЦифрами;
		Модифицированность = Истина;
	КонецЕсли;
	УстановитьФорматОтображенияНулевыхЗначенийСтрок100и150();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)

	ОбластьИмя = Область.Имя;
	
	Если ОбластьИмя = "ЗаголовокСтроки100" ИЛИ ОбластьИмя = "ЗаголовокСтроки150" Тогда
		СписокВариантовОтображения = Новый СписокЗначений;
		ВариантПрочерк = СписокВариантовОтображения.Добавить(, "Отображать прочерком");
		ВариантЦифры = СписокВариантовОтображения.Добавить(, "Отображать цифрами");
		
		ДополнительныеПараметры = Новый Структура("ВариантЦифры", ВариантЦифры);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВариантовОтображения, Элемент);
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ОбластьИмя, "ДобавитьСтраницу") > 0 Тогда
		
		ДобавитьСтраницу("");
		
	ИначеЕсли СтрЧислоВхождений(ОбластьИмя, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
		
		УдалитьСтраницу("");
		
	ИначеЕсли СтрЧислоВхождений(ОбластьИмя, "ДобавитьСтроку") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДобавитьСтроку("");
		
	ИначеЕсли СтрЧислоВхождений(ОбластьИмя, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		УдалитьСтроку("");
		
	КонецЕсли;	
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область,
		                                                                                     СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ОбластьИмя, "ДокУпПред") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураДокумента", мСтруктураДокУпПред);
		
		ФормаВводаДокументПредставителя = ПолучитьФорму("Отчет.РегламентированныйОтчетРСВ1.Форма.ФормаВводаДокументПредставителя", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Область, ОбластьИмя, Элемент", Область, ОбластьИмя, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборДокУпПредЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВводаДокументПредставителя.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВводаДокументПредставителя.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВводаДокументПредставителя.Открыть();
		
	Иначе
		
		ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ОбластьИмя));
		Если ПараметрВводаПоля.Количество() = 0 Тогда
			
			ПараметрВводаПоля = Неопределено;
			
			Для Каждого Стр из СвойстваПоказателей Цикл
				Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
					ПараметрВводаПоля = Стр;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПараметрВводаПоля = ПараметрВводаПоля[0];
		КонецЕсли;
		
		КолонкаПоиска = "Код";
		
		Если СтрНайти(ОбластьИмя, "П00024000200") = 1 Тогда
			СтандартнаяОбработка = Ложь;
			Модифицированность = Истина;
			
			НомерОтмеченногоПоля = Прав(ОбластьИмя, 1);
			
			Для Инд = 1 По 3 Цикл
				Постфикс = Строка(Инд);
				ТабличныйДокумент.Области["П00024000200" + Постфикс].Значение = ?(Постфикс = НомерОтмеченногоПоля, "Х", " ");
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			
			ВвестиПоказатель(Элемент, Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе,
				ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, КолонкаПоиска);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборДокУпПредЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	ОбластьИмя = ДополнительныеПараметры.ОбластьИмя;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат <> Неопределено Тогда
		
		мСтруктураДокУпПред = Результат;
		Текст = "";
		
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.НаименованиеУдостоверяющего, "");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.СерияРимскиеЦифры, " ");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.СерияРусскиеБуквы, " ");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.НомерУдостоверяющего, " № ");
		Текст = ДобавитьРеквизит(Текст, Формат(мСтруктураДокУпПред.ДатаВыдачи,"ДФ=dd.MM.yyyy"), " от ");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.КемВыдан, " выдан: ");
		
		ТабличныйДокумент.Области.ДокУпПред.Значение = Текст;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ОбластьИмя));
	Если ПараметрВводаПоля.Количество() = 0 Тогда
		
		ПараметрВводаПоля = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПараметрВводаПоля = ПараметрВводаПоля[0];
	КонецЕсли;
	
	КолонкаПоиска = "Код";
	
	Если СтрНайти(ОбластьИмя, "П00024000200") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		
		НомерОтмеченногоПоля = Прав(ОбластьИмя, 1);
		
		Для Инд = 1 По 3 Цикл
			Постфикс = Строка(Инд);
			ТабличныйДокумент.Области["П00024000200" + Постфикс].Значение = ?(Постфикс = НомерОтмеченногоПоля, "Х", " ");
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		ВвестиПоказатель(Элемент, Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе,
			ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, КолонкаПоиска);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	
	СтруктураРеквизитовФормы.ДанныеОтчетаИзмененыВручную = Истина;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяОбласти = Область.Имя;;
	
	Если ИмяРаздела = "Титульный"
	   И Область.Имя = "ДатаПодписи" Тогда
	   
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
	   
		ЗаполнитьСведенияОбОрганизации(Истина);
		
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
		
		ЗаполнитьДатуВЯчейкахНаСервере();
		
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
		
		Модифицированность = Истина;
		
	ИначеЕсли ИмяРаздела = "Титульный"
		И Область.Имя = "НомерКорректировки" Тогда
		
		ДоступноИзменениеВида = ДоступноИзменениеВидаРСВ_1();
		
		Если НЕ ДоступноИзменениеВида Тогда
			Если Область.Значение = 0 Тогда
				Область.Значение = 1;
			КонецЕсли;
		КонецЕсли;
		
		НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
		
		УстановитьДоступностьРедактированияТипаКорректировки();
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(Область.Значение = 0, 0, 1);
		
		УстановитьВидимостьМенюВыгрузкиПроверкиВИнтернетеИОтправки();
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		
		Модифицированность = Истина;
		
	ИначеЕсли ИмяРаздела = "Титульный"
	        И Область.Имя = "НомерПачки" Тогда
			
		НомерПачки = ТабличныйДокумент.Области.НомерПачки.Значение;
		
		Модифицированность = Истина;
		
	ИначеЕсли ИмяРаздела = "Раздел21" Или ИмяРаздела = "Раздел24" Тогда
		
		ТаблицаРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
		СтраницаРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		ТаблицаРаздела  = ЭтаФорма[ТаблицаРаздела];
		ДанныеСтраницы  = ТаблицаРаздела[СтраницаРаздела-1].Данные[0].Значение;
		
		Если ДанныеСтраницы.Свойство(ИмяОбласти) Тогда
			ДанныеСтраницы[ИмяОбласти] = Область.Значение;
		КонецЕсли;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	ИначеЕсли ИмяРаздела = "Раздел1"
		  ИЛИ ИмяРаздела = "Раздел22"
		  ИЛИ ИмяРаздела = "Раздел31"
		  ИЛИ ИмяРаздела = "Раздел32"
		  ИЛИ ИмяРаздела = "Раздел4"
		  ИЛИ ИмяРаздела = "Раздел5" Тогда
		
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность  = Ложь;
	
	Если (СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0004000001") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0005000001") > 0)
	   И СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "УдалитьСтроку") = 0 Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ПерсУчетВедетсяВоВнешнейПрограмме Тогда
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Выгрузка невозможна!'"));
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	#Если ВебКлиент Тогда
		ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	#Иначе
		ВставитьДополнительнуюСтраницуИзменитьТаблицуПараметровАвтозаполненияНаСервере(1,
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		ДобавитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВременныйФайл(ИмяУдаляемогоФайла)
	
	УдаляемыйФайл = Новый Файл(ИмяУдаляемогоФайла);
	Если УдаляемыйФайл.Существует() Тогда
		УдалитьФайлы(ИмяУдаляемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогПриНеПодключенномРасширенииРаботыСФайлами()
	
	Перем АдресФайла, ВыбИмяФайла, ДопПараметры;
	
	// Обработка файла описания сведений раздела 2.5.
	Результат = Истина;
	КоличествоЗагруженныхФайлов = 0;
	
	ПомещениеФайлаОписанияРаздела25(Результат, АдресФайла, ВыбИмяФайла, ДопПараметры);
	
	Если КоличествоЗагруженныхФайлов = 1 Тогда // файл описания сведений раздела 2.5 загружен
		
		// Обработка файлов раздела 6.
		Результат = Истина;
		КоличествоЗагруженныхФайлов = 0;
		
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("ПомещенныеФайлы", Новый Массив);
		ДопПараметры.Вставить("МассивИменФайлов",
			ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.ИменаФайловВнешнихСведенийРаздела6));
		ДопПараметры.Вставить("МассивВыбИменФайлов", Новый Массив);
		ДопПараметры.Вставить("ИндексМассива", 0);
		
		АдресФайла  = "";
		ВыбИмяФайла = "";
		
		ПомещениеФайловРаздела6(Результат, АдресФайла, ВыбИмяФайла, ДопПараметры);
		
		РазобратьФайлыСведенийРаздела6(ДопПараметры.ПомещенныеФайлы, КаталогЗагруженногоФайла);
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаОписанияРаздела25(Результат, АдресФайла, ВыбИмяФайла, ДопПараметры) Экспорт
	
	Если Не Результат ИЛИ КоличествоЗагруженныхФайлов > 1 Тогда
		
		КоличествоЗагруженныхФайлов = 0;
		
		Возврат;
		
	Иначе
		
		Если КоличествоЗагруженныхФайлов = 1 Тогда
			
			Если Прав(ВыбИмяФайла, 4) <> ".pcb" Тогда
				
				КоличествоЗагруженныхФайлов = 0;
				
				ПоказатьПредупреждение(, НСтр(
				"ru='Необходимо выбрать файл описания пакета сведений персонифицированного учета с расширением ""pcb""!'"));
				
				Возврат;
				
			КонецЕсли;
			
			Каталог = "";
			СтрокаПоиска = ВыбИмяФайла;
			
			Пока СтрДлина(СтрокаПоиска) > 0 Цикл
				
				Если Прав(СтрокаПоиска, 1) = "\" Тогда
					
					Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
					
					Прервать;
					
				Иначе
					
					СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
					
				КонецЕсли;
				
			КонецЦикла;
			
			РазобратьФайлСведенийРаздела25ПриНеПодключенномРасширенииРаботыСФайлами(АдресФайла, ВыбИмяФайла, Каталог);
			
			Если НЕ (ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВнешнихСведенийРаздела25)
				И ЗначениеЗаполнено(СтруктураРеквизитовФормы.ИменаФайловВнешнихсведенийРаздела6)) Тогда
				
				КоличествоЗагруженныхФайлов = 0;
				
				Возврат;
				
			Иначе
				
				КаталогЗагруженногоФайла = Каталог;
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Файл описания пакета сведений персонифицированного учета %1 успешно импортирован.'"), ВыбИмяФайла);
				Сообщение.Сообщить();
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоЗагруженныхФайлов = КоличествоЗагруженныхФайлов + 1;
	
	АдресФайла  = "";
	ВыбИмяФайла = "";
	
	Оп = Новый ОписаниеОповещения("ПомещениеФайлаОписанияРаздела25", ЭтотОбъект);
	НачатьПомещениеФайла(Оп, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайловРаздела6(Результат, АдресФайла, ВыбИмяФайла, ДопПараметры) Экспорт
	
	ПомещенныеФайлы		= ДопПараметры.ПомещенныеФайлы;
	МассивИменФайлов	= ДопПараметры.МассивИменФайлов;
	МассивВыбИменФайлов = ДопПараметры.МассивВыбИменФайлов;
	ИндексМассива		= ДопПараметры.ИндексМассива;
	
	Если Не Результат Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Импорт файлов пачек прерван!'"));
		
		Возврат;
		
	ИначеЕсли ИндексМассива > (МассивИменФайлов.Количество() - 1) Тогда
		
		Возврат;
		
	Иначе
		
		Если КоличествоЗагруженныхФайлов > 0 Тогда
			
			ВыбранФайлПачки = Ложь;
			
			Для Каждого ТекИмяФайла Из МассивИменФайлов Цикл
				
				Если СтрНайти(ВыбИмяФайла, ТекИмяФайла) > 0 Тогда
					
					ВыбранФайлПачки = Истина;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если МассивВыбИменФайлов.Найти(ВыбИмяФайла) <> Неопределено Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Файл пачки %1 ранее уже был импортирован!'"), ВыбИмяФайла);
				Сообщение.Сообщить();
				
			Иначе
				
				Если НЕ ВыбранФайлПачки Тогда
					
					Если КоличествоЗагруженныхФайлов > 0 Тогда
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Файл %1 не предназначен для импорта!'"), ВыбИмяФайла);
						Сообщение.Сообщить();
						
					КонецЕсли;
					
				Иначе
					
					МассивВыбИменФайлов.Добавить(ВыбИмяФайла);
					
					Попытка
						
						ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ВыбИмяФайла);
						ОписаниеФайла.Хранение = АдресФайла;
						ПомещенныеФайлы.Добавить(ОписаниеФайла);
						
					Исключение
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не удалость импортировать файл пачки %1!'"), ВыбИмяФайла);
						Сообщение.Сообщить();
						
						Возврат;
						
					КонецПопытки;
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Файл пачки %1 успешно импортирован.'"), ВыбИмяФайла);
					Сообщение.Сообщить();
					
					ИндексМассива = ИндексМассива + 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИндексМассива > (МассивИменФайлов.Количество() - 1) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	АдресФайла  = "";
	ВыбИмяФайла = "";
	
	Результат = Истина;
	КоличествоЗагруженныхФайлов = КоличествоЗагруженныхФайлов + 1;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ПомещенныеФайлы",	 ПомещенныеФайлы);
	ДопПараметры.Вставить("МассивИменФайлов",	 МассивИменФайлов);
	ДопПараметры.Вставить("МассивВыбИменФайлов", МассивВыбИменФайлов);
	ДопПараметры.Вставить("ИндексМассива",		 ИндексМассива);
	
	Оп = Новый ОписаниеОповещения("ПомещениеФайловРаздела6", ЭтотОбъект, ДопПараметры);
	НачатьПомещениеФайла(Оп, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогПриПодключенномРасширенииРаботыСФайлами()
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл описания пакета выгрузки сведений персонифицированного учета";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Фильтр = НСтр("ru = 'Файл описания пакета выгрузки сведений персонифицированного учета'") + "(*.pcb)|*.pcb";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДиалогПриПодключенномРасширенииРаботыСФайламиПослеОтображенияДиалогаВыбораФайла", ЭтотОбъект);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогПриПодключенномРасширенииРаботыСФайламиПослеОтображенияДиалогаВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	    	
	Если Прав(ВыбранныеФайлы[0], 4) <> ".pcb" Тогда
		
		ПоказатьПредупреждение(, НСтр(
		"ru='Необходимо выбрать файл описания пакета сведений персонифицированного учета с расширением ""pcb""!'"));
		
		Возврат;
		
	КонецЕсли;
	
	Каталог = "";
		
	СтрокаПоиска = ВыбранныеФайлы[0];
	
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		
		Если Прав(СтрокаПоиска, 1) = "\" Тогда
			
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			
			Прервать;
			
		Иначе
			
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
			
		КонецЕсли;
		
	КонецЦикла;
		    	
	ПомещаемыеФайлы = Новый Массив;
		
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ВыбранныеФайлы[0]);
	ПомещаемыеФайлы.Добавить(ОписаниеФайла);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Каталог", Каталог);
	ДополнительныеПараметры.Вставить("ВыбранныеФайлы", ВыбранныеФайлы);
			
	ОписаниеОповещения
	 = Новый ОписаниеОповещения("ДиалогПриПодключенномРасширенииРаботыСФайламиПослеОтображенияДиалогаВыбораФайлаПослеПомещенияФайлов",
	                            ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ДиалогПриПодключенномРасширенииРаботыСФайламиПослеОтображенияДиалогаВыбораФайлаПослеПомещенияФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено
 	 ИЛИ ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РазобратьФайлСведенийРаздела25ПриПодключенномРасширенииРаботыСФайлами(ПомещенныеФайлы, ДополнительныеПараметры.Каталог);
	
	Если НЕ (ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВнешнихСведенийРаздела25)
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.ИменаФайловВнешнихсведенийРаздела6)) Тогда
		
		Возврат;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru='Файл описания пакета сведений персонифицированного учета %1 успешно импортирован.'"),
		ДополнительныеПараметры.ВыбранныеФайлы[0]);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещенныеФайлы.Очистить();
	
	МассивИменФайлов = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы.ИменаФайловВнешнихСведенийРаздела6);
	
	Для ИндексМассива = 0 По МассивИменФайлов.Количество() - 1 Цикл
		
		ИмяФайлаПачки = ДополнительныеПараметры.Каталог + МассивИменФайлов[ИндексМассива];
		
		Попытка
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ИмяФайлаПачки);
			ПомещаемыеФайлы.Добавить(ОписаниеФайла);
		Исключение
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалость импортировать файл пачки %1!'"), ИмяФайлаПачки));
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru='Файлы пачек:'");
	Сообщение.Сообщить();
	
	Для ИндексМассива = 0 По МассивИменФайлов.Количество() - 1 Цикл
		
		ИмяФайлаПачки = ДополнительныеПараметры.Каталог + МассивИменФайлов[ИндексМассива];
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"), ИмяФайлаПачки);
		Сообщение.Сообщить();
		
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru='успешно импортированы.'");
	Сообщение.Сообщить();
	
	ОписаниеОповещения
	 = Новый ОписаниеОповещения("ДиалогПриПодключенномРасширенииРаботыСФайламиПослеОтображенияДиалогаВыбораФайлаПослеПовторногоПомещенияФайлов",
	                            ЭтотОбъект, ДополнительныеПараметры.Каталог);
	
	НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогПриПодключенномРасширенииРаботыСФайламиПослеОтображенияДиалогаВыбораФайлаПослеПовторногоПомещенияФайлов(ПомещенныеФайлы, Каталог) Экспорт
	
	Если ПомещенныеФайлы = Неопределено
 	 ИЛИ ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РазобратьФайлыСведенийРаздела6(ПомещенныеФайлы, Каталог);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура РазобратьФайлСведенийРаздела25ПриПодключенномРасширенииРаботыСФайлами(ПомещенныеФайлы, Каталог)
	
	СтруктураРеквизитовФормы.АдресВнешнихСведенийРаздела25 = Неопределено;
	ИменаФайловРаздела6 = Новый Массив;
	
	КаталогВремФайлов = КаталогВременныхФайлов();
	ФайлЗагрузки = КаталогВремФайлов + СтрЗаменить(ПомещенныеФайлы[0].Имя, Каталог, "");
	ФайлЗагрузкиДвоичныеДанные = ПолучитьИзВременногоХранилища(ПомещенныеФайлы[0].Хранение);
	ФайлЗагрузкиДвоичныеДанные.Записать(ФайлЗагрузки);
	
	ФайлСведений = Новый ТекстовыйДокумент();
	ФайлСведений.Прочитать(ФайлЗагрузки, "windows-1251");
	
	КоличествоСтрок = ФайлСведений.КоличествоСтрок();
	Если КоличествоСтрок < 3 Тогда
		СообщитьОбОшибкеФорматаИмпорта();
		УдалитьВременныйФайл(ФайлЗагрузки);
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизитов = ФайлСведений.ПолучитьСтроку(1);
	МассивРеквизитов = СтроковыеФункцииКлиентсервер.РазложитьСтрокуВМассивПодстрок(СтрокаРеквизитов, ";");
	Если МассивРеквизитов.Количество() < 3 Тогда
		СообщитьОбОшибкеФорматаИмпорта();
		УдалитьВременныйФайл(ФайлЗагрузки);
		Возврат;
	КонецЕсли;
	
	Файл_РегистрационныйНомерПФР = СокрЛП(МассивРеквизитов[0]);
	Файл_КалендарныйГод          = СокрЛП(МассивРеквизитов[1]);
	Файл_КодОтчетногоПериода     = СокрЛП(МассивРеквизитов[2]);
	
	Отчет_РегистрационныйНомерПФР = СтруктураРеквизитовФормы.Отчет_РегистрационныйНомерПФР;
	Отчет_КалендарныйГод          = СтруктураРеквизитовФормы.Отчет_КалендарныйГод;
	Отчет_КодОтчетногоПериода     = СтруктураРеквизитовФормы.Отчет_КодОтчетногоПериода;
	
	Если Файл_РегистрационныйНомерПФР <> Отчет_РегистрационныйНомерПФР
	 ИЛИ Файл_КалендарныйГод <> Отчет_КалендарныйГод
	 ИЛИ Файл_КодОтчетногоПериода <> Отчет_КодОтчетногоПериода Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
			"ru='Сведения файла описания пакета сведений персонифицированного учета не соответствуют экземпляру отчета!'");
		Сообщение.Сообщить();
		
		УдалитьВременныйФайл(ФайлЗагрузки);
		
		Возврат;
	КонецЕсли;
	
	СтрокаРазмеровРаздела6 = ФайлСведений.ПолучитьСтроку(2);
	МассивРазмеровРаздела6 = СтроковыеФункцииКлиентсервер.РазложитьСтрокуВМассивПодстрок(СтрокаРазмеровРаздела6, ";");
	Попытка
		КоличествоСтраницРаздела6 = Число(СокрЛП(МассивРазмеровРаздела6[0]));
	Исключение
		СообщитьОбОшибкеФорматаИмпорта();
		УдалитьВременныйФайл(ФайлЗагрузки);
		Возврат;
	КонецПопытки;
	
	ПачкиИсходные       = Новый Массив;
	ПачкиКорректирующие = Новый Массив;
	
	Для Инд = 3 По КоличествоСтрок Цикл
		СтрокаСведений = ФайлСведений.ПолучитьСтроку(Инд);
		Сведения = СтроковыеФункцииКлиентсервер.РазложитьСтрокуВМассивПодстрок(СтрокаСведений, ";");
		
		Попытка
			ВидСведений = СокрЛП(Сведения[0]);
			
			Если ВидСведений = "251" Тогда
				
				ПачкаИсходная = Новый Структура();
				ПачкаИсходная.Вставить("БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную");
				ПачкаИсходная.Вставить("СтраховыхВзносовОПС");
				ПачкаИсходная.Вставить("КоличествоЗЛвПачке");
				ПачкаИсходная.Вставить("ИмяФайла");
				
				ПачкаИсходная.БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную = Число(СокрЛП(Сведения[1]));
				ПачкаИсходная.СтраховыхВзносовОПС                                      = Число(СокрЛП(Сведения[2]));
				ПачкаИсходная.КоличествоЗЛвПачке                                       = Число(СокрЛП(Сведения[3]));
				ПачкаИсходная.ИмяФайла                                                 = СокрЛП(Сведения[4]);
				
				ПачкиИсходные.Добавить(ПачкаИсходная);
				
				ИменаФайловРаздела6.Добавить(ПачкаИсходная.ИмяФайла);
				
			ИначеЕсли ВидСведений = "252" Тогда
				
				ПачкаКорректирующая = Новый Структура();
				ПачкаКорректирующая.Вставить("Квартал");
				ПачкаКорректирующая.Вставить("Год");
				ПачкаКорректирующая.Вставить("ДоначисленоСтраховыхВзносовОПС");
				ПачкаКорректирующая.Вставить("ДоначисленоНаСтраховуюЧасть");
				ПачкаКорректирующая.Вставить("ДоначисленоНаНакопительнуюЧасть");
				ПачкаКорректирующая.Вставить("КоличествоЗЛвПачке");
				ПачкаКорректирующая.Вставить("ИмяФайла");
				
				ПачкаКорректирующая.Квартал                         = Число(СокрЛП(Сведения[1]));
				ПачкаКорректирующая.Год                             = Число(СокрЛП(Сведения[2]));
				ПачкаКорректирующая.ДоначисленоСтраховыхВзносовОПС  = Число(СокрЛП(Сведения[3]));
				ПачкаКорректирующая.ДоначисленоНаСтраховуюЧасть     = Число(СокрЛП(Сведения[4]));
				ПачкаКорректирующая.ДоначисленоНаНакопительнуюЧасть = Число(СокрЛП(Сведения[5]));
				ПачкаКорректирующая.КоличествоЗЛвПачке              = Число(СокрЛП(Сведения[6]));
				ПачкаКорректирующая.ИмяФайла                        = СокрЛП(Сведения[7]);
				
				ПачкиКорректирующие.Добавить(ПачкаКорректирующая);
				
				ИменаФайловРаздела6.Добавить(ПачкаКорректирующая.ИмяФайла);
				
			Иначе
				
				СообщитьОбОшибкеФорматаИмпорта();
				УдалитьВременныйФайл(ФайлЗагрузки);
				Возврат;
				
			КонецЕсли;
			
		Исключение
			
			СообщитьОбОшибкеФорматаИмпорта();
			УдалитьВременныйФайл(ФайлЗагрузки);
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ВнешниеСведенияРаздела25 = Новый Структура;
	ВнешниеСведенияРаздела25.Вставить("ПачкиИсходные", ПачкиИсходные);
	ВнешниеСведенияРаздела25.Вставить("ПачкиКорректирующие", ПачкиКорректирующие);
	
	СтруктураРеквизитовФормы.АдресВнешнихСведенийРаздела25
		= ПоместитьВоВременноеХранилище(ВнешниеСведенияРаздела25, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.ИменаФайловВнешнихСведенийРаздела6
		= ПоместитьВоВременноеХранилище(ИменаФайловРаздела6, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.НовоеКоличествоСтраницРаздела6 = КоличествоСтраницРаздела6;
	
	УдалитьВременныйФайл(ФайлЗагрузки);
	
КонецПроцедуры

&НаСервере
Процедура РазобратьФайлСведенийРаздела25ПриНеПодключенномРасширенииРаботыСФайлами(АдресФайла, ПолноеИмяФайла, Каталог)
	
	СтруктураРеквизитовФормы.АдресВнешнихСведенийРаздела25 = Неопределено;
	ИменаФайловРаздела6 = Новый Массив;
	
	КаталогВремФайлов = КаталогВременныхФайлов();
	ФайлЗагрузки = КаталогВремФайлов + СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ФайлЗагрузкиДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ФайлЗагрузкиДвоичныеДанные.Записать(ФайлЗагрузки);
	
	ФайлСведений = Новый ТекстовыйДокумент();
	ФайлСведений.Прочитать(ФайлЗагрузки, "windows-1251");
	
	КоличествоСтрок = ФайлСведений.КоличествоСтрок();
	Если КоличествоСтрок < 3 Тогда
		СообщитьОбОшибкеФорматаИмпорта();
		УдалитьВременныйФайл(ФайлЗагрузки);
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизитов = ФайлСведений.ПолучитьСтроку(1);
	МассивРеквизитов = СтроковыеФункцииКлиентсервер.РазложитьСтрокуВМассивПодстрок(СтрокаРеквизитов, ";");
	Если МассивРеквизитов.Количество() < 3 Тогда
		СообщитьОбОшибкеФорматаИмпорта();
		УдалитьВременныйФайл(ФайлЗагрузки);
		Возврат;
	КонецЕсли;
	
	Файл_РегистрационныйНомерПФР = СокрЛП(МассивРеквизитов[0]);
	Файл_КалендарныйГод          = СокрЛП(МассивРеквизитов[1]);
	Файл_КодОтчетногоПериода     = СокрЛП(МассивРеквизитов[2]);
	
	Отчет_РегистрационныйНомерПФР = СтруктураРеквизитовФормы.Отчет_РегистрационныйНомерПФР;
	Отчет_КалендарныйГод          = СтруктураРеквизитовФормы.Отчет_КалендарныйГод;
	Отчет_КодОтчетногоПериода     = СтруктураРеквизитовФормы.Отчет_КодОтчетногоПериода;
	
	Если Файл_РегистрационныйНомерПФР <> Отчет_РегистрационныйНомерПФР
	 ИЛИ Файл_КалендарныйГод <> Отчет_КалендарныйГод
	 ИЛИ Файл_КодОтчетногоПериода <> Отчет_КодОтчетногоПериода Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
			"ru='Сведения файла описания пакета сведений персонифицированного учета не соответствуют экземпляру отчета!'");
		Сообщение.Сообщить();
		
		УдалитьВременныйФайл(ФайлЗагрузки);
		
		Возврат;
	КонецЕсли;
	
	СтрокаРазмеровРаздела6 = ФайлСведений.ПолучитьСтроку(2);
	МассивРазмеровРаздела6 = СтроковыеФункцииКлиентсервер.РазложитьСтрокуВМассивПодстрок(СтрокаРазмеровРаздела6, ";");
	Попытка
		КоличествоСтраницРаздела6 = Число(СокрЛП(МассивРазмеровРаздела6[0]));
	Исключение
		СообщитьОбОшибкеФорматаИмпорта();
		УдалитьВременныйФайл(ФайлЗагрузки);
		Возврат;
	КонецПопытки;
	
	ПачкиИсходные       = Новый Массив;
	ПачкиКорректирующие = Новый Массив;
	
	Для Инд = 3 По КоличествоСтрок Цикл
		СтрокаСведений = ФайлСведений.ПолучитьСтроку(Инд);
		Сведения = СтроковыеФункцииКлиентсервер.РазложитьСтрокуВМассивПодстрок(СтрокаСведений, ";");
		
		Попытка
			ВидСведений = СокрЛП(Сведения[0]);
			
			Если ВидСведений = "251" Тогда
				
				ПачкаИсходная = Новый Структура();
				ПачкаИсходная.Вставить("БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную");
				ПачкаИсходная.Вставить("СтраховыхВзносовОПС");
				ПачкаИсходная.Вставить("КоличествоЗЛвПачке");
				ПачкаИсходная.Вставить("ИмяФайла");
				
				ПачкаИсходная.БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную = Число(СокрЛП(Сведения[1]));
				ПачкаИсходная.СтраховыхВзносовОПС                                      = Число(СокрЛП(Сведения[2]));
				ПачкаИсходная.КоличествоЗЛвПачке                                       = Число(СокрЛП(Сведения[3]));
				ПачкаИсходная.ИмяФайла                                                 = СокрЛП(Сведения[4]);
				
				ПачкиИсходные.Добавить(ПачкаИсходная);
				
				ИменаФайловРаздела6.Добавить(ПачкаИсходная.ИмяФайла);
				
			ИначеЕсли ВидСведений = "252" Тогда
				
				ПачкаКорректирующая = Новый Структура();
				ПачкаКорректирующая.Вставить("Квартал");
				ПачкаКорректирующая.Вставить("Год");
				ПачкаКорректирующая.Вставить("ДоначисленоСтраховыхВзносовОПС");
				ПачкаКорректирующая.Вставить("ДоначисленоНаСтраховуюЧасть");
				ПачкаКорректирующая.Вставить("ДоначисленоНаНакопительнуюЧасть");
				ПачкаКорректирующая.Вставить("КоличествоЗЛвПачке");
				ПачкаКорректирующая.Вставить("ИмяФайла");
				
				ПачкаКорректирующая.Квартал                         = Число(СокрЛП(Сведения[1]));
				ПачкаКорректирующая.Год                             = Число(СокрЛП(Сведения[2]));
				ПачкаКорректирующая.ДоначисленоСтраховыхВзносовОПС  = Число(СокрЛП(Сведения[3]));
				ПачкаКорректирующая.ДоначисленоНаСтраховуюЧасть     = Число(СокрЛП(Сведения[4]));
				ПачкаКорректирующая.ДоначисленоНаНакопительнуюЧасть = Число(СокрЛП(Сведения[5]));
				ПачкаКорректирующая.КоличествоЗЛвПачке              = Число(СокрЛП(Сведения[6]));
				ПачкаКорректирующая.ИмяФайла                        = СокрЛП(Сведения[7]);
				
				ПачкиКорректирующие.Добавить(ПачкаКорректирующая);
				
				ИменаФайловРаздела6.Добавить(ПачкаКорректирующая.ИмяФайла);
				
			Иначе
				
				СообщитьОбОшибкеФорматаИмпорта();
				УдалитьВременныйФайл(ФайлЗагрузки);
				Возврат;
				
			КонецЕсли;
			
		Исключение
			
			СообщитьОбОшибкеФорматаИмпорта();
			УдалитьВременныйФайл(ФайлЗагрузки);
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ВнешниеСведенияРаздела25 = Новый Структура;
	ВнешниеСведенияРаздела25.Вставить("ПачкиИсходные", ПачкиИсходные);
	ВнешниеСведенияРаздела25.Вставить("ПачкиКорректирующие", ПачкиКорректирующие);
	
	СтруктураРеквизитовФормы.АдресВнешнихСведенийРаздела25
		= ПоместитьВоВременноеХранилище(ВнешниеСведенияРаздела25, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.ИменаФайловВнешнихСведенийРаздела6
		= ПоместитьВоВременноеХранилище(ИменаФайловРаздела6, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.НовоеКоличествоСтраницРаздела6 = КоличествоСтраницРаздела6;
	
	УдалитьВременныйФайл(ФайлЗагрузки);
	
КонецПроцедуры

&НаСервере
Процедура РазобратьФайлыСведенийРаздела6(ПомещенныеФайлы, Каталог)
	
	Пачки = Новый Массив;
	
	Для ИндексМассива = 0 По ПомещенныеФайлы.Количество() - 1 Цикл
		
		Пачки.Добавить(Новый Структура("ФайлДвоичныеДанные,ИмяФайла",
			 ПолучитьИзВременногоХранилища(ПомещенныеФайлы[ИндексМассива].Хранение),
			 СтрЗаменить(ПомещенныеФайлы[ИндексМассива].Имя, Каталог, "")));
		
	КонецЦикла;
	
	ВнешниеСведенияРаздела6 = Новый Структура;
	ВнешниеСведенияРаздела6.Вставить("Пачки", Пачки);
	
	СтруктураРеквизитовФормы.ВнешниеСведенияРаздела6
		= ПоместитьВоВременноеХранилище(ВнешниеСведенияРаздела6, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.КоличествоСтраницРаздела6
		= СтруктураРеквизитовФормы.НовоеКоличествоСтраницРаздела6;
	
	СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25
		= СтруктураРеквизитовФормы.АдресВнешнихСведенийРаздела25;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
		
		СформироватьРаздел25();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьОбОшибкеФорматаИмпорта()
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru='Нарушен формат файла описания пакета сведений персонифицированного учета!'");
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура Импортировать(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмпортироватьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИмпортироватьЗавершение", ЭтотОбъект);
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
		
	Иначе
		
		ДиалогПриПодключенномРасширенииРаботыСФайлами();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьЗавершение(ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмпортироватьЗавершениеПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьЗавершениеПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		// По одному файлу.
		ДиалогПриНеПодключенномРасширенииРаботыСФайлами();
		
	Иначе
		
		ДиалогПриПодключенномРасширенииРаботыСФайлами();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел25()
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
		
		СписокТаблДокументов = ПечатныеФормыРаздела25();
		
		СтруктураРеквизитовФормы.ПечатныеЛистыРаздела25
			= ПоместитьВоВременноеХранилище(СписокТаблДокументов, УникальныйИдентификатор);
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел25" Тогда
			
			ТабличныйДокумент.Очистить();
			
			Для Индекс = 0 По СписокТаблДокументов.Количество() - 1 Цикл
				
				ТабличныйДокумент.Вывести(СписокТаблДокументов[Индекс].Значение);
				
			КонецЦикла;
			
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел6" Тогда
			
			ТабличныйДокумент.Очистить();
			
		КонецЕсли;
		
	Иначе
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел25" Тогда
			
			ТабличныйДокумент.Очистить();
			
			МакетРаздела25 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2015Кв1_Раздел25");
			
			СекцияТребуетсяИмпорт = МакетРаздела25.ПолучитьОбласть("ТребуетсяИмпорт");
			
			ТабличныйДокумент.Вывести(СекцияТребуетсяИмпорт);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПечатныеФормыРаздела25() Экспорт
	
	// При выводе экранной и печатной форм раздела 2.5, заполним
	// значения "Регистрационный номер в ПФР" и "Дата".
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛистаДляРаздела25();
	
	ПечатныеФормы = Новый СписокЗначений;
	
	МакетРаздела25 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2015Кв1_Раздел25");
	
	МассивМнЧРаздела251 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25).ПачкиИсходные;
	
	МассивМнЧРаздела252 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25).ПачкиКорректирующие;
	
	СекцияРегистрационныйНомерПФР = МакетРаздела25.ПолучитьОбласть("РегистрационныйНомерПФР");
	
	СекцияИсходныеПачкиЗаголовок = МакетРаздела25.ПолучитьОбласть("ИсходныеПачкиЗаголовок");
	СекцияИсходныеПачкиНачало    = МакетРаздела25.ПолучитьОбласть("ИсходныеПачкиНачало");
	СекцияИсходныеПачкиСтрока    = МакетРаздела25.ПолучитьОбласть("ИсходныеПачкиСтрока");
	СекцияИсходныеПачкиИтого     = МакетРаздела25.ПолучитьОбласть("ИсходныеПачкиИтого");
	
	СекцияКорректирующиеПачкиЗаголовок = МакетРаздела25.ПолучитьОбласть("КорректирующиеПачкиЗаголовок");
	СекцияКорректирующиеПачкиНачало    = МакетРаздела25.ПолучитьОбласть("КорректирующиеПачкиНачало");
	СекцияКорректирующиеПачкиСтрока    = МакетРаздела25.ПолучитьОбласть("КорректирующиеПачкиСтрока");
	СекцияКорректирующиеПачкиИтого     = МакетРаздела25.ПолучитьОбласть("КорректирующиеПачкиИтого");
	
	СекцияПустаяСтрока = МакетРаздела25.ПолучитьОбласть("ПустаяСтрока");
	СекцияПодпись      = МакетРаздела25.ПолучитьОбласть("Подпись");
	
	ТаблДокРаздела25 = НоваяСтраница();
	
	ТаблДокРаздела25.Вывести(СекцияРегистрационныйНомерПФР);
	ТаблДокРаздела25.Вывести(СекцияИсходныеПачкиЗаголовок);
	ТаблДокРаздела25.Вывести(СекцияИсходныеПачкиНачало);
	
	МассивПроверкиВывода = Новый Массив;
	МассивПроверкиВывода.Добавить(СекцияИсходныеПачкиСтрока);
	МассивПроверкиВывода.Добавить(СекцияИсходныеПачкиИтого);
	МассивПроверкиВывода.Добавить(СекцияПустаяСтрока);
	МассивПроверкиВывода.Добавить(СекцияПодпись);
	
	ИтогоБазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную = 0;
	ИтогоСтраховыхВзносовОПС                                      = 0;
	ИтогоКоличествоЗЛвПачкеИсх                                    = 0;
	
	Для Инд = 0 По МассивМнЧРаздела251.Количество() - 1 Цикл
		
		СекцияИсходныеПачкиСтрока.Параметры.Заполнить(МассивМнЧРаздела251[Инд]);
		СекцияИсходныеПачкиСтрока.Параметры.НомерПП = Инд + 1;
		
		ИтогоБазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную
			= ИтогоБазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную
			+ МассивМнЧРаздела251[Инд].БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную;
		ИтогоСтраховыхВзносовОПС
			= ИтогоСтраховыхВзносовОПС
			+ МассивМнЧРаздела251[Инд].СтраховыхВзносовОПС;
		ИтогоКоличествоЗЛвПачкеИсх
			= ИтогоКоличествоЗЛвПачкеИсх
			+ МассивМнЧРаздела251[Инд].КоличествоЗЛвПачке;
		
		Если ТаблДокРаздела25.ПроверитьВывод(МассивПроверкиВывода) Тогда
			ТаблДокРаздела25.Вывести(СекцияИсходныеПачкиСтрока);
		Иначе
			ЗалитьЛистПустымиСтроками(ТаблДокРаздела25, СекцияПустаяСтрока, СекцияПодпись);
			
			ЗаполнитьПечатнуюФормуРаздела25(ТаблДокРаздела25, ОбщиеРеквизитыРазделов);
			
			ПечатныеФормы.Добавить(ТаблДокРаздела25, "Раздел 2.5");
			
			ТаблДокРаздела25 = НоваяСтраница();
			ТаблДокРаздела25.Вывести(СекцияРегистрационныйНомерПФР);
			ТаблДокРаздела25.Вывести(СекцияИсходныеПачкиНачало);
			ТаблДокРаздела25.Вывести(СекцияИсходныеПачкиСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	СекцияИсходныеПачкиИтого.Параметры.БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную
		= ИтогоБазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную;
	СекцияИсходныеПачкиИтого.Параметры.СтраховыхВзносовОПС
		= ИтогоСтраховыхВзносовОПС;
	СекцияИсходныеПачкиИтого.Параметры.КоличествоЗЛвПачке
		= ИтогоКоличествоЗЛвПачкеИсх;
	
	ТаблДокРаздела25.Вывести(СекцияИсходныеПачкиИтого);
	
	Заголовок252Выведен = Ложь;
	
	ИтогоДоначисленоСтраховыхВзносовОПС  = 0;
	ИтогоДоначисленоНаСтраховуюЧасть     = 0;
	ИтогоДоначисленоНаНакопительнуюЧасть = 0;
	ИтогоКоличествоЗЛвПачкеКорр          = 0;
	
	Для Инд = 0 По МассивМнЧРаздела252.Количество() - 1 Цикл
		СекцияКорректирующиеПачкиСтрока.Параметры.Заполнить(МассивМнЧРаздела252[Инд]);
		СекцияКорректирующиеПачкиСтрока.Параметры.НомерПП = Инд + 1;
		
		ИтогоДоначисленоСтраховыхВзносовОПС
			= ИтогоДоначисленоСтраховыхВзносовОПС
			+ МассивМнЧРаздела252[Инд].ДоначисленоСтраховыхВзносовОПС;
		ИтогоДоначисленоНаСтраховуюЧасть
			= ИтогоДоначисленоНаСтраховуюЧасть
			+ МассивМнЧРаздела252[Инд].ДоначисленоНаСтраховуюЧасть;
		ИтогоДоначисленоНаНакопительнуюЧасть
			= ИтогоДоначисленоНаНакопительнуюЧасть
			+ МассивМнЧРаздела252[Инд].ДоначисленоНаНакопительнуюЧасть;
		ИтогоКоличествоЗЛвПачкеКорр
			= ИтогоКоличествоЗЛвПачкеКорр
			+ МассивМнЧРаздела252[Инд].КоличествоЗЛвПачке;
		
		МассивПроверкиВывода = Новый Массив;
		Если НЕ Заголовок252Выведен Тогда
			МассивПроверкиВывода.Добавить(СекцияКорректирующиеПачкиЗаголовок);
			МассивПроверкиВывода.Добавить(СекцияКорректирующиеПачкиНачало);
		КонецЕсли;
		МассивПроверкиВывода.Добавить(СекцияКорректирующиеПачкиСтрока);
		МассивПроверкиВывода.Добавить(СекцияКорректирующиеПачкиИтого);
		МассивПроверкиВывода.Добавить(СекцияПустаяСтрока);
		МассивПроверкиВывода.Добавить(СекцияПодпись);
		
		Если ТаблДокРаздела25.ПроверитьВывод(МассивПроверкиВывода) Тогда
			Если НЕ Заголовок252Выведен Тогда
				ТаблДокРаздела25.Вывести(СекцияКорректирующиеПачкиЗаголовок);
				ТаблДокРаздела25.Вывести(СекцияКорректирующиеПачкиНачало);
				Заголовок252Выведен = Истина;
			КонецЕсли;
			ТаблДокРаздела25.Вывести(СекцияКорректирующиеПачкиСтрока);
		Иначе
			ЗалитьЛистПустымиСтроками(ТаблДокРаздела25, СекцияПустаяСтрока, СекцияПодпись);
			
			ЗаполнитьПечатнуюФормуРаздела25(ТаблДокРаздела25, ОбщиеРеквизитыРазделов);
			
			ПечатныеФормы.Добавить(ТаблДокРаздела25, "Раздел 2.5");
			
			ТаблДокРаздела25 = НоваяСтраница();
			ТаблДокРаздела25.Вывести(СекцияРегистрационныйНомерПФР);
			Если НЕ Заголовок252Выведен Тогда
				ТаблДокРаздела25.Вывести(СекцияКорректирующиеПачкиЗаголовок);
				Заголовок252Выведен = Истина;
			КонецЕсли;
			ТаблДокРаздела25.Вывести(СекцияКорректирующиеПачкиНачало);
			ТаблДокРаздела25.Вывести(СекцияКорректирующиеПачкиСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	СекцияКорректирующиеПачкиИтого.Параметры.ДоначисленоСтраховыхВзносовОПС
		= ИтогоДоначисленоСтраховыхВзносовОПС;
	СекцияКорректирующиеПачкиИтого.Параметры.ДоначисленоНаСтраховуюЧасть
		= ИтогоДоначисленоНаСтраховуюЧасть;
	СекцияКорректирующиеПачкиИтого.Параметры.ДоначисленоНаНакопительнуюЧасть
		= ИтогоДоначисленоНаНакопительнуюЧасть;
	СекцияКорректирующиеПачкиИтого.Параметры.КоличествоЗЛвПачке
		= ИтогоКоличествоЗЛвПачкеКорр;
	
	ТаблДокРаздела25.Вывести(СекцияКорректирующиеПачкиИтого);
	
	ЗалитьЛистПустымиСтроками(ТаблДокРаздела25, СекцияПустаяСтрока, СекцияПодпись);
	
	ЗаполнитьПечатнуюФормуРаздела25(ТаблДокРаздела25, ОбщиеРеквизитыРазделов);
	
	ПечатныеФормы.Добавить(ТаблДокРаздела25, "Раздел 2.5");
	
	Возврат ПечатныеФормы;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	НачатьЗамерВремени();
	ЗаполнитьАвтоНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока =
		Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(
		ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма,
		"ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	      	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		Если НЕ СтруктураРеквизитовФормы.ПерсУчетВедетсяВоВнешнейПрограмме
			И ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
			
			// Отчет был сформирован, когда данные перс. учета велись во внешней программе.
			// В этом случае делаем "номер корректировки" недоступным для изменения.
			ТабличныйДокумент.Области.НомерКорректировки.Защита = Истина;
			ТабличныйДокумент.Области.НомерКорректировки.ЦветФона = СтруктураРеквизитовФормы.ЦветБелый;
			
		Иначе
			
			ДоступноИзменениеВида = ДоступноИзменениеВидаРСВ_1();
			
			Если НЕ ДоступноИзменениеВида Тогда
				Если ТабличныйДокумент.Области.НомерКорректировки.Значение = 0 Тогда
					ТабличныйДокумент.Области.НомерКорректировки.Значение = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, 1);
				КонецЕсли;
			КонецЕсли;
			
			ДоступноРедактированиеНомераКорректировки = ДоступноИзменениеВида
				ИЛИ (НЕ ДоступноИзменениеВида И ТабличныйДокумент.Области.НомерКорректировки.Значение > 0);
			
			ТабличныйДокумент.Области.НомерКорректировки.Защита = НЕ ДоступноРедактированиеНомераКорректировки;
			ТабличныйДокумент.Области.НомерКорректировки.ЦветФона = ?(ДоступноРедактированиеНомераКорректировки,
				СтруктураРеквизитовФормы.ЦветЖелтый, СтруктураРеквизитовФормы.ЦветБелый);
			
		КонецЕсли;
		
		НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		
		УстановитьДоступностьРедактированияТипаКорректировки();
		
		ТабличныйДокумент.Области.НомерПачки.Значение = НомерПачки;
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		
	КонецЕсли;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Функция ДоступноИзменениеВидаРСВ_1()
	
	ИзменениеДоступно = Истина;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
		РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ОпределитьДоступностьИзмененияВидаРСВ_1(
			ИзменениеДоступно);
	Иначе
		ИзменениеДоступно = Ложь;
	КонецЕсли;
	
	Возврат ИзменениеДоступно;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьРедактированияТипаКорректировки()
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		Если НомерКорректировки = 0 Тогда
			ТабличныйДокумент.Области.ТипКорректировки.Значение = "";
			ТабличныйДокумент.Области.ТипКорректировки.Защита = Истина;
			ТабличныйДокумент.Области.ТипКорректировки.ЦветФона = СтруктураРеквизитовФормы.ЦветБелый;
		Иначе
			ТабличныйДокумент.Области.ТипКорректировки.Защита = Ложь;
			ТабличныйДокумент.Области.ТипКорректировки.ЦветФона = СтруктураРеквизитовФормы.ЦветЖелтый;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ПерсУчетВедетсяВоВнешнейПрограмме Тогда
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Проверка выгрузки невозможна!'"));
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Раздел21КодТарифа    = "";
	Раздел24КодОснования = "";
	
	Если НЕ ТабличныйДокумент.Области.Найти("П000210001001") = Неопределено Тогда
		Раздел21КодТарифа = ТабличныйДокумент.Области.П000210001001.Значение;
	КонецЕсли;
	
	Если НЕ ТабличныйДокумент.Области.Найти("П000240001001") = Неопределено Тогда
		Раздел24КодОснования = ТабличныйДокумент.Области.П000240001001.Значение;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",    СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("Раздел21КодТарифа",          Раздел21КодТарифа);
	ПараметрыОтчета.Вставить("Раздел24КодОснования",       Раздел24КодОснования);
	ПараметрыОтчета.Вставить("ЗначениеТекущегоПоказателя", Элементы.ТабличныйДокумент.ТекущаяОбласть.Текст);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
		Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7),
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления =
		РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(),
		"КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
	
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере();
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте();
		
	#КонецЕсли
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("КатегорияНалогоплательщика");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5");
	СтруктураРеквизитовФормы.Вставить("мИнтервалАвтосохранения");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПоляПоискаПоказателяВТСП");
	СтруктураРеквизитовФормы.Вставить("мСкопированаИз2010");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мЧтоОчищать");
	СтруктураРеквизитовФормы.Вставить("НомерГода");
	СтруктураРеквизитовФормы.Вставить("ФлагСохранения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветБелый");
	СтруктураРеквизитовФормы.Вставить("ЦветЖелтый");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НаименованияЭлементовАдреса");
	СтруктураРеквизитовФормы.Вставить("НеОтображатьПредупреждение");
	СтруктураРеквизитовФормы.Вставить("ДанныеОтчетаИзмененыВручную", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресСтраницыРаздела25");
	СтруктураРеквизитовФормы.Вставить("ОписаниеСтраницРаздела6");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("ИмпортныеРазделы");
	
	СтруктураРеквизитовФормы.Вставить("ПерсУчетВедетсяВоВнешнейПрограмме");
	СтруктураРеквизитовФормы.Вставить("ВнешниеСведенияРаздела25");
	СтруктураРеквизитовФормы.Вставить("АдресВнешнихСведенийРаздела25");
	СтруктураРеквизитовФормы.Вставить("ВнешниеСведенияРаздела6");
	СтруктураРеквизитовФормы.Вставить("ИменаФайловВнешнихСведенийРаздела6");
	СтруктураРеквизитовФормы.Вставить("КоличествоСтраницРаздела6", 0);
	СтруктураРеквизитовФормы.Вставить("НовоеКоличествоСтраницРаздела6", 0);
	СтруктураРеквизитовФормы.Вставить("ПечатныеЛистыРаздела25");
	СтруктураРеквизитовФормы.Вставить("Отчет_РегистрационныйНомерПФР");
	СтруктураРеквизитовФормы.Вставить("Отчет_КалендарныйГод");
	СтруктураРеквизитовФормы.Вставить("Отчет_КодОтчетногоПериода");
	
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011003", "П000210020503;П000210020603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011006",
		"П000220022403;П000240024403;П000240025003;П000240025603;П000240026203;П000240026803;П000240001001");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011007",
		"П000230023403;П000240024403;П000240025003;П000240025603;П000240026203;П000240026803;П000240001001");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011008", "П000210021403");
		
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011103", "П000210020504;П000210020604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011106",
		"П000220022404;П000240024404;П000240025004;П000240025604;П000240026204;П000240026804;П000240001001");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011107",
		"П000230023404;П000240024404;П000240025004;П000240025604;П000240026204;П000240026804;П000240001001");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011108", "П000210021404");
		
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011203", "П000210020505;П000210020605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011206",
		"П000220022405;П000240024405;П000240025005;П000240025605;П000240026205;П000240026805;П000240001001");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011207",
		"П000230023405;П000240024405;П000240025005;П000240025605;П000240026205;П000240026805;П000240001001");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011208", "П000210021405");
		
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011303", "П000210020506;П000210020606");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011306",
		"П000220022406;П000240024406;П000240025006;П000240025606;П000240026206;П000240026806;П000240001001");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011307",
		"П000230023406;П000240024406;П000240025006;П000240025606;П000240026206;П000240026806;П000240001001");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011308", "П000210021406");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011403",
		"П000210020504;П000210020604;П000210020505;П000210020605;П000210020506;П000210020606");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011406",
		"П000220022404;П000240024404;П000240025004;П000240025604;П000240026204;П000240026804;П000240001001;П000220022405;П000240024405;П000240025005;П000240025605;П000240026205;П000240026805;П000240001001;П000220022406;П000240024406;П000240025006;П000240025606;П000240026206;П000240026806;П000240001001");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011407",
		"П000230023404;П000240024404;П000240025004;П000240025604;П000240026204;П000240026804;П000240001001;П000230023405;П000240024405;П000240025005;П000240025605;П000240026205;П000240026805;П000240001001;П000230023406;П000240024406;П000240025006;П000240025606;П000240026206;П000240026806;П000240001001");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011408", "П000210021404;П000210021405;П000210021406");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100012003", "П000400000106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100012004", "П000400000108");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100012005", "П000400000110");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100012006", "П000400000111;П000400000112;П000400000113;П000400000103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100012007", "П000400000111;П000400000112;П000400000113;П000400000103");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100012008", "П000400000114");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100012103", "П000400000107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100012104", "П000400000109");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100013003",
		"П000100010003;П000210020503;П000210020603;П000400000106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100013004", "П000100010004;П000400000108");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100013005", "П000100010005;П000400000110");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100013006",
		"П000100010006;П000220022403;П000240024403;П000240025003;П000240025603;П000240026203;П000240026803;П000240001001;П000400000111;П000400000113;П000400000103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100013007",
		"П000100010007;П000230023403;П000240024403;П000240025003;П000240025603;П000240026203;П000240026803;П000240001001;П000400000112;П000400000113;П000400000103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100013008", "П000100010008;П000210021403;П000400000114");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100014403", "П000100014103;П000100014203;П000100014303");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100014404", "П000100014104;П000100014204;П000100014304");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100014405", "П000100014105;П000100014205;П000100014305");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100014406", "П000100014106;П000100014206;П000100014306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100014407", "П000100014107;П000100014207;П000100014307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100014408", "П000100014108;П000100014208;П000100014308");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100015003",
		"П000100010003;П000210020503;П000210020603;П000400000106;П000100014003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100015004", "П000100010004;П000400000108;П000100014004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100015005", "П000100010005;П000400000110;П000100014005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100015006",
		"П000100010006;П000220022403;П000240024403;П000240025003;П000240025603;П000240026203;П000240026803;П000240001001;П000400000111;П000400000113;П000400000103;П000100014006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100015007",
		"П000100010007;П000230023403;П000240024403;П000240025003;П000240025603;П000240026203;П000240026803;П000240001001;П000400000112;П000400000113;П000400000103;П000100014007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100015008",
		"П000100010008;П000210021403;П000400000114;П000100014008");
	
	// Раздел 2.1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210020403",
		"П000210020003;П000210020103;П000210020203;П000210020303");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210020404",
		"П000210020004;П000210020104;П000210020204;П000210020304");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210020405",
		"П000210020005;П000210020105;П000210020205;П000210020305");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210020406",
		"П000210020006;П000210020106;П000210020206;П000210020306");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210021303",
		"П000210021003;П000210021103;П000210021203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210021304",
		"П000210021004;П000210021104;П000210021204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210021305",
		"П000210021005;П000210021105;П000210021205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210021306",
		"П000210021006;П000210021106;П000210021206");
	
	// Раздел 2.2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220022303", "П000220022003;П000220022103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220022304", "П000220022004;П000220022104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220022305", "П000220022005;П000220022105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220022306", "П000220022006;П000220022106");
	
	// Раздел 2.3.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000230023303", "П000230023003;П000230023103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000230023304", "П000230023004;П000230023104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000230023305", "П000230023005;П000230023105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000230023306", "П000230023006;П000230023106");
	
	// Раздел 2.4.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240024303", "П000240024003;П000240024103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240024304", "П000240024004;П000240024104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240024305", "П000240024005;П000240024105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240024306", "П000240024006;П000240024106");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240024903", "П000240024603;П000240024703");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240024904", "П000240024604;П000240024704");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240024905", "П000240024605;П000240024705");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240024906", "П000240024606;П000240024706");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240025503", "П000240025203;П000240025303");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240025504", "П000240025204;П000240025304");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240025505", "П000240025205;П000240025305");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240025506", "П000240025206;П000240025306");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240026103", "П000240025803;П000240025903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240026104", "П000240025804;П000240025904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240026105", "П000240025805;П000240025905");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240026106", "П000240025806;П000240025906");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240026703", "П000240026403;П000240026503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240026704", "П000240026404;П000240026504");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240026705", "П000240026405;П000240026505");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000240026706", "П000240026406;П000240026506");
	
	// Раздел 3.1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000340034303", "П000340034103;П000340034203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000340034304", "П000340034104;П000340034204");
	
	// Раздел 3.2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000360036303", "П000360036103;П000360036203");
	
	// Раздел 3.3.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000370037503",
		"П000370037103;П000370037203;П000370037303;П000370037403");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000370037504",
		"П000370037104;П000370037204;П000370037304;П000370037404");
	
	// Раздел 4.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000206", "П000400000106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000207", "П000400000107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000208", "П000400000108");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000209", "П000400000109");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000210", "П000400000110");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000211", "П000400000111");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000212", "П000400000112");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000213", "П000400000113");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000214", "П000400000114");
	
	// Раздел 5.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500000250", "П000500000150");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500000260", "П000500000160");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500000270", "П000500000170");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500000280", "П000500000180");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьВнешниеРазделыОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
		
		ЗапрашиваемыеРазделы = Новый Структура;
		
		ОписаниеЗапрашиваемыхДанныхРаздела25 = РегламентированнаяОтчетность.ОписаниеЗапрашиваемыхДанныхРазделаРСВ_1();
		ЗапрашиваемыеРазделы.Вставить("Раздел25", ОписаниеЗапрашиваемыхДанныхРаздела25);
		
		ОписаниеЗапрашиваемыхДанныхРаздела6 = РегламентированнаяОтчетность.ОписаниеЗапрашиваемыхДанныхРазделаРСВ_1();
		ОписаниеЗапрашиваемыхДанныхРаздела6.ПолучатьТабличныеДокументыРаздела = Ложь;
		ЗапрашиваемыеРазделы.Вставить("Раздел6", ОписаниеЗапрашиваемыхДанныхРаздела6);
		
		РегламентированнаяОтчетность.ПолучитьРаздел25иРаздел6ФормыРСВ1(СтруктураРеквизитовФормы.мСохраненныйДок, ЗапрашиваемыеРазделы, Ложь);
		
		СтруктураРеквизитовФормы.АдресСтраницыРаздела25 = ПоместитьВоВременноеХранилище(ЗапрашиваемыеРазделы.Раздел25.СтраницыРаздела, УникальныйИдентификатор);
		
		Для Каждого СтраницаРаздела6 Из ЗапрашиваемыеРазделы.Раздел6.СтраницыРаздела Цикл
			
			ТекСтруктура = Новый Структура;
			ТекСтруктура.Вставить("Идентификатор", СтраницаРаздела6.Идентификатор);
			ТекСтруктура.Вставить("Представление", СтраницаРаздела6.Описание);
			ТекСтруктура.Вставить("Адрес",         "");
			
			СтруктураРеквизитовФормы.ОписаниеСтраницРаздела6.Добавить(ТекСтруктура);
			
		КонецЦикла;
		
		Если ЗапрашиваемыеРазделы.Раздел25.СтраницыРаздела.Количество() = 0 Тогда
			
			ЭлементВДереве = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				ЭтаФорма.мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "Раздел25");
			
			Если ЭлементВДереве <> Неопределено Тогда
				ЭлементВДереве.ВыводНаПечать    = 0;
				ЭлементВДереве.ПоказатьСтраницу = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗапрашиваемыеРазделы.Раздел6.СтраницыРаздела.Количество() > 0 Тогда
			
			ТаблицаСтраницыРазделаРаздел6.Очистить();
			
			СтрПерваяСтраница = ТаблицаСтраницыРазделаРаздел6.Добавить();
			СтрПерваяСтраница.Представление               = ЗапрашиваемыеРазделы.Раздел6.СтраницыРаздела[0].Описание;
			СтрПерваяСтраница.АктивнаяСтраница            = Истина;
			СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
			
			Для ИндексВМассиве = 1 По ЗапрашиваемыеРазделы.Раздел6.СтраницыРаздела.Количество() - 1 Цикл
				
				СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел6.Добавить();
				СтрПерваяСтраница.Представление               = ЗапрашиваемыеРазделы.Раздел6.СтраницыРаздела[ИндексВМассиве].Описание;
				СтрПерваяСтраница.АктивнаяСтраница            = Ложь;
				СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
				
			КонецЦикла;
			
		Иначе
			
			ЭлементВДереве = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				ЭтаФорма.мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "Раздел6");
			
			Если ЭлементВДереве <> Неопределено Тогда
				ЭлементВДереве.ВыводНаПечать    = 0;
				ЭлементВДереве.ПоказатьСтраницу = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТаблицаСтраницыРазделаРаздел6.Очистить();
		
		СтрПерваяСтраница = ТаблицаСтраницыРазделаРаздел6.Добавить();
		СтрПерваяСтраница.Представление               = "Раздел 6";
		СтрПерваяСтраница.АктивнаяСтраница            = Истина;
		СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
		
		ЭлементВДереве = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			ЭтаФорма.мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "Раздел6");
		
		Если ЭлементВДереве <> Неопределено Тогда
			ЭлементВДереве.ВыводНаПечать    = 0;
			ЭлементВДереве.ПоказатьСтраницу = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь)
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	НачальнаяПодготовкаФормы(БезОткрытияФормы);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ПроверкаЗакраскиТитульного();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ЗначениеТаймера = ЗначениеТаймера();
		
		СохрФлажокОтклАвтоРасчет = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь;
			
		КонецЕсли;
		
		ЗаполнитьАвтоНаСервере();
		
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = СохрФлажокОтклАвтоРасчет;
		
		ЗаписатьЗамер(ЗначениеТаймера);
		
	КонецЕсли;
	
	УстановитьНадписиНаТитульномЛисте(ТабличныйДокумент);
	
	УстановитьВидимостьМенюВыгрузкиПроверкиВИнтернетеИОтправки();
	
	// Групповой элемент, ранее содержавший информационное сообщение
	// для пользователя и гиперссылку перехода в рабочее место ПФР.
	Элементы.Предупреждение.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьМенюВыгрузкиПроверкиВИнтернетеИОтправки()
	
	Если НЕ РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ИмяОсновнойФормыРСВ1()
		= "ОсновнаяФорма" И СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		
		Элементы.Выгрузить.Видимость = Ложь;
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
		
	Иначе
		
		Элементы.Выгрузить.Видимость = Истина;
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Истина;
		
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ПерсУчетВедетсяВоВнешнейПрограмме Тогда
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
			
			Элементы.Выгрузить.Видимость = Истина;
			Элементы.ОтправитьВКонтролирующийОрган.Видимость = Истина;
			
		Иначе
			
			Элементы.Выгрузить.Видимость = Ложь;
			Элементы.ПроверитьВыгрузку.Видимость = Ложь;
			Элементы.ПроверитьВИнтернете.Видимость = Ложь;
			
		КонецЕсли;
		
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
		СпрятатьЭлементыГруппы(ЭтаФорма, "ГруппаПанельОтправки");
		
	Иначе
		
		Элементы.Выгрузить.Видимость = Истина;
		
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпрятатьЭлементыГруппы(Форма, ИмяГруппы)
	
	Форма.Элементы[ИмяГруппы].Видимость = Ложь;
	
	Для Каждого ЭлементГруппы Из Форма.Элементы[ИмяГруппы].ПодчиненныеЭлементы Цикл
		
		ЭлементГруппы.Видимость = Ложь;
		
		Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы") Тогда
			
			СпрятатьЭлементыГруппы(Форма, ЭлементГруппы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВводСведенийОПредставителе()
	
	ТабличныйДокумент.Области.ОргПредНаим.Защита = Ложь;
	ТабличныйДокумент.Области.ОргПредНаим.ЦветФона = СтруктураРеквизитовФормы.ЦветЖелтый;
	
	ТабличныйДокумент.Области.ДокУпПред.Защита = Ложь;
	ТабличныйДокумент.Области.ДокУпПред.ЦветФона = СтруктураРеквизитовФормы.ЦветЖелтый;
	
	ТабличныйДокумент.Области.ОргПодписантФамилия.Значение = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗакраскиТитульного()
	
	Если ТабличныйДокумент.Области.ПрПодп.Значение = "1" Тогда
		
		ТабличныйДокумент.Области.ОргПредНаим.Защита = Истина;
		ТабличныйДокумент.Области.ОргПредНаим.ЦветФона = СтруктураРеквизитовФормы.ЦветБелый;
		
		ТабличныйДокумент.Области.ДокУпПред.Защита = Истина;
		ТабличныйДокумент.Области.ДокУпПред.ЦветФона = СтруктураРеквизитовФормы.ЦветБелый;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения =
			 РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;

	КонецЦикла;
	
	ФормироватьСтруктуруСтраницОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц()
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел21";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел22";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел24";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел31";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел32";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2015Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2,
			 ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПрПодп",
		1, , "Выбор подписанта", КоллекцияСписковВыбора["КодыТиповПодписантов"]);
		
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПрекращениеДеятельности",
		1, , "Прекращение деятельности", КоллекцияСписковВыбора["КодПрекращенияДеятельности"]);
		
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТипКорректировки",
		1, , "Выбор кода причины уточнения", КоллекцияСписковВыбора["КодыПричинУточнений"]);
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2016 Тогда
		ИмяСекцииКодыТарифов = "КодыТарифов_2016";
	Иначе
		ИмяСекцииКодыТарифов = "КодыТарифов";
	КонецЕсли;
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210001001",
		2, , "Выбор кода тарифа", КоллекцияСписковВыбора[ИмяСекцииКодыТарифов]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240001001",
		1, , "Выбор кода основания расчета страховых взносов", КоллекцияСписковВыбора["КодыОснованийРасчета"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400000102",
		1, , "Выбор кода основания для перерасчета страховых взносов", КоллекцияСписковВыбора["КодыОснованийПерерасчета"]);
		
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400000103",
		1, , "Выбор кода основания расчета страховых взносов", КоллекцияСписковВыбора["КодыОснованийРасчета"]);
	
КонецПроцедуры

&НаСервере
Процедура НачальнаяПодготовкаФормы(БезОткрытияФормы)
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.ФлагСохранения = Ложь;
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	НомерКорректировки = 0;
	
	Если НЕ СтруктураРеквизитовФормы.ПерсУчетВедетсяВоВнешнейПрограмме Тогда
		Элементы.Импортировать.Видимость = Ложь;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
		
		мСтруктураДокУпПред = Новый Структура;
		мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
		мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
		мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
		мСтруктураДокУпПред.Вставить("КемВыдан", " ");
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
			
		Иначе
			
			// Это новый документ. Установим реквизиты формы по умолчанию.
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			Если НЕ БезОткрытияФормы Тогда
				ИнициализироватьВнешниеРазделыОтчета();
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;

	Иначе
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 2010
			   И Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > 2010 Тогда
				СтруктураРеквизитовФормы.мСкопированаИз2010 = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;

	КонецЕсли;
	
	ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
		
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда

		ЗаполнитьДатуВЯчейкахНаСервере();
		ЗаполнитьСведенияОбОрганизации();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);

	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		НазваниеСтраницы          = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе = СтрокаУровня1.МногостраничностьВРазделе;

		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		Если (СтруктураРеквизитовФормы.мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

	КонецЦикла;

	Если ВидДокументаКорректирующий Тогда
		СтруктураРеквизитовФормы.ВидДокумента = 1;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = 1;
		НомерКорректировки = 1;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Отчет_РегистрационныйНомерПФР = ТабличныйДокумент.Области.НомРег.Значение;
	СтруктураРеквизитовФормы.Отчет_КалендарныйГод          = ТабличныйДокумент.Области.ОтчетГод.Значение;
	СтруктураРеквизитовФормы.Отчет_КодОтчетногоПериода     = ТабличныйДокумент.Области.Период.Значение;
	
	ТабличныйДокумент.Области.НомерПачки.Значение = НомерПачки;
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			
			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			
			Если ЭлементДереваСтраницОтчета.ИмяСтраницы = "Раздел25" Тогда
				
				Если ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.АдресСтраницыРаздела25) Тогда
					
					ЭлементРазделовОтчета.КолонкаРазделыОтчета = "Раздел 2.5";
					
				Иначе
					
					ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
					
				КонецЕсли;
				
			Иначе
				
				ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
				
			КонецЕсли;
			
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          =
			 РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(
					ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						Если ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Раздел6" Тогда
							
							Если Форма.СтруктураРеквизитовФормы.ОписаниеСтраницРаздела6.Количество() > 0 Тогда
								
								СтраницаРазделаОтчета.КолонкаРазделыОтчета
									= Форма.СтруктураРеквизитовФормы.ОписаниеСтраницРаздела6[НомерСтраницы - 1].Представление;
								
							Иначе
								
								СтраницаРазделаОтчета.КолонкаРазделыОтчета = "Стр. " + НомерСтраницы;
								
							КонецЕсли;
							
						Иначе
							
							СтраницаРазделаОтчета.КолонкаРазделыОтчета = "Стр. " + НомерСтраницы;
							
						КонецЕсли;
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета()

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел21";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел22";
	СтрокаУровня1.Представление            = "Раздел 2.2-2.3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел24";
	СтрокаУровня1.Представление            = "Раздел 2.4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел25";
	СтрокаУровня1.Представление            = "Раздел 2.5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел31";
	СтрокаУровня1.Представление            = "Раздел 3.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел32";
	СтрокаУровня1.Представление            = "Раздел 3.2-3.3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел6";
	СтрокаУровня1.Представление            = "Раздел 6";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы4",  СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы4",  СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы4 Тогда
		ТекТабличноеПоле = "Раздел4";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы5 Тогда
		ТекТабличноеПоле = "Раздел5";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <>
	     РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи                    					  = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                    					  = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	НомерПачки                                        = СтруктураРеквизитовФормы.мСохраненныйДок.НомерПачки;

	// Восстанавливаем сохраненные данные отчета.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();

	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	ВосстановитьДанныеПерсУчетаИмпортированныеИзВнешнейПрограммы(СписокСохранения);
	
	ИнициализироватьВнешниеРазделыОтчета();

	// Восстанавливаем сохраненные данные многострочных разделов.
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Восстанавливаем сохраненные данные многостраничных разделов.
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(
								ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище"
								+ ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище"
							 + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок,
							 "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения"
					 + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстанавливаем флажок подсчета страниц.
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	// Восстанавливаем  документ, подтверждающий полномочия представителя.
	СписокСохранения.Свойство("ДокументУпПред", мСтруктураДокУпПред);
	Если мСтруктураДокУпПред = Неопределено Тогда
		
		мСтруктураДокУпПред = Новый Структура;
		мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
		мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
		мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
		мСтруктураДокУпПред.Вставить("КемВыдан", " ");
		
	КонецЕсли;
	
	// Восстанавливаем версию формы.
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			СтруктураРеквизитовФормы.ФлагСохранения = Истина;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// Восстановим сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаФормыРСВ1(
	 ПоказателиОтчета, СтруктураДанныхТитульный);
	
	ЗаполнитьДатуВЯчейкахНаСервере();
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.КонвертироватьДанныеРаздела2СтарогоОбразцаФормыРСВ1(
		ЭтаФорма[мСтруктураМногостраничныхРазделов.Раздел21]);
	
	СписокСохранения.Свойство("ОтображатьНулевыеЗначенияСтрок100и150Цифрами",
	 СтруктураРеквизитовФормы.НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами);
	
	СписокСохранения.Свойство("НаименованияЭлементовАдреса", СтруктураРеквизитовФормы.НаименованияЭлементовАдреса);
	
	СписокСохранения.Свойство("ДанныеОтчетаИзмененыВручную", СтруктураРеквизитовФормы.ДанныеОтчетаИзмененыВручную);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
	
	ПривестиКодОтчетногоПериодаВСоответствиеУтвержденномуФормату();
	
КонецПроцедуры

&НаСервере
Процедура ПривестиКодОтчетногоПериодаВСоответствиеУтвержденномуФормату()
	
	СохранитьОтчет = Ложь;
	
	Если ЭтаФорма["СтруктураДанныхТитульный"]["Период"] = "03" Тогда
		
		ЭтаФорма["СтруктураДанныхТитульный"]["Период"] = "3";
		ТабличныйДокумент.Области["Период"].Значение   = "3";
		
		СохранитьОтчет = Истина;
		
	ИначеЕсли ЭтаФорма["СтруктураДанныхТитульный"]["Период"] = "06" Тогда
		
		ЭтаФорма["СтруктураДанныхТитульный"]["Период"] = "6";
		ТабличныйДокумент.Области["Период"].Значение   = "6";
		
		СохранитьОтчет = Истина;
		
	ИначеЕсли ЭтаФорма["СтруктураДанныхТитульный"]["Период"] = "09" Тогда
		
		ЭтаФорма["СтруктураДанныхТитульный"]["Период"] = "9";
		ТабличныйДокумент.Области["Период"].Значение   = "9";
		
		СохранитьОтчет = Истина;
		
	ИначеЕсли ЭтаФорма["СтруктураДанныхТитульный"]["Период"] = "12" Тогда
		
		ЭтаФорма["СтруктураДанныхТитульный"]["Период"] = "0";
		ТабличныйДокумент.Области["Период"].Значение   = "0";
		
		СохранитьОтчет = Истина;
		
	КонецЕсли;
	
	Если СохранитьОтчет Тогда
		
		Сохранить( , , СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки, Ложь, "Титульный");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеПерсУчетаИмпортированныеИзВнешнейПрограммы(СписокСохранения)
	
	Перем ВнешниеСведенияРаздела25;
	Перем ВнешниеСведенияРаздела6;
	
	// Восстановим данные из "внешней" программы ведения перс. учета.
	СписокСохранения.Свойство("ВнешниеСведенияРаздела25", ВнешниеСведенияРаздела25);
	
	Если ВнешниеСведенияРаздела25 <> Неопределено Тогда
		
		ПачкиИсходные = Неопределено;
		
		Если ВнешниеСведенияРаздела25.Свойство("ПачкиИсходные", ПачкиИсходные) Тогда
			
			Если ПачкиИсходные <> Неопределено Тогда
				
				Если ТипЗнч(ПачкиИсходные) = Тип("ТаблицаЗначений") Тогда
					
					// Конвертация данных из "внешней" программы ведения перс. учета,
					// в случае перехода с 8.2 на 8.3.
					
					ПачкиИсходныеМассив = Новый Массив;
					
					Для Каждого СтрПИ Из ПачкиИсходные Цикл
						
						ПачкаИсходная = Новый Структура();
						
						ПачкаИсходная.Вставить("БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную",
							СтрПИ.БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную);
						ПачкаИсходная.Вставить("СтраховыхВзносовОПС",
							СтрПИ.СтраховыхВзносовОПС);
						ПачкаИсходная.Вставить("КоличествоЗЛвПачке",
							СтрПИ.КоличествоЗЛвПачке);
						ПачкаИсходная.Вставить("ИмяФайла",
							СтрПИ.ИмяФайла);
							
						ПачкиИсходныеМассив.Добавить(ПачкаИсходная);
						
					КонецЦикла;
					
					ВнешниеСведенияРаздела25.ПачкиИсходные = ПачкиИсходныеМассив;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПачкиКорректирующие = Неопределено;
		
		Если ВнешниеСведенияРаздела25.Свойство("ПачкиКорректирующие", ПачкиКорректирующие) Тогда
			
			Если ПачкиКорректирующие <> Неопределено Тогда
				
				Если ТипЗнч(ПачкиКорректирующие) = Тип("ТаблицаЗначений") Тогда
					
					// Конвертация данных из "внешней" программы ведения перс. учета,
					// в случае перехода с 8.2 на 8.3.
					
					ПачкиКорректирующиеМассив = Новый Массив;
					
					Для Каждого СтрПК Из ПачкиКорректирующие Цикл
						
						ПачкаКорректирующая = Новый Структура();
						
						ПачкаКорректирующая.Вставить("Квартал",
							СтрПК.Квартал);
						ПачкаКорректирующая.Вставить("Год",
							СтрПК.Год);
						ПачкаКорректирующая.Вставить("ДоначисленоСтраховыхВзносовОПС",
							СтрПК.ДоначисленоСтраховыхВзносовОПС);
						ПачкаКорректирующая.Вставить("ДоначисленоНаСтраховуюЧасть",
							СтрПК.ДоначисленоНаСтраховуюЧасть);
						ПачкаКорректирующая.Вставить("ДоначисленоНаНакопительнуюЧасть",
							СтрПК.ДоначисленоНаНакопительнуюЧасть);
						ПачкаКорректирующая.Вставить("КоличествоЗЛвПачке",
							СтрПК.КоличествоЗЛвПачке);
						ПачкаКорректирующая.Вставить("ИмяФайла",
							СтрПК.ИмяФайла);
						
						ПачкиКорректирующиеМассив.Добавить(ПачкаКорректирующая);
						
					КонецЦикла;
					
					ВнешниеСведенияРаздела25.ПачкиКорректирующие = ПачкиКорректирующиеМассив;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25
			= ПоместитьВоВременноеХранилище(ВнешниеСведенияРаздела25, УникальныйИдентификатор);
		
	КонецЕсли;
	
	СписокСохранения.Свойство("ВнешниеСведенияРаздела6", ВнешниеСведенияРаздела6);
	
	Если ВнешниеСведенияРаздела6 <> Неопределено Тогда
		
		Пачки = Неопределено;
		
		Если ВнешниеСведенияРаздела6.Свойство("Пачки", Пачки) Тогда
			
			Если Пачки <> Неопределено Тогда
				
				Если ТипЗнч(Пачки) = Тип("ТаблицаЗначений") Тогда
					
					// Конвертация данных из "внешней" программы ведения перс. учета,
					// в случае перехода с 8.2 на 8.3.
					
					ПачкиМассив = Новый Массив;
					
					Для Каждого СтрП Из Пачки Цикл
						
						Пачка = Новый Структура();
						
						Пачка.Вставить("ТекстФайла", СтрП.ТекстФайла);
						Пачка.Вставить("ИмяФайла",   СтрП.ИмяФайла);
						
						ПачкиМассив.Добавить(Пачка);
						
					КонецЦикла;
					
					ВнешниеСведенияРаздела6.Пачки = ПачкиМассив;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.ВнешниеСведенияРаздела6
			= ПоместитьВоВременноеХранилище(ВнешниеСведенияРаздела6, УникальныйИдентификатор);
		
		КоличествоСтраницРаздела6 = Неопределено;
		
		Если ВнешниеСведенияРаздела6.Свойство("КоличествоПечатныхЛистов", КоличествоСтраницРаздела6) Тогда
			
			// Конвертация данных из "внешней" программы ведения перс. учета,
			// в случае перехода с 8.2 на 8.3.
			СтруктураРеквизитовФормы.КоличествоСтраницРаздела6 = КоличествоСтраницРаздела6;
			
		Иначе
			
			СписокСохранения.Свойство("КоличествоСтраницРаздела6", СтруктураРеквизитовФормы.КоличествоСтраницРаздела6);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	НомерМесяца   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	СтруктураРеквизитовФормы.НомерГода = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;
	
	ТабличныйДокумент.Области.Период.Значение   = НомерМесяца;
	ТабличныйДокумент.Области.ОтчетГод.Значение = СтруктураРеквизитовФормы.НомерГода;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере()
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	ДатаПодписиДоИзменения = Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение;
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
	Если ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
		
		Если ДатаПодписиДоИзменения <> Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение Тогда
			
			Если ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.ПечатныеЛистыРаздела25) Тогда
				
				СписокТаблДокументов = Форма.ПечатныеФормыРаздела25();
				
				Форма.СтруктураРеквизитовФормы.ПечатныеЛистыРаздела25
					= ПоместитьВоВременноеХранилище(СписокТаблДокументов, Форма.УникальныйИдентификатор);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено)
	
	УправлениеЛистами(ЭтаФорма, ТипНП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)
	
	Если ТипНП = Неопределено Тогда
		ТипНП = 0;
		
		Если (Форма.СтруктураРеквизитовФормы.Организация = Неопределено)
		 ИЛИ (Форма.СтруктураРеквизитовФормы.Организация
		  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;
		
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		 Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, "ТипНП");
		ОргСведения.Свойство("ТипНП", ТипНП);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь, СменилсяПризнакПодписанта = Ложь)
	
	Если (СтруктураРеквизитовФормы.Организация = Неопределено)
	 ИЛИ (СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(
		"СправочникСсылка.Организации")) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОГРН"); 
		Сведения.Добавить("", "ОКАТО");
		Сведения.Добавить("", "РегистрационныйНомерФСС");
		Сведения.Добавить("", "АдрЮР");
		Сведения.Добавить("", "АдрФакт");
		Сведения.Добавить("", "АдрПрописки");
		Сведения.Добавить("", "АдрМЖ");
		
	КонецЕсли;
	
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ФИО");
	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ТелСлуж");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ИННЮЛ                   = "";
		КППЮЛ                   = "";
		НаимЮЛПол               = "";
		ОГРН                    = "";
		ОКАТО                   = "";
		РегистрационныйНомерФСС = "";
		РегНомПФР               = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "РегНомПФР").РегНомПФР;
		АдрЮР                   = "";
		АдрФакт                 = "";
		АдрПрописки             = "";
		АдрМЖ                   = "";
		
	КонецЕсли;
	
	ФИОРук         = "";
	ФИОБух         = "";
	ФИО            = "";
	ФИОИсп         = "";
	ТелИсп         = "";
	ТелОрганизации = "";
	ТелСлуж        = "";
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ОргСведения.Свойство("ИННЮЛ",                   ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ",                   КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол",               НаимЮЛПол);
		ОргСведения.Свойство("ОГРН",                    ОГРН);
		ОргСведения.Свойство("ОКАТО",                   ОКАТО);
		ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
		ОргСведения.Свойство("АдрЮР",                   АдрЮР);
		ОргСведения.Свойство("АдрФакт",                 АдрФакт);
		ОргСведения.Свойство("АдрПрописки",             АдрПрописки);
		ОргСведения.Свойство("АдрМЖ",                   АдрМЖ);
		
	КонецЕсли;
	
	ОргСведения.Свойство("ФИОРук",         ФИОРук);
	ОргСведения.Свойство("ФИОБух",         ФИОБух);
	ОргСведения.Свойство("ФИО",            ФИО);
	ОргСведения.Свойство("ФИОИсп",         ФИОИсп);
	ОргСведения.Свойство("ТелИсп",         ТелИсп);
	ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
	ОргСведения.Свойство("ТелСлуж",        ТелСлуж);
	
	Если ПБОЮЛ Тогда
		НаимЮлПол      = ФИО;
		Адрес          = АдрПрописки;
		ТелОрганизации = ТелСлуж;
		ФИОРук         = ФИО;
		ФИОБух         = "";
		ФИОИсп         = "";
		ТелИсп         = "";
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		ТабличныйДокумент.Области.ПрПодп.Значение = "1";
		ТабличныйДокумент.Области.ОргПодписантФамилия.Значение = ФИОРук;
		ЗапретитьВводСведенийОПредставителе(ЭтаФорма);
		Возврат;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ОргНазв.Значение)) Тогда
		ТабличныйДокумент.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ПрПодп.Значение)) Или (СменилсяПризнакПодписанта) Тогда
		ТабличныйДокумент.Области.ПрПодп.Значение = "1"; 
	КонецЕсли;
		
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ОргПодписантФамилия.Значение))
	 ИЛИ (СменилсяПризнакПодписанта) Тогда
		ТабличныйДокумент.Области.ОргПодписантФамилия.Значение = ФИОРук;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ДокУпПред.Значение))
	 ИЛИ (СменилсяПризнакПодписанта) Тогда
		ЗапретитьВводСведенийОПредставителе(ЭтаФорма);
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ИНН.Значение)) Тогда
		ТабличныйДокумент.Области.ИНН.Значение = ИННЮЛ;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.КПП.Значение)) Тогда
		ТабличныйДокумент.Области.КПП.Значение = КППЮЛ;
	КонецЕсли;
	
	РазрешенныеЗнаки = "0123456789";
	ОткорректированныйНомерТелефона = "";
	Для Инд = 1 По СтрДлина(ТелОрганизации) Цикл
		ТекущийСимвол = Сред(ТелОрганизации, Инд, 1);
		Если СтрНайти(РазрешенныеЗнаки, ТекущийСимвол) <> 0 Тогда
			ОткорректированныйНомерТелефона = ОткорректированныйНомерТелефона + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	ТелОрганизации = ОткорректированныйНомерТелефона;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ТелОрганизации.Значение)) Тогда
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
	КонецЕсли;
		
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.НомРег.Значение)) Тогда
	 
		Если СтрДлина(РегНомПФР) < 14 Тогда
			Если Сред(РегНомПФР, 4, 1) <> "-" Тогда
				РегНомПФР = Лев(РегНомПФР,3) + "-" + Сред(РегНомПФР, 4);
			КонецЕсли;	
			Если Сред(РегНомПФР, 8, 1) <> "-" Тогда
				РегНомПФР = Лев(РегНомПФР,7) + "-" + Сред(РегНомПФР, 8);
			КонецЕсли;
		КонецЕсли;	
		
		ТабличныйДокумент.Области.НомРег.Значение = РегНомПФР;
		
		СтруктураРеквизитовФормы.Отчет_РегистрационныйНомерПФР = РегНомПФР;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено,
	                                        ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено,
	                                        ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено,
	                               ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ИмяЯчейки = Неопределено Тогда
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(
				Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(
				Форма, ИмяЯчейки);
		#КонецЕсли
		
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;
				
				Попытка
					ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
					Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Комментарий;
					КонецЕсли;
					
					Ключ = "_" + ВариантЗаполнения;
					Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
					
					Если ВариантЗаполнения = 4 Тогда
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
					
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				Исключение
					
				КонецПопытки;
				
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя,
		                                                     ИсходноеКоличествоСтрокГруппы,
															 ТекущееКоличествоСтрокГруппы,
															 ИмяГруппы, СтруктураГруппы);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];

		Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области.Найти(ИмяЯчейки);
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы <> Неопределено Тогда
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
						
						ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
						
					Иначе
						
						ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
						
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя,
														 ИсходноеКоличествоСтрокГруппы,
														 ТекущееКоличествоСтрокГруппы,
														 ИмяГруппы, СтруктураГруппы) Экспорт
			
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, ,
	                                 МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1),
									 ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки,
			                                          Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы
													  - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы
				                                                                        - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, ,
	                         ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5", СтруктураРеквизитовФормы.мИдГруппы5);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы4",  СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено,
	                                                        ИдГрупп)
	Перем ИмяГруппы;
		
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы4;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы5;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)

	ИмяГруппы = Лев(ИмяПоказателя, 11);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели,
		                                                                                       ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма,
		                                                               ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	 "ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();

	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	ЕстьИзмененияНастройкаСтраниц = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		Модифицированность = Истина;

		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено.'");

		Сообщение.Сообщить();

	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены.'");

		Сообщение.Сообщить();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено)
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	 КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);

	ОписаниеТиповСтрока15   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));

	ОписаниеТиповСтрока100  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	ОписаниеТиповСтрока50   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));

	ОписаниеТиповЧисло1     = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));

	ОписаниеТиповЧисло15    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
        ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 ); 
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			стрВариантЗаполнения =
			 РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);

				ЕстьИзменения = Истина;
				
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Выгрузить();
					
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	ФормироватьСтруктуруСтраницОтчета();

	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок,
			                                                   ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(
			 ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество()
	  <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		ЗначениеРеквизитаДеревоСтраницОтчета = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
		
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если ЗначениеРеквизитаДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		Если ТекСтрока.ИмяПоляТабличногоДокум
		  <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводСведенийОПредставителе(Форма)
	
	Форма.ТабличныйДокумент.Области.ОргПредНаим.Значение = "";
	Форма.ТабличныйДокумент.Области.ОргПредНаим.Защита = Истина;
	Форма.ТабличныйДокумент.Области.ОргПредНаим.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветБелый;
	
	Форма.ТабличныйДокумент.Области.ДокУпПред.Значение = "";
	
	Форма.мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
	Форма.мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
	Форма.мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
	Форма.мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
	Форма.мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
	Форма.мСтруктураДокУпПред.Вставить("КемВыдан", " ");
	
	Форма.ТабличныйДокумент.Области.ДокУпПред.Защита = Истина;
	Форма.ТабличныйДокумент.Области.ДокУпПред.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветБелый;
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле)

	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По Форма[ТабличноеПоле].Области.Количество() - 1 Цикл
		ТекущаяОбласть = Форма[ТабличноеПоле].Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * СтруктураДанныхТитульный.НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	РезультатСохранения = ПередСохранением("не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Неопределено, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
	Оповестить("ВыполненоСохранениеФормыРСВ1", СтруктураРеквизитовФормы.мСохраненныйДок, );
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант,
	                     ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	                                                ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
	 ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено)
	 ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
	    Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	     ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, , Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант,
	              ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела)
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение,
		                Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(
	                                                                    СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.НомерПачки               = НомерПачки;

	СтруктураРеквизитовФормы.мВариант = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// Сохраняем номер пачки.
	НомерПачкиИзРегистра = РегламентированнаяОтчетность.ПолучитьНомерПачкиВыгруженныхФайловПФР(
	 СтруктураРеквизитовФормы.Организация, Число(СтруктураДанныхТитульный.ОтчетГод));
	
	Если НЕ ЗначениеЗаполнено(НомерПачки) Тогда
		НомерПачки = НомерПачкиИзРегистра + 1;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.НомерПачки = НомерПачки;
	
	// Формируем данные редактируемых ячеек таблицы.
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// Формируем список сохранения.
	СписокСохранения = Новый Структура();
	
	// Вставляем данные редактируемых ячеек таблицы.
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение],
		 Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// Вставляем данные многострочных разделов.
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		Если ЭлементСтруктуры.Значение = "ТаблицаСтраницыРазделаРаздел6" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение],
		 Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление
					    = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок
						 = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Вставляем данные многостраничных разделов.
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// Вставляем данные вариантов автозаполнения ячеек.
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

	// Вствляем версию формы.
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// Вствляем флажок пересчета страниц.
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// Вствляем флажок отключения.
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	// Вставляем документ, подтверждающий полномочия представителя.
	СписокСохранения.Вставить("ДокументУпПред", мСтруктураДокУпПред);
	
	СписокСохранения.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами",
	 СтруктураРеквизитовФормы.НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами);
	
	СписокСохранения.Вставить("НаименованияЭлементовАдреса", СтруктураРеквизитовФормы.НаименованияЭлементовАдреса);
	
	СписокСохранения.Вставить("ДанныеОтчетаИзмененыВручную", СтруктураРеквизитовФормы.ДанныеОтчетаИзмененыВручную);
	
	// Вставляем данные, полученные из "внешней" программы ведения перс. учета.
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
	СписокСохранения.Вставить("ВнешниеСведенияРаздела25",
		ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25));
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела6) Тогда
	СписокСохранения.Вставить("ВнешниеСведенияРаздела6",
		ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела6));
	КонецЕсли;
	СписокСохранения.Вставить("КоличествоСтраницРаздела6", СтруктураРеквизитовФормы.КоличествоСтраницРаздела6);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// Записываем документ, хранящий данные отчета.
	Попытка
		
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		
		Если НомерПачки > НомерПачкиИзРегистра Тогда
			
			РегламентированнаяОтчетность.УстановитьНомерПачкиВыгруженныхФайловПФР(СтруктураРеквизитовФормы.Организация,
			 Число(СтруктураДанныхТитульный.ОтчетГод), НомерПачки);
			 
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
				ТабличныйДокумент.Области.НомерПачки.Значение = НомерПачки;
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			 РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Раздел21" Или НаимРаздела = "Раздел24" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение Тогда	
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела" + НаимРаздела;
		
		АктивныеСтраницы = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивныеСтраницы[0];
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			Для каждого Страница Из АктивныеСтраницы Цикл
				Страница.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			Страница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел4"
		  ИЛИ НаимРаздела = "Раздел5" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
		
	// Обычные разделы.
	//
	Иначе
		
		Если НаимРаздела <> "Раздел25" И НаимРаздела <> "Раздел6" Тогда
			
			ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	ТабличныйДокумент.Очистить();
	
	Если ИмяТекРаздела = "Раздел25" Тогда
		
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
			
			Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресСтраницыРаздела25) Тогда
				
				МассивТаблДокументов = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы.АдресСтраницыРаздела25);
				
				Для Индекс = 0 По МассивТаблДокументов.Количество() - 1 Цикл
					
					ТабличныйДокумент.Вывести(МассивТаблДокументов[Индекс].ТабличныйДокумент);
					
				КонецЦикла;
				
			Иначе
				
				МакетРаздела25 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2015Кв1_Раздел25");
				
				СекцияТребуетсяИмпорт = МакетРаздела25.ПолучитьОбласть("ТребуетсяИмпорт");
				
				ТабличныйДокумент.Вывести(СекцияТребуетсяИмпорт);
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ПечатныеЛистыРаздела25) Тогда
				
				СписокТаблДокументов = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы.ПечатныеЛистыРаздела25);
				
			Иначе
				
				СписокТаблДокументов = ПечатныеФормыРаздела25();
				
				СтруктураРеквизитовФормы.ПечатныеЛистыРаздела25
					= ПоместитьВоВременноеХранилище(СписокТаблДокументов, УникальныйИдентификатор);
				
			КонецЕсли;
			
			Для Индекс = 0 По СписокТаблДокументов.Количество() - 1 Цикл
				
				ТабличныйДокумент.Вывести(СписокТаблДокументов[Индекс].Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекРаздела = "Раздел6" Тогда
		
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
			
			Если СтруктураРеквизитовФормы.ОписаниеСтраницРаздела6.Количество() > 0 Тогда
				
				ТабличныйДокументСтраницыРаздела6 = ТабличныйДокументСтраницыРаздела6(НомерСтраницыРазделаОтчета);
				
				Если ТабличныйДокументСтраницыРаздела6 <> Неопределено Тогда
					
					ТабличныйДокумент.Вывести(ТабличныйДокументСтраницыРаздела6);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
		
	КонецЕсли;
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Раздел21" Или ИмяТекРаздела = "Раздел24" Тогда
		
		НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела" + ИмяТекРаздела;
		
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 ИЛИ ЗаголовокРаздела Тогда
				
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
		СтруктураДанных = Новый Структура;
		
		ТаблицаАктивнойСтраницы = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1];
		
		СписокДанных = ТаблицаАктивнойСтраницы.Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ТаблицаАктивнойСтраницы.АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел4"
		  ИЛИ ИмяТекРаздела = "Раздел5" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		ЕстьДопСтроки = Ложь;
		
		Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				ЕстьДопСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьДопСтроки Тогда
			Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Гиперссылка = Истина;
					ОбластьТД.Текст = "х";
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Гиперссылка = Ложь;
					ОбластьТД.Текст = "";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе
		
		Если ИмяТекРаздела <> "Раздел25" И ИмяТекРаздела <> "Раздел6" Тогда
			
			Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		УправлениеЛистамиНаСервере();
		ПроверкаЗакраскиТитульного();
		УстановитьНадписиНаТитульномЛисте(ТабличныйДокумент);
		
	Иначе
		
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
	КонецЕсли;
	
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		УстановитьФорматОтображенияНулевыхЗначенийСтрок100и150();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписиНаТитульномЛисте(ТаблДокумент)
	
	ТаблДокумент.Области.ТекстПриказа.Текст = "Приложение" + Символы.ПС + "к Изменениям,"
	+ Символы.ПС + "которые вносятся в постановление" + Символы.ПС + "Правления ПФР от 16.01.2014 № 2п,"
	+ Символы.ПС + "утвержденным постановлением" + Символы.ПС + "Правления ПФР" + Символы.ПС + "от 04.06.2015"
	+ Символы.ПС + "№ 194п";
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументСтраницыРаздела6(НомерСтраницы)
	
	ОписаниеСтраницыРаздела6 = СтруктураРеквизитовФормы.ОписаниеСтраницРаздела6[НомерСтраницы - 1];
	
	Если ЗначениеЗаполнено(ОписаниеСтраницыРаздела6.Адрес) Тогда
		
		ТабличныйДокументСтраницы = ПолучитьИзВременногоХранилища(ОписаниеСтраницыРаздела6.Адрес);
		
	Иначе
		
		ЗапрашиваемыеДанныеРазделов = Новый Структура("Раздел6");
		ОписаниеЗапрашиваемыхДанных = РегламентированнаяОтчетность.ОписаниеЗапрашиваемыхДанныхРазделаРСВ_1();
		ОписаниеЗапрашиваемыхДанных.ПолучатьСтруктуруРаздела = Ложь;
		ЗапрашиваемыеДанныеРазделов.Раздел6 = ОписаниеЗапрашиваемыхДанных;
		
		ОписаниеЗапрашиваемойСтраницы = РегламентированнаяОтчетность.ПустаяСтруктураДляРазделовФормыРСВ_1();
		ОписаниеЗапрашиваемыхДанных.СтраницыРаздела.Добавить(ОписаниеЗапрашиваемойСтраницы);
		ОписаниеЗапрашиваемойСтраницы.Идентификатор = ОписаниеСтраницыРаздела6.Идентификатор;
		
		РегламентированнаяОтчетность.ПолучитьРаздел25иРаздел6ФормыРСВ1(СтруктураРеквизитовФормы.мСохраненныйДок, ЗапрашиваемыеДанныеРазделов);
		
		ТабличныйДокументСтраницы = ЗапрашиваемыеДанныеРазделов.Раздел6.СтраницыРаздела[0].ТабличныйДокумент;
		
		ОписаниеСтраницыРаздела6.Адрес = ПоместитьВоВременноеХранилище(ТабличныйДокументСтраницы, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат ТабличныйДокументСтраницы;
	
КонецФункции

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора,
	                       СтандартнаяОбработка, КолонкаПоиска = "Код")
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ="))
		  <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель
			                                             + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ОблПрПодписанта = ТабличныйДокумент.Области.Найти("ПрПодп");
	ПрПодписанта = ?(ОблПрПодписанта = Неопределено, "", ОблПрПодписанта.Значение);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, ПрПодписанта, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, ПрПодписанта, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	                      ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	ПрПодписанта = ДополнительныеПараметры.ПрПодписанта;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(
		ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяОбласти = Область.Имя;
	
	Если ИмяРаздела = "Раздел21" Или ИмяРаздела = "Раздел24" Тогда
		
		ТаблицаРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
		СтраницаРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		ТаблицаРаздела  = ЭтаФорма[ТаблицаРаздела];
		ДанныеСтраницы  = ТаблицаРаздела[СтраницаРаздела-1].Данные[0].Значение;
		
		Если ДанныеСтраницы.Свойство(ИмяОбласти) Тогда
			ДанныеСтраницы[ИмяОбласти] = Область.Значение;
		КонецЕсли;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	ИначеЕсли ИмяРаздела = "Раздел1"
		  ИЛИ ИмяРаздела = "Раздел22"
		  ИЛИ ИмяРаздела = "Раздел31"
		  ИЛИ ИмяРаздела = "Раздел32"
		  ИЛИ ИмяРаздела = "Раздел4"
		  ИЛИ ИмяРаздела = "Раздел5" Тогда
		
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	КонецЕсли;
	
	Если Область.Имя = "ПрПодп" Тогда
		ПрПодписантаНов = ТабличныйДокумент.Области.ПрПодп.Значение;
		СменилсяПрПодписанта = ?(ПрПодписанта = ПрПодписантаНов, Ложь, Истина);
		Если СменилсяПрПодписанта Тогда
			Если ПрПодписантаНов = "1" Тогда
				ЗаполнитьСведенияОбОрганизации(Истина);
			Иначе
				РазрешитьВводСведенийОПредставителе();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", ОбластьИмя = "")
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		
		// Расчет в стр. 130 раздела 1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100013003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100013003.Значение = Форма.ТабличныйДокумент.Области.П000100010003.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100011003.Значение
															 		   + Форма.ТабличныйДокумент.Области.П000100012003.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100013003 = Форма.СтруктураДанныхРаздел1.П000100010003
														   + Форма.СтруктураДанныхРаздел1.П000100011003
														   + Форма.СтруктураДанныхРаздел1.П000100012003;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100013004, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100013004.Значение = Форма.ТабличныйДокумент.Области.П000100010004.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100012004.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100013004 = Форма.СтруктураДанныхРаздел1.П000100010004
														   + Форма.СтруктураДанныхРаздел1.П000100012004;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100013005, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100013005.Значение = Форма.ТабличныйДокумент.Области.П000100010005.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100012005.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100013005 = Форма.СтруктураДанныхРаздел1.П000100010005
														   + Форма.СтруктураДанныхРаздел1.П000100012005;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100013006, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100013006.Значение = Форма.ТабличныйДокумент.Области.П000100010006.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100011006.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100012006.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100013006 = Форма.СтруктураДанныхРаздел1.П000100010006
														   + Форма.СтруктураДанныхРаздел1.П000100011006
														   + Форма.СтруктураДанныхРаздел1.П000100012006;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100013007, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100013007.Значение = Форма.ТабличныйДокумент.Области.П000100010007.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100011007.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100012007.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100013007 = Форма.СтруктураДанныхРаздел1.П000100010007
														   + Форма.СтруктураДанныхРаздел1.П000100011007
														   + Форма.СтруктураДанныхРаздел1.П000100012007;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100013008, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100013008.Значение = Форма.ТабличныйДокумент.Области.П000100010008.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100011008.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100012008.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100013008 = Форма.СтруктураДанныхРаздел1.П000100010008
														   + Форма.СтруктураДанныхРаздел1.П000100011008
														   + Форма.СтруктураДанныхРаздел1.П000100012008;
			КонецЕсли;
		КонецЕсли;
		
		// Расчет в стр. 144 раздела 1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100014403, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100014403.Значение = Форма.ТабличныйДокумент.Области.П000100014103.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100014203.Значение
															 		   + Форма.ТабличныйДокумент.Области.П000100014303.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100014403 = Форма.СтруктураДанныхРаздел1.П000100014103
														   + Форма.СтруктураДанныхРаздел1.П000100014203
														   + Форма.СтруктураДанныхРаздел1.П000100014303;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100014404, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100014404.Значение = Форма.ТабличныйДокумент.Области.П000100014104.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100014204.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100014304.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100014404 = Форма.СтруктураДанныхРаздел1.П000100014104
														   + Форма.СтруктураДанныхРаздел1.П000100014204
														   + Форма.СтруктураДанныхРаздел1.П000100014304;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100014405, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100014405.Значение = Форма.ТабличныйДокумент.Области.П000100014105.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100014205.Значение
															 		   + Форма.ТабличныйДокумент.Области.П000100014305.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100014405 = Форма.СтруктураДанныхРаздел1.П000100014105
														   + Форма.СтруктураДанныхРаздел1.П000100014205
														   + Форма.СтруктураДанныхРаздел1.П000100014305;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100014406, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100014406.Значение = Форма.ТабличныйДокумент.Области.П000100014106.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100014206.Значение
															 		   + Форма.ТабличныйДокумент.Области.П000100014306.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100014406 = Форма.СтруктураДанныхРаздел1.П000100014106
														   + Форма.СтруктураДанныхРаздел1.П000100014206
														   + Форма.СтруктураДанныхРаздел1.П000100014306;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100014407, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100014407.Значение = Форма.ТабличныйДокумент.Области.П000100014107.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100014207.Значение
															 		   + Форма.ТабличныйДокумент.Области.П000100014307.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100014407 = Форма.СтруктураДанныхРаздел1.П000100014107
														   + Форма.СтруктураДанныхРаздел1.П000100014207
														   + Форма.СтруктураДанныхРаздел1.П000100014307;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100014408, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100014408.Значение = Форма.ТабличныйДокумент.Области.П000100014108.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100014208.Значение
															 		   + Форма.ТабличныйДокумент.Области.П000100014308.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100014408 = Форма.СтруктураДанныхРаздел1.П000100014108
														   + Форма.СтруктураДанныхРаздел1.П000100014208
														   + Форма.СтруктураДанныхРаздел1.П000100014308;
			КонецЕсли;
		КонецЕсли;
		
		// Расчет в стр. 150 раздела 1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100015003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100015003.Значение = Форма.ТабличныйДокумент.Области.П000100013003.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000100014003.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100015003 = Форма.СтруктураДанныхРаздел1.П000100013003
														   - Форма.СтруктураДанныхРаздел1.П000100014003;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100015004, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100015004.Значение = Форма.ТабличныйДокумент.Области.П000100013004.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000100014004.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100015004 = Форма.СтруктураДанныхРаздел1.П000100013004
														   - Форма.СтруктураДанныхРаздел1.П000100014004;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100015005, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100015005.Значение = Форма.ТабличныйДокумент.Области.П000100013005.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000100014005.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100015005 = Форма.СтруктураДанныхРаздел1.П000100013005
														   - Форма.СтруктураДанныхРаздел1.П000100014005;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100015006, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100015006.Значение = Форма.ТабличныйДокумент.Области.П000100013006.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000100014006.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100015006 = Форма.СтруктураДанныхРаздел1.П000100013006
														   - Форма.СтруктураДанныхРаздел1.П000100014006;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100015007, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100015007.Значение = Форма.ТабличныйДокумент.Области.П000100013007.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000100014007.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100015007 = Форма.СтруктураДанныхРаздел1.П000100013007
														   - Форма.СтруктураДанныхРаздел1.П000100014007;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100015008, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100015008.Значение = Форма.ТабличныйДокумент.Области.П000100013008.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000100014008.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100015008 = Форма.СтруктураДанныхРаздел1.П000100013008
														   - Форма.СтруктураДанныхРаздел1.П000100014008;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
			
			// Расчет по гр. 3 и 8 в стр. 110 раздела 1.
			
			Форма.ТабличныйДокумент.Области.П000100011003.Значение = Форма.СтруктураДанныхРаздел1.П000100011003;
			Форма.ТабличныйДокумент.Области.П000100011008.Значение = Форма.СтруктураДанныхРаздел1.П000100011008;
			
			// Расчет по гр. 3 и 8 в стр. 111 раздела 1.
			
			Форма.ТабличныйДокумент.Области.П000100011103.Значение = Форма.СтруктураДанныхРаздел1.П000100011103;
			Форма.ТабличныйДокумент.Области.П000100011108.Значение = Форма.СтруктураДанныхРаздел1.П000100011108;
			
			// Расчет по гр. 3 и 8 в стр. 112 раздела 1.
			
			Форма.ТабличныйДокумент.Области.П000100011203.Значение = Форма.СтруктураДанныхРаздел1.П000100011203;
			Форма.ТабличныйДокумент.Области.П000100011208.Значение = Форма.СтруктураДанныхРаздел1.П000100011208;
			
			// Расчет по гр. 3 и 8 в стр. 113 раздела 1.
			
			Форма.ТабличныйДокумент.Области.П000100011303.Значение = Форма.СтруктураДанныхРаздел1.П000100011303;
			Форма.ТабличныйДокумент.Области.П000100011308.Значение = Форма.СтруктураДанныхРаздел1.П000100011308;
			
			// Расчет по гр. 3 и 8 в стр. 114 раздела 1.
			
			Форма.ТабличныйДокумент.Области.П000100011403.Значение = Форма.СтруктураДанныхРаздел1.П000100011403;
			Форма.ТабличныйДокумент.Области.П000100011408.Значение = Форма.СтруктураДанныхРаздел1.П000100011408;
			
			// Расчет по гр. 6 и 7 в стр. 110 раздела 1.
			
			Форма.ТабличныйДокумент.Области.П000100011006.Значение = Форма.СтруктураДанныхРаздел1.П000100011006;
			Форма.ТабличныйДокумент.Области.П000100011007.Значение = Форма.СтруктураДанныхРаздел1.П000100011007;
			
			// Расчет по гр. 6 и 7 в стр. 111 раздела 1.
			
			Форма.ТабличныйДокумент.Области.П000100011106.Значение = Форма.СтруктураДанныхРаздел1.П000100011106;
			Форма.ТабличныйДокумент.Области.П000100011107.Значение = Форма.СтруктураДанныхРаздел1.П000100011107;
			
			// Расчет по гр. 6 и 7 в стр. 112 раздела 1.
			
			Форма.ТабличныйДокумент.Области.П000100011206.Значение = Форма.СтруктураДанныхРаздел1.П000100011206;
			Форма.ТабличныйДокумент.Области.П000100011207.Значение = Форма.СтруктураДанныхРаздел1.П000100011207;
			
			// Расчет по гр. 6 и 7 в стр. 113 раздела 1.
			
			Форма.ТабличныйДокумент.Области.П000100011306.Значение = Форма.СтруктураДанныхРаздел1.П000100011306;
			Форма.ТабличныйДокумент.Области.П000100011307.Значение = Форма.СтруктураДанныхРаздел1.П000100011307;
			
			// Расчет по гр. 6 и 7 в стр. 114 раздела 1.
			
			Форма.ТабличныйДокумент.Области.П000100011406.Значение = Форма.СтруктураДанныхРаздел1.П000100011406;
			Форма.ТабличныйДокумент.Области.П000100011407.Значение = Форма.СтруктураДанныхРаздел1.П000100011407;
			
			// Расчет по гр. 3 - 8 в стр. 120 раздела 1.
			
			Форма.ТабличныйДокумент.Области.П000100012003.Значение = Форма.СтруктураДанныхРаздел1.П000100012003;
			Форма.ТабличныйДокумент.Области.П000100012004.Значение = Форма.СтруктураДанныхРаздел1.П000100012004;
			Форма.ТабличныйДокумент.Области.П000100012005.Значение = Форма.СтруктураДанныхРаздел1.П000100012005;
			Форма.ТабличныйДокумент.Области.П000100012006.Значение = Форма.СтруктураДанныхРаздел1.П000100012006;
			Форма.ТабличныйДокумент.Области.П000100012007.Значение = Форма.СтруктураДанныхРаздел1.П000100012007;
			Форма.ТабличныйДокумент.Области.П000100012008.Значение = Форма.СтруктураДанныхРаздел1.П000100012008;
			
			// Расчет по гр. 3 и 4 в стр. 121 раздела 1.
			
			Форма.ТабличныйДокумент.Области.П000100012103.Значение = Форма.СтруктураДанныхРаздел1.П000100012103;
			Форма.ТабличныйДокумент.Области.П000100012104.Значение = Форма.СтруктураДанныхРаздел1.П000100012104;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел21" Тогда
		
		ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]];
		
		Для Каждого Страница Из ТаблицаРаздела Цикл
			
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			
			Данные = Страница.Данные[0].Значение;
			
			// Расчет в стр. 204 раздела 2.1.
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210020403, ОбластьИмя) > 0 Тогда
				Данные.П000210020403 = Данные.П000210020003
									 - Данные.П000210020103
									 - Данные.П000210020203
									 - Данные.П000210020303;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
					Форма.ТабличныйДокумент.Области.П000210020403.Значение = Данные.П000210020403;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210020404, ОбластьИмя) > 0 Тогда
				Данные.П000210020404 = Данные.П000210020004
									 - Данные.П000210020104
									 - Данные.П000210020204
									 - Данные.П000210020304;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
					Форма.ТабличныйДокумент.Области.П000210020404.Значение = Данные.П000210020404;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210020405, ОбластьИмя) > 0 Тогда
				Данные.П000210020405 = Данные.П000210020005
									 - Данные.П000210020105
									 - Данные.П000210020205
									 - Данные.П000210020305;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
					Форма.ТабличныйДокумент.Области.П000210020405.Значение = Данные.П000210020405;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210020406, ОбластьИмя) > 0 Тогда
				Данные.П000210020406 = Данные.П000210020006
									 - Данные.П000210020106
									 - Данные.П000210020206
									 - Данные.П000210020306;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
					Форма.ТабличныйДокумент.Области.П000210020406.Значение = Данные.П000210020406;
				КонецЕсли;
			КонецЕсли;
			
			// Расчет в стр. 214 раздела 2.1.
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210021303, ОбластьИмя) > 0 Тогда
				Данные.П000210021303 = Данные.П000210021003
									 - Данные.П000210021103
									 - Данные.П000210021203;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
					Форма.ТабличныйДокумент.Области.П000210021303.Значение = Данные.П000210021303;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210021304, ОбластьИмя) > 0 Тогда
				Данные.П000210021304 = Данные.П000210021004
									 - Данные.П000210021104
									 - Данные.П000210021204;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
					Форма.ТабличныйДокумент.Области.П000210021304.Значение = Данные.П000210021304;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210021305, ОбластьИмя) > 0 Тогда
				Данные.П000210021305 = Данные.П000210021005
									 - Данные.П000210021105
									 - Данные.П000210021205;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
					Форма.ТабличныйДокумент.Области.П000210021305.Значение = Данные.П000210021305;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210021306, ОбластьИмя) > 0 Тогда
				Данные.П000210021306 = Данные.П000210021006
									 - Данные.П000210021106
									 - Данные.П000210021206;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
					Форма.ТабличныйДокумент.Области.П000210021306.Значение = Данные.П000210021306;
				КонецЕсли;
			КонецЕсли;
			
			// Расчет по гр. 3 и 8 в стр. 110 раздела 1.
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011003, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011003 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел21", "П000210020503", Ложь)
									 					   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел21", "П000210020603", Ложь);
				Форма.СтруктураДанныхРаздел1.П000100011003 = Макс(Форма.СтруктураДанныхРаздел1.П000100011003, 0);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011008, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011008 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел21", "П000210021403", Ложь);
				Форма.СтруктураДанныхРаздел1.П000100011008 = Макс(Форма.СтруктураДанныхРаздел1.П000100011008, 0);
			КонецЕсли;
			
			// Расчет по гр. 3 и 8 в стр. 111 раздела 1.
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011103, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011103 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел21", "П000210020504", Ложь)
									 					   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел21", "П000210020604", Ложь);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011108, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011108 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел21", "П000210021404", Ложь);
			КонецЕсли;
			
			// Расчет по гр. 3 и 8 в стр. 112 раздела 1.
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011203, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011203 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел21", "П000210020505", Ложь)
									 					   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел21", "П000210020605", Ложь);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011208, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011208 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел21", "П000210021405", Ложь);
			КонецЕсли;
			
			// Расчет по гр. 3 и 8 в стр. 113 раздела 1.
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011303, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011303 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел21", "П000210020506", Ложь)
									 					   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел21", "П000210020606", Ложь);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011308, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011308 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел21", "П000210021406", Ложь);
			КонецЕсли;
			
			// Расчет по гр. 3 и 8 в стр. 114 раздела 1.
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011403, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011403 = Форма.СтруктураДанныхРаздел1.П000100011103
									 					   + Форма.СтруктураДанныхРаздел1.П000100011203
									 					   + Форма.СтруктураДанныхРаздел1.П000100011303;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011408, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011408 = Форма.СтруктураДанныхРаздел1.П000100011108
									 					   + Форма.СтруктураДанныхРаздел1.П000100011208
									 					   + Форма.СтруктураДанныхРаздел1.П000100011308;
			КонецЕсли;
			
		КонецЦикла;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел22" Тогда
		
		// Расчет в стр. 223 раздела 2.2.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220022303, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000220022303.Значение = Форма.ТабличныйДокумент.Области.П000220022003.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000220022103.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000220022303 = Форма.СтруктураДанныхРаздел22.П000220022003
															- Форма.СтруктураДанныхРаздел22.П000220022103;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220022304, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000220022304.Значение = Форма.ТабличныйДокумент.Области.П000220022004.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000220022104.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000220022304 = Форма.СтруктураДанныхРаздел22.П000220022004
															- Форма.СтруктураДанныхРаздел22.П000220022104;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220022305, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000220022305.Значение = Форма.ТабличныйДокумент.Области.П000220022005.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000220022105.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000220022305 = Форма.СтруктураДанныхРаздел22.П000220022005
															- Форма.СтруктураДанныхРаздел22.П000220022105;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220022306, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000220022306.Значение = Форма.ТабличныйДокумент.Области.П000220022006.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000220022106.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000220022306 = Форма.СтруктураДанныхРаздел22.П000220022006
															- Форма.СтруктураДанныхРаздел22.П000220022106;
			КонецЕсли;
		КонецЕсли;
		
		// Расчет в стр. 233 раздела 2.3.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230023303, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000230023303.Значение = Форма.ТабличныйДокумент.Области.П000230023003.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000230023103.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000230023303 = Форма.СтруктураДанныхРаздел22.П000230023003
															- Форма.СтруктураДанныхРаздел22.П000230023103;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230023304, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000230023304.Значение = Форма.ТабличныйДокумент.Области.П000230023004.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000230023104.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000230023304 = Форма.СтруктураДанныхРаздел22.П000230023004
															- Форма.СтруктураДанныхРаздел22.П000230023104;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230023305, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000230023305.Значение = Форма.ТабличныйДокумент.Области.П000230023005.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000230023105.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000230023305 = Форма.СтруктураДанныхРаздел22.П000230023005
															- Форма.СтруктураДанныхРаздел22.П000230023105;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230023306, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000230023306.Значение = Форма.ТабличныйДокумент.Области.П000230023006.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000230023106.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000230023306 = Форма.СтруктураДанныхРаздел22.П000230023006
															- Форма.СтруктураДанныхРаздел22.П000230023106;
			КонецЕсли;
		КонецЕсли;
		
		// Расчет по гр. 6 и 7 в стр. 110 раздела 1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011006, ОбластьИмя) > 0 Тогда
			Условие = Новый Структура;
			Условие.Вставить("П000240001001", "1");
			Форма.СтруктураДанныхРаздел1.П000100011006 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024403", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025003", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025603", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026203", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026803", Ложь, Условие);
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011006 = Форма.СтруктураДанныхРаздел1.П000100011006
														   + Форма.ТабличныйДокумент.Области.П000220022403.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011006 = Форма.СтруктураДанныхРаздел1.П000100011006
														   + Форма.СтруктураДанныхРаздел22.П000220022403;
			КонецЕсли;
			Форма.СтруктураДанныхРаздел1.П000100011006 = Макс(Форма.СтруктураДанныхРаздел1.П000100011006, 0);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011007, ОбластьИмя) > 0 Тогда
			Условие = Новый Структура;
			Условие.Вставить("П000240001001", "2");
			Форма.СтруктураДанныхРаздел1.П000100011007 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024403", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025003", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025603", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026203", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026803", Ложь, Условие);
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011007 = Форма.СтруктураДанныхРаздел1.П000100011007
														   + Форма.ТабличныйДокумент.Области.П000230023403.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011007 = Форма.СтруктураДанныхРаздел1.П000100011007
														   + Форма.СтруктураДанныхРаздел22.П000230023403;
			КонецЕсли;
			Форма.СтруктураДанныхРаздел1.П000100011007 = Макс(Форма.СтруктураДанныхРаздел1.П000100011007, 0);
		КонецЕсли;
		
		// Расчет по гр. 6 и 7 в стр. 111 раздела 1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011106, ОбластьИмя) > 0 Тогда
			Условие = Новый Структура;
			Условие.Вставить("П000240001001", "1");
			Форма.СтруктураДанныхРаздел1.П000100011106 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024404", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025004", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025604", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026204", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026804", Ложь, Условие);
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011106 = Форма.СтруктураДанныхРаздел1.П000100011106
														   + Форма.ТабличныйДокумент.Области.П000220022404.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011106 = Форма.СтруктураДанныхРаздел1.П000100011106
														   + Форма.СтруктураДанныхРаздел22.П000220022404;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011107, ОбластьИмя) > 0 Тогда
			Условие = Новый Структура;
			Условие.Вставить("П000240001001", "2");
			Форма.СтруктураДанныхРаздел1.П000100011107 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024404", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025004", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025604", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026204", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026804", Ложь, Условие);
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011107 = Форма.СтруктураДанныхРаздел1.П000100011107
														   + Форма.ТабличныйДокумент.Области.П000230023404.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011107 = Форма.СтруктураДанныхРаздел1.П000100011107
														   + Форма.СтруктураДанныхРаздел22.П000230023404;
			КонецЕсли;
		КонецЕсли;
		
		// Расчет по гр. 6 и 7 в стр. 112 раздела 1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011206, ОбластьИмя) > 0 Тогда
			Условие = Новый Структура;
			Условие.Вставить("П000240001001", "1");
			Форма.СтруктураДанныхРаздел1.П000100011206 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024405", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025005", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025605", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026205", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026805", Ложь, Условие);
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011206 = Форма.СтруктураДанныхРаздел1.П000100011206
														   + Форма.ТабличныйДокумент.Области.П000220022405.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011206 = Форма.СтруктураДанныхРаздел1.П000100011206
														   + Форма.СтруктураДанныхРаздел22.П000220022405;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011207, ОбластьИмя) > 0 Тогда
			Условие = Новый Структура;
			Условие.Вставить("П000240001001", "2");
			Форма.СтруктураДанныхРаздел1.П000100011207 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024405", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025005", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025605", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026205", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026805", Ложь, Условие);
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011207 = Форма.СтруктураДанныхРаздел1.П000100011207
														   + Форма.ТабличныйДокумент.Области.П000230023405.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011207 = Форма.СтруктураДанныхРаздел1.П000100011207
														   + Форма.СтруктураДанныхРаздел22.П000230023405;
			КонецЕсли;
		КонецЕсли;
		
		// Расчет по гр. 6 и 7 в стр. 113 раздела 1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011306, ОбластьИмя) > 0 Тогда
			Условие = Новый Структура;
			Условие.Вставить("П000240001001", "1");
			Форма.СтруктураДанныхРаздел1.П000100011306 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024406", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025006", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025606", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026206", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026806", Ложь, Условие);
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011306 = Форма.СтруктураДанныхРаздел1.П000100011306
														   + Форма.ТабличныйДокумент.Области.П000220022406.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011306 = Форма.СтруктураДанныхРаздел1.П000100011306
														   + Форма.СтруктураДанныхРаздел22.П000220022406;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011307, ОбластьИмя) > 0 Тогда
			Условие = Новый Структура;
			Условие.Вставить("П000240001001", "2");
			Форма.СтруктураДанныхРаздел1.П000100011307 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024406", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025006", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025606", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026206", Ложь, Условие)
													   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026806", Ложь, Условие);
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011307 = Форма.СтруктураДанныхРаздел1.П000100011307
														   + Форма.ТабличныйДокумент.Области.П000230023406.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011307 = Форма.СтруктураДанныхРаздел1.П000100011307
														   + Форма.СтруктураДанныхРаздел22.П000230023406;
			КонецЕсли;
		КонецЕсли;
		
		// Расчет по гр. 6 и 7 в стр. 114 раздела 1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011406, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011406 = Форма.СтруктураДанныхРаздел1.П000100011106
								 					   + Форма.СтруктураДанныхРаздел1.П000100011206
								 					   + Форма.СтруктураДанныхРаздел1.П000100011306;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011407, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011407 = Форма.СтруктураДанныхРаздел1.П000100011107
								 					   + Форма.СтруктураДанныхРаздел1.П000100011207
								 					   + Форма.СтруктураДанныхРаздел1.П000100011307;
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел24" Тогда
		
		ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]];
		
		Для Каждого Страница Из ТаблицаРаздела Цикл
			
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			
			Данные = Страница.Данные[0].Значение;
			
			// Расчет в стр. 243 раздела 2.4.
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240024303, ОбластьИмя) > 0 Тогда
				Данные.П000240024303 = Данные.П000240024003
									 - Данные.П000240024103;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240024303.Значение = Данные.П000240024303;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240024304, ОбластьИмя) > 0 Тогда
				Данные.П000240024304 = Данные.П000240024004
									 - Данные.П000240024104;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240024304.Значение = Данные.П000240024304;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240024305, ОбластьИмя) > 0 Тогда
				Данные.П000240024305 = Данные.П000240024005
									 - Данные.П000240024105;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240024305.Значение = Данные.П000240024305;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240024306, ОбластьИмя) > 0 Тогда
				Данные.П000240024306 = Данные.П000240024006
									 - Данные.П000240024106;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240024306.Значение = Данные.П000240024306;
				КонецЕсли;
			КонецЕсли;
			
			// Расчет в стр. 249 раздела 2.4.
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240024903, ОбластьИмя) > 0 Тогда
				Данные.П000240024903 = Данные.П000240024603
									 - Данные.П000240024703;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240024903.Значение = Данные.П000240024903;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240024904, ОбластьИмя) > 0 Тогда
				Данные.П000240024904 = Данные.П000240024604
									 - Данные.П000240024704;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240024904.Значение = Данные.П000240024904;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240024905, ОбластьИмя) > 0 Тогда
				Данные.П000240024905 = Данные.П000240024605
									 - Данные.П000240024705;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240024905.Значение = Данные.П000240024905;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240024906, ОбластьИмя) > 0 Тогда
				Данные.П000240024906 = Данные.П000240024606
									 - Данные.П000240024706;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240024906.Значение = Данные.П000240024906;
				КонецЕсли;
			КонецЕсли;
			
			// Расчет в стр. 255 раздела 2.4.
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240025503, ОбластьИмя) > 0 Тогда
				Данные.П000240025503 = Данные.П000240025203
									 - Данные.П000240025303;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240025503.Значение = Данные.П000240025503;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240025504, ОбластьИмя) > 0 Тогда
				Данные.П000240025504 = Данные.П000240025204
									 - Данные.П000240025304;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240025504.Значение = Данные.П000240025504;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240025505, ОбластьИмя) > 0 Тогда
				Данные.П000240025505 = Данные.П000240025205
									 - Данные.П000240025305;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240025505.Значение = Данные.П000240025505;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240025506, ОбластьИмя) > 0 Тогда
				Данные.П000240025506 = Данные.П000240025206
									 - Данные.П000240025306;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240025506.Значение = Данные.П000240025506;
				КонецЕсли;
			КонецЕсли;
			
			// Расчет в стр. 261 раздела 2.4.
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240026103, ОбластьИмя) > 0 Тогда
				Данные.П000240026103 = Данные.П000240025803
									 - Данные.П000240025903;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240026103.Значение = Данные.П000240026103;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240026104, ОбластьИмя) > 0 Тогда
				Данные.П000240026104 = Данные.П000240025804
									 - Данные.П000240025904;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240026104.Значение = Данные.П000240026104;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240026105, ОбластьИмя) > 0 Тогда
				Данные.П000240026105 = Данные.П000240025805
									 - Данные.П000240025905;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240026105.Значение = Данные.П000240026105;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240026106, ОбластьИмя) > 0 Тогда
				Данные.П000240026106 = Данные.П000240025806
									 - Данные.П000240025906;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240026106.Значение = Данные.П000240026106;
				КонецЕсли;
			КонецЕсли;
			
			// Расчет в стр. 267 раздела 2.4.
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240026703, ОбластьИмя) > 0 Тогда
				Данные.П000240026703 = Данные.П000240026403
									 - Данные.П000240026503;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240026703.Значение = Данные.П000240026703;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240026704, ОбластьИмя) > 0 Тогда
				Данные.П000240026704 = Данные.П000240026404
									 - Данные.П000240026504;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240026704.Значение = Данные.П000240026704;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240026705, ОбластьИмя) > 0 Тогда
				Данные.П000240026705 = Данные.П000240026405
									 - Данные.П000240026505;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240026705.Значение = Данные.П000240026705;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000240026706, ОбластьИмя) > 0 Тогда
				Данные.П000240026706 = Данные.П000240026406
									 - Данные.П000240026506;
				Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
					Форма.ТабличныйДокумент.Области.П000240026706.Значение = Данные.П000240026706;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Расчет по гр. 6 и 7 в стр. 110 раздела 1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011006, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011006 = Форма.СтруктураДанныхРаздел22.П000220022403;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
				ТаблицаРаздела24 = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел24"]];
				Для Каждого СтраницаР24 Из ТаблицаРаздела24 Цикл
					Если (СтраницаР24.Данные = Неопределено) ИЛИ (Тип(СтраницаР24.Данные) <> Тип("Структура")) Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтрР24 = СтраницаР24.Данные[0].Значение;
					Если СтраницаР24.АктивнаяСтраница Тогда
						Если Форма.ТабличныйДокумент.Области.П000240001001.Значение = "1" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011006 = Форма.СтруктураДанныхРаздел1.П000100011006
																	   + Форма.ТабличныйДокумент.Области.П000240024403.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025003.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025603.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026203.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026803.Значение;
						КонецЕсли;
					Иначе
						Если ДанныеСтрР24.П000240001001 = "1" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011006 = Форма.СтруктураДанныхРаздел1.П000100011006
																	   + ДанныеСтрР24.П000240024403
																	   + ДанныеСтрР24.П000240025003
																	   + ДанныеСтрР24.П000240025603
																	   + ДанныеСтрР24.П000240026203
																	   + ДанныеСтрР24.П000240026803;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Условие = Новый Структура;
				Условие.Вставить("П000240001001", "1");
				Форма.СтруктураДанныхРаздел1.П000100011006 = Форма.СтруктураДанныхРаздел1.П000100011006
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024403", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025003", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025603", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026203", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026803", Ложь, Условие);
			Конецесли;
			Форма.СтруктураДанныхРаздел1.П000100011006 = Макс(Форма.СтруктураДанныхРаздел1.П000100011006, 0);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011007, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011007 = Форма.СтруктураДанныхРаздел22.П000230023403;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
				ТаблицаРаздела24 = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел24"]];
				Для Каждого СтраницаР24 Из ТаблицаРаздела24 Цикл
					Если (СтраницаР24.Данные = Неопределено) ИЛИ (Тип(СтраницаР24.Данные) <> Тип("Структура")) Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтрР24 = СтраницаР24.Данные[0].Значение;
					Если СтраницаР24.АктивнаяСтраница Тогда
						Если Форма.ТабличныйДокумент.Области.П000240001001.Значение = "2" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011007 = Форма.СтруктураДанныхРаздел1.П000100011007
																	   + Форма.ТабличныйДокумент.Области.П000240024403.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025003.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025603.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026203.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026803.Значение;
						КонецЕсли;
					Иначе
						Если ДанныеСтрР24.П000240001001 = "2" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011007 = Форма.СтруктураДанныхРаздел1.П000100011007
																	   + ДанныеСтрР24.П000240024403
																	   + ДанныеСтрР24.П000240025003
																	   + ДанныеСтрР24.П000240025603
																	   + ДанныеСтрР24.П000240026203
																	   + ДанныеСтрР24.П000240026803;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Условие = Новый Структура;
				Условие.Вставить("П000240001001", "2");
				Форма.СтруктураДанныхРаздел1.П000100011007 = Форма.СтруктураДанныхРаздел1.П000100011007
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024403", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025003", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025603", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026203", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026803", Ложь, Условие);
			Конецесли;
			Форма.СтруктураДанныхРаздел1.П000100011007 = Макс(Форма.СтруктураДанныхРаздел1.П000100011007, 0);
		КонецЕсли;
		
		// Расчет по гр. 6 и 7 в стр. 111 раздела 1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011106, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011106 = Форма.СтруктураДанныхРаздел22.П000220022404;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
				ТаблицаРаздела24 = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел24"]];
				Для Каждого СтраницаР24 Из ТаблицаРаздела24 Цикл
					Если (СтраницаР24.Данные = Неопределено) ИЛИ (Тип(СтраницаР24.Данные) <> Тип("Структура")) Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтрР24 = СтраницаР24.Данные[0].Значение;
					Если СтраницаР24.АктивнаяСтраница Тогда
						Если Форма.ТабличныйДокумент.Области.П000240001001.Значение = "1" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011106 = Форма.СтруктураДанныхРаздел1.П000100011106
																	   + Форма.ТабличныйДокумент.Области.П000240024404.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025004.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025604.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026204.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026804.Значение;
						КонецЕсли;
					Иначе
						Если ДанныеСтрР24.П000240001001 = "1" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011106 = Форма.СтруктураДанныхРаздел1.П000100011106
																	   + ДанныеСтрР24.П000240024404
																	   + ДанныеСтрР24.П000240025004
																	   + ДанныеСтрР24.П000240025604
																	   + ДанныеСтрР24.П000240026204
																	   + ДанныеСтрР24.П000240026804;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Условие = Новый Структура;
				Условие.Вставить("П000240001001", "1");
				Форма.СтруктураДанныхРаздел1.П000100011106 = Форма.СтруктураДанныхРаздел1.П000100011106
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024404", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025004", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025604", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026204", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026804", Ложь, Условие);
			Конецесли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011107, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011107 = Форма.СтруктураДанныхРаздел22.П000230023404;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
				ТаблицаРаздела24 = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел24"]];
				Для Каждого СтраницаР24 Из ТаблицаРаздела24 Цикл
					Если (СтраницаР24.Данные = Неопределено) ИЛИ (Тип(СтраницаР24.Данные) <> Тип("Структура")) Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтрР24 = СтраницаР24.Данные[0].Значение;
					Если СтраницаР24.АктивнаяСтраница Тогда
						Если Форма.ТабличныйДокумент.Области.П000240001001.Значение = "2" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011107 = Форма.СтруктураДанныхРаздел1.П000100011107
																	   + Форма.ТабличныйДокумент.Области.П000240024404.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025004.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025604.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026204.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026804.Значение;
						КонецЕсли;
					Иначе
						Если ДанныеСтрР24.П000240001001 = "2" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011107 = Форма.СтруктураДанныхРаздел1.П000100011107
																	   + ДанныеСтрР24.П000240024404
																	   + ДанныеСтрР24.П000240025004
																	   + ДанныеСтрР24.П000240025604
																	   + ДанныеСтрР24.П000240026204
																	   + ДанныеСтрР24.П000240026804;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Условие = Новый Структура;
				Условие.Вставить("П000240001001", "2");
				Форма.СтруктураДанныхРаздел1.П000100011107 = Форма.СтруктураДанныхРаздел1.П000100011107
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024404", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025004", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025604", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026204", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026804", Ложь, Условие);
			Конецесли;
		КонецЕсли;
		
		// Расчет по гр. 6 и 7 в стр. 112 раздела 1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011206, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011206 = Форма.СтруктураДанныхРаздел22.П000220022405;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
				ТаблицаРаздела24 = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел24"]];
				Для Каждого СтраницаР24 Из ТаблицаРаздела24 Цикл
					Если (СтраницаР24.Данные = Неопределено) ИЛИ (Тип(СтраницаР24.Данные) <> Тип("Структура")) Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтрР24 = СтраницаР24.Данные[0].Значение;
					Если СтраницаР24.АктивнаяСтраница Тогда
						Если Форма.ТабличныйДокумент.Области.П000240001001.Значение = "1" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011206 = Форма.СтруктураДанныхРаздел1.П000100011206
																	   + Форма.ТабличныйДокумент.Области.П000240024405.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025005.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025605.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026205.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026805.Значение;
						КонецЕсли;
					Иначе
						Если ДанныеСтрР24.П000240001001 = "1" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011206 = Форма.СтруктураДанныхРаздел1.П000100011206
																	   + ДанныеСтрР24.П000240024405
																	   + ДанныеСтрР24.П000240025005
																	   + ДанныеСтрР24.П000240025605
																	   + ДанныеСтрР24.П000240026205
																	   + ДанныеСтрР24.П000240026805;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Условие = Новый Структура;
				Условие.Вставить("П000240001001", "1");
				Форма.СтруктураДанныхРаздел1.П000100011206 = Форма.СтруктураДанныхРаздел1.П000100011206
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024405", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025005", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025605", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026205", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026805", Ложь, Условие);
			Конецесли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011207, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011207 = Форма.СтруктураДанныхРаздел22.П000230023405;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
				ТаблицаРаздела24 = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел24"]];
				Для Каждого СтраницаР24 Из ТаблицаРаздела24 Цикл
					Если (СтраницаР24.Данные = Неопределено) ИЛИ (Тип(СтраницаР24.Данные) <> Тип("Структура")) Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтрР24 = СтраницаР24.Данные[0].Значение;
					Если СтраницаР24.АктивнаяСтраница Тогда
						Если Форма.ТабличныйДокумент.Области.П000240001001.Значение = "2" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011207 = Форма.СтруктураДанныхРаздел1.П000100011207
																	   + Форма.ТабличныйДокумент.Области.П000240024405.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025005.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025605.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026205.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026805.Значение;
						КонецЕсли;
					Иначе
						Если ДанныеСтрР24.П000240001001 = "2" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011207 = Форма.СтруктураДанныхРаздел1.П000100011207
																	   + ДанныеСтрР24.П000240024405
																	   + ДанныеСтрР24.П000240025005
																	   + ДанныеСтрР24.П000240025605
																	   + ДанныеСтрР24.П000240026205
																	   + ДанныеСтрР24.П000240026805;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Условие = Новый Структура;
				Условие.Вставить("П000240001001", "2");
				Форма.СтруктураДанныхРаздел1.П000100011207 = Форма.СтруктураДанныхРаздел1.П000100011207
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024405", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025005", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025605", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026205", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026805", Ложь, Условие);
			Конецесли;
		КонецЕсли;
		
		// Расчет по гр. 6 и 7 в стр. 113 раздела 1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011306, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011306 = Форма.СтруктураДанныхРаздел22.П000220022406;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
				ТаблицаРаздела24 = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел24"]];
				Для Каждого СтраницаР24 Из ТаблицаРаздела24 Цикл
					Если (СтраницаР24.Данные = Неопределено) ИЛИ (Тип(СтраницаР24.Данные) <> Тип("Структура")) Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтрР24 = СтраницаР24.Данные[0].Значение;
					Если СтраницаР24.АктивнаяСтраница Тогда
						Если Форма.ТабличныйДокумент.Области.П000240001001.Значение = "1" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011306 = Форма.СтруктураДанныхРаздел1.П000100011306
																	   + Форма.ТабличныйДокумент.Области.П000240024406.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025006.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025606.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026206.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026806.Значение;
						КонецЕсли;
					Иначе
						Если ДанныеСтрР24.П000240001001 = "1" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011306 = Форма.СтруктураДанныхРаздел1.П000100011306
																	   + ДанныеСтрР24.П000240024406
																	   + ДанныеСтрР24.П000240025006
																	   + ДанныеСтрР24.П000240025606
																	   + ДанныеСтрР24.П000240026206
																	   + ДанныеСтрР24.П000240026806;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Условие = Новый Структура;
				Условие.Вставить("П000240001001", "1");
				Форма.СтруктураДанныхРаздел1.П000100011306 = Форма.СтруктураДанныхРаздел1.П000100011306
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024406", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025006", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025606", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026206", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026806", Ложь, Условие);
			Конецесли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011307, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011307 = Форма.СтруктураДанныхРаздел22.П000230023406;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
				ТаблицаРаздела24 = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел24"]];
				Для Каждого СтраницаР24 Из ТаблицаРаздела24 Цикл
					Если (СтраницаР24.Данные = Неопределено) ИЛИ (Тип(СтраницаР24.Данные) <> Тип("Структура")) Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтрР24 = СтраницаР24.Данные[0].Значение;
					Если СтраницаР24.АктивнаяСтраница Тогда
						Если Форма.ТабличныйДокумент.Области.П000240001001.Значение = "2" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011307 = Форма.СтруктураДанныхРаздел1.П000100011307
																	   + Форма.ТабличныйДокумент.Области.П000240024406.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025006.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240025606.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026206.Значение
																	   + Форма.ТабличныйДокумент.Области.П000240026806.Значение;
						КонецЕсли;
					Иначе
						Если ДанныеСтрР24.П000240001001 = "2" Тогда
							Форма.СтруктураДанныхРаздел1.П000100011307 = Форма.СтруктураДанныхРаздел1.П000100011307
																	   + ДанныеСтрР24.П000240024406
																	   + ДанныеСтрР24.П000240025006
																	   + ДанныеСтрР24.П000240025606
																	   + ДанныеСтрР24.П000240026206
																	   + ДанныеСтрР24.П000240026806;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Условие = Новый Структура;
				Условие.Вставить("П000240001001", "2");
				Форма.СтруктураДанныхРаздел1.П000100011307 = Форма.СтруктураДанныхРаздел1.П000100011307
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240024406", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025006", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240025606", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026206", Ложь, Условие)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел24", "П000240026806", Ложь, Условие);
			Конецесли;
		КонецЕсли;
		
		// Расчет по гр. 6 и 7 в стр. 114 раздела 1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011406, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011406 = Форма.СтруктураДанныхРаздел1.П000100011106
								 					   + Форма.СтруктураДанныхРаздел1.П000100011206
								 					   + Форма.СтруктураДанныхРаздел1.П000100011306;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011407, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011407 = Форма.СтруктураДанныхРаздел1.П000100011107
								 					   + Форма.СтруктураДанныхРаздел1.П000100011207
								 					   + Форма.СтруктураДанныхРаздел1.П000100011307;
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел31" Тогда
		
		// Расчет в стр. 343 раздела 3.1.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000340034303, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
				Форма.ТабличныйДокумент.Области.П000340034303.Значение
				 = ?(Форма.ТабличныйДокумент.Области.П000340034103.Значение = 0, 0,
				Форма.ТабличныйДокумент.Области.П000340034203.Значение
				/ Форма.ТабличныйДокумент.Области.П000340034103.Значение * 100);
			Иначе
				Форма.СтруктураДанныхРаздел31.Вставить("П000340034303", ?(Форма.СтруктураДанныхРаздел31.П000340034103 = 0, 0,
				Форма.СтруктураДанныхРаздел31.П000340034203
				/ Форма.СтруктураДанныхРаздел31.П000340034103 * 100));
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000340034304, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
				Форма.ТабличныйДокумент.Области.П000340034304.Значение
				= ?(Форма.ТабличныйДокумент.Области.П000340034104.Значение = 0, 0,
				Форма.ТабличныйДокумент.Области.П000340034204.Значение
				/ Форма.ТабличныйДокумент.Области.П000340034104.Значение * 100);
			Иначе
				Форма.СтруктураДанныхРаздел31.Вставить("П000340034304",
				?(Форма.СтруктураДанныхРаздел31.П000340034104 = 0, 0,
				Форма.СтруктураДанныхРаздел31.П000340034204
				/ Форма.СтруктураДанныхРаздел31.П000340034104 * 100));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел32" Тогда
		
		// Расчет в стр. 363 раздела 3.2.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000360036303, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				Форма.ТабличныйДокумент.Области.П000360036303.Значение
				= ?(Форма.ТабличныйДокумент.Области.П000360036103.Значение = 0, 0,
				Форма.ТабличныйДокумент.Области.П000360036203.Значение
				/ Форма.ТабличныйДокумент.Области.П000360036103.Значение * 100);
			Иначе
				Форма.СтруктураДанныхРаздел32.Вставить("П000360036303",
				?(Форма.СтруктураДанныхРаздел32.П000360036103 = 0, 0,
				Форма.СтруктураДанныхРаздел32.П000360036203
				/ Форма.СтруктураДанныхРаздел32.П000360036103 * 100));
			КонецЕсли;
		КонецЕсли;
		
		// Расчет в стр. 375 раздела 3.3.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000370037503, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				Форма.ТабличныйДокумент.Области.П000370037503.Значение
				= ?(Форма.ТабличныйДокумент.Области.П000370037103.Значение = 0, 0,
				(Форма.ТабличныйДокумент.Области.П000370037203.Значение
				+ Форма.ТабличныйДокумент.Области.П000370037303.Значение
				+ Форма.ТабличныйДокумент.Области.П000370037403.Значение)
				/ Форма.ТабличныйДокумент.Области.П000370037103.Значение * 100);
			Иначе
				Форма.СтруктураДанныхРаздел32.Вставить("П000370037503",
				?(Форма.СтруктураДанныхРаздел32.П000370037103 = 0, 0,
				(Форма.СтруктураДанныхРаздел32.П000370037203
				+ Форма.СтруктураДанныхРаздел32.П000370037303
				+ Форма.СтруктураДанныхРаздел32.П000370037403)
				/ Форма.СтруктураДанныхРаздел32.П000370037103 * 100));
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000370037504, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				Форма.ТабличныйДокумент.Области.П000370037504.Значение
				= ?(Форма.ТабличныйДокумент.Области.П000370037104.Значение = 0, 0,
				(Форма.ТабличныйДокумент.Области.П000370037204.Значение
				+ Форма.ТабличныйДокумент.Области.П000370037304.Значение
				+ Форма.ТабличныйДокумент.Области.П000370037404.Значение)
				/ Форма.ТабличныйДокумент.Области.П000370037104.Значение * 100);
			Иначе
				Форма.СтруктураДанныхРаздел32.Вставить("П000370037504",
				?(Форма.СтруктураДанныхРаздел32.П000370037104 = 0, 0,
				(Форма.СтруктураДанныхРаздел32.П000370037204
				+ Форма.СтруктураДанныхРаздел32.П000370037304
				+ Форма.СтруктураДанныхРаздел32.П000370037404)
				/ Форма.СтруктураДанныхРаздел32.П000370037104 * 100));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		
		// Расчет в стр. "Итого ..." (после многострочной части) раздела 4.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000206, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка6 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					Колонка6 = Колонка6 + Форма.ТабличныйДокумент.Области["П000400000106_" + Ном].Значение;
				Иначе
					Колонка6 = Колонка6 + ТаблицаБлока[Ном - 1].П000400000106;
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				Форма.ТабличныйДокумент.Области.П000400000206.Значение = Колонка6;
			Иначе
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000206", Колонка6);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000207, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка7 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					Колонка7 = Колонка7 + Форма.ТабличныйДокумент.Области["П000400000107_" + Ном].Значение;
				Иначе
					Колонка7 = Колонка7 + ТаблицаБлока[Ном - 1].П000400000107;
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				Форма.ТабличныйДокумент.Области.П000400000207.Значение = Колонка7;
			Иначе
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000207", Колонка7);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000208, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка8 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					Колонка8 = Колонка8 + Форма.ТабличныйДокумент.Области["П000400000108_" + Ном].Значение;
				Иначе
					Колонка8 = Колонка8 + ТаблицаБлока[Ном - 1].П000400000108;
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				Форма.ТабличныйДокумент.Области.П000400000208.Значение = Колонка8;
			Иначе
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000208", Колонка8);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000209, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка9 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					Колонка9 = Колонка9 + Форма.ТабличныйДокумент.Области["П000400000109_" + Ном].Значение;
				Иначе
					Колонка9 = Колонка9 + ТаблицаБлока[Ном - 1].П000400000109;
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				Форма.ТабличныйДокумент.Области.П000400000209.Значение = Колонка9;
			Иначе
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000209", Колонка9);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000210, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка10 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					Колонка10 = Колонка10 + Форма.ТабличныйДокумент.Области["П000400000110_" + Ном].Значение;
				Иначе
					Колонка10 = Колонка10 + ТаблицаБлока[Ном - 1].П000400000110;
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				Форма.ТабличныйДокумент.Области.П000400000210.Значение = Колонка10;
			Иначе
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000210", Колонка10);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000211, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка11 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					Колонка11 = Колонка11 + Форма.ТабличныйДокумент.Области["П000400000111_" + Ном].Значение;
				Иначе
					Колонка11 = Колонка11 + ТаблицаБлока[Ном - 1].П000400000111;
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				Форма.ТабличныйДокумент.Области.П000400000211.Значение = Колонка11;
			Иначе
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000211", Колонка11);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000212, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка12 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					Колонка12 = Колонка12 + Форма.ТабличныйДокумент.Области["П000400000112_" + Ном].Значение;
				Иначе
					Колонка12 = Колонка12 + ТаблицаБлока[Ном - 1].П000400000112;
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				Форма.ТабличныйДокумент.Области.П000400000212.Значение = Колонка12;
			Иначе
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000212", Колонка12);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000213, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка13 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					Колонка13 = Колонка13 + Форма.ТабличныйДокумент.Области["П000400000113_" + Ном].Значение;
				Иначе
					Колонка13 = Колонка13 + ТаблицаБлока[Ном - 1].П000400000113;
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				Форма.ТабличныйДокумент.Области.П000400000213.Значение = Колонка13;
			Иначе
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000213", Колонка13);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000214, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка14 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					Колонка14 = Колонка14 + Форма.ТабличныйДокумент.Области["П000400000114_" + Ном].Значение;
				Иначе
					Колонка14 = Колонка14 + ТаблицаБлока[Ном - 1].П000400000114;
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				Форма.ТабличныйДокумент.Области.П000400000214.Значение = Колонка14;
			Иначе
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000214", Колонка14);
			КонецЕсли;
		КонецЕсли;
		
		// Расчет по гр. 3 - 8 в стр. 120,
		// а также по гр. 3 и 4 в стр. 121 раздела 1.
		
		// Вычисление значения, необходимого для расчета
		// по гр. 6 в стр. 120 раздела 1.
		// Суммируем значения по гр. 13 раздела 4,
		// при значении кода основания в гр. 3 равном "1".
		СуммаРазд4Гр13СКодом1ВГр3 = 0;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100012006, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					Если Форма.ТабличныйДокумент.Области["П000400000103_" + Ном].Значение = "1" Тогда
						СуммаРазд4Гр13СКодом1ВГр3 = СуммаРазд4Гр13СКодом1ВГр3
							+ Форма.ТабличныйДокумент.Области["П000400000113_" + Ном].Значение;
					КонецЕсли;
				Иначе
					Если ТаблицаБлока[Ном - 1].П000400000103 = "1" Тогда
						СуммаРазд4Гр13СКодом1ВГр3 = СуммаРазд4Гр13СКодом1ВГр3 + ТаблицаБлока[Ном - 1].П000400000113;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Вычисление значения, необходимого для расчета
		// по гр. 7 в стр. 120 раздела 1.
		// Суммируем значения по гр. 13 раздела 4,
		// при значении кода основания в гр. 3 равном "2".
		СуммаРазд4Гр13СКодом2ВГр3 = 0;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100012007, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					Если Форма.ТабличныйДокумент.Области["П000400000103_" + Ном].Значение = "2" Тогда
						СуммаРазд4Гр13СКодом2ВГр3 = СуммаРазд4Гр13СКодом2ВГр3
							+ Форма.ТабличныйДокумент.Области["П000400000113_" + Ном].Значение;
					КонецЕсли;
				Иначе
					Если ТаблицаБлока[Ном - 1].П000400000103 = "2" Тогда
						СуммаРазд4Гр13СКодом2ВГр3 = СуммаРазд4Гр13СКодом2ВГр3 + ТаблицаБлока[Ном - 1].П000400000113;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
			
			Форма.СтруктураДанныхРаздел1.П000100012003 = Форма.ТабличныйДокумент.Области.П000400000206.Значение;
			Форма.СтруктураДанныхРаздел1.П000100012004 = Форма.ТабличныйДокумент.Области.П000400000208.Значение;
			Форма.СтруктураДанныхРаздел1.П000100012005 = Форма.ТабличныйДокумент.Области.П000400000210.Значение;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000211, ОбластьИмя) > 0
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100012006, ОбластьИмя) > 0 Тогда
				
				Форма.СтруктураДанныхРаздел1.П000100012006
					= Форма.ТабличныйДокумент.Области.П000400000211.Значение + СуммаРазд4Гр13СКодом1ВГр3;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000212, ОбластьИмя) > 0
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100012007, ОбластьИмя) > 0 Тогда
				
				Форма.СтруктураДанныхРаздел1.П000100012007
					= Форма.ТабличныйДокумент.Области.П000400000212.Значение + СуммаРазд4Гр13СКодом2ВГр3;
				
			КонецЕсли;
			
			Форма.СтруктураДанныхРаздел1.П000100012008 = Форма.ТабличныйДокумент.Области.П000400000214.Значение;
			Форма.СтруктураДанныхРаздел1.П000100012103 = Форма.ТабличныйДокумент.Области.П000400000207.Значение;
			Форма.СтруктураДанныхРаздел1.П000100012104 = Форма.ТабличныйДокумент.Области.П000400000209.Значение;
			
		Иначе
			
			Форма.СтруктураДанныхРаздел1.П000100012003 = Форма.СтруктураДанныхРаздел4.П000400000206;
			Форма.СтруктураДанныхРаздел1.П000100012004 = Форма.СтруктураДанныхРаздел4.П000400000208;
			Форма.СтруктураДанныхРаздел1.П000100012005 = Форма.СтруктураДанныхРаздел4.П000400000210;
			Форма.СтруктураДанныхРаздел1.П000100012006
				= Форма.СтруктураДанныхРаздел4.П000400000211 + СуммаРазд4Гр13СКодом1ВГр3;
			Форма.СтруктураДанныхРаздел1.П000100012007
				= Форма.СтруктураДанныхРаздел4.П000400000212 + СуммаРазд4Гр13СКодом2ВГр3;
			Форма.СтруктураДанныхРаздел1.П000100012008 = Форма.СтруктураДанныхРаздел4.П000400000214;
			Форма.СтруктураДанныхРаздел1.П000100012103 = Форма.СтруктураДанныхРаздел4.П000400000207;
			Форма.СтруктураДанныхРаздел1.П000100012104 = Форма.СтруктураДанныхРаздел4.П000400000209;
			
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		
		// Расчет в стр. "Итого ..." (после многострочной части) раздела 5.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500000250, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы5, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка5 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
					Колонка5 = Колонка5 + Форма.ТабличныйДокумент.Области["П000500000150_" + Ном].Значение;
				Иначе
					Колонка5 = Колонка5 + ТаблицаБлока[Ном - 1].П000500000150;
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
				Форма.ТабличныйДокумент.Области.П000500000250.Значение = Колонка5;
			Иначе
				Форма.СтруктураДанныхРаздел5.Вставить("П000500000250", Колонка5);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500000260, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы5, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка6 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
					Колонка6 = Колонка6 + Форма.ТабличныйДокумент.Области["П000500000160_" + Ном].Значение;
				Иначе
					Колонка6 = Колонка6 + ТаблицаБлока[Ном - 1].П000500000160;
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
				Форма.ТабличныйДокумент.Области.П000500000260.Значение = Колонка6;
			Иначе
				Форма.СтруктураДанныхРаздел5.Вставить("П000500000260", Колонка6);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500000270, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы5, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка7 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
					Колонка7 = Колонка7 + Форма.ТабличныйДокумент.Области["П000500000170_" + Ном].Значение;
				Иначе
					Колонка7 = Колонка7 + ТаблицаБлока[Ном - 1].П000500000170;
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
				Форма.ТабличныйДокумент.Области.П000500000270.Значение = Колонка7;
			Иначе
				Форма.СтруктураДанныхРаздел5.Вставить("П000500000270", Колонка7);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500000280, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы5, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка8 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
					Колонка8 = Колонка8 + Форма.ТабличныйДокумент.Области["П000500000180_" + Ном].Значение;
				Иначе
					Колонка8 = Колонка8 + ТаблицаБлока[Ном - 1].П000500000180;
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
				Форма.ТабличныйДокумент.Области.П000500000280.Значение = Колонка8;
			Иначе
				Форма.СтруктураДанныхРаздел5.Вставить("П000500000280", Колонка8);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		
		Расчет(Форма, "Раздел5",  "");
		Расчет(Форма, "Раздел4",  "");
		Расчет(Форма, "Раздел32", "");
		Расчет(Форма, "Раздел31", "");
		Расчет(Форма, "Раздел24", "");
		Расчет(Форма, "Раздел22", "");
		Расчет(Форма, "Раздел21", "");
		Расчет(Форма, "Раздел1",  "");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло)
	
	Форма.СтруктураРеквизитовФормы.мДелитель = 1;
	
	ОкругленноеЧисло = Окр(ИсходноеЧисло / Форма.СтруктураРеквизитовФормы.мДелитель,
	 Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Форма.СтруктураРеквизитовФормы.мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаПоказателяПоВсемСтраницам(Форма, ИмяСтраницы, Показатель, Округлять, Условия = Неопределено)
	
	Результат = 0;
	
	МногостраничностьЕсть = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницы,
	                                                                                "МногостраничностьВРазделе");
	
	Если НЕ МногостраничностьЕсть Тогда
		ДанныеТаблПоле = СобратьДанныеТекущегоТаблПоля(Форма, "ТабличныйДокумент");
		Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
			Результат = ДанныеТаблПоле.Показатель;	
		КонецЕсли;
		
		Результат = ?(Округлять, ОкруглитьЧислоПоФормату(Форма, Результат), Результат);
		
	Иначе
		ТаблицаРаздела = Неопределено;
		
		Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
		
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		
		Если ТаблицаРаздела <> Неопределено Тогда
			Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
				ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные[0].Значение;
				Если ((Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия))
					    И НЕ ДанныеТаблПоле = Неопределено Тогда
					ЗначениеПоказателя = ДанныеТаблПоле[Показатель];
					Результат = Результат + ?(Округлять, ОкруглитьЧислоПоФормату(Форма, ЗначениеПоказателя), ЗначениеПоказателя);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполняютсяУсловияЗаполнения(СтруктураДанных, Условия)
	
	Результат = Ложь;
	Для каждого Условие Из Условия Цикл
		Показатель = Условие.Ключ;
		ТребЗначение = Условие.Значение;
		ЗначениеПоказателя = СтруктураДанных[Показатель];
		Если ТребЗначение = Неопределено Тогда
			Результат = (ЗначениеПоказателя <> "");
		Иначе
			Результат = (ЗначениеПоказателя = ТребЗначение);
		КонецЕсли;
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	ИзменитьТаблицуПараметровАвтозаполненияНаСервере(-1, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуИзменитьТаблицуПараметровАвтозаполненияНаСервере(Парам, Лист = Неопределено)
	
	ИзменитьТаблицуПараметровАвтозаполненияНаСервере(Парам, Лист);
	ВставитьДополнительнуюСтраницуНаСервере(Лист);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполненияНаСервере(Парам, Лист = Неопределено)
	
	ИзменитьТаблицуПараметровАвтозаполнения(ЭтаФорма, Парам, Лист);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Форма, Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;

	Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
		
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда

		#Если НаКлиенте Тогда
			НоваяТаблицаВариантыЗаполнения =
			 РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма,
			 ИмяТекущейСтраницыПанели, НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет,
			 Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		#Иначе
			НоваяТаблицаВариантыЗаполнения =
			РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма,
			ИмяТекущейСтраницыПанели, НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет,
			Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		#КонецЕсли
		
		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			#Если НаКлиенте Тогда
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
			#Иначе
				Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ТаблицаЗначений") Тогда
					ТаблВариантов.ТаблицаВариантовЗаполнения.Загрузить(НоваяТаблицаВариантыЗаполнения);
				Иначе
					ТаблВариантов.ТаблицаВариантовЗаполнения.Загрузить(НоваяТаблицаВариантыЗаполнения.Выгрузить());
				КонецЕсли;
			#КонецЕсли
			
		КонецЕсли;

	Иначе

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
			
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма,
		 ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		 Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество()
			 >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		
	КонецЕсли;
	
	// Добавляем новую страницу.
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию.
	СтрНоваяСтраница.Представление = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма,
	 ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	Если ВыбТабличноеПолеИмя = "Раздел25" ИЛИ ВыбТабличноеПолеИмя = "Раздел6" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	Перем СтруктураГруппы;

	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
		
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5 Тогда
		ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "10_" + КолСтрокСтр;
	Иначе
		ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;
	КонецЕсли;

	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти,
	 НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01"
			 ИЛИ (Лев(ИмяКолонки, 5) = "П0005" И Прав(ИмяКолонки, 2) = "10") Тогда
				ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
			КонецЕсли;
			
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки,
			 НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01"
			 ИЛИ (Лев(ИмяКолонки, 5) = "П0005" И Прав(ИмяКолонки, 2) = "10") Тогда
				ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя  = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = НовыйПорядковыйНомер;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5 Тогда
		ИмяТекущейОбласти = ИмяГруппы + "10_" + КолСтрокСтр1;
	Иначе
		ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
	КонецЕсли;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	СтруктураГруппы.Добавить();

	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			ОбластьТД.Гиперссылка = Истина;
			ОбластьТД.Текст = "х";
		КонецЕсли;
	КонецЦикла;
		
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли

	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1;

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		
		Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5 Тогда
			ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "10_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		Иначе
			ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		КонецЕсли;
		
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница,
		 "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
			Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
			
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле,
			 НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр - 1];
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
				
				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
					
					Если НомерГрафы = 1 Тогда
						
						Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5 Тогда
							КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат(10, "ЧЦ=2; ЧВН=");
						Иначе
							КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат(1, "ЧЦ=2; ЧВН=");
						КонецЕсли;
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
		
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5 Тогда
		ИмяТекущейОбласти = ИмяГруппы + "10_" + Формат(НомТекущейСтроки, "ЧГ=0");
	Иначе
		ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
	КонецЕсли;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	ЕстьДопСтроки = Ложь;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
			ЕстьДопСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьДопСтроки Тогда
		Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
			Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(ТекущаяСтраница);
	#Иначе
		Форма.РасчетНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел22.Очистить();
	СтруктураДанныхРаздел31.Очистить();
	СтруктураДанныхРаздел32.Очистить();
	СтруктураДанныхРаздел4.Очистить();
	СтруктураДанныхРаздел5.Очистить();
	
	ТаблицаСтраницыРазделаРаздел21.Очистить();
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел21.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	ТаблицаСтраницыРазделаРаздел24.Очистить();
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел24.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел6" Тогда
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 1;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела)
	Перем СтруктураГруппы;
    	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
	   = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = "
		+ Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
		    = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = "
		+ Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
		    = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = "
		+ Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	ИмяПоляТаблДокументаСтароеЗначение = "";
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента		= СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если НаимРаздела <> ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###"
			ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма["ТабличныйДокумент"];
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(
					 ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти,
					 ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(
						ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти,
						ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ИмяПоляТаблДокументаСтароеЗначение = ИмяПоляТаблДокумента;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Истина);
	мПараметры.Вставить("Выгрузка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мИнтервалАвтосохранения", СтруктураРеквизитовФормы.мИнтервалАвтосохранения);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
		"НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура("НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны", НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
				ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	ТекНомерСтраницыМногострочногоРаздела = 0;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел24" Тогда
	
		Если Элементы.РазделыОтчета.ТекущиеДанные <> Неопределено Тогда
			
			ТекНомерСтраницыМногострочногоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ПерерасчетНаСервере(ТекНомерСтраницыМногострочногоРаздела);
	
	#Если ВебКлиент Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	#Иначе
		РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	#КонецЕсли
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета	= ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны			= ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерерасчетНаСервере(НомерСтраницыМногострочногоРаздела = 0)
	
	НаимТекРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	Если НаимТекРаздела <> "Раздел25" И НаимТекРаздела <> "Раздел6" Тогда
	
		СохранитьДанныеРаздела(НаимТекРаздела, Истина);
	
	КонецЕсли;
	
	РасчетНаСервере("", "");
	
	Если НаимТекРаздела = "Раздел1" Тогда
		
		ВывестиМакетВТаблДокНаСервере("Раздел1", 0);
		РасчетНаСервере("Раздел1", "");
		
	КонецЕсли;
	
	Если НаимТекРаздела = "Раздел21"
	 ИЛИ НаимТекРаздела = "Раздел24" Тогда
		
		ВывестиМакетВТаблДокНаСервере(НаимТекРаздела, НомерСтраницыМногострочногоРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция РегНомерПФРСоответствуетТребованиям(Знач РегНомерПФР)
	
	Для Инд = 0 По 8 Цикл
		РегНомерПФР = СтрЗаменить(РегНомерПФР, Строка(Инд), "9");
	КонецЦикла;
	
	Возврат РегНомерПФР = "999-999-999999";
	
КонецФункции 

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить
		|в системе принтер и задать его в качестве используемого по умолчанию.'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
		
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
		
		// Получение пронумерованных страниц разделов 2.5 и 6.
		СтруктураРеквизитовФормы.ИмпортныеРазделы = Неопределено;
		
		НомераПервыхСтраницРазделов  = НомераПервыхСтраницРаздела25иРаздела6();
		НомерПервойстраницыРаздела25 = НомераПервыхСтраницРазделов.НомерПервойстраницыРаздела25;
		НомерПервойстраницыРаздела6  = НомераПервыхСтраницРазделов.НомерПервойстраницыРаздела6;
		
		ЗапрашиваемыеРазделы = Новый Структура;
		
		ЭлементВДереве = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		ЭтаФорма.мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "Раздел25");
		Если ЭлементВДереве <> Неопределено Тогда
			Если ЭлементВДереве.ВыводНаПечать = 1 Тогда
				ОписаниеЗапрашиваемыхДанныхРаздела25
					= РегламентированнаяОтчетность.ОписаниеЗапрашиваемыхДанныхРазделаРСВ_1();
				ЗапрашиваемыеРазделы.Вставить("Раздел25", ОписаниеЗапрашиваемыхДанныхРаздела25);
			КонецЕсли;
		КонецЕсли;
		
		ЭлементВДереве = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		ЭтаФорма.мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "Раздел6");
		Если ЭлементВДереве <> Неопределено Тогда
			Если ЭлементВДереве.ВыводНаПечать = 1 Тогда
				ОписаниеЗапрашиваемыхДанныхРаздела6
					= РегламентированнаяОтчетность.ОписаниеЗапрашиваемыхДанныхРазделаРСВ_1();
				ЗапрашиваемыеРазделы.Вставить("Раздел6", ОписаниеЗапрашиваемыхДанныхРаздела6);
			КонецЕсли;
		КонецЕсли;
		
		НомерПоследнейстраницыРаздела25 = 0;
		ОбщееКоличествоСтраницРаздела6  = 0;
		
		Если ЗапрашиваемыеРазделы.Количество() > 0 Тогда
			
			РегламентированнаяОтчетность.ПолучитьРаздел25иРаздел6ФормыРСВ1(
				СтруктураРеквизитовФормы.мСохраненныйДок, ЗапрашиваемыеРазделы, Истина,
				НомерПервойстраницыРаздела25, НомерПоследнейстраницыРаздела25,
				НомерПервойстраницыРаздела6, ОбщееКоличествоСтраницРаздела6);
			
			СтруктураРеквизитовФормы.ИмпортныеРазделы = ПоместитьВоВременноеХранилище(
				ЗапрашиваемыеРазделы, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Общий алгоритм печати.
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
		
		ПроставитьПредставленияИНомераЛистов(
			ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов,
			НомерПоследнейстраницыРаздела25, ОбщееКоличествоСтраницРаздела6);
		
	Иначе
		
		ОбщееКоличествоСтраницРаздела6 = СтруктураРеквизитовФормы.КоличествоСтраницРаздела6;
		
		ПроставлениеНомеровЛистов(
			ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов, ОбщееКоличествоСтраницРаздела6);
		
	КонецЕсли;
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПроставлениеНомеровЛистов(Форма, ПризнакНумеруемыхФорм = Истина, СписокПечатаемыхЛистов, ОбщееКоличествоСтраницРаздела6 = 0)
	
	Если ПризнакНумеруемыхФорм Тогда
		Если Форма.СтруктураРеквизитовФормы.мСчетчикСтраниц <> Истина Тогда
			НомерЛиста = 1;
			Для Каждого Эл Из Форма.СтруктураРеквизитовФормы.мПечатныеФормы Цикл
				Если НЕ УдалосьПроставитьНомерСтраницы(Эл, НомерЛиста) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не удалось проставить номер страницы для %1'"), Эл.Представление);
					Сообщение.Сообщить();
					
					Продолжить;
					
				КонецЕсли;
				НомерЛиста = НомерЛиста + 1;
			КонецЦикла;
			
			// Увеличиваем общее количество страниц на число страниц раздела 6.
			НомерЛиста = НомерЛиста + ОбщееКоличествоСтраницРаздела6;
			
			Если Форма.СтруктураРеквизитовФормы.мПечатныеФормы.Количество() <> 0 Тогда
				ТаблДок = Форма.СтруктураРеквизитовФормы.мПечатныеФормы.Получить(0).Значение;
				ЦифрВОбщемКоличествеЛистов = 0;
				Для ОбратныйИндекс = 1 По 9 Цикл
					Индекс = 10 - ОбратныйИндекс;
					Если ТаблДок.Области.Найти("СоставленаНа" + Индекс) <> Неопределено Тогда
						ЦифрВОбщемКоличествеЛистов = Индекс;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ВсегоЛистов = Формат(НомерЛиста - 1, "ЧЦ=" + ЦифрВОбщемКоличествеЛистов + "; ЧН=0; ЧВН=; ЧГ=");
				Для Инд = 1 По ЦифрВОбщемКоличествеЛистов Цикл
					ТекИнд = ЦифрВОбщемКоличествеЛистов - Инд + 1;
					Попытка
						ТаблДок.Области["СоставленаНа" + ТекИнд].Значение = Сред(ВсегоЛистов, ТекИнд, 1);
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НомераЛистов = Новый СписокЗначений;
	
	НомерЛиста = 1;
	
	Для Каждого Эл Из Форма.СтруктураРеквизитовФормы.мПечатныеФормы Цикл
		
		НомЛиста = НомераЛистов.НайтиПоЗначению(Эл.Представление);
		Если НомЛиста = Неопределено Тогда
			НомЛиста = НомераЛистов.Добавить(Эл.Представление, "1");
			НЛиста = 1;
		Иначе
			НЛиста = Число(НомЛиста.Представление) + 1;
			НомЛиста.Представление = Строка(Число(НомЛиста.Представление) + 1);
		КонецЕсли;
		
		Значение = Новый Массив;
		Значение.Добавить(ПоместитьВоВременноеХранилище(Эл.Значение, Форма.УникальныйИдентификатор));
		Значение.Добавить(Форма.УникальныйИдентификатор);
		Значение.Добавить(Форма.Заголовок);
		
		СписокПечатаемыхЛистов.Добавить(Значение, Эл.Представление + ". Лист №" + НЛиста);
		
		НомерЛиста = НомерЛиста + 1;
		
	КонецЦикла;
	
	Форма.СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
КонецПроцедуры

&НаСервере
Функция НомераПервыхСтраницРаздела25иРаздела6()
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	КоличествоСтраницДоРаздела25 = 0;
	СтрокаПоиска = "Титульный лист,Раздел 1,Раздел 2.1,Раздел 2.2-2.3,Раздел 2.4";
	Для Каждого ЭлементСписка Из СтруктураРеквизитовФормы.мПечатныеФормы Цикл
		Если СтрНайти(СтрокаПоиска, ЭлементСписка.Представление) > 0 Тогда
			КоличествоСтраницДоРаздела25 = КоличествоСтраницДоРаздела25 + 1;
		КонецЕсли;
	КонецЦикла;
	НомерПервойстраницыРаздела25 = КоличествоСтраницДоРаздела25 + 1;
	НомерПервойстраницыРаздела6  = СтруктураРеквизитовФормы.мПечатныеФормы.Количество() + 1;
	
	НомераПервыхСтраниц = Новый Структура;
	НомераПервыхСтраниц.Вставить("НомерПервойстраницыРаздела25", НомерПервойстраницыРаздела25);
	НомераПервыхСтраниц.Вставить("НомерПервойстраницыРаздела6",  НомерПервойстраницыРаздела6);
	
	Возврат НомераПервыхСтраниц;
	
КонецФункции

&НаСервере
Процедура ПроставитьПредставленияИНомераЛистов(ЭтаФорма, ПризнакНумеруемыхФорм = Истина,
	СписокПечатаемыхЛистов, НомерПоследнейстраницыРаздела25, ОбщееКоличествоСтраницРаздела6)
	
	Если ПризнакНумеруемыхФорм Тогда
		
		Если ЭтаФорма.СтруктураРеквизитовФормы.мСчетчикСтраниц <> Истина Тогда
			
			НомерЛиста = 1;
			
			НумерацияИзмененаПослеРаздела25 = Ложь;
			
			ЭлементВДереве = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				ЭтаФорма.мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "Раздел25");
			
			Если ЭлементВДереве <> Неопределено Тогда
				
				Если ЭлементВДереве.ВыводНаПечать = 0 Тогда
					
					НумерацияИзмененаПослеРаздела25 = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Для Ном = 0 По ЭтаФорма.СтруктураРеквизитовФормы.мПечатныеФормы.Количество() - 1 Цикл
				
				Эл = ЭтаФорма.СтруктураРеквизитовФормы.мПечатныеФормы[Ном];
				
				Если СтрНайти(Эл.Представление, "Раздел 2.5") > 0 Тогда
					
					Если Не НумерацияИзмененаПослеРаздела25 Тогда
						
						// Сдвиг вперед в нумерации после раздела 2.5.
						НомерЛиста = НомерПоследнейстраницыРаздела25 + 1;
						НумерацияИзмененаПослеРаздела25 = Истина;
						
					КонецЕсли;
					
					Продолжить;
					
				ИначеЕсли СтрНайти(Эл.Представление, "Раздел 6") > 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если НЕ УдалосьПроставитьНомерСтраницы(Эл, НомерЛиста) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось проставить номер страницы для %1'"), Эл.Представление);
					Сообщение.Сообщить();
					
					Продолжить;
					
				КонецЕсли;
				
				НомерЛиста = НомерЛиста + 1;
				
			КонецЦикла;
			
			ЭлементВДереве = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				ЭтаФорма.мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "Раздел6");
			
			Если ЭлементВДереве <> Неопределено Тогда
				
				Если ЭлементВДереве.ВыводНаПечать = 0 Тогда
					
					ОбщееКоличествоСтраницРаздела6 = 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НомерЛиста = НомерЛиста + ОбщееКоличествоСтраницРаздела6;
			
			// Вычисление и установка значения "СоставленаНа" на Титульном листе.
			Если ЭтаФорма.СтруктураРеквизитовФормы.мПечатныеФормы.Количество() <> 0 Тогда
				ТаблДок = ЭтаФорма.СтруктураРеквизитовФормы.мПечатныеФормы.Получить(0).Значение;
				ЦифрВОбщемКоличествеЛистов = 0;
				Для ОбратныйИндекс = 1 По 9 Цикл
					Индекс = 10 - ОбратныйИндекс;
					Если ТаблДок.Области.Найти("СоставленаНа" + Индекс) <> Неопределено Тогда
						ЦифрВОбщемКоличествеЛистов = Индекс;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ВсегоЛистов = Формат(НомерЛиста - 1, "ЧЦ=" + ЦифрВОбщемКоличествеЛистов + "; ЧН=0; ЧВН=; ЧГ=");
				Для Инд = 1 По ЦифрВОбщемКоличествеЛистов Цикл
					ТекИнд = ЦифрВОбщемКоличествеЛистов - Инд + 1;
					Попытка
						ТаблДок.Области["СоставленаНа" + ТекИнд].Значение = Сред(ВсегоЛистов, ТекИнд, 1);
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НомераЛистов = Новый СписокЗначений;
	
	НомерЛиста = 1;
	
	Ном_6 = 0;
	
	Для Каждого Эл Из ЭтаФорма.СтруктураРеквизитовФормы.мПечатныеФормы Цикл
		
		НомЛиста = НомераЛистов.НайтиПоЗначению(Эл.Представление);
		Если НомЛиста = Неопределено Тогда
			НомЛиста = НомераЛистов.Добавить(Эл.Представление, "1");
			НЛиста = 1;
		Иначе
			НЛиста = Число(НомЛиста.Представление) + 1;
			НомЛиста.Представление = Строка(Число(НомЛиста.Представление) + 1);
		КонецЕсли;
		
		// Установка импортированного представления ("Описание") печатаемых листов
		// разделов 2.5 и 6 перед выводом на предварительный просмотр.
		
		Если СтрНайти(Эл.Представление, "Раздел 6") > 0 Тогда
			
			Значение = Новый Массив;
			Значение.Добавить(ПоместитьВоВременноеХранилище(Эл.Значение, ЭтаФорма.УникальныйИдентификатор));
			Значение.Добавить(ЭтаФорма.УникальныйИдентификатор);
			Значение.Добавить(ЭтаФорма.Заголовок);
			Эл.Представление = СтруктураРеквизитовФормы.ОписаниеСтраницРаздела6[Ном_6].Представление;
			Ном_6 = Ном_6 + 1;
			СписокПечатаемыхЛистов.Добавить(Значение, Эл.Представление);
			
		Иначе
			
			Значение = Новый Массив;
			Значение.Добавить(ПоместитьВоВременноеХранилище(Эл.Значение, ЭтаФорма.УникальныйИдентификатор));
			Значение.Добавить(ЭтаФорма.УникальныйИдентификатор);
			Значение.Добавить(ЭтаФорма.Заголовок);
			СписокПечатаемыхЛистов.Добавить(Значение, Эл.Представление + ". Лист №" + НЛиста);
			
		КонецЕсли;
		
		НомерЛиста = НомерЛиста + 1;
		
	КонецЦикла;
	
	ЭтаФорма.СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
КонецПроцедуры

&НаСервере
Функция УдалосьПроставитьНомерСтраницы(ТаблДок, Знач НомерЛиста)
	
	ОбластиСНомерамиЛистов = Новый СписокЗначений;
	Для Каждого Обл Из ТаблДок.Значение.Области Цикл
		Если (НЕ Тип(Обл) = Тип("РисунокТабличногоДокумента") И Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник) ИЛИ Обл.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		КрайнийПравыйСимвол = Прав(Обл.Имя, 1);
		Если Лев(ВРЕГ(Обл.Имя), 6) = "НОМСТР" И (КодСимвола(КрайнийПравыйСимвол) >= КодСимвола("0") И КодСимвола(КрайнийПравыйСимвол) <= КодСимвола("9"))Тогда
			ОбластиСНомерамиЛистов.Добавить(Обл, Обл.Имя);
		КонецЕсли;
		ОбластиСНомерамиЛистов.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	КонецЦикла;
	
	Цифры = Новый Массив;
	Для Инд = 1 По 9 Цикл
		Цифра = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
		НомерЛиста = Цел(НомерЛиста / 10);
		Если ПустаяСтрока(Цифра) Тогда
			Прервать;
		Иначе
			Цифры.Добавить(Цифра);
		КонецЕсли;
	КонецЦикла;
	
	Для Инд = 0 По ОбластиСНомерамиЛистов.Количество() - 1 Цикл
		ОбластиСНомерамиЛистов.Получить(Инд).Значение.Значение = Формат(?(Цифры.Количество() > Инд, Цифры[Инд], 0), "ЧЦ=1; ЧН=0; ЧГ=");
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматПечатиНулевыхЗначенийСтрок100и150(МакетПечФормы)
	
	СтрокаИменОбластейДляФорматирования
		= "П000100010003, П000100010004, П000100010005, П000100010006, П000100010007, П000100010008,
		  |П000100015003, П000100015004, П000100015005, П000100015006, П000100015007, П000100015008";
	
	МассивОбластейДляФорматирования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрокаИменОбластейДляФорматирования, ",");
	
	Для Каждого ИмяФорматируемойОбласти Из МассивОбластейДляФорматирования Цикл
		
		ИмяФорматируемойОбласти = СокрЛП(ИмяФорматируемойОбласти);
		
		Если МакетПечФормы.Области.Найти(ИмяФорматируемойОбласти) <> Неопределено
		   И ТабличныйДокумент.Области.Найти(ИмяФорматируемойОбласти) <> Неопределено Тогда
			
			МакетПечФормы.Области[ИмяФорматируемойОбласти].Формат
				= ТабличныйДокумент.Области[ИмяФорматируемойОбласти].Формат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	Если Парам1.ИмяСтраницы = "Раздел25" Тогда
		
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
			
			Если СтруктураРеквизитовФормы.ИмпортныеРазделы <> Неопределено Тогда
				
				МассивТаблДокументов = Новый Массив;
				
				ЗначениеИзХранилища = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.ИмпортныеРазделы);
				
				Если ЗначениеИзХранилища <> Неопределено Тогда
					
					МассивТаблДокументов = ЗначениеИзХранилища.Раздел25.СтраницыРаздела;
					
					Для Индекс = 0 По МассивТаблДокументов.Количество() - 1 Цикл
						
						МакетПечатнойФормы = МассивТаблДокументов[Индекс].ТабличныйДокумент;
						
						МакетПечатнойФормы.ПолеСверху = 5;
						МакетПечатнойФормы.ПолеСправа = 5;
						МакетПечатнойФормы.ПолеСнизу  = 5;
						МакетПечатнойФормы.ПолеСлева  = 5;
						
						ПечатнаяФорма = НоваяСтраница();
						
						ПечатнаяФорма.Вывести(МакетПечатнойФормы);
						
						СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(МакетПечатнойФормы, Парам1.НаименованиеЛиста);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ПечатныеЛистыРаздела25) Тогда
				
				СписокТаблДокументов = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы.ПечатныеЛистыРаздела25);
				
			Иначе
				
				СписокТаблДокументов = ПечатныеФормыРаздела25();
				
				СтруктураРеквизитовФормы.ПечатныеЛистыРаздела25
					= ПоместитьВоВременноеХранилище(СписокТаблДокументов, УникальныйИдентификатор);
				
			КонецЕсли;
			
			СписокТаблДокументов = ПечатныеФормыРаздела25();
			
			Для Индекс = 0 По СписокТаблДокументов.Количество() - 1 Цикл
				
				МакетПечатнойФормы = СписокТаблДокументов[Индекс].Значение;
				
				МакетПечатнойФормы.ПолеСверху = 5;
				МакетПечатнойФормы.ПолеСправа = 5;
				МакетПечатнойФормы.ПолеСнизу  = 5;
				МакетПечатнойФормы.ПолеСлева  = 5;
				
				ПечатнаяФорма = НоваяСтраница();
				
				ПечатнаяФорма.Вывести(МакетПечатнойФормы);
				
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(МакетПечатнойФормы, Парам1.НаименованиеЛиста);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", "ПечатнаяФормаОтчета2015Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",   "ПечатнаяФормаОтчета2015Кв1_Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел21",  "ПечатнаяФормаОтчета2015Кв1_Раздел21");
	СоответствиеРазделовМакетам.Вставить("Раздел22",  "ПечатнаяФормаОтчета2015Кв1_Раздел22");
	СоответствиеРазделовМакетам.Вставить("Раздел24",  "ПечатнаяФормаОтчета2015Кв1_Раздел24");
	СоответствиеРазделовМакетам.Вставить("Раздел31",  "ПечатнаяФормаОтчета2015Кв1_Раздел31");
	СоответствиеРазделовМакетам.Вставить("Раздел32",  "ПечатнаяФормаОтчета2015Кв1_Раздел32");
	СоответствиеРазделовМакетам.Вставить("Раздел4",   "ПечатнаяФормаОтчета2015Кв1_Раздел4");
	СоответствиеРазделовМакетам.Вставить("Раздел5",   "ПечатнаяФормаОтчета2015Кв1_Раздел5");
	
	ПечатнаяФормаРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетПечатнойФормы = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ПечатнаяФормаРаздела);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу  = 5;
	МакетПечатнойФормы.ПолеСлева  = 5;
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		КолвоСтрокВТаблДок = ЭтаФорма[ИдГруппы].Количество();
		
		ОбластьМнгЧасти              = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть");
		ВысотаОбластиМнгЧасти        = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть").ВысотаТаблицы;
		ИмяОбластиПоследнейДопСтроки = ОбластьМнгЧасти.ПолучитьОбласть(ВысотаОбластиМнгЧасти, ,
		 ВысотаОбластиМнгЧасти).Области[0].Имя;
		
		КолвоСтрокВПечатнойФорме = Число(
			Сред(ИмяОбластиПоследнейДопСтроки, СтрНайти(ИмяОбластиПоследнейДопСтроки, "_") + 1));
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИдГруппы];
		
		Если КолвоСтрокВТаблДок > КолвоСтрокВПечатнойФорме Тогда
			
			ПерваяКолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(0).Значение;
			
			ПоследняяКолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(
				мСтруктураКолвоКолонокРазделов[ИдГруппы] - 1).Значение;
			
			НомерВерхЯчейкиОбласти = МакетПечатнойФормы.Область(
				ПерваяКолонкаТаблицыИмя + "_" + КолвоСтрокВПечатнойФорме).Верх;
			
			НомерНижнЯчейкиОбласти = МакетПечатнойФормы.Область(
				ПоследняяКолонкаТаблицыИмя + "_" + КолвоСтрокВПечатнойФорме).Низ;
			
			ВставляемаяОбласть = МакетПечатнойФормы.Область(
				НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
			
			КолвоДопСтрок = КолвоСтрокВТаблДок - КолвоСтрокВПечатнойФорме;
			
			Для Ном = 1 По КолвоДопСтрок Цикл
				
				МакетПечатнойФормы.ВставитьОбласть(
					ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
				
			КонецЦикла;
			
			Для Ном = 0 По КолвоДопСтрок Цикл
				
				Ном_ = КолвоДопСтрок - Ном;
					
				Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(
					НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
					
					НайденнаяОбласть = МакетПечатнойФормы.Область(
						НомерВерхЯчейкиОбласти + Ном_, Область.Лево, НомерВерхЯчейкиОбласти + Ном_, Область.Право);
					
					Если НЕ НайденнаяОбласть = Неопределено Тогда 
						НайденнаяОбласть.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) + "_"
							+ Формат(КолвоСтрокВПечатнойФорме + Ном_, "ЧЦ=3");
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПечатнуюФорму(Парам1, МакетПечатнойФормы, ОбщиеРеквизитыРазделов);
	
	Если Парам1.ИмяСтраницы = "Раздел1" Тогда
		УстановитьФорматПечатиНулевыхЗначенийСтрок100и150(МакетПечатнойФормы);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
	
	Если ИдГруппы <> Неопределено Тогда
		
		// Используется нестандартный алгоритм вывода
		// на печать листов с многострочной частью.
		ВывестиНаПечатьЛистСМногострочнойЧастью(
			ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	Иначе
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
			ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистСМногострочнойЧастью(ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле, мПечатныеФормы)
	
	Перем ИмяЛиста;
	Перем Ориентация;
	Перем ВидПечати;
	Перем ИмяОбластиМногострочнойЧасти;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	СтруктураПараметровЛиста.Вставить("ВидПечати", ВидПечати);
	СтруктураПараметровЛиста.Вставить("ИмяРаздела", ИмяЛиста);
	
	Области = ТабличноеПоле.Области;
	
	ПечатнаяФорма = НоваяСтраница();
	ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("НомерСтраницы"));
	ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ОсновнаяЧасть"));
	ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Шапка"));
	
	ВерхМногострочнойЧасти = Области["Шапка"].Низ  + 1;
	НизМногострочнойЧасти  = Области["Итого"].Верх - 1;
	
	ТекущийВерх = ВерхМногострочнойЧасти;
	
	Пока ТекущийВерх <= НизМногострочнойЧасти Цикл
		
		ТекущаяОбластьМногострочнойЧасти = ТабличноеПоле.ПолучитьОбласть(ТекущийВерх,,ТекущийВерх,);
		
		Если ТекущийВерх < НизМногострочнойЧасти Тогда
			
			МассивПроверкиВывода = Новый Массив;
			
			МассивПроверкиВывода.Добавить(ТекущаяОбластьМногострочнойЧасти);
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("Итого"));
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
			
			Если ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Тогда
				
				ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
				
			Иначе
				
				МассивПроверкиВывода = Новый Массив;
				
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				
				Пока ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Цикл
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					
				КонецЦикла;
				
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				
				мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
				
				ПечатнаяФорма = НоваяСтраница();
				
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("НомерСтраницы"));
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Шапка"));
				ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
				
			КонецЕсли;
			
		Иначе // ТекущийВерх = НизМногострочнойЧасти
			
			МассивПроверкиВывода = Новый Массив;
			
			МассивПроверкиВывода.Добавить(ТекущаяОбластьМногострочнойЧасти);
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("Итого"));
			Если Области.Найти("ДополнительнаяЧасть") <> Неопределено Тогда
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ДополнительнаяЧасть"));
			КонецЕсли;
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("Сноска"));
			
			МассивПроверкиВывода_ = Новый Массив;
			
			МассивПроверкиВывода_.Добавить(ТекущаяОбластьМногострочнойЧасти);
			МассивПроверкиВывода_.Добавить(ТабличноеПоле.ПолучитьОбласть("Итого"));
			МассивПроверкиВывода_.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
			МассивПроверкиВывода_.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
			Если Области.Найти("ДополнительнаяЧасть") = Неопределено Тогда
				МассивПроверкиВывода_.Добавить(ТабличноеПоле.ПолучитьОбласть("Сноска"));
			КонецЕсли;
			
			Если ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Тогда
				
				ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Итого"));
				Если Области.Найти("ДополнительнаяЧасть") <> Неопределено Тогда
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ДополнительнаяЧасть"));
				КонецЕсли;
				МассивПроверкиВывода = Новый Массив;
				
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("Сноска"));
				
				Пока ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Цикл
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					
				КонецЦикла;
				
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Сноска"));
				
			ИначеЕсли ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода_) Тогда
				
				Если Области.Найти("ДополнительнаяЧасть") <> Неопределено Тогда
				
					ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Итого"));
					
					МассивПроверкиВывода = Новый Массив;
					
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
					
					Пока ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Цикл
						
						ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
						
					КонецЦикла;
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
					
					мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
					
					ПечатнаяФорма = НоваяСтраница();
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("НомерСтраницы"));
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ДополнительнаяЧасть"));
					
					МассивПроверкиВывода = Новый Массив;
					
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("Сноска"));
					
					Пока ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Цикл
						
						ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
						
					КонецЦикла;
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Сноска"));
					
				Иначе
					
					ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Итого"));
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Сноска"));
					
				КонецЕсли;
				
			Иначе
				
				МассивПроверкиВывода = Новый Массив;
				
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				
				Пока ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Цикл
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					
				КонецЦикла;
				
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				
				мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
				
				ПечатнаяФорма = НоваяСтраница();
				
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("НомерСтраницы"));
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Шапка"));
				ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Итого"));
				Если Области.Найти("ДополнительнаяЧасть") <> Неопределено Тогда
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ДополнительнаяЧасть"));
				КонецЕсли;
				
				МассивПроверкиВывода = Новый Массив;
				
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("Сноска"));
				
				Пока ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Цикл
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					
				КонецЦикла;
				
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Сноска"));
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийВерх = ТекущийВерх + 1;
		
	КонецЦикла;
	
	мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
	
КонецПроцедуры

&НаСервере
Функция НоваяСтраница()
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

&НаСервере
Процедура ЗалитьЛистПустымиСтроками(ТабличныйДокумент, СекцияПустаяСтрока, СекцияПодпись)
	
	МассивПроверкиВывода = Новый Массив;
	МассивПроверкиВывода.Добавить(СекцияПустаяСтрока);
	МассивПроверкиВывода.Добавить(СекцияПодпись);
	
	// Безусловный вывод в полные макеты.
	Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
		ТабличныйДокумент.Вывести(СекцияПустаяСтрока);
		ТабличныйДокумент.Вывести(СекцияПодпись);
		Возврат;
	КонецЕсли;
	
	// Заливка неполных макетов.
	Пока ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Цикл
		ТабличныйДокумент.Вывести(СекцияПустаяСтрока);
	КонецЦикла;
	ТабличныйДокумент.Вывести(СекцияПодпись);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивНомРег         = Новый Массив(14);
	МассивНомСтр         = Новый Массив(6);
	МассивДатаПодписи    = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("НомРег");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрНомРег = Область.Значение;
		
		Для Ном = 1 По СтрДлина(СтрНомРег) Цикл
			
			МассивНомРег[Ном - 1] = Сред(СтрНомРег, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("НомСтр");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивНомСтр[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ДатаПодписи.Значение) Тогда
				МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("НомРег", МассивНомРег);
	ОбщиеРеквизитыРазделов.Вставить("НомСтр", МассивНомСтр);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛистаДляРаздела25()
	
	МассивНомРег         = Новый Массив(14);
	МассивДатаПодписи    = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	НомРегЗначение = ЭтаФорма.СтруктураДанныхТитульный.НомРег;
	
	НомРегЗначение = ?(НомРегЗначение = Неопределено,
		СтруктураРеквизитовФормы.Отчет_РегистрационныйНомерПФР, НомРегЗначение);
	
	Если НЕ НомРегЗначение = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(НомРегЗначение) Цикл
			
			МассивНомРег[Ном - 1] = Сред(НомРегЗначение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДатаПодписиЗначение = ЭтаФорма.СтруктураДанныхТитульный.ДатаПодписи;
	
	Если НЕ ДатаПодписиЗначение = Неопределено Тогда
		
		ДатаПодписиЗначение = Лев(СтрЗаменить(ДатаПодписиЗначение, ".", ""), 8);
		
		Для Ном = 1 По СтрДлина(ДатаПодписиЗначение) Цикл
			
			Если ЗначениеЗаполнено(ДатаПодписиЗначение) Тогда
				МассивДатаПодписи[Ном - 1] = Сред(ДатаПодписиЗначение, Ном, 1);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("НомРег", МассивНомРег);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСтраницы = "Раздел6" Тогда
		
		МассивТаблДокументов = Новый Массив;
		
		Если СтруктураРеквизитовФормы.ИмпортныеРазделы <> Неопределено Тогда
			
			ЗначениеИзХранилища = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.ИмпортныеРазделы);
			
			Если ЗначениеИзХранилища <> Неопределено Тогда
				
				МассивТаблДокументов = ЗначениеИзХранилища.Раздел6.СтраницыРаздела;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		
		Если ИмяСтраницы = "Раздел6" Тогда
			
			Если МассивТаблДокументов.Количество() > 0 Тогда
				
				МакетПечатнойФормы = МассивТаблДокументов[ТекущийИндекс].ТабличныйДокумент;
				
				МакетПечатнойФормы.ПолеСверху = 5;
				МакетПечатнойФормы.ПолеСправа = 5;
				МакетПечатнойФормы.ПолеСнизу  = 5;
				МакетПечатнойФормы.ПолеСлева  = 5;
				
				ПечатнаяФорма = НоваяСтраница();
				
				ПечатнаяФорма.Вывести(МакетПечатнойФормы);
				
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(МакетПечатнойФормы, СтруктураПараметровСтраницы.НаименованиеЛиста);
				
			КонецЕсли;
			
		Иначе
			
			ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПечатнуюФормуРаздела25(МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Постфикс = 1;
		Разделитель = Ложь;
		Если Реквизит.Ключ = "НомРег" Тогда
			НаименованиеОбласти = "НомРег";
		ИначеЕсли Реквизит.Ключ = "ДатаПодписи" Тогда
			НаименованиеОбласти = "ДатаПодписи";
		КонецЕсли;
		
		Если НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти + Постфикс) = Неопределено Тогда
			
			Для Ном = 1 По Реквизит.Значение.Количество() Цикл
				ИмяОбласти = НаименованиеОбласти + ?(Разделитель, "_", "") + Ном;
				Если НЕ ИмяОбласти = "НомРег4" И НЕ ИмяОбласти = "НомРег8" Тогда
					МакетПечатнойФормы.Области[НаименованиеОбласти + ?(
						Разделитель, "_", "") + Ном].Значение = Реквизит.Значение[Ном - 1];
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МакетПечатнойФормы.Области["ДатаПодписиПолная"].Значение = Формат(ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'""");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
			
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "НомРег") > 0 
					  ИЛИ СтрЧислоВхождений(Область.Имя, "НомСтр") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаПодписи") > 0 Тогда
					
				    Продолжить;
					 
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ИНН") > 0 Тогда
					
					СтрИНН = Область.Значение;
				 	Если СтрДлина(СтрИНН) = 10 Тогда
						СтрИНН = СтрИНН + "--";
					КонецЕсли;

					Для Ном = 1 По СтрДлина(СтрИНН) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрИНН, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ОГРН") > 0 Тогда
					
					СтрОГРН = Область.Значение;
				 	Если СтрДлина(СтрОГРН) = 13 Тогда
						СтрОГРН = СтрОГРН + "--";
					КонецЕсли;

					Для Ном = 1 По СтрДлина(СтрОГРН) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрОГРН, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;

				ИначеЕсли СтрЧислоВхождений(Область.Имя, "Прил") > 0 Тогда
					
					СтрПрил = СокрЛП(Область.Значение);
					СтрПрил = Прав("000" + СтрПрил, 3);

					Для Ном = 1 По СтрДлина(СтрПрил) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрПрил, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "СрСписЧисл") > 0 Тогда
					
					СтрСрСписЧисл = СокрЛП(Область.Значение);
					СтрСрСписЧисл = Прав("      " + СтрСрСписЧисл, 6);

					Для Ном = 1 По СтрДлина(СтрСрСписЧисл) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрСрСписЧисл, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "КолЗастрахованных") > 0 Тогда
					
					СтрКолЗастрахованных = СокрЛП(Область.Значение);
					СтрКолЗастрахованных = Прав("      " + СтрКолЗастрахованных, 6);

					Для Ном = 1 По СтрДлина(СтрКолЗастрахованных) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрКолЗастрахованных, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "КПП") > 0
  					  ИЛИ СтрЧислоВхождений(Область.Имя, "ОКАТО") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ОтчетГод") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "СоставленаНа") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ТелОрганизации") > 0 Тогда
					  
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ОКВЭД") > 0 Тогда
					
					ЗначДляПечати = ?(ЗначениеЗаполнено(СокрЛП(Область.Значение)), СокрЛП(Область.Значение), "  .  .  ");
					
					Для Ном = 1 По СтрДлина(ЗначДляПечати) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(ЗначДляПечати, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "НомерКорректировки") > 0 Тогда
					
					ЗначениеОбласти = Формат(Область.Значение, "ЧЦ=3; ЧВН=; ЧН=");
					
					Для Ном = 1 По СтрДлина(ЗначениеОбласти) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(ЗначениеОбласти, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел21" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "П00021000100") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Сред(Область.Имя, 1, СтрДлина(Область.Имя) - 1) + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыПечати.ИмяСтраницы <> "Раздел25" Тогда
				
				Если НЕ Область.Имя = "НомерПачки" Тогда
					МакетПечатнойФормы.Области[Область.Имя].Значение = Область.Значение;
				КонецЕсли;
									
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Постфикс = 1;
		Разделитель = Ложь;
		Если Реквизит.Ключ = "НомРег" Тогда
			НаименованиеОбласти = "НомРег";
		ИначеЕсли Реквизит.Ключ = "НомСтр" Тогда
			НаименованиеОбласти = "НомСтр";
		ИначеЕсли Реквизит.Ключ = "ДатаПодписи" Тогда
			НаименованиеОбласти = "ДатаПодписи";
		Иначе
			НаименованиеОбласти = Реквизит.Ключ;
		КонецЕсли;
		
		Если НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти + Постфикс) = Неопределено Тогда
			
			Для Ном = 1 По Реквизит.Значение.Количество() Цикл
				ИмяОбласти = НаименованиеОбласти + ?(Разделитель, "_", "") + Ном;
				Если НЕ ИмяОбласти = "НомРег4" И НЕ ИмяОбласти = "НомРег8" Тогда
					МакетПечатнойФормы.Области[НаименованиеОбласти + ?(Разделитель, "_", "") + Ном].Значение
					 = Реквизит.Значение[Ном - 1];
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		УстановитьНадписиНаТитульномЛисте(МакетПечатнойФормы);
		
	Иначе
		
		МакетПечатнойФормы.Области["ДатаПодписиПолная"].Значение = Формат(ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'""");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьРеквизит(Текст, ДобСтрока, Префикс)
	
	Если ЗначениеЗаполнено(ДобСтрока) Тогда
		Текст = Текст + Префикс + ДобСтрока;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(НазванияМногостраничныхРазделовДляУдаления = "")
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(
		ЭтаФорма, НазванияМногостраничныхРазделовДляУдаления);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста,
	      РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
			
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы,
	 ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматОтображенияНулевыхЗначенийСтрок100и150()
	
	СтрокаИменОбластейДляФорматирования
		= "П000100010003, П000100010004, П000100010005, П000100010006, П000100010007, П000100010008,
		  |П000100015003, П000100015004, П000100015005, П000100015006, П000100015007, П000100015008";
	
	МассивОбластейДляФорматирования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрокаИменОбластейДляФорматирования, ",");
	
	Для Каждого ИмяФорматируемойОбласти Из МассивОбластейДляФорматирования Цикл
		УстановитьФорматОтображенияНулевогоЗначенияПоказателяСтрок100и150(СокрЛП(ИмяФорматируемойОбласти));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматОтображенияНулевогоЗначенияПоказателяСтрок100и150(ИмяОбласти, ОтражениеНуля = Неопределено)
	
	ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяОбласти];
	ИсходнаяСтрокаФормата = ФорматируемаяОбласть.Формат;
	МассивЭлементовФорматирования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ИсходнаяСтрокаФормата, ";");
	
	Для Инд = 0 По МассивЭлементовФорматирования.ВГраница() Цикл
		ЭлементФорматаБезКрайнихПробелов = СокрЛП(МассивЭлементовФорматирования[Инд]);
		Если СтрНайти(ЭлементФорматаБезКрайнихПробелов, "ЧН") = 1 Тогда
			Если ЗначениеЗаполнено(ОтражениеНуля) Тогда
				МассивЭлементовФорматирования[Инд] = "ЧН=" + ОтражениеНуля;
			Иначе
				МассивЭлементовФорматирования[Инд] = ?(ОтображатьНулевыеЗначенияСтрок100и150Цифрами(), "ЧН=", "ЧН=-");
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СобраннаяСтрокаФормата = "";
	Для Каждого ЭлементФормата Из МассивЭлементовФорматирования Цикл
		ВставлятьРазделитель = НЕ ПустаяСтрока(СобраннаяСтрокаФормата);
		СобраннаяСтрокаФормата = СобраннаяСтрокаФормата + ?(ВставлятьРазделитель, ";", "")+ ЭлементФормата;
	КонецЦикла;
	
	ФорматируемаяОбласть.Формат = СобраннаяСтрокаФормата;
	
КонецПроцедуры

&НаСервере
Функция ОтображатьНулевыеЗначенияСтрок100и150Цифрами()

	ЗначениеПоУмолчанию = Ложь;

	Если ТипЗнч(СтруктураРеквизитовФормы.НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами) <> Тип("Булево") Тогда
		СтруктураРеквизитовФормы.НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат СтруктураРеквизитовФормы.НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами;

КонецФункции

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ТаблицаСтраницРаздела21 = Новый ТаблицаЗначений;
	ТаблицаСтраницРаздела21.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(254)));
	ТаблицаСтраницРаздела21.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ТаблицаСтраницРаздела21.Колонки.Добавить("Данные", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаСтраницРаздела21.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрТаблЗнач Из ТаблицаСтраницыРазделаРаздел21 Цикл
		
		Стр = ТаблицаСтраницРаздела21.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		СтрокаСписка = Новый СписокЗначений();
		СтрокаСписка.Вставить(0, СтрТаблЗнач.Данные[0].Значение);
		Стр.Данные = СтрокаСписка;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	ТаблицаСтраницРаздела24 = Новый ТаблицаЗначений;
	ТаблицаСтраницРаздела24.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(254)));
	ТаблицаСтраницРаздела24.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ТаблицаСтраницРаздела24.Колонки.Добавить("Данные", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаСтраницРаздела24.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрТаблЗнач Из ТаблицаСтраницыРазделаРаздел24 Цикл
		
		Стр = ТаблицаСтраницРаздела24.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		СтрокаСписка = Новый СписокЗначений();
		СтрокаСписка.Вставить(0, СтрТаблЗнач.Данные[0].Значение);
		Стр.Данные = СтрокаСписка;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
	Контейнер.Вставить("Раздел1",   СтруктураДанныхРаздел1);
	Контейнер.Вставить("Раздел21",  ТаблицаСтраницРаздела21);
	Контейнер.Вставить("Раздел22",  СтруктураДанныхРаздел22);
	Контейнер.Вставить("Раздел24",  ТаблицаСтраницРаздела24);
	Контейнер.Вставить("Раздел31",  СтруктураДанныхРаздел31);
	Контейнер.Вставить("Раздел32",  СтруктураДанныхРаздел32);
	Контейнер.Вставить("Раздел4",   СтруктураДанныхРаздел4);
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок",  ДанныеФормыВЗначение(П0004000001, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел5",   СтруктураДанныхРаздел5);
	Контейнер.Вставить("Раздел5_ДанныеДопСтрок",  ДанныеФормыВЗначение(П0005000001, Тип("ТаблицаЗначений")));
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ЭтаФормаИмя = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ЭтаФормаИмя, Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета, Контейнер);
	
	ЭтаФорма.ТаблицаСтраницыРазделаРаздел21.Очистить();
	
	Для Каждого СтрТаблЗнач Из Контейнер.Раздел21 Цикл
		
		Стр = ТаблицаСтраницыРазделаРаздел21.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		Стр.Данные.Вставить(0, СтрТаблЗнач.Данные[0].Значение);
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	ЭтаФорма.ТаблицаСтраницыРазделаРаздел24.Очистить();
	
	Для Каждого СтрТаблЗнач Из Контейнер.Раздел24 Цикл
		
		Стр = ТаблицаСтраницыРазделаРаздел24.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		Стр.Данные.Вставить(0, СтрТаблЗнач.Данные[0].Значение);
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Контейнер.Раздел4_ДанныеДопСтрок,  ЭтаФорма.П0004000001);
	ЗначениеВДанныеФормы(Контейнер.Раздел5_ДанныеДопСтрок,  ЭтаФорма.П0005000001);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если П0004000001.Количество() = 0 Тогда
		П0004000001.Добавить();
	КонецЕсли;
	
	Если П0005000001.Количество() = 0 Тогда
		П0005000001.Добавить();
	КонецЕсли;
	
	ОбновитьСтруктуруДанныхМногострочныхРазделов();
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	СтруктураРеквизитовФормы.ДанныеОтчетаИзмененыВручную = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруДанныхМногострочныхРазделов()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.МногострочностьВРазделе.Количество() > 0 Тогда
			
			ВывестиМакетВТаблДокНаСервере(Раздел.ИмяСтраницы, 0);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина,
	                          ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		  <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ВыгружатьСОшибками) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ВыгружатьСОшибками = Ложь)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ВыгрузкаВозможна = ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Если НЕ ВыгружатьСОшибками И НЕ ВыгрузкаВозможна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	ВыгрузкаВозможна = ПроверитьДанные(ДеревоВыгрузки);
	
	Если НЕ ВыгружатьСОшибками И НЕ ВыгрузкаВозможна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СодержаниеВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгрузки.Добавить(Новый Структура("Текст,ИмяФайла", СодержаниеВыгрузки, ПараметрыВыгрузки.ИмяФайла));
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела6) Тогда
		
		Пачки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела6).Пачки;
		
		Если Пачки <> Неопределено Тогда
			
			КаталогВремФайлов = КаталогВременныхФайлов();
			
			Для Каждого Пачка Из Пачки Цикл
				
				ФайлВыгрузки = КаталогВремФайлов + Пачка.ИмяФайла;
				ФайлВыгрузкиДвоичныеДанные = Пачка.ФайлДвоичныеДанные;
				ФайлВыгрузкиДвоичныеДанные.Записать(ФайлВыгрузки);
				
				ФайлСведений = Новый ТекстовыйДокумент();
				ФайлСведений.Прочитать(ФайлВыгрузки, "windows-1251");
				
				ТекстПачки = Новый Структура("Текст,ИмяФайла");
				ТекстПачки.Текст    = ФайлСведений.ПолучитьТекст();
				ТекстПачки.ИмяФайла = Пачка.ИмяФайла;
				ТекстВыгрузки.Добавить(ТекстПачки);
				
				УдалитьВременныйФайл(ФайлВыгрузки);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьОтчет()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено; // Обход ошибки в платформе.
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ФормаВыгрузкиРеглОтчета", ФормаВыгрузкиРеглОтчета);
		ДополнительныеПараметры.Вставить("СпДокОсн", СпДокОсн);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершениеПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
		
	Иначе
		
		ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершениеПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		
		ДополнительныеПараметры.ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(ДополнительныеПараметры.СпДокОсн,,,,,,,, Ложь);
		
	Иначе
		
		ДополнительныеПараметры.ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(ДополнительныеПараметры.СпДокОсн);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ВРег(ЗначениеПоказателя));
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
			СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.; ЧН=; ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "D" Тогда
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy"));
		Иначе
			Узел.Значение = "";
		КонецЕсли;
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251");
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();

	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСтрокуМногострочнойЧасти(
	Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено, ВыгружатьПустую = Ложь)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = "_" + Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрИсключения.Свойство(Стр.Ключ)
			И ЗначениеПоказателяЗаполнено(Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая ИЛИ ВыгружатьПустую Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ВывестиПоказательВXML(Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруПараметров(ПараметрыВыгрузки, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("ФайлПФР");
		ПотокXML.ЗаписатьАтрибут("xmlns", "http://schema.pfr.ru");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаполненЛистРаздела24(ДанныеЛиста)
	
	Результат = Ложь;
	
	Для Каждого Показатель Из ДанныеЛиста Цикл
		Если СтрНайти(Показатель.Ключ, "П00024") = 1 Тогда
			Если ЗначениеЗаполнено(Показатель.Значение) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел31()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел31;
	
	Результат = Ложь;
	
	Для НомерСтроки = 341 По 345 Цикл
		Для НомерГрафы = 3 По 4 Цикл
			ИмяОбласти = "П0003400" + НомерСтроки + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			Результат = (Результат ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбласти]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел32()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	
	Результат = ЗначениеЗаполнено(ДанныеРаздела.П000360036103)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000360036203)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000360036303);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел33()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	
	Результат = Ложь;
	
	Для НомерСтроки = 371 По 375 Цикл
		Для НомерГрафы = 3 По 4 Цикл
			ИмяОбласти = "П0003700" + НомерСтроки + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			Результат = (Результат ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбласти]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел4()
	
	Результат = Ложь;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	
	П000400000101 = Неопределено;
	П000400000102 = Неопределено;
	П000400000103 = Неопределено;
	П000400000104 = Неопределено;
	П000400000105 = Неопределено;
	П000400000106 = Неопределено;
	П000400000107 = Неопределено;
	П000400000108 = Неопределено;
	П000400000109 = Неопределено;
	П000400000110 = Неопределено;
	П000400000111 = Неопределено;
	П000400000112 = Неопределено;
	П000400000113 = Неопределено;
	П000400000114 = Неопределено;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000400000102_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		ДанныеРаздела.Свойство("П000400000101_" + НомерСтроки, П000400000101);
		ДанныеРаздела.Свойство("П000400000102_" + НомерСтроки, П000400000102);
		ДанныеРаздела.Свойство("П000400000103_" + НомерСтроки, П000400000103);
		ДанныеРаздела.Свойство("П000400000104_" + НомерСтроки, П000400000104);
		ДанныеРаздела.Свойство("П000400000105_" + НомерСтроки, П000400000105);
		ДанныеРаздела.Свойство("П000400000106_" + НомерСтроки, П000400000106);
		ДанныеРаздела.Свойство("П000400000107_" + НомерСтроки, П000400000107);
		ДанныеРаздела.Свойство("П000400000108_" + НомерСтроки, П000400000108);
		ДанныеРаздела.Свойство("П000400000109_" + НомерСтроки, П000400000109);
		ДанныеРаздела.Свойство("П000400000110_" + НомерСтроки, П000400000110);
		ДанныеРаздела.Свойство("П000400000111_" + НомерСтроки, П000400000111);
		ДанныеРаздела.Свойство("П000400000112_" + НомерСтроки, П000400000112);
		ДанныеРаздела.Свойство("П000400000113_" + НомерСтроки, П000400000113);
		ДанныеРаздела.Свойство("П000400000114_" + НомерСтроки, П000400000114);
		
		Если ЗначениеЗаполнено(П000400000101) ИЛИ ЗначениеЗаполнено(П000400000102)
		 ИЛИ ЗначениеЗаполнено(П000400000103) ИЛИ ЗначениеЗаполнено(П000400000104)
		 ИЛИ ЗначениеЗаполнено(П000400000105) ИЛИ ЗначениеЗаполнено(П000400000106)
		 ИЛИ ЗначениеЗаполнено(П000400000107) ИЛИ ЗначениеЗаполнено(П000400000108)
		 ИЛИ ЗначениеЗаполнено(П000400000109) ИЛИ ЗначениеЗаполнено(П000400000110)
		 ИЛИ ЗначениеЗаполнено(П000400000111) ИЛИ ЗначениеЗаполнено(П000400000112)
		 ИЛИ ЗначениеЗаполнено(П000400000113) ИЛИ ЗначениеЗаполнено(П000400000114) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	Результат = Результат
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000206)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000207)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000208)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000209)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000210)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000211)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000212)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000213)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000214);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел5()
	
	Результат = Ложь;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел5;
	
	НомерПП = Неопределено;
	ФИОСтудента = Неопределено;
	НомерСправкиСО = Неопределено;
	ДатаСправкиСО = Неопределено;
	НомерСправкиОФО = Неопределено;
	ДатаСправкиОФО = Неопределено;
	СуммаВсего    = Неопределено;
	Сумма1Месяц   = Неопределено;
	Сумма2Месяц   = Неопределено;
	Сумма3Месяц   = Неопределено;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000500000120_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000500000110_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000500000120_" + НомерСтроки, ФИОСтудента);
		ДанныеРаздела.Свойство("П000500000131_" + НомерСтроки, НомерСправкиСО);
		ДанныеРаздела.Свойство("П000500000132_" + НомерСтроки, ДатаСправкиСО);
		ДанныеРаздела.Свойство("П000500000141_" + НомерСтроки, НомерСправкиОФО);
		ДанныеРаздела.Свойство("П000500000142_" + НомерСтроки, ДатаСправкиОФО);
		ДанныеРаздела.Свойство("П000500000150_" + НомерСтроки, СуммаВсего);
		ДанныеРаздела.Свойство("П000500000160_" + НомерСтроки, Сумма1Месяц);
		ДанныеРаздела.Свойство("П000500000170_" + НомерСтроки, Сумма2Месяц);
		ДанныеРаздела.Свойство("П000500000180_" + НомерСтроки, Сумма3Месяц);
		
		Если ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(ФИОСтудента)
		 ИЛИ ЗначениеЗаполнено(НомерСправкиСО) ИЛИ ЗначениеЗаполнено(ДатаСправкиСО)
		 ИЛИ ЗначениеЗаполнено(НомерСправкиОФО) ИЛИ ЗначениеЗаполнено(ДатаСправкиОФО)
		 ИЛИ ЗначениеЗаполнено(СуммаВсего) ИЛИ ЗначениеЗаполнено(Сумма1Месяц)
		 ИЛИ ЗначениеЗаполнено(Сумма2Месяц) ИЛИ ЗначениеЗаполнено(Сумма3Месяц) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	Результат = Результат
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500000250)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500000260)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500000270)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500000280)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501103)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501104)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501204)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501203)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501304)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501303)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501403)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501404);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда
			Если СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти")
			   И ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти = Стр.Код Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(ПараметрыВыгрузки, Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзелРаздела25(Узел_Раздел_2_5)
	
	// Получение данных для заполнения узлов подразделов 2.5.1 и 2.5.2 раздела 2.5.
	
	Таблица_2_5_1 = Новый ТаблицаЗначений;
	Таблица_2_5_1.Колонки.Добавить("П000251000102", Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(15, 2)));
	Таблица_2_5_1.Колонки.Добавить("П000251000103", Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(15, 2)));
	Таблица_2_5_1.Колонки.Добавить("П000251000104", Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла( 3, 0)));
	Таблица_2_5_1.Колонки.Добавить("П000251000105", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	
	Таблица_2_5_2 = Новый ТаблицаЗначений;
	Таблица_2_5_2.Колонки.Добавить("П000252000102", Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла( 1, 0)));
	Таблица_2_5_2.Колонки.Добавить("П000252000103", Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла( 4, 0)));
	Таблица_2_5_2.Колонки.Добавить("П000252000104", Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(15, 2)));
	Таблица_2_5_2.Колонки.Добавить("П000252000105", Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(15, 2)));
	Таблица_2_5_2.Колонки.Добавить("П000252000106", Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(15, 2)));
	Таблица_2_5_2.Колонки.Добавить("П000252000107", Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла( 3, 0)));
	Таблица_2_5_2.Колонки.Добавить("П000252000108", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	
	// В зависимости от местонахождения данных перс. учета (в текущей или во
	// "внешней" программе), предусмотрены два сценария заполнения раздела 2.5.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25) Тогда
		
		// Заполнение раздела 2.5 импортируемыми данными.
		СтруктураДанныхРаздела25 = Новый Структура;
		СтруктураДанныхРаздела25.Вставить("Таблица_2_5_1", Таблица_2_5_1);
		СтруктураДанныхРаздела25.Вставить("Таблица_2_5_2", Таблица_2_5_2);
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьДанныеДляВыгрузкиРаздела25РСВ_1(
			СтруктураРеквизитовФормы.мСохраненныйДок, СтруктураДанныхРаздела25);
		
		СтруктураДанныхРаздела25.Свойство("Таблица_2_5_1", Таблица_2_5_1);
		СтруктураДанныхРаздела25.Свойство("Таблица_2_5_2", Таблица_2_5_2);
		
	Иначе
		
		// Заполнение раздела 2.5 данными "внешней" программы ведения перс. учета.
		Массив_2_5_1 = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25).ПачкиИсходные;
		
		Массив_2_5_2 = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.ВнешниеСведенияРаздела25).ПачкиКорректирующие;
		
		Для НомИндекса = 0 По Массив_2_5_1.Количество() - 1 Цикл
			
			СтрокаТаблицы_2_5_1 = Таблица_2_5_1.Добавить();
			
			СтрокаТаблицы_2_5_1.П000251000102
				= Массив_2_5_1[НомИндекса].БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную;
			СтрокаТаблицы_2_5_1.П000251000103 = Массив_2_5_1[НомИндекса].СтраховыхВзносовОПС;
			СтрокаТаблицы_2_5_1.П000251000104 = Массив_2_5_1[НомИндекса].КоличествоЗЛвПачке;
			СтрокаТаблицы_2_5_1.П000251000105 = Массив_2_5_1[НомИндекса].ИмяФайла;
			
		КонецЦикла;
		
		Для НомИндекса = 0 По Массив_2_5_2.Количество() - 1 Цикл
			
			СтрокаТаблицы_2_5_2 = Таблица_2_5_2.Добавить();
			
			СтрокаТаблицы_2_5_2.П000252000102 = Массив_2_5_2[НомИндекса].Квартал;
			СтрокаТаблицы_2_5_2.П000252000103 = Массив_2_5_2[НомИндекса].Год;
			СтрокаТаблицы_2_5_2.П000252000104 = Массив_2_5_2[НомИндекса].ДоначисленоСтраховыхВзносовОПС;
			СтрокаТаблицы_2_5_2.П000252000105 = Массив_2_5_2[НомИндекса].ДоначисленоНаСтраховуюЧасть;
			СтрокаТаблицы_2_5_2.П000252000106 = Массив_2_5_2[НомИндекса].ДоначисленоНаНакопительнуюЧасть;
			СтрокаТаблицы_2_5_2.П000252000107 = Массив_2_5_2[НомИндекса].КоличествоЗЛвПачке;
			СтрокаТаблицы_2_5_2.П000252000108 = Массив_2_5_2[НомИндекса].ИмяФайла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполнение узлов подразделов 2.5.1 и 2.5.2 полученными данными.
	
	// Заполнение узла подраздела 2.5.1.
	Если Таблица_2_5_1.Количество() > 0 Тогда
		
		Узел_ПереченьПачекИсходныхСведенийПУ = ПолучитьПодчиненныйЭлемент(
			Узел_Раздел_2_5, "ПереченьПачекИсходныхСведенийПУ");
		
		ПрототипУзла_СведенияОпачкеИсходных = ПолучитьПодчиненныйЭлемент(
			Узел_ПереченьПачекИсходныхСведенийПУ, "СведенияОпачкеИсходных");
		
		ЧислоВыгруженныхСтрок = 0;
		
		Для НомИндекса = 0 По Таблица_2_5_1.Количество() - 1 Цикл
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			
			Узел_СведенияОпачкеИсходных = НовыйУзелИзПрототипа(ПрототипУзла_СведенияОпачкеИсходных);
			ЗадатьЗначениеЭлемента(Узел_СведенияОпачкеИсходных, "НомерПП",
				НомИндекса + 1);
			ЗадатьЗначениеЭлемента(Узел_СведенияОпачкеИсходных, "БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную",
				Таблица_2_5_1[НомИндекса].П000251000102);
			ЗадатьЗначениеЭлемента(Узел_СведенияОпачкеИсходных, "СтраховыхВзносовОПС",
				Таблица_2_5_1[НомИндекса].П000251000103);
			ЗадатьЗначениеЭлемента(Узел_СведенияОпачкеИсходных, "КоличествоЗЛвПачке",
				Таблица_2_5_1[НомИндекса].П000251000104);
			ЗадатьЗначениеЭлемента(Узел_СведенияОпачкеИсходных, "ИмяФайла",
				Таблица_2_5_1[НомИндекса].П000251000105);
			
		КонецЦикла;
		
		Если ЧислоВыгруженныхСтрок > 0 Тогда
			РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведенияОпачкеИсходных);
		КонецЕсли;
		
		ЗадатьЗначениеЭлемента(Узел_ПереченьПачекИсходныхСведенийПУ, "КоличествоПачек",
			Таблица_2_5_1.Количество());
		
		Узел_ИтогоСведенияПоПачкам = ПолучитьПодчиненныйЭлемент(
			Узел_ПереченьПачекИсходныхСведенийПУ, "ИтогоСведенияПоПачкам");
		ЗадатьЗначениеЭлемента(Узел_ИтогоСведенияПоПачкам, "БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную",
			Таблица_2_5_1.Итог("П000251000102"));
		ЗадатьЗначениеЭлемента(Узел_ИтогоСведенияПоПачкам, "СтраховыхВзносовОПС",
			Таблица_2_5_1.Итог("П000251000103"));
		ЗадатьЗначениеЭлемента(Узел_ИтогоСведенияПоПачкам, "КоличествоЗЛвПачке",
			Таблица_2_5_1.Итог("П000251000104"));
		
	КонецЕсли;
	
	// Заполнение узла подраздела 2.5.2.
	Если Таблица_2_5_2.Количество() > 0 Тогда
		
		Узел_ПереченьПачекКорректирующихСведенийПУ = ПолучитьПодчиненныйЭлемент(
			Узел_Раздел_2_5, "ПереченьПачекКорректирующихСведенийПУ");
		
		ПрототипУзла_СведенияОпачкеКорректирующих = ПолучитьПодчиненныйЭлемент(
			Узел_ПереченьПачекКорректирующихСведенийПУ, "СведенияОпачкеКорректирующих");
		
		ЧислоВыгруженныхСтрок = 0;
		
		ИтогоДоначисленоСтраховыхВзносовОПС  = 0;
		ИтогоДоначисленоНаСтраховуюЧасть     = 0;
		ИтогоДоначисленоНаНакопительнуюЧасть = 0;
		
		Для НомИндекса = 0 По Таблица_2_5_2.Количество() - 1 Цикл
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			
			ГодКорректировкиСведений = Таблица_2_5_2[НомИндекса].П000252000103;
			
			Узел_СведенияОпачкеКорректирующих = НовыйУзелИзПрототипаРаздел252(
				ПрототипУзла_СведенияОпачкеКорректирующих, ГодКорректировкиСведений);
			ЗадатьЗначениеЭлемента(Узел_СведенияОпачкеКорректирующих, "НомерПП",
				НомИндекса + 1);
			Если ГодКорректировкиСведений >= 2014 Тогда
				ЗадатьЗначениеЭлемента(Узел_СведенияОпачкеКорректирующих, "ДоначисленоСтраховыхВзносовОПС",
					Таблица_2_5_2[НомИндекса].П000252000104);
				ИтогоДоначисленоСтраховыхВзносовОПС = ИтогоДоначисленоСтраховыхВзносовОПС
													+ Таблица_2_5_2[НомИндекса].П000252000104;
			КонецЕсли;
			Если ГодКорректировкиСведений < 2014 Тогда
				ЗадатьЗначениеЭлемента(Узел_СведенияОпачкеКорректирующих, "ДоначисленоНаСтраховуюЧасть",
					Таблица_2_5_2[НомИндекса].П000252000105);
				ИтогоДоначисленоНаСтраховуюЧасть = ИтогоДоначисленоНаСтраховуюЧасть
												 + Таблица_2_5_2[НомИндекса].П000252000105;
				ЗадатьЗначениеЭлемента(Узел_СведенияОпачкеКорректирующих, "ДоначисленоНаНакопительнуюЧасть",
					Таблица_2_5_2[НомИндекса].П000252000106);
				ИтогоДоначисленоНаНакопительнуюЧасть = ИтогоДоначисленоНаНакопительнуюЧасть
													 + Таблица_2_5_2[НомИндекса].П000252000106;
			КонецЕсли;
			ЗадатьЗначениеЭлемента(Узел_СведенияОпачкеКорректирующих, "КоличествоЗЛвПачке",
				Таблица_2_5_2[НомИндекса].П000252000107);
			ЗадатьЗначениеЭлемента(Узел_СведенияОпачкеКорректирующих, "ИмяФайла",
				Таблица_2_5_2[НомИндекса].П000252000108);
			
			Узел_КорректируемыйОтчетныйПериод = ПолучитьПодчиненныйЭлемент(
				Узел_СведенияОпачкеКорректирующих, "КорректируемыйОтчетныйПериод");
			ЗадатьЗначениеЭлемента(Узел_КорректируемыйОтчетныйПериод, "Квартал",
				Таблица_2_5_2[НомИндекса].П000252000102);
			ЗадатьЗначениеЭлемента(Узел_КорректируемыйОтчетныйПериод, "Год",
				Таблица_2_5_2[НомИндекса].П000252000103);
			
		КонецЦикла;
		
		Если ЧислоВыгруженныхСтрок > 0 Тогда
			РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведенияОпачкеКорректирующих);
		КонецЕсли;
		
		ЗадатьЗначениеЭлемента(Узел_ПереченьПачекКорректирующихСведенийПУ, "КоличествоПачек",
			Таблица_2_5_2.Количество());
		
		Узел_ИтогоСведенияПоПачкамКорректирующих = ПолучитьПодчиненныйЭлемент(
			Узел_ПереченьПачекКорректирующихСведенийПУ, "ИтогоСведенияПоПачкамКорректирующих");
		ЗадатьЗначениеЭлемента(Узел_ИтогоСведенияПоПачкамКорректирующих, "ДоначисленоСтраховыхВзносовОПС",
			ИтогоДоначисленоСтраховыхВзносовОПС);
		ЗадатьЗначениеЭлемента(Узел_ИтогоСведенияПоПачкамКорректирующих, "ДоначисленоНаСтраховуюЧасть",
			ИтогоДоначисленоНаСтраховуюЧасть);
		ЗадатьЗначениеЭлемента(Узел_ИтогоСведенияПоПачкамКорректирующих, "ДоначисленоНаНакопительнуюЧасть",
			ИтогоДоначисленоНаНакопительнуюЧасть);
		ЗадатьЗначениеЭлемента(Узел_ИтогоСведенияПоПачкамКорректирующих, "КоличествоЗЛвПачке",
			Таблица_2_5_2.Итог("П000252000107"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(ПараметрыВыгрузки, УзелРодитель)
	
	Раздел1   = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел21  = мДанныеОтчета.Раздел21;
	Раздел22  = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	Раздел24  = мДанныеОтчета.Раздел24;
	Раздел31  = мДанныеОтчета.ПолеТабличногоДокументаРаздел31;
	Раздел32  = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	Раздел4   = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	Раздел5   = мДанныеОтчета.ПолеТабличногоДокументаРаздел5;
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "НаименованиеОрганизации"));
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "КПП"));
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "ФИОфизическогоЛица"));
	КонецЕсли;
	
	Узел_Раздел1РасчетПоНачисленнымУплаченным2014 = ПолучитьПодчиненныйЭлемент(
		УзелРодитель, "Раздел1РасчетПоНачисленнымУплаченным2014");
	ЗаполнитьДаннымиУзел(Раздел1, Узел_Раздел1РасчетПоНачисленнымУплаченным2014);
	
	Узел_Раздел2РасчетПоТарифуИдопТарифу = ПолучитьПодчиненныйЭлемент(
		УзелРодитель, "Раздел2РасчетПоТарифуИдопТарифу");
	
	ПрототипУзла_Раздел_2_1 = ПолучитьПодчиненныйЭлемент(Узел_Раздел2РасчетПоТарифуИдопТарифу, "Раздел_2_1");
	
	Для Каждого ЛистРаздела21 Из Раздел21 Цикл
		Узел_Раздел_2_1 = НовыйУзелИзПрототипа(ПрототипУзла_Раздел_2_1);
		ЗаполнитьДаннымиУзел(ЛистРаздела21.Данные[0].Значение, Узел_Раздел_2_1);
		КодТарифа = СокрЛП(ЛистРаздела21.Данные[0].Значение.П000210001001);
		ЗадатьЗначениеЭлемента(Узел_Раздел_2_1, "КодТарифа", КодТарифа);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Раздел_2_1);
	
	Узел_Раздел_2_2 = ПолучитьПодчиненныйЭлемент(Узел_Раздел2РасчетПоТарифуИдопТарифу, "Раздел_2_2");
	ЗаполнитьДаннымиУзел(Раздел22, Узел_Раздел_2_2);
	
	Узел_Раздел_2_3 = ПолучитьПодчиненныйЭлемент(Узел_Раздел2РасчетПоТарифуИдопТарифу, "Раздел_2_3");
	ЗаполнитьДаннымиУзел(Раздел22, Узел_Раздел_2_3);
	
	ПрототипУзла_Раздел_2_4 = ПолучитьПодчиненныйЭлемент(Узел_Раздел2РасчетПоТарифуИдопТарифу, "Раздел_2_4");
	Для Каждого ЛистРаздела24 Из Раздел24 Цикл
		Узел_Раздел_2_4 = НовыйУзелИзПрототипа(ПрототипУзла_Раздел_2_4);
		ЗаполнитьДаннымиУзел(ЛистРаздела24.Данные[0].Значение, Узел_Раздел_2_4);
		
		Основание = "";
		Если ЗначениеЗаполнено(ЛистРаздела24.Данные[0].Значение.П000240002001) Тогда
			Основание = "РЕЗУЛЬТАТЫ СПЕЦОЦЕНКИ";
		ИначеЕсли ЗначениеЗаполнено(ЛистРаздела24.Данные[0].Значение.П000240002002) Тогда
			Основание = "РЕЗУЛЬТАТЫ АТТЕСТАЦИИ РАБОЧИХ МЕСТ";
		ИначеЕсли ЗначениеЗаполнено(ЛистРаздела24.Данные[0].Значение.П000240002003) Тогда
			Основание = "РЕЗУЛЬТАТЫ СПЕЦОЦЕНКИ И РЕЗУЛЬТАТЫ АТТЕСТАЦИИ РАБОЧИХ МЕСТ";
		КонецЕсли;
		ЗадатьЗначениеЭлемента(Узел_Раздел_2_4, "ОснованиеЗаполненияРаздела2_4", Основание);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Раздел_2_4);
	
	Узел_Раздел_2_5 = ПолучитьПодчиненныйЭлемент(Узел_Раздел2РасчетПоТарифуИдопТарифу, "Раздел_2_5");
	ЗаполнитьДаннымиУзелРаздела25(Узел_Раздел_2_5);
	
	Узел_Раздел3РасчетНаПравоПримененияПониженногоТарифа2015 = ПолучитьПодчиненныйЭлемент(
		УзелРодитель, "Раздел3РасчетНаПравоПримененияПониженногоТарифа2015");
	
	Узел_Раздел3_3_ДляОрганизацийИТ = ПолучитьПодчиненныйЭлемент(
		Узел_Раздел3РасчетНаПравоПримененияПониженногоТарифа2015, "Раздел3_3_ДляОрганизацийИТ");
	ЗаполнитьДаннымиУзел(Раздел31, Узел_Раздел3_3_ДляОрганизацийИТ);
	
	Узел_Раздел3_5_ДляОрганизацийПрименяющихУСН = ПолучитьПодчиненныйЭлемент(
		Узел_Раздел3РасчетНаПравоПримененияПониженногоТарифа2015, "Раздел3_5_ДляОрганизацийПрименяющихУСН");
	ЗаполнитьДаннымиУзел(Раздел32, Узел_Раздел3_5_ДляОрганизацийПрименяющихУСН);
	
	Узел_Раздел3_6_ДляНекоммерческихОрганизацийПрименяющихУСН = ПолучитьПодчиненныйЭлемент(
		Узел_Раздел3РасчетНаПравоПримененияПониженногоТарифа2015, "Раздел3_6_ДляНекоммерческихОрганизацийПрименяющихУСН");
	ЗаполнитьДаннымиУзел(Раздел32, Узел_Раздел3_6_ДляНекоммерческихОрганизацийПрименяющихУСН);
	
	Узел_Раздел4 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "Раздел4");
	ЗаполнитьДаннымиУзел(Раздел4, Узел_Раздел4);
	
	ПрототипУзла_СуммаДоначисленныхВзносовЗаПериодНачинаяС2014 = ПолучитьПодчиненныйЭлемент(
		Узел_Раздел4, "СуммаДоначисленныхВзносовЗаПериодНачинаяС2014");
	НомСтр = 1;
	ЧислоВыгруженныхСтрок = 0;
	Пока СвойствоОпределено(Раздел4, "П000400000102_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(Раздел4["П000400000102_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			
			Узел_СуммаДоначисленныхВзносовЗаПериодНачинаяС2014 = НовыйУзелИзПрототипа(
				ПрототипУзла_СуммаДоначисленныхВзносовЗаПериодНачинаяС2014);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел4, Узел_СуммаДоначисленныхВзносовЗаПериодНачинаяС2014, НомСтр);
			
			ЗадатьЗначениеЭлемента(Узел_СуммаДоначисленныхВзносовЗаПериодНачинаяС2014, "НомерПП", ЧислоВыгруженныхСтрок);
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
	КонецЦикла;
	Если ЧислоВыгруженныхСтрок > 0 Тогда
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СуммаДоначисленныхВзносовЗаПериодНачинаяС2014);
	КонецЕсли;
	
	Узел_Раздел5СведенияОВыплатахВпользуОбучающихся2014 = ПолучитьПодчиненныйЭлемент(
		УзелРодитель, "Раздел5СведенияОВыплатахВпользуОбучающихся2014");
	ЗаполнитьДаннымиУзел(Раздел5, Узел_Раздел5СведенияОВыплатахВпользуОбучающихся2014);
	
	ПрототипУзла_СведенияОбОбучающемся = ПолучитьПодчиненныйЭлемент(
		Узел_Раздел5СведенияОВыплатахВпользуОбучающихся2014, "СведенияОбОбучающемся");
	НомСтр = 1;
	ЧислоВыгруженныхСтрок = 0;
	Пока СвойствоОпределено(Раздел5, "П000500000120_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(Раздел5["П000500000120_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			
			Узел_СведенияОбОбучающемся = НовыйУзелИзПрототипа(ПрототипУзла_СведенияОбОбучающемся);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел5, Узел_СведенияОбОбучающемся, НомСтр);
			
			УзелФИО = ПолучитьПодчиненныйЭлемент(Узел_СведенияОбОбучающемся, "ФИО");
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ВРЕГ(Раздел5["П000500000120_" + Формат(НомСтр, "ЧГ=")]));
			
			ЗадатьЗначениеЭлемента(УзелФИО, "Фамилия",  ФИО.Фамилия);
			ЗадатьЗначениеЭлемента(УзелФИО, "Имя",      ФИО.Имя);
			ЗадатьЗначениеЭлемента(УзелФИО, "Отчество", ФИО.Отчество);
			
			Узел_СуммыВыплатИвознаграждений = ПолучитьПодчиненныйЭлемент(
				Узел_СведенияОбОбучающемся, "СуммыВыплатИвознаграждений");
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел5, Узел_СуммыВыплатИвознаграждений, НомСтр, , Истина);
			
			ЗадатьЗначениеЭлемента(Узел_СведенияОбОбучающемся, "НомерПП", ЧислоВыгруженныхСтрок);
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
	КонецЦикла;
	Если ЧислоВыгруженныхСтрок > 0 Тогда
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведенияОбОбучающемся);
	КонецЕсли;
	
	ЗадатьЗначениеЭлемента(
		Узел_Раздел5СведенияОВыплатахВпользуОбучающихся2014, "КоличествоОбучающихся", ЧислоВыгруженныхСтрок);
	
КонецПроцедуры

&НаСервере
Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10
		 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя),
	 ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя "
			+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + " меньше минимально возможной (" + ДлинаЗначения + " < "
			+ Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя "
			+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + " больше максимально возможной (" + ДлинаЗначения + " > "
			+ Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки700_2015");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		НомСтр = ВысотаТаблицы - НомерСтроки + 2;
		Если Макет.Область(НомерСтроки, 0, НомерСтроки, 0).Видимость = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1'"), НомерСтроки);
			Сообщение.Сообщить();
			
		КонецЕсли;
	КонецЦикла;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

&НаСервере
Функция НовыйУзелИзПрототипаРаздел252(ПрототипУзла, ГодКорректировкиСведений);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		Если (Стр.Код = "ДоначисленоСтраховыхВзносовОПС" И ГодКорректировкиСведений < 2014)
		 ИЛИ ((Стр.Код = "ДоначисленоНаСтраховуюЧасть" ИЛИ Стр.Код = "ДоначисленоНаНакопительнуюЧасть")
		   И ГодКорректировкиСведений >= 2014) Тогда
			Продолжить;
		Иначе
			СкопироватьУзел(НовыйУзел, Стр);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0)
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПредставлениеЧисла(Знач ЗначЧисло)
	
	Если ТипЗнч(ЗначЧисло) = Тип("Строка") Тогда
		ЗначЧисло = СокрЛП(ЗначЧисло);	
		ЗначЧисло = ?(ЗначениеЗаполнено(ЗначЧисло) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначЧисло),
		Число(ЗначЧисло), 0);
	КонецЕсли;
	
	СтрЧисло = Формат(ЗначЧисло, "ЧН=; ЧГ=");	
	
	Возврат СтрЧисло;
	
КонецФункции

&НаСервере
Функция ЧисловоеПредставлениеСтроки(Знач ЗначЧисло)
	
	Если ТипЗнч(ЗначЧисло) = Тип("Число") Тогда
		ЗначЧисло = Формат(ЗначЧисло, "ЧГ=");
		Если ЗначЧисло = "" Тогда
			ЗначЧисло = "0";
		КонецЕсли;
	Иначе
		ЗначЧисло = СокрЛП(ЗначЧисло);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначЧисло) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначЧисло) Тогда
		Возврат Число(ЗначЧисло)
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнениеТитульный(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел1(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел21(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел24(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел31(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел32(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел33(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел4(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел5(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки);
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеРаздел1(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	
	ТекстОписанияОшибки = НСтр("ru='При заполненной строке 120 раздела 1 должен быть заполнен раздел 4.'");
	ЗаполненаСтрока120 = ЗначениеЗаполнено(ДанныеРаздела.П000100012003)
					 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000100012004)
					 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000100012005)
					 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000100012006)
					 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000100012007)
					 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000100012008);
	Если ЗаполненаСтрока120 И НЕ ЗаполненРаздел4() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел4", "П000400000101_1");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел21(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Раздел21 = мДанныеОтчета.Раздел21;
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2016 Тогда
		РазрешенныеКодыТарифовСтрока = "01,06,07,08,10,11,12,13,15,16,23,24,25,36,52,53";
	Иначе
		РазрешенныеКодыТарифовСтрока = "01,06,07,08,10,11,12,13,15,16,23,24,36,52,53";
	КонецЕсли;
	
	РазрешенныеКодыТарифов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		РазрешенныеКодыТарифовСтрока);
	
	КодыТарифовНаЛистах = Новый Соответствие;
	
	Для Каждого ЛистРаздела21 Из Раздел21 Цикл
		НомерЛиста = Раздел21.Индекс(ЛистРаздела21) + 1;
		ДанныеЛиста = ЛистРаздела21.Данные[0].Значение;
		
		КодТарифа = ДанныеЛиста.П000210001001;
		
		Если ПустаяСтрока(КодТарифа) Тогда
			ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='На странице %1 раздела 2 не задан код тарифа.'"), НомерЛиста);
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
				ЭтаФорма, ТекстОписанияОшибки, "Раздел21", "П000210001001", НомерЛиста);
			СтатусПроверки = Ложь;
		ИначеЕсли РазрешенныеКодыТарифов.Найти(КодТарифа) = Неопределено Тогда
			ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='На странице %1 раздела 2 неверно задан код тарифа.'"), НомерЛиста);
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
				ЭтаФорма, ТекстОписанияОшибки, "Раздел21", "П000210001001", НомерЛиста);
			СтатусПроверки = Ложь;
		Иначе
			КодыТарифовНаЛистах.Вставить(КодТарифа, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ТекстОписанияОшибки = НСтр("ru='При заполненном разделе 2 с кодом тарифа 06 должен быть заполнен раздел 3.1.'");
	Если КодыТарифовНаЛистах.Получить("06") <> Неопределено И НЕ ЗаполненРаздел31() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел31", "П000340034103");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='При заполненном разделе 2 с кодом тарифа 07 должен быть заполнен раздел 3.2.'");
	Если КодыТарифовНаЛистах.Получить("07") <> Неопределено И НЕ ЗаполненРаздел32() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел32", "П000360036103");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='При заполненном разделе 2 с кодом тарифа 12 должен быть заполнен раздел 3.3.'");
	Если КодыТарифовНаЛистах.Получить("12") <> Неопределено И НЕ ЗаполненРаздел33() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел32", "П000370037103");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел24(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	ТаблицаКонтроляУникальности = Новый ТаблицаЗначений;
	ТаблицаКонтроляУникальности.Колонки.Добавить("Код");
	ТаблицаКонтроляУникальности.Колонки.Добавить("Основание");
	ТаблицаКонтроляУникальности.Колонки.Добавить("Счетчик");
	
	ДанныеРаздела = мДанныеОтчета.Раздел24;
	
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		Если НЕ ЗаполненЛистРаздела24(ДанныеЛиста) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтраницы = ДанныеРаздела.Индекс(ЛистРаздела) + 1;
		
		КодОснования = СокрЛП(ДанныеЛиста.П000240001001);
		
		Если НЕ ЗначениеЗаполнено(КодОснования) Тогда
			
			ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='На странице %1 раздела 2.4 не указан код основания.'"), НомерСтраницы);
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
				ЭтаФорма, ТекстОписанияОшибки, "Раздел24", "П000240001001", НомерСтраницы);
			
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
		Основание = "";
		Если ЗначениеЗаполнено(ДанныеЛиста.П000240002001) Тогда
			Основание = "1";
		ИначеЕсли ЗначениеЗаполнено(ДанныеЛиста.П000240002002) Тогда
			Основание = "2";
		ИначеЕсли ЗначениеЗаполнено(ДанныеЛиста.П000240002003) Тогда
			Основание = "3";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Основание) Тогда
			
			ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='На странице %1 раздела 2.4 не указано основание заполнения раздела.'"), НомерСтраницы);
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
				ЭтаФорма, ТекстОписанияОшибки, "Раздел24", "П000240002001", НомерСтраницы);
			
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
		ЗаписьОЛисте = ТаблицаКонтроляУникальности.Добавить();
		ЗаписьОЛисте.Код = КодОснования;
		ЗаписьОЛисте.Основание = Основание;
		ЗаписьОЛисте.Счетчик = 1;
		
	КонецЦикла;
	
	ПроверкаДубликатов = ТаблицаКонтроляУникальности.Скопировать();
	ПроверкаДубликатов.Свернуть("Код, Основание", "Счетчик");
	
	Для Каждого Кандидат Из ПроверкаДубликатов Цикл
		
		Если Кандидат.Счетчик > 1 И ЗначениеЗаполнено(Кандидат.Код) И ЗначениеЗаполнено(Кандидат.Основание) Тогда
			
			ПерваяСтраницаДубликатов = 0;
			СписокСтраницДубликатов = "";
			
			Для Каждого ЗаписьОЛисте Из ТаблицаКонтроляУникальности Цикл
				Если ЗаписьОЛисте.Код = Кандидат.Код
				   И ЗаписьОЛисте.Основание = Кандидат.Основание Тогда
					НомерСтраницы = ТаблицаКонтроляУникальности.Индекс(ЗаписьОЛисте) + 1;
					Если ПерваяСтраницаДубликатов = 0 Тогда
						ПерваяСтраницаДубликатов = НомерСтраницы;
					КонецЕсли;
					СписокСтраницДубликатов = СписокСтраницДубликатов + ", " + Формат(НомерСтраницы, "ЧН=; ЧГ=0");
				КонецЕсли;
			КонецЦикла;
			
			СписокСтраницДубликатов = Сред(СписокСтраницДубликатов, 3);
			
			ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Обнаружены дублирующиеся сочетания кода основания и основания заполнения раздела на страницах %1 в разделе 2.4.'"),
				СписокСтраницДубликатов);
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
				ЭтаФорма, ТекстОписанияОшибки, "Раздел24", "П000240001001", ПерваяСтраницаДубликатов);
			
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел31(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел31() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = "Раздел31";
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел31;
	
	Для Графа = 3 По 4 Цикл
		КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");
		ИмяПоказателя341 = "П0003400341" + КодГрафы;
		ИмяПоказателя342 = "П0003400342" + КодГрафы;
		ИмяПоказателя343 = "П0003400343" + КодГрафы;
		
		Если ДанныеРаздела[ИмяПоказателя341] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя342])
			 ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя343]) Тогда
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='Не указана сумма доходов в графе %1 строки 341 раздела 3.1.'"), Графа);
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателя341);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П000340034503) Тогда
		ТекстОписанияОшибки = НСтр(
			"ru='Не указана дата записи в реестре аккредитованных организаций в строке 345 раздела 3.1.'");
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "П000340034503");
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеРаздела.П000340034504) Тогда
		ТекстОписанияОшибки = НСтр(
			"ru='Не указан номер записи в реестре аккредитованных организаций в строке 345 раздела 3.1.'");
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "П000340034504");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел32(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел32() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = "Раздел32";
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	
	ИмяПоказателя361 = "П000360036103";
	ИмяПоказателя362 = "П000360036203";
	ИмяПоказателя363 = "П000360036303";
	
	Если ДанныеРаздела[ИмяПоказателя361] = 0 Тогда
		Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя362])
		 ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя363]) Тогда
			ТекстОписанияОшибки = НСтр("ru='Не указана сумма доходов в графе 3 строки 361 раздела 3.2.'");
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателя361);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел33(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел33() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = "Раздел32";
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	
	Для Графа = 3 По 4 Цикл
		КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");
		
		ПроверяемыйПоказатель    = "П0003700375" + КодГрафы;
		КонтрольныйПоказатель371 = "П0003700371" + КодГрафы;
		КонтрольныйПоказатель372 = "П0003700372" + КодГрафы;
		КонтрольныйПоказатель373 = "П0003700373" + КодГрафы;
		КонтрольныйПоказатель374 = "П0003700374" + КодГрафы;
		КонтрольныйПоказатель375 = "П0003700375" + КодГрафы;
		
		Если ДанныеРаздела[КонтрольныйПоказатель371] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель372])
			 ИЛИ ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель373])
			 ИЛИ ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель374])
			 ИЛИ ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель375]) Тогда
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='Не указана сумма доходов в графе %1 строки 371 раздела 3.3.'"), Графа);
				СообщитьОбОшибкеЗаполнения(
					СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, КонтрольныйПоказатель371);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел4(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел4() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	
	НомерПП                           = Неопределено;
	ОснованиеДляДоначисленияСВ        = Неопределено;
	КодОснованияВСлучаеЗаполненияГр13 = Неопределено;
	
	ГодНачисления   = Неопределено;
	МесяцНачисления = Неопределено;
	
	ОПСВсегоС2014                 = Неопределено;
	ОПСВсегоС2014СвышеПределаБазы = Неопределено;
	
	ОПССтраховаяЧасть2010_2013                 = Неопределено;
	ОПССтраховаяЧасть2010_2013СвышеПределаБазы = Неопределено;
	ОПСНакопительнаяЧасть2010_2013             = Неопределено;
	
	ОПСПоДопТарифу1  = Неопределено;
	ОПСПоДопТарифу2  = Неопределено;
	ОПСПоДопТарифу21 = Неопределено;
	
	СтраховыеВзносыОМС = Неопределено;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000400000102_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000400000101_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000400000102_" + НомерСтроки, ОснованиеДляДоначисленияСВ);
		ДанныеРаздела.Свойство("П000400000103_" + НомерСтроки, КодОснованияВСлучаеЗаполненияГр13);
		ДанныеРаздела.Свойство("П000400000104_" + НомерСтроки, ГодНачисления);
		ДанныеРаздела.Свойство("П000400000105_" + НомерСтроки, МесяцНачисления);
		ДанныеРаздела.Свойство("П000400000106_" + НомерСтроки, ОПСВсегоС2014);
		ДанныеРаздела.Свойство("П000400000107_" + НомерСтроки, ОПСВсегоС2014СвышеПределаБазы);
		ДанныеРаздела.Свойство("П000400000108_" + НомерСтроки, ОПССтраховаяЧасть2010_2013);
		ДанныеРаздела.Свойство("П000400000109_" + НомерСтроки, ОПССтраховаяЧасть2010_2013СвышеПределаБазы);
		ДанныеРаздела.Свойство("П000400000110_" + НомерСтроки, ОПСНакопительнаяЧасть2010_2013);
		ДанныеРаздела.Свойство("П000400000111_" + НомерСтроки, ОПСПоДопТарифу1);
		ДанныеРаздела.Свойство("П000400000112_" + НомерСтроки, ОПСПоДопТарифу2);
		ДанныеРаздела.Свойство("П000400000113_" + НомерСтроки, ОПСПоДопТарифу21);
		ДанныеРаздела.Свойство("П000400000114_" + НомерСтроки, СтраховыеВзносыОМС);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(ОПСВсегоС2014)
					  ИЛИ ЗначениеЗаполнено(ОПСВсегоС2014СвышеПределаБазы)
					  ИЛИ ЗначениеЗаполнено(ОПССтраховаяЧасть2010_2013)
					  ИЛИ ЗначениеЗаполнено(ОПССтраховаяЧасть2010_2013СвышеПределаБазы)
					  ИЛИ ЗначениеЗаполнено(ОПСНакопительнаяЧасть2010_2013)
					  ИЛИ ЗначениеЗаполнено(ОПСПоДопТарифу1)
					  ИЛИ ЗначениеЗаполнено(ОПСПоДопТарифу2)
					  ИЛИ ЗначениеЗаполнено(ОПСПоДопТарифу21)
					  ИЛИ ЗначениеЗаполнено(СтраховыеВзносыОМС);
		
		Если СтрокаЗаполнена Тогда
			
			Если НЕ ЗначениеЗаполнено(ОснованиеДляДоначисленияСВ) Тогда
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='Не указано основание для перерасчета страховых взносов в строке %1 раздела 4.'"),
					НомерСтроки);
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел4", "П000400000102_" + НомерСтроки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОПСПоДопТарифу21)
				И НЕ (КодОснованияВСлучаеЗаполненияГр13 = "1" ИЛИ КодОснованияВСлучаеЗаполненияГр13 = "2") Тогда
				Если ЗначениеЗаполнено(КодОснованияВСлучаеЗаполненияГр13) Тогда
					НачТекста = "Некорректно";
				Иначе
					НачТекста = "Не";
				КонецЕсли;
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='%1 указан код основания для применения части 2.1 статьи 58.3 Федерального закона от 24 июля 2009 г. № 212-ФЗ в строке %2 раздела 4.'"),
					НачТекста, НомерСтроки);
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел4", "П000400000103_" + НомерСтроки);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ГодНачисления) Тогда
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='Не указан год, за который выявлены и доначислены страховые взносы в строке %1 раздела 4.'"),
				НомерСтроки);
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел4", "П000400000104_" + НомерСтроки);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(МесяцНачисления) Тогда
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='Не указан месяц, за который выявлены и доначислены страховые взносы в строке %1 раздела 4.'"),
				НомерСтроки);
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел4", "П000400000105_" + НомерСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
		НомСтроки = НомСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел5(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел5() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел5;
	
	НомерПП         = Неопределено;
	ФИОСтудента     = Неопределено;
	НомерСправкиСО  = Неопределено;
	ДатаСправкиСО   = Неопределено;
	НомерСправкиОФО = Неопределено;
	ДатаСправкиОФО  = Неопределено;
	СуммаВсего      = Неопределено;
	Сумма1Месяц     = Неопределено;
	Сумма2Месяц     = Неопределено;
	Сумма3Месяц     = Неопределено;
	
	ИтогГрафа5 = 0;
	ИтогГрафа6 = 0;
	ИтогГрафа7 = 0;
	ИтогГрафа8 = 0;
	
	ЕстьЗаполненнаяСтрокаСведенийОбУчащемся = Ложь;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000500000120_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000500000110_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000500000120_" + НомерСтроки, ФИОСтудента);
		ДанныеРаздела.Свойство("П000500000131_" + НомерСтроки, НомерСправкиСО);
		ДанныеРаздела.Свойство("П000500000132_" + НомерСтроки, ДатаСправкиСО);
		ДанныеРаздела.Свойство("П000500000141_" + НомерСтроки, НомерСправкиОФО);
		ДанныеРаздела.Свойство("П000500000142_" + НомерСтроки, ДатаСправкиОФО);
		ДанныеРаздела.Свойство("П000500000150_" + НомерСтроки, СуммаВсего);
		ДанныеРаздела.Свойство("П000500000160_" + НомерСтроки, Сумма1Месяц);
		ДанныеРаздела.Свойство("П000500000170_" + НомерСтроки, Сумма2Месяц);
		ДанныеРаздела.Свойство("П000500000180_" + НомерСтроки, Сумма3Месяц);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(ФИОСтудента)
		              ИЛИ ЗначениеЗаполнено(НомерСправкиСО) ИЛИ ЗначениеЗаполнено(ДатаСправкиСО)
		              ИЛИ ЗначениеЗаполнено(НомерСправкиОФО) ИЛИ ЗначениеЗаполнено(ДатаСправкиОФО)
		              ИЛИ ЗначениеЗаполнено(СуммаВсего) ИЛИ ЗначениеЗаполнено(Сумма1Месяц)
		              ИЛИ ЗначениеЗаполнено(Сумма2Месяц) ИЛИ ЗначениеЗаполнено(Сумма3Месяц);
		
		Если СтрокаЗаполнена Тогда
			
			ЕстьЗаполненнаяСтрокаСведенийОбУчащемся = Истина;
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ФИОСтудента);
			Если НЕ ЗначениеЗаполнено(ФИО.Фамилия) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки
				 + " не указана фамилия студента.", "Раздел5", "П000500000120_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ФИО.Имя) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки
				 + " не указано имя студента.", "Раздел5", "П000500000120_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(НомерСправкиСО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки
				 + " не указан номер справки.", "Раздел5", "П000500000131_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаСправкиСО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки
				 + " не указана дата выдачи справки.", "Раздел5", "П000500000132_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(НомерСправкиОФО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки
				 + " не указан номер справки.", "Раздел5", "П000500000141_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаСправкиОФО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки
				 + " не указана дата выдачи справки.", "Раздел5", "П000500000142_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ИтогГрафа5 = ИтогГрафа5 + СуммаВсего;
		ИтогГрафа6 = ИтогГрафа6 + Сумма1Месяц;
		ИтогГрафа7 = ИтогГрафа7 + Сумма2Месяц;
		ИтогГрафа8 = ИтогГрафа8 + Сумма3Месяц;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не заполнены сведения об обучающихся.'");
	Если НЕ ЕстьЗаполненнаяСтрокаСведенийОбУчащемся Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500000120_1");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указана дата записи в реестре.'");
	Если НЕ ПустаяСтрока(ДанныеРаздела.П000500501104) И НЕ ЗначениеЗаполнено(ДанныеРаздела.П000500501103) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501103");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указан номер записи в реестре.'");
	Если ЗначениеЗаполнено(ДанныеРаздела.П000500501103) И ПустаяСтрока(ДанныеРаздела.П000500501104) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501104");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указана дата записи в реестре.'");
	Если НЕ ПустаяСтрока(ДанныеРаздела.П000500501204) И НЕ ЗначениеЗаполнено(ДанныеРаздела.П000500501203) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501203");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указан номер записи в реестре.'");
	Если ЗначениеЗаполнено(ДанныеРаздела.П000500501203) И ПустаяСтрока(ДанныеРаздела.П000500501204) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501204");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указана дата записи в реестре.'");
	Если НЕ ПустаяСтрока(ДанныеРаздела.П000500501304) И НЕ ЗначениеЗаполнено(ДанныеРаздела.П000500501303) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501303");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указан номер записи в реестре.'");
	Если ЗначениеЗаполнено(ДанныеРаздела.П000500501303) И ПустаяСтрока(ДанныеРаздела.П000500501304) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501304");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указана дата записи в реестре.'");
	Если НЕ ПустаяСтрока(ДанныеРаздела.П000500501404) И НЕ ЗначениеЗаполнено(ДанныеРаздела.П000500501403) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501403");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указан номер записи в реестре.'");
	Если ЗначениеЗаполнено(ДанныеРаздела.П000500501403) И ПустаяСтрока(ДанныеРаздела.П000500501404) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501404");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр(
	 "ru='В разделе 5 не указаны сведения из реестра молодежных и детских общественных объединений,
	 |пользующихся государственной поддержкой.'");
	ЗаполненыСведенияИзРеестра = НЕ ПустаяСтрока(ДанныеРаздела.П000500501104)
	                         ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501103)
	                         ИЛИ НЕ ПустаяСтрока(ДанныеРаздела.П000500501204)
							 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501203)
	                         ИЛИ НЕ ПустаяСтрока(ДанныеРаздела.П000500501304)
							 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501303)
	                         ИЛИ НЕ ПустаяСтрока(ДанныеРаздела.П000500501404)
							 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501403);
	Если НЕ ЗаполненыСведенияИзРеестра Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501103");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеТитульный(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИНН)
		И НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(
			СтруктураРеквизитовФормы.Организация) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, НСтр("ru='Не задан ИНН организации.'"), "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИНН) <> 0 И СтрДлина(ПараметрыВыгрузки.ИНН) <> 10
		И СтрДлина(ПараметрыВыгрузки.ИНН) <> 12 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, НСтр("ru='Неверно задан ИНН организации.'"), "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.Свойство("КПП") И НЕ ПустаяСтрока(ПараметрыВыгрузки.КПП)
		И СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, НСтр("ru='Неверно задан КПП организации.'"), "Титульный", "КПП");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(ПараметрыВыгрузки.НаименованиеОрганизации))
	 ИЛИ (ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(ПараметрыВыгрузки.ФамилияИП)) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, НСтр("ru='Не задан налогоплательщик.'"), "Титульный", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ РегНомерПФРСоответствуетТребованиям(ПараметрыВыгрузки.РегистрационныйНомерПФР) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			НСтр("ru='Значение рег. номера в ПФР не соответствует шаблону:""XXX-XXX-XXXXXX"" (X - любая цифра).'"),
			"Титульный", "НомРег");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр(
		"ru='Не указана причина уточнения.'");
	Если ПараметрыВыгрузки.НомерКорректировки <> "000"
		И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ТипКорректировки) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ТипКорректировки");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='Признак прекращения деятельности должен указываться как ""Л"".'");
	Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ПрекращениеДеятельности)
		И ПараметрыВыгрузки.ПрекращениеДеятельности <> "Л" Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ПрекращениеДеятельности");
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(СтрЗаменить(ПараметрыВыгрузки.КодПоОКВЭД, ".", "")))
		ИЛИ НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.КодПоОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, НСтр("ru='Некорректное значение кода вида деятельности по ОКВЭД.'"), "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='Не указана среднесписочная численность.'");
	Если ПараметрыВыгрузки.СреднесписочнаяЧисленность = Неопределено Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "СрСписЧисл");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='Не указано количество застрахованных лиц.'");
	Если ПараметрыВыгрузки.КоличествоЗЛ = Неопределено Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КолЗастрахованных");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ЛицоПодтверждающееСведения) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, НСтр("ru='Не указан тип подписанта.'"), "Титульный", "ПрПодп");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрНайти("1,2,3", ПараметрыВыгрузки.ЛицоПодтверждающееСведения) = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, НСтр("ru='Неверно указан тип подписанта.'"), "Титульный", "ПрПодп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, НСтр("ru='Не указана фамилия подписанта.'"), "Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, НСтр("ru='Не указано имя подписанта.'"), "Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ЛицоПодтверждающееСведения = "2" ИЛИ ПараметрыВыгрузки.ЛицоПодтверждающееСведения = "3" Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.НаименованиеУдостоверяющего) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
				ЭтаФорма, НСтр("ru='Не указано наименование документа, подтверждающего полномочия представителя.'"),
				"Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ДатаВыдачи) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
				ЭтаФорма, НСтр("ru='Не указана дата выдачи документа, подтверждающего полномочия представителя.'"),
				"Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, Раздел, Показатель)
	
	СтатусПроверки = Ложь;
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, Раздел, Показатель);
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки)
	
	СтрНомПачки = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Формат(НомерПачки, "ЧГ="), 5, "0");
		
	ИмяФайла = "PFR-700-Y-" + ПараметрыВыгрузки.КалендарныйГод + "-ORG-"
		+ ПараметрыВыгрузки.РегистрационныйНомерПФР + "-DCK-" + СтрНомПачки + "-DPT-000000-DCK-00000.XML";
	
	Возврат ИмяФайла;
	
КонецФункции 

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("НазваниеПрограммы", ВРЕГ(СокрЛП(РегламентированнаяОтчетность.НазваниеПрограммы())));
	ПараметрыВыгрузки.Вставить("ВерсияПрограммы", СокрЛП(РегламентированнаяОтчетность.ВерсияПрограммы()));
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",
	 НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация));
	ПараметрыВыгрузки.Вставить("ЭтоГоловнаяОрганизация",
	 РегламентированнаяОтчетность.ГоловнаяОрганизация(СтруктураРеквизитовФормы.Организация)
	  = СтруктураРеквизитовФормы.Организация);
	
	ПараметрыВыгрузки.Вставить("НомерВПачке", 1);
	ПараметрыВыгрузки.Вставить("РегистрационныйНомерПФР", СокрЛП(Титульный.НомРег));
	ПараметрыВыгрузки.Вставить("НомерКорректировки",
		РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СокрЛП(Титульный.НомерКорректировки), 3, "0"));
	ПараметрыВыгрузки.Вставить("ТипКорректировки",        СокрЛП(Титульный.ТипКорректировки));
	ПараметрыВыгрузки.Вставить("КодОтчетногоПериода",     СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КалендарныйГод",          СокрЛП(Титульный.ОтчетГод));
	ПараметрыВыгрузки.Вставить("ПрекращениеДеятельности", СокрЛП(Титульный.ПрекращениеДеятельности));
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(ВРЕГ(Титульный.ОргНазв));
		ПараметрыВыгрузки.Вставить("ФамилияИП",  ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяИП",      ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоИП", ФИОИП.Отчество);
	Иначе
		НаимОрг = ВРЕГ(СокрЛП(Титульный.ОргНазв));
		ПараметрыВыгрузки.Вставить("НаименованиеОрганизации", НаимОрг);
		ПараметрыВыгрузки.Вставить("КПП", СокрЛП(СтрЗаменить(Титульный.КПП, "-", "")));
	КонецЕсли;

	ПараметрыВыгрузки.Вставить("ИНН", СокрЛП(СтрЗаменить(Титульный.ИНН, "-", "")));
	ПараметрыВыгрузки.Вставить("КодПоОКВЭД", СтрЗаменить(
		СокрЛП(СтрЗаменить(СтрЗаменить(Титульный.ОКВЭД, " ", ""), ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("Телефон", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("ЛицоПодтверждающееСведения", ПредставлениеЧисла(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(ВРЕГ(Титульный.ОргПодписантФамилия));
	
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("НаименованиеОрганизацииПредставителя", Титульный.ОргПредНаим);
	
	ПараметрыВыгрузки.Вставить("КоличествоЗЛ", ЧисловоеПредставлениеСтроки(Титульный.КолЗастрахованных));
	ПараметрыВыгрузки.Вставить("СреднесписочнаяЧисленность", ЧисловоеПредставлениеСтроки(Титульный.СрСписЧисл));
	
	КоличествоСтраниц = ПредставлениеЧисла(Титульный.СоставленаНа);
	КоличествоСтраниц = ?(КоличествоСтраниц = "0", "1", КоличествоСтраниц);
	ПараметрыВыгрузки.Вставить("КоличествоСтраниц", КоличествоСтраниц);
	ПараметрыВыгрузки.Вставить("КоличествоЛистовПриложения", ПредставлениеЧисла(Титульный.Прил));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти",
		"РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2015");
	
	ПараметрыВыгрузки.Вставить("НаименованиеУдостоверяющего",
		ВРЕГ(СокрЛП(мСтруктураДокУпПред.НаименованиеУдостоверяющего)));
	ПараметрыВыгрузки.Вставить("СерияРимскиеЦифры",    ВРЕГ(СокрЛП(мСтруктураДокУпПред.СерияРимскиеЦифры)));
	ПараметрыВыгрузки.Вставить("СерияРусскиеБуквы",    ВРЕГ(СокрЛП(мСтруктураДокУпПред.СерияРусскиеБуквы)));
	ПараметрыВыгрузки.Вставить("НомерУдостоверяющего", ПредставлениеЧисла(мСтруктураДокУпПред.НомерУдостоверяющего));
	ПараметрыВыгрузки.Вставить("ДатаВыдачи",           Формат(мСтруктураДокУпПред.ДатаВыдачи, "ДФ=dd.MM.yyyy"));
	
	КемВыдан = ВРЕГ(СокрЛП(мСтруктураДокУпПред.КемВыдан));
	ПараметрыВыгрузки.Вставить("КемВыдан", КемВыдан);
	
	ПараметрыВыгрузки.Вставить("ДатаЗаполнения", Формат(ДатаПодписи, "ДФ=dd.MM.yyyy"));
	
	ПараметрыВыгрузки.Вставить("НомерПачки", СтруктураРеквизитовФормы.мСохраненныйДок.НомерПачки);
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтаФорма["Хранилище"
							 + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище"
						 + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок,
						 "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		
		Если Раздел.Ключ = "Раздел6" Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
	СохрСтруктура.Свойство("ДокументУпПред", мСтруктураДокУпПред);
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
		
	Если Узел.Формат = "S" Тогда
		Результат = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(Узел.ЗначениеПоУмолчанию) И Лев(Узел.ЗначениеПоУмолчанию, 1) <> "&" Тогда
		Результат = Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Результат = НЕ ЗначениеЗаполнено(Узел.Значение)
		        ИЛИ НЕ ЗначениеЗаполнено(Число(Узел.Значение));
		
	Иначе
		Результат = НЕ ЗначениеЗаполнено(Узел.Значение);
		
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НачатьЗамерВремени()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
			
			КлючеваяОперация = "ЗаполнениеФормыНалоговаяОтчетностьРСВ1";
			ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
			
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВыполнятьЗамерыПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиВызовСервераПовтИсп").ВыполнятьЗамерыПроизводительности();
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") 
	   И ВыполнятьЗамерыПроизводительности Тогда
		
		Возврат ОценкаПроизводительности.НачатьЗамерВремени();
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ВремяНачала
	  <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует(
	   "СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "ЗаполнениеФормыНалоговаяОтчетностьРСВ1";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОРИСОВКА И КОМАНДЫ ПАНЕЛИ ОТПРАВКИ

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры