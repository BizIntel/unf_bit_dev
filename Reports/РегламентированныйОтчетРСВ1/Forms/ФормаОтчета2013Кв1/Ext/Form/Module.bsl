&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем ВидДокументаКорректирующий;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;

	СтруктураРеквизитовФормы.мЧтоОчищать  			   = "Расчет";
	СтруктураРеквизитовФормы.мСоставПоказателей 	   = "СоставПоказателей2013Кв1";
	СтруктураРеквизитовФормы.мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме";

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	СтруктураРеквизитовФормы.мИдГруппы31 = "П0003100001";
	СтруктураРеквизитовФормы.мИдГруппы35 = "П0003500001";
	СтруктураРеквизитовФормы.мИдГруппы4  = "П0004000001";
	СтруктураРеквизитовФормы.мИдГруппы5  = "П0005000001";
	
	КолИсхСтрокИдГруппы31 = 1;
	КолИсхСтрокИдГруппы35 = 1;
	КолИсхСтрокИдГруппы4  = 1;
	КолИсхСтрокИдГруппы5  = 1;
	
	КолКолонокИдГруппы31 = 8;
	КолКолонокИдГруппы35 = 5;
	КолКолонокИдГруппы4  = 6;
	КолКолонокИдГруппы5  = 10;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	СтруктураДанныхТитульный  = Новый Структура;
	СтруктураДанныхРаздел1    = Новый Структура;
	СтруктураДанныхРаздел22   = Новый Структура;
	СтруктураДанныхРаздел31   = Новый Структура;
	СтруктураДанныхРаздел32   = Новый Структура;
 	СтруктураДанныхРаздел34   = Новый Структура;
 	СтруктураДанныхРаздел35   = Новый Структура;
	СтруктураДанныхРаздел36   = Новый Структура;
	СтруктураДанныхРаздел37   = Новый Структура;
 	СтруктураДанныхРаздел38   = Новый Структура;
 	СтруктураДанныхРаздел4    = Новый Структура;
 	СтруктураДанныхРаздел5    = Новый Структура;
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31, СтруктураРеквизитовФормы.мИдГруппы31);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы35, СтруктураРеквизитовФормы.мИдГруппы35);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, СтруктураРеквизитовФормы.мИдГруппы4);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, СтруктураРеквизитовФормы.мИдГруппы5);
	
	// Структура содержит данные дополнительных страниц.
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2", "ТаблицаСтраницыРазделаРаздел2");
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31, КолИсхСтрокИдГруппы31);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы35, КолИсхСтрокИдГруппы35);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, КолИсхСтрокИдГруппы4);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, КолИсхСтрокИдГруппы5);
	
	мСтруктураКолвоКолонокРазделов  = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31, КолКолонокИдГруппы31);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы35, КолКолонокИдГруппы35);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, КолКолонокИдГруппы4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, КолКолонокИдГруппы5);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31,    Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы35,    Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,     Новый СписокЗначений);
	
	ЦветЗаполняетсяТолькоВручную        = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир        = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир     = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяОднозначноВручную    = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически        = Новый Цвет(255, 255, 255);
	СтруктураРеквизитовФормы.ЦветБелый  = Новый Цвет(255, 255, 255);
	СтруктураРеквизитовФормы.ЦветЖелтый = Новый Цвет(255, 255, 192);
	
	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "01/03/2013";
	
	// Код отчета (условный).
	СтруктураРеквизитовФормы.мКодОтчета = "1169999";
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;

	ОбъектОтчет = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)];
		
	ИмяРаздела = "Титульный";
		
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;

	СтруктураРеквизитовФормы.мВыбраннаяФорма            		  = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета              = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета             = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма                    = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок                      = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация 			              = Параметры.Организация;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	СтруктураРеквизитовФормы.ВидДокумента                         = Параметры.ВидДокумента;
	СтруктураРеквизитовФормы.НеОтображатьПредупреждение           = Параметры.НеОтображатьПредупреждение;
					
	ВидДокументаКорректирующий = ?(СтруктураРеквизитовФормы.ВидДокумента > 0, Истина, Ложь);
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
	                                      Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
	                                      Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
	                                      Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Заголовок = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,
	                                               СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюТД = Элементы.ТабличныйДокументКонтекстноеМеню;
	
	КМенюТД.Видимость = Ложь;
	
	КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
			
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
		
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			        
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета =
			?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
			ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1,
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
		
		ЗаголовокРаздела = Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено;
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		                                                Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета,
														ЗаголовокРаздела);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		КМенюРО.Видимость = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
		 ИЛИ Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
			
		Иначе
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
					
		КонецЕсли;
		
	Иначе
		
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел31"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел35"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел4"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
		
		КМенюТД.Видимость = Истина;
		
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		
		ТабличныйДокумент.Области.НомерПачки.Значение = НомерПачки;
		
		Элементы.Обновить.Доступность = Истина;
		
	Иначе
		
		Элементы.Обновить.Доступность = Ложь;
		
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборЗавершение(ВыбранныйВариант, ДополнительныеПараметры) Экспорт
	
	ВариантЦифры = ДополнительныеПараметры.ВариантЦифры;
	Если ВыбранныйВариант <> Неопределено Тогда
		ВыбранВариантОтображенияЦифрами = (ВыбранныйВариант = ВариантЦифры);
		СтруктураРеквизитовФормы.НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами = ВыбранВариантОтображенияЦифрами;
		Модифицированность = Истина;
	КонецЕсли;
	УстановитьФорматОтображенияНулевыхЗначенийСтрок100и150();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)

	ОбластьИмя = Область.Имя;
	
	Если ОбластьИмя = "ЗаголовокСтроки100" ИЛИ ОбластьИмя = "ЗаголовокСтроки150" Тогда
		СписокВариантовОтображения = Новый СписокЗначений;
		ВариантПрочерк = СписокВариантовОтображения.Добавить(, "Отображать прочерком");
		ВариантЦифры = СписокВариантовОтображения.Добавить(, "Отображать цифрами");
		
		ДополнительныеПараметры = Новый Структура("ВариантЦифры", ВариантЦифры);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВариантовОтображения, Элемент);
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ОбластьИмя, "ДобавитьСтраницу") > 0 Тогда
		
		ДобавитьСтраницу("");
		
	ИначеЕсли СтрЧислоВхождений(ОбластьИмя, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
		
		УдалитьСтраницу("");
		
	ИначеЕсли СтрЧислоВхождений(ОбластьИмя, "ДобавитьСтроку") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДобавитьСтроку("");
		
	ИначеЕсли СтрЧислоВхождений(ОбластьИмя, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		УдалитьСтроку("");
		
	КонецЕсли;	
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область,
		                                                                                     СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ОбластьИмя, "ДокУпПред") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;		
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураДокумента", мСтруктураДокУпПред);
		
		ФормаВводаДокументПредставителя =
		            ПолучитьФорму("Отчет.РегламентированныйОтчетРСВ1.Форма.ФормаВводаДокументПредставителя", ПараметрыФормы);
					
		ДополнительныеПараметры = Новый Структура("Область, ОбластьИмя, СтандартнаяОбработка, Элемент", Область, ОбластьИмя, СтандартнаяОбработка, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборДокУпПредЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВводаДокументПредставителя.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВводаДокументПредставителя.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВводаДокументПредставителя.Открыть();
	Иначе
		ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ОбластьИмя));
		Если ПараметрВводаПоля.Количество() = 0 Тогда
			
			ПараметрВводаПоля = Неопределено;
			
			Для Каждого Стр из СвойстваПоказателей Цикл
				Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
					ПараметрВводаПоля = Стр;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПараметрВводаПоля = ПараметрВводаПоля[0];
		КонецЕсли;
		
		ВводитьПоНазванию = (СтрНайти(ОбластьИмя, "П000350000122") = 1);
		КолонкаПоиска = ?(ВводитьПоНазванию, "Название", "Код");
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			
			ВвестиПоказатель(Элемент, Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе,
			ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, КолонкаПоиска);
			
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборДокУпПредЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	ОбластьИмя = ДополнительныеПараметры.ОбластьИмя;
	СтандартнаяОбработка = ДополнительныеПараметры.СтандартнаяОбработка;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат <> Неопределено Тогда
		
		мСтруктураДокУпПред = Результат;    			
		Текст = "";
		
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.НаименованиеУдостоверяющего, "");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.СерияРимскиеЦифры, " ");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.СерияРусскиеБуквы, " ");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.НомерУдостоверяющего, " № ");
		Текст = ДобавитьРеквизит(Текст, Формат(мСтруктураДокУпПред.ДатаВыдачи,"ДФ=dd.MM.yyyy"), " от ");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.КемВыдан, " выдан: ");
		
		ТабличныйДокумент.Области.ДокУпПред.Значение = Текст;		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ОбластьИмя));
	Если ПараметрВводаПоля.Количество() = 0 Тогда
		
		ПараметрВводаПоля = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПараметрВводаПоля = ПараметрВводаПоля[0];
	КонецЕсли;
	
	ВводитьПоНазванию = (СтрНайти(ОбластьИмя, "П000350000122") = 1);
	КолонкаПоиска = ?(ВводитьПоНазванию, "Название", "Код");
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		ВвестиПоказатель(Элемент, Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе,
			ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, КолонкаПоиска);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	
	СтруктураРеквизитовФормы.ДанныеОтчетаИзмененыВручную = Истина;

	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;

	ИмяОбласти = Область.Имя;;
	
	Если ИмяРаздела = "Титульный"
	   И Область.Имя = "НомерКорректировки" Тогда
		
		НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
					
		СтруктураРеквизитовФормы.ВидДокумента = ?(Область.Значение = 0, 0, 1);
		
		УстановитьВидимостьМенюВыгрузкиИОтправки();
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		
		Модифицированность = Истина;
		
	КонецЕсли;
		
	Если ИмяРаздела = "Титульный"
	   И Область.Имя = "НомерПачки" Тогда
			
		НомерПачки = ТабличныйДокумент.Области.НомерПачки.Значение;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяРаздела = "Титульный"
	   И Область.Имя = "ДатаПодписи" Тогда
	   
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
	   
		ЗаполнитьДатуВЯчейкахНаКлиенте();
		
		ЗаполнитьСведенияОбОрганизации(Истина);
		
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		ТаблицаРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
		СтраницаРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		ТаблицаРаздела  = ЭтаФорма[ТаблицаРаздела];
		ДанныеСтраницы  = ТаблицаРаздела[СтраницаРаздела-1].Данные[0].Значение;
		
		Если ДанныеСтраницы.Свойство(ИмяОбласти) Тогда
			ДанныеСтраницы[ИмяОбласти] = Область.Значение;
		КонецЕсли;	
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	КонецЕсли;

	Если  ИмяРаздела = "Раздел1" 
	  ИЛИ ИмяРаздела = "Раздел22" 
	  ИЛИ ИмяРаздела = "Раздел31" 
	  ИЛИ ИмяРаздела = "Раздел32" 
	  ИЛИ ИмяРаздела = "Раздел34" 
	  ИЛИ ИмяРаздела = "Раздел35"
	  ИЛИ ИмяРаздела = "Раздел36" 
	  ИЛИ ИмяРаздела = "Раздел37" 
	  ИЛИ ИмяРаздела = "Раздел38" 
	  ИЛИ ИмяРаздела = "Раздел4" 
	  ИЛИ ИмяРаздела = "Раздел5" Тогда

		
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
				
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность  = Ложь;
	
	Если (СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0003100001") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0003500001") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0004000001") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0005000001") > 0)
	   И СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "УдалитьСтроку") = 0 Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьМенюВыгрузкиИОтправки()
	
	Если НЕ РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ИмяОсновнойФормыРСВ1() = "ОсновнаяФорма"
	   И СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		
		Элементы.Выгрузить.Видимость                     = Ложь;
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
		Элементы.ПроверитьВыгрузку.Видимость             = Ложь;
		Элементы.ПроверитьВИнтернете.Видимость           = Ложь;
		
		Если НЕ СтруктураРеквизитовФормы.НеОтображатьПредупреждение Тогда
			Элементы.Предупреждение.Видимость = Истина;
		Иначе
			Элементы.Предупреждение.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		
		Элементы.Предупреждение.Видимость                = Ложь;
		Элементы.Выгрузить.Видимость                     = Истина;
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Истина;
		Элементы.ПроверитьВыгрузку.Видимость             = Истина;
		Элементы.ПроверитьВИнтернете.Видимость           = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	#Если ВебКлиент Тогда
		ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	#Иначе
		ВставитьДополнительнуюСтраницуИзменитьТаблицуПараметровАвтозаполненияНаСервере(1,
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	#КонецЕсли
				
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		ДобавитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	НачатьЗамерВремени();
	ЗаполнитьАвтоНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока =
		Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)

	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();	
		    	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма,
	                                                                                                         "ПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
								
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма,
		"ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
				
		НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		
		УстановитьВидимостьМенюВыгрузкиИОтправки();
		
		ТабличныйДокумент.Области.НомерПачки.Значение = НомерПачки;
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		
	КонецЕсли;
		
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРабочееМестоПФР(Команда)
	
	Закрыть();	
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПерейтиВРабочееМестоПФР(СтруктураРеквизитовФормы.Организация,
	 СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Раздел21КодТарифа = "";
	
	Если НЕ ТабличныйДокумент.Области.Найти("П000200001001") = Неопределено Тогда
		Раздел21КодТарифа = ТабличныйДокумент.Области.П000200001001.Значение;
	КонецЕсли;
	
	Раздел31ФИО = "";
	
	Если СтрЧислоВхождений(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя, СтруктураРеквизитовФормы.мИдГруппы31) > 0 Тогда
		Раздел31ФИО = ТабличныйДокумент.Области[СтруктураРеквизитовФормы.мИдГруппы31 + "02_"
		 + Сред(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя, СтрНайти(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя, "_")
		  + 1)].Значение;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			   СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",    СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("Раздел21КодТарифа",          Раздел21КодТарифа);
	ПараметрыОтчета.Вставить("Раздел31ФИО",                Раздел31ФИО);
	ПараметрыОтчета.Вставить("ЗначениеТекущегоПоказателя", Элементы.ТабличныйДокумент.ТекущаяОбласть.Текст);
		
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
			
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы,
	 ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей,
	  ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса
		= КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления =
		РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(),
		"КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы	   = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
	
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере();
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте();
		
	#КонецЕсли
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("КатегорияНалогоплательщика");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы31");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы35");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5");
	СтруктураРеквизитовФормы.Вставить("мИнтервалАвтосохранения");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПоляПоискаПоказателяВТСП");
	СтруктураРеквизитовФормы.Вставить("мСкопированаИз2010");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мЧтоОчищать");
	СтруктураРеквизитовФормы.Вставить("НомерГода");
	СтруктураРеквизитовФормы.Вставить("ФлагСохранения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветБелый");
	СтруктураРеквизитовФормы.Вставить("ЦветЖелтый");
   	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НаименованияЭлементовАдреса");
	СтруктураРеквизитовФормы.Вставить("НеОтображатьПредупреждение");
	СтруктураРеквизитовФормы.Вставить("ДанныеОтчетаИзмененыВручную", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");	
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСокращенияЭлементовАдреса(ДанныеАдреса)
	
	Если (СтруктураРеквизитовФормы.Организация = Неопределено) Или (СтруктураРеквизитовФормы.Организация
		 = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "АдрЮР");
	Сведения.Добавить("", "АдрПрописки");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	 СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
	
	АдрЮР = "";
	АдрПрописки = "";
	
	ОргСведения.Свойство("АдрЮР", АдрЮР);
	ОргСведения.Свойство("АдрПрописки", АдрПрописки);
	
	Если ЭтоПБОЮЛ Тогда
		Адрес = АдрПрописки;
	Иначе
		Адрес = АдрЮр;
	КонецЕсли;
	
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Адрес);
	Если Не СтруктураАдреса = Неопределено Тогда
		
		Если СокрЛП(ДанныеАдреса.Индекс)          = СокрЛП(СтруктураАдреса.Индекс)
		   И СокрЛП(ДанныеАдреса.Регион)          = СокрЛП(СтруктураАдреса.Регион)
		   И СокрЛП(ДанныеАдреса.Район)           = СокрЛП(СтруктураАдреса.Район)
		   И СокрЛП(ДанныеАдреса.Город)           = СокрЛП(СтруктураАдреса.Город)
		   И СокрЛП(ДанныеАдреса.НаселенныйПункт) = СокрЛП(СтруктураАдреса.НаселенныйПункт)
		   И СокрЛП(ДанныеАдреса.Улица)           = СокрЛП(СтруктураАдреса.Улица)
		   И СокрЛП(ДанныеАдреса.Дом)             = СокрЛП(СтруктураАдреса.Дом)
		   И СокрЛП(ДанныеАдреса.Корпус)          = СокрЛП(СтруктураАдреса.Корпус)
		   И СокрЛП(ДанныеАдреса.Квартира)        = СокрЛП(СтруктураАдреса.Квартира) Тогда
			
			СтруктураРеквизитовФормы.НаименованияЭлементовАдреса = Новый Структура;
			СтруктураРеквизитовФормы.НаименованияЭлементовАдреса.Вставить("ТипДома",     СтруктураАдреса.ТипДома);
			СтруктураРеквизитовФормы.НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  СтруктураАдреса.ТипКорпуса);
			СтруктураРеквизитовФормы.НаименованияЭлементовАдреса.Вставить("ТипКвартиры", СтруктураАдреса.ТипКвартиры);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011003", "П000210025003;П000210025203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011103", "П000210025004;П000210025204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011203", "П000210025005;П000210025205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011303", "П000210025006;П000210025206");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011004", "П000210025103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011104", "П000210025104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011204", "П000210025105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011304", "П000210025106");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011005", "П000220028403");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011105", "П000220028404");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011205", "П000220028405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011305", "П000220028406");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011006", "П000230029403");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011106", "П000230029404");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011206", "П000230029405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011306", "П000230029406");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011007", "П000210027603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011107", "П000210027604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011207", "П000210027605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011307", "П000210027606");
	                                         
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011403",
	 "П000210025004;П000210025204;П000210025005;П000210025205;П000210025006;П000210025206");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011404", "П000210025104;П000210025105;П000210025106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011405", "П000220028404;П000220028405;П000220028406");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011406", "П000230029404;П000230029405;П000230029406");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011407", "П000210027604;П000210027605;П000210027606");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100013003",
	 "П000100010003;П000210025003;П000210025203;П000400000105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100013004", "П000100010004;П000210025103;П000400000107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100013005", "П000100010005;П000220028403;П000400000108");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100013006",
	 "П000100010006;П000230029403;П000100012006;П000400000109");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100013007",
	 "П000100010007;П000210027603;П000100012007;П000400000110");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100014403", "П000100014103;П000100014203;П000100014303");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100014404", "П000100014104;П000100014204;П000100014304");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100014405", "П000100014105;П000100014205;П000100014305");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100014406", "П000100014106;П000100014206;П000100014306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100014407", "П000100014107;П000100014207;П000100014307");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100015003",
	 "П000100014003;П000100010003;П000210025003;П000210025203;П000400000105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100015004",
	 "П000100014004;П000100010004;П000210025103;П000400000107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100015005",
	 "П000100014005;П000100010005;П000220028403;П000400000108");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100015006",
	 "П000100014006;П000100010006;П000230029403;П000100012006;П000400000109");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100015007",
	 "П000100014007;П000100010007;П000210027603;П000100012007;П000400000110");
	
	// Раздел 2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210024003",
	 "П000210020103;П000210020303;П000210021103;П000210021303;П000210022103;П000210022303;П000210023103;П000210023303");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210024004",
	 "П000210020104;П000210020304;П000210021104;П000210021304;П000210022104;П000210022304;П000210023104;П000210023304");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210024005",
	 "П000210020105;П000210020305;П000210021105;П000210021305;П000210022105;П000210022305;П000210023105;П000210023305");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210024006",
	 "П000210020106;П000210020306;П000210021106;П000210021306;П000210022106;П000210022306;П000210023106;П000210023306");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210024103",
	 "П000210020203;П000210021203;П000210022203;П000210023203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210024104",
	 "П000210020204;П000210021204;П000210022204;П000210023204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210024105",
	 "П000210020205;П000210021205;П000210022205;П000210023205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210024106",
	 "П000210020206;П000210021206;П000210022206;П000210023206");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210027503",
	 "П000210027103;П000210027203;П000210027303;П000210027403");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210027504",
	 "П000210027104;П000210027204;П000210027304;П000210027404");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210027505",
	 "П000210027105;П000210027205;П000210027305;П000210027405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210027506",
	 "П000210027106;П000210027206;П000210027306;П000210027406");
	
	// Раздел 2.2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220028303", "П000220028003;П000220028103;П000220028203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220028304", "П000220028004;П000220028104;П000220028204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220028305", "П000220028005;П000220028105;П000220028205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220028306", "П000220028006;П000220028106;П000220028206");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000230029303", "П000230029003;П000230029103;П000230029203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000230029304", "П000230029004;П000230029104;П000230029204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000230029305", "П000230029005;П000230029105;П000230029205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000230029306", "П000230029006;П000230029106;П000230029206");
		
	// Раздел 3.1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000310000205", "П000310000105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000310000206", "П000310000106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000310000207", "П000310000107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000310000208", "П000310000108");
	
	// Раздел 3.2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000320032303", "П000320032103;П000320032203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000320032304", "П000320032104;П000320032204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000320032305", "П000320032105;П000320032205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000320032306", "П000320032106;П000320032206");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000330033303", "П000330033103;П000330033203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000330033304", "П000330033104;П000330033204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000330033305", "П000330033105;П000330033205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000330033306", "П000330033106;П000330033206");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000330033603", "П000330033403;П000330033503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000330033604", "П000330033404;П000330033504");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000330033605", "П000330033405;П000330033505");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000330033606", "П000330033406;П000330033506");
	
	// Раздел 3.4.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000340034303", "П000340034103;П000340034203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000340034304", "П000340034104;П000340034204");
	
	// Раздел 3.5.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000350000203", "П000350000103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000350000204", "П000350000104");
	
	// Раздел 3.6.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000360036303", "П000360036103;П000360036203");

	// Раздел 3.7.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000370037503",
	 "П000370037103;П000370037203;П000370037303;П000370037403");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000370037504",
	 "П000370037104;П000370037204;П000370037304;П000370037404");
	
	// Раздел 3.8.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000380038303", "П000380038103;П000380038203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000380038304", "П000380038104;П000380038204");
	
	// Раздел 4.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000205", "П000400000105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000206", "П000400000106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000207", "П000400000107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000208", "П000400000108");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000209", "П000400000109");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400000210", "П000400000110");
		
	// Раздел 5.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500000250", "П000500000150");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500000260", "П000500000160");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500000270", "П000500000170");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500000280", "П000500000180");
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь)
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;

	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();
    	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
    
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
		
	НачальнаяПодготовкаФормы();
	
	ПроверкаЗакраскиТитульного();		
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ЗначениеТаймера = ЗначениеТаймера();
		
		СохрФлажокОтклАвтоРасчет = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь;
			
		КонецЕсли;
		
		ЗаполнитьАвтоНаСервере();
		
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = СохрФлажокОтклАвтоРасчет;
		
		ЗаписатьЗамер(ЗначениеТаймера);
		
	КонецЕсли;
		
	Если НЕ РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ИмяОсновнойФормыРСВ1() = "ОсновнаяФорма"
	   И СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
	   
		Элементы.Выгрузить.Видимость                     = Ложь;
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
		Элементы.ПроверитьВыгрузку.Видимость             = Ложь;
		Элементы.ПроверитьВИнтернете.Видимость           = Ложь;
		
		Если НЕ СтруктураРеквизитовФормы.НеОтображатьПредупреждение Тогда
			Элементы.Предупреждение.Видимость = Истина;
		Иначе
			Элементы.Предупреждение.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		
		Элементы.Предупреждение.Видимость                = Ложь;
		Элементы.Выгрузить.Видимость                     = Истина;
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Истина;
		Элементы.ПроверитьВыгрузку.Видимость             = Истина;
		Элементы.ПроверитьВИнтернете.Видимость           = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВводСведенийОПредставителе()
	
	ТабличныйДокумент.Области.ОргПредНаим.Защита = Ложь;
	ТабличныйДокумент.Области.ОргПредНаим.ЦветФона = СтруктураРеквизитовФормы.ЦветЖелтый;
	
	ТабличныйДокумент.Области.ДокУпПред.Защита = Ложь;
	ТабличныйДокумент.Области.ДокУпПред.ЦветФона = СтруктураРеквизитовФормы.ЦветЖелтый;
	
	ТабличныйДокумент.Области.ОргПодписантФамилия.Значение = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗакраскиТитульного()

	Если ТабличныйДокумент.Области.ПрПодп.Значение = "1" Тогда
		
		ТабличныйДокумент.Области.ОргПредНаим.Защита = Истина;
		ТабличныйДокумент.Области.ОргПредНаим.ЦветФона = СтруктураРеквизитовФормы.ЦветБелый;
		
		ТабличныйДокумент.Области.ДокУпПред.Защита = Истина;
		ТабличныйДокумент.Области.ДокУпПред.ЦветФона = СтруктураРеквизитовФормы.ЦветБелый;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
            					
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения =
			 РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда	
			
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
	ФормироватьСтруктуруСтраницОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц()
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел22";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	                           	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел31";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы31;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 5;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел32";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел34";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел35";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы35;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел36";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел37";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел38";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2013Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2,
			 ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПрПодп", 1, , "Выбор подписанта",
	                            КоллекцияСписковВыбора["Подписант"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПрекращениеДеятельности", 1, , "Прекращение деятельности",
	 КоллекцияСписковВыбора["ПрекращениеДеятельности"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200001001", 2, , "Выбор тарифа",
	                            КоллекцияСписковВыбора["КодыТарифов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400000102", 2, ,
	                            "Выбор основания для доначисления страховых взносов",
	                            КоллекцияСписковВыбора["ОснованияДоначисления"]);
	
КонецПроцедуры

&НаСервере
Процедура НачальнаяПодготовкаФормы()

	Перем ИсходноеКоличествоСтрокГруппы;

	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
		
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
	СтруктураРеквизитовФормы.мАвтоВыборКодов       = Ложь;
	СтруктураРеквизитовФормы.ФлагСохранения        = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати          = Ложь;
	СтруктураРеквизитовФормы.ВидДокумента          = 0;
	
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	НомерКорректировки = 0;

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
        		
		НачальныеОперацииСМногострочнымиБлоками();
		
		мСтруктураДокУпПред = Новый Структура;
		мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
		мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
		мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
		мСтруктураДокУпПред.Вставить("КемВыдан", " ");
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
            ОтобразитьНомерКорректировки(ЭтаФорма);

			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
		КонецЕсли;
		
		Модифицированность = Истина;

	Иначе
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 2010
			   И Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > 2010 Тогда
				СтруктураРеквизитовФормы.мСкопированаИз2010 = Истина;
			КонецЕсли;
			ВосстановитьСохраненныеДанные();
			Модифицированность = Истина;
		Иначе
			ВосстановитьСохраненныеДанные();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
		
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ЗаполнитьДатуВЯчейкахНаСервере();
		ЗаполнитьСведенияОбОрганизации();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		НазваниеСтраницы          = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе = СтрокаУровня1.МногостраничностьВРазделе;
		
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда
			Продолжить;
		КонецЕсли;
		
		Если (СтруктураРеквизитовФормы.мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;

	Если ВидДокументаКорректирующий Тогда
		СтруктураРеквизитовФормы.ВидДокумента = 1;
		Если НомерКорректировки = 0 Тогда
			ТабличныйДокумент.Области.НомерКорректировки.Значение = 1;
			НомерКорректировки = 1;
		Иначе
			ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокумент.Области.НомерПачки.Значение = НомерПачки;
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
            			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          =
			 РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим,
				                                                     НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета()

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел22";
	СтрокаУровня1.Представление            = "Раздел 2.2-2.3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел31";
	СтрокаУровня1.Представление            = "Раздел 3.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел32";
	СтрокаУровня1.Представление            = "Раздел 3.2-3.3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел34";
	СтрокаУровня1.Представление            = "Раздел 3.4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел35";
	СтрокаУровня1.Представление            = "Раздел 3.5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел36";
	СтрокаУровня1.Представление            = "Раздел 3.6";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел37";
	СтрокаУровня1.Представление            = "Раздел 3.7";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел38";
	СтрокаУровня1.Представление            = "Раздел 3.8";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;

КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы35", СтруктураРеквизитовФормы.мИдГруппы35);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5", СтруктураРеквизитовФормы.мИдГруппы5);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы35", СтруктураРеквизитовФормы.мИдГруппы35);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5", СтруктураРеквизитовФормы.мИдГруппы5);
		
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы31 Тогда
		ТекТабличноеПоле = "Раздел31";	
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы35 Тогда
		ТекТабличноеПоле = "Раздел35";	
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы4 Тогда
		ТекТабличноеПоле = "Раздел4";	
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы5 Тогда
		ТекТабличноеПоле = "Раздел5";	
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <>
	     РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи                    					  = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                    					  = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	НомерПачки                                        = СтруктураРеквизитовФормы.мСохраненныйДок.НомерПачки;
	НомерКорректировки                                = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;

	// Восстанавливаем сохраненные данные отчета.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();

	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	// Восстанавливаем сохраненные данные многострочных разделов.
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;
	
	// Восстанавливаем сохраненные данные многостраничных разделов.
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				                     				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище"
								+ ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище"
							 + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок,
							 "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения"
					 + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// Восстанавливаем флажок подсчета страниц.
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
    	
	// Восстанавливаем  документ, подтверждающий полномочия представителя.
	СписокСохранения.Свойство("ДокументУпПред", мСтруктураДокУпПред);
	Если мСтруктураДокУпПред = Неопределено Тогда
		
		мСтруктураДокУпПред = Новый Структура;
		мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
		мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
		мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
		мСтруктураДокУпПред.Вставить("КемВыдан", " ");
		
	КонецЕсли;	
		
	// Восстанавливаем версию формы.
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			СтруктураРеквизитовФормы.ФлагСохранения = Истина;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// Восстановим сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	    	
	РегламентированнаяОтчетность.ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаФормыРСВ1(
	 ПоказателиОтчета, СтруктураДанныхТитульный);
	
	ЗаполнитьДатуВЯчейкахНаСервере();
		
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.КонвертироватьДанныеРаздела2СтарогоОбразцаФормыРСВ1(
	 ЭтаФорма[мСтруктураМногостраничныхРазделов.Раздел2]);
	
	СписокСохранения.Свойство("ОтображатьНулевыеЗначенияСтрок100и150Цифрами",
	 СтруктураРеквизитовФормы.НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами);
		
	СписокСохранения.Свойство("НаименованияЭлементовАдреса", СтруктураРеквизитовФормы.НаименованияЭлементовАдреса);
		
	СписокСохранения.Свойство("ДанныеОтчетаИзмененыВручную", СтруктураРеквизитовФормы.ДанныеОтчетаИзмененыВручную);
			
	Если СтруктураРеквизитовФормы.НаименованияЭлементовАдреса = Неопределено Тогда
		
		ДанныеАдреса = Новый Структура;
		ДанныеАдреса.Вставить("Индекс",          ТабличныйДокумент.Области.Адрес1.Значение);
		ДанныеАдреса.Вставить("Регион",          ТабличныйДокумент.Области.Адрес2.Значение);
		ДанныеАдреса.Вставить("Район",           ТабличныйДокумент.Области.Адрес3.Значение);
		ДанныеАдреса.Вставить("Город",           ТабличныйДокумент.Области.Адрес4.Значение);
		ДанныеАдреса.Вставить("НаселенныйПункт", ТабличныйДокумент.Области.Адрес5.Значение);
		ДанныеАдреса.Вставить("Улица",           ТабличныйДокумент.Области.Адрес6.Значение);
		ДанныеАдреса.Вставить("Дом",             ТабличныйДокумент.Области.Адрес7.Значение);
		ДанныеАдреса.Вставить("Корпус",          ТабличныйДокумент.Области.Адрес8.Значение);
		ДанныеАдреса.Вставить("Квартира",        ТабличныйДокумент.Области.Адрес9.Значение);
		
		ВосстановитьСокращенияЭлементовАдреса(ДанныеАдреса);
		
	КонецЕсли;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
    	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
    	
	Модифицированность   = Ложь;
   
	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	НомерКорректировкиСтрока = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(НомерКорректировкиСтрока,3,"0",0);
	
	Форма.ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаСервере
Процедура ПоказатьПериод()
    	
    НомерМесяца   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	СтруктураРеквизитовФормы.НомерГода = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	Если НЕ (НомерМесяца = "12") Тогда  
		НомерМесяца = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(НомерМесяца,2,0);
	КонецЕсли;
		
	ТабличныйДокумент.Области.Период.Значение = НомерМесяца;
	ТабличныйДокумент.Области.ОтчетГод.Значение = СтруктураРеквизитовФормы.НомерГода;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере()
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте()
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)

	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
		
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено)

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)

	Если ТипНП = Неопределено Тогда
		ТипНП = 0;

		Если (Форма.СтруктураРеквизитовФормы.Организация = Неопределено)
		 ИЛИ (Форма.СтруктураРеквизитовФормы.Организация
		  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;

		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		 Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, "ТипНП");
		ОргСведения.Свойство("ТипНП", ТипНП);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь, СменилсяПризнакПодписанта = Ложь)

	Если (СтруктураРеквизитовФормы.Организация  = Неопределено)
	 ИЛИ (СтруктураРеквизитовФормы.Организация
	  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОГРН"); 
		Сведения.Добавить("", "ОКАТО");
		Сведения.Добавить("", "РегистрационныйНомерФСС");
		Сведения.Добавить("", "АдрЮР");
		Сведения.Добавить("", "АдрФакт");
		Сведения.Добавить("", "АдрПрописки");
		Сведения.Добавить("", "АдрМЖ");
		
	КонецЕсли;

	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ФИО");
	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ТелСлуж");
    	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	 			  СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ИННЮЛ = "";
		КППЮЛ = "";
		НаимЮЛПол = "";
		ОГРН = "";
		ОКАТО = "";
		РегистрационныйНомерФСС = "";
		РегНомПФР = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		            СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "РегНомПФР").РегНомПФР;
        АдрЮР = "";
		АдрФакт = "";
		АдрПрописки = "";
		АдрМЖ = "";

	КонецЕсли;

	ФИОРук = "";
	ФИОБух = "";
	ФИО = "";
	ФИОИсп = "";
	ТелИсп = "";
	ТелОрганизации = "";
    ТелСлуж = "";
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОГРН", ОГРН);
		ОргСведения.Свойство("ОКАТО", ОКАТО);
		ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
		ОргСведения.Свойство("АдрЮР", АдрЮР);
		ОргСведения.Свойство("АдрФакт", АдрФакт);
		ОргСведения.Свойство("АдрПрописки", АдрПрописки);
		ОргСведения.Свойство("АдрМЖ", АдрМЖ);
		
	КонецЕсли;

	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ФИО", ФИО);
	ОргСведения.Свойство("ФИОИсп", ФИОИсп);
	ОргСведения.Свойство("ТелИсп", ТелИсп);
	ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
    ОргСведения.Свойство("ТелСлуж", ТелСлуж);
	
	Если ПБОЮЛ Тогда
		
		НаимЮлПол = ФИО;
		Адрес = АдрПрописки;
		ТелОрганизации = ТелСлуж;
		ФИОРук = ФИО;
		ФИОБух = "";
		ФИОИсп = "";
		ТелИсп = "";
		
	КонецЕсли;

	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	Если ВПрограммеИзмененаДатаПодписи Тогда

		ТабличныйДокумент.Области.ПрПодп.Значение = "1";
		ТабличныйДокумент.Области.ОргПодписантФамилия.Значение = ФИОРук;
		ЗапретитьВводСведенийОПредставителе(ЭтаФорма);

		Возврат;

	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ОргНазв.Значение)) Тогда
		ТабличныйДокумент.Области.ОргНазв.Значение = НаимЮЛПол;   	
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ПрПодп.Значение)) Или (СменилсяПризнакПодписанта) Тогда
		ТабличныйДокумент.Области.ПрПодп.Значение = "1"; 
	КонецЕсли;     	    
		
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ОргПодписантФамилия.Значение))
	 ИЛИ (СменилсяПризнакПодписанта) Тогда
		ТабличныйДокумент.Области.ОргПодписантФамилия.Значение = ФИОРук;    	
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ДокУпПред.Значение))
	 ИЛИ (СменилсяПризнакПодписанта) Тогда
		ЗапретитьВводСведенийОПредставителе(ЭтаФорма);
	КонецЕсли;    

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ИНН.Значение)) Тогда
		ТабличныйДокумент.Области.ИНН.Значение = ИННЮЛ;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.КПП.Значение)) Тогда
		ТабличныйДокумент.Области.КПП.Значение = КППЮЛ;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ОГРН.Значение)) Тогда
		ТабличныйДокумент.Области.ОГРН.Значение = ОГРН;
	КонецЕсли;

	РазрешенныеЗнаки = "0123456789";
	ОткорректированныйНомерТелефона = "";
	Для Инд = 1 По СтрДлина(ТелОрганизации) Цикл
		ТекущийСимвол = Сред(ТелОрганизации, Инд, 1);
		Если СтрНайти(РазрешенныеЗнаки, ТекущийСимвол) <> 0 Тогда
			ОткорректированныйНомерТелефона = ОткорректированныйНомерТелефона + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	ТелОрганизации = ОткорректированныйНомерТелефона;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ТелОрганизации.Значение)) Тогда
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ОКАТО.Значение) Тогда
		ТабличныйДокумент.Области.ОКАТО.Значение = ОКАТО;
	КонецЕсли;
		
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.НомРег.Значение)) Тогда
		Если СтрДлина(РегНомПФР) < 14 Тогда
			Если Сред(РегНомПФР, 4, 1) <> "-" Тогда
				РегНомПФР = Лев(РегНомПФР,3) + "-" + Сред(РегНомПФР, 4);
			КонецЕсли;	
			Если Сред(РегНомПФР, 8, 1) <> "-" Тогда
				РегНомПФР = Лев(РегНомПФР,7) + "-" + Сред(РегНомПФР, 8);
			КонецЕсли;
		КонецЕсли;	
		
		ТабличныйДокумент.Области.НомРег.Значение = РегНомПФР;
		
	КонецЕсли;
	
	Если Не ПБОЮЛ Тогда
		Адрес = АдрЮр;
	КонецЕсли;
	
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Адрес);
	
	Если НЕ СтруктураАдреса = Неопределено Тогда
		
		ТабличныйДокумент.Области.Адрес1.Значение = СтруктураАдреса.Индекс;
		ТабличныйДокумент.Области.Адрес2.Значение = СтруктураАдреса.Регион;
		ТабличныйДокумент.Области.Адрес3.Значение = СтруктураАдреса.Район;
		ТабличныйДокумент.Области.Адрес4.Значение = СтруктураАдреса.Город;
		ТабличныйДокумент.Области.Адрес5.Значение = СтруктураАдреса.НаселенныйПункт;
		ТабличныйДокумент.Области.Адрес6.Значение = СтруктураАдреса.Улица;
		ТабличныйДокумент.Области.Адрес7.Значение = СтруктураАдреса.Дом;
		ТабличныйДокумент.Области.Адрес8.Значение = СтруктураАдреса.Корпус;
		ТабличныйДокумент.Области.Адрес9.Значение = СтруктураАдреса.Квартира;
		
		СтруктураРеквизитовФормы.НаименованияЭлементовАдреса = Новый Структура;
		СтруктураРеквизитовФормы.НаименованияЭлементовАдреса.Вставить("ТипДома",     СтруктураАдреса.ТипДома);
		СтруктураРеквизитовФормы.НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  СтруктураАдреса.ТипКорпуса);
		СтруктураРеквизитовФормы.НаименованияЭлементовАдреса.Вставить("ТипКвартиры", СтруктураАдреса.ТипКвартиры);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено,
	                                        ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено,
	                                        ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено,
	                               ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
    	
	Если Не ИмяЯчейки = Неопределено Тогда
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма,
			                                                                                                         ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма,
			                                                                                                          ИмяЯчейки);
		#КонецЕсли
		
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;
				
				Попытка
					ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
					Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Комментарий;
					КонецЕсли;
					
					Ключ = "_" + ВариантЗаполнения;
					Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
					
					Если ВариантЗаполнения = 4 Тогда
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
					
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				Исключение 	КонецПопытки;
				
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
    	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
					
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя,
		                                                     ИсходноеКоличествоСтрокГруппы,
															 ТекущееКоличествоСтрокГруппы,
															 ИмяГруппы, СтруктураГруппы);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];

		Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области.Найти(ИмяЯчейки);
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы <> Неопределено Тогда
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
						
						ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
						
					Иначе
						
						ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
						
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя,
	                                                     ИсходноеКоличествоСтрокГруппы,
														 ТекущееКоличествоСтрокГруппы,
														 ИмяГруппы, СтруктураГруппы) Экспорт
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	Если ИмяГруппы = "П0003100001" Тогда
		ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 5,
		                                 , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы * 5 - 1),
										 ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
			
			Для Каждого Область Из ОбластьДопСтроки.Области Цикл
				
				Если СтрЧислоВхождений(Область.Имя, "П000310000132") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "П000310000142") > 0 Тогда
				 
				 	ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы * 5
					                                          - НомНовойСтроки * 5 + 1, Область.Лево, МногострочнаяЧастьВерх
															  + ТекущееКоличествоСтрокГруппы * 5 - НомНовойСтроки * 5 + 1,
															  Область.Право);
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "П000310000133") > 0
				      ИЛИ СтрЧислоВхождений(Область.Имя, "П000310000143") > 0 Тогда
					  
					ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы * 5
					                                          - НомНовойСтроки * 5 + 2, Область.Лево, МногострочнаяЧастьВерх
															  + ТекущееКоличествоСтрокГруппы * 5 - НомНовойСтроки * 5 + 2,
															  Область.Право); 
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "П000310000134") > 0
				      ИЛИ СтрЧислоВхождений(Область.Имя, "П000310000144") > 0 Тогда
					  
					 ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы * 5
					                                           - НомНовойСтроки * 5 + 3, Область.Лево, МногострочнаяЧастьВерх
															   + ТекущееКоличествоСтрокГруппы * 5 - НомНовойСтроки * 5 + 3,
															   Область.Право);  
					  
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "П000310000135") > 0
				      ИЛИ СтрЧислоВхождений(Область.Имя, "П000310000145") > 0 Тогда
					
					ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы * 5
					                                          - НомНовойСтроки * 5 + 4, Область.Лево, МногострочнаяЧастьВерх
															  + ТекущееКоличествоСтрокГруппы * 5 - НомНовойСтроки * 5 + 4,
															  Область.Право);
					
				Иначе
					
					ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы * 5
					                                         - НомНовойСтроки * 5, Область.Лево, МногострочнаяЧастьВерх
															 + ТекущееКоличествоСтрокГруппы * 5 - НомНовойСтроки * 5,
															 Область.Право);
					
				КонецЕсли;
				
				Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
					
					Если ОбластьТаблДок.СодержитЗначение ИЛИ СтрЧислоВхождений(Область.Имя, "УдалитьСтрокуП") Тогда
						
						ОбластьТаблДок.Очистить();
						
						ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_"))
											+ Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, ,
		ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх + 4).Имя = "";
		
		ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх + 4).Имя = "МногострочнаяЧасть";
		
	Иначе
		
		ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, ,
		                                 МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1),
										 ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
			
			Для Каждого Область Из ОбластьДопСтроки.Области Цикл
				
				ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки,
				                                          Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы
														  - НомНовойСтроки, Область.Право);
				
				Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
					
					Если ОбластьТаблДок.СодержитЗначение Тогда
						ОбластьТаблДок.Очистить();
					КонецЕсли;
					
					ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы
					                                                                        - НомНовойСтроки + 1);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, ,
		ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх).Имя = "";
		
		ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = "МногострочнаяЧасть";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы35", СтруктураРеквизитовФормы.мИдГруппы35);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5", СтруктураРеквизитовФормы.мИдГруппы5);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы35", СтруктураРеквизитовФормы.мИдГруппы35);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5", СтруктураРеквизитовФормы.мИдГруппы5);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено,
	                                                        ИдГрупп)
	Перем ИмяГруппы;
		
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел31" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы31;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел35" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы35;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы4;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы5;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)

	ИмяГруппы = Лев(ИмяПоказателя, 11);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели,
		                                                                                       ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма,
		                                                               ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	 "ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();

	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	ЕстьИзмененияНастройкаСтраниц = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		Модифицированность = Истина;

		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено.'");

		Сообщение.Сообщить();

	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены.'");

		Сообщение.Сообщить();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено)
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	 КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповСтрока15   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	
	ОписаниеТиповСтрока100  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	ОписаниеТиповСтрока50   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	
	ОписаниеТиповЧисло1     = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	
	ОписаниеТиповЧисло15    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ЕстьИзменения = Ложь;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
        ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 ); 
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			стрВариантЗаполнения =
			 РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
								
				МассивВариантовЗаполненияСтраниц.Очистить();
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);

				ЕстьИзменения = Истина;				
				
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Выгрузить();
					
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	ФормироватьСтруктуруСтраницОтчета();

	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок,
			                                                   ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(
			 ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество()
	  <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		ЗначениеРеквизитаДеревоСтраницОтчета = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
		
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если ЗначениеРеквизитаДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		Если ТекСтрока.ИмяПоляТабличногоДокум
		  <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводСведенийОПредставителе(Форма)
	
	Форма.ТабличныйДокумент.Области.ОргПредНаим.Значение = "";
	Форма.ТабличныйДокумент.Области.ОргПредНаим.Защита = Истина;
	Форма.ТабличныйДокумент.Области.ОргПредНаим.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветБелый;
	
	Форма.ТабличныйДокумент.Области.ДокУпПред.Значение = "";
	
	Форма.мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
	Форма.мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
	Форма.мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
	Форма.мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
	Форма.мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
	Форма.мСтруктураДокУпПред.Вставить("КемВыдан", " ");
	
	Форма.ТабличныйДокумент.Области.ДокУпПред.Защита = Истина;
	Форма.ТабличныйДокумент.Области.ДокУпПред.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветБелый;
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле)

	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По Форма[ТабличноеПоле].Области.Количество() - 1 Цикл
		ТекущаяОбласть = Форма[ТабличноеПоле].Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

// СохранитьНаКлиенте
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * СтруктураДанныхТитульный.НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	РезультатСохранения = ПередСохранением("не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Неопределено, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
	Оповестить("ВыполненоСохранениеФормыРСВ1", СтруктураРеквизитовФормы.мСохраненныйДок, );
	
КонецПроцедуры
// СохранитьНаКлиенте

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант,
	                     ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	                                                ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
	 ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено)
	 ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
	    Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	     ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, , Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант,
	              ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела)
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение,
		                Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(
	                                                                    СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.НомерПачки               = НомерПачки;

	СтруктураРеквизитовФормы.мВариант = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	                                                                  		
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// Сохраняем номер пачки.
	НомерПачкиИзРегистра = РегламентированнаяОтчетность.ПолучитьНомерПачкиВыгруженныхФайловПФР(
	 СтруктураРеквизитовФормы.Организация, Число(СтруктураДанныхТитульный.ОтчетГод));
	
	Если НЕ ЗначениеЗаполнено(НомерПачки) Тогда
		НомерПачки = НомерПачкиИзРегистра + 1;
	КонецЕсли;
			
	СтруктураРеквизитовФормы.мСохраненныйДок.НомерПачки = НомерПачки;
		
	// Формируем данные редактируемых ячеек таблицы.
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// Формируем список сохранения.
	СписокСохранения = Новый Структура();
    	
	// Вставляем данные редактируемых ячеек таблицы.
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
    	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение],
		 Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// Вставляем данные многострочных разделов.
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение],
		 Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление
					    = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок
						 = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// Вставляем данные многостраничных разделов.
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// Вставляем данные вариантов автозаполнения ячеек.
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

	// Вствляем версию формы.
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// Вствляем флажок пересчета страниц.
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	// Вствляем флажок отключения.
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	// Вставляем документ, подтверждающий полномочия представителя.
	СписокСохранения.Вставить("ДокументУпПред", мСтруктураДокУпПред);
	
	СписокСохранения.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами",
	 СтруктураРеквизитовФормы.НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами);
	
	СписокСохранения.Вставить("НаименованияЭлементовАдреса", СтруктураРеквизитовФормы.НаименованияЭлементовАдреса);
	
	СписокСохранения.Вставить("ДанныеОтчетаИзмененыВручную", СтруктураРеквизитовФормы.ДанныеОтчетаИзмененыВручную);
		
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// Записываем документ, хранящий данные отчета.
	Попытка
		
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		
		Если НомерПачки > НомерПачкиИзРегистра Тогда
			
			 РегламентированнаяОтчетность.УстановитьНомерПачкиВыгруженныхФайловПФР(СтруктураРеквизитовФормы.Организация,
			 Число(СтруктураДанныхТитульный.ОтчетГод), НомерПачки);
			 
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
				ТабличныйДокумент.Области.НомерПачки.Значение = НомерПачки;
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			 РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
						
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
		Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
				
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Раздел2" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение Тогда	
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Раздел2" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел2";
			
		КонецЕсли;
		
		АктивныеСтраницы = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивныеСтраницы[0];
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			Для каждого Страница Из АктивныеСтраницы Цикл
				Страница.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			Страница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли; 
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел31"
		  ИЛИ НаимРаздела = "Раздел35"
		  ИЛИ НаимРаздела = "Раздел4"
		  ИЛИ НаимРаздела = "Раздел5" Тогда
		  
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
				
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
		
 	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
					
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Раздел2" Тогда
		
    	НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел2";
		
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 ИЛИ ЗаголовокРаздела Тогда
				
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
	    СтруктураДанных = Новый Структура;
		
		ТаблицаАктивнойСтраницы = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1];
		
	    СписокДанных = ТаблицаАктивнойСтраницы.Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла; 
		
		ТаблицаАктивнойСтраницы.АктивнаяСтраница = Истина;
		
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
	    КонецЦикла;
						
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел31"
		  ИЛИ ИмяТекРаздела = "Раздел35"
		  ИЛИ ИмяТекРаздела = "Раздел4"
		  ИЛИ ИмяТекРаздела = "Раздел5" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		ЕстьДопСтроки = Ложь;
		
		Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				ЕстьДопСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьДопСтроки Тогда
			Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Гиперссылка = Истина;
					ОбластьТД.Текст = "х";
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Гиперссылка = Ложь;
					ОбластьТД.Текст = "";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	// Обычные разделы.
	//	
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		УправлениеЛистамиНаСервере();
		ПроверкаЗакраскиТитульного();
		
	Иначе
		
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
	КонецЕсли;
	
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		УстановитьФорматОтображенияНулевыхЗначенийСтрок100и150();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора,
	                       СтандартнаяОбработка, КолонкаПоиска = "Код")
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ="))
		  <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель
			                                             + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ОблПрПодписанта = ТабличныйДокумент.Области.Найти("ПрПодп");
	ПрПодписанта = ?(ОблПрПодписанта = Неопределено, "", ОблПрПодписанта.Значение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, ПрПодписанта, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, ПрПодписанта, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	                      ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	ПрПодписанта = ДополнительныеПараметры.ПрПодписанта;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(
		ЭтаФорма, КодПоказателя) > 0 Тогда	
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
	Если Область.Имя = "ПрПодп" Тогда
		ПрПодписантаНов = ТабличныйДокумент.Области.ПрПодп.Значение;
		СменилсяПрПодписанта = ?(ПрПодписанта = ПрПодписантаНов, Ложь, Истина);
		Если СменилсяПрПодписанта Тогда
			Если ПрПодписантаНов = "1" Тогда
				ЗаполнитьСведенияОбОрганизации(Истина);
			Иначе
				РазрешитьВводСведенийОПредставителе();
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", ОбластьИмя = "")
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда // Раздел 1
					
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100013003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100013003.Значение = Форма.ТабличныйДокумент.Области.П000100010003.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100011003.Значение
															 		   + Форма.ТабличныйДокумент.Области.П000100012003.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100013003 = Форма.СтруктураДанныхРаздел1.П000100010003
														   + Форма.СтруктураДанныхРаздел1.П000100011003
														   + Форма.СтруктураДанныхРаздел1.П000100012003;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100013004, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100013004.Значение = Форма.ТабличныйДокумент.Области.П000100010004.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100011004.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100012004.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100013004 = Форма.СтруктураДанныхРаздел1.П000100010004
														   + Форма.СтруктураДанныхРаздел1.П000100011004
														   + Форма.СтруктураДанныхРаздел1.П000100012004;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100013005, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100013005.Значение = Форма.ТабличныйДокумент.Области.П000100010005.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100011005.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100012005.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100013005 = Форма.СтруктураДанныхРаздел1.П000100010005
														   + Форма.СтруктураДанныхРаздел1.П000100011005
														   + Форма.СтруктураДанныхРаздел1.П000100012005;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100013006, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100013006.Значение = Форма.ТабличныйДокумент.Области.П000100010006.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100011006.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100012006.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100013006 = Форма.СтруктураДанныхРаздел1.П000100010006
														   + Форма.СтруктураДанныхРаздел1.П000100011006
														   + Форма.СтруктураДанныхРаздел1.П000100012006;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100013007, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100013007.Значение = Форма.ТабличныйДокумент.Области.П000100010007.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100011007.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100012007.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100013007 = Форма.СтруктураДанныхРаздел1.П000100010007
														   + Форма.СтруктураДанныхРаздел1.П000100011007
														   + Форма.СтруктураДанныхРаздел1.П000100012007;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100014403, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100014403.Значение = Форма.ТабличныйДокумент.Области.П000100014103.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100014203.Значение
															 		   + Форма.ТабличныйДокумент.Области.П000100014303.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100014403 = Форма.СтруктураДанныхРаздел1.П000100014103
														   + Форма.СтруктураДанныхРаздел1.П000100014203
														   + Форма.СтруктураДанныхРаздел1.П000100014303;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100014404, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100014404.Значение = Форма.ТабличныйДокумент.Области.П000100014104.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100014204.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100014304.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100014404 = Форма.СтруктураДанныхРаздел1.П000100014104
														   + Форма.СтруктураДанныхРаздел1.П000100014204
														   + Форма.СтруктураДанныхРаздел1.П000100014304;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100014405, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100014405.Значение = Форма.ТабличныйДокумент.Области.П000100014105.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100014205.Значение
															 		   + Форма.ТабличныйДокумент.Области.П000100014305.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100014405 = Форма.СтруктураДанныхРаздел1.П000100014105
														   + Форма.СтруктураДанныхРаздел1.П000100014205
														   + Форма.СтруктураДанныхРаздел1.П000100014305;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100014406, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100014406.Значение = Форма.ТабличныйДокумент.Области.П000100014106.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100014206.Значение
															 		   + Форма.ТабличныйДокумент.Области.П000100014306.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100014406 = Форма.СтруктураДанныхРаздел1.П000100014106
														   + Форма.СтруктураДанныхРаздел1.П000100014206
														   + Форма.СтруктураДанныхРаздел1.П000100014306;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100014407, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100014407.Значение = Форма.ТабличныйДокумент.Области.П000100014107.Значение
															  		   + Форма.ТабличныйДокумент.Области.П000100014207.Значение
															 		   + Форма.ТабличныйДокумент.Области.П000100014307.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100014407 = Форма.СтруктураДанныхРаздел1.П000100014107
														   + Форма.СтруктураДанныхРаздел1.П000100014207
														   + Форма.СтруктураДанныхРаздел1.П000100014307;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100015003, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100015003.Значение = Форма.ТабличныйДокумент.Области.П000100013003.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000100014003.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100015003 = Форма.СтруктураДанныхРаздел1.П000100013003
														   - Форма.СтруктураДанныхРаздел1.П000100014003;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100015004, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100015004.Значение = Форма.ТабличныйДокумент.Области.П000100013004.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000100014004.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100015004 = Форма.СтруктураДанныхРаздел1.П000100013004
														   - Форма.СтруктураДанныхРаздел1.П000100014004;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100015005, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100015005.Значение = Форма.ТабличныйДокумент.Области.П000100013005.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000100014005.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100015005 = Форма.СтруктураДанныхРаздел1.П000100013005
														   - Форма.СтруктураДанныхРаздел1.П000100014005;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100015006, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100015006.Значение = Форма.ТабличныйДокумент.Области.П000100013006.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000100014006.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100015006 = Форма.СтруктураДанныхРаздел1.П000100013006
														   - Форма.СтруктураДанныхРаздел1.П000100014006;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100015007, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100015007.Значение = Форма.ТабличныйДокумент.Области.П000100013007.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000100014007.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100015007 = Форма.СтруктураДанныхРаздел1.П000100013007
														   - Форма.СтруктураДанныхРаздел1.П000100014007;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]];
		
		Для Каждого Страница Из ТаблицаРаздела Цикл
			
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			
			Данные = Страница.Данные[0].Значение;
					
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210024003, ОбластьИмя) > 0 Тогда
				Данные.П000210024003 = Данные.П000210020103
									 + Данные.П000210020303
									 - Данные.П000210021103
									 - Данные.П000210021303
									 - Данные.П000210022103
									 - Данные.П000210022303
									 - Данные.П000210023103
									 - Данные.П000210023303;
				Если Страница.АктивнаяСтраница Тогда
					Форма.ТабличныйДокумент.Области.П000210024003.Значение = Данные.П000210024003;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210024004, ОбластьИмя) > 0 Тогда
				Данные.П000210024004 = Данные.П000210020104
									 + Данные.П000210020304
									 - Данные.П000210021104
									 - Данные.П000210021304
									 - Данные.П000210022104
									 - Данные.П000210022304
									 - Данные.П000210023104
									 - Данные.П000210023304;
				Если Страница.АктивнаяСтраница Тогда
					Форма.ТабличныйДокумент.Области.П000210024004.Значение = Данные.П000210024004;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210024005, ОбластьИмя) > 0 Тогда
				Данные.П000210024005 = Данные.П000210020105
									 + Данные.П000210020305
									 - Данные.П000210021105
									 - Данные.П000210021305
									 - Данные.П000210022105
									 - Данные.П000210022305
									 - Данные.П000210023105
									 - Данные.П000210023305;
				Если Страница.АктивнаяСтраница Тогда
					Форма.ТабличныйДокумент.Области.П000210024005.Значение = Данные.П000210024005;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210024006, ОбластьИмя) > 0 Тогда
				Данные.П000210024006 = Данные.П000210020106
									 + Данные.П000210020306
									 - Данные.П000210021106
									 - Данные.П000210021306
									 - Данные.П000210022106
									 - Данные.П000210022306
									 - Данные.П000210023106
									 - Данные.П000210023306;
				Если Страница.АктивнаяСтраница Тогда
					Форма.ТабличныйДокумент.Области.П000210024006.Значение = Данные.П000210024006;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210024103, ОбластьИмя) > 0 Тогда
				Данные.П000210024103 = Данные.П000210020203
									 - Данные.П000210021203
									 - Данные.П000210022203
									 - Данные.П000210023203;
				Если Страница.АктивнаяСтраница Тогда
					Форма.ТабличныйДокумент.Области.П000210024103.Значение = Данные.П000210024103;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210024104, ОбластьИмя) > 0 Тогда
				Данные.П000210024104 = Данные.П000210020204
									 - Данные.П000210021204
									 - Данные.П000210022204
									 - Данные.П000210023204;
				Если Страница.АктивнаяСтраница Тогда
					Форма.ТабличныйДокумент.Области.П000210024104.Значение = Данные.П000210024104;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210024105, ОбластьИмя) > 0 Тогда
				Данные.П000210024105 = Данные.П000210020205
									 - Данные.П000210021205
									 - Данные.П000210022205
									 - Данные.П000210023205;
				Если Страница.АктивнаяСтраница Тогда
					Форма.ТабличныйДокумент.Области.П000210024105.Значение = Данные.П000210024105;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210024106, ОбластьИмя) > 0 Тогда
				Данные.П000210024106 = Данные.П000210020206
									 - Данные.П000210021206
									 - Данные.П000210022206
									 - Данные.П000210023206;
				Если Страница.АктивнаяСтраница Тогда
					Форма.ТабличныйДокумент.Области.П000210024106.Значение = Данные.П000210024106;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210027503, ОбластьИмя) > 0 Тогда
				Данные.П000210027503 = Данные.П000210027103
									 - Данные.П000210027203
									 - Данные.П000210027303
									 - Данные.П000210027403;
				Если Страница.АктивнаяСтраница Тогда
					Форма.ТабличныйДокумент.Области.П000210027503.Значение = Данные.П000210027503;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210027504, ОбластьИмя) > 0 Тогда
				Данные.П000210027504 = Данные.П000210027104
									 - Данные.П000210027204
									 - Данные.П000210027304
									 - Данные.П000210027404;
				Если Страница.АктивнаяСтраница Тогда
					Форма.ТабличныйДокумент.Области.П000210027504.Значение = Данные.П000210027504;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210027505, ОбластьИмя) > 0 Тогда
				Данные.П000210027505 = Данные.П000210027105
									 - Данные.П000210027205
									 - Данные.П000210027305
									 - Данные.П000210027405;
				Если Страница.АктивнаяСтраница Тогда
					Форма.ТабличныйДокумент.Области.П000210027505.Значение = Данные.П000210027505;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210027506, ОбластьИмя) > 0 Тогда
				Данные.П000210027506 = Данные.П000210027106
									 - Данные.П000210027206
									 - Данные.П000210027306
									 - Данные.П000210027406;
				Если Страница.АктивнаяСтраница Тогда
					Форма.ТабличныйДокумент.Области.П000210027506.Значение = Данные.П000210027506;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011003, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011003 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210025003", Ложь)
									 					   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210025203", Ложь);														   
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011004, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210025103", Ложь);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011007, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011007 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210027603", Ложь);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011103, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011103 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210025004", Ложь)
									 					   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210025204", Ложь);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011104, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011104 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210025104", Ложь);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011107, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011107 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210027604", Ложь);
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011203, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011203 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210025005", Ложь)
									 					   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210025205", Ложь);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011204, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011204 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210025105", Ложь);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011207, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011207 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210027605", Ложь);
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011303, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011303 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210025006", Ложь)
														   + СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210025206", Ложь);											   
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011304, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011304 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210025106", Ложь);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011307, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011307 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел2", "П000210027606", Ложь);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011403, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011403 = Форма.СтруктураДанныхРаздел1.П000100011103
									 					   + Форма.СтруктураДанныхРаздел1.П000100011203
									 					   + Форма.СтруктураДанныхРаздел1.П000100011303;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011404, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011404 = Форма.СтруктураДанныхРаздел1.П000100011104
									 					   + Форма.СтруктураДанныхРаздел1.П000100011204
									 					   + Форма.СтруктураДанныхРаздел1.П000100011304;
			КонецЕсли;
													   
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011407, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел1.П000100011407 = Форма.СтруктураДанныхРаздел1.П000100011107
									 					   + Форма.СтруктураДанныхРаздел1.П000100011207
									 					   + Форма.СтруктураДанныхРаздел1.П000100011307;
			КонецЕсли;
			
		КонецЦикла;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел22" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220028303, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000220028303.Значение = Форма.ТабличныйДокумент.Области.П000220028003.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000220028103.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000220028203.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000220028303 = Форма.СтруктураДанныхРаздел22.П000220028003
														    - Форма.СтруктураДанныхРаздел22.П000220028103
														    - Форма.СтруктураДанныхРаздел22.П000220028203;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220028304, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000220028304.Значение = Форма.ТабличныйДокумент.Области.П000220028004.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000220028104.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000220028204.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000220028304 = Форма.СтруктураДанныхРаздел22.П000220028004
														    - Форма.СтруктураДанныхРаздел22.П000220028104
														    - Форма.СтруктураДанныхРаздел22.П000220028204;
			КонецЕсли;
													   
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220028305, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000220028305.Значение = Форма.ТабличныйДокумент.Области.П000220028005.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000220028105.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000220028205.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000220028305 = Форма.СтруктураДанныхРаздел22.П000220028005
														    - Форма.СтруктураДанныхРаздел22.П000220028105
														    - Форма.СтруктураДанныхРаздел22.П000220028205;
			КонецЕсли;
													   
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220028306, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000220028306.Значение = Форма.ТабличныйДокумент.Области.П000220028006.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000220028106.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000220028206.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000220028306 = Форма.СтруктураДанныхРаздел22.П000220028006
														    - Форма.СтруктураДанныхРаздел22.П000220028106
														    - Форма.СтруктураДанныхРаздел22.П000220028206;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230029303, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000230029303.Значение = Форма.ТабличныйДокумент.Области.П000230029003.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000230029103.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000230029203.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000230029303 = Форма.СтруктураДанныхРаздел22.П000230029003
														   	- Форма.СтруктураДанныхРаздел22.П000230029103
														   	- Форма.СтруктураДанныхРаздел22.П000230029203;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230029304, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000230029304.Значение = Форма.ТабличныйДокумент.Области.П000230029004.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000230029104.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000230029204.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000230029304 = Форма.СтруктураДанныхРаздел22.П000230029004
														   	- Форма.СтруктураДанныхРаздел22.П000230029104
														   	- Форма.СтруктураДанныхРаздел22.П000230029204;
			КонецЕсли;
														
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230029305, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000230029305.Значение = Форма.ТабличныйДокумент.Области.П000230029005.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000230029105.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000230029205.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000230029305 = Форма.СтруктураДанныхРаздел22.П000230029005
														   	- Форма.СтруктураДанныхРаздел22.П000230029105
														   	- Форма.СтруктураДанныхРаздел22.П000230029205;
			КонецЕсли;
														
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230029306, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.ТабличныйДокумент.Области.П000230029306.Значение = Форма.ТабличныйДокумент.Области.П000230029006.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000230029106.Значение
															  		   - Форма.ТабличныйДокумент.Области.П000230029206.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел22.П000230029306 = Форма.СтруктураДанныхРаздел22.П000230029006
														   	- Форма.СтруктураДанныхРаздел22.П000230029106
														   	- Форма.СтруктураДанныхРаздел22.П000230029206;
			КонецЕсли;
														
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011305, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011305 = Форма.ТабличныйДокумент.Области.П000220028406.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011305 = Форма.СтруктураДанныхРаздел22.П000220028406;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011306, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011306 = Форма.ТабличныйДокумент.Области.П000230029406.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011306 = Форма.СтруктураДанныхРаздел22.П000230029406;
			КонецЕсли;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011205, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011205 = Форма.ТабличныйДокумент.Области.П000220028405.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011205 = Форма.СтруктураДанныхРаздел22.П000220028405;
			КонецЕсли;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011206, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011206 = Форма.ТабличныйДокумент.Области.П000230029405.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011206 = Форма.СтруктураДанныхРаздел22.П000230029405;
			КонецЕсли;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011105, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011105 = Форма.ТабличныйДокумент.Области.П000220028404.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011105 = Форма.СтруктураДанныхРаздел22.П000220028404;
			КонецЕсли;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011106, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011106 = Форма.ТабличныйДокумент.Области.П000230029404.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011106 = Форма.СтруктураДанныхРаздел22.П000230029404;
			КонецЕсли;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011005, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011005 = Форма.ТабличныйДокумент.Области.П000220028403.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011005 = Форма.СтруктураДанныхРаздел22.П000220028403;
			КонецЕсли;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011006, ОбластьИмя) > 0 Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22" Тогда
				Форма.СтруктураДанныхРаздел1.П000100011006 = Форма.ТабличныйДокумент.Области.П000230029403.Значение;
			Иначе
				Форма.СтруктураДанныхРаздел1.П000100011006 = Форма.СтруктураДанныхРаздел22.П000230029403;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011405, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011405 = Форма.СтруктураДанныхРаздел1.П000100011105
													   + Форма.СтруктураДанныхРаздел1.П000100011205
													   + Форма.СтруктураДанныхРаздел1.П000100011305;
		КонецЕсли;
												   
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011406, ОбластьИмя) > 0 Тогда
			Форма.СтруктураДанныхРаздел1.П000100011406 = Форма.СтруктураДанныхРаздел1.П000100011106
													   + Форма.СтруктураДанныхРаздел1.П000100011206
													   + Форма.СтруктураДанныхРаздел1.П000100011306;
		КонецЕсли;
												   
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел31" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310000205, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы31, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка5 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
					
					Колонка5 = Колонка5 + Форма.ТабличныйДокумент.Области["П000310000105_" + Ном].Значение;
					
				Иначе
					
					Колонка5 = Колонка5 + ТаблицаБлока[Ном - 1].П000310000105;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
				
				Форма.ТабличныйДокумент.Области.П000310000205.Значение = Колонка5;		
				
			Иначе
				
				Форма.СтруктураДанныхРаздел31.Вставить("П000310000205", Колонка5);
				
			КонецЕсли;
						
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310000206, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы31, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка6 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
				
					Колонка6 = Колонка6 + Форма.ТабличныйДокумент.Области["П000310000106_" + Ном].Значение;
					
				Иначе
					
					Колонка6 = Колонка6 + ТаблицаБлока[Ном - 1].П000310000106;
				
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
				
				Форма.ТабличныйДокумент.Области.П000310000206.Значение = Колонка6;
				
			Иначе
												
				Форма.СтруктураДанныхРаздел31.Вставить("П000310000206", Колонка6);
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310000207, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы31, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка7 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
				
					Колонка7 = Колонка7 + Форма.ТабличныйДокумент.Области["П000310000107_" + Ном].Значение;
					
				Иначе
					
					Колонка7 = Колонка7 + ТаблицаБлока[Ном - 1].П000310000107;
					
				КонецЕсли;
								
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
				
				Форма.ТабличныйДокумент.Области.П000310000207.Значение = Колонка7;		
				
			Иначе
				
				Форма.СтруктураДанныхРаздел31.Вставить("П000310000207", Колонка7);
				
			КонецЕсли;
						
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310000208, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы31, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка8 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
					
					Колонка8 = Колонка8 + Форма.ТабличныйДокумент.Области["П000310000108_" + Ном].Значение;
					
				Иначе
					
					Колонка8 = Колонка8 + ТаблицаБлока[Ном - 1].П000310000108;
					
				КонецЕсли;
								
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
				
				Форма.ТабличныйДокумент.Области.П000310000208.Значение = Колонка8;		
				
			Иначе
				
				Форма.СтруктураДанныхРаздел31.Вставить("П000310000208", Колонка8);
				
			КонецЕсли;
						
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел32" Тогда
			
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000320032303, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				
				П000320032103 = Форма.ТабличныйДокумент.Области.П000320032103.Значение;
				П000320032203 = Форма.ТабличныйДокумент.Области.П000320032203.Значение;
				
				Форма.ТабличныйДокумент.Области.П000320032303.Значение
				 = ? (П000320032103 <> 0, (П000320032203 / П000320032103) * 100, 0);
				
			Иначе
				
				П000320032103 = Форма.СтруктураДанныхРаздел32.П000320032103;
				П000320032203 = Форма.СтруктураДанныхРаздел32.П000320032203;
				
				Форма.СтруктураДанныхРаздел32.Вставить("П000320032303",
				 ? (П000320032103 <> 0, (П000320032203 / П000320032103) * 100, 0));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000320032304, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				
				П000320032104 = Форма.ТабличныйДокумент.Области.П000320032104.Значение;
				П000320032204 = Форма.ТабличныйДокумент.Области.П000320032204.Значение;
				
				Форма.ТабличныйДокумент.Области.П000320032304.Значение
				 = ? (П000320032104 <> 0, (П000320032204 / П000320032104) * 100, 0);
				
			Иначе
				
				П000320032104 = Форма.СтруктураДанныхРаздел32.П000320032104;
				П000320032204 = Форма.СтруктураДанныхРаздел32.П000320032204;
				
				Форма.СтруктураДанныхРаздел32.Вставить("П000320032304",
				 ?(П000320032104 <> 0, (П000320032204 / П000320032104) * 100, 0));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000320032305, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				
				П000320032105 = Форма.ТабличныйДокумент.Области.П000320032105.Значение;
				П000320032205 = Форма.ТабличныйДокумент.Области.П000320032205.Значение;
				
				Форма.ТабличныйДокумент.Области.П000320032305.Значение
				 = ? (П000320032105 <> 0, (П000320032205 / П000320032105) * 100, 0);
				
			Иначе
				
				П000320032105 = Форма.СтруктураДанныхРаздел32.П000320032105;
				П000320032205 = Форма.СтруктураДанныхРаздел32.П000320032205;
				
				Форма.СтруктураДанныхРаздел32.Вставить("П000320032305",
				 ?(П000320032105 <> 0, (П000320032205 / П000320032105) * 100, 0));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000320032306, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				
				П000320032106 = Форма.ТабличныйДокумент.Области.П000320032106.Значение;
				П000320032206 = Форма.ТабличныйДокумент.Области.П000320032206.Значение;
				
				Форма.ТабличныйДокумент.Области.П000320032306.Значение 
				 = ? (П000320032106 <> 0, (П000320032206 / П000320032106) * 100, 0);
				
			Иначе
				
				П000320032106 = Форма.СтруктураДанныхРаздел32.П000320032106;
				П000320032206 = Форма.СтруктураДанныхРаздел32.П000320032206;
				
				Форма.СтруктураДанныхРаздел32.Вставить("П000320032306",
				 ? (П000320032106 <> 0, (П000320032206 / П000320032106) * 100, 0));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000330033303, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				
				П000330033103 = Форма.ТабличныйДокумент.Области.П000330033103.Значение;
				П000330033203 = Форма.ТабличныйДокумент.Области.П000330033203.Значение;
				
				Форма.ТабличныйДокумент.Области.П000330033303.Значение
				 = ? (П000330033103 <> 0, (П000330033203 / П000330033103) * 100, 0);
				
			Иначе
				
				П000330033103 = Форма.СтруктураДанныхРаздел32.П000330033103;
				П000330033203 = Форма.СтруктураДанныхРаздел32.П000330033203;
				
				Форма.СтруктураДанныхРаздел32.Вставить("П000330033303",
				 ? (П000330033103 <> 0, (П000330033203 / П000330033103) * 100, 0));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000330033304, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				
				П000330033104 = Форма.ТабличныйДокумент.Области.П000330033104.Значение;
				П000330033204 = Форма.ТабличныйДокумент.Области.П000330033204.Значение;
				
				Форма.ТабличныйДокумент.Области.П000330033304.Значение
				 = ? (П000330033104 <> 0, (П000330033204 / П000330033104) * 100, 0);
				
			Иначе
				
				П000330033104 = Форма.СтруктураДанныхРаздел32.П000330033104;
				П000330033204 = Форма.СтруктураДанныхРаздел32.П000330033204;
				
				Форма.СтруктураДанныхРаздел32.Вставить("П000330033304",
				 ? (П000330033104 <> 0, (П000330033204 / П000330033104) * 100, 0));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000330033305, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				
				П000330033105 = Форма.ТабличныйДокумент.Области.П000330033105.Значение;
				П000330033205 = Форма.ТабличныйДокумент.Области.П000330033205.Значение;
				
				Форма.ТабличныйДокумент.Области.П000330033305.Значение
				 = ? (П000330033105 <> 0, (П000330033205 / П000330033105) * 100, 0);
				
			Иначе
				
				П000330033105 = Форма.СтруктураДанныхРаздел32.П000330033105;
				П000330033205 = Форма.СтруктураДанныхРаздел32.П000330033205;
				
				Форма.СтруктураДанныхРаздел32.Вставить("П000330033305",
				 ? (П000330033105 <> 0, (П000330033205 / П000330033105) * 100, 0));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000330033306, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				
				П000330033106 = Форма.ТабличныйДокумент.Области.П000330033106.Значение;
				П000330033206 = Форма.ТабличныйДокумент.Области.П000330033206.Значение;
				
				Форма.ТабличныйДокумент.Области.П000330033306.Значение =
				 ? (П000330033106 <> 0, (П000330033206 / П000330033106) * 100, 0);
				
			Иначе
				
				П000330033106 = Форма.СтруктураДанныхРаздел32.П000330033106;
				П000330033206 = Форма.СтруктураДанныхРаздел32.П000330033206;
				
				Форма.СтруктураДанныхРаздел32.Вставить("П000330033306",
				 ? (П000330033106 <> 0, (П000330033206 / П000330033106) * 100, 0));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000330033603, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				
				П000330033403 = Форма.ТабличныйДокумент.Области.П000330033403.Значение;
				П000330033503 = Форма.ТабличныйДокумент.Области.П000330033503.Значение;
				
				Форма.ТабличныйДокумент.Области.П000330033603.Значение
				 = ? (П000330033403 <> 0, (П000330033503 / П000330033403) * 100, 0);
				
			Иначе
				
				П000330033403 = Форма.СтруктураДанныхРаздел32.П000330033403;
				П000330033503 = Форма.СтруктураДанныхРаздел32.П000330033503;
				
				Форма.СтруктураДанныхРаздел32.Вставить("П000330033603",
				 ? (П000330033403 <> 0, (П000330033503 / П000330033403) * 100, 0));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000330033604, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				
				П000330033404 = Форма.ТабличныйДокумент.Области.П000330033404.Значение;
				П000330033504 = Форма.ТабличныйДокумент.Области.П000330033504.Значение;
				
				Форма.ТабличныйДокумент.Области.П000330033604.Значение
				 = ? (П000330033404 <> 0, (П000330033504 / П000330033404) * 100, 0);
				
			Иначе
				
				П000330033404 = Форма.СтруктураДанныхРаздел32.П000330033404;
				П000330033504 = Форма.СтруктураДанныхРаздел32.П000330033504;
				
				Форма.СтруктураДанныхРаздел32.Вставить("П000330033604",
				 ? (П000330033404 <> 0, (П000330033504 / П000330033404) * 100, 0));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000330033605, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				
				П000330033405 = Форма.ТабличныйДокумент.Области.П000330033405.Значение;
				П000330033505 = Форма.ТабличныйДокумент.Области.П000330033505.Значение;
				
				Форма.ТабличныйДокумент.Области.П000330033605.Значение
				 = ? (П000330033405 <> 0, (П000330033505 / П000330033405) * 100, 0);
				
			Иначе
				
				П000330033405 = Форма.СтруктураДанныхРаздел32.П000330033405;
				П000330033505 = Форма.СтруктураДанныхРаздел32.П000330033505;
				
				Форма.СтруктураДанныхРаздел32.Вставить("П000330033605",
				 ? (П000330033405 <> 0, (П000330033505 / П000330033405) * 100, 0));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000330033606, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				
				П000330033406 = Форма.ТабличныйДокумент.Области.П000330033406.Значение;
				П000330033506 = Форма.ТабличныйДокумент.Области.П000330033506.Значение;
				
				Форма.ТабличныйДокумент.Области.П000330033606.Значение
				 = ? (П000330033406 <> 0, (П000330033506 / П000330033406) * 100, 0);
				
			Иначе
				
				П000330033406 = Форма.СтруктураДанныхРаздел32.П000330033406;
				П000330033506 = Форма.СтруктураДанныхРаздел32.П000330033506;
				
				Форма.СтруктураДанныхРаздел32.Вставить("П000330033606",
				 ? (П000330033406 <> 0, (П000330033506 / П000330033406) * 100, 0));
				
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел34" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000340034303, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел34" Тогда
				
				Форма.ТабличныйДокумент.Области.П000340034303.Значение
				 = ?(Форма.ТабличныйДокумент.Области.П000340034103.Значение = 0, 0,
				Форма.ТабличныйДокумент.Области.П000340034203.Значение
				/ Форма.ТабличныйДокумент.Области.П000340034103.Значение * 100);
				
			Иначе
				
				Форма.СтруктураДанныхРаздел34.Вставить("П000340034303", ?(Форма.СтруктураДанныхРаздел34.П000340034103 = 0, 0,
				Форма.СтруктураДанныхРаздел34.П000340034203
				/ Форма.СтруктураДанныхРаздел34.П000340034103 * 100));
				
			КонецЕсли;
	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000340034304, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел34" Тогда
				
				Форма.ТабличныйДокумент.Области.П000340034304.Значение
				= ?(Форма.ТабличныйДокумент.Области.П000340034104.Значение = 0, 0,
				Форма.ТабличныйДокумент.Области.П000340034204.Значение
				/ Форма.ТабличныйДокумент.Области.П000340034104.Значение * 100);
				
			Иначе
				
				Форма.СтруктураДанныхРаздел34.Вставить("П000340034304",
				?(Форма.СтруктураДанныхРаздел34.П000340034104 = 0, 0,
				Форма.СтруктураДанныхРаздел34.П000340034204
				/ Форма.СтруктураДанныхРаздел34.П000340034104 * 100));
				
			КонецЕсли;														  
	
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел35" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000350000203, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы35, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка3 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел35" Тогда
					
					Колонка3 = Колонка3 + Форма.ТабличныйДокумент.Области["П000350000103_" + Ном].Значение;
					
				Иначе
					
					Колонка3 = Колонка3 + ТаблицаБлока[Ном - 1].П000350000103;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел35" Тогда
				
				Форма.ТабличныйДокумент.Области.П000350000203.Значение = Колонка3;		
				
			Иначе
				
				Форма.СтруктураДанныхРаздел35.Вставить("П000350000203", Колонка3);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000350000204, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы35, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка4 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел35" Тогда
					
					Колонка4 = Колонка4 + Форма.ТабличныйДокумент.Области["П000350000104_" + Ном].Значение;
					
				Иначе
					
					Колонка4 = Колонка4 + ТаблицаБлока[Ном - 1].П000350000104;
					
				Конецесли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел35" Тогда
				
				Форма.ТабличныйДокумент.Области.П000350000204.Значение = Колонка4;		
				
			Иначе
				
				Форма.СтруктураДанныхРаздел35.Вставить("П000350000204", Колонка4);
				
			Конецесли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел36" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000360036303, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел36" Тогда
				
				Форма.ТабличныйДокумент.Области.П000360036303.Значение
				= ?(Форма.ТабличныйДокумент.Области.П000360036103.Значение = 0, 0,
				Форма.ТабличныйДокумент.Области.П000360036203.Значение
				/ Форма.ТабличныйДокумент.Области.П000360036103.Значение * 100);
				
			Иначе
				
				Форма.СтруктураДанныхРаздел36.Вставить("П000360036303",
				?(Форма.СтруктураДанныхРаздел36.П000360036103 = 0, 0,
				Форма.СтруктураДанныхРаздел36.П000360036203
				/ Форма.СтруктураДанныхРаздел36.П000360036103 * 100));
				
			КонецЕсли;
	
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел37" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000370037503, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел37" Тогда
				
				Форма.ТабличныйДокумент.Области.П000370037503.Значение
				= ?(Форма.ТабличныйДокумент.Области.П000370037103.Значение = 0, 0,
				(Форма.ТабличныйДокумент.Области.П000370037203.Значение
				+ Форма.ТабличныйДокумент.Области.П000370037303.Значение
				+ Форма.ТабличныйДокумент.Области.П000370037403.Значение)
				/ Форма.ТабличныйДокумент.Области.П000370037103.Значение * 100);
				
			Иначе
				
				Форма.СтруктураДанныхРаздел37.Вставить("П000370037503",
				?(Форма.СтруктураДанныхРаздел37.П000370037103 = 0, 0,
				(Форма.СтруктураДанныхРаздел37.П000370037203
				+ Форма.СтруктураДанныхРаздел37.П000370037303
				+ Форма.СтруктураДанныхРаздел37.П000370037403)
				/ Форма.СтруктураДанныхРаздел37.П000370037103 * 100));
				
			КонецЕсли;
	
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000370037504, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел37" Тогда
				
				Форма.ТабличныйДокумент.Области.П000370037504.Значение
				= ?(Форма.ТабличныйДокумент.Области.П000370037104.Значение = 0, 0,
				(Форма.ТабличныйДокумент.Области.П000370037204.Значение
				+ Форма.ТабличныйДокумент.Области.П000370037304.Значение
				+ Форма.ТабличныйДокумент.Области.П000370037404.Значение)
				/ Форма.ТабличныйДокумент.Области.П000370037104.Значение * 100);
				
			Иначе
				
				Форма.СтруктураДанныхРаздел37.Вставить("П000370037504",
				?(Форма.СтруктураДанныхРаздел37.П000370037104 = 0, 0,
				(Форма.СтруктураДанныхРаздел37.П000370037204
				+ Форма.СтруктураДанныхРаздел37.П000370037304
				+ Форма.СтруктураДанныхРаздел37.П000370037404)
				/ Форма.СтруктураДанныхРаздел37.П000370037104 * 100));
				
			КонецЕсли;														  
	
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел38" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000380038303, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел38" Тогда
				
				Форма.ТабличныйДокумент.Области.П000380038303.Значение
				= ?(Форма.ТабличныйДокумент.Области.П000380038103.Значение = 0, 0,
				Форма.ТабличныйДокумент.Области.П000380038203.Значение
				/ Форма.ТабличныйДокумент.Области.П000380038103.Значение * 100);
				
			Иначе
				
				Форма.СтруктураДанныхРаздел38.Вставить("П000380038303",
				?(Форма.СтруктураДанныхРаздел38.П000380038103 = 0, 0,
				Форма.СтруктураДанныхРаздел38.П000380038203
				/ Форма.СтруктураДанныхРаздел38.П000380038103 * 100));
				
			КонецЕсли;
	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000380038304, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел38" Тогда
				
				Форма.ТабличныйДокумент.Области.П000380038304.Значение =
				?(Форма.ТабличныйДокумент.Области.П000380038104.Значение = 0, 0,
				Форма.ТабличныйДокумент.Области.П000380038204.Значение
				/ Форма.ТабличныйДокумент.Области.П000380038104.Значение * 100);
				
			Иначе
				
				Форма.СтруктураДанныхРаздел38.Вставить("П000380038304",
				?(Форма.СтруктураДанныхРаздел38.П000380038104 = 0, 0,
				Форма.СтруктураДанныхРаздел38.П000380038204
				/ Форма.СтруктураДанныхРаздел38.П000380038104 * 100));
				
			КонецЕсли;														  
	
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000205, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка5 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					
					Колонка5 = Колонка5 + Форма.ТабличныйДокумент.Области["П000400000105_" + Ном].Значение;
					
				Иначе
					
					Колонка5 = Колонка5 + ТаблицаБлока[Ном - 1].П000400000105;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				
				Форма.ТабличныйДокумент.Области.П000400000205.Значение = Колонка5;
				
				Форма.СтруктураДанныхРаздел1.П000100012003 = Форма.ТабличныйДокумент.Области.П000400000205.Значение;
				
			Иначе
				
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000205", Колонка5);
				
				Форма.СтруктураДанныхРаздел1.П000100012003 = Форма.СтруктураДанныхРаздел4.П000400000205;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000206, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка6 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					
					Колонка6 = Колонка6 + Форма.ТабличныйДокумент.Области["П000400000106_" + Ном].Значение;
					
				Иначе
					
					Колонка6 = Колонка6 + ТаблицаБлока[Ном - 1].П000400000106;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				
				Форма.ТабличныйДокумент.Области.П000400000206.Значение = Колонка6;
				
			Иначе
				
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000206", Колонка6);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000207, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка7 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					
					Колонка7 = Колонка7 + Форма.ТабличныйДокумент.Области["П000400000107_" + Ном].Значение;
					
				Иначе
					
					Колонка7 = Колонка7 + ТаблицаБлока[Ном - 1].П000400000107;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				
				Форма.ТабличныйДокумент.Области.П000400000207.Значение = Колонка7;
				
				Форма.СтруктураДанныхРаздел1.П000100012004 = Форма.ТабличныйДокумент.Области.П000400000207.Значение;
				
			Иначе
				
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000207", Колонка7);
				
				Форма.СтруктураДанныхРаздел1.П000100012004 = Форма.СтруктураДанныхРаздел4.П000400000207;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000208, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка8 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					
					Колонка8 = Колонка8 + Форма.ТабличныйДокумент.Области["П000400000108_" + Ном].Значение;
					
				Иначе
					
					Колонка8 = Колонка8 + ТаблицаБлока[Ном - 1].П000400000108;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				
				Форма.ТабличныйДокумент.Области.П000400000208.Значение = Колонка8;
				
				Форма.СтруктураДанныхРаздел1.П000100012005 = Форма.ТабличныйДокумент.Области.П000400000208.Значение;
				
			Иначе
				
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000208", Колонка8);
				
				Форма.СтруктураДанныхРаздел1.П000100012005 = Форма.СтруктураДанныхРаздел4.П000400000208;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000209, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка9 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					
					Колонка9 = Колонка9 + Форма.ТабличныйДокумент.Области["П000400000109_" + Ном].Значение;
					
				Иначе
					
					Колонка9 = Колонка9 + ТаблицаБлока[Ном - 1].П000400000109;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				
				Форма.ТабличныйДокумент.Области.П000400000209.Значение = Колонка9;
				
				Форма.СтруктураДанныхРаздел1.П000100012006 = Форма.ТабличныйДокумент.Области.П000400000209.Значение;
				
			Иначе
				
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000209", Колонка9);
				
				Форма.СтруктураДанныхРаздел1.П000100012006 = Форма.СтруктураДанныхРаздел4.П000400000209;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000210, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка10 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					
					Колонка10 = Колонка10 + Форма.ТабличныйДокумент.Области["П000400000110_" + Ном].Значение;
					
				Иначе
					
					Колонка10 = Колонка10 + ТаблицаБлока[Ном - 1].П000400000110;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				
				Форма.ТабличныйДокумент.Области.П000400000210.Значение = Колонка10;
				
				Форма.СтруктураДанныхРаздел1.П000100012007 = Форма.ТабличныйДокумент.Области.П000400000210.Значение;
				
			Иначе
				
				Форма.СтруктураДанныхРаздел4.Вставить("П000400000210", Колонка10);
				
				Форма.СтруктураДанныхРаздел1.П000100012007 = Форма.СтруктураДанныхРаздел4.П000400000210;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400000206, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				
				Форма.СтруктураДанныхРаздел1.П000100012103 = Форма.ТабличныйДокумент.Области.П000400000206.Значение;
				
			Иначе
				
				Форма.СтруктураДанныхРаздел1.П000100012103 = Форма.СтруктураДанныхРаздел4.П000400000206;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		        
	ИначеЕсли  ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500000250, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы5, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка5 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
					
					Колонка5 = Колонка5 + Форма.ТабличныйДокумент.Области["П000500000150_" + Ном].Значение;
					
				Иначе
					
					Колонка5 = Колонка5 + ТаблицаБлока[Ном - 1].П000500000150;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
				
				Форма.ТабличныйДокумент.Области.П000500000250.Значение = Колонка5;		
				
			Иначе
				
				Форма.СтруктураДанныхРаздел5.Вставить("П000500000250", Колонка5);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500000260, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы5, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка6 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
					
					Колонка6 = Колонка6 + Форма.ТабличныйДокумент.Области["П000500000160_" + Ном].Значение;
					
				Иначе
					
					Колонка6 = Колонка6 + ТаблицаБлока[Ном - 1].П000500000160;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
				
				Форма.ТабличныйДокумент.Области.П000500000260.Значение = Колонка6;		
				
			Иначе
				
				Форма.СтруктураДанныхРаздел5.Вставить("П000500000260", Колонка6);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500000270, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы5, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка7 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
					
					Колонка7 = Колонка7 + Форма.ТабличныйДокумент.Области["П000500000170_" + Ном].Значение;
					
				Иначе
					
					Колонка7 = Колонка7 + ТаблицаБлока[Ном - 1].П000500000170;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
				
				Форма.ТабличныйДокумент.Области.П000500000270.Значение = Колонка7;		
				
			Иначе
				
				Форма.СтруктураДанныхРаздел5.Вставить("П000500000270", Колонка7);
				
			КонецЕсли;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500000280, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы5, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка8 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
					
					Колонка8 = Колонка8 + Форма.ТабличныйДокумент.Области["П000500000180_" + Ном].Значение;
					
				Иначе
					
					Колонка8 = Колонка8 + ТаблицаБлока[Ном - 1].П000500000180;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
				
				Форма.ТабличныйДокумент.Области.П000500000280.Значение = Колонка8;		
				
			Иначе
				
				Форма.СтруктураДанныхРаздел5.Вставить("П000500000280", Колонка8);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
						
		Расчет(Форма, "Раздел5",  ОбластьИмя);
		Расчет(Форма, "Раздел4",  ОбластьИмя);
		Расчет(Форма, "Раздел38", ОбластьИмя);
		Расчет(Форма, "Раздел37", ОбластьИмя);
		Расчет(Форма, "Раздел36", ОбластьИмя);
		Расчет(Форма, "Раздел35", ОбластьИмя);
		Расчет(Форма, "Раздел34", ОбластьИмя);
		Расчет(Форма, "Раздел32", ОбластьИмя);
		Расчет(Форма, "Раздел31", ОбластьИмя);
		Расчет(Форма, "Раздел22", ОбластьИмя);
		Расчет(Форма, "Раздел2",  ОбластьИмя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло)
	
	Форма.СтруктураРеквизитовФормы.мДелитель = 1;
    	
	ОкругленноеЧисло = Окр(ИсходноеЧисло / Форма.СтруктураРеквизитовФормы.мДелитель,
	 Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Форма.СтруктураРеквизитовФормы.мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаПоказателяПоВсемСтраницам(Форма, ИмяСтраницы, Показатель, Округлять, Условия = Неопределено)
	
	Результат = 0;
	
	МногостраничностьЕсть = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницы,
	                                                                                "МногостраничностьВРазделе");
	
	Если НЕ МногостраничностьЕсть Тогда
		ДанныеТаблПоле = СобратьДанныеТекущегоТаблПоля(Форма, "ТабличныйДокумент");
		Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
			Результат = ДанныеТаблПоле.Показатель;	
		КонецЕсли;
		
		Результат = ?(Округлять, ОкруглитьЧислоПоФормату(Форма, Результат), Результат);
		
	Иначе
		ТаблицаРаздела = Неопределено;
		
		Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
		
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		
		Если ТаблицаРаздела <> Неопределено Тогда
			Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
				ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные[0].Значение;
				Если ((Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия))
					    И НЕ ДанныеТаблПоле = Неопределено Тогда
					ЗначениеПоказателя = ДанныеТаблПоле[Показатель];
					Результат = Результат + ?(Округлять, ОкруглитьЧислоПоФормату(Форма, ЗначениеПоказателя), ЗначениеПоказателя);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполняютсяУсловияЗаполнения(СтруктураДанных, Условия)
	
	Результат = Ложь;
	Для каждого Условие Из Условия Цикл
		Показатель = Условие.Ключ;
		ТребЗначение = Условие.Значение;
		ЗначениеПоказателя = СтруктураДанных[Показатель];
		Если ТребЗначение = Неопределено Тогда
			Результат = (ЗначениеПоказателя <> "");
		Иначе
			Результат = (ЗначениеПоказателя = ТребЗначение);
		КонецЕсли;
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	ИзменитьТаблицуПараметровАвтозаполненияНаСервере(-1, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуИзменитьТаблицуПараметровАвтозаполненияНаСервере(Парам, Лист = Неопределено)
	
	ИзменитьТаблицуПараметровАвтозаполненияНаСервере(Парам, Лист);
	ВставитьДополнительнуюСтраницуНаСервере(Лист);
	
КонецПроцедуры		

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполненияНаСервере(Парам, Лист = Неопределено)
	
	ИзменитьТаблицуПараметровАвтозаполнения(ЭтаФорма, Парам, Лист);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Форма, Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;

	Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
		
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда

		#Если НаКлиенте Тогда
			НоваяТаблицаВариантыЗаполнения =
			 РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма,
			 ИмяТекущейСтраницыПанели, НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет,
			 Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		#Иначе
			НоваяТаблицаВариантыЗаполнения =
			РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма,
			ИмяТекущейСтраницыПанели, НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет,
			Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		#КонецЕсли
		        		
		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			#Если НаКлиенте Тогда
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
			#Иначе
				Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ТаблицаЗначений") Тогда
					ТаблВариантов.ТаблицаВариантовЗаполнения.Загрузить(НоваяТаблицаВариантыЗаполнения);
				Иначе
					ТаблВариантов.ТаблицаВариантовЗаполнения.Загрузить(НоваяТаблицаВариантыЗаполнения.Выгрузить());
				КонецЕсли;
			#КонецЕсли
						
		КонецЕсли;

	Иначе

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
		
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма,
		 ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		 Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество()
			 >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
        		
	КонецЕсли;
	
	// Добавляем новую страницу.
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию.
	СтрНоваяСтраница.Представление = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
		
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма,
	 ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
		
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	Перем СтруктураГруппы;

	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
		
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
    	    	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5 Тогда
		ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "10_" + КолСтрокСтр;
	Иначе
		ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;
	КонецЕсли;

	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы31 Тогда
		НомерНижнЯчейкиОбласти = НомерНижнЯчейкиОбласти + 4;
	КонецЕсли;
		
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти,
	 НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
	Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01"
			 ИЛИ (Лев(ИмяКолонки, 5) = "П0005" И Прав(ИмяКолонки, 2) = "10") Тогда
				ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
			КонецЕсли;
							
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки,
			 НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01"
			 ИЛИ (Лев(ИмяКолонки, 5) = "П0005" И Прав(ИмяКолонки, 2) = "10") Тогда
				ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя  = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = НовыйПорядковыйНомер;
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5 Тогда
		ИмяТекущейОбласти = ИмяГруппы + "10_" + КолСтрокСтр1;
	Иначе
		ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
	КонецЕсли;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	СтруктураГруппы.Добавить();

	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из Форма.ТабличныйДокумент.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из Форма.ТабличныйДокумент.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
    	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли

	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1;

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
				
		Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5 Тогда
			ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "10_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		Иначе
			ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		КонецЕсли;
		
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница,
		 "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница,
		 "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
			
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле,
			 НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр - 1];
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
					
					Если НомерГрафы = 1 Тогда
						
						Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5 Тогда
							КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат(10, "ЧЦ=2; ЧВН=");
						Иначе
							КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат(1, "ЧЦ=2; ЧВН=");
						КонецЕсли;
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;

		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
								
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЦикла;

		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;

	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5 Тогда
		ИмяТекущейОбласти = ИмяГруппы + "10_" + Формат(НомТекущейСтроки, "ЧГ=0");
	Иначе
		ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
	КонецЕсли;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	ЕстьДопСтроки = Ложь;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
			ЕстьДопСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьДопСтроки Тогда
		Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
			Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
		
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(ТекущаяСтраница);
	#Иначе
		Форма.РасчетНаСервере(ТекущаяСтраница);
	#КонецЕсли
              
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел22.Очистить();
	СтруктураДанныхРаздел31.Очистить();
	СтруктураДанныхРаздел32.Очистить();
	СтруктураДанныхРаздел34.Очистить();
	СтруктураДанныхРаздел35.Очистить();
	СтруктураДанныхРаздел36.Очистить();
	СтруктураДанныхРаздел37.Очистить();
	СтруктураДанныхРаздел38.Очистить();
	СтруктураДанныхРаздел4.Очистить();
	СтруктураДанныхРаздел5.Очистить();
		
	ТаблицаСтраницыРазделаРаздел2.Очистить();
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
    	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела)
	Перем СтруктураГруппы;
    	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
	   = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = "
		+ Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
		    = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = "
		+ Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
		    = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = "
		+ Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	ИмяПоляТаблДокументаСтароеЗначение = "";
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента		= СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если НаимРаздела <> ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###"
			ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма["ТабличныйДокумент"];
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(
					 ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти,
					 ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(
						ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти,
						ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ИмяПоляТаблДокументаСтароеЗначение = ИмяПоляТаблДокумента;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Истина);
	мПараметры.Вставить("Выгрузка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мИнтервалАвтосохранения", СтруктураРеквизитовФормы.мИнтервалАвтосохранения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета",
	 ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
			
		#Иначе
			
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма,
			НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			
		#КонецЕсли
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока =
			РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(),
			"КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока =
				РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(),
				"КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма,
	 НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция РегНомерПФРСоответствуетТребованиям(Знач РегНомерПФР)
	
	Для Инд = 0 По 8 Цикл
		РегНомерПФР = СтрЗаменить(РегНомерПФР, Строка(Инд), "9");
	КонецЦикла;
	
	Возврат РегНомерПФР = "999-999-999999";
	
КонецФункции 

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
			
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    		
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"),
	 ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
		
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, ,
	 СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить
		|в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
		
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, ,
	 СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматПечатиНулевыхЗначенийСтрок100и150(МакетПечФормы)
	
	СтрокаИменОбластейДляФорматирования
		= "П000100010003, П000100010004, П000100010005, П000100010006, П000100010007,
		  |П000100015003, П000100015004, П000100015005, П000100015006, П000100015007";
	
	МассивОбластейДляФорматирования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрокаИменОбластейДляФорматирования, ",");
	
	Для Каждого ИмяФорматируемойОбласти Из МассивОбластейДляФорматирования Цикл
		
		ИмяФорматируемойОбласти = СокрЛП(ИмяФорматируемойОбласти);
		
		Если МакетПечФормы.Области.Найти(ИмяФорматируемойОбласти) <> Неопределено
		   И ТабличныйДокумент.Области.Найти(ИмяФорматируемойОбласти) <> Неопределено Тогда
			
			МакетПечФормы.Области[ИмяФорматируемойОбласти].Формат
				= ТабличныйДокумент.Области[ИмяФорматируемойОбласти].Формат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",   "ПечатнаяФормаОтчета2013Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",     "ПечатнаяФормаОтчета2013Кв1_Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",     "ПечатнаяФормаОтчета2013Кв1_Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел22",    "ПечатнаяФормаОтчета2013Кв1_Раздел22");
	СоответствиеРазделовМакетам.Вставить("Раздел31",    "ПечатнаяФормаОтчета2013Кв1_Раздел31");
	СоответствиеРазделовМакетам.Вставить("Раздел32",    "ПечатнаяФормаОтчета2013Кв1_Раздел32");
	СоответствиеРазделовМакетам.Вставить("Раздел34",    "ПечатнаяФормаОтчета2013Кв1_Раздел34");
	СоответствиеРазделовМакетам.Вставить("Раздел35",    "ПечатнаяФормаОтчета2013Кв1_Раздел35");
	СоответствиеРазделовМакетам.Вставить("Раздел36",    "ПечатнаяФормаОтчета2013Кв1_Раздел36");
	СоответствиеРазделовМакетам.Вставить("Раздел37",    "ПечатнаяФормаОтчета2013Кв1_Раздел37");
	СоответствиеРазделовМакетам.Вставить("Раздел38",    "ПечатнаяФормаОтчета2013Кв1_Раздел38");
	СоответствиеРазделовМакетам.Вставить("Раздел4",     "ПечатнаяФормаОтчета2013Кв1_Раздел4");
	СоответствиеРазделовМакетам.Вставить("Раздел5",     "ПечатнаяФормаОтчета2013Кв1_Раздел5");
	
	ПечатнаяФормаРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
		
	МакетПечатнойФормы = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ПечатнаяФормаРаздела);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу = 5;
	МакетПечатнойФормы.ПолеСлева = 5;
		
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		КолвоСтрокВТаблДок = ЭтаФорма[ИдГруппы].Количество();
		
		ОбластьМнгЧасти              = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть");
		ВысотаОбластиМнгЧасти        = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть").ВысотаТаблицы;
		ИмяОбластиПоследнейДопСтроки = ОбластьМнгЧасти.ПолучитьОбласть(ВысотаОбластиМнгЧасти, ,
		 ВысотаОбластиМнгЧасти).Области[0].Имя;
		
		КолвоСтрокВПечатнойФорме = Число(Сред(ИмяОбластиПоследнейДопСтроки, СтрНайти(ИмяОбластиПоследнейДопСтроки, "_") + 1));
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИдГруппы];

		Если КолвоСтрокВТаблДок > КолвоСтрокВПечатнойФорме Тогда
			
			ПерваяКолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(0).Значение;
			ПоследняяКолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(мСтруктураКолвоКолонокРазделов[ИдГруппы]
			 - 1).Значение;

			НомерВерхЯчейкиОбласти = МакетПечатнойФормы.Область(ПерваяКолонкаТаблицыИмя + "_" + КолвоСтрокВПечатнойФорме).Верх;
			Если ИдГруппы = "П0003100001" Тогда
				НомерНижнЯчейкиОбласти = МакетПечатнойФормы.Область(ПоследняяКолонкаТаблицыИмя + "_"
				 + КолвоСтрокВПечатнойФорме).Низ + 4;
			Иначе
				НомерНижнЯчейкиОбласти = МакетПечатнойФормы.Область(ПоследняяКолонкаТаблицыИмя + "_"
				 + КолвоСтрокВПечатнойФорме).Низ;
			КонецЕсли;
			
			ВставляемаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
			
			КолвоДопСтрок = КолвоСтрокВТаблДок - КолвоСтрокВПечатнойФорме;
									
			Для Ном = 1 По КолвоДопСтрок Цикл
							
				МакетПечатнойФормы.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
													
			КонецЦикла;
			
			Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок * 5 , ,
				 НомерНижнЯчейкиОбласти + КолвоДопСтрок * 5).Области Цикл
				НайденнаяОбласть = МакетПечатнойФормы.Области.Найти(Область.Имя);
				Если НЕ НайденнаяОбласть = Неопределено Тогда 
					НайденнаяОбласть.Имя = Лев(НайденнаяОбласть.Имя, СтрНайти(НайденнаяОбласть.Имя, "_") - 1) + "_"
					 + Формат(КолвоСтрокВТаблДок, "ЧЦ=3");
				КонецЕсли;
			КонецЦикла;
			
			Для Ном = 0 По КолвоДопСтрок - 1 Цикл
				
				Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок * 5, ,
					 НомерНижнЯчейкиОбласти + КолвоДопСтрок * 5).Области Цикл
					
					Если СтрЧислоВхождений(Область.Имя, "П000310000132") > 0
						ИЛИ СтрЧислоВхождений(Область.Имя, "П000310000142") > 0 Тогда
						
						НайденнаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти + Ном * 5 + 1, Область.Лево,
						 НомерВерхЯчейкиОбласти + Ном * 5 + 1, Область.Право);
						
					ИначеЕсли СтрЧислоВхождений(Область.Имя, "П000310000133") > 0
						ИЛИ СтрЧислоВхождений(Область.Имя, "П000310000143") > 0 Тогда	
						
						НайденнаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти + Ном * 5 + 2, Область.Лево,
						 НомерВерхЯчейкиОбласти + Ном * 5 + 2, Область.Право);
						
					ИначеЕсли СтрЧислоВхождений(Область.Имя, "П000310000134") > 0
						ИЛИ СтрЧислоВхождений(Область.Имя, "П000310000144") > 0 Тогда		
						
						НайденнаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти + Ном * 5 + 3, Область.Лево,
						 НомерВерхЯчейкиОбласти + Ном * 5 + 3, Область.Право);
						
					ИначеЕсли СтрЧислоВхождений(Область.Имя, "П000310000135") > 0
						ИЛИ СтрЧислоВхождений(Область.Имя, "П000310000145") > 0 Тогда	
						
						НайденнаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти + Ном * 5 + 4, Область.Лево,
						 НомерВерхЯчейкиОбласти + Ном * 5 + 4, Область.Право);
						
					Иначе
						
						НайденнаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти + Ном * 5, Область.Лево,
						 НомерВерхЯчейкиОбласти + Ном * 5, Область.Право);
						
					КонецЕсли;
					
					Если НЕ НайденнаяОбласть = Неопределено Тогда 
						НайденнаяОбласть.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) + "_"
						 + Формат(КолвоСтрокВПечатнойФорме + Ном, "ЧЦ=3");
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
						
		КонецЕсли;
						
	КонецЕсли;
	
	ЗаполнитьПечатнуюФорму(Парам1, МакетПечатнойФормы, ОбщиеРеквизитыРазделов);
	
	Если Парам1.ИмяСтраницы = "Раздел1" Тогда
		УстановитьФорматПечатиНулевыхЗначенийСтрок100и150(МакетПечатнойФормы);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент,
	 СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивНомРег         = Новый Массив(14);
	МассивНомСтр         = Новый Массив(3);
	МассивДатаПодписи    = Новый Массив(8);
				
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("НомРег");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрНомРег = Область.Значение;
		
		Для Ном = 1 По СтрДлина(СтрНомРег) Цикл
			
			МассивНомРег[Ном - 1] = Сред(СтрНомРег, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("НомСтр");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивНомСтр[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ДатаПодписи.Значение) Тогда
				МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;	
				
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("НомРег", МассивНомРег);
	ОбщиеРеквизитыРазделов.Вставить("НомСтр", МассивНомСтр);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
			
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "НомРег") > 0 
					  ИЛИ СтрЧислоВхождений(Область.Имя, "НомСтр") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаПодписи") > 0 Тогда
					
				    Продолжить;
					 
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ИНН") > 0 Тогда
					
					СтрИНН = Область.Значение;
				 	Если СтрДлина(СтрИНН) = 10 Тогда
						СтрИНН = СтрИНН + "--";
					КонецЕсли;

					Для Ном = 1 По СтрДлина(СтрИНН) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрИНН, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ОГРН") > 0 Тогда
					
					СтрОГРН = Область.Значение;
				 	Если СтрДлина(СтрОГРН) = 13 Тогда
						СтрОГРН = СтрОГРН + "--";
					КонецЕсли;

					Для Ном = 1 По СтрДлина(СтрОГРН) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрОГРН, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;

				ИначеЕсли СтрЧислоВхождений(Область.Имя, "Прил") > 0 Тогда
					
					СтрПрил = СокрЛП(Область.Значение);
					СтрПрил = Прав("000" + СтрПрил, 3);

					Для Ном = 1 По СтрДлина(СтрПрил) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрПрил, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "СрСписЧисл") > 0 Тогда
					
					СтрСрСписЧисл = СокрЛП(Область.Значение);
					СтрСрСписЧисл = Прав("      " + СтрСрСписЧисл, 6);

					Для Ном = 1 По СтрДлина(СтрСрСписЧисл) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрСрСписЧисл, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "КолЗастрахованных") > 0 Тогда
					
					СтрКолЗастрахованных = СокрЛП(Область.Значение);
					СтрКолЗастрахованных = Прав("      " + СтрКолЗастрахованных, 6);

					Для Ном = 1 По СтрДлина(СтрКолЗастрахованных) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрКолЗастрахованных, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "КПП") > 0
  					  ИЛИ СтрЧислоВхождений(Область.Имя, "ОКАТО") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ОКВЭД") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ОтчетГод") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "Период") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "СоставленаНа") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ТелОрганизации") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "НомерКорректировки") > 0 Тогда
					
					ЗначениеОбласти = Формат(Область.Значение, "ЧЦ=3; ЧВН=; ЧН=");
					
					Для Ном = 1 По СтрДлина(ЗначениеОбласти) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(ЗначениеОбласти, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;	
					
				КонецЕсли;	
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел2" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "П000200001001") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + "_" + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;		
				
			КонецЕсли;
			
			Если НЕ Область.Имя = "НомерПачки" Тогда
				МакетПечатнойФормы.Области[Область.Имя].Значение = Область.Значение;
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Постфикс = 1;
		Разделитель = Ложь;
		Если Реквизит.Ключ = "НомРег" Тогда
			НаименованиеОбласти = "НомРег";
		ИначеЕсли Реквизит.Ключ = "НомСтр" Тогда
			НаименованиеОбласти = "НомСтр";
		ИначеЕсли Реквизит.Ключ = "ДатаПодписи" Тогда
			НаименованиеОбласти = "ДатаПодписи";
		Иначе
			НаименованиеОбласти = Реквизит.Ключ;
		КонецЕсли;
		
		Если НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти + Постфикс) = Неопределено Тогда
			
			Для Ном = 1 По Реквизит.Значение.Количество() Цикл
				ИмяОбласти = НаименованиеОбласти + ?(Разделитель, "_", "") + Ном;
				Если НЕ ИмяОбласти = "НомРег4" И НЕ ИмяОбласти = "НомРег8" Тогда
					МакетПечатнойФормы.Области[НаименованиеОбласти + ?(Разделитель, "_", "") + Ном].Значение
					 = Реквизит.Значение[Ном - 1];
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		МакетПечатнойФормы.Области["ДатаПодписиПолная"].Значение = Формат(ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'""");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьРеквизит(Текст, ДобСтрока, Префикс)
     
	Если ЗначениеЗаполнено(ДобСтрока) Тогда
		Текст = Текст + Префикс + ДобСтрока;
	КонецЕсли;
	
	Возврат Текст;
     
КонецФункции

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(НазванияМногостраничныхРазделовДляУдаления = "")
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма,
	 НазванияМногостраничныхРазделовДляУдаления);
		
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста,
	      РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы,
	 ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматОтображенияНулевыхЗначенийСтрок100и150()
	
	СтрокаИменОбластейДляФорматирования = "П000100010003, П000100010004, П000100010005, П000100010006, П000100010007,
	                                      |П000100015003, П000100015004, П000100015005, П000100015006, П000100015007";
	
	МассивОбластейДляФорматирования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	 СтрокаИменОбластейДляФорматирования, ",");
	
	Для Каждого ИмяФорматируемойОбласти Из МассивОбластейДляФорматирования Цикл
		УстановитьФорматОтображенияНулевогоЗначенияПоказателяСтрок100и150(СокрЛП(ИмяФорматируемойОбласти));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматОтображенияНулевогоЗначенияПоказателяСтрок100и150(ИмяОбласти)
	
	ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяОбласти];
	ИсходнаяСтрокаФормата = ФорматируемаяОбласть.Формат;
	МассивЭлементовФорматирования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсходнаяСтрокаФормата,
	                                                                                            ";");
	
	Для Инд = 0 По МассивЭлементовФорматирования.ВГраница() Цикл
		ЭлементФорматаБезКрайнихПробелов = СокрЛП(МассивЭлементовФорматирования[Инд]);
		Если СтрНайти(ЭлементФорматаБезКрайнихПробелов, "ЧН") = 1 Тогда
			МассивЭлементовФорматирования[Инд] = ?(ОтображатьНулевыеЗначенияСтрок100и150Цифрами(), "ЧН=", "ЧН=-");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СобраннаяСтрокаФормата = "";
	Для Каждого ЭлементФормата Из МассивЭлементовФорматирования Цикл
		ВставлятьРазделитель = НЕ ПустаяСтрока(СобраннаяСтрокаФормата);
		СобраннаяСтрокаФормата = СобраннаяСтрокаФормата + ?(ВставлятьРазделитель, ";", "")+ ЭлементФормата;
	КонецЦикла;
	
	ФорматируемаяОбласть.Формат = СобраннаяСтрокаФормата;
	
КонецПроцедуры

&НаСервере
Функция ОтображатьНулевыеЗначенияСтрок100и150Цифрами()

	ЗначениеПоУмолчанию = Ложь;

	Если ТипЗнч(СтруктураРеквизитовФормы.НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами) <> Тип("Булево") Тогда
		СтруктураРеквизитовФормы.НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат СтруктураРеквизитовФормы.НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами;

КонецФункции

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ТаблицаСтраницРаздела2 = Новый ТаблицаЗначений;
	ТаблицаСтраницРаздела2.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", ,
	 Новый КвалификаторыСтроки(254)));
	ТаблицаСтраницРаздела2.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ТаблицаСтраницРаздела2.Колонки.Добавить("Данные", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаСтраницРаздела2.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрТаблЗнач Из ТаблицаСтраницыРазделаРаздел2 Цикл
		
		Стр = ТаблицаСтраницРаздела2.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		СтрокаСписка = Новый СписокЗначений();
		СтрокаСписка.Вставить(0, СтрТаблЗнач.Данные[0].Значение);
		Стр.Данные = СтрокаСписка;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
			
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
	Контейнер.Вставить("Раздел1",   СтруктураДанныхРаздел1);
	Контейнер.Вставить("Раздел2",   ТаблицаСтраницРаздела2);
	Контейнер.Вставить("Раздел22",  СтруктураДанныхРаздел22);
	Контейнер.Вставить("Раздел31",  СтруктураДанныхРаздел31);
	Контейнер.Вставить("Раздел31_ДанныеДопСтрок", ДанныеФормыВЗначение(П0003100001, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел32",  СтруктураДанныхРаздел32);
	Контейнер.Вставить("Раздел34",  СтруктураДанныхРаздел34);
	Контейнер.Вставить("Раздел35",  СтруктураДанныхРаздел35);
	Контейнер.Вставить("Раздел35_ДанныеДопСтрок", ДанныеФормыВЗначение(П0003500001, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел36",  СтруктураДанныхРаздел36);
	Контейнер.Вставить("Раздел37",  СтруктураДанныхРаздел37);
	Контейнер.Вставить("Раздел38",  СтруктураДанныхРаздел38);
	Контейнер.Вставить("Раздел4",   СтруктураДанныхРаздел4);
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок", ДанныеФормыВЗначение(П0004000001, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел5",   СтруктураДанныхРаздел5);
	Контейнер.Вставить("Раздел5_ДанныеДопСтрок", ДанныеФормыВЗначение(П0005000001, Тип("ТаблицаЗначений")));
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ЭтаФормаИмя = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ЭтаФормаИмя, Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета, Контейнер);
	
	ЭтаФорма.ТаблицаСтраницыРазделаРаздел2.Очистить();
	
	Для Каждого СтрТаблЗнач Из Контейнер.Раздел2 Цикл
		
		Стр = ТаблицаСтраницыРазделаРаздел2.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		Стр.Данные.Вставить(0, СтрТаблЗнач.Данные[0].Значение);
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Контейнер.Раздел31_ДанныеДопСтрок, ЭтаФорма.П0003100001);
	ЗначениеВДанныеФормы(Контейнер.Раздел35_ДанныеДопСтрок, ЭтаФорма.П0003500001);
	ЗначениеВДанныеФормы(Контейнер.Раздел4_ДанныеДопСтрок, ЭтаФорма.П0004000001);
	ЗначениеВДанныеФормы(Контейнер.Раздел5_ДанныеДопСтрок, ЭтаФорма.П0005000001);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если П0003100001.Количество() = 0 Тогда
		П0003100001.Добавить();
	КонецЕсли; 
	
	Если П0003500001.Количество() = 0 Тогда
		П0003500001.Добавить();
	КонецЕсли; 
	
	Если П0004000001.Количество() = 0 Тогда
		П0004000001.Добавить();
	КонецЕсли; 
	
	Если П0005000001.Количество() = 0 Тогда
		П0005000001.Добавить();
	КонецЕсли; 
	
	ОбновитьСтруктуруДанныхМногострочныхРазделов();
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	РасчетНаСервере();
	
	СтруктураРеквизитовФормы.ДанныеОтчетаИзмененыВручную = Ложь;
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруДанныхМногострочныхРазделов()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.МногострочностьВРазделе.Количество() > 0 Тогда
		    			
			ВывестиМакетВТаблДокНаСервере(Раздел.ИмяСтраницы, 0);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;	
			
	КонецЦикла;	
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина,
	                          ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		  <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ВыгружатьСОшибками) Тогда
		Возврат Ложь;
	КонецЕсли;
	        	
	Возврат Истина;
		
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ВыгружатьСОшибками = Ложь)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
			
	ВыгрузкаВозможна = ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Если НЕ ВыгружатьСОшибками
	   И НЕ ВыгрузкаВозможна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	ВыгрузкаВозможна = ПроверитьДанные(ДеревоВыгрузки);
	
	Если НЕ ВыгружатьСОшибками
	   И НЕ ВыгрузкаВозможна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
		
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьОтчет()
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ВРег(ЗначениеПоказателя));
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)),
		 ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.; ЧН=; ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "D" Тогда
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy"));
		Иначе
			Узел.Значение = "";
		КонецЕсли;
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251");
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();

	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено,
	                                        ВыгружатьПустую = Ложь)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = "_" + Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[Стр.Ключ + СуффиксТекущейСтроки],
			                                                                   Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая ИЛИ ВыгружатьПустую Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ВывестиПоказательВXML(Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ДополнитьСтруктуруПараметров(ПараметрыВыгрузки, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьРаздел2СКодомТарифа(КодТарифа)
	
	Результат = Ложь;
	
	Раздел2 = мДанныеОтчета.Раздел2;
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		ДанныеЛиста = ЛистРаздела2.Данные[0].Значение;
		КодТарифаЛиста = ДанныеЛиста.П000200001001;
		Если КодТарифаЛиста = КодТарифа Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("ФайлПФР");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции 

&НаСервере
Функция ЗаполненРаздел31()
	
	Результат = Ложь;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел31;
	
	НомерПП       = Неопределено;
	ФИОСотрудника = Неопределено;
	ДатаВыдачи    = Неопределено;
	ДатаОкончания = Неопределено;
	СуммаВсего    = Неопределено;
	Сумма1Месяц   = Неопределено;
	Сумма2Месяц   = Неопределено;
	Сумма3Месяц   = Неопределено;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000310001002_" + Формат(НомСтроки, "ЧГ="), ФИОСотрудника) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		ДанныеРаздела.Свойство("П000310001001_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000310001003_" + НомерСтроки, ДатаВыдачи);
		ДанныеРаздела.Свойство("П000310001004_" + НомерСтроки, ДатаОкончания);
		ДанныеРаздела.Свойство("П000310001005_" + НомерСтроки, СуммаВсего);
		ДанныеРаздела.Свойство("П000310001006_" + НомерСтроки, Сумма1Месяц);
		ДанныеРаздела.Свойство("П000310001007_" + НомерСтроки, Сумма2Месяц);
		ДанныеРаздела.Свойство("П000310001008_" + НомерСтроки, Сумма3Месяц);
		
		Если ЗначениеЗаполнено(ФИОСотрудника) ИЛИ ЗначениеЗаполнено(ДатаВыдачи)
		 ИЛИ ЗначениеЗаполнено(ДатаОкончания) ИЛИ ЗначениеЗаполнено(СуммаВсего) 
		 ИЛИ ЗначениеЗаполнено(Сумма1Месяц) ИЛИ ЗначениеЗаполнено(Сумма2Месяц) 
		 ИЛИ ЗначениеЗаполнено(Сумма3Месяц) ИЛИ ЗначениеЗаполнено (НомерПП) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	Результат = Результат
			ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000310000205)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000310000206)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000310000207)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000310000208);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел32()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	
	Результат = Ложь;
	
	Для НомерСтроки = 321 По 323 Цикл
		Для НомерГрафы = 3 По 6 Цикл
			ИмяОбласти = "П0003200" + НомерСтроки + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			Результат = (Результат ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбласти]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел33()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	
	Результат = Ложь;
	
	Для НомерСтроки = 331 По 336 Цикл
		Для НомерГрафы = 3 По 6 Цикл
			ИмяОбласти = "П0003300" + НомерСтроки + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			Результат = (Результат ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбласти]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел34()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел34;
	
	Результат = Ложь;
	
	Для НомерСтроки = 341 По 345 Цикл
		Для НомерГрафы = 3 По 4 Цикл
			ИмяОбласти = "П0003400" + НомерСтроки + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			Результат = (Результат ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбласти]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел35()
	
	Результат = Ложь;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел35;
	
	ЗаполненыСтрокиРаздела = Ложь;
	
	НомерПП = Неопределено;
	КодДеятельностиПоОКВЭД = Неопределено;
	ВидЭкономическойДеятельности = Неопределено;
	Доходы = Неопределено;
	ДоляДоходов = Неопределено;
	СуммаДолейДоходов = 0;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000350000122_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000350000101_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000350000121_" + НомерСтроки, КодДеятельностиПоОКВЭД);
		ДанныеРаздела.Свойство("П000350000122_" + НомерСтроки, ВидЭкономическойДеятельности);
		ДанныеРаздела.Свойство("П000350000103_" + НомерСтроки, Доходы);
		ДанныеРаздела.Свойство("П000350000104_" + НомерСтроки, ДоляДоходов);
		
		Если ДоляДоходов <> Неопределено Тогда
			СуммаДолейДоходов = СуммаДолейДоходов + ДоляДоходов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(КодДеятельностиПоОКВЭД)
		 ИЛИ ЗначениеЗаполнено(ВидЭкономическойДеятельности) ИЛИ ЗначениеЗаполнено(Доходы)
		 ИЛИ ЗначениеЗаполнено(ДоляДоходов) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
	
	Результат = Результат
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000350000203)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000350000204)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000350035103)
	        ИЛИ НЕ ПустаяСтрока(ДанныеРаздела.П000350035104);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел36()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел36;
	
	Результат = ЗначениеЗаполнено(ДанныеРаздела.П000360036103)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000360036203)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000360036303);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел37()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел37;
	
	Результат = Ложь;
	
	Для НомерСтроки = 371 По 375 Цикл
		Для НомерГрафы = 3 По 4 Цикл
			ИмяОбласти = "П0003700" + НомерСтроки + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			Результат = (Результат ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбласти]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел38()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел38;
	
	Результат = Ложь;
	
	Для НомерСтроки = 381 По 385 Цикл
		Для НомерГрафы = 3 По 4 Цикл
			ИмяОбласти = "П0003800" + НомерСтроки + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			Результат = (Результат ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбласти]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел4()
	
	Результат = Ложь;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	
	П000400000101 = Неопределено;
	П000400000102 = Неопределено;
	П000400000103 = Неопределено;
	П000400000104 = Неопределено;
	П000400000105 = Неопределено;
	П000400000106 = Неопределено;
	П000400000107 = Неопределено;
	П000400000108 = Неопределено;
	П000400000109 = Неопределено;
	П000400000110 = Неопределено;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000400000102_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		ДанныеРаздела.Свойство("П000400000101_" + НомерСтроки, П000400000101);
		ДанныеРаздела.Свойство("П000400000102_" + НомерСтроки, П000400000102);
		ДанныеРаздела.Свойство("П000400000103_" + НомерСтроки, П000400000103);
		ДанныеРаздела.Свойство("П000400000104_" + НомерСтроки, П000400000104);
		ДанныеРаздела.Свойство("П000400000105_" + НомерСтроки, П000400000105);
		ДанныеРаздела.Свойство("П000400000106_" + НомерСтроки, П000400000106);
		ДанныеРаздела.Свойство("П000400000107_" + НомерСтроки, П000400000107);
		ДанныеРаздела.Свойство("П000400000108_" + НомерСтроки, П000400000108);
		ДанныеРаздела.Свойство("П000400000109_" + НомерСтроки, П000400000109);
		ДанныеРаздела.Свойство("П000400000110_" + НомерСтроки, П000400000110);
		
		Если ЗначениеЗаполнено(П000400000101) ИЛИ ЗначениеЗаполнено(П000400000102)
		 ИЛИ ЗначениеЗаполнено(П000400000103) ИЛИ ЗначениеЗаполнено(П000400000104)
		 ИЛИ ЗначениеЗаполнено(П000400000105) ИЛИ ЗначениеЗаполнено(П000400000106)
		 ИЛИ ЗначениеЗаполнено(П000400000107) ИЛИ ЗначениеЗаполнено(П000400000108)
		 ИЛИ ЗначениеЗаполнено(П000400000109) ИЛИ ЗначениеЗаполнено(П000400000110) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	Результат = Результат

	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000205)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000206)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000207)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000208)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000209)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000210);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел5()
	
	Результат = Ложь;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел5;
	
	НомерПП = Неопределено;
	ФИОСтудента = Неопределено;
	НомерСправкиСО = Неопределено;
	ДатаСправкиСО = Неопределено;
	НомерСправкиОФО = Неопределено;
	ДатаСправкиОФО = Неопределено;
	СуммаВсего    = Неопределено;
	Сумма1Месяц   = Неопределено;
	Сумма2Месяц   = Неопределено;
	Сумма3Месяц   = Неопределено;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000500000120_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000500000110_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000500000120_" + НомерСтроки, ФИОСтудента);
		ДанныеРаздела.Свойство("П000500000131_" + НомерСтроки, НомерСправкиСО);
		ДанныеРаздела.Свойство("П000500000132_" + НомерСтроки, ДатаСправкиСО);
		ДанныеРаздела.Свойство("П000500000141_" + НомерСтроки, НомерСправкиОФО);
		ДанныеРаздела.Свойство("П000500000142_" + НомерСтроки, ДатаСправкиОФО);
		ДанныеРаздела.Свойство("П000500000150_" + НомерСтроки, СуммаВсего);
		ДанныеРаздела.Свойство("П000500000160_" + НомерСтроки, Сумма1Месяц);
		ДанныеРаздела.Свойство("П000500000170_" + НомерСтроки, Сумма2Месяц);
		ДанныеРаздела.Свойство("П000500000180_" + НомерСтроки, Сумма3Месяц);
		
		Если ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(ФИОСтудента)
		 ИЛИ ЗначениеЗаполнено(НомерСправкиСО) ИЛИ ЗначениеЗаполнено(ДатаСправкиСО)
		 ИЛИ ЗначениеЗаполнено(НомерСправкиОФО) ИЛИ ЗначениеЗаполнено(ДатаСправкиОФО)
		 ИЛИ ЗначениеЗаполнено(СуммаВсего) ИЛИ ЗначениеЗаполнено(Сумма1Месяц)
		 ИЛИ ЗначениеЗаполнено(Сумма2Месяц) ИЛИ ЗначениеЗаполнено(Сумма3Месяц) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	Результат = Результат
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500000250)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500000260)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500000270)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500000280)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501103)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501104)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501204)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501203)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501304)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501303)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501403)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501404);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти")
			   И ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти = Стр.Код Тогда	
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(ПараметрыВыгрузки, Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(ПараметрыВыгрузки, УзелРодитель)
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1   = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2   = мДанныеОтчета.Раздел2;
	Раздел22  = мДанныеОтчета.ПолеТабличногоДокументаРаздел22;
	Раздел31  = мДанныеОтчета.ПолеТабличногоДокументаРаздел31;
	Раздел32  = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	Раздел34  = мДанныеОтчета.ПолеТабличногоДокументаРаздел34;
	Раздел35  = мДанныеОтчета.ПолеТабличногоДокументаРаздел35;
	Раздел36  = мДанныеОтчета.ПолеТабличногоДокументаРаздел36;
	Раздел37  = мДанныеОтчета.ПолеТабличногоДокументаРаздел37;
	Раздел38  = мДанныеОтчета.ПолеТабличногоДокументаРаздел38;
	Раздел4   = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	Раздел5   = мДанныеОтчета.ПолеТабличногоДокументаРаздел5;
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "НаименованиеОрганизации"));
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "КПП"));
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОГРН"));
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "ФИОфизическогоЛица"));
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОГРНИП"));
	КонецЕсли;
	
	УзелРаздела1 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "Раздел1РасчетПоНачисленнымУплаченным");
	ЗаполнитьДаннымиУзел(Раздел1, УзелРаздела1);
	
	Узел_Раздел2РасчетПоТарифуДопТарифу = ПолучитьПодчиненныйЭлемент(УзелРодитель, "Раздел2РасчетПоТарифуДопТарифу");
	ПрототипУзла_Раздел2_1_РасчетСВпоТарифу = ПолучитьПодчиненныйЭлемент(Узел_Раздел2РасчетПоТарифуДопТарифу,
	 "Раздел2_1_РасчетСВпоТарифу");
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		Узел_Раздел2_1_РасчетСВпоТарифу = НовыйУзелИзПрототипа(ПрототипУзла_Раздел2_1_РасчетСВпоТарифу);
		ЗаполнитьДаннымиУзел(ЛистРаздела2.Данные[0].Значение, Узел_Раздел2_1_РасчетСВпоТарифу);
		
		КодТарифа = СокрЛП(ЛистРаздела2.Данные[0].Значение.П000200001001);
		ЗадатьЗначениеЭлемента(Узел_Раздел2_1_РасчетСВпоТарифу, "КодТарифа", КодТарифа);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Раздел2_1_РасчетСВпоТарифу);
	
	Узел_Раздел2_2_РасчетСВпоДопТарифуЧ_1 = ПолучитьПодчиненныйЭлемент(Узел_Раздел2РасчетПоТарифуДопТарифу,
	 "Раздел2_2_РасчетСВпоДопТарифуЧ_1");
	ЗаполнитьДаннымиУзел(Раздел22, Узел_Раздел2_2_РасчетСВпоДопТарифуЧ_1);
	
	Узел_Раздел2_3_РасчетСВпоДопТарифуЧ_2 = ПолучитьПодчиненныйЭлемент(Узел_Раздел2РасчетПоТарифуДопТарифу,
	 "Раздел2_3_РасчетСВпоДопТарифуЧ_2");
	ЗаполнитьДаннымиУзел(Раздел22, Узел_Раздел2_3_РасчетСВпоДопТарифуЧ_2);
	
	Узел_Раздел3РасчетНаПравоПримененияПониженногоТарифа = ПолучитьПодчиненныйЭлемент(УзелРодитель,
	 "Раздел3РасчетНаПравоПримененияПониженногоТарифа");
	
	Узел_Раздел3_1_СведенияДляПримененияПониженногоТарифа = ПолучитьПодчиненныйЭлемент(
	 Узел_Раздел3РасчетНаПравоПримененияПониженногоТарифа, "Раздел3_1_СведенияДляПримененияПониженногоТарифа");
	ЗаполнитьДаннымиУзел(Раздел31, Узел_Раздел3_1_СведенияДляПримененияПониженногоТарифа);
	
	ПрототипУзла_СведенияОработникеИнвалиде = ПолучитьПодчиненныйЭлемент(
	 Узел_Раздел3_1_СведенияДляПримененияПониженногоТарифа, "СведенияОработникеИнвалиде");
	НомСтр = 1;
	ЧислоВыгруженныхСтрок = 0;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел31, "П000310000102_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(Раздел31["П000310000102_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			
			Узел_СведенияОработникеИнвалиде = НовыйУзелИзПрототипа(ПрототипУзла_СведенияОработникеИнвалиде);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел31, Узел_СведенияОработникеИнвалиде, НомСтр);
			
			УзелФИО = ПолучитьПодчиненныйЭлемент(Узел_СведенияОработникеИнвалиде, "ФИО");
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ВРЕГ(Раздел31["П000310000102_" + Формат(НомСтр, "ЧГ=")]));
			
			ЗадатьЗначениеЭлемента(УзелФИО, "Фамилия",  ФИО.Фамилия);
			ЗадатьЗначениеЭлемента(УзелФИО, "Имя",      ФИО.Имя);
			ЗадатьЗначениеЭлемента(УзелФИО, "Отчество", ФИО.Отчество);
			
			ЗадатьЗначениеЭлемента(Узел_СведенияОработникеИнвалиде, "НомерПП", ЧислоВыгруженныхСтрок);
			
			ПрототипУзла_СведенияИзСправки = ПолучитьПодчиненныйЭлемент(Узел_СведенияОработникеИнвалиде, "СведенияИзСправки");
			УдалятьПрототип = Ложь;
			Для Инд = 1 По 5 Цикл
				ДатаВыдачиСправки = Раздел31["П00031000013" + Инд + "_" + Формат(НомСтр, "ЧГ=")];
				ДатаОкончанияДействия = Раздел31["П00031000014" + Инд + "_" + Формат(НомСтр, "ЧГ=")];
				Если ЗначениеЗаполнено(ДатаВыдачиСправки) ИЛИ ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда
					УдалятьПрототип = Истина;
					Узел_СведенияИзСправки = НовыйУзелИзПрототипа(ПрототипУзла_СведенияИзСправки);
					УстановитьЗначениеЭлемента(Узел_СведенияИзСправки, "ДатаВыдачиСправки", ДатаВыдачиСправки);
					УстановитьЗначениеЭлемента(Узел_СведенияИзСправки, "ДатаОкончанияДействия", ДатаОкончанияДействия);
				КонецЕсли;
			КонецЦикла;
			Если УдалятьПрототип Тогда
				РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведенияИзСправки);
			КонецЕсли;
			
			Узел_СуммыВыплатИвознаграждений = ПолучитьПодчиненныйЭлемент(Узел_СведенияОработникеИнвалиде,
			 "СуммыВыплатИвознаграждений");
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел31, Узел_СуммыВыплатИвознаграждений, НомСтр, , Истина);
			
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
	КонецЦикла;
	Если ЧислоВыгруженныхСтрок > 0 Тогда
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведенияОработникеИнвалиде);
	КонецЕсли;
	
	ЗадатьЗначениеЭлемента(Узел_Раздел3_1_СведенияДляПримененияПониженногоТарифа, "КоличествоРаботниковИнвалидов",
	 ЧислоВыгруженныхСтрок);
	
	Узел_Раздел3_2_ДляОбщественныхОрганизацийИнвалидов = ПолучитьПодчиненныйЭлемент(
	 Узел_Раздел3РасчетНаПравоПримененияПониженногоТарифа, "Раздел3_2_ДляОбщественныхОрганизацийИнвалидов");
	ЗаполнитьДаннымиУзел(Раздел32, Узел_Раздел3_2_ДляОбщественныхОрганизацийИнвалидов);
	
	Узел_Раздел3_3_ДляОрганизацийУставныйКапиталСостоитИзВкладовОбщОргИнвалидов = ПолучитьПодчиненныйЭлемент(
	 Узел_Раздел3РасчетНаПравоПримененияПониженногоТарифа,
	 "Раздел3_3_ДляОрганизацийУставныйКапиталСостоитИзВкладовОбщОргИнвалидов");
	ЗаполнитьДаннымиУзел(Раздел32, Узел_Раздел3_3_ДляОрганизацийУставныйКапиталСостоитИзВкладовОбщОргИнвалидов);
	
	Узел_Раздел3_4_ДляОрганизацийИТ = ПолучитьПодчиненныйЭлемент(Узел_Раздел3РасчетНаПравоПримененияПониженногоТарифа,
	 "Раздел3_4_ДляОрганизацийИТ");
	ЗаполнитьДаннымиУзел(Раздел34, Узел_Раздел3_4_ДляОрганизацийИТ);
	
	Узел_Раздел3_5_ДляОрганизацийСМИ = ПолучитьПодчиненныйЭлемент(Узел_Раздел3РасчетНаПравоПримененияПониженногоТарифа,
	 "Раздел3_5_ДляОрганизацийСМИ");
	ЗаполнитьДаннымиУзел(Раздел35, Узел_Раздел3_5_ДляОрганизацийСМИ);
	
	ПрототипУзла_СведенияПоВидуДеятельности = ПолучитьПодчиненныйЭлемент(Узел_Раздел3_5_ДляОрганизацийСМИ,
	 "СведенияПоВидуДеятельности");
	НомСтр = 1;
	ЧислоВыгруженныхСтрок = 0;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел35, "П000350000122_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(Раздел35["П000350000122_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			
			Узел_СведенияПоВидуДеятельности = НовыйУзелИзПрототипа(ПрототипУзла_СведенияПоВидуДеятельности);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел35, Узел_СведенияПоВидуДеятельности, НомСтр);
			
			ЗадатьЗначениеЭлемента(Узел_СведенияПоВидуДеятельности, "НомерПП", ЧислоВыгруженныхСтрок);
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
	КонецЦикла;
	Если ЧислоВыгруженныхСтрок > 0 Тогда
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведенияПоВидуДеятельности);
	КонецЕсли;
	
	Узел_Раздел3_6_ДляОрганизацийПрименяющихУСН = ПолучитьПодчиненныйЭлемент(
	 Узел_Раздел3РасчетНаПравоПримененияПониженногоТарифа, "Раздел3_6_ДляОрганизацийПрименяющихУСН");
	ЗаполнитьДаннымиУзел(Раздел36, Узел_Раздел3_6_ДляОрганизацийПрименяющихУСН);
	
	Узел_Раздел3_7_ДляНекоммерческихОрганизацийПрименяющихУСН = ПолучитьПодчиненныйЭлемент(
	 Узел_Раздел3РасчетНаПравоПримененияПониженногоТарифа, "Раздел3_7_ДляНекоммерческихОрганизацийПрименяющихУСН");
	ЗаполнитьДаннымиУзел(Раздел37, Узел_Раздел3_7_ДляНекоммерческихОрганизацийПрименяющихУСН);
	
	Узел_Раздел3_8_ДляОрганизацийОказывающихИнжиниринговыеУслуги = ПолучитьПодчиненныйЭлемент(
	 Узел_Раздел3РасчетНаПравоПримененияПониженногоТарифа, "Раздел3_8_ДляОрганизацийОказывающихИнжиниринговыеУслуги");
	ЗаполнитьДаннымиУзел(Раздел38, Узел_Раздел3_8_ДляОрганизацийОказывающихИнжиниринговыеУслуги);
	
	Узел_Раздел4СуммыДоначисленныхСтраховыхВзносов = ПолучитьПодчиненныйЭлемент(УзелРодитель,
	 "Раздел4СуммыДоначисленныхСтраховыхВзносов");
	ЗаполнитьДаннымиУзел(Раздел4, Узел_Раздел4СуммыДоначисленныхСтраховыхВзносов);
	
	ПрототипУзла_СуммаДоначисленныхВзносовЗаПериод = ПолучитьПодчиненныйЭлемент(
	 Узел_Раздел4СуммыДоначисленныхСтраховыхВзносов, "СуммаДоначисленныхВзносовЗаПериод");
	НомСтр = 1;
	ЧислоВыгруженныхСтрок = 0;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел4, "П000400000102_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(Раздел4["П000400000102_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			
			Узел_СуммаДоначисленныхВзносовЗаПериод = НовыйУзелИзПрототипа(ПрототипУзла_СуммаДоначисленныхВзносовЗаПериод);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел4, Узел_СуммаДоначисленныхВзносовЗаПериод, НомСтр);
			
			Узел_СуммаДоначисленныхСтраховыхВзносов = ПолучитьПодчиненныйЭлемент(
			Узел_СуммаДоначисленныхВзносовЗаПериод, "СуммаДоначисленныхСтраховыхВзносов");
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел4, Узел_СуммаДоначисленныхСтраховыхВзносов, НомСтр);
			
			ЗадатьЗначениеЭлемента(Узел_СуммаДоначисленныхВзносовЗаПериод, "НомерПП", ЧислоВыгруженныхСтрок);
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
	КонецЦикла;
	Если ЧислоВыгруженныхСтрок > 0 Тогда
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СуммаДоначисленныхВзносовЗаПериод);
	КонецЕсли;
	
	Узел_Раздел5СведенияОВыплатахВпользуОбучающихся = ПолучитьПодчиненныйЭлемент(УзелРодитель,
	 "Раздел5СведенияОВыплатахВпользуОбучающихся");
	ЗаполнитьДаннымиУзел(Раздел5, Узел_Раздел5СведенияОВыплатахВпользуОбучающихся);
	
	ПрототипУзла_СведенияОбОбучающемся = ПолучитьПодчиненныйЭлемент(Узел_Раздел5СведенияОВыплатахВпользуОбучающихся,
	"СведенияОбОбучающемся");
	НомСтр = 1;
	ЧислоВыгруженныхСтрок = 0;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел5, "П000500000120_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(Раздел5["П000500000120_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			
			Узел_СведенияОбОбучающемся = НовыйУзелИзПрототипа(ПрототипУзла_СведенияОбОбучающемся);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел5, Узел_СведенияОбОбучающемся, НомСтр);
			
			УзелФИО = ПолучитьПодчиненныйЭлемент(Узел_СведенияОбОбучающемся, "ФИО");
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ВРЕГ(Раздел5["П000500000120_" + Формат(НомСтр, "ЧГ=")]));
			
			ЗадатьЗначениеЭлемента(УзелФИО, "Фамилия",  ФИО.Фамилия);
			ЗадатьЗначениеЭлемента(УзелФИО, "Имя",      ФИО.Имя);
			ЗадатьЗначениеЭлемента(УзелФИО, "Отчество", ФИО.Отчество);
			
			Узел_СуммыВыплатИвознаграждений = ПолучитьПодчиненныйЭлемент(Узел_СведенияОбОбучающемся,
			 "СуммыВыплатИвознаграждений");
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел5, Узел_СуммыВыплатИвознаграждений, НомСтр, , Истина);
			
			ЗадатьЗначениеЭлемента(Узел_СведенияОбОбучающемся, "НомерПП", ЧислоВыгруженныхСтрок);
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
	КонецЦикла;
	Если ЧислоВыгруженныхСтрок > 0 Тогда
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведенияОбОбучающемся);
	КонецЕсли;
	
	ЗадатьЗначениеЭлемента(Узел_Раздел5СведенияОВыплатахВпользуОбучающихся, "КоличествоОбучающихся",
	 ЧислоВыгруженныхСтрок);
	
КонецПроцедуры

&НаСервере
Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10
		 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя),
	 ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

&НаСервере
Функция ЗначениеСодержитсяВСписке(ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя "
			+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + " меньше минимально возможной (" + ДлинаЗначения + " < "
			+ Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя "
			+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + " больше максимально возможной (" + ДлинаЗначения + " > "
			+ Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки700_2013");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		НомСтр = ВысотаТаблицы - НомерСтроки + 2;
		Если Макет.Область(НомерСтроки, 0, НомерСтроки, 0).Видимость = Неопределено Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			НомерСтроки);

			Сообщение.Сообщить();
			
		КонецЕсли;
	КонецЦикла;
	    	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ЛишьОдноИзЗначениеЗаполнено(Значение1, Значение2)
	
	ЕстьЗначение1 = ЗначениеЗаполнено(Значение1);
	ЕстьЗначение2 = ЗначениеЗаполнено(Значение2);
	
	Возврат ЕстьЗначение1 И НЕ ЕстьЗначение2 ИЛИ ЕстьЗначение2 И НЕ ЕстьЗначение1;
	
КонецФункции 

&НаСервере
Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0)
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
		    РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПредставлениеЧисла(Знач ЗначЧисло)
	
	Если ТипЗнч(ЗначЧисло) = Тип("Строка") Тогда
		ЗначЧисло = СокрЛП(ЗначЧисло);	
		ЗначЧисло = ?(ЗначениеЗаполнено(ЗначЧисло) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначЧисло),
		Число(ЗначЧисло), 0);
	КонецЕсли;
	
	СтрЧисло = Формат(ЗначЧисло, "ЧН=; ЧГ=");	
	
	Возврат СтрЧисло;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнениеТитульный(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел1(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел21(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
		
	ПроверитьЗаполнениеРаздел31(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел32(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел33(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел34(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел35(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел36(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел37(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел38(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел4(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел5(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки);
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции 

&НаСервере
Процедура ПроверитьЗаполнениеРаздел1(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	
	ТекстОписанияОшибки = НСтр("ru='При заполненной строке 120 раздела 1 должен быть заполнен раздел 4!'");
	ЗаполненаСтрока120 = ЗначениеЗаполнено(ДанныеРаздела.П000100012003)
	                 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000100012004)
	                 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000100012005);
	Если ЗаполненаСтрока120 И НЕ ЗаполненРаздел4() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел4", "П000400000101_1");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел21(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Раздел2 = мДанныеОтчета.Раздел2;
	ДанныеРаздела31 = мДанныеОтчета.ПолеТабличногоДокументаРаздел31;
	ДанныеРаздела33 = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	
	РазрешенныеКодыТарифов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"01,52,53,18,19,20,03,04,06,07,08,09,10,11,12,13,14,15,16,36");
	ЭтоПервыйКвартал = (ПараметрыВыгрузки.КодОтчетногоПериода = "03");
	
	КодыТарифовНаЛистах = Новый Соответствие;
	
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		НомерЛиста = Раздел2.Индекс(ЛистРаздела2) + 1;
		ДанныеЛиста = ЛистРаздела2.Данные[0].Значение;
		
		КодТарифа = ДанныеЛиста.П000200001001;
		
		Если ПустаяСтрока(КодТарифа) Тогда
			ТекстОписанияОшибки = НСтр("ru='На странице " + НомерЛиста + " раздела 2 не задан код тарифа!'");
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2",
			 "П000200001001", НомерЛиста);
			СтатусПроверки = Ложь;
		ИначеЕсли РазрешенныеКодыТарифов.Найти(КодТарифа) = Неопределено Тогда
			ТекстОписанияОшибки = НСтр("ru='На странице " + НомерЛиста + " раздела 2 неверно задан код тарифа!'");
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2",
			 "П000200001001", НомерЛиста);
			СтатусПроверки = Ложь;
		Иначе
			КодыТарифовНаЛистах.Вставить(КодТарифа, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ТекстОписанияОшибки = НСтр("ru='При заполненном разделе 2 с кодом тарифа 03 должен быть заполнен либо раздел 3.1,
	                               |либо раздел 3.2, либо раздел 3.3!'");
	Если КодыТарифовНаЛистах.Получить("03") <> Неопределено И НЕ (ЗаполненРаздел31() ИЛИ ЗаполненРаздел32()
	 ИЛИ ЗаполненРаздел33()) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел31", "П000310001001_1");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='При заполненном разделе 2 с кодом тарифа 06 должен быть заполнен раздел 3.4!'");
	Если КодыТарифовНаЛистах.Получить("06") <> Неопределено И НЕ ЗаполненРаздел34() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел34", "П000340034103");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='При заполненном разделе 2 с кодом тарифа 07 должен быть заполнен раздел 3.6!'");
	Если КодыТарифовНаЛистах.Получить("07") <> Неопределено И НЕ ЗаполненРаздел36() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел36", "П000360036103");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='При заполненном разделе 2 с кодом тарифа 09 должен быть заполнен раздел 3.5!'");
	Если КодыТарифовНаЛистах.Получить("09") <> Неопределено И НЕ ЗаполненРаздел35() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350000101_1");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='При заполненном разделе 2 с кодом тарифа 12 должен быть заполнен раздел 3.7!'");
	Если КодыТарифовНаЛистах.Получить("12") <> Неопределено И НЕ ЗаполненРаздел37() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел37", "П000370037103");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='При заполненном разделе 2 с кодом тарифа 14 должен быть заполнен раздел 3.8!'");
	Если КодыТарифовНаЛистах.Получить("14") <> Неопределено И НЕ ЗаполненРаздел38() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел38", "П000380038103");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел31(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел31() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел31;
	ЭтоПервыйКвартал = (ПараметрыВыгрузки.КодОтчетногоПериода = "03");
	
	НомСтроки = 1;
	ФИОСотрудника  = Неопределено;
	ДатаВыдачи1    = Неопределено;
	ДатаВыдачи2    = Неопределено;
	ДатаВыдачи3    = Неопределено;
	ДатаВыдачи4    = Неопределено;
	ДатаВыдачи5    = Неопределено;
	ДатаОкончания1 = Неопределено;
	ДатаОкончания2 = Неопределено;
	ДатаОкончания3 = Неопределено;
	ДатаОкончания4 = Неопределено;
	ДатаОкончания5 = Неопределено;
	СуммаВсего     = Неопределено;
	Сумма1Месяц    = Неопределено;
	Сумма2Месяц    = Неопределено;
	Сумма3Месяц    = Неопределено;
	
	ИтогоСуммаВсего  = 0;
	ИтогоСумма1Месяц = 0;
	ИтогоСумма2Месяц = 0;
	ИтогоСумма3Месяц = 0;
	
	Пока ДанныеРаздела.Свойство("П000310000102_" + Формат(НомСтроки, "ЧГ="), ФИОСотрудника) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000310000131_" + НомерСтроки, ДатаВыдачи1);
		ДанныеРаздела.Свойство("П000310000132_" + НомерСтроки, ДатаВыдачи2);
		ДанныеРаздела.Свойство("П000310000133_" + НомерСтроки, ДатаВыдачи3);
		ДанныеРаздела.Свойство("П000310000134_" + НомерСтроки, ДатаВыдачи4);
		ДанныеРаздела.Свойство("П000310000135_" + НомерСтроки, ДатаВыдачи5);
		ДанныеРаздела.Свойство("П000310000141_" + НомерСтроки, ДатаОкончания1);
		ДанныеРаздела.Свойство("П000310000142_" + НомерСтроки, ДатаОкончания2);
		ДанныеРаздела.Свойство("П000310000143_" + НомерСтроки, ДатаОкончания3);
		ДанныеРаздела.Свойство("П000310000144_" + НомерСтроки, ДатаОкончания4);
		ДанныеРаздела.Свойство("П000310000145_" + НомерСтроки, ДатаОкончания5);
		ДанныеРаздела.Свойство("П000310000105_" + НомерСтроки, СуммаВсего);
		ДанныеРаздела.Свойство("П000310000106_" + НомерСтроки, Сумма1Месяц);
		ДанныеРаздела.Свойство("П000310000107_" + НомерСтроки, Сумма2Месяц);
		ДанныеРаздела.Свойство("П000310000108_" + НомерСтроки, Сумма3Месяц);
		
		Если ЗначениеЗаполнено(ФИОСотрудника) 
		 ИЛИ ЗначениеЗаполнено(ДатаВыдачи1) ИЛИ ЗначениеЗаполнено(ДатаОкончания1)
		 ИЛИ ЗначениеЗаполнено(ДатаВыдачи2) ИЛИ ЗначениеЗаполнено(ДатаОкончания2)
		 ИЛИ ЗначениеЗаполнено(ДатаВыдачи3) ИЛИ ЗначениеЗаполнено(ДатаОкончания3)
		 ИЛИ ЗначениеЗаполнено(ДатаВыдачи4) ИЛИ ЗначениеЗаполнено(ДатаОкончания4)
		 ИЛИ ЗначениеЗаполнено(ДатаВыдачи5) ИЛИ ЗначениеЗаполнено(ДатаОкончания5)
		 ИЛИ ЗначениеЗаполнено(СуммаВсего)
		 ИЛИ ЗначениеЗаполнено(Сумма1Месяц) ИЛИ ЗначениеЗаполнено(Сумма2Месяц) ИЛИ ЗначениеЗаполнено(Сумма3Месяц) Тогда
			СтрокаЗаполнена = Истина;
		КонецЕсли;
		
		Если СтрокаЗаполнена Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ФИОСотрудника);
			Если НЕ ЗначениеЗаполнено(ФИО.Фамилия) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3.1, в строке "
				+ НомерСтроки + " не указана фамилия сотрудника!", "Раздел31", "П000310000102_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ФИО.Имя) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3.1, в строке "
				+ НомерСтроки + " не указано имя сотрудника!", "Раздел31", "П000310000102_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ИтогоСуммаВсего  = ИтогоСуммаВсего + СуммаВсего;
		ИтогоСумма1Месяц = ИтогоСумма1Месяц + Сумма1Месяц;
		ИтогоСумма2Месяц = ИтогоСумма2Месяц + Сумма2Месяц;
		ИтогоСумма3Месяц = ИтогоСумма3Месяц + Сумма3Месяц;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел32(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел32() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	
	Для Графа = 3 По 6 Цикл
		
		КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");

		ИмяПоказателя321 = "П0003200321" + КодГрафы;
		ИмяПоказателя322 = "П0003200322" + КодГрафы;
		ИмяПоказателя323 = "П0003200323" + КодГрафы;
		ПроверяемоеЗначение = ДанныеРаздела[ИмяПоказателя323];
		Если ДанныеРаздела[ИмяПоказателя321] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя322]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя323]) Тогда
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				 "ru='Не указана численность членов организации в графе %1 строки 321 раздела 3.2!'"), Графа);
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел32", ИмяПоказателя321);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел33(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел33() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПервыйКвартал = (ПараметрыВыгрузки.КодОтчетногоПериода = "03");
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	
	Если ЕстьРаздел2СКодомТарифа("03") Тогда
		ТекстОписанияОшибки = НСтр("ru='Значение показателя в графе 3 строки 331 раздела 3.3 не равно значений показателя
									   |""Среднесписочная численность"" на титульном листе!'");
		Если Число(ПараметрыВыгрузки.СреднесписочнаяЧисленность) <> ДанныеРаздела.П000330033103 Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел32", "П000330033103");
		КонецЕсли;
	КонецЕсли;
	
	Для Графа = 3 По 6 Цикл
		КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");
		
		ИмяПоказателя331 = "П0003300331" + КодГрафы;
		ИмяПоказателя332 = "П0003300332" + КодГрафы;
		ИмяПоказателя333 = "П0003300333" + КодГрафы;
		
		Если ДанныеРаздела[ИмяПоказателя331] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя332]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя333]) Тогда
				ТекстОписанияОшибки = НСтр("ru='Не указана среднесписочная численность в графе " + Графа
				+ " строки 331 раздела 3.3!'");
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел32", ИмяПоказателя331);
			КонецЕсли;
		КонецЕсли;
		
		ИмяПоказателя334 = "П0003300334" + КодГрафы;
		ИмяПоказателя335 = "П0003300335" + КодГрафы;
		ИмяПоказателя336 = "П0003300336" + КодГрафы;
		
		Если ДанныеРаздела[ИмяПоказателя334] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя335]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя336]) Тогда
				ТекстОписанияОшибки = НСтр("ru='Не указан фонд оплаты труда в графе " + Графа + " строки 334 раздела 3.3!'");
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел32", ИмяПоказателя334);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел34(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел34() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел34;
	
	Для Графа = 3 По 4 Цикл
		КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");
		ИмяПоказателя341 = "П0003400341" + КодГрафы;
		ИмяПоказателя342 = "П0003400342" + КодГрафы;
		ИмяПоказателя343 = "П0003400343" + КодГрафы;
		
		Если ДанныеРаздела[ИмяПоказателя341] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя342]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя343]) Тогда
				ТекстОписанияОшибки = НСтр("ru='Не указана сумма доходов в графе " + Графа + " строки 341 раздела 3.4!'");
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел34", ИмяПоказателя341);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстОписанияОшибки =
	 НСтр("ru='Не указана дата записи в реестре аккредитованных организаций в строке 345 раздела 3.4!'");
	Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П000340034503) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел34", "П000340034503");
	КонецЕсли;
	
	ТекстОписанияОшибки =
	 НСтр("ru='Не указан номер записи в реестре аккредитованных организаций в строке 345 раздела 3.4!'");
	Если ПустаяСтрока(ДанныеРаздела.П000340034504) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел34", "П000340034504");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел35(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел35() Тогда
		Возврат;
	КонецЕсли;
		
	СписокПредопределенныхКодовОКВЭД = "22.12, 22.13, 92.20, 92.40";
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел35;
	
	НомерПП = Неопределено;
	КодДеятельностиПоОКВЭД = Неопределено;
	ВидЭкономическойДеятельности = Неопределено;
	Доходы = Неопределено;
	ДоляДоходов = Неопределено;
	
	СуммаДоходов = 0;
	СуммаДолейДоходов = 0;
	ЕстьПредопределенныйОКВЭД = Ложь;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000350000122_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000350000101_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000350000121_" + НомерСтроки, КодДеятельностиПоОКВЭД);
		ДанныеРаздела.Свойство("П000350000122_" + НомерСтроки, ВидЭкономическойДеятельности);
		ДанныеРаздела.Свойство("П000350000103_" + НомерСтроки, Доходы);
		ДанныеРаздела.Свойство("П000350000104_" + НомерСтроки, ДоляДоходов);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(КодДеятельностиПоОКВЭД)
		              ИЛИ ЗначениеЗаполнено(ВидЭкономическойДеятельности)
		              ИЛИ ЗначениеЗаполнено(Доходы) ИЛИ ЗначениеЗаполнено(ДоляДоходов);
		
		Если СтрокаЗаполнена Тогда
			Если ПустаяСтрока(КодДеятельностиПоОКВЭД) Тогда
				ТекстОписанияОшибки = НСтр("ru='Не задан код вида деятельности по ОКВЭД в строке " + НомерСтроки + "!'");
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350000121_" + НомерСтроки);
			Иначе
				Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(КодДеятельностиПоОКВЭД) Тогда
					ТекстОписанияОшибки = НСтр("ru='Указан некорректный код вида деятельности по ОКВЭД в строке " + НомерСтроки
					                         + "!'");
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350000121_" + НомерСтроки);
				КонецЕсли;
				ЕстьПредопределенныйОКВЭД = ЕстьПредопределенныйОКВЭД ИЛИ ЗначениеСодержитсяВСписке(КодДеятельностиПоОКВЭД,
				                                                                         СписокПредопределенныхКодовОКВЭД);
			КонецЕсли;	
		КонецЕсли;
		
		СуммаДоходов = СуммаДоходов + Доходы;
		СуммаДолейДоходов = СуммаДолейДоходов + ДоляДоходов;
		
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
		
	ТекстОписанияОшибки = НСтр("ru='В таблице раздела 3.5 нет ни одной строки с кодом деятельности по ОКВЭД из списка "
	 + СписокПредопределенныхКодовОКВЭД + "!'");
	Если НЕ ЕстьПредопределенныйОКВЭД Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350000121_1");
	КонецЕсли;
			
	ТекстОписанияОшибки = НСтр("ru='В разделе 3.5 итог по графе 4 должен равняться 100!'");
	Если ДанныеРаздела.П000350000204 <> 100 Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350000204");
	КонецЕсли;
			
	ТекстОписанияОшибки = НСтр("ru='Не указана дата внесения в реестр СМИ в строке 351 раздела 3.5!'");
	Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П000350035103) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350035103");
	КонецЕсли;
	
	ТекстОписанияОшибки =
	 НСтр("ru='Не указан номер записи в реестре аккредитованных организаций в строке 351 раздела 3.5!'");
	Если ПустаяСтрока(ДанныеРаздела.П000350035104) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350035104");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел36(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел36() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел36;
	          
	ИмяПоказателя361 = "П000360036103";
	ИмяПоказателя362 = "П000360036203";
	ИмяПоказателя363 = "П000360036303";
	
	Если ДанныеРаздела[ИмяПоказателя361] = 0 Тогда
		Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя362]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя363]) Тогда
			ТекстОписанияОшибки = НСтр("ru='Не указана сумма доходов в графе 3 строки 361 раздела 3.6!'");
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел36", ИмяПоказателя361);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел37(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел37() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел37;
	
	Для Графа = 3 По 4 Цикл
		КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");
				
		ПроверяемыйПоказатель    = "П0003700375" + КодГрафы;
		КонтрольныйПоказатель371 = "П0003700371" + КодГрафы;
		КонтрольныйПоказатель372 = "П0003700372" + КодГрафы;
		КонтрольныйПоказатель373 = "П0003700373" + КодГрафы;
		КонтрольныйПоказатель374 = "П0003700374" + КодГрафы;
		КонтрольныйПоказатель375 = "П0003700375" + КодГрафы;
		
		Если ДанныеРаздела[КонтрольныйПоказатель371] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель372])
			 ИЛИ ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель373])
			 ИЛИ ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель374])
			 ИЛИ ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель375]) Тогда
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				 "ru='Не указана сумма доходов в графе %1 строки 371 раздела 3.7!'"), Графа);
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел37", КонтрольныйПоказатель371);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел38(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел38;
	
	Если НЕ ЗаполненРаздел38() Тогда
		Возврат;
	КонецЕсли;
	
	Для Графа = 3 По 4 Цикл
		КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");
		
		ИмяПоказателя1 = "П0003800381" + КодГрафы;
		ИмяПоказателя2 = "П0003800382" + КодГрафы;
						
		ПроверяемыйПоказатель   = "П0003800383" + КодГрафы;

		КонтрольныйПоказатель381 = "П0003800381" + КодГрафы;
		КонтрольныйПоказатель382 = "П0003800382" + КодГрафы;
		КонтрольныйПоказатель383 = "П0003800383" + КодГрафы;
		
		Если ДанныеРаздела[КонтрольныйПоказатель381] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель382])
			 ИЛИ ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель383]) Тогда
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				 "ru='Не указана сумма доходов в графе %1 строки 381 раздела 3.8!'"), Графа);
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел38", КонтрольныйПоказатель381);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстОписанияОшибки = НСтр("ru='Не указана дата получения положительного заключения в строке 385 раздела 3.8!'");
	
	Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П000380038503) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел38", "П000380038503");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='Не указан номер положительного заключения в строке 385 раздела 3.8!'");
	
	Если ПустаяСтрока(ДанныеРаздела.П000380038504) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел38", "П000380038504");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел4(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел4() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	
	НомерПП = Неопределено;
	ОснованиеДляДоначисленияСВ = Неопределено;
	ГодНачисления = Неопределено;
	МесяцНачисления = Неопределено;
	ОПСстраховаяЧасть = Неопределено;
	ОПСстраховаяЧастьСвышеПределаБазы = Неопределено;
	ОПСнакопительнаяЧасть = Неопределено;
	ОПСстраховаяЧастьПоДопТар1 = Неопределено;
	ОПСстраховаяЧастьПоДопТар2 = Неопределено;
	СтраховыеВзносыОМС = Неопределено;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000400000102_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000400000101_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000400000102_" + НомерСтроки, ОснованиеДляДоначисленияСВ);
		ДанныеРаздела.Свойство("П000400000103_" + НомерСтроки, ГодНачисления);
		ДанныеРаздела.Свойство("П000400000104_" + НомерСтроки, МесяцНачисления);
		ДанныеРаздела.Свойство("П000400000105_" + НомерСтроки, ОПСстраховаяЧасть);
		ДанныеРаздела.Свойство("П000400000106_" + НомерСтроки, ОПСстраховаяЧастьСвышеПределаБазы);
		ДанныеРаздела.Свойство("П000400000107_" + НомерСтроки, ОПСнакопительнаяЧасть);
		ДанныеРаздела.Свойство("П000400000108_" + НомерСтроки, ОПСстраховаяЧастьПоДопТар1);
		ДанныеРаздела.Свойство("П000400000109_" + НомерСтроки, ОПСстраховаяЧастьПоДопТар2);
		ДанныеРаздела.Свойство("П000400000110_" + НомерСтроки, СтраховыеВзносыОМС);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(ОснованиеДляДоначисленияСВ)
		              ИЛИ ЗначениеЗаполнено(ГодНачисления) ИЛИ ЗначениеЗаполнено(МесяцНачисления)
		              ИЛИ ЗначениеЗаполнено(ОПСстраховаяЧасть) ИЛИ ЗначениеЗаполнено(ОПСстраховаяЧастьСвышеПределаБазы)
		              ИЛИ ЗначениеЗаполнено(ОПСнакопительнаяЧасть) ИЛИ ЗначениеЗаполнено(ОПСстраховаяЧастьПоДопТар1)
		              ИЛИ ЗначениеЗаполнено(ОПСстраховаяЧастьПоДопТар2) ИЛИ ЗначениеЗаполнено(СтраховыеВзносыОМС);
		
		Если СтрокаЗаполнена Тогда
			ТекстОписанияОшибки = НСтр("ru='Некорректно указано основание для доначисления страховых взносов в строке "
			 + НомерСтроки + " раздела 4!'");
			Если ОснованиеДляДоначисленияСВ <> "1" И ОснованиеДляДоначисленияСВ <> "2" Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел4", "П000400000102_" + НомерСтроки);
			КонецЕсли;
			
			ТекстОписанияОшибки = НСтр(
			 "ru='Некорректно указан период, за который выявлены и доначислены страховые взносы в строке " + НомерСтроки
			 + " раздела 4!'");
			Если НЕ ЗначениеЗаполнено(ГодНачисления) ИЛИ НЕ ЗначениеЗаполнено(МесяцНачисления) Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел4", "П000400000103_" + НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРаздел5(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел5() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел5;
	ЭтоПервыйКвартал = (ПараметрыВыгрузки.КодОтчетногоПериода = "03");
	
	НомерПП = Неопределено;
	ФИОСтудента = Неопределено;
	НомерСправкиСО = Неопределено;
	ДатаСправкиСО = Неопределено;
	НомерСправкиОФО = Неопределено;
	ДатаСправкиОФО = Неопределено;
	СуммаВсего    = Неопределено;
	Сумма1Месяц   = Неопределено;
	Сумма2Месяц   = Неопределено;
	Сумма3Месяц   = Неопределено;
	
	ИтогГрафа5 = 0;
	ИтогГрафа6 = 0;
	ИтогГрафа7 = 0;
	ИтогГрафа8 = 0;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000500000120_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000500000110_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000500000120_" + НомерСтроки, ФИОСтудента);
		ДанныеРаздела.Свойство("П000500000131_" + НомерСтроки, НомерСправкиСО);
		ДанныеРаздела.Свойство("П000500000132_" + НомерСтроки, ДатаСправкиСО);
		ДанныеРаздела.Свойство("П000500000141_" + НомерСтроки, НомерСправкиОФО);
		ДанныеРаздела.Свойство("П000500000142_" + НомерСтроки, ДатаСправкиОФО);
		ДанныеРаздела.Свойство("П000500000150_" + НомерСтроки, СуммаВсего);
		ДанныеРаздела.Свойство("П000500000160_" + НомерСтроки, Сумма1Месяц);
		ДанныеРаздела.Свойство("П000500000170_" + НомерСтроки, Сумма2Месяц);
		ДанныеРаздела.Свойство("П000500000180_" + НомерСтроки, Сумма3Месяц);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(ФИОСтудента)
		              ИЛИ ЗначениеЗаполнено(НомерСправкиСО) ИЛИ ЗначениеЗаполнено(ДатаСправкиСО)
		              ИЛИ ЗначениеЗаполнено(НомерСправкиОФО) ИЛИ ЗначениеЗаполнено(ДатаСправкиОФО)
		              ИЛИ ЗначениеЗаполнено(СуммаВсего) ИЛИ ЗначениеЗаполнено(Сумма1Месяц)
		              ИЛИ ЗначениеЗаполнено(Сумма2Месяц) ИЛИ ЗначениеЗаполнено(Сумма3Месяц);
		
		Если СтрокаЗаполнена Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ФИОСтудента);
			Если НЕ ЗначениеЗаполнено(ФИО.Фамилия) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки
				 + " не указана фамилия студента!", "Раздел5", "П000500000120_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ФИО.Имя) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки
				 + " не указано имя студента!", "Раздел5", "П000500000120_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(НомерСправкиСО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки
				 + " не указан номер справки!", "Раздел5", "П000500000131_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаСправкиСО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки
				 + " не указана дата выдачи справки!", "Раздел5", "П000500000132_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(НомерСправкиОФО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки
				 + " не указан номер справки!", "Раздел5", "П000500000141_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаСправкиОФО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки
				 + " не указана дата выдачи справки!", "Раздел5", "П000500000142_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ИтогГрафа5 = ИтогГрафа5 + СуммаВсего;
		ИтогГрафа6 = ИтогГрафа6 + Сумма1Месяц;
		ИтогГрафа7 = ИтогГрафа7 + Сумма2Месяц;
		ИтогГрафа8 = ИтогГрафа8 + Сумма3Месяц;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
		
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указана дата записи в реестре!'");
	Если НЕ ПустаяСтрока(ДанныеРаздела.П000500501104) И НЕ ЗначениеЗаполнено(ДанныеРаздела.П000500501103) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501103");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указан номер записи в реестре!'");
	Если ЗначениеЗаполнено(ДанныеРаздела.П000500501103) И ПустаяСтрока(ДанныеРаздела.П000500501104) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501104");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указана дата записи в реестре!'");
	Если НЕ ПустаяСтрока(ДанныеРаздела.П000500501204) И НЕ ЗначениеЗаполнено(ДанныеРаздела.П000500501203) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501203");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указан номер записи в реестре!'");
	Если ЗначениеЗаполнено(ДанныеРаздела.П000500501203) И ПустаяСтрока(ДанныеРаздела.П000500501204) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501204");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указана дата записи в реестре!'");
	Если НЕ ПустаяСтрока(ДанныеРаздела.П000500501304) И НЕ ЗначениеЗаполнено(ДанныеРаздела.П000500501303) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501303");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указан номер записи в реестре!'");
	Если ЗначениеЗаполнено(ДанныеРаздела.П000500501303) И ПустаяСтрока(ДанныеРаздела.П000500501304) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501304");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указана дата записи в реестре!'");
	Если НЕ ПустаяСтрока(ДанныеРаздела.П000500501404) И НЕ ЗначениеЗаполнено(ДанныеРаздела.П000500501403) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501403");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='В разделе 5 не указан номер записи в реестре!'");
	Если ЗначениеЗаполнено(ДанныеРаздела.П000500501403) И ПустаяСтрока(ДанныеРаздела.П000500501404) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501404");
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр(
	 "ru='В разделе 5 не указаны сведения из реестра молодежных и детских общественных объединений,
	 |пользующихся государственной поддержкой!'");
	ЗаполненыСведенияИзРеестра = НЕ ПустаяСтрока(ДанныеРаздела.П000500501104)
	                         ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501103)
	                         ИЛИ НЕ ПустаяСтрока(ДанныеРаздела.П000500501204)
							 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501203)
	                         ИЛИ НЕ ПустаяСтрока(ДанныеРаздела.П000500501304)
							 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501303)
	                         ИЛИ НЕ ПустаяСтрока(ДанныеРаздела.П000500501404)
							 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501403);
	Если НЕ ЗаполненыСведенияИзРеестра Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501103");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеТитульный(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИНН)
	   И НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(
	    СтруктураРеквизитовФормы.Организация) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр("ru='Не задан ИНН организации!'"),
		 "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИНН) <> 0 И СтрДлина(ПараметрыВыгрузки.ИНН) <> 10
		      И СтрДлина(ПараметрыВыгрузки.ИНН) <> 12 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр("ru='Неверно задан ИНН организации!'"),
		 "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.Свойство("КПП") И НЕ ПустаяСтрока(ПараметрыВыгрузки.КПП)
	   И СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр("ru='Неверно задан КПП организации!'"),
		 "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.Свойство("ОГРН") Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ОГРН) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр("ru='Не задан ОГРН организации!'"),
			 "Титульный", "ОГРН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОГРН) <> 13 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр("ru='Неверно задан ОГРН организации!'"),
			 "Титульный", "ОГРН");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.Свойство("ОГРНИП") Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ОГРНИП) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр(
			 "ru='Не задан ОГРН индивидуального предпринимателя!'"), "Титульный", "ОГРН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОГРНИП) <> 15 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр(
			 "ru='Неверно задан ОГРН индивидуального предпринимателя!'"), "Титульный", "ОГРН");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(ПараметрыВыгрузки.НаименованиеОрганизации))
	 ИЛИ (ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(ПараметрыВыгрузки.ФамилияИП)) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр("ru='Не задан налогоплательщик!'"),
		 "Титульный", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ РегНомерПФРСоответствуетТребованиям(ПараметрыВыгрузки.РегистрационныйНомерПФР) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		 НСтр("ru='Значение рег. номера в ПФР не соответствует шаблону:""XXX-XXX-XXXXXX"" (X - любая цифра)!'"),
		  "Титульный", "НомРег");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = НСтр("ru='Признак прекращения деятельности должен указываться как ""Л"" !'");
	Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ПрекращениеДеятельности) И ПараметрыВыгрузки.ПрекращениеДеятельности
	  <> "Л" Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ПрекращениеДеятельности");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодПоОКАТО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр("ru='Не указан код ОКАТО!'"),
		 "Титульный", "ОКАТО");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодПоОКАТО) <> 11 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр("ru='Неверно указан код ОКАТО!'"),
		 "Титульный", "ОКАТО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(СтрЗаменить(ПараметрыВыгрузки.КодПоОКВЭД, ".", "")))
	 ИЛИ НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.КодПоОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		 НСтр("ru='Некорректное значение кода вида деятельности по ОКВЭД!'"), "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ЛицоПодтверждающееСведения) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр("ru='Не указан тип подписанта!'"),
		 "Титульный", "ПрПодп");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрНайти("1,2,3", ПараметрыВыгрузки.ЛицоПодтверждающееСведения) = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр("ru='Неверно указан тип подписанта!'"),
		 "Титульный", "ПрПодп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр("ru='Не указана фамилия подписанта!'"),
		 "Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, НСтр("ru='Не указано имя подписанта!'"),
		 "Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ЛицоПодтверждающееСведения = "2" ИЛИ ПараметрыВыгрузки.ЛицоПодтверждающееСведения = "3" Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.НаименованиеУдостоверяющего) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			 НСтр("ru='Не указано наименование документа, подтверждающего полномочия представителя!'"), "Титульный",
			  "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ДатаВыдачи) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			 НСтр("ru='Не указана дата выдачи документа, подтверждающего полномочия представителя!'"), "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.Индекс) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		 НСтр("ru='Не задан почтовый индекс адреса регистрации!'"), "Титульный", "Адрес1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЛишьОдноИзЗначениеЗаполнено(ПараметрыВыгрузки.РегионНазвание, ПараметрыВыгрузки.РегионСокращение) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		 НСтр("ru='Регион не соответствует шаблону (Название Сокращение)!'"), "Титульный", "Адрес2");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЛишьОдноИзЗначениеЗаполнено(ПараметрыВыгрузки.РайонНазвание, ПараметрыВыгрузки.РайонСокращение) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		 НСтр("ru='Район не соответствует шаблону (Название Сокращение)!'"), "Титульный", "Адрес3");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЛишьОдноИзЗначениеЗаполнено(ПараметрыВыгрузки.ГородНазвание, ПараметрыВыгрузки.ГородСокращение) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		 НСтр("ru='Город не соответствует шаблону (Название Сокращение)!'"), "Титульный", "Адрес4");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЛишьОдноИзЗначениеЗаполнено(ПараметрыВыгрузки.НаселенныйПунктНазвание,
		 ПараметрыВыгрузки.НаселенныйПунктСокращение) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		 НСтр("ru='Населенный пункт не соответствует шаблону (Название Сокращение)!'"), "Титульный", "Адрес5");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЛишьОдноИзЗначениеЗаполнено(ПараметрыВыгрузки.УлицаНазвание, ПараметрыВыгрузки.УлицаСокращение) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		 НСтр("ru='Улица не соответствует шаблону (Название Сокращение)!'"), "Титульный", "Адрес6");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	         	
КонецФункции

&НаСервере
Процедура СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, Раздел, Показатель)
	
	СтатусПроверки = Ложь;
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, Раздел, Показатель);
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки)
			
	СтрНомПачки = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Формат(НомерПачки, "ЧГ="), 5, "0");
		
	ИмяФайла = "PFR-700-Y-" + ПараметрыВыгрузки.КалендарныйГод + "-ORG-" + ПараметрыВыгрузки.РегистрационныйНомерПФР +
			   "-DCK-" + СтрНомПачки + "-DPT-000000-DCK-00000.XML";
		
	Возврат ИмяФайла;
	
КонецФункции 

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
			
	ПараметрыВыгрузки.Вставить("НазваниеПрограммы", ВРЕГ(СокрЛП(РегламентированнаяОтчетность.НазваниеПрограммы())));
	ПараметрыВыгрузки.Вставить("ВерсияПрограммы", СокрЛП(РегламентированнаяОтчетность.ВерсияПрограммы()));
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",
	 НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация));
	ПараметрыВыгрузки.Вставить("ЭтоГоловнаяОрганизация",
	 РегламентированнаяОтчетность.ГоловнаяОрганизация(СтруктураРеквизитовФормы.Организация)
	  = СтруктураРеквизитовФормы.Организация);
	                      	
	ПараметрыВыгрузки.Вставить("НомерВПачке", 1);
	ПараметрыВыгрузки.Вставить("РегистрационныйНомерПФР", СокрЛП(Титульный.НомРег));
	ПараметрыВыгрузки.Вставить("НомерКорректировки",
		РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СокрЛП(Титульный.НомерКорректировки), 3, "0"));
	ПараметрыВыгрузки.Вставить("КодОтчетногоПериода", СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КалендарныйГод", СокрЛП(Титульный.ОтчетГод));
	ПараметрыВыгрузки.Вставить("ПрекращениеДеятельности", СокрЛП(Титульный.ПрекращениеДеятельности));
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(ВРЕГ(Титульный.ОргНазв));
		
		ПараметрыВыгрузки.Вставить("ФамилияИП",  ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяИП",      ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоИП", ФИОИП.Отчество);
		
		ПараметрыВыгрузки.Вставить("ОГРНИП", СокрЛП(Титульный.ОГРН));
	Иначе
		НаимОрг = ВРЕГ(СокрЛП(Титульный.ОргНазв));
		ПараметрыВыгрузки.Вставить("НаименованиеОрганизации", НаимОрг);
		ПараметрыВыгрузки.Вставить("КПП", СокрЛП(СтрЗаменить(Титульный.КПП, "-", "")));
		Если НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(
			 СтруктураРеквизитовФормы.Организация) Тогда
			ПараметрыВыгрузки.Вставить("ОГРН", СокрЛП(СтрЗаменить(Титульный.ОГРН, "-", "")));
		КонецЕсли;
	КонецЕсли;

	ПараметрыВыгрузки.Вставить("ИНН", СокрЛП(СтрЗаменить(Титульный.ИНН, "-", "")));
	
	ПараметрыВыгрузки.Вставить("КодПоОКАТО", СокрЛП(Титульный.ОКАТО));
	ПараметрыВыгрузки.Вставить("КодПоОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(СтрЗаменить(
	 Титульный.ОКВЭД, " ", ""), ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("Телефон", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("ЛицоПодтверждающееСведения", ПредставлениеЧисла(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(ВРЕГ(Титульный.ОргПодписантФамилия));
	
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("НаименованиеОрганизацииПредставителя", Титульный.ОргПредНаим);
	
	ПараметрыВыгрузки.Вставить("КоличествоЗЛ", ПредставлениеЧисла(Титульный.КолЗастрахованных));
	ПараметрыВыгрузки.Вставить("СреднесписочнаяЧисленность", ПредставлениеЧисла(Титульный.СрСписЧисл));
	
	КоличествоСтраниц = ПредставлениеЧисла(Титульный.СоставленаНа);
	КоличествоСтраниц = ?(КоличествоСтраниц = "0", "1", КоличествоСтраниц);
	ПараметрыВыгрузки.Вставить("КоличествоСтраниц", КоличествоСтраниц);
	ПараметрыВыгрузки.Вставить("КоличествоЛистовПриложения", ПредставлениеЧисла(Титульный.Прил));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти",
	 "РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_СВ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_НАЧИНАЯ_С_2013_ГОДА");
	
	ПараметрыВыгрузки.Вставить("Индекс", СокрЛП(Титульный.Адрес1));
	
	РегионСокращение = "";
	РегионНазвание = РегламентированнаяОтчетность.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес2)),
	 РегионСокращение);
	ПараметрыВыгрузки.Вставить("РегионНазвание", РегионНазвание);
	ПараметрыВыгрузки.Вставить("РегионСокращение", РегионСокращение);
	
	РайонСокращение = "";
	РайонНазвание = РегламентированнаяОтчетность.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес3)),
	 РайонСокращение);
	ПараметрыВыгрузки.Вставить("РайонНазвание", РайонНазвание);
	ПараметрыВыгрузки.Вставить("РайонСокращение", РайонСокращение);
	
	ГородСокращение = "";
	ГородНазвание = РегламентированнаяОтчетность.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес4)),
	 ГородСокращение);
	ПараметрыВыгрузки.Вставить("ГородНазвание", ГородНазвание);
	ПараметрыВыгрузки.Вставить("ГородСокращение", ГородСокращение);
	
	НаселенныйПунктСокращение = "";
	НаселенныйПунктНазвание = РегламентированнаяОтчетность.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес5)),
	 НаселенныйПунктСокращение);
	ПараметрыВыгрузки.Вставить("НаселенныйПунктНазвание", НаселенныйПунктНазвание);
	ПараметрыВыгрузки.Вставить("НаселенныйПунктСокращение", НаселенныйПунктСокращение);
	
	УлицаСокращение = "";
	УлицаНазвание = РегламентированнаяОтчетность.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес6)),
	 УлицаСокращение);
	ПараметрыВыгрузки.Вставить("УлицаНазвание", УлицаНазвание);
	ПараметрыВыгрузки.Вставить("УлицаСокращение", УлицаСокращение);
	
	ТипДома = Неопределено;
	Если СтруктураРеквизитовФормы.НаименованияЭлементовАдреса <> Неопределено
	   И СтруктураРеквизитовФормы.НаименованияЭлементовАдреса.Свойство("ТипДома", ТипДома)
	   И ВРег(ТипДома) = "ВЛАДЕНИЕ" Тогда
		ДомСокращение = "ВЛД";
	Иначе
		ДомСокращение = "Д";
	КонецЕсли;
	
	ДомНомер = ВРЕГ(СокрЛП(Титульный.Адрес7));
	Если ЗначениеЗаполнено(ДомНомер) Тогда
		ПараметрыВыгрузки.Вставить("ДомСокращение", ДомСокращение);
		ПараметрыВыгрузки.Вставить("ДомНомер", ДомНомер);
	КонецЕсли;
	
	ТипКорпуса = Неопределено;
	Если СтруктураРеквизитовФормы.НаименованияЭлементовАдреса <> Неопределено
	   И СтруктураРеквизитовФормы.НаименованияЭлементовАдреса.Свойство("ТипКорпуса", ТипКорпуса)
	   И ВРег(ТипКорпуса) = "СТРОЕНИЕ" Тогда
		КорпусСокращение = "СТР";
	Иначе
		КорпусСокращение = "КОРП";
	КонецЕсли;
	
	КорпусНомер = ВРЕГ(СокрЛП(Титульный.Адрес8));
	Если ЗначениеЗаполнено(КорпусНомер) Тогда
		ПараметрыВыгрузки.Вставить("КорпусСокращение", КорпусСокращение);
		ПараметрыВыгрузки.Вставить("КорпусНомер", КорпусНомер);
	КонецЕсли;
	
	ТипКвартиры = Неопределено;
	Если СтруктураРеквизитовФормы.НаименованияЭлементовАдреса <> Неопределено
	   И СтруктураРеквизитовФормы.НаименованияЭлементовАдреса.Свойство("ТипКвартиры", ТипКвартиры)
	   И ВРег(ТипКвартиры) = "ОФИС" Тогда
		КвартираСокращение = "ОФИС";
	Иначе
		КвартираСокращение = "КВ";
	КонецЕсли;
	
	КвартираНомер = ВРЕГ(СокрЛП(Титульный.Адрес9));
	Если ЗначениеЗаполнено(КвартираНомер) Тогда
		ПараметрыВыгрузки.Вставить("КвартираСокращение", КвартираСокращение);
		ПараметрыВыгрузки.Вставить("КвартираНомер", КвартираНомер);
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("НаименованиеУдостоверяющего", ВРЕГ(СокрЛП(
	 мСтруктураДокУпПред.НаименованиеУдостоверяющего)));
	ПараметрыВыгрузки.Вставить("СерияРимскиеЦифры", ВРЕГ(СокрЛП(мСтруктураДокУпПред.СерияРимскиеЦифры)));
	ПараметрыВыгрузки.Вставить("СерияРусскиеБуквы", ВРЕГ(СокрЛП(мСтруктураДокУпПред.СерияРусскиеБуквы)));
	ПараметрыВыгрузки.Вставить("НомерУдостоверяющего", ПредставлениеЧисла(мСтруктураДокУпПред.НомерУдостоверяющего));
	ПараметрыВыгрузки.Вставить("ДатаВыдачи", Формат(мСтруктураДокУпПред.ДатаВыдачи, "ДФ=dd.MM.yyyy"));
	
	КемВыдан = ВРЕГ(СокрЛП(мСтруктураДокУпПред.КемВыдан));
	ПараметрыВыгрузки.Вставить("КемВыдан", КемВыдан);
	
	ПараметрыВыгрузки.Вставить("ДатаЗаполнения", Формат(ДатаПодписи, "ДФ=dd.MM.yyyy"));
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтаФорма["Хранилище"
							 + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище"
						 + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок,
						 "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
	СохрСтруктура.Свойство("ДокументУпПред", мСтруктураДокУпПред);
	
	СохрСтруктура.Свойство("НаименованияЭлементовАдреса", СтруктураРеквизитовФормы.НаименованияЭлементовАдреса);
	
	ДанныеАдреса = Новый Структура;
	ДанныеАдреса.Вставить("Индекс",          мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес1);
	ДанныеАдреса.Вставить("Регион",          мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес2);
	ДанныеАдреса.Вставить("Район",           мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес3);
	ДанныеАдреса.Вставить("Город",           мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес4);
	ДанныеАдреса.Вставить("НаселенныйПункт", мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес5);
	ДанныеАдреса.Вставить("Улица",           мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес6);
	ДанныеАдреса.Вставить("Дом",             мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес7);
	ДанныеАдреса.Вставить("Корпус",          мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес8);
	ДанныеАдреса.Вставить("Квартира",        мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес9);
	
	ВосстановитьСокращенияЭлементовАдреса(ДанныеАдреса);
	
КонецФункции 

&НаСервере
Функция УзелПуст(Узел)
		
	Если Узел.Формат = "S" Тогда
		Результат = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(Узел.ЗначениеПоУмолчанию) И Лев(Узел.ЗначениеПоУмолчанию, 1) <> "&" Тогда
		Результат = Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Результат = НЕ ЗначениеЗаполнено(Узел.Значение)
		        ИЛИ НЕ ЗначениеЗаполнено(Число(Узел.Значение));
		
	Иначе
		Результат = НЕ ЗначениеЗаполнено(Узел.Значение);
		
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	ПодчиненныйЭлемент = ПолучитьПодчиненныйЭлемент(УзелРодитель, ИмяЭлемента);
	ВывестиПоказательВXML(ПодчиненныйЭлемент, ЗначениеЭлемента);
	
КонецПроцедуры

&НаКлиенте
Функция НачатьЗамерВремени()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
			
			КлючеваяОперация = "ЗаполнениеФормыНалоговаяОтчетностьРСВ1";
			ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
			
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВыполнятьЗамерыПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиВызовСервераПовтИсп").ВыполнятьЗамерыПроизводительности();
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") 
	   И ВыполнятьЗамерыПроизводительности Тогда
		
		Возврат ОценкаПроизводительности.НачатьЗамерВремени();
			
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ВремяНачала
	  <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует(
	   "СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "ЗаполнениеФормыНалоговаяОтчетностьРСВ1";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры       

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры