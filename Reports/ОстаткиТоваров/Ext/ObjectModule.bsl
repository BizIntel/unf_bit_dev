#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	НастройкиОтчета.ПрограммноеИзменениеФормыОтчета = Истина;
	ОтчетыУНФ.ДобавитьВариантРасшифровки(НастройкиВариантов["ПоМестамХранения"].ВариантыРасшифровки, "Отчет.ДвижениеТоваров", "ДвижениеТоваров");
	
	ЗаполнитьПредопределенныеВариантыОформления(НастройкиВариантов);
	ДобавитьОписанияСвязанныхПолей(НастройкиВариантов);
	
	НастройкиВариантов["ПоМестамХранения"].Теги = НСТР("ru = 'Главное,Товары,Запасы,Закупки,Номенклатура'");
	НастройкиВариантов["ПоМестамХранения"].Рекомендуемый = Истина;
	НастройкиВариантов["ПоМестамХранения"].Вставить("РежимПериода", "НаДату");
	
	НастройкиВариантов["Прогноз"].Теги = НСТР("ru = 'Товары,Запасы,Закупки,Номенклатура,Заказы,План,Прогноз'");
	НастройкиВариантов["Прогноз"].Рекомендуемый = Истина;
	НастройкиВариантов["Прогноз"].Вставить("РежимПериода", "НаДату");
	
КонецПроцедуры

Процедура ОбновитьНастройкиНаФорме(НастройкиОтчета, НастройкиСКД, Форма) Экспорт
	
	ЭтоВариантПрогноз = НастройкиОтчета.Свойство("КлючВарианта") И НастройкиОтчета.КлючВарианта="Прогноз";
	
	// Показатель "Сумма"
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", "Показатель");
	СтруктураОтбора.Вставить("Поле", "Сумма");
	СтруктураОтбора.Вставить("Создан", Истина);
	Идентификаторы = Форма.ИдентификаторыСтрокНастроекВызов(СтруктураОтбора, Истина);
	Если Идентификаторы.Количество()=0 Тогда
		Форма.ДобавитьОписаниеПоказателяВызов("Сумма", Истина);
		Строки = Форма.СтрокиДереваНастроекВызов(СтруктураОтбора, Истина);
		СтрПоказатель = Строки[0];
	Иначе
		СтрПоказатель = Форма.ПоляНастроек.НайтиПоИдентификатору(Идентификаторы[0]);
		СтрПоказатель.НестандартныйОбработчик = Истина;
	КонецЕсли;
	ПолеВыбор = ОтчетыУНФКлиентСервер.НайтиПолеРекурсивно(Новый ПолеКомпоновкиДанных("Сумма"), НастройкиСКД.Выбор.Элементы);
	СуммаВыводится = НЕ ПолеВыбор=Неопределено И ПолеВыбор.Использование;
	Для каждого ОписаниеРеквизита Из СтрПоказатель.Реквизиты Цикл
		Форма[ОписаниеРеквизита.Ключ] = СуммаВыводится;
	КонецЦикла;
	
	// Реквизиты
	МассивРеквизитов = Новый Массив;
	СуществующиеРевизиты = Форма.ПолучитьРеквизиты();
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из СуществующиеРевизиты Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	// Параметр "ВидЦен"
	ИмяРеквизита = "ПараметрВидЦен";
	Параметр = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидЦен"));
	Если Параметр=Неопределено ИЛИ НЕ Параметр.Использование ИЛИ НЕ ЗначениеЗаполнено(Параметр.Значение) Тогда
		ЗначениеПоУмолчанию = Справочники.ВидыЦен.Оптовая;
	Иначе
		ЗначениеПоУмолчанию = Параметр.Значение;
	КонецЕсли; 
	СтрВидЦен = Форма.ПоляНастроек.ПолучитьЭлементы().Добавить();
	СтрВидЦен.Создан = Истина;
	СтрВидЦен.Тип = "Параметр";
	СтрВидЦен.Поле = "ВидЦен";
	СтрВидЦен.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ВидыЦен");
	СтрВидЦен.Заголовок = НСтр("ru = 'Вид цен'");
	СтрВидЦен.ВидЭлемента = "Поле";
	СтрВидЦен.Реквизиты = Новый Структура;
	СтрВидЦен.Элементы = Новый Структура;
	СтрВидЦен.ДополнительныеПараметры = Новый Структура;
	Если ИменаРеквизитов.Найти(ИмяРеквизита)=Неопределено Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, СтрВидЦен.ТипЗначения,, СтрВидЦен.Заголовок));
	КонецЕсли; 
	СтрВидЦен.Реквизиты.Вставить(ИмяРеквизита, ЗначениеПоУмолчанию);
	Для каждого ОписаниеЭлемента Из СтрПоказатель.Элементы Цикл
		ИмяЭлемента = ОписаниеЭлемента.Ключ;
		Прервать;
	КонецЦикла; 
	ИндексПоказателя = 0;
	ИмяГруппы = ИмяЭлемента+"_Группа";
	ГруппаПоказателя = НайтиГруппу(ИмяГруппы, Форма.Элементы.ГруппаПоказателиЭлементы);
	Если НЕ ИндексПоказателя=Форма.Элементы.ГруппаПоказателиЭлементы.ПодчиненныеЭлементы.Количество() Тогда
		СтрВидЦен.Элементы.Вставить(ИмяРеквизита, ИмяРеквизита);
	КонецЕсли;
	
	// Отбор свой/чужой/на складе/у реализаторов
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Идентификатор = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	Группа = Форма.Элементы.Вставить("ГруппаФильтр"+Идентификатор, Тип("ГруппаФормы"), Форма.Элементы.ОбластьНастроек, Форма.Элементы.ГруппаПараметрыЭлементы);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Заголовок = НСтр("ru = 'Режим'");
	Группа.Подсказка = Группа.Заголовок;
	Группа.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	Группа.ОтображатьОтступСлева = Ложь;
	Группа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	Группа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Если ЭтоВариантПрогноз Тогда
		Группа.Видимость = Ложь;
	КонецЕсли;
	
	ЭлементОтбораСвои = ОтчетыУНФКлиентСервер.НайтиПолеРекурсивно(Новый ПолеКомпоновкиДанных("Свой"), НастройкиСКД.Отбор.Элементы);
	СтрСвой = ДобавитьПоле(Форма.ПоляНастроек, "Фильтр", "Режим", ОписаниеТиповБулево, НСтр("ru = 'Режим'"), "Флажок");
	СтрСвой.Создан = Истина;
	СтрСвой.ИмяГруппы = Группа.Имя;
	СтрСвой.Поле = "Свой";
	ИмяРеквизита = "ФильтрРежимСвои";
	Если ИменаРеквизитов.Найти(ИмяРеквизита)=Неопределено Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, СтрСвой.ТипЗначения,, НСтр("ru = 'Свои'")));
	КонецЕсли;
	СтрСвой.Реквизиты.Вставить(ИмяРеквизита, ОтборСодержитЗначение(ЭлементОтбораСвои, Истина));
	СтрСвой.Элементы.Вставить(ИмяРеквизита, ИмяРеквизита);
	ИмяРеквизита = "ФильтрРежимЧужие";
	Если ИменаРеквизитов.Найти(ИмяРеквизита)=Неопределено Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, СтрСвой.ТипЗначения,, НСтр("ru = 'Чужие'")));
	КонецЕсли; 
	СтрСвой.Реквизиты.Вставить(ИмяРеквизита, ОтборСодержитЗначение(ЭлементОтбораСвои, Ложь));
	СтрСвой.Элементы.Вставить(ИмяРеквизита, ИмяРеквизита);

	ЭлементОтбораНаСкладе = ОтчетыУНФКлиентСервер.НайтиПолеРекурсивно(Новый ПолеКомпоновкиДанных("НаСкладе"), НастройкиСКД.Отбор.Элементы);
	СтрНаСкладе = ДобавитьПоле(Форма.ПоляНастроек, "Фильтр", "НаСкладе", ОписаниетиповБулево, НСтр("ru = 'Режим'"), "Флажок");
	СтрНаСкладе.Создан = Истина;
	СтрНаСкладе.ИмяГруппы = Группа.Имя;
	ИмяРеквизита = "ФильтрРежимНаСкладах";
	Если ИменаРеквизитов.Найти(ИмяРеквизита)=Неопределено Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, СтрНаСкладе.ТипЗначения,, НСтр("ru = 'На складах'")));
	КонецЕсли; 
	СтрНаСкладе.Реквизиты.Вставить(ИмяРеквизита, ОтборСодержитЗначение(ЭлементОтбораНаСкладе, Истина));
	СтрНаСкладе.Элементы.Вставить(ИмяРеквизита, ИмяРеквизита);
	ИмяРеквизита = "ФильтрРежимУРеализатора";
	Если ИменаРеквизитов.Найти(ИмяРеквизита)=Неопределено Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, СтрНаСкладе.ТипЗначения,, НСтр("ru = 'У реализаторов'")));
	КонецЕсли; 
	СтрНаСкладе.Реквизиты.Вставить(ИмяРеквизита, ОтборСодержитЗначение(ЭлементОтбораНаСкладе, Ложь));
	СтрНаСкладе.Элементы.Вставить(ИмяРеквизита, ИмяРеквизита);
	
	Если МассивРеквизитов.Количество()>0 Тогда
		Форма.ИзменитьРеквизиты(МассивРеквизитов);
	КонецЕсли; 
	
	// Элементы формы
	Для каждого ОписаниеРеквизита Из СтрВидЦен.Реквизиты Цикл
		ИмяРеквизита = ОписаниеРеквизита.Ключ;
		Элемент = Форма.Элементы.Найти(ИмяРеквизита);
		Если НЕ Элемент=Неопределено Тогда
			Форма.Элементы.Удалить(Элемент);
		КонецЕсли;
		Если ГруппаПоказателя<>Неопределено Тогда
			ИндексПоказателя = 0;
			ГруппаРодитель = ГруппаПоказателя.Родитель;
			Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ГруппаРодитель);
		Иначе
			// Показатель не создан
			Элемент=Неопределено;
		КонецЕсли;
		Форма[ИмяРеквизита] = ОписаниеРеквизита.Значение;
		НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра(СтрВидЦен.Поле, ОписаниеРеквизита.Значение);
		Если НЕ Элемент=Неопределено Тогда
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.ПутьКДанным = ИмяРеквизита;
			Элемент.КнопкаОткрытия = Ложь;
			Элемент.КнопкаВыбора = Ложь;
			Элемент.КнопкаСоздания = Ложь;
			Элемент.БыстрыйВыбор = Истина;
			Элемент.ЦветРамки = ЦветаСтиля.НедоступныеДанныеЦвет;
			Элемент.Ширина = 23;
			Элемент.Видимость = СуммаВыводится;
			Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
			Элемент.ПодсказкаВвода = СтрПоказатель.Заголовок;
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ОписаниеРеквизита Из СтрСвой.Реквизиты Цикл
		ИмяРеквизита = ОписаниеРеквизита.Ключ;
		Элемент = Форма.Элементы.Найти(ИмяРеквизита);
		Если НЕ Элемент=Неопределено Тогда
			Форма.Элементы.Удалить(Элемент);
		КонецЕсли; 
		Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.ЦветРамки = ЦветаСтиля.НедоступныеДанныеЦвет;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		Форма[ИмяРеквизита] = ОписаниеРеквизита.Значение;
	КонецЦикла; 
	
	Для каждого ОписаниеРеквизита Из СтрНаСкладе.Реквизиты Цикл
		ИмяРеквизита = ОписаниеРеквизита.Ключ;
		Элемент = Форма.Элементы.Найти(ИмяРеквизита);
		Если НЕ Элемент=Неопределено Тогда
			Форма.Элементы.Удалить(Элемент);
		КонецЕсли; 
		Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.ЦветРамки = ЦветаСтиля.НедоступныеДанныеЦвет;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		Форма[ИмяРеквизита] = ОписаниеРеквизита.Значение;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПриИзмененииНестандартногоРеквизита(Тип, ИмяПоля, СтруктураЗначений, НастройкиСКД, Форма, ИмяЭлемента) Экспорт
	
	// Отображение показателя Сумма
	Если Тип="Показатель" И ИмяПоля="Сумма" Тогда
		Стр = Форма.СтрокаОписанияПоляВызов("Показатель", "Сумма");
		Если Стр=Неопределено Тогда
			Возврат;
		КонецЕсли; 
		Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
			ИмяРеквизита = ОписаниеРеквизита.Ключ;
		КонецЦикла; 
		Если НЕ ЗначениеЗаполнено(ИмяРеквизита) Тогда
			Возврат;
		КонецЕсли;
		СтрПараметр = Форма.СтрокаОписанияПоляВызов("Параметр", "ВидЦен");
		Если НЕ СтрПараметр=Неопределено Тогда
			Для каждого ОписаниеЭлемента Из СтрПараметр.Элементы Цикл
				Форма.Элементы[ОписаниеЭлемента.Ключ].Видимость = СтруктураЗначений[ИмяРеквизита];
			КонецЦикла; 
		КонецЕсли; 
		ПолеКД = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Показатель = ОтчетыУНФКлиентСервер.НайтиПолеРекурсивно(ПолеКД, НастройкиСКД.Выбор.Элементы);
		Если Показатель=Неопределено Тогда
			Если СтруктураЗначений[ИмяРеквизита] Тогда
				Показатель = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				Показатель.Поле = ПолеКД;
				Показатель.Использование = Истина;
			КонецЕсли;  
		Иначе
			Показатель.Использование = СтруктураЗначений[ИмяРеквизита];
		КонецЕсли;
		
	// Параметр ВидЦен для расчета суммы
	ИначеЕсли Тип="Параметр" И ИмяПоля="ВидЦен" Тогда
		НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра(ИмяПоля, СтруктураЗначений.ПараметрВидЦен);
		
	// Фильтр по режиму отчета (свой/чужой/на складе/у реализаторов) 
	ИначеЕсли Тип="Фильтр" И ИмяПоля="Свой" Тогда
		Если НЕ СтруктураЗначений.ФильтрРежимСвои И НЕ СтруктураЗначений.ФильтрРежимЧужие Тогда
			Свой = Неопределено;
		ИначеЕсли СтруктураЗначений.ФильтрРежимСвои И СтруктураЗначений.ФильтрРежимЧужие Тогда
			Свой = Новый СписокЗначений;
			Свой.Добавить(Истина);
			Свой.Добавить(Ложь);
		ИначеЕсли СтруктураЗначений.ФильтрРежимСвои Тогда
			Свой = Истина;
		ИначеЕсли СтруктураЗначений.ФильтрРежимЧужие Тогда
			Свой = Ложь;
		КонецЕсли;
		ИзменитьОтбор("Свой", Свой, НастройкиСКД);
		Форма.ОбновитьОтображениеОтметокФильтровВызов();
	ИначеЕсли Тип="Фильтр" И ИмяПоля="НаСкладе" Тогда
		Если НЕ СтруктураЗначений.ФильтрРежимНаСкладах И НЕ СтруктураЗначений.ФильтрРежимУРеализатора Тогда
			НаСкладе = Неопределено;
		ИначеЕсли СтруктураЗначений.ФильтрРежимНаСкладах И СтруктураЗначений.ФильтрРежимУРеализатора Тогда
			НаСкладе = Новый СписокЗначений;
			НаСкладе.Добавить(Истина);
			НаСкладе.Добавить(Ложь);
		ИначеЕсли СтруктураЗначений.ФильтрРежимНаСкладах Тогда
			НаСкладе = Истина;
		ИначеЕсли СтруктураЗначений.ФильтрРежимУРеализатора Тогда
			НаСкладе = Ложь;
		КонецЕсли;
		ИзменитьОтбор("НаСкладе", НаСкладе, НастройкиСКД);
		Форма.ОбновитьОтображениеОтметокФильтровВызов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	Ресурсы = Новый Массив;
	ЗаполнитьРесурсыРекурсивно(Ресурсы, КомпоновщикНастроек.Настройки.Выбор.Элементы);
	Если Ресурсы.Найти("ОжидаетсяПоставка")<>Неопределено ИЛИ Ресурсы.Найти("ПрогнозныйОстаток")<>Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьЗаказыПоставщикам", Истина);
	Иначе
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьЗаказыПоставщикам", Ложь);
	КонецЕсли; 
	Если Ресурсы.Найти("ЗаказаноПокупателями")<>Неопределено ИЛИ Ресурсы.Найти("ПрогнозныйОстаток")<>Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьЗаказыПокупателей", Истина);
	Иначе
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьЗаказыПокупателей", Ложь);
	КонецЕсли; 
	Если Ресурсы.Найти("БудетПроизведено")<>Неопределено ИЛИ Ресурсы.Найти("ПрогнозныйОстаток")<>Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьЗаказыНаПроизводство", Истина);
	Иначе
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьЗаказыНаПроизводство", Ложь);
	КонецЕсли; 
	Если Ресурсы.Найти("ТребуетсяДляПроизводства")<>Неопределено ИЛИ Ресурсы.Найти("ПрогнозныйОстаток")<>Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьПотребностьВЗапасах", Истина);
	Иначе
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьПотребностьВЗапасах", Ложь);
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	УправлениеНебольшойФирмойОтчеты.ИсправитьНастройкиГруппировок(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы);
	
	НастройкиОтчета = КомпоновщикНастроек.Настройки;
	
	ПараметрыОтчета = ОтчетыУНФ.ПараметрыФормированияОтчета(НастройкиОтчета);
	
	УправлениеНебольшойФирмойОтчеты.УстановитьМакетОформленияОтчета(НастройкиОтчета);
	УправлениеНебольшойФирмойОтчеты.ВывестиЗаголовокОтчета(ПараметрыОтчета, ДокументРезультат);
	СтруктураПолейСравнения = Новый Структура;
	
	//Установка имени горизонтальной группировки по периоду для макета
	ДоступныеРесурсы = Новый Массив;
	Для каждого Элемент Из НастройкиОтчета.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если Элемент.Ресурс Тогда
			ДоступныеРесурсы.Добавить(Элемент.Поле);
		КонецЕсли;
	КонецЦикла;
	
	ВыбранныеРесурсы = Новый Массив;
	Для Каждого Элемент Из НастройкиОтчета.Выбор.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если Элемент.Использование И ДоступныеРесурсы.Найти(Элемент.Поле) <> Неопределено Тогда
			ВыбранныеРесурсы.Добавить(Элемент.Поле);
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);

	//Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);

	//Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	//Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	ТаблицаЗафиксирована = Ложь;

	ДокументРезультат.ФиксацияСверху = 0;
	
	Пока Истина Цикл
		//Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();

		Если ЭлементРезультата = Неопределено Тогда
			//Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
		Иначе

			//Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();
	
	ОтчетыУНФ.ОбоработатьДиаграммыТабличногоДокумента(ДокументРезультат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьПоле(ПоляНастроек, Тип, Поле, ТипЗначения, Заголовок, ВидЭлемента)
	
	Стр = ПоляНастроек.ПолучитьЭлементы().Добавить();
	Стр.Тип = Тип;
	Стр.Поле = Поле;
	Стр.ТипЗначения = ТипЗначения;
	Стр.Заголовок = Заголовок;
	Стр.ВидЭлемента = ВидЭлемента;
	Стр.НестандартныйОбработчик = Истина;
	Стр.Реквизиты = Новый Структура;
	Стр.Элементы = Новый Структура;
	Возврат Стр;
	
КонецФункции

Процедура ИзменитьОтбор(ИмяПоля, Значение, НастройкиСКД)
	
	ПолеКД = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Отбор = ОтчетыУНФКлиентСервер.НайтиПолеРекурсивно(ПолеКД, НастройкиСКД.Отбор.Элементы);
	Если Отбор=Неопределено И НЕ Значение=Неопределено Тогда
		Отбор = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = ПолеКД;
		Отбор.Использование = Истина;
	ИначеЕсли НЕ Отбор=Неопределено И Значение=Неопределено Тогда
		Отбор.Использование = Ложь;
	КонецЕсли;
	Если НЕ Значение=Неопределено Тогда
		Отбор.ВидСравнения = ?(ТипЗнч(Значение)=Тип("СписокЗначений"), ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.Равно);
		Отбор.ПравоеЗначение = Значение;
		Отбор.Использование = Истина;
		Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеВариантыОформления(НастройкиВариантов)
	
	МассивПолейКоличеств = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Количество,СвободныйОстаток,Резерв"); 
	МассивПолейСумм = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Себестоимость,Сумма"); 
	
	Для каждого ОписаниеВараинта Из НастройкиВариантов Цикл
		
		ВариантыОформления = ОписаниеВараинта.Значение.ВариантыОформления;
		ОтчетыУНФ.ДобавитьВариантыОформленияКоличества(ВариантыОформления, МассивПолейКоличеств);
		ОтчетыУНФ.ДобавитьВариантыОформленияСумм(ВариантыОформления, МассивПолейСумм);
			
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьОписанияСвязанныхПолей(НастройкиВариантов)
	
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["ПоМестамХранения"].СвязанныеПоля, "СтруктурнаяЕдиница", "Справочник.СтруктурныеЕдиницы", Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	
КонецПроцедуры

Функция ОтборСодержитЗначение(ЭлементОтбора, Значение)
	
	Если ЭлементОтбора=Неопределено ИЛИ НЕ ЭлементОтбора.Использование Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТипЗнч(ЭлементОтбора.ПравоеЗначение)=Тип("СписокЗначений") Тогда
		Возврат НЕ ЭлементОтбора.ПравоеЗначение.НайтиПоЗначению(Значение)=Неопределено;
	КонецЕсли; 
	
	Возврат ЭлементОтбора.ПравоеЗначение=Значение;
	
КонецФункции

Функция НайтиГруппу(ИмяГруппы, ГруппаПоиска)
	
	Для Каждого Элемент Из ГруппаПоиска.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент)<>Тип("ГруппаФормы") Тогда
			Продолжить;
		КонецЕсли; 
		Если Элемент.Имя=ИмяГруппы Тогда
			Возврат Элемент;
		КонецЕсли; 
		ПодчиненнаяГруппа = НайтиГруппу(ИмяГруппы, Элемент);
		Если НЕ ПодчиненнаяГруппа=Неопределено Тогда
			Возврат ПодчиненнаяГруппа;
		КонецЕсли; 
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции
 
Процедура ЗаполнитьРесурсыРекурсивно(Ресурсы, Элементы)
	
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент)=Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Ресурсы.Добавить(Строка(Элемент.Поле));
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ЗаполнитьРесурсыРекурсивно(Ресурсы, Элемент.Элементы)
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
#КонецОбласти

ЭтоОтчетУНФ = Истина;

#КонецЕсли