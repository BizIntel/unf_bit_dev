&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();

	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2009Кв4";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы31 = "П0003100080";
	СтруктураРеквизитовФормы.мИдГруппы32 = "П0003200001";
	СтруктураРеквизитовФормы.мИдГруппы4  = "П0004000001";
	СтруктураРеквизитовФормы.мИдГруппы5  = "П0005000003";
	СтруктураРеквизитовФормы.мИдГруппы6  = "П0006000001";
	СтруктураРеквизитовФормы.мИдГруппы7  = "П0007000010";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы31 = 10;
	КолИсхСтрокИдГруппы32 = 1;
	КолИсхСтрокИдГруппы4  = 17;
	КолИсхСтрокИдГруппы5  = 17;
	КолИсхСтрокИдГруппы6  = 17;
	КолИсхСтрокИдГруппы7  = 1;

	КолКолонокИдГруппы31 = 4;
	КолКолонокИдГруппы32 = 3;
	КолКолонокИдГруппы4  = 5;
	КолКолонокИдГруппы5  = 5;
	КолКолонокИдГруппы6  = 4;
	КолКолонокИдГруппы7  = 4;
	
	СтруктураДанныхТитульный     = Новый Структура;
	СтруктураДанныхРаздел1       = Новый Структура;
	СтруктураДанныхРаздел3       = Новый Структура;
	СтруктураДанныхРаздел3_Прил2 = Новый Структура;
	СтруктураДанныхРаздел4       = Новый Структура;
	СтруктураДанныхРаздел6       = Новый Структура;
	СтруктураДанныхРаздел7       = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31, СтруктураРеквизитовФормы.мИдГруппы31);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы32, СтруктураРеквизитовФормы.мИдГруппы32);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  СтруктураРеквизитовФормы.мИдГруппы4);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,  СтруктураРеквизитовФормы.мИдГруппы5);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,  СтруктураРеквизитовФормы.мИдГруппы6);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,  СтруктураРеквизитовФормы.мИдГруппы7);

	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2",       "ТаблицаСтраницыРаздела2");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел3_Прил1", "ТаблицаСтраницыРаздела3_Прил1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел5",       "ТаблицаСтраницыРаздела5");
	
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31, КолИсхСтрокИдГруппы31);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы32, КолИсхСтрокИдГруппы32);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  КолИсхСтрокИдГруппы4);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,  КолИсхСтрокИдГруппы5);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,  КолИсхСтрокИдГруппы6);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,  КолИсхСтрокИдГруппы7);

	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31, КолКолонокИдГруппы31);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы32, КолКолонокИдГруппы32);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  КолКолонокИдГруппы4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,  КолКолонокИдГруппы5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,  КолКолонокИдГруппы6);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,  КолКолонокИдГруппы7);
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "11/07/2013";
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = "1151001";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
        	
	ИмяРаздела = "Титульный";
		
	ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
		
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы31");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы32");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы6");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы7");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ГруппаОрганизаций", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");	
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела3_Прил1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела5.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	Если ИмяРаздела = "Раздел1" 
	 ИЛИ ИмяРаздела = "Раздел2" 
	 ИЛИ ИмяРаздела = "Раздел3" 
	 ИЛИ ИмяРаздела = "Раздел3_Прил2" Тогда
		Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	ИначеЕсли ИмяРаздела = "Раздел7" Тогда
		Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));	
	Иначе
	    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2));
	КонецЕсли; 

	Возврат Результат; 
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100004003", "П000300001003;П000300002003;П000300003003;П000300004003;П000300006003;П000300001005;П000300002005;П000300003005;П000300004005;П000300005005;П000300006005;П000300007005;П000300008005;П000300009005;П000300012005;П000300022003;П000300018003;П000300019003;П000300013003;П000300015003;П000300016003;П000300017003;П000300020003;П000300021003;П000300023003;П000600002004;П000300024003;П000400001000;П000500001003;П000500001005;П000600003004;П000600000103;П000600000104;П000300022003;П000400000103;П000400000104;П000400000105;П000500000303;П000500000305");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100005003", "П000300001003;П000300002003;П000300003003;П000300004003;П000300006003;П000300001005;П000300002005;П000300003005;П000300004005;П000300005005;П000300006005;П000300007005;П000300008005;П000300009005;П000300012005;П000300022003;П000300018003;П000300019003;П000300013003;П000300015003;П000300016003;П000300017003;П000300020003;П000300021003;П000300023003;П000600002004;П000300024003;П000400001000;П000500001003;П000500001005;П000600003004;П000600000103;П000600000104;П000300022003;П000400000103;П000400000104;П000400000105;П000500000303;П000500000305");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200006003", "П000200008003;П000200009003;П000200010003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000310009004", "П000310008004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500001003", "П000500000303");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500001005", "П000500000305");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300001005", "П000300001003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300002005", "П000300002003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300003005", "П000300003003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300004005", "П000300004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300006005", "П000300006003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300012005", "П000300001003;П000300002003;П000300003003;П000300004003;П000300006003;П000300001005;П000300002005;П000300003005;П000300004005;П000300005005;П000300006005;П000300007005;П000300008005;П000300009005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300017003", "П000300018003;П000300019003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300022003", "П000300018003;П000300019003;П000300013003;П000300015003;П000300016003;П000300017003;П000300020003;П000300021003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300023003", "П000300001003;П000300002003;П000300003003;П000300004003;П000300006003;П000300001005;П000300002005;П000300003005;П000300004005;П000300005005;П000300006005;П000300007005;П000300008005;П000300009005;П000300012005;П000300022003;П000300018003;П000300019003;П000300013003;П000300015003;П000300016003;П000300017003;П000300020003;П000300021003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300024003", "П000300018003;П000300019003;П000300013003;П000300015003;П000300016003;П000300017003;П000300020003;П000300021003;П000300022003;П000300001003;П000300002003;П000300003003;П000300004003;П000300006003;П000300001005;П000300002005;П000300003005;П000300004005;П000300005005;П000300006005;П000300007005;П000300008005;П000300009005;П000300012005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000320000202", "П000320000102");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000320000203", "П000320000103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400001000", "П000400000103;П000400000104;П000400000105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600001002", "П000600000102");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600001003", "П000600000103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600001004", "П000600000104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600002004", "П000600000103;П000600000104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600003004", "П000600000103;П000600000104");
		
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета < '20100401' Тогда
		ТабличныйДокумент.Области.Приказ.Значение = "Приложение №1 к приказу Министерства финансов Российской Федерации от 15.10.2009 № 104н";
	Иначе
		ТабличныйДокумент.Области.Приказ.Значение = "Приложение №1 к приказу Министерства финансов Российской Федерации от 15.10.2009 № 104н (в редакции приказа Минфина России от 21.04.2010 № 36н)";
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			ЗаполнитьЗначенияПолейПоУмолчанию();
			
		КонецЕсли;
		
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
	 
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
		УстановитьДоступностьОбластей(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗначениеТаймера = ЗначениеТаймера();
		ЗаполнитьАвтоНаСервере();
		ЗаписатьЗамер(ЗначениеТаймера);
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИмяСекцииДляКодовОперацииРаздела7()
	
	ИмяСекции = "";
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20140101' Тогда
		
		ИмяСекции = "КодыОпераций_Раздел7_2014Кв1";
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20131001' Тогда
		
		ИмяСекции = "КодыОпераций_Раздел7_2013Кв4";
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20130101' Тогда
		
		ИмяСекции = "КодыОпераций_Раздел7_2013Кв1";
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20120101' Тогда
		
		ИмяСекции = "КодыОпераций_Раздел7_2012Кв1";
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20111122' Тогда
		
		ИмяСекции = "КодыОпераций_Раздел7_2011Кв4";
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета >= '20100701' Тогда
		
		ИмяСекции = "КодыОпераций_Раздел7_2010кв3";
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета >= '20100101' Тогда
		
		ИмяСекции = "КодыОпераций_Раздел7_2010";
		
	Иначе
		
		ИмяСекции = "КодыОпераций_Раздел7";
		
	КонецЕсли;
	
	Возврат ИмяСекции;
	
КонецФункции

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
            			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("Списки2009Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	ИмяСекцииКодовПериодаТитульный = ?(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20120101', "КодыПериодов_Титульный", "КодыПериодовТитульный_2012Кв1");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода периода", КоллекцияСписковВыбора[ИмяСекцииКодовПериодаТитульный]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500000200", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыПериодов_Раздел5"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100001003", 11, "ОКАТО");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200005003", 11, "ОКАТО");
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100002003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200004003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200007003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310003000", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел3_Прил1"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700001001", 7, , "Выбор кода операции", КоллекцияСписковВыбора[ИмяСекцииДляКодовОперацииРаздела7()]);
				
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
				
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0
			 ИЛИ ИмяСтраницы = "Раздел2" Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный" + Символы.ПС + "лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_Прил1";
	СтрокаУровня1.Представление            = "Раздел 3" + Символы.ПС + "Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_Прил2";
	СтрокаУровня1.Представление            = "Раздел 3" + Символы.ПС + "Прил. 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел6";
	СтрокаУровня1.Представление            = "Раздел 6";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел7";
	СтрокаУровня1.Представление            = "Раздел 7";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_Прил1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы31;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_Прил2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы32;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы6;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы7;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
    	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокРаздела = Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюТД = Элементы.ТабличныйДокументКонтекстноеМеню;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = ?(ЗаголовокРаздела И Элемент.ТекущиеДанные.РазделМногостраничный, Ложь, Истина);
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
																	ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	ТабличныйДокумент.ФиксацияСверху = 0;
	
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		КМенюТД.Видимость = Ложь;
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
		   И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			Элементы.РазделыОтчета.КонтекстноеМеню.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Истина;
			Элементы.РазделыОтчета.КонтекстноеМеню.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
		Иначе
			Элементы.РазделыОтчета.КонтекстноеМеню.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Ложь;
			Элементы.РазделыОтчета.КонтекстноеМеню.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел7"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3_Прил2" Тогда
		КМенюРО.Видимость = Ложь;
		КМенюТД.Видимость = Истина;
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюТД.Видимость = Ложь;
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Обновить.Доступность = ?(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный", Истина, Ложь);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	Если ИмяТекРаздела = "Раздел2" Тогда
		ИзменитьЦветЯчеекНаСервере();
	КонецЕсли;
						
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Раздел2"
	 ИЛИ НаимРаздела = "Раздел3_Прил1"
	 ИЛИ НаимРаздела = "Раздел5" Тогда
	     			
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Раздел2" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
			
		ИначеЕсли НаимРаздела = "Раздел3_Прил1" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела3_Прил1";
			
		ИначеЕсли НаимРаздела = "Раздел5" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела5";	
			
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
					
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел3_Прил2"
		  ИЛИ НаимРаздела = "Раздел7" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);
				
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПомощникаПоУчетуНДС);
	ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Раздел2"
		ИЛИ ИмяТекРаздела = "Раздел3_Прил1"
		ИЛИ ИмяТекРаздела = "Раздел5" Тогда
		
		Если ИмяТекРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
		ИначеЕсли ИмяТекРаздела = "Раздел3_Прил1" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела3_Прил1";
		ИначеЕсли ИмяТекРаздела = "Раздел5" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела5";
		КонецЕсли;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		СтруктураДанных = Новый Структура;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел3_Прил2" ИЛИ ИмяТекРаздела = "Раздел7" Тогда
		
		СтруктураДанныхРаздела = ЭтаФорма["СтруктураДанных" + ИмяТекРаздела];
		
		Для Каждого ЭлСтруктуры Из СтруктураДанныхРаздела Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ТекТабличноеПоле = ЭтаФорма.ТабличныйДокумент;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		ЕстьДопСтроки = Ложь;
		
		Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				ЕстьДопСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьДопСтроки Тогда
			Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Гиперссылка = Истина;
					ОбластьТД.Текст = "х";
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Гиперссылка = Ложь;
					ОбластьТД.Текст = "";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Обычные разделы.
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		УстановитьДоступностьОбластей(ЭтаФорма);
		
	Иначе
		
		ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
		
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "Раздел4" Тогда
		
		ТабличныйДокумент.Области.П000400000101_1.Значение  = "1010401";
		ТабличныйДокумент.Области.П000400000101_2.Значение  = "1010402";
		ТабличныйДокумент.Области.П000400000101_3.Значение  = "1010403";
		ТабличныйДокумент.Области.П000400000101_4.Значение  = "1010404";
		ТабличныйДокумент.Области.П000400000101_5.Значение  = "1010405";
		ТабличныйДокумент.Области.П000400000101_6.Значение  = "1010407";
		ТабличныйДокумент.Области.П000400000101_7.Значение  = "1010408";
		ТабличныйДокумент.Области.П000400000101_8.Значение  = "1010409";
		ТабличныйДокумент.Области.П000400000101_9.Значение  = "1010411";
		ТабличныйДокумент.Области.П000400000101_10.Значение = "1010412";
		ТабличныйДокумент.Области.П000400000101_11.Значение = "1010413";
		ТабличныйДокумент.Области.П000400000101_12.Значение = "1010414";
		ТабличныйДокумент.Области.П000400000101_13.Значение = "1010415";
		ТабличныйДокумент.Области.П000400000101_14.Значение = "1010416";
		ТабличныйДокумент.Области.П000400000101_15.Значение = "1010417";
		ТабличныйДокумент.Области.П000400000101_16.Значение = "1010418";
		ТабличныйДокумент.Области.П000400000101_17.Значение = "1010419";
		
		УстановитьТекстПримечанияОбласти(ТабличныйДокумент.Области.П000400000101_1, "1010401");
		УстановитьТекстПримечанияОбласти(ТабличныйДокумент.Области.П000400000101_5, "1010405");
		
	ИначеЕсли НаимРаздела = "Раздел5" Тогда
		
		ТабличныйДокумент.Области.П000500000301_1.Значение  = "1010401";
		ТабличныйДокумент.Области.П000500000301_2.Значение  = "1010402";
		ТабличныйДокумент.Области.П000500000301_3.Значение  = "1010403";
		ТабличныйДокумент.Области.П000500000301_4.Значение  = "1010404";
		ТабличныйДокумент.Области.П000500000301_5.Значение  = "1010405";
		ТабличныйДокумент.Области.П000500000301_6.Значение  = "1010407";
		ТабличныйДокумент.Области.П000500000301_7.Значение  = "1010408";
		ТабличныйДокумент.Области.П000500000301_8.Значение  = "1010409";
		ТабличныйДокумент.Области.П000500000301_9.Значение  = "1010411";
		ТабличныйДокумент.Области.П000500000301_10.Значение = "1010412";
		ТабличныйДокумент.Области.П000500000301_11.Значение = "1010413";
		ТабличныйДокумент.Области.П000500000301_12.Значение = "1010414";
		ТабличныйДокумент.Области.П000500000301_13.Значение = "1010415";
		ТабличныйДокумент.Области.П000500000301_14.Значение = "1010416";
		ТабличныйДокумент.Области.П000500000301_15.Значение = "1010417";
		ТабличныйДокумент.Области.П000500000301_16.Значение = "1010418";
		ТабличныйДокумент.Области.П000500000301_17.Значение = "1010419";
		
		УстановитьТекстПримечанияОбласти(ТабличныйДокумент.Области.П000500000301_1, "1010401");
		УстановитьТекстПримечанияОбласти(ТабличныйДокумент.Области.П000500000301_5, "1010405");
		
	ИначеЕсли НаимРаздела = "Раздел6" Тогда	
		
		ТабличныйДокумент.Области.П000600000101_1.Значение  = "1010401";
		ТабличныйДокумент.Области.П000600000101_2.Значение  = "1010402";
		ТабличныйДокумент.Области.П000600000101_3.Значение  = "1010403";
		ТабличныйДокумент.Области.П000600000101_4.Значение  = "1010404";
		ТабличныйДокумент.Области.П000600000101_5.Значение  = "1010405";
		ТабличныйДокумент.Области.П000600000101_6.Значение  = "1010407";
		ТабличныйДокумент.Области.П000600000101_7.Значение  = "1010408";
		ТабличныйДокумент.Области.П000600000101_8.Значение  = "1010409";
		ТабличныйДокумент.Области.П000600000101_9.Значение  = "1010411";
		ТабличныйДокумент.Области.П000600000101_10.Значение = "1010412";
		ТабличныйДокумент.Области.П000600000101_11.Значение = "1010413";
		ТабличныйДокумент.Области.П000600000101_12.Значение = "1010414";
		ТабличныйДокумент.Области.П000600000101_13.Значение = "1010415";
		ТабличныйДокумент.Области.П000600000101_14.Значение = "1010416";
		ТабличныйДокумент.Области.П000600000101_15.Значение = "1010417";
		ТабличныйДокумент.Области.П000600000101_16.Значение = "1010418";
		ТабличныйДокумент.Области.П000600000101_17.Значение = "1010419";
		
		УстановитьТекстПримечанияОбласти(ТабличныйДокумент.Области.П000600000101_1, "1010401");
		УстановитьТекстПримечанияОбласти(ТабличныйДокумент.Области.П000600000101_5, "1010405");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПримечанияОбласти(Область, КодОперации)
	
	Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета >= '20140101' Тогда
		
		Если КодОперации = "1010401" Тогда
			
			Область.Примечание.Текст =
			"Реализация товаров, вывезенных в таможенном режиме экспорта,
			|а также товаров, помещенных под таможенный режим свободной
			|таможенной зоны (не указанных в пункте 2 статьи 164 Кодекса);
			|Реализация углеводородного сырья, добытого на морском
			|месторождении углеводородного сырья, а также продуктов его
			|технологического передела (стабильного конденсата, сжиженного
			|природного газа, широкой фракции легких углеводородов),
			|вывезенных из пункта отправления, находящегося на
			|континентальном шельфе Российской Федерации и (или) в
			|исключительной экономической зоне Российской Федерации либо в
			|российской части (российском секторе) дна Каспийского моря, в
			|пункт назначения, находящийся за пределами территории
			|Российской Федерации и иных территорий, находящихся под ее
			|юрисдикцией, при условии представления документов,
			|предусмотренных статьей 165 настоящего Кодекса, за
			|исключением случаев, если такие товары вывозятся в таможенной
			|процедуре экспорта (подпункт 2.9 пункта 1 статьи 164)";
			
		ИначеЕсли КодОперации = "1010405" Тогда
			
			Область.Примечание.Текст =
			"Реализация работ (услуг), непосредственно связанных с производством
			|и реализацией товаров, указанных в подпункте 1 пункта 1 статьи 164
			|Кодекса. К таким работам (услугам) относятся работы (услуги) по
			|организации и сопровождению, погрузке и перегрузке вывозимых за
			|пределы территории Российской Федерации или ввозимых на территорию
			|Российской Федерации товаров, выполняемые (оказываемые) российскими
			|организациями или индивидуальными предпринимателями (за исключением
			|российских перевозчиков на железнодорожном транспорте), и иные
			|подобные работы (услуги), а также работы (услуги) по переработке
			|товаров, помещенных под таможенный режим переработки на таможенной
			|территории;
			|Реализация услуг, оказываемых при организации и осуществлении
			|перевозок железнодорожным транспортом от места прибытия товаров на
			|территорию Российской Федерации (от портов или пограничных станций,
			|расположенных на территории Российской Федерации) до станции
			|назначения товаров, расположенной на территории Российской
			|Федерации и иных территорий, находящихся под ее юрисдикцией
			|(подпункт 2.1 пункта 1 статьи 164 Кодекса)";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы32", СтруктураРеквизитовФормы.мИдГруппы32);
	ИдГрупп.Вставить("мИдГруппы4",  СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",  СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",  СтруктураРеквизитовФормы.мИдГруппы7);
		
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы32", СтруктураРеквизитовФормы.мИдГруппы32);
	ИдГрупп.Вставить("мИдГруппы4",  СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",  СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",  СтруктураРеквизитовФормы.мИдГруппы7);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
		
	Если ИдГруппы = ИдГрупп.мИдГруппы31 Тогда
		
		ТекТабличноеПоле = "Раздел3_Прил1";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы32 Тогда
		
		ТекТабличноеПоле = "Раздел3_Прил2";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы4 Тогда
		
		ТекТабличноеПоле = "Раздел4";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы5 Тогда
		
		ТекТабличноеПоле = "Раздел5";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы6 Тогда
		
		ТекТабличноеПоле = "Раздел6";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы7 Тогда
		
		ТекТабличноеПоле = "Раздел7";
				
	КонецЕсли;

	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
    		
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;

КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	Если СокрЛП(ПолеТабличногоДокументаТитульный.Области.Период.Значение) = "" ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода = Новый Соответствие;
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3,  "21");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6,  "22");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9,  "23");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12, "24");
		
		// выводим признак периода на титульный лист
		КодОтчетногоПериода = СоответствиеНомераМесяцаКодуОтчетногоПериода[Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)];
		ПолеТабличногоДокументаТитульный.Области.Период.Значение = КодОтчетногоПериода;
	КонецЕсли; 
	  	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ПолеТабличногоДокументаТитульный.Области.ОтчетГод.Значение = ОтчетныйГод;
		
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ИзмененаДатаПодписи = Ложь)
    
	Если НЕ ИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКАТО, ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ДополнитьСправа = 1;
		
		ТабличныйДокумент.Области["ИНН1"].Значение = СведенияОбОрганизации.ИННЮЛ;
		ТабличныйДокумент.Области["КПП1"].Значение = СведенияОбОрганизации.КППЮЛ;
		     		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;

		ТабличныйДокумент.Области["КодИМНС"].Значение = КодНО;
		
		ТабличныйДокумент.Области.ПоМесту.Значение = "400";
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
		
		ТабличныйДокумент.Области.НаимОрг.Значение = НаименованиеОрганизации;
		
		ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
						
		КодТерриториальногоОбразования = ?(ПрименяетсяФормат503(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), СведенияОбОрганизации.ОКТМО, СведенияОбОрганизации.ОКАТО);
		ЗаполнитьОКАТО(ЭтаФорма, КодТерриториальногоОбразования);
				
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	ЗаполнитьСведенияОПодписантах();
	
	ЗаполнитьЗначенияПолейПоУмолчанию();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	ЗаполнитьЗначенияПолейПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантахИКодПоОКАТО(Ссылка)
		
	КодТерриториальногоОбразования = ?(ПрименяетсяФормат503(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), Ссылка.КодПоОКТМО, Ссылка.КодПоОКАТО);
	ЗаполнитьОКАТО(ЭтаФорма, КодТерриториальногоОбразования);
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
		
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0 И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы32", СтруктураРеквизитовФормы.мИдГруппы32);
	ИдГрупп.Вставить("мИдГруппы4",  СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",  СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",  СтруктураРеквизитовФормы.мИдГруппы7);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы32", СтруктураРеквизитовФормы.мИдГруппы32);
	ИдГрупп.Вставить("мИдГруппы4",  СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",  СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",  СтруктураРеквизитовФормы.мИдГруппы7);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
    	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел3_Прил1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы31;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел3_Прил2" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы32;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы4;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы5;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел6" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы6;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел7" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы7;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	Перем ТаблицаРасшифровки;
	Перем ВерсияФормы;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ВерсияФормыИзменилась = Ложь;
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) И (ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы) Тогда
		ВерсияФормыИзменилась = Истина;
	КонецЕсли;
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	// Установим актуальные представления разделов.
	Если НЕ ДеревоНастройкиСтраниц = Неопределено Тогда
		
		Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
			Счетчик = ?(Счетчик = Неопределено, 0, Счетчик);
			ЭлементмДеревоСтраницОтчета = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
			Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
				Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
					СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					Ном = 0;
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								ТаблЗнач = ЭлСтруктуры.Значение;
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							КонецЦикла;
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						КонецЕсли;
						Ном = Ном + 1;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);

	СписокСохранения.Свойство("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	Если СтруктураРеквизитовФормы.ГруппаОрганизаций = Неопределено Тогда
		СтруктураРеквизитовФормы.ГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
			
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(, "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
		
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ).Имя = "ДатаПодписи" Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ДатаПодписи;
			Иначе
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВерсияФормыИзменилась Тогда
		ОбновитьПользовательскиеНастройки();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН1, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН1 = Лев(СтруктураДанныхТитульный.ИНН1, СтрНайти(СтруктураДанныхТитульный.ИНН1, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки)
					+ СтрЗаменить(ПоказателиТаблПоле["НомерКорректировки" + Ном], "-", "");
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;				
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период" + Ном];
				СтруктураДанныхТитульный.Удалить("Период" + Ном);
			КонецЦикла;					
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;						
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;		
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;				
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
		
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
							
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
    	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомерКорректировки) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт	
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
					
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	// Сохраним список организаций, по которому необходимо собирать отчет.
	СписокСохранения.Вставить("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)

	Строка060БылаАвторасчитываемая = Форма.ТабличныйДокумент.Области.П000200006003.Защита;
	
	КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.П000200007003.Значение);
	
	Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
		Иначе	
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200006003");
		КонецЕсли;
	
		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200008003");
		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200009003");
		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200010003");
		
	Иначе	
		
		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
		ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200008003");
		ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200009003");
		ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200010003");
		
		Если Строка060БылаАвторасчитываемая Тогда
			
			Форма.ТабличныйДокумент.Области.П000200006003.Значение = 0;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Значение по строке 060 раздела 2 очищено вследствие изменения кода операции по строке 070.'");
	
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		Форма.ТабличныйДокумент.Области.П000200008003.Значение = "";
		Форма.ТабличныйДокумент.Области.П000200009003.Значение = "";
		Форма.ТабличныйДокумент.Области.П000200010003.Значение = "";
				
	КонецЕсли;
	
	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200004003");
	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200005003");
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено)
    		
	ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
    		
	#Если НаКлиенте Тогда
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
	#Иначе
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	#КонецЕсли
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, НовыйВариант);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа.
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);

КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Раздел1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100004003, ОбластьИмя) > 0
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100005003, ОбластьИмя) > 0 Тогда
			
			ОкрП000300023003 = 0;
			ОкрП000300024003 = 0;
			ОкрП000400001000 = 0;
			ОкрП000500001003 = 0;
			ОкрП000500001005 = 0;
			ОкрП000600002004 = 0;
			ОкрП000600003004 = 0;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				ОкрП000300023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300023003.Значение);
			ИначеЕсли Форма.СтруктураДанныхРаздел3.Свойство("П000300023003") Тогда
				ОкрП000300023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300023003);
			КонецЕсли;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				ОкрП000300024003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300024003.Значение);
			ИначеЕсли Форма.СтруктураДанныхРаздел3.Свойство("П000300024003") Тогда
				ОкрП000300024003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300024003);
			КонецЕсли;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				ОкрП000400001000 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400001000.Значение);
			ИначеЕсли Форма.СтруктураДанныхРаздел4.Свойство("П000400001000") Тогда
				ОкрП000400001000 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400001000);
			КонецЕсли;
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000500001003", 0);
			СумПоказатели.Вставить("П000500001005", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел5", СумПоказатели, Истина);
			
			ОкрП000500001003 = СумПоказатели.П000500001003;
			ОкрП000500001005 = СумПоказатели.П000500001005;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел6" Тогда
				ОкрП000600002004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600002004.Значение);
			ИначеЕсли Форма.СтруктураДанныхРаздел6.Свойство("П000600002004") Тогда
				ОкрП000600002004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600002004);
			КонецЕсли;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел6" Тогда
				ОкрП000600003004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600003004.Значение);
			ИначеЕсли Форма.СтруктураДанныхРаздел6.Свойство("П000600003004") Тогда
				ОкрП000600003004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600003004);
			КонецЕсли;
			
			СуммаНалога = (ОкрП000300023003 + ОкрП000600002004) 
			- (ОкрП000300024003 + ОкрП000400001000 + ОкрП000500001003 + ОкрП000500001005 + ОкрП000600003004);
			
			Форма.СтруктураДанныхРаздел1.Вставить("П000100004003", Макс(СуммаНалога, 0));
			Форма.СтруктураДанныхРаздел1.Вставить("П000100005003", Макс(-СуммаНалога, 0));
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200006003, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				
				КодОперации = Форма.ТабличныйДокумент.Области.П000200007003.Значение;
				
				Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда 
					
					ОкрП000200008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200008003.Значение);
					ОкрП000200009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200009003.Значение);
					ОкрП000200010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200010003.Значение);
					
					Если ОкрП000200008003 = 0 Тогда
						Форма.ТабличныйДокумент.Области.П000200006003.Значение = ОкрП000200009003;
					Иначе
						Форма.ТабличныйДокумент.Области.П000200006003.Значение = ОкрП000200008003 + ОкрП000200009003 - ОкрП000200010003;
					КонецЕсли;	
					
				КонецЕсли;
				
			Иначе
				
				Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела2 Цикл
					
					ЭлементТабл = ЭлементТабл.Данные[0].Значение;
					
					КодОперации = ЭлементТабл.П000200007003;
					
					Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда 
						
						ОкрП000200008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл.П000200008003);
						ОкрП000200009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл.П000200009003);
						ОкрП000200010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл.П000200010003);
						
						Если ОкрП000200008003 = 0 Тогда
							ЭлементТабл.П000200006003 = ОкрП000200009003;
						Иначе
							ЭлементТабл.П000200006003 = ОкрП000200008003 + ОкрП000200009003 - ОкрП000200010003;
						КонецЕсли;	
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
						
		Конецесли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
	
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300001005, ОбластьИмя) > 0 Тогда
				ОкрП000300001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300001003.Значение);
				Форма.ТабличныйДокумент.Области.П000300001005.Значение = ОкрП000300001003 * 18 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300002005, ОбластьИмя) > 0 Тогда
				ОкрП000300002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300002003.Значение);
				Форма.ТабличныйДокумент.Области.П000300002005.Значение = ОкрП000300002003 * 10 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300003005, ОбластьИмя) > 0 Тогда
				ОкрП000300003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300003003.Значение);
				Форма.ТабличныйДокумент.Области.П000300003005.Значение = ОкрП000300003003 * 18 / 118;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004005, ОбластьИмя) > 0 Тогда
				ОкрП000300004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300004003.Значение);
				Форма.ТабличныйДокумент.Области.П000300004005.Значение = ОкрП000300004003 * 10 / 110;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300006005, ОбластьИмя) > 0 Тогда
				ОкрП000300006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300006003.Значение);
				Форма.ТабличныйДокумент.Области.П000300006005.Значение = ОкрП000300006003 * 18 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300012005, ОбластьИмя) > 0 Тогда
				
				ОкрП000300001005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300001005.Значение);
				ОкрП000300002005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300002005.Значение);
				ОкрП000300003005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300003005.Значение);
				ОкрП000300004005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300004005.Значение);
				ОкрП000300005005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300005005.Значение);
				ОкрП000300006005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300006005.Значение);
				ОкрП000300007005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300007005.Значение);
				ОкрП000300008005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300008005.Значение);
				ОкрП000300009005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300009005.Значение);
				
				Форма.ТабличныйДокумент.Области.П000300012005.Значение = ОкрП000300001005 + ОкрП000300002005 + ОкрП000300003005
				+ ОкрП000300004005 + ОкрП000300005005 + ОкрП000300006005
				+ ОкрП000300007005 + ОкрП000300008005 + ОкрП000300009005;
				
			КонецЕсли;													   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300017003, ОбластьИмя) > 0 Тогда
				
				ОкрП000300018003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300018003.Значение);
				ОкрП000300019003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300019003.Значение);
				
				Форма.ТабличныйДокумент.Области.П000300017003.Значение = ОкрП000300018003 + ОкрП000300019003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300022003, ОбластьИмя) > 0 Тогда
				
				ОкрП000300013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300013003.Значение);
				ОкрП000300015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300015003.Значение);
				ОкрП000300016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300016003.Значение);
				ОкрП000300017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300017003.Значение);
				ОкрП000300020003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300020003.Значение);
				ОкрП000300021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300021003.Значение);
				
				Форма.ТабличныйДокумент.Области.П000300022003.Значение = ОкрП000300013003 + ОкрП000300015003 + ОкрП000300016003
				+ ОкрП000300017003 + ОкрП000300020003 + ОкрП000300021003;
				
			КонецЕсли;													   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300023003, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000300023003.Значение = Макс(Форма.ТабличныйДокумент.Области.П000300012005.Значение - Форма.ТабличныйДокумент.Области.П000300022003.Значение, 0);
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300024003, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000300024003.Значение = Макс(Форма.ТабличныйДокумент.Области.П000300022003.Значение - Форма.ТабличныйДокумент.Области.П000300012005.Значение, 0);												
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300001005, ОбластьИмя) > 0 Тогда
				ОкрП000300001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300001003);
				Форма.СтруктураДанныхРаздел3.П000300001005 = ОкрП000300001003 * 18 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300002005, ОбластьИмя) > 0 Тогда
				ОкрП000300002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300002003);
				Форма.СтруктураДанныхРаздел3.П000300002005 = ОкрП000300002003 * 10 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300003005, ОбластьИмя) > 0 Тогда
				ОкрП000300003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300003003);
				Форма.СтруктураДанныхРаздел3.П000300003005 = ОкрП000300003003 * 18 / 118;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004005, ОбластьИмя) > 0 Тогда
				ОкрП000300004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300004003);
				Форма.СтруктураДанныхРаздел3.П000300004005 = ОкрП000300004003 * 10 / 110;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300006005, ОбластьИмя) > 0 Тогда
				ОкрП000300006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300006003);
				Форма.СтруктураДанныхРаздел3.П000300006005 = ОкрП000300006003 * 18 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300012005, ОбластьИмя) > 0 Тогда
				
				ОкрП000300001005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300001005);
				ОкрП000300002005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300002005);
				ОкрП000300003005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300003005);
				ОкрП000300004005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300004005);
				ОкрП000300005005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300005005);
				ОкрП000300006005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300006005);
				ОкрП000300007005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300007005);
				ОкрП000300008005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300008005);
				ОкрП000300009005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300009005);
				
				Форма.СтруктураДанныхРаздел3.П000300012005 = ОкрП000300001005 + ОкрП000300002005 + ОкрП000300003005
				+ ОкрП000300004005 + ОкрП000300005005 + ОкрП000300006005
				+ ОкрП000300007005 + ОкрП000300008005 + ОкрП000300009005;
				
			КонецЕсли;													   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300017003, ОбластьИмя) > 0 Тогда
				
				ОкрП000300018003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300018003);
				ОкрП000300019003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300019003);
				
				Форма.СтруктураДанныхРаздел3.П000300017003 = ОкрП000300018003 + ОкрП000300019003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300022003, ОбластьИмя) > 0 Тогда
				
				ОкрП000300013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300013003);
				ОкрП000300015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300015003);
				ОкрП000300016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300016003);
				ОкрП000300017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300017003);
				ОкрП000300020003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300020003);
				ОкрП000300021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300021003);
				
				Форма.СтруктураДанныхРаздел3.П000300022003 = ОкрП000300013003 + ОкрП000300015003 + ОкрП000300016003
				+ ОкрП000300017003 + ОкрП000300020003 + ОкрП000300021003;
				
			КонецЕсли;													   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300023003, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел3.П000300023003 = Макс(Форма.СтруктураДанныхРаздел3.П000300012005 - Форма.СтруктураДанныхРаздел3.П000300022003, 0);
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300024003, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел3.П000300024003 = Макс(Форма.СтруктураДанныхРаздел3.П000300022003 - Форма.СтруктураДанныхРаздел3.П000300012005, 0);
			КонецЕсли;
			
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
				
	ИначеЕсли ИмяСтраницыПанели = "Раздел3_Прил1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310009004, ОбластьИмя) > 0 Тогда
				
				Колонка4 = 0;
				
				Для Ном = 1 По 10 Цикл
					Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000310008004_" + Ном].Значение);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000310009004.Значение = Колонка4;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310009004, ОбластьИмя) > 0 Тогда
				
				Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела3_Прил1 Цикл
					
					ЭлементТабл = ЭлементТабл.Данные[0].Значение;;
					
					Колонка4 = 0;
					
					Для Ном = 1 По 10 Цикл
						Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл["П000310008004_" + Ном]);
					КонецЦикла;
					
					ЭлементТабл.П000310009004 = Колонка4;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3_Прил2" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000320000202, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы32, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка2 = 0;
			
			Ном = 1;
			
			Для Каждого ЭлементТабл Из ТаблицаБлока Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
					Колонка2 = Колонка2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000320000102_" + Ном].Значение);
				Иначе
					Колонка2 = Колонка2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл.П000320000102);
				КонецЕсли;
				
				Ном = Ном + 1;
								
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				Форма.ТабличныйДокумент.Области.П000320000202.Значение = Колонка2;		
			Иначе
				Форма.СтруктураДанныхРаздел3_Прил2.П000320000202 = Колонка2;		
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000320000203, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы32, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка3 = 0;
			
			Ном = 1;
			
			Для Каждого ЭлементТабл Из ТаблицаБлока Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000320000103_" + Ном].Значение);
				Иначе
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл.П000320000103);
				КонецЕсли;
								
				Ном = Ном + 1;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				Форма.ТабличныйДокумент.Области.П000320000203.Значение = Колонка3;
			Иначе
				Форма.СтруктураДанныхРаздел3_Прил2.П000320000203 = Колонка3;		
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел4" Тогда

		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400001000, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				
				Колонка3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_1.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_2.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_3.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_4.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_5.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_6.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_7.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_8.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_9.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_10.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_11.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_12.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_13.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_14.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_15.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_16.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000103_17.Значение);
				
				Колонка4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_1.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_2.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_3.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_4.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_5.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_6.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_7.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_8.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_9.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_10.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_11.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_12.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_13.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_14.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_15.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_16.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000104_17.Значение);
				
				Колонка5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_1.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_2.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_3.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_4.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_5.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_6.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_7.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_8.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_9.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_10.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_11.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_12.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_13.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_14.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_15.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_16.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400000105_17.Значение);
				
				Форма.ТабличныйДокумент.Области.П000400001000.Значение = Макс(Колонка3 + Колонка4 - Колонка5, 0);
				
			Иначе
				
				Колонка3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_1)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_2)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_3)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_4)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_5)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_6)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_7)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_8)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_9)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_10)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_11)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_12)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_13)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_14)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_15)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_16)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000103_17);
				
				Колонка4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_1)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_2)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_3)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_4)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_5)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_6)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_7)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_8)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_9)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_10)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_11)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_12)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_13)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_14)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_15)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_16)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000104_17);
				
				Колонка5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_1)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_2)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_3)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_4)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_5)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_6)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_7)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_8)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_9)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_10)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_11)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_12)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_13)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_14)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_15)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_16)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400000105_17);
				
				Форма.СтруктураДанныхРаздел4.П000400001000 = Макс(Колонка3 + Колонка4 - Колонка5, 0);
				
			КонецЕсли;
			
		КонецЕсли;
				
		Расчет(Форма, "Раздел1", ОбластьИмя);
						
	ИначеЕсли ИмяСтраницыПанели = "Раздел5" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500001003, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				
				Колонка3 = 0;
				
				Для Ном = 1 По 17 Цикл
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000500000303_" + Ном].Значение);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000500001003.Значение = Колонка3;
				
			Иначе
								
				Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела5 Цикл
					
					ЭлементТабл = ЭлементТабл.Данные[0].Значение;;
					
					Колонка3 = 0;
					
					Для Ном = 1 По 17 Цикл
						Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл["П000500000303_" + Ном]);
					КонецЦикла;
					
					ЭлементТабл.П000500001003 = Колонка3;
					
				КонецЦикла;
								
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500001005, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				
				Колонка5 = 0;
				
				Для Ном = 1 По 17 Цикл
					Колонка5 = Колонка5 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000500000305_" + Ном].Значение);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000500001005.Значение = Колонка5;
				
			Иначе
				
				Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела5 Цикл
					
					ЭлементТабл = ЭлементТабл.Данные[0].Значение;;
					
					Колонка5 = 0;
					
					Для Ном = 1 По 17 Цикл
						Колонка5 = Колонка5 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл["П000500000305_" + Ном]);
					КонецЦикла;
					
					ЭлементТабл.П000500001005 = Колонка5;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
						
	ИначеЕсли ИмяСтраницыПанели = "Раздел6" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
	
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600001002, ОбластьИмя) > 0 Тогда
				
				Колонка2 = 0;
				
				Для Ном = 1 По 17 Цикл
					Колонка2 = Колонка2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000600000102_" + Ном].Значение);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000600001002.Значение = Колонка2;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600001003, ОбластьИмя) > 0 Тогда
				
				Колонка3 = 0;
				
				Для Ном = 1 По 17 Цикл
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000600000103_" + Ном].Значение);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000600001003.Значение = Колонка3;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600001004, ОбластьИмя) > 0 Тогда
				
				Колонка4 = 0;
				
				Для Ном = 1 По 17 Цикл
					Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000600000104_" + Ном].Значение);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000600001004.Значение = Колонка4;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600002004, ОбластьИмя) > 0 Тогда
				
				Колонка3 = Форма.ТабличныйДокумент.Области.П000600001003.Значение;
				Колонка4 = Форма.ТабличныйДокумент.Области.П000600001004.Значение;
				
				Форма.ТабличныйДокумент.Области.П000600002004.Значение = Макс(Колонка3 - Колонка4, 0);
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600003004, ОбластьИмя) > 0 Тогда
				
				Колонка3 = Форма.ТабличныйДокумент.Области.П000600001003.Значение;
				Колонка4 = Форма.ТабличныйДокумент.Области.П000600001004.Значение;
				
				Форма.ТабличныйДокумент.Области.П000600003004.Значение = Макс(Колонка4 - Колонка3, 0);
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600001002, ОбластьИмя) > 0 Тогда
				
				Колонка2 = 0;
				
				Для Ном = 1 По 17 Цикл
					Колонка2 = Колонка2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6["П000600000102_" + Ном]);
				КонецЦикла;
				
				Форма.СтруктураДанныхРаздел6.П000600001002 = Колонка2;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600001003, ОбластьИмя) > 0 Тогда
				
				Колонка3 = 0;
				
				Для Ном = 1 По 17 Цикл
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6["П000600000103_" + Ном]);
				КонецЦикла;
				
				Форма.СтруктураДанныхРаздел6.П000600001003 = Колонка3;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600001004, ОбластьИмя) > 0 Тогда
				
				Колонка4 = 0;
				
				Для Ном = 1 По 17 Цикл
					Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6["П000600000104_" + Ном]);
				КонецЦикла;
				
				Форма.СтруктураДанныхРаздел6.П000600001004 = Колонка4;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600002004, ОбластьИмя) > 0 Тогда
				
				Колонка3 = Форма.СтруктураДанныхРаздел6.П000600001003;
				Колонка4 = Форма.СтруктураДанныхРаздел6.П000600001004;
				
				Форма.СтруктураДанныхРаздел6.П000600002004 = Макс(Колонка3 - Колонка4, 0);
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600003004, ОбластьИмя) > 0 Тогда
				
				Колонка3 = Форма.СтруктураДанныхРаздел6.П000600001003;
				Колонка4 = Форма.СтруктураДанныхРаздел6.П000600001004;
				
				Форма.СтруктураДанныхРаздел6.П000600003004 = Макс(Колонка4 - Колонка3, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
	ИначеЕсли ИмяСтраницыПанели = "" Тогда
		
		// В этом режиме перерассчитаем все показатели на листах в обратном порядке.

		Расчет(Форма, "Раздел2", 	   ОбластьИмя);
		Расчет(Форма, "Раздел3_Прил1", ОбластьИмя);
		Расчет(Форма, "Раздел3_Прил2", ОбластьИмя);
		Расчет(Форма, "Раздел3", 	   ОбластьИмя);
		Расчет(Форма, "Раздел4", 	   ОбластьИмя);
		Расчет(Форма, "Раздел5",       ОбластьИмя);
		Расчет(Форма, "Раздел6",       ОбластьИмя);
		Расчет(Форма, "Раздел1",       ОбластьИмя);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, ИмяСтраницы, СумПоказатели, Округлять)
	
	ТаблицаРаздела = Неопределено;
	
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
	
	Если ТаблицаРаздела <> Неопределено Тогда
		
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		
		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
			
			ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные;
			
			Если ДанныеТаблПоле.Количество() = 0 Тогда
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
					
					Для Каждого СумПоказатель Из СумПоказатели Цикл
						
						СумПоказатели.Вставить(СумПоказатель.Ключ, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области[СумПоказатель.Ключ].Значение));
						
					КонецЦикла;
										
				КонецЕсли;
								
				Прервать;
				
			КонецЕсли;
			
			Если НЕ Форма.СтруктураРеквизитовФормы.НомерТекущейСтраницы = Неопределено
			   И Инд = Форма.СтруктураРеквизитовФормы.НомерТекущейСтраницы - 1
			   И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
			   
			   Для Каждого СумПоказатель Из СумПоказатели Цикл
				   
				   СумПоказатели.Вставить(СумПоказатель.Ключ, СумПоказатель.Значение + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области[СумПоказатель.Ключ].Значение));
				   
			   КонецЦикла;
												
			Иначе
				
				Для Каждого СумПоказатель Из СумПоказатели Цикл
					
					СумПоказатели.Вставить(СумПоказатель.Ключ, СумПоказатель.Значение + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ДанныеТаблПоле[0].Значение[СумПоказатель.Ключ]));
					
				КонецЦикла;
			
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		ОКАТО = ТабличныйДокумент.Области.П000200005003.Значение;
	КонецЕсли;
		
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		ТабличныйДокумент.Области.П000200005003.Значение = ОКАТО;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
				
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	ИндексУдаляемойСтраницы = ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные);
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ИндексУдаляемойСтраницы);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ИндексУдаляемойСтраницы);
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = ЭтаФорма[ИмяТекТабличногоПоля];
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление               = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИзменитьЦветЯчеекНаСервере();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено, НомерУдаляемойСтраницы = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем МассивВариантовЗаполненияСтраниц;
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	Если НомерУдаляемойСтраницы <> Неопределено
		И мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела)
		И мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];
		
		МассивВариантовЗаполненияСтраниц.Удалить(НомерУдаляемойСтраницы);
		
		КолСтраниц = ТаблицаСтраницРаздела.Количество();
		КолВариантов = МассивВариантовЗаполненияСтраниц.Количество();
		
		Для Инд = КолСтраниц + 1 По КолВариантов Цикл
			
			МассивВариантовЗаполненияСтраниц.Удалить(МассивВариантовЗаполненияСтраниц.Количество() - 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		ВставитьДополнительнуюСтрокуНаСервере();
	#Иначе
		ВставитьДополнительнуюСтрокуНаКлиенте();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	
	ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);

	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Удалить выбранную строку?'"), Символы.ПС);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		УдалитьДополнительнуюСтрокуНаСервере();
	#Иначе
		УдалитьДополнительнуюСтрокуНаКлиенте();
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьДополнительнуюСтрокуНаКлиенте()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		#Если НаКлиенте Тогда
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		#Иначе
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		#КонецЕсли
		
		Если ИмяГруппы = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если СтрНайти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли;
	
	Если СпециальноеДобавление Тогда
		
	Иначе
		
		// добавляем в таблицу новую строку
		РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;
	
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01" Тогда
				ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
			КонецЕсли;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01" Тогда
				ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя  = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
			Если ИмяКолонкиНомера <> Неопределено Тогда
				Если ИмяКолонкиНомера = ИмяКолонки Тогда
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ОбластьЯчейки.Значение = КолСтрокСтр1;
					Иначе
						ОбластьЯчейки.Текст = КолСтрокСтр1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяГруппыБлока = Неопределено Тогда
		
		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
		
		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			ОбластьТД.Гиперссылка = Истина;
			ОбластьТД.Текст = "х";
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
    	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;

	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли

	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
					
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		// Восстановим область.
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для НомерГрафы = 0 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					Если НомерГрафы = 0 Тогда
						
						КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат( 1, "ЧЦ=2; ЧВН=");
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							// обновляем порядковый номер строки
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
		
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	ЕстьДопСтроки = Ложь;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
			ЕстьДопСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьДопСтроки Тогда
		Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
			Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
		
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		Форма.РасчетНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = Область.Имя;

	Если Лев(ИмяЯчейки, 7) = "КодИМНС" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		Возврат;
	КонецЕсли;
		
	Если (ИмяЯчейки = "П000310002000_01")
	 ИЛИ (ИмяЯчейки = "П000310002000_02") 
	 ИЛИ (ИмяЯчейки = "П000310002000_03") 
	 ИЛИ (ИмяЯчейки = "П000310002000_04") 
	 ИЛИ (ИмяЯчейки = "П000310002000_05") 
	 ИЛИ (ИмяЯчейки = "П000310002000_06")
	 ИЛИ (ИмяЯчейки = "П000310002000_07") 
	 ИЛИ (ИмяЯчейки = "П000310002000_08") 
	 ИЛИ (ИмяЯчейки = "П000310002000_09") Тогда 

		СтандартнаяОбработка = Ложь;
		
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",	        ТабличныйДокумент.Области.П000310002000_01.Значение);
		РоссийскийАдрес.Вставить("Регион",          ТабличныйДокумент.Области.П000310002000_02.Значение);
		РоссийскийАдрес.Вставить("КодРегиона",      ТабличныйДокумент.Области.П000310002000_02.Значение);
		РоссийскийАдрес.Вставить("Район",           ТабличныйДокумент.Области.П000310002000_03.Значение);
		РоссийскийАдрес.Вставить("Город",           ТабличныйДокумент.Области.П000310002000_04.Значение);
		РоссийскийАдрес.Вставить("НаселенныйПункт", ТабличныйДокумент.Области.П000310002000_05.Значение);
		РоссийскийАдрес.Вставить("Улица",           ТабличныйДокумент.Области.П000310002000_06.Значение);
		РоссийскийАдрес.Вставить("Дом",             ТабличныйДокумент.Области.П000310002000_07.Значение);
		РоссийскийАдрес.Вставить("Корпус",          ТабличныйДокумент.Области.П000310002000_08.Значение);
		РоссийскийАдрес.Вставить("Квартира",        ТабличныйДокумент.Области.П000310002000_09.Значение);
		
		Если Регионы.Количество() = 0 Тогда
			ЗаполнитьРегионыНаСервере();
		КонецЕсли;
		
		Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["Регион"])));
			
		Если Регион.Количество() > 0 Тогда
			
			РоссийскийАдрес["Регион"] = Регион[0].Наим;
			
		КонецЕсли;
		
		ЗначенияПолей = Новый СписокЗначений;
		
		ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],       "Регион");
		ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегион"],       "КодРегиона");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
		ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
								 		
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
																												  + РоссийскийАдрес["Регион"] + ","
																												  + РоссийскийАдрес["Район"] + ","
																												  + РоссийскийАдрес["Город"] + ","
																												  + РоссийскийАдрес["НаселенныйПункт"] + ","
																												  + РоссийскийАдрес["Улица"] + ","
																												  + РоссийскийАдрес["Дом"] + ","
																												  + РоссийскийАдрес["Корпус"] + ","
																												  + РоссийскийАдрес["Квартира"]);
								
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
		ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
						
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяЯчейки);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		
		ТребРезультат = 0;
		Если КодПоказателя = "Период" Тогда
			
			НомерКвартала = Число(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к"));
			
			ТребРезультат = НомерКвартала;
			
		КонецЕсли;
		
		Если ТребРезультат <> 0 Тогда
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
					ТЗВыбора.Удалить(ЭлементТЗ);
			 	КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
				
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	Иначе
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ТабличныйДокумент.Области.П000310002000_01.Значение = РоссийскийАдрес_["Индекс"];
		ТабличныйДокумент.Области.П000310002000_02.Значение = РоссийскийАдрес_["КодРегиона"];
		ТабличныйДокумент.Области.П000310002000_03.Значение = РоссийскийАдрес_["Район"];
		ТабличныйДокумент.Области.П000310002000_04.Значение = РоссийскийАдрес_["Город"];
		ТабличныйДокумент.Области.П000310002000_05.Значение = РоссийскийАдрес_["НаселенныйПункт"];
		ТабличныйДокумент.Области.П000310002000_06.Значение = РоссийскийАдрес_["Улица"];
		ТабличныйДокумент.Области.П000310002000_07.Значение = РоссийскийАдрес_["Дом"];
		ТабличныйДокумент.Области.П000310002000_08.Значение = РоссийскийАдрес_["Корпус"];
		ТабличныйДокумент.Области.П000310002000_09.Значение = РоссийскийАдрес_["Квартира"];
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ТабличныйДокумент.Области.Найти("ПерейтиКПомощнику") <> Неопределено Тогда
		Если Область.Верх = ТабличныйДокумент.Области.ПерейтиКПомощнику.Верх Тогда
			СтандартнаяОбработка = Ложь;
			РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуПомощникаПоУчетуНДС(Область.Расшифровка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		Если Область.Имя = "ОрганизацииДляЗаполненияОтчета" И Область.Гиперссылка Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", Новый Структура("Организация", СтруктураРеквизитовФормы.Организация));
			ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.ГруппаОрганизаций);
			
			ФормаВыбораОрганизаций = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораОрганизаций", ПараметрыФормы, ЭтаФорма);
			ФормаВыбораОрганизаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВыбораОрганизаций.Открыть();
			
		КонецЕсли;
		УстановитьДоступностьОбластей(ЭтаФорма);
	КонецЕсли;
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		УдалитьСтроку("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	
	Если ПараметрВводаПоля.Количество() > 0 Тогда
		
		ПараметрВводаПоля = ПараметрВводаПоля[0];
		
		Если ПараметрВводаПоля.Тип = "ОКАТО" И ЗначениеЗаполнено(Область.Значение) Тогда
			ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
			Для Инд = ДлинаЗначения+1 По 11 Цикл
				Область.Значение = СокрЛП(Область.Значение) + "0";
			КонецЦикла;
		КонецЕсли;
		
		Если СтрДлина(СокрЛП(Область.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Область.Значение)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длина значения показателя должна быть равна %1!'"), ПараметрВводаПоля.Длина);
			Сообщение.Сообщить();
		КонецЕсли;
	
	КонецЕсли;
	
	Если Область.Имя = "ОКВЭД" Тогда
		
		Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);
			Сообщение.Сообщить();
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда
		
		НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(Область.Значение = 0, 0, 1);
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		
		Модифицированность = Истина;
		
	ИначеЕсли Область.Имя = "ДатаПодписи" Тогда
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1" 
	 ИЛИ ИмяРаздела = "Раздел2" 
	 ИЛИ ИмяРаздела = "Раздел3" 
	 ИЛИ ИмяРаздела = "Раздел3_Прил1" 
	 ИЛИ ИмяРаздела = "Раздел3_Прил2" 
	 ИЛИ ИмяРаздела = "Раздел4" 
	 ИЛИ ИмяРаздела = "Раздел5" 
	 ИЛИ ИмяРаздела = "Раздел6" 
	 ИЛИ ИмяРаздела = "Раздел7" Тогда
		
		ИмяОбласти = Область.Имя;
		
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	ИначеЕсли ИмяРаздела = "Титульный" Тогда
		
		УстановитьДоступностьОбластей(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
    	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",                    СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена",            СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц",                         СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов",                         СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения",                        СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения",                СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения",      СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры",                              мПараметры);
		
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			ИзменитьЦветЯчеек(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СохрП000100001003 = СтруктураДанныхРаздел1.П000100001003;
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел3.Очистить();
	СтруктураДанныхРаздел3_Прил2.Очистить();
	СтруктураДанныхРаздел4.Очистить();
	СтруктураДанныхРаздел6.Очистить();
	СтруктураДанныхРаздел7.Очистить();
	
	ТаблицаСтраницыРаздела2.Очистить();
	ТаблицаСтраницыРаздела3_Прил1.Очистить();
	ТаблицаСтраницыРаздела5.Очистить();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный"
	   И НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ЗаполнитьОКАТО(ЭтаФорма, СокрЛП(СохрП000100001003));
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
			
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма);
		КонецЕсли;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["КодИМНС"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП1"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантахИКодПоОКАТО(РезультатВыбора.Ссылка);
		
		Модифицированность = Истина;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
	Если Область.Имя = "П000200007003" Тогда
		#Если ВебКлиент Тогда
			ИзменитьЦветЯчеекНаСервере();
		#Иначе
			ИзменитьЦветЯчеекНаКлиенте();
		#КонецЕсли
	КонецЕсли;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	КонецЕсли;
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	        	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ПараметрыВыгрузки);
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
	ДанныеРаздела2 = мДанныеОтчета.Раздел2;
	Для Каждого ЛистРаздела2 Из ДанныеРаздела2 Цикл
		ДанныеЛистаРаздела2 = ЛистРаздела2.Данные[0].Значение;
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(СокрЛП(ДанныеЛистаРаздела2.П000200002003));
		ДанныеЛистаРаздела2.Вставить("П000200002003_1", ФИО.Фамилия);
		ДанныеЛистаРаздела2.Вставить("П000200002003_2", ФИО.Имя);
		ДанныеЛистаРаздела2.Вставить("П000200002003_3", ФИО.Отчество);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",	   РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",		   "1151001");
	ПараметрыВыгрузки.Вставить("ДатаДок",	   Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",	   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",	   СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("ВидДок",	   Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",	   СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭДОрг",     СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("ТелОрг",	   СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",	   СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",	   СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",	   СокрЛП(Титульный.КПП1));
	
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",	СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",		 ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",		НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",		?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",		СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",		ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",			ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта",	ФИОПодписанта.Отчество);
	
	Если СтрНайти("'25','26','27','28'", "'" + ПараметрыВыгрузки.ПериодОтч + "'") > 0 Тогда
		ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы", "NO_NDS_1_003_00_05_02_01.xsd");
	Иначе
		ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы", "NO_NDS_1_003_00_05_01_01.xsd");
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_NDS");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДС");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));

	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ПараметрыВыгрузки)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если ПрименяетсяФормат503(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		ИмяМакетаСтруктурыВыгрузки = "СхемаВыгрузки503";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2012-01-01' Тогда
		ИмяМакетаСтруктурыВыгрузки = "СхемаВыгрузки502";
	Иначе
		ИмяМакетаСтруктурыВыгрузки = "СхемаВыгрузки501";
	КонецЕсли;
	
	Макет = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(ИмяМакетаСтруктурыВыгрузки);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда	
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("400");
	
	Для Инд = 1 ПО 99 Цикл
		ВозможныеКодыПоМесту.Добавить("Д" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=0"));
	КонецЦикла;
	
	ВозможныеКодыПериода = Новый Массив;
	
	ВозможныеКодыПериода.Добавить("21");
	ВозможныеКодыПериода.Добавить("22");
	ВозможныеКодыПериода.Добавить("23");
	ВозможныеКодыПериода.Добавить("24");
	
	ВозможныеКодыПериода.Добавить("25");
	ВозможныеКодыПериода.Добавить("26");
	ВозможныеКодыПериода.Добавить("27");
	ВозможныеКодыПериода.Добавить("28");
	
	ВозможныеКодыПериода.Добавить("51");
	ВозможныеКодыПериода.Добавить("54");
	ВозможныеКодыПериода.Добавить("55");
	ВозможныеКодыПериода.Добавить("56");
	
	ВозможныеКодыПериодаРаздел5 = Новый Массив;
	ВозможныеКодыПериодаРаздел5.Добавить("01");
	ВозможныеКодыПериодаРаздел5.Добавить("02");
	ВозможныеКодыПериодаРаздел5.Добавить("03");
	ВозможныеКодыПериодаРаздел5.Добавить("04");
	ВозможныеКодыПериодаРаздел5.Добавить("05");
	ВозможныеКодыПериодаРаздел5.Добавить("06");
	ВозможныеКодыПериодаРаздел5.Добавить("07");
	ВозможныеКодыПериодаРаздел5.Добавить("08");
	ВозможныеКодыПериодаРаздел5.Добавить("09");
	ВозможныеКодыПериодаРаздел5.Добавить("10");
	ВозможныеКодыПериодаРаздел5.Добавить("11");
	ВозможныеКодыПериодаРаздел5.Добавить("12");
	
	ВозможныеКодыПериодаРаздел5.Добавить("21");
	ВозможныеКодыПериодаРаздел5.Добавить("22");
	ВозможныеКодыПериодаРаздел5.Добавить("23");
	ВозможныеКодыПериодаРаздел5.Добавить("24");
	
	Титульный	 = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1		 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2		 = мДанныеОтчета.Раздел2;
	Раздел3		 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел3Прил1 = мДанныеОтчета.Раздел3_Прил1;
	Раздел3Прил2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3_Прил2;
	Раздел4		 = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	Раздел5		 = мДанныеОтчета.Раздел5;
	Раздел6		 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	Раздел7		 = мДанныеОтчета.ПолеТабличногоДокументаРаздел7;
	
	// Титульный лист.
	Если ПустаяСтрока(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	Иначе
		Если (ПараметрыВыгрузки.ЭтоПБОЮЛ И СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12) 
		 И (СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан ИНН!", "Титульный", "ИНН1");
			СтатусПроверки = Ложь;
		КонецЕсли;	
	КонецЕсли;
	Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации!", "Титульный", "КПП1");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан КПП организации!", "Титульный", "КПП1");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ПериодОтч) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код отчетного периода!", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.ПериодОтч) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код отчетного периода!", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указан налогоплательщик!", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.КодИФНС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа!", "Титульный", "КодИМНС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода вида деятельности по ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта!", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	Если ЗначениеСуммыЗаполнено(Раздел1.П000100003003) ИЛИ ЗначениеСуммыЗаполнено(Раздел1.П000100004003) ИЛИ ЗначениеСуммыЗаполнено(Раздел1.П000100005003) Тогда
		
		ОКАТОРаздел1 = СокрЛП(Раздел1.П000100001003);
		ДлинаОКАТОРаздел1 = СтрДлина(ОКАТОРаздел1);
		Если ДлинаОКАТОРаздел1 <> 11 И ДлинаОКАТОРаздел1 <> 8 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не" + ?(ДлинаОКАТОРаздел1 = 0, "", "верно") + " задан код по ОКАТО!", "Раздел1", "П000100001003");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КБКРаздел1 = СокрЛП(Раздел1.П000100002003);
		ДлинаКБКРаздел1 = СтрДлина(КБКРаздел1);
		Если ДлинаКБКРаздел1 <> 20 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не" + ?(ДлинаКБКРаздел1 = 0, "", "верно") + " задан КБК!", "Раздел1", "П000100002003");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Раздел 2.
	Раздел2Пуст = Истина;
	НомерЛиста = 0;
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		ДанныеЛистаРаздела2 = ЛистРаздела2.Данные[0].Значение;
		
		НомерЛиста = НомерЛиста + 1;
		
		Если ЭкземплярРазделаПуст(ДеревоВыгрузки, "Раздел2", ДанныеЛистаРаздела2, "П000200005003") Тогда	
			Продолжить;
		КонецЕсли;
		
		Раздел2Пуст = Ложь;
		
		КППРаздел2 = СокрЛП(ДанныеЛистаРаздела2.П000200001003);
		ДлинаКППРаздел2 = СтрДлина(КППРаздел2);
		Если ДлинаКППРаздел2 <> 0 И ДлинаКППРаздел2 <> 9 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " неверно задан КПП подразделения иностранной организации!", "Раздел2", "П000200001003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИННРаздел2 = СокрЛП(ДанныеЛистаРаздела2.П000200003003);
		ДлинаИННРаздел2 = СтрДлина(ИННРаздел2);
		Если ДлинаИННРаздел2 <> 0 И ДлинаИННРаздел2 <> 10 И ДлинаИННРаздел2 <> 12 Тогда	
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " задано некорректное значение ИНН!", "Раздел2", "П000200003003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Наименование налогоплательщика-продавца.
		Если (ДанныеЛистаРаздела2.П000200007003 = "1011711" ИЛИ ДанныеЛистаРаздела2.П000200007003 = "1011712" ИЛИ ДанныеЛистаРаздела2.П000200007003 = "1011703")
		И НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200002003) Тогда	
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не задано наименование налогоплательщика-продавца!", "Раздел2", "П000200002003", НомерЛиста);
			СтатусПроверки = Ложь;
		ИначеЕсли ДлинаИННРаздел2 = 10 И НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200002003) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не задано наименование налогоплательщика-продавца!", "Раздел2", "П000200002003", НомерЛиста);
			СтатусПроверки = Ложь;
		ИначеЕсли ДлинаИННРаздел2 = 12 Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200002003_1) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не задано имя налогоплательщика-продавца!", "Раздел2", "П000200002003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200002003_2) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не задана фамилия налогоплательщика-продавца!", "Раздел2", "П000200002003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение ИНН при коде операции 1011703.
		Если ДанныеЛистаРаздела2.П000200007003 = "1011703" И НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200003003) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не задан ИНН!", "Раздел2", "П000200003003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КБКРаздел2 = СокрЛП(ДанныеЛистаРаздела2.П000200004003);
		ДлинаКБКРаздел2 = СтрДлина(КБКРаздел2);
		Если ДлинаКБКРаздел2 <> 20 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не" + ?(ДлинаКБКРаздел2 = 0, "", "верно") + " задан КБК!", "Раздел2", "П000200004003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ОКАТОРаздел2 = СокрЛП(ДанныеЛистаРаздела2.П000200005003);
		ДлинаОКАТОРаздел2 = СтрДлина(ОКАТОРаздел2);
		Если ДлинаОКАТОРаздел2 <> 11 И ДлинаОКАТОРаздел2 <> 8 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не" + ?(ДлинаОКАТОРаздел2 = 0, "", "верно") + " задан код по ОКАТО!", "Раздел2", "П000200005003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КодОперацииРаздел2 = СокрЛП(ДанныеЛистаРаздела2.П000200007003);
		ДлинаКодОперацииРаздел2 = СтрДлина(КодОперацииРаздел2);
		Если ДлинаКодОперацииРаздел2 <> 7 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерЛиста + " не задан код операции!", "Раздел2", "П000200007003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 3 приложение 1.
	НомерЛиста = 0;
	Для Каждого ЛистРаздела3Прил1 Из Раздел3Прил1 Цикл
		ДанныеЛистаРаздела3Прил1 = ЛистРаздела3Прил1.Данные[0].Значение;
		
		НомерЛиста = НомерЛиста + 1;
		
		Если ЭкземплярРазделаПуст(ДеревоВыгрузки, "Раздел3_Прил1", ДанныеЛистаРаздела3Прил1) Тогда
			Продолжить;
		КонецЕсли;
		
		НаимНедв = СокрЛП(ДанныеЛистаРаздела3Прил1.П000310001000);
		Если ПустаяСтрока(НаимНедв) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " не задано наименование объекта недвижимости!", "Раздел3_Прил1", "П000310001000", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ПочтовыйИндекс = СокрЛП(ДанныеЛистаРаздела3Прил1.П000310002000_01);
		ДлинаИндекса = СтрДлина(ПочтовыйИндекс);
		Если ДлинаИндекса <> 0 И ДлинаИндекса <> 6 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " неверно задан почтовый индекс!", "Раздел3_Прил1", "П000310002000_01", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КодСубъекта = СокрЛП(ДанныеЛистаРаздела3Прил1.П000310002000_02);
		ДлинаКодСубъектаРФ = СтрДлина(КодСубъекта);
		Если ДлинаКодСубъектаРФ <> 2 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " не" + ?(ДлинаКодСубъектаРФ = 0, "", "верно") + " задан код субъекта Российской Федерации!", "Раздел3_Прил1", "П000310002000_02", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КодОперацииРаздел3Прил1 = СокрЛП(ДанныеЛистаРаздела3Прил1.П000310003000);
		ДлинаКодОперацииРаздел3Прил1 = СтрДлина(КодОперацииРаздел3Прил1);
		Если ДлинаКодОперацииРаздел3Прил1 <>7 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " не" + ?(ДлинаКодОперацииРаздел3Прил1 = 0, "", "верно") + " задан код операции по объекту недвижимости!", "Раздел3_Прил1", "П000310003000", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела3Прил1.П000310004000) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " не задана дата ввода объекта недвижимости в эксплуатацию для исчисления амортизации!", "Раздел3_Прил1", "П000310004000", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела3Прил1.П000310005000) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " не задана дата начала амортизационных отчислений по объекту недвижимости!", "Раздел3_Прил1", "П000310005000", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если МногострочнаяЧастьПуста(ДанныеЛистаРаздела3Прил1, "П000310008001, П000310008002, П000310008003, П000310008004", "П000310008004") Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " не задана ни одна строка табличной части!", "Раздел3_Прил1", "П000310008001_1", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		НомерСтроки = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛистаРаздела3Прил1, "П000310008001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			П000310008001 = СокрЛП(ДанныеЛистаРаздела3Прил1["П000310008001_" + Формат(НомерСтроки, "ЧГ=")]);
			П000310008002 = ДанныеЛистаРаздела3Прил1["П000310008002_" + Формат(НомерСтроки, "ЧГ=")];
			П000310008003 = ДанныеЛистаРаздела3Прил1["П000310008003_" + Формат(НомерСтроки, "ЧГ=")];
			П000310008004 = ДанныеЛистаРаздела3Прил1["П000310008004_" + Формат(НомерСтроки, "ЧГ=")];
			
			Если ЗначениеЗаполнено(П000310008001) ИЛИ ЗначениеЗаполнено(П000310008002) ИЛИ ЗначениеЗаполнено(П000310008003) ИЛИ ЗначениеСуммыЗаполнено(П000310008004) Тогда
				
				ДлинаП000310008001 = СтрДлина(П000310008001);
				Если ДлинаП000310008001 <> 4 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " в строке " + НомерСтроки + " не" + ?(ДлинаП000310008001 = 0, "", "верно") + " задан год!", "Раздел3_Прил1", "П000310008001_" + Формат(НомерСтроки, "ЧГ="), НомерЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Раздел 3 приложение 2.
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел3Прил2, "П000320000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		П000320000101 = СокрЛП(Раздел3Прил2["П000320000101_" + Формат(НомерСтроки, "ЧГ=")]);
		П000320000102 = Раздел3Прил2["П000320000102_" + Формат(НомерСтроки, "ЧГ=")];
		П000320000103 = Раздел3Прил2["П000320000103_" + Формат(НомерСтроки, "ЧГ=")];
		
		// КПП.
		Если ЗначениеЗаполнено(П000320000101) ИЛИ ЗначениеСуммыЗаполнено(П000320000102) ИЛИ ЗначениеСуммыЗаполнено(П000320000103) Тогда
			ДлинаП000320000101 = СтрДлина(П000320000101);
			Если ДлинаП000320000101 <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Приложение 2 к разделу 3"" в строке " + НомерСтроки + " не" + ?(ДлинаП000320000101 = 0, "", "верно") + " задан КПП подразделения иностранной организации!", "Раздел3_Прил2", "П000320000101_" + Формат(НомерСтроки, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	// Раздел 5.
	НомерЛиста = 0;
	Для Каждого ЛистРаздела5 Из Раздел5 Цикл
		ДанныеЛистаРаздела5 = ЛистРаздела5.Данные[0].Значение;
		
		НомерЛиста = НомерЛиста + 1;
		
		Если ЭкземплярРазделаПуст(ДеревоВыгрузки, "Раздел5", ДанныеЛистаРаздела5, "П000500000301") Тогда
			Продолжить;
		КонецЕсли;
		
		ГодРаздел5 = СокрЛП(ДанныеЛистаРаздела5.П000500000100);
		ДлинаГодРаздел5 = СтрДлина(ГодРаздел5);
		Если ДлинаГодРаздел5 <> 4 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " не" + ?(ДлинаГодРаздел5 = 0, "", "верно") + " задан отчетный год!", "Раздел5", "П000500000100", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		НалоговыйПериодРаздел5 = СокрЛП(ДанныеЛистаРаздела5.П000500000200);
		ДлинаНалоговыйПериодРаздел5 = СтрДлина(НалоговыйПериодРаздел5);
		Если ВозможныеКодыПериодаРаздел5.Найти(НалоговыйПериодРаздел5) = Неопределено Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " не" + ?(ДлинаНалоговыйПериодРаздел5 = 0, "", "верно") + " задан код налогового периода!", "Раздел5", "П000500000200", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если МногострочнаяЧастьПуста(ДанныеЛистаРаздела5, "П000500000302, П000500000303, П000500000304, П000500000305", "П000500000302, П000500000303, П000500000304, П000500000305") Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " не задана ни одна строка табличной части!", "Раздел5", "П000500000302_1", НомерЛиста);
			СтатусПроверки = Ложь;
		Иначе
			
			ИндексСтроки = 1;
			Пока ДанныеЛистаРаздела5.Свойство("П000500000301_" + Формат(ИндексСтроки, "ЧГ=")) Цикл
				СтрИндексСтроки = Формат(ИндексСтроки, "ЧГ=");
				
				Если ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500000302_" + СтрИндексСтроки])
				И НЕ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500000303_" + СтрИндексСтроки]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " в строке " + СтрИндексСтроки + " не задана сумма налоговых вычетов по графе 3!", "Раздел5", "П000500000303_" + СтрИндексСтроки, НомерЛиста);
					СтатусПроверки = Ложь;
				Конецесли;
				
				Если ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500000304_" + СтрИндексСтроки])
				И НЕ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500000305_" + СтрИндексСтроки]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " в строке " + СтрИндексСтроки + " не задана сумма налоговых вычетов по графе 5!", "Раздел5", "П000500000305_" + СтрИндексСтроки, НомерЛиста);
					СтатусПроверки = Ложь;
				Конецесли;
				
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла;
			
			// Итог по графе 3 не может быть пуст, если эта графа заполнена хотя бы в одной строке (доп. условие из бумажного формата).
			Если НЕ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5.П000500001003) Тогда
				
				ВсеСуммыГрафаПусты = Истина;
				ИндексСтроки = 1;
				Пока ДанныеЛистаРаздела5.Свойство("П000500000303_" + Формат(ИндексСтроки, "ЧГ=")) Цикл
					Если ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500000303_" + Формат(ИндексСтроки, "ЧГ=")]) Тогда
						ВсеСуммыГрафаПусты = Ложь;
						Прервать;
					КонецЕсли;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
				
				Если НЕ ВсеСуммыГрафаПусты Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " не указана итоговая суммы по графе 3!", "Раздел5", "П000500001003", НомерЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			// Итог по графе 5 не может быть пуст, если эта графа заполнена хотя бы в одной строке (доп. условие из бумажного формата).
			Если НЕ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5.П000500001005) Тогда
				
				ВсеСуммыГрафаПусты = Истина;
				ИндексСтроки = 1;
				Пока ДанныеЛистаРаздела5.Свойство("П000500000305_" + Формат(ИндексСтроки, "ЧГ=")) Цикл
					Если ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500000305_" + Формат(ИндексСтроки, "ЧГ=")]) Тогда
						ВсеСуммыГрафаПусты = Ложь;
						Прервать;
					КонецЕсли;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
				
				Если НЕ ВсеСуммыГрафаПусты Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5 на странице " + НомерЛиста + " не указана итоговая суммы по графе 5!", "Раздел5", "П000500001005", НомерЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 6.
	// Если заполнена хотя бы одна сумма в графе 4, то должен быть заполнен итог по этой графе.
	Если НЕ ЗначениеСуммыЗаполнено(Раздел6.П000600001004) И НЕ МногострочнаяЧастьПуста(Раздел6, "", "П000600000104") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 6 не задана итоговая сумма налога, исчисленная к уплате в бюджет!", "Раздел6", "П000600001004");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 7.
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел7, "П000700001001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		П000700001001 = СокрЛП(Раздел7["П000700001001_" + Формат(НомерСтроки, "ЧГ=")]);
		П000700001002 = Раздел7["П000700001002_" + Формат(НомерСтроки, "ЧГ=")];
		П000700001003 = Раздел7["П000700001003_" + Формат(НомерСтроки, "ЧГ=")];
		П000700001004 = Раздел7["П000700001004_" + Формат(НомерСтроки, "ЧГ=")];
		
		Если ЗначениеЗаполнено(П000700001001) ИЛИ ЗначениеСуммыЗаполнено(П000700001002) ИЛИ ЗначениеСуммыЗаполнено(П000700001003) ИЛИ ЗначениеСуммыЗаполнено(П000700001004) Тогда
			ДлинаП000700001001 = СтрДлина(П000700001001);
			Если ДлинаП000700001001 <> 7 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 7 в строке " + НомерСтроки + " не" + ?(ДлинаП000700001001 = 0, "", "верно") + " задан код операции!", "Раздел7", "П000700001001_" + Формат(НомерСтроки, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат СтатусПроверки;
	                	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	ПостобработкаДереваВыгрузки(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
			+ "_" + ПараметрыВыгрузки.КодИФНС
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
			
КонецФункции

&НаСервере
Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

&НаСервере
Функция ЭкземплярРазделаПуст(ДеревоВыгрузки, ИДРаздела, Данные, ПоказателиИсключения = Неопределено)
	
	Исключения = Новый Структура;
	Если ПоказателиИсключения <> Неопределено Тогда
		Исключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	РезультатыПоиска = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", ИДРаздела), Истина);
	Для Каждого РезультатПоиска Из РезультатыПоиска Цикл
		ИДПоказателя = СокрЛП(РезультатПоиска.Ключ);
		ПоказательЯвляетсяСуммой = (РезультатПоиска.Формат = "N" И РезультатПоиска.МаксРазмерность >= 10 И РезультатПоиска.МинРазмерность = 99999);
		Если НЕ ЗначениеЗаполнено(ИДПоказателя) ИЛИ Исключения.Свойство(ИДПоказателя) Тогда
			Продолжить;
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Данные, ИДПоказателя) И ЗначениеПоказателяЗаполнено(Данные[ИДПоказателя], ПоказательЯвляетсяСуммой) Тогда
			Возврат Ложь;
		ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Данные, ИДПоказателя + "_1") Тогда
			Инд = 1;
			Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Данные, ИДПоказателя + "_" + Формат(Инд, "ЧГ=")) Цикл
				Если ЗначениеПоказателяЗаполнено(Данные[ИДПоказателя + "_" + Формат(Инд, "ЧГ=")], ПоказательЯвляетсяСуммой) Тогда
					Возврат Ложь;
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция МногострочнаяЧастьПуста(Данные, СтрПоказатели, СтрПоказателиСуммы = Неопределено)
	
	Если ЗначениеЗаполнено(СтрПоказателиСуммы) Тогда
		ПоказателиСуммы = Новый Структура(СтрПоказателиСуммы);
	Иначе
		ПоказателиСуммы = Новый Структура;
	КонецЕсли;
	
	СтруктураПоказателей = Новый Структура(СтрПоказатели);
	Для Каждого Эл Из СтруктураПоказателей Цикл
		Инд = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Данные, Эл.Ключ + "_" + Формат(Инд, "ЧГ=")) Цикл
			Если ЗначениеПоказателяЗаполнено(Данные[Эл.Ключ + "_" + Формат(Инд, "ЧГ=")], ПоказателиСуммы.Свойство(Эл.Ключ)) Тогда
				Возврат Ложь;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПостобработкаДереваВыгрузки(ДеревоВыгрузки)
	
	УзелНДС = ДеревоВыгрузки.Строки.Найти("НДС", "Код", Истина);
	
	// решаем, оставлять ли узел СумПУ_173.1 (раздел 1)
	УзелСумПУ_173_1 = УзелНДС.Строки.Найти("СумПУ_173.1", "Код", Истина);
	Если УзелПуст(УзелСумПУ_173_1) Тогда
		
		// если узел пуст и не выполняются условия его присутствия, то удаляем узел
		Если УзелНДС.Строки.Найти("СумУпл164", "Код") = Неопределено
		И УзелНДС.Строки.Найти("НалПодтв0", "Код") = Неопределено
		И УзелНДС.Строки.Найти("НалВычПред0", "Код") = Неопределено
		И УзелНДС.Строки.Найти("НалНеПодтв0", "Код") = Неопределено Тогда
			УзелСумПУ_173_1.Родитель.Строки.Удалить(УзелСумПУ_173_1);
		КонецЕсли;
		
	КонецЕсли;
	
	// решаем, оставлять ли узел НалИсчСМР (раздел 3)
	УзелНалИсчСМР = УзелНДС.Строки.Найти("НалИсчСМР", "Код", Истина);
	Если УзелНалИсчСМР <> Неопределено И УзелПуст(УзелНалИсчСМР) И УзелНалИсчСМР.Родитель.Родитель.Строки.Найти("ВыпСМРСоб", "Код", Истина) = Неопределено Тогда
		
		// удаляем НалИсчСМР
		УзелНалИсчСМР.Родитель.Строки.Удалить(УзелНалИсчСМР);
		
	КонецЕсли;
	
	// решаем, оставлять ли узел СумНалВосст (раздел 3)
	УзелСумНалВосст = УзелНДС.Строки.Найти("СумНалВосст", "Код", Истина);
	Если УзелСумНалВосст <> Неопределено И УзелПуст(УзелСумНалВосст) Тогда
		
		// определяем, пусты ли все узлы ДатаИсп170
		УзлыДатаИсп170 = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "ДатаИсп170"), Истина);
		Если УзлыДатаИсп170.Количество() = 0 Тогда
			
			// удаляем узел СумНалВосст
			УзелСумНалВосст.Родитель.Строки.Удалить(УзелСумНалВосст);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если узел СумНалОб пуст и СумНалИсч отсутствует, то удалим СумНалОб (раздел 3)
	// узел СумНалОб проверяем на пустоту именно по количеству подчиненных строк,
	// потому что возможны ситуации, когда узлу подчинен пустой узел СумНалВосст (см. выше)
	УзелСумНалОб = УзелНДС.Строки.Найти("СумНалОб", "Код", Истина);
	Если УзелСумНалОб <> Неопределено И УзелСумНалОб.Строки.Количество() = 1 И УзелПуст(УзелСумНалОб.Строки[0]) Тогда
		
		// определяем, пусты ли все узлы ДатаИсп170
		УзлыСумНалИсч = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "СумНалИсч"), Истина);
		Если УзлыСумНалИсч.Количество() = 0 Тогда
			
			// удаляем узел СумНалОб
			УзелСумНалОб.Родитель.Строки.Удалить(УзелСумНалОб);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если узел СумНалВыч пуст и нет ни одного (СумНалВыч, подчиненного СумВычИн),
	// то удалим СумНалВыч
	УзелСумУпл164 = УзелНДС.Строки.Найти("СумУпл164", "Код", Истина);
	Если УзелСумУпл164 <> Неопределено Тогда
		
		// ищем СумНалВыч в подчинении СумУпл164
		УзелСумНалВычСложный = УзелСумУпл164.Строки.Найти("СумНалВыч", "Код");
		Если УзелСумНалВычСложный <> Неопределено Тогда
			
			// если остался только НалВычОбщ и он пустой
			Если УзелСумНалВычСложный.Строки.Количество() = 1 И УзелПуст(УзелСумНалВычСложный.Строки[0]) Тогда
				
				// если при этом нет ни одного заполненного СумНалВыч(П000320000103), то удаляем сложный СумНалВыч
				УзлыСумНалВыч = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код, Ключ", "СумНалВыч", "П000320000103"), Истина);
				Если УзлыСумНалВыч.Количество() = 0 Тогда
					УзелСумНалВычСложный.Родитель.Строки.Удалить(УзелСумНалВычСложный);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// решаем, оставлять ли узлы ДоляНеОбл и НалГод
	УзлыСведНалГод = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "СведНалГод"), Истина);
	Для Каждого УзелСведНалГод Из УзлыСведНалГод Цикл
		
		УзелДатаИсп170 = УзелСведНалГод.Строки.Найти("ДатаИсп170", "Код");
		Если УзелДатаИсп170 = Неопределено ИЛИ УзелПуст(УзелДатаИсп170) Тогда
			
			УзелДоляНеОбл = УзелСведНалГод.Строки.Найти("ДоляНеОбл", "Код");
			Если УзелПуст(УзелДоляНеОбл) Тогда
				УзелСведНалГод.Строки.Удалить(УзелДоляНеОбл);
			КонецЕсли;
			
			УзелНалГод = УзелСведНалГод.Строки.Найти("НалГод", "Код");
			Если УзелПуст(УзелНалГод) Тогда
				УзелСведНалГод.Строки.Удалить(УзелНалГод);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// решаем, оставлять ли узел СумУменИтог (раздел 4)
	УзелСумУменИтог = УзелНДС.Строки.Найти("СумУменИтог", "Код", Истина);
	Если УзелСумУменИтог <> Неопределено И УзелПуст(УзелСумУменИтог) Тогда
		Если УзелСумУменИтог.Родитель.Строки.Найти("НалВычПод", "Код", Истина) = Неопределено
		И УзелСумУменИтог.Родитель.Строки.Найти("НалНеПод", "Код", Истина) = Неопределено
		И УзелСумУменИтог.Родитель.Строки.Найти("НалВосст", "Код", Истина) = Неопределено Тогда
			УзелСумУменИтог.Родитель.Строки.Удалить(УзелСумУменИтог);
		КонецЕсли;
	КонецЕсли;
	
	// решаем, оставлять ли узлы СтПриобТов и НалНеВыч
	УзлыСумОпер7 = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "СумОпер7"), Истина);
	Для Каждого УзелСумОпер7 Из УзлыСумОпер7 Цикл
		
		УзелКодОпер = УзелСумОпер7.Строки.Найти("КодОпер", "Код");
		Если Лев(СокрЛП(УзелКодОпер.Значение), 5) <> "10102" Тогда
			
			УзелСтПриобТов = УзелСумОпер7.Строки.Найти("СтПриобТов", "Код");
			Если УзелПуст(УзелСтПриобТов) Тогда
				УзелСумОпер7.Строки.Удалить(УзелСтПриобТов);
			КонецЕсли;
			
			УзелНалНеВыч = УзелСумОпер7.Строки.Найти("НалНеВыч", "Код");
			Если УзелПуст(УзелНалНеВыч) Тогда
				УзелСумОпер7.Строки.Удалить(УзелНалНеВыч);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// решаем, оставлять ли узел ОплПостСв6Мес
	УзелОплПостСв6Мес = УзелНДС.Строки.Найти("ОплПостСв6Мес", "Код", Истина);
	Если УзелОплПостСв6Мес <> Неопределено И УзелПуст(УзелОплПостСв6Мес) Тогда
		
		// если узлы НалНеВыч присутствуют в дереве выгрузки, то удалим пустой узел ОплПостСв6Мес
		УзлыНалНеВыч = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "НалНеВыч"), Истина);
		Если УзлыНалНеВыч.Количество() > 0 Тогда
			УзелОплПостСв6Мес.Родитель.Строки.Удалить(УзелОплПостСв6Мес);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T"  ИЛИ Стр.Формат = "S" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Формирование XML: Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ (" + АдресПоказателя(Стр)+ ") меньше минимально возможной (" + ДлинаЗначения
					+ " < " + Стр.МинРазмерность + ")", Стр.Раздел, Стр.Ключ, "");
			Иначе
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Формирование XML: Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ (" + АдресПоказателя(Стр)+ ") меньше минимально возможной (" + ДлинаЗначения
					+ " < " + Стр.МинРазмерность + ")", "Титульный", "");
			КонецЕсли;
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Формирование XML: Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """  (" + АдресПоказателя(Стр)+ ") больше максимально возможной (" + ДлинаЗначения
					+ " > " + Стр.МаксРазмерность + ")", Стр.Раздел, Стр.Ключ, "");
			Иначе
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Формирование XML: Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """  (" + АдресПоказателя(Стр)+ ") больше максимально возможной (" + ДлинаЗначения
					+ " > " + Стр.МаксРазмерность + ")", "Титульный", "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Титульный	  = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1		  = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2		  = мДанныеОтчета.Раздел2;
	Раздел3		  = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел3_Прил1 = мДанныеОтчета.Раздел3_Прил1;
	Раздел3_Прил2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3_Прил2;
	Раздел4		  = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	Раздел5		  = мДанныеОтчета.Раздел5;
	Раздел6		  = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	Раздел7		  = мДанныеОтчета.ПолеТабличногоДокументаРаздел7;
	
	// Раздел 1.
	УзелСумУплНП = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумУплНП");
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "ОКАТО", Раздел1.П000100001003);
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "КБК", Раздел1.П000100002003);
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "СумПУ_173.5", Раздел1.П000100003003);
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "СумПУ_173.1", ?(ЗначениеСуммыЗаполнено(Раздел1.П000100005003), -Раздел1.П000100005003, Раздел1.П000100004003));
	
	// Раздел 2.
	УзелСумУплНАШаблон = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумУплНА");
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		
		УзелСумУплНА = СкопироватьУзел(УзелРодитель, УзелСумУплНАШаблон);
		ЗаполнитьДаннымиУзел(ЛистРаздела2.Данные[0].Значение, УзелСумУплНА);
		
		ИННЭкземпляраРаздела = СокрЛП(ЛистРаздела2.Данные[0].Значение.П000200003003);
		Если СтрДлина(ИННЭкземпляраРаздела) = 10 ИЛИ НЕ ЗначениеЗаполнено(ИННЭкземпляраРаздела) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелСумУплНА, "СведПродФЛ"));
		ИначеЕсли СтрДлина(ИННЭкземпляраРаздела) = 12 Тогда
			РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелСумУплНА, "СведПродЮЛ"));
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 3.
	УзелСумУпл164 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумУпл164");
	ЗадатьЗначениеЭлемента(УзелСумУпл164, "НалПУ164", ?(ЗначениеСуммыЗаполнено(Раздел3.П000300024003), -Раздел3.П000300024003, Раздел3.П000300023003));
	ЗаполнитьДаннымиУзел(Раздел3, ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумНалОб"));
	ЗаполнитьДаннымиУзел(Раздел3, ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумНалВыч"));
	
	// Раздел 3 приложение 1.
	УзелСумВосУплШаблон = ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумВосУпл");
	Для Каждого ЛистРаздел3Прил1 Из Раздел3_Прил1 Цикл
		УзелСумВосУпл = СкопироватьУзел(УзелСумУпл164, УзелСумВосУплШаблон);
		ДанныеЛистРаздел3Прил1 = ЛистРаздел3Прил1.Данные[0].Значение;
		Для Каждого Узел Из УзелСумВосУпл.Строки Цикл
			Если Узел.Тип = "А" ИЛИ Узел.Тип = "A" Тогда
				ВывестиПоказательВXML(Узел, ДанныеЛистРаздел3Прил1[Узел.Ключ]);
			ИначеЕсли Узел.Код = "АдрМННед" Тогда
				ЗаполнитьДаннымиУзел(ДанныеЛистРаздел3Прил1, Узел);
			КонецЕсли;
		КонецЦикла;
		УзелСведНалГодШаблон = ПолучитьПодчиненныйЭлемент(УзелСумВосУпл, "СведНалГод");
		Инд = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛистРаздел3Прил1, "П000310008001_" + Формат(Инд, "ЧГ=")) Цикл
			УзелСведНалГод = СкопироватьУзел(УзелСумВосУпл, УзелСведНалГодШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛистРаздел3Прил1, УзелСведНалГод, Инд);
			Инд = Инд + 1;
		КонецЦикла;
	КонецЦикла;
	
	// Раздел 3 приложение 2.
	УзелСумВычИн = ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумВычИн");
	УзелСведНалГодИШаблон = ПолучитьПодчиненныйЭлемент(УзелСумВычИн, "СведНалГодИ");
	Инд = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел3_Прил2, "П000320000101_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСведНалГодИ = СкопироватьУзел(УзелСумВычИн, УзелСведНалГодИШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(Раздел3_Прил2, УзелСведНалГодИ, Инд);
		Инд = Инд + 1;
	КонецЦикла;
	
	// Раздел 4.
	УзелНалПодтв0 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалПодтв0");
	ЗадатьЗначениеЭлемента(УзелНалПодтв0, "СумУменИтог", Раздел4.П000400001000);
	УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелНалПодтв0, "СумОпер4");
	Инд = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел4, "П000400000101_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСумОпер = СкопироватьУзел(УзелНалПодтв0, УзелСумОперШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(Раздел4, УзелСумОпер, Инд, "П000400000101");
		Инд = Инд + 1;
	КонецЦикла;
	
	// Раздел 5.
	УзелНалВычПред0Шаблон = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалВычПред0");
	Для Каждого ЛистРаздела5 Из Раздел5 Цикл
		ДанныеЛистаРаздела5 = ЛистРаздела5.Данные[0].Значение;
		УзелЛистаРаздела5 = СкопироватьУзел(УзелРодитель, УзелНалВычПред0Шаблон);
		Для Каждого Узел Из УзелЛистаРаздела5.Строки Цикл
			Если Узел.Тип = "А" ИЛИ Узел.Тип = "A" Тогда
				ВывестиПоказательВXML(Узел, ДанныеЛистаРаздела5[Узел.Ключ]);
			КонецЕсли;
		КонецЦикла;
		УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелЛистаРаздела5, "СумОпер5");
		Инд = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛистаРаздела5, "П000500000301_" + Формат(Инд, "ЧГ=")) Цикл
			УзелСумОпер = СкопироватьУзел(УзелЛистаРаздела5, УзелСумОперШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛистаРаздела5, УзелСумОпер, Инд, "П000500000301");
			Инд = Инд + 1;
		КонецЦикла;
	КонецЦикла;
	
	// Раздел 6.
	УзелНалНеПодтв0 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалНеПодтв0");
	ЗадатьЗначениеЭлемента(УзелНалНеПодтв0, "НалБазаИт", Раздел6.П000600001002);
	ЗадатьЗначениеЭлемента(УзелНалНеПодтв0, "СумНал164Ит", Раздел6.П000600001003);
	ЗадатьЗначениеЭлемента(УзелНалНеПодтв0, "НалВычНеПодИт", Раздел6.П000600001004);
	ЗадатьЗначениеЭлемента(УзелНалНеПодтв0, "НалИсчислИт", ?(ЗначениеСуммыЗаполнено(Раздел6.П000600003004), -Раздел6.П000600003004, Раздел6.П000600002004));
	Инд = 1;
	УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелНалНеПодтв0, "СумОпер6");
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел6, "П000600000101_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСумОпер = СкопироватьУзел(УзелНалНеПодтв0, УзелСумОперШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(Раздел6, УзелСумОпер, Инд, "П000600000101");
		Инд = Инд + 1;
	КонецЦикла;
	
	// Раздел 7.
	УзелОперНеНал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОперНеНал");
	ЗадатьЗначениеЭлемента(УзелОперНеНал, "ОплПостСв6Мес", Раздел7.П000700002000);
	Инд = 1;
	УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелОперНеНал, "СумОпер7");
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел7, "П000700001001_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСумОпер = СкопироватьУзел(УзелОперНеНал, УзелСумОперШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(Раздел7, УзелСумОпер, Инд);
		Инд = Инд + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" ИЛИ Узел.Формат = "S" Тогда // учтем оба варианта: кириллицу и латиницу	
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
		
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = "_" + Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			ВывестиПоказательВXML(Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ПараметрыВыгрузки);
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
    	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",		"МЧБ_2009кв4_1");
	СоответствиеРазделовМакетам.Вставить("Раздел1",			"МЧБ_2009кв4_2");
	СоответствиеРазделовМакетам.Вставить("Раздел2",			"МЧБ_2009кв4_3");
	СоответствиеРазделовМакетам.Вставить("Раздел3",			"МЧБ_2009кв4_4");
	СоответствиеРазделовМакетам.Вставить("Раздел3_Прил1",	"МЧБ_2009кв4_5");
	СоответствиеРазделовМакетам.Вставить("Раздел3_Прил2",	"МЧБ_2009кв4_6");
	СоответствиеРазделовМакетам.Вставить("Раздел4",			"МЧБ_2009кв4_7");
	СоответствиеРазделовМакетам.Вставить("Раздел5",			"МЧБ_2009кв4_8");
	СоответствиеРазделовМакетам.Вставить("Раздел6",			"МЧБ_2009кв4_9");
	СоответствиеРазделовМакетам.Вставить("Раздел7",			"МЧБ_2009кв4_10");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
		
	МакетМЧБ = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу = 5;
	МакетМЧБ.ПолеСлева = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
		
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		//определение исходного количества строк на листе МЧБ
		Если Парам1.ИмяСтраницы = "Раздел3_Прил2" Тогда
			ИсхКолвоСтрокБлока = 23;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел7" Тогда
			ИсхКолвоСтрокБлока = 21;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
			КонецЕсли;
			
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						//проверка на вхождение в данную многострочную часть
						Продолжить;
					КонецЕсли;
					
					//определение и обрасывание НомерЯчейки
					ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					//определение СмысловаяЧасть и ТекущийСчетчик
					СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					//Окончательная проверка на вхождение в данную многострочную часть
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						//очищение происходит после этого цикла
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					//Подготовка к переименованию
					//заполнение списка: значение - область, представление - будущее имя
					СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
				КонецЦикла;
				
				//Очищение
				Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				//Переименование
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);

				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					//Выводится не последний лист многострочной серии листов МЧБ
					//Необходимо обнулить итоговые показатели
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
								
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
			
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
				       		
	// особая обработка ФИО на титульном листе
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
						
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
					
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Строка(Цел(РезультатПоиска.Значение));
							СтрДообнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДообнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;		
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеВыведено
						И (ПараметрыПечати.ИмяСтраницы = "Раздел3_Прил2"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел7") Тогда
						ЗначениеВыведено = Истина;		
					КонецЕсли;
										
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
										
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);

					Сообщение.Сообщить();

				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ЗначениеЗаполнено(Область.Значение) Тогда
			Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
			ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			КонецЕсли;
		Иначе
			СтрДатаПодписи = "        ";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Если Область.Имя = "Приказ" Тогда
			Область.Значение = Значение;
		Иначе
			Область.Значение = ВРЕГ(Значение);
		КонецЕсли;
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции
      
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПолейПоУмолчанию()
	
	Если СтруктураДанныхРаздел1.Свойство("П000100002003") Тогда
		Если НЕ ЗначениеЗаполнено(СтруктураДанныхРаздел1.П000100002003) Тогда
			СтруктураДанныхРаздел1.Вставить("П000100002003", "18210301000011000110");
		КонецЕсли;
	Иначе
		СтруктураДанныхРаздел1.Вставить("П000100002003", "18210301000011000110");
	КонецЕсли;
	
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100003003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100003003", 0);
	КонецЕсли;
			
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100004003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100004003", 0);
	КонецЕсли;	
			
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100005003") Тогда		
		СтруктураДанныхРаздел1.Вставить("П000100005003", 0);
	КонецЕсли;
	
	Для Каждого СтраницаРаздела2 Из ТаблицаСтраницыРаздела2 Цикл
		
		Если СтраницаРаздела2.Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
				
		Для Каждого ПоказательСтраницыРаздела2 Из СтраницаРаздела2.Данные[0].Значение Цикл
			
			Если НЕ ПоказательСтраницыРаздела2.Ключ = "П000200005003"
			   И ЗначениеЗаполнено(ПоказательСтраницыРаздела2.Значение) Тогда
			   
			   СтраницаРаздела2.Данные[0].Значение.Вставить("П000200004003", "18210301000011000110");
			   
			   Прервать;
			   
			КонецЕсли;
		   			
		КонецЦикла;
				
	КонецЦикла;
				
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(мСтруктураЦветовРаскраски, ОбрабатываемаяОбласть)
	
	ЦветНедоступнойОбласти = мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
	Если ТипЗначенияОбласти = Тип("Число") Тогда
		ОбрабатываемаяОбласть.Значение = 0;
	ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
		ОбрабатываемаяОбласть.Значение = "";
	Иначе
		ОбрабатываемаяОбласть.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(мСтруктураЦветовРаскраски, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма)
	
	ЭтоОтчетность2012Кв1 = (НЕ Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20120101');
	Если ЭтоОтчетность2012Кв1 Тогда
		КодНалоговогоПериода = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "Период");
		ОсобыйВводПоМестуУчета = (НЕ ПустаяСтрока(КодНалоговогоПериода) И СтрНайти("25, 26, 27, 28", КодНалоговогоПериода) > 0);
		
		Если ОсобыйВводПоМестуУчета Тогда
			РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.ПоМесту);
			Если Форма.ТабличныйДокумент.Области.ПоМесту.Значение = "400" Тогда
				Форма.ТабличныйДокумент.Области.ПоМесту.Значение = "Д00";
			КонецЕсли;
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.ПоМесту);
			Форма.ТабличныйДокумент.Области.ПоМесту.Значение = "400";
		КонецЕсли;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		ОрганизацияДляЗаполнения = Форма.ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета;
		ОрганизацияДляЗаполнения.Гиперссылка = Ложь;
		ОрганизацияДляЗаполнения.Текст = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			УдалятьсяВсеДопЭкземпляры = Истина;
		Иначе
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
			УдалятьсяВсеДопЭкземпляры = Истина;
		Иначе
			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
		РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда) Экспорт
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	НачатьЗамерВремени();
	ЗаполнитьАвтоНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	НомерКорректировки = СтруктураДанныхТитульный.НомерКорректировки;
	
	СохрП000100001003 = СтруктураДанныхРаздел1.П000100001003;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций",        СтруктураРеквизитовФормы.ГруппаОрганизаций);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("ВидДокумента",             ?(НомерКорректировки = 0, 0, 1));
	ПараметрыОтчета.Вставить("НомерКорректировки",       НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",              ДатаПодписи);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки");
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Раздел1", СтруктураДанныхРаздел1);
	Контейнер.Вставить("Раздел2", ТаблицаСтраницыРаздела2);
	Контейнер.Вставить("Раздел3", СтруктураДанныхРаздел3);
	Контейнер.Вставить("Раздел3_Прил1", ТаблицаСтраницыРаздела3_Прил1);
	Контейнер.Вставить("Раздел3_Прил2", СтруктураДанныхРаздел3_Прил2);
	Контейнер.Вставить("Раздел3_Прил2_ДанныеДопСтрок", П0003200001);
	Контейнер.Вставить("Раздел4", СтруктураДанныхРаздел4);
	Контейнер.Вставить("Раздел5", ТаблицаСтраницыРаздела5);
	Контейнер.Вставить("Раздел6", СтруктураДанныхРаздел6);
	Контейнер.Вставить("Раздел7", СтруктураДанныхРаздел7);
	Контейнер.Вставить("Раздел7_ДанныеДопСтрок", П0007000010);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета, Контейнер);
	
	ПараметрыОтчета.Свойство("МакетПомощникаПоУчетуНДС", МакетПомощникаПоУчетуНДС);
	
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПараметрыОтчета.АдресВременногоХранилищаРасшифровки;
	
	ЗаполнитьЗначенияПолейПоУмолчанию();
	
	ЗаполнитьОКАТО(ЭтаФорма, СокрЛП(СохрП000100001003));
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("НомерТекущейСтраницы",  	СтруктураРеквизитовФормы.НомерТекущейСтраницы);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаСервере
Функция АдресПоказателя(СтрокаПоказателя)
	
	Результат = СтрокаПоказателя.Код;
	
	СтрокаВерхнегоУровня = СтрокаПоказателя.Родитель;
	
	Пока ЗначениеЗаполнено(СтрокаВерхнегоУровня) Цикл
		Результат = СтрокаВерхнегоУровня.Код + "\" + Результат;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.Родитель;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОКАТО(Форма, Знач ОКАТО)
	
	Если НЕ ПрименяетсяФормат503(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) И ЗначениеЗаполнено(ОКАТО) Тогда	
		ДополнятьСправа = 1;
		ОКАТО = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОКАТО, 11, "0", ДополнятьСправа);
	КонецЕсли;
	
	ПроставитьНаВсехЛистах(Форма, ОКАТО);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрименяетсяФормат503(ДатаПериода)
	
	Возврат (ДатаПериода >= '2013-10-01');
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставитьНаВсехЛистах(Форма, Знач ЗначениеПоказателя)
	
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	КонецЕсли;
	
	Форма.СтруктураДанныхРаздел1.Вставить("П000100001003", ЗначениеПоказателя);
	
	Для Каждого СтраницаРаздела Из Форма.ТаблицаСтраницыРаздела2 Цикл
			
		ДанныеСтраницы = СтраницаРаздела.Данные;
			
		Если ДанныеСтраницы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		ДанныеСтраницы[0].Значение.Вставить("П000200005003", ЗначениеПоказателя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
					 
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();		 
	
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	Если ЕстьИзмененияВариантыЗаполнения Тогда
		
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");

		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");

		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповЧисло1 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	Для Каждого ОбластьОтчета Из МакетСоставаПоказателей.Области Цикл
		
		ИмяСтраницы = ОбластьОтчета.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",            ОписаниеТиповСтрока50);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",        ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",             СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",                   СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",              ОписаниеТиповСтрока100);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
		
		Для Ном = ОбластьОтчета.Верх По ОбластьОтчета.Низ Цикл
			// Код показателя (по составу показателей) определяется по первой колонке макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать; // конечная строка
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить; // комментарий
			КонецЕсли;
			
			// Код показателя по форме отчете (имя ячейки в полях табличного документа формы).
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// Вариант заполнения ячейки определяется по колонке 6 макета.
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
				
				ЕстьИзменения = Истина;				
				
			КонецЕсли;	
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;	
				
			Иначе
				// Актуализация вариантов автозаполнения текущей страницы.
				Для Каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						ДействующийВариантАвтозаполнения = Неопределено;
						
						НайденныеСтроки = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
						
						Если НайденныеСтроки.Количество() > 0 Тогда
							ДействующийВариантАвтозаполнения = НайденныеСтроки[0];
						КонецЕсли;
												
						Если ДействующийВариантАвтозаполнения = Неопределено Тогда
							// Новый автозаполняемый показатель.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							
							ЕстьИзменения = Истина;
							
						Иначе
							// Показатель должен соответствовать эталону, кроме удовлетворяющих следующим критериям:
							// - вариант эталона не 4 (авторасчет)и не 5 (запрет ввода значения);
							// - действующий вариант допускает корректировку (варианты 1-3).
							ИспользоватьДействующийВариант = ((ДействующийВариантАвтозаполнения.ВариантЗаполнения = 1
							ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 2
							ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 3)
							И (ВариантЗаполнения <> 4) И (ВариантЗаполнения <> 4));
							Если Не ИспользоватьДействующийВариант Тогда
								ДействующийВариантАвтозаполнения.КодПоказателя     = КодПоказателя;
								ДействующийВариантАвтозаполнения.ВариантЗаполнения = ВариантЗаполнения;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					ТаблДляЦикла = ЭлементМассива.Выгрузить();
					
					Для Каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// В новой версии отчета автозаполнение показателя не предусмотрено.
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								
								ЕстьИзменения = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПРОВЕРКИ КОНТРОЛЬНЫХ СООТНОШЕНИЙ

#Область ПроцедурыИФункцииМеханизмаПроверкиКонтрольныхСоотношений

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда 
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда 
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	Иначе
		СписокРасшифровкиформулы.Очистить();
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	ПроверкаКС_1_1(СтруктураРезультата);
	ПроверкаКС_1_2(СтруктураРезультата);
	ПроверкаКС_1_3(СтруктураРезультата);
	ПроверкаКС_1_4(СтруктураРезультата);
	ПроверкаКС_1_5(СтруктураРезультата);
	ПроверкаКС_1_6(СтруктураРезультата);
	ПроверкаКС_1_7(СтруктураРезультата);
	ПроверкаКС_1_8(СтруктураРезультата);
	ПроверкаКС_1_10(СтруктураРезультата);
	ПроверкаКС_1_11(СтруктураРезультата);
	ПроверкаКС_1_12(СтруктураРезультата);
	ПроверкаКС_1_13(СтруктураРезультата);
	ПроверкаКС_1_14(СтруктураРезультата);
	ПроверкаКС_1_15(СтруктураРезультата);
	ПроверкаКС_1_16(СтруктураРезультата);
	ПроверкаКС_1_17(СтруктураРезультата);
	ПроверкаКС_1_18(СтруктураРезультата);
	ПроверкаКС_1_19(СтруктураРезультата);
	ПроверкаКС_1_20(СтруктураРезультата);
	ПроверкаКС_1_23(СтруктураРезультата);
	ПроверкаКС_1_24(СтруктураРезультата);
	ПроверкаКС_1_25(СтруктураРезультата);
	ПроверкаКС_1_26(СтруктураРезультата);
	ПроверкаКС_1_27(СтруктураРезультата);
	ПроверкаКС_1_28(СтруктураРезультата);
	ПроверкаКС_1_29(СтруктураРезультата);
	ПроверкаКС_1_30(СтруктураРезультата);
	ПроверкаКС_1_31(СтруктураРезультата);
	ПроверкаКС_2_2(СтруктураРезультата);
	ПроверкаКС_3_2(СтруктураРезультата);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор));
	КонецЕсли;
		
	Возврат СтруктураРезультата;

КонецФункции

&НаСервере
Процедура ПроверкаКС_1_1(СтруктураРезультата)

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = Новый Структура;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Если в Разделе 2, строке 070 отражены коды 1011703 или 1011711, то строка 210 по графе 3 Раздела 3 должна быть меньше или равна Раздела 2 строки 060 предыдущего отчетного периода.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = СтруктураРаздела3.П000300021003;
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 210, Графа 3";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300021003", НазваниеПоказателя,
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300021003), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3",
		Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
	ПроверятьКС = Ложь;
	
	НомерСтраницы = 1;
	
	// Проверим и зарегистрируем первую часть условия соотношения.
	Для каждого Страница Из мДанныеОтчета.Раздел2 Цикл
		
		НомерСтраницыСтр = Формат(НомерСтраницы, "ЧГ=0");
		Если (Страница.Данные[0].Значение.П000200007003 = "1011703" ИЛИ Страница.Данные[0].Значение.П000200007003 = "1011711") Тогда 
			ПроверятьКС = Истина;
			НазваниеПоказателя = "Раздел 2, Строка 070, Графа 3, страница № " + НомерСтраницыСтр + ".";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200007003",
				НазваниеПоказателя, Страница.Данные[0].Значение.П000200007003, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел2", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		КонецЕсли;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если ПроверятьКС Тогда 
		
		// Механизм ПНП
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок);
		
		Если ДокументПНП = Неопределено Тогда 
			 ПроверятьКС = Ложь;
		Иначе
			
			ПроверятьКС = Истина;
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Раздел2ПНП = Неопределено;
			СуммаР2Ст060 = 0;
			ИмяР2Ст060Гр3ПНП = "П000200006003";
			НаименованиеР2Ст060ПНП = "Сумма налога, исчисленная к уплате в бюджет за предыдущий налоговый период";
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство("Раздел2", Раздел2ПНП) Тогда 
				Для Каждого СтраницаПНП Из Раздел2ПНП Цикл 
					ЗначениеР2Ст060ПНП = СтраницаПНП.Данные[ИмяР2Ст060Гр3ПНП];
					СуммаР2Ст060 = СуммаР2Ст060 + ЗначениеР2Ст060ПНП;
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст060Гр3ПНП,
						НаименованиеР2Ст060ПНП, ЗначениеР2Ст060ПНП, "", ДокументПНП, "Раздел2",
						Неопределено, , СчетчикФормулДляРасшифровок);
				КонецЦикла;
			КонецЕсли;
			
			ПраваяЧасть = СуммаР2Ст060;
			ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
			
		КонецЕсли;
		// Механизм ПНП
		
	КонецЕсли;
	
	Если НЕ ПроверятьКС ИЛИ (ПроверятьКС И (ЛеваяЧасть <= ПраваяЧасть)) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " <= " + ПраваяЧастьСтр + ", когда строка 070 Раздела 2 равна ""1011703"" или ""1011711""";
	
	ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Не обоснованное применение вычетов сумм НДС налоговым агентом.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст. 161, 171, 172, 174'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_2(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Если в Разделе 2, строке 070 отражены коды 1011705 или 1011707, то строка 210 по графе 3 Раздела 3 должна быть равна 0.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = СтруктураРаздела3.П000300021003;
	ПраваяЧасть = 0;
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 210, Графа 3";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300021003", 
		НазваниеПоказателя, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300021003), "", 
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
	ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
	КодыОтражены = Ложь;
	
	НомерСтраницы = 1;
	
	// Проверим и зарегистрируем первую часть условия соотношения.
	Для каждого Страница Из мДанныеОтчета.Раздел2 Цикл
		
		НомерСтраницыСтр = Формат(НомерСтраницы, "ЧГ=0");
		Если (Страница.Данные[0].Значение.П000200007003 = "1011705" ИЛИ Страница.Данные[0].Значение.П000200007003 = "1011707") Тогда 
			КодыОтражены = Истина;
			НазваниеПоказателя = "Раздел 2, Строка 070, Графа 3, страница № " + НомерСтраницыСтр + ".";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200007003", НазваниеПоказателя,
				Страница.Данные[0].Значение.П000200007003, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы,
				СчетчикФормулДляРасшифровок);
		КонецЕсли;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если Не КодыОтражены Тогда // Проверяем в ПНП
		
		// Механизм ПНП
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Раздел2ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство("Раздел2", Раздел2ПНП) Тогда 
				Для Каждого СтраницаПНП Из Раздел2ПНП Цикл 
					Если (СтраницаПНП.Данные.П000200007003 = "1011705" 
						ИЛИ СтраницаПНП.Данные.П000200007003 = "1011707") Тогда
						КодыОтражены = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
	
	КонецЕсли;
	
	Если НЕ КодыОтражены ИЛИ (КодыОтражены И (ЛеваяЧасть = ПраваяЧасть)) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли КодыОтражены И (ЛеваяЧасть > ПраваяЧасть) Тогда 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр + ", когда строка 070 Раздела 2 равна ""1011705"" или ""1011707""";
	
	ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Не обоснованное применение вычетов сумм НДС налоговым агентом.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст. 161, 171, 172'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
		
	ТекстФормулы = "Проверка суммы налога к уплате в бюджет";

	НазваниеСтроки060 = "Сумма налога, исчисленная к уплате в бюджет (строка № 060)";
	НазваниеСтроки080 = "Сумма налога, исчисленная при отгрузке товаров (строка № 080)";
	НазваниеСтроки090 = "Сумма налога, исчисленная при получении оплаты (строка № 090)";
	НазваниеСтроки100 = "Сумма налога, исчисленная налоговым агентом с оплаты (строка № 100)";
		
	НомерСтраницы = 1;
	
	Для каждого Страница Из мДанныеОтчета.Раздел2 Цикл
		
		// Проверяем строку 060.
		ОписаниеКС = "Если в Разделе 2, строке 070 отражены коды 1011705 или 1011707, значение в строке 060, раздела 2, должно быть равно (строка 080 + строка 090 - строка 100)";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
			СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем левую часть соотношения.
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000200006003);
		НазваниеПоказателя = СтрЗаменить(НазваниеСтроки060, ")", ", страница № " + НомерСтраницы + ")");
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200006003",
			НазваниеПоказателя, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы, 
			СчетчикФормулДляРасшифровок);
		
		// Добавляем расшифровку для строки 080.
		ЗначениеСтроки080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000200008003);
		НазваниеПоказателя = СтрЗаменить(НазваниеСтроки080, ")", ", страница № " + НомерСтраницы + ")");
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200008003",
			НазваниеПоказателя, ЗначениеСтроки080, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		// Добавляем расшифровку для строки 090.
		ЗначениеСтроки090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000200009003);
		НазваниеПоказателя = СтрЗаменить(НазваниеСтроки090, ")", ", страница № " + НомерСтраницы + ")");
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200009003",
			НазваниеПоказателя, ЗначениеСтроки090, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		// Добавляем расшифровку для строки 100.
		ЗначениеСтроки100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000200010003);
		НазваниеПоказателя = СтрЗаменить(НазваниеСтроки100, ")", ", страница № " + НомерСтраницы + ")");
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200010003", 
			НазваниеПоказателя, ЗначениеСтроки100, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		ПраваяЧастьРезультат = ЗначениеСтроки080 + ЗначениеСтроки090 - ЗначениеСтроки100;
		ПраваяЧастьРезультатСтр = Формат(ПраваяЧастьРезультат, "ЧРД=.;ЧН=0");
		
		Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " = " + 
		+ Формат(ЗначениеСтроки080, "ЧРД=.;ЧН=0") + " + "
		+ Формат(ЗначениеСтроки090, "ЧРД=.;ЧН=0") + " - "
		+ Формат(ЗначениеСтроки100, "ЧРД=.;ЧН=0")
		+ " Итог [" + ПраваяЧастьРезультатСтр + "]" + ", когда строка 070 Раздела 2 равна ""1011705"" или ""1011707"".";
		
		Если (Страница.Данные[0].Значение.П000200007003 = "1011705" ИЛИ Страница.Данные[0].Значение.П000200007003 = "1011707") Тогда
			КодыОтражены = Истина;
		Иначе
			КодыОтражены = Ложь;
		КонецЕсли;
		
		Если НЕ КодыОтражены ИЛИ (КодыОтражены И (ЛеваяЧасть = ПраваяЧастьРезультат)) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		ИначеЕсли КодыОтражены Тогда
			Если (ЗначениеСтроки080 = 0 И ЗначениеСтроки100 = 0) И (ЛеваяЧасть = ЗначениеСтроки090) 
				ИЛИ (ЗначениеСтроки090 = 0 И ЗначениеСтроки100 = 0) И (ЛеваяЧасть = ЗначениеСтроки080) Тогда 
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижение суммы налога к уплате в бюджет.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.161, 173, 174'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_4(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	НазваниеСтроки120 = "Общая сумма НДС, исчисленная с учетом восстановленных сумм налога (строка № 120 графа 5)";
	НазваниеСтроки090 = "Суммы налога, подлежащие восстановлению (строка № 090 графа 5)";
	НазваниеСтроки220 = "Общая сумма НДС, подлежащая вычету (строка № 220 графа 3)";
	НазваниеСтроки240 = "Итого сумма НДС, исчисленная к уменьшению по данному разделу (строка № 240 графа 3)";
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Если разность строк 120 и 090 раздела 3 графы 5 равна 0, то строки 220 и 240 раздела 3 графы 3 должны равняться 0";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	ЗначениеСтроки120 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300012005);
	ЗначениеСтроки120Стр = Формат(ЗначениеСтроки120, "ЧРД=.;ЧН=0");
	ЗначениеСтроки090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300009005);
	ЗначениеСтроки090Стр = Формат(ЗначениеСтроки090, "ЧРД=.;ЧН=0");
	ЗначениеСтроки220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300022003);
	ЗначениеСтроки220Стр = Формат(ЗначениеСтроки220, "ЧРД=.;ЧН=0");
	ЗначениеСтроки240 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300024003);
	ЗначениеСтроки240Стр = Формат(ЗначениеСтроки240, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = НазваниеСтроки120;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей,"П000300012005", 
		НазваниеПоказателя, ЗначениеСтроки120, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	НазваниеПоказателя = НазваниеСтроки090;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей,"П000300009005", 
		НазваниеПоказателя, ЗначениеСтроки090, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	НазваниеПоказателя = НазваниеСтроки220;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей,"П000300022003",
		НазваниеПоказателя, ЗначениеСтроки220, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	НазваниеПоказателя = НазваниеСтроки240;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей,"П000300024003",
		НазваниеПоказателя, ЗначениеСтроки240, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПроверятьУсловие = (ЗначениеСтроки120 - ЗначениеСтроки090 = 0);
	
	Если Не ПроверятьУсловие Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли ПроверятьУсловие И НЕ (ЗначениеСтроки220 = 0 И ЗначениеСтроки240 = 0) Тогда 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЗначениеСтроки220Стр + " и " + ЗначениеСтроки240Стр + " = 0, когда"
	+ ЗначениеСтроки120Стр + "-" + ЗначениеСтроки090Стр + " Итог ["
	+ Формат(ЗначениеСтроки120 - ЗначениеСтроки090, "ЧРД=.;ЧН=0") + "] = 0";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Необоснованное применение налоговых вычетов.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст. 170, 171, 172'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "Проверка суммы налога к уплате в бюджет";
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела7 = мДанныеОтчета.ПолеТабличногоДокументаРаздел7;
	
	// Проверяем КС.
	ОписаниеКС = "Отношение: (строка 010 + строка 020 + строка 030 + строка 040) по графе 3 Раздела 3 / (строка 010 + строка 020 + строка 030 + строка 040) по графе 3 Раздела 3 + (∑ строки 010 графы 2 Раздела 7 по кодам (1010800 - 1010814)) должно быть равно (строка 130 + строка 170) по графе 3 Раздела 3 / (строка 130 + строка 170) по графе 3 Раздела 3 + (∑строк 010 графы 4 Раздела 7 по кодам (1010800 - 1010814)";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	КодыОперации = МассивКодовОпераций();
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000700001001_1");
	
	// Ищем (∑ строки 010 графы 2 Раздела 7 по кодам (1010800 - 1010814)) и, при наличии, регистрируем показатель для расшифровки
	СуммаР7Ст010Гр2 = 0;
	
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000700001002_" + НомСтрСтр;
		ИмяСтрокиКода = "П000700001001_" + НомСтрСтр;
		Если СтруктураРаздела7.Свойство(ИмяСтрокиКода) Тогда 
			Если КодыОперации.Найти(СтруктураРаздела7[ИмяСтрокиКода]) <> Неопределено Тогда
				НазваниеПоказателя = "Раздел 7, строка № " + НомСтрСтр + ", графа 2";
				РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя, СтруктураРаздела7[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел7", Неопределено, , СчетчикФормулДляРасшифровок);
				Если СтруктураРаздела7.Свойство(ИмяПоказателя) Тогда 
					СуммаР7Ст010Гр2 = СуммаР7Ст010Гр2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела7[ИмяПоказателя]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Зарегистрируем правую часть соотношения.
	НазваниеР3Ст130Гр3 = "Сумма налога, предъявленная налогоплательщику при приобретении на территории РФ товаров (строка 130 по графе 3 Раздела 3)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300013003", НазваниеПоказателя, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300013003), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	НазваниеР3Ст170Гр3 = "Сумма налога, уплаченная налогоплательщиком при ввозе товаров на таможенную территорию РФ (строка 170 по графе 3 Раздела 3)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300017003", НазваниеПоказателя, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300017003), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Ищем (строка 130 + строка 170) по графе 3 Раздела 3 / (строка 130 + строка 170) по графе 3 Раздела 3 + (∑строк 010 графы 4 Раздела 7 по кодам (1010800 - 1010814)
	//  и, при наличии, регистрируем показатель для расшифровки
	СуммаР7Ст010Гр4 = 0;
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000700001004_" + НомСтрСтр;
		ИмяСтрокиКода = "П000700001001_" + НомСтрСтр;
		Если СтруктураРаздела7.Свойство(ИмяСтрокиКода) Тогда 
			Если КодыОперации.Найти(СтруктураРаздела7[ИмяСтрокиКода]) <> Неопределено Тогда
				НазваниеПоказателя = "Раздел 7, строка № " + НомСтрСтр + ", графа 4";
				РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя, СтруктураРаздела7[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел7", Неопределено, , СчетчикФормулДляРасшифровок);
				Если СтруктураРаздела7.Свойство(ИмяПоказателя) Тогда 
					СуммаР7Ст010Гр4 = СуммаР7Ст010Гр4 + СтруктураРаздела7[ИмяПоказателя];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СуммаПоР3Левая = (СтруктураРаздела3.П000300001003 + СтруктураРаздела3.П000300002003 + СтруктураРаздела3.П000300003003 + 
		СтруктураРаздела3.П000300004003);
	
	СуммаПоР3Правая = (СтруктураРаздела3.П000300013003 + СтруктураРаздела3.П000300017003);
	
	ЛевыйЗнаменатель = СуммаПоР3Левая + СуммаР7Ст010Гр2;
	
	ПравыйЗнаменатель = СуммаПоР3Правая + СуммаР7Ст010Гр4;
	
	Если СуммаПоР3Левая = 0 ИЛИ (ЛевыйЗнаменатель = 0) Тогда 
		ЛеваяЧасть = 0;
	Иначе 
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СуммаПоР3Левая / ЛевыйЗнаменатель);
	КонецЕсли;
	
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	Если СуммаПоР3Правая = 0 ИЛИ (ПравыйЗнаменатель = 0) Тогда 
		ПраваяЧасть = 0;
	Иначе 
		ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СуммаПоР3Правая / ПравыйЗнаменатель);
	КонецЕсли;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ((ЛевыйЗнаменатель = 0 ИЛИ ПравыйЗнаменатель = 0) 
		ИЛИ (НЕ(ЛевыйЗнаменатель = 0 ИЛИ ПравыйЗнаменатель = 0)) И (ЛеваяЧасть = ПраваяЧасть)) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " Итог [" + ЛеваяЧастьСтр + "] = " + ПраваяЧастьСтр + " Итог [" + ПраваяЧастьСтр + "]";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно необоснованное применение налоговых вычетов.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.149, 170 п.4'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_6(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем .
	ОписаниеКС = "Сумма налога, подлежащая восстановлению (строка 090 графы 5 Раздела 3) должна быть больше либо равна (строка 100 графа 5 + строка 110 графа 5) Раздела 3 + ∑ значений по строке 080 графы 4 Приложения 1 к Разделу 3 по кодам 1011801, 1011802, 1011803, 1011805 (строка 030 Приложения 1 к Разделу 3), при условии, если в строке 080 графы 1 Приложения 1 к Разделу 3 указан отчетный год, соответствующий отчетному году на Титульном листе";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300009005);
	НазваниеПоказателя = "Раздел 3, строка 090, графа 5";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300009005", НазваниеПоказателя, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300010005);
	НазваниеПоказателя = "Раздел 3, строка 100, графа 5";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300010005", НазваниеПоказателя, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300010005), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ПраваяЧасть = ПраваяЧасть + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300011005);
	НазваниеПоказателя = "Раздел 3, строка 110, графа 5";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300011005", НазваниеПоказателя, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300011005), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Данные многостраничной части
	ОтчетныйГодТЛ = мДанныеОтчета.ПолеТабличногоДокументаТитульный.ОтчетГод;
	
	НомерСтраницы = 1;
	
	Для каждого Страница Из мДанныеОтчета.Раздел3_Прил1 Цикл
		
		// Считаем (∑ строки 010 графы 2 Раздела 7 по кодам (1011801 - 1011805)) и, при наличии, регистрируем показатель для расшифровки
		Если НЕ (Страница.Данные[0].Значение.П000310003000 = "1011801" ИЛИ
			Страница.Данные[0].Значение.П000310003000 = "1011802" ИЛИ
			Страница.Данные[0].Значение.П000310003000 = "1011803" ИЛИ
			Страница.Данные[0].Значение.П000310003000 = "1011805") Тогда 
			
			Продолжить;
		КонецЕсли;
		
		КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000310008001_1");
		
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ИмяПоказателя = "П000310008004_" + Формат(Инд, "ЧГ=0");
			ИмяСтрокиГода = "П000310008001_" + Формат(Инд, "ЧГ=0");
			Если Страница.Данные[0].Значение.Свойство(ИмяСтрокиГода) Тогда 
				Если Страница.Данные[0].Значение[ИмяСтрокиГода] = ОтчетныйГодТЛ Тогда
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, "Сумма НДС, подлежащая восстановлению и уплате в бюджет", Страница.Данные[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3_Прил1", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
					Если Страница.Данные[0].Значение.Свойство(ИмяПоказателя) Тогда 
						ПраваяЧасть = ПраваяЧасть + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[ИмяПоказателя]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если (ЛеваяЧасть >= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = " + ПраваяЧасть + " Итог [" + ПраваяЧасть + "]";
	
	ТекстовоеПредставлениеФормулы = ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижена сумма, подлежащая восстановлению и уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.170, 171'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_7(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем .
	ОписаниеКС = "Сумма налога, подлежащая восстановлению (строка 090 графа 5 Раздела 3) за минусом суммы налога , подлежащей восстановлению при совершении операций по ставке 0 процентов (строка 100 графа 5 Раздела 3) и суммы налога, подлежащей восстановлению пп.3 п.3 ст.170 НК РФ (строка 110 графа 3 Раздела 3) должна быть больше или равна ∑ значений по строке 080 графы 4 Приложения 1 к Разделу 3 по кодам 1011801, 1011802, 1011803, 1011805 (строка 030 Приложения 1 к Разделу 3), при условии, если в строке 080 графы 1 Приложения 1 к Разделу 3 указан отчетный год, соответствующий отчетному году на Титульном листе";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300009005);
	НазваниеПоказателя = "Раздел 3, строка 090, графа 5";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300009005", НазваниеПоказателя, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ЛеваяЧасть = ЛеваяЧасть - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300010005);
	НазваниеПоказателя = "Раздел 3, строка 100, графа 5";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300010005", НазваниеПоказателя, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300010005), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ЛеваяЧасть = ЛеваяЧасть - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300011005);
	НазваниеПоказателя = "Раздел 3, строка 110 графа 5";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300011005", НазваниеПоказателя, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300011005), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Данные многостраничной части
	
	ПраваяЧасть = 0;
	ОтчетныйГодТЛ = мДанныеОтчета.ПолеТабличногоДокументаТитульный.ОтчетГод;
	
	НомерСтраницы = 1;
	
	Для каждого Страница Из мДанныеОтчета.Раздел3_Прил1 Цикл
		
		// Считаем (∑ строки 010 графы 2 Раздела 7 по кодам (1011801 - 1011805)) и, при наличии, регистрируем показатель для расшифровки
		Если НЕ (Страница.Данные[0].Значение.П000310003000 = "1011801" ИЛИ
			Страница.Данные[0].Значение.П000310003000 = "1011802" ИЛИ
			Страница.Данные[0].Значение.П000310003000 = "1011803" ИЛИ
			Страница.Данные[0].Значение.П000310003000 = "1011805") Тогда 
			
			Продолжить;
		КонецЕсли;
		
		КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000310008001_1");
		
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ИмяПоказателя = "П000310008004_" + Формат(Инд, "ЧГ=0");
			ИмяСтрокиГода = "П000310008001_" + Формат(Инд, "ЧГ=0");
			Если Страница.Данные[0].Значение.Свойство(ИмяСтрокиГода) Тогда 
				Если Страница.Данные[0].Значение[ИмяСтрокиГода] = ОтчетныйГодТЛ Тогда
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, "Сумма НДС, подлежащая восстановлению и уплате в бюджет", Страница.Данные[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3_Прил1", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
					Если Страница.Данные[0].Значение.Свойство(ИмяПоказателя) Тогда 
						ПраваяЧасть = ПраваяЧасть + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[ИмяПоказателя]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если (ЛеваяЧасть >= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = " + ПраваяЧасть + " Итог [" + ПраваяЧасть + "]";
	
	ТекстовоеПредставлениеФормулы = ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижена сумма, подлежащая восстановлению и уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.170, 171'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_8(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Общая сумма налога (строка 120 графа 5 Раздел 3) должна быть равна итоговой сумме налога за налоговый период (∑строк 010-090 по графе 5 Раздела 3)";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 010, Графа 5";
	ЗначениеСтроки010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300001005);
	ЗначениеСтроки010Стр = Формат(ЗначениеСтроки010, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЗначениеСтроки010;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300001005", НазваниеПоказателя, ЗначениеСтроки010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 020, Графа 5";
	ЗначениеСтроки020 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300002005);
	ЗначениеСтроки020Стр = Формат(ЗначениеСтроки020, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки020;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300002005", НазваниеПоказателя, ЗначениеСтроки020, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 030, Графа 5";
	ЗначениеСтроки030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300003005);
	ЗначениеСтроки030Стр = Формат(ЗначениеСтроки030, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки030;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300003005", НазваниеПоказателя, ЗначениеСтроки030, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 040, Графа 5";
	ЗначениеСтроки040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300004005);
	ЗначениеСтроки040Стр = Формат(ЗначениеСтроки040, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки040;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300004005", НазваниеПоказателя, ЗначениеСтроки040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 050, Графа 5";
	ЗначениеСтроки050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300005005);
	ЗначениеСтроки050Стр = Формат(ЗначениеСтроки050, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки050;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300005005", НазваниеПоказателя, ЗначениеСтроки050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 060, Графа 5";
	ЗначениеСтроки060 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300006005);
	ЗначениеСтроки060Стр = Формат(ЗначениеСтроки060, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки060;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300006005", НазваниеПоказателя, ЗначениеСтроки060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 070, Графа 5";
	ЗначениеСтроки070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300007005);
	ЗначениеСтроки070Стр = Формат(ЗначениеСтроки070, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки070;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300007005", НазваниеПоказателя, ЗначениеСтроки070, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 080, Графа 5";
	ЗначениеСтроки080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300008005);
	ЗначениеСтроки080Стр = Формат(ЗначениеСтроки080, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки080;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300008005", НазваниеПоказателя, ЗначениеСтроки080, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 090, Графа 5";
	ЗначениеСтроки090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300009005);
	ЗначениеСтроки090Стр = Формат(ЗначениеСтроки090, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки090;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300009005", НазваниеПоказателя, ЗначениеСтроки090, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 120, Графа 5";
	ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300012005);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300012005", НазваниеПоказателя, ПраваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧастьСтр = Формат(Окр(ЛеваяЧасть, 2), "ЧРД=.;ЧН=0");
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЗначениеСтроки010Стр + " + " + ЗначениеСтроки020Стр + " + " + ЗначениеСтроки030Стр
	+ " + " + ЗначениеСтроки040Стр + " + " + ЗначениеСтроки050Стр + " + " + ЗначениеСтроки060Стр
	+ " + " + ЗначениеСтроки070Стр + " + " + ЗначениеСтроки080Стр + " + " + ЗначениеСтроки090Стр
	+ " Итог [" + ЛеваяЧастьСтр + "] = " + ПраваяЧастьСтр + " Итог [" + ПраваяЧастьСтр + "]";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижение суммы налога вследствие неполного отражения налоговой базы по операциям, указанным в строках 010-090.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст. 146, 154, 155, 156, 158, 159, 162'"));
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_10(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, уплаченная при ввозе товаров на таможенную территорию РФ (строка 170 графа 3 Раздела 3) должна быть равна сумме величин строки 180 графы 3 Раздела 3 и строки 190 графы 3 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 170, Графа 3";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300017003);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300017003", НазваниеПоказателя, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 180, Графа 3";
	ЗначениеСтроки180 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300018003);
	ЗначениеСтроки180Стр = Формат(ЗначениеСтроки180, "ЧРД=.;ЧН=0");
	ПраваяЧасть = ЗначениеСтроки180;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300018003", НазваниеПоказателя, ЗначениеСтроки180, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 190, Графа 3";
	ЗначениеСтроки190 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300019003);
	ЗначениеСтроки190Стр = Формат(ЗначениеСтроки190, "ЧРД=.;ЧН=0");
	ПраваяЧасть = ПраваяЧасть + ЗначениеСтроки190;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300019003", НазваниеПоказателя, ЗначениеСтроки190, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр	+ " Итог [" + ЛеваяЧастьСтр + "] = " 
	+ ЗначениеСтроки180Стр + " + " + ЗначениеСтроки190Стр + " Итог [" + ПраваяЧастьСтр + "]";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Необоснованные налоговые вычеты.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.171, 172; Межравитльственное Соглашение с Республикой Беларусь, Межправительственное Соглашение по Таможенному союзу.'"));
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_11(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, подлежащая вычету (строка 130 графа 3 Раздела 3) должна быть больше или равна величине суммы налога, предъявленной к вычету по строке 140 графа 3 Раздела 3, если строка 140 графы 3 Раздела 3 больше нуля.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 130, Графа 3";
	ЗначениеСтроки130 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300013003);
	ЗначениеСтроки130Стр = Формат(ЗначениеСтроки130, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300013003", НазваниеПоказателя, ЗначениеСтроки130, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 140, Графа 3";
	ЗначениеСтроки140 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300014003);
	ЗначениеСтроки140Стр = Формат(ЗначениеСтроки140, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300014003", НазваниеПоказателя, ЗначениеСтроки140, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Если НЕ (ЗначениеСтроки140 > 0) ИЛИ ((ЗначениеСтроки140 > 0) И (ЗначениеСтроки130 >= ЗначениеСтроки140)) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЗначениеСтроки130Стр + " >= " + ЗначениеСтроки140Стр + ", когда " + ЗначениеСтроки140Стр + " > 0";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Необоснованные налоговые вычеты.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.171, 172.'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_12(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Общая сумма НДС, подлежащая вычету (строка 220 графы 3 Раздела 3) должна быть равна сумме значений по строкам 130, 150, 160, 170, 200, 210 графы 3 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 220, Графа 3";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300022003);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300022003", НазваниеПоказателя, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 130, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300013003);
	ПраваяЧасть = ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " = " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300013003", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 150, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300015003);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300015003", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 160, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300016003);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300016003", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 170, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300017003);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300017003", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 200, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300020003);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300020003", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 210, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300021003);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300021003", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " Итог [" + ПраваяЧастьСтр + "]";
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Необоснованные налоговые вычеты'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.171, 172'"));
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_13(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Если общая сумма налога (строка 120 графа 5 Раздел 3) больше общей суммы НДС, подлежащей вычету (строка 220 графы 3 Раздела 3)," 
	+ " то итоговая сумма НДС, исчисленная к уплате в бюджет (строка 230 графа 3 Раздела 3) должна быть равна разнице между общей суммой налога (строка 120 графа 5 Раздела 3) и общей суммой НДС, подлежащей к вычету (строка 220 графа 3 Раздела 3),"
	+ " иначе итоговая сумма НДС, исчисленная к уменьшению (строка 240 графа 3 Раздела 3) равна разнице между общей суммой НДС, подлежащей вычету (строка 220 графа 3 Раздела 3) и общей суммой налога (строка 120 графы 5 Раздела 3)";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 3, Строка 120, Графа 5";
	ЗначениеСтроки120 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300012005);
	ЗначениеСтроки120Стр = Формат(ЗначениеСтроки120, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300012005", НазваниеПоказателя, ЗначениеСтроки120, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Раздел 3, Строка 220, Графа 3";
	ЗначениеСтроки220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300022003);
	ЗначениеСтроки220Стр = Формат(ЗначениеСтроки220, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300022003", НазваниеПоказателя, ЗначениеСтроки220, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем значения соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 230, Графа 3";
	ЗначениеСтроки230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300023003);
	ЗначениеСтроки230Стр = Формат(ЗначениеСтроки230, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300023003", НазваниеПоказателя, ЗначениеСтроки230, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 240, Графа 3";
	ЗначениеСтроки240 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300024003);
	ЗначениеСтроки240Стр = Формат(ЗначениеСтроки240, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300024003", НазваниеПоказателя, ЗначениеСтроки240, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Если ЗначениеСтроки120 > ЗначениеСтроки220  Тогда
		
		ЛеваяЧасть = ЗначениеСтроки230;
		ПраваяЧасть = ЗначениеСтроки120 - ЗначениеСтроки220;
		
		Если (ЛеваяЧасть = ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Если ЛеваяЧасть > ПраваяЧасть Тогда 
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		Иначе
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижение суммы налога, исчисленной к уплате в бюджет по Разделу 3'"));
			СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173'"));
		КонецЕсли;
		
	Иначе
		
		ЛеваяЧасть = ЗначениеСтроки240;
		ПраваяЧасть = ЗначениеСтроки220 - ЗначениеСтроки120;
		
		Если (ЛеваяЧасть = ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Если ЛеваяЧасть > ПраваяЧасть Тогда 
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Завышение суммы налога, подлежащей уменьшению по Разделу 3'"));
			СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173'"));
		Иначе
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Расшифровка = "Когда " + ЗначениеСтроки120 + " > " + ЗначениеСтроки220 + ", то " 
	+ ЗначениеСтроки230 + " = " + ЗначениеСтроки120 + " - " + ЗначениеСтроки220 + ", иначе "
	+ ЗначениеСтроки240 + " = " + ЗначениеСтроки220 + " - " + ЗначениеСтроки120;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_14(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, подлежащая вычету по строке 200 графы 3 Раздела 3 должна быть меньше или равна сумме величин по строкам 010, 020, 030, 040 графы 5 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 200, Графа 3";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300020003);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300020003", НазваниеПоказателя, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 010, Графа 5";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300001005);
	ПраваяЧасть = ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + "  <= " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300001005", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 020, Графа 5";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300002005);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300002005", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 030, Графа 5";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300003005);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300003005", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 040, Графа 5";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300004005);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300004005", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " Итог [" + ПраваяЧастьСтр + "]";
	
	Если (ЛеваяЧасть <= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Налоговые вычеты не обоснованны, либо налоговая база занижена, так как суммы отработанных авансов не включены в реализацию.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.171, п.8, НК РФ ст.172, п.6, 172, либо НК РФ ст.146, п.1'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_15(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма НДС по выполненным строительно-монтажным работам для собственного потребления (строка 060 графа 5 Раздел 3) должна быть больше либо равна сумме налога, подлежащей вычету по строке 160 графы 3 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 060, Графа 5";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300006005);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300006005", НазваниеПоказателя, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 160, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300016003);
	ПраваяЧасть = ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " >= " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300016003", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
	Если (ЛеваяЧасть >= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Необоснованное применение налоговых вычетов при выполнении СМР для собственного потребления.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.171, п.6, ст.172, п.5'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_16(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела3_Прил2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3_Прил2;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма исчисленного налога по графе 2 Приложения 2 к Разделу 3 должна быть меньше или равна общей суммы НДС (строка 120 графа 5 Раздела 3)";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000320000102_1");
	
	// Ищем сумму строк графы 3 Раздела 2 и регистрируем показатель для расшифровки
	ЛеваяЧасть = 0;
	
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000320000102_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 3, приложение 2, строка № " + НомСтрСтр + ", графа 2";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя, СтруктураРаздела3_Прил2[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3_Прил2", Неопределено, , СчетчикФормулДляРасшифровок);
		ЛеваяЧасть = ЛеваяЧасть + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3_Прил2[ИмяПоказателя]);
	КонецЦикла;
	
	Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 120, Графа 5";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300012005);
	ПраваяЧасть = ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " <= " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300012005", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Если (ЛеваяЧасть <= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижение суммы налога вследствие неполного отражения налоговой базы.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст. 153, 154'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела3_Прил2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3_Прил2;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налоговых вычетов по графе 3 Приложения 2 к Разделу 3 должна быть меньше или равна общей суммы НДС, подлежащей вычету.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000320000102_1");

	
	// Зарегистрируем левую часть соотношения.
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000320000103_1");
	
	// Ищем сумму строк графы 3 Раздела 2 и регистрируем показатель для расшифровки
	ЛеваяЧасть = 0;
	
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000320000103_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 3, приложение 2, строка № " + НомСтрСтр + ", графа 3";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя, СтруктураРаздела3_Прил2[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3_Прил2", Неопределено, , СчетчикФормулДляРасшифровок);
		ЛеваяЧасть = ЛеваяЧасть + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3_Прил2[ИмяПоказателя]);
	КонецЦикла;
	
	Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 220, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300022003);
	ПраваяЧасть = ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " <= " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300022003", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
	Если (ЛеваяЧасть <= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижение суммы налога подлежащей вычету.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.170, 171'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_18(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела4 = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога по строке 010 Раздела 4 должна быть равна сумме величин, указанных в графе 3 и графе 4 Раздела 4 за минусом суммы величин по графе 5 Раздела 4";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 4, Строка 010";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела4.П000400001000);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000400001000", НазваниеПоказателя, ЛеваяЧастьСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	// Ищем сумму строк графы 3 Раздела 4 и регистрируем показатель для расшифровки
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000400000103_1");
	СуммаР4Гр3 = 0;
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000400000103_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 4, строка № " + НомСтрСтр + ", графа 3";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя, СтруктураРаздела4[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
		СуммаР4Гр3 = СуммаР4Гр3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела4[ИмяПоказателя]);
	КонецЦикла;
	
	// Ищем сумму строк графы 4 Раздела 4 и регистрируем показатель для расшифровки
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000400000104_1");
	СуммаР4Гр4 = 0;
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000400000104_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 4, строка № " + НомСтрСтр + ", графа 4";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя, СтруктураРаздела4[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
		СуммаР4Гр4 = СуммаР4Гр4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела4[ИмяПоказателя]);
	КонецЦикла;
	
	// Ищем сумму строк графы 5 Раздела 4 и регистрируем показатель для расшифровки
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000400000105_1");
	СуммаР4Гр5 = 0;
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000400000105_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 4, строка № " + НомСтрСтр + ", графа 5";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя, СтруктураРаздела4[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
		СуммаР4Гр5 = СуммаР4Гр5 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела4[ИмяПоказателя]);
	КонецЦикла;
	
	ПраваяЧасть = СуммаР4Гр3 + СуммаР4Гр4 - СуммаР4Гр5;
	
	Расшифровка = Расшифровка + " = " + Формат(СуммаР4Гр3, "ЧРД=.;ЧН=0") + " + " + Формат(СуммаР4Гр4, "ЧРД=.;ЧН=0") 
	+ " - " + Формат(СуммаР4Гр5, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ПраваяЧасть, "ЧРД=.;ЧН=0") + "]";
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Завышение суммы НДС, подлежащей вычету.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.171, 172.'"));
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_19(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "Проверка суммы налога к уплате в бюджет";
	
	НомерСтраницы = 1;
	
	Для каждого Страница Из мДанныеОтчета.Раздел5 Цикл
				
		// Проверяем.
		ОписаниеКС = "Сумма налога по строке 010 графа 3 Раздела 5 должна быть равна сумме величин по графе 3 Раздела 5";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
		// Зарегистрируем левую часть соотношения.
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000500001003);
		НазваниеПоказателя = "Раздел 5, Строка 010, Графа 3)";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500001003", НазваниеПоказателя, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		// Добавляем расшифровку для строк правой части.
		КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000500000303_1");
		ПраваяЧасть = 0;
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ИмяПоказателя = "П000500000303_" + Формат(Инд, "ЧГ=0");
			НазваниеПоказателя = "Раздел 5, Строка № " + Формат(Инд, "ЧГ=0") + ", Графа 3";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя,
				НазваниеПоказателя, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение[ИмяПоказателя]), "", 
				СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы,
				СчетчикФормулДляРасшифровок);
			Если Страница.Данные[0].Значение.Свойство(ИмяПоказателя) Тогда 
				ПраваяЧасть = ПраваяЧасть + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение[ИмяПоказателя]);
			КонецЕсли;
		КонецЦикла;
		
		Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = "
		+ Формат(ПраваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ПраваяЧасть, "ЧРД=.;ЧН=0") + "]";
		
		Если (ЛеваяЧасть = ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
		Если (ЛеваяЧасть >= ПраваяЧасть) Тогда
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Завышение суммы НДС, подлежащей вычету.'"));
			СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.171, 172'"));
		ИначеЕсли (ЛеваяЧасть < ПраваяЧасть) Тогда
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		КонецЕсли;
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_20(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "Проверка суммы налога к уплате в бюджет";
	
	НомерСтраницы = 1;
	
	Для каждого Страница Из мДанныеОтчета.Раздел5 Цикл
		
		// Проверяем.
		ОписаниеКС = "Сумма налога по строке 010 графа 5 Раздела 5 должна быть равна сумме величин по графе 5 Раздела 5";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
			СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем левую часть соотношения.
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000500001005);
		НазваниеПоказателя = "Раздел 5, Строка 010, Графа 5";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500001005", НазваниеПоказателя, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		// Добавляем расшифровку для строк правой части.
		КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000500000305_1");
		ПраваяЧасть = 0;
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ИмяПоказателя = "П000500000305_" + Формат(Инд, "ЧГ=0");
			НазваниеПоказателя = "Раздел 5, Строка № " + Формат(Инд, "ЧГ=0") + ", Графа 5";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя,
				НазваниеПоказателя, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.Свойство(ИмяПоказателя)), "",
				СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы,
				СчетчикФормулДляРасшифровок);
			Если Страница.Данные[0].Значение.Свойство(ИмяПоказателя) Тогда 
				ПраваяЧасть = ПраваяЧасть + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение[ИмяПоказателя]);
			КонецЕсли;
		КонецЦикла;
		
		Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + "] = "
		+ Формат(ПраваяЧасть, "ЧРД=.;ЧН=0") + " Итог [" + Формат(ПраваяЧасть, "ЧРД=.;ЧН=0") + "]";
		
		Если (ЛеваяЧасть = ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
		Если (ЛеваяЧасть >= ПраваяЧасть) Тогда
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Завышение суммы НДС, подлежащей вычету.'"));
			СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.171, 172'"));
		ИначеЕсли (ЛеваяЧасть < ПраваяЧасть) Тогда
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		КонецЕсли;
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога по строке 010 графы 2 Раздела 6 должна быть равна сумме величин графы 2 Раздела 6.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 6, Строка 010, Графа 2";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6.П000600001002);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600001002", НазваниеПоказателя, ЛеваяЧастьСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	// Ищем сумму строк графы 2 Раздела 6 и регистрируем показатель для расшифровки
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000600000102_1");
	ПраваяЧасть = 0;
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000600000102_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 6, строка № " + НомСтрСтр + ", графа 2";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя, СтруктураРаздела6[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
		ПраваяЧасть = ПраваяЧасть + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6[ИмяПоказателя]);
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Расшифровка = Расшифровка + " = " + ПраваяЧастьСтр;
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижение НБ по НДС вследствие неполного отражения указанных гр.2 операций'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.153, 164, 165, 167.'"));
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_24(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	КодыСтрокМногострочнойЧасти = Новый Соответствие;
	КодыСтрокМногострочнойЧасти.Вставить("1", "1010401");
	КодыСтрокМногострочнойЧасти.Вставить("3", "1010403");
	КодыСтрокМногострочнойЧасти.Вставить("5", "1010405");
	КодыСтрокМногострочнойЧасти.Вставить("6", "1010407");
	КодыСтрокМногострочнойЧасти.Вставить("7", "1010408");
	КодыСтрокМногострочнойЧасти.Вставить("8", "1010409");
	КодыСтрокМногострочнойЧасти.Вставить("9", "1010411");
	КодыСтрокМногострочнойЧасти.Вставить("10", "1010412");
	КодыСтрокМногострочнойЧасти.Вставить("12", "1010414");
	КодыСтрокМногострочнойЧасти.Вставить("13", "1010415");
	КодыСтрокМногострочнойЧасти.Вставить("14", "1010416");
	КодыСтрокМногострочнойЧасти.Вставить("15", "1010417");
	КодыСтрокМногострочнойЧасти.Вставить("17", "1010419");
	
	Для Каждого Элемент Из КодыСтрокМногострочнойЧасти Цикл
		
		НомерСтроки = Элемент.Ключ;
		КодСтроки = Элемент.Значение;
		// Проверяем КС.
		ОписаниеКС = "Суммы НДС графы 3 Раздела 6 по коду операции " + КодСтроки + " должны быть равны 18% от налоговой базы в графе 2 Раздела 6 по соответствующим кодам.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
			СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателяЛев = "Раздел 6, строка № " + НомерСтроки + ", Графа 2";
		ИмяПоказателяЛев = "П000600000102_" + НомерСтроки;
		ЗначениеПоказателяЛев = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6[ИмяПоказателяЛев]);
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателяЛев * 18 / 100);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		Расшифровка = Формат(ЗначениеПоказателяЛев, "ЧРД=.;ЧН=0") + " * 18 / 100 Итог [" + ЛеваяЧастьСтр + "]";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛев, НазваниеПоказателяЛев, ЗначениеПоказателяЛев, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяПоказателяПрав = "П000600000103_" + НомерСтроки;
		НазваниеПоказателяПрав = "Раздел 6, строка № " + НомерСтроки + ", графа 3";
		ЗначениеПоказателяПрав = СтруктураРаздела6[ИмяПоказателяПрав];
		ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателяПрав);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяПрав, НазваниеПоказателяПрав, ЗначениеПоказателяПрав, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
		
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Расшифровка = Расшифровка + " = " + ПраваяЧастьСтр;
		
		Если (ЛеваяЧасть = ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
		Если ЛеваяЧасть > ПраваяЧасть Тогда 
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижение НБ по НДС вследствие неполного отражения указанных в гр.2 операций'"));
			СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.153, 164, 165, 167.'"));
		Иначе
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		КонецЕсли;
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_25(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	КодыСтрокМногострочнойЧасти = Новый Соответствие;
	КодыСтрокМногострочнойЧасти.Вставить("2", "1010402");
	КодыСтрокМногострочнойЧасти.Вставить("4", "1010404");
	КодыСтрокМногострочнойЧасти.Вставить("11", "1010413");
	КодыСтрокМногострочнойЧасти.Вставить("16", "1010418");
	
	Для Каждого Элемент Из КодыСтрокМногострочнойЧасти Цикл
		
		НомерСтроки = Элемент.Ключ;
		КодСтроки = Элемент.Значение;
		// Проверяем КС.
		ОписаниеКС = "Суммы НДС графы 3 Раздела 6 по коду операции " + КодСтроки + " должны быть равны 10% от налоговой базы в графе 2 Раздела 6 по соответствующим кодам.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
			СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателяЛев = "Раздел 6, строка № " + НомерСтроки + ", Графа 2";
		ИмяПоказателяЛев = "П000600000102_" + НомерСтроки;
		ЗначениеПоказателяЛев = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6[ИмяПоказателяЛев]);
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателяЛев * 10 / 100);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		Расшифровка = Формат(ЗначениеПоказателяЛев, "ЧРД=.;ЧН=0") + " * 10 / 100 Итог [" + ЛеваяЧастьСтр + "]";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛев, НазваниеПоказателяЛев, ЗначениеПоказателяЛев, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяПоказателяПрав = "П000600000103_" + НомерСтроки;
		НазваниеПоказателяПрав = "Раздел 6, строка № " + НомерСтроки + ", графа 3";
		ЗначениеПоказателяПрав = СтруктураРаздела6[ИмяПоказателяПрав];
		ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателяПрав);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяПрав, НазваниеПоказателяПрав, ЗначениеПоказателяПрав, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
		
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Расшифровка = Расшифровка + " = " + ПраваяЧастьСтр;
		
		Если (ЛеваяЧасть = ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
		Если ЛеваяЧасть > ПраваяЧасть Тогда 
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижена исчисленная сумма НДС вследствие неполного отражения налоговой базы, либо неверное применение ставки по НДС.'"));
			СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.153,164, 165, 167.'"));
		Иначе
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		КонецЕсли;
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_26(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	// Проверяем КС.
	ОписаниеКС = "Итоговая сумма НДС по строке 010 графы 3 Раздела 6 должна быть равна сумме величин графы 3 Раздела 6.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 6, Строка 010, Графа 3";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6.П000600001003);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600001003", НазваниеПоказателя, ЛеваяЧастьСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	// Ищем сумму строк графы 3 Раздела 6 и регистрируем показатель для расшифровки
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000600000103_1");
	ПраваяЧасть = 0;
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000600000103_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 6, строка № " + НомСтрСтр + ", графа 3";
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6[ИмяПоказателя]);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
		ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Расшифровка = Расшифровка + " = " + ПраваяЧастьСтр;
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижена исчисленная сумма НДС вследствие неполного отражения налоговой базы, либо неверное применение ставки по НДС.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.153, 164, 165, 167.'"));
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_27(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	// Проверяем КС.
	ОписаниеКС = "Итоговая сумма налоговых вычетов по строке 010 графы 4 Раздела 6 должна быть равна сумме величин графы 4 Раздела 6.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 6, Строка 010, Графа 4";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6.П000600001004);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600001004",
		НазваниеПоказателя, ЛеваяЧастьСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, ,
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	// Ищем сумму строк графы 3 Раздела 6 и регистрируем показатель для расшифровки
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000600000104_1");
	ПраваяЧасть = 0;
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000600000104_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 6, строка № " + НомСтрСтр + ", графа 4";
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6[ИмяПоказателя]);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя,
			НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено,
			, СчетчикФормулДляРасшифровок);
		ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Расшифровка = Расшифровка + " = " + ПраваяЧастьСтр;
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Завышена сумма НДС, подлежащая вычету.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.171, 172.'"));
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_28(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	// Проверяем КС.
	ОписаниеКС = "Итоговая сумма налога, исчисленная к уплате в бюджет по Разделу 6 (строка 020 Раздела 6) должна быть равна разнице между итоговой суммой исчисленного НДС (строка 010 графы 3 Раздела 6) и итоговой суммой налоговых вычетов (строка 010 графы 4 раздела 6), при условии, если величина по строке 010 графы 3 Раздела 6 больше величины по строке 010 графы 4 Раздела 6";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 6, Строка 010, Графа 3";
	ЗначениеСтроки010Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000600001003);
	ЗначениеСтроки010Гр3Стр = Формат(ЗначениеСтроки010Гр3, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600001003", НазваниеПоказателя, ЗначениеСтроки010Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Раздел 6, Строка 010, Графа 4";
	ЗначениеСтроки010Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000600001004);
	ЗначениеСтроки010Гр4Стр = Формат(ЗначениеСтроки010Гр4, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600001004", НазваниеПоказателя, ЗначениеСтроки010Гр4, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем значения соотношения.
	НазваниеПоказателя = "Раздел 6, Строка 020, Графа 4";
	ЗначениеСтроки020 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000600002004);
	ЗначениеСтроки020Стр = Формат(ЗначениеСтроки020, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600002004", НазваниеПоказателя, ЗначениеСтроки020, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = ЗначениеСтроки020;
	ПраваяЧасть = ЗначениеСтроки010Гр3 - ЗначениеСтроки010Гр4;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если НЕ (ЗначениеСтроки010Гр3 > ЗначениеСтроки010Гр4) 
		ИЛИ ((ЗначениеСтроки010Гр3 > ЗначениеСтроки010Гр4) И (ЛеваяЧасть = ПраваяЧасть)) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижена сумма НДС, подлежащая уплате в бюджет по Разделу 6'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173.'"));
	КонецЕсли;
	
	Расшифровка = ЗначениеСтроки020Стр + " = " + ЗначениеСтроки010Гр3Стр + " - " + ЗначениеСтроки010Гр4Стр
	+ " Итог [" + ПраваяЧастьСтр + "], когда " + ЗначениеСтроки010Гр3Стр + " > " + ЗначениеСтроки010Гр4Стр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_29(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	// Проверяем КС.
	ОписаниеКС = "Итоговая сумма налога, исчисленная к уменьшению по Разделу 6 (строка 030 Раздела 6) должна быть равна разнице между итоговой суммой налоговых вычетов (строка 010 графы 4 Раздела 6) и итоговой суммой исчисленного НДС (строка 010 графы 3 раздела 6), при условии, если величина по строке 010 графы 3 Раздела 6 меньше величины по строке 010 графы 4 Раздела 6";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 6, Строка 010, Графа 3";
	ЗначениеСтроки010Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000600001003);
	ЗначениеСтроки010Гр3Стр = Формат(ЗначениеСтроки010Гр3, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600001003", НазваниеПоказателя, ЗначениеСтроки010Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Раздел 6, Строка 010, Графа 4";
	ЗначениеСтроки010Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000600001004);
	ЗначениеСтроки010Гр4Стр = Формат(ЗначениеСтроки010Гр4, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600001004", НазваниеПоказателя, ЗначениеСтроки010Гр4, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем значения соотношения.
	НазваниеПоказателя = "Раздел 6, Строка 030, Графа 4";
	ЗначениеСтроки030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000600003004);
	ЗначениеСтроки030Стр = Формат(ЗначениеСтроки030, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600003004", НазваниеПоказателя, ЗначениеСтроки030, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = ЗначениеСтроки030;
	ПраваяЧасть = ЗначениеСтроки010Гр4 - ЗначениеСтроки010Гр3;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если НЕ (ЗначениеСтроки010Гр3 < ЗначениеСтроки010Гр4) 
		ИЛИ ((ЗначениеСтроки010Гр3 < ЗначениеСтроки010Гр4) И (ЛеваяЧасть = ПраваяЧасть)) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Завышена сумма НДС, подлежащая возмещению по Разделу 6'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173.'"));
	КонецЕсли;
	
	Расшифровка = ЗначениеСтроки030Стр + " = " + ЗначениеСтроки010Гр4Стр + " - " + ЗначениеСтроки010Гр3Стр
	+ " Итог [" + ПраваяЧастьСтр + "], когда " + ЗначениеСтроки010Гр3Стр + " < " + ЗначениеСтроки010Гр4Стр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_30(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела4 = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	// Проверяем КС.
	ОписаниеКС = "Если сумма величин исчисленного налога к уплате в бюджет в строке 230 Раздела 3 и в строке 020 Раздела 6 больше либо равна сумме величин налоговых вычетов строки 240 Раздела 3, строки 010 Раздела 4, строки 010 графы 3 Раздела 5, строки 010 графы 5 Раздела 5, строки 030 Раздела 6"
	+ ", то Сумма налога, исчисленная к уплате в бюджет (строка 040 Раздел 1) должна быть равна разнице суммы строк 230 Раздела 3, 020 Раздела 6 и суммы строк 240 Раздела 3, 010 Раздела 4, 010 раздела 5 (графы 3), 010 Раздела 5 (графы 5), 030 Раздела 6 ";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 3, Строка 230, Графа 3";
	ЗначениеР3Стр230Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300023003);
	ЗначениеР3Стр230Гр3Стр = Формат(ЗначениеР3Стр230Гр3, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300023003", НазваниеПоказателя, ЗначениеР3Стр230Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 6, Строка 020, Графа 4";
	ЗначениеР6Стр020Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6.П000600002004);
	ЗначениеР6Стр020Гр4Стр = Формат(ЗначениеР6Стр020Гр4, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600002004", НазваниеПоказателя, ЗначениеР6Стр020Гр4, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Раздел 3, Строка 240, Графа 3";
	ЗначениеР3Стр240Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300024003);
	ЗначениеР3Стр240Гр3Стр = Формат(ЗначениеР3Стр240Гр3, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300024003", НазваниеПоказателя, ЗначениеР3Стр240Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 4, Строка 010";
	ЗначениеР4Стр010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела4.П000400001000);
	ЗначениеР4Стр010Стр = Формат(ЗначениеР4Стр010, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000400001000", НазваниеПоказателя, ЗначениеР4Стр010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
	
	СуммаР5Стр010Гр3 = 0;
	СуммаР5Стр010Гр5 = 0;
	
	НомерСтраницы = 1;
	
	Для каждого Страница Из мДанныеОтчета.Раздел5 Цикл
		
		НомерСтраницыСтр = Формат(НомерСтраницы, "ЧГ=0");
		
		НазваниеПоказателя = "Раздел 5, Строка 010, Графа 3, страница № " + НомерСтраницыСтр + ".";
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000500001003);
		СуммаР5Стр010Гр3 = СуммаР5Стр010Гр3 + ЗначениеПоказателя;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500001003", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		НазваниеПоказателя = "Раздел 5, Строка 010, Графа 5, страница № " + НомерСтраницыСтр + ".";
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000500001005);
		СуммаР5Стр010Гр5 = СуммаР5Стр010Гр5 + ЗначениеПоказателя;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500001005", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	ЗначениеР6Стр030Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6.П000600003004);
	ЗначениеР6Стр030Гр4Стр = Формат(ЗначениеР6Стр030Гр4, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем значения соотношения.
	ЗначениеР1Стр040Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ?(СтруктураРаздела1.Свойство("П000100004003"), СтруктураРаздела1.П000100004003, 0));
	ЗначениеР1Стр040Гр3Стр = Формат(ЗначениеР1Стр040Гр3, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЗначениеР1Стр040Гр3;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ЛеваяЧастьУсловия = ЗначениеР3Стр230Гр3 + ЗначениеР6Стр020Гр4;
	ЛеваяЧастьУсловияСтр = Формат(ЛеваяЧастьУсловия, "ЧРД=.;ЧН=0");
	ПраваяЧастьУсловия = ЗначениеР3Стр240Гр3 + ЗначениеР4Стр010 + СуммаР5Стр010Гр3 + СуммаР5Стр010Гр5 + ЗначениеР6Стр030Гр4;
	ПраваяЧастьУсловияСтр = Формат(ПраваяЧастьУсловия, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = ЛеваяЧастьУсловия - ПраваяЧастьУсловия;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если НЕ (ЛеваяЧастьУсловия >= ПраваяЧастьУсловия) 
		ИЛИ ((ЛеваяЧастьУсловия >= ПраваяЧастьУсловия) И (ЛеваяЧасть = ПраваяЧасть)) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижена сумма НДС, подлежащая уплате в бюджет за отчетный период.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173.'"));
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЛеваяЧастьУсловияСтр + " - " + ПраваяЧастьУсловияСтр + " Итог [" + ПраваяЧастьСтр + "]"
	", когда " + ЛеваяЧастьУсловияСтр + " >= " + ПраваяЧастьУсловияСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_31(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела4 = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	// Проверяем КС.
	ОписаниеКС = "Если сумма величин исчисленного налога к уплате в бюджет в строке 230 Раздела 3 и в строке 020 Раздела 6 меньше суммы величин налоговых вычетов строки 240 Раздела 3, строки 010 Раздела 4, строки 010 графы 3 Раздела 5, строки 010 графы 5 Раздела 5, строки 030 Раздела 6"
	+ ", то сумма налога, исчисленная к возмещению из бюджета (строка 050 Раздел 1) должна быть равна разнице суммы строк 240 Раздела 3, 010 Раздела 4, 010 графа 3 Раздела 5, строка 010 графа 5 Раздела 5, 030 Раздела 6 и суммы строк 230 Раздела 3, 020 Раздела 6";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 3, Строка 230, Графа 3";
	ЗначениеР3Стр230Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300023003);
	ЗначениеР3Стр230Гр3Стр = Формат(ЗначениеР3Стр230Гр3, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300023003", НазваниеПоказателя, ЗначениеР3Стр230Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 6, Строка 020, Графа 4";
	ЗначениеР6Стр020Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6.П000600002004);
	ЗначениеР6Стр020Гр4Стр = Формат(ЗначениеР6Стр020Гр4, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600002004", НазваниеПоказателя, ЗначениеР6Стр020Гр4, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Раздел 3, Строка 240, Графа 3";
	ЗначениеР3Стр240Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300024003);
	ЗначениеР3Стр240Гр3Стр = Формат(ЗначениеР3Стр240Гр3, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300024003", НазваниеПоказателя, ЗначениеР3Стр240Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 4, Строка 010";
	ЗначениеР4Стр010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела4.П000400001000);
	ЗначениеР4Стр010Стр = Формат(ЗначениеР4Стр010, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000400001000", НазваниеПоказателя, ЗначениеР4Стр010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
	
	СуммаР5Стр010Гр3 = 0;
	СуммаР5Стр010Гр5 = 0;
	
	НомерСтраницы = 1;
	
	Для каждого Страница Из мДанныеОтчета.Раздел5 Цикл
		
		НомерСтраницыСтр = Формат(НомерСтраницы, "ЧГ=0");
		
		НазваниеПоказателя = "Раздел 5, Строка 010, Графа 3, страница № " + НомерСтраницыСтр + ".";
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000500001003);
		СуммаР5Стр010Гр3 = СуммаР5Стр010Гр3 + ЗначениеПоказателя;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500001003", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		НазваниеПоказателя = "Раздел 5, Строка 010, Графа 5, страница № " + НомерСтраницыСтр + ".";
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000500001005);
		СуммаР5Стр010Гр5 = СуммаР5Стр010Гр5 + ЗначениеПоказателя;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500001005", НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	НазваниеПоказателя = "Раздел 6, Строка 030, Графа 4";
	ЗначениеР6Стр030Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6.П000600003004);
	ЗначениеР6Стр030Гр4Стр = Формат(ЗначениеР6Стр030Гр4, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600003004", НазваниеПоказателя, ЗначениеР6Стр030Гр4, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем значения соотношения.
	НазваниеПоказателя = "Раздел 1, Строка 050, Графа 3";
	ЗначениеР1Стр050Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ?(СтруктураРаздела1.Свойство("П000100005003"), СтруктураРаздела1.П000100005003, 0));
	ЗначениеР1Стр050Гр3Стр = Формат(ЗначениеР1Стр050Гр3, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000100005003", НазваниеПоказателя, ЗначениеР1Стр050Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	ЛеваяЧасть = ЗначениеР1Стр050Гр3;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ЛеваяЧастьУсловия = ЗначениеР3Стр230Гр3 + ЗначениеР6Стр020Гр4;
	ЛеваяЧастьУсловияСтр = Формат(ЛеваяЧастьУсловия, "ЧРД=.;ЧН=0");
	ПраваяЧастьУсловия = ЗначениеР3Стр240Гр3 + ЗначениеР4Стр010 + СуммаР5Стр010Гр3 + СуммаР5Стр010Гр5 + ЗначениеР6Стр030Гр4;
	ПраваяЧастьУсловияСтр = Формат(ПраваяЧастьУсловия, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = ПраваяЧастьУсловия - ЛеваяЧастьУсловия;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если НЕ (ЛеваяЧастьУсловия < ПраваяЧастьУсловия) 
		ИЛИ ((ЛеваяЧастьУсловия < ПраваяЧастьУсловия) И (ЛеваяЧасть = ПраваяЧасть)) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижена сумма НДС, подлежащая уплате в бюджет за отчетный период.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173.'"));
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьУсловияСтр + " - " + ЛеваяЧастьУсловияСтр + " Итог [" + ПраваяЧастьСтр + "]"
	+ ", когда " + ЛеваяЧастьУсловияСтр + " < " + ПраваяЧастьУсловияСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_2(СтруктураРезультата)
	
	//Для отчета за квартал
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность = Перечисления.Периодичность.Квартал Тогда 
		Возврат;
	КонецЕсли;
	
	ДокументМДКС = РегламентированнаяОтчетность.ПолучитьДокументМДКС(СтруктураРеквизитовФормы.мСохраненныйДок, "РегламентированныйОтчетБухОтчетность");
	Если ДокументМДКС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	// Проверяем КС.
	ОписаниеКС = "Показатель выручки (без НДС и акцизов), отражаемый в Отчете о финансовых результатах, должен быть меньше или равен разности между налоговой базой по всем ставкам НДС (сумма значений графы 3 строк 010, 020, 030, 040 и 050 разд. 3 декларации) и суммой НДС по расчетным ставкам (сумма значений графы 5 строк 030, 040 и 050), которые рассчитаны нарастающим итогом за квартал, полугодие, девять месяцев и год.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	// Междокументные КС
	
	ДанныеОФР = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументМДКС);
	ИмяРаздела = "ФормаОтчета";
	Имя2110 = "П000100211004";
	Наименование2110 = "Выручка";
	Раздел = Неопределено;
	Если ДанныеОФР.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Раздел) Тогда 
		Значение2110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Раздел[Имя2110]);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, Имя2110,
			Наименование2110, Значение2110, "", ДокументМДКС, ИмяРаздела, Неопределено, , СчетчикФормулДляРасшифровок);
	КонецЕсли;
	ЛеваяЧасть = Значение2110;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть соотношения.
	ПраваяЧасть = 0;
	// Предыдущие периоды, для дНДС квартал
	ТекущийКвартал = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)/3;
	Квартал = ТекущийКвартал;
	Пока Квартал > 0 Цикл
		Если Квартал = ТекущийКвартал Тогда 
			//Данные за текущий период
			СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
			СохраненныйДокумент = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
			Расшифровка = "";
		Иначе
			// Механизм ПНП
			ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, Квартал);
			Если ДокументПНП <> Неопределено Тогда 
				ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
				СтруктураРаздела3 = Неопределено;
				СохраненныйДокумент = ДокументПНП;
				Расшифровка = Расшифровка + " + ";
				Если НЕ ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство("Раздел3", СтруктураРаздела3) Тогда
					Квартал = Квартал - 1;
					Продолжить;
				КонецЕсли;
			Иначе
				Квартал = Квартал - 1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ОкончаниеНазвания = "(" + Квартал + " квартал)";
		
		НазваниеПоказателя = "Раздел 3, Строка 010, Графа 3" + ОкончаниеНазвания;
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300001003);
		ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
		ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
		Расшифровка = Расшифровка + "(" + ЗначениеПоказателяСтр;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300001003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СохраненныйДокумент, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		НазваниеПоказателя = "Раздел 3, Строка 020, Графа 3" + ОкончаниеНазвания;
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300002003);
		ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
		ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
		Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300002003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СохраненныйДокумент, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		НазваниеПоказателя = "Раздел 3, Строка 030, Графа 3" + ОкончаниеНазвания;
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300003003);
		ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
		ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
		Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300003003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СохраненныйДокумент, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		НазваниеПоказателя = "Раздел 3, Строка 040, Графа 3" + ОкончаниеНазвания;
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300004003);
		ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
		ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
		Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300004003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СохраненныйДокумент, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		НазваниеПоказателя = "Раздел 3, Строка 050, Графа 3" + ОкончаниеНазвания;
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300005003);
		ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
		ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
		Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр + ")";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300005003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СохраненныйДокумент, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		НазваниеПоказателя = "Раздел 3, Строка 030, Графа 5" + ОкончаниеНазвания;
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300003005);
		ПраваяЧасть = ПраваяЧасть - ЗначениеПоказателя;
		ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
		Расшифровка = Расшифровка + " - (" + ЗначениеПоказателяСтр;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300003005", НазваниеПоказателя,
		ЗначениеПоказателя, "", СохраненныйДокумент, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		НазваниеПоказателя = "Раздел 3, Строка 040, Графа 5" + ОкончаниеНазвания;
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300004005);
		ПраваяЧасть = ПраваяЧасть - ЗначениеПоказателя;
		ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
		Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300004005", НазваниеПоказателя,
		ЗначениеПоказателя, "", СохраненныйДокумент, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		НазваниеПоказателя = "Раздел 3, Строка 050, Графа 5" + ОкончаниеНазвания;
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300005005);
		ПраваяЧасть = ПраваяЧасть - ЗначениеПоказателя;
		ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
		Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр + ")";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300005005", НазваниеПоказателя,
		ЗначениеПоказателя, "", СохраненныйДокумент, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		Квартал = Квартал - 1;
		
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	Если ЛеваяЧасть <= ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " <= " + Расшифровка + " Итог [" + ПраваяЧастьСтр + "]";
	
	ТекстОписания = "Возможно занижение налоговой базы по НДС.";
	Если ЭтоОшибка Тогда 
		ТекстОписания = ТекстОписания + Символы.ПС +
		"Исключение: Если у организации есть не облагаемые НДС операции, соотношение выполняться не будет, что не является ошибкой."
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстОписания);
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='ст. 146, 153, 166, 167 НК РФ'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_2(СтруктураРезультата)
	
	// Актуально только для отчета ИП
	Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда 
		Возврат;
	КонецЕсли;
	
	// Актуально только для декларации за 4-й квартал (год)
	Если НЕ КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела7 = мДанныеОтчета.ПолеТабличногоДокументаРаздел7;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма значений графы 3 строк 010, 020, 030, 040 Раздела 3 декларации, за минусом суммы НДС по значениям графы 5 строк 030 и 040 и суммы значения строки 010 графы 4 Раздела 7, исчисленная за год должна быть больше либо равна значению общей суммы дохода по строке п.п. 3.1 п. 3 Листа В Декларации 3-НДФЛ";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 010, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300001003);
	ЛеваяЧасть = ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = "(" + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300001003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 020, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300002003);
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300002003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 030, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300003003);
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300003003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 040, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300004003);
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр + ")";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300004003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 030, Графа 5";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300003005);
	ЛеваяЧасть = ЛеваяЧасть - ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " - (" + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300003005", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 040, Графа 5";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300004005);
	ЛеваяЧасть = ЛеваяЧасть - ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр + ")";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300004005", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
	НазваниеПоказателя = "Раздел 3, Строка 050, Графа 5";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300005005);
	ЛеваяЧасть = ЛеваяЧасть - ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр + ")";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300005005", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000700001004_1");
	
	Расшифровка = Расшифровка + " + (";
	
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000700001004_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 7, строка № " + НомСтрСтр + ", графа 4";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя, СтруктураРаздела7[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел7", Неопределено, , СчетчикФормулДляРасшифровок);
		Если СтруктураРаздела7.Свойство(ИмяПоказателя) Тогда 
			ЗначениеР7Ст010Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела7[ИмяПоказателя]);
			Расшифровка = Расшифровка + Формат(ЗначениеР7Ст010Гр4, "ЧРД=.;ЧН=0") + " + ";
			ЛеваяЧасть = ЛеваяЧасть + ЗначениеР7Ст010Гр4;
		КонецЕсли;
	КонецЦикла;
	
	ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
	Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3) + ")" + " Итог [" + ЛеваяЧастьСтр + "]";
	// Зарегистрируем правую часть соотношения.
	
	// Междокументные КС
	
	Документ3НДФЛ = РегламентированнаяОтчетность.ПолучитьДокументМДКС(СтруктураРеквизитовФормы.мСохраненныйДок, "РегламентированныйОтчет3НДФЛ");
	ЗначениеР9Стр11Гр1 = Неопределено;
	Если Документ3НДФЛ <> Неопределено Тогда 
		Данные3НДФЛ = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(Документ3НДФЛ);
		ИмяРаздела = "ЛистВ";
		ИмяР9Стр11Гр1 = "П000090001101";
		НаименованиеР9Стр11Гр1 = "Общая сумма дохода (по данным отчета 3 НДФЛ)";
		ЛистВ3НДФЛ = Неопределено;
		Если Данные3НДФЛ.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, ЛистВ3НДФЛ) Тогда 
			КоличествоСтраниц = ЛистВ3НДФЛ.Количество();
			ЗначениеР9Стр11Гр1 = ЛистВ3НДФЛ[КоличествоСтраниц - 1].Данные[ИмяР9Стр11Гр1];
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР9Стр11Гр1,
				НаименованиеР9Стр11Гр1, ЗначениеР9Стр11Гр1, "", Документ3НДФЛ, ИмяРаздела, Неопределено, Строка(КоличествоСтраниц),
				СчетчикФормулДляРасшифровок);
		КонецЕсли;
	КонецЕсли;
	
	ПраваяЧасть = ЗначениеР9Стр11Гр1;
	Если ПраваяЧасть = Неопределено Тогда 
		ПроверятьКС = Ложь;
		ПраваяЧастьСтр = "[...]";
	Иначе
		ПроверятьКС = Истина;
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	КонецЕсли;
	
	Если НЕ ПроверятьКС ИЛИ (ПроверятьКС И ЛеваяЧасть >= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = Расшифровка + " >= " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно занижение суммы НДС, исчисленной ИП, в случае если левая часть равенства меньше правой части'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='ст. 146, 153, 167, 173 НК РФ"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция МассивКодовОпераций()

	КодыОперации = Новый Массив();
	КодыОперации.Добавить("1010800");
	КодыОперации.Добавить("1010801");
	КодыОперации.Добавить("1010802");
	КодыОперации.Добавить("1010803");
	КодыОперации.Добавить("1010804");
	КодыОперации.Добавить("1010805");
	КодыОперации.Добавить("1010806");
	КодыОперации.Добавить("1010807");
	КодыОперации.Добавить("1010808");
	КодыОперации.Добавить("1010809");
	КодыОперации.Добавить("1010810");
	КодыОперации.Добавить("1010811");
	КодыОперации.Добавить("1010812");
	КодыОперации.Добавить("1010813");
	КодыОперации.Добавить("1010814");

	Возврат КодыОперации;
	
КонецФункции

&НаКлиенте
Функция НачатьЗамерВремени()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
			
			КлючеваяОперация = "ЗаполнениеФормыРеглОтчетаНДС";
			ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
			
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВыполнятьЗамерыПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиВызовСервераПовтИсп").ВыполнятьЗамерыПроизводительности();
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") 
	   И ВыполнятьЗамерыПроизводительности Тогда
		
		Возврат ОценкаПроизводительности.НачатьЗамерВремени();
			
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ВремяНачала <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "ЗаполнениеФормыРеглОтчетаНДС";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОРИСОВКА И КОМАНДЫ ПАНЕЛИ ОТПРАВКИ

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0003200001") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0007000010") > 0 Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры