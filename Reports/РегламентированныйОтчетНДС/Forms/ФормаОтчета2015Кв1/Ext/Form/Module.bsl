//ПроверкаКонтрагентовБРО
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
//Конец ПроверкаКонтрагентовБРО

&НаКлиенте
Перем ФормаВыгрузкиРеглОтчета;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();

	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2015Кв1";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы31 = "П0003100080";
	СтруктураРеквизитовФормы.мИдГруппы32 = "П0003200001";
	СтруктураРеквизитовФормы.мИдГруппы4  = "П00040000";
	СтруктураРеквизитовФормы.мИдГруппы5  = "П00050000";
	СтруктураРеквизитовФормы.мИдГруппы6  = "П00060000";
	СтруктураРеквизитовФормы.мИдГруппы7  = "П0007000001";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы31 = 10;
	КолИсхСтрокИдГруппы32 = 1;
	КолИсхСтрокИдГруппы4  = 1;
	КолИсхСтрокИдГруппы5  = 1;
	КолИсхСтрокИдГруппы6  = 1;
	КолИсхСтрокИдГруппы7  = 1;

	КолКолонокИдГруппы31 = 4;
	КолКолонокИдГруппы32 = 3;
	КолКолонокИдГруппы4  = 5;
	КолКолонокИдГруппы5  = 7;
	КолКолонокИдГруппы6  = 4;
	КолКолонокИдГруппы7  = 4;
	
	СтруктураДанныхТитульный     = Новый Структура;
	СтруктураДанныхРаздел1       = Новый Структура;
	СтруктураДанныхРаздел3       = Новый Структура;
	СтруктураДанныхРаздел3_Прил2 = Новый Структура;
	СтруктураДанныхРаздел4       = Новый Структура;
	СтруктураДанныхРаздел6       = Новый Структура;
	СтруктураДанныхРаздел7       = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31, СтруктураРеквизитовФормы.мИдГруппы31);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы32, СтруктураРеквизитовФормы.мИдГруппы32);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  СтруктураРеквизитовФормы.мИдГруппы4);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,  СтруктураРеквизитовФормы.мИдГруппы5);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,  СтруктураРеквизитовФормы.мИдГруппы6);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,  СтруктураРеквизитовФормы.мИдГруппы7);

	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2",       "ТаблицаСтраницыРаздела2");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел3_Прил1", "ТаблицаСтраницыРаздела3_Прил1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел5",       "ТаблицаСтраницыРаздела5");
	
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31, КолИсхСтрокИдГруппы31);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы32, КолИсхСтрокИдГруппы32);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  КолИсхСтрокИдГруппы4);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,  КолИсхСтрокИдГруппы5);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,  КолИсхСтрокИдГруппы6);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,  КолИсхСтрокИдГруппы7);

	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31, КолКолонокИдГруппы31);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы32, КолКолонокИдГруппы32);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  КолКолонокИдГруппы4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,  КолКолонокИдГруппы5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,  КолКолонокИдГруппы6);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,  КолКолонокИдГруппы7);
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2015";
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = "1151001";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
        	
	ИмяРаздела = "Титульный";
		
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	//ПроверкаКонтрагентовБРО
	ПроверкаКонтрагентовБРО.ПриСозданииНаСервере(ЭтотОбъект);
	//Конец ПроверкаКонтрагентовБРО
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ДатаНачалаАвтозаполнения");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы31");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы32");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы6");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы7");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ГруппаОрганизаций", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ОтчетСтарогоОбразца", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресХранилищаПроверкиВыгрузки", Неопределено);
		
	СтруктураРеквизитовФормы.Вставить("ВыполненоЗаполнениеРазделов", НовыйНаборПризнаковЗаполнения());
	СтруктураРеквизитовФормы.Вставить("УспешноеАвтозаполнение");
	СтруктураРеквизитовФормы.Вставить("ВерсияАвтозаполнения");
	СтруктураРеквизитовФормы.Вставить("АвтозаполнениеРазделовВТекущейСессии", НовыйНаборПризнаковАвтозаполнения());
	
	СтруктураРеквизитовФормы.Вставить("ПодключенДокументооборотСКонтролирующимОрганом", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("СтатусОтчета", "Не отправлено");
	
	СтруктураРеквизитовФормы.Вставить("АвтоЗаполнениеРеглОтчетаДоступно", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
КонецПроцедуры

&НаСервере
Функция НовыйНаборПризнаковЗаполнения()
	
	ПризнакиЗаполнения = Новый Структура;
	ПризнакиЗаполнения.Вставить("Раздел8", Ложь);
	ПризнакиЗаполнения.Вставить("Раздел8_Прил1", Ложь);
	ПризнакиЗаполнения.Вставить("Раздел9", Ложь);
	ПризнакиЗаполнения.Вставить("Раздел9_Прил1", Ложь);
	ПризнакиЗаполнения.Вставить("Раздел10", Ложь);
	ПризнакиЗаполнения.Вставить("Раздел11", Ложь);
	ПризнакиЗаполнения.Вставить("Раздел12", Ложь);
	
	Возврат ПризнакиЗаполнения;
	
КонецФункции

&НаСервере
Функция НовыйНаборПризнаковАвтозаполнения(ВыполнялосьАвтозаполнение = Ложь)
	
	Признаки = Новый Структура;
	Признаки.Вставить("Раздел8",       ВыполнялосьАвтозаполнение);
	Признаки.Вставить("Раздел8_Прил1", ВыполнялосьАвтозаполнение);
	Признаки.Вставить("Раздел9",       ВыполнялосьАвтозаполнение);
	Признаки.Вставить("Раздел9_Прил1", ВыполнялосьАвтозаполнение);
	Признаки.Вставить("Раздел10",      ВыполнялосьАвтозаполнение);
	Признаки.Вставить("Раздел11",      ВыполнялосьАвтозаполнение);
	Признаки.Вставить("Раздел12",      ВыполнялосьАвтозаполнение);
	
	Возврат Признаки;
	
КонецФункции

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела3_Прил1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела5.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	Если ИмяРаздела = "Раздел1" 
	 ИЛИ ИмяРаздела = "Раздел2" 
	 ИЛИ ИмяРаздела = "Раздел3" 
	 ИЛИ ИмяРаздела = "Раздел3_Прил2" Тогда
	 
		Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
		
	ИначеЕсли ИмяРаздела = "Раздел4"
		  ИЛИ ИмяРаздела = "Раздел5"
		  ИЛИ ИмяРаздела = "Раздел6"
		  ИЛИ ИмяРаздела = "Раздел7" Тогда
		  
		Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));	
		
	Иначе
		
	    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2));
		
	КонецЕсли; 

	Возврат Результат; 
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100004003", "П000300011005;П000300019003;П000300001005;П000300002005;П000300003005;П000300004005;П000300005005;П000300006005;П000300007005;П000300008005;П000300010505;П000300010605;П000300010705;П000300010805;П000300010905;П000300001003;П000300002003;П000300003003;П000300004003;П000300006003;П000300010503;П000300010603;П000300010703;П000300010803;П000300012003;П000300013003;П000300014003;П000300015003;П000300016003;П000300017003;П000300018003;П000400003003;П000400004003;П000400005003;П000400008003;П000600005003;П000600010003;П000600013003;П000600006003;П000600009003;П000600015003;П000600003003;П000600004003;П000300019003;П000300011005;П000300001005;П000300002005;П000300003005;П000300004005;П000300005005;П000300006005;П000300007005;П000300008005;П000300010505;П000300010605;П000300010705;П000300010805;П000300010905;П000300001003;П000300002003;П000300003003;П000300004003;П000300006003;П000300010503;П000300010603;П000300010703;П000300010803;П000300012003;П000300013003;П000300014003;П000300015003;П000300016003;П000300017003;П000300018003;П000400003003;П000400004003;П000400005003;П000400008003;П000500005003;П000500007003;П000600005003;П000600010003;П000600013003;П000600006003;П000600009003;П000600015003;П000600003003;П000600004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100005003", "П000300011005;П000300019003;П000300001005;П000300002005;П000300003005;П000300004005;П000300005005;П000300006005;П000300007005;П000300008005;П000300010505;П000300010605;П000300010705;П000300010805;П000300010905;П000300001003;П000300002003;П000300003003;П000300004003;П000300006003;П000300010503;П000300010603;П000300010703;П000300010803;П000300012003;П000300013003;П000300014003;П000300015003;П000300016003;П000300017003;П000300018003;П000400003003;П000400004003;П000400005003;П000400008003;П000600005003;П000600010003;П000600013003;П000600006003;П000600009003;П000600015003;П000600003003;П000600004003;П000300019003;П000300011005;П000300001005;П000300002005;П000300003005;П000300004005;П000300005005;П000300006005;П000300007005;П000300008005;П000300010505;П000300010605;П000300010705;П000300010805;П000300010905;П000300001003;П000300002003;П000300003003;П000300004003;П000300006003;П000300010503;П000300010603;П000300010703;П000300010803;П000300012003;П000300013003;П000300014003;П000300015003;П000300016003;П000300017003;П000300018003;П000400003003;П000400004003;П000400005003;П000400008003;П000500005003;П000500007003;П000600005003;П000600010003;П000600013003;П000600006003;П000600009003;П000600015003;П000600003003;П000600004003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200006003", "П000200008003;П000200009003;П000200010003");
		
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300001005", "П000300001003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300002005", "П000300002003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300003005", "П000300003003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300004005", "П000300004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300006005", "П000300006003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300010505", "П000300010503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300010605", "П000300010603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300010705", "П000300010703");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300010805", "П000300010803");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300011005", "П000300001005;П000300002005;П000300003005;П000300004005;П000300005005;П000300006005;П000300007005;П000300008005;П000300010505;П000300010605;П000300010705;П000300010805;П000300010905;П000300001003;П000300002003;П000300003003;П000300004003;П000300006003;П000300010503;П000300010603;П000300010703;П000300010803");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300019003", "П000300012003;П000300013003;П000300014003;П000300015003;П000300016003;П000300017003;П000300018003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300020003", "П000300011005;П000300019003;П000300001005;П000300002005;П000300003005;П000300004005;П000300005005;П000300006005;П000300007005;П000300008005;П000300010505;П000300010605;П000300010705;П000300010805;П000300010905;П000300001003;П000300002003;П000300003003;П000300004003;П000300006003;П000300010503;П000300010603;П000300010703;П000300010803;П000300012003;П000300013003;П000300014003;П000300015003;П000300016003;П000300017003;П000300018003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300021003", "П000300019003;П000300011005;П000300001005;П000300002005;П000300003005;П000300004005;П000300005005;П000300006005;П000300007005;П000300008005;П000300010505;П000300010605;П000300010705;П000300010805;П000300010905;П000300001003;П000300002003;П000300003003;П000300004003;П000300006003;П000300010503;П000300010603;П000300010703;П000300010803;П000300012003;П000300013003;П000300014003;П000300015003;П000300016003;П000300017003;П000300018003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000310008004", "П000310007001;П000310008003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000310009004", "П000310008004;П000310007001;П000310008003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000320000202", "П000320000102");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000320000203", "П000320000103");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400012003", "П000400003003;П000400004003;П000400005003;П000400008003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400013003", "П000400003003;П000400004003;П000400005003;П000400008003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500008003", "П000500005003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500009003", "П000500007003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600005003", "П000600003003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600006003", "П000600004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600016003", "П000600005003;П000600010003;П000600013003;П000600006003;П000600009003;П000600015003;П000600003003;П000600004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600017003", "П000600005003;П000600010003;П000600013003;П000600006003;П000600009003;П000600015003;П000600003003;П000600004003");
		
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел8", 0);
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел8_Прил1", 0);
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел9", 0);
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел9_Прил1", 0);
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел10", 0);
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел11", 0);
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел12", 0);
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	
	Если НЕ НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		Элементы.ФормаНастроитьПериодЗаполнения.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС = РегламентированнаяОтчетностьВызовСервера.ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			
			ВосстановитьСохраненныеДанные();
			
			СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
			
		Иначе // новый документ
			
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			ЗаполнитьЗначенияПолейПоУмолчанию();
			
		КонецЕсли;
		
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			
			СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
			
			СтруктураРеквизитовФормы.СтатусОтчета = "Не отправлено";
			
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
		   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС Тогда
		
		СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить    = Ложь;
		СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Ложь;
				
	КонецЕсли;	
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
	 
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ПодключенДокументооборотСКонтролирующимОрганом = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.ПодключенДокументооборотСКонтролирующимОрганом
	   И СтруктураРеквизитовФормы.СтатусОтчета = "Сдано" Тогда
	   
	    Элементы.НаименованиеЭтапа.ЦветТекста = Новый Цвет(28, 85, 174);
	   
		Элементы.НаименованиеЭтапа.Заголовок = СтруктураРеквизитовФормы.СтатусОтчета;
	
	ИначеЕсли НЕ СтруктураРеквизитовФормы.ПодключенДокументооборотСКонтролирующимОрганом Тогда
				
		Элементы.НаименованиеЭтапа.Гиперссылка = Истина;
		Элементы.НаименованиеЭтапа.ЦветТекста = Новый Цвет(28, 85, 174);
		
		Элементы.НаименованиеЭтапа.Заголовок = СтруктураРеквизитовФормы.СтатусОтчета;
				
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗначениеТаймера = ЗначениеТаймера();
		ЗаполнитьАвтоНаСервере();
		ЗаписатьЗамер(ЗначениеТаймера);
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.АвтоЗаполнениеРеглОтчетаДоступно = АвтоЗаполнениеРеглОтчетаДоступно();
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
            			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2015Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > 2016 Тогда
					// Код операции 1011417 доступен при заполнении декларации
					// за периоды 1 квартал 2015 года - 4 квартал 2016 года.
					Если КодПоказателя = "1011417" Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыНалоговыхПериодов"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["КодыПоМестуНахождения"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, , "Выбор кода формы реорганизации, ликвидации", КоллекцияСписковВыбора["КодыФормыРеорганизации"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500002003", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыНалоговыхПериодов_Раздел5"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100001003", 11, "ОКТМО");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200005003", 11, "ОКТМО");
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100002003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КодыБюджетнойКлассификации_Раздел1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200004003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КодыБюджетнойКлассификации_Раздел2"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200007003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310003001", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел3_Прил1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400001003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500003003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000600001003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел6"]);
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2016 Тогда
		ИмяСекции_КодыОпераций_Раздел7 = "КодыОпераций_Раздел7_20160101";
	Иначе
		ИмяСекции_КодыОпераций_Раздел7 = "КодыОпераций_Раздел7";
	КонецЕсли;
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700000101", 7, , "Выбор кода операции", КоллекцияСписковВыбора[ИмяСекции_КодыОпераций_Раздел7]);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
				
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0
			 ИЛИ ИмяСтраницы = "Раздел2" Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_Прил1";
	СтрокаУровня1.Представление            = "Раздел 3. Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_Прил2";
	СтрокаУровня1.Представление            = "Раздел 3. Прил. 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел6";
	СтрокаУровня1.Представление            = "Раздел 6";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел7";
	СтрокаУровня1.Представление            = "Раздел 7";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел8";
	СтрокаУровня1.Представление            = "Раздел 8";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел8_Прил1";
	СтрокаУровня1.Представление            = "Раздел 8. Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел9";
	СтрокаУровня1.Представление            = "Раздел 9";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел9_Прил1";
	СтрокаУровня1.Представление            = "Раздел 9. Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел10";
	СтрокаУровня1.Представление            = "Раздел 10";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел11";
	СтрокаУровня1.Представление            = "Раздел 11";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел12";
	СтрокаУровня1.Представление            = "Раздел 12";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_Прил1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы31;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_Прил2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы32;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 13;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 10;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы6;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 10;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы7;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел8";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел8_Прил1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел9";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел9_Прил1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел10";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел11";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел12";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли ЭтоРазделРегистраУчетаНДС(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим) Тогда
				СтраницыРаздела = Форма["Страницы" + ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим];
				
				Если СтраницыРаздела.Количество() > 0 Тогда
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					НомерСтраницы = 1;
					Для Каждого СтраницаРаздела Из СтраницыРаздела Цикл
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = СтраницаРаздела.Представление;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						НомерСтраницы = НомерСтраницы + 1;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЗаголовокРаздела = (Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено);
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюТД = Элементы.ТабличныйДокументКонтекстноеМеню;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	ЭтоРазделРегистраУчетаНДС = ЭтоРазделРегистраУчетаНДС(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	Элементы.ОчиститьТекущийРаздел.Видимость   = ЭтоРазделРегистраУчетаНДС;
	Элементы.ОчиститьТекущуюСтраницу.Видимость = НЕ ЭтоРазделРегистраУчетаНДС;
	
	ЭтоЦентральныйУзелМногостраничногоРаздела = ЭтоЗаголовокРаздела И Элемент.ТекущиеДанные.РазделМногостраничный;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = НЕ ЭтоЦентральныйУзелМногостраничногоРаздела;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
			                                                      ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, ЭтоЗаголовокРаздела);
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	ТабличныйДокумент.ФиксацияСверху = 0;
	
	Если Элемент.ТекущиеДанные.РазделМногостраничный И НЕ ЭтоРазделРегистраУчетаНДС Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		КМенюТД.Видимость = Ложь;
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
		   И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			Элементы.РазделыОтчета.КонтекстноеМеню.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Истина;
			Элементы.РазделыОтчета.КонтекстноеМеню.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
		Иначе
			Элементы.РазделыОтчета.КонтекстноеМеню.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Ложь;
			Элементы.РазделыОтчета.КонтекстноеМеню.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел7"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3_Прил2"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел4"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел5"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел6" Тогда
	 
		КМенюРО.Видимость = Ложь;
		КМенюТД.Видимость = Истина;
		
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
		
	Иначе
		
		КМенюРО.Видимость = Ложь;
		КМенюТД.Видимость = Ложь;
		
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.Обновить.Доступность = ?(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный", Истина, Ложь);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	Если ИмяТекРаздела = "Раздел2" Тогда
		ИзменитьЦветЯчеекНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина) Экспорт
	
	Если НаимРаздела = "Раздел8"
	 ИЛИ НаимРаздела = "Раздел8_Прил1"
	 ИЛИ НаимРаздела = "Раздел9"
	 ИЛИ НаимРаздела = "Раздел9_Прил1"
	 ИЛИ НаимРаздела = "Раздел10"
	 ИЛИ НаимРаздела = "Раздел11"
	 ИЛИ НаимРаздела = "Раздел12" Тогда
		
		// Сбор данных по разделу не требуется.
		
	// Многостраничные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел2"
	      ИЛИ НаимРаздела = "Раздел3_Прил1" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Раздел2" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
			
		ИначеЕсли НаимРаздела = "Раздел3_Прил1" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела3_Прил1";
							
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел5" Тогда	
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
			
			Для каждого СтрТаблица Из СтрТаблицыСтраниц Цикл
				СтрТаблица.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел3_Прил2"
	      ИЛИ НаимРаздела = "Раздел4"
	      ИЛИ НаимРаздела = "Раздел6"
	      ИЛИ НаимРаздела = "Раздел7" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь) Экспорт
	
	Если ИмяТекРаздела = "Раздел8"
	 ИЛИ ИмяТекРаздела = "Раздел8_Прил1"
	 ИЛИ ИмяТекРаздела = "Раздел9"
	 ИЛИ ИмяТекРаздела = "Раздел9_Прил1"
	 ИЛИ ИмяТекРаздела = "Раздел10"
	 ИЛИ ИмяТекРаздела = "Раздел11"
	 ИЛИ ИмяТекРаздела = "Раздел12" Тогда
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.СтраницаРегистраУчетаНДС;
		ВывестиРазделРегистраУчетаНДС(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.СтраницаОтчета;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПомощникаПоУчетуНДС);
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	
	Если ИмяТекРаздела = "Раздел2"
	 ИЛИ ИмяТекРаздела = "Раздел3_Прил1" Тогда
		
		Если ИмяТекРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
		ИначеЕсли ИмяТекРаздела = "Раздел3_Прил1" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела3_Прил1";
		ИначеЕсли ИмяТекРаздела = "Раздел5" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела5";
		КонецЕсли;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		СтруктураДанных = Новый Структура;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	// Многостраничные и многострочные разделы.
	
	ИначеЕсли ИмяТекРаздела = "Раздел5" Тогда
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			   И (НовДанныеДопСтрокРаздела.Количество() > 0)
			   И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			Иначе
				НовДанныеДопСтрокРаздела = Неопределено;
			КонецЕсли;
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
		Иначе
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "3003_2") = Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "3003_1");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел3_Прил2"
		  ИЛИ ИмяТекРаздела = "Раздел4"
		  ИЛИ ИмяТекРаздела = "Раздел6"
		  ИЛИ ИмяТекРаздела = "Раздел7" Тогда
		
		СтруктураДанныхРаздела = ЭтаФорма["СтруктураДанных" + ИмяТекРаздела];
		
		Для Каждого ЭлСтруктуры Из СтруктураДанныхРаздела Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ТекТабличноеПоле = ЭтаФорма.ТабличныйДокумент;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		ЕстьДопСтроки = Ложь;
		
		Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				ЕстьДопСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьДопСтроки Тогда
			Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Гиперссылка = Истина;
					ОбластьТД.Текст = "х";
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Гиперссылка = Ложь;
					ОбластьТД.Текст = "";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	// Обычные разделы.
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		
	Иначе
		
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
		Если ИмяТекРаздела = "Раздел1" Тогда
			
			УстановитьДоступностьОбластей(ЭтаФорма, "Раздел1");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы32", СтруктураРеквизитовФормы.мИдГруппы32);
	ИдГрупп.Вставить("мИдГруппы4",  СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",  СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",  СтруктураРеквизитовФормы.мИдГруппы7);
		
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы32", СтруктураРеквизитовФормы.мИдГруппы32);
	ИдГрупп.Вставить("мИдГруппы4",  СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",  СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",  СтруктураРеквизитовФормы.мИдГруппы7);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
		
	Если ИдГруппы = ИдГрупп.мИдГруппы31 Тогда
		
		ТекТабличноеПоле = "Раздел3_Прил1";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы32 Тогда
		
		ТекТабличноеПоле = "Раздел3_Прил2";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы4 Тогда
		
		ТекТабличноеПоле = "Раздел4";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы5 Тогда
		
		ТекТабличноеПоле = "Раздел5";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы6 Тогда
		
		ТекТабличноеПоле = "Раздел6";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы7 Тогда
		
		ТекТабличноеПоле = "Раздел7";
				
	КонецЕсли;

	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
    		
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;

КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	Если (НЕ ЗначениеЗаполнено(ПолеТабличногоДокументаТитульный.Области.Период.Значение)
		И СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
		ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода = Новый Соответствие;
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3,  "21");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6,  "22");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9,  "23");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12, "24");
		
		// выводим признак периода на титульный лист
		КодОтчетногоПериода = СоответствиеНомераМесяцаКодуОтчетногоПериода[Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)];
		ПолеТабличногоДокументаТитульный.Области.Период.Значение = КодОтчетногоПериода;
	КонецЕсли; 
	  	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ПолеТабличногоДокументаТитульный.Области.ОтчетГод.Значение = ОтчетныйГод;
		
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			// Конвертация данных после перехода с 2.0 на 3.0.
			Если ИмяТекущейСтраницыПанели = "Раздел4" Тогда
				СтрокаПоиска = "П000400001003,П000400002003,П000400003003,П000400004003,П000400005003";
				Если СтрНайти(СтрокаПоиска, ИмяПоказателя) Тогда
					КолвоСтрокВМногострочнойЧасти = Форма["П00040000"].Количество();
				КонецЕсли;
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда
				СтрокаПоиска = "П000600001003,П000600002003,П000600003003,П000600004003";
				Если СтрНайти(СтрокаПоиска, ИмяПоказателя) Тогда
					КолвоСтрокВМногострочнойЧасти = Форма["П00060000"].Количество();
				КонецЕсли;
			КонецЕсли;
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					
					// Конвертация данных после перехода с 2.0 на 3.0.
					Если ИмяТекущейСтраницыПанели = "Раздел4" Тогда
						СтрокаПоиска = "П0004000010,П0004000020,П0004000030,П0004000040,П0004000050";
						Если СтрНайти(СтрокаПоиска, ИмяГруппы) Тогда
							ИмяГруппы = "П00040000";
						КонецЕсли;
					ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда
						СтрокаПоиска = "П0006000010,П0006000020,П0006000030,П0006000040";
						Если СтрНайти(СтрокаПоиска, ИмяГруппы) Тогда
							ИмяГруппы = "П00060000";
						КонецЕсли;
					КонецЕсли;
					
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ИзмененаДатаПодписи = Ложь)
    
	Если НЕ ИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ДополнитьСправа = 1;
		
		ТабличныйДокумент.Области["ИНН1"].Значение = СведенияОбОрганизации.ИННЮЛ;
		ТабличныйДокумент.Области["КПП1"].Значение = СведенияОбОрганизации.КППЮЛ;
		     		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;

		ТабличныйДокумент.Области["КодИМНС"].Значение = КодНО;
		
		ПоМесту = "";
		Если СведенияОбОрганизации.ТипНП = 1
		 ИЛИ СведенияОбОрганизации.ТипНП = 5 Тогда
			ПоМесту = "214";
		ИначеЕсли СведенияОбОрганизации.ТипНП = 3 Тогда
			ПоМесту = "116";
		КонецЕсли;
		
		ТабличныйДокумент.Области["ПоМесту"].Значение = ПоМесту;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
		
		ТабличныйДокумент.Области.НаимОрг.Значение = НаименованиеОрганизации;
		
		ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
						
		КодТерриториальногоОбразования = СведенияОбОрганизации.ОКТМО;
		ЗаполнитьОКТМО(ЭтаФорма, КодТерриториальногоОбразования);
				
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	ЗаполнитьСведенияОПодписантах();
	
	ЗаполнитьЗначенияПолейПоУмолчанию();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	ЗаполнитьЗначенияПолейПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантахИКодПоОКТМО(Ссылка)
		
	КодТерриториальногоОбразования = Ссылка.КодПоОКТМО;
	ЗаполнитьОКТМО(ЭтаФорма, КодТерриториальногоОбразования);
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
		
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0 И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы32", СтруктураРеквизитовФормы.мИдГруппы32);
	ИдГрупп.Вставить("мИдГруппы4",  СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",  СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",  СтруктураРеквизитовФормы.мИдГруппы7);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы32", СтруктураРеквизитовФормы.мИдГруппы32);
	ИдГрупп.Вставить("мИдГруппы4",  СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",  СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",  СтруктураРеквизитовФормы.мИдГруппы7);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
    	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел3_Прил1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы31;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел3_Прил2" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы32;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы4;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы5;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел6" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы6;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел7" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы7;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	Если СтрДлина(ИмяГруппы) = 9 Тогда
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ТекТабличноеПолеИмя = "ТабличныйДокумент";
		
		ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
		
		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
			
			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
			
			Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
								
				ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
				
				Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
					
					ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	Если СтрДлина(ИмяГруппы) = 9 Тогда
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ТекТабличноеПолеИмя = "ТабличныйДокумент";
		
		ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
		
		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
			
			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
			
			Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
				
				Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
					
					ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	Перем ТаблицаРасшифровки;
	Перем ВерсияФормы;
	Перем ВыполненоЗаполнениеРазделов;
	Перем УспешноеАвтозаполнение;
	Перем ВерсияАвтозаполнения;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	СтатусОтчета 									  = СтруктураРеквизитовФормы.мСохраненныйДок.СтатусОтчета;
	
	Если ЗначениеЗаполнено(СтатусОтчета) Тогда
		СтруктураРеквизитовФормы.СтатусОтчета = СтатусОтчета;
	КонецЕсли;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ВерсияФормыИзменилась = Ложь;
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) И (ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы) Тогда
		ВерсияФормыИзменилась = Истина;
	КонецЕсли;
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	// Установим актуальные представления разделов.
	Если НЕ ДеревоНастройкиСтраниц = Неопределено Тогда
		
		Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
			Счетчик = ?(Счетчик = Неопределено, 0, Счетчик);
			ЭлементмДеревоСтраницОтчета = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
			Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
				Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
					СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Если ДанныеМногострочныхРазделов.Свойство("П0004000010")
		 ИЛИ ДанныеМногострочныхРазделов.Свойство("П0006000010") Тогда
			СтруктураРеквизитовФормы.ОтчетСтарогоОбразца = Истина;
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтруктураРеквизитовФормы.ОтчетСтарогоОбразца Тогда
			// Конвертация данных после перехода с 2.0 на 3.0.
			ВосстановитьДанныеМногострочныхРазделовСтарогоОбразца(ДанныеМногострочныхРазделов, ПоказателиОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			// Конвертация данных после перехода с 2.0 на 3.0.
			ВосстановитьДанныеВариановАвтоЗаполненияСтарогоОбразца(ДанныеВариановАвтоЗаполнения);
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Данные многостраничных разделов.
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		Если СтруктураРеквизитовФормы.ОтчетСтарогоОбразца Тогда
			// Конвертация данных после перехода с 2.0 на 3.0.
			ВосстановитьДанныеМногостраничныхРазделовСтарогоОбразца(ДанныеМногостраничныхРазделов);
		КонецЕсли;
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			ИмяРаздела = ЭлементСтруктуры.Ключ;
			ТаблицаСДанными = ЭлементСтруктуры.Значение;
			ВосстановитьМногостраничныйРазделИзТаблицы(ИмяРаздела, ТаблицаСДанными);
		КонецЦикла;
	КонецЕсли;
	
	// Восстанавливаем дату начала и окончания автозаполнения.
	СписокСохранения.Свойство("ДатаНачалаАвтозаполнения", СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения) Тогда
		СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Свойство("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	Если СтруктураРеквизитовФормы.ГруппаОрганизаций = Неопределено Тогда
		СтруктураРеквизитовФормы.ГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
				
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
			
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(, "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел8");
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел8_Прил1");
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел9");
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел9_Прил1");
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел10");
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел11");
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел12");
	
	Если НЕ СписокСохранения.Свойство("ВыполненоЗаполнениеРазделов", ВыполненоЗаполнениеРазделов) Тогда
		УстановитьПризнакиЗаполненияПоДаннымРегистра();
	Иначе
		СтруктураРеквизитовФормы.ВыполненоЗаполнениеРазделов = ВыполненоЗаполнениеРазделов;
	КонецЕсли;
	
	СписокСохранения.Свойство("УспешноеАвтозаполнение", УспешноеАвтозаполнение);
	СтруктураРеквизитовФормы.УспешноеАвтозаполнение = УспешноеАвтозаполнение;
	
	СписокСохранения.Свойство("ВерсияАвтозаполнения", ВерсияАвтозаполнения);
	СтруктураРеквизитовФормы.ВерсияАвтозаполнения = ВерсияАвтозаполнения;
	
	ОтчетЗаполнялсяБезДеленияНаСекции = (СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Неопределено);
	
	Если ОтчетЗаполнялсяБезДеленияНаСекции Тогда
		ВосстановитьСведенияНДС("Раздел8");
		ВосстановитьСведенияНДС("Раздел8_Прил1");
		ВосстановитьСведенияНДС("Раздел9");
		ВосстановитьСведенияНДС("Раздел9_Прил1");
		ВосстановитьСведенияНДС("Раздел10");
		ВосстановитьСведенияНДС("Раздел11");
		ВосстановитьСведенияНДС("Раздел12");
	Иначе
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Неопределено;
		Иначе
			СформироватьСпискиСекций();
		КонецЕсли;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ Раздел.МногостраничностьВРазделе
		   И Раздел.ИмяСтраницы <> "Раздел8"
		   И Раздел.ИмяСтраницы <> "Раздел8_Прил1"
		   И Раздел.ИмяСтраницы <> "Раздел9"
		   И Раздел.ИмяСтраницы <> "Раздел9_Прил1"
		   И Раздел.ИмяСтраницы <> "Раздел10"
		   И Раздел.ИмяСтраницы <> "Раздел11"
		   И Раздел.ИмяСтраницы <> "Раздел12" Тогда
			Если СтруктураРеквизитовФормы.ОтчетСтарогоОбразца Тогда
				// Конвертация данных после перехода с 2.0 на 3.0.
				ВосстановитьСтруктуруДанныхРазделаСтарогоОбразца(ПоказателиОтчета, Префикс + Раздел.ИмяСтраницы, Раздел.ИмяСтраницы);
			КонецЕсли;
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.ОтчетСтарогоОбразца Тогда
		// Конвертация данных после перехода с 2.0 на 3.0.
		// Инициализация расчета справочных показателей (отсутствуют в 2.0)
		РасчетНаСервере("Раздел3_Прил1", "П000310008004");
		РасчетНаСервере("Раздел3_Прил2", "П000320000102");
		РасчетНаСервере("Раздел3_Прил2", "П000320000103");
	КонецЕсли;
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ).Имя = "ДатаПодписи" Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ДатаПодписи;
			Иначе
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВерсияФормыИзменилась Тогда
		ОбновитьПользовательскиеНастройки();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
	
		ВосстановитьРезультатПроверкиВыгрузки();
		
	КонецЕсли;
	
	//ПроверкаКонтрагентовБРО
	ПроверкаКонтрагентовБРО.ВосстановитьРезультатыПроверкиПриСозданииНаСервере(ЭтотОбъект);
	//Конец ПроверкаКонтрагентовБРО
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиСекций()
	
	СформироватьСписокСекцийРаздела("Раздел8");
	СформироватьСписокСекцийРаздела("Раздел8_Прил1");
	СформироватьСписокСекцийРаздела("Раздел9");
	СформироватьСписокСекцийРаздела("Раздел9_Прил1");
	СформироватьСписокСекцийРаздела("Раздел10");
	СформироватьСписокСекцийРаздела("Раздел11");
	СформироватьСписокСекцийРаздела("Раздел12");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокСекцийРаздела(ИмяРаздела)
	
	СписокСтраницРаздела = СписокСекцийРазделаИзРегистра(ИмяРаздела);
	ЗначениеВРеквизитФормы(СписокСтраницРаздела, "Страницы" + ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Функция СписокСекцийРазделаИзРегистра(ИмяРаздела)
	
	Префикс = "Данные" + ИмяРаздела + ".";
	
	ЗапросПоДанным = Новый Запрос;
	ЗапросПоДанным.Текст = "ВЫБРАТЬ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла Как ВидДополнительногоФайла
	                       |ИЗ
	                       |	РегистрСведений.ДополнительныеФайлыРегламентированныхОтчетов КАК ДополнительныеФайлыРегламентированныхОтчетов
	                       |ГДЕ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
	                       |	И ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла ПОДОБНО &ШаблонОтбора";
	
	ЗапросПоДанным.УстановитьПараметр("ШаблонОтбора", Префикс + "%");
	ЗапросПоДанным.УстановитьПараметр("РегламентированныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СписокСтраницРаздела = РеквизитФормыВЗначение("Страницы" + ИмяРаздела);
	СписокСтраницРаздела.Очистить();
	
	ВыборкаСегментов = ЗапросПоДанным.Выполнить().Выбрать();
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Пока ВыборкаСегментов.Следующий() Цикл
		НомерПервойСтрокиСегмента = Сред(ВыборкаСегментов.ВидДополнительногоФайла, СтрДлина(Префикс) + 1);
		НомерПервойСтрокиСегмента = ТипЧисло.ПривестиЗначение(НомерПервойСтрокиСегмента);
		
		Страница = СписокСтраницРаздела.Добавить();
		Страница.НомерПервойСтроки = НомерПервойСтрокиСегмента;
	КонецЦикла;
	
	СписокСтраницРаздела.Сортировать("НомерПервойСтроки");
	ВсегоСтраниц = СписокСтраницРаздела.Количество();
	
	Для Инд = 0 По ВсегоСтраниц - 2 Цикл
		СписокСтраницРаздела[Инд].НомерПоследнейСтроки = СписокСтраницРаздела[Инд + 1].НомерПервойСтроки - 1;
	КонецЦикла;
	
	Если ВсегоСтраниц > 0 Тогда
		НомерПервойСтрокиПоследнегоСегмента = СписокСтраницРаздела[ВсегоСтраниц-1].НомерПервойСтроки;
		ДанныеСегмента = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиПоследнегоСегмента);
		ВсегоСтрокВСегменте = ДанныеСегмента.Количество();
		СписокСтраницРаздела[ВсегоСтраниц-1].НомерПоследнейСтроки = НомерПервойСтрокиПоследнегоСегмента - 1 + ВсегоСтрокВСегменте;
	КонецЕсли;
	
	Для Каждого Страница Из СписокСтраницРаздела Цикл
		НомерСтраницы = СписокСтраницРаздела.Индекс(Страница) + 1;
		Страница.Представление = "Часть " + СтрокаЧГ0(НомерСтраницы);
	КонецЦикла;
	
	Возврат СписокСтраницРаздела;
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакиЗаполненияПоДаннымРегистра()
	
	СтруктураРеквизитовФормы.ВыполненоЗаполнениеРазделов = НовыйНаборПризнаковЗаполнения();
	
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел8");
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел8_Прил1");
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел9");
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел9_Прил1");
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел10");
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел11");
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел12");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра(ИмяРаздела)
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = "Данные" + ИмяРаздела;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
		СтруктураРеквизитовФормы.ВыполненоЗаполнениеРазделов.Вставить(ИмяРаздела, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьМногостраничныйРазделИзТаблицы(ИмяРаздела, ТаблицаСДанными)
	
	ИмяРеквизитаФормы = Неопределено;
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяРеквизитаФормы) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитФормы = ЭтаФорма[ИмяРеквизитаФормы];
	ЗначениеВДанныеФормы(ТаблицаСДанными, РеквизитФормы);
	
	Если РеквизитФормы[0].Свойство("Данные") Тогда
		Для Каждого СтрокаТаблицы Из РеквизитФормы Цикл
			Если ТипЗнч(СтрокаТаблицы.Данные) = Тип("СписокЗначений") Тогда
				СтрокаТаблицы.Данные.Очистить();
				СтрокаТаблицы.Данные.Добавить(ТаблицаСДанными[РеквизитФормы.Индекс(СтрокаТаблицы)].Данные);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РеквизитФормы[0].Свойство("ДанныеДопСтрок") Тогда
		Ном = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаСДанными Цикл
			Если ТипЗнч(СтрокаТаблицы.ДанныеДопСтрок) = Тип("Структура") Тогда
				Для Каждого ЭлСтруктуры Из СтрокаТаблицы.ДанныеДопСтрок Цикл
					ТаблЗнач = ЭлСтруктуры.Значение;
					СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяРаздела)].Добавить().Таблица;
					ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
					РеквизитФормы[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
				КонецЦикла;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
				СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяРаздела)].Добавить().Таблица;
				ЗначениеВДанныеФормы(СтрокаТаблицы.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
				РеквизитФормы[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			Ном = Ном + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСтруктуруДанныхРазделаСтарогоОбразца(ПоказателиОтчета, ИмяСтруктурыДанных, ИмяРаздела)
	
	Если ИмяРаздела = "Титульный" Тогда
		
		Данные = ПоказателиОтчета[ИмяСтруктурыДанных];
		
		Для Каждого Показатель Из Данные Цикл
			
			ИмяПоказателя = Показатель.Ключ;
			
			Если ИмяПоказателя = "ИНН1_1" Тогда
				Данные.Вставить("ИНН1");
				Для Ном = 1 По 12 Цикл
					Данные.ИНН1 = СокрЛП(Данные.ИНН1) + Данные["ИНН1_" + Ном];
					Данные.Удалить("ИНН1_" + Ном);
				КонецЦикла;
				Если Лев(Данные.ИНН1, 2) = "00" Тогда
					Данные.ИНН1 = Сред(Данные.ИНН1, 3);
				КонецЕсли;
				Если Прав(Данные.ИНН1, 2) = "--" Тогда
					Данные.ИНН1 = Лев(Данные.ИНН1, СтрНайти(Данные.ИНН1, "--") - 1);
				КонецЕсли;
			ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
				Данные.Вставить("КПП1");
				Для Ном = 1 По 9 Цикл
					Данные.КПП1 = СокрЛП(Данные.КПП1) + Данные["КПП1_" + Ном];
					Данные.Удалить("КПП1_" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
				Данные.Вставить("НомерКорректировки", "");
				Для Ном = 1 По 3 Цикл
					Данные.НомерКорректировки = Данные.НомерКорректировки
						+ СтрЗаменить(СокрЛП(Данные["НомерКорректировки" + Ном]), "-", "");
					Данные.Удалить("НомерКорректировки" + Ном);
					Если НЕ ЗначениеЗаполнено(Данные.НомерКорректировки) Тогда
						Данные.НомерКорректировки = "0";
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "Период1" Тогда
				Данные.Вставить("Период");
				Для Ном = 1 По 2 Цикл
					Данные.Период = СокрЛП(Данные.Период) + Данные["Период" + Ном];
					Данные.Удалить("Период" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
				Данные.Вставить("ОтчетГод");
				Для Ном = 1 По 4 Цикл
					Данные.ОтчетГод = СокрЛП(Данные.ОтчетГод) + Данные["ОтчетГод" + Ном];
					Данные.Удалить("ОтчетГод" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
				Данные.Вставить("КодИМНС", "");
				Для Ном = 1 По 4 Цикл
					Данные.КодИМНС = Данные.КодИМНС + СокрЛП(Данные["НалоговыйОрган" + Ном]);
					Данные.Удалить("НалоговыйОрган" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
				Данные.Вставить("ПоМесту");
				Для Ном = 1 По 3 Цикл
					Данные.ПоМесту = СокрЛП(Данные.ПоМесту) + Данные["ПоМесту" + Ном];
					Данные.Удалить("ПоМесту" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "Прил1" Тогда
				Данные.Вставить("Прил");
				Для Ном = 1 По 3 Цикл
					Данные.Прил = СокрЛП(Данные.Прил) + Данные["Прил" + Ном];
					Данные.Удалить("Прил" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ДатаПодписи1" Тогда
				Данные.Вставить("ДатаПодписи", ДатаПодписи);
				Для Ном = 1 По 8 Цикл
					Данные.Удалить("ДатаПодписи" + Ном);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3_Прил2" Тогда
		
		Данные = ПоказателиОтчета[ИмяСтруктурыДанных];
		
		// Добавление справочных показателей (отсутствуют в 2.0).
		Если НЕ Данные.Свойство("П000320000202") Тогда
			Данные.Вставить("П000320000202", 0);
		КонецЕсли;
		Если НЕ Данные.Свойство("П000320000203") Тогда
			Данные.Вставить("П000320000203", 0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеМногострочныхРазделовСтарогоОбразца(ДанныеМногострочныхРазделов, ПоказателиОтчета)
	
	Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
		
		НайденноеЗначение = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если ЭлементСтруктуры.Ключ = "П0003200001" Тогда
			НайденноеЗначение = "П0003200001";
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
			ПоказателиРаздела3_Прил2 = ПоказателиОтчета.ПолеТабличногоДокументаРаздел3_Прил2;
			Для НомСтроки = 0 По ЭтаФорма[НайденноеЗначение].Количество() - 1 Цикл
				НомСтроки_ = Формат(НомСтроки + 1, "ЧГ=0");
				Для НомПодстроки = 1 По 3 Цикл
					ЭтаФорма[НайденноеЗначение][НомСтроки][НайденноеЗначение + "0" + НомПодстроки]
						= ПоказателиРаздела3_Прил2[НайденноеЗначение + "0" + НомПодстроки + "_" + НомСтроки_];
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ЭлементСтруктуры.Ключ = "П0004000010" Тогда
			НайденноеЗначение = "П00040000";
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
			ПоказателиРаздела4 = ПоказателиОтчета.ПолеТабличногоДокументаРаздел4;
			Для НомСтроки = 0 По ЭтаФорма[НайденноеЗначение].Количество() - 1 Цикл
				НомСтроки_ = Формат(НомСтроки + 1, "ЧГ=0");
				Для НомПодстроки = 1 По 5 Цикл
					ЭтаФорма[НайденноеЗначение][НомСтроки][НайденноеЗначение + НомПодстроки + "003"]
						= ПоказателиРаздела4[НайденноеЗначение + НомПодстроки + "003_" + НомСтроки_];
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ЭлементСтруктуры.Ключ = "П0006000010" Тогда
			НайденноеЗначение = "П00060000";
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
			ПоказателиРаздела6 = ПоказателиОтчета.ПолеТабличногоДокументаРаздел6;
			Для НомСтроки = 0 По ЭтаФорма[НайденноеЗначение].Количество() - 1 Цикл
				НомСтроки_ = Формат(НомСтроки + 1, "ЧГ=0");
				Для НомПодстроки = 1 По 4 Цикл
					ЭтаФорма[НайденноеЗначение][НомСтроки][НайденноеЗначение + НомПодстроки + "003"]
						= ПоказателиРаздела6[НайденноеЗначение + НомПодстроки + "003_" + НомСтроки_];
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ЭлементСтруктуры.Ключ = "П0007000001" Тогда
			НайденноеЗначение = "П0007000001";
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
			ПоказателиРаздела7 = ПоказателиОтчета.ПолеТабличногоДокументаРаздел7;
			Для НомСтроки = 0 По ЭтаФорма[НайденноеЗначение].Количество() - 1 Цикл
				НомСтроки_ = Формат(НомСтроки + 1, "ЧГ=0");
				Для НомПодстроки = 1 По 4 Цикл
					ЭтаФорма[НайденноеЗначение][НомСтроки][НайденноеЗначение + "0" + НомПодстроки]
						= ПоказателиРаздела7[НайденноеЗначение + "0" + НомПодстроки + "_" + НомСтроки_];
				КонецЦикла;
			КонецЦикла;
		Иначе
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеМногостраничныхРазделовСтарогоОбразца(ДанныеМногостраничныхРазделов)
	
	Для каждого Страница Из ДанныеМногостраничныхРазделов["Раздел3_Прил1"] Цикл
		Данные = Страница.Данные;
		Для Каждого Показатель Из Страница.Данные Цикл
			ИмяПоказателя = Показатель.Ключ;
			Если ИмяПоказателя = "П000310001001" Тогда
				Данные.Вставить("П000310001000", Показатель.Значение);
				Данные.Удалить("П000310001001");
			КонецЕсли;
		КонецЦикла;
		// Добавление справочного показателя (отсутствует в 2.0).
		Если НЕ Данные.Свойство("П000310009004") Тогда
			Данные.Вставить("П000310009004", 0);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеВариановАвтоЗаполненияСтарогоОбразца(ДанныеВариановАвтоЗаполнения)
	
	Для каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
		
		Если ЭлементСтруктуры.Ключ = "Раздел3_Прил1" Тогда
			
			Для каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
				
				Для каждого СтрокаТЗ Из ЭлементМассива Цикл
					
					Если СтрокаТЗ.КодПоказателя = "П000310001001" Тогда
						СтрокаТЗ.КодПоказателя = "П000310001000";
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			Если СтрДлина(ИмяГруппы) = 9 Тогда
				КолонкаТаблицыИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
			Иначе	
			    КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			КонецЕсли;	
				      			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки      = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
		
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
							
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
    	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если (НЕ АвтоЗаполнениеРеглОтчетаДоступно()
	 ИЛИ СтруктураРеквизитовФормы.СтатусОтчета = "Сдано") Тогда
			
		ПоказатьПредупреждение(, НСтр("ru='Декларация по НДС сдана. Запись запрещена.
									      |Для подготовки уточненной декларации создайте новый отчет.'"));
										  
		Возврат;								  
		
	КонецЕсли;
					
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено, ИзмененСтатусОтчета = Ложь) Экспорт
	
	Если (НЕ АвтоЗаполнениеРеглОтчетаДоступно()
	 ИЛИ СтруктураРеквизитовФормы.СтатусОтчета = "Сдано")
	   И Модифицированность
	   И НЕ ИзмененСтатусОтчета Тогда
			
		ПоказатьПредупреждение(, НСтр("ru='Декларация по НДС сдана. Запись запрещена.
									      |Для подготовки уточненной декларации создайте новый отчет.'"));
										  
		Возврат;								  
		
	КонецЕсли;
	
	Если СтруктураДанныхТитульный.Количество() = 0
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомерКорректировки) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		СтруктураРеквизитовФормы.СтатусОтчета = "Не отправлено";
		
		Элементы.НаименованиеЭтапа.Заголовок = СтруктураРеквизитовФормы.СтатусОтчета;
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт	
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.СтатусОтчета             = СтруктураРеквизитовФормы.СтатусОтчета;
		
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		ИмяРаздела = ЭлементСтруктуры.Ключ;
		ИмяСтруктурыДанных = ЭлементСтруктуры.Значение;
		ДанныеВТаблицеЗначений = СведенияМногостраничногоРазделаВТаблице(ИмяСтруктурыДанных);
		Если ДанныеВТаблицеЗначений <> Неопределено Тогда
			ДанныеМногостраничныхРазделов.Вставить(ИмяРаздела, ДанныеВТаблицеЗначений);
		КонецЕсли;
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вставляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	
	СписокСохранения.Вставить("ДатаНачалаАвтозаполнения", СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения);
	
	ДобавитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел8");
	ДобавитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел8_Прил1");
	ДобавитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел9");
	ДобавитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел9_Прил1");
	ДобавитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел10");
	ДобавитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел11");
	ДобавитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел12");
	
	СписокСохранения.Вставить("ВыполненоЗаполнениеРазделов", СтруктураРеквизитовФормы.ВыполненоЗаполнениеРазделов);
	
	СписокСохранения.Вставить("УспешноеАвтозаполнение", СтруктураРеквизитовФормы.УспешноеАвтозаполнение);
	
	СписокСохранения.Вставить("ВерсияАвтозаполнения", СтруктураРеквизитовФормы.ВерсияАвтозаполнения);
				
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
	   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	СохранитьСведенияНДС("Раздел8");
	СохранитьСведенияНДС("Раздел8_Прил1");
	СохранитьСведенияНДС("Раздел9");
	СохранитьСведенияНДС("Раздел9_Прил1");
	СохранитьСведенияНДС("Раздел10");
	СохранитьСведенияНДС("Раздел11");
	СохранитьСведенияНДС("Раздел12");
	
	СтруктураРеквизитовФормы.ОтчетСтарогоОбразца = Ложь;
	
	ЗаписатьРезультатПроверкиВыгрузки();
	
	//ПроверкаКонтрагентовБРО
	ПроверкаКонтрагентовБРО.СохранитьРезультатыПроверкиПриСохраненииДекларации(ЭтотОбъект);
	//Конец ПроверкаКонтрагентовБРО
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СведенияМногостраничногоРазделаВТаблице(ИмяСтруктурыДанных)
	
	ОписаниеТиповНеопределено = Новый ОписаниеТипов("Неопределено");
	
	ТаблицаЗначенийСДанными = ДанныеФормыВЗначение(ЭтаФорма[ИмяСтруктурыДанных], Тип("ТаблицаЗначений"));
	
	Если ТаблицаЗначенийСДанными <> Неопределено Тогда
		
		Если ТаблицаЗначенийСДанными.Колонки.Найти("Данные") <> Неопределено Тогда
			ТаблицаЗначенийСДанными.Колонки.Удалить("Данные");
			ТаблицаЗначенийСДанными.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
			
			Ном = 0;
			Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийСДанными Цикл
				СтрокаТаблицыЗначений.Данные = ЭтаФорма[ИмяСтруктурыДанных][Ном].Данные[0].Значение;
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если ТаблицаЗначенийСДанными.Колонки.Найти("ДанныеДопСтрок") <> Неопределено Тогда
			ТаблицаЗначенийСДанными.Колонки.Удалить("ДанныеДопСтрок");
			ТаблицаЗначенийСДанными.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
			
			Ном = 0;
			Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийСДанными Цикл
				
				Если ЭтаФорма[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок.Количество() > 0
				   И ЭтаФорма[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела" Тогда
					СтрокаТаблицыЗначений.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
					
					Ном = Ном + 1;
					Продолжить;
				КонецЕсли;
				
				СтруктураДанныхДопСтрок = Новый Структура;
				
				Для Каждого ЭлСтруктуры Из ЭтаФорма[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок Цикл
					СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
				КонецЦикла;
				
				СтрокаТаблицыЗначений.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
				
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаЗначенийСДанными;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		   И Раздел.ИмяСтраницы <> "Раздел8"
		   И Раздел.ИмяСтраницы <> "Раздел8_Прил1"
		   И Раздел.ИмяСтраницы <> "Раздел9"
		   И Раздел.ИмяСтраницы <> "Раздел9_Прил1"
		   И Раздел.ИмяСтраницы <> "Раздел10"
		   И Раздел.ИмяСтраницы <> "Раздел11"
		   И Раздел.ИмяСтраницы <> "Раздел12" Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		   И НЕ Раздел.ИмяСтраницы = "Раздел8"
		   И НЕ Раздел.ИмяСтраницы = "Раздел8_Прил1"
		   И НЕ Раздел.ИмяСтраницы = "Раздел9"
		   И НЕ Раздел.ИмяСтраницы = "Раздел9_Прил1"
		   И НЕ Раздел.ИмяСтраницы = "Раздел10"
		   И НЕ Раздел.ИмяСтраницы = "Раздел11"
		   И НЕ Раздел.ИмяСтраницы = "Раздел12"
		   И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
		        И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
			
	Если (НЕ СтруктураРеквизитовФормы.АвтоЗаполнениеРеглОтчетаДоступно
	 ИЛИ СтруктураРеквизитовФормы.СтатусОтчета = "Сдано")
	   И Модифицированность Тогда
	    	    	 
	 	Модифицированность = Ложь;
		
		Если ЗавершениеРаботы Тогда
			
			Отказ = Истина;
		
			ТекстПредупреждения = НСтр("ru='Декларация по НДС сдана. Изменения не сохранены.
											|Для подготовки уточненной декларации создайте новый отчет.'");
			
			Возврат;
		
		КонецЕсли;
	    	    		
		ПоказатьПредупреждение(, НСтр("ru='Декларация по НДС сдана. Изменения не сохранены.
								     |Для подготовки уточненной декларации создайте новый отчет.'"));
										  
	Иначе									  
										  
		РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);								  
							
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
				
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
	//ПроверкаКонтрагентовБРО
	ПроверкаКонтрагентовБРО.ПриЗакрытииОтчета(ЭтотОбъект);
	//Конец ПроверкаКонтрагентовБРО
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте(ТекущаяОбластьИмя = "") Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма, ТекущаяОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере(ТекущаяОбластьИмя = "") Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма, ТекущаяОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма, ТекущаяОбластьИмя = "")
	
	Если НЕ ЗначениеЗаполнено(ТекущаяОбластьИмя) Тогда
		ТекущаяОбластьИмя = Форма.ТабличныйДокумент.ТекущаяОбласть.Имя;
	КонецЕсли;
	
	Строка060БылаАвторасчитываемая = Форма.ТабличныйДокумент.Области.П000200006003.Защита;
	
	КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.П000200007003.Значение);
	
	Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
		Иначе	
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200006003");
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П000200008003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П000200009003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200008003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200009003");
		КонецЕсли;
		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200010003");
		
		Если ТекущаяОбластьИмя = "П000200007003"
		   И Форма.ТабличныйДокумент.Области.П000200006003.Значение > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000200006003.Значение = 0;
			Форма.ТабличныйДокумент.Области.П000200008003.Значение = 0;
			Форма.ТабличныйДокумент.Области.П000200009003.Значение = 0;
			Форма.ТабличныйДокумент.Области.П000200010003.Значение = 0;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Значения по строкам 60, 80, 90, 100 раздела 2 очищены вследствие изменения кода операции по строке 070.'");
	
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	Иначе	
		
		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
		ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200008003");
		ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200009003");
		ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200010003");
		
		Если Строка060БылаАвторасчитываемая
		   И Форма.ТабличныйДокумент.Области.П000200006003.Значение > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000200006003.Значение = 0;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Значение по строке 060 раздела 2 очищено вследствие изменения кода операции по строке 070.'");
	
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		Форма.ТабличныйДокумент.Области.П000200008003.Значение = "";
		Форма.ТабличныйДокумент.Области.П000200009003.Значение = "";
		Форма.ТабличныйДокумент.Области.П000200010003.Значение = "";
				
	КонецЕсли;
	
	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200004003");
	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200005003");
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено)
    		
	ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
    		
	#Если НаКлиенте Тогда
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
	#Иначе
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	#КонецЕсли
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, НовыйВариант);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	Если ВыбТабличноеПолеИмя = "Раздел8"
	 ИЛИ ВыбТабличноеПолеИмя = "Раздел8_Прил1"
	 ИЛИ ВыбТабличноеПолеИмя = "Раздел9"
	 ИЛИ ВыбТабличноеПолеИмя = "Раздел9_Прил1"
	 ИЛИ ВыбТабличноеПолеИмя = "Раздел10"
	 ИЛИ ВыбТабличноеПолеИмя = "Раздел11"
	 ИЛИ ВыбТабличноеПолеИмя = "Раздел12" Тогда
		ОчиститьТабличноеПолеНДС(ВыбТабличноеПолеИмя)
	Иначе
		ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Если НЕ ВыбТабличноеПолеИмя = "Раздел5" Тогда
		
		Для каждого Область Из ВыбТабличноеПоле.Области Цикл
			Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
				Область.Защита = Ложь;
				СписокИтоговыхЯчеек.Добавить(Область.Имя);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа.
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);

КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Раздел1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100004003, ОбластьИмя) > 0
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100005003, ОбластьИмя) > 0 Тогда
			
			ОкрП000300020003 = 0;
			ОкрП000300021003 = 0;
			ОкрП000400012003 = 0;
			ОкрП000400013003 = 0;
			ОкрП000500008003 = 0;
			ОкрП000500009003 = 0;
			ОкрП000600016003 = 0;
			ОкрП000600017003 = 0;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				ОкрП000300020003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300020003.Значение);
			ИначеЕсли Форма.СтруктураДанныхРаздел3.Свойство("П000300020003") Тогда
				ОкрП000300020003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300020003);
			КонецЕсли;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				ОкрП000300021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300021003.Значение);
			ИначеЕсли Форма.СтруктураДанныхРаздел3.Свойство("П000300021003") Тогда
				ОкрП000300021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300021003);
			КонецЕсли;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				ОкрП000400012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400012003.Значение);
			ИначеЕсли Форма.СтруктураДанныхРаздел4.Свойство("П000400012003") Тогда
				ОкрП000400012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400012003);
			КонецЕсли;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
				ОкрП000400013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400013003.Значение);
			ИначеЕсли Форма.СтруктураДанныхРаздел4.Свойство("П000400013003") Тогда
				ОкрП000400013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400013003);
			КонецЕсли;
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000500008003", 0);
			СумПоказатели.Вставить("П000500009003", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел5", СумПоказатели, Истина);
			
			ОкрП000500008003 = СумПоказатели.П000500008003;
			ОкрП000500009003 = СумПоказатели.П000500009003;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел6" Тогда
				ОкрП000600016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600016003.Значение);
			ИначеЕсли Форма.СтруктураДанныхРаздел6.Свойство("П000600016003") Тогда
				ОкрП000600016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600016003);
			КонецЕсли;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел6" Тогда
				ОкрП000600017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600017003.Значение);
			ИначеЕсли Форма.СтруктураДанныхРаздел6.Свойство("П000600017003") Тогда
				ОкрП000600017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600017003);
			КонецЕсли;
			
			СуммаНалога = (ОкрП000300020003 + ОкрП000400013003 + ОкрП000600016003) 
						- (ОкрП000300021003 + ОкрП000400012003 + ОкрП000500008003 + ОкрП000500009003 + ОкрП000600017003);
			
			Форма.СтруктураДанныхРаздел1.Вставить("П000100004003", Макс(СуммаНалога, 0));
			Форма.СтруктураДанныхРаздел1.Вставить("П000100005003", Макс(-СуммаНалога, 0));
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100004003.Значение = Макс(СуммаНалога, 0);
				Форма.ТабличныйДокумент.Области.П000100005003.Значение = Макс(-СуммаНалога, 0);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200006003, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				
				КодОперации = Форма.ТабличныйДокумент.Области.П000200007003.Значение;
				
				Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда 
					
					ОкрП000200008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200008003.Значение);
					ОкрП000200009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200009003.Значение);
					ОкрП000200010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200010003.Значение);
					
					Если ОкрП000200008003 = 0 Тогда
						Форма.ТабличныйДокумент.Области.П000200006003.Значение = ОкрП000200009003;
					Иначе
						Форма.ТабличныйДокумент.Области.П000200006003.Значение = ОкрП000200008003 + ОкрП000200009003 - ОкрП000200010003;
					КонецЕсли;	
					
				КонецЕсли;
				
			Иначе
				
				Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела2 Цикл
					
					ЭлементТабл = ЭлементТабл.Данные[0].Значение;
					
					КодОперации = ЭлементТабл.П000200007003;
					
					Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда 
						
						ОкрП000200008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл.П000200008003);
						ОкрП000200009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл.П000200009003);
						ОкрП000200010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл.П000200010003);
						
						Если ОкрП000200008003 = 0 Тогда
							ЭлементТабл.П000200006003 = ОкрП000200009003;
						Иначе
							ЭлементТабл.П000200006003 = ОкрП000200008003 + ОкрП000200009003 - ОкрП000200010003;
						КонецЕсли;	
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
						
		Конецесли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
	
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300001005, ОбластьИмя) > 0 Тогда
				ОкрП000300001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300001003.Значение);
				Форма.ТабличныйДокумент.Области.П000300001005.Значение = ОкрП000300001003 * 18 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300002005, ОбластьИмя) > 0 Тогда
				ОкрП000300002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300002003.Значение);
				Форма.ТабличныйДокумент.Области.П000300002005.Значение = ОкрП000300002003 * 10 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300003005, ОбластьИмя) > 0 Тогда
				ОкрП000300003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300003003.Значение);
				Форма.ТабличныйДокумент.Области.П000300003005.Значение = ОкрП000300003003 * 18 / 118;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004005, ОбластьИмя) > 0 Тогда
				ОкрП000300004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300004003.Значение);
				Форма.ТабличныйДокумент.Области.П000300004005.Значение = ОкрП000300004003 * 10 / 110;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300006005, ОбластьИмя) > 0 Тогда
				ОкрП000300006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300006003.Значение);
				Форма.ТабличныйДокумент.Области.П000300006005.Значение = ОкрП000300006003 * 18 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300010505, ОбластьИмя) > 0 Тогда
				ОкрП000300010503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300010503.Значение);
				Форма.ТабличныйДокумент.Области.П000300010505.Значение = ОкрП000300010503 * 18 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300010605, ОбластьИмя) > 0 Тогда
				ОкрП000300010603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300010603.Значение);
				Форма.ТабличныйДокумент.Области.П000300010605.Значение = ОкрП000300010603 * 10 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300010705, ОбластьИмя) > 0 Тогда
				ОкрП000300010703 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300010703.Значение);
				Форма.ТабличныйДокумент.Области.П000300010705.Значение = ОкрП000300010703 * 18 / 118;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300010805, ОбластьИмя) > 0 Тогда
				ОкрП000300010803 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300010803.Значение);
				Форма.ТабличныйДокумент.Области.П000300010805.Значение = ОкрП000300010803 * 10 / 110;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300011005, ОбластьИмя) > 0 Тогда
				
				ОкрП000300001005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300001005.Значение);
				ОкрП000300002005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300002005.Значение);
				ОкрП000300003005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300003005.Значение);
				ОкрП000300004005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300004005.Значение);
				ОкрП000300005005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300005005.Значение);
				ОкрП000300006005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300006005.Значение);
		        ОкрП000300007005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300007005.Значение);
				ОкрП000300008005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300008005.Значение);
				ОкрП000300010505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300010505.Значение);
				ОкрП000300010605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300010605.Значение);
				ОкрП000300010705 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300010705.Значение);
				ОкрП000300010805 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300010805.Значение);
				ОкрП000300010905 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300010905.Значение);
								
				Форма.ТабличныйДокумент.Области.П000300011005.Значение = ОкрП000300001005 + ОкрП000300002005 + ОкрП000300003005 + ОкрП000300004005 + ОкрП000300005005
																	   + ОкрП000300006005 + ОкрП000300007005 + ОкрП000300008005 + ОкрП000300010505 + ОкрП000300010605
																	   + ОкрП000300010705 + ОкрП000300010805 + ОкрП000300010905;
				
			КонецЕсли;													   
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300019003, ОбластьИмя) > 0 Тогда
				
				ОкрП000300012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300012003.Значение);
				ОкрП000300013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300013003.Значение);
				ОкрП000300014003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300014003.Значение);
				ОкрП000300015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300015003.Значение);
				ОкрП000300016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300016003.Значение);
				ОкрП000300017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300017003.Значение);
				ОкрП000300018003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000300018003.Значение);
								
				Форма.ТабличныйДокумент.Области.П000300019003.Значение = ОкрП000300012003 + ОкрП000300013003 + ОкрП000300014003 + ОкрП000300015003
																	   + ОкрП000300016003 + ОкрП000300017003 + ОкрП000300018003;
				
			КонецЕсли;													   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300020003, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000300020003.Значение = Макс(Форма.ТабличныйДокумент.Области.П000300011005.Значение - Форма.ТабличныйДокумент.Области.П000300019003.Значение, 0);
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300021003, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000300021003.Значение = Макс(Форма.ТабличныйДокумент.Области.П000300019003.Значение - Форма.ТабличныйДокумент.Области.П000300011005.Значение, 0);												
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300001005, ОбластьИмя) > 0 Тогда
				ОкрП000300001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300001003);
				Форма.СтруктураДанныхРаздел3.П000300001005 = ОкрП000300001003 * 18 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300002005, ОбластьИмя) > 0 Тогда
				ОкрП000300002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300002003);
				Форма.СтруктураДанныхРаздел3.П000300002005 = ОкрП000300002003 * 10 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300003005, ОбластьИмя) > 0 Тогда
				ОкрП000300003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300003003);
				Форма.СтруктураДанныхРаздел3.П000300003005 = ОкрП000300003003 * 18 / 118;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004005, ОбластьИмя) > 0 Тогда
				ОкрП000300004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300004003);
				Форма.СтруктураДанныхРаздел3.П000300004005 = ОкрП000300004003 * 10 / 110;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300006005, ОбластьИмя) > 0 Тогда
				ОкрП000300006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300006003);
				Форма.СтруктураДанныхРаздел3.П000300006005 = ОкрП000300006003 * 18 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300010505, ОбластьИмя) > 0 Тогда
				ОкрП000300010503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300010503);
				Форма.СтруктураДанныхРаздел3.П000300010505 = ОкрП000300010503 * 18 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300010605, ОбластьИмя) > 0 Тогда
				ОкрП000300010603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300010603);
				Форма.СтруктураДанныхРаздел3.П000300010605 = ОкрП000300010603 * 10 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300010705, ОбластьИмя) > 0 Тогда
				ОкрП000300010703 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300010703);
				Форма.СтруктураДанныхРаздел3.П000300010705 = ОкрП000300010703 * 18 / 118;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300010805, ОбластьИмя) > 0 Тогда
				ОкрП000300010803 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300010803);
				Форма.СтруктураДанныхРаздел3.П000300010805 = ОкрП000300010803 * 10 / 110;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300011005, ОбластьИмя) > 0 Тогда
				
				ОкрП000300001005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300001005);
				ОкрП000300002005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300002005);
				ОкрП000300003005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300003005);
				ОкрП000300004005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300004005);
				ОкрП000300005005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300005005);
				ОкрП000300006005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300006005);
		        ОкрП000300007005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300007005);
				ОкрП000300008005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300008005);
				ОкрП000300010505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300010505);
				ОкрП000300010605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300010605);
				ОкрП000300010705 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300010705);
				ОкрП000300010805 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300010805);
				ОкрП000300010905 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300010905);
								
				Форма.СтруктураДанныхРаздел3.П000300011005 = ОкрП000300001005 + ОкрП000300002005 + ОкрП000300003005 + ОкрП000300004005 + ОкрП000300005005
														   + ОкрП000300006005 + ОкрП000300007005 + ОкрП000300008005 + ОкрП000300010505 + ОкрП000300010605
														   + ОкрП000300010705 + ОкрП000300010805 + ОкрП000300010905;
				
			КонецЕсли;													   
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300019003, ОбластьИмя) > 0 Тогда
				
				ОкрП000300012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300012003);
				ОкрП000300013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300013003);
				ОкрП000300014003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300014003);
				ОкрП000300015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300015003);
				ОкрП000300016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300016003);
				ОкрП000300017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300017003);
				ОкрП000300018003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000300018003);
								
				Форма.СтруктураДанныхРаздел3.П000300019003 = ОкрП000300012003 + ОкрП000300013003 + ОкрП000300014003 + ОкрП000300015003
														   + ОкрП000300016003 + ОкрП000300017003 + ОкрП000300018003;
				
			КонецЕсли;													   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300020003, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел3.П000300020003 = Макс(Форма.СтруктураДанныхРаздел3.П000300011005 - Форма.СтруктураДанныхРаздел3.П000300019003, 0);
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300021003, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел3.П000300021003 = Макс(Форма.СтруктураДанныхРаздел3.П000300019003 - Форма.СтруктураДанныхРаздел3.П000300011005, 0);												
			КонецЕсли;
			
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
				
	ИначеЕсли ИмяСтраницыПанели = "Раздел3_Прил1" Тогда
			
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
			
			Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет И (НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310008004, ОбластьИмя) > 0) Тогда
				
				Для Ном = 1 По 10 Цикл
					
					Форма.ТабличныйДокумент.Области["П000310008004_" + Ном].Значение
					 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					 	Форма.ТабличныйДокумент.Области["П000310007001"].Значение) / 10 * Форма.ТабличныйДокумент.Области["П000310008003_" + Ном].Значение / 100;
					
				КонецЦикла;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310009004, ОбластьИмя) > 0 Тогда
				
				Колонка4 = 0;
				
				Для Ном = 1 По 10 Цикл
					Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000310008004_" + Ном].Значение);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000310009004.Значение = Колонка4;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет И (НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310008004, ОбластьИмя) > 0) Тогда
				
				Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела3_Прил1 Цикл
					
					ЭлементТабл = ЭлементТабл.Данные[0].Значение;
					
					Для Ном = 1 По 10 Цикл
						
						ЭлементТабл["П000310008004_" + Ном]
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
						ЭлементТабл["П000310007001"]) / 10 * ЭлементТабл["П000310008003_" + Ном] / 100;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310009004, ОбластьИмя) > 0 Тогда
				
				Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела3_Прил1 Цикл
					
					ЭлементТабл = ЭлементТабл.Данные[0].Значение;
					
					Колонка4 = 0;
					
					Для Ном = 1 По 10 Цикл
						Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл["П000310008004_" + Ном]);
					КонецЦикла;
					
					ЭлементТабл.П000310009004 = Колонка4;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3_Прил2" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000320000202, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы32, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка2 = 0;
			
			Ном = 1;
			
			Для Каждого ЭлементТабл Из ТаблицаБлока Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
					Колонка2 = Колонка2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000320000102_" + Ном].Значение);
				Иначе
					Колонка2 = Колонка2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл.П000320000102);
				КонецЕсли;
				
				Ном = Ном + 1;
								
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				Форма.ТабличныйДокумент.Области.П000320000202.Значение = Колонка2;		
			Иначе
				Форма.СтруктураДанныхРаздел3_Прил2.П000320000202 = Колонка2;		
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000320000203, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы32, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка3 = 0;
			
			Ном = 1;
			
			Для Каждого ЭлементТабл Из ТаблицаБлока Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000320000103_" + Ном].Значение);
				Иначе
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТабл.П000320000103);
				КонецЕсли;
								
				Ном = Ном + 1;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				Форма.ТабличныйДокумент.Области.П000320000203.Значение = Колонка3;
			Иначе
				Форма.СтруктураДанныхРаздел3_Прил2.П000320000203 = Колонка3;		
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел4" Тогда

		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400012003, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				
				СуммаП000400003003 = 0;
				СуммаП000400004003 = 0;
				СуммаП000400005003 = 0;
								
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4]].Количество() Цикл
					
					СуммаП000400003003 = СуммаП000400003003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000400003003_" + Ном].Значение);
					СуммаП000400004003 = СуммаП000400004003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000400004003_" + Ном].Значение);
					СуммаП000400005003 = СуммаП000400005003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000400005003_" + Ном].Значение);
					
				КонецЦикла;
				
				СуммаП000400008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000400008003"].Значение);
				
				Форма.ТабличныйДокумент.Области.П000400012003.Значение = Макс((СуммаП000400003003 + СуммаП000400004003) - (СуммаП000400005003 + СуммаП000400008003), 0);
				
			Иначе
				
				СуммаП000400003003 = 0;
				СуммаП000400004003 = 0;
				СуммаП000400005003 = 0;
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4]].Количество() Цикл
					
					СуммаП000400003003 = СуммаП000400003003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4]][Ном - 1].П000400003003);
					СуммаП000400004003 = СуммаП000400004003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4]][Ном - 1].П000400004003);
					СуммаП000400005003 = СуммаП000400005003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4]][Ном - 1].П000400005003);
					
				КонецЦикла;
				
				СуммаП000400008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400008003);
				
				Форма.СтруктураДанныхРаздел4.П000400012003 = Макс((СуммаП000400003003 + СуммаП000400004003) - (СуммаП000400005003 + СуммаП000400008003), 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400013003, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				
				СуммаП000400003003 = 0;
				СуммаП000400004003 = 0;
				СуммаП000400005003 = 0;
								
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4]].Количество() Цикл
					
					СуммаП000400003003 = СуммаП000400003003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000400003003_" + Ном].Значение);
					СуммаП000400004003 = СуммаП000400004003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000400004003_" + Ном].Значение);
					СуммаП000400005003 = СуммаП000400005003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000400005003_" + Ном].Значение);
					
				КонецЦикла;
				
				СуммаП000400008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000400008003"].Значение);
				
				Форма.ТабличныйДокумент.Области.П000400013003.Значение = Макс((СуммаП000400005003 + СуммаП000400008003) - (СуммаП000400003003 + СуммаП000400004003), 0);
				
			Иначе
				
				СуммаП000400003003 = 0;
				СуммаП000400004003 = 0;
				СуммаП000400005003 = 0;
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4]].Количество() Цикл
					
					СуммаП000400003003 = СуммаП000400003003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4]][Ном - 1].П000400003003);
					СуммаП000400004003 = СуммаП000400004003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4]][Ном - 1].П000400004003);
					СуммаП000400005003 = СуммаП000400005003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4]][Ном - 1].П000400005003);
					
				КонецЦикла;
				
				СуммаП000400008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000400008003);
				
				Форма.СтруктураДанныхРаздел4.П000400013003 = Макс((СуммаП000400005003 + СуммаП000400008003) - (СуммаП000400003003 + СуммаП000400004003), 0);
				
			КонецЕсли;
			
		КонецЕсли;
				
		Расчет(Форма, "Раздел1", ОбластьИмя);
						
	ИначеЕсли ИмяСтраницыПанели = "Раздел5" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500008003, ОбластьИмя) > 0 Тогда
				
			СуммаП000500005003 = 0;
			
			Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела5 Цикл
				
				Если ЭлементТабл.ДанныеДопСтрок.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементТаблДанныеДопСтрок = ЭлементТабл.ДанныеДопСтрок[0].Значение;
				
				Для Ном = 0 По ЭлементТаблДанныеДопСтрок.Количество() - 1 Цикл
					
					СуммаП000500005003 = СуммаП000500005003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТаблДанныеДопСтрок[Ном].П000500005003);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела5 Цикл
				
				Если НЕ ЭлементТабл.Данные.Количество() = 0 Тогда
					
					ЭлементТабл.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
					ЭлементТабл.Данные[0].Значение.П000500008003 = СуммаП000500005003;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				Форма.ТабличныйДокумент.Области.П000500008003.Значение = СуммаП000500005003;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500009003, ОбластьИмя) > 0 Тогда
			
			СуммаП000500007003 = 0;
			
			Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела5 Цикл
				
				Если ЭлементТабл.ДанныеДопСтрок.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементТаблДанныеДопСтрок = ЭлементТабл.ДанныеДопСтрок[0].Значение;
				
				Для Ном = 0 По ЭлементТаблДанныеДопСтрок.Количество() - 1 Цикл
					
					СуммаП000500007003 = СуммаП000500007003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЭлементТаблДанныеДопСтрок[Ном].П000500007003);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела5 Цикл
				
				Если НЕ ЭлементТабл.Данные.Количество() = 0 Тогда
					
					ЭлементТабл.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
					ЭлементТабл.Данные[0].Значение.П000500009003 = СуммаП000500007003;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				Форма.ТабличныйДокумент.Области.П000500009003.Значение = СуммаП000500007003;
			КонецЕсли;
			
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
						
	ИначеЕсли ИмяСтраницыПанели = "Раздел6" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
	
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600005003, ОбластьИмя) > 0 Тогда
				
				СуммаП000600003003 = 0;
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6]].Количество() Цикл
					
					СуммаП000600003003 = СуммаП000600003003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000600003003_" + Ном].Значение);
					
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000600005003.Значение = СуммаП000600003003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600006003, ОбластьИмя) > 0 Тогда
				
				СуммаП000600004003 = 0;
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6]].Количество() Цикл
					
					СуммаП000600004003 = СуммаП000600004003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области["П000600004003_" + Ном].Значение);
					
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000600006003.Значение = СуммаП000600004003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600016003, ОбластьИмя) > 0 Тогда
				
				П000600005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600005003.Значение);
				П000600010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600010003.Значение);
				П000600013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600013003.Значение);
				
				П000600006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600006003.Значение);
				П000600009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600009003.Значение);
				П000600015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600015003.Значение);
				
				Форма.ТабличныйДокумент.Области.П000600016003.Значение = Макс((П000600005003 + П000600010003 + П000600013003)
																			- (П000600006003 + П000600009003 + П000600015003), 0);
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600017003, ОбластьИмя) > 0 Тогда
				
				П000600005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600005003.Значение);
				П000600010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600010003.Значение);
				П000600013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600013003.Значение);
				
				П000600006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600006003.Значение);
				П000600009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600009003.Значение);
				П000600015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600015003.Значение);
				
				Форма.ТабличныйДокумент.Области.П000600017003.Значение = Макс((П000600006003 + П000600009003 + П000600015003)
																			- (П000600005003 + П000600010003 + П000600013003), 0);
				
			КонецЕсли;
					
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600005003, ОбластьИмя) > 0 Тогда
				
				СуммаП000600003003 = 0;
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6]].Количество() Цикл
					
					СуммаП000600003003 = СуммаП000600003003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6]][Ном - 1].П000600003003);
					
				КонецЦикла;
				
				Форма.СтруктураДанныхРаздел6.П000600005003 = СуммаП000600003003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600006003, ОбластьИмя) > 0 Тогда
				
				СуммаП000600004003 = 0;
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6]].Количество() Цикл
					
					СуммаП000600004003 = СуммаП000600004003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6]][Ном - 1].П000600004003);
					
				КонецЦикла;
				
				Форма.СтруктураДанныхРаздел6.П000600006003 = СуммаП000600004003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600016003, ОбластьИмя) > 0 Тогда
				
				П000600005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600005003);
				П000600010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600010003);
				П000600013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600013003);
				
				П000600006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600006003);
				П000600009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600009003);
				П000600015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600015003);
				
				Форма.СтруктураДанныхРаздел6.П000600016003 = Макс((П000600005003 + П000600010003 + П000600013003)
				- (П000600006003 + П000600009003 + П000600015003), 0);
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600017003, ОбластьИмя) > 0 Тогда
				
				П000600005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600005003);
				П000600010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600010003);
				П000600013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600013003);
				
				П000600006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600006003);
				П000600009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600009003);
				П000600015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел6.П000600015003);
				
				Форма.СтруктураДанныхРаздел6.П000600017003 = Макс((П000600006003 + П000600009003 + П000600015003)
				- (П000600005003 + П000600010003 + П000600013003), 0);
				
			КонецЕсли;
																		
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
	ИначеЕсли ИмяСтраницыПанели = "" Тогда
			
		Расчет(Форма, "Раздел2", 	   ОбластьИмя);
		Расчет(Форма, "Раздел3_Прил1", ОбластьИмя);
		Расчет(Форма, "Раздел3_Прил2", ОбластьИмя);
		Расчет(Форма, "Раздел3", 	   ОбластьИмя);
		Расчет(Форма, "Раздел4", 	   ОбластьИмя);
		Расчет(Форма, "Раздел5",       ОбластьИмя);
		Расчет(Форма, "Раздел6",       ОбластьИмя);
		Расчет(Форма, "Раздел1",       ОбластьИмя);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, ИмяСтраницы, СумПоказатели, Округлять)
	
	ТаблицаРаздела = Неопределено;
	
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
	
	Если ТаблицаРаздела <> Неопределено Тогда
		
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		
		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
			
			ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные;
			
			Если ДанныеТаблПоле.Количество() = 0 Тогда
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
					
					Для Каждого СумПоказатель Из СумПоказатели Цикл
						
						СумПоказатели.Вставить(СумПоказатель.Ключ, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области[СумПоказатель.Ключ].Значение));
						
					КонецЦикла;
										
				КонецЕсли;
								
				Прервать;
				
			Иначе
				
				Для Каждого СумПоказатель Из СумПоказатели Цикл
					
					СумПоказатели.Вставить(СумПоказатель.Ключ, СумПоказатель.Значение + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ДанныеТаблПоле[0].Значение[СумПоказатель.Ключ]));
					
				КонецЦикла;
				
				Если ИмяСтраницы = "Раздел5" Тогда
					
					Прервать;
					
				КонецЕсли;
			
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		ОКТМО = ТабличныйДокумент.Области.П000200005003.Значение;
	КонецЕсли;
		
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		ТабличныйДокумент.Области.П000200005003.Значение = ОКТМО;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
				
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	ИндексУдаляемойСтраницы = ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные);
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ИндексУдаляемойСтраницы);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ИндексУдаляемойСтраницы);
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = ЭтаФорма[ИмяТекТабличногоПоля];
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление               = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИзменитьЦветЯчеекНаСервере();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено, НомерУдаляемойСтраницы = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем МассивВариантовЗаполненияСтраниц;
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	Если НомерУдаляемойСтраницы <> Неопределено
		И мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела)
		И мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];
		
		МассивВариантовЗаполненияСтраниц.Удалить(НомерУдаляемойСтраницы);
		
		КолСтраниц = ТаблицаСтраницРаздела.Количество();
		КолВариантов = МассивВариантовЗаполненияСтраниц.Количество();
		
		Для Инд = КолСтраниц + 1 По КолВариантов Цикл
			
			МассивВариантовЗаполненияСтраниц.Удалить(МассивВариантовЗаполненияСтраниц.Количество() - 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		ВставитьДополнительнуюСтрокуНаСервере();
	#Иначе
		ВставитьДополнительнуюСтрокуНаКлиенте();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	
	ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Удалить выбранную строку?'"), Символы.ПС);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		УдалитьДополнительнуюСтрокуНаСервере();
	#Иначе
		УдалитьДополнительнуюСтрокуНаКлиенте();
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьДополнительнуюСтрокуНаКлиенте()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		#Если НаКлиенте Тогда
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		#Иначе
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		#КонецЕсли
		
		Если ИмяГруппы = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	
	Если ИмяГруппы = "П00050000" Тогда
		
		ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "3003_" + КолСтрокСтр;
		
	ИначеЕсли СтрДлина(ИмяГруппы) = 9 Тогда
		
		ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "1003_" + КолСтрокСтр;
		
	Иначе
		
		ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;
		
	КонецЕсли;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если СтрНайти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли;
	
	Если НЕ СпециальноеДобавление Тогда
		
		РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;
	
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		Если СтрДлина(ИмяГруппы) = 9 Тогда
			
			ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
			
		Иначе
			
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
		КонецЕсли;
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			Если (ИмяГруппы = "П00050000" И НомерГрафы = 3)
			 ИЛИ (НомерГрафы = 1) Тогда
				ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
			КонецЕсли;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если (ИмяГруппы = "П00050000" И НомерГрафы = 3)
			 ИЛИ (НомерГрафы = 1) Тогда
				
				Если СтрДлина(ИмяГруппы) = 9 Тогда
					ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 4, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 4).Имя  = "УдалитьСтроку" + ИмяОбластиЯчейки;
				Иначе
					ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя  = "УдалитьСтроку" + ИмяОбластиЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
			Если ИмяКолонкиНомера <> Неопределено Тогда
				Если ИмяКолонкиНомера = ИмяКолонки Тогда
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ОбластьЯчейки.Значение = КолСтрокСтр1;
					Иначе
						ОбластьЯчейки.Текст = КолСтрокСтр1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяГруппыБлока = Неопределено Тогда
		
		Если ИмяГруппы = "П00050000" Тогда
		
			ИмяТекущейОбласти = ИмяГруппы + "3003_" + КолСтрокСтр;
		
		ИначеЕсли СтрДлина(ИмяГруппы) = 9 Тогда
			
			ИмяТекущейОбласти = ИмяГруппы + "1003_" + КолСтрокСтр;
			
		Иначе
			
			ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
			
		КонецЕсли;
		
		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			ОбластьТД.Гиперссылка = Истина;
			ОбластьТД.Текст = "х";
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
    	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;

	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли

	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		
		Если ИмяГруппы = "П00050000" Тогда
		
			ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "3003_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		
		ИначеЕсли СтрДлина(ИмяГруппы) = 9 Тогда
						
			ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "1003_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
			
		Иначе
			
			ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
			
		КонецЕсли;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
					
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		// Восстановим область.
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для НомерГрафы = 0 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					Если НомерГрафы = 0 Тогда
						
						Если ИмяГруппы = "П00050000" Тогда
		
							КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + "3003";
						
						ИначеЕсли СтрДлина(ИмяГруппы) = 9 Тогда
							
							КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + "1003";
							
						Иначе
							
							КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат( 1, "ЧЦ=2; ЧВН=");
							
						КонецЕсли;
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СтрДлина(ИмяГруппы) = 9 Тогда
							
						КолонкаИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
							
					Иначе
							
						КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
						
					КонецЕсли;	
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				Если ИмяГруппы = "П00050000" Тогда
		
					КолонкаТаблицыИмя = ИмяГруппы + "3003";
				
				ИначеЕсли СтрДлина(ИмяГруппы) = 9 Тогда
					
					КолонкаТаблицыИмя = ИмяГруппы + "1003";
					
				Иначе	
				
					КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
				КонецЕсли;	
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							// обновляем порядковый номер строки
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
		
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	Если ИмяГруппы = "П00050000" Тогда
		
		ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "3003_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	ИначеЕсли СтрДлина(ИмяГруппы) = 9 Тогда
		
		ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "1003_" + Формат(НомТекущейСтроки, "ЧГ=0");
		
	Иначе
		
		ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
		
	КонецЕсли;
		
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	ЕстьДопСтроки = Ложь;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
			ЕстьДопСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьДопСтроки Тогда
		Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
			Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
		РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	КонецЕсли;
		
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		Форма.РасчетНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = Область.Имя;

	Если Лев(ИмяЯчейки, 7) = "КодИМНС" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		Возврат;
	КонецЕсли;
		
	Если (ИмяЯчейки = "П000310002001")
	 ИЛИ (ИмяЯчейки = "П000310002002") 
	 ИЛИ (ИмяЯчейки = "П000310002003") 
	 ИЛИ (ИмяЯчейки = "П000310002004") 
	 ИЛИ (ИмяЯчейки = "П000310002005") 
	 ИЛИ (ИмяЯчейки = "П000310002006")
	 ИЛИ (ИмяЯчейки = "П000310002007") 
	 ИЛИ (ИмяЯчейки = "П000310002008") 
	 ИЛИ (ИмяЯчейки = "П000310002009") Тогда 

		СтандартнаяОбработка = Ложь;
		
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",	        ТабличныйДокумент.Области.П000310002001.Значение);
		РоссийскийАдрес.Вставить("Регион",          ТабличныйДокумент.Области.П000310002002.Значение);
		РоссийскийАдрес.Вставить("КодРегиона",      ТабличныйДокумент.Области.П000310002002.Значение);
		РоссийскийАдрес.Вставить("Район",           ТабличныйДокумент.Области.П000310002003.Значение);
		РоссийскийАдрес.Вставить("Город",           ТабличныйДокумент.Области.П000310002004.Значение);
		РоссийскийАдрес.Вставить("НаселенныйПункт", ТабличныйДокумент.Области.П000310002005.Значение);
		РоссийскийАдрес.Вставить("Улица",           ТабличныйДокумент.Области.П000310002006.Значение);
		РоссийскийАдрес.Вставить("Дом",             ТабличныйДокумент.Области.П000310002007.Значение);
		РоссийскийАдрес.Вставить("Корпус",          ТабличныйДокумент.Области.П000310002008.Значение);
		РоссийскийАдрес.Вставить("Квартира",        ТабличныйДокумент.Области.П000310002009.Значение);
		
		Если Регионы.Количество() = 0 Тогда
			ЗаполнитьРегионыНаСервере();
		КонецЕсли;
		
		Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["Регион"])));
			
		Если Регион.Количество() > 0 Тогда
			
			РоссийскийАдрес["Регион"] = Регион[0].Наим;
			
		КонецЕсли;
		
		ЗначенияПолей = Новый СписокЗначений;
		
		ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],       "Регион");
		ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегион"],       "КодРегиона");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
		ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
								 		
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
																												  + РоссийскийАдрес["Регион"] + ","
																												  + РоссийскийАдрес["Район"] + ","
																												  + РоссийскийАдрес["Город"] + ","
																												  + РоссийскийАдрес["НаселенныйПункт"] + ","
																												  + РоссийскийАдрес["Улица"] + ","
																												  + РоссийскийАдрес["Дом"] + ","
																												  + РоссийскийАдрес["Корпус"] + ","
																												  + РоссийскийАдрес["Квартира"]);
								
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
		ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
						
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяЯчейки);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КодПоказателя = ПараметрВводаПоля.Показатель;
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		
		ТребРезультат = 0;
		
		Если КодПоказателя = "Период" Тогда
			
			НомерКвартала = Число(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к"));
			
			ТребРезультат = НомерКвартала;
			
		КонецЕсли;
		
		Если ТребРезультат <> 0 Тогда
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
					ТЗВыбора.Удалить(ЭлементТЗ);
			 	КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
				
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	Иначе
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ТабличныйДокумент.Области.П000310002001.Значение = РоссийскийАдрес_["Индекс"];
		ТабличныйДокумент.Области.П000310002002.Значение = РоссийскийАдрес_["КодРегиона"];
		ТабличныйДокумент.Области.П000310002003.Значение = РоссийскийАдрес_["Район"];
		ТабличныйДокумент.Области.П000310002004.Значение = РоссийскийАдрес_["Город"];
		ТабличныйДокумент.Области.П000310002005.Значение = РоссийскийАдрес_["НаселенныйПункт"];
		ТабличныйДокумент.Области.П000310002006.Значение = РоссийскийАдрес_["Улица"];
		ТабличныйДокумент.Области.П000310002007.Значение = РоссийскийАдрес_["Дом"];
		ТабличныйДокумент.Области.П000310002008.Значение = РоссийскийАдрес_["Корпус"];
		ТабличныйДокумент.Области.П000310002009.Значение = РоссийскийАдрес_["Квартира"];
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ТабличныйДокумент.Области.Найти("ПерейтиКПомощнику") <> Неопределено Тогда
		Если Область.Верх = ТабличныйДокумент.Области.ПерейтиКПомощнику.Верх Тогда
			СтандартнаяОбработка = Ложь;
			РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуПомощникаПоУчетуНДС(Область.Расшифровка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		Если Область.Имя = "ОрганизацииДляЗаполненияОтчета" И Область.Гиперссылка Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", Новый Структура("Организация", СтруктураРеквизитовФормы.Организация));
			ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.ГруппаОрганизаций);
			
			ФормаВыбораОрганизаций = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораОрганизаций", ПараметрыФормы, ЭтаФорма);
			ФормаВыбораОрганизаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВыбораОрганизаций.Открыть();
			
		КонецЕсли;
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		УдалитьСтроку("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	
	Если ПараметрВводаПоля.Количество() > 0 Тогда
		
		ПараметрВводаПоля = ПараметрВводаПоля[0];
		
		Если ПараметрВводаПоля.Тип = "ОКТМО" И ЗначениеЗаполнено(Область.Значение) Тогда
			ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
			Для Инд = ДлинаЗначения+1 По 11 Цикл
				Область.Значение = СокрЛП(Область.Значение) + "0";
			КонецЦикла;
		КонецЕсли;
		
		Если СтрДлина(СокрЛП(Область.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Область.Значение)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длина значения показателя должна быть равна %1!'"), ПараметрВводаПоля.Длина);
			Сообщение.Сообщить();
		КонецЕсли;
	
	КонецЕсли;
	
	Если Область.Имя = "ОКВЭД" Тогда
		
		Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);
			Сообщение.Сообщить();
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда
		
		НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(Область.Значение = 0, 0, 1);
		
		УстановитьДоступностьПризнакаАктуальностиРанееОтправленныхСведений();
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		
		Модифицированность = Истина;
		
	ИначеЕсли Область.Имя = "ДатаПодписи" Тогда
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1" 
	 ИЛИ ИмяРаздела = "Раздел2" 
	 ИЛИ ИмяРаздела = "Раздел3" 
	 ИЛИ ИмяРаздела = "Раздел3_Прил1" 
	 ИЛИ ИмяРаздела = "Раздел3_Прил2" 
	 ИЛИ ИмяРаздела = "Раздел4" 
	 ИЛИ ИмяРаздела = "Раздел5" 
	 ИЛИ ИмяРаздела = "Раздел6" 
	 ИЛИ ИмяРаздела = "Раздел7" Тогда
		
		ИмяОбласти = Область.Имя;
		
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
		
		Если ИмяРаздела = "Раздел5" Тогда
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяРаздела, Ложь);
		КонецЕсли;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	ИначеЕсли ИмяРаздела = "Титульный" Тогда
		
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
    	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",                    СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена",            СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц",                         СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов",                         СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения",                        СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения",                СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения",      СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры",                              мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			
			ИзменитьЦветЯчеек(ЭтаФорма);
			
		Иначе
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СохрП000100001003 = СтруктураДанныхРаздел1.П000100001003;
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел3.Очистить();
	СтруктураДанныхРаздел3_Прил2.Очистить();
	СтруктураДанныхРаздел4.Очистить();
	СтруктураДанныхРаздел6.Очистить();
	СтруктураДанныхРаздел7.Очистить();
	
	ТаблицаСтраницыРаздела2.Очистить();
	ТаблицаСтраницыРаздела3_Прил1.Очистить();
	ТаблицаСтраницыРаздела5.Очистить();
	
	ОчиститьСведенияРазделаНДС("Раздел8");
	ОчиститьСведенияРазделаНДС("Раздел8_Прил1");
	ОчиститьСведенияРазделаНДС("Раздел9");
	ОчиститьСведенияРазделаНДС("Раздел9_Прил1");
	ОчиститьСведенияРазделаНДС("Раздел10");
	ОчиститьСведенияРазделаНДС("Раздел11");
	ОчиститьСведенияРазделаНДС("Раздел12");
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный"
	   И НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ЗаполнитьОКТМО(ЭтаФорма, СокрЛП(СохрП000100001003));
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
			
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		КонецЕсли;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["КодИМНС"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП1"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантахИКодПоОКТМО(РезультатВыбора.Ссылка);
		
		Модифицированность = Истина;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя
	 ИЛИ Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) = КодПоказателя
	 ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
		
	Иначе
		
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
		
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя
	 ИЛИ Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) = КодПоказателя
	 ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		
		Область.Значение = РезультатВыбора[КолонкаПоиска];
		
	Иначе
		
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
	Если Область.Имя = "П000200007003" Тогда
		#Если ВебКлиент Тогда
			ИзменитьЦветЯчеекНаСервере(Область.Имя);
		#Иначе
			ИзменитьЦветЯчеекНаКлиенте(Область.Имя);
		#КонецЕсли
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
			
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
	ВывестиРезультатПроверки();
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	РезультатВыгрузки = УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	СохраненыеСведенияОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ЗаполненоНовымАлгоритмом = Ложь;
	Если СохраненыеСведенияОтчета.Свойство("ВерсияАвтозаполнения")
	   И СохраненыеСведенияОтчета.ВерсияАвтозаполнения = "2015Кв3" Тогда
		ЗаполненоНовымАлгоритмом = Истина;
	КонецЕсли;
	
	Если ЗаполненоНовымАлгоритмом Тогда
		ПроверитьВыгрузкуПоНовомуАлгоритмуНаСервере();
		
		Результат = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки);
		
		Если Результат.КоличествоОшибок <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
		
	Иначе
		Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = Новый Массив;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел8(ПараметрыВыгрузки);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел8_Прил1(ПараметрыВыгрузки);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел9(ПараметрыВыгрузки);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел9_Прил1(ПараметрыВыгрузки);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел10(ПараметрыВыгрузки);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел11(ПараметрыВыгрузки);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел12(ПараметрыВыгрузки);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ЗаполнитьСведенияОРазделах8_12(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	ТекстВыгрузкиРазделов1_7 = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	ТекстВыгрузки.Добавить(РезультатВыгрузкиВоВременномХранилище(ТекстВыгрузкиРазделов1_7, ПараметрыВыгрузки.ИдФайл + ".xml", "НДС2015Разделы1_7"));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция РезультатВыгрузкиВоВременномХранилище(ТекстВыгрузки, ИмяФайлаВыгрузки, ТипФайлаВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки);
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", ТипФайлаВыгрузки);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	Префикс = "ПолеТабличногоДокумента";
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		Если СтруктураРеквизитовФормы.ОтчетСтарогоОбразца Тогда
			// Конвертация данных после перехода с 2.0 на 3.0.
			ИмяРаздела = СтрЗаменить(Раздел.Ключ, Префикс, "");
			ВосстановитьСтруктуруДанныхРазделаСтарогоОбразца(ПоказателиОтчета, Раздел.Ключ, ИмяРаздела);
		КонецЕсли;
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.ОтчетСтарогоОбразца Тогда
		// Конвертация данных после перехода с 2.0 на 3.0.
		ВосстановитьДанныеМногостраничныхРазделовСтарогоОбразца(СохрСтруктура.ДанныеМногостраничныхРазделов);
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
	ДанныеРаздела2 = мДанныеОтчета.Раздел2;
	Для Каждого ЛистРаздела2 Из ДанныеРаздела2 Цикл
		ДанныеЛистаРаздела2 = ЛистРаздела2.Данные[0].Значение;
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(СокрЛП(ДанныеЛистаРаздела2.П000200002003));
		ДанныеЛистаРаздела2.Вставить("П000200002003_1", ФИО.Фамилия);
		ДанныеЛистаРаздела2.Вставить("П000200002003_2", ФИО.Имя);
		ДанныеЛистаРаздела2.Вставить("П000200002003_3", ФИО.Отчество);
	КонецЦикла;
	
	ДанныеРаздела3Прил1 = мДанныеОтчета.Раздел3_Прил1;
	Для Каждого ЛистРаздела3Прил1 Из ДанныеРаздела3Прил1 Цикл
		ДанныеЛистаРаздела3Прил1 = ЛистРаздела3Прил1.Данные[0].Значение;
		ДанныеЛистаРаздела3Прил1.Вставить("П100310002002", ?(ЗначениеЗаполнено(ДанныеЛистаРаздела3Прил1.П000310002002)
			, Прав("0" + СокрЛП(ДанныеЛистаРаздела3Прил1.П000310002002), 2), ""));
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",	   РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",		   "1151001");
	ПараметрыВыгрузки.Вставить("ДатаДок",	   Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",	   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",	   СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("ВидДок",	   Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",	   СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭДОрг",     СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("ТелОрг",	   СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",	   СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",	   СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",	   СокрЛП(Титульный.КПП1));
	ПараметрыВыгрузки.Вставить("КодФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННОргРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППОргРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",	СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",		 ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",		НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",		?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",		СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",		ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",			ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта",	ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы", "NO_NDS_1_003_00_05_04_02.xsd");
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_NDS");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДС");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	СохраненныеДанные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел8", Формат(СохраненныеДанные.АктуальностьСведенийРаздел8, "ЧН="));
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел8_Прил1", Формат(СохраненныеДанные.АктуальностьСведенийРаздел8_Прил1, "ЧН="));
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел9", Формат(СохраненныеДанные.АктуальностьСведенийРаздел9, "ЧН="));
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел9_Прил1", Формат(СохраненныеДанные.АктуальностьСведенийРаздел9_Прил1, "ЧН="));
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел10", Формат(СохраненныеДанные.АктуальностьСведенийРаздел10, "ЧН="));
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел11", Формат(СохраненныеДанные.АктуальностьСведенийРаздел11, "ЧН="));
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел12", Формат(СохраненныеДанные.АктуальностьСведенийРаздел12, "ЧН="));
	
	ДанныеСегментированы = СохраненныеДанные.Свойство("УспешноеАвтозаполнение")
	                     И СохраненныеДанные.УспешноеАвтозаполнение = Истина;
	ПараметрыВыгрузки.Вставить("ДанныеСегментированы", ДанныеСегментированы);
	
	УстановитьПризнакиВыгрузкиРазделов8и9(ПараметрыВыгрузки);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакиВыгрузкиРазделов8и9(ПараметрыВыгрузки)
	
	Раздел3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел4 = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	Раздел5 = мДанныеОтчета.Раздел5;
	Раздел6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	ЗаполненаРаздел4Строка030 = Ложь;
	ЗаполненаРаздел4Строка040 = Ложь;
	ЗаполненаРаздел4Строка050 = Ложь;
	//
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел4, "П000400003003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		ЗаполненаРаздел4Строка030 = ЗаполненаРаздел4Строка030 ИЛИ Раздел4["П000400003003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		ЗаполненаРаздел4Строка040 = ЗаполненаРаздел4Строка040 ИЛИ Раздел4["П000400004003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		ЗаполненаРаздел4Строка050 = ЗаполненаРаздел4Строка050 ИЛИ Раздел4["П000400005003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ЗаполненаРаздел5Строка050 = Ложь;
	ЗаполненаРаздел5Строка070 = Ложь;
	
	Для Каждого ЛистРаздела Из Раздел5 Цикл
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		
		НомерСтроки = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛиста, "П000500005003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			ЗаполненаРаздел5Строка050 = ЗаполненаРаздел5Строка050 ИЛИ ДанныеЛиста["П000500005003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
			ЗаполненаРаздел5Строка070 = ЗаполненаРаздел5Строка070 ИЛИ ДанныеЛиста["П000500007003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполненаРаздел6Строка040 = Ложь;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел6, "П000600004003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		ЗаполненаРаздел6Строка040 = ЗаполненаРаздел6Строка040 ИЛИ Раздел6["П000600004003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ДанныеРаздел8_Прил1 = ДанныеРазделаНДСИзРегистра("Раздел8_Прил1", ПараметрыВыгрузки.ДанныеСегментированы);
	ДанныеРаздел9_Прил1 = ДанныеРазделаНДСИзРегистра("Раздел9_Прил1", ПараметрыВыгрузки.ДанныеСегментированы);
	
	Раздел8Обязателен = ДанныеРаздел8_Прил1 <> Неопределено
	                ИЛИ Раздел3.П000300019003 > 0
	                ИЛИ ЗаполненаРаздел4Строка030
	                ИЛИ ЗаполненаРаздел4Строка040
	                ИЛИ ЗаполненаРаздел5Строка050
	                ИЛИ ЗаполненаРаздел5Строка070
	                ИЛИ ЗаполненаРаздел6Строка040
	                ИЛИ Раздел6.П000600014003 > 0;
	
	ПараметрыВыгрузки.Вставить("Раздел8Обязателен", Раздел8Обязателен);
	
	Раздел9Обязателен = ДанныеРаздел9_Прил1 <> Неопределено
	                ИЛИ Раздел3.П000300011005 > 0
	                ИЛИ ЗаполненаРаздел4Строка050
	                ИЛИ Раздел4.П000400008003 > 0
	                ИЛИ Раздел6.П000600010003 > 0
	                ИЛИ Раздел6.П000600012003 > 0;
	
	ПараметрыВыгрузки.Вставить("Раздел9Обязателен", Раздел9Обязателен);
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	ИмяМакетаСтруктурыВыгрузки = "СхемаВыгрузки504";
		
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакетаСтруктурыВыгрузки);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда	
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ПроблемныеИННКПП = Новый ТаблицаЗначений;
	ПроблемныеИННКПП.Колонки.Добавить("ИННКПП", Новый ОписаниеТипов("Строка"));
	ПроблемныеИННКПП.Индексы.Добавить("ИННКПП");
	
	КонтекстВыполнения = Новый Структура;
	КонтекстВыполнения.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
	КонтекстВыполнения.Вставить("ДеревоВыгрузки", ДеревоВыгрузки);
	КонтекстВыполнения.Вставить("ПроблемныеИННКПП", ПроблемныеИННКПП);
	
	ПроверитьЗаполнение_ТитульныйЛист(КонтекстВыполнения, СтатусПроверки);
	ПроверитьЗаполнение_Раздел1(КонтекстВыполнения, СтатусПроверки);
	ПроверитьЗаполнение_Раздел2(КонтекстВыполнения, СтатусПроверки);
	ПроверитьЗаполнение_Раздел3Приложение1(КонтекстВыполнения, СтатусПроверки);
	ПроверитьЗаполнение_Раздел3Приложение2(КонтекстВыполнения, СтатусПроверки);
	ПроверитьЗаполнение_Раздел4(КонтекстВыполнения, СтатусПроверки);
	ПроверитьЗаполнение_Раздел5(КонтекстВыполнения, СтатусПроверки);
	ПроверитьЗаполнение_Раздел6(КонтекстВыполнения, СтатусПроверки);
	ПроверитьЗаполнение_Раздел7(КонтекстВыполнения, СтатусПроверки);
	
	ПроверитьРазделыНДС(КонтекстВыполнения, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнение_ТитульныйЛист(КонтекстВыполнения, СтатусПроверки)
	
	ПараметрыВыгрузки = КонтекстВыполнения.ПараметрыВыгрузки;
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	РазрешенныеКодыПоМесту = "116,213,214,215,216,227,231,250,331";
	ВозможныеКодыПоМесту = СтрРазделить(РазрешенныеКодыПоМесту, ",");
	
	РазрешенныеКодыПериода = "01,02,03,04,05,06,07,08,09,10,11,12,21,22,23,24,51,54,55,56,71,72,73,74,75,76,77,78,79,80,81,82";
	ВозможныеКодыПериода = СтрРазделить(РазрешенныеКодыПериода, ",");
	
	СписокКодовПериодаПриПоМесту250 = "01,02,03,04,05,06,07,08,09,10,11,12";
	ДопустимыеКодыПериодаПриПоМесту250 = СтрРазделить(СписокКодовПериодаПриПоМесту250, ",");
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ОписаниеОшибки = "На титульном листе не указан ИНН индивидуального предпринимателя. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ИНН1");
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			ОписаниеОшибки = "На титульном листе указан ИНН индивидуального предпринимателя не состоящий из 12 цифр. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ИНН1");
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияИП) Тогда
			ОписаниеОшибки = "На титульном листе не указана фамилия налогоплательщика. Укажите фамилию индивидуального предпринимателя в справочнике организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "НаимОрг");
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяИП) Тогда
			ОписаниеОшибки = "На титульном листе не указано имя налогоплательщика. Укажите имя индивидуального предпринимателя в справочнике организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "НаимОрг");
		КонецЕсли;
		
	Иначе
		Если ПустаяСтрока(ПараметрыВыгрузки.ИННОрг) Тогда
			ОписаниеОшибки = "На титульном листе не указан ИНН организации. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ИНН1");
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			ОписаниеОшибки = "На титульном листе указан ИНН организации не состоящий из 10 цифр. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ИНН1");
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
			ОписаниеОшибки = "На титульном листе не указан КПП организации. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "КПП1");
			
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
			ОписаниеОшибки = "На титульном листе указан КПП организации не состоящий из 9 символов. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, "Неверно задан КПП организации!", "Титульный", "КПП1");
			
		Иначе
			Если ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
				Символы56КПП = Сред(ПараметрыВыгрузки.КППОрг, 5, 2);
				Если ПараметрыВыгрузки.ПоМесту = "213" Тогда
					Если НЕ (Символы56КПП = "50") Тогда
						ОписаниеОшибки = "Код по месту представления 213 следует указывать тогда, когда 5 и 6 символы КПП равны ""50"".";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "КПП1");
					КонецЕсли;
				ИначеЕсли ПараметрыВыгрузки.ПоМесту = "250" Тогда
					Если НЕ (Символы56КПП = "36" ИЛИ Символы56КПП = "51" ИЛИ Символы56КПП = "76") Тогда
						ОписаниеОшибки = "Код по месту представления 250 следует указывать тогда, когда 5 и 6 символы КПП равны ""36"" или ""51"" или ""76"".";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "КПП1");
					КонецЕсли;
				ИначеЕсли ПараметрыВыгрузки.ПоМесту = "227" Тогда
					Если НЕ (Символы56КПП = "4T" ИЛИ Символы56КПП = "5G") Тогда
						ОписаниеОшибки = "Код по месту представления 227 следует указывать тогда, когда 5 и 6 символы КПП равны ""4T"" или ""5G"".";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "КПП1");
					КонецЕсли;
				ИначеЕсли ПараметрыВыгрузки.ПоМесту = "214" ИЛИ ПараметрыВыгрузки.ПоМесту = "215" ИЛИ ПараметрыВыгрузки.ПоМесту = "216"
				      ИЛИ ПараметрыВыгрузки.ПоМесту = "231" ИЛИ ПараметрыВыгрузки.ПоМесту = "331" Тогда
					Если Символы56КПП = "36" ИЛИ Символы56КПП = "76" ИЛИ Символы56КПП = "4T" ИЛИ Символы56КПП = "5G" Тогда
						ОписаниеОшибки = "Код по месту представления " + ПараметрыВыгрузки.ПоМесту + " не следует указывать, когда 5 и 6 символы КПП равны ""36"", ""76"", ""4T"" или ""5G"".";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "КПП1");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
				ОписаниеОшибки = "На титульном листе не указан налогоплательщик. Заполните наименование в справочнике организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "НаимОрг");
			КонецЕсли;
			
		КонецЕсли;
		
		ФормРеорг = СокрЛП(ПараметрыВыгрузки.КодФормРеорг);
		ИННРеорг  = СокрЛП(ПараметрыВыгрузки.ИННОргРеорг);
		КППРеорг  = СокрЛП(ПараметрыВыгрузки.КППОргРеорг);
		Если ЗначениеЗаполнено(ФормРеорг) ИЛИ ЗначениеЗаполнено(ИННРеорг) ИЛИ ЗначениеЗаполнено(КППРеорг) Тогда
			Если НЕ ЗначениеЗаполнено(ФормРеорг) Тогда
				ОписаниеОшибки = "На титульном листе не указан код формы реорганизации.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "КодФормыРеорганизации");
			ИначеЕсли ЗначениеЗаполнено(ФормРеорг) И СтрНайти("0,1,2,3,5,6", ФормРеорг) = 0 Тогда
				ОписаниеОшибки = "На титульном листе указан код формы реорганизации, не предусмотренный порядком заполнения.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "КодФормыРеорганизации");
			КонецЕсли;
			
			Если ФормРеорг <> "0" Тогда
				Если НЕ ЗначениеЗаполнено(ИННРеорг) И НЕ ЗначениеЗаполнено(КППРеорг) Тогда
					ОписаниеОшибки = "На титульном листе не указаны ИНН и КПП реорганизованной организации.";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ИННРеорганизованнойОрганизации");
				Иначе
					Если НЕ ЗначениеЗаполнено(ИННРеорг) Тогда
						ОписаниеОшибки = "На титульном листе не указан ИНН реорганизованной организации.";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ИННРеорганизованнойОрганизации");
					ИначеЕсли СтрДлина(ИННРеорг) <> 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИННРеорг) Тогда
						ОписаниеОшибки = "На титульном листе указан ИНН реорганизованной организации не состоящий из 10 цифр.";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ИННРеорганизованнойОрганизации");
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(КППРеорг) Тогда
						ОписаниеОшибки = "На титульном листе не указан КПП реорганизованной организации.";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "КППРеорганизованнойОрганизации");
					ИначеЕсли СтрДлина(КППРеорг) <> 9 Тогда
						ОписаниеОшибки = "На титульном листе указан КПП реорганизованной организации не состоящий из 9 символов.";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "КППРеорганизованнойОрганизации");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПериодОтч) Тогда
		ОписаниеОшибки = "На титульном листе не указан код налогового периода.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "Период");
		
	ИначеЕсли ПараметрыВыгрузки.ПоМесту <> "250" И ДопустимыеКодыПериодаПриПоМесту250.Найти(ПараметрыВыгрузки.ПериодОтч) <> Неопределено Тогда
		ОписаниеОшибки = "Код налогового периода " + ПараметрыВыгрузки.ПериодОтч + " на титульном листе допускается только при коде по месту представления 250.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "Период");
		
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.ПериодОтч) = Неопределено Тогда
		ОписаниеОшибки = "На титульном листе указан код отчетного периода, не предусмотренный порядком заполнения декларации.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "Период");
		
	КонецЕсли;
	
	КодНалоговогоОргана = СокрЛП(ПараметрыВыгрузки.КодИФНС);
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		ОписаниеОшибки = "На титульном листе не указан код налогового органа, в который представляется декларация.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "КодИМНС");
	ИначеЕсли СтрДлина(КодНалоговогоОргана) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНалоговогоОргана) Тогда
		ОписаниеОшибки = "На титульном листе указан код налогового органа, не состоящий из 4 цифр.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "КодИМНС");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		ОписаниеОшибки = "На титульном листе не указан код по месту нахождения (учета).";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ПоМесту");
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		ОписаниеОшибки = "На титульном листе задан код по месту нахождения (учета), не предусмотренный порядком заполнения декларации.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ПоМесту");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		ОписаниеОшибки = "На титульном листе не указан кода вида деятельности по ОКВЭД.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ОКВЭД");
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		ОписаниеОшибки = "На титульном листе указан неверный кода вида деятельности по ОКВЭД. Допустимы значения, соответствующие следующим образцам (X - любая цифра): ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"".";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ОКВЭД");
	КонецЕсли;
	
	ПодписаноИндивидуальнымПредпринимателем = (ПараметрыВыгрузки.ЭтоПБОЮЛ И ПараметрыВыгрузки.ТипПодписанта = "1");
	
	Если НЕ ПодписаноИндивидуальнымПредпринимателем Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			ОписаниеОшибки = "На титульном листе не указана фамилия подписанта. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ОргПодписант");
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			ОписаниеОшибки = "На титульном листе не указано имя подписанта. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ОргПодписант");
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		ОписаниеОшибки = "На титульном листе не указано наименование документа, удостоверяющего полномочия представителя. Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Титульный", "ДокУпПред");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел1(КонтекстВыполнения, СтатусПроверки)
	
	ПараметрыВыгрузки = КонтекстВыполнения.ПараметрыВыгрузки;
	
	ПоМесту = ПараметрыВыгрузки.ПоМесту;
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	
	ОКТМО = СокрЛП(ДанныеРаздела.П000100001003);
	
	Если ПоМесту = "231" Тогда
		Если СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 И СтрДлина(ОКТМО) <> 0 Тогда
			ОписаниеОшибки = "В строке 010 раздела 1 указан код по ОКТМО, не соответствующий Общероссийскому классификатору территорий муниципальных образований.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел1", "П000100001003");
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
			ОписаниеОшибки = "В строке 010 раздела 1 не указан код по ОКТМО.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел1", "П000100001003");
		ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
			ОписаниеОшибки = "В строке 010 раздела 1 указан код по ОКТМО, не соответствующий Общероссийскому классификатору территорий муниципальных образований.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел1", "П000100001003");
		КонецЕсли;
	КонецЕсли;
	
	КБК = СокрЛП(ДанныеРаздела.П000100002003);
	
	Если ПоМесту = "231" Тогда
		Если СтрДлина(ОКТМО) = 0 Тогда
			Если СтрДлина(КБК) <> 20 И СтрДлина(КБК) <> 0 Тогда
				ОписаниеОшибки = "В строке 020 раздела 1 указан код бюджетной классификации, не соответствующий Классификатору кодов классификации доходов бюджетов Российской Федерации.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел1", "П000100002003");
			КонецЕсли;
		Иначе
			Если СтрДлина(КБК) = 0 Тогда
				ОписаниеОшибки = "В строке 020 раздела 1 не указан код бюджетной классификации.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел1", "П000100002003");
			ИначеЕсли СтрДлина(КБК) <> 20 Тогда
				ОписаниеОшибки = "В строке 020 раздела 1 указан код бюджетной классификации, не соответствующий Классификатору кодов классификации доходов бюджетов Российской Федерации.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел1", "П000100002003");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СтрДлина(КБК) = 0 Тогда
			ОписаниеОшибки = "В строке 020 раздела 1 не указан код бюджетной классификации.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел1", "П000100002003");
		ИначеЕсли СтрДлина(КБК) <> 20 Тогда
			ОписаниеОшибки = "В строке 020 раздела 1 указан код бюджетной классификации, не соответствующий Классификатору кодов классификации доходов бюджетов Российской Федерации.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел1", "П000100002003");
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеСтроки040 = Окр(ДанныеРаздела.П000100004003, 0);
	ЗначениеСтроки050 = Окр(ДанныеРаздела.П000100005003, 0);
	
	ЗаполненоПоказателей = 0;
	ЗаполненоПоказателей = ЗаполненоПоказателей + ?(ЗначениеЗаполнено(ЗначениеСтроки040), 1, 0);
	ЗаполненоПоказателей = ЗаполненоПоказателей + ?(ЗначениеЗаполнено(ЗначениеСтроки050), 1, 0);
	
	Если ЗаполненоПоказателей > 1 Тогда
		ОписаниеОшибки = "Должна быть заполнена только одна из строк 040 и 050 Раздела 1.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел1", "П000100003003");
	КонецЕсли;
	
	Если ПоМесту = "227" Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П000100006003) Тогда
			ОписаниеОшибки = "В строке 060 раздела 1 не указан регистрационный номер договора инвестиционного товарищества.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел1", "П000100006003");
		КонецЕсли;
		
		ПроверяемаяДата = ДанныеРаздела.П000100007003;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В строке 070 раздела 1 не указана дата начала действия договора инвестиционного товарищества.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел1", "П000100007003");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В строке 070 раздела 1 дата начала действия договора инвестиционного товарищества выходит за допустимый период с 01.01.1900 по 31.12.2099.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел1", "П000100007003");
			КонецЕсли;
		КонецЕсли;
		
		ПроверяемаяДата = ДанныеРаздела.П000100008003;
		Если ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В строке 080 раздела 1 дата окончания действия договора инвестиционного товарищества выходит за допустимый период с 01.01.1900 по 31.12.2099.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел1", "П000100008003");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел2(КонтекстВыполнения, СтатусПроверки)
	
	ПараметрыВыгрузки = КонтекстВыполнения.ПараметрыВыгрузки;
	ДеревоВыгрузки = КонтекстВыполнения.ДеревоВыгрузки;
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Раздел2Пуст = Истина;
	НомерЛиста = 0;
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		ДанныеЛистаРаздела2 = ЛистРаздела2.Данные[0].Значение;
		
		НомерЛиста = НомерЛиста + 1;
		
		Если ЭкземплярРазделаПуст(ДеревоВыгрузки, "Раздел2", ДанныеЛистаРаздела2, "П000200005003") Тогда
			Продолжить;
		КонецЕсли;
		
		Раздел2Пуст = Ложь;
		
		КПП = СокрЛП(ДанныеЛистаРаздела2.П000200001003);
		Если СтрДлина(КПП) <> 0 И СтрДлина(КПП) <> 9 Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерЛиста + " указан КПП подразделения иностранной организации, не состоящий из 9 символов.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2", "П000200001003", НомерЛиста);
		КонецЕсли;
		
		ИНН = СокрЛП(ДанныеЛистаРаздела2.П000200003003);
		Если ЗначениеЗаполнено(ИНН) Тогда
			Если СтрДлина(ИНН) <> 10 И СтрДлина(ИНН) <> 12 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
				ОписаниеОшибки = "В разделе 2 на странице " + НомерЛиста + " указан ИНН налогоплательщика - продавца, не состоящий из 10 или 12 цифр.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2", "П000200003003", НомерЛиста);
			КонецЕсли;
		КонецЕсли;
		
		// Наименование налогоплательщика-продавца.
		КодОперации = СокрЛП(ДанныеЛистаРаздела2.П000200007003);
		Если (КодОперации = "1011712" ИЛИ КодОперации = "1011703")
		   И НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200002003) Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерЛиста + " не указано наименование налогоплательщика-продавца.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2", "П000200002003", НомерЛиста);
		ИначеЕсли СтрДлина(ИНН) = 10 И НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200002003) Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерЛиста + " не указано наименование налогоплательщика-продавца.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2", "П000200002003", НомерЛиста);
		ИначеЕсли СтрДлина(ИНН) = 12 Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200002003_1) Тогда
				ОписаниеОшибки = "В разделе 2 на странице " + НомерЛиста + " не указано имя налогоплательщика-продавца.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2", "П000200002003", НомерЛиста);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200002003_2) Тогда
				ОписаниеОшибки = "В разделе 2 на странице " + НомерЛиста + " не указана фамилия налогоплательщика-продавца.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2", "П000200002003", НомерЛиста);
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение ИНН при коде операции 1011703.
		Если ДанныеЛистаРаздела2.П000200007003 = "1011703" И НЕ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000200003003) Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерЛиста + " не указан ИНН налогоплательщика - продавца.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2", "П000200003003", НомерЛиста);
		КонецЕсли;
		
		КБК = СокрЛП(ДанныеЛистаРаздела2.П000200004003);
		Если НЕ ЗначениеЗаполнено(КБК) Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерЛиста + " не указан код бюджетной классификации.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2", "П000200004003", НомерЛиста);
		ИначеЕсли СтрДлина(КБК) <> 20 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КБК) Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерЛиста + " указан код бюджетной классификации, не соответствующий Классификатору кодов классификации доходов бюджетов Российской Федерации.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2", "П000200004003", НомерЛиста);
		КонецЕсли;
		
		ОКТМО = СокрЛП(ДанныеЛистаРаздела2.П000200005003);
		Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерЛиста + " не указан код по ОКТМО.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2", "П000200005003", НомерЛиста);
		ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерЛиста + " указан код по ОКТМО, не соответствующий Общероссийскому классификатору территорий муниципальных образований.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2", "П000200005003", НомерЛиста);
		КонецЕсли;
		
		КодОперации = СокрЛП(ДанныеЛистаРаздела2.П000200007003);
		Если НЕ ЗначениеЗаполнено(КодОперации) Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерЛиста + " не указан код операции.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2", "П000200007003", НомерЛиста);
		ИначеЕсли СтрДлина(КодОперации) <> 7 Тогда
			ОписаниеОшибки = "В разделе 2 на странице " + НомерЛиста + " указан код операции, не состоящий из 7 символов.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2", "П000200007003", НомерЛиста);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел3Приложение1(КонтекстВыполнения, СтатусПроверки)
	
	ПараметрыВыгрузки = КонтекстВыполнения.ПараметрыВыгрузки;
	ДеревоВыгрузки = КонтекстВыполнения.ДеревоВыгрузки;
	
	КодПериода = ПараметрыВыгрузки.ПериодОтч;
	
	Раздел3Прил1 = мДанныеОтчета.Раздел3_Прил1;
	
	НомерЛиста = 0;
	Для Каждого ЛистРаздела3Прил1 Из Раздел3Прил1 Цикл
		ДанныеЛистаРаздела3Прил1 = ЛистРаздела3Прил1.Данные[0].Значение;
		
		НомерЛиста = НомерЛиста + 1;
		
		Если ЭкземплярРазделаПуст(ДеревоВыгрузки, "Раздел3_Прил1", ДанныеЛистаРаздела3Прил1) Тогда
			Продолжить;
		ИначеЕсли КодПериода <> "24" И КодПериода <> "56" Тогда
			ОписаниеОшибки = "Приложение 1 к разделу 3 заполняется только если на титульном листе указан код периода представления 24 или 56.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310001001", "1");
			Прервать;
		КонецЕсли;
		
		НаимНедв = СокрЛП(ДанныеЛистаРаздела3Прил1.П000310001000);
		Если ПустаяСтрока(НаимНедв) Тогда
			ОписаниеОшибки = "На странице " + НомерЛиста + " приложения 1 к разделу 3 не указано наименование объекта недвижимости.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310001000", НомерЛиста);
		КонецЕсли;
		
		ПочтовыйИндекс = СокрЛП(ДанныеЛистаРаздела3Прил1.П000310002001);
		ДлинаИндекса = СтрДлина(ПочтовыйИндекс);
		Если ДлинаИндекса <> 0 И ДлинаИндекса <> 6 Тогда
			ОписаниеОшибки = "На странице " + НомерЛиста + " приложения 1 к разделу 3 указан почтовый индекс, не состоящий из 6 цифр.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310002001", НомерЛиста);
		КонецЕсли;
		
		КодСубъекта = СокрЛП(ДанныеЛистаРаздела3Прил1.П000310002002);
		ДлинаКодСубъектаРФ = СтрДлина(КодСубъекта);
		Если ДлинаКодСубъектаРФ <> 2 Тогда
			ОписаниеОшибки = "В разделе ""Приложение 1 к разделу 3"" на странице " + НомерЛиста + " не" + ?(ДлинаКодСубъектаРФ = 0, "", "верно") + " задан код субъекта Российской Федерации!";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310002002", НомерЛиста);
		КонецЕсли;
		
		КодОперации = СокрЛП(ДанныеЛистаРаздела3Прил1.П000310003001);
		Если НЕ ЗначениеЗаполнено(КодОперации) Тогда
			ОписаниеОшибки = "На странице " + НомерЛиста + " приложения 1 к разделу 3 не указан код операции по объекту недвижимости.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310003001", НомерЛиста);
		ИначеЕсли СтрДлина(КодОперации) <> 7 Тогда
			ОписаниеОшибки = "На странице " + НомерЛиста + " приложения 1 к разделу 3 указан код операции по объекту недвижимости, не состоящий из 7 символов.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310003001", НомерЛиста);
		КонецЕсли;
		
		ПроверяемаяДата = ДанныеЛистаРаздела3Прил1.П000310004001;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "На странице " + НомерЛиста + " приложения 1 к разделу 3 не указана дата ввода объекта недвижимости в эксплуатацию для исчисления амортизации.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310004001");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "На странице " + НомерЛиста + " приложения 1 к разделу 3 дата ввода объекта недвижимости в эксплуатацию для исчисления амортизации выходит за допустимый период с 01.01.1900 по 31.12.2099.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310004001");
			КонецЕсли;
		КонецЕсли;
		
		ПроверяемаяДата = ДанныеЛистаРаздела3Прил1.П000310005001;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "На странице " + НомерЛиста + " приложения 1 к разделу 3 не указана дата начала амортизационных отчислений по объекту недвижимости.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310005001", НомерЛиста);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "На странице " + НомерЛиста + " приложения 1 к разделу 3 дата дата начала амортизационных отчислений по объекту недвижимости выходит за допустимый период с 01.01.1900 по 31.12.2099.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310005001", НомерЛиста);
			КонецЕсли;
		КонецЕсли;
		
		Если МногострочнаяЧастьПуста(ДанныеЛистаРаздела3Прил1, "П000310008001, П000310008002, П000310008003, П000310008004", "П000310008004") Тогда
			ОписаниеОшибки = "На странице " + НомерЛиста + " приложения 1 к разделу 3 не указаны суммы налога, подлежащие восстановлению и уплате в бюджет.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310008001_1", НомерЛиста);
		КонецЕсли;
		
		НомерСтроки = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛистаРаздела3Прил1, "П000310008001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			П000310008001 = СокрЛП(ДанныеЛистаРаздела3Прил1["П000310008001_" + СтрокаЧГ0(НомерСтроки)]);
			П000310008002 = ДанныеЛистаРаздела3Прил1["П000310008002_" + СтрокаЧГ0(НомерСтроки)];
			П000310008003 = ДанныеЛистаРаздела3Прил1["П000310008003_" + СтрокаЧГ0(НомерСтроки)];
			П000310008004 = ДанныеЛистаРаздела3Прил1["П000310008004_" + СтрокаЧГ0(НомерСтроки)];
			
			Если ЗначениеЗаполнено(П000310008001) ИЛИ ЗначениеЗаполнено(П000310008002) ИЛИ ЗначениеЗаполнено(П000310008003) ИЛИ ЗначениеСуммыЗаполнено(П000310008004) Тогда
				Если НЕ ЗначениеЗаполнено(П000310008001) Тогда
					ОписаниеОшибки = "На странице " + НомерЛиста + " приложения 1 к разделу 3 в строке " + НомерСтроки + " не указан год.";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310008001_" + СтрокаЧГ0(НомерСтроки), НомерЛиста);
				ИначеЕсли СтрДлина(П000310008001) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(П000310008001) Тогда
					ОписаниеОшибки = "На странице " + НомерЛиста + " приложения 1 к разделу 3 в строке " + НомерСтроки + " указан год, не состоящий из 4 цифр.";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310008001_" + СтрокаЧГ0(НомерСтроки), НомерЛиста);
				КонецЕсли;
				
				ПроверяемаяДата = П000310008002;
				Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
					ОписаниеОшибки = "На странице " + НомерЛиста + " приложения 1 к разделу 3 в строке " + НомерСтроки + " не указана дата начала использования объекта недвижимости.";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310008002_" + СтрокаЧГ0(НомерСтроки), НомерЛиста);
				Иначе
					ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
					Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
						ОписаниеОшибки = "На странице " + НомерЛиста + " приложения 1 к разделу 3 в строке " + НомерСтроки + " дата начала использования объекта недвижимости выходит за допустимый период с 01.01.1900 по 31.12.2099.";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил1", "П000310008002_" + СтрокаЧГ0(НомерСтроки), НомерЛиста);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел3Приложение2(КонтекстВыполнения, СтатусПроверки)
	
	Раздел3Прил2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3_Прил2;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел3Прил2, "П000320000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		П000320000101 = СокрЛП(Раздел3Прил2["П000320000101_" + Формат(НомерСтроки, "ЧГ=")]);
		П000320000102 = Раздел3Прил2["П000320000102_" + Формат(НомерСтроки, "ЧГ=")];
		П000320000103 = Раздел3Прил2["П000320000103_" + Формат(НомерСтроки, "ЧГ=")];
		
		Если ЗначениеЗаполнено(П000320000101) ИЛИ ЗначениеСуммыЗаполнено(П000320000102) ИЛИ ЗначениеСуммыЗаполнено(П000320000103) Тогда
			Если НЕ ЗначениеЗаполнено(П000320000101) Тогда
				ОписаниеОшибки = "В приложении 2 к разделу 3 в строке " + НомерСтроки + " не указан КПП подразделения иностранной организации.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил2", "П000320000101_" + Формат(НомерСтроки, "ЧГ="));
			ИначеЕсли СтрДлина(П000320000101) <> 9 Тогда
				ОписаниеОшибки = "В приложении 2 к разделу 3 в строке " + НомерСтроки + " указан КПП подразделения иностранной организации, не состоящий из 9 символов.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел3_Прил2", "П000320000101_" + Формат(НомерСтроки, "ЧГ="));
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел4(Параметры, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	
	НомерСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000400001003_" + СтрокаЧГ0(НомерСтроки)) Цикл
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеРаздела["П000400001003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000400002003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000400003003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000400004003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000400005003" + Постфикс]);
		
		Если СтрокаЗаполнена Тогда
			КодОперации = СокрЛП(ДанныеРаздела["П000400001003" + Постфикс]);
			Если НЕ ЗначениеЗаполнено(КодОперации) Тогда
				ОписаниеОшибки = "В разделе 4 в строке " + СтрокаЧГ0(НомерСтроки) + " не указан код операции.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел4", "П000400001003" + Постфикс);
			ИначеЕсли СтрДлина(КодОперации) <> 7 Тогда
				ОписаниеОшибки = "В разделе 4 в строке " + СтрокаЧГ0(НомерСтроки) + " указан код операции, не состоящий из 7 символов.";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел4", "П000400001003" + Постфикс);
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел5(КонтекстВыполнения, СтатусПроверки)
	
	ДеревоВыгрузки = КонтекстВыполнения.ДеревоВыгрузки;
	
	Раздел5 = мДанныеОтчета.Раздел5;
	
	РазрешенныеКодыПериода = "01,02,03,04,05,06,07,08,09,10,11,12,21,22,23,24";
	ВозможныеКодыПериодаРаздел5 = СтрРазделить(РазрешенныеКодыПериода, ",");
	
	НомерЛиста = 0;
	Для Каждого ЛистРаздела5 Из Раздел5 Цикл
		ДанныеЛистаРаздела5 = ЛистРаздела5.Данные[0].Значение;
		
		НомерЛиста = НомерЛиста + 1;
		
		Если ЭкземплярРазделаПуст(ДеревоВыгрузки, "Раздел5", ДанныеЛистаРаздела5, "П000500003003") Тогда
			Продолжить;
		КонецЕсли;
		
		ГодРаздел5 = СокрЛП(ДанныеЛистаРаздела5.П000500001003);
		Если НЕ ЗначениеЗаполнено(ГодРаздел5) Тогда
			ОписаниеОшибки = "В разделе 5 на странице " + НомерЛиста + " не указан отчетный год.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел5", "П000500001003", НомерЛиста);
		ИначеЕсли СтрДлина(ГодРаздел5) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ГодРаздел5) Тогда
			ОписаниеОшибки = "В разделе 5 на странице " + НомерЛиста + " указан отчетный год, не состоящий из 4 цифр.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел5", "П000500001003", НомерЛиста);
		КонецЕсли;
		
		НалоговыйПериод = СокрЛП(ДанныеЛистаРаздела5.П000500002003);
		Если НЕ ЗначениеЗаполнено(НалоговыйПериод) Тогда
			ОписаниеОшибки = "В разделе 5 на странице " + НомерЛиста + " не указан код налогового периода.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел5", "П000500002003", НомерЛиста);
		ИначеЕсли ВозможныеКодыПериодаРаздел5.Найти(НалоговыйПериод) = Неопределено Тогда
			ОписаниеОшибки = "В разделе 5 на странице " + НомерЛиста + " указан код налогового периода, не предусмотренный порядком заполнения.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел5", "П000500002003", НомерЛиста);
		КонецЕсли;
		
		Если МногострочнаяЧастьПуста(ДанныеЛистаРаздела5, "П000500004003, П000500005003, П000500006003, П000500007003", "П000500004003, П000500005003, П000500006003, П000500007003") Тогда
			ОписаниеОшибки = "На странице " + НомерЛиста + " раздела 5 не указаны сведения по расчету суммы налоговых вычетов (строки 030-070).";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел5", "П000500004003_1", НомерЛиста);
			
		Иначе
			ИндексСтроки = 1;
			Пока ДанныеЛистаРаздела5.Свойство("П000500003003_" + Формат(ИндексСтроки, "ЧГ=")) Цикл
				СтрИндексСтроки = Формат(ИндексСтроки, "ЧГ=");
				Постфикс = "_" + СтрокаЧГ0(ИндексСтроки);
				
				Если ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500004003_" + СтрИндексСтроки])
				 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500005003_" + СтрИндексСтроки])
				 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500006003_" + СтрИндексСтроки])
				 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500007003_" + СтрИндексСтроки])
				 ИЛИ ЗначениеЗаполнено(ДанныеЛистаРаздела5["П000500003003_" + СтрИндексСтроки]) Тогда
					КодОперации = СокрЛП(ДанныеЛистаРаздела5["П000500003003" + Постфикс]);
					Если НЕ ЗначениеЗаполнено(КодОперации) Тогда
						ОписаниеОшибки = "В разделе 5 на странице " + НомерЛиста + " в строке " + СтрокаЧГ0(ИндексСтроки) + " не указан код операции.";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел5", "П000500003003" + Постфикс, НомерЛиста);
					ИначеЕсли СтрДлина(КодОперации) <> 7 Тогда
						ОписаниеОшибки = "В разделе 5 на странице " + НомерЛиста + " в строке " + СтрокаЧГ0(ИндексСтроки) + " указан код операции, не состоящий из 7 символов.";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел5", "П000500003003" + Постфикс, НомерЛиста);
					КонецЕсли;
					
					Если ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500004003_" + СтрИндексСтроки])
					   И НЕ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500005003_" + СтрИндексСтроки]) Тогда
						ОписаниеОшибки = "В разделе 5 на странице " + НомерЛиста + " в строке " + СтрИндексСтроки + " не задана сумма налоговых вычетов (строка 050).";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел5", "П000500004003_" + СтрИндексСтроки, НомерЛиста);
					Конецесли;
					
					Если ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500006003_" + СтрИндексСтроки])
					   И НЕ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500007003_" + СтрИндексСтроки]) Тогда
						ОписаниеОшибки = "В разделе 5 на странице " + НомерЛиста + " в строке " + СтрИндексСтроки + " не задана сумма налоговых вычетов для (строка 070).";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел5", "П000500006003_" + СтрИндексСтроки, НомерЛиста);
					Конецесли;
				Конецесли;
				
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
			
			// Итог в строке 080 не может быть пуст, если соответствующие данные заполнены хотя бы в одной строке (доп. условие из бумажного формата).
			Если НЕ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5.П000500008003) Тогда
				
				ВсеСуммыГрафаПусты = Истина;
				ИндексСтроки = 1;
				Пока ДанныеЛистаРаздела5.Свойство("П000500005003_" + Формат(ИндексСтроки, "ЧГ=")) Цикл
					Если ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500005003_" + Формат(ИндексСтроки, "ЧГ=")]) Тогда
						ВсеСуммыГрафаПусты = Ложь;
						Прервать;
					КонецЕсли;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
				
				Если НЕ ВсеСуммыГрафаПусты Тогда
					ОписаниеОшибки = "В разделе 5 на странице " + НомерЛиста + " не указана итоговая суммы по графе 3.";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел5", "П000500005003", НомерЛиста);
				КонецЕсли;
				
			КонецЕсли;
			
			// Итог в строке 090 не может быть пуст, если соответствующие данные заполнены хотя бы в одной строке (доп. условие из бумажного формата).
			Если НЕ ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5.П000500009003) Тогда
				
				ВсеСуммыГрафаПусты = Истина;
				ИндексСтроки = 1;
				Пока ДанныеЛистаРаздела5.Свойство("П000500007003_" + Формат(ИндексСтроки, "ЧГ=")) Цикл
					Если ЗначениеСуммыЗаполнено(ДанныеЛистаРаздела5["П000500007003_" + Формат(ИндексСтроки, "ЧГ=")]) Тогда
						ВсеСуммыГрафаПусты = Ложь;
						Прервать;
					КонецЕсли;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
				
				Если НЕ ВсеСуммыГрафаПусты Тогда
					ОписаниеОшибки = "В разделе 5 на странице " + НомерЛиста + " не указана итоговая суммы по графе 5.";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел5", "П000500007003", НомерЛиста);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел6(КонтекстВыполнения, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	НомерСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000600001003_" + СтрокаЧГ0(НомерСтроки)) Цикл
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеРаздела["П000600001003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000600002003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000600003003" + Постфикс])
		              ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000600004003" + Постфикс]);
		
		Если СтрокаЗаполнена Тогда
			КодОперации = СокрЛП(ДанныеРаздела["П000600001003" + Постфикс]);
			Если НЕ ЗначениеЗаполнено(КодОперации) Тогда
				ОписаниеОшибки = "В разделе 6 в строке " + СтрокаЧГ0(НомерСтроки) + " многострочной части не указан код операции";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел6", "П000600001003" + Постфикс);
			ИначеЕсли СтрДлина(КодОперации) <> 7 Тогда
				ОписаниеОшибки = "Код операции в разделе 6 в строке " + СтрокаЧГ0(НомерСтроки) + " многострочной части должен состоять из 7 символов";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел6", "П000600001003" + Постфикс);
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Если заполнена хотя бы одна сумма в графе 4, то должен быть заполнен итог по этой графе.
	Если НЕ ЗначениеСуммыЗаполнено(ДанныеРаздела.П000600006003) И НЕ МногострочнаяЧастьПуста(ДанныеРаздела, "", "П000600004003") Тогда
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, "В разделе 6 не указана итоговая сумма налога, исчисленная к уплате в бюджет.", "Раздел6", "П000600006003");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел7(КонтекстВыполнения, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел7;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеРаздела, "П000700000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		П000700000101 = СокрЛП(ДанныеРаздела["П000700000101_" + Формат(НомерСтроки, "ЧГ=")]);
		П000700000102 = ДанныеРаздела["П000700000102_" + Формат(НомерСтроки, "ЧГ=")];
		П000700000103 = ДанныеРаздела["П000700000103_" + Формат(НомерСтроки, "ЧГ=")];
		П000700000104 = ДанныеРаздела["П000700000104_" + Формат(НомерСтроки, "ЧГ=")];
		
		Если ЗначениеЗаполнено(П000700000101) ИЛИ ЗначениеСуммыЗаполнено(П000700000102) ИЛИ ЗначениеСуммыЗаполнено(П000700000103) ИЛИ ЗначениеСуммыЗаполнено(П000700000104) Тогда
			ДлинаП000700000101 = СтрДлина(П000700000101);
			Если ДлинаП000700000101 = 0 Тогда
				ОписаниеОшибки = "В разделе 7 в строке " + СтрокаЧГ0(НомерСтроки) + " не указан код операции";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел7", "П000700000101_" + СтрокаЧГ0(НомерСтроки));
			ИначеЕсли ДлинаП000700000101 <> 7 Тогда
				ОписаниеОшибки = "Код операции в разделе 7 в строке " + СтрокаЧГ0(НомерСтроки) + " должен состоять из 7 символов";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел7", "П000700000101_" + СтрокаЧГ0(НомерСтроки));
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРазделыНДС(КонтекстВыполнения, СтатусПроверки)
	
	ПараметрыВыгрузки = КонтекстВыполнения.ПараметрыВыгрузки;
	ДеревоВыгрузки    = КонтекстВыполнения.ДеревоВыгрузки;
	
	Раздел1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	Раздел3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел4 = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	Раздел5 = мДанныеОтчета.Раздел5;
	Раздел6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	Если ПараметрыВыгрузки.ПоМесту = "231" Тогда
		ЗаполненРаздел2 = Ложь;
		Для Каждого ЛистРаздела Из Раздел2 Цикл
			ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
			Если НЕ ЭкземплярРазделаПуст(ДеревоВыгрузки, "Раздел2", ДанныеЛиста, "П000200005003") Тогда
				ЗаполненРаздел2 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗаполненРаздел2 Тогда
			ОписаниеОшибки = "В декларации, представляемой по месту нахождения налогового агента должен быть заполнен раздел 2 (сумма налога, подлежащая уплате в бюджет, по данным налогового агента)";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Раздел2");
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполненаРаздел4Строка030 = Ложь;
	ЗаполненаРаздел4Строка040 = Ложь;
	ЗаполненаРаздел4Строка050 = Ложь;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел4, "П000400003003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		ЗаполненаРаздел4Строка030 = ЗаполненаРаздел4Строка030 ИЛИ Раздел4["П000400003003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		ЗаполненаРаздел4Строка040 = ЗаполненаРаздел4Строка040 ИЛИ Раздел4["П000400004003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		ЗаполненаРаздел4Строка050 = ЗаполненаРаздел4Строка050 ИЛИ Раздел4["П000400005003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ЗаполненаРаздел5Строка050 = Ложь;
	ЗаполненаРаздел5Строка070 = Ложь;
	
	Для Каждого ЛистРаздела Из Раздел5 Цикл
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		
		НомерСтроки = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛиста, "П000500005003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			ЗаполненаРаздел5Строка050 = ЗаполненаРаздел5Строка050 ИЛИ ДанныеЛиста["П000500005003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
			ЗаполненаРаздел5Строка070 = ЗаполненаРаздел5Строка070 ИЛИ ДанныеЛиста["П000500007003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполненаРаздел6Строка040 = Ложь;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел6, "П000600004003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		ЗаполненаРаздел6Строка040 = ЗаполненаРаздел6Строка040 ИЛИ Раздел6["П000600004003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ДанныеРаздел8 = ДанныеРазделаНДСИзРегистра("Раздел8", ПараметрыВыгрузки.ДанныеСегментированы);
	ДанныеРаздел8_Прил1 = ДанныеРазделаНДСИзРегистра("Раздел8_Прил1", ПараметрыВыгрузки.ДанныеСегментированы);
	
	ДанныеРаздел9 = ДанныеРазделаНДСИзРегистра("Раздел9", ПараметрыВыгрузки.ДанныеСегментированы);
	ДанныеРаздел9_Прил1 = ДанныеРазделаНДСИзРегистра("Раздел9_Прил1", ПараметрыВыгрузки.ДанныеСегментированы);
	
	ДанныеРаздел10 = ДанныеРазделаНДСИзРегистра("Раздел10", ПараметрыВыгрузки.ДанныеСегментированы);
	ДанныеРаздел11 = ДанныеРазделаНДСИзРегистра("Раздел11", ПараметрыВыгрузки.ДанныеСегментированы);
	ДанныеРаздел12 = ДанныеРазделаНДСИзРегистра("Раздел12", ПараметрыВыгрузки.ДанныеСегментированы);
	
	Раздел8Обязателен = ДанныеРаздел8_Прил1 <> Неопределено
	                ИЛИ Раздел3.П000300019003 > 0
	                ИЛИ ЗаполненаРаздел4Строка030
	                ИЛИ ЗаполненаРаздел4Строка040
	                ИЛИ ЗаполненаРаздел5Строка050
	                ИЛИ ЗаполненаРаздел5Строка070
	                ИЛИ ЗаполненаРаздел6Строка040
	                ИЛИ Раздел6.П000600014003 > 0;
	
	ПроверятьРаздел8 = НЕ (ПараметрыВыгрузки.ВидДок <> "0" И ПараметрыВыгрузки.АктуальностьСведенийРаздел8 = "1");
	Если ПроверятьРаздел8 И Раздел8Обязателен И ДанныеРаздел8 = Неопределено Тогда
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, "В декларации должен быть заполнен раздел 8 (сведения из книги покупок)", "Раздел8");
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" И ДанныеРаздел8_Прил1 <> Неопределено Тогда
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, "При первичном представлении декларации приложение 1 к разделу 8 (сведения дополнительных листов книги покупок) не представляется. Необходимо очистить раздел.", "Раздел8_Прил1");
	КонецЕсли;
	
	Раздел9Обязателен = ДанныеРаздел9_Прил1 <> Неопределено
	                ИЛИ Раздел3.П000300011005 > 0
	                ИЛИ ЗаполненаРаздел4Строка050
	                ИЛИ Раздел4.П000400008003 > 0
	                ИЛИ Раздел6.П000600010003 > 0
	                ИЛИ Раздел6.П000600012003 > 0;
	
	ПроверятьРаздел9 = НЕ (ПараметрыВыгрузки.ВидДок <> "0" И ПараметрыВыгрузки.АктуальностьСведенийРаздел9 = "1");
	Если ПроверятьРаздел9 И Раздел9Обязателен И ДанныеРаздел9 = Неопределено Тогда
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, "В декларации должен быть заполнен раздел 9 (сведения из книги продаж)", "Раздел9");
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" И ДанныеРаздел9_Прил1 <> Неопределено Тогда
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, "При первичном представлении декларации приложение 1 к разделу 9 (сведения дополнительных листов книги продаж) не представляется. Необходимо очистить раздел.", "Раздел9_Прил1");
	КонецЕсли;
	
	Если Раздел1.П000100003003 > 0 И ДанныеРаздел12 = Неопределено Тогда
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, "Так как в декларации заполнена строка 030 раздела 1, то должен быть заполнен и раздел 12 декларации", "Раздел12");
	КонецЕсли;
	
	Если ПроверятьРаздел8 Тогда
		ПроверитьЗаполнение_Раздел8(КонтекстВыполнения, ДанныеРаздел8, СтатусПроверки);
	КонецЕсли;
	ПроверитьЗаполнение_Раздел8_Прил1(КонтекстВыполнения, ДанныеРаздел8_Прил1, СтатусПроверки);
	
	Если ПроверятьРаздел9 Тогда
		ПроверитьЗаполнение_Раздел9(КонтекстВыполнения, ДанныеРаздел9, СтатусПроверки);
	КонецЕсли;
	ПроверитьЗаполнение_Раздел9_Прил1(КонтекстВыполнения, ДанныеРаздел9_Прил1, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел10(КонтекстВыполнения, ДанныеРаздел10, СтатусПроверки);
	ПроверитьЗаполнение_Раздел11(КонтекстВыполнения, ДанныеРаздел11, СтатусПроверки);
	ПроверитьЗаполнение_Раздел12(КонтекстВыполнения, ДанныеРаздел12, СтатусПроверки);
	
КонецПроцедуры

&НаСервере
Функция ДанныеРазделаНДСИзРегистра(ИмяРаздела, ДанныеСегментированы)
	
	Если ДанныеСегментированы Тогда
		СекцииРаздела = СписокСекцийРазделаИзРегистра(ИмяРаздела);
		
		Если СекцииРаздела.Количество() > 0 Тогда
			ДанныеРаздела = СекцииРаздела.ВыгрузитьКолонку("НомерПервойСтроки");
		Иначе
			ДанныеРаздела = Неопределено;
		КонецЕсли;
		
	Иначе
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = "Данные" + ИмяРаздела;
		
		ЗаписьРегистраСведений.Прочитать();
		
		Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
			ДанныеРаздела = ЗаписьРегистраСведений.СодержимоеФайла.Получить();
			Если ДанныеРаздела.Записи.Количество() = 0 Тогда
				ДанныеРаздела = Неопределено;
			КонецЕсли;
		Иначе
			ДанныеРаздела = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеРаздела;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнение_Раздел8(КонтекстВыполнения, ДанныеРаздела, СтатусПроверки)
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполнения.Вставить("КонтекстРаздела", Новый Структура);
	
	СписокДопустимыхКодовОпераций = КодыОпераций_Раздел8();
	ДопустимыеКодыОперации = СтрРазделить(СписокДопустимыхКодовОпераций, ",");
	
	СписокКодовПоПродавцам = "01,02,03,04,05,07,08,09,10,11,12,13";
	КодыПоПродавцам = СтрРазделить(СписокКодовПоПродавцам, ",");
	
	КонтрольныеСписки = Новый Структура;
	КонтрольныеСписки.Вставить("ДопустимыеКодыОперации", ДопустимыеКодыОперации);
	КонтрольныеСписки.Вставить("КодыПоПродавцам", КодыПоПродавцам);
	КонтрольныеСписки.Вставить("СписокКодовПоПродавцам", СтрЗаменить(СписокКодовПоПродавцам, ",", ", "));
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("КонтрольныеСписки", КонтрольныеСписки);
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел8", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел8(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел8(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстРаздела");
	
КонецПроцедуры

&НаСервере
Функция КодыОпераций_Раздел8()
	
	ДатаПодписиОтчета = мДанныеОтчета.ПолеТабличногоДокументаТитульный.ДатаПодписи;
	
	Если ДатаПодписиОтчета >= '2016-07-01' Тогда
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,32,99";
	Иначе
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28,99";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеСтрокиДанных_Раздел8(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения)
	
	ИмяРаздела = "Раздел8";
	
	ПроблемныеИННКПП = КонтекстВыполнения.ПроблемныеИННКПП;
	КонтрольныеСписки = КонтекстВыполнения.КонтекстРаздела.КонтрольныеСписки;
	
	ДопустимыеКодыОперации = КонтрольныеСписки.ДопустимыеКодыОперации;
	КодыПоПродавцам = КонтрольныеСписки.КодыПоПродавцам;
	
	КолонкиТаблицы = СтрокаДанных.Владелец().Колонки;
	Если КолонкиТаблицы.Найти("ДокументРасшифровки") <> Неопределено Тогда
		ПозицияПерехода = ПолучитьНавигационнуюСсылку(СтрокаДанных.ДокументРасшифровки);
	Иначе
		ПозицияПерехода = НомерСтроки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомерПор) Тогда
		ОписаниеОшибки = "В разделе 8 не указан порядковый номер строки в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "1", НомерСтроки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомСчФПрод) Тогда
		ОписаниеОшибки = "В разделе 8 не указан номер счета-фактуры продавца в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаСчФПрод;
	Если ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
		Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
			ОписаниеОшибки = "В разделе 8 дата счета-фактуры продавца в строке " + НомерСтроки
			               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ)
	                          ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрСчФ);
	
	Если ЕстьИсправлениеСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ) Тогда
			ОписаниеОшибки = "В разделе 8 не указан номер исправления счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В разделе 8 не указана дата исправления счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В разделе 8 дата исправления счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьКорректировкаСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод) Тогда
			ОписаниеОшибки = "В разделе 8 не указан номер корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаКСчФПрод;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В разделе 8 не указана дата корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В разделе 8 дата корректировочного счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеКорректировочногоСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                                           ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьИсправлениеКорректировочногоСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ) Тогда
			ОписаниеОшибки = "В разделе 8 не указан номер исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрКСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В разделе 8 не указана дата исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В разделе 8 дата исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрДлина(СокрЛП(СтрокаДанных.ОКВ)) <> 3 Тогда
		ОписаниеОшибки = "В разделе 8 неверно указан код валюты в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "16", ПозицияПерехода);
	КонецЕсли;
	
	УказанКодВидаОперации = Ложь;
	УказанНекорректныйКодВидаОперации = Ложь;
	ТребуетсяУказатьПродавца = Ложь;
	
	Для Каждого Операция Из СтрокаДанных.КодВидОпер Цикл
		УказанКодВидаОперации = УказанКодВидаОперации ИЛИ ЗначениеЗаполнено(Операция);
		УказанНекорректныйКодВидаОперации = УказанНекорректныйКодВидаОперации
		                                ИЛИ ДопустимыеКодыОперации.Найти(Операция) = Неопределено;
		ТребуетсяУказатьПродавца = ТребуетсяУказатьПродавца
		                       ИЛИ КодыПоПродавцам.Найти(Операция) <> Неопределено;
	КонецЦикла;
	
	Если НЕ УказанКодВидаОперации Тогда
		ОписаниеОшибки = "В разделе 8 не указан код вида операции в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "2", ПозицияПерехода);
	ИначеЕсли УказанНекорректныйКодВидаОперации Тогда
		ОписаниеОшибки = "В разделе 8 указан некорректный код вида операции в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "2", ПозицияПерехода);
	КонецЕсли;
	
	ОшибкиСпискаДокументов = Новый Структура;
	Для Каждого ДокументПодтверждения Из СтрокаДанных.ДокПдтвУпл Цикл
		Если НЕ ЗначениеЗаполнено(ДокументПодтверждения.НомДокПдтвУпл) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказанНомер");
		КонецЕсли;
		
		ПроверяемаяДата = ДокументПодтверждения.ДатаДокПдтвУпл;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказанаДата");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ЗначениеЗаполнено(ОшибкиВДате) Тогда
				ОшибкиСпискаДокументов.Вставить(ОшибкиВДате);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДетализацияОшибки = ПредставлениеОшибокСпискаДокументов(ОшибкиСпискаДокументов);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В разделе 8 в строке " + НомерСтроки + " указаны документы, подтверждающие уплату налога, с " + ДетализацияОшибки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "8", ПозицияПерехода);
	КонецЕсли;
	
	УказаныСведенияОПродавце = Ложь;
	ОшибкиИНН = Новый Структура;
	ОшибкиКПП = Новый Структура;
	
	Для Каждого СведенияОПродавце Из СтрокаДанных.СвПрод Цикл
		УказаныСведенияОПродавце = УказаныСведенияОПродавце ИЛИ УказаныИННКПП(СведенияОПродавце);
		ОпределитьОшибкиИННКПП(СведенияОПродавце, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП);
	КонецЦикла;
	
	Если ТребуетсяУказатьПродавца И НЕ УказаныСведенияОПродавце Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 8 для операций с кодами " + КонтрольныеСписки.СписокКодовПоПродавцам
		               + " требуется указание ИНН и КПП российской организации или ИНН индивидуального предпринимателя"
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "12", ПозицияПерехода);
		
	Иначе
		ДетализацияОшибки = ПредставлениеОшибокИНН(ОшибкиИНН);
		Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
			ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 8 указан ИНН продавца" + ДетализацияОшибки
			               + ". Внесите исправление в справочник контрагентов и перезаполните отчет";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "12", ПозицияПерехода);
		КонецЕсли;
		
		ДетализацияОшибки = ПредставлениеОшибокКПП(ОшибкиКПП);
		Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
			ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 8 указан КПП продавца" + ДетализацияОшибки
			               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "12", ПозицияПерехода);
		КонецЕсли;
		
	КонецЕсли;
	
	ОшибкиИНН = Новый Структура;
	ОшибкиКПП = Новый Структура;
	ОпределитьОшибкиИННКПП(СтрокаДанных.СвПос, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП);
	
	ДетализацияОшибки = ПредставлениеОшибокИНН(ОшибкиИНН);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 8 указан ИНН посредника" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "14", ПозицияПерехода);
	КонецЕсли;
	
	ДетализацияОшибки = ПредставлениеОшибокКПП(ОшибкиКПП);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 8 указан КПП посредника" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "14", ПозицияПерехода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел8_Прил1(КонтекстВыполнения, ДанныеРаздела, СтатусПроверки)
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполнения.Вставить("КонтекстРаздела", Новый Структура);
	
	СписокДопустимыхКодовОпераций = КодыОпераций_Раздел8_Прил1();
	ДопустимыеКодыОперации = СтрРазделить(СписокДопустимыхКодовОпераций, ",");
	
	СписокКодовПоПродавцам = "01,02,03,04,05,07,08,09,10,11,12,13";
	КодыПоПродавцам = СтрРазделить(СписокКодовПоПродавцам, ",");
	
	КонтрольныеСписки = Новый Структура;
	КонтрольныеСписки.Вставить("ДопустимыеКодыОперации", ДопустимыеКодыОперации);
	КонтрольныеСписки.Вставить("КодыПоПродавцам", КодыПоПродавцам);
	КонтрольныеСписки.Вставить("СписокКодовПоПродавцам", СтрЗаменить(СписокКодовПоПродавцам, ",", ", "));
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("КонтрольныеСписки", КонтрольныеСписки);
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел8_Прил1", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел8_Прил1(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел8_Прил1(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстРаздела");
	
КонецПроцедуры

&НаСервере
Функция КодыОпераций_Раздел8_Прил1()
	
	ДатаПодписиОтчета = мДанныеОтчета.ПолеТабличногоДокументаТитульный.ДатаПодписи;
	
	Если ДатаПодписиОтчета >= '2016-07-01' Тогда
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,32,99";
	Иначе
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28,99";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеСтрокиДанных_Раздел8_Прил1(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения)
	
	ИмяРаздела = "Раздел8_Прил1";
	
	ПроблемныеИННКПП = КонтекстВыполнения.ПроблемныеИННКПП;
	КонтрольныеСписки = КонтекстВыполнения.КонтекстРаздела.КонтрольныеСписки;
	
	ДопустимыеКодыОперации = КонтрольныеСписки.ДопустимыеКодыОперации;
	КодыПоПродавцам = КонтрольныеСписки.КодыПоПродавцам;
	
	КолонкиТаблицы = СтрокаДанных.Владелец().Колонки;
	Если КолонкиТаблицы.Найти("ДокументРасшифровки") <> Неопределено Тогда
		ПозицияПерехода = ПолучитьНавигационнуюСсылку(СтрокаДанных.ДокументРасшифровки);
	Иначе
		ПозицияПерехода = НомерСтроки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомерПор) Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 8 не указан порядковый номер строки в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "1", НомерСтроки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомСчФПрод) Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 8 не указан номер счета-фактуры продавца в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаСчФПрод;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 8 не указана дата счета-фактуры продавца в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
	Иначе
		ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
		Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 8 дата счета-фактуры продавца в строке " + НомерСтроки
			               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ)
	                          ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрСчФ);
	
	Если ЕстьИсправлениеСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ) Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 8 не указан номер исправления счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 8 не указана дата исправления счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В приложении 1 к разделу 8 дата исправления счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьКорректировкаСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод) Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 8 не указан номер корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаКСчФПрод;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 8 не указана дата корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В приложении 1 к разделу 8 дата корректировочного счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеКорректировочногоСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                                           ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьИсправлениеКорректировочногоСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ) Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 8 не указан номер исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрКСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 8 не указана дата исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В приложении 1 к разделу 8 дата исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрДлина(СокрЛП(СтрокаДанных.ОКВ)) <> 3 Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 8 неверно указан код валюты в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "16", ПозицияПерехода);
	КонецЕсли;
	
	УказанКодВидаОперации = Ложь;
	УказанНекорректныйКодВидаОперации = Ложь;
	ТребуетсяУказатьПродавца = Ложь;
	
	Для Каждого Операция Из СтрокаДанных.КодВидОпер Цикл
		УказанКодВидаОперации = УказанКодВидаОперации ИЛИ ЗначениеЗаполнено(Операция);
		УказанНекорректныйКодВидаОперации = УказанНекорректныйКодВидаОперации
		                                ИЛИ ДопустимыеКодыОперации.Найти(Операция) = Неопределено;
		ТребуетсяУказатьПродавца = ТребуетсяУказатьПродавца
		                       ИЛИ КодыПоПродавцам.Найти(Операция) <> Неопределено;
	КонецЦикла;
	
	Если НЕ УказанКодВидаОперации Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 8 не указан код вида операции в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "2", ПозицияПерехода);
	ИначеЕсли УказанНекорректныйКодВидаОперации Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 8 указан некорректный код вида операции в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "2", ПозицияПерехода);
	КонецЕсли;
	
	ОшибкиСпискаДокументов = Новый Структура;
	Для Каждого ДокументПодтверждения Из СтрокаДанных.ДокПдтвУпл Цикл
		Если НЕ ЗначениеЗаполнено(ДокументПодтверждения.НомДокПдтвУпл) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказанНомер");
		КонецЕсли;
		
		ПроверяемаяДата = ДокументПодтверждения.ДатаДокПдтвУпл;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказанаДата");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ЗначениеЗаполнено(ОшибкиВДате) Тогда
				ОшибкиСпискаДокументов.Вставить(ОшибкиВДате);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДетализацияОшибки = ПредставлениеОшибокСпискаДокументов(ОшибкиСпискаДокументов);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 8 в строке " + НомерСтроки + " указаны документы, подтверждающие уплату налога, с " + ДетализацияОшибки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "8", ПозицияПерехода);
	КонецЕсли;
	
	УказаныСведенияОПродавце = Ложь;
	ОшибкиИНН = Новый Структура;
	ОшибкиКПП = Новый Структура;
	
	Для Каждого СведенияОПродавце Из СтрокаДанных.СвПрод Цикл
		УказаныСведенияОПродавце = УказаныСведенияОПродавце ИЛИ УказаныИННКПП(СведенияОПродавце);
		ОпределитьОшибкиИННКПП(СведенияОПродавце, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП);
	КонецЦикла;
	
	Если ТребуетсяУказатьПродавца И НЕ УказаныСведенияОПродавце Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " приложения 1 к разделу 8 для операций с кодами " + КонтрольныеСписки.СписокКодовПоПродавцам
		               + " требуется указание ИНН и КПП российской организации или ИНН индивидуального предпринимателя"
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "12", ПозицияПерехода);
		
	Иначе
		ДетализацияОшибки = ПредставлениеОшибокИНН(ОшибкиИНН);
		Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
			ОписаниеОшибки = "В строке " + НомерСтроки + " приложения 1 к разделу 8 указан ИНН продавца" + ДетализацияОшибки
			               + ". Внесите исправление в справочник контрагентов и перезаполните отчет";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "12", ПозицияПерехода);
		КонецЕсли;
		
		ДетализацияОшибки = ПредставлениеОшибокКПП(ОшибкиКПП);
		Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
			ОписаниеОшибки = "В строке " + НомерСтроки + " приложения 1 к разделу 8 указан КПП продавца" + ДетализацияОшибки
			               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "12", ПозицияПерехода);
		КонецЕсли;
		
	КонецЕсли;
	
	ОшибкиИНН = Новый Структура;
	ОшибкиКПП = Новый Структура;
	ОпределитьОшибкиИННКПП(СтрокаДанных.СвПос, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП);
	
	ДетализацияОшибки = ПредставлениеОшибокИНН(ОшибкиИНН);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " приложения 1 к разделу 8 указан ИНН посредника" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "14", ПозицияПерехода);
	КонецЕсли;
	
	ДетализацияОшибки = ПредставлениеОшибокКПП(ОшибкиКПП);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " приложения 1 к разделу 8 указан КПП посредника" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "14", ПозицияПерехода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел9(КонтекстВыполнения, ДанныеРаздела, СтатусПроверки)
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполнения.Вставить("КонтекстРаздела", Новый Структура);
	
	СписокДопустимыхКодовОпераций = КодыОпераций_Раздел9();
	ДопустимыеКодыОперации = СтрРазделить(СписокДопустимыхКодовОпераций, ",");
	
	КонтрольныеСписки = Новый Структура;
	КонтрольныеСписки.Вставить("ДопустимыеКодыОперации", ДопустимыеКодыОперации);
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("КонтрольныеСписки", КонтрольныеСписки);
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел9", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел9(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел9(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстРаздела");
	
КонецПроцедуры

&НаСервере
Функция КодыОпераций_Раздел9()
	
	ДатаПодписиОтчета = мДанныеОтчета.ПолеТабличногоДокументаТитульный.ДатаПодписи;
	
	Если ДатаПодписиОтчета >= '2016-07-01' Тогда
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31";
	Иначе
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеСтрокиДанных_Раздел9(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения)
	
	ИмяРаздела = "Раздел9";
	
	ПроблемныеИННКПП = КонтекстВыполнения.ПроблемныеИННКПП;
	КонтрольныеСписки = КонтекстВыполнения.КонтекстРаздела.КонтрольныеСписки;
	
	ДопустимыеКодыОперации = КонтрольныеСписки.ДопустимыеКодыОперации;
	
	КолонкиТаблицы = СтрокаДанных.Владелец().Колонки;
	Если КолонкиТаблицы.Найти("ДокументРасшифровки") <> Неопределено Тогда
		ПозицияПерехода = ПолучитьНавигационнуюСсылку(СтрокаДанных.ДокументРасшифровки);
	Иначе
		ПозицияПерехода = НомерСтроки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомерПор) Тогда
		ОписаниеОшибки = "В разделе 9 не указан порядковый номер строки в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "1", НомерСтроки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомСчФПрод) Тогда
		ОписаниеОшибки = "В разделе 9 не указан номер счета-фактуры продавца в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаСчФПрод;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ОписаниеОшибки = "В разделе 9 не указана дата счета-фактуры продавца в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
	Иначе
		ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
		Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
			ОписаниеОшибки = "В разделе 9 дата счета-фактуры продавца в строке " + НомерСтроки
			               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ)
	                          ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрСчФ);
	
	Если ЕстьИсправлениеСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ) Тогда
			ОписаниеОшибки = "В разделе 9 не указан номер исправления счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В разделе 9 не указана дата исправления счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В разделе 9 дата исправления счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьКорректировкаСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод) Тогда
			ОписаниеОшибки = "В разделе 9 не указан номер корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаКСчФПрод;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В разделе 9 не указана дата корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В разделе 9 дата корректировочного счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеКорректировочногоСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                                           ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьИсправлениеКорректировочногоСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ) Тогда
			ОписаниеОшибки = "В разделе 9 не указан номер исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрКСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В разделе 9 не указана дата исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В разделе 9 дата исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрДлина(СокрЛП(СтрокаДанных.ОКВ)) <> 3 Тогда
		ОписаниеОшибки = "В разделе 9 неверно указан код валюты в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "14", ПозицияПерехода);
	КонецЕсли;
	
	УказанКодВидаОперации = Ложь;
	УказанНекорректныйКодВидаОперации = Ложь;
	
	Для Каждого Операция Из СтрокаДанных.КодВидОпер Цикл
		УказанКодВидаОперации = УказанКодВидаОперации ИЛИ ЗначениеЗаполнено(Операция);
		УказанНекорректныйКодВидаОперации = УказанНекорректныйКодВидаОперации
		                                ИЛИ ДопустимыеКодыОперации.Найти(Операция) = Неопределено;
	КонецЦикла;
	
	Если НЕ УказанКодВидаОперации Тогда
		ОписаниеОшибки = "В разделе 9 не указан код вида операции в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "2", ПозицияПерехода);
	ИначеЕсли УказанНекорректныйКодВидаОперации Тогда
		ОписаниеОшибки = "В разделе 9 указан некорректный код вида операции в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "2", ПозицияПерехода);
	КонецЕсли;
	
	ОшибкиСпискаДокументов = Новый Структура;
	Для Каждого ДокументПодтверждения Из СтрокаДанных.ДокПдтвОпл Цикл
		Если НЕ ЗначениеЗаполнено(ДокументПодтверждения.НомДокПдтвОпл) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказанНомер");
		КонецЕсли;
		
		ПроверяемаяДата = ДокументПодтверждения.ДатаДокПдтвОпл;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказанаДата");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ЗначениеЗаполнено(ОшибкиВДате) Тогда
				ОшибкиСпискаДокументов.Вставить(ОшибкиВДате);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДетализацияОшибки = ПредставлениеОшибокСпискаДокументов(ОшибкиСпискаДокументов);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В разделе 9 в строке " + НомерСтроки + " указаны документы, подтверждающие оплату, с " + ДетализацияОшибки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "13", ПозицияПерехода);
	КонецЕсли;
	
	ОшибкиИНН = Новый Структура;
	ОшибкиКПП = Новый Структура;
	
	Для Каждого СведенияОПокупателе Из СтрокаДанных.СвПокуп Цикл
		ОпределитьОшибкиИННКПП(СведенияОПокупателе, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП);
	КонецЦикла;
	
	ДетализацияОшибки = ПредставлениеОшибокИНН(ОшибкиИНН);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 9 указан ИНН покупателя" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "10", ПозицияПерехода);
	КонецЕсли;
	
	ДетализацияОшибки = ПредставлениеОшибокКПП(ОшибкиКПП);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 9 указан КПП покупателя" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "10", ПозицияПерехода);
	КонецЕсли;
	
	ОшибкиИНН = Новый Структура;
	ОшибкиКПП = Новый Структура;
	ОпределитьОшибкиИННКПП(СтрокаДанных.СвПос, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП);
	
	ДетализацияОшибки = ПредставлениеОшибокИНН(ОшибкиИНН);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 9 указан ИНН посредника" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "12", ПозицияПерехода);
	КонецЕсли;
	
	ДетализацияОшибки = ПредставлениеОшибокКПП(ОшибкиКПП);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 9 указан КПП посредника" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "12", ПозицияПерехода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел9_Прил1(КонтекстВыполнения, ДанныеРаздела, СтатусПроверки)
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполнения.Вставить("КонтекстРаздела", Новый Структура);
	
	СписокДопустимыхКодовОпераций = КодыОпераций_Раздел9_Прил1();
	ДопустимыеКодыОперации = СтрРазделить(СписокДопустимыхКодовОпераций, ",");
	
	КонтрольныеСписки = Новый Структура();
	КонтрольныеСписки.Вставить("ДопустимыеКодыОперации", ДопустимыеКодыОперации);
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("КонтрольныеСписки", КонтрольныеСписки);
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел9_Прил1", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел9_Прил1(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел9_Прил1(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстРаздела");
	
КонецПроцедуры

&НаСервере
Функция КодыОпераций_Раздел9_Прил1()
	
	ДатаПодписиОтчета = мДанныеОтчета.ПолеТабличногоДокументаТитульный.ДатаПодписи;
	
	Если ДатаПодписиОтчета >= '2016-07-01' Тогда
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31";
	Иначе
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеСтрокиДанных_Раздел9_Прил1(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения)
	
	ИмяРаздела = "Раздел9_Прил1";
	
	ПроблемныеИННКПП = КонтекстВыполнения.ПроблемныеИННКПП;
	КонтрольныеСписки = КонтекстВыполнения.КонтекстРаздела.КонтрольныеСписки;
	
	ДопустимыеКодыОперации = КонтрольныеСписки.ДопустимыеКодыОперации;
	
	КолонкиТаблицы = СтрокаДанных.Владелец().Колонки;
	Если КолонкиТаблицы.Найти("ДокументРасшифровки") <> Неопределено Тогда
		ПозицияПерехода = ПолучитьНавигационнуюСсылку(СтрокаДанных.ДокументРасшифровки);
	Иначе
		ПозицияПерехода = НомерСтроки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомерПор) Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 9 не указан порядковый номер строки в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "1", НомерСтроки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомСчФПрод) Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 9 не указан номер счета-фактуры продавца в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаСчФПрод;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 9 не указана дата счета-фактуры продавца в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
	Иначе
		ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
		Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 9 дата счета-фактуры продавца в строке " + НомерСтроки
			               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ)
	                          ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрСчФ);
	
	Если ЕстьИсправлениеСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ) Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 9 не указан номер исправления счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 9 не указана дата исправления счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В приложении 1 к разделу 9 дата исправления счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьКорректировкаСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод) Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 9 не указан номер корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаКСчФПрод;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 9 не указана дата корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В приложении 1 к разделу 9 дата корректировочного счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеКорректировочногоСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                                           ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьИсправлениеКорректировочногоСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ) Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 9 не указан номер исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрКСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В приложении 1 к разделу 9 не указана дата исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В приложении 1 к разделу 9 дата исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрДлина(СокрЛП(СтрокаДанных.ОКВ)) <> 3 Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 9 неверно указан код валюты в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "14", ПозицияПерехода);
	КонецЕсли;
	
	УказанКодВидаОперации = Ложь;
	УказанНекорректныйКодВидаОперации = Ложь;
	
	Для Каждого Операция Из СтрокаДанных.КодВидОпер Цикл
		УказанКодВидаОперации = УказанКодВидаОперации ИЛИ ЗначениеЗаполнено(Операция);
		УказанНекорректныйКодВидаОперации = УказанНекорректныйКодВидаОперации
		                                ИЛИ ДопустимыеКодыОперации.Найти(Операция) = Неопределено;
	КонецЦикла;
	
	Если НЕ УказанКодВидаОперации Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 9 не указан код вида операции в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "2", ПозицияПерехода);
	ИначеЕсли УказанНекорректныйКодВидаОперации Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 9 указан некорректный код вида операции в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "2", ПозицияПерехода);
	КонецЕсли;
	
	ОшибкиСпискаДокументов = Новый Структура;
	Для Каждого ДокументПодтверждения Из СтрокаДанных.ДокПдтвОпл Цикл
		Если НЕ ЗначениеЗаполнено(ДокументПодтверждения.НомДокПдтвОпл) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказанНомер");
		КонецЕсли;
		
		ПроверяемаяДата = ДокументПодтверждения.ДатаДокПдтвОпл;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОшибкиСпискаДокументов.Вставить("НеУказанаДата");
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ЗначениеЗаполнено(ОшибкиВДате) Тогда
				ОшибкиСпискаДокументов.Вставить(ОшибкиВДате);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДетализацияОшибки = ПредставлениеОшибокСпискаДокументов(ОшибкиСпискаДокументов);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В приложении 1 к разделу 9 в строке " + НомерСтроки + " указаны документы, подтверждающие оплату, с " + ДетализацияОшибки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "13", ПозицияПерехода);
	КонецЕсли;
	
	ОшибкиИНН = Новый Структура;
	ОшибкиКПП = Новый Структура;
	
	Для Каждого СведенияОПокупателе Из СтрокаДанных.СвПокуп Цикл
		ОпределитьОшибкиИННКПП(СведенияОПокупателе, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП);
	КонецЦикла;
	
	ДетализацияОшибки = ПредставлениеОшибокИНН(ОшибкиИНН);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " приложения 1 к разделу 9 указан ИНН покупателя" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "10", ПозицияПерехода);
	КонецЕсли;
	
	ДетализацияОшибки = ПредставлениеОшибокКПП(ОшибкиКПП);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " приложения 1 к разделу 9 указан КПП покупателя" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "10", ПозицияПерехода);
	КонецЕсли;
	
	ОшибкиИНН = Новый Структура;
	ОшибкиКПП = Новый Структура;
	ОпределитьОшибкиИННКПП(СтрокаДанных.СвПос, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП);
	
	ДетализацияОшибки = ПредставлениеОшибокИНН(ОшибкиИНН);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " приложения 1 к разделу 9 указан ИНН посредника" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "12", ПозицияПерехода);
	КонецЕсли;
	
	ДетализацияОшибки = ПредставлениеОшибокКПП(ОшибкиКПП);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " приложения 1 к разделу 9 указан КПП посредника" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "12", ПозицияПерехода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел10(КонтекстВыполнения, ДанныеРаздела, СтатусПроверки)
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполнения.Вставить("КонтекстРаздела", Новый Структура);
	
	СписокДопустимыхКодовОпераций = КодыОпераций_Раздел10();
	ДопустимыеКодыОперации = СтрРазделить(СписокДопустимыхКодовОпераций, ",");
	
	КонтрольныеСписки = Новый Структура;
	КонтрольныеСписки.Вставить("ДопустимыеКодыОперации", ДопустимыеКодыОперации);
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("КонтрольныеСписки", КонтрольныеСписки);
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел10", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел10(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел10(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстРаздела");
	
КонецПроцедуры

&НаСервере
Функция КодыОпераций_Раздел10()
	
	ДатаПодписиОтчета = мДанныеОтчета.ПолеТабличногоДокументаТитульный.ДатаПодписи;
	
	Если ДатаПодписиОтчета >= '2016-07-01' Тогда
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30";
	Иначе
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеСтрокиДанных_Раздел10(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения)
	
	ИмяРаздела = "Раздел10";
	
	ПроблемныеИННКПП = КонтекстВыполнения.ПроблемныеИННКПП;
	КонтрольныеСписки = КонтекстВыполнения.КонтекстРаздела.КонтрольныеСписки;
	
	ДопустимыеКодыОперации = КонтрольныеСписки.ДопустимыеКодыОперации;
	
	КолонкиТаблицы = СтрокаДанных.Владелец().Колонки;
	Если КолонкиТаблицы.Найти("ДокументРасшифровки") <> Неопределено Тогда
		ПозицияПерехода = ПолучитьНавигационнуюСсылку(СтрокаДанных.ДокументРасшифровки);
	Иначе
		ПозицияПерехода = НомерСтроки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомерПор) Тогда
		ОписаниеОшибки = "В разделе 10 не указан порядковый номер строки в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "2", НомерСтроки);
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаВыст;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ОписаниеОшибки = "В разделе 10 не указана дата выставления счета-фактуры в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
	Иначе
		ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
		Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
			ОписаниеОшибки = "В разделе 10 дата выставления счета-фактуры в строке " + НомерСтроки
			               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомСчФПрод) Тогда
		ОписаниеОшибки = "В разделе 10 не указан номер счета-фактуры продавца в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаСчФПрод;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ОписаниеОшибки = "В разделе 10 не указана дата счета-фактуры продавца в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
	Иначе
		ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
		Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
			ОписаниеОшибки = "В разделе 10 дата выставления счета-фактуры продавца в строке " + НомерСтроки
			               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ)
	                          ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрСчФ);
	
	Если ЕстьИсправлениеСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ) Тогда
			ОписаниеОшибки = "В разделе 10 не указан номер исправления счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "6", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В разделе 10 не указана дата исправления счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "6", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В разделе 10 дата исправления счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "6", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьКорректировкаСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод) Тогда
			ОписаниеОшибки = "В разделе 10 не указан номер корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаКСчФПрод;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В разделе 10 не указана дата корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В разделе 10 дата корректировочного счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеКорректировочногоСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                                           ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьИсправлениеКорректировочногоСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ) Тогда
			ОписаниеОшибки = "В разделе 10 не указан номер исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "8", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрКСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В разделе 10 не указана дата исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "8", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В разделе 10 дата исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "8", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УказанКодВидаОперации = Ложь;
	УказанНекорректныйКодВидаОперации = Ложь;
	
	Для Каждого Операция Из СтрокаДанных.КодВидОпер Цикл
		УказанКодВидаОперации = УказанКодВидаОперации ИЛИ ЗначениеЗаполнено(Операция);
		УказанНекорректныйКодВидаОперации = УказанНекорректныйКодВидаОперации
		                                ИЛИ ДопустимыеКодыОперации.Найти(Операция) = Неопределено;
	КонецЦикла;
	
	Если НЕ УказанКодВидаОперации Тогда
		ОписаниеОшибки = "В разделе 10 не указан код вида операции в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
	ИначеЕсли УказанНекорректныйКодВидаОперации Тогда
		ОписаниеОшибки = "В разделе 10 указан некорректный код вида операции в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
	КонецЕсли;
	
	ОшибкиИНН = Новый Структура;
	ОшибкиКПП = Новый Структура;
	
	ОпределитьОшибкиИННКПП(СтрокаДанных.СвПокуп, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП);
	
	ДетализацияОшибки = ПредставлениеОшибокИНН(ОшибкиИНН);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 10 указан ИНН покупателя" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "10", ПозицияПерехода);
	КонецЕсли;
	
	ДетализацияОшибки = ПредставлениеОшибокКПП(ОшибкиКПП);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 10 указан КПП покупателя" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "10", ПозицияПерехода);
	КонецЕсли;
	
	Для Каждого СведенияОПосредническойДеятельности Из СтрокаДанных.СвПосрДеят Цикл
		
		Если НЕ ЗначениеЗаполнено(СведенияОПосредническойДеятельности.НомСчФОтПрод) Тогда
			ОписаниеОшибки = "В разделе 10 не указан номер счета-фактуры, полученного от продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "13", ПозицияПерехода);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СведенияОПосредническойДеятельности.ДатаСчФОтПрод) Тогда
			ОписаниеОшибки = "В разделе 10 не указана дата счета-фактуры, полученного от продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "13", ПозицияПерехода);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОПосредническойДеятельности.ОКВ) И СтрДлина(СокрЛП(СведенияОПосредническойДеятельности.ОКВ)) <> 3 Тогда
			ОписаниеОшибки = "В разделе 10 неверно указан код валюты в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "14", ПозицияПерехода);
		КонецЕсли;
		
		ОшибкиИНН = Новый Структура;
		ОшибкиКПП = Новый Структура;
		ОпределитьОшибкиИННКПП(СведенияОПосредническойДеятельности.СвПрод, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП);
		
		ДетализацияОшибки = ПредставлениеОшибокИНН(ОшибкиИНН);
		Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
			ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 10 указан ИНН продавца" + ДетализацияОшибки
			               + ". Внесите исправление в справочник контрагентов и перезаполните отчет";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "12", ПозицияПерехода);
		КонецЕсли;
		
		ДетализацияОшибки = ПредставлениеОшибокКПП(ОшибкиКПП);
		Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
			ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 10 указан КПП продавца" + ДетализацияОшибки
			               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "12", ПозицияПерехода);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДанных.СвПосрДеят.Количество() = 0 Тогда
		ОписаниеОшибки = "В разделе 10 не указаны сведения о посреднической деятельности в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "11", ПозицияПерехода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел11(КонтекстВыполнения, ДанныеРаздела, СтатусПроверки)
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполнения.Вставить("КонтекстРаздела", Новый Структура);
	
	СписокДопустимыхКодовОпераций = КодыОпераций_Раздел11();
	ДопустимыеКодыОперации = СтрРазделить(СписокДопустимыхКодовОпераций, ",");
	
	СписокКодовВидовСделки = "1,2,3,4";
	ДопустимыеКодыВидовСделки = СтрРазделить(СписокКодовВидовСделки, ",");
	
	КонтрольныеСписки = Новый Структура;
	КонтрольныеСписки.Вставить("ДопустимыеКодыОперации", ДопустимыеКодыОперации);
	КонтрольныеСписки.Вставить("ДопустимыеКодыВидовСделки", ДопустимыеКодыВидовСделки);
	
	КонтекстВыполнения.КонтекстРаздела.Вставить("КонтрольныеСписки", КонтрольныеСписки);
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел11", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел11(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел11(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстРаздела");
	
КонецПроцедуры

&НаСервере
Функция КодыОпераций_Раздел11()
	
	ДатаПодписиОтчета = мДанныеОтчета.ПолеТабличногоДокументаТитульный.ДатаПодписи;
	
	Если ДатаПодписиОтчета >= '2016-07-01' Тогда
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30";
	Иначе
		Возврат "01,02,03,04,05,06,07,08,09,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеСтрокиДанных_Раздел11(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения)
	
	ИмяРаздела = "Раздел11";
	
	ПроблемныеИННКПП = КонтекстВыполнения.ПроблемныеИННКПП;
	КонтрольныеСписки = КонтекстВыполнения.КонтекстРаздела.КонтрольныеСписки;
	
	ДопустимыеКодыОперации = КонтрольныеСписки.ДопустимыеКодыОперации;
	ДопустимыеКодыВидовСделки = КонтрольныеСписки.ДопустимыеКодыВидовСделки;
	
	КолонкиТаблицы = СтрокаДанных.Владелец().Колонки;
	Если КолонкиТаблицы.Найти("ДокументРасшифровки") <> Неопределено Тогда
		ПозицияПерехода = ПолучитьНавигационнуюСсылку(СтрокаДанных.ДокументРасшифровки);
	Иначе
		ПозицияПерехода = НомерСтроки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомерПор) Тогда
		ОписаниеОшибки = "В разделе 11 не указан порядковый номер строки в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "2", НомерСтроки);
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаПолуч;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ОписаниеОшибки = "В разделе 11 не указана дата получения счета-фактуры в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
	Иначе
		ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
		Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
			ОписаниеОшибки = "В разделе 11 дата получения счета-фактуры в строке " + НомерСтроки
			               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомСчФПрод) Тогда
		ОписаниеОшибки = "В разделе 11 не указан номер счета-фактуры продавца в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаСчФПрод;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ОписаниеОшибки = "В разделе 11 не указана дата счета-фактуры продавца в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
	Иначе
		ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
		Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
			ОписаниеОшибки = "В разделе 11 дата выставления счета-фактуры продавца в строке " + НомерСтроки
			               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ)
	                          ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрСчФ);
	
	Если ЕстьИсправлениеСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрСчФ) Тогда
			ОписаниеОшибки = "В разделе 11 не указан номер исправления счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "6", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В разделе 11 не указана дата исправления счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "6", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В разделе 11 дата исправления счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "6", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьКорректировкаСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод) Тогда
			ОписаниеОшибки = "В разделе 11 не указан номер корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаКСчФПрод;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В разделе 11 не указана дата корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В разделе 11 дата корректировочного счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "7", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИсправлениеКорректировочногоСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                                           ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьИсправлениеКорректировочногоСчетаФактуры Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ) Тогда
			ОписаниеОшибки = "В разделе 11 не указан номер исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "8", ПозицияПерехода);
		КонецЕсли;
		
		ПроверяемаяДата = СтрокаДанных.ДатаИспрКСчФ;
		Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
			ОписаниеОшибки = "В разделе 11 не указана дата исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки;
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "8", ПозицияПерехода);
		Иначе
			ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
			Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
				ОписаниеОшибки = "В разделе 11 дата исправления корректировочного счета-фактуры продавца в строке " + НомерСтроки
				               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "8", ПозицияПерехода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.КодВидСд) Тогда
		ОписаниеОшибки = "В разделе 11 не указан код вида сделки в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "13", ПозицияПерехода);
	ИначеЕсли ДопустимыеКодыВидовСделки.Найти(СтрокаДанных.КодВидСд) = Неопределено Тогда
		ОписаниеОшибки = "В разделе 11 неверно указан код вида сделки в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "13", ПозицияПерехода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрДлина(СокрЛП(СтрокаДанных.ОКВ)) <> 3 Тогда
		ОписаниеОшибки = "В разделе 11 неверно указан код валюты в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "14", ПозицияПерехода);
	КонецЕсли;
	
	УказанКодВидаОперации = Ложь;
	УказанНекорректныйКодВидаОперации = Ложь;
	
	Для Каждого Операция Из СтрокаДанных.КодВидОпер Цикл
		УказанКодВидаОперации = УказанКодВидаОперации ИЛИ ЗначениеЗаполнено(Операция);
		УказанНекорректныйКодВидаОперации = УказанНекорректныйКодВидаОперации
		                                ИЛИ ДопустимыеКодыОперации.Найти(Операция) = Неопределено;
	КонецЦикла;
	
	Если НЕ УказанКодВидаОперации Тогда
		ОписаниеОшибки = "В разделе 11 не указан код вида операции в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
	ИначеЕсли УказанНекорректныйКодВидаОперации Тогда
		ОписаниеОшибки = "В разделе 11 указан некорректный код вида операции в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "4", ПозицияПерехода);
	КонецЕсли;
	
	ОшибкиИНН = Новый Структура;
	ОшибкиКПП = Новый Структура;
	
	ОпределитьОшибкиИННКПП(СтрокаДанных.СвПрод, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП);
	
	ДетализацияОшибки = ПредставлениеОшибокИНН(ОшибкиИНН);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 11 указан ИНН продавца" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "10", ПозицияПерехода);
	КонецЕсли;
	
	ДетализацияОшибки = ПредставлениеОшибокКПП(ОшибкиКПП);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 11 указан КПП продавца" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "10", ПозицияПерехода);
	КонецЕсли;
	
	ОшибкиИНН = Новый Структура;
	ОшибкиКПП = Новый Структура;
	
	ОпределитьОшибкиИННКПП(СтрокаДанных.СвКомис, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП);
	
	ДетализацияОшибки = ПредставлениеОшибокИНН(ОшибкиИНН);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 11 указан ИНН субкомиссионера (субагента)" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "10", ПозицияПерехода);
	КонецЕсли;
	
	ДетализацияОшибки = ПредставлениеОшибокКПП(ОшибкиКПП);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 11 указан КПП субкомиссионера (субагента)" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "10", ПозицияПерехода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел12(КонтекстВыполнения, ДанныеРаздела, СтатусПроверки)
	
	Если ДанныеРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеРаздела) = Тип("Массив") Тогда
		
		ОбщийНомерСтроки = 1;
		Для Каждого НомерПервойСтрокиСекции Из ДанныеРаздела Цикл
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел12", НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				НомерСтроки = СтрокаЧГ0(ОбщийНомерСтроки);
				ПроверитьЗаполнениеСтрокиДанных_Раздел12(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
				
				ОбщийНомерСтроки = ОбщийНомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		СтрокиРаздела = ДанныеРаздела.Записи;
		
		Для Каждого СтрокаДанных ИЗ СтрокиРаздела Цикл
			НомерСтроки = ДанныеРаздела.Записи.Индекс(СтрокаДанных) + 1;
			НомерСтроки = СтрокаЧГ0(НомерСтроки);
			
			ПроверитьЗаполнениеСтрокиДанных_Раздел12(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеСтрокиДанных_Раздел12(СтрокаДанных, НомерСтроки, СтатусПроверки, КонтекстВыполнения)
	
	ИмяРаздела = "Раздел12";
	
	ПроблемныеИННКПП = КонтекстВыполнения.ПроблемныеИННКПП;
	
	КолонкиТаблицы = СтрокаДанных.Владелец().Колонки;
	Если КолонкиТаблицы.Найти("ДокументРасшифровки") <> Неопределено Тогда
		ПозицияПерехода = ПолучитьНавигационнуюСсылку(СтрокаДанных.ДокументРасшифровки);
	Иначе
		ПозицияПерехода = НомерСтроки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.НомСчФ) Тогда
		ОписаниеОшибки = "В разделе 12 не указан номер счета-фактуры в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
	КонецЕсли;
	
	ПроверяемаяДата = СтрокаДанных.ДатаСчФ;
	Если НЕ ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		ОписаниеОшибки = "В разделе 12 не указана дата счета-фактуры в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
	Иначе
		ОшибкиВДате = ОшибкиТипа_ДатаТип(ПроверяемаяДата);
		Если ОшибкиВДате = "ВыходитЗаПериод" Тогда
			ОписаниеОшибки = "В разделе 12 дата счета-фактуры в строке " + НомерСтроки
			               + " выходит за допустимый период с 01.01.1900 по 31.12.2099";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "3", ПозицияПерехода);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрДлина(СокрЛП(СтрокаДанных.ОКВ)) <> 3 Тогда
		ОписаниеОшибки = "В разделе 12 неверно указан код валюты в строке " + НомерСтроки;
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "6", ПозицияПерехода);
	КонецЕсли;
	
	ОшибкиИНН = Новый Структура;
	ОшибкиКПП = Новый Структура;
	
	ОпределитьОшибкиИННКПП(СтрокаДанных.СвПокуп, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП);
	
	ДетализацияОшибки = ПредставлениеОшибокИНН(ОшибкиИНН);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 12 указан ИНН покупателя" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
	КонецЕсли;
	
	ДетализацияОшибки = ПредставлениеОшибокКПП(ОшибкиКПП);
	Если ЗначениеЗаполнено(ДетализацияОшибки) Тогда
		ОписаниеОшибки = "В строке " + НомерСтроки + " раздела 12 указан КПП покупателя" + ДетализацияОшибки
		               + ". Внесите исправление в справочник контрагентов и перезаполните отчет.";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "5", ПозицияПерехода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, Описание, Раздел, ИмяЯчейки = "", ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	СтатусПроверки = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаСервере
Функция ОшибкиТипа_ДатаТип(ПроверяемоеЗначение)
	
	Ошибки = Неопределено;
	
	Если ТипЗнч(ПроверяемоеЗначение) <> Тип("Дата") Тогда
		ТипЧисло = Новый ОписаниеТипов("Число");
		ГодПроверяемогоЗначения = ТипЧисло.ПривестиЗначение(Прав(ПроверяемоеЗначение, 4));
	Иначе
		ГодПроверяемогоЗначения = Год(ПроверяемоеЗначение);
	КонецЕсли;
	
	Если ГодПроверяемогоЗначения < 1900 ИЛИ ГодПроверяемогоЗначения > 2099 Тогда
		Ошибки = "ВыходитЗаПериод";
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

&НаСервере
Функция ОшибкиИНН(ПроверяемоеЗначение)
	
	Ошибки = Неопределено;
	
	Если СтрДлина(ПроверяемоеЗначение) <> 10 И СтрДлина(ПроверяемоеЗначение) <> 12 Тогда
		Ошибки = "НекорректнаяДлина";
		
	Иначе
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПроверяемоеЗначение) Тогда
			Ошибки = "НеСодержитТолькоЦифры";
		ИначеЕсли Лев(ПроверяемоеЗначение, 2) = "00" Тогда
			Ошибки = "НачинаетсяНа00";
		Иначе
			КонтрольноеЧислоИНН = КонтрольноеЧислоИНН(ПроверяемоеЗначение);
			ДлинаКонтрольногоЧисла = СтрДлина(КонтрольноеЧислоИНН);
			
			Если КонтрольноеЧислоИНН <> Прав(ПроверяемоеЗначение, ДлинаКонтрольногоЧисла) Тогда
				Ошибки = "НекорректноеКонтрольноеЧисло";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

&НаСервере
Функция КонтрольноеЧислоИНН(ИНН)
	
	ВесаЮЛ = Новый Массив(10);
	ВесаЮЛ[0] = Неопределено;
	ВесаЮЛ[1] = 2;
	ВесаЮЛ[2] = 4;
	ВесаЮЛ[3] = 10;
	ВесаЮЛ[4] = 3;
	ВесаЮЛ[5] = 5;
	ВесаЮЛ[6] = 9;
	ВесаЮЛ[7] = 4;
	ВесаЮЛ[8] = 6;
	ВесаЮЛ[9] = 8;
	
	ВесаФЛ11 = Новый Массив(12);
	ВесаФЛ11[0] = Неопределено;
	ВесаФЛ11[1] = 7;
	ВесаФЛ11[2] = 2;
	ВесаФЛ11[3] = 4;
	ВесаФЛ11[4] = 10;
	ВесаФЛ11[5] = 3;
	ВесаФЛ11[6] = 5;
	ВесаФЛ11[7] = 9;
	ВесаФЛ11[8] = 4;
	ВесаФЛ11[9] = 6;
	ВесаФЛ11[10] = 8;
	ВесаФЛ11[11] = 0;
	
	ВесаФЛ12 = Новый Массив(12);
	ВесаФЛ12[0] = Неопределено;
	ВесаФЛ12[1] = 3;
	ВесаФЛ12[2] = 7;
	ВесаФЛ12[3] = 2;
	ВесаФЛ12[4] = 4;
	ВесаФЛ12[5] = 10;
	ВесаФЛ12[6] = 3;
	ВесаФЛ12[7] = 5;
	ВесаФЛ12[8] = 9;
	ВесаФЛ12[9] = 4;
	ВесаФЛ12[10] = 6;
	ВесаФЛ12[11] = 8;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	КонтрольноеЧисло = Неопределено;
	
	Если СтрДлина(СокрЛП(ИНН)) = 10 Тогда
		КонтрольнаяСумма = 0;
		
		Для Инд = 1 По 9 Цикл
			ЧисловоеПредставлениеРазряда = ТипЧисло.ПривестиЗначение(Сред(ИНН, Инд, 1));
			КонтрольнаяСумма = КонтрольнаяСумма + ЧисловоеПредставлениеРазряда * ВесаЮЛ[Инд];
		КонецЦикла;
		
		КонтрольнаяСумма = КонтрольнаяСумма % 11 % 10;
		
		КонтрольноеЧисло = СтрокаЧГ0(КонтрольнаяСумма);
		
	ИначеЕсли СтрДлина(СокрЛП(ИНН)) = 12 Тогда
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;
		
		Для Инд = 1 По 10 Цикл
			ЧисловоеПредставлениеРазряда = ТипЧисло.ПривестиЗначение(Сред(ИНН, Инд, 1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + ЧисловоеПредставлениеРазряда * ВесаФЛ11[Инд];
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + ЧисловоеПредставлениеРазряда * ВесаФЛ12[Инд];
		КонецЦикла;
		
		КонтрольнаяСумма11 = КонтрольнаяСумма11 % 11 % 10;
		
		КонтрольнаяСумма12 = КонтрольнаяСумма12 + КонтрольнаяСумма11 * ВесаФЛ12[11];
		КонтрольнаяСумма12 = КонтрольнаяСумма12 % 11 % 10;
		
		КонтрольноеЧисло = СтрокаЧГ0(КонтрольнаяСумма11)
		                 + СтрокаЧГ0(КонтрольнаяСумма12);
		
	КонецЕсли;
	
	Возврат КонтрольноеЧисло;
	
КонецФункции

&НаСервере
Функция ОшибкиКПП(ПроверяемоеЗначение)
	
	Ошибки = Неопределено;
	
	Если СтрДлина(ПроверяемоеЗначение) <> 9 Тогда
		Ошибки = "НекорректнаяДлина";
		
	Иначе
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(ПроверяемоеЗначение, 4))
		 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Прав(ПроверяемоеЗначение, 3))
		 ИЛИ НЕ ТолькоСимволы09AZ(Сред(ПроверяемоеЗначение, 5, 2)) Тогда
			Ошибки = "НеУдовлетворяетШаблону";
		ИначеЕсли Лев(ПроверяемоеЗначение, 2) = "00" Тогда
			Ошибки = "НачинаетсяНа00"
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

&НаСервере
Функция ТолькоСимволы09AZ(ПроверяемоеЗначение)
	
	РезультатПроверки = Истина;
	
	Код0 = КодСимвола("0");
	Код9 = КодСимвола("9");
	КодA = КодСимвола("A");
	КодZ = КодСимвола("Z");
	
	Для Инд = 1 По 2 Цикл
		ПроверяемыйСимвол = Сред(ПроверяемоеЗначение, Инд, 1);
		КодПроверяемогоСимвола = КодСимвола(ПроверяемыйСимвол);
		
		КодВДиапазонах = Код0 <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= Код9
		             ИЛИ КодA <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодZ;
		
		Если НЕ КодВДиапазонах Тогда
			РезультатПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция УказаныИННКПП(Сведения)
	
	Если Сведения.Свойство("ИННФЛ") Тогда
		Возврат ЗначениеЗаполнено(Сведения.ИННФЛ);
	Иначе
		Возврат ЗначениеЗаполнено(Сведения.ИННЮЛ) ИЛИ ЗначениеЗаполнено(Сведения.КПП);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОпределитьОшибкиИННКПП(Сведения, ОшибкиИНН, ОшибкиКПП, ПроблемныеИННКПП)
	
	Если Сведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Сведения.Свойство("ИННФЛ") Тогда
		ИНН = СокрЛП(Сведения.ИННФЛ);
		Ключ = ИНН;
	Иначе
		ИНН = СокрЛП(Сведения.ИННЮЛ);
		Ключ = ИНН + СокрЛП(Сведения.КПП);
	КонецЕсли;
	
	Если ПроблемныеИННКПП.Найти(Ключ, "ИННКПП") <> Неопределено Тогда
		// По данному сочетанию ИНН и КПП уже были соообщения об ошибках;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		ОшибкаИНН = ОшибкиИНН(ИНН);
		Если ЗначениеЗаполнено(ОшибкаИНН) Тогда
			ОшибкиИНН.Вставить(ОшибкаИНН);
		КонецЕсли;
	КонецЕсли;
	
	Если Сведения.Свойство("КПП") Тогда
		КПП = СокрЛП(Сведения.КПП);
		
		Если ЗначениеЗаполнено(КПП) Тогда
			ОшибкаКПП = ОшибкиКПП(КПП);
			Если ЗначениеЗаполнено(ОшибкаКПП) Тогда
				ОшибкиКПП.Вставить(ОшибкаКПП);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ИНН) Тогда
				ОшибкиКПП.Вставить("НеУказанИНН");
			КонецЕсли;
		Иначе
			Если СтрДлина(СокрЛП(ИНН)) = 10 Тогда
				ОшибкиИНН.Вставить("НеУказанКПП");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОшибкиИНН.Количество() > 0 ИЛИ ОшибкиКПП.Количество() > 0 Тогда
		ЗаписьОПроблемномИННКПП = ПроблемныеИННКПП.Добавить();
		ЗаписьОПроблемномИННКПП.ИННКПП = Ключ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеОшибокСпискаДокументов(ОшибкиСпискаДокументов)
	
	ПредставлениеОшибок = "";
	
	Если ОшибкиСпискаДокументов.Свойство("НеУказанНомер") Тогда
		ПредставлениеОшибок = ПредставлениеОшибок + ", " + "незаполненным номером";
	КонецЕсли;
	
	Если ОшибкиСпискаДокументов.Свойство("НеУказанаДата") Тогда
		ПредставлениеОшибок = ПредставлениеОшибок + ", " + "незаполненной датой";
	КонецЕсли;
	
	Если ОшибкиСпискаДокументов.Свойство("ВыходитЗаПериод") Тогда
		ПредставлениеОшибок = ПредставлениеОшибок + ", " + "датой, выходящей за допустимый период с 01.01.1900 по 31.12.2099";
	КонецЕсли;
	
	Возврат Сред(ПредставлениеОшибок, 3);
	
КонецФункции

&НаСервере
Функция ПредставлениеОшибокИНН(ОшибкиИНН)
	
	ПредставлениеОшибок = "";
	
	Если ОшибкиИНН.Свойство("НекорректнаяДлина") Тогда
		ПредставлениеОшибок = " не из 10 или 12 цифр";
	КонецЕсли;
	
	Если ОшибкиИНН.Свойство("НеСодержитТолькоЦифры") Тогда
		ПредставлениеОшибок = ПредставлениеОшибок + ", состоящий не только из цифр";
	КонецЕсли;
	
	Если ОшибкиИНН.Свойство("НачинаетсяНа00") Тогда
		ПредставлениеОшибок = ПредставлениеОшибок + ", начинающийся на 00";
	КонецЕсли;
	
	Если ОшибкиИНН.Свойство("НекорректноеКонтрольноеЧисло") Тогда
		ПредставлениеОшибок = ПредставлениеОшибок + ?(ЗначениеЗаполнено(ПредставлениеОшибок), ",", "") + " с некорректным контрольным числом";
	КонецЕсли;
	
	Если ОшибкиИНН.Свойство("НеУказанКПП") Тогда
		ПредставлениеОшибок = ПредставлениеОшибок + ?(ЗначениеЗаполнено(ПредставлениеОшибок), ",", "") + " без указания КПП";
	КонецЕсли;
	
	Возврат ПредставлениеОшибок;
	
КонецФункции

&НаСервере
Функция ПредставлениеОшибокКПП(ОшибкиКПП)
	
	ПредставлениеОшибок = "";
	
	Если ОшибкиКПП.Свойство("НекорректнаяДлина") Тогда
		ПредставлениеОшибок = " не из 9 символов";
	КонецЕсли;
	
	Если ОшибкиКПП.Свойство("НеУдовлетворяетШаблону") Тогда
		ПредставлениеОшибок = ПредставлениеОшибок + ", состоящий не только из цифр и символов A-Z (в позициях 5 и 6)";
	КонецЕсли;
	
	Если ОшибкиКПП.Свойство("НачинаетсяНа00") Тогда
		ПредставлениеОшибок = ПредставлениеОшибок + ", начинающийся на 00";
	КонецЕсли;
	
	Если ОшибкиКПП.Свойство("НеУказанИНН") Тогда
		ПредставлениеОшибок = ПредставлениеОшибок + ?(ЗначениеЗаполнено(ПредставлениеОшибок), ",", "") + " без указания ИНН";
	КонецЕсли;
	
	Возврат ПредставлениеОшибок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРазделРегистраУчетаНДС(ИмяРаздела)
	
	Результат = (ИмяРаздела = "Раздел8")
	        ИЛИ (ИмяРаздела = "Раздел8_Прил1")
	        ИЛИ (ИмяРаздела = "Раздел9")
	        ИЛИ (ИмяРаздела = "Раздел9_Прил1")
	        ИЛИ (ИмяРаздела = "Раздел10")
	        ИЛИ (ИмяРаздела = "Раздел11")
	        ИЛИ (ИмяРаздела = "Раздел12");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	ПостобработкаДереваВыгрузки(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
			+ "_" + ПараметрыВыгрузки.КодИФНС
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
			
КонецФункции

&НаСервере
Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

&НаСервере
Функция ЭкземплярРазделаПуст(ДеревоВыгрузки, ИДРаздела, Данные, ПоказателиИсключения = Неопределено)
	
	Исключения = Новый Структура;
	Если ПоказателиИсключения <> Неопределено Тогда
		Исключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	РезультатыПоиска = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", ИДРаздела), Истина);
	Для Каждого РезультатПоиска Из РезультатыПоиска Цикл
		ИДПоказателя = СокрЛП(РезультатПоиска.Ключ);
		ПоказательЯвляетсяСуммой = (РезультатПоиска.Формат = "N" И РезультатПоиска.МаксРазмерность >= 10 И РезультатПоиска.МинРазмерность = 99999);
		Если НЕ ЗначениеЗаполнено(ИДПоказателя) ИЛИ Исключения.Свойство(ИДПоказателя) Тогда
			Продолжить;
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Данные, ИДПоказателя) И ЗначениеПоказателяЗаполнено(Данные[ИДПоказателя], ПоказательЯвляетсяСуммой) Тогда
			Возврат Ложь;
		ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Данные, ИДПоказателя + "_1") Тогда
			Инд = 1;
			Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Данные, ИДПоказателя + "_" + Формат(Инд, "ЧГ=")) Цикл
				Если ЗначениеПоказателяЗаполнено(Данные[ИДПоказателя + "_" + Формат(Инд, "ЧГ=")], ПоказательЯвляетсяСуммой) Тогда
					Возврат Ложь;
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция МногострочнаяЧастьПуста(Данные, СтрПоказатели, СтрПоказателиСуммы = Неопределено)
	
	Если ЗначениеЗаполнено(СтрПоказателиСуммы) Тогда
		ПоказателиСуммы = Новый Структура(СтрПоказателиСуммы);
	Иначе
		ПоказателиСуммы = Новый Структура;
	КонецЕсли;
	
	СтруктураПоказателей = Новый Структура(СтрПоказатели);
	Для Каждого Эл Из СтруктураПоказателей Цикл
		Инд = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Данные, Эл.Ключ + "_" + Формат(Инд, "ЧГ=")) Цикл
			Если ЗначениеПоказателяЗаполнено(Данные[Эл.Ключ + "_" + Формат(Инд, "ЧГ=")], ПоказателиСуммы.Свойство(Эл.Ключ)) Тогда
				Возврат Ложь;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПостобработкаДереваВыгрузки(ДеревоВыгрузки)
	
	УзелНДС = ДеревоВыгрузки.Строки.Найти("НДС", "Код", Истина);
	
	// решаем, оставлять ли узел НалИсчСМР (раздел 3)
	УзелНалИсчСМР = УзелНДС.Строки.Найти("НалИсчСМР", "Код", Истина);
	Если УзелНалИсчСМР <> Неопределено И УзелПуст(УзелНалИсчСМР) И УзелНалИсчСМР.Родитель.Родитель.Строки.Найти("ВыпСМРСоб", "Код", Истина) = Неопределено Тогда
		
		// удаляем НалИсчСМР
		УзелНалИсчСМР.Родитель.Строки.Удалить(УзелНалИсчСМР);
		
	КонецЕсли;
	
	// решаем, оставлять ли узел СумНалВосст (раздел 3)
	УзелСумНалВосст = УзелНДС.Строки.Найти("СумНалВосст", "Код", Истина);
	Если УзелСумНалВосст <> Неопределено И УзелПуст(УзелСумНалВосст) Тогда
		
		// определяем, пусты ли все узлы ДатаИсп170
		УзлыДатаИсп170 = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "ДатаИсп170"), Истина);
		Если УзлыДатаИсп170.Количество() = 0 Тогда
			
			// удаляем узел СумНалВосст
			УзелСумНалВосст.Родитель.Строки.Удалить(УзелСумНалВосст);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если узел СумНалОб пуст и СумНалИсч отсутствует, то удалим СумНалОб (раздел 3)
	// узел СумНалОб проверяем на пустоту именно по количеству подчиненных строк,
	// потому что возможны ситуации, когда узлу подчинен пустой узел СумНалВосст (см. выше)
	УзелСумНалОб = УзелНДС.Строки.Найти("СумНалОб", "Код", Истина);
	Если УзелСумНалОб <> Неопределено И УзелСумНалОб.Строки.Количество() = 1 И УзелПуст(УзелСумНалОб.Строки[0]) Тогда
		
		// определяем, пусты ли все узлы СумНалИсч
		УзлыСумНалИсч = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "СумНалИсч"), Истина);
		Если УзлыСумНалИсч.Количество() = 0 Тогда
			
			// удаляем узел СумНалОб
			УзелСумНалОб.Родитель.Строки.Удалить(УзелСумНалОб);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если узел СумНалВыч пуст и нет ни одного (СумНалВыч, подчиненного СумВычИн),
	// то удалим СумНалВыч
	УзелСумУпл164 = УзелНДС.Строки.Найти("СумУпл164", "Код", Истина);
	Если УзелСумУпл164 <> Неопределено Тогда
		
		// ищем СумНалВыч в подчинении СумУпл164
		УзелСумНалВычСложный = УзелСумУпл164.Строки.Найти("СумНалВыч", "Код");
		Если УзелСумНалВычСложный <> Неопределено Тогда
			
			// если остался только НалВычОбщ и он пустой
			Если УзелСумНалВычСложный.Строки.Количество() = 1 И УзелПуст(УзелСумНалВычСложный.Строки[0]) Тогда
				
				// если при этом нет ни одного заполненного СумНалВыч(П000320000103), то удаляем сложный СумНалВыч
				УзлыСумНалВыч = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код, Ключ", "СумНалВыч", "П000320000103"), Истина);
				Если УзлыСумНалВыч.Количество() = 0 Тогда
					УзелСумНалВычСложный.Родитель.Строки.Удалить(УзелСумНалВычСложный);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// решаем, оставлять ли узлы ДоляНеОбл и НалГод
	УзлыСведНалГод = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "СведНалГод"), Истина);
	Для Каждого УзелСведНалГод Из УзлыСведНалГод Цикл
		
		УзелДатаИсп170 = УзелСведНалГод.Строки.Найти("ДатаИсп170", "Код");
		Если УзелДатаИсп170 = Неопределено ИЛИ УзелПуст(УзелДатаИсп170) Тогда
			
			УзелДоляНеОбл = УзелСведНалГод.Строки.Найти("ДоляНеОбл", "Код");
			Если УзелПуст(УзелДоляНеОбл) Тогда
				УзелСведНалГод.Строки.Удалить(УзелДоляНеОбл);
			КонецЕсли;
			
			УзелНалГод = УзелСведНалГод.Строки.Найти("НалГод", "Код");
			Если УзелПуст(УзелНалГод) Тогда
				УзелСведНалГод.Строки.Удалить(УзелНалГод);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// решаем, оставлять ли узел СумОпер1010447 (раздел 4)
	СумОпер1010447 = УзелНДС.Строки.Найти("СумОпер1010447", "Код", Истина);
	Если СумОпер1010447 <> Неопределено Тогда
		УзелНалБаза = СумОпер1010447.Строки.Найти("НалБаза", "Код", Истина);
		Если УзелНалБаза = Неопределено ИЛИ (УзелНалБаза <> Неопределено И УзелПуст(УзелНалБаза)) Тогда
			СумОпер1010447.Родитель.Строки.Удалить(СумОпер1010447);
		КонецЕсли;
	КонецЕсли;
	
	// решаем, оставлять ли узел СумОпер1010448 (раздел 4)
	СумОпер1010448 = УзелНДС.Строки.Найти("СумОпер1010448", "Код", Истина);
	Если СумОпер1010448 <> Неопределено Тогда
		УзелКорНалБазаУв = СумОпер1010448.Строки.Найти("КорНалБазаУв", "Код", Истина);
		УзелКорНалБазаУм = СумОпер1010448.Строки.Найти("КорНалБазаУм", "Код", Истина);
		Если УзелКорНалБазаУв = Неопределено ИЛИ (УзелКорНалБазаУв <> Неопределено И УзелПуст(УзелКорНалБазаУв)) Тогда
			Если УзелКорНалБазаУм = Неопределено ИЛИ (УзелКорНалБазаУм <> Неопределено И УзелПуст(УзелКорНалБазаУм)) Тогда
				СумОпер1010448.Родитель.Строки.Удалить(СумОпер1010448);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// решаем, оставлять ли узел НалВычПред0 (раздел 5)
	НалВычПред0 = УзелНДС.Строки.Найти("НалВычПред0", "Код", Истина);
	Если НалВычПред0 <> Неопределено Тогда
		СумВозмПдтв = НалВычПред0.Строки.Найти("СумВозмПдтв", "Код", Истина);
		СумВозмНеПдтв = НалВычПред0.Строки.Найти("СумВозмНеПдтв", "Код", Истина);
		Если СумВозмПдтв = Неопределено И СумВозмНеПдтв = Неопределено Тогда
			НалВычПред0.Родитель.Строки.Удалить(НалВычПред0);
		КонецЕсли;
	КонецЕсли;
	
	// решаем, оставлять ли узел СумОпер1010449 (раздел 6)
	СумОпер1010449 = УзелНДС.Строки.Найти("СумОпер1010449", "Код", Истина);
	Если СумОпер1010449 <> Неопределено Тогда
		УзелНалБаза = СумОпер1010449.Строки.Найти("НалБаза", "Код", Истина);
		УзелКорИсч_164_23 = СумОпер1010449.Строки.Найти("КорИсч.164.23", "Код", Истина);
		УзелНалВосст = СумОпер1010449.Строки.Найти("НалВосст", "Код", Истина);
		Если (УзелНалБаза = Неопределено ИЛИ (УзелНалБаза <> Неопределено И УзелПуст(УзелНалБаза)))
		   И (УзелКорИсч_164_23 = Неопределено ИЛИ (УзелКорИсч_164_23 <> Неопределено И УзелПуст(УзелКорИсч_164_23)))
		   И (УзелНалВосст = Неопределено ИЛИ (УзелНалВосст <> Неопределено И УзелПуст(УзелНалВосст))) Тогда
			СумОпер1010449.Родитель.Строки.Удалить(СумОпер1010449);
		КонецЕсли;
	КонецЕсли;
	
	// решаем, оставлять ли узел СумОпер1010450 (раздел 6)
	СумОпер1010450 = УзелНДС.Строки.Найти("СумОпер1010450", "Код", Истина);
	Если СумОпер1010450 <> Неопределено Тогда
		УзелКорНалБазаУв = СумОпер1010450.Строки.Найти("КорНалБазаУв", "Код", Истина);
		УзелКорНалБазаУм = СумОпер1010450.Строки.Найти("КорНалБазаУм", "Код", Истина);
		УзелКорИсч_164_23Ув = СумОпер1010450.Строки.Найти("КорИсч.164.23Ув", "Код", Истина);
		УзелКорИсч_164_23Ум = СумОпер1010450.Строки.Найти("КорИсч.164.23Ум", "Код", Истина);
		
		Если (УзелКорНалБазаУв = Неопределено ИЛИ (УзелКорНалБазаУв <> Неопределено И УзелПуст(УзелКорНалБазаУв)))
		   И (УзелКорИсч_164_23Ув = Неопределено ИЛИ (УзелКорИсч_164_23Ув <> Неопределено И УзелПуст(УзелКорИсч_164_23Ув))) Тогда
			Если (УзелКорНалБазаУм = Неопределено ИЛИ (УзелКорНалБазаУм <> Неопределено И УзелПуст(УзелКорНалБазаУм)))
			   И (УзелКорИсч_164_23Ум = Неопределено ИЛИ (УзелКорИсч_164_23Ум <> Неопределено И УзелПуст(УзелКорИсч_164_23Ум))) Тогда
				СумОпер1010450.Родитель.Строки.Удалить(СумОпер1010450);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// решаем, оставлять ли узел СумНал164Ит (раздел 6)
	УзелСумНал164Ит = УзелНДС.Строки.Найти("СумНал164Ит", "Код", Истина);
	МногострочнаяЧастьЗаполнена = (УзелНДС.Строки.Найти("СумОпер6", "Код", Истина) <> Неопределено);
	Если НЕ МногострочнаяЧастьЗаполнена И УзелПуст(УзелСумНал164Ит) Тогда
		РегламентированнаяОтчетность.УдалитьУзел(УзелСумНал164Ит);
	КонецЕсли;
	
	// удалить пустые необязательные родительские узлы после предварительной обработки
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T"  ИЛИ Стр.Формат = "S" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Формирование XML: Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ (" + АдресПоказателя(Стр)+ ") меньше минимально возможной (" + ДлинаЗначения
					+ " < " + Стр.МинРазмерность + ")", Стр.Раздел, Стр.Ключ, "");
			Иначе
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Формирование XML: Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ (" + АдресПоказателя(Стр)+ ") меньше минимально возможной (" + ДлинаЗначения
					+ " < " + Стр.МинРазмерность + ")", "Титульный", "");
			КонецЕсли;
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Формирование XML: Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """  (" + АдресПоказателя(Стр)+ ") больше максимально возможной (" + ДлинаЗначения
					+ " > " + Стр.МаксРазмерность + ")", Стр.Раздел, Стр.Ключ, "");
			Иначе
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Формирование XML: Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """  (" + АдресПоказателя(Стр)+ ") больше максимально возможной (" + ДлинаЗначения
					+ " > " + Стр.МаксРазмерность + ")", "Титульный", "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Титульный     = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1       = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2       = мДанныеОтчета.Раздел2;
	Раздел3       = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел3_Прил1 = мДанныеОтчета.Раздел3_Прил1;
	Раздел3_Прил2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3_Прил2;
	Раздел4       = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	Раздел5       = мДанныеОтчета.Раздел5;
	Раздел6       = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	Раздел7       = мДанныеОтчета.ПолеТабличногоДокументаРаздел7;
	
	// Раздел 1.
	УзелСумУплНП = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумУплНП");
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "ОКТМО", Раздел1.П000100001003);
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "КБК",   Раздел1.П000100002003);
	
	П100100004003 = ?(ЗначениеСуммыЗаполнено(Раздел1.П000100005003), -Раздел1.П000100005003, Раздел1.П000100004003);
	
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "СумПУ_173.5", Раздел1.П000100003003);
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "СумПУ_173.1", П100100004003);
	
	Узел_СумПУ_173_5 = ПолучитьПодчиненныйЭлемент(УзелСумУплНП, "СумПУ_173.5");
	Узел_СумПУ_173_1 = ПолучитьПодчиненныйЭлемент(УзелСумУплНП, "СумПУ_173.1");
	
	ЗаполненоОКТМО = ЗначениеЗаполнено(Раздел1.П000100001003);
	
	Если ЗаполненоОКТМО Тогда
		Если ЗначениеЗаполнено(Раздел1.П000100003003) И НЕ ЗначениеЗаполнено(П100100004003) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СумПУ_173_1);
		ИначеЕсли НЕ ЗначениеЗаполнено(Раздел1.П000100003003) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СумПУ_173_5);
		КонецЕсли;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(Узел_СумПУ_173_5);
		РегламентированнаяОтчетность.УдалитьУзел(Узел_СумПУ_173_1);
	КонецЕсли;
	
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "НомДогИТ",     Раздел1.П000100006003);
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "ДатаНачДогИТ", Раздел1.П000100007003);
	ЗадатьЗначениеЭлемента(УзелСумУплНП, "ДатаКонДогИТ", Раздел1.П000100008003);
	
	// Раздел 2.
	УзелСумУплНАШаблон = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумУплНА");
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		
		УзелСумУплНА = СкопироватьУзел(УзелРодитель, УзелСумУплНАШаблон);
		ЗаполнитьДаннымиУзел(ЛистРаздела2.Данные[0].Значение, УзелСумУплНА);
		
		ИННЭкземпляраРаздела = СокрЛП(ЛистРаздела2.Данные[0].Значение.П000200003003);
		Если СтрДлина(ИННЭкземпляраРаздела) = 10 ИЛИ НЕ ЗначениеЗаполнено(ИННЭкземпляраРаздела) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелСумУплНА, "СведПродФЛ"));
		ИначеЕсли СтрДлина(ИННЭкземпляраРаздела) = 12 Тогда
			РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелСумУплНА, "СведПродЮЛ"));
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 3.
	УзелСумУпл164 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумУпл164");
	ЗадатьЗначениеЭлемента(УзелСумУпл164, "НалПУ164", ?(ЗначениеСуммыЗаполнено(Раздел3.П000300021003), -Раздел3.П000300021003, Раздел3.П000300020003));
	ЗаполнитьДаннымиУзел(Раздел3, ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумНалОб"));
	ЗаполнитьДаннымиУзел(Раздел3, ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумНалВыч"));
	
	// Раздел 3 приложение 1.
	УзелСумВосУплШаблон = ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумВосУпл");
	Для Каждого ЛистРаздел3Прил1 Из Раздел3_Прил1 Цикл
		УзелСумВосУпл = СкопироватьУзел(УзелСумУпл164, УзелСумВосУплШаблон);
		ДанныеЛистРаздел3Прил1 = ЛистРаздел3Прил1.Данные[0].Значение;
		Для Каждого Узел Из УзелСумВосУпл.Строки Цикл
			Если Узел.Тип = "А" ИЛИ Узел.Тип = "A" Тогда
				ВывестиПоказательВXML(Узел, ДанныеЛистРаздел3Прил1[Узел.Ключ]);
			ИначеЕсли Узел.Код = "АдрМННед" Тогда
				ЗаполнитьДаннымиУзел(ДанныеЛистРаздел3Прил1, Узел);
			КонецЕсли;
		КонецЦикла;
		УзелСведНалГодШаблон = ПолучитьПодчиненныйЭлемент(УзелСумВосУпл, "СведНалГод");
		Инд = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛистРаздел3Прил1, "П000310008001_" + Формат(Инд, "ЧГ=")) Цикл
			УзелСведНалГод = СкопироватьУзел(УзелСумВосУпл, УзелСведНалГодШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛистРаздел3Прил1, УзелСведНалГод, Инд);
			Инд = Инд + 1;
		КонецЦикла;
	КонецЦикла;
	
	// Раздел 3 приложение 2.
	УзелСумВычИн = ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумВычИн");
	УзелСведНалГодИШаблон = ПолучитьПодчиненныйЭлемент(УзелСумВычИн, "СведНалГодИ");
	Инд = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел3_Прил2, "П000320000101_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСведНалГодИ = СкопироватьУзел(УзелСумВычИн, УзелСведНалГодИШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(Раздел3_Прил2, УзелСведНалГодИ, Инд);
		Инд = Инд + 1;
	КонецЦикла;
	
	// Раздел 4.
	УзелНалПодтв0 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалПодтв0");
	ЗадатьЗначениеЭлемента(УзелНалПодтв0, "СумИсчислИтог", ?(ЗначениеСуммыЗаполнено(Раздел4.П000400013003), -Раздел4.П000400013003, Раздел4.П000400012003));
	УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелНалПодтв0, "СумОпер4");
	Инд = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел4, "П000400001003_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСумОпер = СкопироватьУзел(УзелНалПодтв0, УзелСумОперШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(Раздел4, УзелСумОпер, Инд);
		Инд = Инд + 1;
	КонецЦикла;
	УзелСумОпер1010447 = ПолучитьПодчиненныйЭлемент(УзелНалПодтв0, "СумОпер1010447");
	ЗаполнитьДаннымиУзел(Раздел4, УзелСумОпер1010447);
	УзелСумОпер1010448 = ПолучитьПодчиненныйЭлемент(УзелНалПодтв0, "СумОпер1010448");
	ЗаполнитьДаннымиУзел(Раздел4, УзелСумОпер1010448);
	
	// Раздел 5.
	СумВозмПдтв   = 0;
	СумВозмНеПдтв = 0;
	УзелНалВычПред0 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалВычПред0");
	УзелСумПерШаблон = ПолучитьПодчиненныйЭлемент(УзелНалВычПред0, "СумПер");
	Для Каждого ЛистРаздела5 Из Раздел5 Цикл
		ДанныеЛистаРаздела5 = ЛистРаздела5.Данные[0].Значение;
		УзелЛистаРаздела5 = СкопироватьУзел(УзелНалВычПред0, УзелСумПерШаблон);
		Для Каждого Узел Из УзелЛистаРаздела5.Строки Цикл
			Если Узел.Тип = "А" ИЛИ Узел.Тип = "A" Тогда
				ВывестиПоказательВXML(Узел, ДанныеЛистаРаздела5[Узел.Ключ]);
			КонецЕсли;
		КонецЦикла;
		Если Раздел5.Индекс(ЛистРаздела5) = 0 Тогда
			СумВозмПдтв   = ДанныеЛистаРаздела5.П000500008003;
			СумВозмНеПдтв = ДанныеЛистаРаздела5.П000500009003;
		КонецЕсли;
		УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелЛистаРаздела5, "СумОпер5");
		Инд = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛистаРаздела5, "П000500003003_" + Формат(Инд, "ЧГ=")) Цикл
			УзелСумОпер = СкопироватьУзел(УзелЛистаРаздела5, УзелСумОперШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛистаРаздела5, УзелСумОпер, Инд, "П000500003003");
			Инд = Инд + 1;
		КонецЦикла;
	КонецЦикла;
	ЗадатьЗначениеЭлемента(УзелНалВычПред0, "СумВозмПдтв", СумВозмПдтв);
	ЗадатьЗначениеЭлемента(УзелНалВычПред0, "СумВозмНеПдтв", СумВозмНеПдтв);
	
	// Раздел 6.
	УзелНалНеПодтв0 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалНеПодтв0");
	ЗадатьЗначениеЭлемента(УзелНалНеПодтв0, "СумНал164Ит", Раздел6.П000600005003);
	ЗадатьЗначениеЭлемента(УзелНалНеПодтв0, "НалВычНеПодИт", Раздел6.П000600006003);
	ЗадатьЗначениеЭлемента(УзелНалНеПодтв0, "НалИсчислИт", ?(ЗначениеСуммыЗаполнено(Раздел6.П000600017003), -Раздел6.П000600017003, Раздел6.П000600016003));
	Инд = 1;
	УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелНалНеПодтв0, "СумОпер6");
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел6, "П000600001003_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСумОпер = СкопироватьУзел(УзелНалНеПодтв0, УзелСумОперШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(Раздел6, УзелСумОпер, Инд);
		Инд = Инд + 1;
	КонецЦикла;
	ЗаполнитьДаннымиУзел(Раздел6, ПолучитьПодчиненныйЭлемент(УзелНалНеПодтв0, "СумОпер1010449"));
	ЗаполнитьДаннымиУзел(Раздел6, ПолучитьПодчиненныйЭлемент(УзелНалНеПодтв0, "СумОпер1010450"));
	
	// Раздел 7.
	УзелОперНеНал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОперНеНал");
	ЗадатьЗначениеЭлемента(УзелОперНеНал, "ОплПостСв6Мес", Раздел7.П000700001001);
	Инд = 1;
	УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелОперНеНал, "СумОпер7");
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел7, "П000700000101_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСумОпер = СкопироватьУзел(УзелОперНеНал, УзелСумОперШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(Раздел7, УзелСумОпер, Инд);
		Инд = Инд + 1;
	КонецЦикла;
	
	// Разделы 8-12
	УзелКнигаПокуп = ПолучитьПодчиненныйЭлемент(УзелРодитель, "КнигаПокуп");
	ЗадатьЗначениеЭлемента(УзелКнигаПокуп, "НаимКнПок", "NO_NDS.8");
	
	УзелКнигаПокупДЛ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "КнигаПокупДЛ");
	ЗадатьЗначениеЭлемента(УзелКнигаПокупДЛ, "НаимКнПокДЛ", "NO_NDS.81");
	
	УзелКнигаПрод = ПолучитьПодчиненныйЭлемент(УзелРодитель, "КнигаПрод");
	ЗадатьЗначениеЭлемента(УзелКнигаПрод, "НаимКнПрод", "NO_NDS.9");
	
	УзелКнигаПродДЛ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "КнигаПродДЛ");
	ЗадатьЗначениеЭлемента(УзелКнигаПродДЛ, "НаимКнПродДЛ", "NO_NDS.91");
	
	УзелЖУчВыстСчФ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ЖУчВыстСчФ");
	ЗадатьЗначениеЭлемента(УзелЖУчВыстСчФ, "НаимЖУчВыстСчФ", "NO_NDS.10");
	
	УзелЖУчПолучСчФ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ЖУчПолучСчФ");
	ЗадатьЗначениеЭлемента(УзелЖУчПолучСчФ, "НаимЖУчПолучСчФ", "NO_NDS.11");
	
	УзелВыстСчФ_173_5 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ВыстСчФ_173.5");
	ЗадатьЗначениеЭлемента(УзелВыстСчФ_173_5, "НаимВыстСчФ_173.5", "NO_NDS.12");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОРазделах8_12(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	УзелНДС = ДеревоВыгрузки.Строки.Найти("НДС", "Код", Истина);
	
	Если УзелНДС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПризнакиЗаполненностиРазделов8_12 = Новый Структура;
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал8",  "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал81", "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал9",  "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал91", "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал10", "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал11", "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал12", "0");
	
	ЕстьРазделы8_12 = Ложь;
	
	ИмяФайлаСведенийРаздела = Неопределено;
	
	УзелКнигаПокуп = ПолучитьПодчиненныйЭлемент(УзелНДС, "КнигаПокуп");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел8", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелКнигаПокуп, "НаимКнПок", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал8", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелКнигаПокуп);
	КонецЕсли;
	
	УзелКнигаПокупДЛ = ПолучитьПодчиненныйЭлемент(УзелНДС, "КнигаПокупДЛ");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел8_Прил1", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелКнигаПокупДЛ, "НаимКнПокДЛ", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал81", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелКнигаПокупДЛ);
	КонецЕсли;
	
	УзелКнигаПрод = ПолучитьПодчиненныйЭлемент(УзелНДС, "КнигаПрод");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел9", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелКнигаПрод, "НаимКнПрод", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал9", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелКнигаПрод);
	КонецЕсли;
	
	УзелКнигаПродДЛ = ПолучитьПодчиненныйЭлемент(УзелНДС, "КнигаПродДЛ");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел9_Прил1", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелКнигаПродДЛ, "НаимКнПродДЛ", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал91", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелКнигаПродДЛ);
	КонецЕсли;
	
	УзелЖУчВыстСчФ = ПолучитьПодчиненныйЭлемент(УзелНДС, "ЖУчВыстСчФ");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел10", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелЖУчВыстСчФ, "НаимЖУчВыстСчФ", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал10", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелЖУчВыстСчФ);
	КонецЕсли;
	
	УзелЖУчПолучСчФ = ПолучитьПодчиненныйЭлемент(УзелНДС, "ЖУчПолучСчФ");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел11", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелЖУчПолучСчФ, "НаимЖУчПолучСчФ", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал11", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелЖУчПолучСчФ);
	КонецЕсли;
	
	УзелВыстСчФ_173_5 = ПолучитьПодчиненныйЭлемент(УзелНДС, "ВыстСчФ_173.5");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел12", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелВыстСчФ_173_5, "НаимВыстСчФ_173.5", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал12", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелВыстСчФ_173_5);
	КонецЕсли;
	
	Если ЕстьРазделы8_12 Тогда
		ЗадатьЗначениеЭлемента(ДеревоВыгрузки, "ПризнНал8-12", "1");
	КонецЕсли;
	
	Для каждого ИмяПризнакаИЗначение Из ПризнакиЗаполненностиРазделов8_12 Цикл
		УзелПризнакаЗаполненностиРаздела = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, ИмяПризнакаИЗначение.Ключ);
		Если ЕстьРазделы8_12 Тогда
			ВывестиПоказательВXML(УзелПризнакаЗаполненностиРаздела, ИмяПризнакаИЗначение.Значение);
		Иначе
			РегламентированнаяОтчетность.УдалитьУзел(УзелПризнакаЗаполненностиРаздела);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" ИЛИ Узел.Формат = "S" Тогда // учтем оба варианта: кириллицу и латиницу	
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
		
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = "_" + Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			ВывестиПоказательВXML(Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Свойство("Раздел") И ЭтоРазделРегистраУчетаНДС(Ячейка.Раздел)
	   И Элементы.РазделыОтчета.ТекущиеДанные <> Неопределено Тогда
		УзелСтраницРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", Ячейка.Раздел);
		Если УзелСтраницРаздела <> Неопределено Тогда
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
			
			СписокСтраниц = ЭтаФорма["Страницы" + Ячейка.Раздел];
			
			Если СписокСтраниц.Количество() > 0 Тогда
				ТипЧисло = Новый ОписаниеТипов("Число");
				НомерСтрокиСОшибкой = ТипЧисло.ПривестиЗначение(Ячейка.Страница);
				РазмерСегмента = СписокСтраниц[0].НомерПоследнейСтроки - СписокСтраниц[0].НомерПервойСтроки + 1;
				
				НомерСегмента = Цел((НомерСтрокиСОшибкой - 1) / РазмерСегмента) + 1;
				ОтображемаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(УзелСтраницРаздела.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСегмента);
			Иначе
				ОтображемаяСтрока = УзелСтраницРаздела;
			КонецЕсли;
			Элементы.РазделыОтчета.ТекущаяСтрока = ОтображемаяСтрока.ПолучитьИдентификатор();
			
			Если Лев(Ячейка.Страница, 6) = "e1cib/" Тогда
				ПерейтиПоНавигационнойСсылке(Ячейка.Страница);
				
			Иначе
				ОбластьСтроки = ТабличныйДокументУчетаНДС.Области.Найти("Строка_" + Ячейка.Страница);
				Если ОбластьСтроки <> Неопределено Тогда
					ТипЧисло = Новый ОписаниеТипов("Число");
					НомерГрафы = ТипЧисло.ПривестиЗначение(Ячейка.ИмяЯчейки);
					ОбластьСОшибкой = ТабличныйДокументУчетаНДС.Область(ОбластьСтроки.Верх, НомерГрафы, ОбластьСтроки.Низ, НомерГрафы);
					Элементы.ТабличныйДокументУчетаНДС.ТекущаяОбласть = ОбластьСОшибкой;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
	ВывестиРезультатПроверки();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыгрузкуПоНовомуАлгоритмуНаСервере()
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ШаблоныОшибок = Отчеты.РегламентированныйОтчетНДС.ПолучитьМакет("ШаблоныСообщенийОбОшибках2015Кв1");
	РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	СтруктураРеквизитовФормы.Вставить("АдресХранилищаПроверкиВыгрузки", АдресХранилища);
	
	РегламентированнаяОтчетностьПроверкаНДС.ВыявитьОшибкиЗаполненияПрепятствующиеФормированиюЭлектронногоПредставления_ФормаОтчета2015Кв1(РегламентированныйОтчет, ШаблоныОшибок, Заголовок, АдресХранилища);
	
	ЗаписатьРезультатПроверкиВыгрузки();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	СохраненыеСведенияОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ЗаполненоНовымАлгоритмом = Ложь;
	Если СохраненыеСведенияОтчета.Свойство("ВерсияАвтозаполнения")
	   И СохраненыеСведенияОтчета.ВерсияАвтозаполнения = "2015Кв3" Тогда
		ЗаполненоНовымАлгоритмом = Истина;
	КонецЕсли;
	
	Если ЗаполненоНовымАлгоритмом Тогда
		ПроверитьВыгрузкуПоНовомуАлгоритмуНаСервере();
		
		Результат = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки);
		Возврат Результат;
		
	Иначе
		Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
		
		Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел8"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел8_Прил1"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел9"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел9_Прил1"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел10"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел11"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12" Тогда
		сохрТаблДок = ТабличныйДокументУчетаНДС.ПолучитьОбласть();
	Иначе
		сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	КонецЕсли;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если СтрокаУровня1.ИмяСтраницы = "Раздел8"
		 ИЛИ СтрокаУровня1.ИмяСтраницы = "Раздел8_Прил1"
		 ИЛИ СтрокаУровня1.ИмяСтраницы = "Раздел9"
		 ИЛИ СтрокаУровня1.ИмяСтраницы = "Раздел9_Прил1"
		 ИЛИ СтрокаУровня1.ИмяСтраницы = "Раздел10"
		 ИЛИ СтрокаУровня1.ИмяСтраницы = "Раздел11"
		 ИЛИ СтрокаУровня1.ИмяСтраницы = "Раздел12" Тогда
			
			Если СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Неопределено Тогда
				ВывестиНаПечатьЛистыРазделов8_12_ЗаполненныхБезДеленияНаСекции(
					СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			Иначе
				ВывестиНаПечатьЛистыРазделов8_12_ЗаполненныхСДелениемНаСекции(
					СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			КонецЕсли;
			
		Иначе
			
			Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
				
				ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
				ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				
			Иначе
				
				СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
				ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел8"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел8_Прил1"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел9"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел9_Прил1"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел10"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел11"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12" Тогда
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.СтраницаРегистраУчетаНДС;
		ТабличныйДокументУчетаНДС.Очистить();
		ТабличныйДокументУчетаНДС.Вывести(сохрТаблДок);
	Иначе
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(сохрТаблДок);
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",     "ПечатныйБланк2015Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",       "ПечатныйБланк2015Кв1_Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",       "ПечатныйБланк2015Кв1_Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел3",       "ПечатныйБланк2015Кв1_Раздел3");
	СоответствиеРазделовМакетам.Вставить("Раздел3_Прил1", "ПечатныйБланк2015Кв1_Раздел3_Прил1");
	СоответствиеРазделовМакетам.Вставить("Раздел3_Прил2", "ПечатныйБланк2015Кв1_Раздел3_Прил2");
	СоответствиеРазделовМакетам.Вставить("Раздел4",       "ПечатныйБланк2015Кв1_Раздел4");
	СоответствиеРазделовМакетам.Вставить("Раздел5",       "ПечатныйБланк2015Кв1_Раздел5");
	СоответствиеРазделовМакетам.Вставить("Раздел6",       "ПечатныйБланк2015Кв1_Раздел6");
	СоответствиеРазделовМакетам.Вставить("Раздел7",       "ПечатныйБланк2015Кв1_Раздел7");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		//определение исходного количества строк на листе МЧБ
		Если Парам1.ИмяСтраницы = "Раздел3_Прил2" Тогда
			ИсхКолвоСтрокБлока = 23;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел4" Тогда
			ИсхКолвоСтрокБлока = 4;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел5" Тогда
			ИсхКолвоСтрокБлока = 3;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел6" Тогда
			ИсхКолвоСтрокБлока = 2;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел7" Тогда
			ИсхКолвоСтрокБлока = 21;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
			КонецЕсли;
			
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						//проверка на вхождение в данную многострочную часть
						Продолжить;
					КонецЕсли;
					
					//определение и обрасывание НомерЯчейки
					ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					//определение СмысловаяЧасть и ТекущийСчетчик
					СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					//Окончательная проверка на вхождение в данную многострочную часть
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						//очищение происходит после этого цикла
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					//Подготовка к переименованию
					//заполнение списка: значение - область, представление - будущее имя
					СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
				КонецЦикла;
				
				//Очищение
				Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				//Переименование
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);

				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЛистМЧБ.ПолеСверху = 5;
				ЛистМЧБ.ПолеСправа = 5;
				ЛистМЧБ.ПолеСнизу  = 5;
				ЛистМЧБ.ПолеСлева  = 5;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ) > 0 Тогда
					// Выводится не первый лист многострочной серии листов МЧБ.
					// Необходимо обнулить итоговые показатели.
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				ИначеЕсли Парам1.ИмяСтраницы = "Раздел5" Тогда
					Если СтруктураРеквизитовФормы.мПечатныеФормы[СтруктураРеквизитовФормы.мПечатныеФормы.Количество() - 1].Представление = "Раздел 5" Тогда
						// Выводится не первый лист многостранично-многострочной серии листов МЧБ Раздела 5.
						// Необходимо обнулить итоговые показатели.
						ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистыРазделов8_12_ЗаполненныхБезДеленияНаСекции(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	Если НЕ СтруктураРеквизитовФормы.Свойство("АдресДанных" + Парам1.ИмяСтраницы) Тогда
		Данные = Неопределено;
	ИначеЕсли СтруктураРеквизитовФормы["АдресДанных" + Парам1.ИмяСтраницы] = Неопределено Тогда
		Данные = Неопределено;
	Иначе
		Данные = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресДанных" + Парам1.ИмяСтраницы]);
		Если Данные.Записи.Количество() = 0 Тогда
			Данные = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Данные = Неопределено Тогда
		
		Данные = ДанныеДляПечатиПустыхМЧБРазделов8_12();
		
	КонецЕсли;
	
	Данные.Вставить("ЭтоПерваяСтраницаРаздела",    Неопределено);
	Данные.Вставить("ЭтоПоследняяСтраницаРаздела", Неопределено);
	
	ВывестиНаПечатьЛистыРазделов8_12_ОбщаяЧасть(Парам1, ОбщиеРеквизитыРазделов, СтрПоля, Данные);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистыРазделов8_12_ЗаполненныхСДелениемНаСекции(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	РазделЗаполнен = ЭтаФорма["Страницы" + Парам1.ИмяСтраницы].Количество() > 0;
	
	Если РазделЗаполнен Тогда;
		
		ДанныеРаздела = ДанныеРазделаНДСДляПечати(Парам1.ИмяСтраницы);
		
	Иначе
		
		// Раздел либо а) не заполнялся совсем, либо б) был
		// заполнен, но затем был очищен, а отчет не сохранен.
		ДанныеРаздела = Неопределено;
		
	КонецЕсли;
	
	Если ДанныеРаздела = Неопределено Тогда
		
		Данные = ДанныеДляПечатиПустыхМЧБРазделов8_12();
		
		ВывестиНаПечатьЛистыРазделов8_12_ОбщаяЧасть(Парам1, ОбщиеРеквизитыРазделов, СтрПоля, Данные);
		
	Иначе
		
		СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
		
		ПечататьОдинКомплектЛистовРаздела
			= (СтруктураРеквизитовФормы["АктуальностьСведений" + Парам1.ИмяСтраницы] = 1
			И СтруктураРеквизитовФормы.ВидДокумента <> 0);
		
		Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
			
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(
				СтруктураРеквизитовФормы.мСохраненныйДок, Парам1.ИмяСтраницы, НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				
				// Преобразование структуры данных, передаваемой в общий механизм вывода листов
				// МЧБ разделов 8 - 12 при новом ("сегментированном") варианте хранения данных.
				Данные = Новый Структура;
				
				МассивКопируемыхСтрок = Новый Массив;
				МассивКопируемыхСтрок.Добавить(СтрокаДанных);
				
				// Данные, полученные из ИБ потребителя.
				Данные.Вставить("Записи", СтрокиСегментаРаздела.Скопировать(МассивКопируемыхСтрок));
				Данные.Вставить("Итоги",  ДанныеРаздела.Итоги);
				
				// Служебные данные, определяющие необходимость вывода на печать
				// значений отдельных показателей и/или формат вывода этих значений.
				Данные.Вставить("ЭтоПерваяСтраницаРаздела",
					НомерПервойСтрокиСекции = СтрокиРаздела[0] И СтрокиСегментаРаздела.Индекс(СтрокаДанных) = 0);
				Данные.Вставить("ЭтоПоследняяСтраницаРаздела",
					НомерПервойСтрокиСекции = СтрокиРаздела[СтрокиРаздела.Количество() - 1]
					И СтрокиСегментаРаздела.Индекс(СтрокаДанных) = СтрокиСегментаРаздела.Количество() - 1);
				
				ВывестиНаПечатьЛистыРазделов8_12_ОбщаяЧасть(Парам1, ОбщиеРеквизитыРазделов, СтрПоля, Данные);
				
				Если ПечататьОдинКомплектЛистовРаздела Тогда
					Возврат;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистыРазделов8_12_ОбщаяЧасть(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено, Данные)
	
	Для каждого Запись Из Данные.Записи Цикл
		
		Если Парам1.ИмяСтраницы = "Раздел8" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел8 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел8";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				ТекКолвоСтрокБлокаРаздел8_1 = Запись.КодВидОпер.Количество();
				ТекКолвоСтрокБлокаРаздел8_2 = Запись.ДокПдтвУпл.Количество();
				ТекКолвоСтрокБлокаРаздел8_3 = Запись.ДатаУчТов.Количество();
				
				ИсхКолвоСтрокБлокаРаздел8_1 = 7;
				ИсхКолвоСтрокБлокаРаздел8_2 = 1;
				ИсхКолвоСтрокБлокаРаздел8_3 = 1;
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				Если (ТекКолвоСтрокБлокаРаздел8_1 > 0 И ИсхКолвоСтрокБлокаРаздел8_1 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел8_2 > 0 И ИсхКолвоСтрокБлокаРаздел8_2 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел8_3 > 0 И ИсхКолвоСтрокБлокаРаздел8_3 > 0) Тогда
					
					ДробноеКолвоЛистовМЧБ = Макс(
						?(ТекКолвоСтрокБлокаРаздел8_1 > ИсхКолвоСтрокБлокаРаздел8_1, ТекКолвоСтрокБлокаРаздел8_1 / ИсхКолвоСтрокБлокаРаздел8_1, 1),
						?(ТекКолвоСтрокБлокаРаздел8_2 > ИсхКолвоСтрокБлокаРаздел8_2, ТекКолвоСтрокБлокаРаздел8_2 / ИсхКолвоСтрокБлокаРаздел8_2, 1),
						?(ТекКолвоСтрокБлокаРаздел8_3 > ИсхКолвоСтрокБлокаРаздел8_3, ТекКолвоСтрокБлокаРаздел8_3 / ИсхКолвоСтрокБлокаРаздел8_3, 1));
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрИменаПоказателей = "П000800001003;П000800010003;П000800011003;П000800012003";
					
					СписокЛистовМЧБ = Новый СписокЗначений;
					
					Для Сч = 1 По КолвоЛистовМЧБ Цикл
						
						СписокОчищаемыхОбластей = Новый Массив;
						СписокОбластейПереименования = Новый СписокЗначений;
						
						Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
							
							ИмяЯчейки = ТекущаяОбласть.Имя;
							
							Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
							ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
							НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
							
							СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
							СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
							ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
							
							Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Если СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000800001003") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел8_1);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел8_1;
							ИначеЕсли СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000800010003") > 0 ИЛИ СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000800011003") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел8_2);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел8_2;
							ИначеЕсли СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000800012003") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел8_3);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел8_3;
							КонецЕсли;
							
							Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
								СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
								Продолжить;
							КонецЕсли;
							
							СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
							
						КонецЦикла;
						
						Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
							ОбластьСписка.Имя = "";
							ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
						КонецЦикла;
						
						Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
							ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
						КонецЦикла;
						
						СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
					КонецЦикла;
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = 0 И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = 0);
						КонецЕсли;
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
						
						ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ЛистМЧБ);
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
						
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
						
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Истина);
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел8_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				ТекКолвоСтрокБлокаРаздел8_Прод = Запись.СвПрод.Количество();
				
				ИсхКолвоСтрокБлокаРаздел8_Прод = 1;
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				Если ТекКолвоСтрокБлокаРаздел8_Прод > 0 И ИсхКолвоСтрокБлокаРаздел8_Прод > 0 Тогда
					
					ДробноеКолвоЛистовМЧБ = ?(ТекКолвоСтрокБлокаРаздел8_Прод > ИсхКолвоСтрокБлокаРаздел8_Прод,
						ТекКолвоСтрокБлокаРаздел8_Прод / ИсхКолвоСтрокБлокаРаздел8_Прод, 1);
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрИменаПоказателей = "П000800013003;П000800013004";
					
					СписокЛистовМЧБ = Новый СписокЗначений;
					
					Для Сч = 1 По КолвоЛистовМЧБ Цикл
						
						СписокОчищаемыхОбластей = Новый Массив;
						СписокОбластейПереименования = Новый СписокЗначений;
						
						Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
							
							ИмяЯчейки = ТекущаяОбласть.Имя;
							
							Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
							ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
							НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
							
							СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
							СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
							ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
							
							Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Если СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000800013003") > 0 ИЛИ СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000800013004") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел8_Прод);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел8_Прод;
							КонецЕсли;
							
							Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
								СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
								Продолжить;
							КонецЕсли;
							
							СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
							
						КонецЦикла;
						
						Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
							ОбластьСписка.Имя = "";
							ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
						КонецЦикла;
						
						Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
							ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
						КонецЦикла;
						
						СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
					КонецЦикла;
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						Если Данные.ЭтоПоследняяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела", Данные.ЭтоПоследняяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = (Данные.Записи.Количество() - 1)
								И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = СписокЛистовМЧБ.Количество() - 1);
						КонецЕсли;
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						ДопПараметры.Вставить("Итоги", Данные.Итоги);
						ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
						
						ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ЛистМЧБ);
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
						
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
						
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					Если Данные.ЭтоПоследняяСтраницаРаздела <> Неопределено Тогда
						ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела", Данные.ЭтоПоследняяСтраницаРаздела);
					Иначе
						ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела", Данные.Записи.Индекс(Запись) = (Данные.Записи.Количество() - 1));
					КонецЕсли;
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					ДопПараметры.Вставить("Итоги", Данные.Итоги);
					ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел8";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел8_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел8_Прил1" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел8_Прил1 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел8_Прил1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				ТекКолвоСтрокБлокаРаздел8_1 = Запись.КодВидОпер.Количество();
				ТекКолвоСтрокБлокаРаздел8_2 = Запись.ДокПдтвУпл.Количество();
				ТекКолвоСтрокБлокаРаздел8_3 = Запись.ДатаУчТов.Количество();
				
				ИсхКолвоСтрокБлокаРаздел8_1 = 7;
				ИсхКолвоСтрокБлокаРаздел8_2 = 1;
				ИсхКолвоСтрокБлокаРаздел8_3 = 1;
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				Если (ТекКолвоСтрокБлокаРаздел8_1 > 0 И ИсхКолвоСтрокБлокаРаздел8_1 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел8_2 > 0 И ИсхКолвоСтрокБлокаРаздел8_2 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел8_3 > 0 И ИсхКолвоСтрокБлокаРаздел8_3 > 0) Тогда
					
					ДробноеКолвоЛистовМЧБ = Макс(
						?(ТекКолвоСтрокБлокаРаздел8_1 > ИсхКолвоСтрокБлокаРаздел8_1, ТекКолвоСтрокБлокаРаздел8_1 / ИсхКолвоСтрокБлокаРаздел8_1, 1),
						?(ТекКолвоСтрокБлокаРаздел8_2 > ИсхКолвоСтрокБлокаРаздел8_2, ТекКолвоСтрокБлокаРаздел8_2 / ИсхКолвоСтрокБлокаРаздел8_2, 1),
						?(ТекКолвоСтрокБлокаРаздел8_3 > ИсхКолвоСтрокБлокаРаздел8_3, ТекКолвоСтрокБлокаРаздел8_3 / ИсхКолвоСтрокБлокаРаздел8_3, 1));
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрИменаПоказателей = "П000810001003;П000810010003;П000810011003;П000810012003";
					
					СписокЛистовМЧБ = Новый СписокЗначений;
					
					Для Сч = 1 По КолвоЛистовМЧБ Цикл
						
						СписокОчищаемыхОбластей = Новый Массив;
						СписокОбластейПереименования = Новый СписокЗначений;
						
						Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
							
							ИмяЯчейки = ТекущаяОбласть.Имя;
							
							Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
							ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
							НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
							
							СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
							СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
							ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
							
							Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Если СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000810001003") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел8_1);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел8_1;
							ИначеЕсли СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000810010003") > 0 ИЛИ СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000800011003") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел8_2);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел8_2;
							ИначеЕсли СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000810012003") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел8_3);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел8_3;
							КонецЕсли;
							
							Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
								СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
								Продолжить;
							КонецЕсли;
							
							СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
							
						КонецЦикла;
						
						Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
							ОбластьСписка.Имя = "";
							ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
						КонецЦикла;
						
						Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
							ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
						КонецЦикла;
						
						СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
					КонецЦикла;
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = 0 И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = 0);
						КонецЕсли;
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						ДопПараметры.Вставить("Итоги", Данные.Итоги);
						ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
						
						ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ЛистМЧБ);
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
						
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
						
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Истина);
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					ДопПараметры.Вставить("Итоги", Данные.Итоги);
					ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел8_Прил1_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				ТекКолвоСтрокБлокаРаздел8_Прод = Запись.СвПрод.Количество();
				
				ИсхКолвоСтрокБлокаРаздел8_Прод = 1;
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				Если ТекКолвоСтрокБлокаРаздел8_Прод > 0 И ИсхКолвоСтрокБлокаРаздел8_Прод > 0 Тогда
					
					ДробноеКолвоЛистовМЧБ = ?(ТекКолвоСтрокБлокаРаздел8_Прод > ИсхКолвоСтрокБлокаРаздел8_Прод,
						ТекКолвоСтрокБлокаРаздел8_Прод / ИсхКолвоСтрокБлокаРаздел8_Прод, 1);
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрИменаПоказателей = "П000810013003;П000810013004";
					
					СписокЛистовМЧБ = Новый СписокЗначений;
					
					Для Сч = 1 По КолвоЛистовМЧБ Цикл
						
						СписокОчищаемыхОбластей = Новый Массив;
						СписокОбластейПереименования = Новый СписокЗначений;
						
						Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
							
							ИмяЯчейки = ТекущаяОбласть.Имя;
							
							Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
							ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
							НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
							
							СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
							СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
							ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
							
							Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Если СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000810013003") > 0 ИЛИ СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000810013004") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел8_Прод);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел8_Прод;
							КонецЕсли;
							
							Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
								СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
								Продолжить;
							КонецЕсли;
							
							СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
							
						КонецЦикла;
						
						Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
							ОбластьСписка.Имя = "";
							ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
						КонецЦикла;
						
						Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
							ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
						КонецЦикла;
						
						СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
					КонецЦикла;
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						Если Данные.ЭтоПоследняяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела", Данные.ЭтоПоследняяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = (Данные.Записи.Количество() - 1)
								И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = СписокЛистовМЧБ.Количество() - 1);
						КонецЕсли;
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						ДопПараметры.Вставить("Итоги", Данные.Итоги);
						ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
						
						ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ЛистМЧБ);
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
						
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
						
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					Если Данные.ЭтоПоследняяСтраницаРаздела <> Неопределено Тогда
						ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела", Данные.ЭтоПоследняяСтраницаРаздела);
					Иначе
						ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела", Данные.Записи.Индекс(Запись) = (Данные.Записи.Количество() - 1));
					КонецЕсли;
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					ДопПараметры.Вставить("Итоги", Данные.Итоги);
					ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел8_Прил1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел8_Прил1_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел9" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел9 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				ТекКолвоСтрокБлокаРаздел9_1 = Запись.КодВидОпер.Количество();
				ТекКолвоСтрокБлокаРаздел9_2 = Запись.СвПокуп.Количество();
				
				ИсхКолвоСтрокБлокаРаздел9_1 = 7;
				ИсхКолвоСтрокБлокаРаздел9_2 = 1;
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				Если (ТекКолвоСтрокБлокаРаздел9_1 > 0 И ИсхКолвоСтрокБлокаРаздел9_1 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел9_2 > 0 И ИсхКолвоСтрокБлокаРаздел9_2 > 0) Тогда
					
					ДробноеКолвоЛистовМЧБ = Макс(
						?(ТекКолвоСтрокБлокаРаздел9_1 > ИсхКолвоСтрокБлокаРаздел9_1, ТекКолвоСтрокБлокаРаздел9_1 / ИсхКолвоСтрокБлокаРаздел9_1, 1),
						?(ТекКолвоСтрокБлокаРаздел9_2 > ИсхКолвоСтрокБлокаРаздел9_2, ТекКолвоСтрокБлокаРаздел9_2 / ИсхКолвоСтрокБлокаРаздел9_2, 1));
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрИменаПоказателей = "П000900001003;П000900010003;П000900010004";
					
					СписокЛистовМЧБ = Новый СписокЗначений;
					
					Для Сч = 1 По КолвоЛистовМЧБ Цикл
						
						СписокОчищаемыхОбластей = Новый Массив;
						СписокОбластейПереименования = Новый СписокЗначений;
						
						Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
							
							ИмяЯчейки = ТекущаяОбласть.Имя;
							
							Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
							ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
							НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
							
							СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
							СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
							ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
							
							Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Если СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000900001003") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел9_1);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел9_1;
							ИначеЕсли СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000900010003") > 0 ИЛИ СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000900010004") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел9_2);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел9_2;
							КонецЕсли;
							
							Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
								СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
								Продолжить;
							КонецЕсли;
							
							СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
							
						КонецЦикла;
						
						Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
							ОбластьСписка.Имя = "";
							ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
						КонецЦикла;
						
						Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
							ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
						КонецЦикла;
						
						СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
					КонецЦикла;
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = 0 И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = 0);
						КонецЕсли;
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
						
						ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ЛистМЧБ);
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
						
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
						
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Истина);
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9_Прод1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				ТекКолвоСтрокБлокаРаздел9_Прод1 = Запись.ДокПдтвОпл.Количество();
				
				ИсхКолвоСтрокБлокаРаздел9_Прод1 = 1;
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				Если ТекКолвоСтрокБлокаРаздел9_Прод1 > 0 И ИсхКолвоСтрокБлокаРаздел9_Прод1 > 0 Тогда
					
					ДробноеКолвоЛистовМЧБ = ?(ТекКолвоСтрокБлокаРаздел9_Прод1 > ИсхКолвоСтрокБлокаРаздел9_Прод1,
						ТекКолвоСтрокБлокаРаздел9_Прод1 / ИсхКолвоСтрокБлокаРаздел9_Прод1, 1);
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрИменаПоказателей = "П000900012003;П000900013003";
					
					СписокЛистовМЧБ = Новый СписокЗначений;
					
					Для Сч = 1 По КолвоЛистовМЧБ Цикл
						
						СписокОчищаемыхОбластей = Новый Массив;
						СписокОбластейПереименования = Новый СписокЗначений;
						
						Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
							
							ИмяЯчейки = ТекущаяОбласть.Имя;
							
							Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
							ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
							НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
							
							СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
							СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
							ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
							
							Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Если СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000900012003") > 0 ИЛИ СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000900013003") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел9_Прод1);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел9_Прод1;
							КонецЕсли;
							
							Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
								СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
								Продолжить;
							КонецЕсли;
							
							СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
							
						КонецЦикла;
						
						Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
							ОбластьСписка.Имя = "";
							ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
						КонецЦикла;
						
						Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
							ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
						КонецЦикла;
						
						СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
					КонецЦикла;
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод1");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
						
						ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ЛистМЧБ);
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
						
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
						
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод1");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
				Если Данные.ЭтоПоследняяСтраницаРаздела <> Неопределено Тогда
					ВыводитьНаПечать_Раздел9_Прод2 = Данные.ЭтоПоследняяСтраницаРаздела;
				Иначе
					ВыводитьНаПечать_Раздел9_Прод2 = (Данные.Записи.Индекс(Запись) = Данные.Записи.Количество() - 1);
				КонецЕсли;
				
				Если ВыводитьНаПечать_Раздел9_Прод2 Тогда
					
					МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9_Прод2";
					
					МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
					МакетМЧБ.ПолеСверху = 5;
					МакетМЧБ.ПолеСправа = 5;
					МакетМЧБ.ПолеСнизу  = 5;
					МакетМЧБ.ПолеСлева  = 5;
					
					ВремПоля = Новый Структура(СтрПоля);
					
					СохрТабличныйДокумент = Новый ТабличныйДокумент;
					СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод2");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("Итоги", Данные.Итоги);
					ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9_Прод1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод1");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9_Прод2";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод2");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел9_Прил1" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел9_Прил1 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
			
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9_Прил1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
				Иначе
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.Записи.Индекс(Запись) = 0);
				КонецЕсли;
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
				ДопПараметры.Вставить("Итоги", Данные.Итоги);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9_Прил1_Прод1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				ТекКолвоСтрокБлокаРаздел9_Прил1_1 = Запись.КодВидОпер.Количество();
				ТекКолвоСтрокБлокаРаздел9_Прил1_2 = Запись.СвПокуп.Количество();
				
				ИсхКолвоСтрокБлокаРаздел9_Прил1_1 = 7;
				ИсхКолвоСтрокБлокаРаздел9_Прил1_2 = 1;
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				Если (ТекКолвоСтрокБлокаРаздел9_Прил1_1 > 0 И ИсхКолвоСтрокБлокаРаздел9_Прил1_1 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел9_Прил1_2 > 0 И ИсхКолвоСтрокБлокаРаздел9_Прил1_2 > 0) Тогда
					
					ДробноеКолвоЛистовМЧБ = Макс(
						?(ТекКолвоСтрокБлокаРаздел9_Прил1_1 > ИсхКолвоСтрокБлокаРаздел9_Прил1_1, ТекКолвоСтрокБлокаРаздел9_Прил1_1 / ИсхКолвоСтрокБлокаРаздел9_Прил1_1, 1),
						?(ТекКолвоСтрокБлокаРаздел9_Прил1_2 > ИсхКолвоСтрокБлокаРаздел9_Прил1_2, ТекКолвоСтрокБлокаРаздел9_Прил1_2 / ИсхКолвоСтрокБлокаРаздел9_Прил1_2, 1));
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрИменаПоказателей = "П000910009003;П000910018003;П000910018004";
					
					СписокЛистовМЧБ = Новый СписокЗначений;
					
					Для Сч = 1 По КолвоЛистовМЧБ Цикл
						
						СписокОчищаемыхОбластей = Новый Массив;
						СписокОбластейПереименования = Новый СписокЗначений;
						
						Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
							
							ИмяЯчейки = ТекущаяОбласть.Имя;
							
							Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
							ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
							НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
							
							СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
							СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
							ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
							
							Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Если СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000910009003") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел9_Прил1_1);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел9_Прил1_1;
							ИначеЕсли СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000910018003") > 0 ИЛИ СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000910018004") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел9_Прил1_2);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел9_Прил1_2;
							КонецЕсли;
							
							Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
								СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
								Продолжить;
							КонецЕсли;
							
							СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
							
						КонецЦикла;
						
						Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
							ОбластьСписка.Имя = "";
							ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
						КонецЦикла;
						
						Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
							ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
						КонецЦикла;
						
						СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
					КонецЦикла;
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод1");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
						
						ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ЛистМЧБ);
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
						
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
						
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод1");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9_Прил1_Прод2";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				ТекКолвоСтрокБлокаРаздел9_Прил1_3 = Запись.ДокПдтвОпл.Количество();
				
				ИсхКолвоСтрокБлокаРаздел9_Прил1_3 = 1;
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				Если ТекКолвоСтрокБлокаРаздел9_Прил1_3 > 0 И ИсхКолвоСтрокБлокаРаздел9_Прил1_3 > 0 Тогда
					
					ДробноеКолвоЛистовМЧБ = ?(ТекКолвоСтрокБлокаРаздел9_Прил1_3 > ИсхКолвоСтрокБлокаРаздел9_Прил1_3,
						ТекКолвоСтрокБлокаРаздел9_Прил1_3 / ИсхКолвоСтрокБлокаРаздел9_Прил1_3, 1);
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрИменаПоказателей = "П000910020003;П000910021003";
					
					СписокЛистовМЧБ = Новый СписокЗначений;
					
					Для Сч = 1 По КолвоЛистовМЧБ Цикл
						
						СписокОчищаемыхОбластей = Новый Массив;
						СписокОбластейПереименования = Новый СписокЗначений;
						
						Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
							
							ИмяЯчейки = ТекущаяОбласть.Имя;
							
							Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
							ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
							НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
							
							СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
							СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
							ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
							
							Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Если СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000910020003") > 0 ИЛИ СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000910021003") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел9_Прил1_3);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел9_Прил1_3;
							КонецЕсли;
							
							Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
								СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
								Продолжить;
							КонецЕсли;
							
							СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
							
						КонецЦикла;
						
						Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
							ОбластьСписка.Имя = "";
							ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
						КонецЦикла;
						
						Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
							ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
						КонецЦикла;
						
						СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
					КонецЦикла;
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод2");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
						
						ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ЛистМЧБ);
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
						
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
						
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод2");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
				Если Данные.ЭтоПоследняяСтраницаРаздела <> Неопределено Тогда
					ВыводитьНаПечать_Раздел9_Прил1_Прод3 = Данные.ЭтоПоследняяСтраницаРаздела;
				Иначе
					ВыводитьНаПечать_Раздел9_Прил1_Прод3 = (Данные.Записи.Индекс(Запись) = Данные.Записи.Количество() - 1);
				КонецЕсли;
				
				Если ВыводитьНаПечать_Раздел9_Прил1_Прод3 Тогда
					
					МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9_Прил1_Прод3";
					
					МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
					МакетМЧБ.ПолеСверху = 5;
					МакетМЧБ.ПолеСправа = 5;
					МакетМЧБ.ПолеСнизу  = 5;
					МакетМЧБ.ПолеСлева  = 5;
					
					ВремПоля = Новый Структура(СтрПоля);
					
					СохрТабличныйДокумент = Новый ТабличныйДокумент;
					СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод3");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("Итоги", Данные.Итоги);
					ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9_Прил1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9_Прил1_Прод1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод1");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9_Прил1_Прод2";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод2");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел9_Прил1_Прод3";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод3");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел10" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел10 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
			
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел10";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				ТекКолвоСтрокБлокаРаздел10 = Запись.КодВидОпер.Количество();
				
				ИсхКолвоСтрокБлокаРаздел10 = 7;
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				Если ТекКолвоСтрокБлокаРаздел10 > 0 И ИсхКолвоСтрокБлокаРаздел10 > 0 Тогда
					
					ДробноеКолвоЛистовМЧБ = ?(ТекКолвоСтрокБлокаРаздел10 > ИсхКолвоСтрокБлокаРаздел10, ТекКолвоСтрокБлокаРаздел10 / ИсхКолвоСтрокБлокаРаздел10, 1);
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрИменаПоказателей = "П001000002003";
					
					СписокЛистовМЧБ = Новый СписокЗначений;
					
					Для Сч = 1 По КолвоЛистовМЧБ Цикл
						
						СписокОчищаемыхОбластей = Новый Массив;
						СписокОбластейПереименования = Новый СписокЗначений;
						
						Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
							
							ИмяЯчейки = ТекущаяОбласть.Имя;
							
							Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
							ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
							НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
							
							СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
							СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
							ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
							
							Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Если СтрЧислоВхождений(ТекущаяОбласть.Имя, "П001000002003") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел10);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел10;
							КонецЕсли;
							
							Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
								СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
								Продолжить;
							КонецЕсли;
							
							СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
							
						КонецЦикла;
						
						Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
							ОбластьСписка.Имя = "";
							ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
						КонецЦикла;
						
						Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
							ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
						КонецЦикла;
						
						СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
					КонецЦикла;
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = 0 И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = 0);
						КонецЕсли;
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
						
						ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ЛистМЧБ);
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
						
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
						
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Истина);
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
				Для каждого Сведения Из Запись.СвПосрДеят Цикл
					
					МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел10_Прод";
					
					МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
					МакетМЧБ.ПолеСверху = 5;
					МакетМЧБ.ПолеСправа = 5;
					МакетМЧБ.ПолеСнизу  = 5;
					МакетМЧБ.ПолеСлева  = 5;
					
					ВремПоля = Новый Структура(СтрПоля);
					
					СохрТабличныйДокумент = Новый ТабличныйДокумент;
					СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("Сведения", Сведения);
					ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЦикла;
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел10";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел10_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел11" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел11 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
			
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел11";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				ТекКолвоСтрокБлокаРаздел11 = Запись.КодВидОпер.Количество();
				
				ИсхКолвоСтрокБлокаРаздел11 = 7;
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				Если ТекКолвоСтрокБлокаРаздел11 > 0 И ИсхКолвоСтрокБлокаРаздел11 > 0 Тогда
					
					ДробноеКолвоЛистовМЧБ = ?(ТекКолвоСтрокБлокаРаздел11 > ИсхКолвоСтрокБлокаРаздел11, ТекКолвоСтрокБлокаРаздел11 / ИсхКолвоСтрокБлокаРаздел11, 1);
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрИменаПоказателей = "П001100002003";
					
					СписокЛистовМЧБ = Новый СписокЗначений;
					
					Для Сч = 1 По КолвоЛистовМЧБ Цикл
						
						СписокОчищаемыхОбластей = Новый Массив;
						СписокОбластейПереименования = Новый СписокЗначений;
						
						Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
							
							ИмяЯчейки = ТекущаяОбласть.Имя;
							
							Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
							ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
							НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
							
							СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
							СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
							ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
							
							Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Если СтрЧислоВхождений(ТекущаяОбласть.Имя, "П001100002003") > 0 Тогда
								НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаРаздел11);
								ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаРаздел11;
							КонецЕсли;
							
							Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
								СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
								Продолжить;
							КонецЕсли;
							
							СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
							
						КонецЦикла;
						
						Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
							ОбластьСписка.Имя = "";
							ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
						КонецЦикла;
						
						Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
							ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
						КонецЦикла;
						
						СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
					КонецЦикла;
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = 0 И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = 0);
						КонецЕсли;
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
						
						ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ЛистМЧБ);
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
						
						ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
						
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Истина);
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел11_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел11";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел11_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел12" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел12 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
			
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел12";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
				Иначе
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.Записи.Индекс(Запись) = 0);
				КонецЕсли;
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, Запись, ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2015Кв1_Раздел12";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ВремПоля = Новый Структура(СтрПоля);
				
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов, , ДопПараметры);
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеРазделаНДСДляПечати(ИмяРаздела)
	
	ДанныеРаздела = Неопределено;
	
	Секции = СписокСекцийРазделаИзРегистра(ИмяРаздела);
	
	Если Секции.Количество() > 0 Тогда
		ДанныеРаздела = Новый Структура();
		ДанныеРаздела.Вставить("СтрокиРаздела", Секции.ВыгрузитьКолонку("НомерПервойСтроки"));
		ДанныеРаздела.Вставить("Итоги", РегламентированнаяОтчетность.ИтогиРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела));
	КонецЕсли;
	
	Возврат ДанныеРаздела;
	
КонецФункции

&НаСервере
Функция ДанныеДляПечатиПустыхМЧБРазделов8_12()
	
	Записи = Новый Массив;
	Записи.Вставить(0, "");
	
	Данные = Новый Структура;
	Данные.Вставить("Записи", Записи);
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиРазделов8_12(Показатели, ИмяРаздела, ДанныеРазделов8_12, ДопПараметры)
	
	Если ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел8" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел8 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800000503";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомерПор, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НачНомСтрКодВидОпер = ДопПараметры.ИндексЛистаМЧБ * 7 + 1;
			Для НомСтрКодВидОпер = НачНомСтрКодВидОпер По НачНомСтрКодВидОпер + 6 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000800001003_" + НомСтрКодВидОпер;
				ИндексВМассиве = НомСтрКодВидОпер - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидОпер.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидОпер[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800002003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800003003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800004003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800005003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800006003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомКСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800007003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаКСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800008003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрКСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800009003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрКСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800010003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвУпл.Количество() Тогда
				НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.ДокПдтвУпл[ИндексВМассиве].НомДокПдтвУпл);
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800011003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвУпл.Количество() Тогда
				НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДокПдтвУпл[ИндексВМассиве].ДатаДокПдтвУпл), ".", "");
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800012003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДатаУчТов.Количество() Тогда
				НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаУчТов[ИндексВМассиве]), ".", "");
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800000103";
			Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
				Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел8 = 1 Тогда
					НовСтр.Значение = "1";
				Иначе
					НовСтр.Значение = "0";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800000503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			Для НомСтрКодВидОпер = 1 По 7 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000800001003_" + НомСтрКодВидОпер;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800002003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800003003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800004003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800005003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800006003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800007003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800008003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800009003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800010003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800011003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800012003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел8_Прод" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800013003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПрод.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПрод[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПрод[ИндексВМассиве].Свойство("ИННЮЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПрод[ИндексВМассиве].ИННЮЛ) + "--";
					ИначеЕсли ДанныеРазделов8_12.СвПрод[ИндексВМассиве].Свойство("ИННФЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПрод[ИндексВМассиве].ИННФЛ);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800013004_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПрод.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПрод[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПрод[ИндексВМассиве].Свойство("КПП") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПрод[ИндексВМассиве].КПП);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800014003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННЮЛ) + "--", "");
				ИначеЕсли ДанныеРазделов8_12.СвПос.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННФЛ), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800014004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("КПП") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.КПП), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800015003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомТД), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800016003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.ОКВ), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800017003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПокупВ) = Тип("Число"), ДанныеРазделов8_12.СтоимПокупВ, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800018003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДСВыч) = Тип("Число"), ДанныеРазделов8_12.СумНДСВыч, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800019003";
			Если ДопПараметры.ЭтоПоследняяСтраницаРаздела Тогда
				НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСВсКПк) = Тип("Число"), ДопПараметры.Итоги.СумНДСВсКПк, 0);
			Иначе
				НовСтр.Значение = 0;
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800013003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800013004_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800014003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800014004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800015003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800016003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800017003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800018003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800019003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел8_Прил1" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел8_Прил1 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810000503";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСИтКПк) = Тип("Число"), ДопПараметры.Итоги.СумНДСИтКПк, 0);
			Иначе
				НовСтр.Значение = 0;
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810000803";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомерПор, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НачНомСтрКодВидОпер = ДопПараметры.ИндексЛистаМЧБ * 7 + 1;
			Для НомСтрКодВидОпер = НачНомСтрКодВидОпер По НачНомСтрКодВидОпер + 6 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000810001003_" + НомСтрКодВидОпер;
				ИндексВМассиве = НомСтрКодВидОпер - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидОпер.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидОпер[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810002003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810003003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810004003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810005003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810006003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомКСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810007003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаКСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810008003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрКСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810009003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрКСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810010003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвУпл.Количество() Тогда
				НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.ДокПдтвУпл[ИндексВМассиве].НомДокПдтвУпл);
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810011003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвУпл.Количество() Тогда
				НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДокПдтвУпл[ИндексВМассиве].ДатаДокПдтвУпл), ".", "");
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810012003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДатаУчТов.Количество() Тогда
				НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаУчТов[ИндексВМассиве]), ".", "");
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810000103";
			Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
				Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел8_Прил1 = 1 Тогда
					НовСтр.Значение = "1";
				Иначе
					НовСтр.Значение = "0";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810000503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810000803";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			Для НомСтрКодВидОпер = 1 По 7 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000810001003_" + НомСтрКодВидОпер;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810002003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810003003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810004003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810005003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810006003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810007003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810008003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810009003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810010003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810011003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810012003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Конецесли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел8_Прил1_Прод" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810013003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПрод.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПрод[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПрод[ИндексВМассиве].Свойство("ИННЮЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПрод[ИндексВМассиве].ИННЮЛ) + "--";
					ИначеЕсли ДанныеРазделов8_12.СвПрод[ИндексВМассиве].Свойство("ИННФЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПрод[ИндексВМассиве].ИННФЛ);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810013004_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПрод.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПрод[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПрод[ИндексВМассиве].Свойство("КПП") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПрод[ИндексВМассиве].КПП);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810014003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННЮЛ) + "--", "");
				ИначеЕсли ДанныеРазделов8_12.СвПос.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННФЛ), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810014004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("КПП") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.КПП), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810015003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомТД), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810016003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.ОКВ), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810017003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПокупВ) = Тип("Число"), ДанныеРазделов8_12.СтоимПокупВ, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810018003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДС) = Тип("Число"), ДанныеРазделов8_12.СумНДС, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810019003";
			Если ДопПараметры.ЭтоПоследняяСтраницаРаздела Тогда
				НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСИтП1Р8) = Тип("Число"), ДопПараметры.Итоги.СумНДСИтП1Р8, 0);
			Иначе
				НовСтр.Значение = 0;
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810013003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810013004_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810014003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810014004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810015003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810016003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810017003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810018003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810019003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел9 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900000503";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомерПор, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НачНомСтрКодВидОпер = ДопПараметры.ИндексЛистаМЧБ * 7 + 1;
			Для НомСтрКодВидОпер = НачНомСтрКодВидОпер По НачНомСтрКодВидОпер + 6 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000900001003_" + НомСтрКодВидОпер;
				ИндексВМассиве = НомСтрКодВидОпер - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидОпер.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидОпер[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900002003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900003003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900004003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900005003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900006003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомКСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900007003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаКСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900008003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрКСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900009003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрКСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900010003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПокуп.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].Свойство("ИННЮЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].ИННЮЛ) + "--";
					ИначеЕсли ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].Свойство("ИННФЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].ИННФЛ);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900010004_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПокуп.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].Свойство("КПП") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].КПП);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900000103";
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел9 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900000503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			Для НомСтрКодВидОпер = 1 По 7 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000900001003_" + НомСтрКодВидОпер;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900002003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900003003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900004003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900005003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900006003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900007003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900008003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900009003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900010003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900010004_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9_Прод1" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900011003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННЮЛ) + "--", "");
				ИначеЕсли ДанныеРазделов8_12.СвПос.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННФЛ), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900011004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("КПП") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.КПП), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900012003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвОпл.Количество() Тогда
				НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.ДокПдтвОпл[ИндексВМассиве].НомДокПдтвОпл);
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900013003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвОпл.Количество() Тогда
				НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДокПдтвОпл[ИндексВМассиве].ДатаДокПдтвОпл), ".", "");
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900014003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.ОКВ), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900015003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФВ) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФВ, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900016003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900017003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ18) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ18, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900018003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ10) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ10, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900019003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ0) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ0, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900020003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДССФ18) = Тип("Число"), ДанныеРазделов8_12.СумНДССФ18, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900021003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДССФ10) = Тип("Число"), ДанныеРазделов8_12.СумНДССФ10, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900022003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродОсв) = Тип("Число"), ДанныеРазделов8_12.СтоимПродОсв, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900011003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900011004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900012003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900013003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900014003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900015003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900016003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900017003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900018003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900019003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900020003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900021003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900022003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9_Прод2" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900023003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродБезНДС18) = Тип("Число"), ДопПараметры.Итоги.СтПродБезНДС18, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900024003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродБезНДС10) = Тип("Число"), ДопПараметры.Итоги.СтПродБезНДС10, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900025003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродБезНДС0) = Тип("Число"), ДопПараметры.Итоги.СтПродБезНДС0, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900026003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСВсКПр18) = Тип("Число"), ДопПараметры.Итоги.СумНДСВсКПр18, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900027003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСВсКПр10) = Тип("Число"), ДопПараметры.Итоги.СумНДСВсКПр10, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900028003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродОсвВсКПр) = Тип("Число"), ДопПараметры.Итоги.СтПродОсвВсКПр, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900023003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900024003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900025003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900026003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900027003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900028003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9_Прил1" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел9_Прил1 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910002003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.ИтСтПродКПр18) = Тип("Число"), ДопПараметры.Итоги.ИтСтПродКПр18, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910003003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.ИтСтПродКПр10) = Тип("Число"), ДопПараметры.Итоги.ИтСтПродКПр10, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910004003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.ИтСтПродКПр0) = Тип("Число"), ДопПараметры.Итоги.ИтСтПродКПр0, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910005003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСИтКПр18) = Тип("Число"), ДопПараметры.Итоги.СумНДСИтКПр18, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910006003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСИтКПр10) = Тип("Число"), ДопПараметры.Итоги.СумНДСИтКПр10, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910007003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.ИтСтПродОсвКПр) = Тип("Число"), ДопПараметры.Итоги.ИтСтПродОсвКПр, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910000103";
			Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
				Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел9_Прил1 = 1 Тогда
					НовСтр.Значение = "1";
				Иначе
					НовСтр.Значение = "0";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910002003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910003003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910004003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910005003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910006003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910007003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9_Прил1_Прод1" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910008003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомерПор, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НачНомСтрКодВидОпер = ДопПараметры.ИндексЛистаМЧБ * 7 + 1;
			Для НомСтрКодВидОпер = НачНомСтрКодВидОпер По НачНомСтрКодВидОпер + 6 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000910009003_" + НомСтрКодВидОпер;
				ИндексВМассиве = НомСтрКодВидОпер - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидОпер.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидОпер[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910010003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910011003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910012003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910013003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910014003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомКСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910015003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаКСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910016003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрКСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910017003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрКСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910018003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПокуп.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].Свойство("ИННЮЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].ИННЮЛ) + "--";
					ИначеЕсли ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].Свойство("ИННФЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].ИННФЛ);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910018004_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПокуп.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].Свойство("КПП") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].КПП);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910008003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			Для НомСтрКодВидОпер = 1 По 7 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000910009003_" + НомСтрКодВидОпер;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910010003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910011003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910012003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910013003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910014003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910015003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910016003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910017003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910018003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910018004_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9_Прил1_Прод2" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910019003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННЮЛ) + "--", "");
				ИначеЕсли ДанныеРазделов8_12.СвПос.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННФЛ), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910019004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("КПП") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.КПП), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910020003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвОпл.Количество() Тогда
				НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.ДокПдтвОпл[ИндексВМассиве].НомДокПдтвОпл);
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910021003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвОпл.Количество() Тогда
				НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДокПдтвОпл[ИндексВМассиве].ДатаДокПдтвОпл), ".", "");
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910022003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.ОКВ), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910023003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФВ) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФВ, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910024003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910025003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ18) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ18, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910026003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ10) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ10, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910027003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ0) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ0, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910028003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДССФ18) = Тип("Число"), ДанныеРазделов8_12.СумНДССФ18, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910029003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДССФ10) = Тип("Число"), ДанныеРазделов8_12.СумНДССФ10, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910030003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродОсв) = Тип("Число"), ДанныеРазделов8_12.СтоимПродОсв, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910019003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910019004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910020003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910021003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910022003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910023003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910024003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910025003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910026003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910027003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910028003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910029003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910030003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9_Прил1_Прод3" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910031003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродВсП1Р9_18) = Тип("Число"), ДопПараметры.Итоги.СтПродВсП1Р9_18, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910032003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродВсП1Р9_10) = Тип("Число"), ДопПараметры.Итоги.СтПродВсП1Р9_10, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910033003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродВсП1Р9_0) = Тип("Число"), ДопПараметры.Итоги.СтПродВсП1Р9_0, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910034003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСВсП1Р9_18) = Тип("Число"), ДопПараметры.Итоги.СумНДСВсП1Р9_18, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910035003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСВсП1Р9_10) = Тип("Число"), ДопПараметры.Итоги.СумНДСВсП1Р9_10, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910036003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродОсвП1Р9Вс) = Тип("Число"), ДопПараметры.Итоги.СтПродОсвП1Р9Вс, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910031003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910032003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910033003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910034003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910035003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910036003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел10" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел10 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000000503";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомерПор, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000001003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаВыст), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НачНомСтрКодВидОпер = ДопПараметры.ИндексЛистаМЧБ * 7 + 1;
			Для НомСтрКодВидОпер = НачНомСтрКодВидОпер По НачНомСтрКодВидОпер + 6 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П001000002003_" + НомСтрКодВидОпер;
				ИндексВМассиве = НомСтрКодВидОпер - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидОпер.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидОпер[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000003003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000004003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000005003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000006003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000007003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомКСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000008003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаКСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000009003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрКСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000010003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрКСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000011003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПокуп.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПокуп.ИННЮЛ) + "--", "");
				ИначеЕсли ДанныеРазделов8_12.СвПокуп.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПокуп.ИННФЛ), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000011004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПокуп.Свойство("КПП") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПокуп.КПП), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000000103";
			Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
				Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел10 = 1 Тогда
					НовСтр.Значение = "1";
				Иначе
					НовСтр.Значение = "0";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000000503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000001003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			Для НомСтрКодВидОпер = 1 По 7 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П001000002003_" + НомСтрКодВидОпер;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000003003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000004003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000005003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000006003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000007003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000008003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000009003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000010003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000011003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000011004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел10_Прод" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			Сведения = ДопПараметры.Сведения;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000012003";
			Если ТипЗнЧ(Сведения.СвПрод) = Тип("Структура") Тогда
				Если Сведения.СвПрод.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = СокрЛП(Сведения.СвПрод.ИННЮЛ) + "--";
				ИначеЕсли Сведения.СвПрод.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = СокрЛП(Сведения.СвПрод.ИННФЛ);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000012004";
			Если ТипЗнЧ(Сведения.СвПрод) = Тип("Структура") Тогда
				Если Сведения.СвПрод.Свойство("КПП") Тогда
					НовСтр.Значение = СокрЛП(Сведения.СвПрод.КПП);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000013003";
			НовСтр.Значение = СокрЛП(Сведения.НомСчФОтПрод);
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000014003";
			НовСтр.Значение = СтрЗаменить(СокрЛП(Сведения.ДатаСчФОтПрод), ".", "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000015003";
			НовСтр.Значение = СокрЛП(Сведения.ОКВ);
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000016003";
			НовСтр.Значение = ?(ТипЗнч(Сведения.СтоимТовСчФВс) = Тип("Число"), Сведения.СтоимТовСчФВс, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000017003";
			НовСтр.Значение = ?(ТипЗнч(Сведения.СумНДССчФ) = Тип("Число"), Сведения.СумНДССчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000018003";
			НовСтр.Значение = ?(ТипЗнч(Сведения.РазСтКСчФУм) = Тип("Число"), Сведения.РазСтКСчФУм, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000019003";
			НовСтр.Значение = ?(ТипЗнч(Сведения.РазСтКСчФУв) = Тип("Число"), Сведения.РазСтКСчФУв, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000020003";
			НовСтр.Значение = ?(ТипЗнч(Сведения.РазНДСКСчФУм) = Тип("Число"), Сведения.РазНДСКСчФУм, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000021003";
			НовСтр.Значение = ?(ТипЗнч(Сведения.РазНДСКСчФУв) = Тип("Число"), Сведения.РазНДСКСчФУв, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000012003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000012004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000013003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000014003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000015003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000016003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000017003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000018003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000019003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000020003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000021003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел11" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел11 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100000503";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомерПор, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100001003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаПолуч), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НачНомСтрКодВидОпер = ДопПараметры.ИндексЛистаМЧБ * 7 + 1;
			Для НомСтрКодВидОпер = НачНомСтрКодВидОпер По НачНомСтрКодВидОпер + 6 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П001100002003_" + НомСтрКодВидОпер;
				ИндексВМассиве = НомСтрКодВидОпер - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидОпер.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидОпер[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100003003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100004003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100005003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100006003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100007003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомКСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100008003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаКСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100009003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрКСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100010003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрКСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100011003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПрод) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПрод.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПрод.ИННЮЛ) + "--", "");
				ИначеЕсли ДанныеРазделов8_12.СвПрод.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПрод.ИННФЛ), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100011004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПрод) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПрод.Свойство("КПП") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПрод.КПП), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100000103";
			Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
				Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел11 = 1 Тогда
					НовСтр.Значение = "1";
				Иначе
					НовСтр.Значение = "0";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100000503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100001003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			Для НомСтрКодВидОпер = 1 По 7 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П001100002003_" + НомСтрКодВидОпер;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100003003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100004003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100005003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100006003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100007003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100008003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100009003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100010003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100011003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100011004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел11_Прод" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100012003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвКомис) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвКомис.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвКомис.ИННЮЛ) + "--";
				ИначеЕсли ДанныеРазделов8_12.СвКомис.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвКомис.ИННФЛ);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100012004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвКомис) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвКомис.Свойство("КПП") Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвКомис.КПП);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100013003";
			НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидСд);
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100014003";
			НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.ОКВ);
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100015003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимТовСчФВс) = Тип("Число"), ДанныеРазделов8_12.СтоимТовСчФВс, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100016003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДССчФ) = Тип("Число"), ДанныеРазделов8_12.СумНДССчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100017003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.РазСтКСчФУм) = Тип("Число"), ДанныеРазделов8_12.РазСтКСчФУм, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100018003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.РазСтКСчФУв) = Тип("Число"), ДанныеРазделов8_12.РазСтКСчФУв, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100019003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.РазНДСКСчФУм) = Тип("Число"), ДанныеРазделов8_12.РазНДСКСчФУм, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100020003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.РазНДСКСчФУв) = Тип("Число"), ДанныеРазделов8_12.РазНДСКСчФУв, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100012003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100012004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100013003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100014003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100015003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100016003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100017003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100018003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100019003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100020003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел12" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел12 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200002003";
			НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.НомСчФ);
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200003003";
			НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФ), ".", "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200004003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПокуп.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп.ИННЮЛ) + "--";
				ИначеЕсли ДанныеРазделов8_12.СвПокуп.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп.ИННФЛ);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200004004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПокуп.Свойство("КПП") Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп.КПП);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200005003";
			НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.ОКВ);
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200006003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимТовБНалВс) = Тип("Число"), ДанныеРазделов8_12.СтоимТовБНалВс, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200007003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНалПокуп) = Тип("Число"), ДанныеРазделов8_12.СумНалПокуп, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200008003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимТовСНалВс) = Тип("Число"), ДанныеРазделов8_12.СтоимТовСНалВс, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200000103";
			Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
				Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел12 = 1 Тогда
					НовСтр.Значение = "1";
				Иначе
					НовСтр.Значение = "0";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200002003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200003003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200004003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200004004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200005003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200006003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200007003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200008003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов, ДанныеРазделов8_12 = Неопределено, ДопПараметры = Неопределено)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	Если ПараметрыПечати.ИмяСтраницы = "Раздел8"
		ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел8_Прил1"
		ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел9"
		ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел9_Прил1"
		ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел10"
		ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел11"
		ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел12" Тогда
		ЗаполнитьПоказателиРазделов8_12(Показатели, ПараметрыПечати.ИмяСтраницы, ДанныеРазделов8_12, ДопПараметры);
	Иначе
		ИсходныйМакет = ТабличныйДокумент;
		Для Каждого Область Из ИсходныйМакет.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = Область.Имя;
				НовСтр.Значение = Область.Значение;
				НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеВыведено
						И (ПараметрыПечати.ИмяСтраницы = "Раздел3_Прил2"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел7") Тогда
						ЗначениеВыведено = Истина;
					КонецЕсли;
					
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ЗначениеЗаполнено(Область.Значение) Тогда
			Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
			ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			КонецЕсли;
		Иначе
			СтрДатаПодписи = "        ";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено
		 ИЛИ СтрНайти(Обл.Имя, "П0") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	УстановитьДоступностьПризнакаАктуальностиРанееОтправленныхСведений();
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
	ВывестиРезультатПроверки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПолейПоУмолчанию()
	
	Если СтруктураДанныхРаздел1.Свойство("П000100002003") Тогда
		Если НЕ ЗначениеЗаполнено(СтруктураДанныхРаздел1.П000100002003) Тогда
			СтруктураДанныхРаздел1.Вставить("П000100002003", "18210301000011000110");
		КонецЕсли;
	Иначе
		СтруктураДанныхРаздел1.Вставить("П000100002003", "18210301000011000110");
	КонецЕсли;
	
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100003003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100003003", 0);
	КонецЕсли;
			
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100004003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100004003", 0);
	КонецЕсли;	
			
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100005003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100005003", 0);
	КонецЕсли;
	
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100006003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100006003", "");
	КонецЕсли;
	
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100007003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100007003", "");
	КонецЕсли;
	
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100008003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100008003", "");
	КонецЕсли;
	
	Для Каждого СтраницаРаздела2 Из ТаблицаСтраницыРаздела2 Цикл
		
		Если СтраницаРаздела2.Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
				
		Для Каждого ПоказательСтраницыРаздела2 Из СтраницаРаздела2.Данные[0].Значение Цикл
			
			Если НЕ ПоказательСтраницыРаздела2.Ключ = "П000200005003"
			   И ЗначениеЗаполнено(ПоказательСтраницыРаздела2.Значение) Тогда
			   
			   СтраницаРаздела2.Данные[0].Значение.Вставить("П000200004003", "18210301000011000110");
			   
			   Прервать;
			   
			КонецЕсли;
		   			
		КонецЦикла;
				
	КонецЦикла;
				
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(мСтруктураЦветовРаскраски, ОбрабатываемаяОбласть)
	
	ЦветНедоступнойОбласти = мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
	Если ТипЗначенияОбласти = Тип("Число") Тогда
		ОбрабатываемаяОбласть.Значение = 0;
	ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
		ОбрабатываемаяОбласть.Значение = "";
	Иначе
		ОбрабатываемаяОбласть.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(мСтруктураЦветовРаскраски, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяТекРаздела)
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация()
		 ИЛИ Форма.СтруктураРеквизитовФормы.ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС Тогда	
			
			ОрганизацияДляЗаполнения = Форма.ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета;
			ОрганизацияДляЗаполнения.Гиперссылка = Ложь;
			ОрганизацияДляЗаполнения.Текст = "";
			
		КонецЕсли;
		
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
			ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
			
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОбрабатываемаяОбласть2);
			
		Иначе
			
			РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОбрабатываемаяОбласть2);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекРаздела = "Раздел1" Тогда
		
		Если Форма.СтруктураДанныхТитульный.ПоМесту = "227" Тогда
			
			РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000100006003);
			РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000100007003);
			РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000100008003);
						
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000100006003);
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000100007003);
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000100008003);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			УдалятьсяВсеДопЭкземпляры = Истина;
		Иначе
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		Если ИмяСтраницы = "Раздел5" Тогда
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяСтраницы, Ложь);
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
			УдалятьсяВсеДопЭкземпляры = Истина;
		Иначе
			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
		РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда) Экспорт
	
	Отказ = Ложь;
	
	Если НЕ АвтоЗаполнениеРеглОтчетаДоступно()
	 ИЛИ СтруктураРеквизитовФормы.СтатусОтчета = "Сдано" Тогда
			
		ПоказатьПредупреждение(, НСтр("ru='Декларация по НДС сдана. Автоматическое заполнение запрещено.
									      |Для подготовки уточненной декларации создайте новый отчет.'"));
										  
		Возврат;								  
		
	КонецЕсли;
	      	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоПредупредитьОСохранении", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаСервере
Функция АвтоЗаполнениеРеглОтчетаДоступно()
	
	СтруктураРеквизитовФормы.АвтоЗаполнениеРеглОтчетаДоступно = (НЕ СведенияПоОтправкам.СтатусОтправкиРеглОтчета(СтруктураРеквизитовФормы.мСохраненныйДок) = Перечисления.СтатусыОтправки.Сдан);
	
	Возврат СтруктураРеквизитовФормы.АвтоЗаполнениеРеглОтчетаДоступно;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвтоПредупредитьОСохранении(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоСохранениеОтчета", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Автоматическое заполнение приведет к сохранению отчета с новыми данными. Заполнить отчет?'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Заполнить", "Заполнить и сохранить");
	Кнопки.Добавить("НеЗаполнять", "Не заполнять");
	
	КнопкаПоУмолчанию = "НеЗаполнять";
	
	ЗаголовокВопроса = НСтр("ru = 'Автоматическое заполнение отчета'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , КнопкаПоУмолчанию, ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоСохранениеОтчета(ОтветПользователя, ДополнительныеПараметры) Экспорт
	
	Если ОтветПользователя <> "Заполнить" Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьАвтоПослеСохранениеОтчета", 
		ЭтотОбъект, 
		ДополнительныеПараметры); 
	
	СохранитьНаКлиенте(,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПослеСохранениеОтчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданиеВыполнено = ЗаполнитьАвтоНаСервере();
	
	Если ЗаданиеВыполнено Тогда
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
		
		ЗапуститьПроверки();
		
	Иначе
		
		// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		ПараметрыОбработчикаОжидания = Новый Структура;
		ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
		ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", Новый Структура("ИдентификаторЗадания", СтруктураРеквизитовФормы.ИдентификаторЗадания), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
			
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	НомерКорректировки = СтруктураДанныхТитульный.НомерКорректировки;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций",        СтруктураРеквизитовФормы.ГруппаОрганизаций);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("ВидДокумента",             ?(НомерКорректировки = 0, 0, 1));
	ПараметрыОтчета.Вставить("НомерКорректировки",       НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",              ДатаПодписи);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище", СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыОтчета.Вставить("Декларация", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Раздел1", СтруктураДанныхРаздел1);
	Контейнер.Вставить("Раздел2", СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыРаздела2"));
	Контейнер.Вставить("Раздел3", СтруктураДанныхРаздел3);
	Контейнер.Вставить("Раздел3_Прил1", СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыРаздела3_Прил1"));
	Контейнер.Вставить("Раздел3_Прил2", СтруктураДанныхРаздел3_Прил2);
	Контейнер.Вставить("Раздел3_Прил2_ДанныеДопСтрок", ДанныеФормыВЗначение(П0003200001, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел4", СтруктураДанныхРаздел4);
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок", ДанныеФормыВЗначение(П00040000, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел5", СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыРаздела5"));
	Контейнер.Вставить("Раздел5_ДанныеДопСтрок", ДанныеФормыВЗначение(П00050000, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел6", СтруктураДанныхРаздел6);
	Контейнер.Вставить("Раздел6_ДанныеДопСтрок", ДанныеФормыВЗначение(П00060000, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел7", СтруктураДанныхРаздел7);
	Контейнер.Вставить("Раздел7_ДанныеДопСтрок", ДанныеФормыВЗначение(П0007000001, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел8", Новый Структура);
	Контейнер.Вставить("Раздел8_Прил1", Новый Структура);
	Контейнер.Вставить("Раздел9", Новый Структура);
	Контейнер.Вставить("Раздел9_Прил1", Новый Структура);
	Контейнер.Вставить("Раздел10", Новый Структура);
	Контейнер.Вставить("Раздел11", Новый Структура);
	Контейнер.Вставить("Раздел12", Новый Структура);
	
	Контейнер.Вставить("ДополнительныеСведения", Новый Структура("П000100001003", СтруктураДанныхРаздел1.П000100001003));
	
	ЗаданиеВыполнено = Ложь;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыЗаполнения = Новый Массив;
	ПараметрыЗаполнения.Добавить(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7));
	ПараметрыЗаполнения.Добавить(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7));
	ПараметрыЗаполнения.Добавить(ПараметрыОтчета);
	ПараметрыЗаполнения.Добавить(Контейнер);
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить("РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет", ПараметрыЗаполнения, , НаименованиеЗадания);
	
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	СтруктураРеквизитовФормы.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		
		ЗаданиеВыполнено = Истина;
		
		ЗагрузитьПодготовленныеДанные();
		
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Истина;
	СтруктураРеквизитовФормы.ВерсияАвтозаполнения = "2015Кв3";
	СтруктураРеквизитовФормы.АвтозаполнениеРазделовВТекущейСессии = НовыйНаборПризнаковАвтозаполнения(Истина);
	
	Контейнер = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(Контейнер) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из Контейнер Цикл
		ИмяЭлемента = ЭлементСтруктуры.Ключ;
		
		Если ИмяЭлемента = "Раздел8"
		 ИЛИ ИмяЭлемента = "Раздел8_Прил1"
		 ИЛИ ИмяЭлемента = "Раздел9"
		 ИЛИ ИмяЭлемента = "Раздел9_Прил1"
		 ИЛИ ИмяЭлемента = "Раздел10"
		 ИЛИ ИмяЭлемента = "Раздел11"
		 ИЛИ ИмяЭлемента = "Раздел12" Тогда
			ЗаполнитьСведенияНДС(Контейнер, ИмяЭлемента);
			
		ИначеЕсли мСтруктураМногостраничныхРазделов.Свойство(ИмяЭлемента) Тогда
			ВосстановитьМногостраничныйРазделИзТаблицы(ИмяЭлемента, ЭлементСтруктуры.Значение);
			
		ИначеЕсли ИмяЭлемента = "Раздел3_Прил2_ДанныеДопСтрок" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П0003200001);
			
		ИначеЕсли ИмяЭлемента = "Раздел4_ДанныеДопСтрок" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П00040000);
			
		ИначеЕсли ИмяЭлемента = "Раздел5_ДанныеДопСтрок" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П00050000);
			
		ИначеЕсли ИмяЭлемента = "Раздел6_ДанныеДопСтрок" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П00060000);
			
		ИначеЕсли ИмяЭлемента = "Раздел7_ДанныеДопСтрок" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П0007000001);
			
		ИначеЕсли ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма["СтруктураДанных" + ИмяЭлемента]);
			
		ИначеЕсли ИмяЭлемента = "ДополнительныеСведения" Тогда
			ОКТМО = СОКРЛП(ЭлементСтруктуры.Значение.П000100001003);
			ЗаполнитьОКТМО(ЭтаФорма, СокрЛП(ОКТМО));
			
		Иначе
			ЭтаФорма["СтруктураДанных" + ИмяЭлемента] = ЭлементСтруктуры.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияПолейПоУмолчанию();
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		
		ТабличныйДокумент.Области.П000200006003.Защита = Ложь;
		
		ИзменитьЦветЯчеекНаСервере();
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомерКорректировки) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ТипЧисло = Новый ОписаниеТипов("Число");
		ЗначениеКорректировки = ТипЧисло.ПривестиЗначение(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	Сохранить( , КодИФНС, КПП, Вариант, , НаименованиеТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ПроверитьВыполнениеЗадания() Тогда 
			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
			
			РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
			
			Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			КонецЕсли;
			
			Если Элементы.Расшифровать.Видимость Тогда
				Элементы.Расшифровать.Доступность = Истина;
				Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
			КонецЕсли;
			
			ЗапуститьПроверки();
			
			Возврат;
			
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыполнениеЗадания()
	
	Если ДлительныеОперации.ЗаданиеВыполнено(СтруктураРеквизитовФормы.ИдентификаторЗадания) Тогда 
		ЗагрузитьПодготовленныеДанные();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("НомерТекущейСтраницы",  	СтруктураРеквизитовФормы.НомерТекущейСтраницы);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций",		СтруктураРеквизитовФормы.ГруппаОрганизаций);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаСервере
Функция АдресПоказателя(СтрокаПоказателя)
	
	Результат = СтрокаПоказателя.Код;
	
	СтрокаВерхнегоУровня = СтрокаПоказателя.Родитель;
	
	Пока ЗначениеЗаполнено(СтрокаВерхнегоУровня) Цикл
		Результат = СтрокаВерхнегоУровня.Код + "\" + Результат;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.Родитель;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОКТМО(Форма, Знач ОКТМО)
			
	ПроставитьНаВсехЛистах(Форма, ОКТМО);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставитьНаВсехЛистах(Форма, Знач ЗначениеПоказателя)
	
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	КонецЕсли;
	
	Форма.СтруктураДанныхРаздел1.Вставить("П000100001003", ЗначениеПоказателя);
	
	Для Каждого СтраницаРаздела Из Форма.ТаблицаСтраницыРаздела2 Цикл
			
		ДанныеСтраницы = СтраницаРаздела.Данные;
			
		Если ДанныеСтраницы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		ДанныеСтраницы[0].Значение.Вставить("П000200005003", ЗначениеПоказателя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
					 
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();		 
	
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	Если ЕстьИзмененияВариантыЗаполнения Тогда
		
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");

		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");

		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповЧисло1 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	Для Каждого ОбластьОтчета Из МакетСоставаПоказателей.Области Цикл
		
		ИмяСтраницы = ОбластьОтчета.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",            ОписаниеТиповСтрока50);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",        ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",             СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",                   СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",              ОписаниеТиповСтрока100);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
		
		Для Ном = ОбластьОтчета.Верх По ОбластьОтчета.Низ Цикл
			// Код показателя (по составу показателей) определяется по первой колонке макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать; // конечная строка
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить; // комментарий
			КонецЕсли;
			
			// Код показателя по форме отчете (имя ячейки в полях табличного документа формы).
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// Вариант заполнения ячейки определяется по колонке 6 макета.
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
				
				ЕстьИзменения = Истина;				
				
			КонецЕсли;	
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;	
				
			Иначе
				// Актуализация вариантов автозаполнения текущей страницы.
				Для Каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						ДействующийВариантАвтозаполнения = Неопределено;
						
						НайденныеСтроки = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
						
						Если НайденныеСтроки.Количество() > 0 Тогда
							ДействующийВариантАвтозаполнения = НайденныеСтроки[0];
						КонецЕсли;
												
						Если ДействующийВариантАвтозаполнения = Неопределено Тогда
							// Новый автозаполняемый показатель.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							
							ЕстьИзменения = Истина;
							
						Иначе
							// Показатель должен соответствовать эталону, кроме удовлетворяющих следующим критериям:
							// - вариант эталона не 4 (авторасчет)и не 5 (запрет ввода значения);
							// - действующий вариант допускает корректировку (варианты 1-3).
							ИспользоватьДействующийВариант = ((ДействующийВариантАвтозаполнения.ВариантЗаполнения = 1
							ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 2
							ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 3)
							И (ВариантЗаполнения <> 4) И (ВариантЗаполнения <> 4));
							Если Не ИспользоватьДействующийВариант Тогда
								ДействующийВариантАвтозаполнения.КодПоказателя     = КодПоказателя;
								ДействующийВариантАвтозаполнения.ВариантЗаполнения = ВариантЗаполнения;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					ТаблДляЦикла = ЭлементМассива.Выгрузить();
					
					Для Каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// В новой версии отчета автозаполнение показателя не предусмотрено.
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								
								ЕстьИзменения = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаКлиенте
Процедура НастроитьПериодЗаполнения(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("НачалоПериода", СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения);
	ПараметрыФормы.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("ИмяЭлемента",   "НастроитьПериодАвтозаполнения");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьПериодЗаполненияЗавершение", ЭтотОбъект);
	
	ПараметрыФормы.Вставить("ИмяЭлемента", "НастроитьПериодАвтозаполнения");
	ОткрытьФорму("Отчет.РегламентированныйОтчетНДС.Форма.ВыборПериодаАвтозаполнения", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПериодЗаполненияЗавершение(Результат, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) 
		ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.Свойство("НачалоПериода")
		ИЛИ НЕ Результат.Свойство("КонецПериода")
		ИЛИ НЕ Результат.Свойство("ИмяЭлемента") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ИмяЭлемента = "НастроитьПериодАвтозаполнения" Тогда
		СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения = Результат.НачалоПериода;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВыполнятьЗамерыПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиВызовСервераПовтИсп").ВыполнятьЗамерыПроизводительности();
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") 
	   И ВыполнятьЗамерыПроизводительности Тогда
		
		Возврат ОценкаПроизводительности.НачатьЗамерВремени();
			
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ВремяНачала <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "ЗаполнениеФормыРеглОтчетаНДС";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОРИСОВКА И КОМАНДЫ ПАНЕЛИ ОТПРАВКИ

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "УдалитьСтроку") = 0
	   И (СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0003200001") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0007000001") > 0
	 ИЛИ ((СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П00040000") > 0
	   ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П00050000") > 0
	   ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П00060000") > 0)
	   	 И СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "_") > 0)) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияНДС(ИмяРаздела)
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = "ТабличныйДокумент" + ИмяРаздела;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
		АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(ЗаписьРегистраСведений.СодержимоеФайла.Получить(), УникальныйИдентификатор);
		СтруктураРеквизитовФормы.Вставить("АдресТабличногоДокумента" + ИмяРаздела, АдресТабличногоДокумента);
	КонецЕсли;
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = "Данные" + ИмяРаздела;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
		АдресДанных = ПоместитьВоВременноеХранилище(ЗаписьРегистраСведений.СодержимоеФайла.Получить(), УникальныйИдентификатор);
		СтруктураРеквизитовФормы.Вставить("АдресДанных" + ИмяРаздела, АдресДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, ИмяРаздела)
	
	Если СписокСохранения.Свойство("АктуальностьСведений" + ИмяРаздела) Тогда
		ВосстанавливаемоеСостояние = СписокСохранения["АктуальностьСведений" + ИмяРаздела];
	Иначе
		ВосстанавливаемоеСостояние = 0;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведений" + ИмяРаздела, ВосстанавливаемоеСостояние);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделРегистраУчетаНДС(ИмяРаздела, НомерСтраницы = 1) Экспорт
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницы;
	
	ТабличныйДокументУчетаНДС.Очистить();
	
	ИмяРеквизитаАдресаМакетаОтчета = "АдресТабличногоДокумента" + ИмяРаздела;
	
	ИмяФормыОтчета = Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7);
	ИмяМакетаРаздела = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела;
	МакетРаздела = Отчеты[ИмяФормыОтчета].ПолучитьМакет(ИмяМакетаРаздела);
	
	СписокСтраниц = РеквизитФормыВЗначение("Страницы" + ИмяРаздела);
	
	ТабличныйДокументРаздела = Новый ТабличныйДокумент;
	Если СписокСтраниц.Количество() > 0 Тогда
		НомерПервойСтрокиСегмента = СписокСтраниц[НомерСтраницы - 1].НомерПервойСтроки;
		
		ТабличныйДокументРаздела = РегламентированнаяОтчетность.СегментТабличногоДокументаРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСегмента);
		
	ИначеЕсли СтруктураРеквизитовФормы.УспешноеАвтозаполнение <> Неопределено
	        И СтруктураРеквизитовФормы.АвтозаполнениеРазделовВТекущейСессии[ИмяРаздела] Тогда
		ТабличныйДокументРаздела = МакетРаздела.ПолучитьОбласть("Пустой");
		
	ИначеЕсли СтруктураРеквизитовФормы.Свойство(ИмяРеквизитаАдресаМакетаОтчета) Тогда
		Если СтруктураРеквизитовФормы[ИмяРеквизитаАдресаМакетаОтчета] <> Неопределено Тогда
			
			ТабличныйДокументРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[ИмяРеквизитаАдресаМакетаОтчета]);
			
		Иначе
			ТабличныйДокументРаздела = МакетРаздела.ПолучитьОбласть("Пустой");
		КонецЕсли;
		
	Иначе
		ТабличныйДокументРаздела = МакетРаздела.ПолучитьОбласть("Незаполнено");
		
	КонецЕсли;
	
	ТабличныйДокументУчетаНДС.Вывести(ТабличныйДокументРаздела);
	
	АктуальностьРанееПредставленныхСведений = СтруктураРеквизитовФормы["АктуальностьСведений" + ИмяРаздела];
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияНДС(Контейнер, ИмяРаздела)
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	Если Контейнер[ИмяРаздела].Свойство("ФормироватьТабличныйДокумент") Тогда
		ПризнакЗаполнения = Контейнер[ИмяРаздела].ФормироватьТабличныйДокумент;
	Иначе
		ПризнакЗаполнения = Ложь;
	КонецЕсли;
	
	ПризнакЗаполнения = ТипБулево.ПривестиЗначение(ПризнакЗаполнения);
	
	СтруктураРеквизитовФормы.ВыполненоЗаполнениеРазделов.Вставить(ИмяРаздела, ПризнакЗаполнения);
	
	СформироватьСписокСекцийРаздела(ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСведенияРазделаНДС(ИмяРаздела)
	
	СтруктураРеквизитовФормы.АвтозаполнениеРазделовВТекущейСессии[ИмяРаздела] = Ложь;
	
	СписокСтраниц = РеквизитФормыВЗначение("Страницы" + ИмяРаздела);
	
	Если СписокСтраниц.Количество() > 0 Тогда
		СписокСтраниц.Очистить();
		ЗначениеВРеквизитФормы(СписокСтраниц, "Страницы" + ИмяРаздела);
		
	Иначе
		Если СтруктураРеквизитовФормы.Свойство("АдресТабличногоДокумента" + ИмяРаздела)
		   И СтруктураРеквизитовФормы["АдресТабличногоДокумента" + ИмяРаздела] <> Неопределено Тогда
			УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресТабличногоДокумента" + ИмяРаздела]);
			СтруктураРеквизитовФормы.Удалить("АдресТабличногоДокумента" + ИмяРаздела);
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.Свойство("АдресДанных" + ИмяРаздела)
		   И СтруктураРеквизитовФормы["АдресДанных" + ИмяРаздела] <> Неопределено Тогда
			УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресДанных" + ИмяРаздела]);
			СтруктураРеквизитовФормы.Удалить("АдресДанных" + ИмяРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНДС(ИмяРаздела)
	
	ОчиститьСведенияРазделаНДС(ИмяРаздела);
	ВывестиРазделРегистраУчетаНДС(ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСведенияНДС(ИмяРаздела)
	
	// Удаление сегментов раздела при очистке отчета.
	
	СписокСтраниц = РеквизитФормыВЗначение("Страницы" + ИмяРаздела);
	
	Если СписокСтраниц.Количество() = 0 Тогда
		РегламентированнаяОтчетность.УдалитьСегментыТабличногоДокументаРазделаДекларацииНДС(
			СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела);
		РегламентированнаяОтчетность.УдалитьСегментыДанныхРазделаДекларацииНДС(
			СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела);
		РегламентированнаяОтчетность.УдалитьИтогиРазделаДекларацииНДС(
			СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела);
			
	КонецЕсли;
	
	// Сохранение результатов автозаполнения без сегментирования.
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = "ТабличныйДокумент" + ИмяРаздела;
	
	Если СтруктураРеквизитовФормы.Свойство("АдресТабличногоДокумента" + ИмяРаздела)
	   И СтруктураРеквизитовФормы["АдресТабличногоДокумента" + ИмяРаздела] <> Неопределено Тогда
		
		ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресТабличногоДокумента" + ИмяРаздела]));
		ЗаписьРегистраСведений.ИмяФайла = ИмяРаздела + ".mxl";
		ЗаписьРегистраСведений.Размер = 1;
		ЗаписьРегистраСведений.ДатаДобавления = ТекущаяДатаСеанса();
		ЗаписьРегистраСведений.Записать();
		
	Иначе
		
		ЗаписьРегистраСведений.Удалить();
		
	КонецЕсли;
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = "Данные" + ИмяРаздела;
	
	Если СтруктураРеквизитовФормы.Свойство("АдресДанных" + ИмяРаздела)
	   И СтруктураРеквизитовФормы["АдресДанных" + ИмяРаздела] <> Неопределено Тогда
		
		ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресДанных" + ИмяРаздела]));
		ЗаписьРегистраСведений.ИмяФайла = ИмяРаздела + ".xml";
		ЗаписьРегистраСведений.Размер = 1;
		ЗаписьРегистраСведений.ДатаДобавления = ТекущаяДатаСеанса();
		ЗаписьРегистраСведений.Записать();
		
	Иначе
		
		ЗаписьРегистраСведений.Удалить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПризнакАктуальностиСведенийРаздела(СписокСохранения, ИмяРаздела)
	
	Если СтруктураРеквизитовФормы.Свойство("АктуальностьСведений" + ИмяРаздела) Тогда
		СохраняемоеСостояние = СтруктураРеквизитовФормы["АктуальностьСведений" + ИмяРаздела];
	Иначе
		СохраняемоеСостояние = 0;
	КонецЕсли;
	
	СписокСохранения.Вставить("АктуальностьСведений" + ИмяРаздела, СохраняемоеСостояние);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПризнакаАктуальностиРанееОтправленныхСведений()
	
	ПризнакДоступен = (НомерКорректировки <> 0);
	Элементы.АктуальностьРанееПредставленныхСведений.Доступность = ПризнакДоступен;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуальностьРанееПредставленныхСведенийПриИзменении(Элемент)
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведений" + ИмяРаздела, АктуальностьРанееПредставленныхСведений);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#Область ВыгрузкаЭлектронногоПредставленияСведенийРегистровУчетаНДС

&НаСервере
Функция ВыгрузкаРаздел8(ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел8";
	
	Если НЕ (ПараметрыВыгрузки.ВидДок <> "0" И ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "1" И ПараметрыВыгрузки.Раздел8Обязателен) Тогда
		ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ПараметрыВыгрузки, ИмяРаздела);
		Если ДанныеРаздела = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.8");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000080");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед8", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
		ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнигаПокуп");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСВсКПк", ИтогиРаздела.СумНДСВсКПк, "Ч,19,2");
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел8", НомерПервойСтрокиСекции);
				
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела8(КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела8(КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
			
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСтрокуСведенийРаздела8(КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнПокСтр");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерПор", СтрокаДанных.НомерПор, "Ч,12");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод, "Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомТД", СтрокаДанных.НомТД, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимПокупВ", СтрокаДанных.СтоимПокупВ, "Ч,19,2");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСВыч", СтрокаДанных.СумНДСВыч, "Ч,19,2");
	
	Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.ДокПдтвУпл.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДокПдтвУпл");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомДокПдтвУпл", СтрокаДанных.ДокПдтвУпл[Инд].НомДокПдтвУпл, "Т,256");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвУпл", СтрокаДанных.ДокПдтвУпл[Инд].ДатаДокПдтвУпл, "Т,10");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.ДатаУчТов.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДатаУчТов");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.ДатаУчТов[Инд]);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.СвПрод.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПрод");
		
		Если СтрокаДанных.СвПрод[Инд].Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПрод[Инд].ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПрод[Инд].ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПрод[Инд].КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	Если СтрокаДанных.СвПос <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПос");
		
		Если СтрокаДанных.СвПос.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПос.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПос.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПос.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузкаРаздел8_Прил1(ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел8_Прил1";
	
	ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ПараметрыВыгрузки, ИмяРаздела);
	Если ДанныеРаздела = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
	ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.81");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000081");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед81", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнигаПокупДЛ");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСИтКПк",  ИтогиРаздела.СумНДСИтКПк,  "Ч,19,2");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСИтП1Р8", ИтогиРаздела.СумНДСИтП1Р8, "Ч,19,2");
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСекции);
				
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела8_Прил1(КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела8_Прил1(КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
			
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСтрокуСведенийРаздела8_Прил1(КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнПокДЛСтр");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерПор", СтрокаДанных.НомерПор, "Ч,12");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод, "Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомТД", СтрокаДанных.НомТД, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимПокупВ", СтрокаДанных.СтоимПокупВ, "Ч,19,2");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаДанных.СумНДС, "Ч,19,2");
	
	Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.ДокПдтвУпл.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДокПдтвУпл");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомДокПдтвУпл", СтрокаДанных.ДокПдтвУпл[Инд].НомДокПдтвУпл, "Т,256");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвУпл", СтрокаДанных.ДокПдтвУпл[Инд].ДатаДокПдтвУпл, "Т,10");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.ДатаУчТов.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДатаУчТов");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.ДатаУчТов[Инд]);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.СвПрод.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПрод");
		
		Если СтрокаДанных.СвПрод[Инд].Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПрод[Инд].ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПрод[Инд].ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПрод[Инд].КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	Если СтрокаДанных.СвПос <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПос");
		
		Если СтрокаДанных.СвПос.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПос.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПос.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПос.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузкаРаздел9(ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел9";
	
	Если НЕ (ПараметрыВыгрузки.ВидДок <> "0" И ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "1" И ПараметрыВыгрузки.Раздел9Обязателен) Тогда
		ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ПараметрыВыгрузки, ИмяРаздела);
		Если ДанныеРаздела = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.9");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000090");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед9", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
		ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнигаПрод");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродБезНДС18", ИтогиРаздела.СтПродБезНДС18, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродБезНДС10", ИтогиРаздела.СтПродБезНДС10, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродБезНДС0",  ИтогиРаздела.СтПродБезНДС0,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСВсКПр18",  ИтогиРаздела.СумНДСВсКПр18,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСВсКПр10",  ИтогиРаздела.СумНДСВсКПр10,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвВсКПр", ИтогиРаздела.СтПродОсвВсКПр, "Ч,19,2");
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСекции);
				
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела9(КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела9(КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
			
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
		
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСтрокуСведенийРаздела9(КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнПродСтр");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерПор", СтрокаДанных.НомерПор, "Ч,12");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод, "Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
	
	ВыгружатьНулевойАтрибут_СтоимПродСФВ = ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрокаДанных.ОКВ <> "643";
	Если ВыгружатьНулевойАтрибут_СтоимПродСФВ Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимПродСФВ", СтрокаДанных.СтоимПродСФВ, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФВ", СтрокаДанных.СтоимПродСФВ, "Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_СтоимПродСФ = НЕ ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ)
	                                    И НЕ ЗначениеЗаполнено(СтрокаДанных.СтоимПродОсв);
	Если ВыгружатьНулевойАтрибут_СтоимПродСФ Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимПродСФ", СтрокаДанных.СтоимПродСФ, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ", СтрокаДанных.СтоимПродСФ, "Ч,19,2");
	КонецЕсли;
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ18", СтрокаДанных.СтоимПродСФ18, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ10", СтрокаДанных.СтоимПродСФ10, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ0",  СтрокаДанных.СтоимПродСФ0,  "Ч,19,2");
	
	ВыгружатьНулевойАтрибут_СумНДССФ18 = ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ18);
	Если ВыгружатьНулевойАтрибут_СумНДССФ18 Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДССФ18", СтрокаДанных.СумНДССФ18, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДССФ18", СтрокаДанных.СумНДССФ18, "Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_СумНДССФ10 = ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ10);
	Если ВыгружатьНулевойАтрибут_СумНДССФ10 Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДССФ10", СтрокаДанных.СумНДССФ10, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДССФ10", СтрокаДанных.СумНДССФ10, "Ч,19,2");
	КонецЕсли;
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродОсв", СтрокаДанных.СтоимПродОсв, "Ч,19,2");
	
	Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.ДокПдтвОпл.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДокПдтвОпл");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомДокПдтвОпл",  СтрокаДанных.ДокПдтвОпл[Инд].НомДокПдтвОпл,  "Т,256");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвОпл", СтрокаДанных.ДокПдтвОпл[Инд].ДатаДокПдтвОпл, "Т,10");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.СвПокуп.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
		
		Если СтрокаДанных.СвПокуп[Инд].Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПокуп[Инд].ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПокуп[Инд].ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПокуп[Инд].КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	Если СтрокаДанных.СвПос <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПос");
		
		Если СтрокаДанных.СвПос.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПос.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПос.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПос.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузкаРаздел9_Прил1(ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел9_Прил1";
	
	ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ПараметрыВыгрузки, ИмяРаздела);
	Если ДанныеРаздела = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
	ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.91");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000091");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед91", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнигаПродДЛ");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИтСтПродКПр18",   ИтогиРаздела.ИтСтПродКПр18, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИтСтПродКПр10",   ИтогиРаздела.ИтСтПродКПр10, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИтСтПродКПр0",    ИтогиРаздела.ИтСтПродКПр0,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСИтКПр18",   ИтогиРаздела.СумНДСИтКПр18,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСИтКПр10",   ИтогиРаздела.СумНДСИтКПр10,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИтСтПродОсвКПр",  ИтогиРаздела.ИтСтПродОсвКПр, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродВсП1Р9_18", ИтогиРаздела.СтПродВсП1Р9_18,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродВсП1Р9_10", ИтогиРаздела.СтПродВсП1Р9_10, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродВсП1Р9_0",  ИтогиРаздела.СтПродВсП1Р9_0,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСВсП1Р9_18", ИтогиРаздела.СумНДСВсП1Р9_18, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСВсП1Р9_10", ИтогиРаздела.СумНДСВсП1Р9_10,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвП1Р9Вс", ИтогиРаздела.СтПродОсвП1Р9Вс, "Ч,19,2");
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСекции);
				
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела9_Прил1(КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела9_Прил1(КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
			
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСтрокуСведенийРаздела9_Прил1(КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнПродДЛСтр");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерПор", СтрокаДанных.НомерПор, "Ч,12");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод, "Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
	
	ВыгружатьНулевойАтрибут_СтоимПродСФВ = ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрокаДанных.ОКВ <> "643";
	Если ВыгружатьНулевойАтрибут_СтоимПродСФВ Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимПродСФВ", СтрокаДанных.СтоимПродСФВ, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФВ", СтрокаДанных.СтоимПродСФВ, "Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_СтоимПродСФ = НЕ ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ)
	                                    И НЕ ЗначениеЗаполнено(СтрокаДанных.СтоимПродОсв);
	Если ВыгружатьНулевойАтрибут_СтоимПродСФ Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимПродСФ", СтрокаДанных.СтоимПродСФ, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ", СтрокаДанных.СтоимПродСФ, "Ч,19,2");
	КонецЕсли;
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ18", СтрокаДанных.СтоимПродСФ18, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ10", СтрокаДанных.СтоимПродСФ10, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ0",  СтрокаДанных.СтоимПродСФ0,  "Ч,19,2");
	
	ВыгружатьНулевойАтрибут_СумНДССФ18 = ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ18);
	Если ВыгружатьНулевойАтрибут_СумНДССФ18 Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДССФ18", СтрокаДанных.СумНДССФ18, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДССФ18", СтрокаДанных.СумНДССФ18, "Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_СумНДССФ10 = ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ10);
	Если ВыгружатьНулевойАтрибут_СумНДССФ10 Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДССФ10", СтрокаДанных.СумНДССФ10, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДССФ10", СтрокаДанных.СумНДССФ10, "Ч,19,2");
	КонецЕсли;
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродОсв", СтрокаДанных.СтоимПродОсв, "Ч,19,2");
	
	Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.ДокПдтвОпл.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДокПдтвОпл");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомДокПдтвОпл",  СтрокаДанных.ДокПдтвОпл[Инд].НомДокПдтвОпл,  "Т,256");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвОпл", СтрокаДанных.ДокПдтвОпл[Инд].ДатаДокПдтвОпл, "Т,10");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.СвПокуп.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
		
		Если СтрокаДанных.СвПокуп[Инд].Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПокуп[Инд].ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПокуп[Инд].ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПокуп[Инд].КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	Если СтрокаДанных.СвПос <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПос");
		
		Если СтрокаДанных.СвПос.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПос.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПос.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПос.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузкаРаздел10(ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел10";
	
	ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ПараметрыВыгрузки, ИмяРаздела);
	Если ДанныеРаздела = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
	ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.10");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000100");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед10", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ЖУчВыстСчФ");
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСекции);
				
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела10(КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела10(КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
			
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСтрокуСведенийРаздела10(КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ЖУчВыстСчФСтр");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерПор", СтрокаДанных.НомерПор, "Ч,12");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаВыст", СтрокаДанных.ДатаВыст, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод, "Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ, "Т,10");
	
	Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
	КонецЦикла;
	
	Если СтрокаДанных.СвПокуп <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
		
		Если СтрокаДанных.СвПокуп.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПокуп.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПокуп.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПокуп.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Для Инд = 0 По СтрокаДанных.СвПосрДеят.Количество() -1 Цикл
		ДанныеОДеятельности = СтрокаДанных.СвПосрДеят[Инд];
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосрДеят");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФОтПрод", ДанныеОДеятельности.НомСчФОтПрод, "Т,1000");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФОтПрод", ДанныеОДеятельности.ДатаСчФОтПрод, "Т,10");
		
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", ДанныеОДеятельности.ОКВ, "Т,3");
		
		ВыгружатьАтрибуты_СтоимТовСчФВс_СумНДССчФ = НЕ ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод);
		Если ВыгружатьАтрибуты_СтоимТовСчФВс_СумНДССчФ Тогда
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимТовСчФВс", ДанныеОДеятельности.СтоимТовСчФВс, "Ч,19,2");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДССчФ",     ДанныеОДеятельности.СумНДССчФ,     "Ч,19,2");
		КонецЕсли;
		
		ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
		                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
		                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
		                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
		
		ВыгружатьНулевойАтрибут_РазСтКСчФУм = ЕстьКорректировкаСчетаФактуры И НЕ ЗначениеЗаполнено(ДанныеОДеятельности.РазСтКСчФУв);
		Если ВыгружатьНулевойАтрибут_РазСтКСчФУм Тогда
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "РазСтКСчФУм", ДанныеОДеятельности.РазСтКСчФУм, "Ч,19,2");
		Иначе
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазСтКСчФУм", ДанныеОДеятельности.РазСтКСчФУм, "Ч,19,2");
		КонецЕсли;
		
		ВыгружатьНулевойАтрибут_РазСтКСчФУв = ЕстьКорректировкаСчетаФактуры И НЕ ЗначениеЗаполнено(ДанныеОДеятельности.РазСтКСчФУм)
		                                    И НЕ ВыгружатьНулевойАтрибут_РазСтКСчФУм;
		Если ВыгружатьНулевойАтрибут_РазСтКСчФУв Тогда
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "РазСтКСчФУв", ДанныеОДеятельности.РазСтКСчФУв, "Ч,19,2");
		Иначе
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазСтКСчФУв", ДанныеОДеятельности.РазСтКСчФУв, "Ч,19,2");
		КонецЕсли;
		
		ВыгружатьНулевойАтрибут_РазНДСКСчФУм = ВыгружатьНулевойАтрибут_РазСтКСчФУм ИЛИ ЗначениеЗаполнено(ДанныеОДеятельности.РазСтКСчФУм);
		Если ВыгружатьНулевойАтрибут_РазНДСКСчФУм Тогда
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "РазНДСКСчФУм", ДанныеОДеятельности.РазНДСКСчФУм, "Ч,19,2");
		Иначе
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазНДСКСчФУм", ДанныеОДеятельности.РазНДСКСчФУм, "Ч,19,2");
		КонецЕсли;
		
		ВыгружатьНулевойАтрибут_РазНДСКСчФУв = ВыгружатьНулевойАтрибут_РазСтКСчФУв ИЛИ ЗначениеЗаполнено(ДанныеОДеятельности.РазСтКСчФУв);
		Если ВыгружатьНулевойАтрибут_РазНДСКСчФУв Тогда
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "РазНДСКСчФУв", ДанныеОДеятельности.РазНДСКСчФУв, "Ч,19,2");
		Иначе
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазНДСКСчФУв", ДанныеОДеятельности.РазНДСКСчФУв, "Ч,19,2");
		КонецЕсли;
		
		Если ДанныеОДеятельности.СвПрод <> Неопределено Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПрод");
			
			Если ДанныеОДеятельности.СвПрод.Свойство("ИННФЛ") Тогда
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ДанныеОДеятельности.СвПрод.ИННФЛ, "Т,12");
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			Иначе
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ДанныеОДеятельности.СвПрод.ИННЮЛ, "Т,10");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ДанныеОДеятельности.СвПрод.КПП, "Т,9");
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузкаРаздел11(ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел11";
	
	ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ПараметрыВыгрузки, ИмяРаздела);
	Если ДанныеРаздела = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
	ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.11");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000110");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед11", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ЖУчПолучСчФ");
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСекции);
				
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела11(КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела11(КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
			
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСтрокуСведенийРаздела11(КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ЖУчПолучСчФСтр");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерПор", СтрокаДанных.НомерПор, "Ч,12");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаПолуч", СтрокаДанных.ДатаПолуч, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод, "Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодВидСд", СтрокаДанных.КодВидСд, "Т,1");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимТовСчФВс", СтрокаДанных.СтоимТовСчФВс, "Ч,19,2");
	
	ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьКорректировкаСчетаФактуры Тогда
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДССчФ", СтрокаДанных.СумНДССчФ, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДССчФ", СтрокаДанных.СумНДССчФ, "Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_РазСтКСчФУм = ЕстьКорректировкаСчетаФактуры И НЕ ЗначениеЗаполнено(СтрокаДанных.РазСтКСчФУв);
	Если ВыгружатьНулевойАтрибут_РазСтКСчФУм Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "РазСтКСчФУм", СтрокаДанных.РазСтКСчФУм, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазСтКСчФУм", СтрокаДанных.РазСтКСчФУм, "Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_РазСтКСчФУв = ЕстьКорректировкаСчетаФактуры И НЕ ЗначениеЗаполнено(СтрокаДанных.РазСтКСчФУм)
	                                    И НЕ ВыгружатьНулевойАтрибут_РазСтКСчФУм;
	Если ВыгружатьНулевойАтрибут_РазСтКСчФУв Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "РазСтКСчФУв", СтрокаДанных.РазСтКСчФУв, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазСтКСчФУв", СтрокаДанных.РазСтКСчФУв, "Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_РазНДСКСчФУм = ВыгружатьНулевойАтрибут_РазСтКСчФУм ИЛИ ЗначениеЗаполнено(СтрокаДанных.РазСтКСчФУм);
	Если ВыгружатьНулевойАтрибут_РазНДСКСчФУм Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "РазНДСКСчФУм", СтрокаДанных.РазНДСКСчФУм, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазНДСКСчФУм", СтрокаДанных.РазНДСКСчФУм, "Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_РазНДСКСчФУв = ВыгружатьНулевойАтрибут_РазСтКСчФУв ИЛИ ЗначениеЗаполнено(СтрокаДанных.РазСтКСчФУв);
	Если ВыгружатьНулевойАтрибут_РазНДСКСчФУв Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "РазНДСКСчФУв", СтрокаДанных.РазНДСКСчФУв, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазНДСКСчФУв", СтрокаДанных.РазНДСКСчФУв, "Ч,19,2");
	КонецЕсли;
	
	Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
	КонецЦикла;
	
	Если СтрокаДанных.СвПрод <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПрод");
		
		Если СтрокаДанных.СвПрод.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПрод.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПрод.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПрод.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если СтрокаДанных.СвКомис <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвКомис");
		
		Если СтрокаДанных.СвКомис.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвКомис.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвКомис.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвКомис.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузкаРаздел12(ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел12";
	
	ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ПараметрыВыгрузки, ИмяРаздела);
	Если ДанныеРаздела = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
	ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.12");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000120");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед12", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСекции);
				
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела12(КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела12(КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСтрокуСведенийРаздела12(КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВыстСчФ_173.5");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФ", СтрокаДанных.НомСчФ, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаДанных.ДатаСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимТовБНалВс", СтрокаДанных.СтоимТовБНалВс, "Ч,19,2");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНалПокуп",    СтрокаДанных.СумНалПокуп,    "Ч,19,2");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимТовСНалВс", СтрокаДанных.СтоимТовСНалВс, "Ч,19,2");
	
	Если СтрокаДанных.СвПокуп <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
		
		Если СтрокаДанных.СвПокуп.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПокуп.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПокуп.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПокуп.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

&НаСервере
Функция ДанныеРазделаНДСДляВыгрузки(ПараметрыВыгрузки, ИмяРаздела)
	
	ДанныеРаздела = Неопределено;
	
	Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
		СекцииРаздела = СписокСекцийРазделаИзРегистра(ИмяРаздела);
		
		Если СекцииРаздела.Количество() > 0 Тогда
			ДанныеРаздела = Новый Структура();
			ДанныеРаздела.Вставить("СтрокиРаздела", СекцииРаздела.ВыгрузитьКолонку("НомерПервойСтроки"));
			ДанныеРаздела.Вставить("ИтогиРаздела", РегламентированнаяОтчетность.ИтогиРазделаДекларацииНДС(СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела));
		КонецЕсли;
		
	Иначе
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = "Данные" + ИмяРаздела;
		
		ЗаписьРегистраСведений.Прочитать();
		
		Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
			Данные = ЗаписьРегистраСведений.СодержимоеФайла.Получить();
			Если Данные.Записи.Количество() > 0 Тогда
				ДанныеРаздела = Новый Структура();
				ДанныеРаздела.Вставить("СтрокиРаздела", Данные.Записи);
				Если Данные.Свойство("Итоги") Тогда
					ДанныеРаздела.Вставить("ИтогиРаздела", Данные.Итоги);
				Иначе
					ДанныеРаздела.Вставить("ИтогиРаздела", Неопределено);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеРаздела;
	
КонецФункции

&НаСервере
Функция КомпоновщикXML_Новый()
	
	КомпоновщикXML = Новый Структура;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ЗаписьТекста.Записать("<?xml version=""1.0"" encoding=""windows-1251""?>");
	
	КомпоновщикXML.Вставить("ИмяФайла", ИмяВременногоФайла);
	КомпоновщикXML.Вставить("ЗаписьТекста", ЗаписьТекста);
	КомпоновщикXML.Вставить("СтэкУзлов", Новый Массив);
	КомпоновщикXML.Вставить("НовыйУзелЗакрыт", Истина);
	КомпоновщикXML.Вставить("Табуляция", "");
	
	Возврат КомпоновщикXML;
	
КонецФункции

&НаСервере
Процедура КомпоновщикXML_СоздатьУзел(КомпоновщикXML, ИмяУзла)
	
	Если НЕ КомпоновщикXML.НовыйУзелЗакрыт Тогда
		КомпоновщикXML.ЗаписьТекста.Записать(">");
		КомпоновщикXML.Табуляция = КомпоновщикXML.Табуляция + Символы.Таб;
	КонецЕсли;
	
	КомпоновщикXML.СтэкУзлов.Вставить(0, ИмяУзла);
	
	КомпоновщикXML.ЗаписьТекста.Записать(Символы.ПС + КомпоновщикXML.Табуляция + "<" + ИмяУзла);
	
	КомпоновщикXML.НовыйУзелЗакрыт = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ОписаниеТипаАтрибута = СтрРазделить(ТипАтрибута, ",");
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		ПредставлениеЗначения = ЗаменитьСимволыРазметки(ПредставлениеЗначения);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
	КонецЕсли;
	
	КомпоновщикXML.ЗаписьТекста.Записать(" " + ИмяАтрибута + "=""" + ПредставлениеЗначения + """");
	
КонецПроцедуры

&НаСервере
Процедура КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута)
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, Значение)
	
	КомпоновщикXML.ЗаписьТекста.Записать(">" + Значение + "</" + КомпоновщикXML.СтэкУзлов[0] + ">");
	
	КомпоновщикXML.СтэкУзлов.Удалить(0);
	КомпоновщикXML.НовыйУзелЗакрыт = Истина;
	
КонецПроцедуры

&НаСервере
Процедура КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML)
	
	Если КомпоновщикXML.НовыйУзелЗакрыт Тогда
		КомпоновщикXML.Табуляция = Сред(КомпоновщикXML.Табуляция, 2);
		КомпоновщикXML.ЗаписьТекста.Записать(Символы.ПС + КомпоновщикXML.Табуляция + "</" + КомпоновщикXML.СтэкУзлов[0] + ">");
		
	Иначе
		КомпоновщикXML.ЗаписьТекста.Записать("/>");
		КомпоновщикXML.НовыйУзелЗакрыт = Истина;
		
	КонецЕсли;
	
	КомпоновщикXML.СтэкУзлов.Удалить(0);
	
КонецПроцедуры

&НаСервере
Функция КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML)
	
	КомпоновщикXML.ЗаписьТекста.Закрыть();
	КомпоновщикXML.ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(КомпоновщикXML.ИмяФайла);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(КомпоновщикXML.ИмяФайла);
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Функция СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, ПрефиксИмени)
	
	ИдентификаторФайла = ПрефиксИмени
	                   + "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
	                   + "_" + ПараметрыВыгрузки.КодИФНС
	                   + "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
	                   + "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	                   + "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ЗаменитьСимволыРазметки(Знач ПредставлениеЗначения)
	
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "&", "&amp;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "<", "&lt;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, ">", "&gt;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, """", "&quot;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "'", "&apos;");
	
	Возврат ПредставлениеЗначения;
	
КонецФункции

#КонецОбласти

#Область Проверки

&НаКлиенте
Процедура ЗапуститьПроверки() Экспорт
	
	ВывестиПанельВыполненияПроверки();
	
	Если НЕ СтруктураРеквизитовФормы.ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС Тогда
	
		ПроверитьВозможностьВыгрузкиВФоне();
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПроверкиВозможностиВыгрузки", 1, Истина);
		
	КонецЕсли;	
	
	//ПроверкаКонтрагентовБРО
	ПроверкаКонтрагентовБРОКлиент.ЗапуститьПроверкуКонтрагентовПослеЗаполнения(ЭтотОбъект);
	//Конец ПроверкаКонтрагентовБРО

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущийРаздел(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийРаздел" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПРОВЕРКИ КОНТРОЛЬНЫХ СООТНОШЕНИЙ

#Область ПроцедурыИФункцииМеханизмаПроверкиКонтрольныхСоотношений

&НаКлиенте
Процедура Проверить(Команда)
			
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда 
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
		
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
		
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда 
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
		
	Иначе
		СписокРасшифровкиформулы.Очистить();
		
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	ПроверкаКС_1_1(СтруктураРезультата);
	ПроверкаКС_1_2(СтруктураРезультата);
	ПроверкаКС_1_3(СтруктураРезультата);
	ПроверкаКС_1_4(СтруктураРезультата);
	ПроверкаКС_1_5(СтруктураРезультата);
	ПроверкаКС_1_6(СтруктураРезультата);
	ПроверкаКС_1_7(СтруктураРезультата);
	ПроверкаКС_1_8(СтруктураРезультата);
	ПроверкаКС_1_9(СтруктураРезультата);
	ПроверкаКС_1_10(СтруктураРезультата);
	ПроверкаКС_1_11(СтруктураРезультата);
	ПроверкаКС_1_12(СтруктураРезультата);
	ПроверкаКС_1_13(СтруктураРезультата);
	ПроверкаКС_1_14(СтруктураРезультата);
	ПроверкаКС_1_15(СтруктураРезультата);
	ПроверкаКС_1_16(СтруктураРезультата);
	ПроверкаКС_1_17(СтруктураРезультата);
	ПроверкаКС_1_18(СтруктураРезультата);
	ПроверкаКС_1_19(СтруктураРезультата);
	ПроверкаКС_1_20(СтруктураРезультата);
	ПроверкаКС_1_21(СтруктураРезультата);
	ПроверкаКС_1_22(СтруктураРезультата);
	ПроверкаКС_1_23_1(СтруктураРезультата);
	ПроверкаКС_1_23_2(СтруктураРезультата);
	ПроверкаКС_1_23_3(СтруктураРезультата);
	ПроверкаКС_1_23_4(СтруктураРезультата);
	ПроверкаКС_1_23_5(СтруктураРезультата);
	ПроверкаКС_1_23_6(СтруктураРезультата);
	ПроверкаКС_1_24(СтруктураРезультата);
	ПроверкаКС_1_25(СтруктураРезультата);
	ПроверкаКС_1_26(СтруктураРезультата);
	ПроверкаКС_1_27(СтруктураРезультата);
	ПроверкаКС_1_28(СтруктураРезультата);
	ПроверкаКС_1_29(СтруктураРезультата);
	ПроверкаКС_1_30(СтруктураРезультата);
	ПроверкаКС_1_31(СтруктураРезультата);
	ПроверкаКС_1_32(СтруктураРезультата);
	ПроверкаКС_1_33(СтруктураРезультата);
	ПроверкаКС_1_34(СтруктураРезультата);
	ПроверкаКС_1_35(СтруктураРезультата);
	ПроверкаКС_1_36(СтруктураРезультата);
	ПроверкаКС_1_37(СтруктураРезультата);
	ПроверкаКС_1_38(СтруктураРезультата);
	ПроверкаКС_1_39(СтруктураРезультата);
	ПроверкаКС_1_40(СтруктураРезультата);
	ПроверкаКС_1_41(СтруктураРезультата);
	ПроверкаКС_1_42(СтруктураРезультата);
	ПроверкаКС_1_43(СтруктураРезультата);
	ПроверкаКС_1_44(СтруктураРезультата);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
			
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор));
			
	КонецЕсли;
		
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ПроверкаКС_1_1(СтруктураРезультата)

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = Новый Структура;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 3 (КС 1.1)'");
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Если в Разделе 2, строке 070 отражены коды 1011703 или 1011711, то строка 180 по графе 3 Раздела 3 должна быть меньше или равна Раздела 2 строки 060 предыдущего отчетного периода.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = СтруктураРаздела3.П000300018003;
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 180, Графа 3";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300018003", НазваниеПоказателя,
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300018003), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3",
		Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
	ПроверятьКС = Ложь;
	
	НомерСтраницы = 1;
	
	// Проверим и зарегистрируем первую часть условия соотношения.
	Для каждого Страница Из мДанныеОтчета.Раздел2 Цикл
		
		НомерСтраницыСтр = Формат(НомерСтраницы, "ЧГ=0");
		Если (Страница.Данные[0].Значение.П000200007003 = "1011703" ИЛИ Страница.Данные[0].Значение.П000200007003 = "1011711") Тогда 
			ПроверятьКС = Истина;
			НазваниеПоказателя = "Раздел 2, Строка 070, Графа 3, страница № " + НомерСтраницыСтр + ".";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200007003",
				НазваниеПоказателя, Страница.Данные[0].Значение.П000200007003, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел2", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		КонецЕсли;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если ПроверятьКС Тогда 
		
		// Механизм ПНП
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок);
		
		Если ДокументПНП = Неопределено Тогда 
			 ПроверятьКС = Ложь;
		Иначе
			
			ПроверятьКС = Истина;
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Раздел2ПНП = Неопределено;
			СуммаР2Ст060 = 0;
			ИмяР2Ст060Гр3ПНП = "П000200006003";
			НаименованиеР2Ст060ПНП = "Сумма налога, исчисленная к уплате в бюджет за предыдущий налоговый период";
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство("Раздел2", Раздел2ПНП) Тогда 
				Для Каждого СтраницаПНП Из Раздел2ПНП Цикл 
					ЗначениеР2Ст060ПНП = СтраницаПНП.Данные[ИмяР2Ст060Гр3ПНП];
					СуммаР2Ст060 = СуммаР2Ст060 + ЗначениеР2Ст060ПНП;
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст060Гр3ПНП,
						НаименованиеР2Ст060ПНП, ЗначениеР2Ст060ПНП, "", ДокументПНП, "Раздел2",
						Неопределено, , СчетчикФормулДляРасшифровок);
				КонецЦикла;
			КонецЕсли;
			
			ПраваяЧасть = СуммаР2Ст060;
			ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
			
		КонецЕсли;
		// Механизм ПНП
		
	КонецЕсли;
	
	Если НЕ ПроверятьКС ИЛИ (ПроверятьКС И (ЛеваяЧасть <= ПраваяЧасть)) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " <= " + ПраваяЧастьСтр + ", когда строка 070 Раздела 2 равна ""1011703"" или ""1011711""";
	
	ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Не обоснованное применение вычетов сумм НДС налоговым агентом.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст. 161, 171, 172, 174'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_2(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 3 (КС 1.2)'");
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Если в Разделе 2, строке 070 отражены коды 1011705 или 1011707, то строка 180 по графе 3 Раздела 3 должна быть равна 0.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = СтруктураРаздела3.П000300018003;
	ПраваяЧасть = 0;
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 180, Графа 3";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300018003", 
		НазваниеПоказателя, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300018003), "", 
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
	ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
	ТолькоКоды = Ложь;
	
	НомерСтраницы = 1;
	
	// Проверим и зарегистрируем первую часть условия соотношения.
	Для каждого Страница Из мДанныеОтчета.Раздел2 Цикл
		
		НомерСтраницыСтр = Формат(НомерСтраницы, "ЧГ=0");
		
		НазваниеПоказателя = "Раздел 2, Строка 070, Графа 3, страница № " + НомерСтраницыСтр + ".";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200007003", НазваниеПоказателя,
			Страница.Данные[0].Значение.П000200007003, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		Если (Страница.Данные[0].Значение.П000200007003 = "1011705" ИЛИ Страница.Данные[0].Значение.П000200007003 = "1011707") Тогда
			ТолькоКоды = Истина;
			
		Иначе
			ТолькоКоды = Ложь;
			Прервать;
			
		КонецЕсли;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТолькоКоды ИЛИ (ТолькоКоды И (ЛеваяЧасть = ПраваяЧасть)) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли ТолькоКоды И (ЛеваяЧасть > ПраваяЧасть) Тогда 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр + ", когда строка 070 Раздела 2 равна ""1011705"" или ""1011707""";
	
	ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Не обоснованное применение вычетов сумм НДС налоговым агентом.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст. 161, 171, 172'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка суммы налога к уплате в бюджет (КС 1.3)'");

	НазваниеСтроки060 = "Сумма налога, исчисленная к уплате в бюджет (строка № 060)";
	НазваниеСтроки080 = "Сумма налога, исчисленная при отгрузке товаров (строка № 080)";
	НазваниеСтроки090 = "Сумма налога, исчисленная при получении оплаты (строка № 090)";
	НазваниеСтроки100 = "Сумма налога, исчисленная налоговым агентом с оплаты (строка № 100)";
		
	НомерСтраницы = 1;
	
	Для каждого Страница Из мДанныеОтчета.Раздел2 Цикл
		
		// Проверяем строку 060.
		ОписаниеКС = "Если в Разделе 2, строке 070 отражены коды 1011705 или 1011707, значение в строке 060, раздела 2, должно быть равно (строка 080 + строка 090 - строка 100)";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
			СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем левую часть соотношения.
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000200006003);
		НазваниеПоказателя = СтрЗаменить(НазваниеСтроки060, ")", ", страница № " + НомерСтраницы + ")");
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200006003",
			НазваниеПоказателя, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы, 
			СчетчикФормулДляРасшифровок);
		
		// Добавляем расшифровку для строки 080.
		ЗначениеСтроки080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000200008003);
		НазваниеПоказателя = СтрЗаменить(НазваниеСтроки080, ")", ", страница № " + НомерСтраницы + ")");
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200008003",
			НазваниеПоказателя, ЗначениеСтроки080, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		// Добавляем расшифровку для строки 090.
		ЗначениеСтроки090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000200009003);
		НазваниеПоказателя = СтрЗаменить(НазваниеСтроки090, ")", ", страница № " + НомерСтраницы + ")");
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200009003",
			НазваниеПоказателя, ЗначениеСтроки090, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		// Добавляем расшифровку для строки 100.
		ЗначениеСтроки100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000200010003);
		НазваниеПоказателя = СтрЗаменить(НазваниеСтроки100, ")", ", страница № " + НомерСтраницы + ")");
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200010003", 
			НазваниеПоказателя, ЗначениеСтроки100, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		ПраваяЧастьРезультат = ЗначениеСтроки080 + ЗначениеСтроки090 - ЗначениеСтроки100;
		ПраваяЧастьРезультатСтр = Формат(ПраваяЧастьРезультат, "ЧРД=.;ЧН=0");
		
		Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " = "
		+ Формат(ЗначениеСтроки080, "ЧРД=.;ЧН=0") + " + "
		+ Формат(ЗначениеСтроки090, "ЧРД=.;ЧН=0") + " - "
		+ Формат(ЗначениеСтроки100, "ЧРД=.;ЧН=0")
		+ " Итог [" + ПраваяЧастьРезультатСтр + "]" + ", когда строка 070 Раздела 2 равна ""1011705"" или ""1011707"".";
		
		Если (Страница.Данные[0].Значение.П000200007003 = "1011705" ИЛИ Страница.Данные[0].Значение.П000200007003 = "1011707") Тогда
			КодыОтражены = Истина;
		Иначе
			КодыОтражены = Ложь;
		КонецЕсли;
		
		Если НЕ КодыОтражены ИЛИ (КодыОтражены И (ЛеваяЧасть = ПраваяЧастьРезультат)) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		ИначеЕсли КодыОтражены Тогда
			Если (ЗначениеСтроки080 = 0 И ЗначениеСтроки100 = 0) И (ЛеваяЧасть = ЗначениеСтроки090) 
				ИЛИ (ЗначениеСтроки090 = 0 И ЗначениеСтроки100 = 0) И (ЛеваяЧасть = ЗначениеСтроки080) Тогда 
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижение суммы налога к уплате в бюджет.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.161, 173, 174'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка суммы налога к уплате в бюджет (КС 1.4)'");
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела7 = мДанныеОтчета.ПолеТабличногоДокументаРаздел7;
	
	// Проверяем КС.
	ОписаниеКС = "Отношение: (строка 010 + строка 020 + строка 030 + строка 040) по графе 3 Раздела 3 / (строка 010 + строка 020 + строка 030 + строка 040) по графе 3 Раздела 3 + (∑ строки 010 графы 2 Раздела 7 по кодам (1010800 - 1010821)) должно быть равно (строка 120 + строка 150 + строка 160) по графе 3 Раздела 3 / (строка 120 + строка 150 + строка 160) по графе 3 Раздела 3 + (∑строк 010 графы 4 Раздела 7 по кодам (1010800 - 1010821)";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеР3Ст010Гр3 = "Сумма налога, предъявленная налогоплательщику при приобретении товаров (строка 010 по графе 3 Раздела 3)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300001003", НазваниеР3Ст010Гр3,
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300001003), "",
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеР3Ст020Гр3 = "Сумма налога, уплаченная налогоплательщиком таможенным органам при ввозе товаров на таможенную территорию РФ (строка 020 по графе 3 Раздела 3)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300002003", НазваниеР3Ст020Гр3,
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300002003), "", 
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеР3Ст030Гр3 = "Сумма налога, уплаченная налогоплательщиком налоговым органам при ввозе товаров на таможенную территорию РФ (строка 030 по графе 3 Раздела 3)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300003003", НазваниеР3Ст030Гр3,
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300003003), "",
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
	НазваниеР3Ст040Гр3 = "Сумма налога, уплаченная налогоплательщиком налоговым органам при ввозе товаров на таможенную территорию РФ (строка 040 по графе 3 Раздела 3)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300004003", НазваниеР3Ст040Гр3,
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300004003), "",
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
	КодыОперации = СтрРазделить("1010800,1010801,1010802,1010803,1010804,1010805,1010806,1010807,1010808,1010809,1010810,1010811,1010812,1010813,1010814,1010815,1010816,1010817,1010818,1010819,1010820,1010821", ",");
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000700000101_1");
	СуммаР7Ст010Гр2 = 0;
	
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000700000102_" + НомСтрСтр;
		ИмяСтрокиКода = "П000700000101_" + НомСтрСтр;
		Если СтруктураРаздела7.Свойство(ИмяСтрокиКода) Тогда 
			Если КодыОперации.Найти(СтруктураРаздела7[ИмяСтрокиКода]) <> Неопределено Тогда
				НазваниеПоказателя = "Раздел 7, строка № " + НомСтрСтр + ", графа 2";
				РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
					СтруктураРаздела7[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел7", Неопределено, , СчетчикФормулДляРасшифровок);
					
				Если СтруктураРаздела7.Свойство(ИмяПоказателя) Тогда
					СуммаР7Ст010Гр2 = СуммаР7Ст010Гр2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела7[ИмяПоказателя]);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Зарегистрируем правую часть соотношения.
	НазваниеР3Ст120Гр3 = "Сумма налога, предъявленная налогоплательщику при приобретении товаров (строка 120 по графе 3 Раздела 3)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300012003", НазваниеР3Ст120Гр3,
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300012003), "",
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	НазваниеР3Ст150Гр3 = "Сумма налога, уплаченная налогоплательщиком таможенным органам при ввозе товаров на таможенную территорию РФ (строка 150 по графе 3 Раздела 3)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300015003", НазваниеР3Ст150Гр3,
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300015003), "", 
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	НазваниеР3Ст160Гр3 = "Сумма налога, уплаченная налогоплательщиком налоговым органам при ввозе товаров на таможенную территорию РФ (строка 160 по графе 3 Раздела 3)";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300016003", НазваниеР3Ст160Гр3,
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300016003), "",
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	СуммаР7Ст010Гр4 = 0;
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000700000104_" + НомСтрСтр;
		ИмяСтрокиКода = "П000700000101_" + НомСтрСтр;
		Если СтруктураРаздела7.Свойство(ИмяСтрокиКода) Тогда 
			Если КодыОперации.Найти(СтруктураРаздела7[ИмяСтрокиКода]) <> Неопределено Тогда
				НазваниеПоказателя = "Раздел 7, строка № " + НомСтрСтр + ", графа 4";
				РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
					СтруктураРаздела7[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел7", Неопределено, , СчетчикФормулДляРасшифровок);
				Если СтруктураРаздела7.Свойство(ИмяПоказателя) Тогда 
					СуммаР7Ст010Гр4 = СуммаР7Ст010Гр4 + СтруктураРаздела7[ИмяПоказателя];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СуммаПоР3Левая = (СтруктураРаздела3.П000300001003 + СтруктураРаздела3.П000300002003 + СтруктураРаздела3.П000300003003 + 
		СтруктураРаздела3.П000300004003);
	СуммаПоР3ЛеваяСтр = Формат(СуммаПоР3Левая, "ЧРД=.;ЧН=0");
	
	СуммаПоР3Правая = (СтруктураРаздела3.П000300012003 + СтруктураРаздела3.П000300015003 + СтруктураРаздела3.П000300016003);
	СуммаПоР3ПраваяСтр = Формат(СуммаПоР3Правая, "ЧРД=.;ЧН=0");
	
	ЛевыйЗнаменатель = СуммаПоР3Левая + СуммаР7Ст010Гр2;
	ЛевыйЗнаменательСтр = Формат(ЛевыйЗнаменатель, "ЧРД=.;ЧН=0");
	
	ПравыйЗнаменатель = СуммаПоР3Правая + СуммаР7Ст010Гр4;
	ПравыйЗнаменательСтр = Формат(ПравыйЗнаменатель, "ЧРД=.;ЧН=0");
	
	Если СуммаПоР3Левая = 0 ИЛИ (ЛевыйЗнаменатель = 0) Тогда 
		ЛеваяЧасть = 0;
	Иначе 
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СуммаПоР3Левая / ЛевыйЗнаменатель);
	КонецЕсли;
	
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	Если СуммаПоР3Правая = 0 ИЛИ (ПравыйЗнаменатель = 0) Тогда 
		ПраваяЧасть = 0;
	Иначе 
		ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СуммаПоР3Правая / ПравыйЗнаменатель);
	КонецЕсли;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ((ЛевыйЗнаменатель = 0 ИЛИ ПравыйЗнаменатель = 0) 
		ИЛИ (НЕ(ЛевыйЗнаменатель = 0 ИЛИ ПравыйЗнаменатель = 0)) И (ЛеваяЧасть = ПраваяЧасть)) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = СуммаПоР3ЛеваяСтр + " / " + ЛевыйЗнаменательСтр + " Итог [" + ЛеваяЧастьСтр + "] = " + СуммаПоР3ПраваяСтр + " / "
		+ ПравыйЗнаменательСтр + " Итог [" + ПраваяЧастьСтр + "]";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно необоснованное применение налоговых вычетов.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.149, 170 п.4'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_5(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 3 (КС 1.5)'");
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем .
	ОписаниеКС = "Сумма налога, подлежащая восстановлению (строка 080 графы 5 Раздела 3) должна быть больше либо равна (строка 90 графа 5 + строка 100 графа 5) Раздела 3 + ∑ значений по строке 080 графы 4 Приложения 1 к Разделу 3 по кодам 1011801, 1011802, 1011803, 1011805 (строка 030 Приложения 1 к Разделу 3), при условии, если в строке 080 графы 1 Приложения 1 к Разделу 3 указан отчетный год, соответствующий отчетному году на Титульном листе";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300008005);
	НазваниеПоказателя = "Раздел 3, строка 080, графа 5";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300008005", НазваниеПоказателя,
		ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, строка 090, графа 5";
	Р3Ст090Гр5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300009005);
	Р3Ст090Гр5Стр = Формат(Р3Ст090Гр5, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300009005", НазваниеПоказателя,
		Р3Ст090Гр5, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	Р3Ст100Гр5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300010005);
	НазваниеПоказателя = "Раздел 3, строка 100, графа 5";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300010005", НазваниеПоказателя,
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300010005), "", 
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	Р3Ст100Гр5Стр = Формат(Р3Ст100Гр5, "ЧРД=.;ЧН=0");
	
	
	// Данные многостраничной части
	ОтчетныйГодТЛ = мДанныеОтчета.ПолеТабличногоДокументаТитульный.ОтчетГод;
	СуммаР3П1Ст080 = 0;
	НомерСтраницы = 1;
	
	Для Каждого Страница Из мДанныеОтчета.Раздел3_Прил1 Цикл
		
		// Считаем (∑ строки 010 графы 2 Раздела 7 по кодам (1011801 - 1011805)) и, при наличии, регистрируем показатель для расшифровки
		Если НЕ (Страница.Данные[0].Значение.П000310003001 = "1011801" ИЛИ
			Страница.Данные[0].Значение.П000310003001 = "1011802" ИЛИ
			Страница.Данные[0].Значение.П000310003001 = "1011803" ИЛИ
			Страница.Данные[0].Значение.П000310003001 = "1011805") Тогда
			Продолжить;
			
		КонецЕсли;
		
		КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000310008001_1");
		
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ИмяПоказателя = "П000310008004_" + Формат(Инд, "ЧГ=0");
			ИмяСтрокиГода = "П000310008001_" + Формат(Инд, "ЧГ=0");
			Если Страница.Данные[0].Значение.Свойство(ИмяСтрокиГода) Тогда
				Если Страница.Данные[0].Значение[ИмяСтрокиГода] = ОтчетныйГодТЛ Тогда
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя,
						"Сумма НДС, подлежащая восстановлению и уплате в бюджет", Страница.Данные[0].Значение[ИмяПоказателя], "",
						СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3_Прил1", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
					
					Если Страница.Данные[0].Значение.Свойство(ИмяПоказателя) Тогда
						СуммаР3П1Ст080 = СуммаР3П1Ст080
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение[ИмяПоказателя]);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	СуммаР3П1Ст080Стр = Формат(СуммаР3П1Ст080, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = Р3Ст090Гр5 + Р3Ст100Гр5 + СуммаР3П1Ст080;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (ЛеваяЧасть >= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " >= " + Р3Ст090Гр5Стр + " + " + Р3Ст100Гр5Стр + " + " + СуммаР3П1Ст080 + " Итог [" + ПраваяЧастьСтр + "]";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Занижена сумма, подлежащая восстановлению и уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.170, 171'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_6(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 3 (КС 1.6)'");
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем .
	ОписаниеКС = "Сумма налога, подлежащая восстановлению (строка 080 графа 5 Раздела 3) за минусом суммы налога, подлежащей восстановлению при совершении операций по ставке 0 процентов (строка 090 графа 5 Раздела 3) и суммы налога, подлежащей восстановлению пп.3 п.3 ст.170 НК РФ (строка 100 графа 5 Раздела 3) должна быть больше или равна ∑ значений по строке 080 графы 4 Приложения 1 к Разделу 3 по кодам 1011801, 1011802, 1011803, 1011805 (строка 030 Приложения 1 к Разделу 3), при условии, если в строке 080 графы 1 Приложения 1 к Разделу 3 указан отчетный год, соответствующий отчетному году на Титульном листе";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	Р3Ст080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300008005);
	НазваниеПоказателя = "Раздел 3, строка 080, графа 5";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300008005", НазваниеПоказателя,
		Р3Ст080, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	Р3Ст090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300009005);
	НазваниеПоказателя = "Раздел 3, строка 090, графа 5";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300009005", НазваниеПоказателя,
		Р3Ст090, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	Р3Ст100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300010005);
	НазваниеПоказателя = "Раздел 3, строка 100 графа 5";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300010005", НазваниеПоказателя,
		Р3Ст100, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Р3Ст080Стр = Формат(Р3Ст080, "ЧРД=.;ЧН=0");
	Р3Ст090Стр = Формат(Р3Ст090, "ЧРД=.;ЧН=0");
	Р3Ст100Стр = Формат(Р3Ст100, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = Р3Ст080 - Р3Ст090 - Р3Ст100;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Данные многостраничной части
	
	ПраваяЧасть = 0;
	ОтчетныйГодТЛ = мДанныеОтчета.ПолеТабличногоДокументаТитульный.ОтчетГод;
	
	НомерСтраницы = 1;
	
	Для каждого Страница Из мДанныеОтчета.Раздел3_Прил1 Цикл
		
		// Считаем (∑ строки 010 графы 2 Раздела 7 по кодам (1011801 - 1011805)) и, при наличии, регистрируем показатель для расшифровки
		Если НЕ (Страница.Данные[0].Значение.П000310003001 = "1011801" ИЛИ
			Страница.Данные[0].Значение.П000310003001 = "1011802" ИЛИ
			Страница.Данные[0].Значение.П000310003001 = "1011803" ИЛИ
			Страница.Данные[0].Значение.П000310003001 = "1011805") Тогда
			Продолжить;
			
		КонецЕсли;
		
		КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000310008001_1");
		
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ИмяПоказателя = "П000310008004_" + Формат(Инд, "ЧГ=0");
			ИмяСтрокиГода = "П000310008001_" + Формат(Инд, "ЧГ=0");
			Если Страница.Данные[0].Значение.Свойство(ИмяСтрокиГода) Тогда
				Если Страница.Данные[0].Значение[ИмяСтрокиГода] = ОтчетныйГодТЛ Тогда
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя,
						"Сумма НДС, подлежащая восстановлению и уплате в бюджет", Страница.Данные[0].Значение[ИмяПоказателя], "",
						СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3_Прил1", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
						
					Если Страница.Данные[0].Значение.Свойство(ИмяПоказателя) Тогда
						ПраваяЧасть = ПраваяЧасть + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение[ИмяПоказателя]);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (ЛеваяЧасть >= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Расшифровка = Р3Ст080Стр + " - " + Р3Ст090Стр + " - " + Р3Ст100Стр + " Итог [" + ЛеваяЧастьСтр + "] >= " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Занижена сумма, подлежащая восстановлению и уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.170, 171'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 3 (КС 1.7)'");
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Общая сумма налога (строка 110 графа 5 Раздел 3) должна быть равна итоговой сумме налога за налоговый период (∑строк 010-080, 105-109 по графе 5 Раздела 3)";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 010, Графа 5";
	ЗначениеСтроки010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300001005);
	ЗначениеСтроки010Стр = Формат(ЗначениеСтроки010, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЗначениеСтроки010;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300001005", НазваниеПоказателя,
		ЗначениеСтроки010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 020, Графа 5";
	ЗначениеСтроки020 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300002005);
	ЗначениеСтроки020Стр = Формат(ЗначениеСтроки020, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки020;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300002005", НазваниеПоказателя,
		ЗначениеСтроки020, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 030, Графа 5";
	ЗначениеСтроки030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300003005);
	ЗначениеСтроки030Стр = Формат(ЗначениеСтроки030, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки030;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300003005", НазваниеПоказателя,
		ЗначениеСтроки030, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 040, Графа 5";
	ЗначениеСтроки040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300004005);
	ЗначениеСтроки040Стр = Формат(ЗначениеСтроки040, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки040;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300004005", НазваниеПоказателя,
		ЗначениеСтроки040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 050, Графа 5";
	ЗначениеСтроки050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300005005);
	ЗначениеСтроки050Стр = Формат(ЗначениеСтроки050, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки050;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300005005", НазваниеПоказателя,
		ЗначениеСтроки050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 060, Графа 5";
	ЗначениеСтроки060 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300006005);
	ЗначениеСтроки060Стр = Формат(ЗначениеСтроки060, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки060;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300006005", НазваниеПоказателя,
		ЗначениеСтроки060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 070, Графа 5";
	ЗначениеСтроки070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300007005);
	ЗначениеСтроки070Стр = Формат(ЗначениеСтроки070, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки070;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300007005", НазваниеПоказателя,
		ЗначениеСтроки070, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 080, Графа 5";
	ЗначениеСтроки080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300008005);
	ЗначениеСтроки080Стр = Формат(ЗначениеСтроки080, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки080;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300008005", НазваниеПоказателя,
		ЗначениеСтроки080, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 105, Графа 5";
	ЗначениеСтроки105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300010505);
	ЗначениеСтроки105Стр = Формат(ЗначениеСтроки105, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки105;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300010505", НазваниеПоказателя,
		ЗначениеСтроки105, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 106, Графа 5";
	ЗначениеСтроки106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300010605);
	ЗначениеСтроки106Стр = Формат(ЗначениеСтроки106, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки106;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300010605", НазваниеПоказателя,
		ЗначениеСтроки106, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 107, Графа 5";
	ЗначениеСтроки107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300010705);
	ЗначениеСтроки107Стр = Формат(ЗначениеСтроки107, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки107;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300010705", НазваниеПоказателя,
		ЗначениеСтроки107, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
	НазваниеПоказателя = "Раздел 3, Строка 108, Графа 5";
	ЗначениеСтроки108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300010805);
	ЗначениеСтроки108Стр = Формат(ЗначениеСтроки108, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки108;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300010805", НазваниеПоказателя,
		ЗначениеСтроки108, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
	НазваниеПоказателя = "Раздел 3, Строка 109, Графа 5";
	ЗначениеСтроки109 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300010905);
	ЗначениеСтроки109Стр = Формат(ЗначениеСтроки109, "ЧРД=.;ЧН=0");
	ЛеваяЧасть = ЛеваяЧасть + ЗначениеСтроки109;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300010905", НазваниеПоказателя,
		ЗначениеСтроки109, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 110, Графа 5";
	ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300011005);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300011005", НазваниеПоказателя,
		ПраваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧастьСтр = Формат(Окр(ЛеваяЧасть, 2), "ЧРД=.;ЧН=0");
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЗначениеСтроки010Стр + " + " + ЗначениеСтроки020Стр + " + " + ЗначениеСтроки030Стр + " + " + ЗначениеСтроки040Стр + " + "
		+ ЗначениеСтроки050Стр + " + " + ЗначениеСтроки060Стр + " + " + ЗначениеСтроки070Стр + " + " + ЗначениеСтроки080Стр + " + "
		+ ЗначениеСтроки105Стр + " + " + ЗначениеСтроки106Стр + " + " + ЗначениеСтроки107Стр + " + " + ЗначениеСтроки108Стр + " + "
		+ ЗначениеСтроки109Стр + " Итог [" + ЛеваяЧастьСтр + "] = " + ПраваяЧастьСтр + " Итог [" + ПраваяЧастьСтр + "]";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), 
			НСтр("ru='Занижение суммы налога вследствие неполного отражения налоговой базы по операциям, указанным в строках 010-090.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='НК РФ ст. 146, 154, 155, 156, 158, 159, 162'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_8(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 3 (КС 1.8)'");
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Общая сумма НДС, подлежащая вычету (строка 190 графы 3 Раздела 3) должна быть равна сумме значений по строкам 120, 130, 140, 150, 160, 170, 180 графы 3 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 190, Графа 3";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300019003);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300019003", НазваниеПоказателя,
		ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 120, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300012003);
	ПраваяЧасть = ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " = " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300012003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 130, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300013003);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300013003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 140, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300014003);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300014003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 150, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300015003);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300015003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 160, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300016003);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300016003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 170, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300017003);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300017003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 180, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300018003);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300018003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " Итог [" + ПраваяЧастьСтр + "]";
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Необоснованные налоговые вычеты'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.171, 172'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
			
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_9(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 3 (КС 1.9)'");
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, подлежащая уплате в бюджет (строка 200 графы 3 Раздела 3) должна быть равна разнице значений строки 110 графы 5 и строки 190 графы 3 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 200, Графа 3";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300020003);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300020003", НазваниеПоказателя,
		ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 110, Графа 5";
	Р3Ст110Гр5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300011005);
	ПраваяЧасть = Р3Ст110Гр5;
	Р3Ст110Гр5Стр = Формат(Р3Ст110Гр5, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " = " + Р3Ст110Гр5Стр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300011005", НазваниеПоказателя,
		Р3Ст110Гр5, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 190, Графа 3";
	Р3Ст190Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300019003);
	ПраваяЧасть = ПраваяЧасть - Р3Ст190Гр3;
	Р3Ст190Гр3Стр = Формат(Р3Ст190Гр3, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " - " + Р3Ст190Гр3Стр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300019003", НазваниеПоказателя,
		Р3Ст190Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " Итог [" + ПраваяЧастьСтр + "], когда " + Р3Ст110Гр5Стр + " - " + Р3Ст190Гр3Стр + " >= 0";
	
	//(разность величин строк 110, 190 >= 0)
	УсловиеВыполнено = ЗначениеЗаполнено(ЛеваяЧасть) И ПраваяЧасть >= 0;
	
	Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть < ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Занижение суммы НДС, исчисленной к уплате в бюджет по Разделу 3'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
			
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_10(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 3 (КС 1.10)'");
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, подлежащая уплате в бюджет (строка 210 графы 3 Раздела 3) должна быть равна разнице значений строки строки 190 графы 3 и 110 графы 5 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 210, Графа 3";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300021003);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300021003", НазваниеПоказателя,
		ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 190, Графа 3";
	Р3Ст190Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300019003);
	ПраваяЧасть = Р3Ст190Гр3;
	Р3Ст190Гр3Стр = Формат(Р3Ст190Гр3, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " = " + Р3Ст190Гр3Стр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300019003", НазваниеПоказателя,
		Р3Ст190Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 110, Графа 5";
	Р3Ст110Гр5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300011005);
	ПраваяЧасть = ПраваяЧасть - Р3Ст110Гр5;
	Р3Ст110Гр5Стр = Формат(Р3Ст110Гр5, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " - " + Р3Ст110Гр5Стр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300011005", НазваниеПоказателя,
		Р3Ст110Гр5, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " Итог [" + ПраваяЧастьСтр + "], когда " + Р3Ст110Гр5Стр + " - " + Р3Ст190Гр3Стр + " < 0";
	
	//(разность величин строк 110, 190 < 0))
	УсловиеВыполнено = (ЗначениеЗаполнено(ЛеваяЧасть) И (Р3Ст110Гр5 - Р3Ст190Гр3) < 0);
	
	Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Занижение суммы НДС, исчисленной к уплате в бюджет по Разделу 3'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
			
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_11(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 3 (КС 1.11)'");
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, подлежащая вычету по строке 170 графы 3 Раздела 3 должна быть меньше или равна сумме величин по строкам 010, 020, 030, 040 графы 5 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 170, Графа 3";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300017003);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300017003", НазваниеПоказателя,
		ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 010, Графа 5";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300001005);
	ПраваяЧасть = ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + "  <= " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300001005", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 020, Графа 5";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300002005);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300002005", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 030, Графа 5";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300003005);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300003005", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 040, Графа 5";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300004005);
	ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300004005", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " Итог [" + ПраваяЧастьСтр + "]";
	
	Если (ЛеваяЧасть <= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Налоговые вычеты не обоснованны, либо налоговая база занижена, так как суммы отработанных авансов не включены в реализацию.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='НК РФ ст.171, п.8, НК РФ ст.172, п.6, 172, либо НК РФ ст.146, п.1'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_12(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 3 (КС 1.12)'");
	
	СтруктураРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма НДС по выполненным строительно-монтажным работам для собственного потребления (строка 060 графа 5 Раздел 3) должна быть больше либо равна сумме налога, подлежащей вычету по строке 140 графы 3 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 060, Графа 5";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300006005);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300006005", НазваниеПоказателя,
		ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 140, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела.П000300014003);
	ПраваяЧасть = ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " >= " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300014003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
	Если (ЛеваяЧасть >= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Необоснованное применение налоговых вычетов при выполнении СМР для собственного потребления.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='НК РФ ст.171, п.6, ст.172, п.5'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_13(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 2 к разделу 3 (КС 1.13)'");
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела3_Прил2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3_Прил2;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма исчисленного налога по графе 2 Приложения 2 к Разделу 3 должна быть меньше или равна общей суммы НДС (строка 110 графа 5 Раздела 3)";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000320000102_1");
	
	// Ищем сумму строк графы 3 Раздела 2 и регистрируем показатель для расшифровки
	ЛеваяЧасть = 0;
	
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000320000102_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 3, приложение 2, строка № " + НомСтрСтр + ", графа 2";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			СтруктураРаздела3_Прил2[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3_Прил2", Неопределено, , СчетчикФормулДляРасшифровок);
		ЛеваяЧасть = ЛеваяЧасть + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3_Прил2[ИмяПоказателя]);
		
	КонецЦикла;
	
	Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 110, Графа 5";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300011005);
	ПраваяЧасть = ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " <= " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300011005", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Если (ЛеваяЧасть <= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Занижение суммы налога вследствие неполного отражения налоговой базы.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст. 146, 153, 154'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_14(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 2 к разделу 3 (КС 1.14)'");
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела3_Прил2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3_Прил2;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налоговых вычетов по графе 3 Приложения 2 к Разделу 3 должна быть меньше или равна общей суммы НДС, подлежащей вычету.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000320000102_1");

	
	// Зарегистрируем левую часть соотношения.
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П000320000103_1");
	
	// Ищем сумму строк графы 3 Раздела 2 и регистрируем показатель для расшифровки
	ЛеваяЧасть = 0;
	
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000320000103_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 3, приложение 2, строка № " + НомСтрСтр + ", графа 3";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			СтруктураРаздела3_Прил2[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3_Прил2", Неопределено, ,
			СчетчикФормулДляРасшифровок);
		ЛеваяЧасть = ЛеваяЧасть + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3_Прил2[ИмяПоказателя]);
	КонецЦикла;
	
	Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть соотношения.
	НазваниеПоказателя = "Раздел 3, Строка 190, Графа 3";
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300019003);
	ПраваяЧасть = ЗначениеПоказателя;
	ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
	Расшифровка = Расшифровка + " <= " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300019003", НазваниеПоказателя,
		ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
	Если (ЛеваяЧасть <= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Занижение суммы налога подлежащей вычету.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.170, 171, 172'"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_15(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 4 (КС 1.15)'");
	
	СтруктураРаздела4 = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога по строке 120 Раздела 4 должна быть равна сумме величин строк 030 и 040 за минусом суммы величин строк 050 и 080 Раздела 4.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 4, Строка 120";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела4.П000400012003);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000400012003", НазваниеПоказателя,
		ЛеваяЧастьСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П00040000");
	СуммаР4Ст30Гр3 = 0;
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000400003003_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 4, строка № 030(" + НомСтрСтр + "), графа 3";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			СтруктураРаздела4[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
		СуммаР4Ст30Гр3 = СуммаР4Ст30Гр3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела4[ИмяПоказателя]);
	КонецЦикла;
	
	СуммаР4Ст40Гр3 = 0;
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000400004003_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 4, строка № 040(" + НомСтрСтр + "), графа 3";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			СтруктураРаздела4[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
		СуммаР4Ст40Гр3 = СуммаР4Ст40Гр3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела4[ИмяПоказателя]);
	КонецЦикла;
	
	СуммаР4Ст50Гр3 = 0;
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000400005003_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 4, строка № 050(" + НомСтрСтр + "), графа 3";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			СтруктураРаздела4[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
		СуммаР4Ст50Гр3 = СуммаР4Ст50Гр3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела4[ИмяПоказателя]);
	КонецЦикла;
	
	НазваниеПоказателя = "Раздел 4, Строка 080";
	Р4Ст80Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела4.П000400008003);
	Р4Ст80Гр3Стр = Формат(Р4Ст80Гр3, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000400008003", НазваниеПоказателя,
		Р4Ст80Гр3Стр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = СуммаР4Ст30Гр3 + СуммаР4Ст40Гр3 - СуммаР4Ст50Гр3 - Р4Ст80Гр3;
	
	Расшифровка = Расшифровка + " = " + Формат(СуммаР4Ст30Гр3, "ЧРД=.;ЧН=0") + " + " + Формат(СуммаР4Ст40Гр3, "ЧРД=.;ЧН=0") + " - "
		+ Формат(СуммаР4Ст50Гр3, "ЧРД=.;ЧН=0") + " - " + Р4Ст80Гр3Стр + " Итог [" + Формат(ПраваяЧасть, "ЧРД=.;ЧН=0") + "]";
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Завышение суммы НДС, подлежащей вычету.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='НК РФ ст.171, 172. Положение, разд. II п.1-п.3; Протокол, ст.2, ст.4.'"));
			
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
			
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_16(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 5 (КС 1.16)'");
	
	НомерСтраницы = 1;
	Страница = мДанныеОтчета.Раздел5[0];
	
	// Проверяем.
	ОписаниеКС = "Сумма налога по строке 080 Раздела 5 должна быть равна сумме величин по строке 050 Раздела 5";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);

	// Зарегистрируем левую часть соотношения.
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000500008003);
	НазваниеПоказателя = "Раздел 5, Строка 080, Графа 3";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500008003", НазваниеПоказателя,
		ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
	
	// Добавляем расшифровку для строк правой части.
	ПраваяЧасть = 0;
	НомерСтраницыР5 = 1;
	Для каждого СтраницаР5 Из мДанныеОтчета.Раздел5 Цикл
		Инд = 1;
		Пока СтраницаР5.Данные[0].Значение.Свойство("П000500005003_" + Формат(Инд, "ЧГ=0")) Цикл
			ЗначениеДопСтроки = СтраницаР5.Данные[0].Значение["П000500005003_" + Формат(Инд, "ЧГ=0")];
			
			ИмяПоказателя = "П000500005003_" + Формат(Инд, "ЧГ=0");
			НазваниеПоказателя = "Раздел 5, Строка 050, Графа 3";
			ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеДопСтроки);
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя,
				НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницыР5,
				СчетчикФормулДляРасшифровок);
				
			ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
			Инд = Инд + 1;
			
		КонецЦикла;
		НомерСтраницыР5 = НомерСтраницыР5 + 1;
	КонецЦикла;
	
	Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " = " + Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если (ЛеваяЧасть > ПраваяЧасть) Тогда
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Завышение суммы НДС, подлежащей вычету.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='НК РФ ст.171, 172. Положение, разд. II п.1-п.3; Протокол, ст.2, ст.4'"));
		
	Иначе //Если (ЛеваяЧасть < ПраваяЧасть) Тогда
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	НомерСтраницы = НомерСтраницы + 1;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 5 (КС 1.17)'");
	
	НомерСтраницы = 1;
	Страница = мДанныеОтчета.Раздел5[0];
	
	// Проверяем.
	ОписаниеКС = "Сумма налога по строке 090 Раздела 5 должна быть равна сумме величин по строке 070 Раздела 5";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);

	// Зарегистрируем левую часть соотношения.
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000500009003);
	НазваниеПоказателя = "Раздел 5, Строка 090, Графа 3";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500009003", НазваниеПоказателя,
		ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
	
	// Добавляем расшифровку для строк правой части.
	ПраваяЧасть = 0;
	НомерСтраницыР5 = 1;
	Для каждого СтраницаР5 Из мДанныеОтчета.Раздел5 Цикл
		Инд = 1;
		Пока СтраницаР5.Данные[0].Значение.Свойство("П000500007003_" + Формат(Инд, "ЧГ=0")) Цикл
			ЗначениеДопСтроки = СтраницаР5.Данные[0].Значение["П000500007003_" + Формат(Инд, "ЧГ=0")];
			
			ИмяПоказателя = "П000500007003_" + Формат(Инд, "ЧГ=0");
			НазваниеПоказателя = "Раздел 5, Строка 070, Графа 3";
			ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеДопСтроки);
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя,
				НазваниеПоказателя, ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницыР5,
				СчетчикФормулДляРасшифровок);
				
			ПраваяЧасть = ПраваяЧасть + ЗначениеПоказателя;
			Инд = Инд + 1;
			
		КонецЦикла;
		НомерСтраницыР5 = НомерСтраницыР5 + 1;
		
	КонецЦикла;
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Расшифровка = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0") + " = " + Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если (ЛеваяЧасть > ПраваяЧасть) Тогда
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Завышение суммы НДС, подлежащей вычету.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='НК РФ ст.171, 172. Положение, разд. II п.1-п.3; Протокол, ст.2, ст.4'"));
		
	Иначе //Если (ЛеваяЧасть < ПраваяЧасть) Тогда
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_18(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 6 (КС 1.18)'");
	
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога по строке 050 Раздела 6 должна быть равна сумме величин по строке 030 Раздела 6.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 6, Строка 050, Графа 3";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6.П000600005003);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600005003", НазваниеПоказателя,
		ЛеваяЧастьСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П00060000");
	ПраваяЧасть = 0;
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000600003003_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 6, строка № 030(" + НомСтрСтр + "), графа 3";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			СтруктураРаздела6[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, ,
				СчетчикФормулДляРасшифровок);
		ПраваяЧасть = ПраваяЧасть + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6[ИмяПоказателя]);
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Расшифровка = Расшифровка + " = " + ПраваяЧастьСтр;
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
			
	Иначе //Если (ЛеваяЧасть < ПраваяЧасть) Тогда
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Занижение НБ по НДС вследствие неполного отражения указанных гр.2 операций'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='НК РФ ст.153, 164, 165, 167. Положение разд II п.1-п.3; Протокол, ст.2, ст.4'"));
			
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_19(СтруктураРезультата)

	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 6 (КС 1.19)'");
	
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога по строке 060 Раздела 6 должна быть равна сумме величин по строке 040 Раздела 6.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = "Раздел 6, Строка 060, Графа 3";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6.П000600006003);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600006003", НазваниеПоказателя,
		ЛеваяЧастьСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П00060000");
	ПраваяЧасть = 0;
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000600004003_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 6, строка № 040(" + НомСтрСтр + "), графа 3";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			СтруктураРаздела6[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, ,
				СчетчикФормулДляРасшифровок);
		ПраваяЧасть = ПраваяЧасть + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6[ИмяПоказателя]);
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Расшифровка = Расшифровка + " = " + ПраваяЧастьСтр;
	
	Если (ЛеваяЧасть = ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
			
	Иначе //Если (ЛеваяЧасть < ПраваяЧасть) Тогда
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Занижение НБ по НДС вследствие неполного отражения указанных гр.2 операций'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='НК РФ ст.153, 164, 165, 167. Положение разд II п.1-п.3; Протокол, ст.2, ст.4'"));
			
	КонецЕсли;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_20(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 1 (КС 1.20)'");
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела4 = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, подлежащая к уплате в бюджет (строка 040 Раздела 1) должна быть равна (строка 200 Раздела 3 + строка 130 Раздела 4 + строка 160 Раздела 6) - (строка 210 Раздела 3 + строка 120 Раздела 4 + строка 080 раздела 5 + строка 090 Раздела 5 + строка 170 раздела 6), когда строка 200 Раздела 3 + строка 130 Раздела 4 + строка 160 раздела 6 >= строка 210 Раздела 3 + строка 120 Раздела 4 + строка 080 Раздела 5 + строка 090 раздела 5 + строка 170 раздела 6 ";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 1, Строка 040";
	ЗначениеР1Стр040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1.П000100004003);
	ЗначениеР1Стр040Стр = Формат(ЗначениеР1Стр040, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000100004003", НазваниеПоказателя,
		ЗначениеР1Стр040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Раздел 3, Строка 200";
	ЗначениеР3Стр200 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300020003);
	ЗначениеР3Стр200Стр = Формат(ЗначениеР3Стр200, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300020003", НазваниеПоказателя,
		ЗначениеР3Стр200, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 4, Строка 130";
	ЗначениеР4Стр130 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела4.П000400013003);
	ЗначениеР4Стр130Стр = Формат(ЗначениеР4Стр130, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000400013003", НазваниеПоказателя,
		ЗначениеР4Стр130, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 6, Строка 160";
	ЗначениеР6Стр160 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6.П000600016003);
	ЗначениеР6Стр160Стр = Формат(ЗначениеР6Стр160, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600016003", НазваниеПоказателя,
		ЗначениеР6Стр160, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 210";
	ЗначениеР3Стр210 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3.П000300021003);
	ЗначениеР3Стр210Стр = Формат(ЗначениеР3Стр210, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300021003", НазваниеПоказателя,
		ЗначениеР3Стр210, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 4, Строка 120";
	ЗначениеР4Стр120 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела4.П000400012003);
	ЗначениеР4Стр120Стр = Формат(ЗначениеР4Стр120, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000400012003", НазваниеПоказателя,
		ЗначениеР4Стр120, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 6, Строка 170";
	ЗначениеР6Стр170 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела6.П000600017003);
	ЗначениеР6Стр170Стр = Формат(ЗначениеР6Стр170, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600017003", НазваниеПоказателя,
		ЗначениеР6Стр170, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	СуммаР5Стр080 = 0;
	СуммаР5Стр090 = 0;
	
	НомерСтраницы = 1;
	
	Для каждого Страница Из мДанныеОтчета.Раздел5 Цикл
		
		НомерСтраницыСтр = Формат(НомерСтраницы, "ЧГ=0");
		
		НазваниеПоказателя = "Раздел 5, Строка 080, страница № " + НомерСтраницыСтр + ".";
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Страница.Данные[0].Значение.П000500008003);
		СуммаР5Стр080 = СуммаР5Стр080 + ЗначениеПоказателя;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500008003", НазваниеПоказателя,
			ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		НазваниеПоказателя = "Раздел 5, Строка 090, страница № " + НомерСтраницыСтр + ".";
		ЗначениеПоказателя = Страница.Данные[0].Значение.П000500009003;
		СуммаР5Стр090 = СуммаР5Стр090 + ЗначениеПоказателя;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500009003", НазваниеПоказателя,
			ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		Прервать;
		
	КонецЦикла;
	
	ЛеваяЧасть = ЗначениеР1Стр040;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ЛеваяЧастьУсловия = ЗначениеР3Стр200 + ЗначениеР4Стр130 + ЗначениеР6Стр160;
	ЛеваяЧастьУсловияСтр = Формат(ЛеваяЧастьУсловия, "ЧРД=.;ЧН=0");
	ПраваяЧастьУсловия = ЗначениеР3Стр210 + ЗначениеР4Стр120 + СуммаР5Стр080 + СуммаР5Стр090 + ЗначениеР6Стр170;
	ПраваяЧастьУсловияСтр = Формат(ПраваяЧастьУсловия, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = ЛеваяЧастьУсловия - ПраваяЧастьУсловия;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	УсловиеВыполнено = ЛеваяЧастьУсловия >= ПраваяЧастьУсловия;
	
	Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И (ЛеваяЧасть = ПраваяЧасть)) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Занижена сумма НДС, подлежащая уплате в бюджет за отчетный период.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173.'"));
		
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЛеваяЧастьУсловияСтр + " - " + ПраваяЧастьУсловияСтр + " Итог [" + ПраваяЧастьСтр + "]"
		", когда " + ЛеваяЧастьУсловияСтр + " >= " + ПраваяЧастьУсловияСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_21(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 1 (КС 1.21)'");
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела4 = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, исчисленная к возмещению из бюджета (строка 050 Раздела 1) должна быть равна (строка 210 Раздела 3 + строка 120 Раздела 4 + строка 080 Раздела 5 + строка 090 Раздела 5 + строка 170 Раздела 6) - (строка 200 Раздела 3 + строка 130 Раздела 4 + строка 160 Раздела 6), когда строка 200 Раздела 3 + строка 130 Раздела 4 + строка 160 Раздела 6 < строка 210 Раздела 3 + строка 120 Раздела 4 + строка 080 Раздела 5 + строка 090 Раздела 5 + строка 170 Раздела 6.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 1, Строка 050";
	ЗначениеР1Стр050 = СтруктураРаздела1.П000100005003;
	ЗначениеР1Стр050Стр = Формат(ЗначениеР1Стр050, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000100005003", НазваниеПоказателя,
		ЗначениеР1Стр050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Раздел 3, Строка 210";
	ЗначениеР3Стр210 = СтруктураРаздела3.П000300021003;
	ЗначениеР3Стр210Стр = Формат(ЗначениеР3Стр210, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300021003", НазваниеПоказателя,
		ЗначениеР3Стр210, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 4, Строка 120";
	ЗначениеР4Стр120 = СтруктураРаздела4.П000400012003;
	ЗначениеР4Стр120Стр = Формат(ЗначениеР4Стр120, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000400012003", НазваниеПоказателя,
		ЗначениеР4Стр120, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 6, Строка 160";
	ЗначениеР6Стр160 = СтруктураРаздела6.П000600016003;
	ЗначениеР6Стр160Стр = Формат(ЗначениеР6Стр160, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600016003", НазваниеПоказателя,
		ЗначениеР6Стр160, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 3, Строка 200";
	ЗначениеР3Стр200 = СтруктураРаздела3.П000300020003;
	ЗначениеР3Стр200Стр = Формат(ЗначениеР3Стр200, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300020003", НазваниеПоказателя,
		ЗначениеР3Стр200, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 4, Строка 130";
	ЗначениеР4Стр130 = СтруктураРаздела4.П000400013003;
	ЗначениеР4Стр130Стр = Формат(ЗначениеР4Стр130, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000400013003", НазваниеПоказателя,
		ЗначениеР4Стр130, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 6, Строка 170";
	ЗначениеР6Стр170 = СтруктураРаздела6.П000600017003;
	ЗначениеР6Стр170Стр = Формат(ЗначениеР6Стр170, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600017003", НазваниеПоказателя,
		ЗначениеР6Стр170, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	СуммаР5Стр080 = 0;
	СуммаР5Стр090 = 0;
	
	НомерСтраницы = 1;
	
	Для каждого Страница Из мДанныеОтчета.Раздел5 Цикл
		
		НомерСтраницыСтр = Формат(НомерСтраницы, "ЧГ=0");
		
		НазваниеПоказателя = "Раздел 5, Строка 080, страница № " + НомерСтраницыСтр + ".";
		ЗначениеПоказателя = Страница.Данные[0].Значение.П000500008003;
		СуммаР5Стр080 = СуммаР5Стр080 + ЗначениеПоказателя;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500008003", НазваниеПоказателя,
			ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		НазваниеПоказателя = "Раздел 5, Строка 090, страница № " + НомерСтраницыСтр + ".";
		ЗначениеПоказателя = Страница.Данные[0].Значение.П000500009003;
		СуммаР5Стр090 = СуммаР5Стр090 + ЗначениеПоказателя;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500009003", НазваниеПоказателя,
			ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		Прервать;
		
	КонецЦикла;
	
	ЛеваяЧасть = ЗначениеР1Стр050;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ЛеваяЧастьУсловия = ЗначениеР3Стр210 + ЗначениеР4Стр120 + СуммаР5Стр080 + СуммаР5Стр090 + ЗначениеР6Стр170;
	ЛеваяЧастьУсловияСтр = Формат(ЛеваяЧастьУсловия, "ЧРД=.;ЧН=0");
	ПраваяЧастьУсловия = ЗначениеР3Стр200 + ЗначениеР4Стр130+ ЗначениеР6Стр160;
	ПраваяЧастьУсловияСтр = Формат(ПраваяЧастьУсловия, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = ЛеваяЧастьУсловия - ПраваяЧастьУсловия;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	УсловиеВыполнено = (ЛеваяЧастьУсловия > ПраваяЧастьУсловия);
	
	Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И (ЛеваяЧасть = ПраваяЧасть)) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Завышение суммы НДС, подлежащей возмещению за отчетный период.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173.'"));
		
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЛеваяЧастьУсловияСтр + " - " + ПраваяЧастьУсловияСтр + " Итог [" + ПраваяЧастьСтр + "]"
		", когда " + ЛеваяЧастьУсловияСтр + " >= " + ПраваяЧастьУсловияСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_22(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка Приложения 1 к разделу 8 (КС 1.22)'");
	
	СтруктураРаздела8 = ДанныеРазделов8_12("Раздел8");
	СтруктураРаздела8_Прил1 = ДанныеРазделов8_12("Раздел8_Прил1");
	Если РазделНеЗаполнен(СтруктураРаздела8_Прил1) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем КС.
	ОписаниеКС = "Итоговая сумма налога по книге покупок (строка 005 Приложения 1 к Разделу 8 должна быть равна сумме налога по строке 190 Раздела 8.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 005 Приложения 1 к Разделу 8";
	ЗначениеР8_Прил1 = СтруктураРаздела8_Прил1.СумНДСИтКПк;
	ЗначениеР8_Прил1Стр = Формат(ЗначениеР8_Прил1, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСИтКПк", НазваниеПоказателя,
		ЗначениеР8_Прил1, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 190 Раздела 8";
	ЗначениеР8Стр190 = СтруктураРаздела8.СумНДСВсКПк;
	ЗначениеР8Стр190Стр = Формат(ЗначениеР8Стр190, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПк", НазваниеПоказателя,
		ЗначениеР8Стр190, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = ЗначениеР8_Прил1;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = ЗначениеР8Стр190;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Завышение суммы НДС, подлежащей вычету.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.171, 172, п.2 Раздела IV Приложения 4 к Постановлению № 1137.'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23_1(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 1 к разделу 9 (КС 1.23.1)'");
	
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	Если РазделНеЗаполнен(СтруктураРаздела9_Прил1) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем КС.
	ОписаниеКС = "Итоговая стоимость продаж по книге продаж (строка 020 Приложения 1 к Разделу 9) должна быть равна значению строки 230 Раздела 9.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 020 Приложения 1 к Разделу 9";
	ЗначениеР9_Прил1 = СтруктураРаздела9_Прил1.ИтСтПродКПр18;
	ЗначениеР9_Прил1Стр = Формат(ЗначениеР9_Прил1, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "ИтСтПродКПр18", НазваниеПоказателя,
		ЗначениеР9_Прил1, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 230 Раздела 9";
	ЗначениеР9Стр230 = СтруктураРаздела9.СтПродБезНДС18;
	ЗначениеР9Стр230Стр = Формат(ЗначениеР9Стр230, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтПродБезНДС18", НазваниеПоказателя,
		ЗначениеР9Стр230, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = ЗначениеР9_Прил1;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = ЗначениеР9Стр230;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Занижение суммы НДС, подлежащей уплате в бюджет.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173.'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23_2(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 1 к разделу 9 (КС 1.23.2)'");
	
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	Если РазделНеЗаполнен(СтруктураРаздела9_Прил1) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем КС.
	ОписаниеКС = "Итоговая стоимость продаж по книге продаж (строка 030 Приложения 1 к Разделу 9) должна быть равна значению строки 240 Раздела 9.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 030 Приложения 1 к Разделу 9";
	ЗначениеР9_Прил1 = СтруктураРаздела9_Прил1.ИтСтПродКПр10;
	ЗначениеР9_Прил1Стр = Формат(ЗначениеР9_Прил1, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "ИтСтПродКПр10", НазваниеПоказателя,
		ЗначениеР9_Прил1, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 240 Раздела 9";
	ЗначениеР9 = СтруктураРаздела9.СтПродБезНДС10;
	ЗначениеР9Стр = Формат(ЗначениеР9, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтПродБезНДС10", НазваниеПоказателя,
		ЗначениеР9, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = ЗначениеР9_Прил1;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = ЗначениеР9;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Занижение суммы НДС, подлежащей уплате в бюджет.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173.'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23_3(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 1 разделу 9 (КС 1.23.3)'");
	
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	Если РазделНеЗаполнен(СтруктураРаздела9_Прил1) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем КС.
	ОписаниеКС = "Итоговая стоимость продаж по книге продаж (строка 040 Приложения 1 к Разделу 9) должна быть равна значению строки 250 Раздела 9.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 040 Приложения 1 к Разделу 9";
	ЗначениеР9_Прил1 = СтруктураРаздела9_Прил1.ИтСтПродКПр0;
	ЗначениеР9_Прил1Стр = Формат(ЗначениеР9_Прил1, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "ИтСтПродКПр0", НазваниеПоказателя,
		ЗначениеР9_Прил1, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 250 Раздела 9";
		ЗначениеР9 = СтруктураРаздела9.СтПродБезНДС0;
	ЗначениеР9Стр = Формат(ЗначениеР9, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтПродБезНДС0", НазваниеПоказателя,
		ЗначениеР9, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = ЗначениеР9_Прил1;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = ЗначениеР9;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Занижение суммы НДС, подлежащей уплате в бюджет.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173.'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23_4(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 1 к разделу 9 (КС 1.23.4)'");
	
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	Если РазделНеЗаполнен(СтруктураРаздела9_Прил1) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем КС.
	ОписаниеКС = "Итоговая стоимость продаж по книге продаж (строка 050 Приложения 1 к Разделу 9) должна быть равна значению строки 260 Раздела 9.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 050 Приложения 1 к Разделу 9";
	ЗначениеР9_Прил1 = СтруктураРаздела9_Прил1.СумНДСИтКПр18;
	ЗначениеР9_Прил1Стр = Формат(ЗначениеР9_Прил1, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСИтКПр18", НазваниеПоказателя,
		ЗначениеР9_Прил1, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 260 Раздела 9";
	ЗначениеР9 = СтруктураРаздела9.СумНДСВсКПр18;
	ЗначениеР9Стр = Формат(ЗначениеР9, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПр18", НазваниеПоказателя,
		ЗначениеР9, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = ЗначениеР9_Прил1;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = ЗначениеР9;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Занижение суммы НДС, подлежащей уплате в бюджет.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173.'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23_5(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 1 к разделу 9 (КС 1.23.5)'");
	
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	Если РазделНеЗаполнен(СтруктураРаздела9_Прил1) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем КС.
	ОписаниеКС = "Итоговая стоимость продаж по книге продаж (строка 060 Приложения 1 к Разделу 9) должна быть равна значению строки 270 Раздела 9.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 060 Приложения 1 к Разделу 9";
	ЗначениеР9_Прил1 = СтруктураРаздела9_Прил1.СумНДСИтКПр10;
	ЗначениеР9_Прил1Стр = Формат(ЗначениеР9_Прил1, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСИтКПр10", НазваниеПоказателя,
		ЗначениеР9_Прил1, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 270 Раздела 9";
	ЗначениеР9 = СтруктураРаздела9.СумНДСВсКПр10;
	ЗначениеР9Стр = Формат(ЗначениеР9, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПр10", НазваниеПоказателя,
		ЗначениеР9, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = ЗначениеР9_Прил1;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = ЗначениеР9;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Занижение суммы НДС, подлежащей уплате в бюджет.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173.'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23_6(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 1 к разделу 9 (КС 1.23.6)'");
	
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	Если РазделНеЗаполнен(СтруктураРаздела9_Прил1) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем КС.
	ОписаниеКС = "Итоговая стоимость продаж по книге продаж (строка 070 Приложения 1 к Разделу 9) должна быть равна значению строки 280 Раздела 9.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 070 Приложения 1 к Разделу 9";
	ЗначениеР9_Прил1 = СтруктураРаздела9_Прил1.ИтСтПродОсвКПр;
	ЗначениеР9_Прил1Стр = Формат(ЗначениеР9_Прил1, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "ИтСтПродОсвКПр", НазваниеПоказателя,
		ЗначениеР9_Прил1, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 280 Раздела 9";
	ЗначениеР9 = СтруктураРаздела9.СтПродОсвВсКПр;
	ЗначениеР9Стр = Формат(ЗначениеР9, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтПродОсвВсКПр", НазваниеПоказателя,
		ЗначениеР9, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = ЗначениеР9_Прил1;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = ЗначениеР9;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	Если ЛеваяЧасть > ПраваяЧасть Тогда 
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Занижение суммы НДС, подлежащей уплате в бюджет.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.173.'"));
		
	Иначе
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			НСтр("ru='Нарушено соотношение показателей. Возможна арифметическая ошибка в декларации.'"));
		
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_24(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 12 (КС 1.24)'");
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела12 = ДанныеРазделов8_12("Раздел12");
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, подлежащая уплате в бюджет (строка 030 Раздела 1) должна быть равна сумме строк 070 Раздела 12, когда строка 030 Раздела 1 > 0.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 1, Строка 030";
	ЗначениеР1Стр030 = СтруктураРаздела1.П000100003003;
	ЗначениеР1Стр030Стр = Формат(ЗначениеР1Стр030, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000100003003", НазваниеПоказателя,
		ЗначениеР1Стр030, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 070 Раздела 12";
	ЗначениеР12 = СуммаПоСтроке(СтруктураРаздела12.Строки, "СумНалПокуп",,);
	ЗначениеР12Стр = Формат(ЗначениеР12, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНалПокуп", НазваниеПоказателя,
		ЗначениеР12, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел12", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = ЗначениеР1Стр030;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = ЗначениеР12;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	УсловиеВыполнено = ЛеваяЧасть > 0;
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Занижение суммы НДС, подлежащей уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ п.5 ст. 173.'"));
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр + ", когда " + ЛеваяЧастьСтр + " > 0";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_25(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка суммы НДС, подлежащей возмещению за отчетный период (КС 1.25)'");
	
	СтруктураРаздела1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	СтруктураРаздела8 = ДанныеРазделов8_12("Раздел8");
	СтруктураРаздела8_Прил1 = ДанныеРазделов8_12("Раздел8_Прил1");
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	
	// Проверяем КС.
	ОписаниеКС = "Если сумма налога, исчисленная к возмещению из бюджета (строка 050 Раздела 1) > 0, то должно соблюдаться условие: [строка 190 Раздела 8 + (строка 190 Приложения 1 к Разделу 8 - строка 005 Приложения 1 к Разделу 8) - [строка 260 Раздела 9 + строка 270 Раздела 9] - [сумма строки 200 Раздела 9 + строка 210 Раздела 9, в которых строка 010 = 06] + [строка 340 Приложения 1 к Разделу 9 + строка 350 Приложения 1 к Разделу 9 - строка 050 Приложения 1 к Разделу 9 - строка 060 Приложения 1 к Разделу 9] - [строка строк 280 Приложения 1 к Разделу 9 + строка 290 Приложения 1 к Разделу 9, в которых строка 090 = 06] > 0.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 8, Строка 190";
	Р8Ст190 = СтруктураРаздела8.СумНДСВсКПк;
	Р8Ст190Стр = Формат(Р8Ст190, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПк", НазваниеПоказателя,
		Р8Ст190, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 190 Приложения 1 к Разделу 8";
	Р8_Прил1Ст190 = СтруктураРаздела8_Прил1.СумНДСИтП1Р8;
	Р8_Прил1Ст190Стр = Формат(Р8_Прил1Ст190, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПк", НазваниеПоказателя,
		Р8_Прил1Ст190, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 005 Приложения 1 к Разделу 8";
	Р8_Прил1Ст005 = СтруктураРаздела8_Прил1.СумНДСИтКПк;
	Р8_Прил1Ст005Стр = Формат(Р8_Прил1Ст005, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСИтКПк", НазваниеПоказателя,
		Р8_Прил1Ст005, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 260 Раздела 9";
	Р9Ст260 = СтруктураРаздела9.СумНДСВсКПр18;
	Р9Ст260Стр = Формат(Р9Ст260, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПр18", НазваниеПоказателя,
		Р9Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 270 Раздела 9";
	Р9Ст270 = СтруктураРаздела9.СумНДСВсКПр10;
	Р9Ст270Стр = Формат(Р9Ст270, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПр10", НазваниеПоказателя,
		Р9Ст270, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 200 Раздела 9";
	Р9Ст200 = СуммаПоСтроке(СтруктураРаздела9.Строки, "СумНДССФ18", "КодВидОпер", "06");
	Р9Ст200Стр = Формат(Р9Ст200, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДССФ18", НазваниеПоказателя,
		Р9Ст200, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 210 Раздела 9";
	Р9Ст210 = СуммаПоСтроке(СтруктураРаздела9.Строки, "СумНДССФ10", "КодВидОпер", "06");
	Р9Ст210Стр = Формат(Р9Ст210, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДССФ10", НазваниеПоказателя,
		Р9Ст210, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 340 Приложения 1 к Разделу 9";
	Р9_Прил1Ст340 = СтруктураРаздела9_Прил1.СумНДСВсП1Р9_18;
	Р9_Прил1Ст340Стр = Формат(Р9_Прил1Ст340, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсП1Р9_18", НазваниеПоказателя,
		Р9_Прил1Ст340, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 350 Приложения 1 к Разделу 9";
	Р9_Прил1Ст350 = СтруктураРаздела9_Прил1.СумНДСВсП1Р9_10;
	Р9_Прил1Ст350Стр = Формат(Р9_Прил1Ст350, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсП1Р9_10", НазваниеПоказателя,
		Р9_Прил1Ст350, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 050 Приложения 1 к Разделу 9";
	Р9_Прил1Ст050 = СтруктураРаздела9_Прил1.СумНДСИтКПр18;
	Р9_Прил1Ст050Стр = Формат(Р9_Прил1Ст050, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСИтКПр18", НазваниеПоказателя,
		Р9_Прил1Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 060 Приложения 1 к Разделу 9";
	Р9_Прил1Ст060 = СтруктураРаздела9_Прил1.СумНДСИтКПр10;
	Р9_Прил1Ст060Стр = Формат(Р9_Прил1Ст060, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСИтКПр10", НазваниеПоказателя,
		Р9_Прил1Ст060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 280 Приложения 1 к Разделу 9";
	Р9_Прил1Ст280 = СуммаПоСтроке(СтруктураРаздела9_Прил1.Строки, "СумНДССФ18", "КодВидОпер", "06");
	Р9_Прил1Ст280Стр = Формат(Р9_Прил1Ст280, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДССФ18", НазваниеПоказателя,
		Р9_Прил1Ст280, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 290 Приложения 1 к Разделу 9";
	Р9_Прил1Ст290 = СуммаПоСтроке(СтруктураРаздела9_Прил1.Строки, "СумНДССФ10", "КодВидОпер", "06");
	Р9_Прил1Ст290Стр = Формат(Р9_Прил1Ст290, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДССФ10", НазваниеПоказателя,
		Р9_Прил1Ст290, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = Р8Ст190 + (Р8_Прил1Ст190 - Р8_Прил1Ст005) - (Р9Ст260 + Р9Ст270) - (Р9Ст200 + Р9Ст210)
		+ (Р9_Прил1Ст340 + Р9_Прил1Ст350 - Р9_Прил1Ст050 - Р9_Прил1Ст060) - (Р9_Прил1Ст280 + Р9_Прил1Ст290);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = 0;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	НазваниеПоказателя = "Раздел 1, Строка 050";
	Р1Ст050 = СтруктураРаздела1.П000100005003;
	Р1Ст050Стр = Формат(Р1Ст050, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000100005003", НазваниеПоказателя,
		Р1Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	УсловиеВыполнено = Р1Ст050 > 0;
	
	Если НЕ УсловиеВыполнено Или (УсловиеВыполнено И ЛеваяЧасть > ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Завышение суммы НДС, подлежащей возмещению за отчетный период.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст. 173.'"));
	
	Расшифровка = ЛеваяЧастьСтр + " > " + ПраваяЧастьСтр + ", когда " + Р1Ст050Стр + " > 0";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_26(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка Раздела 2 (КС 1.26)'");
	
	СтруктураРаздела8 = ДанныеРазделов8_12("Раздел8");
	СтруктураРаздела8_Прил1 = ДанныеРазделов8_12("Раздел8_Прил1");
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, подлежащая уплате в бюджет (строка 060 всех листов Раздела 2 должна быть равна [сумма строк 200 и 210 по всем листам раздела 9, в которых строка 010 = 06] + [сумма строк 280 и 290 по всем листам Приложения 1 Раздела 9, в котором строка 090 = 06].";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НомерСтраницы = 1;
	НазваниеСтроки060 = "Сумма налога, исчисленная к уплате в бюджет (строка № 060)";
	СуммаР2Ст060 = 0;
	Для каждого Страница Из мДанныеОтчета.Раздел2 Цикл
		// Зарегистрируем левую часть соотношения.
		СуммаР2Ст060 = СуммаР2Ст060 + Страница.Данные[0].Значение.П000200006003;
		НазваниеПоказателя = СтрЗаменить(НазваниеСтроки060, ")", ", страница № " + НомерСтраницы + ")");
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200006003",
			НазваниеПоказателя, СуммаР2Ст060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
	КонецЦикла;
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 200 Раздела 9";
	Р9Ст200 = СуммаПоСтроке(СтруктураРаздела9.Строки, "СумНДССФ18", "КодВидОпер", "06");
	Р9Ст200Стр = Формат(Р9Ст200, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДССФ18", НазваниеПоказателя,
		Р9Ст200, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 210 Раздела 9";
	Р9Ст210 = СуммаПоСтроке(СтруктураРаздела9.Строки, "СумНДССФ10", "КодВидОпер", "06");
	Р9Ст210Стр = Формат(Р9Ст210, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДССФ10", НазваниеПоказателя,
		Р9Ст210, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 280 Приложения 1 к Разделу 9";
	Р9_Прил1Ст280 = СуммаПоСтроке(СтруктураРаздела9_Прил1.Строки, "СумНДССФ18", "КодВидОпер", "06");
	Р9_Прил1Ст280Стр = Формат(Р9_Прил1Ст280, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДССФ18", НазваниеПоказателя,
		Р9_Прил1Ст280, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 290 Приложения 1 к Разделу 9";
	Р9_Прил1Ст290 = СуммаПоСтроке(СтруктураРаздела9_Прил1.Строки, "СумНДССФ10", "КодВидОпер", "06");
	Р9_Прил1Ст290Стр = Формат(Р9_Прил1Ст290, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДССФ10", НазваниеПоказателя,
		Р9_Прил1Ст290, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = СуммаР2Ст060;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = (Р9Ст200 + Р9Ст210) + (Р9_Прил1Ст280 + Р9_Прил1Ст290);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Расшифровка = ЛеваяЧастьСтр + " = (" + Р9Ст200Стр + " + " + Р9Ст210Стр + ") + (" + Р9_Прил1Ст280Стр + " + " + Р9_Прил1Ст290Стр
		+ ") Итог [" + ПраваяЧастьСтр + "]";
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Занижение суммы НДС, подлежащей уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.161, п. 4 ст. 173.'"));
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_27(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка НДС, исчисленного к уплате в бюджет (КС 1.27)'");
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела4 = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	
	// Проверяем КС.
	ОписаниеКС = "Сумма показателей строки 110 графы 5 Раздела 3, строк 050 и 130 Раздела 6, строки 060 по всем Листам Раздела 2, строки 050 Раздела 4, строки 080 Раздела 4 должна быть равна сумме показателей строк 260 и 270 Раздела 9, строк 340 и 350 Приложения 1 к Разделу 9 за минусом значений в строках 050 и 060 Приложения 1 к Разделу 9.";
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 3, Строка 110, Графа 5";
	Р3Ст110 = СтруктураРаздела3.П000300011005;
	Р3Ст110Стр = Формат(Р3Ст110, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300011005", НазваниеПоказателя,
		Р3Ст110, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 6, Строка 050, Графа 3";
	Р6Ст050 = СтруктураРаздела6.П000600005003;
	Р6Ст050Стр = Формат(Р6Ст050, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600005003", НазваниеПоказателя,
		Р6Ст050Стр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 6, Строка 130, Графа 3";
	Р6Ст130 = СтруктураРаздела6.П000600013003;
	Р6Ст130Стр = Формат(Р6Ст130, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600013003", НазваниеПоказателя,
		Р6Ст130Стр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	СуммаР2Ст060 = 0;
	НазваниеСтроки060 = "Сумма налога, исчисленная к уплате в бюджет (строка № 060)";
	НомерСтраницы = 1;
	Для каждого Страница Из мДанныеОтчета.Раздел2 Цикл
		ЗначениеСтроки060 = Страница.Данные[0].Значение.П000200006003;
		НазваниеПоказателя = СтрЗаменить(НазваниеСтроки060, ")", ", страница № " + НомерСтраницы + ")");
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000200006003",
			НазваниеПоказателя, ЗначениеСтроки060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		СуммаР2Ст060 = СуммаР2Ст060 + ЗначениеСтроки060;
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	СуммаР2Ст060Стр = Формат(СуммаР2Ст060, "ЧРД=.;ЧН=0");
	
	СуммаР4Ст50 = 0;
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П00040000");
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000400005003_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 4, строка № " + НомСтрСтр + ", графа 3";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			СтруктураРаздела4[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
		СуммаР4Ст50 = СуммаР4Ст50 + СтруктураРаздела4[ИмяПоказателя];
		
	КонецЦикла;
	СуммаР4Ст50Стр = Формат(СуммаР4Ст50, "ЧРД=.;ЧН=0");
	
	НазваниеПоказателя = "Раздел 4, Строка 080";
	Р4Ст080 = СтруктураРаздела4.П000400008003;
	Р4Ст080Стр = Формат(Р4Ст080, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000400012003", НазваниеПоказателя,
		Р4Ст080Стр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 260 Раздела 9";
	Р9Ст260 = СтруктураРаздела9.СумНДСВсКПр18;
	Р9Ст260Стр = Формат(Р9Ст260, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПр18", НазваниеПоказателя,
		Р9Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 270 Раздела 9";
	Р9Ст270 = СтруктураРаздела9.СумНДСВсКПр10;
	Р9Ст270Стр = Формат(Р9Ст270, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПр10", НазваниеПоказателя,
		Р9Ст270, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 340 Приложения 1 к Разделу 9";
	Р9_Прил1Ст340 = СтруктураРаздела9_Прил1.СумНДСВсП1Р9_18;
	Р9_Прил1Ст340Стр = Формат(Р9_Прил1Ст340, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсП1Р9_18", НазваниеПоказателя,
		Р9_Прил1Ст340, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 350 Приложения 1 к Разделу 9";
	Р9_Прил1Ст350 = СтруктураРаздела9_Прил1.СумНДСВсП1Р9_10;
	Р9_Прил1Ст350Стр = Формат(Р9_Прил1Ст350, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсП1Р9_10", НазваниеПоказателя,
		Р9_Прил1Ст350, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 050 Приложения 1 к Разделу 9";
	Р9_Прил1Ст050 = СтруктураРаздела9_Прил1.СумНДСИтКПр18;
	Р9_Прил1Ст050Стр = Формат(Р9_Прил1Ст050, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСИтКПр18", НазваниеПоказателя,
		Р9_Прил1Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 060 Приложения 1 к Разделу 9";
	Р9_Прил1Ст060 = СтруктураРаздела9_Прил1.СумНДСИтКПр10;
	Р9_Прил1Ст060Стр = Формат(Р9_Прил1Ст060, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСИтКПр10", НазваниеПоказателя,
		Р9_Прил1Ст060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = Р3Ст110 + Р6Ст050 + Р6Ст130 + СуммаР2Ст060 + СуммаР4Ст50 + Р4Ст080;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = Р9Ст260 + Р9Ст270 + Р9_Прил1Ст340 + Р9_Прил1Ст350 - Р9_Прил1Ст050 - Р9_Прил1Ст060;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если КССучетомОтклонения(ЛеваяЧасть, ПраваяЧасть, 1) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Занижение суммы НДС, исчисленного к уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.153, 161, 164, 165, 166, 167, 173.'"));
	
	Расшифровка = Р3Ст110Стр + " + " + Р6Ст050Стр + " + " + Р6Ст130Стр + " + " + СуммаР2Ст060Стр + " + " + СуммаР4Ст50Стр + " + " + Р4Ст080Стр
		+ " Итог [" + ЛеваяЧастьСтр + "] = " + Р9Ст260Стр + " + " + Р9Ст270Стр + " + " + Р9_Прил1Ст340Стр + " + " + Р9_Прил1Ст350Стр
		+ " - " + Р9_Прил1Ст050Стр + " - " + Р9_Прил1Ст060Стр + " Итог [" + ПраваяЧастьСтр + " ± 1]";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	СтруктураОшибок.Вставить("Комментарий" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможна погрешность в результате округления показателей.'"));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_28(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка суммы НДС, подлежащей вычету (КС 1.28)'");
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела4 = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	СтруктураРаздела8 = ДанныеРазделов8_12("Раздел8");
	СтруктураРаздела8_Прил1 = ДанныеРазделов8_12("Раздел8_Прил1");
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	
	// Проверяем КС.
	ОписаниеКС = "Сумма показателей строки 190 Раздела 3, строк 030 и 040 Раздела 4, строк 080 и 090 Раздела 5, строки 060 Раздела 6, строки 090 Раздела 6, строки 150 Раздела 6 должна быть равна сумме строки 190 Раздела 8 и разницы значений строки 190 Приложения 1 к Разделу 8 и строки 005 Приложения 1 к Разделу 8.";
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 3, Строка 190, Графа 5";
	Р3Ст190 = СтруктураРаздела3.П000300019003;
	Р3Ст190Стр = Формат(Р3Ст190, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300019003", НазваниеПоказателя,
		Р3Ст190, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
	СуммаР4Ст030 = 0;
	СуммаР4Ст040 = 0;
	КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, "П00040000");
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		НомСтрСтр = Формат(Инд, "ЧГ=0");
		ИмяПоказателя = "П000400003003_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 4, строка № " + НомСтрСтр + ", графа 3";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			СтруктураРаздела4[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
		СуммаР4Ст030 = СуммаР4Ст030 + СтруктураРаздела4[ИмяПоказателя];
		
		ИмяПоказателя = "П000400004003_" + НомСтрСтр;
		НазваниеПоказателя = "Раздел 4, строка № " + НомСтрСтр + ", графа 3";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			СтруктураРаздела4[ИмяПоказателя], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел4", Неопределено, , СчетчикФормулДляРасшифровок);
		СуммаР4Ст040 = СуммаР4Ст040 + СтруктураРаздела4[ИмяПоказателя];
		
	КонецЦикла;
	СуммаР4Ст030Стр = Формат(СуммаР4Ст030, "ЧРД=.;ЧН=0");
	СуммаР4Ст040Стр = Формат(СуммаР4Ст040, "ЧРД=.;ЧН=0");
	
	СуммаР5Ст080 = 0;
	СуммаР5Ст090 = 0;
	
	НомерСтраницы = 1;
	
	Для каждого Страница Из мДанныеОтчета.Раздел5 Цикл
		
		НомерСтраницыСтр = Формат(НомерСтраницы, "ЧГ=0");
		
		НазваниеПоказателя = "Раздел 5, Строка 080, страница № " + НомерСтраницыСтр + ".";
		ЗначениеПоказателя = Страница.Данные[0].Значение.П000500008003;
		СуммаР5Ст080 = СуммаР5Ст080 + ЗначениеПоказателя;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500008003", НазваниеПоказателя,
			ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		НазваниеПоказателя = "Раздел 5, Строка 090, страница № " + НомерСтраницыСтр + ".";
		ЗначениеПоказателя = Страница.Данные[0].Значение.П000500009003;
		СуммаР5Ст090 = СуммаР5Ст090 + ЗначениеПоказателя;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000500009003", НазваниеПоказателя,
			ЗначениеПоказателя, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел5", Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		НомерСтраницы = НомерСтраницы + 1;
		Прервать;
		
	КонецЦикла;
	СуммаР5Ст080Стр = Формат(СуммаР5Ст080, "ЧРД=.;ЧН=0");
	СуммаР5Ст090Стр = Формат(СуммаР5Ст090, "ЧРД=.;ЧН=0");
	
	НазваниеПоказателя = "Раздел 6, Строка 060, Графа 3";
	Р6Ст060 = СтруктураРаздела6.П000600006003;
	Р6Ст060Стр = Формат(Р6Ст060, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600006003", НазваниеПоказателя,
		Р6Ст060Стр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 6, Строка 090, Графа 3";
	Р6Ст090 = СтруктураРаздела6.П000600009003;
	Р6Ст090Стр = Формат(Р6Ст090, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600009003", НазваниеПоказателя,
		Р6Ст090Стр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Раздел 6, Строка 150, Графа 3";
	Р6Ст150 = СтруктураРаздела6.П000600015003;
	Р6Ст150Стр = Формат(Р6Ст150, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000600015003", НазваниеПоказателя,
		Р6Ст150Стр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел6", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 190 Раздела 8";
	Р8Ст190 = СтруктураРаздела8.СумНДСВсКПк;
	Р8Ст190Стр = Формат(Р8Ст190, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПк", НазваниеПоказателя,
		Р8Ст190, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 190 Приложения 1 к Разделу 8";
	Р8_Прил1Ст190 = СтруктураРаздела8_Прил1.СумНДСИтП1Р8;
	Р8_Прил1Ст190Стр = Формат(Р8_Прил1Ст190, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПк", НазваниеПоказателя,
		Р8_Прил1Ст190, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
		
	НазваниеПоказателя = "Строка 005 Приложения 1 к Разделу 8";
	Р8_Прил1Ст005 = СтруктураРаздела8_Прил1.СумНДСИтКПк;
	Р8_Прил1Ст005Стр = Формат(Р8_Прил1Ст005, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСИтКПк", НазваниеПоказателя,
		Р8_Прил1Ст005, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = Р3Ст190 + СуммаР4Ст030 + СуммаР4Ст040 + СуммаР5Ст080 + СуммаР5Ст090 + Р6Ст060 + Р6Ст090 + Р6Ст150;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = Р8Ст190 + (Р8_Прил1Ст190 - Р8_Прил1Ст005);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если КССучетомОтклонения(ЛеваяЧасть, ПраваяЧасть, 1) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Завышение суммы НДС, подлежащей вычету.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.171, 172.'"));
	
	Расшифровка = Р3Ст190Стр + " + " + СуммаР4Ст030Стр + " + " + СуммаР4Ст040Стр + " + " + СуммаР5Ст080Стр + " + "
		+ СуммаР5Ст090Стр + " + " + Р6Ст060Стр + " + " + Р6Ст090Стр + " + " + Р6Ст150Стр + " Итог [" + ЛеваяЧастьСтр + "] = "
		+ Р8Ст190Стр + " + (" + Р8_Прил1Ст190Стр + " - " + Р8_Прил1Ст005 + ") Итог [" + ПраваяЧастьСтр + " ± 1]";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	СтруктураОшибок.Вставить("Комментарий" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможна погрешность в результате округления показателей.'"));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_29(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка Раздела 3 (КС 1.29)'");
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела8 = ДанныеРазделов8_12("Раздел8");
	СтруктураРаздела8_Прил1 = ДанныеРазделов8_12("Раздел8_Прил1");
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, уплаченная налогоплательщиком таможенным органам при ввозе товаров на территорию РФ в строке 150 Раздела 3 должна быть равна сумме значений по строке 180 по листам Раздела 8, в которых строка 010 Раздела 8 = 20 и сумме значений по строке 180 по листам Приложения 1 к Разделу 8, в которых строка 010 = 20.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 3, Строка 150, Графа 3";
	Р3Ст150 = СтруктураРаздела3.П000300015003;
	Р3Ст150Стр = Формат(Р3Ст150, "ЧРД=.;ЧН=0");
	//Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300015003", НазваниеПоказателя,
		Р3Ст150, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 180 Раздела 8";
	Р8Ст180 = СуммаПоСтроке(СтруктураРаздела8.Строки, "СумНДСВыч", "КодВидОпер", "20");
	Р8Ст180Стр = Формат(Р8Ст180, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВыч", НазваниеПоказателя,
		Р8Ст180, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 180 Приложения 1 к Разделу 8";
	Р8_Прил1Ст180 = СуммаПоСтроке(СтруктураРаздела8_Прил1.Строки, "СумНДС", "КодВидОпер", "20");
	Р8_Прил1Ст180Стр = Формат(Р8_Прил1Ст180, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДС", НазваниеПоказателя,
		Р8_Прил1Ст180, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = Р3Ст150;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = Р8Ст180 + Р8_Прил1Ст180;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Завышение суммы НДС, подлежащей вычету.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст. 171, 172.'"));
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_30(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка Раздела 3 (КС 1.30)'");
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела8 = ДанныеРазделов8_12("Раздел8");
	СтруктураРаздела8_Прил1 = ДанныеРазделов8_12("Раздел8_Прил1");
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, уплаченная налогоплательщиком налоговым органам при ввозе товаров в строке 160 Раздела 3 должна быть равна сумме значений по строке 180 по листам Раздела 8, в которых строка 010 Раздела 8 = 19 и сумме значений по строке 180 по листам Приложения 1 к Разделу 8, в которых строка 010 = 19.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 3, Строка 160, Графа 3";
	Р3Ст160 = СтруктураРаздела3.П000300016003;
	Р3Ст160Стр = Формат(Р3Ст160, "ЧРД=.;ЧН=0");
	//Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300016003", НазваниеПоказателя,
		Р3Ст160, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 180 Раздела 8";
	Р8Ст180 = СуммаПоСтроке(СтруктураРаздела8.Строки, "СумНДСВыч", "КодВидОпер", "19");
	Р8Ст180Стр = Формат(Р8Ст180, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВыч", НазваниеПоказателя,
		Р8Ст180, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 180 Приложения 1 к Разделу 8";
	Р8_Прил1Ст180 = СуммаПоСтроке(СтруктураРаздела8_Прил1.Строки, "СумНДС", "КодВидОпер", "19");
	Р8_Прил1Ст180Стр = Формат(Р8_Прил1Ст180, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДС", НазваниеПоказателя,
		Р8_Прил1Ст180, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = Р3Ст160;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = Р8Ст180 + Р8_Прил1Ст180;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Завышение суммы НДС, подлежащей вычету в связи с ввозом товаров на таможенную территорию ТС.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ п.1 ст.153, ст.171, 172, Протокол р.III.'"));
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_31(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка Раздела 3 (КС 1.31)'");
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела8 = ДанныеРазделов8_12("Раздел8");
	СтруктураРаздела8_Прил1 = ДанныеРазделов8_12("Раздел8_Прил1");
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, уплаченная в бюджет (Раздел 3 строка 180 графа 3) должна быть равна сумме значений по строке 180 по листам Раздела 8, в которых строка 010 Раздела 8 = 06 и сумме значений по строке 180 по листам Приложения 1 к Разделу 8, в которых строка 010 = 06.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Раздел 3, Строка 180, Графа 3";
	Р3Ст180 = СтруктураРаздела3.П000300018003;
	Р3Ст180Стр = Формат(Р3Ст180, "ЧРД=.;ЧН=0");
	//Расшифровка = Расшифровка + " + " + ЗначениеПоказателяСтр;
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000300018003", НазваниеПоказателя,
		Р3Ст180, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 180 Раздела 8";
	Р8Ст180 = СуммаПоСтроке(СтруктураРаздела8.Строки, "СумНДСВыч", "КодВидОпер", "06");
	Р8Ст180Стр = Формат(Р8Ст180, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВыч", НазваниеПоказателя,
		Р8Ст180, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 180 Приложения 1 к Разделу 8";
	Р8_Прил1Ст180 = СуммаПоСтроке(СтруктураРаздела8_Прил1.Строки, "СумНДС", "КодВидОпер", "06");
	Р8_Прил1Ст180Стр = Формат(Р8_Прил1Ст180, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДС", НазваниеПоказателя,
		Р8_Прил1Ст180, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = Р3Ст180;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = Р8Ст180 + Р8_Прил1Ст180;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Завышение суммы НДС, подлежащей вычету.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.161, 171, 172.'"));
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_32(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка Раздела 8 (КС 1.32)'");
	
	СтруктураРаздела8 = ДанныеРазделов8_12("Раздел8");
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога по счету-фактуре в строке 180 Раздела 8 должна быть равна значению строки 190 на последней странице Раздела 8.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 180 Раздела 8";
	Р8Ст180 = СуммаПоСтроке(СтруктураРаздела8.Строки, "СумНДСВыч");
	Р8Ст180Стр = Формат(Р8Ст180, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВыч", НазваниеПоказателя,
		Р8Ст180, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	
	ЛеваяЧасть = Р8Ст180;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	НазваниеПоказателя = "Строка 190 Раздела 8";
	Р8Ст190 = СтруктураРаздела8.СумНДСВсКПк;
	Р8Ст190Стр = Формат(Р8Ст190, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПк", НазваниеПоказателя,
		Р8Ст190, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = Р8Ст190;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможно завышение суммы НДС, подлежащей вычету.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='НК РФ ст.171, 172, п.7 Раздела II Приложения 4 к Постановлению № 1137.'"));
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_33(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 1 к разделу 8 (КС 1.33)'");
	
	СтруктураРаздела3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	СтруктураРаздела4 = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	СтруктураРаздела6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	СтруктураРаздела8_Прил1 = ДанныеРазделов8_12("Раздел8_Прил1");
	Если РазделНеЗаполнен(СтруктураРаздела8_Прил1) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма показателей по строке 005 Приложения 1 к Разделу 8 и строке 180 Приложения 1 к Разделу 8 должна быть равна значению строки 190 Приложения 1 к Разделу 8.";
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 005 Приложения 1 к Разделу 8";
	Р8_Прил1Ст005 = СтруктураРаздела8_Прил1.СумНДСИтКПк;
	Р8_Прил1Ст005Стр = Формат(Р8_Прил1Ст005, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСИтКПк", НазваниеПоказателя,
		Р8_Прил1Ст005, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 180 Приложения 1 к Разделу 8";
	Р8_Прил1Ст180 = СуммаПоСтроке(СтруктураРаздела8_Прил1.Строки, "СумНДС");
	Р8_Прил1Ст180Стр = Формат(Р8_Прил1Ст180, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДС", НазваниеПоказателя,
		Р8_Прил1Ст180, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	НазваниеПоказателя = "Строка 190 Приложения 1 к Разделу 8";
	Р8_Прил1Ст190 = СтруктураРаздела8_Прил1.СумНДСИтП1Р8;
	Р8_Прил1Ст190Стр = Формат(Р8_Прил1Ст190, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПк", НазваниеПоказателя,
		Р8_Прил1Ст190, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел8_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = Р8_Прил1Ст005 + Р8_Прил1Ст180;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	ПраваяЧасть = Р8_Прил1Ст190;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Завышение суммы НДС, подлежащей вычету.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.171, 172.'"));
	
	Расшифровка = Р8_Прил1Ст005Стр + " + " + Р8_Прил1Ст180Стр + " + " + " Итог [" + ЛеваяЧастьСтр + "] = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_34(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка Раздела 9 (КС 1.34)'");
	
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	
	// Проверяем КС.
	ОписаниеКС = "Стоимость продаж, облагаемых налогом по ставке 18% по строке 170 Раздела 9 должна быть равна значению строки 230 Раздела 9 на последней странице.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
		НазваниеПоказателя = "Строка 170 Раздела 9";
	Р9Ст170 = СуммаПоСтроке(СтруктураРаздела9.Строки, "СтоимПродСФ18");
	Р9Ст170Стр = Формат(Р9Ст170, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтоимПродСФ18", НазваниеПоказателя,
		Р9Ст170, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	
	ЛеваяЧасть = Р9Ст170;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	НазваниеПоказателя = "Строка 230 Раздела 9";
	Р9Ст230 = СтруктураРаздела9.СтПродБезНДС18;
	Р9Ст230Стр = Формат(Р9Ст230, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтПродБезНДС18", НазваниеПоказателя,
		Р9Ст230, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = Р9Ст230;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможно занижение суммы НДС, исчисленного к уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.153, 173, п.8 Раздела II  Приложения 5 к Постановлению № 1137.'"));
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_35(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка Раздела 9 (КС 1.35)'");
	
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	
	// Проверяем КС.
	ОписаниеКС = "Стоимость продаж, облагаемых налогом по ставке 10% по строке 180 Раздела 9 должна быть равна значению строки 240 Раздела 9 на последней странице.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 180 Раздела 9";
	Р9Ст180 = СуммаПоСтроке(СтруктураРаздела9.Строки, "СтоимПродСФ10");
	Р9Ст180Стр = Формат(Р9Ст180, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтоимПродСФ10", НазваниеПоказателя,
		Р9Ст180, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	
	ЛеваяЧасть = Р9Ст180;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	НазваниеПоказателя = "Строка 240 Раздела 9";
	Р9Ст240 = СтруктураРаздела9.СтПродБезНДС10;
	Р9Ст240Стр = Формат(Р9Ст240, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтПродБезНДС10", НазваниеПоказателя,
		Р9Ст240, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = Р9Ст240;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможно занижение суммы НДС, исчисленного к уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.153, 173, п.3 Раздела IV  Приложения 5 к Постановлению № 1137.'"));
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_36(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка Раздела 9 (КС 1.36)'");
	
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	
	// Проверяем КС.
	ОписаниеКС = "Стоимость продаж, облагаемых налогом по ставке 0% по строке 190 Раздела 9 должна быть равна значению строки 250 Раздела 9 на последней странице.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 190 Раздела 9";
	Р9Ст190 = СуммаПоСтроке(СтруктураРаздела9.Строки, "СтоимПродСФ0");
	Р9Ст190Стр = Формат(Р9Ст190, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтоимПродСФ0", НазваниеПоказателя,
		Р9Ст190, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	
	ЛеваяЧасть = Р9Ст190;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	НазваниеПоказателя = "Строка 250 Раздела 9";
	Р9Ст250 = СтруктураРаздела9.СтПродБезНДС0;
	Р9Ст250Стр = Формат(Р9Ст250, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтПродБезНДС0", НазваниеПоказателя,
		Р9Ст250, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = Р9Ст250;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможно занижение исчисленной суммы НДС, вследствие неполного отражения НБ либо неверное применение ставки по НДС.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.164, 165, 167, 173.'"));
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_37(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка Раздела 9 (КС 1.37)'");
	
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога по строке 200 Раздела 9 должна быть равна значению строки 260 Раздела 9 на последней странице.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 200 Раздела 9";
	Р9Ст200 = СуммаПоСтроке(СтруктураРаздела9.Строки, "СумНДССФ18");
	Р9Ст200Стр = Формат(Р9Ст200, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДССФ18", НазваниеПоказателя,
		Р9Ст200, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	
	ЛеваяЧасть = Р9Ст200;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	НазваниеПоказателя = "Строка 260 Раздела 9";
	Р9Ст260 = СтруктураРаздела9.СумНДСВсКПр18;
	Р9Ст260Стр = Формат(Р9Ст260, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПр18", НазваниеПоказателя,
		Р9Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = Р9Ст260;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможно занижение суммы НДС, исчисленного к уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.153, 173, п.3 Раздела IV  Приложения 5 к Постановлению № 1137.'"));
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_38(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка Раздела 9 (КС 1.38)'");
	
	СтруктураРаздела9 = ДанныеРазделов8_12("Раздел9");
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога по строке 210 Раздела 9 должна быть равна значению строки 270 Раздела 9 на последней странице.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 210 Раздела 9";
	Р9Ст210 = СуммаПоСтроке(СтруктураРаздела9.Строки, "СумНДССФ10");
	Р9Ст210Стр = Формат(Р9Ст210, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДССФ10", НазваниеПоказателя,
		Р9Ст210, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть условия.
	
	ЛеваяЧасть = Р9Ст210;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	НазваниеПоказателя = "Строка 270 Раздела 9";
	Р9Ст270 = СтруктураРаздела9.СумНДСВсКПр10;
	Р9Ст270Стр = Формат(Р9Ст270, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсКПр10", НазваниеПоказателя,
		Р9Ст270, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = Р9Ст270;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможно занижение суммы НДС, исчисленного к уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.153, 173, п.3 Раздела IV  Приложения 5 к Постановлению № 1137.'"));
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_39(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 1 к разделу 9 (КС 1.39)'");
	
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	Если РазделНеЗаполнен(СтруктураРаздела9_Прил1) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма показателей по строке 020 Приложения 1 к Разделу 9 и строке 250 Приложения 1 к Разделу 9 должна быть равна значению строки 310 Приложения 1 к Разделу 9.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 020 Приложения 1 к Разделу 9";
	Р9П1Ст020 = СтруктураРаздела9_Прил1.ИтСтПродКПр18;
	Р9П1Ст020Стр = Формат(Р9П1Ст020, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "ИтСтПродКПр18", НазваниеПоказателя,
		Р9П1Ст020, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
		
	НазваниеПоказателя = "Строка 250 Приложения 1 к Разделу 9";
	Р9П1Ст250 = СуммаПоСтроке(СтруктураРаздела9_Прил1.Строки, "СтоимПродСФ18");
	Р9П1Ст250Стр = Формат(Р9П1Ст250, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтоимПродСФ18", НазваниеПоказателя,
		Р9П1Ст250, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = Р9П1Ст020 + Р9П1Ст250;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть условия.
	
	НазваниеПоказателя = "Строка 310 Приложения 1 к Разделу 9";
	Р9П1Ст310 = СтруктураРаздела9_Прил1.СтПродВсП1Р9_18;
	Р9П1Ст310Стр = Формат(Р9П1Ст310, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтПродВсП1Р9_18", НазваниеПоказателя,
		Р9П1Ст310, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = Р9П1Ст310;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможно занижение суммы НДС, исчисленного к уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='НК РФ ст.153, 173, п.3 Раздела IV  Приложения 5 к Постановлению № 1137.'"));
	
	Расшифровка = Р9П1Ст020Стр + " + " + Р9П1Ст250Стр + " Итог [" + ЛеваяЧастьСтр + "] = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	СтруктураОшибок.Вставить("Комментарий" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможна погрешность в результате округления показателей.'"));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_40(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 1 к разделу 9 (КС 1.40)'");
	
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	Если РазделНеЗаполнен(СтруктураРаздела9_Прил1) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма показателей по строке 030 Приложения 1 к Разделу 9 и строке 260 Приложения 1 к Разделу 9 должна быть равна значению строки 320 Приложения 1 к Разделу 9.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 030 Приложения 1 к Разделу 9";
	Р9П1Ст030 = СтруктураРаздела9_Прил1.ИтСтПродКПр10;
	Р9П1Ст030Стр = Формат(Р9П1Ст030, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "ИтСтПродКПр10", НазваниеПоказателя,
		Р9П1Ст030, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
		
	НазваниеПоказателя = "Строка 260 Приложения 1 к Разделу 9";
	Р9П1Ст260 = СуммаПоСтроке(СтруктураРаздела9_Прил1.Строки, "СтоимПродСФ10");
	Р9П1Ст260Стр = Формат(Р9П1Ст260, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтоимПродСФ10", НазваниеПоказателя,
		Р9П1Ст260, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = Р9П1Ст030 + Р9П1Ст260;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть условия.
	
	НазваниеПоказателя = "Строка 320 Приложения 1 к Разделу 9";
	Р9П1Ст320 = СтруктураРаздела9_Прил1.СтПродВсП1Р9_10;
	Р9П1Ст320Стр = Формат(Р9П1Ст320, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтПродВсП1Р9_10", НазваниеПоказателя,
		Р9П1Ст320, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = Р9П1Ст320;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможно занижение суммы НДС, исчисленного к уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.153, 173, п.3 Раздела IV  Приложения 5 к Постановлению № 1137.'"));
	
	Расшифровка = Р9П1Ст030Стр + " + " + Р9П1Ст260Стр + " Итог [" + ЛеваяЧастьСтр + "] = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	СтруктураОшибок.Вставить("Комментарий" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможна погрешность в результате округления показателей.'"));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_41(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 1 к разделу 9 (КС 1.41)'");
	
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	Если РазделНеЗаполнен(СтруктураРаздела9_Прил1) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма показателей по строке 040 Приложения 1 к Разделу 9 и строке 270 Приложения 1 к Разделу 9 должна быть равна значению строки 330 Приложения 1 к Разделу 9.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 040 Приложения 1 к Разделу 9";
	Р9П1Ст040 = СтруктураРаздела9_Прил1.ИтСтПродКПр0;
	Р9П1Ст040Стр = Формат(Р9П1Ст040, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "ИтСтПродКПр10", НазваниеПоказателя,
		Р9П1Ст040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
		
	НазваниеПоказателя = "Строка 270 Приложения 1 к Разделу 9";
	Р9П1Ст270 = СуммаПоСтроке(СтруктураРаздела9_Прил1.Строки, "СтоимПродСФ0");
	Р9П1Ст270Стр = Формат(Р9П1Ст270, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтоимПродСФ0", НазваниеПоказателя,
		Р9П1Ст270, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = Р9П1Ст040 + Р9П1Ст270;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть условия.
	
	НазваниеПоказателя = "Строка 330 Приложения 1 к Разделу 9";
	Р9П1Ст330 = СтруктураРаздела9_Прил1.СтПродВсП1Р9_0;
	Р9П1Ст330Стр = Формат(Р9П1Ст330, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтПродВсП1Р9_0", НазваниеПоказателя,
		Р9П1Ст330, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = Р9П1Ст330;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможно занижение исчисленной суммы НДС, вследствие неполного отражения НБ либо неверное применение ставки по НДС.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='НК РФ ст.164, 165, 167, 173.'"));
	
	Расшифровка = Р9П1Ст040Стр + " + " + Р9П1Ст270Стр + " Итог [" + ЛеваяЧастьСтр + "] = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_42(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 1 к разделу 9 (КС 1.42)'");
	
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	Если РазделНеЗаполнен(СтруктураРаздела9_Прил1) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем КС.
	ОписаниеКС = "Сумма показателей по строке 050 Приложения 1 к Разделу 9 и строке 280 Приложения 1 к Разделу 9 должна быть равна значению строки 340 Приложения 1 к Разделу 9.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 050 Приложения 1 к Разделу 9";
	Р9П1Ст050 = СтруктураРаздела9_Прил1.СумНДСИтКПр18;
	Р9П1Ст050Стр = Формат(Р9П1Ст050, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСИтКПр18", НазваниеПоказателя,
		Р9П1Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
		
	НазваниеПоказателя = "Строка 280 Приложения 1 к Разделу 9";
	Р9П1Ст280 = СуммаПоСтроке(СтруктураРаздела9_Прил1.Строки, "СумНДССФ18");
	Р9П1Ст280Стр = Формат(Р9П1Ст280, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДССФ18", НазваниеПоказателя,
		Р9П1Ст280, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = Р9П1Ст050 + Р9П1Ст280;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть условия.
	
	НазваниеПоказателя = "Строка 340 Приложения 1 к Разделу 9";
	Р9П1Ст340 = СтруктураРаздела9_Прил1.СумНДСВсП1Р9_18;
	Р9П1Ст340Стр = Формат(Р9П1Ст340, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсП1Р9_18", НазваниеПоказателя,
		Р9П1Ст340, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = Р9П1Ст340;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможно занижение суммы НДС, исчисленного к уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='НК РФ ст.153, 173, п.3 Раздела IV  Приложения 5 к Постановлению № 1137.'"));
	
	Расшифровка = Р9П1Ст050Стр + " + " + Р9П1Ст280Стр + " Итог [" + ЛеваяЧастьСтр + "] = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_43(СтруктураРезультата)
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка приложения 1 к разделу 9 (КС 1.43)'");
	
	СтруктураРаздела9_Прил1 = ДанныеРазделов8_12("Раздел9_Прил1");
	
	// Проверяем КС.
	ОписаниеКС = "Сумма показателей по строке 060 Приложения 1 к Разделу 9 и строке 290 Приложения 1 к Разделу 9 должна быть равна значению строки 350 Приложения 1 к Разделу 9.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 060 Приложения 1 к Разделу 9";
	Р9П1Ст060 = СтруктураРаздела9_Прил1.СумНДСИтКПр10;
	Р9П1Ст060Стр = Формат(Р9П1Ст060, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСИтКПр10", НазваниеПоказателя,
		Р9П1Ст060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
		
	НазваниеПоказателя = "Строка 290 Приложения 1 к Разделу 9";
	Р9П1Ст290 = СуммаПоСтроке(СтруктураРаздела9_Прил1.Строки, "СумНДССФ10");
	Р9П1Ст290Стр = Формат(Р9П1Ст290, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДССФ10", НазваниеПоказателя,
		Р9П1Ст290, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9_Прил1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = Р9П1Ст060 + Р9П1Ст290;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть условия.
	
	НазваниеПоказателя = "Строка 350 Приложения 1 к Разделу 9";
	Р9П1Ст350 = СтруктураРаздела9_Прил1.СумНДСВсП1Р9_10;
	Р9П1Ст350Стр = Формат(Р9П1Ст350, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНДСВсП1Р9_10", НазваниеПоказателя,
		Р9П1Ст350, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = Р9П1Ст350;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможно занижение суммы НДС, исчисленного к уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='НК РФ ст.153, 173, п.3 Раздела IV  Приложения 5 к Постановлению № 1137.'"));
	
	Расшифровка = Р9П1Ст060Стр + " + " + Р9П1Ст290Стр + " Итог [" + ЛеваяЧастьСтр + "] = " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	СтруктураОшибок.Вставить("Комментарий" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Возможна погрешность в результате округления показателей.'"));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_44(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = НСтр("ru='Проверка раздела 12 (КС 1.44)'");
	
	СтруктураРаздела12 = ДанныеРазделов8_12("Раздел12");
	
	// Проверяем КС.
	ОписаниеКС = "Сумма налога, предьявляемая покупателю (строка 070 Раздела 12) должна быть равна разнице значений строк 080 и 060 Раздела 12.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	НазваниеПоказателя = "Строка 070 Раздела 12";
	Р12Ст070 = СуммаПоСтроке(СтруктураРаздела12.Строки, "СумНалПокуп",,);
	Р12Ст070Стр = Формат(Р12Ст070, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СумНалПокуп", НазваниеПоказателя,
		Р12Ст070, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел12", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧасть = Р12Ст070;
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	
	// Зарегистрируем правую часть условия.
	НазваниеПоказателя = "Строка 080 Раздела 12";
	Р12Ст080 = СуммаПоСтроке(СтруктураРаздела12.Строки, "СтоимТовСНалВс",,);
	Р12Ст080Стр = Формат(Р12Ст080, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтоимТовСНалВс", НазваниеПоказателя,
		Р12Ст080, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел12", Неопределено, , СчетчикФормулДляРасшифровок);
		
	НазваниеПоказателя = "Строка 060 Раздела 12";
	Р12Ст060 = СуммаПоСтроке(СтруктураРаздела12.Строки, "СтоимТовБНалВс",,);
	Р12Ст060Стр = Формат(Р12Ст060, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СтоимТовБНалВс", НазваниеПоказателя,
		Р12Ст060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел12", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = Р12Ст080 - Р12Ст060;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='Занижение суммы НДС, подлежащей уплате в бюджет.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		НСтр("ru='НК РФ ст. 173.'"));
	
	Расшифровка = ЛеваяЧастьСтр + " = " + Р12Ст080Стр + " - " + Р12Ст060Стр + " Итог [" + ПраваяЧастьСтр + "]";
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеРазделов8_12(ИмяСтраницы)
	
	Если ИмяСтраницы = "Раздел8" Тогда
		ПараметрыРаздела = Новый Структура("СумНДСВсКПк, Строки", 0);
		
	ИначеЕсли ИмяСтраницы = "Раздел8_Прил1" Тогда
		ПараметрыРаздела = Новый Структура("СумНДСИтКПк, СумНДСИтП1Р8, СумНДСВыч, Строки", 0, 0, 0);
		
	ИначеЕсли ИмяСтраницы = "Раздел9" Тогда
		ПараметрыРаздела = Новый Структура("СтПродБезНДС18, СтПродБезНДС10, СтПродБезНДС0, СумНДСВсКПр18, СумНДСВсКПр10, СтПродОсвВсКПр, Строки", 0, 0, 0, 0, 0, 0);
		
	ИначеЕсли ИмяСтраницы = "Раздел9_Прил1" Тогда
		ПараметрыРаздела = Новый Структура("ИтСтПродКПр18, ИтСтПродКПр10, ИтСтПродКПр0, СумНДСИтКПр18, СумНДСИтКПр10, ИтСтПродОсвКПр, СумНДСВсП1Р9_10, СумНДСВсП1Р9_18, СтПродВсП1Р9_18, СтПродВсП1Р9_10, СтПродВсП1Р9_0, Строки", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		
	ИначеЕсли ИмяСтраницы = "Раздел10" Тогда
		
	ИначеЕсли ИмяСтраницы = "Раздел11" Тогда
		
	ИначеЕсли ИмяСтраницы = "Раздел12" Тогда
		ПараметрыРаздела = Новый Структура("Строки"); //, Новый Структура("СумНалПокуп", 0));
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Неопределено Тогда
		СтруктураРазделов8_12_ЗаполненныхБезДеленияНаСекции(ИмяСтраницы, ПараметрыРаздела);
		
	Иначе
		СтруктураРазделов8_12_ЗаполненныхСДелениемНаСекции(ИмяСтраницы, ПараметрыРаздела);
		
	КонецЕсли;
	
	Возврат ПараметрыРаздела;
	
КонецФункции

&НаСервере
Процедура СтруктураРазделов8_12_ЗаполненныхБезДеленияНаСекции(ИмяСтраницы, ПараметрыРаздела)
	
	Если НЕ СтруктураРеквизитовФормы.Свойство("АдресДанных" + ИмяСтраницы) Тогда
		ДанныеРаздела = Неопределено;
	ИначеЕсли СтруктураРеквизитовФормы["АдресДанных" + ИмяСтраницы] = Неопределено Тогда
		ДанныеРаздела = Неопределено;
	Иначе
		ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресДанных" + ИмяСтраницы]);
		Если ДанныеРаздела.Записи.Количество() = 0 Тогда
			ДанныеРаздела = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеРаздела <> Неопределено Тогда
		ПараметрыРаздела.Вставить("Строки", ДанныеРаздела.Записи.Скопировать());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктураРазделов8_12_ЗаполненныхСДелениемНаСекции(ИмяСтраницы, ПараметрыРаздела)
	
	РазделЗаполнен = ЭтаФорма["Страницы" + ИмяСтраницы].Количество() > 0;
	
	Если РазделЗаполнен Тогда;
		ДанныеРаздела = ДанныеРазделаНДСДляПечати(ИмяСтраницы);
	
	Иначе
		ДанныеРаздела = Неопределено;
		
	КонецЕсли;
	
	Если ДанныеРаздела <> Неопределено Тогда
		Итоги = Неопределено;
		ПолучатьИтоги = ДанныеРаздела.Свойство("Итоги", Итоги) И Итоги <> Неопределено;
		
		Если ПолучатьИтоги Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыРаздела, Итоги);
		
		КонецЕсли;
		
		Если НЕ ПараметрыРаздела.Свойство("Строки") Тогда
			Возврат;
		
		КонецЕсли;
		
		СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
		МассивКопируемыхСтрок = Новый Массив;
		
		Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
			
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(
				СтруктураРеквизитовФормы.мСохраненныйДок, ИмяСтраницы, НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				МассивКопируемыхСтрок.Добавить(СтрокаДанных);
			
			КонецЦикла;
			
		КонецЦикла;
		ПараметрыРаздела.Вставить("Строки", СтрокиСегментаРаздела.Скопировать(МассивКопируемыхСтрок));
		
	Иначе
		ПараметрыРаздела.Вставить("РазделНеЗаполнен", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СуммаПоСтроке(Показатели, СуммируемаяКолонка, КолонкаПоиска = Неопределено, ЗначениеПоиска = Неопределено)
	
	Результат = 0;
	
	Если Показатели = Неопределено ИЛИ ТипЗнч(Показатели) <> Тип("ТаблицаЗначений") Тогда
		Возврат Результат;
		
	КонецЕсли;
	
	Если Показатели.Колонки.Найти(СуммируемаяКолонка) = Неопределено Тогда
		Возврат Результат;
		
	КонецЕсли;
	
	Если КолонкаПоиска = Неопределено ИЛИ ЗначениеПоиска = Неопределено Тогда
		ВременнаяТаблица = Показатели.Скопировать()
		
	Иначе
		МассивНайденныхСтрок = Новый Массив;
		
		Для Каждого СтрокаПоказателей Из Показатели Цикл
			
			Если ТипЗнч(СтрокаПоказателей[КолонкаПоиска]) = Тип("Массив") И СтрокаПоказателей[КолонкаПоиска].Найти(ЗначениеПоиска) <> Неопределено Тогда
				МассивНайденныхСтрок.Добавить(СтрокаПоказателей);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивНайденныхСтрок.Количество() > 0 Тогда
			ВременнаяТаблица = Показатели.Скопировать(МассивНайденныхСтрок);
			
		Иначе
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ВременнаяТаблица.Итог(СуммируемаяКолонка);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РазделНеЗаполнен(СтруктураРаздела)
	
	Возврат (СтруктураРаздела.Свойство("РазделНеЗаполнен") И СтруктураРаздела.РазделНеЗаполнен);
	
КонецФункции

&НаСервере
Функция КССучетомОтклонения(ЛеваяЧасть, ПраваяЧасть, Отклонение)
	
	Возврат (ЛеваяЧасть >= ПраваяЧасть - Отклонение И ЛеваяЧасть <= ПраваяЧасть + Отклонение);
	
КонецФункции

#КонецОбласти

#Область ПроверкаКонтрагентов

&НаСервере
Функция ПолучитьРезультатРаботыФоновогоЗадания() Экспорт
	
	Возврат ПроверкаКонтрагентовБРО.ПолучитьРезультатРаботыФоновогоЗадания(ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура ПроверитьКонтрагентовВОтчете(Знач ДополнительныеПараметры) Экспорт
	
	ПроверкаКонтрагентовБРО.ПроверитьКонтрагентовВОтчете(ЭтотОбъект, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ПроверкаКонтрагентовБРОКлиент.ОбработатьРезультатПроверкиКонтрагентовВОтчете(ЭтотОбъект);
	
КонецПроцедуры

// Есть только в декларации, так как в других отчетах нет отдельной команды.
&НаКлиенте
Процедура ПроверитьКонтрагентовВОтчетеКоманда(Команда)
	
	ПроверкаКонтрагентовБРОКлиент.ПроверитьКонтрагентовВОтчетеКоманда(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОтображенияПанелиСРезультатамиПроверки

&НаКлиенте
Процедура ВывестиПанельВыполненияПроверки() Экспорт
	
	Элементы.Проверка.ТекущаяСтраница = Элементы.ПроверкаВПроцессеВыполнения;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРезультатПроверки() Экспорт 
	
	Если СтруктураРеквизитовФормы.ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС Тогда
		ВывестиРезультатПроверкиКонтрагентов();
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиВыгрузки     = РезультатПроверкиВыгрузки();
	РезультатПроверкиКонтрагентов = РезультатПроверкиКонтрагентов();
	
	Если НЕ РезультатПроверкиВыгрузки.ПроверкаВыполнена
	   И НЕ РезультатПроверкиКонтрагентов.ПроверкаВыполнена Тогда
		Элементы.Проверка.ТекущаяСтраница = Элементы.ПустаяПанель;
		Возврат;
		
	ИначеЕсли НЕ РезультатПроверкиВыгрузки.ПроверкаВыполнена
	   ИЛИ НЕ РезультатПроверкиКонтрагентов.ПроверкаВыполнена Тогда
		ВывестиПанельВыполненияПроверки();
		Возврат;
		
	КонецЕсли;
	
	Если РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок > 0
		И РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок > 0 Тогда
		
		ТекстРезультатаПроверкиВыгрузки     = ФорматированныйТекстРезультатаПроверки(РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок, "ПроверкаВыгрузки");
		ТекстРезультатаПроверкиКонтрагентов = ФорматированныйТекстРезультатаПроверки(РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок, "ПроверкаКонтрагентов");
		
		ТекстРезультатаПроверкиКонтрагентов[0] = НСтр("ru=', и '");
		
		ТекстРезультатаПроверки = Новый Массив();
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиВыгрузки);
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиКонтрагентов);
		
		Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);
		
		Элементы.РезультатПроверки.ЦветФона = Новый Цвет(251, 212, 212);
		
	ИначеЕсли РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок = 0
		И РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок = 0 Тогда
		
		Если РезультатПроверкиКонтрагентов.ОшибкаПодключенияКСервису Тогда
			Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru='Нет ошибок, препятствующих отправке декларации. Проверка контрагентов сервисом ФНС не выполнена из-за ошибки подключения к сервису.'"));
			Элементы.РезультатПроверки.ЦветФона = Новый Цвет(255, 255, 192);
			
		Иначе
			Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru='Нет ошибок, препятствующих отправке декларации, и ошибок проверки контрагентов сервисом ФНС.'"));
			Элементы.РезультатПроверки.ЦветФона = Новый Цвет(215, 240, 199);
			
		КонецЕсли;
		
	ИначеЕсли РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок = 0
	        И РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок > 0 Тогда
		ТекстРезультатаПроверкиКонтрагентов = ФорматированныйТекстРезультатаПроверки(РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок, "ПроверкаКонтрагентов");
		
		ТекстРезультатаПроверки = Новый Массив();
		ТекстРезультатаПроверки.Добавить(НСтр("ru='Нет ошибок, препятствующих отправке декларации.'"));
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиКонтрагентов);
		
		Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);
		
		Элементы.РезультатПроверки.ЦветФона = Новый Цвет(255, 255, 192);
		
	ИначеЕсли РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок = 0
	        И РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок > 0 Тогда
		ТекстРезультатаПроверкиКонтрагентов = ФорматированныйТекстРезультатаПроверки(РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок, "ПроверкаКонтрагентов");
		
		ТекстРезультатаПроверки = Новый Массив();
		ТекстРезультатаПроверки.Добавить(НСтр("ru='Нет ошибок, препятствующих отправке декларации. '"));
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиКонтрагентов);
		
		Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);	
		
		Элементы.РезультатПроверки.ЦветФона = Новый Цвет(255, 255, 192);
		
	ИначеЕсли РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок > 0
	        И РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок > 0 Тогда
		ТекстРезультатаПроверкиВыгрузки     = ФорматированныйТекстРезультатаПроверки(РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок, "ПроверкаВыгрузки");
		ТекстРезультатаПроверкиКонтрагентов = ФорматированныйТекстРезультатаПроверки(РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок, "ПроверкаКонтрагентов");
		
		ТекстРезультатаПроверкиКонтрагентов[0] = НСтр("ru=', и '");
		
		ТекстРезультатаПроверки = Новый Массив();
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиВыгрузки);
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиКонтрагентов);
		
		Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);	
		
		Элементы.РезультатПроверки.ЦветФона = Новый Цвет(251, 212, 212);
		
	ИначеЕсли РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок > 0
	        И РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок = 0 Тогда
		Если РезультатПроверкиКонтрагентов.ОшибкаПодключенияКСервису Тогда
			
			ТекстРезультатаПроверкиВыгрузки = ФорматированныйТекстРезультатаПроверки(РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок, "ПроверкаВыгрузки");
			
			ТекстРезультатаПроверки = Новый Массив();
			ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиВыгрузки);
			ТекстРезультатаПроверки.Добавить(НСтр("ru='. Проверка контрагентов сервисом ФНС не выполнена из-за ошибки подключения к сервису.'"));
			
			Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);
			
		Иначе
			
			ТекстРезультатаПроверкиВыгрузки = ФорматированныйТекстРезультатаПроверки(РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок, "ПроверкаВыгрузки");
			
			ТекстРезультатаПроверки = Новый Массив();
			ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиВыгрузки);
			ТекстРезультатаПроверки.Добавить(НСтр("ru='. Нет ошибок проверки контрагентов сервисом ФНС.'"));
			
			Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);
			
		КонецЕсли;
		
		Элементы.РезультатПроверки.ЦветФона = Новый Цвет(251, 212, 212);
		
	КонецЕсли;
	
	Элементы.Проверка.ТекущаяСтраница = Элементы.РезультатПроверки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРезультатПроверкиКонтрагентов()
	
	РезультатПроверкиКонтрагентов = РезультатПроверкиКонтрагентов();
		
	Если РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок > 0 Тогда
		
		ТекстРезультатаПроверкиКонтрагентов = ФорматированныйТекстРезультатаПроверки(РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок, "ПроверкаКонтрагентов");
						
		ТекстРезультатаПроверки = Новый Массив();
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиКонтрагентов);
		
		Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);
		
		Элементы.РезультатПроверки.ЦветФона = Новый Цвет(255, 255, 192);
		
	ИначеЕсли РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок = 0 Тогда
		
		Если РезультатПроверкиКонтрагентов.ОшибкаПодключенияКСервису Тогда
			
			Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru='Проверка контрагентов сервисом ФНС не выполнена из-за ошибки подключения к сервису.'"));
			
			Элементы.РезультатПроверки.ЦветФона = Новый Цвет(255, 255, 192);
			
		Иначе
			
			Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru='Нет ошибок проверки контрагентов сервисом ФНС.'"));
			
			Элементы.РезультатПроверки.ЦветФона = Новый Цвет(215, 240, 199);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Проверка.ТекущаяСтраница = Элементы.РезультатПроверки;
	                                                               	
КонецПроцедуры

&НаКлиенте
Функция ПанельСРезультатамиПроверкиОтображена() Экспорт
	
	Возврат ?(Элементы.Проверка.ТекущаяСтраница = Элементы.ПустаяПанель, Ложь, Истина);
	
КонецФункции

&НаКлиенте
Функция РезультатПроверкиВыгрузки()
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ПроверкаВыполнена", Ложь);
	РезультатПроверки.Вставить("КоличествоОбнаруженныхОшибок", 0);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки) Тогда
		
		РезультатВыполненияЗадания = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки);
		
		Если ЗначениеЗаполнено(РезультатВыполненияЗадания) Тогда
			
			РезультатПроверки = Новый Структура;
			РезультатПроверки.Вставить("ПроверкаВыполнена", Истина);
			РезультатПроверки.Вставить("КоличествоОбнаруженныхОшибок", РезультатВыполненияЗадания.КоличествоОшибок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Функция РезультатПроверкиКонтрагентов()
	
	Возврат ПроверкаКонтрагентовБРОКлиентСервер.РезультатПроверкиКонтрагентов(ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ФорматированныйТекстРезультатаПроверки(КолвоОшибок, НаимОперации)
		
	ТекстРезультатаПроверки = Новый Массив();
	
	Если Прав(Строка(КолвоОшибок), 1) = "1"
	   И НЕ КолвоОшибок = 11 Тогда
	   
	   ТекстРезультатаПроверки.Добавить(НСтр("ru='Обнаружена '"));
	   
	   Если НаимОперации = "ПроверкаВыгрузки" Тогда
		   
		   ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок) + НСтр("ru=' ошибка'"), , , , "ПоказатьОшибкиПроверкиВыгрузки"));
		   
		   ТекстРезультатаПроверки.Добавить(НСтр("ru=', препятствующая отправке декларации'"));
		   
	   ИначеЕсли НаимОперации = "ПроверкаКС" Тогда
		   
		   ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок) + НСтр("ru=' ошибка'"), , , , "ПоказатьОшибкиПроверкиКС"));
		   
		   ТекстРезультатаПроверки.Добавить(НСтр("ru=' в контрольных соотношениях'"));
		   
	   ИначеЕсли НаимОперации = "ПроверкаКонтрагентов" Тогда
		   
		   ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок) + НСтр("ru=' ошибка'"), , , , "ПоказатьОшибкиПроверкиКонтрагентов"));
		   
		   ТекстРезультатаПроверки.Добавить(НСтр("ru=' проверки контрагентов сервисом ФНС.'"));
		   
	   КонецЕсли;	   
	   	   	   
	ИначеЕсли (Прав(Строка(КолвоОшибок), 1) = "2" ИЛИ Прав(Строка(КолвоОшибок), 1) = "3" ИЛИ Прав(Строка(КолвоОшибок), 1) = "4")
	        И НЕ КолвоОшибок = 12 И НЕ КолвоОшибок = 13 И НЕ КолвоОшибок = 14 Тогда 
			
	   ТекстРезультатаПроверки.Добавить(НСтр("ru='Обнаружено '"));
	                                               	   
	   Если НаимОперации = "ПроверкаВыгрузки" Тогда
		   
		   ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок) + НСтр("ru=' ошибки'"), , , , "ПоказатьОшибкиПроверкиВыгрузки"));
		   
		   ТекстРезультатаПроверки.Добавить(НСтр("ru=', препятствующие отправке декларации'"));
		   
	   ИначеЕсли НаимОперации = "ПроверкаКС" Тогда
		   
		   ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок) + НСтр("ru=' ошибки'"), , , , "ПоказатьОшибкиПроверкиКС"));
		   
		   ТекстРезультатаПроверки.Добавить(НСтр("ru=' в контрольных соотношениях'"));
		   
	   ИначеЕсли НаимОперации = "ПроверкаКонтрагентов" Тогда
		   
		   ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок) + НСтр("ru=' ошибки'"), , , , "ПоказатьОшибкиПроверкиКонтрагентов"));
		   
		   ТекстРезультатаПроверки.Добавить(НСтр("ru=' проверки контрагентов сервисом ФНС.'"));
		   
	   КонецЕсли;	   
	   	   
   	Иначе   
		
	   ТекстРезультатаПроверки.Добавить(НСтр("ru='Обнаружено '"));
	   
	   Если НаимОперации = "ПроверкаВыгрузки" Тогда
		   
	       ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок) + НСтр("ru=' ошибок'"), , , , "ПоказатьОшибкиПроверкиВыгрузки"));
		   
		   ТекстРезультатаПроверки.Добавить(НСтр("ru=', препятствующих отправке декларации'"));
		   
	   ИначеЕсли НаимОперации = "ПроверкаКС" Тогда
		   
		   ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок) + НСтр("ru=' ошибок'"), , , , "ПоказатьОшибкиПроверкиКС"));
		   
		   ТекстРезультатаПроверки.Добавить(НСтр("ru=' в контрольных соотношениях'"));
		   
	   ИначеЕсли НаимОперации = "ПроверкаКонтрагентов" Тогда
		   
		   ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок) + НСтр("ru=' ошибок'"), , , , "ПоказатьОшибкиПроверкиКонтрагентов"));
		   
		   ТекстРезультатаПроверки.Добавить(НСтр("ru=' проверки контрагентов сервисом ФНС.'"));
		   
	   КонецЕсли;	   
	   	   	   
   	КонецЕсли;	 
	
	Возврат ТекстРезультатаПроверки;
	
КонецФункции

&НаКлиенте
Процедура ТекстCРезультатомПроверкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьОшибкиПроверкиВыгрузки" Тогда
		Если СтруктураРеквизитовФормы.Свойство("АдресХранилищаПроверкиВыгрузки") Тогда
			РезультатПроверкиВыгрузки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СохраненныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
			ПараметрыФормы.Вставить("ПредставлениеОшибок", РезультатПроверкиВыгрузки.ПредставлениеОшибок);
			ПараметрыФормы.Вставить("НазваниеДекларации", Заголовок);
			
			Если РезультатПроверкиВыгрузки.КоличествоОшибок = 0 Тогда
				ПоказатьПредупреждение( , НСтр("ru='Ошибок не обнаружено!'"));
			Иначе
				ФормаНавигацииПоОшибкам = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаСообщенийОбОшибках", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
				ФормаНавигацииПоОшибкам.Открыть();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьОшибкиПроверкиКС" Тогда
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьОшибкиПроверкиКонтрагентов" Тогда
		
		ПроверкаКонтрагентовБРОКлиент.ОткрытьОтчетПоНекорректнымКонтрагентам(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ЗаполненоНовымАлгоритмом() Экспорт
	
	Возврат СтруктураРеквизитовФормы.ВерсияАвтозаполнения = "2015Кв3";
	
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьВыгрузкиВФоне()
	
	РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ШаблоныОшибок = Отчеты.РегламентированныйОтчетНДС.ПолучитьМакет("ШаблоныСообщенийОбОшибках2015Кв1");
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыФоновогоЗадания = Новый Массив;
	ПараметрыФоновогоЗадания.Добавить(РегламентированныйОтчет);
	ПараметрыФоновогоЗадания.Добавить(ШаблоныОшибок);
	ПараметрыФоновогоЗадания.Добавить(Заголовок);
	ПараметрыФоновогоЗадания.Добавить(АдресХранилища);
	
	НаименованиеЗадания = НСтр("ru = 'Проверка возможности формирования электронного представления'");
	Задание = ФоновыеЗадания.Выполнить("РегламентированнаяОтчетностьПроверкаНДС.ВыявитьОшибкиЗаполненияПрепятствующиеФормированиюЭлектронногоПредставления_ФормаОтчета2015Кв1", ПараметрыФоновогоЗадания, , НаименованиеЗадания);
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	ПараметрыЗаданияПроверкиВыгрузки = Новый Структура;
	ПараметрыЗаданияПроверкиВыгрузки.Вставить("МаксимальныйИнтервал", 20);
	ПараметрыЗаданияПроверкиВыгрузки.Вставить("ТекущийИнтервал", 1);
	ПараметрыЗаданияПроверкиВыгрузки.Вставить("КоэффициентУвеличенияИнтервала", 1.618);
	ПараметрыЗаданияПроверкиВыгрузки.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	СтруктураРеквизитовФормы.Вставить("АдресХранилищаПроверкиВыгрузки", АдресХранилища);
	СтруктураРеквизитовФормы.Вставить("ПараметрыЗаданияПроверкиВыгрузки", ПараметрыЗаданияПроверкиВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПроверкиВозможностиВыгрузки()
	
	Если СтруктураРеквизитовФормы.Свойство("ПараметрыЗаданияПроверкиВыгрузки") Тогда
		
		СостояниеЗадания = СостояниеФоновогоЗадания(СтруктураРеквизитовФормы.ПараметрыЗаданияПроверкиВыгрузки.ИдентификаторЗадания);
		
		Если СостояниеЗадания = "Завершено" Тогда
			
			ВывестиРезультатПроверки();
			
		ИначеЕсли СостояниеЗадания = "Активно" Тогда
			ТекущийИнтервал = СтруктураРеквизитовФормы.ПараметрыЗаданияПроверкиВыгрузки.ТекущийИнтервал;
			МаксимальныйИнтервал = СтруктураРеквизитовФормы.ПараметрыЗаданияПроверкиВыгрузки.МаксимальныйИнтервал;
			КоэффициентУвеличенияИнтервала = СтруктураРеквизитовФормы.ПараметрыЗаданияПроверкиВыгрузки.КоэффициентУвеличенияИнтервала;
			
			ИнтервалОжидания = Мин(ТекущийИнтервал * КоэффициентУвеличенияИнтервала, МаксимальныйИнтервал);
			СтруктураРеквизитовФормы.ПараметрыЗаданияПроверкиВыгрузки.ТекущийИнтервал = ИнтервалОжидания;
			
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПроверкиВозможностиВыгрузки", ИнтервалОжидания, Истина);
		Иначе
			ВызватьИсключение "Ошибка выполнения фонового задания проверки выгрузки";
		КонецЕсли;
	Иначе
		ВызватьИсключение "Ошибка выполнения фонового задания проверки выгрузки";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеФоновогоЗадания(ИдентификаторФоновогоЗадания)
	
	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторФоновогоЗадания);
	
	Если Задание <> Неопределено Тогда
		Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Возврат "Активно";
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			Возврат "Завершено";
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			Возврат "ЗавершеноАварийно";
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			Возврат "Отменено";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "Неопределено";
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиЗаданиеПоИдентификатору(Знач ИдентификаторФоновогоЗадания)
	
	Если ТипЗнч(ИдентификаторФоновогоЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторФоновогоЗадания);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторФоновогоЗадания);
	
	Возврат Задание;
	
КонецФункции

&НаСервере
Процедура ЗаписатьРезультатПроверкиВыгрузки()
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки);
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РегламентированныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
		ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", "РезультатПроверкиВыгрузки.mxl");
		ПараметрыЗаписи.Вставить("Данные",                  Результат);
		
		РегламентированнаяОтчетность.ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьРезультатПроверкиВыгрузки()
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", "РезультатПроверкиВыгрузки.mxl");
		
	Данные = РегламентированнаяОтчетность.ДанныеРегистраДополнительныхФайлов(ПараметрыЗаписи);
	
	СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЭтапаНажатие(Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтатусОтчета", СтруктураРеквизитовФормы.СтатусОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзСпискаСтатусаОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	СтатусыОтчета = Новый СписокЗначений;
	СтатусыОтчета.Добавить("Не отправлено");
	СтатусыОтчета.Добавить("Сдано");
			
	ПоказатьВыборИзСписка(ОписаниеОповещения, СтатусыОтчета, Элементы.НаименованиеЭтапа, ?(СтруктураРеквизитовФормы.СтатусОтчета = "Не отправлено", 0, 1));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаСтатусаОтчетаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		
		СтруктураРеквизитовФормы.СтатусОтчета = ВыбранныйЭлемент.Значение;
		
		Элементы.НаименованиеЭтапа.Заголовок = СтруктураРеквизитовФормы.СтатусОтчета;
		
		Если ДополнительныеПараметры.СтатусОтчета = "Сдано"
		   И СтруктураРеквизитовФормы.СтатусОтчета = "Сдано" Тогда
		   
		   СохранитьНаКлиенте();
		   
		Иначе   
		
			СохранитьНаКлиенте(, , Истина);
		
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыполненоСохранениеФайлаВыгрузки" Тогда
		
		Если НЕ СтруктураРеквизитовФормы.ПодключенДокументооборотСКонтролирующимОрганом
		   И НЕ СтруктураРеквизитовФормы.СтатусОтчета = "Сдано" Тогда
									
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросИзменитьСтатусОтчетаЗавершение", ЭтотОбъект);
			
			ТекстВопроса = НСтр("ru='Декларация выгружена, рекомендуется установить для нее состояние ""Сдано"".
			|Для сданной декларации редактирование запрещено. Состояние можно установить
			|или снять вручную в форме декларации.
			|
			|Установить для декларации состояние ""Сдано""?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;	
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменитьСтатусОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СтруктураРеквизитовФормы.СтатусОтчета = "Сдано";
		
		Элементы.НаименованиеЭтапа.Заголовок = СтруктураРеквизитовФормы.СтатусОтчета;
		
		СохранитьНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции