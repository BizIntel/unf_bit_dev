&НаСервере
Процедура СобратьДанныеСТекущейСтраницы()
	Если UID_СведУч <> UID_Пустой Тогда
		МногострочнаяЧастьТекущая.Очистить();
		Инд = 1;
		Пока Истина Цикл
			Обл1 = ПредставлениеУведомления.Области.Найти("НомерУчастника_" + Инд);
			Обл2 = ПредставлениеУведомления.Области.Найти("ДоляПрУчастия_" + Инд);
			Обл3 = ПредставлениеУведомления.Области.Найти("ДоляКосвУчастия_" + Инд);
			Если Обл1 = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			НоваяСтрока = МногострочнаяЧастьТекущая.Добавить();
			НоваяСтрока.НомерУчастника = Обл1.Значение;
			НоваяСтрока.ДоляПрУчастия = Обл2.Значение;
			НоваяСтрока.ДоляКосвУчастия = Обл3.Значение;
			Инд = Инд + 1;
		КонецЦикла;
		
		Строки = МногострочнаяЧасть.НайтиСтроки(Новый Структура("UID", UID_СведУч));
		Инд = Строки.Количество();
		Пока Инд > 0 Цикл
			МногострочнаяЧасть.Удалить(Строки[Инд - 1]);
			Инд = Инд - 1;
		КонецЦикла;
		
		Для Каждого Стр Из МногострочнаяЧастьТекущая Цикл 
			НовСтр = МногострочнаяЧасть.Добавить();
			НовСтр.UID = UID_СведУч;
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьДанные() Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не Модифицированность Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО;
		Объект.Дата = ТекущаяДатаСеанса() 
	КонецЕсли;
	
	СобратьДанныеСТекущейСтраницы();
	
	СтруктураПараметров = Новый Структура("Титульный, СведФЛ, СведРО, СведИО, СведУч, СведИС, СведИСУч, МногострочнаяЧасть, Автонумерация",
									ТитульнаяСтраница.Выгрузить(),
									СведФЛ.Выгрузить(),
									СведРО.Выгрузить(),
									СведИО.Выгрузить(),
									СведУч.Выгрузить(),
									СведИС.Выгрузить(),
									СведИСУч.Выгрузить(),
									МногострочнаяЧасть.Выгрузить(),
									Автонумерация);
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	Документ.Записать();
	ЗначениеВДанныеФормы(Документ, Объект);
	Модифицированность = Ложь;
	ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, " (создание)", "");

КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	СохранитьДанные();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанные(ЗначениеКопирования)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СсылкаНаДанные = Объект.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		Объект.Организация = ЗначениеКопирования.Организация;
		СсылкаНаДанные = ЗначениеКопирования;
	Иначе
		Автонумерация = Ложь;
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = СсылкаНаДанные.Ссылка.ДанныеУведомления.Получить();
	СтруктураПараметров.Свойство("Автонумерация", Автонумерация);
	Титульный = СтруктураПараметров.Титульный;
	НоваяСтрока = ТитульнаяСтраница.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Титульный[0]);
	
	Листы = СтруктураПараметров.СведФЛ;
	Для Каждого Строка Из Листы Цикл
		НоваяСтрока = СведФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Листы = СтруктураПараметров.СведРО;
	Для Каждого Строка Из Листы Цикл
		НоваяСтрока = СведРО.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Листы = СтруктураПараметров.СведИО;
	Для Каждого Строка Из Листы Цикл
		НоваяСтрока = СведИО.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Листы = СтруктураПараметров.СведУч;
	Для Каждого Строка Из Листы Цикл
		НоваяСтрока = СведУч.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Листы = СтруктураПараметров.СведИС;
	Для Каждого Строка Из Листы Цикл
		НоваяСтрока = СведИС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Листы = СтруктураПараметров.СведИСУч;
	Для Каждого Строка Из Листы Цикл
		НоваяСтрока = СведИСУч.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Листы = СтруктураПараметров.МногострочнаяЧасть;
	Для Каждого Строка Из Листы Цикл
		НоваяСтрока = МногострочнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Если ТитульнаяСтраница[0].КОЛИЧЕСТВО_СТРАНИЦ =0 Тогда
		ТитульнаяСтраница[0].КОЛИЧЕСТВО_СТРАНИЦ = 1 + СведФЛ.Количество() + СведРО.Количество() + СведИО.Количество()
												+ СведУч.Количество() + СведИС.Количество() + СведИСУч.Количество();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьДерево()
	ЮрЛицо = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация);
	
	КорневойУровень = Разделы.ПолучитьЭлементы();
	Если ТитульнаяСтраница.Количество() = 0 Тогда
		НовыйЛист = ТитульнаяСтраница.Добавить();
		ЗаполнитьТитульный(НовыйЛист);
	КонецЕсли;
	Титульный = КорневойУровень.Добавить();
	Титульный.Наименование = "Титульный лист";
	Титульный.ИндексКартинки = 1;
	Титульный.ТипСтраницы = 1;
	Титульный.UID = ТитульнаяСтраница[0].UID;
	
	Если Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
		Если СведФЛ.Количество() = 0 Тогда
			НовыйЛист = СведФЛ.Добавить();
			ЗаполнитьСведФЛ(НовыйЛист);
		КонецЕсли;
		СФЛ = КорневойУровень.Добавить();
		СФЛ.Наименование = "Сведения о физ.лице";
		СФЛ.ИндексКартинки = 1;
		СФЛ.ТипСтраницы = 5;
		СФЛ.UID = СведФЛ[0].UID;
	КонецЕсли;
	
	Листы = КорневойУровень.Добавить();
	Листы.Наименование = "Сведения об иностранных" + Символы.ПС + "организациях";
	СписокЛистов = Листы.ПолучитьЭлементы();
	
	Если СведИО.Количество() = 0 Тогда
		НовыйЛист = СведИО.Добавить();
		ЗаполнитьСведИО(НовыйЛист);
	КонецЕсли;
	
	Номер = 1;
	Для Каждого ЛистСведИО Из СведИО Цикл 
		ЛистСведИОНов = СписокЛистов.Добавить();
		ЛистСведИОНов.ИндексКартинки = 1;
		ЛистСведИОНов.ТипСтраницы = 2;
		ЛистСведИОНов.Наименование = "Стр." + Номер;
		ЛистСведИОНов.UID = ЛистСведИО.UID;
		Номер = Номер + 1;
	КонецЦикла;
	
	Листы = КорневойУровень.Добавить();
	Листы.Наименование = "Сведения о Российских" + Символы.ПС + "организациях";
	СписокЛистов = Листы.ПолучитьЭлементы();
	
	Если СведРО.Количество() = 0 Тогда
		НовыйЛист = СведРО.Добавить();
		ЗаполнитьСведРО(НовыйЛист);
	КонецЕсли;
	
	Номер = 1;
	Для Каждого ЛистСведРО Из СведРО Цикл 
		ЛистСведРОНов = СписокЛистов.Добавить();
		ЛистСведРОНов.ИндексКартинки = 1;
		ЛистСведРОНов.ТипСтраницы = 3;
		ЛистСведРОНов.Наименование = "Стр." + Номер;
		ЛистСведРОНов.UID = ЛистСведРО.UID;
		Номер = Номер + 1;
	КонецЦикла;
	
	Листы = КорневойУровень.Добавить();
	Листы.Наименование = "Сведения об иностранных" + Символы.ПС + "структурах";
	СписокЛистов = Листы.ПолучитьЭлементы();
	
	Если СведИС.Количество() = 0 Тогда
		НовыйЛист = СведИС.Добавить();
		ЗаполнитьСведИС(НовыйЛист);
		UID_parent = НовыйЛист.UID;
		НовыйЛист = СведИСУч.Добавить();
		ЗаполнитьСведИСУч(НовыйЛист, UID_parent);
	КонецЕсли;
	
	Номер = 1;
	Для Каждого ЛистСведИС Из СведИС Цикл 
		ЛистСведИСНов = СписокЛистов.Добавить();
		ЛистСведИСНов.ИндексКартинки = 1;
		ЛистСведИСНов.ТипСтраницы = 6;
		ЛистСведИСНов.Наименование = "Стр." + Номер;
		ЛистСведИСНов.UID = ЛистСведИС.UID;
		Номер = Номер + 1;
		
		ЛистыУч = СведИСУч.НайтиСтроки(Новый Структура("UID_parent", ЛистСведИС.UID));
		СписокУч = ЛистСведИСНов.ПолучитьЭлементы();
		Для Каждого ЛистСведИСУч Из ЛистыУч Цикл
			ЛистСведИСУчНов = СписокУч.Добавить();
			ЛистСведИСУчНов.ИндексКартинки = 1;
			ЛистСведИСУчНов.ТипСтраницы = 7;
			ЛистСведИСУчНов.Наименование = "Сведения об участнике";
			ЛистСведИСУчНов.UID = ЛистСведИСУч.UID;
		КонецЦикла;
	КонецЦикла;
	
	Листы = КорневойУровень.Добавить();
	Листы.Наименование = "Сведения об участии";
	СписокЛистов = Листы.ПолучитьЭлементы();
	
	Если СведУч.Количество() = 0 Тогда
		НовыйЛист = СведУч.Добавить();
		ЗаполнитьСведУч(НовыйЛист);
	КонецЕсли;
	
	Номер = 1;
	Для Каждого ЛистСведУч Из СведУч Цикл 
		ЛистСведУчНов = СписокЛистов.Добавить();
		ЛистСведУчНов.ИндексКартинки = 1;
		ЛистСведУчНов.ТипСтраницы = 4;
		ЛистСведУчНов.Наименование = "Стр." + Номер;
		ЛистСведУчНов.UID = ЛистСведУч.UID;
		Номер = Номер + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТитульный(НовыйЛист)
	
	НовыйЛист.ДАТА_ПОДПИСИ = ТекущаяДатаСеанса(); 
	Объект.ДатаПодписи = НовыйЛист.ДАТА_ПОДПИСИ;
	
	СтрокаСведений = "ИННЮЛ,НаимЮЛПол,КППЮЛ,ТелОрганизации,ОГРН";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, СтрокаСведений);
	
	НовыйЛист.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ = СведенияОбОрганизации.НаимЮЛПол;
	НовыйЛист.ОГРН = СведенияОбОрганизации.ОГРН;
	НовыйЛист.КОД_НО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВИФНС, "Код");
	НовыйЛист.П_ИНН = СведенияОбОрганизации.ИННЮЛ;
	НовыйЛист.П_КПП = СведенияОбОрганизации.КППЮЛ;
	НовыйЛист.ТЕЛЕФОН = СведенияОбОрганизации.ТелОрганизации;
	
	УстановитьДанныеПоРегистрацииВИФНС();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведФЛ(НовыйЛист)
	НовыйЛист.П_ИНН1 = ТитульнаяСтраница[0].П_ИНН;
	
	СтрокаСведений = "ФамилияИП,ИмяИП,ОтчествоИП,Пол,МестоРожд,ДатаРожд,КодУдЛичн,ДатаУдЛичн,СерияУдЛичн,НомерУдЛичн,ОрганВыданУдЛичн,Гражд,";
	СтрокаСведений = СтрокаСведений + "ИндексМЖ,СубъектМЖ,КодСубъектМЖ,РайонМЖ,ГородМЖ,НПунктМЖ,УлицаМЖ,ДомМЖ,КорпусМЖ,КвартираМЖ";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, СтрокаСведений);
	
	НовыйЛист.Фамилия_ИП = СведенияОбОрганизации.ФамилияИП;
	НовыйЛист.Имя_ИП = СведенияОбОрганизации.ИмяИП;
	НовыйЛист.Отчество_ИП = СведенияОбОрганизации.ОтчествоИП;
	
	НовыйЛист.Пол = СведенияОбОрганизации.Пол;
	НовыйЛист.МестоРождения = СведенияОбОрганизации.МестоРожд;
	НовыйЛист.ДатаРождения = СведенияОбОрганизации.ДатаРожд;
	НовыйЛист.КодВидДок1 = СведенияОбОрганизации.КодУдЛичн;
	НовыйЛист.ДатаВыдочиДок1 = СведенияОбОрганизации.ДатаУдЛичн;
	НовыйЛист.КемВыданДок1 = СведенияОбОрганизации.ОрганВыданУдЛичн;
	НовыйЛист.СерНомДок1 = СведенияОбОрганизации.СерияУдЛичн + " " + СведенияОбОрганизации.НомерУдЛичн;
	НовыйЛист.Индекс = СведенияОбОрганизации.ИндексМЖ;
	НовыйЛист.КодРегиона = СведенияОбОрганизации.КодСубъектМЖ;
	НовыйЛист.Район = СведенияОбОрганизации.РайонМЖ;
	НовыйЛист.Город = СведенияОбОрганизации.ГородМЖ;
	НовыйЛист.НаселенныйПункт = СведенияОбОрганизации.НПунктМЖ;
	НовыйЛист.Улица = СведенияОбОрганизации.УлицаМЖ;
	НовыйЛист.Дом = СведенияОбОрганизации.ДомМЖ;
	НовыйЛист.Корпус = СведенияОбОрганизации.КорпусМЖ;
	НовыйЛист.Квартира = СведенияОбОрганизации.КвартираМЖ;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведИО(НовыйЛист)
	НовыйЛист.П_ИНН_2 = ТитульнаяСтраница[0].П_ИНН;
	НовыйЛист.П_КПП_2 = ТитульнаяСтраница[0].П_КПП;
	НовыйЛист.UID = Новый УникальныйИдентификатор;
	
	Если Автонумерация Тогда
		НовыйЛист.ИО_Номер = СведИО.Количество();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведИС(НовыйЛист)
	НовыйЛист.П_ИНН_5 = ТитульнаяСтраница[0].П_ИНН;
	НовыйЛист.П_КПП_5 = ТитульнаяСтраница[0].П_КПП;
	НовыйЛист.UID = Новый УникальныйИдентификатор;
	
	Если Автонумерация Тогда
		НовыйЛист.НомерСтруктуры = СведИС.Количество();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведИСУч(НовыйЛист, UID_parent)
	НовыйЛист.П_ИНН_6 = ТитульнаяСтраница[0].П_ИНН;
	НовыйЛист.П_КПП_6 = ТитульнаяСтраница[0].П_КПП;
	НовыйЛист.UID = Новый УникальныйИдентификатор;
	НовыйЛист.UID_parent = UID_parent;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведРО(НовыйЛист)
	НовыйЛист.П_ИНН_3 = ТитульнаяСтраница[0].П_ИНН;
	НовыйЛист.П_КПП_3 = ТитульнаяСтраница[0].П_КПП;
	НовыйЛист.UID = Новый УникальныйИдентификатор;
	
	Если Автонумерация Тогда
		НовыйЛист.РО_Номер = СведРО.Количество();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведУч(НовыйЛист, UID = Неопределено)
	НовыйЛист.П_ИНН_4 = ТитульнаяСтраница[0].П_ИНН;
	НовыйЛист.П_КПП_4 = ТитульнаяСтраница[0].П_КПП;
	НовыйЛист.UID = ?(UID = Неопределено, Новый УникальныйИдентификатор, UID);
	
	НовСтрМнгч = МногострочнаяЧасть.Добавить();
	НовСтрМнгч.UID = НовыйЛист.UID;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопок()
	Если Элементы.Разделы.ТекущиеДанные = Неопределено Тогда 
		ТипСтраницы = Неопределено;
	Иначе 
		ТипСтраницы = Элементы.Разделы.ТекущиеДанные.ТипСтраницы;
	КонецЕсли;
	
	КМенюРО = Элементы.Разделы.КонтекстноеМеню;
	Если ТипСтраницы = 2 Или ТипСтраницы = 3 Или ТипСтраницы = 4 Тогда
		КМенюРО.Видимость = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыКонтекстноеМенюДобавитьСтраницу.Доступность = Истина;
		КМенюРО.ПодчиненныеЭлементы.РазделыКонтекстноеМенюУдалитьСтраницу.Доступность = (СведИО.Количество() > 1);
	Иначе
		КМенюРО.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьРазмерность18_15ВПолях(ПредставлениеУведомления, Число18_15)
	Имена = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ДоляУчастия1;ДоляУчастияИС;ДоляКосвУчастия;ДоляКосвУчастияГр;ДоляПрУчастия_1;ДоляКосвУчастия_1", ";");
	Для Каждого Имя Из Имена Цикл 
		Поле = ПредставлениеУведомления.Области.Найти(Имя);
		Если Поле <> Неопределено Тогда 
			Поле.ТипЗначения = Число18_15;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СформироватьМакетНаСервере()
	ИмяТаблицы = ПолучитьИмяТаблицы(ТекущийТипСтраницы);
	ИмяОбласти = ПолучитьИмяОбласти(ТекущийТипСтраницы);
	
	Если Не ЗначениеЗаполнено(ИмяОбласти) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
	Данные = ЭтаФорма[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
	
	Макет = Отчеты[Объект.ИмяОтчета].ПолучитьМакет("Форма2015_1");
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	УстановитьРазмерность18_15ВПолях(Область, Число18_15);
	
	Если Данные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Область.Параметры, Данные[0]);
	КонецЕсли;
	
	ПредставлениеУведомления = Новый ТабличныйДокумент;
	ПредставлениеУведомления.Вывести(Область);
	ПредставлениеУведомления.ВыделенныеОбласти.Очистить();
	Элементы.ПредставлениеУведомления.ТекущаяОбласть = ПредставлениеУведомления.Область(1,1,1,1);
	
	Если UID_СведУч <> UID_Пустой Тогда
		Строки = МногострочнаяЧасть.НайтиСтроки(Новый Структура("UID", UID_СведУч));
		МногострочнаяЧастьТекущая.Очистить();
		Для Каждого Стр Из Строки Цикл 
			НовСтр = МногострочнаяЧастьТекущая.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЦикла;
		ВывестиМногострочнуюЧасть();
	КонецЕсли;
	
	ДоступностьОбластейНумерации(ПредставлениеУведомления, Автонумерация);
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочнуюЧасть()
	Макет = Отчеты[Объект.ИмяОтчета].ПолучитьМакет("Форма2015_1");
	ОбластьМнг = Макет.ПолучитьОбласть("МногострочнаяЧасть");
	ОбластьДоб = Макет.ПолучитьОбласть("ДобавлениеСтроки");
	УстановитьРазмерность18_15ВПолях(ОбластьМнг, Число18_15);
	
	Инд = 1;
	Для Каждого Стр Из МногострочнаяЧастьТекущая Цикл 
		Если Инд > 1 Тогда 
			ОбластьМнг.Области["НомерУчастника_" + (Инд - 1)].Имя = "НомерУчастника_" + Инд;
			ОбластьМнг.Области["ДоляПрУчастия_" + (Инд - 1)].Имя = "ДоляПрУчастия_" + Инд;
			ОбластьМнг.Области["ДоляКосвУчастия_" + (Инд - 1)].Имя = "ДоляКосвУчастия_" + Инд;
			ОбластьМнг.Области["УдалитьСтроку_" + (Инд - 1)].Имя = "УдалитьСтроку_" + Инд;
		КонецЕсли;
		ПредставлениеУведомления.Вывести(ОбластьМнг);
		ПредставлениеУведомления.Области["НомерУчастника_" + Инд].Значение = Стр["НомерУчастника"];
		ПредставлениеУведомления.Области["ДоляПрУчастия_" + Инд].Значение = Стр["ДоляПрУчастия"];
		ПредставлениеУведомления.Области["ДоляКосвУчастия_" + Инд].Значение = Стр["ДоляКосвУчастия"];
		Инд = Инд + 1;
	КонецЦикла;
	
	ПредставлениеУведомления.Вывести(ОбластьДоб);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяОбласти(ТекущийТипСтраницы)
	Если ТекущийТипСтраницы = 1 Тогда
		Возврат "Титульная";
	ИначеЕсли ТекущийТипСтраницы = 2 Тогда
		Возврат "СведИО";
	ИначеЕсли ТекущийТипСтраницы = 3 Тогда
		Возврат "СведРО";
	ИначеЕсли ТекущийТипСтраницы = 4 Тогда
		Возврат "СведУч";
	ИначеЕсли ТекущийТипСтраницы = 5 Тогда
		Возврат "СведФЛ";
	ИначеЕсли ТекущийТипСтраницы = 6 Тогда
		Возврат "СведИС";
	ИначеЕсли ТекущийТипСтраницы = 7 Тогда
		Возврат "СведИСУч";
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяТаблицы(ТекущийТипСтраницы)
	Если ТекущийТипСтраницы = 1 Тогда
		Возврат "ТитульнаяСтраница";
	ИначеЕсли ТекущийТипСтраницы = 2 Тогда
		Возврат "СведИО";
	ИначеЕсли ТекущийТипСтраницы = 3 Тогда
		Возврат "СведРО";
	ИначеЕсли ТекущийТипСтраницы = 4 Тогда
		Возврат "СведУч";
	ИначеЕсли ТекущийТипСтраницы = 5 Тогда
		Возврат "СведФЛ";
	ИначеЕсли ТекущийТипСтраницы = 6 Тогда
		Возврат "СведИС";
	ИначеЕсли ТекущийТипСтраницы = 7 Тогда
		Возврат "СведИСУч";
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура НестандартнаяОбработка(Инфо, Элемент)
	Если Инфо.Обработчик = "ОбработкаСписка" Тогда
		ОбработкаСписка(Инфо);
	ИначеЕсли Инфо.Обработчик = "ОбработкаКодаНО" Тогда
		ОбработкаКодаНО(Инфо)
	ИначеЕсли Инфо.Обработчик = "ОбработкаАдреса" Тогда
		ОбработкаАдреса(Инфо, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАдреса(Инфо, Элемент)
	РоссийскийАдрес = Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс",	        ПредставлениеУведомления.Области["Индекс"].Значение);
	РоссийскийАдрес.Вставить("КодРегиона",      ПредставлениеУведомления.Области["КодРегиона"].Значение);
	РоссийскийАдрес.Вставить("Район",           ПредставлениеУведомления.Области["Район"].Значение);
	РоссийскийАдрес.Вставить("Город",           ПредставлениеУведомления.Области["Город"].Значение);
	РоссийскийАдрес.Вставить("НаселенныйПункт", ПредставлениеУведомления.Области["НаселенныйПункт"].Значение);
	РоссийскийАдрес.Вставить("Улица",           ПредставлениеУведомления.Области["Улица"].Значение);
	РоссийскийАдрес.Вставить("Дом",             ПредставлениеУведомления.Области["Дом"].Значение);
	РоссийскийАдрес.Вставить("Корпус",          ПредставлениеУведомления.Области["Корпус"].Значение);
	РоссийскийАдрес.Вставить("Квартира",        ПредставлениеУведомления.Области["Квартира"].Значение);
	
	Если Регионы.Количество() = 0 Тогда
		ЗаполнитьРегионыНаСервере();
	КонецЕсли;
	
	Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["КодРегиона"])));
	
	Если Регион.Количество() > 0 Тогда
		
		РоссийскийАдрес["Регион"] = Регион[0].Наим;
		
	КонецЕсли;
	
	ЗначенияПолей = Новый СписокЗначений;
	
	ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
	ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
	ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
	
	ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
	+ РоссийскийАдрес["Регион"] + ","
	+ РоссийскийАдрес["КодРегиона"] + ","
	+ РоссийскийАдрес["Район"] + ","
	+ РоссийскийАдрес["Город"] + ","
	+ РоссийскийАдрес["НаселенныйПункт"] + ","
	+ РоссийскийАдрес["Улица"] + ","
	+ РоссийскийАдрес["Дом"] + ","
	+ РоссийскийАдрес["Корпус"] + ","
	+ РоссийскийАдрес["Квартира"]);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
	ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
	
	ТипЗначения = Тип("ОписаниеОповещения");
	ПараметрыКонструктора = Новый Массив(3);
	ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
	ПараметрыКонструктора[1] = ЭтотОбъект;
	ПараметрыКонструктора[2] = ДополнительныеПараметры;
	
	Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
	
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ПредставлениеУведомления.Области["Индекс"].Значение = РоссийскийАдрес_["Индекс"];
		ПредставлениеУведомления.Области["КодРегиона"].Значение = РоссийскийАдрес_["КодРегиона"];
		ПредставлениеУведомления.Области["Район"].Значение = РоссийскийАдрес_["Район"];
		ПредставлениеУведомления.Области["Город"].Значение = РоссийскийАдрес_["Город"];
		ПредставлениеУведомления.Области["НаселенныйПункт"].Значение = РоссийскийАдрес_["НаселенныйПункт"];
		ПредставлениеУведомления.Области["Улица"].Значение = РоссийскийАдрес_["Улица"];
		ПредставлениеУведомления.Области["Дом"].Значение = РоссийскийАдрес_["Дом"];
		ПредставлениеУведомления.Области["Корпус"].Значение = РоссийскийАдрес_["Корпус"];
		ПредставлениеУведомления.Области["Квартира"].Значение = РоссийскийАдрес_["Квартира"];
		
		ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
		Данные = ЭтотОбъект[ПолучитьИмяТаблицы(ТекущийТипСтраницы)].НайтиСтроки(ПараметрыОтбора);
		Если Данные.Количество() > 0 Тогда
			СтрокаДанных = Данные[0];
			СтрокаДанных["Индекс"] = РоссийскийАдрес_["Индекс"];
			СтрокаДанных["КодРегиона"] = РоссийскийАдрес_["КодРегиона"];
			СтрокаДанных["Район"] = РоссийскийАдрес_["Район"];
			СтрокаДанных["Город"] = РоссийскийАдрес_["Город"];
			СтрокаДанных["НаселенныйПункт"] = РоссийскийАдрес_["НаселенныйПункт"];
			СтрокаДанных["Улица"] = РоссийскийАдрес_["Улица"];
			СтрокаДанных["Дом"] = РоссийскийАдрес_["Дом"];
			СтрокаДанных["Корпус"] = РоссийскийАдрес_["Корпус"];
			СтрокаДанных["Квартира"] = РоссийскийАдрес_["Квартира"];
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСписка(Инфо)
	ИмяНестандартнойОбласти = Инфо.Имя;
	НазваниеСписка = Инфо.ИмяФормы;
	
	СтруктураОтбора = Новый Структура("ИмяСписка", Инфо.ИмяСписка);
	Строки = ТаблицаЗначенийПредопределенныхРеквизитов.НайтиСтроки(СтруктураОтбора);
	ЗагружаемыеКоды.Очистить();
	Для Каждого Строка Из Строки Цикл 
		НоваяСтрока = ЗагружаемыеКоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          НазваниеСписка);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ЗагружаемыеКоды);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПредставлениеУведомления.Области[ИмяНестандартнойОбласти].Значение));
	
	ДополнительныеПараметры = Новый Структура("ИмяНестандартнойОбласти", ИмяНестандартнойОбласти);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСпискаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИмяНестандартнойОбласти = ДополнительныеПараметры.ИмяНестандартнойОбласти;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбластиДоп = "";
	РезультатВыбораКод = СокрЛП(РезультатВыбора.Код);
	Если 0 <> СтрНайти(ИмяНестандартнойОбласти, "Код_") Тогда
		ОбластьКоличество = СтрЗаменить(ИмяНестандартнойОбласти, "Код_", "Количество_");
		Если ЗначениеЗаполнено(РезультатВыбораКод) Тогда 
			ПредставлениеУведомления.Области[ОбластьКоличество].Защита = Ложь;
		Иначе
			ПредставлениеУведомления.Области[ОбластьКоличество].Значение = "";
			ИмяОбластиДоп = ОбластьКоличество;
			ПредставлениеУведомления.Области[ОбластьКоличество].Защита = Истина;
		КонецЕсли;
	ИначеЕсли ИмяНестандартнойОбласти = "КОД_ТС" Тогда
		ОбластьКоличество = СтрЗаменить(ИмяНестандартнойОбласти, "Код_", "Количество_");
		Если ЗначениеЗаполнено(РезультатВыбораКод) Тогда 
			ПредставлениеУведомления.Области["КОЛИЧЕСТВО_ТС"].Защита = Ложь;
		Иначе
			ПредставлениеУведомления.Области["КОЛИЧЕСТВО_ТС"].Значение = 0;
			ИмяОбластиДоп = "КОЛИЧЕСТВО_ТС";
			ПредставлениеУведомления.Области["КОЛИЧЕСТВО_ТС"].Защита = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеУведомления.Области[ИмяНестандартнойОбласти].Значение = РезультатВыбораКод;
	ИмяОбласти = ПолучитьИмяОбласти(ТекущийТипСтраницы);
	ИмяТаблицы = ПолучитьИмяТаблицы(ТекущийТипСтраницы);
	ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
	Данные = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
	СтруктураЗаписи = Новый Структура(ИмяНестандартнойОбласти, РезультатВыбораКод);
	Если Данные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяОбластиДоп) Тогда 
		СтруктураЗаписи = Новый Структура(ИмяОбластиДоп, "");
		Если Данные.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
		КонецЕсли;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаНО(Инфо)
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораРегистрацииВИФНС(ЭтотОбъект, Инфо);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаНОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Инфо = ДополнительныеПараметры.Инфо;
	
	Если Результат <> Неопределено Тогда 
		Объект.РегистрацияВИФНС = Результат;
		УстановитьДанныеПоРегистрацииВИФНС();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПоРегистрацииВИФНС()
	
	Организация = Объект.Организация;
	РегистрацияВИФНС = Объект.РегистрацияВИФНС;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВИФНС, "Представитель,Код,КПП,ДокументПредставителя");
	ТитульнаяСтраница[0].КОД_НО = Реквизиты.Код;
	ТитульнаяСтраница[0].П_КПП = Реквизиты.КПП;
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
			ПризнакПодписанта = "4";
		Иначе
			ПризнакПодписанта = "2";
		КонецЕсли;
		УстановитьПредставителяПоФизЛицу(Реквизиты.Представитель);
		Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
			ПредставлениеУведомления.Области["ПРИЗНАК_НП_ПОДВАЛ"].Значение = ПризнакПодписанта;
			ПредставлениеУведомления.Области["ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ"].Значение = Реквизиты.ДокументПредставителя;
		КонецЕсли;
		ТитульнаяСтраница[0].ПРИЗНАК_НП_ПОДВАЛ = ПризнакПодписанта;
		ТитульнаяСтраница[0].ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ = Реквизиты.ДокументПредставителя;
	Иначе
		УстановитьПредставителяПоОрганизации();
		Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
			ПризнакПодписанта = "3";
		Иначе
			ПризнакПодписанта = "1";
		КонецЕсли;
		
		Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
			ПредставлениеУведомления.Области["ПРИЗНАК_НП_ПОДВАЛ"].Значение = ПризнакПодписанта;
			ПредставлениеУведомления.Области["ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ"].Значение = "";
		КонецЕсли;
		ТитульнаяСтраница[0].ПРИЗНАК_НП_ПОДВАЛ = ПризнакПодписанта;
		ТитульнаяСтраница[0].ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ = "";
	КонецЕсли;
	
	Если ТекущийТипСтраницы = 1 Тогда
		ПредставлениеУведомления.Область("КОД_НО").Значение = ТитульнаяСтраница[0].КОД_НО;
		ПредставлениеУведомления.Область("П_КПП").Значение = ТитульнаяСтраница[0].П_КПП;
		ПредставлениеУведомления.Область("ПРИЗНАК_НП_ПОДВАЛ").Значение = ТитульнаяСтраница[0].ПРИЗНАК_НП_ПОДВАЛ;
		ПредставлениеУведомления.Область("ТЕЛЕФОН").Значение = ТитульнаяСтраница[0].ТЕЛЕФОН;
		ПредставлениеУведомления.Область("ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ").Значение = ТитульнаяСтраница[0].ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ;
		ПредставлениеУведомления.Область("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ").Значение = ТитульнаяСтраница[0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ;
		ПредставлениеУведомления.Область("ИНН_ПОДПИСАНТА").Значение = ТитульнаяСтраница[0].ИНН_ПОДПИСАНТА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставителяПоФизЛицу(Физлицо)
	Если ЗначениеЗаполнено(Физлицо) Тогда 
		ДанныеПредставителя = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(Физлицо, , Объект.ДатаПодписи);
		Фамилия = СокрЛП(ДанныеПредставителя.Фамилия);
		Имя = СокрЛП(ДанныеПредставителя.Имя);
		Отчество = СокрЛП(ДанныеПредставителя.Отчество);
		Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
			ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = СокрЛП(Фамилия + " " + Имя + " " + Отчество);
		КонецЕсли;
		ТитульнаяСтраница[0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = СокрЛП(Фамилия + " " + Имя + " " + Отчество);
	Иначе
		Фамилия = "";
		Имя = "";
		Отчество = "";
		Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
			ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = "";
		КонецЕсли;
		ТитульнаяСтраница[0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = "";
	КонецЕсли;
	
	Объект.ПодписантФамилия = Фамилия;
	Объект.ПодписантИмя = Имя;
	Объект.ПодписантОтчество = Отчество;
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставителяПоОрганизации()
	Документы.УведомлениеОСпецрежимахНалогообложения.УстановитьДанныеРуководителя(Объект);
	
	Если ПредставлениеУведомления.Области.Количество() > 0 Тогда 
		ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = СокрЛП(Объект.ПодписантФамилия + " " + Объект.ПодписантИмя + " " + Объект.ПодписантОтчество);
	КонецЕсли;
	ТитульнаяСтраница[0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = СокрЛП(Объект.ПодписантФамилия + " " + Объект.ПодписантИмя + " " + Объект.ПодписантОтчество);
КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьСтраницы()
	Для Инд = 1 По 4 Цикл 
		ИндЭлт = Инд + ?(ЮрЛицо,0,1);
		Листы = Разделы.ПолучитьЭлементы()[ИндЭлт].ПолучитьЭлементы();
		Номер = 1;
		Для Каждого Лист Из Листы Цикл 
			Лист.Наименование = "Стр."+Номер;
			Номер = Номер + 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ДобавитьСтраницуНаСервере(ТекущиеДанныеРод_UID = Неопределено)
	Если ТекущийТипСтраницы = 2 Тогда
		КорневойУровень = Разделы.ПолучитьЭлементы();
		ИндИО = 1 + ?(ЮрЛицо,0,1);
		СписокЛистов = КорневойУровень[ИндИО].ПолучитьЭлементы();
		НовыйЛист = СведИО.Добавить();
		ЗаполнитьСведИО(НовыйЛист);
		ДопЛист = СписокЛистов.Добавить();
		ДопЛист.ИндексКартинки = 1;
		ДопЛист.ТипСтраницы = 2;
		ДопЛист.Наименование = "Стр." + СведРО.Количество();
		ДопЛист.UID = НовыйЛист.UID;
		Возврат НовыйЛист.UID;
	ИначеЕсли ТекущийТипСтраницы = 3 Тогда
		КорневойУровень = Разделы.ПолучитьЭлементы();
		ИндРО = 2 + ?(ЮрЛицо,0,1);
		СписокЛистов = КорневойУровень[ИндРО].ПолучитьЭлементы();
		НовыйЛист = СведРО.Добавить();
		ЗаполнитьСведРО(НовыйЛист);
		ДопЛист = СписокЛистов.Добавить();
		ДопЛист.ИндексКартинки = 1;
		ДопЛист.ТипСтраницы = 3;
		ДопЛист.Наименование = "Стр." + СведРО.Количество();
		ДопЛист.UID = НовыйЛист.UID;
		Возврат НовыйЛист.UID;
	ИначеЕсли ТекущийТипСтраницы = 4 Тогда
		КорневойУровень = Разделы.ПолучитьЭлементы();
		ИндУч = 4 + ?(ЮрЛицо,0,1);
		СписокЛистов = КорневойУровень[ИндУч].ПолучитьЭлементы();
		НовыйЛист = СведУч.Добавить();
		ЗаполнитьСведУч(НовыйЛист);
		ДопЛист = СписокЛистов.Добавить();
		ДопЛист.ИндексКартинки = 1;
		ДопЛист.ТипСтраницы = 4;
		ДопЛист.Наименование = "Стр." + СведРО.Количество();
		ДопЛист.UID = НовыйЛист.UID;
		Возврат НовыйЛист.UID;
	ИначеЕсли ТекущийТипСтраницы = 6 Тогда
		КорневойУровень = Разделы.ПолучитьЭлементы();
		ИндУч = 3 + ?(ЮрЛицо,0,1);
		СписокЛистов = КорневойУровень[ИндУч].ПолучитьЭлементы();
		НовыйЛист = СведИС.Добавить();
		ЗаполнитьСведИС(НовыйЛист);
		ДопЛист = СписокЛистов.Добавить();
		ДопЛист.ИндексКартинки = 1;
		ДопЛист.ТипСтраницы = 6;
		ДопЛист.Наименование = "Стр." + СведИС.Количество();
		ДопЛист.UID = НовыйЛист.UID;
		
		СписокЛистовУч = ДопЛист.ПолучитьЭлементы();
		НовыйЛистУч = СведИСУч.Добавить();
		ЗаполнитьСведИСУч(НовыйЛистУч, НовыйЛист.UID);
		ДопЛистУч = СписокЛистовУч.Добавить();
		ДопЛистУч.ИндексКартинки = 1;
		ДопЛистУч.ТипСтраницы = 7;
		ДопЛистУч.Наименование = "Сведения об участнике";
		ДопЛистУч.UID = НовыйЛистУч.UID;
		Возврат НовыйЛист.UID;
	ИначеЕсли ТекущийТипСтраницы = 7 Тогда
		КорневойУровень = Разделы.ПолучитьЭлементы();
		ИндУч = 3 + ?(ЮрЛицо,0,1);
		СписокЛистов = КорневойУровень[ИндУч].ПолучитьЭлементы();
		Для Каждого Лист Из СписокЛистов Цикл 
			Если Лист.UID = ТекущиеДанныеРод_UID Тогда 
				ЛистыСведУчИС = Лист.ПолучитьЭлементы();
				НовыйЛистУч = СведИСУч.Добавить();
				ЗаполнитьСведИСУч(НовыйЛистУч, ТекущиеДанныеРод_UID);
				ДопЛистУч = ЛистыСведУчИС.Добавить();
				ДопЛистУч.ИндексКартинки = 1;
				ДопЛистУч.ТипСтраницы = 7;
				ДопЛистУч.Наименование = "Сведения об участнике";
				ДопЛистУч.UID = НовыйЛистУч.UID;
				Возврат НовыйЛистУч.UID;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаСервере
Функция УдалитьСтраницуНаСервере(UID, ТипСтраницы)
	ОтборСтрок = Новый Структура("UID", UID);
	ИмяТаблицы = ПолучитьИмяТаблицы(ТипСтраницы);
	Таблица = ЭтотОбъект[ИмяТаблицы];
	Строки = Таблица.НайтиСтроки(ОтборСтрок);
	Если РеквизитФормыВЗначение(ИмяТаблицы).Колонки.Найти("UID_parent") <> Неопределено Тогда 
		UID_parent = Строки[0].UID_parent;
	Иначе
		UID_parent = Неопределено;
	КонецЕсли;
	Если Автонумерация Тогда 
		ПеренумероватьПослеУдаления(ИмяТаблицы, Строки[0], Новый Массив);
	КонецЕсли;
	Таблица.Удалить(Строки[0]);
	Строки = МногострочнаяЧасть.НайтиСтроки(ОтборСтрок);
	Всего = Строки.Количество();
	
	Инд = Всего - 1;
	Пока Инд >= 0 Цикл 
		МногострочнаяЧасть.Удалить(Строки[Инд]);
		Инд = Инд - 1;
	КонецЦикла;
	
	Если UID_parent = Неопределено Тогда
		Возврат Таблица[0].UID;
	Иначе
		Возврат Таблица.НайтиСтроки(Новый Структура("UID_parent", UID_parent))[0].UID;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь,ВыполняемоеОповещение = Неопределено) Экспорт 
	
	СохранитьДанные();
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ВыгружаемыеДанные = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если ВыгружаемыеДанные <> Неопределено Тогда 
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	Если ТекущийТипСтраницы = 2 Или ТекущийТипСтраницы = 3 Или ТекущийТипСтраницы = 4 Или ТекущийТипСтраницы = 6 Тогда
		НовыйUID = ДобавитьСтраницуНаСервере();
		ПеренумероватьСтраницы();
		УстановитьДоступностьКнопок();
		ТитульнаяСтраница[0].КОЛИЧЕСТВО_СТРАНИЦ = 1 + ?(ЮрЛицо,0,1) + СведИО.Количество() + СведРО.Количество()
													+ СведУч.Количество() + СведИС.Количество() + СведИСУч.Количество();
		Модифицированность = Истина;
	ИначеЕсли ТекущийТипСтраницы = 7 Тогда
		НайденныйИД = РегламентированнаяОтчетностьКлиентСервер.НайтиИДВДереве(Разделы.ПолучитьЭлементы(), ТекущийИдентификаторСтраницы, UID_Пустой);
		ТекущиеДанныеРод_UID = Разделы.НайтиПоИдентификатору(НайденныйИД).ПолучитьРодителя().UID;
		
		НовыйUID = ДобавитьСтраницуНаСервере(ТекущиеДанныеРод_UID);
		ПеренумероватьСтраницы();
		УстановитьДоступностьКнопок();
		ТитульнаяСтраница[0].КОЛИЧЕСТВО_СТРАНИЦ = 1 + ?(ЮрЛицо,0,1) + СведИО.Количество() + СведРО.Количество()
													+ СведУч.Количество() + СведИС.Количество() + СведИСУч.Количество();
		Модифицированность = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.УстановитьТекущуюСтрокуВДеревеРазделов(ЭтотОбъект, НовыйUID);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	НайденныйИД = РегламентированнаяОтчетностьКлиентСервер.НайтиИДВДереве(Разделы.ПолучитьЭлементы(), ТекущийИдентификаторСтраницы, UID_Пустой);
	Если ТекущийИдентификаторСтраницы = UID_Пустой Тогда 
		Возврат;
	КонецЕсли;
	ЭлементДерева = Разделы.НайтиПоИдентификатору(НайденныйИД);
	ТС = ЭлементДерева.ТипСтраницы;
	UID = ЭлементДерева.UID;
	ТекущиеДанныеРодитель = ЭлементДерева.ПолучитьРодителя();
	Если ТекущиеДанныеРодитель.ПолучитьЭлементы().Количество() <= 1 Тогда 
		Возврат;
	КонецЕсли;
	UID_новый = УдалитьСтраницуНаСервере(UID, ТС);
	Для Каждого Стр Из ТекущиеДанныеРодитель.ПолучитьЭлементы() Цикл 
		Если Стр.UID = UID Тогда
			ТекущиеДанныеРодитель.ПолучитьЭлементы().Удалить(Стр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Инд = СведИСУч.Количество();
	Пока Инд > 0 Цикл 
		Инд = Инд - 1;
		Если СведИСУч[Инд].UID_parent = UID Тогда 
			СведИСУч.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	ПеренумероватьСтраницы();
	УстановитьДоступностьКнопок();
	РегламентированнаяОтчетностьКлиент.УстановитьТекущуюСтрокуВДеревеРазделов(ЭтотОбъект, UID_новый);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗначениеКопирования = Неопределено;
	Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования);
	
	UID_Пустой = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	Если Не Параметры.Свойство("Ключ") Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Объект.Организация = Параметры.Организация;
		Если Параметры.Свойство("НалоговыйОрган") И ЗначениеЗаполнено(Параметры.НалоговыйОрган) Тогда 
			Объект.РегистрацияВИФНС = Параметры.НалоговыйОрган;
		Иначе
			Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ДатаПодписи = ТекущаяДатаСеанса();
		ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + " (создание)";
	КонецЕсли;
	
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭтаФорма.ИмяФормы, ".");
	Объект.ИмяФормы = Разложение[3];
	Объект.ИмяОтчета = Разложение[1];
	
	ЗагрузитьДанные(ЗначениеКопирования);
	Элементы.ФормаАвтонумерация.Пометка = Автонумерация;
	Элементы.ФормаПеренумеровать.Доступность = Не Автонумерация;
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗагрузитьМакетыУведомления(ЭтотОбъект, Объект.ИмяОтчета, "ПараметрыФорма2015_1");
	СформироватьДерево();
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	Число18_15 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 15, ДопустимыйЗнак.Неотрицательный));
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, , УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	Если ТекущийИдентификаторСтраницы = Элемент.ТекущиеДанные.UID И
		ТекущийТипСтраницы = Элемент.ТекущиеДанные.ТипСтраницы Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	СобратьДанныеСТекущейСтраницы();
	
	Если Элемент.ТекущиеДанные.ТипСтраницы = 0 Тогда
		ПодчиненныеЭлементыДерева = Элемент.ТекущиеДанные.ПолучитьЭлементы();
		ТекущийИдентификаторСтраницы = ПодчиненныеЭлементыДерева[0].UID;
		ТекущийТипСтраницы = ПодчиненныеЭлементыДерева[0].ТипСтраницы;
		СформироватьМакетНаСервере();
		УстановитьДоступностьКнопок();
		Возврат;
	КонецЕсли;
	
	ТекущийИдентификаторСтраницы = Элемент.ТекущиеДанные.UID;
	ТекущийТипСтраницы = Элемент.ТекущиеДанные.ТипСтраницы;
	UID_СведУч = ?(ТекущийТипСтраницы = 4, ТекущийИдентификаторСтраницы, UID_Пустой);
	СформироватьМакетНаСервере();
	УстановитьДоступностьКнопок();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияВыбор(Элемент, Область, СтандартнаяОбработка)
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 Тогда
		ДобавитьСтраницу(Неопределено);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
		УдалитьСтраницу(Неопределено);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 Тогда
		ДобавитьСтроку();
		СтандартнаяОбработка = Ложь;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 Тогда
		УдалитьСтроку(Область);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	ОтборПоИмениОбласти = Новый Структура("Имя", Область.Имя);
	Поля = ПоляСОсобымПорядкомЗаполнения.НайтиСтроки(ОтборПоИмениОбласти);
	Если Поля.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НестандартнаяОбработка(Поля[0], Элемент);
	КонецЕсли;
	
	Если Область.Имя = "ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ" Тогда 
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораФИО(ЭтотОбъект, СтандартнаяОбработка, "ПредставлениеУведомления", "ТитульнаяСтраница");
	ИначеЕсли Лев(Область.Имя, СтрДлина("НомерУчастника")) = "НомерУчастника" Тогда 
		ВыборНомерУчастника = Новый ОписаниеОповещения("ВыборНомерУчастникаЗавершение", ЭтотОбъект);
		ПараметрыВыборНомерУчастника = Новый Структура("ЗначениеОбласти, ИмяОбласти", Область.Значение, Область.Имя);
		Если Область.Имя = "НомерУчастника" Тогда 
			ПараметрыВыборНомерУчастника.Вставить("ФиксированныйТип", 1);
		КонецЕсли;
		ОткрытьФорму("Отчет.РегламентированноеУведомлениеУ_ИО.Форма.ФормаВыборНомерУчастника", ПараметрыВыборНомерУчастника, ЭтотОбъект,,,,ВыборНомерУчастника,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли Область.Имя = "КодСтрИностранец" Или Область.Имя = "КодСтраныРегистрации" Или Область.Имя = "КодСтранаРегистрации" Или Область.Имя = "КодСтраныСтр" Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("Область, СтандартнаяОбработка, Элемент", Область, СтандартнаяОбработка, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраныЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник.СтраныМира.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КодЭлементаСправочника(Результат)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат, "Код");
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		КодЭлементаСправочника = КодЭлементаСправочника(Результат);
		Область = ДополнительныеПараметры.Область;
		Если Область.Значение <> КодЭлементаСправочника Тогда
			Область.Значение = КодЭлементаСправочника;
			Модифицированность = Истина;
		КонецЕсли;
		ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(Элементы.ПредставлениеУведомления, Область);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборНомерУчастникаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда 
		ТипЧисло = Новый ОписаниеТипов("Число");
		МассивДопОбл = Неопределено;
		Результат = Неопределено;
		ИмяОбласти = Неопределено;
		
		Ответ.Свойство("ИмяОбласти", ИмяОбласти);
		Ответ.Свойство("Результат", Результат);
		Если Ответ.Свойство("Очистить") Тогда 
			Результат = "";
		КонецЕсли;
		Область = ПредставлениеУведомления.Области[ИмяОбласти];
		ЧисловойНомер = ТипЧисло.ПривестиЗначение(Сред(Результат, 4));
		Если Автонумерация = Истина Тогда 
			Если Лев(Результат, 3) = "ИО-" Тогда 
				Если СведИО.НайтиСтроки(Новый Структура("ИО_Номер", ЧисловойНомер)).Количество() = 0 Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдена иностранная организация с номером " + ЧисловойНомер);
					Возврат;
				КонецЕсли;
			ИначеЕсли Лев(Результат, 3) = "РО-" Тогда
				Если СведРО.НайтиСтроки(Новый Структура("РО_Номер", ЧисловойНомер)).Количество() = 0 Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдена российская организация с номером " + ЧисловойНомер);
					Возврат;
				КонецЕсли;
			ИначеЕсли Лев(Результат, 3) = "ИС-" Тогда
				Если СведИС.НайтиСтроки(Новый Структура("НомерСтруктуры", ЧисловойНомер)).Количество() = 0 Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдена иностранная структура с номером " + ЧисловойНомер);
					Возврат;
				КонецЕсли;
			ИначеЕсли Результат <> "" Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Область.Значение = Результат;
		Если ИмяОбласти = "НомерУчастника" Тогда 
			СтраницаА = СведИО.НайтиСтроки(Новый Структура("ИО_Номер", ЧисловойНомер));
			
			ОблНаимРус = ПредставлениеУведомления.Области.Найти("ПолноеНаименование");
			ОблДоляКосвУч = ПредставлениеУведомления.Области.Найти("ДоляКосвУчастия");
			Если СтраницаА.Количество() = 0 Тогда
				ОблНаимРус.Значение = Неопределено;
				ОблДоляКосвУч.Значение = Неопределено;
			Иначе
				ОблНаимРус.Значение = СтраницаА[0].ИО_ПолноеНаименование_RUS;
				Если СтраницаА[0].ПрУч1 = "2" Тогда 
					ОблДоляКосвУч.Значение = СтраницаА[0].ДоляУчастия1;
				Иначе
					ОблДоляКосвУч.Значение = Неопределено;
				КонецЕсли;
			КонецЕсли;
			МассивДопОбл = Новый Массив();
			МассивДопОбл.Добавить(ОблНаимРус);
			МассивДопОбл.Добавить(ОблДоляКосвУч);
		КонецЕсли;
		ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(ПредставлениеУведомления, Область, МассивДопОбл);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	СобратьДанныеСТекущейСтраницы();
	НовСтр = МногострочнаяЧасть.Добавить();
	НовСтр.UID = UID_СведУч;
	СформироватьМакетНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку()
	ДобавитьСтрокуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Область)
	УдалитьСтрокуНаСервере(Область.Имя);
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере(ОбластьИмя)
	СобратьДанныеСТекущейСтраницы();
	НомТекСтр = Число(Прав(ОбластьИмя , СтрДлина(ОбластьИмя) - СтрДлина("УдалитьСтроку_")));
	Строки = МногострочнаяЧасть.НайтиСтроки(Новый Структура("UID", UID_СведУч));
	КоличествоСтрок = Строки.Количество();
	МногострочнаяЧасть.Удалить(Строки[НомТекСтр - 1]);
	Если КоличествоСтрок = 1 Тогда 
		НовСтр = МногострочнаяЧасть.Добавить();
		НовСтр.UID = UID_СведУч;
	КонецЕсли;
	СформироватьМакетНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(Элемент, Область, МассивДопОбл = Неопределено)
	ИмяОбласти = ПолучитьИмяОбласти(ТекущийТипСтраницы);
	Если Не ЗначениеЗаполнено(ИмяОбласти) Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = ПолучитьИмяТаблицы(ТекущийТипСтраницы);
	ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
	Данные = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
	СтруктураЗаписи = Новый Структура(Область.Имя, Область.Значение);
	Если ТипЗнч(МассивДопОбл) = Тип("Массив") Тогда 
		Для Каждого Обл Из МассивДопОбл Цикл 
			СтруктураЗаписи.Вставить(Обл.Имя, Обл.Значение);
		КонецЦикла;
	КонецЕсли;
	Если Данные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
	КонецЕсли;
	
	Если Область.Имя = "П_КПП" Тогда
		Для Каждого Стр Из СведИО Цикл 
			Стр.П_КПП_2 = Область.Значение;
		КонецЦикла;
		Для Каждого Стр Из СведИС Цикл 
			Стр.П_КПП_5 = Область.Значение;
		КонецЦикла;
		Для Каждого Стр Из СведИСУч Цикл 
			Стр.П_КПП_6 = Область.Значение;
		КонецЦикла;
		Для Каждого Стр Из СведРО Цикл 
			Стр.П_КПП_3 = Область.Значение;
		КонецЦикла;
		Для Каждого Стр Из СведУч Цикл 
			Стр.П_КПП_4 = Область.Значение;
		КонецЦикла;
	ИначеЕсли Область.Имя = "П_ИНН" Тогда
		Для Каждого Стр Из СведИО Цикл 
			Стр.П_ИНН_2 = Область.Значение;
		КонецЦикла;
		Для Каждого Стр Из СведИС Цикл 
			Стр.П_ИНН_5 = Область.Значение;
		КонецЦикла;
		Для Каждого Стр Из СведИСУч Цикл 
			Стр.П_ИНН_6 = Область.Значение;
		КонецЦикла;
		Для Каждого Стр Из СведРО Цикл 
			Стр.П_ИНН_3 = Область.Значение;
		КонецЦикла;
		Для Каждого Стр Из СведУч Цикл 
			Стр.П_ИНН_4 = Область.Значение;
		КонецЦикла;
		Для Каждого Стр Из СведФЛ Цикл 
			Стр.П_ИНН1 = Область.Значение;
		КонецЦикла;
	ИначеЕсли Область.Имя = "ДАТА_ПОДПИСИ" Тогда
		Объект.ДатаПодписи = Область.Значение;
		УстановитьДанныеПоРегистрацииВИФНС();
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.Разделы.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУведомления(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ТекстВопроса = "Перед печатью необходимо сохранить изменения. Сохранить изменения?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьУведомленияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ПФ = СформироватьПечатнуюФорму();
		Если ПФ <> Неопределено Тогда 
			ПФ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУведомленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПФ = СформироватьПечатнуюФорму();
		Если ПФ <> Неопределено Тогда 
			ПФ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = "Перед печатью необходимо сохранить изменения. Сохранить изменения?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	ИначеЕсли Модифицированность Тогда 
		СохранитьДанные();
	КонецЕсли;
	
	МассивПечати = Новый Массив;
	МассивПечати.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.УведомлениеОСпецрежимахНалогообложения",
		"Уведомление", МассивПечати, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьДанные();
		МассивПечати = Новый Массив;
		МассивПечати.Добавить(Объект.Ссылка);
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.УведомлениеОСпецрежимахНалогообложения",
			"Уведомление", МассивПечати, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СформироватьПечатнуюФорму()
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ПечатьСразу();
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
	Закрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция СформироватьВыгрузкуИПолучитьДанные() Экспорт 
	Выгрузка = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если Выгрузка = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	Выгрузка = Выгрузка[0];
	Возврат Новый Структура("ТестВыгрузки,КодировкаВыгрузки,Данные,ИмяФайла", 
			Выгрузка.ТестВыгрузки, Выгрузка.КодировкаВыгрузки, 
			Отчеты[Объект.ИмяОтчета].ПолучитьМакет("TIFF_2015_1"),
			"1120411_5.01000_01.tif");
КонецФункции

&НаКлиенте
Процедура Перенумеровать(Команда)
	Оповещение = Новый ОписаниеОповещения("ПеренумероватьЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='При перенумерации страниц данные листов Г будут очищены. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьЛистыАБВ()
	НомСтр = 1;
	Для Каждого Стр Из СведИО Цикл 
		Стр.ИО_Номер = НомСтр;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	НомСтр = 1;
	Для Каждого Стр Из СведРО Цикл 
		Стр.РО_Номер = НомСтр;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	НомСтр = 1;
	Для Каждого Стр Из СведИС Цикл 
		Стр.НомерСтруктуры = НомСтр;
		НомСтр = НомСтр + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЛистыГ()
	НайденныйИД = РегламентированнаяОтчетностьКлиентСервер.НайтиИДВДереве(Разделы.ПолучитьЭлементы(), СведУч[0].UID, UID_Пустой);
	НайденныйИД_родитель = Разделы.НайтиПоИдентификатору(НайденныйИД).ПолучитьРодителя();
	
	СведУч.Очистить();
	НовСведУч = СведУч.Добавить();
	НовСведУч.П_ИНН_4 = ТитульнаяСтраница[0].П_ИНН;
	НовСведУч.П_КПП_4 = ТитульнаяСтраница[0].П_КПП;
	НовСведУч.UID = Новый УникальныйИдентификатор;
	
	МногострочнаяЧасть.Очистить();
	НовСтрМнгч = МногострочнаяЧасть.Добавить();
	НовСтрМнгч.UID = НовСведУч.UID;
	
	СведУчНов = НайденныйИД_родитель.ПолучитьЭлементы();
	СведУчНов.Очистить();
	ЛистСведУчНов = СведУчНов.Добавить();
	ЛистСведУчНов.ИндексКартинки = 1;
	ЛистСведУчНов.ТипСтраницы = 4;
	ЛистСведУчНов.Наименование = "Стр.1";
	ЛистСведУчНов.UID = НовСведУч.UID;
	
	НайденныйИД = РегламентированнаяОтчетностьКлиентСервер.НайтиИДВДереве(Разделы.ПолучитьЭлементы(), ТитульнаяСтраница[0].UID, UID_Пустой);
	Элементы.Разделы.ТекущаяСтрока = НайденныйИД;
КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренумероватьЛистыАБВ();
		ОчиститьЛистыГ();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Отправка в ФНС

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Автонумерация(Команда)
	Автонумерация = Не Автонумерация;
	Элементы.ФормаАвтонумерация.Пометка = Автонумерация;
	Элементы.ФормаПеренумеровать.Доступность = Не Автонумерация;
	ДоступностьОбластейНумерации(ПредставлениеУведомления, Автонумерация);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДоступностьОбластейНумерации(ПредставлениеУведомления, Автонумерация)
	Если Автонумерация Тогда 
		Цвет = Новый Цвет(255,255,255);
		Защита = Истина;
	Иначе
		Цвет = Новый Цвет(255,255,192);
		Защита = Ложь;
	КонецЕсли;
	
	Обл = ПредставлениеУведомления.Области.Найти("ИО_Номер");
	Если Обл <> Неопределено Тогда 
		Обл.Защита = Защита;
		Обл.ЦветФона = Цвет;
	КонецЕсли;
	Обл = ПредставлениеУведомления.Области.Найти("РО_Номер");
	Если Обл <> Неопределено Тогда 
		Обл.Защита = Защита;
		Обл.ЦветФона = Цвет;
	КонецЕсли;
	Обл = ПредставлениеУведомления.Области.Найти("НомерСтруктуры");
	Если Обл <> Неопределено Тогда 
		Обл.Защита = Защита;
		Обл.ЦветФона = Цвет;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьПослеУдаления(ИмяТаблицы, Строка, МассивКУдалению)
	Таблица = ЭтотОбъект[ИмяТаблицы];
	Колонки = РеквизитФормыВЗначение(ИмяТаблицы).Колонки;
	Если Колонки.Найти("ИО_Номер") <> Неопределено Тогда 
		ИмяПоля = "ИО_Номер";
		Префикс = "ИО-";
		Номер = Строка[ИмяПоля];
	ИначеЕсли Колонки.Найти("РО_Номер") <> Неопределено Тогда 
		ИмяПоля = "РО_Номер";
		Префикс = "РО-";
		Номер = Строка[ИмяПоля];
	ИначеЕсли Колонки.Найти("НомерСтруктуры") <> Неопределено Тогда 
		ИмяПоля = "НомерСтруктуры";
		Префикс = "ИС-";
		Номер = Строка[ИмяПоля];
	Иначе
		Возврат;
	КонецЕсли;
	
	СтрКУдалению = Префикс + Формат(Номер, "ЧЦ=5; ЧВН=; ЧГ=");
	СоответствиеЗамен = Новый Соответствие;
	Для Каждого Стр Из Таблица Цикл 
		НомИтер = Стр[ИмяПоля];
		Если НомИтер > Номер Тогда 
			СоответствиеЗамен[Префикс + Формат(НомИтер, "ЧЦ=5; ЧВН=; ЧГ=")] = Префикс + Формат(НомИтер - 1, "ЧЦ=5; ЧВН=; ЧГ=");
			Стр[ИмяПоля] = НомИтер - 1;
		КонецЕсли;
	КонецЦикла;
	
	Инд = 0;
	УдаленныеUID = Новый Соответствие;
	Пока Инд < МногострочнаяЧасть.Количество() Цикл 
		Стр = МногострочнаяЧасть[Инд];
		Если Стр.НомерУчастника = СтрКУдалению Тогда 
			УдаленныеUID[МногострочнаяЧасть[Инд].UID] = 0;
			МногострочнаяЧасть.Удалить(Инд);
			Продолжить;
		КонецЕсли;
		
		Если СоответствиеЗамен[Стр.НомерУчастника] <> Неопределено Тогда 
			Стр.НомерУчастника = СоответствиеЗамен[Стр.НомерУчастника];
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	
	Для Каждого КЗ Из УдаленныеUID Цикл 
		Если МногострочнаяЧасть.НайтиСтроки(Новый Структура("UID", КЗ.Ключ)).Количество() = 0 Тогда 
			МногострочнаяЧасть.Добавить().UID = КЗ.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	МассивКУдалению = Новый Массив;
	Если Префикс = "ИО-" Тогда 
		Для Каждого Стр Из СведУч Цикл 
			Если Стр.НомерУчастника = СтрКУдалению Тогда 
				МассивКУдалению.Добавить(Стр.UID);
			КонецЕсли;
			
			Если СоответствиеЗамен[Стр.НомерУчастника] <> Неопределено Тогда 
				Стр.НомерУчастника = СоответствиеЗамен[Стр.НомерУчастника];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтартовыйИндекс = ?(МассивКУдалению.Количество()=СведУч.Количество(),1,0);
	Если СтартовыйИндекс = 1 Тогда 
		UIDНеУдаляемый = СведУч[0].UID;
	КонецЕсли;
	
	Для Инд = 0 По МассивКУдалению.Количество() - 1 Цикл 
		Удалять = МногострочнаяЧасть.НайтиСтроки(Новый Структура("UID", МассивКУдалению[Инд]));
		Для Каждого Стр Из Удалять Цикл 
			МногострочнаяЧасть.Удалить(Стр);
		КонецЦикла;
		
		Удалять = СведУч.НайтиСтроки(Новый Структура("UID", МассивКУдалению[Инд]));
		Для Каждого Стр Из Удалять Цикл 
			СведУч.Удалить(Стр);
		КонецЦикла;
	КонецЦикла;
	
	Если СтартовыйИндекс = 1 Тогда 
		ЗаполнитьСведУч(СведУч.Добавить(), UIDНеУдаляемый);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыгрузкуНаСервере()
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ПроверитьДокумент(УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	ПроверитьВыгрузкуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьУведомлениеИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры