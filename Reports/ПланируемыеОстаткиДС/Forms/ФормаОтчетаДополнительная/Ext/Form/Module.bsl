////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура записывает параметр пользовательской настройки на сервере
//
// ИмяПараметра - текстовый идентификатор параметра
// ЗначениеПараметра - значение параметра для записи
//
&НаСервере
Процедура УстановитьПараметрНаСервере(ИмяПараметра, ЗначениеПараметра)
	
	НастройкаКомпоновки	= Отчет.КомпоновщикНастроек.Настройки;
	НайденнаяНастройка	= НастройкаКомпоновки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если НЕ НайденнаяНастройка = Неопределено Тогда
		
		НайденнаяНастройка.Использование = Истина;
		НайденнаяНастройка.Значение = ЗначениеПараметра;
		
		ЭлементПользовательскойНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(НайденнаяНастройка.ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскойНастройки <> Неопределено Тогда
			ЭлементПользовательскойНастройки.Использование = Истина;
			ЭлементПользовательскойНастройки.Значение = ЗначениеПараметра;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // УстановитьПараметрНаСервере()

// Процедура устанавливает новое значение элемента отбора 
// пользовательской настройки компоновки данных
//
// СоответствиеОтбораКомпоновки - соответствие, содержит элементы отбора настройки компоновки данных и их идентификаторы
// ЭлементОтбораИзПараметров - элемент структуры параметров формы, содержит ключ и значение элементы отбора
// ОтборПользовательскихНастроек - коллекция элементов отбора пользовательских настроек
// ЗначениеОтбора - значение отбора
// ВидСравненияКомпоновки - вид сравнения компоновки данных
// Использование - значение использования отбора компоновки данных
//
&НаСервере
Процедура УстановитьЭлементОтбораКомпоновкиДанныхНаСервере(СоответствиеОтбораКомпоновки, ИмяЭлементаОтбора, ОтборПользовательскихНастроек, ЗначениеОтбора, ВидСравненияКомпоновки, Использование)
	
	НовоеПолеОтбораКомпоновки	= Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора);
	ИдПользовательскойНастройки	= СоответствиеОтбораКомпоновки.Получить(НовоеПолеОтбораКомпоновки);
	
	Если НЕ ИдПользовательскойНастройки = Неопределено Тогда
		
		ЭлементПользовательскойНастройки = ОтборПользовательскихНастроек.Элементы.Найти(ИдПользовательскойНастройки);
		
		Если НЕ ЭлементПользовательскойНастройки = Неопределено Тогда
			
			ЭлементПользовательскойНастройки.Использование = Использование;
			ЭлементПользовательскойНастройки.ВидСравнения = ВидСравненияКомпоновки;
			ЭлементПользовательскойНастройки.ПравоеЗначение = ЗначениеОтбора;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЭлементОтбораКомпоновкиДанныхНаСервере()

// Функция создает, заполняет и возращает соответствие элементов отбора настройки компоновки данных и их идентификаторов
//
&НаСервере
Функция ПолучитьСоответствиеЭлементовОтбораНастроекКомпоновкиНаСервере()
	
	СоответствиеОтбораКомпоновки = Новый Соответствие();
	
	ОтборКомпоновки	= Отчет.КомпоновщикНастроек.Настройки.Отбор;
	Для каждого ЭлементОтбораКомпоновки Из ОтборКомпоновки.Элементы Цикл
		
		СоответствиеОтбораКомпоновки.Вставить(ЭлементОтбораКомпоновки.ЛевоеЗначение, ЭлементОтбораКомпоновки.ИдентификаторПользовательскойНастройки);
		
	КонецЦикла;
	
	Возврат СоответствиеОтбораКомпоновки;
	
КонецФункции // ПолучитьСоответствиеЭлементовОтбораНастроекКомпоновкиНаСервере()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ


// Процедура устанавливает внешний вид кнопок периодов на форме
//
// НазваниеКнопки - текстовый идентификатор кнопки, которую требуется перевести в состояние "Включено".
//					остальные кнопки примут состояние "Выключено".
//					Если кнопка не найдена, все кнопки примут состояние "Выключено".
//
&НаКлиенте
Процедура ВключитьКнопкуНаКлиенте(НазваниеКнопкки)
	
	Если НЕ ЗначениеЗаполнено(НазваниеКнопкки) Тогда
		
		ПереключениеПериодов = "";
		
	Иначе
		
		ПереключениеПериодов = НазваниеКнопкки;
		
	КонецЕсли;
	
КонецПроцедуры // ВключитьКнопкуНаКлиенте()

// Процедура устанавливает параметры компоновки данных и надпись периода на форме
// по полученным параметрам
//
// Изменяемые параметры компоновки данных:
// Начало периода - дата, начала периода формирования отчета
// Конец периода - дата, окончания периода формирования отчета
//
&НаСервере
Процедура УстановитьПериод(НазваниеПериода, Направление)
	
	ЗначениеНачалаПериода 		= НачалоДня(ТекущаяДата());
	ЗначениеОкончанияПериода	= КонецДня(ТекущаяДата());
	
	Если НазваниеПериода = "Неделя" Тогда
		
		КонецПериода = ?(КонецПериода = Дата(1,1,1), ТекущаяДата(), КонецПериода);
		
		ЗначениеНачалаПериода 		= НачалоНедели(КонецПериода + (86400 * 7 * Направление));
		ЗначениеОкончанияПериода	= КонецНедели(КонецПериода + (86400 * 7 * Направление));
		
	ИначеЕсли НазваниеПериода = "Месяц" Тогда
		
		КонецПериода = ?(КонецПериода = Дата(1,1,1), ТекущаяДата(), КонецПериода);
		
		ЗначениеНачалаПериода 		= НачалоМесяца(ДобавитьМесяц(КонецПериода, (1 * Направление)));
		ЗначениеОкончанияПериода	= КонецМесяца(ДобавитьМесяц(КонецПериода, (1 * Направление)));
		
	ИначеЕсли НазваниеПериода = "Квартал" Тогда
		
		КонецПериода = ?(КонецПериода = Дата(1,1,1), ТекущаяДата(), КонецПериода);
		
		ЗначениеНачалаПериода 		= НачалоКвартала(ДобавитьМесяц(КонецПериода, (3 * Направление)));
		ЗначениеОкончанияПериода	= КонецКвартала(ДобавитьМесяц(КонецПериода, (3 * Направление)));
		
	ИначеЕсли НазваниеПериода = "Год" Тогда
		
		КонецПериода = ?(КонецПериода = Дата(1,1,1), ТекущаяДата(), КонецПериода);
		
		ЗначениеНачалаПериода 		= НачалоГода(ДобавитьМесяц(КонецПериода, (12 * Направление)));
		ЗначениеОкончанияПериода	= КонецГода(ДобавитьМесяц(КонецПериода, (12 * Направление)));
		
	КонецЕсли;
		
	УстановитьПараметрНаСервере("НачалоПериода", ЗначениеНачалаПериода);
	УстановитьПараметрНаСервере("КонецПериода", ЗначениеОкончанияПериода);
	
	НачалоПериода = ЗначениеНачалаПериода;
	КонецПериода = ЗначениеОкончанияПериода;
	
	Результат.Очистить();
	
	//Укажем пользователю на необходимость сформировать (обновить) отчет
	Результат.Область(2,2,2,2).Текст 		= Нстр("ru = 'Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.'");
	Результат.Область(2,2,2,2).ЦветТекста 	= Новый Цвет(138,138,138);
	Результат.Область(2,2,2,2).Шрифт 		= Новый Шрифт(Результат.Область(2,2,2,2).Шрифт, ,12);
	
КонецПроцедуры // УстановитьПериод()

// Процедура формирует и обновляет надпись периода на форме
//
&НаКлиенте
Процедура УстановитьНадписьПериода()
	
	//Если не одна кнопка не включена - произвольный период
	Если ПустаяСтрока(ПереключениеПериодов) Тогда
		
		ПредставлениеПериода = "Произвольный период";
		
	ИначеЕсли Месяц(НачалоПериода) = Месяц(КонецПериода) Тогда
		
		ДеньРасписанияНачало = Формат(НачалоПериода, "ДФ=дд");
		ДеньРасписанияОкончание = Формат(КонецПериода, "ДФ=дд");
		МесяцРасписанияОкончание = Формат(КонецПериода, "ДФ=МММ");
		ГодРасписания = Формат(Год(КонецПериода), "ЧГ=0");
		
		ПредставлениеПериода = ДеньРасписанияНачало + " - " + ДеньРасписанияОкончание + " " + МесяцРасписанияОкончание + ", " + ГодРасписания;
		
	Иначе
		
		ДеньРасписанияНачало = Формат(НачалоПериода, "ДФ=дд");
		МесяцРасписанияНачало = Формат(НачалоПериода, "ДФ=МММ");
		ДеньРасписанияОкончание = Формат(КонецПериода, "ДФ=дд");
		МесяцРасписанияОкончание = Формат(КонецПериода, "ДФ=МММ");
		
		Если Год(НачалоПериода) = Год(КонецПериода) Тогда
			ГодРасписания = Формат(Год(КонецПериода), "ЧГ=0");
			ПредставлениеПериода = ДеньРасписанияНачало + " " + МесяцРасписанияНачало + " - " + ДеньРасписанияОкончание + " " + МесяцРасписанияОкончание + ", " + ГодРасписания;
			
		Иначе
			ГодРасписанияНачало = Формат(Год(НачалоПериода), "ЧГ=0");
			ГодРасписанияОкончание = Формат(Год(КонецПериода), "ЧГ=0");
			ПредставлениеПериода = ДеньРасписанияНачало + " " + МесяцРасписанияНачало + " " + ГодРасписанияНачало + " - " + ДеньРасписанияОкончание + " " + МесяцРасписанияОкончание + " " + ГодРасписанияОкончание;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьНадписьПериода()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВалютаИтогов = Константы.ВалютаУчета.Получить();
	УстановитьПараметрНаСервере("ВалютаИтогов", ВалютаИтогов);
	
	// Кнопки и параметры 
	Если Параметры.Свойство("Период") Тогда
		
		Если НЕ Параметры.Период = Неопределено Тогда
			
			ПереключениеПериодов = СокрЛП(Параметры.Период);
			
			ТекущаяДата 	= ТекущаяДата();
			КонецПериода  	= Параметры["КонецПериода"];
			
			УстановитьПараметрНаСервере("ТекущаяДата", ТекущаяДата);
			УстановитьПараметрНаСервере("КонецПериода", КонецПериода);
			
		КонецЕсли;
		
	Иначе
		
		ПереключениеПериодов = "ПериодНеделя";
		
		ТекущаяДата   = ТекущаяДата();
		НачалоПериода = НачалоНедели(ТекущаяДата());
		КонецПериода  = КонецНедели(ТекущаяДата());
		
		УстановитьПараметрНаСервере("ТекущаяДата", ТекущаяДата);
		УстановитьПараметрНаСервере("НачалоПериода", НачалоПериода);
		УстановитьПараметрНаСервере("КонецПериода", КонецПериода);
		
	КонецЕсли;
	
	Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;
	
	//Укажем пользователю на необходимость сформировать отчет
	Результат.Область(2,2,2,2).Текст 		= Нстр("ru = 'Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.'");
	Результат.Область(2,2,2,2).ЦветТекста 	= Новый Цвет(138,138,138);
	Результат.Область(2,2,2,2).Шрифт 		= Новый Шрифт(Результат.Область(2,2,2,2).Шрифт, ,12);
	
	// Установим отборы компоновки данных
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		
		Для каждого ЭлементОтбораИзПараметров Из Параметры.Отбор Цикл
		
			УстановитьЭлементОтбораКомпоновкиДанныхНаСервере(ПолучитьСоответствиеЭлементовОтбораНастроекКомпоновкиНаСервере(), 
					ЭлементОтбораИзПараметров.Ключ, 
					Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, 
					ЭлементОтбораИзПараметров.Значение, 
					ВидСравненияКомпоновкиДанных.Равно,
					Истина);
			
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьНадписьПериода();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПриИзменении поля "Компоновщик настроек нользовательские настройки".
// В процедуре определяется ситуация, когда при изменении пользовательской настройки 
// дат "Начала периода" или "Конец периода" изменяется надпись периода на форме отчета
//
&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриИзменении(Элемент)
	
	//Идентификатор компоновки данных
	ИдентификаторКомпоновкиДанных = Элемент.ТекущаяСтрока;
	ОбъектКомпоновкиДанных = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКомпоновкиДанных);
	
	Если НЕ ОбъектКомпоновкиДанных = Неопределено
		И ТипЗнч(ОбъектКомпоновкиДанных) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		
		ВыключитьКнопкиПериодов = Ложь;
		
		Если ОбъектКомпоновкиДанных.Параметр = Новый ПараметрКомпоновкиДанных("ТекущаяДата") Тогда
			
			Сообщить("Невозможно изменить текущую дату");
			ОбъектКомпоновкиДанных.Значение = ТекущаяДата();
			
		КонецЕсли;
		
		Если ОбъектКомпоновкиДанных.Параметр = Новый ПараметрКомпоновкиДанных("КонецПериода") Тогда
			
			КонецПериода 			= Дата(ОбъектКомпоновкиДанных.Значение);
			ВыключитьКнопкиПериодов = Истина;
			
		КонецЕсли;
		
		Если ОбъектКомпоновкиДанных.Параметр = Новый ПараметрКомпоновкиДанных("ВалютаИтогов") Тогда
			
			ВалютаИтогов			= ОбъектКомпоновкиДанных.Значение;
			
		КонецЕсли;
		
		Если ВыключитьКнопкиПериодов Тогда
			
			ВключитьКнопкуНаКлиенте(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьНадписьПериода();
	
КонецПроцедуры // КомпоновщикНастроекПользовательскиеНастройкиПриИзменении()

&НаКлиенте
Процедура ПереключениеПериодовПриИзменении(Элемент)
	
	Если ПереключениеПериодов = "ПериодНеделя" Тогда
		
		ПериодНеделя("");
		
	ИначеЕсли ПереключениеПериодов = "ПериодМесяц" Тогда
		
		ПериодМесяц("");
		
	ИначеЕсли ПереключениеПериодов = "ПериодКвартал" Тогда
		
		ПериодКвартал("");
		
	ИначеЕсли ПереключениеПериодов = "ПериодГод" Тогда
		
		ПериодГод("");
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Процедура вызывается при нажатии кнопки "Год" на форме отчета
// 
&НаКлиенте
Процедура ПериодГод(Команда)
	
	ВключитьКнопкуНаКлиенте("ПериодГод");
	УстановитьПериод("Год", 0);
	УстановитьНадписьПериода();
	
КонецПроцедуры // ПериодГод()

// Процедура вызывается при нажатии кнопки "Квартал" на форме отчета
// 
&НаКлиенте
Процедура ПериодКвартал(Команда)
	
	ВключитьКнопкуНаКлиенте("ПериодКвартал");
	УстановитьПериод("Квартал", 0);
	УстановитьНадписьПериода();
	
КонецПроцедуры // ПериодКвартал()

// Процедура вызывается при нажатии кнопки "Месяц" на форме отчета
// 
&НаКлиенте
Процедура ПериодМесяц(Команда)
	
	ВключитьКнопкуНаКлиенте("ПериодМесяц");
	УстановитьПериод("Месяц", 0);
	УстановитьНадписьПериода();
	
КонецПроцедуры // ПериодМесяц()

// Процедура вызывается при нажатии кнопки "Неделя" на форме отчета
// 
&НаКлиенте
Процедура ПериодНеделя(Команда)
	
	ВключитьКнопкуНаКлиенте("ПериодНеделя");
	УстановитьПериод("Неделя", 0);
	УстановитьНадписьПериода();
	
КонецПроцедуры // ПериодНеделя()

//Процедура вызывается при изменении валюты из формы отчета
//
&НаКлиенте
Процедура ВалютаИтоговПриИзменении(Элемент)
	
	УстановитьПараметрНаСервере("ВалютаИтогов", ВалютаИтогов);
	
КонецПроцедуры //ВалютаИтоговПриИзменении()

// Процедура вызывается при нажатии кнопки "Настройка" на форме отчета
// 
&НаКлиенте
Процедура Настройка(Команда)
	
	Элементы.Настройка.Пометка 										= НЕ Элементы.Настройка.Пометка;
	Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = Элементы.Настройка.Пометка;
	
КонецПроцедуры // Настройка()

