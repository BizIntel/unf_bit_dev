
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПустаяКартинка = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПросмотрНедоступен);
	ВариантОбразец = ПустаяКартинка;
	
	НастройкиФормы = Новый Структура;
	Контекст = Новый Структура;
	Контекст.Вставить("РежимНастройки", Параметры.Свойство("РежимНастройки") И Параметры.РежимНастройки);
	
	Если НЕ Контекст.РежимНастройки И (НЕ Параметры.Свойство("Настройки") ИЛИ НЕ Параметры.Свойство("АдресСхемы")) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Контекст.РежимНастройки И НЕ ЗначениеЗаполнено(Параметры.Вариант) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Контекст.Вставить("КлючОбъекта", Параметры.КлючОбъекта);
	
	Если ТипЗнч(Параметры.КлючОбъекта)=Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		ПолноеИмя = Параметры.КлючОбъекта.ПолноеИмя;
	ИначеЕсли ТипЗнч(Параметры.КлючОбъекта)=Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		ПолноеИмя = "ВнешнийОтчет."+Параметры.КлючОбъекта.ИмяОбъекта;
	Иначе
		ПолноеИмя = Параметры.КлючОбъекта;
	КонецЕсли;
	
	Контекст.Вставить("ПолноеИмя", ПолноеИмя);
	Контекст.Вставить("Прототип", Параметры.Вариант);
	Контекст.Вставить("КлючПрототипа", Параметры.КлючТекущихНастроек);
	Контекст.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Контекст.Вставить("ПолныеПраваНаВарианты", ВариантыОтчетов.ПолныеПраваНаВарианты());
	Контекст.Вставить("ЭтоПолныеПрава", РольДоступна("ПолныеПрава"));
	Контекст.Вставить("ЭтоДополнительныйОтчет", ТипЗнч(Параметры.КлючОбъекта)=Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
	Контекст.Вставить("БезПривязки", ТипЗнч(ВариантСсылка)=Тип("СправочникСсылка.ВариантыДополнительныхОтчетов") И ЗначениеЗаполнено(ВариантСсылка));
	Контекст.Вставить("ИдентификаторТекущейСтроки");
	
	ПрочитатьДанныеОтчета();
	
	Если НЕ Контекст.РежимНастройки Тогда
		ЗаполнитьСписокВариантов();
	Иначе
		ВариантСсылка = Контекст.Прототип;
	КонецЕсли;
	
	ПрочитатьДанныеВарианта();
	
	Если Параметры.Свойство("Настройки") И Параметры.Свойство("АдресСхемы") Тогда
		АдресСхемы = Параметры.АдресСхемы;
		Настройки = Параметры.Настройки;
	ИначеЕсли ЗначениеЗаполнено(Контекст.ПолноеИмя) Тогда
		Если ТипЗнч(Контекст.КлючОбъекта) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
			ОтчетОбъект = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(Контекст.КлючОбъекта);
		Иначе
			ОтчетОбъект = Новый(СтрЗаменить(Контекст.ПолноеИмя, "Отчет.", "ОтчетОбъект."));
		КонецЕсли;
		Если НЕ ОтчетОбъект=Неопределено Тогда
			МетаданныеОтчета = ОтчетОбъект.Метаданные();
			Если НЕ МетаданныеОтчета.ОсновнаяСхемаКомпоновкиДанных=Неопределено Тогда
				Схема = ОтчетОбъект.ПолучитьМакет(МетаданныеОтчета.ОсновнаяСхемаКомпоновкиДанных);
				АдресСхемы = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
				Если Найти(МетаданныеОтчета.ПолноеИмя(), "ВнешнийОтчет.")>0 Тогда
					Если Параметры.Свойство("Настройки") Тогда
						Настройки = Параметры.Настройки;
					ИначеЕсли Контекст.РежимНастройки И (Контекст.Пользовательский ИЛИ Контекст.ЭтоДополнительныйОтчет) И ТипЗнч(Контекст.Прототип)=Тип("СправочникСсылка.ВариантыОтчетов") Тогда
						Настройки = Контекст.Прототип.Настройки.Получить();
					Иначе
						Настройки = Схема.ВариантыНастроек[Контекст.КлючПрототипа].Настройки;
					КонецЕсли;
				ИначеЕсли НЕ Контекст.Пользовательский Тогда
					МетаданныеОтчета = ОтчетОбъект.Метаданные();
					Настройки = Схема.ВариантыНастроек[Контекст.КлючПрототипа].Настройки;
				КонецЕсли; 
			КонецЕсли;
			Если ТипЗнч(Контекст.Прототип)=Тип("СправочникСсылка.ВариантыОтчетов") И Контекст.Пользовательский Тогда
				Настройки = Контекст.Прототип.Настройки.Получить();
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ АдресСхемы=Неопределено Тогда
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		Если НЕ Настройки=Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		КонецЕсли; 
	КонецЕсли; 
	
	Если Не Контекст.ПолныеПраваНаВарианты Тогда
		Элементы.ГруппаДоступен.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ОбновитьЭлементыФормы();
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если НЕ ЗначениеЗаполнено(ВариантНаименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Наименование"" не заполнено'"),
			,
			"Наименование");
		Отказ = Истина;
	ИначеЕсли ВариантыОтчетов.НаименованиеЗанято(Контекст.ОтчетСсылка, ВариантСсылка, ВариантНаименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = '""%1"" занято, необходимо указать другое Наименование.'"),
				ВариантНаименование
			),
			,
			"Наименование");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ Контекст.РежимНастройки Тогда
		ТекущийЭлемент = Элементы.Наименование;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Найденные = ВариантыОтчета.НайтиСтроки(Новый Структура("Наименование", ВариантНаименование));
	Если Найденные.Количество() > 0 Тогда
		Элементы.ВариантыОтчета.ТекущаяСтрока = Найденные[0].ПолучитьИдентификатор();
		ВариантыОтчетаОбработчикАктивизацииСтроки();
	Иначе
		ВариантСсылка = Неопределено;
		УстановитьЧтоБудетДальше(ЭтотОбъект, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Найденные = ВариантыОтчета.НайтиСтроки(Новый Структура("Наименование", Текст));
	УстановитьЧтоБудетДальше(ЭтотОбъект, Найденные.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступенПриИзменении(Элемент)
	
	ВариантТолькоДляАвтора = (Доступен = "1");
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ОписаниеНачалоВыбораЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Элементы.Описание.ТекстРедактирования,
		НСтр("ru = 'Описание'"));
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНачалоВыбораЗавершение(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	ВариантОписание = ВведенныйТекст;
	
КонецПроцедуры

#Область ТаблицаВариантов

&НаКлиенте
Процедура ВариантыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Контекст.ИдентификаторТекущейСтроки = Элементы.ВариантыОтчета.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	ВариантыОтчетаОбработчикАктивизацииСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыОтчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СохранитьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыОтчетаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыОтчетаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Вариант = Элементы.ВариантыОтчета.ТекущиеДанные;
	Если Вариант = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Вариант.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Контекст.ПолныеПраваНаВарианты И НЕ Вариант.АвторТекущийПользователь Тогда
		ТекстПредупреждения = НСтр("ru = 'Недостаточно прав для удаления варианта отчета ""%1"".'");
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, Вариант.Наименование);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Не Вариант.Пользовательский Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно удалить предопределенный вариант отчета.'"));
		Возврат;
	КонецЕсли;
	
	Если Вариант.ПометкаУдаления Тогда
		ТекстВопроса = НСтр("ru = 'Снять с ""%1"" пометку на удаление?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Пометить ""%1"" на удаление?'");
	КонецЕсли;
	ТекстВопроса = СтрШаблон(ТекстВопроса, Вариант.Наименование);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Вариант", Вариант);
	Обработчик = Новый ОписаниеОповещения("ВариантыОтчетаПередУдалениемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыОтчетаПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Вариант = ДополнительныеПараметры.Вариант;
		УдалитьВариантНаСервере(Вариант.Ссылка, Вариант.ИндексКартинки, Вариант.ПометкаУдаления);
		ВариантыОтчетаОбработчикАктивизацииСтроки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантыОтчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область Теги

&НаКлиенте
Процедура ПолеВводаТегаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Элемент.ОбновитьТекстРедактирования();
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ТегиОтчетов") Тогда
		ПрикрепитьТегНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаТегаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		СоздатьИПрикрепитьТегНаСервере(Текст);
		ТекущийЭлемент = Элементы.ПолеВводаТега;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТегИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("Тег_")+1);
	СтрокаТегов = ДанныеТегов.НайтиПоИдентификатору(ТегИД);
	ДанныеТегов.Удалить(СтрокаТегов);
	
	ОбновитьЭлементыТегов();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область ПривязкиПолейОтчетов

&НаКлиенте
Процедура ПривязкаОбъектМетаданныхПриИзменении(Элемент)
	
	Если НЕ Контекст.БезПривязки Тогда
		ЗаполнитьСписокВыбораПолейПривязки();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПривязкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПривязкаИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("Привязка_")+1);
	СтрокаПривязки = ПривязкиПолей.НайтиПоИдентификатору(ПривязкаИД);
	ПривязкиПолей.Удалить(СтрокаПривязки);
	
	ОбновитьЭлементыПривязок();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область Образец

&НаКлиенте
Процедура ВариантОбразецНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьКартинкуЗавершение", ЭтотОбъект);
	
	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("Заголовок", НСтр("ru = 'Выберите файл изображения'"));
	ПараметрыДиалога.Вставить("ПредварительныйПросмотр", Истина);
	ПараметрыДиалога.Вставить("Фильтр", НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf'"));
	
	СтандартныеПодсистемыКлиент.ПоказатьПомещениеФайла(ОписаниеОповещения, УникальныйИдентификатор, "", ПараметрыДиалога);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ИзменитьКартинкуЗавершение(Файлы, ДополнительныеДанные) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Файлы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ВариантОбразец) И НЕ ВариантОбразец=ПустаяКартинка Тогда
		УдалитьИзВременногоХранилища(ВариантОбразец);
	КонецЕсли;
	ВариантОбразец = Файлы[0].Хранение;
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Назад(Команда)
	
	ПерейтиНаСтраницу1();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Пакет = Новый Структура;
	Пакет.Вставить("ПроверитьСтраницу1",       Истина);
	Пакет.Вставить("ПерейтиНаСтраницу2",       Истина);
	Пакет.Вставить("ЗаполнитьСтраницу2Сервер", Истина);
	Пакет.Вставить("ПроверитьИЗаписатьСервер", Ложь);
	Пакет.Вставить("ЗакрытьПослеЗаписи",       Ложь);
	Пакет.Вставить("ТекущийШаг", Неопределено);
	
	ВыполнитьПакет(Неопределено, Пакет);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПривязку(Команда)
	
	ДобавитьПривязкуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязкаСохранить(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПривязкаОбъектМетаданных) ИЛИ (НЕ ЗначениеЗаполнено(ПривязкаПолеОтчета) И НЕ Контекст.БезПривязки) Тогда
		Возврат;
	КонецЕсли; 
	
	ПривязкаСохранитьСервер();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязкаОтменить(Команда)
	
	ПривязкаОбъектМетаданных = Неопределено;
	ПривязкаПолеОтчета = Неопределено;
	Элементы.ГруппаДобавлениеПривязки.Видимость = Ложь;
	Элементы.ДобавитьПривязку.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Поля = "ВариантыОтчета, ВариантыОтчетаНаименование";
	Инструкция.Отборы.Вставить("ВариантыОтчета.Пользовательский", Ложь);
	Инструкция.Оформление.Вставить("ЦветТекста", ЦветаСтиля.СкрытыйВариантОтчетаЦвет);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Поля = "ВариантыОтчета, ВариантыОтчетаНаименование";
	Инструкция.Отборы.Вставить("ПолныеПраваНаВарианты", Ложь);
	Инструкция.Отборы.Вставить("ВариантыОтчета.АвторТекущийПользователь", Ложь);
	Инструкция.Оформление.Вставить("ЦветТекста", ЦветаСтиля.СкрытыйВариантОтчетаЦвет);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Поля = "ВариантыОтчета, ВариантыОтчетаНаименование";
	Инструкция.Отборы.Вставить("ВариантыОтчета.Порядок", 3);
	Инструкция.Оформление.Вставить("ЦветТекста", ЦветаСтиля.СкрытыйВариантОтчетаЦвет);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы()
	
	Если Контекст.РежимНастройки Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страница2;
		Элементы.ГруппаКнопкиНазадДалее.ТекущаяСтраница = Элементы.БезКнопок;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница=Элементы.Страница1 Тогда
		Элементы.ГруппаКнопкиНазадДалее.ТекущаяСтраница = Элементы.КнопкаДалее;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница=Элементы.Страница2 Тогда
		Элементы.ГруппаКнопкиНазадДалее.ТекущаяСтраница = Элементы.КнопкаНазад;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВариантАвтор) И НЕ ЗначениеЗаполнено(ВариантСсылка) Тогда
		ВариантАвтор = Контекст.ТекущийПользователь;
	КонецЕсли; 
	Элементы.Доступен.Видимость = ЗначениеЗаполнено(ВариантАвтор);
	Элементы.ВариантАвтор.Видимость = Элементы.Доступен.Видимость;
	
	Если Элементы.Страницы.ТекущаяСтраница=Элементы.Страница1 Тогда
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница=Элементы.Страница2 Тогда
		ОбновитьЭлементыТегов();
		ОбновитьЭлементыПривязок();
	КонецЕсли; 
	
КонецПроцедуры
 
&НаСервере
Процедура ПрочитатьДанныеОтчета()
	
	Если Контекст.ЭтоДополнительныйОтчет Тогда
		ОтчетИнформация = СформироватьИнформациюОбОбДополнительномОтчете(Контекст.КлючОбъекта);
		Контекст.Вставить("ВидОтчета", ОтчетИнформация.Вид);
		// Для дополнительных отчетов используется контекстная привязка БСП, нет возможности указать поле отчета
		Элементы.ПривязкаПолеОтчета.Видимость = НЕ Контекст.БезПривязки;
		Элементы.ДобавитьПривязку.Видимость = НЕ Контекст.БезПривязки;
	Иначе
		ОтчетИнформация = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(Контекст.ПолноеИмя);
		Если ТипЗнч(ОтчетИнформация.ТекстОшибки) = Тип("Строка") Тогда
			ВызватьИсключение ОтчетИнформация.ТекстОшибки;
		КонецЕсли;
	КонецЕсли; 
	
	Контекст.Вставить("ОтчетСсылка", ОтчетИнформация.Отчет);
	Контекст.Вставить("ОтчетИмя",    ОтчетИнформация.ОтчетИмя);
	Контекст.Вставить("ТипОтчета",   ОтчетИнформация.ТипОтчета);
	Контекст.Вставить("ЭтоВнешний",  ОтчетИнформация.ТипОтчета = Перечисления.ТипыОтчетов.Внешний);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЧтоБудетДальше(Форма, Перезапись)
	
	Если Перезапись Тогда
		Форма.Элементы.ПерезаписьИлиНовый.ТекущаяСтраница = Форма.Элементы.Перезапись;
	Иначе
		Форма.Элементы.ПерезаписьИлиНовый.ТекущаяСтраница = Форма.Элементы.Новый;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьИнформациюОбОбДополнительномОтчете(Отчет)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Отчет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка КАК Отчет,
	|	ДополнительныеОтчетыИОбработки.ИмяОбъекта КАК ОтчетИмя,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Дополнительный) КАК ТипОтчета,
	|	ДополнительныеОтчетыИОбработки.Вид
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ДополнительныеОтчетыИОбработки.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Структура("Отчет, ОтчетИмя, ТипОтчета, Вид");
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВариантов()
	
	ТекущийКлючВарианта = Контекст.КлючПрототипа;
	Если ЗначениеЗаполнено(Элементы.ВариантыОтчета.ТекущаяСтрока) Тогда
		ТекущаяСтрока = ВариантыОтчета.НайтиПоИдентификатору(Элементы.ВариантыОтчета.ТекущаяСтрока);
		Если ЗначениеЗаполнено(ТекущаяСтрока.КлючВарианта) Тогда
			ТекущийКлючВарианта = ТекущаяСтрока.КлючВарианта;
		КонецЕсли;
	КонецЕсли;
	
	ВариантыОтчета.Очистить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Ссылка КАК Ссылка,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский,
	|	ВариантыОтчетов.Наименование КАК Наименование,
	|	ВариантыОтчетов.Автор КАК Автор,
	|	ВариантыОтчетов.Описание КАК Описание,
	|	ВариантыОтчетов.ТипОтчета КАК Тип,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВариантыОтчетов.ТолькоДляАвтора КАК ТолькоДляАвтора,
	|	ВариантыОтчетов.ВидимостьПоУмолчанию КАК ВидимостьПоУмолчанию,
	|	ВариантыОтчетов.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Автор = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АвторТекущийПользователь,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.ПометкаУдаления
	|			ТОГДА 4
	|		КОГДА ВариантыОтчетов.Пользовательский
	|			ТОГДА 3
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК ИндексКартинки,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.ПометкаУдаления
	|			ТОГДА 3
	|		КОГДА ВариантыОтчетов.Пользовательский
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И (ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|			ИЛИ ВариантыОтчетов.Пользовательский = ИСТИНА)
	|	И (ВариантыОтчетов.ТолькоДляАвтора = ЛОЖЬ
	|			ИЛИ ВариантыОтчетов.Автор = &ТекущийПользователь
	|			ИЛИ ВариантыОтчетов.КлючВарианта = &ТекущийКлючВарианта)
	|	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеВариантыПрограммы)";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчет", Контекст.ОтчетСсылка);
	Запрос.УстановитьПараметр("ТекущийКлючВарианта", ТекущийКлючВарианта);
	Запрос.УстановитьПараметр("ТекущийПользователь", Контекст.ТекущийПользователь);
	Запрос.УстановитьПараметр("ОтключенныеВариантыПрограммы", ВариантыОтчетовПовтИсп.ОтключенныеВариантыПрограммы());
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	ВариантыОтчета.Загрузить(ТаблицаЗначений);
	
	// Добавить предопределенные варианты внешнего отчета.
	Если Контекст.ЭтоВнешний Тогда
		Попытка
			ОтчетОбъект = ВнешниеОтчеты.Создать(Контекст.ОтчетИмя);
		Исключение
			ВариантыОтчетов.ОшибкаПоВарианту(Неопределено,
				СтрШаблон(
					НСтр("ru = 'Не удалось получить список предопределенных вариантов
					|внешнего отчета ""%1"":'"),
					Контекст.ОтчетСсылка
				) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
		
		Если ОтчетОбъект.СхемаКомпоновкиДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ВариантНастроекКД Из ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек Цикл
			Вариант = ВариантыОтчета.Добавить();
			Вариант.Пользовательский = Ложь;
			Вариант.Наименование = ВариантНастроекКД.Представление;
			Вариант.КлючВарианта = ВариантНастроекКД.Имя;
			Вариант.ТолькоДляАвтора = Ложь;
			Вариант.АвторТекущийПользователь = Ложь;
			Вариант.ИндексКартинки = 5;
		КонецЦикла;
	КонецЕсли;
	
	ВариантыОтчета.Сортировать("Наименование Возр");
	
	Контекст.ИдентификаторТекущейСтроки = -1;
	Найденные = ВариантыОтчета.НайтиСтроки(Новый Структура("КлючВарианта", ТекущийКлючВарианта));
	Если Найденные.Количество() > 0 Тогда
		Вариант = Найденные[0];
		ВариантСсылка = Вариант.Ссылка;
		Контекст.ИдентификаторТекущейСтроки = Вариант.ПолучитьИдентификатор();
		Элементы.ВариантыОтчета.ТекущаяСтрока = Контекст.ИдентификаторТекущейСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВариантыОтчетаОбработчикАктивизацииСтроки()
	
	Если Контекст.РежимНастройки Тогда
		Возврат;
	КонецЕсли; 
	Контекст.ИдентификаторТекущейСтроки = Элементы.ВариантыОтчета.ТекущаяСтрока;
	Если Контекст.ИдентификаторТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Вариант = ВариантыОтчета.НайтиПоИдентификатору(Контекст.ИдентификаторТекущейСтроки);
	Если Вариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПравоНастройкиВарианта = ПравоНастройкиВарианта(Вариант, Контекст.ПолныеПраваНаВарианты);
	ПравоЗаписиВарианта    = ПравоЗаписиВарианта(Вариант, ПравоНастройкиВарианта, Контекст.ЭтоПолныеПрава, Контекст.РежимНастройки);
	Если ПравоЗаписиВарианта Тогда
		ВариантСсылка = Вариант.Ссылка;
		ПрочитатьДанныеВарианта();
	Иначе
		ВариантСсылка = Неопределено;
		ВариантАвтор  = Контекст.ТекущийПользователь;
		ВариантНаименование = СформироватьСвободноеНаименование(Вариант, ВариантыОтчета);
		ВариантОписание     = "";
		ВариантТолькоДляАвтора      = Истина;
		ВариантВидимостьПоУмолчанию = Истина;
		Доступен = ?(ВариантТолькоДляАвтора, "1", "2");
	КонецЕсли;
	УстановитьЧтоБудетДальше(ЭтаФорма, ЗначениеЗаполнено(ВариантСсылка));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСвободноеНаименование(Вариант, ВариантыОтчета)
	ШаблонИмениВарианта = СокрЛП(Вариант.Наименование) +" - "+ НСтр("ru = 'копия'");
	
	СвободноеНаименование = ШаблонИмениВарианта;
	Найденные = ВариантыОтчета.НайтиСтроки(Новый Структура("Наименование", СвободноеНаименование));
	Если Найденные.Количество() = 0 Тогда
		Возврат СвободноеНаименование;
	КонецЕсли;
	
	НомерВарианта = 1;
	Пока Истина Цикл
		НомерВарианта = НомерВарианта + 1;
		СвободноеНаименование = ШаблонИмениВарианта +" (" + Формат(НомерВарианта, "") + ")";
		Найденные = ВариантыОтчета.НайтиСтроки(Новый Структура("Наименование", СвободноеНаименование));
		Если Найденные.Количество() = 0 Тогда
			Возврат СвободноеНаименование;
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПравоНастройкиВарианта(Вариант, ПолныеПраваНаВарианты)
	Возврат (ПолныеПраваНаВарианты ИЛИ Вариант.АвторТекущийПользователь) И ЗначениеЗаполнено(Вариант.Ссылка);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПравоЗаписиВарианта(Вариант, ПравоНастройкиВарианта, ЭтоПолныеПрава, РежимНастройки)
	Возврат (Вариант.Пользовательский ИЛИ (РежимНастройки И ЭтоПолныеПрава)) И ПравоНастройкиВарианта;
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеВарианта()
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ВариантСсылка)=Тип("СправочникСсылка.ВариантыДополнительныхОтчетов") Тогда
		Запрос.УстановитьПараметр("Ссылка", ВариантСсылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВариантыДополнительныхОтчетов.Ссылка,
		|	ВариантыДополнительныхОтчетов.Наименование,
		|	ВариантыДополнительныхОтчетов.Автор,
		|	ВариантыДополнительныхОтчетов.ТолькоДляАвтора КАК ТолькоДляАвтора,
		|	ИСТИНА КАК Пользовательский,
		|	ВариантыДополнительныхОтчетов.Описание,
		|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.ФункциональнаяОпция, """") КАК ФункциональнаяОпция,
		|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Образец, НЕОПРЕДЕЛЕНО) КАК Образец,
		|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """") КАК Теги,
		|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Рекомендуемый, ЛОЖЬ) КАК Рекомендуемый
		|ИЗ
		|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
		|		ПО ВариантыДополнительныхОтчетов.Ссылка = НастройкиВариантовОтчетовУНФ.Вариант
		|ГДЕ
		|	ВариантыДополнительныхОтчетов.Ссылка = &Ссылка";
	ИначеЕсли ТипЗнч(ВариантСсылка)=Тип("СправочникСсылка.ВариантыОтчетов") Тогда 
		Запрос.УстановитьПараметр("Ссылка", ВариантСсылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВариантыОтчетов.Ссылка,
		|	ВариантыОтчетов.Наименование,
		|	ВариантыОтчетов.Автор,
		|	ВариантыОтчетов.ТолькоДляАвтора,
		|	ВариантыОтчетов.Пользовательский,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) = """"
		|				И НЕ ВариантыОтчетов.ПредопределенныйВариант = НЕОПРЕДЕЛЕНО
		|			ТОГДА ВариантыОтчетов.ПредопределенныйВариант.Описание
		|		ИНАЧЕ ВариантыОтчетов.Описание
		|	КОНЕЦ КАК Описание,
		|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.ФункциональнаяОпция, """") КАК ФункциональнаяОпция,
		|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Образец, НЕОПРЕДЕЛЕНО) КАК Образец,
		|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """") КАК Теги,
		|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Рекомендуемый, ЛОЖЬ) КАК Рекомендуемый
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
		|		ПО ВариантыОтчетов.Ссылка = НастройкиВариантовОтчетовУНФ.Вариант
		|ГДЕ
		|	ВариантыОтчетов.Ссылка = &Ссылка";
	Иначе
		Возврат;
	КонецЕсли; 
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВариантАвтор           = Выборка.Автор;
		ВариантНаименование    = Выборка.Наименование;
		ВариантОписание        = Выборка.Описание;
		ВариантТолькоДляАвтора = Выборка.ТолькоДляАвтора;
		Контекст.Вставить("Пользовательский", Выборка.Пользовательский);
		Доступен = ?(ВариантТолькоДляАвтора, "1", "2");
		ВариантФункциональнаяОпция = Выборка.ФункциональнаяОпция;
		ВариантТеги            = Выборка.Теги;
		ВариантРекомендуемый   = Выборка.Рекомендуемый;
		Если Контекст.РежимНастройки И ТипЗнч(Выборка.Образец)=Тип("ХранилищеЗначения") Тогда
			Образец = Выборка.Образец.Получить();
			Если ТипЗнч(Образец)=Тип("Картинка") Тогда
				ВариантОбразец = ПоместитьВоВременноеХранилище(Образец, УникальныйИдентификатор);				
			КонецЕсли; 
		КонецЕсли;
		ОбновитьТаблицуТегов();
	Иначе
		Контекст.Вставить("Пользовательский", Ложь);
	КонецЕсли;
	
	ПрочитатьДанныеПривязок();
	
КонецПроцедуры

#Область Навигация

&НаКлиенте
Процедура ПерейтиНаСтраницу1()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страница1;
	Элементы.Далее.Заголовок          = "";
	Элементы.ГруппаКнопкиНазадДалее.ТекущаяСтраница = Элементы.КнопкаДалее;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПакет(Результат, Пакет) Экспорт
	
	Если Не Пакет.Свойство("ВариантЭтоНовый") Тогда
		Пакет.Вставить("ВариантЭтоНовый", НЕ ЗначениеЗаполнено(ВариантСсылка));
	КонецЕсли;
	
	// Обработка результата предыдущего шага.
	Если Пакет.ТекущийШаг = "ВопросНаПерезапись" Тогда
		Пакет.ТекущийШаг = Неопределено;
		Если Результат = КодВозвратаДиалога.Да Тогда
			Пакет.Вставить("ВопросНаПерезаписьПройден", Истина);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Выполнение следующего шага.
	Если Пакет.ПроверитьСтраницу1 = Истина Тогда
		// Наименование не введено.
		Если Не ЗначениеЗаполнено(ВариантНаименование) Тогда
			ТекстОшибки = НСтр("ru = 'Поле ""Наименование"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ВариантНаименование");
			Возврат;
		КонецЕсли;
		
		// Введено наименование существующего варианта отчета.
		Если Не Пакет.ВариантЭтоНовый Тогда
			Найденные = ВариантыОтчета.НайтиСтроки(Новый Структура("Ссылка", ВариантСсылка));
			Вариант = Найденные[0];
			Если НЕ ПравоЗаписиВарианта(Вариант, ПравоНастройкиВарианта(Вариант, Контекст.ПолныеПраваНаВарианты), Контекст.ЭтоПолныеПрава, Контекст.РежимНастройки) Тогда
				ТекстОшибки = НСтр("ru = 'Недостаточно прав для изменения варианта ""%1"". Необходимо выбрать другой вариант или изменить Наименование.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ВариантНаименование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ВариантНаименование");
				Возврат;
			КонецЕсли;
			
			Если Не Пакет.Свойство("ВопросНаПерезаписьПройден") Тогда
				Если Вариант.ПометкаУдаления = Истина Тогда
					ТекстВопроса = НСтр("ru = 'Вариант отчета ""%1"" помечен на удаление.
					|Заменить помеченный на удаление вариант отчета?'");
					КнопкаПоУмолчанию = КодВозвратаДиалога.Нет;
				Иначе
					ТекстВопроса = НСтр("ru = 'Заменить ранее сохраненный вариант отчета ""%1""?'");
					КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
				КонецЕсли;
				ТекстВопроса = СтрШаблон(ТекстВопроса, ВариантНаименование);
				Пакет.ТекущийШаг = "ВопросНаПерезапись";
				Обработчик = Новый ОписаниеОповещения("ВыполнитьПакет", ЭтотОбъект, Пакет);
				ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КнопкаПоУмолчанию);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка завершена.
		Пакет.ПроверитьСтраницу1 = Ложь;
		
	ИначеЕсли Пакет.ПроверитьИЗаписатьСервер Тогда 
		
		Если Не Пакет.ВариантЭтоНовый И НЕ Контекст.ЭтоПолныеПрава И Контекст.ПолныеПраваНаВарианты И НЕ ВариантАвтор=Контекст.ТекущийПользователь Тогда 
			ТекстОшибки = НСтр("ru = 'Недостаточно прав для изменения варианта ""%1"".'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ВариантНаименование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ВариантНаименование");
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Пакет.ПерейтиНаСтраницу2 = Истина Тогда
		// Для внешних отчетов выполняются только проверки заполнения, без переключения страницы.
		Если Не Контекст.ЭтоВнешний Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страница2;
			Элементы.ГруппаКнопкиНазадДалее.ТекущаяСтраница = Элементы.КнопкаНазад;
		КонецЕсли;
		
		// Переключение выполнено.
		Пакет.ПерейтиНаСтраницу2 = Ложь;
	КонецЕсли;
	
	Если Пакет.ЗаполнитьСтраницу2Сервер = Истина
		Или Пакет.ПроверитьИЗаписатьСервер = Истина Тогда
		
		ВыполнитьПакетСервер(Пакет);
		
		Если Пакет.Отказ = Истина Тогда
			ПерейтиНаСтраницу1();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Пакет.ЗакрытьПослеЗаписи = Истина Тогда
		СохранитьНастройкиВарианта();
		ОповеститьОВыборе(ВариантСсылка);
		Пакет.ЗакрытьПослеЗаписи = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть()
	
	Если НЕ Элементы.ДобавитьПривязку.Видимость Тогда
		Состояние(НСтр("ru = 'Отмените или завершите редактирование описания контекстного открытия отчета'"));
		Возврат;
	КонецЕсли; 
	
	Страница2Заполнена = (Элементы.Страницы.ТекущаяСтраница = Элементы.Страница2);
	
	Пакет = Новый Структура;
	Пакет.Вставить("ПроверитьСтраницу1",       Не Страница2Заполнена);
	Пакет.Вставить("ПерейтиНаСтраницу2",       Не Страница2Заполнена);
	Пакет.Вставить("ЗаполнитьСтраницу2Сервер", Не Страница2Заполнена);
	Пакет.Вставить("ПроверитьИЗаписатьСервер", Истина);
	Пакет.Вставить("ЗакрытьПослеЗаписи",       Истина);
	Пакет.Вставить("ТекущийШаг", Неопределено);
	
	ВыполнитьПакет(Неопределено, Пакет);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПакетСервер(Пакет)
	
	Пакет.Вставить("Отказ", Ложь);
	
	Если Пакет.ЗаполнитьСтраницу2Сервер = Истина Тогда
		Если Не Контекст.ЭтоВнешний Тогда
			ОбновитьЭлементыФормы();
		КонецЕсли;
		Пакет.ЗаполнитьСтраницу2Сервер = Ложь;
	КонецЕсли;
	
	Если Пакет.ПроверитьИЗаписатьСервер = Истина Тогда
		ПроверитьИЗаписатьНаСервере(Пакет);
		Пакет.ПроверитьИЗаписатьСервер = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиВарианта()
	
	// Настройки СКД
	Если НЕ Контекст.РежимНастройки Тогда
		ХранилищаНастроек.ХранилищеВариантовОтчетов.Сохранить(Контекст.ПолноеИмя, ВариантКлючВарианта, КомпоновщикНастроек.Настройки);
	КонецЕсли; 
	
	// Теги
	ВариантТеги = "";
	Для каждого Стр Из ДанныеТегов Цикл
		ВариантТеги = ВариантТеги + ?(ПустаяСтрока(ВариантТеги), "", ",") + Строка(Стр.Тег);
	КонецЦикла; 
	
	// Настройки вариантов УНФ
	Менеджер = РегистрыСведений.НастройкиВариантовОтчетовУНФ.СоздатьМенеджерЗаписи();
	Менеджер.Вариант = ВариантСсылка;
	
	Если ЭтоАдресВременногоХранилища(ВариантОбразец) И НЕ ВариантОбразец=ПустаяКартинка Тогда
		ДанныеВариантОбразец = ПолучитьИзВременногоХранилища(ВариантОбразец);
		Если ТипЗнч(ДанныеВариантОбразец) = Тип("Картинка") Тогда
			Менеджер.Образец = Новый ХранилищеЗначения(ДанныеВариантОбразец);
		ИначеЕсли ТипЗнч(ДанныеВариантОбразец) = Тип("ДвоичныеДанные") ТОгда
			Менеджер.Образец = Новый ХранилищеЗначения(Новый Картинка(ДанныеВариантОбразец));
		КонецЕсли;
	Иначе
		Менеджер.Образец = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	Менеджер.ФункциональнаяОпция = ВариантФункциональнаяОпция;
	Менеджер.Теги = ВариантТеги;
	Менеджер.Рекомендуемый = ВариантРекомендуемый;
	Менеджер.ИзмененаПользователем = Истина;
	Менеджер.Записать(Истина);
	
	// Привязка полей отчетов
	Набор = РегистрыСведений.ПривязкаПолейОтчетовУНФ.СоздатьНаборЗаписей();
	Набор.Отбор.Вариант.Установить(ВариантСсылка);
	Набор.Записать(Истина);
	Для каждого Стр Из ПривязкиПолей Цикл
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Стр);
		Запись.Вариант = ВариантСсылка;
		Запись.ИзмененаПользователем = Истина;
	КонецЦикла; 
	Набор.Записать(Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВариантНаСервере(Ссылка, ИндексКартинки, ПометкаУдаления)
	ВариантОбъект = Ссылка.ПолучитьОбъект();
	ВариантОбъект.УстановитьПометкуУдаления(НЕ ВариантОбъект.ПометкаУдаления);
	ПометкаУдаления = ВариантОбъект.ПометкаУдаления;
	ИндексКартинки = ?(ПометкаУдаления, 4, ?(ВариантОбъект.Пользовательский, 3, 5));
КонецПроцедуры

&НаСервере
Процедура ПроверитьИЗаписатьНаСервере(Пакет)
	
	ВариантЭтоНовый = НЕ ЗначениеЗаполнено(ВариантСсылка);
	
	Если ВариантЭтоНовый И ВариантыОтчетов.НаименованиеЗанято(Контекст.ОтчетСсылка, 
		?(ВариантСсылка=Неопределено, Справочники.ВариантыОтчетов.ПустаяСсылка(), ВариантСсылка), ВариантНаименование) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = '""%1"" занято, необходимо указать другое Наименование.'"), ВариантНаименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ВариантНаименование");
		Пакет.Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ВариантЭтоНовый Тогда
		ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		ВариантОбъект.Отчет            = Контекст.ОтчетСсылка;
		ВариантОбъект.ТипОтчета        = Контекст.ТипОтчета;
		ВариантОбъект.КлючВарианта     = Строка(Новый УникальныйИдентификатор());
		ВариантОбъект.Пользовательский = Истина;
		ВариантОбъект.Автор            = Контекст.ТекущийПользователь;
		ВариантОбъект.ЗаполнитьРодителя();
	Иначе
		ВариантОбъект = ВариантСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ВариантОбъект.Наименование = ВариантНаименование;
	ВариантОбъект.Описание     = ВариантОписание;
	ВариантОбъект.ТолькоДляАвтора      = ВариантТолькоДляАвтора;
	
	ВариантОбъект.Записать();
	
	ВариантСсылка       = ВариантОбъект.Ссылка;
	Если ТипЗнч(ВариантСсылка)=Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		ВариантКлючВарианта = ВариантОбъект.КлючВарианта;
	Иначе
		ВариантКлючВарианта = ВариантОбъект.ИдентификаторКоманды;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область Теги

&НаСервере
Процедура ОбновитьТаблицуТегов()
	
	ДанныеТегов.Очистить();
	МассивТегов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВариантТеги);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Теги", МассивТегов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТегиОтчетов.Ссылка КАК Тег,
	|	ТегиОтчетов.Наименование КАК Представление
	|ИЗ
	|	Справочник.ТегиОтчетов КАК ТегиОтчетов
	|ГДЕ
	|	ТегиОтчетов.Наименование В (&Теги)";
	СоотвествиеТегов = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоотвествиеТегов.Вставить(Выборка.Представление, Выборка.Тег);
	КонецЦикла; 
	
	Для каждого Тег Из МассивТегов Цикл
		
		НовыеДанныеТега = ДанныеТегов.Добавить();
		НавигационнаяСсылкаФС = "Тег_" + НовыеДанныеТега.ПолучитьИдентификатор();
		
		НавигационнаяСсылкаФС = "Тег_" + НовыеДанныеТега.ПолучитьИдентификатор();
		НовыеДанныеТега.Тег = СоотвествиеТегов.Получить(Тег);
		Если НЕ ЗначениеЗаполнено(НовыеДанныеТега.Тег) Тогда
			НовыеДанныеТега.Тег = НайтиСоздатьТег(Тег);
		КонецЕсли; 
		НовыеДанныеТега.ПредставлениеТега = ПредставлениеОтметки(Тег, НовыеДанныеТега.ПометкаУдаления, НавигационнаяСсылкаФС, Контекст.БезПривязки);
		НовыеДанныеТега.ДлинаТега = СтрДлина(Тег);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыТегов()
	
	УдалитьЭлементы(Элементы.СтрокиТегов);
	
	МаксДлинаСтрокиТегов = ?(Элементы.ПолеВводаТега.Ширина = 0, 44, Элементы.ПолеВводаТега.Ширина);
	ТекДлинаСтрокиТегов = 0;
	НомерТега = 0;
	НомерСтроки = 0;
	ГруппаТегов = Неопределено;
	
	Для Каждого ДанныеТега Из ДанныеТегов Цикл
		
		// Определение группы для размещения
		Если ГруппаТегов = Неопределено Или ТекДлинаСтрокиТегов + ДанныеТега.ДлинаТега + 3 > МаксДлинаСтрокиТегов Тогда
			
			ГруппаТегов = Элементы.Добавить("СтрокаТегов_" + НомерСтроки, Тип("ГруппаФормы"), Элементы.СтрокиТегов);
			ГруппаТегов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТегов.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаТегов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаТегов.ОтображатьЗаголовок = Ложь;
			
			НомерСтроки = НомерСтроки + 1;
			ТекДлинаСтрокиТегов = 0;
			
		КонецЕсли;
		
		ПолеТега = Элементы.Добавить("Тег_" + НомерТега, Тип("ПолеФормы"), ГруппаТегов);
		ПолеТега.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеТега.ПутьКДанным = "ДанныеТегов[" + НомерТега + "].ПредставлениеТега";
		ПолеТега.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеТега.Ширина = ДанныеТега.ДлинаТега + 2;
		ПолеТега.РастягиватьПоГоризонтали = Ложь;
		ПолеТега.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ТегОбработкаНавигационнойСсылки");
		
		НомерТега = НомерТега + 1;
		ТекДлинаСтрокиТегов = ТекДлинаСтрокиТегов + ДанныеТега.ДлинаТега + 3;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьТегНаСервере(Тег)
	
	Если ДанныеТегов.НайтиСтроки(Новый Структура("Тег", Тег)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТега = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Тег, "Наименование, ПометкаУдаления");
	
	СтрокаТегов = ДанныеТегов.Добавить();
	НавигационнаяСсылкаФС = "Тег_" + СтрокаТегов.ПолучитьИдентификатор();
	
	СтрокаТегов.Тег = Тег;
	СтрокаТегов.ПометкаУдаления = ДанныеТега.ПометкаУдаления;
	СтрокаТегов.ПредставлениеТега = ПредставлениеОтметки(ДанныеТега.Наименование, ДанныеТега.ПометкаУдаления, НавигационнаяСсылкаФС, Контекст.БезПривязки);
	СтрокаТегов.ДлинаТега = СтрДлина(ДанныеТега.Наименование);
	
	ОбновитьЭлементыТегов();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИПрикрепитьТегНаСервере(знач ЗаголовокТега)
	
	Тег = НайтиСоздатьТег(ЗаголовокТега);
	ПрикрепитьТегНаСервере(Тег);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСоздатьТег(Знач ЗаголовокТега)
	
	Тег = Справочники.ТегиОтчетов.НайтиПоНаименованию(ЗаголовокТега, Истина);
	
	Если Тег.Пустая() Тогда
		
		ТегОбъект = Справочники.ТегиОтчетов.СоздатьЭлемент();
		ТегОбъект.Наименование = ЗаголовокТега;
		ТегОбъект.Записать();
		Тег = ТегОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Тег;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеОтметки(НаименованиеТега, ПометкаУдаления = Ложь, НавигационнаяСсылкаФС, БезПривязки)
	
	#Если Клиент Тогда
	Цвет = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ТекстВторостепеннойНадписи");
	#Иначе
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	#КонецЕсли
	
	Шрифт = Новый Шрифт("ANSI моноширинный шрифт",,Истина,,,?(ПометкаУдаления, Истина, Неопределено));
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеТега + " ", Шрифт, Цвет));
	Если НЕ БезПривязки Тогда
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , НавигационнаяСсылкаФС));
	КонецЕсли; 
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

#КонецОбласти

#Область ПривязкиПолейОтчетов

&НаСервере
Процедура ПрочитатьДанныеПривязок()
	
	Запрос = Новый Запрос;
	Если НЕ ЗначениеЗаполнено(ВариантСсылка) Тогда
		Запрос.УстановитьПараметр("Вариант", Контекст.Прототип);
	Иначе
		Запрос.УстановитьПараметр("Вариант", ВариантСсылка);
	КонецЕсли; 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПривязкаПолейОтчетовУНФ.Поле,
	|	ПривязкаПолейОтчетовУНФ.Объект,
	|	ПривязкаПолейОтчетовУНФ.СложныйАлгоритм,
	|	ПривязкаПолейОтчетовУНФ.ДополнительныйРазрез,
	|	ПривязкаПолейОтчетовУНФ.Объект.Синоним КАК Представление
	|ИЗ
	|	РегистрСведений.ПривязкаПолейОтчетовУНФ КАК ПривязкаПолейОтчетовУНФ
	|ГДЕ
	|	ПривязкаПолейОтчетовУНФ.Вариант = &Вариант";
	ПривязкиПолей.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для каждого Стр Из ПривязкиПолей Цикл
		Стр.Представление = ПредставлениеПривязки(Стр.ПолучитьИдентификатор(), Стр.Представление);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПривязки(Идентификатор, Синоним = "")
	
	Стр = ПривязкиПолей.НайтиПоИдентификатору(Идентификатор);
	Если ПустаяСтрока(Синоним) Тогда
		Синоним = Стр.Объект.Синоним;
	КонецЕсли; 
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Стр.Объект);
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Представление = НСтр("ru = 'Из справочника '")+""""+Синоним+"""";
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Представление = НСтр("ru = 'Из документа '")+""""+Синоним+"""";
	Иначе
		Представление = НСтр("ru = 'Из '")+""""+Синоним+"""";
	КонецЕсли; 
	НавигационнаяСсылкаФС = "Привязка_"+Идентификатор;
	Возврат ПредставлениеОтметки(Представление,, НавигационнаяСсылкаФС, Контекст.БезПривязки);
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыПривязок()
	
	УдалитьЭлементы(Элементы.ГруппаПривязанныеПоляЭлементы);
	
	Если ОтключитьВидимостьГруппыПривязанныхПолей() Тогда
		Элементы.ГруппаПривязанныеПоля.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из ПривязкиПолей Цикл
		
		Индекс = ПривязкиПолей.Индекс(Стр);
		ПолеТега = Элементы.Добавить("Привязка_" + Индекс, Тип("ПолеФормы"), Элементы.ГруппаПривязанныеПоляЭлементы);
		ПолеТега.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеТега.ПутьКДанным = "ПривязкиПолей[" + Индекс + "].Представление";
		ПолеТега.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеТега.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ПривязкаОбработкаНавигационнойСсылки");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОтключитьВидимостьГруппыПривязанныхПолей()
	
	Для каждого Элемент Из КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы Цикл
		
		Если ТипЗнч(Элемент) <> Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Тип Из Элемент.ТипЗначения.Типы() Цикл
			
			Если НЕ ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Продолжить;
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УдалитьЭлементы(Группа)
	
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого СтрокаТегов Из Группа.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(СтрокаТегов);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПривязкуСервер()
	
	ЗаполнитьСписокВыбораОбъектовПривязки();
	Если Элементы.ПривязкаОбъектМетаданных.СписокВыбора.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	ПривязкаОбъектМетаданных = Элементы.ПривязкаОбъектМетаданных.СписокВыбора[0].Значение;
	ЗаполнитьСписокВыбораПолейПривязки();
	Элементы.ГруппаДобавлениеПривязки.Видимость = Истина;
	Элементы.ДобавитьПривязку.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОбъектовПривязки()
	
	Если НЕ НастройкиФормы.Свойство("ПоляИИдентификаторы") Тогда
		НастройкиФормы.Вставить("ПоляИИдентификаторы", Новый Массив);
		ОбновитьсписокПолей = Истина;
	Иначе
		ОбновитьсписокПолей = Ложь;
	КонецЕсли; 
	Элементы.ПривязкаОбъектМетаданных.СписокВыбора.Очистить();
	ДоступныеПоля = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
	Для каждого Элемент Из ДоступныеПоля.Элементы Цикл
		Если ТипЗнч(Элемент) <> Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Тип Из Элемент.ТипЗначения.Типы() Цикл
			Если НЕ ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
				Продолжить;
			КонецЕсли;
			Если Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Продолжить;
			КонецЕсли;
			Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип);
			Если ОбновитьсписокПолей Тогда
				СтруктураПоля = Новый Структура;
				СтруктураПоля.Вставить("Поле", Строка(Элемент.Поле));
				СтруктураПоля.Вставить("Представление", Элемент.Заголовок);
				СтруктураПоля.Вставить("Идентификатор", Идентификатор);
				НастройкиФормы.ПоляИИдентификаторы.Добавить(СтруктураПоля);
			КонецЕсли; 
			Если Элементы.ПривязкаОбъектМетаданных.СписокВыбора.НайтиПоЗначению(Идентификатор)=Неопределено Тогда
				Элементы.ПривязкаОбъектМетаданных.СписокВыбора.Добавить(Идентификатор);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	Элементы.ПривязкаОбъектМетаданных.СписокВыбора.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПолейПривязки()
	
	Элементы.ПривязкаПолеОтчета.СписокВыбора.Очистить();
	ПривязкаПолеОтчета = Неопределено;
	Если НЕ ЗначениеЗаполнено(ПривязкаОбъектМетаданных) И НЕ НастройкиФормы.Свойство("ПоляИИдентификаторы") Тогда
		Возврат;
	КонецЕсли;
	Для каждого СтруктураПоля Из НастройкиФормы.ПоляИИдентификаторы Цикл
		Если НЕ СтруктураПоля.Идентификатор=ПривязкаОбъектМетаданных Тогда
			Продолжить;
		КонецЕсли;
		Элементы.ПривязкаПолеОтчета.СписокВыбора.Добавить(СтруктураПоля.Поле, СтруктураПоля.Представление);
	КонецЦикла;
	Если Элементы.ПривязкаПолеОтчета.СписокВыбора.Количество()=1 Тогда
		ПривязкаПолеОтчета = Элементы.ПривязкаПолеОтчета.СписокВыбора[0].Значение;
	КонецЕсли;
	Элементы.ПривязкаПолеОтчета.Доступность = (Элементы.ПривязкаПолеОтчета.СписокВыбора.Количество()>1);
	
КонецПроцедуры

&НаСервере
Процедура ПривязкаСохранитьСервер()
	
	Если Контекст.БезПривязки Тогда
		Возврат;
	КонецЕсли; 
	Стр = ПривязкиПолей.Добавить();
	Стр.Объект = ПривязкаОбъектМетаданных;
	Стр.Поле = ПривязкаПолеОтчета;
	Стр.Представление = ПредставлениеПривязки(Стр.ПолучитьИдентификатор());
	ОбновитьЭлементыПривязок();
	Элементы.ГруппаДобавлениеПривязки.Видимость = Ложь;
	Элементы.ДобавитьПривязку.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти
 