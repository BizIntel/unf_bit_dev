
#Область РазделОбъявленияПеременных

&НаКлиенте
Перем ТекСтрокаПоля; // Текущая строка табличной части Поля.
&НаКлиенте
Перем КоличествоПикселейВМиллиметре; // Количество миллиметров, содержащихся в 1 пикселе при текущем разрешении.
&НаКлиенте
Перем ОдинМиллиметрШирины; // Количество у.е. измерения ширины, которое содержится в одном миллиметре при текущем разрешении.
&НаКлиенте
Перем ОдинМиллиметрВысоты; // Количество у.е. измерения высоты, которое содержится в одном миллиметре при текущем разрешении.
&НаКлиенте
Перем ЗакрытьФорму; // Флаг, разрешающий закрытие формы. Истина - форма будет закрыта. Ложь - форма закрыта не будет.
&НаКлиенте
Перем МакетИзменен; // Флаг, пометка модифицированности макета.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗакрытьФорму = Ложь;
	
	#Если ВебКлиент Тогда
		
		ОдинМиллиметрШирины = 0.535;
		ОдинМиллиметрВысоты = 2.711;
		Элементы.Подсказка.Заголовок = "";
		
	#Иначе
	
		Эталон = ПолучитьМакетЭталон();
		
		Рисунок = Эталон.Рисунки[0];
		ВысотаРисунка = Рисунок.Высота;
		ШиринаРисунка = Рисунок.Ширина;
		ВысотаСтрокиВМиллиметрах = Рисунок.Верх;
		ШиринаСтолбцаВМиллиметрах = Рисунок.Лево;
		ВысотаСтроки	= Эталон.Область("R1").ВысотаСтроки;
		ШиринаСтолбца	= Эталон.Область("C1").ШиринаКолонки;
		
		КоличествоПикселейВМиллиметре = 100 / ВысотаРисунка;
		ОдинМиллиметрШирины = ШиринаСтолбца / ШиринаСтолбцаВМиллиметрах;
		ОдинМиллиметрВысоты = ВысотаСтроки / ВысотаСтрокиВМиллиметрах;
	
	#КонецЕсли
	
	Макет.Область().АвтоВысотаСтроки = Ложь;	
	Макет.Область().ВысотаСтроки = ОдинМиллиметрВысоты;
	Макет.Область().ШиринаКолонки = ОдинМиллиметрШирины;
		
	Если Не ЗначениеЗаполнено(ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.XMLОписаниеМакета) Тогда
		МакетИзменен = Ложь;
		СтандартныеРазмеры = "30:20";
		ШиринаЭтикетки = 30;
		ВысотаЭтикетки = 20;
		Ориентация=0;
		ШагСетки = 1;
		ОбновитьРазмерыЭтикетки();
	Иначе
		XMLОписаниеМакета = ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.XMLОписаниеМакета;
		ЗаполнитьПоДаннымМакета();
	КонецЕсли;
	
	УстановитьДоступностьИВидимостьЭлементовИзмененияПоля(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗакрытьФорму Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗавершениеРаботы Тогда
		
		Отказ = Истина;
	Иначе
		
		Если МакетИзменен Тогда
			Отказ = Истина;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("ru= 'Закрыть без сохранения?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("АдресХранилищаСКД") Тогда
		АдресХранилищаСКД = Параметры.АдресХранилищаСКД;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерПриИзменении(Элемент)
	
	ПодобратьСтандартныйРазмер();
	ПерерисоватьМакет();
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеРазмерыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтандартныеРазмеры) Тогда
		
		Подстрока = Лев(СтандартныеРазмеры, Найти(СтандартныеРазмеры, ":")-1);
		ШиринаЭтикетки = Число(Подстрока);
		Подстрока = Сред(СтандартныеРазмеры, Найти(СтандартныеРазмеры, ":")+1);
		ВысотаЭтикетки = Число(Подстрока);
		ПерерисоватьМакет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Частное = Число(Текст)/ШагСетки;
	Если Цел(Частное) <> Частное Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВысотаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Частное = Число(Текст)/ШагСетки;
	Если Цел(Частное) <> Частное Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагСеткиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагСеткиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение<>ШагСетки Тогда
		
		НовыйШагСетки = ВыбранноеЗначение;
		
		ПроекцииПолей = ПолучитьПроекцииПолей(НовыйШагСетки);
		
		УпраздняемыеПоля = Новый Массив;
		
		Индекс = 0;
		
		Для Каждого ТекПоле Из ПроекцииПолей Цикл
			
			Если ТекПоле.Тип<>"UserData"
				И (ТекПоле.Право-ТекПоле.Лево+1<НовыйШагСетки/2
				ИЛИ ТекПоле.Низ-ТекПоле.Верх+1<НовыйШагСетки/2) Тогда
				УпраздняемыеПоля.Добавить(ТекПоле);
				ПроекцииПолей.Удалить(Индекс);
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		Если УпраздняемыеПоля.Количество()>0 Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СтрокаУдаляемыеПоля = "%ПереносСтроки%";
			УдаляемыеПоля = Новый Массив;
			
			Для Каждого ТекПоле Из УпраздняемыеПоля Цикл
				СтрокаУдаляемыеПоля = СтрокаУдаляемыеПоля + ТекПоле.Значение + "%ПереносСтроки%";
				УдаляемыеПоля.Добавить(ТекПоле.Идентификатор);
			КонецЦикла;
			
			СтрокаВопрос = НСтр("ru= 'Поля:%Поля%имеют слишком маленькие размеры.%ПереносСтроки%Продолжить изменение шага сетки, удалив указанные поля?'");
			СтрокаВопрос = СтрЗаменить(СтрокаВопрос, "%Поля%", СтрокаУдаляемыеПоля);
			СтрокаВопрос = СтрЗаменить(СтрокаВопрос, "%ПереносСтроки%", Символы.ПС);
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРешениеПользователя", ЭтотОбъект, Новый Структура("ПроекцииПолей, НовыйШагСетки, УдаляемыеПоля", ПроекцииПолей, НовыйШагСетки, УдаляемыеПоля)), СтрокаВопрос, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПрименитьНовыеКоординаты(ПроекцииПолей, НовыйШагСетки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетПриАктивизацииОбласти(Элемент)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТД = НайденныеСтроки[0];
		УстановитьПодписиДляГраниц(ТД);
		
		УстановитьДоступностьИВидимостьЭлементовИзмененияПоля(Истина, ТД.Тип);
		
	Иначе
		УстановитьДоступностьИВидимостьЭлементовИзмененияПоля(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Наименование = Область.Имя;
	НайденныеПоля = Поля.НайтиСтроки(Новый Структура("Наименование", Наименование));
	
	Если НайденныеПоля.Количество()>0 Тогда
		НачатьРедактированиеПоля(НайденныеПоля[0]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПоле(Команда)
	
	НачатьДобавлениеПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоле(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		НачатьРедактированиеПоля(ТД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоле(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		УдалитьОписаниеПоля(ТД.Наименование);
		ОчиститьОбласть((ТД.Верх-1)/ШагСетки+1, (ТД.Лево-1)/ШагСетки+1, ТД.Низ/ШагСетки, ТД.Право/ШагСетки);
		УстановитьДоступностьИВидимостьЭлементовИзмененияПоля(Ложь);
		МакетИзменен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если Поля.Количество()>0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект), НСтр("ru= 'Загрузить макет этикетки из файла?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыборФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	ДОФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДОФ.ПолноеИмяФайла = ИмяФайла;
	ДОФ.Фильтр = НСтр("ru = 'XML-файл'; en = 'XML file'") + "(*.xml)|*.xml";
	ДОФ.МножественныйВыбор = Ложь;
	ДОФ.Заголовок = НСтр("ru = 'Сохранение файла-макета'");
	ДОФ.Показать(Новый ОписаниеОповещения("СохранитьВФайлЗавершение", ЭтотОбъект, Новый Структура("ДОФ", ДОФ)));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьМакет(Команда)
	
	Если Поля.Количество()>0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьМакетЗавершение", ЭтотОбъект), НСтр("ru= 'Очистить макет?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ОчисткаМакета();
		МакетИзменен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОписаниеМакетаВXML(Команда)
	
	ТД = Новый ТекстовыйДокумент;
	ТекстXML = ПолучитьТекстСОписаниемЭтикетки();
	ТД.УстановитьТекст(ТекстXML);
	ТД.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗакрытьФорму = Истина;
	ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("РазмерМакета", Строка(ШиринаЭтикетки) + "x" + Строка(ВысотаЭтикетки));
	ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("XMLОписаниеМакета", СохранитьXMLФайл());
	ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("Поля", СформироватьСписокПолей());
	Закрыть(КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаКлиенте
Процедура ГраницаВокруг(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		ТД = НайденныеСтроки[0];
		ИзменитьГраницыПоля(ТД.Наименование, 5);
		УстановитьПометкиКнопокФорматирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГраницаСверху(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		ИзменитьГраницыПоля(ТД.Наименование, 2);
		
		Элементы.ГраницаСверху.Пометка = Не Элементы.ГраницаСверху.Пометка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГраницаСлева(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		ИзменитьГраницыПоля(ТД.Наименование, 1);
		
		Элементы.ГраницаСлева.Пометка = Не Элементы.ГраницаСлева.Пометка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГраницаСнизу(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		ИзменитьГраницыПоля(ТД.Наименование, 4);
		
		Элементы.ГраницаСнизу.Пометка = Не Элементы.ГраницаСнизу.Пометка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГраницаСправа(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		ИзменитьГраницыПоля(ТД.Наименование, 3);
		
		Элементы.ГраницаСправа.Пометка = Не Элементы.ГраницаСправа.Пометка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СместитьЛевуюГраницуВлево(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип <> "UserData" Тогда
			ИзменитьКоординатуГраницу(ТД.Наименование, 1, -ШагСетки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СместитьЛевуюГраницуВправо(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип <> "UserData" Тогда
			ИзменитьКоординатуГраницу(ТД.Наименование, 1, ШагСетки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СместитьПравуюГраницуВлево(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип <> "UserData" Тогда
			ИзменитьКоординатуГраницу(ТД.Наименование, 3, -ШагСетки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СместитьПравуюГраницуВправо(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип <> "UserData" Тогда
			ИзменитьКоординатуГраницу(ТД.Наименование, 3, ШагСетки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоднятьВерхнююГраницу(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип <> "UserData" Тогда
			ИзменитьКоординатуГраницу(ТД.Наименование, 2, -ШагСетки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпуститьВерхнююГраницу(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип <> "UserData" Тогда
			ИзменитьКоординатуГраницу(ТД.Наименование, 2, ШагСетки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоднятьНижнююГраницу(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип <> "UserData" Тогда
			ИзменитьКоординатуГраницу(ТД.Наименование, 4, -ШагСетки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпуститьНижнююГраницу(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип <> "UserData" Тогда
			ИзменитьКоординатуГраницу(ТД.Наименование, 4, ШагСетки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеПоЛевомуКраю(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип = "Text" Тогда
			
			УстановитьГоризонтальноеПоложениеТекста(ТД, "Left");
			
			Элементы.ВыравниваниеПоЛевомуКраю.Пометка = Истина;
			Элементы.ВыравниваниеПоЦентру.Пометка = Ложь;
			Элементы.ВыравниваниеПоПравомуКраю.Пометка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеПоЦентру(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип = "Text" Тогда
			
			УстановитьГоризонтальноеПоложениеТекста(ТД, "Center");
			
			Элементы.ВыравниваниеПоЛевомуКраю.Пометка = Ложь;
			Элементы.ВыравниваниеПоЦентру.Пометка = Истина;
			Элементы.ВыравниваниеПоПравомуКраю.Пометка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеПоПравомуКраю(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип = "Text" Тогда
			
			УстановитьГоризонтальноеПоложениеТекста(ТД, "Right");
			
			Элементы.ВыравниваниеПоЛевомуКраю.Пометка = Ложь;
			Элементы.ВыравниваниеПоЦентру.Пометка = Ложь;
			Элементы.ВыравниваниеПоПравомуКраю.Пометка = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеПоВерхнемуКраю(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип = "Text" Тогда
			
			УстановитьВертикальноеПоложениеТекста(ТД, "Top");
			
			Элементы.ВыравниваниеПоВерхнемуКраю.Пометка = Истина;
			Элементы.ВертикальноеВыравниваниеПоЦентру.Пометка = Ложь;
			Элементы.ВыравниваниеПоНижнемуКраю.Пометка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВертикальноеВыравниваниеПоЦентру(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип = "Text" Тогда
			
			УстановитьВертикальноеПоложениеТекста(ТД, "Center");
			
			Элементы.ВыравниваниеПоВерхнемуКраю.Пометка = Ложь;
			Элементы.ВертикальноеВыравниваниеПоЦентру.Пометка = Истина;
			Элементы.ВыравниваниеПоНижнемуКраю.Пометка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеПоНижнемуКраю(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип = "Text" Тогда
			
			УстановитьВертикальноеПоложениеТекста(ТД, "Bottom");
			
			Элементы.ВыравниваниеПоВерхнемуКраю.Пометка = Ложь;
			Элементы.ВертикальноеВыравниваниеПоЦентру.Пометка = Ложь;
			Элементы.ВыравниваниеПоНижнемуКраю.Пометка = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Полужирный(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип = "Text" Тогда
			
			ИзменитьШрифт(ТД, 1);
			
			Элементы.Полужирный.Пометка = Не Элементы.Полужирный.Пометка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Курсив(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип = "Text" Тогда
			
			ИзменитьШрифт(ТД, 2);
			
			Элементы.Курсив.Пометка = Не Элементы.Курсив.Пометка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подчеркнутый(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		ТД = НайденныеСтроки[0];
		
		Если ТД.Тип = "Text" Тогда
			
			ИзменитьШрифт(ТД, 3);			
			
			Элементы.Подчеркнутый.Пометка = Не Элементы.Подчеркнутый.Пометка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьГраницы(Команда)
	
	НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", Элементы.Макет.ТекущаяОбласть.Имя));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		ТД = НайденныеСтроки[0];
		ИзменитьГраницыПоля(ТД.Наименование, 0);
		УстановитьПометкиКнопокФорматирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДополнительныеДанные(Команда)
	
	ПередаваемыеПараметры = Новый Структура;
	
	МассивПолейДополнительныхДанных = Новый Массив;
	
	Для Каждого ТекПоле Из Поля Цикл
		
		Если ТекПоле.Тип = "UserData" Тогда
			ОписаниеПоляДопДанных = Новый Структура;
			ОписаниеПоляДопДанных.Вставить("Наименование",			ТекПоле.Наименование);
			ОписаниеПоляДопДанных.Вставить("Тип",					ТекПоле.Тип);
			ОписаниеПоляДопДанных.Вставить("ТипЗаполнения",			ТекПоле.ТипЗаполнения);
			ОписаниеПоляДопДанных.Вставить("ЗначениеПоУмолчанию",	ТекПоле.ЗначениеПоУмолчанию);
			ОписаниеПоляДопДанных.Вставить("Значение",				ТекПоле.Значение);
			ОписаниеПоляДопДанных.Вставить("Верх",					Неопределено);
			ОписаниеПоляДопДанных.Вставить("Лево",					Неопределено);
			ОписаниеПоляДопДанных.Вставить("Низ",					Неопределено);
			ОписаниеПоляДопДанных.Вставить("Право",					Неопределено);
			ОписаниеПоляДопДанных.Вставить("Ориентация",			Неопределено);
			ОписаниеПоляДопДанных.Вставить("Шрифт",					Неопределено);
			ОписаниеПоляДопДанных.Вставить("РамкаСлева",			Неопределено);
			ОписаниеПоляДопДанных.Вставить("РамкаСверху",			Неопределено);
			ОписаниеПоляДопДанных.Вставить("РамкаСправа",			Неопределено);
			ОписаниеПоляДопДанных.Вставить("РамкаСнизу",			Неопределено);
			ОписаниеПоляДопДанных.Вставить("ТипРамки",				Неопределено);
			ОписаниеПоляДопДанных.Вставить("ТолщинаРамки",			Неопределено);
			ОписаниеПоляДопДанных.Вставить("ТипШтрихкода",			Неопределено);
			ОписаниеПоляДопДанных.Вставить("РазмерШрифтаПодписи",	Неопределено);
			ОписаниеПоляДопДанных.Вставить("ПодписьШтрихкода",		Неопределено);
			ОписаниеПоляДопДанных.Вставить("КонтрольныйСимвол",		Неопределено);
			ОписаниеПоляДопДанных.Вставить("ПоложениеПоГоризонтали",Неопределено);
			ОписаниеПоляДопДанных.Вставить("ПоложениеПоВертикали",	Неопределено);
			ОписаниеПоляДопДанных.Вставить("Многострочность",		Неопределено);
			ОписаниеПоляДопДанных.Вставить("Формат",				ТекПоле.Формат);
			
			МассивПолейДополнительныхДанных.Добавить(ОписаниеПоляДопДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	ПередаваемыеПараметры.Вставить("Поля", МассивПолейДополнительныхДанных);
	ПередаваемыеПараметры.Вставить("ШагСетки", ШагСетки);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИзменитьДополнительныеДанныеЗавершение", ЭтотОбъект, ПередаваемыеПараметры);
	ОткрытьФорму("ОбщаяФорма.РедакторЭтикетокДополнительныеДанные", Новый Структура("АдресХранилищаСКД", АдресХранилищаСКД),,,,, ОповещениеПриЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьПоДаннымМакета(ЧтениеИзФайла = Ложь)
	
	СодержимоеXMLФайла = Неопределено;
	
	Если ЧтениеИзФайла Тогда
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Попытка
			
			ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
			Источник = ТекстовыйДокумент.ПолучитьТекст();
			
		Исключение
			
			ТекстСообщения = НСтр("ru='При чтении файла %ИмяФайла% произошла ошибка'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Возврат;
			
		КонецПопытки;
		
	Иначе
		Источник = XMLОписаниеМакета;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	
	Если МенеджерОборудованияВызовСервера.ПолучитьОписаниеМакета(Источник, СообщениеОбОшибке, СодержимоеXMLФайла) Тогда
	
		ШагСетки = СодержимоеXMLФайла.Масштаб;
		ОчиститьОбласть(1, 1, ВысотаЭтикетки/ШагСетки, ШиринаЭтикетки/ШагСетки);
		Поля.Очистить();
		ШиринаЭтикетки = СодержимоеXMLФайла.Ширина;
		ВысотаЭтикетки = СодержимоеXMLФайла.Высота;
		Ориентация = СодержимоеXMLФайла.Ориентация;
		
		Для Каждого ТекПоле Из СодержимоеXMLФайла.Поля Цикл
			
			НовоеПоле = Поля.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеПоле, ТекПоле);
			
			Если ТекПоле.Тип="Text" Или ТекПоле.Тип="UserData" Тогда
				НовоеПоле.Представление = ТекПоле.Значение;
			ИначеЕсли ТекПоле.Тип="Barcode" Тогда
				НовоеПоле.Представление = "Штрихкод " + ТекПоле.ТипШтрихкода;
			ИначеЕсли ТекПоле.Тип="Image" Тогда
				НовоеПоле.Представление = "Картинка";
			КонецЕсли;
			
			Если ТекПоле.Тип<>"UserData" Тогда
				СохранитьОформлениеПоля(НовоеПоле, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
	ПодобратьСтандартныйРазмер();
	ОбновитьРазмерыЭтикетки();
	МакетИзменен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСписокПолей()
	
	Результат = Новый Массив;
	
	Для Каждого ТекПоле Из Поля Цикл
		
		НовоеПоле = Новый Структура;
		НовоеПоле.Вставить("Наименование", ТекПоле.Наименование);
		НовоеПоле.Вставить("Тип", ТекПоле.Тип);
		НовоеПоле.Вставить("ТипЗаполнения", ТекПоле.ТипЗаполнения);
		НовоеПоле.Вставить("Значение", ТекПоле.Значение);
		НовоеПоле.Вставить("ЗначениеПоУмолчанию", ТекПоле.ЗначениеПоУмолчанию);
		НовоеПоле.Вставить("Формат", ТекПоле.Формат);
		Результат.Добавить(НовоеПоле);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекстСОписаниемЭтикетки()
	
	Результат = СохранитьXMLФайл();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПодобратьСтандартныйРазмер()
	
	НайденныйЭлемент = Элементы.СтандартныеРазмеры.СписокВыбора.НайтиПоЗначению(Строка(ШиринаЭтикетки) + ":" + Строка(ВысотаЭтикетки));
	
	Если НайденныйЭлемент<>Неопределено Тогда
		СтандартныеРазмеры = НайденныйЭлемент.Значение;
	Иначе
		СтандартныеРазмеры = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРедактированиеПоля(Поле, ВыбранноеПолеСКД=Неопределено)
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Наименование",			Поле.Наименование);
	ОписаниеПоля.Вставить("Тип",					Поле.Тип);
	ОписаниеПоля.Вставить("ТипЗаполнения",			Поле.ТипЗаполнения);
	ОписаниеПоля.Вставить("ЗначениеПоУмолчанию",	Поле.ЗначениеПоУмолчанию);
	ОписаниеПоля.Вставить("Значение",				?(ВыбранноеПолеСКД<>Неопределено, ВыбранноеПолеСКД, Поле.Значение));
	ОписаниеПоля.Вставить("Верх",					Поле.Верх-1);
	ОписаниеПоля.Вставить("Лево",					Поле.Лево-1);
	ОписаниеПоля.Вставить("Низ",					Поле.Низ);
	ОписаниеПоля.Вставить("Право",					Поле.Право);
	ОписаниеПоля.Вставить("Ориентация",				Поле.Ориентация);
	ОписаниеПоля.Вставить("Шрифт",					Новый Шрифт(Поле.ИмяШрифта, ?(ЗначениеЗаполнено(Поле.РазмерШрифта), Поле.РазмерШрифта, Неопределено), Поле.Жирный, Поле.Наклонный, Поле.Подчеркивание, Поле.Зачеркивание));
	ОписаниеПоля.Вставить("РамкаСлева",				Поле.РамкаСлева);
	ОписаниеПоля.Вставить("РамкаСверху",			Поле.РамкаСверху);
	ОписаниеПоля.Вставить("РамкаСправа",			Поле.РамкаСправа);
	ОписаниеПоля.Вставить("РамкаСнизу",				Поле.РамкаСнизу);
	ОписаниеПоля.Вставить("ТипРамки",				?(ЗначениеЗаполнено(Поле.ТипРамки), Поле.ТипРамки, "Solid"));
	ОписаниеПоля.Вставить("ТолщинаРамки",			?(ЗначениеЗаполнено(Поле.ТолщинаРамки), Поле.ТолщинаРамки, 1));
	ОписаниеПоля.Вставить("ТипШтрихкода",			?(ЗначениеЗаполнено(Поле.ТипШтрихкода), Поле.ТипШтрихкода, "EAN8"));
	ОписаниеПоля.Вставить("РазмерШрифтаПодписи",	?(ЗначениеЗаполнено(Поле.РазмерШрифтаПодписи), Поле.РазмерШрифтаПодписи, 3));
	ОписаниеПоля.Вставить("ПодписьШтрихкода",		Поле.ПодписьШтрихкода);
	ОписаниеПоля.Вставить("КонтрольныйСимвол",		Поле.КонтрольныйСимвол);
	ОписаниеПоля.Вставить("ПоложениеПоГоризонтали",	?(ЗначениеЗаполнено(Поле.ПоложениеПоГоризонтали), Поле.ПоложениеПоГоризонтали, "Left"));
	ОписаниеПоля.Вставить("ПоложениеПоВертикали",	?(ЗначениеЗаполнено(Поле.ПоложениеПоВертикали), Поле.ПоложениеПоВертикали, "Top"));
	ОписаниеПоля.Вставить("Многострочность",		Поле.Многострочность);
	ОписаниеПоля.Вставить("Формат",					Поле.Формат);
	
	РедактируемоеПоле = Новый Структура;
	РедактируемоеПоле.Вставить("Наименование",	Поле.Наименование);
	РедактируемоеПоле.Вставить("Тип",			Поле.Тип);
	РедактируемоеПоле.Вставить("Верх",			Поле.Верх);
	РедактируемоеПоле.Вставить("Лево",			Поле.Лево);
	РедактируемоеПоле.Вставить("Низ",			Поле.Низ);
	РедактируемоеПоле.Вставить("Право",			Поле.Право);
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("ОписаниеПоля", ОписаниеПоля);
	ПередаваемыеПараметры.Вставить("РедактируемоеПоле", РедактируемоеПоле);
	ПередаваемыеПараметры.Вставить("ШагСетки", ШагСетки);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьДобавлениеРедактированиеПоляЗавершение", ЭтотОбъект, ПередаваемыеПараметры);
	ОткрытьФорму("ОбщаяФорма.РедакторЭтикетокФормаРедактированияПоляМакета", Новый Структура("АдресХранилищаСКД", АдресХранилищаСКД),,,,, ОповещениеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьДобавлениеРедактированиеПоляЗавершение(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		РедактируемоеПоле = Неопределено;
		ОчищатьСтароеОформление = Ложь;
		ОписаниеПоля = ПередаваемыеПараметры.ОписаниеПоля;
		
		Если ОписаниеПоля.Тип <> "UserData" Тогда
			ОписаниеПоля.Лево = ?(ОписаниеПоля.Лево>ШиринаЭтикетки, ШиринаЭтикетки, ОписаниеПоля.Лево);
			ОписаниеПоля.Верх = ?(ОписаниеПоля.Верх>ВысотаЭтикетки, ВысотаЭтикетки, ОписаниеПоля.Верх);
			ОписаниеПоля.Право = ?(ОписаниеПоля.Право>ШиринаЭтикетки, ШиринаЭтикетки, ОписаниеПоля.Право);
			ОписаниеПоля.Низ = ?(ОписаниеПоля.Низ>ВысотаЭтикетки, ВысотаЭтикетки, ОписаниеПоля.Низ);
		КонецЕсли;
		
		Если ПередаваемыеПараметры.Свойство("РедактируемоеПоле", РедактируемоеПоле) Тогда
			
			Если РедактируемоеПоле.Тип<>"UserData" Тогда
				
				ОчищатьСтароеОформление = Истина;
				
				РедактируемоеПоле.Лево = РедактируемоеПоле.Лево;
				РедактируемоеПоле.Верх = РедактируемоеПоле.Верх;
				РедактируемоеПоле.Право = РедактируемоеПоле.Право;
				РедактируемоеПоле.Низ = РедактируемоеПоле.Низ;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ТекПоле Из Поля Цикл
			
			Если (ТекПоле.Наименование = ОписаниеПоля.Наименование) И Не (РедактируемоеПоле<>Неопределено И РедактируемоеПоле.Наименование = ОписаниеПоля.Наименование) Тогда
				ПредложитьПользователюПродолжитьРедактирование(ОписаниеПоля, РедактируемоеПоле);
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОписаниеПоля.Тип <> "UserData" Тогда
			
			ПересекаемыеПоля = Новый Массив;
			
			Для Каждого ТекПоле Из Поля Цикл
				
				Если ТекПоле.Тип<>"UserData" Тогда
					
					ГоризонтальноеПересечение = Ложь;
					
					Если ((ТекПоле.Лево<=ОписаниеПоля.Лево И ОписаниеПоля.Лево<=ТекПоле.Право) ИЛИ (ТекПоле.Лево<=ОписаниеПоля.Право И ОписаниеПоля.Право<=ТекПоле.Право))
							ИЛИ ((ОписаниеПоля.Лево<=ТекПоле.Лево И ТекПоле.Лево<=ОписаниеПоля.Право) ИЛИ (ОписаниеПоля.Лево<=ТекПоле.Право И ТекПоле.Право<=ОписаниеПоля.Право)) Тогда
						ГоризонтальноеПересечение = Истина;
					КонецЕсли;
						
					Если ГоризонтальноеПересечение Тогда
						
						ВертикальноеПересечение = Ложь;
						
						Если ((ТекПоле.Верх<=ОписаниеПоля.Верх И ОписаниеПоля.Верх<=ТекПоле.Низ) ИЛИ (ТекПоле.Верх<=ОписаниеПоля.Низ И ОписаниеПоля.Низ<=ТекПоле.Низ))
							ИЛИ ((ОписаниеПоля.Верх<=ТекПоле.Верх И ТекПоле.Верх<=ОписаниеПоля.Низ) ИЛИ (ОписаниеПоля.Верх<=ТекПоле.Низ И ТекПоле.Низ<=ОписаниеПоля.Низ)) Тогда
							ВертикальноеПересечение = Истина;
						КонецЕсли;
					
						Если ВертикальноеПересечение Тогда
							
							Если РедактируемоеПоле<>Неопределено Тогда
								
								Если РедактируемоеПоле.Наименование = ТекПоле.Наименование Тогда
									Продолжить;
								КонецЕсли;
								
							КонецЕсли;
							
							Если ТекПоле.Тип = "Image" Тогда
								ПредставлениеПоля = "Картинка";
							Иначе
								ПредставлениеПоля = ТекПоле.Значение;
							КонецЕсли;
							
							НовоеОписаниеПоля = Новый Структура;
							НовоеОписаниеПоля.Вставить("Верх", ТекПоле.Верх);
							НовоеОписаниеПоля.Вставить("Лево", ТекПоле.Лево);
							НовоеОписаниеПоля.Вставить("Низ", ТекПоле.Низ);
							НовоеОписаниеПоля.Вставить("Право", ТекПоле.Право);
							НовоеОписаниеПоля.Вставить("Наименование", ТекПоле.Наименование);
							НовоеОписаниеПоля.Вставить("Представление",ПредставлениеПоля);
							
							ПересекаемыеПоля.Добавить(НовоеОписаниеПоля);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПересекаемыеПоля.Количество()>0 Тогда
				ПередаваемыеПараметры.Вставить("ПересекаемыеПоля", ПересекаемыеПоля);
				ПередаваемыеПараметры.Вставить("ОчищатьСтароеОформление", ОчищатьСтароеОформление);
				ОпроситьПользователяОбУдаленииПересекаемыхПолей(ПередаваемыеПараметры);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		МакетИзменен = Истина;
		
		Если ОчищатьСтароеОформление Тогда
			ОчиститьОбласть((РедактируемоеПоле.Верх-1)/ШагСетки+1, (РедактируемоеПоле.Лево-1)/ШагСетки+1, РедактируемоеПоле.Низ/ШагСетки, РедактируемоеПоле.Право/ШагСетки);
		КонецЕсли;
		
		СохранитьОписаниеПоля(ОписаниеПоля, РедактируемоеПоле);
		
		Если ОписаниеПоля.Тип<>"UserData" Тогда
			СохранитьОформлениеПоля(ОписаниеПоля);
			Элементы.Макет.ТекущаяОбласть = Макет.Область(ОписаниеПоля.Наименование);
		КонецЕсли;
		
		УстановитьДоступностьИВидимостьЭлементовИзмененияПоля(Истина, ОписаниеПоля.Тип);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПараметров(КоллекцияИсточник, КоллекцияПриемник)
	
	Для Каждого ТекЭлемент Из КоллекцияИсточник Цикл
		
		КоллекцияПриемник.Добавить(ТекЭлемент.Поле);
		
		Если ТекЭлемент.Элементы.Количество()>0 Тогда
			ЗаполнитьСписокПараметров(ТекЭлемент.Элементы, КоллекцияПриемник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОписаниеПоля(ИмяОбласти)
	
	Отбор = Новый Структура("Наименование", ИмяОбласти);
	НайденноеПоле = Поля.НайтиСтроки(Отбор);
	
	Если НайденноеПоле.Количество()>0 Тогда
		Поля.Удалить(НайденноеПоле[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОбласть(Верх, Лево, Низ, Право)
	
	#Если ВебКлиент Тогда
		
		ОчиститьОбластьНаСервере(Верх, Лево, Низ, Право);
		
	#Иначе
	
		Область = Макет.Область(Верх, Лево, Низ, Право);
		Область.Имя = "";
		Область.Картинка = Неопределено;
		Область.Разъединить();
		Область.Очистить(Истина, Истина, Истина);	
		Область.ЦветФона = Новый Цвет(255,255,255);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла()
	
	ДОФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДОФ.ПолноеИмяФайла = ИмяФайла;
	ДОФ.Фильтр = НСтр("ru = 'XML-файл'; en = 'XML file'") + "(*.xml)|*.xml";
	ДОФ.МножественныйВыбор = Ложь;
	ДОФ.Заголовок = НСтр("ru= 'Выберите файл макета'");
	ДОФ.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект, Новый Структура("ДОФ", ДОФ)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    ДОФ = ДополнительныеПараметры.ДОФ;    
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
        ИмяФайла = ДОФ.ПолноеИмяФайла;
		ЗаполнитьПоДаннымМакета(Истина);
		МакетИзменен = Истина;
    Иначе
        Возврат;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаМакета()
	
	ИмяФайла = "";
	Поля.Очистить();
	Ориентация=0;
	ПерерисоватьМакет();
	
	МакетИзменен = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетЭталон()
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьМакет("МакетДляОпределенияКоэффициентовЕдиницИзмерения");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьРазмерыЭтикетки()
	
	Макет.Область().ЦветФона = Новый Цвет(128,128,128);
	Макет.Область(1, 1, ВысотаЭтикетки/ШагСетки, ШиринаЭтикетки/ШагСетки).ЦветФона = Новый Цвет(255,255,255);
	
	Для Каждого ТекПоле Из Поля Цикл
		
		Если ТекПоле.Тип = "Barcode" Или ТекПоле.Тип = "Image" Тогда
			Макет.Область(ТекПоле.Наименование).ЦветФона = Новый Цвет(235,235,235);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОписаниеПоля(ОписаниеПоля, РедактируемоеПоле=Неопределено)
	
	Если РедактируемоеПоле<>Неопределено Тогда
		ПолеМакета = Поля.НайтиСтроки(Новый Структура("Наименование", РедактируемоеПоле.Наименование))[0];
	Иначе
		ПолеМакета	= Поля.Добавить();
	КонецЕсли;
	
	ПолеМакета.Тип	= ОписаниеПоля.Тип;
	ПолеМакета.Наименование	= ОписаниеПоля.Наименование;
	ПолеМакета.Значение = ОписаниеПоля.Значение;
	ПолеМакета.ТипЗаполнения = ОписаниеПоля.ТипЗаполнения;
	ПолеМакета.Значение = ОписаниеПоля.Значение;
	ПолеМакета.ЗначениеПоУмолчанию = ОписаниеПоля.ЗначениеПоУмолчанию;
	
	Если ОписаниеПоля.Тип<>"UserData" Тогда
		
		ПолеМакета.Верх							= ОписаниеПоля.Верх;
		ПолеМакета.Лево							= ОписаниеПоля.Лево;
		ПолеМакета.Низ							= ОписаниеПоля.Низ;
		ПолеМакета.Право						= ОписаниеПоля.Право;
		ПолеМакета.Ориентация					= ОписаниеПоля.Ориентация;
		
		Если ОписаниеПоля.Тип = "Text" Тогда
			ПолеМакета.Представление				= ОписаниеПоля.Значение;
			ПолеМакета.ИмяШрифта					= ОписаниеПоля.Шрифт.Имя;
			ПолеМакета.РазмерШрифта					= ?(ОписаниеПоля.Шрифт.Размер=-1, 8, ОписаниеПоля.Шрифт.Размер);
			ПолеМакета.Жирный						= ОписаниеПоля.Шрифт.Жирный;
			ПолеМакета.Наклонный					= ОписаниеПоля.Шрифт.Наклонный;
			ПолеМакета.Подчеркивание				= ОписаниеПоля.Шрифт.Подчеркивание;
			ПолеМакета.Зачеркивание					= ОписаниеПоля.Шрифт.Зачеркивание;
			ПолеМакета.РамкаСлева					= ОписаниеПоля.РамкаСлева;
			ПолеМакета.РамкаСверху					= ОписаниеПоля.РамкаСверху;
			ПолеМакета.РамкаСправа					= ОписаниеПоля.РамкаСправа;
			ПолеМакета.РамкаСнизу					= ОписаниеПоля.РамкаСнизу;
			ПолеМакета.ТипРамки						= ОписаниеПоля.ТипРамки;
			ПолеМакета.ТолщинаРамки					= ОписаниеПоля.ТолщинаРамки;
			ПолеМакета.ПоложениеПоГоризонтали		= ОписаниеПоля.ПоложениеПоГоризонтали;
			ПолеМакета.ПоложениеПоВертикали			= ОписаниеПоля.ПоложениеПоВертикали;
			ПолеМакета.Многострочность				= ОписаниеПоля.Многострочность;
			ПолеМакета.Формат						= ОписаниеПоля.Формат;
			ПолеМакета.ТипШтрихкода					= Неопределено;
			ПолеМакета.КонтрольныйСимвол			= Неопределено;
			ПолеМакета.ПодписьШтрихкода				= Неопределено;
			ПолеМакета.РазмерШрифтаПодписи			= Неопределено;
		ИначеЕсли ОписаниеПоля.Тип = "Barcode" Тогда
			ПолеМакета.Представление				= "Штрихкод " + ОписаниеПоля.ТипШтрихкода;
			ПолеМакета.ТипШтрихкода					= ОписаниеПоля.ТипШтрихкода;
			ПолеМакета.КонтрольныйСимвол			= ОписаниеПоля.КонтрольныйСимвол;
			ПолеМакета.ПодписьШтрихкода				= ОписаниеПоля.ПодписьШтрихкода;
			ПолеМакета.РазмерШрифтаПодписи			= ОписаниеПоля.РазмерШрифтаПодписи;
			ПолеМакета.ИмяШрифта					= Неопределено;
			ПолеМакета.РазмерШрифта					= Неопределено;
			ПолеМакета.Жирный						= Неопределено;
			ПолеМакета.Наклонный					= Неопределено;
			ПолеМакета.Подчеркивание				= Неопределено;
			ПолеМакета.Зачеркивание					= Неопределено;
			ПолеМакета.РамкаСлева					= Неопределено;
			ПолеМакета.РамкаСверху					= Неопределено;
			ПолеМакета.РамкаСправа					= Неопределено;
			ПолеМакета.РамкаСнизу					= Неопределено;
			ПолеМакета.ТипРамки						= Неопределено;
			ПолеМакета.ТолщинаРамки					= Неопределено;
			ПолеМакета.ПоложениеПоГоризонтали		= Неопределено;
			ПолеМакета.ПоложениеПоВертикали			= Неопределено;
			ПолеМакета.Многострочность				= Неопределено;
		ИначеЕсли ОписаниеПоля.Тип = "Image" Тогда
			ПолеМакета.Представление				= "Картинка";
			ПолеМакета.РамкаСлева					= ОписаниеПоля.РамкаСлева;
			ПолеМакета.РамкаСверху					= ОписаниеПоля.РамкаСверху;
			ПолеМакета.РамкаСправа					= ОписаниеПоля.РамкаСправа;
			ПолеМакета.РамкаСнизу					= ОписаниеПоля.РамкаСнизу;
			ПолеМакета.ТипРамки						= ОписаниеПоля.ТипРамки;
			ПолеМакета.ТолщинаРамки					= ОписаниеПоля.ТолщинаРамки;
			ПолеМакета.ИмяШрифта					= Неопределено;
			ПолеМакета.РазмерШрифта					= Неопределено;
			ПолеМакета.Жирный						= Неопределено;
			ПолеМакета.Наклонный					= Неопределено;
			ПолеМакета.Подчеркивание				= Неопределено;
			ПолеМакета.Зачеркивание					= Неопределено;
			ПолеМакета.ТипШтрихкода					= Неопределено;
			ПолеМакета.КонтрольныйСимвол			= Неопределено;
			ПолеМакета.ПодписьШтрихкода				= Неопределено;
			ПолеМакета.РазмерШрифтаПодписи			= Неопределено;
			ПолеМакета.ПоложениеПоГоризонтали		= Неопределено;
			ПолеМакета.ПоложениеПоВертикали			= Неопределено;
			ПолеМакета.Многострочность				= Неопределено;
		КонецЕсли;
		
	Иначе
		ПолеМакета.Представление				= ОписаниеПоля.Значение;
		ПолеМакета.Формат						= ОписаниеПоля.Формат;
		ПолеМакета.Верх							= Неопределено;
		ПолеМакета.Лево							= Неопределено;
		ПолеМакета.Низ							= Неопределено;
		ПолеМакета.Право						= Неопределено;
		ПолеМакета.Ориентация					= Неопределено;
		ПолеМакета.ИмяШрифта					= Неопределено;
		ПолеМакета.РазмерШрифта					= Неопределено;
		ПолеМакета.Жирный						= Неопределено;
		ПолеМакета.Наклонный					= Неопределено;
		ПолеМакета.Подчеркивание				= Неопределено;
		ПолеМакета.Зачеркивание					= Неопределено;
		ПолеМакета.РамкаСлева					= Неопределено;
		ПолеМакета.РамкаСверху					= Неопределено;
		ПолеМакета.РамкаСправа					= Неопределено;
		ПолеМакета.РамкаСнизу					= Неопределено;
		ПолеМакета.ТипРамки						= Неопределено;
		ПолеМакета.ТолщинаРамки					= Неопределено;
		ПолеМакета.ПоложениеПоГоризонтали		= Неопределено;
		ПолеМакета.ПоложениеПоВертикали			= Неопределено;
		ПолеМакета.Многострочность				= Неопределено;
		ПолеМакета.ТипШтрихкода					= Неопределено;
		ПолеМакета.КонтрольныйСимвол			= Неопределено;
		ПолеМакета.ПодписьШтрихкода				= Неопределено;
		ПолеМакета.РазмерШрифтаПодписи			= Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьXMLОписаниеЭтикетки()
	
	Возврат МенеджерОборудованияВызовСервера.СохранитьXMLФайл(ШиринаЭтикетки, ВысотаЭтикетки, Ориентация, Поля);
	
КонецФункции

&НаКлиенте
Процедура СохранитьОформлениеПоля(ОписаниеПоля, ОткрытиеМакета=Ложь, ТабличныйДокумент=Неопределено)
	
	#Если ВебКлиент Тогда
		
		Если ТипЗнч(ОписаниеПоля)<>Тип("Структура") Тогда
			ОписаниеПоля = ПолучитьОписаниеПоля(ОписаниеПоля);
		КонецЕсли;
		
		СохранитьОформлениеПоляНаСервере(ОписаниеПоля, ОткрытиеМакета, ТабличныйДокумент);
		
	#Иначе
	
		Если ТабличныйДокумент=Неопределено Тогда
			ТабличныйДокумент = Макет;
		КонецЕсли;
		
		Область = ТабличныйДокумент.Область((ОписаниеПоля.Верх-1)/ШагСетки+1, (ОписаниеПоля.Лево-1)/ШагСетки+1, ОписаниеПоля.Низ/ШагСетки, ОписаниеПоля.Право/ШагСетки);
		Область.Объединить();
		Область.Имя = ОписаниеПоля.Наименование;
		
		Если ОписаниеПоля.Тип = "Text" Тогда
			
			Если ОписаниеПоля.ТипЗаполнения = "Constant" Тогда
				Область.Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Текст;
				Область.Текст = ОписаниеПоля.Значение;
			Иначе
				Область.Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				Область.Параметр = ОписаниеПоля.Значение;
			КонецЕсли;
			
			Если ОписаниеПоля.Многострочность Тогда
				Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			Иначе
				Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			КонецЕсли;
			
			Область.ОриентацияТекста = ОписаниеПоля.Ориентация;
			
			Если ОписаниеПоля.ПоложениеПоГоризонтали = "Left" Тогда
				Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Лево;
			ИначеЕсли ОписаниеПоля.ПоложениеПоГоризонтали = "Center" Тогда
				Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;
			ИначеЕсли ОписаниеПоля.ПоложениеПоГоризонтали = "Right" Тогда
				Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Право;
			Иначе
				Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Лево;
			КонецЕсли;
			
			Если ОписаниеПоля.ПоложениеПоВертикали = "Top" Тогда
				Область.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
			ИначеЕсли ОписаниеПоля.ПоложениеПоВертикали = "Center" Тогда
				Область.ВертикальноеПоложение=ВертикальноеПоложение.Центр;
			ИначеЕсли ОписаниеПоля.ПоложениеПоВертикали = "Bottom" Тогда
				Область.ВертикальноеПоложение=ВертикальноеПоложение.Низ;
			Иначе
				Область.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
			КонецЕсли;
			
			Если ШагСетки=1 Тогда
				Множитель = 1;
			ИначеЕсли ШагСетки=0.5 Тогда
				Множитель = 2;
			ИначеЕсли ШагСетки = 0.2 Тогда
				Множитель = 5;
			Иначе
				Множитель = 10;
			КонецЕсли;
			
			Если ОткрытиеМакета Тогда
				Область.Шрифт = Новый Шрифт(ОписаниеПоля.ИмяШрифта,ОписаниеПоля.РазмерШрифта * Множитель, ОписаниеПоля.Жирный, ОписаниеПоля.Наклонный, ОписаниеПоля.Подчеркивание, ОписаниеПоля.Зачеркивание);
			Иначе
				Область.Шрифт = Новый Шрифт(ОписаниеПоля.Шрифт.Имя, ОписаниеПоля.Шрифт.Размер * Множитель, ОписаниеПоля.Шрифт.Жирный, ОписаниеПоля.Шрифт.Наклонный, ОписаниеПоля.Шрифт.Подчеркивание, ОписаниеПоля.Шрифт.Зачеркивание);
			КонецЕсли;
			
		ИначеЕсли ОписаниеПоля.Тип = "Barcode" Тогда		
			
			Область.Текст = "Штрихкод " + ОписаниеПоля.ТипШтрихкода;
			Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			
			Если ШагСетки=1 Тогда
				РазмерШрифта = 8;
			ИначеЕсли ШагСетки=0.5 Тогда
				РазмерШрифта = 16;
			ИначеЕсли ШагСетки = 0.2 Тогда
				РазмерШрифта = 24;
			Иначе
				РазмерШрифта = 36;
			КонецЕсли;
			
			Область.Шрифт = Новый Шрифт(, РазмерШрифта);
			Область.ОриентацияТекста = ОписаниеПоля.Ориентация;
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Центр;		
			
		ИначеЕсли ОписаниеПоля.Тип = "Image" Тогда
			Область.Текст = "Изображение";
			Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			
			Если ШагСетки=1 Тогда
				РазмерШрифта = 8;
			ИначеЕсли ШагСетки=0.5 Тогда
				РазмерШрифта = 16;
			ИначеЕсли ШагСетки = 0.2 Тогда
				РазмерШрифта = 24;
			Иначе
				РазмерШрифта = 36;
			КонецЕсли;
			
			Область.Шрифт = Новый Шрифт(, РазмерШрифта);
			Область.ОриентацияТекста = ОписаниеПоля.Ориентация;
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Центр;
		КонецЕсли;
		
		Если ОписаниеПоля.Тип = "Text" Или ОписаниеПоля.Тип = "Image" Тогда
			
			Если ОписаниеПоля.ТипРамки = "Solid" Тогда
				ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Сплошная;
			ИначеЕсли ОписаниеПоля.ТипРамки = "Double" Тогда
				ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Двойная;
			ИначеЕсли ОписаниеПоля.ТипРамки = "Dotted" Тогда
				ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная;
			ИначеЕсли ОписаниеПоля.ТипРамки = "Dashed" Тогда
				ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.БольшойПунктир;
			Иначе
				ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.НетЛинии;
			КонецЕсли;
			
			Рамка = Новый Линия(ТипЛинии, ОписаниеПоля.ТолщинаРамки);
			
			Если ОписаниеПоля.РамкаСлева Тогда
				Область.ГраницаСлева=Рамка;
			Иначе
				Область.ГраницаСлева=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
			КонецЕсли;
			
			Если ОписаниеПоля.РамкаСправа Тогда
				Область.ГраницаСправа=Рамка;
			Иначе
				Область.ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
			КонецЕсли;
			
			Если ОписаниеПоля.РамкаСверху Тогда
				Область.ГраницаСверху=Рамка;
			Иначе
				Область.ГраницаСверху=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
			КонецЕсли;
			
			Если ОписаниеПоля.РамкаСнизу Тогда
				Область.ГраницаСнизу=Рамка;
			Иначе
				Область.ГраницаСнизу=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОписаниеПоля.Тип = "Barcode" Или ОписаниеПоля.Тип = "Image" Тогда
			Область.ЦветФона = Новый Цвет(235, 235, 235);
		Иначе
			
			Если Не ОписаниеПоля.РамкаСлева И Не ОписаниеПоля.РамкаСверху И Не ОписаниеПоля.РамкаСправа И Не ОписаниеПоля.РамкаСнизу Тогда
				Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				Область.ГраницаСлева = Рамка;
				Область.ГраницаСверху = Рамка;
				Область.ГраницаСправа = Рамка;
				Область.ГраницаСнизу = Рамка;
				Область.ЦветРамки = Новый Цвет(235, 235, 235);
			Иначе
				Область.ЦветРамки = Новый Цвет(0, 0, 0);
			КонецЕсли;
			
		КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

#Если Не ВебКлиент Тогда
	
&НаКлиенте
Функция СохранитьXMLФайл(СохранениеВФайл = Ложь)
	
	ЗаписьXML = Новый ЗаписьXML();
	
	Если СохранениеВФайл Тогда
		ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	Иначе
		ЗаписьXML.УстановитьСтроку("UTF-8");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");
	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ШиринаЭтикетки);
	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ВысотаЭтикетки);
	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Scale", ШагСетки);
	
	Если ЗначениеЗаполнено(Ориентация) Тогда
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", Ориентация);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из Поля Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);
		
		Если ТекЭлемент.Тип <> "UserData" Тогда
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево + 1);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх + 1);
			
			Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
			КонецЕсли;
			
		Иначе
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);
			
		КонецЕсли;
		
		Если ТекЭлемент.Тип = "Text" Тогда
			
			Если ЗначениеЗаполнено(ТекЭлемент.ИмяШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
			КонецЕсли;
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);
			СтильШрифта = "";
			
			Если ТекЭлемент.Жирный Тогда
				СтильШрифта = "Bold";
			КонецЕсли;
			
			Если ТекЭлемент.Наклонный Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Italic";
			КонецЕсли;
			
			Если ТекЭлемент.Подчеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Underline";
			КонецЕсли;
			
			Если ТекЭлемент.Зачеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Strikeout";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтильШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);
			КонецЕсли;
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ТекЭлемент.ПоложениеПоГоризонтали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ТекЭлемент.ПоложениеПоВертикали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);
			
		ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда
			
			Если ТекЭлемент.Тип = "Barcode" Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);
			КонецЕсли;
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);
			
			Если ТекЭлемент.ПодписьШтрихкода Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекЭлемент.Тип = "Text" Или ТекЭлемент.Тип = "Image" Тогда
			
			Рамка = "";
			
			Если ТекЭлемент.РамкаСверху Тогда
				Рамка = "Top";
			КонецЕсли;
			
			Если ТекЭлемент.РамкаСлева Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Left";
			КонецЕсли;
			
			Если ТекЭлемент.РамкаСправа Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Right";
			КонецЕсли;
			
			Если ТекЭлемент.РамкаСнизу Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Bottom";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Рамка) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "TypeFill", ТекЭлемент.ТипЗаполнения);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);
		
		Если ТекЭлемент.ТипЗаполнения<>"Constant" И ЗначениеЗаполнено(ТекЭлемент.ЗначениеПоУмолчанию) Тогда			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "ValueDefault", ТекЭлемент.ЗначениеПоУмолчанию);
		КонецЕсли;
			
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если Не СохранениеВФайл Тогда
		МакетИзменен = Ложь;
	КонецЕсли;
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьАтрибутЭлемента(ЗаписьXML, ИмяАтрибута, ЗначениеАтрибута)
	
	ЗаписьXML.ЗаписатьАтрибут(ИмяАтрибута, XMLСтрока(Формат(ЗначениеАтрибута, "ЧРД=.; ЧН=0; ЧГ=0; БЛ=false; БИ=true")));
	
КонецПроцедуры
	
#Иначе

&НаКлиенте
Функция СохранитьXMLФайл(СохранениеВФайл = Ложь)
	
	Если СохранениеВФайл Тогда
		
		Содержимое = ПолучитьXMLОписаниеЭтикетки();
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(Содержимое);
		
		Попытка
			ТекстовыйДокумент.Записать(ИмяФайла, КодировкаТекста.UTF8);
			Возврат Содержимое;
		Исключение
			ТекстСообщения = НСтр("ru=''При попытке записи файла %ИмяФайла%  произошла ошибка.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
		
	Иначе
		Возврат ПолучитьXMLОписаниеЭтикетки();
	КонецЕсли;
	
КонецФункции

#КонецЕсли

&НаСервере
Процедура ОчиститьОбластьНаСервере(Верх, Лево, Низ, Право)
	
	Область = Макет.Область(Верх, Лево, Низ, Право);
	Область.Имя = "";
	Область.Картинка = Неопределено;
	Область.Разъединить();
	Область.Очистить(Истина, Истина, Истина);	
	Область.ЦветФона = Новый Цвет(255,255,255);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОформлениеПоляНаСервере(ОписаниеПоля, ОткрытиеМакета=Ложь, ТабличныйДокумент=Неопределено)
	
	Если ТабличныйДокумент=Неопределено Тогда
		ТабличныйДокумент = Макет;
	КонецЕсли;
	
	Область = ТабличныйДокумент.Область((ОписаниеПоля.Верх-1)/ШагСетки+1, (ОписаниеПоля.Лево-1)/ШагСетки+1, ОписаниеПоля.Низ/ШагСетки, ОписаниеПоля.Право/ШагСетки);
	Область.Объединить();
	Область.Имя = ОписаниеПоля.Наименование;
	
	Если ОписаниеПоля.Тип = "Text" Тогда
		
		Если ОписаниеПоля.ТипЗаполнения = "Constant" Тогда
			Область.Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Текст;
			Область.Текст = ОписаниеПоля.Значение;
		Иначе
			Область.Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			Область.Параметр = ОписаниеПоля.Значение;
		КонецЕсли;
		
		Если ОписаниеПоля.Многострочность Тогда
			Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Иначе
			Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
		КонецЕсли;
		
		Область.ОриентацияТекста = ОписаниеПоля.Ориентация;
		
		Если ОписаниеПоля.ПоложениеПоГоризонтали = "Left" Тогда
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Лево;
		ИначеЕсли ОписаниеПоля.ПоложениеПоГоризонтали = "Center" Тогда
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;
		ИначеЕсли ОписаниеПоля.ПоложениеПоГоризонтали = "Right" Тогда
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Право;
		Иначе
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Лево;
		КонецЕсли;
		
		Если ОписаниеПоля.ПоложениеПоВертикали = "Top" Тогда
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
		ИначеЕсли ОписаниеПоля.ПоложениеПоВертикали = "Center" Тогда
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Центр;
		ИначеЕсли ОписаниеПоля.ПоложениеПоВертикали = "Bottom" Тогда
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Низ;
		Иначе
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
		КонецЕсли;
		
		Если ШагСетки=1 Тогда
			Множитель = 1;
		ИначеЕсли ШагСетки=0.5 Тогда
			Множитель = 2;
		ИначеЕсли ШагСетки = 0.2 Тогда
			Множитель = 5;
		Иначе
			Множитель = 10;
		КонецЕсли;
		
		Если ОткрытиеМакета Тогда
			Область.Шрифт = Новый Шрифт(ОписаниеПоля.ИмяШрифта,ОписаниеПоля.РазмерШрифта * Множитель, ОписаниеПоля.Жирный, ОписаниеПоля.Наклонный, ОписаниеПоля.Подчеркивание, ОписаниеПоля.Зачеркивание);
		Иначе
			Область.Шрифт = Новый Шрифт(ОписаниеПоля.Шрифт.Имя, ОписаниеПоля.Шрифт.Размер * Множитель, ОписаниеПоля.Шрифт.Жирный, ОписаниеПоля.Шрифт.Наклонный, ОписаниеПоля.Шрифт.Подчеркивание, ОписаниеПоля.Шрифт.Зачеркивание);
		КонецЕсли;
		
	ИначеЕсли ОписаниеПоля.Тип = "Barcode" Тогда		
		
		Область.Текст = "Штрихкод " + ОписаниеПоля.ТипШтрихкода;
		Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		
		Если ШагСетки=1 Тогда
			РазмерШрифта = 8;
		ИначеЕсли ШагСетки=0.5 Тогда
			РазмерШрифта = 16;
		ИначеЕсли ШагСетки = 0.2 Тогда
			РазмерШрифта = 24;
		Иначе
			РазмерШрифта = 36;
		КонецЕсли;
		
		Область.Шрифт = Новый Шрифт(, РазмерШрифта);
		Область.ОриентацияТекста = ОписаниеПоля.Ориентация;
		Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;
		Область.ВертикальноеПоложение=ВертикальноеПоложение.Центр;		
		
	ИначеЕсли ОписаниеПоля.Тип = "Image" Тогда
		Область.Текст = "Изображение";
		Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		
		Если ШагСетки=1 Тогда
			РазмерШрифта = 8;
		ИначеЕсли ШагСетки=0.5 Тогда
			РазмерШрифта = 16;
		ИначеЕсли ШагСетки = 0.2 Тогда
			РазмерШрифта = 24;
		Иначе
			РазмерШрифта = 36;
		КонецЕсли;
		
		Область.Шрифт = Новый Шрифт(, РазмерШрифта);
		Область.ОриентацияТекста = ОписаниеПоля.Ориентация;
		Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;
		Область.ВертикальноеПоложение=ВертикальноеПоложение.Центр;
	КонецЕсли;
	
	Если ОписаниеПоля.Тип = "Text" Или ОписаниеПоля.Тип = "Image" Тогда
		
		Если ОписаниеПоля.ТипРамки = "Solid" Тогда
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Сплошная;
		ИначеЕсли ОписаниеПоля.ТипРамки = "Double" Тогда
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Двойная;
		ИначеЕсли ОписаниеПоля.ТипРамки = "Dotted" Тогда
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная;
		ИначеЕсли ОписаниеПоля.ТипРамки = "Dashed" Тогда
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.БольшойПунктир;
		Иначе
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.НетЛинии;
		КонецЕсли;
		
		Рамка = Новый Линия(ТипЛинии, ОписаниеПоля.ТолщинаРамки);
		
		Если ОписаниеПоля.РамкаСлева Тогда
			Область.ГраницаСлева=Рамка;
		Иначе
			Область.ГраницаСлева=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		КонецЕсли;
		
		Если ОписаниеПоля.РамкаСправа Тогда
			Область.ГраницаСправа=Рамка;
		Иначе
			Область.ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		КонецЕсли;
		
		Если ОписаниеПоля.РамкаСверху Тогда
			Область.ГраницаСверху=Рамка;
		Иначе
			Область.ГраницаСверху=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		КонецЕсли;
		
		Если ОписаниеПоля.РамкаСнизу Тогда
			Область.ГраницаСнизу=Рамка;
		Иначе
			Область.ГраницаСнизу=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеПоля.Тип = "Barcode" Или ОписаниеПоля.Тип = "Image" Тогда
		Область.ЦветФона = Новый Цвет(235, 235, 235);
	Иначе
		
		Если Не ОписаниеПоля.РамкаСлева И Не ОписаниеПоля.РамкаСверху И Не ОписаниеПоля.РамкаСправа И Не ОписаниеПоля.РамкаСнизу Тогда
			Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			Область.ГраницаСлева = Рамка;
			Область.ГраницаСверху = Рамка;
			Область.ГраницаСправа = Рамка;
			Область.ГраницаСнизу = Рамка;
			Область.ЦветРамки = Новый Цвет(235, 235, 235);
		Иначе
			Область.ЦветРамки = Новый Цвет(0, 0, 0);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеПоля(ОписаниеПоля)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Наименование",			ОписаниеПоля.Наименование);
	Результат.Вставить("Тип",					ОписаниеПоля.Тип);
	Результат.Вставить("ТипЗаполнения",			ОписаниеПоля.ТипЗаполнения);
	Результат.Вставить("ЗначениеПоУмолчанию",	ОписаниеПоля.ЗначениеПоУмолчанию);
	Результат.Вставить("Значение",				ОписаниеПоля.Значение);
	Результат.Вставить("Верх",					ОписаниеПоля.Верх);
	Результат.Вставить("Лево",					ОписаниеПоля.Лево);
	Результат.Вставить("Низ",					ОписаниеПоля.Низ);
	Результат.Вставить("Право",					ОписаниеПоля.Право);
	Результат.Вставить("Ориентация",			ОписаниеПоля.Ориентация);
	Результат.Вставить("ИмяШрифта",				ОписаниеПоля.ИмяШрифта);
	Результат.Вставить("РазмерШрифта",			ОписаниеПоля.РазмерШрифта);
	Результат.Вставить("Жирный",				ОписаниеПоля.Жирный);
	Результат.Вставить("Наклонный",				ОписаниеПоля.Наклонный);
	Результат.Вставить("Подчеркивание",			ОписаниеПоля.Подчеркивание);
	Результат.Вставить("Зачеркивание",			ОписаниеПоля.Зачеркивание);
	Результат.Вставить("РамкаСлева",			ОписаниеПоля.РамкаСлева);
	Результат.Вставить("РамкаСверху",			ОписаниеПоля.РамкаСверху);
	Результат.Вставить("РамкаСправа",			ОписаниеПоля.РамкаСправа);
	Результат.Вставить("РамкаСнизу",			ОписаниеПоля.РамкаСнизу);
	Результат.Вставить("ТипРамки",				ОписаниеПоля.ТипРамки);
	Результат.Вставить("ТолщинаРамки",			ОписаниеПоля.ТолщинаРамки);
	Результат.Вставить("ТипШтрихкода",			ОписаниеПоля.ТипШтрихкода);
	Результат.Вставить("РазмерШрифтаПодписи",	ОписаниеПоля.РазмерШрифтаПодписи);
	Результат.Вставить("ПодписьШтрихкода",		ОписаниеПоля.ПодписьШтрихкода);
	Результат.Вставить("КонтрольныйСимвол",		ОписаниеПоля.КонтрольныйСимвол);
	Результат.Вставить("ПоложениеПоГоризонтали",ОписаниеПоля.ПоложениеПоГоризонтали);
	Результат.Вставить("ПоложениеПоВертикали",	ОписаниеПоля.ПоложениеПоВертикали);
	Результат.Вставить("Многострочность",		ОписаниеПоля.Многострочность);
	Результат.Вставить("Формат",				ОписаниеПоля.Формат);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьПользователюПродолжитьРедактирование(ОписаниеПоля, РедактируемоеПоле)
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("ОписаниеПоля", ОписаниеПоля);
	
	Если РедактируемоеПоле<>Неопределено Тогда
		ПередаваемыеПараметры.Вставить("РедактируемоеПоле", РедактируемоеПоле);
	КонецЕсли;
	
	ПередаваемыеПараметры.Вставить("ПовторноеРедактирование", Истина);
	ПоказатьВопрос(Новый ОписаниеОповещения("ПредложитьПользователюПродолжитьРедактированиеЗавершение", ЭтотОбъект, ПередаваемыеПараметры),
					НСтр("ru= 'Запись невозможна! Текущее значение реквизита ""Имя поля"" уже используется. Продолжить редактирование?'"), РежимДиалогаВопрос.ДаНет);
					
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьПользователюПродолжитьРедактированиеЗавершение(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат=КодВозвратаДиалога.Да Тогда
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьДобавлениеРедактированиеПоля", ЭтотОбъект, ПередаваемыеПараметры);
		ОткрытьФорму("ОбщаяФорма.РедакторЭтикетокФормаРедактированияПоляМакета", Новый Структура("АдресХранилищаСКД", АдресХранилищаСКД),,,,, ОповещениеПриЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпроситьПользователяОбУдаленииПересекаемыхПолей(ПередаваемыеПараметры)
	
	Если ПередаваемыеПараметры.Свойство("РедактируемоеПоле") Тогда
		ТекстВопроса = НСтр("ru= 'Новые границы редактируемого поля пересекаются с полями:%СписокПолей%Отменить внесенные изменения?'");
	Иначе
		ТекстВопроса = НСтр("ru= 'Создаваемое поле пересекается с уже существующими полями:%СписокПолей%Отменить внесенные изменения?'");
	КонецЕсли;
	
	СписокПолей = "";
	
	Для Каждого ПересекаемоеПоле Из ПередаваемыеПараметры.ПересекаемыеПоля Цикл
		СписокПолей = СписокПолей + Символы.ПС + ПересекаемоеПоле.Представление;
	КонецЦикла;
	
	СписокПолей = СписокПолей + "." + Символы.ПС;
	
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СписокПолей%", СписокПолей);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОпроситьПользователяОбУдаленииПересекаемыхПолейЗавершение", ЭтотОбъект, ПередаваемыеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпроситьПользователяОбУдаленииПересекаемыхПолейЗавершение(РезультатВопроса, ПередаваемыеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		МакетИзменен = Истина;
		ПересекаемыеПоля = ПередаваемыеПараметры.ПересекаемыеПоля;
		
		Для Каждого ТекПоле Из ПересекаемыеПоля Цикл
			УдалитьОписаниеПоля(ТекПоле.Наименование);
			ОчиститьОбласть((ТекПоле.Верх-1)/ШагСетки+1, (ТекПоле.Лево-1)/ШагСетки+1, ТекПоле.Низ/ШагСетки, ТекПоле.Право/ШагСетки);
		КонецЦикла;
		
		Если ПередаваемыеПараметры.Свойство("РедактируемоеПоле") Тогда
			
			СохранитьОписаниеПоля(ПередаваемыеПараметры.ОписаниеПоля, ПередаваемыеПараметры.РедактируемоеПоле);
			
			Если ПередаваемыеПараметры.ОчищатьСтароеОформление Тогда
				ОчиститьОбласть((ПередаваемыеПараметры.РедактируемоеПоле.Верх-1)/ШагСетки+1, (ПередаваемыеПараметры.РедактируемоеПоле.Лево-1)/ШагСетки+1, ПередаваемыеПараметры.РедактируемоеПоле.Низ/ШагСетки, ПередаваемыеПараметры.РедактируемоеПоле.Право/ШагСетки);
			КонецЕсли;
			
			Если ПередаваемыеПараметры.ОписаниеПоля.Тип<>"UserData" Тогда
				СохранитьОформлениеПоля(ПередаваемыеПараметры.ОписаниеПоля);
			КонецЕсли;
			
		Иначе
			
			СохранитьОписаниеПоля(ПередаваемыеПараметры.ОписаниеПоля);
			
			Если ПередаваемыеПараметры.ОписаниеПоля.Тип<>"UserData" Тогда
				СохранитьОформлениеПоля(ПередаваемыеПараметры.ОписаниеПоля);
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьДобавлениеПоля(ВыбранноеПолеСКД=Неопределено)
	
	Область = Элементы.Макет.ТекущаяОбласть;
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Наименование", Строка(Новый УникальныйИдентификатор));
	ОписаниеПоля.Вставить("Верх", Область.Верх/(1/ШагСетки)-ШагСетки);
	ОписаниеПоля.Вставить("Лево", Область.Лево/(1/ШагСетки)-ШагСетки);
	ОписаниеПоля.Вставить("Низ", ?(Область.Низ/(1/ШагСетки)<=ВысотаЭтикетки, Область.Низ/(1/ШагСетки), ВысотаЭтикетки));
	ОписаниеПоля.Вставить("Право", ?(Область.Право/(1/ШагСетки)<=ШиринаЭтикетки*(1/ШагСетки), Область.Право/(1/ШагСетки), ШиринаЭтикетки));
	
	Если ВыбранноеПолеСКД<>Неопределено Тогда
		ОписаниеПоля.Вставить("Значение", ВыбранноеПолеСКД);
	КонецЕсли;
	
	ОписаниеПоля.Вставить("ТипЗаполнения", "Parameter");
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("ОписаниеПоля", ОписаниеПоля);
	ПередаваемыеПараметры.Вставить("ШагСетки", ШагСетки);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьДобавлениеРедактированиеПоляЗавершение", ЭтотОбъект, ПередаваемыеПараметры);
	ОткрытьФорму("ОбщаяФорма.РедакторЭтикетокФормаРедактированияПоляМакета", Новый Структура("АдресХранилищаСКД", АдресХранилищаСКД),,,,, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Изменяет наличие границ у указанного поля макета.
//
// Параметры:
// ИмяПоля			- Идентификатор поля макета.
// ИндексГраницы	- Число:
//							0 - нет границ;
//							1 - левая граница;
//							2 - верхняя граница;
//							3 - правая граница;
//							4 - нижняя граница;
//							5 - все границы.
//
&НаКлиенте
Процедура ИзменитьГраницыПоля(ИмяПоля, ИндексГраницы)
	
	ОбластьТабличногоДокумента = Макет.Область(ИмяПоля);
	ПолеТабличнойЧасти = Поля.НайтиСтроки(Новый Структура("Наименование", ИмяПоля))[0];
	
	Если ИндексГраницы = 0 Тогда
		
		ПолеТабличнойЧасти.РамкаСлева = Ложь;
		ПолеТабличнойЧасти.РамкаСверху = Ложь;
		ПолеТабличнойЧасти.РамкаСправа = Ложь;
		ПолеТабличнойЧасти.РамкаСнизу = Ложь;
		ПолеТабличнойЧасти.ТолщинаРамки = 0;
		ПолеТабличнойЧасти.ТипРамки = Неопределено;
		
	ИначеЕсли ИндексГраницы = 1 Тогда
		ПолеТабличнойЧасти.РамкаСлева = Не ПолеТабличнойЧасти.РамкаСлева;
	ИначеЕсли ИндексГраницы = 2 Тогда
		ПолеТабличнойЧасти.РамкаСверху = Не ПолеТабличнойЧасти.РамкаСверху;
	ИначеЕсли ИндексГраницы = 3 Тогда
		ПолеТабличнойЧасти.РамкаСправа = Не ПолеТабличнойЧасти.РамкаСправа;
	ИначеЕсли ИндексГраницы = 4 Тогда
		ПолеТабличнойЧасти.РамкаСнизу = Не ПолеТабличнойЧасти.РамкаСнизу;
	ИначеЕсли ИндексГраницы = 5 Тогда
		
		ПолеТабличнойЧасти.РамкаСлева = Истина;
		ПолеТабличнойЧасти.РамкаСверху = Истина;
		ПолеТабличнойЧасти.РамкаСправа = Истина;
		ПолеТабличнойЧасти.РамкаСнизу = Истина;
		
	КонецЕсли;
	
	Если ПолеТабличнойЧасти.РамкаСлева
		ИЛИ ПолеТабличнойЧасти.РамкаСверху
		ИЛИ ПолеТабличнойЧасти.РамкаСправа
		ИЛИ ПолеТабличнойЧасти.РамкаСнизу Тогда
		
		Если ПолеТабличнойЧасти.ТолщинаРамки=0 Тогда
			ПолеТабличнойЧасти.ТолщинаРамки = 1;
		КонецЕсли;
		
		Если ПолеТабличнойЧасти.ТипРамки="" Тогда
			ПолеТабличнойЧасти.ТипРамки = "Solid";
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Наименование",			ПолеТабличнойЧасти.Наименование);
	ОписаниеПоля.Вставить("Тип",					ПолеТабличнойЧасти.Тип);
	ОписаниеПоля.Вставить("ТипЗаполнения",			ПолеТабличнойЧасти.ТипЗаполнения);
	ОписаниеПоля.Вставить("ЗначениеПоУмолчанию",	ПолеТабличнойЧасти.ЗначениеПоУмолчанию);
	ОписаниеПоля.Вставить("Значение",				ПолеТабличнойЧасти.Значение);
	ОписаниеПоля.Вставить("Верх",					ПолеТабличнойЧасти.Верх);
	ОписаниеПоля.Вставить("Лево",					ПолеТабличнойЧасти.Лево);
	ОписаниеПоля.Вставить("Низ",					ПолеТабличнойЧасти.Низ);
	ОписаниеПоля.Вставить("Право",					ПолеТабличнойЧасти.Право);
	ОписаниеПоля.Вставить("Ориентация",				ПолеТабличнойЧасти.Ориентация);
	ОписаниеПоля.Вставить("Шрифт",					Новый Шрифт(ПолеТабличнойЧасти.ИмяШрифта, ?(ЗначениеЗаполнено(ПолеТабличнойЧасти.РазмерШрифта), ПолеТабличнойЧасти.РазмерШрифта, Неопределено), ПолеТабличнойЧасти.Жирный, ПолеТабличнойЧасти.Наклонный, ПолеТабличнойЧасти.Подчеркивание, ПолеТабличнойЧасти.Зачеркивание));
	ОписаниеПоля.Вставить("РамкаСлева",				ПолеТабличнойЧасти.РамкаСлева);
	ОписаниеПоля.Вставить("РамкаСверху",			ПолеТабличнойЧасти.РамкаСверху);
	ОписаниеПоля.Вставить("РамкаСправа",			ПолеТабличнойЧасти.РамкаСправа);
	ОписаниеПоля.Вставить("РамкаСнизу",				ПолеТабличнойЧасти.РамкаСнизу);
	ОписаниеПоля.Вставить("ТипРамки",				ПолеТабличнойЧасти.ТипРамки);
	ОписаниеПоля.Вставить("ТолщинаРамки",			ПолеТабличнойЧасти.ТолщинаРамки);
	ОписаниеПоля.Вставить("ТипШтрихкода",			ПолеТабличнойЧасти.ТипШтрихкода);
	ОписаниеПоля.Вставить("РазмерШрифтаПодписи",	ПолеТабличнойЧасти.РазмерШрифтаПодписи);
	ОписаниеПоля.Вставить("ПодписьШтрихкода",		ПолеТабличнойЧасти.ПодписьШтрихкода);
	ОписаниеПоля.Вставить("КонтрольныйСимвол",		ПолеТабличнойЧасти.КонтрольныйСимвол);
	ОписаниеПоля.Вставить("ПоложениеПоГоризонтали",	ПолеТабличнойЧасти.ПоложениеПоГоризонтали);
	ОписаниеПоля.Вставить("ПоложениеПоВертикали",	ПолеТабличнойЧасти.ПоложениеПоВертикали);
	ОписаниеПоля.Вставить("Многострочность",		ПолеТабличнойЧасти.Многострочность);
	ОписаниеПоля.Вставить("Формат",					ПолеТабличнойЧасти.Формат);
	
	СохранитьОформлениеПоля(ОписаниеПоля);
	
	МакетИзменен = Истина;
	
КонецПроцедуры

// Изменяет координату указанной границы указанного поля макета.
//
// Параметры:
// ИмяПоля			- Идентификатор поля макета.
// ИндексГраницы	- Число: 1 - левая граница, 2 - верхняя граница, 3 - правая граница, 4 - нижняя граница.
//
&НаКлиенте
Функция РазрешитьИзменениеГраницы(ПолеТабличнойЧасти, ИндексГраницы, ВеличинаИзменения)
	
	// Определяем получаемые координаты полей
	Лево = ПолеТабличнойЧасти.Лево-1 + ?(ИндексГраницы = 1, ВеличинаИзменения, 0);
	Верх = ПолеТабличнойЧасти.Верх-1 + ?(ИндексГраницы = 2, ВеличинаИзменения, 0);
	Право = ПолеТабличнойЧасти.Право + ?(ИндексГраницы = 3, ВеличинаИзменения, 0);
	Низ = ПолеТабличнойЧасти.Низ + ?(ИндексГраницы = 4, ВеличинаИзменения, 0);
	
	// Проверяем выход за границы макета
	Если Лево>ШиринаЭтикетки ИЛИ Лево<0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Право>ШиринаЭтикетки ИЛИ Право<0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Лево>Право Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Верх>ВысотаЭтикетки ИЛИ Верх<0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Низ>ВысотаЭтикетки ИЛИ Низ<0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Верх>Низ Тогда
		Возврат Ложь;
	КонецЕсли;
		
	// Проверяем пересечение с собственными границами
	Если ПолеТабличнойЧасти.Лево-ШагСетки + ?(ИндексГраницы = 1, ВеличинаИзменения, 0)>ПолеТабличнойЧасти.Право + ?(ИндексГраницы = 3, ВеличинаИзменения, 0) ИЛИ ПолеТабличнойЧасти.Верх-ШагСетки + ?(ИндексГраницы = 2, ВеличинаИзменения, 0)>ПолеТабличнойЧасти.Низ + ?(ИндексГраницы = 4, ВеличинаИзменения, 0) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем пересечение с другими полями.
	Для Каждого ТекПоле Из Поля Цикл
		
		Если ТекПоле <> ПолеТабличнойЧасти Тогда
			
			ГоризонтальноеПересечение = Ложь;
			
			Если ((ТекПоле.Лево-ШагСетки<=Лево И Лево<=ТекПоле.Право-ШагСетки) ИЛИ (ТекПоле.Лево-ШагСетки<=Право И Право<=ТекПоле.Право-ШагСетки))
				ИЛИ ((Лево<=ТекПоле.Лево-ШагСетки И ТекПоле.Лево-ШагСетки<=Право) ИЛИ (Лево<=ТекПоле.Право-ШагСетки И ТекПоле.Право-ШагСетки<=Право)) Тогда
				ГоризонтальноеПересечение = Истина;
			КонецЕсли;
				
			Если ГоризонтальноеПересечение Тогда
				
				ВертикальноеПересечение = Ложь;
				
				Если ((ТекПоле.Верх-ШагСетки<=Верх И Верх<=ТекПоле.Низ-ШагСетки) ИЛИ (ТекПоле.Верх-ШагСетки<=Низ И Низ<=ТекПоле.Низ-ШагСетки))
					ИЛИ ((Верх<=ТекПоле.Верх-ШагСетки И ТекПоле.Верх-ШагСетки<=Низ) ИЛИ (Верх<=ТекПоле.Низ-ШагСетки И ТекПоле.Низ<=Низ-ШагСетки)) Тогда
					ВертикальноеПересечение = Истина;
				КонецЕсли;
			
				Если ВертикальноеПересечение Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Изменяет координату указанной границы указанного поля макета.
//
// Параметры:
// ИмяПоля			- Идентификатор поля макета.
// ИндексГраницы	- Число: 1 - левая граница, 2 - верхняя граница, 3 - правая граница, 4 - нижняя граница.
//
&НаКлиенте
Процедура ИзменитьКоординатуГраницу(ИмяПоля, ИндексГраницы, ВеличинаИзменения)
	
	ОбластьТабличногоДокумента = Макет.Область(ИмяПоля);
	ПолеТабличнойЧасти = Поля.НайтиСтроки(Новый Структура("Наименование", ИмяПоля))[0];
	
	Если РазрешитьИзменениеГраницы(ПолеТабличнойЧасти, ИндексГраницы, ВеличинаИзменения) Тогда
		
		ОчиститьОбласть((ПолеТабличнойЧасти.Верх-1)/ШагСетки+1, (ПолеТабличнойЧасти.Лево-1)/ШагСетки+1, ПолеТабличнойЧасти.Низ/ШагСетки, ПолеТабличнойЧасти.Право/ШагСетки);
		
		Если ИндексГраницы = 1 Тогда		
			ПолеТабличнойЧасти.Лево = ПолеТабличнойЧасти.Лево + ВеличинаИзменения;
		ИначеЕсли ИндексГраницы = 2 Тогда		
			ПолеТабличнойЧасти.Верх = ПолеТабличнойЧасти.Верх + ВеличинаИзменения;
		ИначеЕсли ИндексГраницы = 3 Тогда		
			ПолеТабличнойЧасти.Право = ПолеТабличнойЧасти.Право + ВеличинаИзменения;
		ИначеЕсли ИндексГраницы = 4 Тогда		
			ПолеТабличнойЧасти.Низ = ПолеТабличнойЧасти.Низ + ВеличинаИзменения;
		КонецЕсли;
		
		ОписаниеПоля = Новый Структура;
		ОписаниеПоля.Вставить("Наименование",			ПолеТабличнойЧасти.Наименование);
		ОписаниеПоля.Вставить("Тип",					ПолеТабличнойЧасти.Тип);
		ОписаниеПоля.Вставить("ТипЗаполнения",			ПолеТабличнойЧасти.ТипЗаполнения);
		ОписаниеПоля.Вставить("ЗначениеПоУмолчанию",	ПолеТабличнойЧасти.ЗначениеПоУмолчанию);
		ОписаниеПоля.Вставить("Значение",				ПолеТабличнойЧасти.Значение);
		ОписаниеПоля.Вставить("Верх",					ПолеТабличнойЧасти.Верх);
		ОписаниеПоля.Вставить("Лево",					ПолеТабличнойЧасти.Лево);
		ОписаниеПоля.Вставить("Низ",					ПолеТабличнойЧасти.Низ);
		ОписаниеПоля.Вставить("Право",					ПолеТабличнойЧасти.Право);
		ОписаниеПоля.Вставить("Ориентация",				ПолеТабличнойЧасти.Ориентация);
		ОписаниеПоля.Вставить("Шрифт",					Новый Шрифт(ПолеТабличнойЧасти.ИмяШрифта, ?(ЗначениеЗаполнено(ПолеТабличнойЧасти.РазмерШрифта), ПолеТабличнойЧасти.РазмерШрифта, Неопределено), ПолеТабличнойЧасти.Жирный, ПолеТабличнойЧасти.Наклонный, ПолеТабличнойЧасти.Подчеркивание, ПолеТабличнойЧасти.Зачеркивание));
		ОписаниеПоля.Вставить("РамкаСлева",				ПолеТабличнойЧасти.РамкаСлева);
		ОписаниеПоля.Вставить("РамкаСверху",			ПолеТабличнойЧасти.РамкаСверху);
		ОписаниеПоля.Вставить("РамкаСправа",			ПолеТабличнойЧасти.РамкаСправа);
		ОписаниеПоля.Вставить("РамкаСнизу",				ПолеТабличнойЧасти.РамкаСнизу);
		ОписаниеПоля.Вставить("ТипРамки",				?(ЗначениеЗаполнено(ПолеТабличнойЧасти.ТипРамки), ПолеТабличнойЧасти.ТипРамки, "Solid"));
		ОписаниеПоля.Вставить("ТолщинаРамки",			?(ЗначениеЗаполнено(ПолеТабличнойЧасти.ТолщинаРамки), ПолеТабличнойЧасти.ТолщинаРамки, 1));
		ОписаниеПоля.Вставить("ТипШтрихкода",			ПолеТабличнойЧасти.ТипШтрихкода);
		ОписаниеПоля.Вставить("РазмерШрифтаПодписи",	ПолеТабличнойЧасти.РазмерШрифтаПодписи);
		ОписаниеПоля.Вставить("ПодписьШтрихкода",		ПолеТабличнойЧасти.ПодписьШтрихкода);
		ОписаниеПоля.Вставить("КонтрольныйСимвол",		ПолеТабличнойЧасти.КонтрольныйСимвол);
		ОписаниеПоля.Вставить("ПоложениеПоГоризонтали",	ПолеТабличнойЧасти.ПоложениеПоГоризонтали);
		ОписаниеПоля.Вставить("ПоложениеПоВертикали",	ПолеТабличнойЧасти.ПоложениеПоВертикали);
		ОписаниеПоля.Вставить("Многострочность",		ПолеТабличнойЧасти.Многострочность);
		ОписаниеПоля.Вставить("Формат",					ПолеТабличнойЧасти.Формат);
		
		СохранитьОформлениеПоля(ОписаниеПоля);
		
		Элементы.Макет.ТекущаяОбласть = Макет.Область(ИмяПоля);
		
		УстановитьПодписиДляГраниц(ОписаниеПоля);
		
		МакетИзменен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиКнопокФорматирования()
	
	ИмяПоля = Элементы.Макет.ТекущаяОбласть.Имя;
	НайденныеПоля = Поля.НайтиСтроки(Новый Структура("Наименование", ИмяПоля));
	
	Если НайденныеПоля.Количество()>0 Тогда
		
		Поле = НайденныеПоля[0];
		
		Элементы.Полужирный.Пометка		= Поле.Жирный;
		Элементы.Курсив.Пометка			= Поле.Наклонный;
		Элементы.Подчеркнутый.Пометка	= Поле.Подчеркивание;
		
		Элементы.ВыравниваниеПоЛевомуКраю.Пометка			= Поле.ПоложениеПоГоризонтали="Left";
		Элементы.ВыравниваниеПоЦентру.Пометка				= Поле.ПоложениеПоГоризонтали="Center";
		Элементы.ВыравниваниеПоПравомуКраю.Пометка			= Поле.ПоложениеПоГоризонтали="Right";
		Элементы.ВыравниваниеПоВерхнемуКраю.Пометка			= Поле.ПоложениеПоВертикали="Top";
		Элементы.ВертикальноеВыравниваниеПоЦентру.Пометка	= Поле.ПоложениеПоВертикали="Center";
		Элементы.ВыравниваниеПоНижнемуКраю.Пометка			= Поле.ПоложениеПоВертикали="Bottom";
		
		Элементы.ГраницаСлева.Пометка	= Поле.РамкаСлева;
		Элементы.ГраницаСправа.Пометка	= Поле.РамкаСправа;
		Элементы.ГраницаСверху.Пометка	= Поле.РамкаСверху;
		Элементы.ГраницаСнизу.Пометка	= Поле.РамкаСнизу;
		
	Иначе
		
		Элементы.Полужирный.Пометка		= Ложь;
		Элементы.Курсив.Пометка			= Ложь;
		Элементы.Подчеркнутый.Пометка	= Ложь;
		
		Элементы.ГраницаСлева.Пометка	= Ложь;
		Элементы.ГраницаСправа.Пометка	= Ложь;
		Элементы.ГраницаСверху.Пометка	= Ложь;
		Элементы.ГраницаСнизу.Пометка	= Ложь;
		
		Элементы.ВыравниваниеПоЛевомуКраю.Пометка			= Ложь;
		Элементы.ВыравниваниеПоЦентру.Пометка				= Ложь;
		Элементы.ВыравниваниеПоПравомуКраю.Пометка			= Ложь;
		Элементы.ВыравниваниеПоВерхнемуКраю.Пометка			= Ложь;
		Элементы.ВертикальноеВыравниваниеПоЦентру.Пометка	= Ложь;
		Элементы.ВыравниваниеПоНижнемуКраю.Пометка			= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьИВидимостьЭлементовИзмененияПоля(Доступность, ТипПоля=Неопределено)
	
	Элементы.ИзменитьПоле.Доступность = Доступность;
	Элементы.УдалитьПоле.Доступность = Доступность;
	Элементы.КонтекстноеМенюИзменитьПоле.Доступность = Доступность;
	Элементы.КонтекстноеМенюУдалитьПоле.Доступность = Доступность;
	
	ПолеИмеетВизуальноеПредставление = Ложь;
	ПолеИмеетРамки = Ложь;
	ПолеТекстовое = Ложь;
		
	Если ЗначениеЗаполнено(ТипПоля) Тогда
		
		Если ТипПоля <> "UserData" Тогда
			
			ПолеИмеетВизуальноеПредставление = Истина;
			
			Если ТипПоля = "Text" Тогда
				ПолеТекстовое = Истина;
			КонецЕсли;
			
			Если ТипПоля <> "Barcode" Тогда
				ПолеИмеетРамки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступностьИзмененияГраниц	= Доступность И ПолеИмеетВизуальноеПредставление;
	ДоступностьИзмененияРамки	= Доступность И ПолеИмеетВизуальноеПредставление И ПолеИмеетРамки;
	
	Элементы.ГраницаСлева.Доступность					= ДоступностьИзмененияРамки;
	Элементы.СместитьЛевуюГраницуВлево.Доступность		= ДоступностьИзмененияРамки;
	Элементы.СместитьЛевуюГраницуВправо.Доступность		= ДоступностьИзмененияРамки;
	Элементы.ДекорацияЛево.Видимость					= ДоступностьИзмененияРамки;
	
	Элементы.ГраницаСправа.Доступность					= ДоступностьИзмененияРамки;
	Элементы.СместитьПравуюГраницуВлево.Доступность		= ДоступностьИзмененияРамки;
	Элементы.СместитьПравуюГраницуВправо.Доступность	= ДоступностьИзмененияРамки;
	Элементы.ДекорацияПраво.Видимость					= ДоступностьИзмененияРамки;
	
	Элементы.ГраницаСверху.Доступность					= ДоступностьИзмененияРамки;
	Элементы.ПоднятьВерхнююГраницу.Доступность			= ДоступностьИзмененияРамки;
	Элементы.ОпуститьВерхнююГраницу.Доступность			= ДоступностьИзмененияРамки;
	Элементы.ДекорацияВерх.Видимость					= ДоступностьИзмененияРамки;
	
	Элементы.ГраницаСнизу.Доступность					= ДоступностьИзмененияРамки;
	Элементы.ПоднятьНижнююГраницу.Доступность			= ДоступностьИзмененияРамки;
	Элементы.ОпуститьНижнююГраницу.Доступность			= ДоступностьИзмененияРамки;
	Элементы.ДекорацияНиз.Видимость						= ДоступностьИзмененияРамки;
	
	Элементы.ГраницаВокруг.Доступность					= ДоступностьИзмененияРамки;
	Элементы.УбратьГраницы.Доступность					= ДоступностьИзмененияРамки;
	
	ДоступностьИзмененияОформления = Доступность И ПолеТекстовое;
	
	Элементы.ВертикальноеВыравниваниеПоЦентру.Доступность	= ДоступностьИзмененияОформления;
	Элементы.ВыравниваниеПоВерхнемуКраю.Доступность			= ДоступностьИзмененияОформления;
	Элементы.ВыравниваниеПоЛевомуКраю.Доступность			= ДоступностьИзмененияОформления;
	Элементы.ВыравниваниеПоНижнемуКраю.Доступность			= ДоступностьИзмененияОформления;
	Элементы.ВыравниваниеПоПравомуКраю.Доступность			= ДоступностьИзмененияОформления;
	Элементы.ВыравниваниеПоЦентру.Доступность				= ДоступностьИзмененияОформления;
	
	Элементы.Полужирный.Доступность							= ДоступностьИзмененияОформления;
	Элементы.Курсив.Доступность								= ДоступностьИзмененияОформления;
	Элементы.Подчеркнутый.Доступность						= ДоступностьИзмененияОформления;
	
	УстановитьПометкиКнопокФорматирования();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПодписиДляГраниц(ТД)
	
	ФС = "ЧДЦ=1; ЧН=0,0; ЧГ=0";
	Элементы.ДекорацияЛево.Заголовок = Формат(ТД.Лево-1, ФС);
	Элементы.ДекорацияПраво.Заголовок = Формат(ТД.Право, ФС);
	Элементы.ДекорацияВерх.Заголовок = Формат(ТД.Верх-1, ФС);
	Элементы.ДекорацияНиз.Заголовок = Формат(ТД.Низ, ФС);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВертикальноеПоложениеТекста(ТД, Значение)
	
	ОбластьТабличногоДокумента = Макет.Область(ТД.Наименование);
	
	ОчиститьОбласть((ТД.Верх-1)/ШагСетки+1, (ТД.Лево-1)/ШагСетки+1, ТД.Низ/ШагСетки, ТД.Право/ШагСетки);
		
	ТД.ПоложениеПоВертикали = Значение;
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Наименование",			ТД.Наименование);
	ОписаниеПоля.Вставить("Тип",					ТД.Тип);
	ОписаниеПоля.Вставить("ТипЗаполнения",			ТД.ТипЗаполнения);
	ОписаниеПоля.Вставить("ЗначениеПоУмолчанию",	ТД.ЗначениеПоУмолчанию);
	ОписаниеПоля.Вставить("Значение",				ТД.Значение);
	ОписаниеПоля.Вставить("Верх",					ТД.Верх);
	ОписаниеПоля.Вставить("Лево",					ТД.Лево);
	ОписаниеПоля.Вставить("Низ",					ТД.Низ);
	ОписаниеПоля.Вставить("Право",					ТД.Право);
	ОписаниеПоля.Вставить("Ориентация",				ТД.Ориентация);
	ОписаниеПоля.Вставить("Шрифт",					Новый Шрифт(ТД.ИмяШрифта, ?(ЗначениеЗаполнено(ТД.РазмерШрифта), ТД.РазмерШрифта, Неопределено), ТД.Жирный, ТД.Наклонный, ТД.Подчеркивание, ТД.Зачеркивание));
	ОписаниеПоля.Вставить("РамкаСлева",				ТД.РамкаСлева);
	ОписаниеПоля.Вставить("РамкаСверху",			ТД.РамкаСверху);
	ОписаниеПоля.Вставить("РамкаСправа",			ТД.РамкаСправа);
	ОписаниеПоля.Вставить("РамкаСнизу",				ТД.РамкаСнизу);
	ОписаниеПоля.Вставить("ТипРамки",				?(ЗначениеЗаполнено(ТД.ТипРамки), ТД.ТипРамки, "Solid"));
	ОписаниеПоля.Вставить("ТолщинаРамки",			?(ЗначениеЗаполнено(ТД.ТолщинаРамки), ТД.ТолщинаРамки, 1));
	ОписаниеПоля.Вставить("ТипШтрихкода",			ТД.ТипШтрихкода);
	ОписаниеПоля.Вставить("РазмерШрифтаПодписи",	ТД.РазмерШрифтаПодписи);
	ОписаниеПоля.Вставить("ПодписьШтрихкода",		ТД.ПодписьШтрихкода);
	ОписаниеПоля.Вставить("КонтрольныйСимвол",		ТД.КонтрольныйСимвол);
	ОписаниеПоля.Вставить("ПоложениеПоГоризонтали",	ТД.ПоложениеПоГоризонтали);
	ОписаниеПоля.Вставить("ПоложениеПоВертикали",	ТД.ПоложениеПоВертикали);
	ОписаниеПоля.Вставить("Многострочность",		ТД.Многострочность);
	ОписаниеПоля.Вставить("Формат",					ТД.Формат);
	
	СохранитьОформлениеПоля(ОписаниеПоля);
	
	МакетИзменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГоризонтальноеПоложениеТекста(ТД, Значение)
	
	ОбластьТабличногоДокумента = Макет.Область(ТД.Наименование);
	
	ОчиститьОбласть((ТД.Верх-1)/ШагСетки+1, (ТД.Лево-1)/ШагСетки+1, ТД.Низ/ШагСетки, ТД.Право/ШагСетки);
		
	ТД.ПоложениеПоГоризонтали = Значение;
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Наименование",			ТД.Наименование);
	ОписаниеПоля.Вставить("Тип",					ТД.Тип);
	ОписаниеПоля.Вставить("ТипЗаполнения",			ТД.ТипЗаполнения);
	ОписаниеПоля.Вставить("ЗначениеПоУмолчанию",	ТД.ЗначениеПоУмолчанию);
	ОписаниеПоля.Вставить("Значение",				ТД.Значение);
	ОписаниеПоля.Вставить("Верх",					ТД.Верх);
	ОписаниеПоля.Вставить("Лево",					ТД.Лево);
	ОписаниеПоля.Вставить("Низ",					ТД.Низ);
	ОписаниеПоля.Вставить("Право",					ТД.Право);
	ОписаниеПоля.Вставить("Ориентация",				ТД.Ориентация);
	ОписаниеПоля.Вставить("Шрифт",					Новый Шрифт(ТД.ИмяШрифта, ?(ЗначениеЗаполнено(ТД.РазмерШрифта), ТД.РазмерШрифта, Неопределено), ТД.Жирный, ТД.Наклонный, ТД.Подчеркивание, ТД.Зачеркивание));
	ОписаниеПоля.Вставить("РамкаСлева",				ТД.РамкаСлева);
	ОписаниеПоля.Вставить("РамкаСверху",			ТД.РамкаСверху);
	ОписаниеПоля.Вставить("РамкаСправа",			ТД.РамкаСправа);
	ОписаниеПоля.Вставить("РамкаСнизу",				ТД.РамкаСнизу);
	ОписаниеПоля.Вставить("ТипРамки",				?(ЗначениеЗаполнено(ТД.ТипРамки), ТД.ТипРамки, "Solid"));
	ОписаниеПоля.Вставить("ТолщинаРамки",			?(ЗначениеЗаполнено(ТД.ТолщинаРамки), ТД.ТолщинаРамки, 1));
	ОписаниеПоля.Вставить("ТипШтрихкода",			ТД.ТипШтрихкода);
	ОписаниеПоля.Вставить("РазмерШрифтаПодписи",	ТД.РазмерШрифтаПодписи);
	ОписаниеПоля.Вставить("ПодписьШтрихкода",		ТД.ПодписьШтрихкода);
	ОписаниеПоля.Вставить("КонтрольныйСимвол",		ТД.КонтрольныйСимвол);
	ОписаниеПоля.Вставить("ПоложениеПоГоризонтали",	ТД.ПоложениеПоГоризонтали);
	ОписаниеПоля.Вставить("ПоложениеПоВертикали",	ТД.ПоложениеПоВертикали);
	ОписаниеПоля.Вставить("Многострочность",		ТД.Многострочность);
	ОписаниеПоля.Вставить("Формат",					ТД.Формат);
	
	СохранитьОформлениеПоля(ОписаниеПоля);
	
	МакетИзменен = Истина;
	
КонецПроцедуры

// Изменяет стиль шрифта.
//
// Параметры:
// ТД				- Текущая строка ТЧ "Поля".
// ИндексСвойства	- Число: 1 - Полужирный, 2 - Курсив, 3 - Подчеркнутый.
//
&НаКлиенте
Процедура ИзменитьШрифт(ТД, ИндексСвойства)
	
	ОбластьТабличногоДокумента = Макет.Область(ТД.Наименование);
	
	ОчиститьОбласть((ТД.Верх-1)/ШагСетки+1, (ТД.Лево+1)/ШагСетки+1, ТД.Низ/ШагСетки, ТД.Право/ШагСетки);
	
	Если ИндексСвойства=1 Тогда
		ТД.Жирный = Не ТД.Жирный;
	ИначеЕсли ИндексСвойства=2 Тогда
		ТД.Наклонный = Не ТД.Наклонный;
	ИначеЕсли ИндексСвойства=3 Тогда
		ТД.Подчеркивание = Не ТД.Подчеркивание;
	КонецЕсли;
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Наименование",			ТД.Наименование);
	ОписаниеПоля.Вставить("Тип",					ТД.Тип);
	ОписаниеПоля.Вставить("ТипЗаполнения",			ТД.ТипЗаполнения);
	ОписаниеПоля.Вставить("ЗначениеПоУмолчанию",	ТД.ЗначениеПоУмолчанию);
	ОписаниеПоля.Вставить("Значение",				ТД.Значение);
	ОписаниеПоля.Вставить("Верх",					ТД.Верх);
	ОписаниеПоля.Вставить("Лево",					ТД.Лево);
	ОписаниеПоля.Вставить("Низ",					ТД.Низ);
	ОписаниеПоля.Вставить("Право",					ТД.Право);
	ОписаниеПоля.Вставить("Ориентация",				ТД.Ориентация);
	ОписаниеПоля.Вставить("Шрифт",					Новый Шрифт(ТД.ИмяШрифта, ?(ЗначениеЗаполнено(ТД.РазмерШрифта), ТД.РазмерШрифта, Неопределено), ТД.Жирный, ТД.Наклонный, ТД.Подчеркивание, ТД.Зачеркивание));
	ОписаниеПоля.Вставить("РамкаСлева",				ТД.РамкаСлева);
	ОписаниеПоля.Вставить("РамкаСверху",			ТД.РамкаСверху);
	ОписаниеПоля.Вставить("РамкаСправа",			ТД.РамкаСправа);
	ОписаниеПоля.Вставить("РамкаСнизу",				ТД.РамкаСнизу);
	ОписаниеПоля.Вставить("ТипРамки",				?(ЗначениеЗаполнено(ТД.ТипРамки), ТД.ТипРамки, "Solid"));
	ОписаниеПоля.Вставить("ТолщинаРамки",			?(ЗначениеЗаполнено(ТД.ТолщинаРамки), ТД.ТолщинаРамки, 1));
	ОписаниеПоля.Вставить("ТипШтрихкода",			ТД.ТипШтрихкода);
	ОписаниеПоля.Вставить("РазмерШрифтаПодписи",	ТД.РазмерШрифтаПодписи);
	ОписаниеПоля.Вставить("ПодписьШтрихкода",		ТД.ПодписьШтрихкода);
	ОписаниеПоля.Вставить("КонтрольныйСимвол",		ТД.КонтрольныйСимвол);
	ОписаниеПоля.Вставить("ПоложениеПоГоризонтали",	ТД.ПоложениеПоГоризонтали);
	ОписаниеПоля.Вставить("ПоложениеПоВертикали",	ТД.ПоложениеПоВертикали);
	ОписаниеПоля.Вставить("Многострочность",		ТД.Многострочность);
	ОписаниеПоля.Вставить("Формат",					ТД.Формат);
	
	СохранитьОформлениеПоля(ОписаниеПоля);
	
	МакетИзменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПроекциюКоординаты(Координата, НовыйШагСетки)
	
	Частное = Координата/НовыйШагСетки;
	
	Если Цел(Частное) = Частное Тогда
		Возврат Координата;
	Иначе
		
		СмещеннаяВниз = Цел(Частное)*НовыйШагСетки;
		СмещеннаяВверх = (Цел(Частное) + 1)*НовыйШагСетки;
		
		Если СмещеннаяВверх-Координата<=Координата-СмещеннаяВниз Тогда
			Возврат СмещеннаяВверх;
		Иначе
			Возврат СмещеннаяВниз;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПроекцииПолей(НовыйШагСетки)
	
	ПроекцииПолей = Новый Массив;
	
	Для Каждого ТекПоле Из Поля Цикл
		
		НовоеПоле = Новый Структура;
		
		НовоеПоле.Вставить("Наименование",				ТекПоле.Наименование);
		НовоеПоле.Вставить("Тип",						ТекПоле.Тип);
		НовоеПоле.Вставить("Значение",					ТекПоле.Значение);
		НовоеПоле.Вставить("Ориентация",				ТекПоле.Ориентация);
		НовоеПоле.Вставить("ИмяШрифта",					ТекПоле.ИмяШрифта);
		НовоеПоле.Вставить("РазмерШрифта",				ТекПоле.РазмерШрифта);
		НовоеПоле.Вставить("Жирный",					ТекПоле.Жирный);
		НовоеПоле.Вставить("Наклонный",					ТекПоле.Наклонный);
		НовоеПоле.Вставить("Подчеркивание",				ТекПоле.Подчеркивание);
		НовоеПоле.Вставить("Зачеркивание",				ТекПоле.Зачеркивание);
		НовоеПоле.Вставить("РамкаСлева",				ТекПоле.РамкаСлева);
		НовоеПоле.Вставить("РамкаСверху",				ТекПоле.РамкаСверху);
		НовоеПоле.Вставить("РамкаСправа",				ТекПоле.РамкаСправа);
		НовоеПоле.Вставить("РамкаСнизу",				ТекПоле.РамкаСнизу);
		НовоеПоле.Вставить("ТипРамки",					ТекПоле.ТипРамки);
		НовоеПоле.Вставить("ТолщинаРамки",				ТекПоле.ТолщинаРамки);
		НовоеПоле.Вставить("ТипШтрихкода",				ТекПоле.ТипШтрихкода);
		НовоеПоле.Вставить("ПодписьШтрихкода",			ТекПоле.ПодписьШтрихкода);
		НовоеПоле.Вставить("РазмерШрифтаПодписи",		ТекПоле.РазмерШрифтаПодписи);
		НовоеПоле.Вставить("ПоложениеПоГоризонтали",	ТекПоле.ПоложениеПоГоризонтали);
		НовоеПоле.Вставить("ПоложениеПоВертикали",		ТекПоле.ПоложениеПоВертикали);
		НовоеПоле.Вставить("Многострочность",			ТекПоле.Многострочность);
		НовоеПоле.Вставить("КонтрольныйСимвол",			ТекПоле.КонтрольныйСимвол);
		НовоеПоле.Вставить("ТипЗаполнения",				ТекПоле.ТипЗаполнения);
		НовоеПоле.Вставить("ЗначениеПоУмолчанию",		ТекПоле.ЗначениеПоУмолчанию);
		НовоеПоле.Вставить("Представление",				ТекПоле.Представление);
		НовоеПоле.Вставить("Формат",					ТекПоле.Формат);
		НовоеПоле.Вставить("Лево",						ПолучитьПроекциюКоординаты(ТекПоле.Лево-1, НовыйШагСетки)+1);
		НовоеПоле.Вставить("Верх",						ПолучитьПроекциюКоординаты(ТекПоле.Верх-1, НовыйШагСетки)+1);
		НовоеПоле.Вставить("Низ",						ПолучитьПроекциюКоординаты(ТекПоле.Низ, НовыйШагСетки));
		НовоеПоле.Вставить("Право",						ПолучитьПроекциюКоординаты(ТекПоле.Право, НовыйШагСетки));
		НовоеПоле.Вставить("Идентификатор",				ТекПоле.ПолучитьИдентификатор());
		
		ПроекцииПолей.Добавить(НовоеПоле);
		
	КонецЦикла;
	
	Возврат ПроекцииПолей;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРешениеПользователя(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
		
		Для Каждого ТекПоле Из ДополнительныеПараметры.УдаляемыеПоля Цикл
			Поля.Удалить(Поля.НайтиПоИдентификатору(ТекПоле));
		КонецЦикла;
		
		ПрименитьНовыеКоординаты(ДополнительныеПараметры.ПроекцииПолей, ДополнительныеПараметры.НовыйШагСетки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерисоватьМакет(МассивПолей=Неопределено)
	
	ДобавлятьВСписокПолей = Истина;
	
	Если МассивПолей=Неопределено Тогда
		МассивПолей = Поля;
		ДобавлятьВСписокПолей = Ложь;
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.Область().АвтоВысотаСтроки = Ложь;	
	ТабДок.Область().ВысотаСтроки = ОдинМиллиметрВысоты;
	ТабДок.Область().ШиринаКолонки = ОдинМиллиметрШирины;
	
	ТабДок.Область().ЦветФона = Новый Цвет(128,128,128);
	ТабДок.Область(1, 1, ВысотаЭтикетки/ШагСетки, ШиринаЭтикетки/ШагСетки).ЦветФона = Новый Цвет(255,255,255);
	
	Для Каждого ТекПоле Из МассивПолей Цикл
		
		Если ДобавлятьВСписокПолей Тогда
			НовоеПоле = Поля.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеПоле, ТекПоле);
		КонецЕсли;
		
		Если ТекПоле.Тип<>"UserData" Тогда			
			СохранитьОформлениеПоля(ТекПоле, Истина, ТабДок);
		КонецЕсли;
		
	КонецЦикла;
	
	Макет = ТабДок;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНовыеКоординаты(ПроекцииПолей, НовыйШагСетки)
	
	Для Каждого ТекПоле Из Поля Цикл
		Если ТекПоле.Тип<>"UserData" Тогда
			ОчиститьОбласть((ТекПоле.Верх-1)/ШагСетки+1, (ТекПоле.Лево-1)/ШагСетки+1, ТекПоле.Низ/ШагСетки, ТекПоле.Право/ШагСетки);
		КонецЕсли;
	КонецЦикла;
	
	Поля.Очистить();
	
	ШагСетки = НовыйШагСетки;
	
	ВысотаЭтикетки = ПолучитьПроекциюКоординаты(ВысотаЭтикетки, НовыйШагСетки);
	ШиринаЭтикетки = ПолучитьПроекциюКоординаты(ШиринаЭтикетки, НовыйШагСетки);
	
	ПерерисоватьМакет(ПроекцииПолей);
	
	МакетИзменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
		ВыборФайла();
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДОФ = ДополнительныеПараметры.ДОФ;    
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
        ИмяФайла = ДОФ.ПолноеИмяФайла;
		СохранитьXMLФайл(Истина);
    Иначе
        Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьМакетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
		ОчисткаМакета();
		МакетИзменен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
		ЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДополнительныеДанныеЗавершение(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Для Каждого ТекПоле Из Поля Цикл
			
			Если ТекПоле.Тип = "UserData" Тогда
				
				НайденныеСтроки = Поля.НайтиСтроки(Новый Структура("Наименование", ТекПоле.Наименование));
	
				Если НайденныеСтроки.Количество()>0 Тогда
					
					ТД = НайденныеСтроки[0];
					УдалитьОписаниеПоля(ТД.Наименование);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ТекПоле Из ПередаваемыеПараметры.Поля Цикл
			
			ПП = Новый Структура;
			ПП.Вставить("ОписаниеПоля", ТекПоле);
			
			НачатьДобавлениеРедактированиеПоляЗавершение(КодВозвратаДиалога.ОК, ПП);
			
		КонецЦикла;
		
		МакетИзменен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти