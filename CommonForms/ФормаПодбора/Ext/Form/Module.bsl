&НаКлиенте
Перем ОтборПоНаименованию;

//////////////////////////////////////////////////////////////////////////////// 
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

&НаКлиенте
Процедура ИзменитьДобавитьСтрокуВКорзину(СтрокаСпискаТоваров, СтрокаХарактеристикПартий, СтрокаКорзины, Количество, Цена, СвободныйОстаток, ЕдИзмерения = Неопределено)
	
	Если СтрокаКорзины = Неопределено Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", 	СтрокаСпискаТоваров.Номенклатура);
		
		Если НЕ СтрокаХарактеристикПартий = Неопределено Тогда
			
			Если СтрокаСпискаТоваров.ИспользоватьХарактеристики Тогда
				
				СтруктураОтбора.Вставить("Характеристика", 	СтрокаХарактеристикПартий.ХарактеристикаСсылка);
				
			КонецЕсли;
			
			Если СтрокаСпискаТоваров.ИспользоватьПартии Тогда
				
				СтруктураОтбора.Вставить("Партия", СтрокаХарактеристикПартий.ПартияСсылка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗапрашиватьКоличество Тогда
			
			СтруктураОтбора.Вставить("Цена", Цена);
			
		КонецЕсли;
		
		Строки = ОтобранныеЗапасы.НайтиСтроки(СтруктураОтбора);
		
	КонецЕсли;
	
	Если Строки.Количество() > 0 Тогда
		
		Строки[0].ЕдиницаИзмерения		= ?(ЗначениеЗаполнено(ЕдИзмерения), ЕдИзмерения, Строки[0].ЕдиницаИзмерения);
		
		Строки[0].Количество 			= Строки[0].Количество + Количество;
		
		Если ЗаполнятьРезерв
			И Строки[0].Свойство("Резерв") Тогда
			
			Строки[0].Резерв				= МИН(Строки[0].Количество, СвободныйОстаток); 
			
		КонецЕсли;
		
		Элементы.ОтобранныеЗапасы.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		
	Иначе
		
		НоваяСтрока 					= ОтобранныеЗапасы.Добавить();
		НоваяСтрока.Номенклатура 		= СтрокаСпискаТоваров.Номенклатура;
		НоваяСтрока.СтранаПроисхождения	= СтрокаСпискаТоваров.СтранаПроисхождения;
		НоваяСтрока.ЕдиницаИзмерения 	= ?(ЗначениеЗаполнено(ЕдИзмерения), ЕдИзмерения, СтрокаСпискаТоваров.ЕдиницаИзмерения);
		НоваяСтрока.Количество 			= Количество;
		
		Если ЗаполнятьРезерв
			И НоваяСтрока.Свойство("Резерв") Тогда
			
			НоваяСтрока.Резерв				= МИН(НоваяСтрока.Количество, СвободныйОстаток); 
			
		КонецЕсли;
		
		// Ставка НДС
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("ДатаОбработки", 	Период);
		СтруктураДанных.Вставить("Организация", 	Организация);
		СтруктураДанных.Вставить("Номенклатура", 	НоваяСтрока.Номенклатура);
		СтруктураДанных.Вставить("Характеристика", 	НоваяСтрока.Характеристика);
		СтруктураДанных.Вставить("НалогообложениеНДС", НалогообложениеНДС);
		СтруктураДанных.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		СтруктураДанных.Вставить("РасчетнаяСтавкаНДС", РасчетнаяСтавкаНДС);
		СтруктураДанных.Вставить("ВидСкидкиНаценки", ВидСкидкиНаценки);
		СтруктураДанных.Вставить("Коэффициент", 	1);
		
		ДанныеНоменклатуры 		= ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанных);
		НоваяСтрока.СтавкаНДС 	= ДанныеНоменклатуры.СтавкаНДС;
		
		// Цена
		ПредварительнаяЦена = 0;
		Если (СуммаВключаетНДС = ЦенаВключаетНДС) 
			ИЛИ ЗапрашиватьКоличество Тогда
			
			ПредварительнаяЦена = Цена;
			
		Иначе
			
			ПредварительнаяЦена = ?(СуммаВключаетНДС,
							(Цена * (100 + УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС))) / 100,
							(Цена * 100) / (100 + УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС)));
							
			ПредварительнаяЦена = ОкруглитьЦену(ПредварительнаяЦена, ВидЦенПорядокОкругления, ВидЦенОкруглятьВБольшуюСторону);
			
		КонецЕсли;
		
		// Если отличается валюта документа и валюта вида цен, необходим пересчет
		НоваяСтрока.Цена = ?(Валюта = ВалютаВидаЦен,
			ПредварительнаяЦена,
			УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(ПредварительнаяЦена, КурсВалютаВидаЦен, КурсВалютаДокумента, КратностьВалютаВидаЦен, КратностьВалютаДокумента)
			);
		
		Если ИспользуютсяСкидкиНаценки Тогда
			
			НоваяСтрока.ПроцентСкидкиНаценки = ДанныеНоменклатуры.ПроцентСкидкиНаценки;
			
		КонецЕсли;
		
		// ДисконтныеКарты
		Если ИспользуютсяДисконтныеКарты Тогда
			
			НоваяСтрока.ПроцентСкидкиНаценки = НоваяСтрока.ПроцентСкидкиНаценки + ПроцентСкидкиПоДисконтнойКарте;
			
		КонецЕсли;
		// Конец ДисконтныеКарты
		
		Если НЕ СтрокаХарактеристикПартий = Неопределено Тогда
			
			Если СтрокаСпискаТоваров.ИспользоватьХарактеристики Тогда
				НоваяСтрока.Характеристика 		= СтрокаХарактеристикПартий.ХарактеристикаСсылка;
			КонецЕсли;
			
			Если СтрокаСпискаТоваров.ИспользоватьПартии Тогда
				НоваяСтрока.Партия 				= СтрокаХарактеристикПартий.ПартияСсылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ОтобранныеЗапасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();

КонецПроцедуры

&НаКлиенте
// Формерует структуру данных подбора из реквизитов формы
//
Функция СформироватьСтруктуруДанныхТекущегоСеансаПодбора()
	
	ТекущаяСтрокаОтобранныхЗапасов = Элементы.ОтобранныеЗапасы.ТекущиеДанные;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ДатаОбработки", 	Период);
	СтруктураДанных.Вставить("Организация", 	Организация);
	СтруктураДанных.Вставить("НалогообложениеНДС",НалогообложениеНДС);
	СтруктураДанных.Вставить("СуммаВключаетНДС",СуммаВключаетНДС);
	СтруктураДанных.Вставить("РасчетнаяСтавкаНДС", РасчетнаяСтавкаНДС);
	СтруктураДанных.Вставить("Коэффициент", 	1);
	СтруктураДанных.Вставить("ВалютаДокумента", Валюта);
	
	СтруктураДанных.Вставить("Номенклатура", 	ТекущаяСтрокаОтобранныхЗапасов.Номенклатура);
	СтруктураДанных.Вставить("Характеристика",	ТекущаяСтрокаОтобранныхЗапасов.Характеристика);
	
	Если ИспользуютсяЦены Тогда
		
		СтруктураДанных.Вставить("ВидЦен", ВидЦен);
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьСтруктуруДанныхТекущегоСеансаПодбора()

&НаКлиенте
// Округляет число по заданному порядку.
//
// Параметры:
//  Число        - Число, которое необходимо округлить
//  ПорядокОкругления - Перечисления.ПорядкиОкругления - порядок округления
//  ОкруглятьВБольшуюСторону - Булево - округления в большую сторону.
//
// Возвращаемое значение:
//  Число        - результат округления.
//
Функция ОкруглитьЦену(Число, ПравилоОкругления, ОкруглятьВБольшуюСторону)
	
	Перем Результат; // Возвращаемый результат.
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПравилоОкругления) Тогда
		
		ПорядокОкругления = ПредопределенноеЗначение("Перечисление.ПорядкиОкругления.Окр0_01");
	Иначе
		
		ПорядокОкругления = ПравилоОкругления;
		
	КонецЕсли;
	
	Порядок = Число(Строка(ПорядокОкругления));
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
		
	Иначе
		
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
			
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦену()

&НаСервере
// Преобразует набор данных с типом СписокЗначений в Массив
// 
Функция СписокЗначенийВМассив(ВхСписокЗначений)
	
	МассивДанных	= Новый Массив;
	
	Для каждого ЭлементСпискаЗначений Из ВхСписокЗначений Цикл
		
		МассивДанных.Добавить(ЭлементСпискаЗначений.Значение);
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции // СписокЗначенийВМассив()

// Процедура заполняет параметры открытия формы значениями по умолчанию
//
//
&НаСервере
Процедура ЗаполнитьПараметрыОткрытияФормыЗначениямиПоУмолчанию(СтруктураПараметровПоУмолчанию, Параметры)
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	СтруктураПараметровПоУмолчанию.Вставить("Период", ТекущаяДата());
	
	// Организация
	ЗначениеДляПараметраОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
	Если НЕ ЗначениеЗаполнено(ЗначениеДляПараметраОрганизация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация,
		|	ВЫБОР
		|		КОГДА Организации.Предопределенный
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.Организации КАК Организации
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока НЕ ЗначениеЗаполнено(ЗначениеДляПараметраОрганизация) Цикл
			
			Выборка.Следующий();
			ЗначениеДляПараметраОрганизация = Выборка.Организация;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураПараметровПоУмолчанию.Вставить("ОрганизацияДокумента",	ЗначениеДляПараметраОрганизация);
	СтруктураПараметровПоУмолчанию.Вставить("Организация", 
		?(Константы.УчетПоКомпании.Получить(), Константы.Компания.Получить(), ЗначениеДляПараметраОрганизация));
	
	//Склад
	ЗначениеДляПараметраСтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
	Если ЗначениеЗаполнено(ЗначениеДляПараметраСтруктурнаяЕдиница) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктурныеЕдиницы.Ссылка КАК Склад
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = Значение(Перечисление.ТипыСтруктурныхЕдиниц.Склад)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока НЕ ЗначениеЗаполнено(ЗначениеДляПараметраСтруктурнаяЕдиница) Цикл
			
			Выборка.Следующий();
			ЗначениеДляПараметраСтруктурнаяЕдиница = Выборка.Склад;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураПараметровПоУмолчанию.Вставить("СтруктурнаяЕдиница", ЗначениеДляПараметраСтруктурнаяЕдиница);
	
	Если Параметры.Свойство("ЕстьВидЦен")
		И Параметры.ЕстьВидЦен Тогда
	
		//Вид цен
		ЗначениеДляПараметраВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойВидЦенПродажи");
		СтруктураПараметровПоУмолчанию.Вставить("ВидЦен", ?(ЗначениеЗаполнено(ЗначениеДляПараметраВидЦен), ЗначениеДляПараметраВидЦен, Справочники.ВидыЦен.Оптовая));
		
		//Валюта, НДС
		СтруктураПараметровПоУмолчанию.Вставить("Валюта", СтруктураПараметровПоУмолчанию.ВидЦен.ВалютаЦены);
		СтруктураПараметровПоУмолчанию.Вставить("СуммаВключаетНДС", СтруктураПараметровПоУмолчанию.ВидЦен.ЦенаВключаетНДС);
		
	КонецЕсли;
	
	Если Параметры.Свойство("ДоступноИзменениеЦены") Тогда
		
		СтруктураПараметровПоУмолчанию.Вставить("ДоступноИзменениеЦены", Параметры.ДоступноИзменениеЦены);
		
	КонецЕсли;

	Если Параметры.Свойство("ЕстьНалогооблажение") Тогда
		Если Параметры.ЕстьНалогооблажение Тогда
		
		//Налогообложение НДС
		СтруктураПараметровПоУмолчанию.Вставить("НалогообложениеНДС",
				УправлениеНебольшойФирмойСервер.НалогообложениеНДС(СтруктураПараметровПоУмолчанию.Организация,
								СтруктураПараметровПоУмолчанию.СтруктурнаяЕдиница,
								СтруктураПараметровПоУмолчанию.Период));
			
		Иначе
			
			СтруктураПараметровПоУмолчанию.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Использовать резервирование (видимость колонки резерва в подобранных товарах)
	Если Параметры.Свойство("ИспользуетсяРезервирование") 
		И Параметры.ИспользуетсяРезервирование Тогда
		
		СтруктураПараметровПоУмолчанию.Вставить("ИспользуетсяРезервирование", Истина);
		
	КонецЕсли;
	
	//Заполнять резерв (заполнять колонку резерв значением количества)
	Если Параметры.Свойство("ЗаполнятьРезерв")
		И Параметры.ЗаполнятьРезерв Тогда
		
		СтруктураПараметровПоУмолчанию.Вставить("ЗаполнятьРезерв", Истина);
		
	КонецЕсли;
	
	// Используются нормы.
	Если Параметры.Свойство("ИспользуютсяНормы")
		И Параметры.ИспользуютсяНормы Тогда
		
		СтруктураПараметровПоУмолчанию.Вставить("ИспользуютсяНормы", Истина);
		
	КонецЕсли;
	
	// Тип номенклатуры
	Если Параметры.Свойство("МассивТиповНоменклатуры") Тогда
		ОтборТипНоменклатуры = Новый СписокЗначений;
		Для каждого ЭлементМассива Из Параметры.МассивТиповНоменклатуры Цикл
			ОтборТипНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры[ЭлементМассива]);
		КонецЦикла;
		СтруктураПараметровПоУмолчанию.Вставить("ТипНоменклатуры", ОтборТипНоменклатуры);
	КонецЕсли;
	
	// Кнопка ОК
	Если Параметры.Свойство("ВидОперацииЗаказНаряд") Тогда
		ВидОперацииЗаказНаряд = Истина;
		Элементы.ОК.Заголовок= "Создать " + """Заказ-наряд""";
	Иначе
		Элементы.ОК.Заголовок= "Создать " + """" + Метаданные.Документы[Параметры.ВидНовогоДокумента].Синоним + """";
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьЗначенияПоУмолчанию()

&НаСервере
// Функция помещает результаты подбора в хранилище
//
Функция ЗаписатьПодборВХранилище() 
	
	Для каждого СтрокаЗагрузки Из ОтобранныеЗапасы Цикл
		
		Если ИспользуютсяНормы Тогда
			
			СтрокаЗагрузки.Коэффициент = СтрокаЗагрузки.Количество;
			СтрокаЗагрузки.Кратность = 1;
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("ДатаОбработки", 		Период);
			СтруктураДанные.Вставить("Номенклатура", 		СтрокаЗагрузки.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", 		СтрокаЗагрузки.Характеристика);
			
			Если НЕ СтрокаЗагрузки.Номенклатура.ФиксированнаяСтоимость Тогда // Для фиксированной стоимости не используются нормы времени и цены по виду работ
				
				СтрокаЗагрузки.Количество = УправлениеНебольшойФирмойСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);
				СтруктураДанные.Вставить("Номенклатура", 	ВидРабот);
				
			КонецЕсли;
			
			Если ИспользуетсяВидРабот Тогда
				
				СтруктураДанные.Вставить("Характеристика", 	Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				СтруктураДанные.Вставить("Коэффициент", 	1);
				СтруктураДанные.Вставить("ЕдиницаИзмерения",ВидРабот.ЕдиницаИзмерения);
				СтруктураДанные.Вставить("ВидЦен",			ВидЦен);
				СтруктураДанные.Вставить("ВалютаДокумента",	Валюта);
				
				СтрокаЗагрузки.Цена 	= УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтрокаЗагрузки.Сумма 	= СтрокаЗагрузки.Количество * СтрокаЗагрузки.Коэффициент * СтрокаЗагрузки.Кратность * СтрокаЗагрузки.Цена;
				
				Если ЗначениеЗаполнено(НалогообложениеНДС)
					И НЕ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			
					Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
						
						СтрокаЗагрузки.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
						
					Иначе
						
						СтрокаЗагрузки.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура.СтавкаНДС) Тогда
					
					СтрокаЗагрузки.СтавкаНДС = СтрокаЗагрузки.Номенклатура.СтавкаНДС;
					
				Иначе
					
					СтрокаЗагрузки.СтавкаНДС = ОрганизацияДокумента.СтавкаНДСПоУмолчанию;
					
				КонецЕсли;
				
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаЗагрузки.СтавкаНДС);
				
				СтрокаЗагрузки.СуммаНДС = ?(СуммаВключаетНДС,
									СтрокаЗагрузки.Сумма - (СтрокаЗагрузки.Сумма) / ((СтавкаНДС + 100) / 100),
									СтрокаЗагрузки.Сумма * СтавкаНДС / 100);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользуютсяСпецификации Тогда
			СтрокаЗагрузки.Спецификация = УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтрокаЗагрузки.Номенклатура, СтрокаЗагрузки.Характеристика);
		КонецЕсли;
		
		СтрокаЗагрузки.ДоляСтоимости 		= 1;
		
	КонецЦикла;
	
	УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(Элементы.СписокЗапасовЗапрашиватьКоличествоИЦены.Пометка, "ЗапрашиватьКоличествоИЦену");
	
	Если СтруктураНастроек.ЗапоминатьТекущуюИерархию Тогда
		
		УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(ГруппаНоменклатуры, "ГруппаОтбора");
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(
		ОтобранныеЗапасы.Выгрузить(),
		?(УникальныйИдентификаторФормыВладельца = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"), Неопределено, УникальныйИдентификаторФормыВладельца)
										);
	
КонецФункции

&НаКлиенте
// Рассчитывается сумма НДС в строке табличной части.
//
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // ПересчитатьСуммыДокумента()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураНоменклатуры = Новый Структура("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	Если НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		ДанныеСтавкаНДС = ?(СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС,
							УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
							УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		
		ДанныеСтавкаНДС = СтруктураДанные.Номенклатура.СтавкаНДС;
		
	Иначе
		
		ДанныеСтавкаНДС = СтруктураДанные.Организация.СтавкаНДСПоУмолчанию;
		
	КонецЕсли;
	
	Если СтруктураДанные.РасчетнаяСтавкаНДС И ЗначениеЗаполнено(ДанныеСтавкаНДС) И НЕ ДанныеСтавкаНДС.Расчетная Тогда
		
		ДанныеСтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(ДанныеСтавкаНДС);
		
	КонецЕсли;
	
	СтруктураНоменклатуры.Вставить("СтавкаНДС", ДанныеСтавкаНДС);

	СтруктураНоменклатуры.Вставить("Цена", ?(СтруктураДанные.Свойство("ВидЦен"), УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные), 0));
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда 
		
		СтруктураНоменклатуры.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
		
	КонецЕсли;
	
	Возврат СтруктураНоменклатуры;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
// Рассчитывается сумма НДС в строке табличной части.
//
Процедура РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
											
КонецПроцедуры // ПересчитатьСуммыДокумента() 

&НаКлиенте
// Процедура рассчитывает сумму в строке табличной части.
//
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		СтрокаТабличнойЧасти = Элементы.ОтобранныеЗапасы.ТекущиеДанные;
		
	КонецЕсли;
	
	// Запомним сумму "Всего"
	ВсегоБылоДоПересчета = СтрокаТабличнойЧасти.Всего;
	
	// Сумма
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Скидка
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		
		СтрокаТабличнойЧасти.Сумма = 0;
		
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 Тогда
		
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
		
	КонецЕсли;
	
	// Сумма НДС
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
	// Всего
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Обновим итог
	СуммаПодобранныхТоваров = СуммаПодобранныхТоваров + (СтрокаТабличнойЧасти.Всего - ВсегоБылоДоПересчета);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
// Процедура - обработчик команды ЗапрашиватьКоличество.
//
Процедура ЗапрашиватьКоличество(Команда)
	
	Элементы.СписокЗапасовЗапрашиватьКоличествоИЦены.Пометка	= НЕ ЗапрашиватьКоличество;
	Элементы.СписокОстатковЗапрашиватьКоличествоИЦену.Пометка	= НЕ ЗапрашиватьКоличество;
	
	ЗапрашиватьКоличество = НЕ ЗапрашиватьКоличество;
	
КонецПроцедуры

&НаКлиенте
// Процедура осуществляет переход к списку характеристик
//
// Параметры:
// ТекущаяСтрокаСпискаЗапасов - текущая строка динамического списка "Запасы"
//
Процедура ПерейтиКХарактеристикам(СтрокаСпискаТоваров, ОткрытьБезОстатка = Ложь)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокХарактеристик, "Номенклатура", СтрокаСпискаТоваров.Номенклатура, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Если (СтрокаСпискаТоваров.ИспользоватьХарактеристики ИЛИ СтрокаСпискаТоваров.ИспользоватьПартии)
		И ((СтрокаСпискаТоваров.Свойство("Остаток") И СтрокаСпискаТоваров.Остаток > 0) 
			ИЛИ ЭтоПриходныйДокумент
			ИЛИ ОткрытьБезОстатка
			ИЛИ (СокрЛП(СтруктураНастроек.СпособВыводаОстатков) = "Отдельно" И ТекстОстаток > 0)) Тогда
		 
		Элементы.ГруппаСтраниц.ТекущаяСтраница	= Элементы.СтраницаСписокХарактеристик;
		Элементы.КоманднаяПанельЗапасыИХарактеристики.ТекущаяСтраница = Элементы.СтраницаКоманднаяПанельХарактеристики;
		
		ПодключитьОбработчикОжидания("ПодборСписокХарактеристикПриАктивизацииСтрокиОбработчикОжидания",0.2,Истина);
		
	Иначе 
		
		Если НЕ СтруктураНастроек.ПоказыватьЦены Тогда
			
			ЦенаДляКарзины = 0;
			
		ИначеЕсли СокрЛП(СтруктураНастроек.СпособВыводаОстатков) = "Отдельно" Тогда
			
			Если КешТекущаяСтрокаСпискаЗапасов <> Элементы.СписокЗапасов.ТекущаяСтрока Тогда
				
				ОтключитьОбработчикОжидания("ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания");
				ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания();
				
			КонецЕсли;
			
			ЦенаДляКарзины = ТекстЦена;
			
		Иначе
			
			Если УчетЦенВРазличныхЕдиницахИзмерения = Истина Тогда
				
				Если СтрокаСпискаТоваров.Свойство("ЦенаПоКлассификатору") Тогда
					
					ЦенаДляКарзины = СтрокаСпискаТоваров.ЦенаПоКлассификатору;
					
				КонецЕсли;
				
			Иначе
				
				Если СтрокаСпискаТоваров.Свойство("Цена") Тогда
					
					ЦенаДляКарзины = СтрокаСпискаТоваров.Цена;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИзменитьТоварВКорзине(СтрокаСпискаТоваров, , , 1, ЦенаДляКарзины);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура изменяет (добавляет) товары в "Корзину"
//
// Под корзиной подразумевается табличное поле "ОтобранныеЗапасы"
//
Процедура ИзменитьТоварВКорзине(СтрокаСпискаТоваров, СтрокаХарактеристикПартий = Неопределено, СтрокаКорзины = Неопределено, Количество, Цена)
	
	Если СтруктураНастроек.ПоказыватьСвободныйОстаток Тогда
		
		Если СокрЛП(СтруктураНастроек.СпособВыводаОстатков) = "Отдельно" Тогда
			
				СвободныйОстаток = ТекстСвободныйОстаток;
			
		Иначе
			
			Если СтрокаХарактеристикПартий = Неопределено Тогда
				
				СвободныйОстаток = СтрокаСпискаТоваров.СвободныйОстаток;
				
			Иначе
				
				СвободныйОстаток = СтрокаХарактеристикПартий.СвободныйОстаток;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СвободныйОстаток = 0;
		
	КонецЕсли;
	
	Если ЗапрашиватьКоличество Тогда
		
		ЦенаДоступна = СтруктураНастроек.ПоказыватьЦены И ДоступноИзменениеЦены И (ИспользуютсяЦены ИЛИ ИспользуютсяЦеныКонтрагентов);
		
		ПараметрыИзменения = Новый Структура("ВладелецЕдиницИзмерения, Количество, ЦенаДоступна, Цена", СтрокаСпискаТоваров.Номенклатура, Количество, ЦенаДоступна, Цена);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтрокаСпискаТоваров", СтрокаСпискаТоваров);
		ДополнительныеПараметры.Вставить("СтрокаХарактеристикПартий", СтрокаХарактеристикПартий);
		ДополнительныеПараметры.Вставить("СтрокаКорзины", СтрокаКорзины);
		ДополнительныеПараметры.Вставить("СвободныйОстаток", СвободныйОстаток);
		ДополнительныеПараметры.Вставить("Количество", Количество);
		ДополнительныеПараметры.Вставить("Цена", Цена);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗапросаКоличестваИЦеныДобавитьТоварВКорзину", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаКоличествоИЦена", Новый Структура("ЗначениеЗаполнения", ПараметрыИзменения), ЭтаФорма, , , , ОписаниеОповещения);
		
	Иначе
		
		ИзменитьДобавитьСтрокуВКорзину(СтрокаСпискаТоваров, СтрокаХарактеристикПартий, СтрокаКорзины, Количество, Цена, СвободныйОстаток);
		
	КонецЕсли;
	
	
	
КонецПроцедуры //ИзменитьТоварВКорзине()

&НаКлиенте
// Процедура инициализирует добавление товара в "Корзину"
// для номенклатуры у, которой ведеться учет по характеристикам, но 
// при этом у пользователя нет необходимости обращаться к этим данным
//
Процедура ДобавитьТоварНеЗаходяВХарактеристику(Команда)
	
	СтрокаСпискаТоваров = Элементы.СписокЗапасов.ТекущиеДанные;
	Если НЕ СтрокаСпискаТоваров = Неопределено Тогда
		
		Если НЕ СтруктураНастроек.ПоказыватьЦены Тогда
			
			ЦенаДляКарзины = 0;
			
		ИначеЕсли СокрЛП(СтруктураНастроек.СпособВыводаОстатков) = "Отдельно" Тогда
			
			Если КешТекущаяСтрокаСпискаЗапасов <> Элементы.СписокЗапасов.ТекущаяСтрока Тогда
				
				ОтключитьОбработчикОжидания("ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания");
				ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания();
				
			КонецЕсли;
			
			ЦенаДляКарзины = ТекстЦена;
			
		Иначе
			
			Если УчетЦенВРазличныхЕдиницахИзмерения = Истина Тогда
				
				Если СтрокаСпискаТоваров.Свойство("ЦенаПоКлассификатору") Тогда
					
					ЦенаДляКарзины = СтрокаСпискаТоваров.ЦенаПоКлассификатору;
					
				КонецЕсли;
				
			Иначе
				
				Если СтрокаСпискаТоваров.Свойство("Цена") Тогда
					
					ЦенаДляКарзины = СтрокаСпискаТоваров.Цена;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИзменитьТоварВКорзине(СтрокаСпискаТоваров, , , 1, ЦенаДляКарзины);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьТоварНеЗаходяВХарактеристику()

&НаСервере
// Процедура устанавливает видимость элементов формы подбора
//
Процедура УправлениеВидимостьюЭлементовФормы(ПараметрыОткрытияФормы)
	
	Элементы.ОтобранныеЗапасыРезерв.Видимость = (ПараметрыОткрытияФормы.Свойство("ИспользуетсяРезервирование") 
									И ПараметрыОткрытияФормы.ИспользуетсяРезервирование 
									И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить()
									И НЕ ЗапросПоСкладу);
	
	Если ЗначениеЗаполнено(НалогообложениеНДС) 
		И НЕ ИспользуетсяВидРабот Тогда
		
		Элементы.ОтобранныеЗапасыСуммаНДС.Видимость		= (НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
		Элементы.ОтобранныеЗапасыСтавкаНДС.Видимость	= (НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
		
	КонецЕсли;
	
	Элементы.ОтобранныеЗапасыЦена.Видимость		= (ИспользуютсяЦены ИЛИ ИспользуютсяЦеныКонтрагентов);
	Элементы.ОтобранныеЗапасыВсего.Видимость	= (ИспользуютсяЦены ИЛИ ИспользуютсяЦеныКонтрагентов);
	
	Элементы.Ячейка.Видимость					= УчетПоЯчейкам;
	Элементы.ОтобранныеЗапасыПартия.Видимость	= ИспользуютсяПартии;
	
	Элементы.ОтобранныеЗапасыПроцентСкидкиНаценки.Видимость = ИспользуютсяСкидкиНаценки ИЛИ ИспользуютсяДисконтныеКарты; // ДисконтныеКарты
	
КонецПроцедуры //УправлениеВидимостьюЭлементовФормы()

&НаСервере
// Процедура устанавливает видимость полей динамических списков формы
// в зависимости от переданных настроек
//
// Параметры:
// СтруктураНастроек - Структура, содержит значение пользовательских настроек
//
Процедура УстановитьВидимостьПолейДинамическогоСписка(СтруктураНастроек)
	
	ПоказыватьВТаблице = (СтруктураНастроек.СпособВыводаОстатков = Перечисления.СпособВыводаОстатковВПодборе.ВТаблице);
	
	Элементы.СписокЗапасовОстаток.Видимость 			= СтруктураНастроек.ПоказыватьОстатки И ПоказыватьВТаблице И СтруктураНастроек.ТребуетсяПоказОстатков;
	Элементы.СписокЗапасовРезерв.Видимость 				= СтруктураНастроек.ПоказыватьРезерв И ПоказыватьВТаблице И НЕ ЗапросПоСкладу И СтруктураНастроек.ТребуетсяПоказОстатков;
	Элементы.СписокЗапасовСвободныйОстаток.Видимость 	= СтруктураНастроек.ПоказыватьСвободныйОстаток И ПоказыватьВТаблице И НЕ ЗапросПоСкладу И СтруктураНастроек.ТребуетсяПоказОстатков;
	
	Элементы.СписокЗапасовЕдиницаИзмерения.Видимость		= УчетЦенВРазличныхЕдиницахИзмерения;	
	
	Элементы.СписокЗапасовЦена.Видимость = СтруктураНастроек.ПоказыватьЦены 
											И (ИспользуютсяЦены ИЛИ ИспользуютсяЦеныКонтрагентов)
											И НЕ УчетЦенВРазличныхЕдиницахИзмерения
											И ПоказыватьВТаблице;
	
	Элементы.СписокЗапасовЦенаПоКлассификатору.Видимость = СтруктураНастроек.ПоказыватьЦены
														И (ИспользуютсяЦены ИЛИ ИспользуютсяЦеныКонтрагентов)
														И УчетЦенВРазличныхЕдиницахИзмерения
														И ПоказыватьВТаблице;
																
	Элементы.СписокХарактеристикЦена.Видимость = СтруктураНастроек.ПоказыватьЦены 
											И (ИспользуютсяЦены ИЛИ ИспользуютсяЦеныКонтрагентов)
											И НЕ УчетЦенВРазличныхЕдиницахИзмерения
											И ПоказыватьВТаблице;
	
	Элементы.СписокХарактеристикЦенаПоКлассификатору.Видимость = СтруктураНастроек.ПоказыватьЦены
														И (ИспользуютсяЦены ИЛИ ИспользуютсяЦеныКонтрагентов)
														И УчетЦенВРазличныхЕдиницахИзмерения
														И ПоказыватьВТаблице;
	
	Элементы.СписокХарактеристикОстаток.Видимость 			= ПоказыватьВТаблице И СтруктураНастроек.ПоказыватьОстатки И СтруктураНастроек.ТребуетсяПоказОстатков;
	Элементы.СписокХарактеристикРезерв.Видимость 			= ПоказыватьВТаблице И СтруктураНастроек.ПоказыватьРезерв И НЕ ЗапросПоСкладу И СтруктураНастроек.ТребуетсяПоказОстатков;
	Элементы.СписокХарактеристикГруппаОстатки.Видимость		= Элементы.СписокХарактеристикОстаток.Видимость ИЛИ Элементы.СписокХарактеристикРезерв.Видимость;
	Элементы.СписокХарактеристикСвободныйОстаток.Видимость	= ПоказыватьВТаблице И СтруктураНастроек.ПоказыватьСвободныйОстаток И СтруктураНастроек.ТребуетсяПоказОстатков;
	
	Элементы.ОтобранныеЗапасыХарактеристика.Видимость		= ИспользуютсяХарактеристики;
	
	Элементы.Склад.Видимость 					= СтруктураНастроек.ТребуетсяПоказОстатков;
	
	Элементы.ГруппаОстаткиВидЦенЦеныТекстом.Видимость = СтруктураНастроек.СпособВыводаОстатков = Перечисления.СпособВыводаОстатковВПодборе.Отдельно;
	Элементы.ТекстОстаток.Видимость 			= СтруктураНастроек.ПоказыватьОстатки;
	Элементы.ТекстРезерв.Видимость 				= СтруктураНастроек.ПоказыватьРезерв И НЕ ЗапросПоСкладу;
	Элементы.ТекстСвободныйОстаток.Видимость 	= СтруктураНастроек.ПоказыватьСвободныйОстаток;
	
	Если СтруктураНастроек.ПоказыватьЦены Тогда
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			Элементы.ГруппаВидимостьВидовЦен.ТекущаяСтраница = Элементы.ГруппаВидЦенКомпании;
			
		ИначеЕсли ЗначениеЗаполнено(ВидЦенКонтрагента) Тогда
			
			Элементы.ГруппаВидимостьВидовЦен.ТекущаяСтраница = Элементы.ГруппаВидЦенКонтрагента;
			
		Иначе 
			
			Элементы.ГруппаВидимостьВидовЦен.ТекущаяСтраница = Элементы.ГруппаВидЦенНеУказан;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ТекстЦена.Видимость			= СтруктураНастроек.ПоказыватьЦены;
	Элементы.ВидЦен.Видимость				= СтруктураНастроек.ПоказыватьЦены И ИспользуютсяЦены;
	Элементы.ВидЦенКонтрагента.Видимость	= СтруктураНастроек.ПоказыватьЦены И ИспользуютсяЦеныКонтрагентов;
	Элементы.ДекорацияВидЦенНеУказан.Видимость = СтруктураНастроек.ПоказыватьЦены И (ИспользуютсяЦены ИЛИ ИспользуютсяЦеныКонтрагентов);
	
КонецПроцедуры //УстановитьВидимостьПолейДинамическогоСписка()

&НаСервере
// Устанавливает значение параметра динамического списка на сервере
//
// Параметры:
// ДинамическийСписок - динамический список, для которого устанавливается параметр
// Имя - имя параметра динамического списка
// ЗначениеПараметра - значение устанавливаемого параметра
//
Процедура УстановитьПараметрДинамическогоСписка(ДинамическийСписок, Имя, ЗначениеПараметра)
	
	Если НЕ ДинамическийСписок.Параметры.Элементы.Найти(Имя) = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДинамическийСписок, Имя, ЗначениеПараметра, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрДинамическогоСписка()

&НаСервере
// Процедура получает данные из хранилища по указанному адресу 
// и загружает их в объект приемник (Табличное поле, таблица значений)
//
// Параметры:
// Адрес - адрес хранилища, переданный форме подбора
// ТаблицаДляЗагрузки - табличное значений для загрузки запасов (ОтобранныеЗапасы)
//
Процедура ЗагрузитьЗапасыИзХранилища(Адрес, ТаблицаДляЗагрузки)
	
	ТаблицаЗапасов 				= ПолучитьИзВременногоХранилища(Адрес);
	ЕстьКолонкаРезервОтгрузка 	= ТаблицаЗапасов.Колонки.Найти("РезервОтгрузка");
	
	Для каждого СтрокаТЧ Из ТаблицаЗапасов Цикл
		
		НоваяСтрока = ТаблицаДляЗагрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		Если ИспользуютсяНормы Тогда
			НоваяСтрока.Количество = СтрокаТЧ.Коэффициент;
		КонецЕсли;
		
		Если ЕстьКолонкаРезервОтгрузка <> Неопределено 
			И НоваяСтрока.Свойство("Резерв") Тогда
			
			НоваяСтрока.Резерв = СтрокаТЧ.РезервОтгрузка;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗагрузитьЗапасыИзХранилища()

&НаСервере
// Процедура считывает пользовательские настройки отображения данных
// в форме подбора
//
Функция ПолучитьНастройкиПодбора()
	
	Пользователь 			= Пользователи.ТекущийПользователь();
	СпособВыводаОстатков	= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "СпособВыводаОстатков");
	
	Если НЕ ЗначениеЗаполнено(СпособВыводаОстатков) Тогда
		
		СпособВыводаОстатков = Перечисления.СпособВыводаОстатковВПодборе.ВТаблице;
		
	КонецЕсли;
	
	ТребуетсяПоказОстатков = НЕ ((ТипНоменклатуры.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Запас) = Неопределено)
								И (ТипНоменклатуры.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Операция) = Неопределено))
							И НЕ ЭтоПриходныйДокумент;
	
	Возврат Новый Структура("ЗапрашиватьКоличествоИЦену, ПоказыватьОстатки, ПоказыватьРезерв, ПоказыватьСвободныйОстаток, ПоказыватьЦены, ТребуетсяПоказОстатков, СпособВыводаОстатков, ЗапоминатьТекущуюИерархию",
				УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ЗапрашиватьКоличествоИЦену"),
				УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ПоказыватьОстатки") И ТребуетсяПоказОстатков,
				УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ПоказыватьРезерв") И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() И ТребуетсяПоказОстатков,
				УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ПоказыватьСвободныйОстаток") И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() И ТребуетсяПоказОстатков,
				УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ПоказыватьЦены") И (ИспользуютсяЦены ИЛИ ИспользуютсяЦеныКонтрагентов),
				ТребуетсяПоказОстатков,
				СпособВыводаОстатков,
				УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ЗапоминатьТекущуюИерархию"));
	
КонецФункции //ПолучитьНастройкиПодбора()

&НаСервере
// Процедура устанавливает текст запроса для динамического списка "СписокЗапасов"
//
// Параметры:
// СтруктураНастроек - Структура, содержит значение пользовательских настроек
//
Процедура УстановитьТекстЗапросаСпискаЗапасов(СтруктураНастроек)
	
	// Условия формирования запроса
	ЗапросСОстатками = (СтруктураНастроек.ПоказыватьОстатки ИЛИ СтруктураНастроек.ПоказыватьРезерв ИЛИ СтруктураНастроек.ПоказыватьСвободныйОстаток) 
							И (СтруктураНастроек.СпособВыводаОстатков = Перечисления.СпособВыводаОстатковВПодборе.ВТаблице)
							И СтруктураНастроек.ТребуетсяПоказОстатков;
							
	ЗапросСЦенами 				= СтруктураНастроек.ПоказыватьЦены И (СтруктураНастроек.СпособВыводаОстатков = Перечисления.СпособВыводаОстатковВПодборе.ВТаблице);
	ЗапросСТипамиНоменклатуры 	= (ТипНоменклатуры.Количество() > 0);
	ЗапросСоСтатусамиПартий 	= (СтатусПартии.Количество() > 0);
	
	// Формирования текста запроса
	СписокЗапасов.ПроизвольныйЗапрос = Истина;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НоменклатураСписок.Ссылка КАК Ссылка,
	|	НоменклатураСписок.Ссылка КАК Номенклатура,
	|	НоменклатураСписок.СтранаПроисхождения КАК СтранаПроисхождения,
	|	НоменклатураСписок.Код КАК Код,
	|	НоменклатураСписок.Артикул КАК Артикул,
	|	НоменклатураСписок.Наименование КАК Наименование,
	|	НоменклатураСписок.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА &ЭтоПриходныйДокумент
	|				И НоменклатураСписок.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ НоменклатураСписок.ИспользоватьХарактеристики
	|	КОНЕЦ КАК ИспользоватьХарактеристики,
	|	НоменклатураСписок.ИспользоватьПартии КАК ИспользоватьПартии,
	|	НоменклатураСписок.Недействителен КАК Недействителен,
	|	&УсловиеВыводаПоляОстаток КАК Остаток,
	|	&УсловиеВыводаПоляРезерв КАК Резерв,
	|	&УсловиеВыводаПоляСвободныйОстаток КАК СвободныйОстаток,
	|	&УсловиеВыводаПоляЦенаПоКлассификатору КАК ЦенаПоКлассификатору,
	|	&УсловиеВыводаПоляЦена КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК НоменклатураСписок";
	
	Если ЗапросСОстатками Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ &ЗаголовокЗапросаПоРегистру(
		|				,
		|				Организация = &Организация
		|					И (НЕ Номенклатура.ЭтоГруппа)
		|					И &УсловиеОтбораПоСкладу
		|					И &УсловиеОтбораПоЯчейке
		|					И &УсловиеОтбораПоТипамНоменклатуры
		|					И &УсловиеОтбораПоСтатусуПартии) КАК ЗапасыОстатки
		|		ПО НоменклатураСписок.Ссылка = ЗапасыОстатки.Номенклатура";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&ЗаголовокЗапросаПоРегистру", 
				?(ЗапросПоСкладу, "РегистрНакопления.ЗапасыНаСкладах.Остатки", "РегистрНакопления.Запасы.Остатки"));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&УсловиеОтбораПоСкладу",
				?(НЕ (Склад = НЕОПРЕДЕЛЕНО ИЛИ Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка()), "СтруктурнаяЕдиница = &СтруктурнаяЕдиница", "ИСТИНА"));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&УсловиеОтбораПоЯчейке",
				?(УчетПоЯчейкам, "Ячейка = &ЯчейкаХранения", "ИСТИНА"));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&УсловиеОтбораПоТипамНоменклатуры",
				?(ЗапросСТипамиНоменклатуры, "Номенклатура.ТипНоменклатуры В (&ТипНоменклатуры)", "ИСТИНА"));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&УсловиеОтбораПоСтатусуПартии",
				?(ЗапросСоСтатусамиПартий, "(Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяССылка) ИЛИ Партия.Статус В (&СтатусПартии))", "ИСТИНА"));
					
	КонецЕсли;
	
	Если ЗапросСЦенами Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ &НазваниеРегистраСТипомЦен.СрезПоследних(&ПериодЦен, &ПолеВидаЦенДляСравнения = &ВидЦен
		|								И Номенклатура.ТипНоменклатуры <> Значение(Перечисление.ТипыНоменклатуры.Работа)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО НоменклатураСписок.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И (ЦеныНоменклатурыСрезПоследних.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяССылка))";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&НазваниеРегистраСТипомЦен", 
				?(ИспользуютсяЦеныКонтрагентов, "РегистрСведений.ЦеныНоменклатурыКонтрагентов", "РегистрСведений.ЦеныНоменклатуры"));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&ПолеВидаЦенДляСравнения", 	
				?(ИспользуютсяЦеныКонтрагентов, "ВидЦенКонтрагента", "ВидЦен"));
				
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	(НЕ НоменклатураСписок.ЭтоГруппа)
	|	И &УсловиеОтбораПоТипамНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураСписок.Ссылка,
	|	НоменклатураСписок.Код,
	|	НоменклатураСписок.Артикул,
	|	НоменклатураСписок.Наименование,
	|	НоменклатураСписок.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА &ЭтоПриходныйДокумент
	|				И НоменклатураСписок.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ НоменклатураСписок.ИспользоватьХарактеристики
	|	КОНЕЦ,
	|	НоменклатураСписок.ИспользоватьПартии,
	|	&УсловиеВыводаПоляЦенаПоКлассификатору,
	|	&УсловиеВыводаПоляЦена";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"&УсловиеОтбораПоТипамНоменклатуры",
			?(ЗапросСТипамиНоменклатуры, "НоменклатураСписок.ТипНоменклатуры В (&ТипНоменклатуры)", "ИСТИНА"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляОстаток", ?(ЗапросСОстатками, "СУММА(ЗапасыОстатки.КоличествоОстаток) ", "0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляРезерв", ?(ЗапросСОстатками И НЕ ЗапросПоСкладу, "	
	|	СУММА(ВЫБОР
	|			КОГДА ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяССылка)
	|				ТОГДА 0
	|			ИНАЧЕ ЗапасыОстатки.КоличествоОстаток
	|		КОНЕЦ) ", "0"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляСвободныйОстаток", ?(ЗапросСОстатками И НЕ ЗапросПоСкладу, "
	|		СУММА(ЗапасыОстатки.КоличествоОстаток - ВЫБОР
	|			КОГДА ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяССылка)
	|				ТОГДА 0
	|			ИНАЧЕ ЗапасыОстатки.КоличествоОстаток
	|		КОНЕЦ) ", "0"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляЦенаПоКлассификатору", ?(ЗапросСЦенами, "ЦеныНоменклатурыСрезПоследних.Цена ", "0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляЦена", ?(ЗапросСЦенами, "
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1)
	|	КОНЕЦ ", "0"));
	
	// Обновим текст запроса
	Если НЕ СписокЗапасов.ТекстЗапроса = ТекстЗапроса Тогда
		
		СписокЗапасов.ТекстЗапроса = ТекстЗапроса;
		
	КонецЕсли;
	
	// Параметры запроса
	УстановитьПараметрДинамическогоСписка(СписокЗапасов, "ПериодЦен", 		Период);
	УстановитьПараметрДинамическогоСписка(СписокЗапасов, "ТипНоменклатуры", СписокЗначенийВМассив(ТипНоменклатуры));
	УстановитьПараметрДинамическогоСписка(СписокЗапасов, "Организация", 	Организация);
	УстановитьПараметрДинамическогоСписка(СписокЗапасов, "СтруктурнаяЕдиница", Склад);
	УстановитьПараметрДинамическогоСписка(СписокЗапасов, "ЯчейкаХранения",	Ячейка);
	УстановитьПараметрДинамическогоСписка(СписокЗапасов, "СтатусПартии", 	СтатусПартии);
	УстановитьПараметрДинамическогоСписка(СписокЗапасов, "ВидЦен", 			?(ИспользуютсяЦеныКонтрагентов, ВидЦенКонтрагента, ВидЦен));
	УстановитьПараметрДинамическогоСписка(СписокЗапасов, "ЭтоПриходныйДокумент", ЭтоПриходныйДокумент);
	
КонецПроцедуры // УстановитьТекстЗапросаСпискаЗапасов()

&НаСервере
// Процедура устанавливает текст запроса для динамического списка "СписокХарактеристик"
//
// Параметры:
// СтруктураНастроек - Структура, содержит значение пользовательских настроек
//
Процедура УстановитьТекстЗапросаСпискаХарактеристик(СтруктураНастроек)
	
	// Условия формирования запроса
	ЗапросСОстатками = (СтруктураНастроек.ПоказыватьОстатки ИЛИ СтруктураНастроек.ПоказыватьРезерв ИЛИ СтруктураНастроек.ПоказыватьСвободныйОстаток)
							И НЕ ЭтоПриходныйДокумент
							И СтруктураНастроек.ТребуетсяПоказОстатков;
	
	ЗапросСЦенами 				= СтруктураНастроек.ПоказыватьЦены;
	ЗапросСТипамиНоменклатуры 	= (ТипНоменклатуры.Количество() > 0);
	ЗапросСоСтатусамиПартий 	= (СтатусПартии.Количество() > 0);
	
	// Формирования текста запроса
	СписокХарактеристик.ПроизвольныйЗапрос = Истина;
	
	Если ЗапросСОстатками Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗапасыОстатки.Номенклатура.Ссылка КАК Номенклатура,
		|	ЗапасыОстатки.Номенклатура.Ссылка.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ЗапасыОстатки.Номенклатура.Недействителен КАК Недействителен,
		|	ЗапасыОстатки.Характеристика.Наименование КАК Характеристика,
		|	ЗапасыОстатки.Характеристика.Ссылка КАК Ссылка,
		|	ЗапасыОстатки.Характеристика.Ссылка КАК ХарактеристикаСсылка,
		|	ЗапасыОстатки.Партия.Наименование КАК Партия,
		|	ЗапасыОстатки.Партия.Ссылка КАК ПартияСсылка,
		|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК Остаток,
		|	СУММА(&УсловиеВычисленияРезерва) КАК Резерв,
		|	СУММА(&УсловиеВычисленияСвободногоОстатка) КАК СвободныйОстаток,
		|	&УсловиеВыводаПоляЦенаПоКлассификатору КАК ЦенаПоКлассификатору,
		|	&УсловиеВыводаПоляЦена КАК Цена
		|ИЗ
		|	&ЗаголовокЗапросаПоРегистру(
		|			,
		|			Организация = &Организация
		|				И (Номенклатура.ИспользоватьХарактеристики
		|					ИЛИ Номенклатура.ИспользоватьПартии)
		|				И &УсловиеОтбораПоСкладу
		|				И &УсловиеОтбораПоЯчейке
		|				И &УсловиеОтбораПоТипамНоменклатуры
		|				И &УсловиеОтбораПоСтатусуПартии) КАК ЗапасыОстатки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&УсловиеВычисленияРезерва", 
				?(ЗапросПоСкладу, "0", "ВЫБОР
				|			КОГДА ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяССылка)
				|				ТОГДА 0
				|			ИНАЧЕ ЗапасыОстатки.КоличествоОстаток
				|		КОНЕЦ"));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&УсловиеВычисленияСвободногоОстатка", 
				?(ЗапросПоСкладу, "0", " ЗапасыОстатки.КоличествоОстаток - ВЫБОР
				|			КОГДА ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяССылка)
				|				ТОГДА 0
				|			ИНАЧЕ ЗапасыОстатки.КоличествоОстаток
				|		КОНЕЦ"));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&ЗаголовокЗапросаПоРегистру", 
				?(ЗапросПоСкладу, "РегистрНакопления.ЗапасыНаСкладах.Остатки", "РегистрНакопления.Запасы.Остатки"));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&УсловиеОтбораПоСкладу",
				?(НЕ (Склад = НЕОПРЕДЕЛЕНО ИЛИ Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка()), "СтруктурнаяЕдиница = &СтруктурнаяЕдиница", "ИСТИНА"));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&УсловиеОтбораПоЯчейке",
				?(УчетПоЯчейкам, "Ячейка = &ЯчейкаХранения", "ИСТИНА"));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&УсловиеОтбораПоТипамНоменклатуры",
				?(ЗапросСТипамиНоменклатуры, "Номенклатура.ТипНоменклатуры В (&ТипНоменклатуры)", "ИСТИНА"));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&УсловиеОтбораПоСтатусуПартии",
				?(ЗапросСоСтатусамиПартий, "(Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) ИЛИ Партия.Статус В (&СтатусПартии))", "ИСТИНА"));
		
		Если ЗапросСЦенами Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ &НазваниеРегистраСТипомЦен.СрезПоследних(
			|				&ПериодЦен,
			|				(Номенклатура.ИспользоватьХарактеристики
			|					ИЛИ Номенклатура.ИспользоватьПартии)
			|						И &УсловиеПоТипамНоменклатуры
			|					И &ПолеВидаЦенДляСравнения = &ВидЦен
			|					И Номенклатура.ТипНоменклатуры <> Значение(Перечисление.ТипыНоменклатуры.Работа)) КАК ЦеныНоменклатурыСрезПоследних
			|		ПО ЗапасыОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|			И (ЕСТЬNULL(ЗапасыОстатки.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
					"&НазваниеРегистраСТипомЦен", 	
					?(ИспользуютсяЦеныКонтрагентов, "РегистрСведений.ЦеныНоменклатурыКонтрагентов", "РегистрСведений.ЦеныНоменклатуры"));
					
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
					"&УсловиеПоТипамНоменклатуры", 
					?(ЗапросСТипамиНоменклатуры, 	"Номенклатура.ТипНоменклатуры В (&ТипНоменклатуры)", "ИСТИНА"));
					
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
					"&ПолеВидаЦенДляСравнения", 	
					?(ИспользуютсяЦеныКонтрагентов, "ВидЦенКонтрагента", "ВидЦен"));
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|СГРУППИРОВАТЬ ПО
		|	ЗапасыОстатки.Характеристика,
		|	ЗапасыОстатки.Партия,
		|	ЗапасыОстатки.Номенклатура.Ссылка,
		|	&УсловиеВыводаПоляЦенаПоКлассификатору,
		|	&УсловиеВыводаПоляЦена";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДеталиДанных.Номенклатура КАК Номенклатура,
		|	ДеталиДанных.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ДеталиДанных.Номенклатура.Недействителен КАК Недействителен,
		|	ЕстьNUll(ДеталиДанных.ХарактеристикаСсылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаСсылка,
		|	ЕстьNUll(ДеталиДанных.Характеристика, """") КАК Характеристика,
		|	ЕстьNUll(ДеталиДанных.ПартияСсылка, ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПУстаяСсылка)) КАК ПартияСсылка,
		|	ЕстьNUll(ДеталиДанных.Партия, """") КАК Партия,
		|	&УсловиеВыводаПоляЦенаПоКлассификатору КАК ЦенаПоКлассификатору,
		|	&УсловиеВыводаПоляЦена КАК Цена
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕстьNULL(ХарактеристикиНоменклатуры.Владелец, ПартииНоменклатуры.Владелец) КАК Номенклатура,
		|		ХарактеристикиНоменклатуры.Наименование КАК Характеристика,
		|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяССылка)) КАК ХарактеристикаСсылка,
		|		ПартииНоменклатуры.Наименование КАК Партия,
		|		ПартииНоменклатуры.Ссылка КАК ПартияСсылка
		|	ИЗ
		|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ПартииНоменклатуры КАК ПартииНоменклатуры
		|			ПО ХарактеристикиНоменклатуры.Владелец = ПартииНоменклатуры.Владелец
		|				И (&УсловиеОтбораПоТипамНоменклатурыХарактеристики)
		|				И (&УсловиеОтбораПоТипамНоменклатурыПартии)
		|	ГДЕ &УсловиеОтбораПоСтатусамПартий) КАК ДеталиДанных";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&УсловиеОтбораПоТипамНоменклатурыХарактеристики",
				?(ЗапросСТипамиНоменклатуры, "ХарактеристикиНоменклатуры.Владелец.ТипНоменклатуры В(&ТипНоменклатуры)", "ИСТИНА"));
				
		Если ЗапросСТипамиНоменклатуры 
			И ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
				
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоТипамНоменклатурыПартии", "ПартииНоменклатуры.Владелец.ТипНоменклатуры В(&ТипНоменклатуры)");
				
		Иначе
				
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоТипамНоменклатурыПартии", "ИСТИНА");
				
		КонецЕсли;
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"&УсловиеОтбораПоСтатусамПартий",
				?(ЗапросСоСтатусамиПартий, "(ПартииНоменклатуры.Ссылка = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) ИЛИ ПартииНоменклатуры.Статус В (&СтатусПартии))", "ИСТИНА"));
				
		Если ЗапросСЦенами Тогда
		
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ &НазваниеРегистраСТипомЦен.СрезПоследних(
			|				&ПериодЦен,
			|				(Номенклатура.ИспользоватьХарактеристики
			|					ИЛИ Номенклатура.ИспользоватьПартии)
			|					И &УсловиеПоТипамНоменклатуры
			|					И &ПолеВидаЦенДляСравнения = &ВидЦен
			|					И Номенклатура.ТипНоменклатуры <> Значение(Перечисление.ТипыНоменклатуры.Работа)) КАК ЦеныНоменклатурыСрезПоследних
			|		ПО ДеталиДанных.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|			И ДеталиДанных.ХарактеристикаСсылка = ЦеныНоменклатурыСрезПоследних.Характеристика";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НазваниеРегистраСТипомЦен", 	?(ИспользуютсяЦеныКонтрагентов, "РегистрСведений.ЦеныНоменклатурыКонтрагентов", "РегистрСведений.ЦеныНоменклатуры"));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоТипамНоменклатуры", ?(ЗапросСТипамиНоменклатуры, 	"Номенклатура.ТипНоменклатуры В (&ТипНоменклатуры)", "Истина"));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеВидаЦенДляСравнения", 	?(ИспользуютсяЦеныКонтрагентов, "ВидЦенКонтрагента", "ВидЦен"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляЦенаПоКлассификатору", ?(ЗапросСЦенами, "ЦеныНоменклатурыСрезПоследних.Цена", "0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляЦена", 				?(ЗапросСЦенами, "ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
		|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1)
		|	КОНЕЦ", "0"));
	
	СписокХарактеристик.ОсновнаяТаблица = "";
	
	// Обновим текст запроса
	Если НЕ СписокХарактеристик.ТекстЗапроса = ТекстЗапроса Тогда
		
		СписокХарактеристик.ТекстЗапроса = ТекстЗапроса;
		
	КонецЕсли;
	
	// Параметры запроса
	УстановитьПараметрДинамическогоСписка(СписокХарактеристик,	"ПериодЦен",		Период);
	УстановитьПараметрДинамическогоСписка(СписокХарактеристик,	"Организация", 		Организация);
	УстановитьПараметрДинамическогоСписка(СписокХарактеристик,	"СтруктурнаяЕдиница", Склад);
	УстановитьПараметрДинамическогоСписка(СписокХарактеристик, 	"ЯчейкаХранения",	Ячейка);
	УстановитьПараметрДинамическогоСписка(СписокХарактеристик,	"ВидЦен", 			?(ИспользуютсяЦеныКонтрагентов, ВидЦенКонтрагента, ВидЦен));
	УстановитьПараметрДинамическогоСписка(СписокХарактеристик,	"ТипНоменклатуры", 	СписокЗначенийВМассив(ТипНоменклатуры));
	УстановитьПараметрДинамическогоСписка(СписокХарактеристик,	"СтатусПартии", 	СтатусПартии);
	
	// Обход ошибки платформа в WEB-клиенте c отбором в динамическом списке.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокХарактеристик, "Номенклатура", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
КонецПроцедуры // УстановитьТекстЗапросаСпискаХарактеристик()

&НаСервере
// Процедура заполняет реквизит формы "ТипНоменклатуры" 
// значениями доступных типов номенклатуры в зависимости от параметров открытия формы
//
// Параметры:
// ПараметрыОткрытияФормы - входящие параметры открытия формы. Тип может 
// быть либо Структура либо ДанныеФормыСтруктура
//
Процедура СформироватьИспользуемыеТипыНоменклатуры(ПараметрыОткрытияФормы)
	
	Если ПараметрыОткрытияФормы.Свойство("ТипНоменклатуры") 
		И ЗначениеЗаполнено(ПараметрыОткрытияФормы.ТипНоменклатуры)  Тогда
			
		МассивТипНоменклатуры = Новый Массив();
		Для каждого ЭлементТипНоменклатуры Из ПараметрыОткрытияФормы.ТипНоменклатуры Цикл
			
			Если ПараметрыОткрытияФормы.Свойство("ИсключитьТипНоменклатурыРабота") 
				И ЭлементТипНоменклатуры.Значение = Перечисления.ТипыНоменклатуры.Работа Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТипНоменклатуры.Добавить(ЭлементТипНоменклатуры.Значение, ЭлементТипНоменклатуры.Представление);
			МассивТипНоменклатуры.Добавить(ЭлементТипНоменклатуры.Значение);
			
		КонецЦикла; 
		
		МассивОграниченияТипНоменклатуры 	= Новый ФиксированныйМассив(МассивТипНоменклатуры);
		НовыйПараметр 						= Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивОграниченияТипНоменклатуры);
		НовыйПараметр2 						= Новый ПараметрВыбора("Дополнительно.ОграничениеТипа", МассивОграниченияТипНоменклатуры);
		
		НовыйМассив 						= Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйМассив.Добавить(НовыйПараметр2);
		
		НовыеПараметры 						= Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ОтобранныеЗапасыНоменклатура.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
КонецПроцедуры //СформироватьИспользуемыеТипыНоменклатуры()

&НаСервере
// Процедура заполняет реквизит формы "СтатусПартии" 
// значениями доступных статусов партий в зависимости от параметров открытия формы
//
// Параметры:
// ПараметрыОткрытияФормы - входящие параметры открытия формы. Тип может 
// быть либо Структура либо ДанныеФормыСтруктура
//
Процедура СформироватьИспользуемыеСтатусыПартий(ПараметрыОткрытияФормы)
	
	Если ПараметрыОткрытияФормы.Свойство("СтатусПартии")
		И ЗначениеЗаполнено(ПараметрыОткрытияФормы.СтатусПартии) Тогда
		
		МассивСтатусПартии = Новый Массив();
		Для каждого ЭлементСтатусПартии Из ПараметрыОткрытияФормы.СтатусПартии Цикл
			
			СтатусПартии.Добавить(ЭлементСтатусПартии.Значение, ЭлементСтатусПартии.Представление);
			МассивСтатусПартии.Добавить(ЭлементСтатусПартии.Значение);
			
		КонецЦикла;
		
		СтатусПартии.Добавить(Перечисления.СтатусыПартий.ПустаяСсылка());
		
		МассивОграниченияСтатусПартии = Новый ФиксированныйМассив(МассивСтатусПартии);
		НовыйПараметр	= Новый ПараметрВыбора("Отбор.Статус", МассивОграниченияСтатусПартии);
		НовыйПараметр2	= Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", МассивОграниченияСтатусПартии);
		
		НовыйМассив		= Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйМассив.Добавить(НовыйПараметр2);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ОтобранныеЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьИспользуемыеСтатусыПартий()

&НаКлиенте
// Процедура - обработчик ожидания табличного поля "СписокЗапасы"
// вызывается при активизации новой строки
//
// Для оптимизации операции "пролистывания" включена задержка ожидания равная 0.2 секунды
//
Процедура ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания()
	
	Если СокрЛП(СтруктураНастроек.СпособВыводаОстатков) = "Отдельно" 
		И 
		(СтруктураНастроек.ПоказыватьОстатки 
		ИЛИ СтруктураНастроек.ПоказыватьРезерв 
		ИЛИ СтруктураНастроек.ПоказыватьСвободныйОстаток 
		ИЛИ СтруктураНастроек.ПоказыватьЦены)
		И
		КешТекущаяСтрокаСпискаЗапасов <> Элементы.СписокЗапасов.ТекущаяСтрока Тогда
		
		ТекущаяСтрока	= Элементы.СписокЗапасов.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда 
			
			Возврат;
			
		КонецЕсли;
		
		СтруктураДанных = ПолучитьСтруктуруОстатковИЦенуПоТовару(Период, ТекущаяСтрока.Номенклатура, Неопределено, Неопределено, ВидЦен, Истина);
		
		ТекстОстаток			= ?(СтруктураДанных.Свойство("Остаток"), 			СтруктураДанных.Остаток, 			0);
		ТекстРезерв				= ?(СтруктураДанных.Свойство("Резерв"), 			СтруктураДанных.Резерв,				0);
		ТекстСвободныйОстаток	= ?(СтруктураДанных.Свойство("СвободныйОстаток"),	СтруктураДанных.СвободныйОстаток,	0);
		ТекстЦена 				= ?(СтруктураДанных.Свойство("Цена"), 				СтруктураДанных.Цена,				0);
		
		КешТекущаяСтрокаСпискаЗапасов = Элементы.СписокЗапасов.ТекущаяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры // ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания()

&НаКлиенте
// Процедура - обработчик ожидания табличного поля "СписокХарактеристик"
// вызывается при активизации новой строки
//
// Для оптимизации операции "пролистывания" включена задержка ожидания равная 0.2 секунды
//
Процедура ПодборСписокХарактеристикПриАктивизацииСтрокиОбработчикОжидания()
	
	Если СокрЛП(СтруктураНастроек.СпособВыводаОстатков) = "Отдельно" Тогда
		
		ТекущаяСтрока	= Элементы.СписокХарактеристик.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда 
			
			Возврат;
			
		КонецЕсли;
		
		ТекстОстаток			= ?(ТекущаяСтрока.Свойство("Остаток"), 			ТекущаяСтрока.Остаток, 			0);
		ТекстРезерв				= ?(ТекущаяСтрока.Свойство("Резерв"), 			ТекущаяСтрока.Резерв,			0);
		ТекстСвободныйОстаток	= ?(ТекущаяСтрока.Свойство("СвободныйОстаток"), ТекущаяСтрока.СвободныйОстаток,	0);
		ТекстЦена 				= ?(ТекущаяСтрока.Свойство("Цена"), 			ТекущаяСтрока.Цена,				0);
		
	КонецЕсли;
	
КонецПроцедуры // ПодборСписокХарактеристикПриАктивизацииСтрокиОбработчикОжидания()

&НаСервере
// Процедура получает структуру, которая содержит необходимые данные 
// по текущей строке динамеческого списка
//
// Назначение - используется когда цены и остатки выводяться отдельно от табличного поля
//
// Параметры:
// НаДату - период, на который будут получены остатки и цены
// Организация - организация, для которой будут получены цены и остатки
// СтруктурнаяЕдиница - структурная единица, для которой будут получены цены и остатки
// Номенклатура - номенклатура, для которой будут получены цены и остатки
// Характеристика - характеристика номенклатуры, для которой будут получены цены и остатки
// Партия - партия номенклатуры, для которой будут получены цены и остатки
// ВидЦен - вид цен, из которых будит извлечена цена
//
Функция ПолучитьСтруктуруОстатковИЦенуПоТовару(НаДату, Номенклатура, Характеристика, Партия, ВидЦен, СводноПоХарактеристикам)
	
	СтруктураДанных = Новый Структура("Остаток, Резерв, СвободныйОстаток, Цена, ЦенаПоКлассификатору");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураСписок.Ссылка КАК Номенклатура,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК Остаток,
	|	СУММА(&УсловиеВыводаПоляРезерв) КАК Резерв,
	|	СУММА(&УсловиеВыводаПоляСвободныйОстаток) КАК СвободныйОстаток,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаПоКлассификатору,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1)
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК НоменклатураСписок
	|		ЛЕВОЕ СОЕДИНЕНИЕ &ЗаголовокЗапросаПоРегистру(
	|				,
	|				Номенклатура = &Номенклатура
	|				И Организация = &Организация
	|				И &УсловиеОтбораПоСкладу
	|				И &УсловиеОтбораПоЯчейке
	|				И &УсловиеОтбораПоХарактеристикам
	|				И &УсловиеОтбораПоСтатусамПартий
	|				И &УсловиеОтбораПоСтатусуОднойПартии) КАК ЗапасыОстатки
	|		ПО (ЗапасыОстатки.Номенклатура = НоменклатураСписок.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ &НазваниеРегистраСТипомЦен.СрезПоследних(
	|				&ПериодЦен,
	|				Номенклатура = &Номенклатура
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И &ПолеВидаЦенДляСравнения = &ВидЦен
	|					И Номенклатура.ТипНоменклатуры <> Значение(Перечисление.ТипыНоменклатуры.Работа)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = НоменклатураСписок.Ссылка)
	|ГДЕ
	|	НоменклатураСписок.Ссылка = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураСписок.Ссылка,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1)
	|	КОНЕЦ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&ЗаголовокЗапросаПоРегистру", 
			?(ЗапросПоСкладу, "РегистрНакопления.ЗапасыНаСкладах.Остатки", "РегистрНакопления.Запасы.Остатки"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&УсловиеОтбораПоСкладу",
			?(НЕ (Склад = НЕОПРЕДЕЛЕНО ИЛИ Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка()), "СтруктурнаяЕдиница = &СтруктурнаяЕдиница", "ИСТИНА"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&УсловиеОтбораПоЯчейке",
			?(УчетПоЯчейкам, "Ячейка = &ЯчейкаХранения", "ИСТИНА"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&УсловиеОтбораПоСтатусамПартий", 
			?(СтатусПартии.Количество() > 0, "(Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяССылка) ИЛИ Партия.Статус В (&СтатусПартии))", "ИСТИНА"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&УсловиеОтбораПоСтатусуОднойПартии", 
			?(НЕ Партия = Неопределено, "Партия = &Партия", "ИСТИНА"));
			
	Если СводноПоХарактеристикам Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораПоХарактеристикам", "Истина");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
				"&УсловиеОтбораПоХарактеристикам",
				?(Характеристика = Неопределено, "Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)", "Характеристика = &Характеристика"));
		
	КонецЕсли;
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&НазваниеРегистраСТипомЦен", 	
			?(ИспользуютсяЦеныКонтрагентов, "РегистрСведений.ЦеныНоменклатурыКонтрагентов", "РегистрСведений.ЦеныНоменклатуры"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&ПолеВидаЦенДляСравнения", 	
			?(ИспользуютсяЦеныКонтрагентов, "ВидЦенКонтрагента", "ВидЦен"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&УсловиеВыводаПоляРезерв", 
			?(ЗапросПоСкладу, "0", "	
			|	ВЫБОР
			|		КОГДА ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяССылка)
			|			ТОГДА 0
			|		ИНАЧЕ ЗапасыОстатки.КоличествоОстаток
			|	КОНЕЦ "));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&УсловиеВыводаПоляСвободныйОстаток", 
			?(ЗапросПоСкладу, "0", "
			|	ЗапасыОстатки.КоличествоОстаток - ВЫБОР
			|		КОГДА ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяССылка)
			|			ТОГДА 0
			|		ИНАЧЕ ЗапасыОстатки.КоличествоОстаток
			|	КОНЕЦ "));
	
	Запрос.УстановитьПараметр("ПериодЦен",		НаДату);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);
	Запрос.УстановитьПараметр("ЯчейкаХранения", Ячейка);
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Партия", 		Партия);
	Запрос.УстановитьПараметр("СтатусПартии", 	СтатусПартии);
	Запрос.УстановитьПараметр("ВидЦен", 		?(ИспользуютсяЦеныКонтрагентов, ВидЦенКонтрагента, ВидЦен));
	
	Выборка	= Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьСтруктуруОстатковИЦенуПоТовару()

&НаСервере
// Процедура обновляет данные формы "Подбор" на сервере
//
// Условием выполнения служит изменение пользовательских параметров отображения формы либо 
// изменение организации, структурной единицы
//
Процедура ОбновитьДанныеФормыНаСервере(ВыбраннаяГруппаНоменклатуры = Неопределено)
	
	СтруктураНастроек 			= ПолучитьНастройкиПодбора();
	
	// Иерархия номенклатуры
	Если НЕ ЗначениеЗаполнено(ВыбраннаяГруппаНоменклатуры) Тогда
		
		ГруппаНоменклатуры = ?(СтруктураНастроек.ЗапоминатьТекущуюИерархию,
			УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ГруппаОтбора"),
			Справочники.Номенклатура.ПустаяСсылка());
			
	Иначе
		
		ГруппаНоменклатуры = ВыбраннаяГруппаНоменклатуры;
		
	КонецЕсли;
	
	Элементы.ЗапасыИерархия.ТекущаяСтрока	= ГруппаНоменклатуры;
	
	// Тексты запросов
	УстановитьТекстЗапросаСпискаЗапасов(СтруктураНастроек);
	
	УстановитьТекстЗапросаСпискаХарактеристик(СтруктураНастроек);
	
	// Видимость
	УстановитьВидимостьПолейДинамическогоСписка(СтруктураНастроек);
	
	// Отбор по группе
	Элементы.СписокЗапасовКонтекстноеМенюОтборПоГруппе.Пометка = ЗначениеЗаполнено(ГруппаНоменклатуры);
	ОбновитьОтборПоГруппеДинамическихСписков(Элементы.СписокЗапасовКонтекстноеМенюОтборПоГруппе.Пометка, ГруппаНоменклатуры);
	
	Если ТолькоЧтоОткрыт Тогда
		
		Элементы.СписокЗапасовЗапрашиватьКоличествоИЦены.Пометка	= СтруктураНастроек.ЗапрашиватьКоличествоИЦену;
		Элементы.СписокОстатковЗапрашиватьКоличествоИЦену.Пометка	= СтруктураНастроек.ЗапрашиватьКоличествоИЦену;
		ЗапрашиватьКоличество 										= СтруктураНастроек.ЗапрашиватьКоличествоИЦену;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДанныеФормыНаСервере()

&НаСервере
//Процедура обновляет динамические списки Запасы и Характеристики
//
Процедура ОбновитьОтборПоГруппеДинамическихСписков(ПрименитьОтборПоГруппе, ГруппаНоменклатурыДляОтбора)
	
	Если ПрименитьОтборПоГруппе Тогда
		
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(СписокЗапасов, 			"Номенклатура.Родитель", ГруппаНоменклатурыДляОтбора, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(СписокХарактеристик,	"Номенклатура.Родитель", ГруппаНоменклатурыДляОтбора, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
		
	Иначе
		
		УправлениеНебольшойФирмойКлиентСервер.УдалитьЭлементОтбораСписка(СписокЗапасов,		"Номенклатура.Родитель");
		УправлениеНебольшойФирмойКлиентСервер.УдалитьЭлементОтбораСписка(СписокХарактеристик,	"Номенклатура.Родитель");
		
	КонецЕсли;
	
КонецПроцедуры //ОбновитьОтборПоГруппеДинамическихСписков()

&НаКлиенте
Процедура ОбновитьОтборПоГруппеДинамическихСписковОтложенно()
	
	ДанныеТекущейСтроки = Элементы.ЗапасыИерархия.ТекущиеДанные;
	Если НЕ ДанныеТекущейСтроки = Неопределено
		И ЗначениеЗаполнено(ДанныеТекущейСтроки.НоменклатураСсылка) Тогда
		
		Элементы.СписокЗапасовКонтекстноеМенюОтборПоГруппе.Пометка = Истина;
		ГруппаНоменклатуры = ДанныеТекущейСтроки.НоменклатураСсылка;
		ОбновитьОтборПоГруппеДинамическихСписков(Истина, ГруппаНоменклатуры);
		
	Иначе
		
		Элементы.СписокЗапасовКонтекстноеМенюОтборПоГруппе.Пометка = Ложь;
		ГруппаНоменклатуры = Неопределено;
		ОбновитьОтборПоГруппеДинамическихСписков(Ложь, ГруппаНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
// Процедура - обработчик команды Создать.
//
Процедура Создать(Команда)
	
	ЗначениеЗаполнения = Новый Структура;	
	ЗначениеЗаполнения.Вставить("ЭтоГруппа", Ложь);
	ЗначениеЗаполнения.Вставить("Родитель", ГруппаНоменклатуры);
	
	Если ТипНоменклатуры.Количество() > 0 Тогда
		
		ЗначениеЗаполнения.Вставить("ТипНоменклатуры", ТипНоменклатуры[0].Значение);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначениеЗаполнения), ЭтаФорма);
	
КонецПроцедуры //Создать()

&НаКлиенте
// Процедура - обработчик команды Изменить.
//
Процедура Изменить(Команда)
	
	Если Элементы.СписокЗапасов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОткрытия = Новый Структура("Ключ", Элементы.СписокЗапасов.ТекущиеДанные.Номенклатура);
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", СтруктураОткрытия, ЭтаФорма);
	
КонецПроцедуры //Изменить()

&НаКлиенте
// Процедура - обработчик команды Копировать.
//
Процедура Копировать(Команда)
	
	Если Элементы.СписокЗапасов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеКопирования = Новый Структура("ЗначениеКопирования", Элементы.СписокЗапасов.ТекущиеДанные.Номенклатура);
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ЗначениеКопирования, ЭтаФорма);
	
КонецПроцедуры //Копировать()

&НаКлиенте
//Процедура - обработчик нажатия кнопки ОК.
//
Процедура ОК(Команда)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОбщаяФормаФормаПодбора");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	АдресЗапасовВХранилище = ЗаписатьПодборВХранилище();
	
	Если НЕ ЗначениеЗаполнено(РезультатЗапросаВНовыйДокумент) Тогда
		
		Оповестить("ПодборПроизведен", 
			АдресЗапасовВХранилище, 
				?(УникальныйИдентификаторФормыВладельца = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"), Неопределено, УникальныйИдентификаторФормыВладельца));
		
		Закрыть();
		
	Иначе
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Организация", 			Организация);
		СтруктураЗаполнения.Вставить("СтруктурнаяЕдиница", 		Склад);
		СтруктураЗаполнения.Вставить("СуммаВключаетНДС",		ИспользуетсяНДС);
		СтруктураЗаполнения.Вставить("ЕстьХарактеристики", 		ИспользуютсяХарактеристики);
		СтруктураЗаполнения.Вставить("ЕстьПартии",				ИспользуютсяПартии);
		СтруктураЗаполнения.Вставить("АдресЗапасовВХранилище", 	АдресЗапасовВХранилище);
		
		Если ВидОперацииЗаказНаряд Тогда
			СтруктураЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд"));
			СтруктураЗаполнения.Вставить("ИмяТабличнойЧасти", "Работы");
		Иначе
			СтруктураЗаполнения.Вставить("ИмяТабличнойЧасти", "Запасы");
		КонецЕсли;
		
		ОткрытьФорму("Документ."+ РезультатЗапросаВНовыйДокумент +".ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения));
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // ОК()

&НаКлиенте
//Процедура - обработчик нажатия кнопки Обновить.
//
Процедура Обновить(Команда)
	
	ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
//Процедура - обработчик команды "ВернутьсяКНоменклатуре"
//
Процедура ПодборВернутьсяКНоменклатуре(Команда)
	
	Элементы.ГруппаСтраниц.ТекущаяСтраница	= Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаСписокЗапасов;
	
	Элементы.КоманднаяПанельЗапасыИХарактеристики.ТекущаяСтраница = 
		Элементы.СтраницаКоманднаяПанельЗапасы;
	
	ПодключитьОбработчикОжидания("ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания",0.2,Истина);
	
КонецПроцедуры //ПодборВернутьсяКНоменклатуре()

&НаКлиенте
// Процедура - обработчик команды "ПерейтиКХарактеристикам"
//
Процедура ПодборПерейтиКХарактеристикам(Команда)
	
	Элементы.КоманднаяПанельЗапасыИХарактеристики.ТекущаяСтраница = 
			Элементы.СтраницаКоманднаяПанельХарактеристики;
			
	ПерейтиКХарактеристикам(Элементы.СписокЗапасов.ТекущиеДанные, Истина);
	
КонецПроцедуры // ПодборПерейтиКХарактеристикам()

&НаКлиенте
// Процедура - обработчик команды "НастройкаПодбора"
//
//
Процедура НастройкаПодбора(Команда)
	
	Оповещение = Новый ОписаниеОповещения("НастройкаПодбораЗавершение",ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкаПодбора", , ЭтаФорма,,,,Оповещение);
	
КонецПроцедуры // НастройкаПодбора()

&НаКлиенте
Процедура НастройкаПодбораЗавершение(НовыеНастройки,Параметры) Экспорт
	
	Если НЕ ТипЗнч(НовыеНастройки) = Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьФорму = Ложь;
	Для каждого ЗаписьНастройки Из СтруктураНастроек Цикл
		
		Если НовыеНастройки.Свойство(ЗаписьНастройки.Ключ)
			И НЕ ЗаписьНастройки.Значение = НовыеНастройки[ЗаписьНастройки.Ключ] Тогда
			
			ОбновитьФорму = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбновитьФорму Тогда
		
		ОбновитьДанныеФормыНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура - обработчик нажатия кнопки ОтборПоГруппе.
//
&НаКлиенте
Процедура ОтборПоГруппе(Команда)
	
	Элементы.СписокЗапасовКонтекстноеМенюОтборПоГруппе.Пометка = НЕ Элементы.СписокЗапасовКонтекстноеМенюОтборПоГруппе.Пометка;
	
	ОбновитьОтборПоГруппеДинамическихСписков(Элементы.СписокЗапасовКонтекстноеМенюОтборПоГруппе.Пометка, ГруппаНоменклатуры);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И РЕКВИЗИТОВ ФОРМЫ

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Если подбор вызван из меню функций,
	// параметры необходим заполнить самостоятельно значениями по умолчанию
	// и продолжить выполнение открытие формы
	Если Параметры.Свойство("СоздатьНовыйДокумент")
		И Параметры.СоздатьНовыйДокумент Тогда
		
		Элементы.Организация.Доступность	= Истина;
		СтруктураПараметровПоУмолчанию		= Новый Структура;
		
		ЗаполнитьПараметрыОткрытияФормыЗначениямиПоУмолчанию(СтруктураПараметровПоУмолчанию, Параметры);
		
		ПараметрыОткрытияФормы				= СтруктураПараметровПоУмолчанию;
		РезультатЗапросаВНовыйДокумент		= Параметры.ВидНовогоДокумента;
		Элементы.Склад.Доступность			= Истина; 
		
	Иначе
		
		Элементы.Организация.Доступность	= Ложь;
		ПараметрыОткрытияФормы				= Параметры;
		Элементы.Склад.Доступность			= Ложь; 
		
		Если ПараметрыОткрытияФормы.Свойство("ДоступноРедактированиеСтруктурнойЕдиницы") Тогда
			
			Элементы.Склад.Доступность			= ПараметрыОткрытияФормы.ДоступноРедактированиеСтруктурнойЕдиницы; 
			
		КонецЕсли;
		
		УникальныйИдентификаторФормыВладельца = ПараметрыОткрытияФормы.УникальныйИдентификаторФормыВладельца;
		
	КонецЕсли;
	
	Если ПараметрыОткрытияФормы.Свойство("Период") Тогда
		
		Период = ПараметрыОткрытияФормы.Период;
		
	Иначе
		
		Период = ТекущаяДата();
		
	КонецЕсли;
	
	ТолькоЧтоОткрыт = Истина;
	
	Если ПараметрыОткрытияФормы.Свойство("Организация") Тогда
		Организация = ПараметрыОткрытияФормы.Организация;
	Иначе
		Организация = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(ПараметрыОткрытияФормы.ОрганизацияДокумента);
	КонецЕсли;
	
	ИспользуютсяНормы = ПараметрыОткрытияФормы.Свойство("ИспользуютсяНормы");
	Элементы.ОтобранныеЗапасыЕдиницаИзмерения.Видимость = НЕ ИспользуютсяНормы;
	
	Если ПараметрыОткрытияФормы.Свойство("АдресЗапасовДокумента")
		И ЗначениеЗаполнено(ПараметрыОткрытияФормы.АдресЗапасовДокумента) Тогда
		
		ЗагрузитьЗапасыИзХранилища(ПараметрыОткрытияФормы.АдресЗапасовДокумента, ОтобранныеЗапасы);
		
	КонецЕсли;
	
	Если ПараметрыОткрытияФормы.Свойство("СтруктурнаяЕдиница") Тогда
		
		Склад = ПараметрыОткрытияФормы.СтруктурнаяЕдиница;
		
	КонецЕсли;
	
	//Если резервирование включено, заполним параметра резервирования
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
		
		ПараметрыОткрытияФормы.Свойство("ЗаполнятьРезерв", ЗаполнятьРезерв); //Только для заказов-покупателей.
		
	КонецЕсли;
	
	ЗапросПоСкладу = ПараметрыОткрытияФормы.Свойство("ЗапросПоСкладу");
	
	УчетПоЯчейкам	= (ЗапросПоСкладу И Константы.ФункциональнаяОпцияУчетПоЯчейкам.Получить() И ПараметрыОткрытияФормы.Свойство("Ячейка"));
	
	Если УчетПоЯчейкам Тогда
		
		Ячейка = ПараметрыОткрытияФормы.Ячейка;
		
	КонецЕсли;
	
	// ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	// ПАРАМЕТРЫ ЗАПРОСОВ ДИНАМИЧЕСКИХ СПИСКОВ
	
	//Типы номенклатуры
	СформироватьИспользуемыеТипыНоменклатуры(ПараметрыОткрытияФормы);
	
	//Статусы партий
	СформироватьИспользуемыеСтатусыПартий(ПараметрыОткрытияФормы);
	
	//Цены
	УчетЦенВРазличныхЕдиницахИзмерения = Константы.ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения.Получить();
	
	ИспользуютсяЦены = Ложь;
	Если ПараметрыОткрытияФормы.Свойство("ВидЦен") Тогда
		
		ИспользуютсяЦены 		= Истина;
		ВидЦен 					= ПараметрыОткрытияФормы.ВидЦен;
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦенаВключаетНДС					= ВидЦен.ЦенаВключаетНДС;
			ВидЦенПорядокОкругления			= ВидЦен.ПорядокОкругления;
			ВидЦенОкруглятьВБольшуюСторону	= ВидЦен.ОкруглятьВБольшуюСторону;
			Валюта 							= ПараметрыОткрытияФормы.Валюта;
			ВалютаВидаЦен					= ВидЦен.ВалютаЦены;
			
			Если Валюта <> ВалютаВидаЦен Тогда
				
				СтруктураКурсовВалют = УправлениеНебольшойФирмойСервер.ПолучитьКурсыВалют(ВалютаВидаЦен, Валюта, Период);
				
				КурсВалютаВидаЦен = СтруктураКурсовВалют.КурсНач;
				КратностьВалютаВидаЦен = СтруктураКурсовВалют.КратностьНач;
				
				КурсВалютаДокумента = СтруктураКурсовВалют.Курс;
				КратностьВалютаДокумента = СтруктураКурсовВалют.Кратность;
				
			КонецЕсли;
			
		Иначе
			
			ЦенаВключаетНДС					= Истина;
			ВидЦенПорядокОкругления			= Перечисления.ПорядкиОкругления.Окр0_01;
			ВидЦенОкруглятьВБольшуюСторону	= Ложь;
			Валюта 							= Константы.НациональнаяВалюта.Получить();
			
		КонецЕсли;
		
		
		СуммаВключаетНДС 		= ПараметрыОткрытияФормы.СуммаВключаетНДС;
		ОрганизацияДокумента	= ПараметрыОткрытияФормы.ОрганизацияДокумента;
		
		ТекстПредставлениеЦены	= ?(ЗначениеЗаполнено(ВидЦен), "(" + ВидЦен.Наименование + ")", "(Вид цен не указан)");
		
		Элементы.СписокЗапасовЦена.Заголовок = "Цена" + Символы.ПС + ТекстПредставлениеЦены;
		Элементы.СписокЗапасовЦенаПоКлассификатору.Заголовок = "Цена" + Символы.ПС + ТекстПредставлениеЦены;
		
		Элементы.СписокХарактеристикЦена.Заголовок = "Цена" + Символы.ПС + ТекстПредставлениеЦены;
		Элементы.СписокХарактеристикЦенаПоКлассификатору.Заголовок = "Цена" + Символы.ПС + ТекстПредставлениеЦены;
		
	ИначеЕсли ПараметрыОткрытияФормы.Свойство("ВидЦенПоВидуРабот") Тогда
		
		ВидЦен				= ПараметрыОткрытияФормы.ВидЦенПоВидуРабот;
		Валюта				= ПараметрыОткрытияФормы.Валюта;
		СуммаВключаетНДС	= ПараметрыОткрытияФормы.СуммаВключаетНДС;
		
	КонецЕсли;
	
	ИспользуютсяЦеныКонтрагентов = Ложь;
	Если ПараметрыОткрытияФормы.Свойство("ВидЦенКонтрагента") Тогда
		
		ИспользуютсяЦеныКонтрагентов = Истина;
		ВидЦенКонтрагента 			= ПараметрыОткрытияФормы.ВидЦенКонтрагента;
		
		Если ЗначениеЗаполнено(ВидЦенКонтрагента) Тогда
			
			ЦенаВключаетНДС		= ВидЦенКонтрагента.ЦенаВключаетНДС;
			
			ВалютаВидаЦен		= ВидЦенКонтрагента.ВалютаЦены;
			Если Валюта <> ВалютаВидаЦен Тогда
				
				СтруктураКурсовВалют = УправлениеНебольшойФирмойСервер.ПолучитьКурсыВалют(ВалютаВидаЦен, Валюта, Период);
				
				КурсВалютаВидаЦен = СтруктураКурсовВалют.КурсНач;
				КратностьВалютаВидаЦен = СтруктураКурсовВалют.КратностьНач;
				
				КурсВалютаДокумента = СтруктураКурсовВалют.Курс;
				КратностьВалютаДокумента = СтруктураКурсовВалют.Кратность;
				
			КонецЕсли;
			
		Иначе
			
			ЦенаВключаетНДС		= Истина;
			
		КонецЕсли;
		
		ВидЦенПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01;
		ВидЦенОкруглятьВБольшуюСторону = Ложь;
		Валюта 					= ПараметрыОткрытияФормы.Валюта;
		СуммаВключаетНДС 		= ПараметрыОткрытияФормы.СуммаВключаетНДС;
		ОрганизацияДокумента	= ПараметрыОткрытияФормы.ОрганизацияДокумента;
		
	КонецЕсли;
	
	//Если валюту заполнили поправим заголовок информационной строки
	Если ЗначениеЗаполнено(Валюта) Тогда
		
		СтрокаНовогоЗаголовка 						= Нстр("ru = 'Товаров подобрано на сумму (%ВВалюте%)'");
		Элементы.ИнформационнаяНадпись.Заголовок	= СтрЗаменить(СтрокаНовогоЗаголовка, "%ВВалюте%", Валюта.Наименование);
		
	КонецЕсли;
	
	//Установить отображения списка характеристик и партий
	ЭтоПриходныйДокумент = Ложь;
	Если ПараметрыОткрытияФормы.Свойство("ЭтоПриходныйДокумент") Тогда
		
		ЭтоПриходныйДокумент = ПараметрыОткрытияФормы.ЭтоПриходныйДокумент;
		
		Если ЭтоПриходныйДокумент Тогда
			НоваяСвязьОчищать = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.ОтобранныеЗапасы.ТекущиеДанные.Номенклатура");
			НоваяСвязьНеИзменять = Новый СвязьПараметраВыбора("ЭтоПриходныйДокумент", "ЭтоПриходныйДокумент", РежимИзмененияСвязанногоЗначения.НеИзменять);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НоваяСвязьОчищать);
			НовыйМассив.Добавить(НоваяСвязьНеИзменять);
			НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.ОтобранныеЗапасыХарактеристика.СвязиПараметровВыбора = НовыеСвязи;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Настройки динамеческих списков
	ОбновитьДанныеФормыНаСервере();
	
	// Скидка
	ИспользуютсяСкидкиНаценки = Ложь;
	Если ПараметрыОткрытияФормы.Свойство("ВидСкидкиНаценки")
		И ЗначениеЗаполнено(ПараметрыОткрытияФормы.ВидСкидкиНаценки) Тогда
		
		ИспользуютсяСкидкиНаценки	= Истина;
		ВидСкидкиНаценки 			= ПараметрыОткрытияФормы.ВидСкидкиНаценки;
		
	КонецЕсли;
	
	// Дисконтная карта
	ИспользуютсяДисконтныеКарты = Ложь;
	Если ПараметрыОткрытияФормы.Свойство("ДисконтнаяКарта")
		И ЗначениеЗаполнено(ПараметрыОткрытияФормы.ДисконтнаяКарта) Тогда
		
		ИспользуютсяДисконтныеКарты		= Истина;
		ПроцентСкидкиПоДисконтнойКарте 	= ПараметрыОткрытияФормы.ПроцентСкидкиПоДисконтнойКарте;
		
	КонецЕсли;
	
	// Налогообложение НДС и Сумма вкл. НДС
	НалогообложениеНДС 		= ?(ПараметрыОткрытияФормы.Свойство("НалогообложениеНДС"), ПараметрыОткрытияФормы.НалогообложениеНДС, Неопределено);
	Если ПараметрыОткрытияФормы.Свойство("СуммаВключаетНДС") Тогда
		
		ИспользуетсяНДС			= ПараметрыОткрытияФормы.СуммаВключаетНДС;
		ОрганизацияДокумента	= ПараметрыОткрытияФормы.ОрганизацияДокумента;
		
	КонецЕсли;
	
	Если ПараметрыОткрытияФормы.Свойство("РасчетнаяСтавкаНДС") Тогда
		РасчетнаяСтавкаНДС = ПараметрыОткрытияФормы.РасчетнаяСтавкаНДС;
	КонецЕсли;
	
	ИспользуетсяВидРабот = ПараметрыОткрытияФормы.Свойство("ВидРабот");
	Если ИспользуетсяВидРабот Тогда
		
		ВидРабот = ПараметрыОткрытияФормы.ВидРабот;
		
	КонецЕсли;

	ИспользуютсяСпецификации	= ПараметрыОткрытияФормы.Свойство("ИспользуютсяСпецификации");
	
	Если ПараметрыОткрытияФормы.Свойство("ДоступноИзменениеЦены", ДоступноИзменениеЦены) Тогда
		
		Элементы.ОтобранныеЗапасыЦена.ТолькоПросмотр = НЕ ДоступноИзменениеЦены;
		Элементы.ОтобранныеЗапасыПроцентСкидкиНаценки.ТолькоПросмотр = НЕ ДоступноИзменениеЦены;
		Элементы.ОтобранныеЗапасыСуммаНДС.ТолькоПросмотр = НЕ ДоступноИзменениеЦены;
		Элементы.ОтобранныеЗапасыСумма.ТолькоПросмотр = НЕ ДоступноИзменениеЦены;
		
	КонецЕсли;
	
	ИспользуютсяХарактеристики 	= Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() 
			И ?(ПараметрыОткрытияФормы.Свойство("ИспользуютсяХарактеристики"), ПараметрыОткрытияФормы.ИспользуютсяХарактеристики, Истина);
			
	ИспользуютсяПартии 			= Константы.ФункциональнаяОпцияИспользоватьПартии.Получить() 
			И ?(ПараметрыОткрытияФормы.Свойство("ИспользуютсяПартии"), ПараметрыОткрытияФормы.ИспользуютсяПартии, Истина);
		
	УправлениеВидимостьюЭлементовФормы(ПараметрыОткрытияФормы);
	УстановитьВидимостьПолейДинамическогоСписка(СтруктураНастроек);
	
	// Дополнительная проверка отображения колонки цена
	Если ПараметрыОткрытияФормы.Свойство("ОтображатьКолонкуЦена") Тогда
		
		Элементы.ОтобранныеЗапасыЦена.Видимость = ПараметрыОткрытияФормы.ОтображатьКолонкуЦена;
		
	КонецЕсли;
	
	// Установка способа выбора структурной единицы в зависимости от ФО.
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
		И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
		
		Элементы.Склад.РежимВыбораИзСписка = Истина;
		Элементы.Склад.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		Элементы.Склад.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии(Отказ)
	
	ТолькоЧтоОткрыт = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик оповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьПодбор" Тогда
		
		ОбновитьДанныеФормыНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ОбработкаВыбора ТЧ ЗапасыИерархия.
//
Процедура ЗапасыИерархияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ГруппаНоменклатуры = ВыбранноеЗначение;
	ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Выбор списка товаров.
//
Процедура СписокТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаСпискаТоваров = Элемент.ТекущиеДанные;
	
	Если (ИспользуютсяХарактеристики ИЛИ ИспользуютсяПартии) 
		И (СтрокаСпискаТоваров.ИспользоватьХарактеристики ИЛИ СтрокаСпискаТоваров.ИспользоватьПартии)Тогда
		
		ПерейтиКХарактеристикам(СтрокаСпискаТоваров);
		
	Иначе
		
		Если НЕ СтруктураНастроек.ПоказыватьЦены Тогда
			
			ЦенаДляКарзины = 0;
			
		ИначеЕсли СокрЛП(СтруктураНастроек.СпособВыводаОстатков) = "Отдельно" Тогда
			
			Если КешТекущаяСтрокаСпискаЗапасов <> Элементы.СписокЗапасов.ТекущаяСтрока Тогда
				
				ОтключитьОбработчикОжидания("ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания");
				ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания();
				
			КонецЕсли;
			
			ЦенаДляКарзины = ТекстЦена;
			
		Иначе
			
			Если УчетЦенВРазличныхЕдиницахИзмерения = Истина Тогда
				
				Если СтрокаСпискаТоваров.Свойство("ЦенаПоКлассификатору") Тогда
					
					ЦенаДляКарзины = СтрокаСпискаТоваров.ЦенаПоКлассификатору;
					
				КонецЕсли;
				
			Иначе
				
				Если СтрокаСпискаТоваров.Свойство("Цена") Тогда
					
					ЦенаДляКарзины = СтрокаСпискаТоваров.Цена;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИзменитьТоварВКорзине(СтрокаСпискаТоваров, , , 1, ЦенаДляКарзины);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита "Склада"
// 
Процедура СкладПриИзменении(Элемент)
	
	ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
//Процедура - обработчик события ПриИзменения реквизита "Организация"
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ОбновитьДанныеФормыНаСервере();
		
	Иначе
		
		Сообщение 				= Новый СообщениеПользователю;
		Сообщение.Текст 		= НСтр("ru = 'Для обновление данных формы заполните организацию'");
		Сообщение.ПутьКДанным	= "Организация";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля Номенклатура табличной части ОтобранныеЗапасы
//
Процедура ОтобранныеЗапасыНоменклатураПриИзменении(Элемент)
	
	СтруктураДанных		= СформироватьСтруктуруДанныхТекущегоСеансаПодбора();
	ДанныеНоменклатуры	= ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанных);
	
	ТекущаяСтрокаОтобранныхЗапасов = Элементы.ОтобранныеЗапасы.ТекущиеДанные;
	
	ТекущаяСтрокаОтобранныхЗапасов.ЕдиницаИзмерения = ДанныеНоменклатуры.ЕдиницаИзмерения;
	ТекущаяСтрокаОтобранныхЗапасов.Цена 			= ДанныеНоменклатуры.Цена;
	ТекущаяСтрокаОтобранныхЗапасов.СтавкаНДС 		= ДанныеНоменклатуры.СтавкаНДС;
	
	Если ТекущаяСтрокаОтобранныхЗапасов.Количество = 0 Тогда
		
		ТекущаяСтрокаОтобранныхЗапасов.Количество = 1;
		
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ОтобранныеЗапасыНоменклатураПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля Характеристика табличной части ОтобранныеЗапасы
//
Процедура ОтобранныеЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтруктураДанных		= СформироватьСтруктуруДанныхТекущегоСеансаПодбора();
	ДанныеНоменклатуры	= ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанных);
	
	ТекущаяСтрокаОтобранныхЗапасов = Элементы.ОтобранныеЗапасы.ТекущиеДанные;
	
	ТекущаяСтрокаОтобранныхЗапасов.ЕдиницаИзмерения = ДанныеНоменклатуры.ЕдиницаИзмерения;
	ТекущаяСтрокаОтобранныхЗапасов.Цена 			= ДанныеНоменклатуры.Цена;
	ТекущаяСтрокаОтобранныхЗапасов.СтавкаНДС 		= ДанныеНоменклатуры.СтавкаНДС;
	
	Если ТекущаяСтрокаОтобранныхЗапасов.Количество = 0 Тогда
		
		ТекущаяСтрокаОтобранныхЗапасов.Количество = 1;
		
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ОтобранныеЗапасыХарактеристикаПриИзменении()

&НаКлиенте
// Процедура - обработчик события НачалоПеретаскивания ТЧ СписокЗапасов.
//
Процедура СписокЗапасовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаСпискаТоваров = Элемент.ТекущиеДанные;
	
	Если НЕ СтруктураНастроек.ПоказыватьЦены Тогда
		
		ЦенаДляКарзины = 0;
		
	ИначеЕсли СокрЛП(СтруктураНастроек.СпособВыводаОстатков) = "Отдельно" Тогда
		
		Если КешТекущаяСтрокаСпискаЗапасов <> Элементы.СписокЗапасов.ТекущаяСтрока Тогда
			
			ОтключитьОбработчикОжидания("ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания");
			ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания();
			
		КонецЕсли;
		
		ЦенаДляКарзины = ТекстЦена;
		
	Иначе
		
		Если УчетЦенВРазличныхЕдиницахИзмерения = Истина Тогда
			
			Если СтрокаСпискаТоваров.Свойство("ЦенаПоКлассификатору") Тогда
				
				ЦенаДляКарзины = СтрокаСпискаТоваров.ЦенаПоКлассификатору;
				
			КонецЕсли;
			
		Иначе
			
			Если СтрокаСпискаТоваров.Свойство("Цена") Тогда
				
				ЦенаДляКарзины = СтрокаСпискаТоваров.Цена;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьТоварВКорзине(СтрокаСпискаТоваров, , , 1, ЦенаДляКарзины);
	
КонецПроцедуры // СписокЗапасовНачалоПеретаскивания()

&НаКлиенте
// Процедура - обработчик события ПроверкаПеретаскивания ТЧ ОтобранныеЗапасы.
//
Процедура ОтобранныеЗапасыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ОтобранныеЗапасыПроверкаПеретаскивания()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки"
// табличного поля "Запасы"
Процедура СписокЗапасовПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока	= Элементы.СписокЗапасов.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда 
		
		Элементы.СписокЗапасовПерейтиКХарактеристикам.Доступность = Ложь;
		
	Иначе
		
		Элементы.СписокЗапасовПерейтиКХарактеристикам.Доступность = (ИспользуютсяХарактеристики ИЛИ ИспользуютсяПартии) И (ТекущаяСтрока.ИспользоватьПартии ИЛИ ТекущаяСтрока.ИспользоватьХарактеристики);
		
	КонецЕсли;
	
	Если КешТекущаяСтрокаСпискаЗапасов <> Элементы.СписокЗапасов.ТекущаяСтрока Тогда
	
		ПодключитьОбработчикОжидания("ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания",0.2,Истина);
		//КешТекущаяСтрокаСпискаЗапасов = Элементы.СписокЗапасов.ТекущаяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры //СписокЗапасовПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки"
// табличного поля "Характеристики"
Процедура СписокХарактеристикПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока	= Элементы.СписокХарактеристик.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено 
		Или Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаСписокЗапасов Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПодборСписокХарактеристикПриАктивизацииСтрокиОбработчикОжидания",0.2,Истина);

КонецПроцедуры //СписокХарактеристикПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "Выбор"
// табличного поля "Характеристики"
Процедура СписокХарактеристикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаСпискаТоваров = Элементы.СписокЗапасов.ТекущиеДанные;
	
	Если НЕ СтрокаСпискаТоваров = Неопределено Тогда
		
		Если НЕ СтруктураНастроек.ПоказыватьЦены Тогда
			
			ЦенаДляКарзины = 0;
			
		ИначеЕсли СокрЛП(СтруктураНастроек.СпособВыводаОстатков) = "Отдельно" Тогда
			
			Если КешТекущаяСтрокаСпискаЗапасов <> Элементы.СписокЗапасов.ТекущаяСтрока Тогда
				
				ОтключитьОбработчикОжидания("ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания");
				ПодборСписокЗапасовПриАктивизацииСтрокиОбработчикОжидания();
				
			КонецЕсли;
			
			ЦенаДляКарзины = ТекстЦена;
			
		Иначе
			
			ЦенаДляКарзины = ?(УчетЦенВРазличныхЕдиницахИзмерения, Элемент.ТекущиеДанные.ЦенаПоКлассификатору, Элемент.ТекущиеДанные.Цена);
			
		КонецЕсли;
		
		ИзменитьТоварВКорзине(СтрокаСпискаТоваров, Элемент.ТекущиеДанные, , 1, ЦенаДляКарзины);
		
	КонецЕсли;
	
КонецПроцедуры // СписокХарактеристикВыбор()

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ОтобранныеЗапасыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОтобранныеЗапасы.ТекущиеДанные;
	
	Если ТекущаяСтрока.Свойство("Резерв")
		И ТекущаяСтрока.Резерв <> 0 
		И ТекущаяСтрока.Количество < ТекущаяСтрока.Резерв Тогда
		
		ТекущаяСтрока.Резерв = ТекущаяСтрока.Количество;
		
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ОтобранныеЗапасыКоличествоПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура ОтобранныеЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ОтобранныеЗапасыЦенаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ОтобранныеЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОтобранныеЗапасы.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры  // ТоварыСтавкаНДСПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриСменеТекущегоРодителя ТЧ ЗапасыИерархия.
//
Процедура ЗапасыИерархияПриСменеТекущегоРодителя(Элемент)
	
	Если ГруппаНоменклатуры = Элемент.ТекущийРодитель Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ГруппаНоменклатуры = Элемент.ТекущийРодитель;
	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаСписокЗапасов;
	
	Если ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		
		Элементы.СписокЗапасовКонтекстноеМенюОтборПоГруппе.Пометка = Истина;
		ОбновитьОтборПоГруппеДинамическихСписков(Истина, ГруппаНоменклатуры);
		
	Иначе
		
		Элементы.СписокЗапасовКонтекстноеМенюОтборПоГруппе.Пометка = Ложь;
		ОбновитьОтборПоГруппеДинамическихСписков(Ложь, ГруппаНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыИерархияПриСменеТекущегоРодителя()

&НаКлиенте
Процедура ЗапасыИерархияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьОтборПоГруппеДинамическихСписковОтложенно", 0.2, Истина);
	
КонецПроцедуры

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
// Процедура-обработчик результата добавление товара в корзину
//
//
Процедура ПослеЗапросаКоличестваИЦеныДобавитьТоварВКорзину(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ЕдИзмерения	= ?(РезультатЗакрытия.Свойство("ЕдиницаИзмерения"), РезультатЗакрытия.ЕдиницаИзмерения, Неопределено);
		Количество	= ?(РезультатЗакрытия.Свойство("Количество"), РезультатЗакрытия.Количество, ДополнительныеПараметры.Количество);
		Цена 		= ?(РезультатЗакрытия.Свойство("Цена"), РезультатЗакрытия.Цена, ДополнительныеПараметры.Цена);
		
		//Применим правила округления из вида цен компании
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			Цена = ОкруглитьЦену(Цена, ВидЦенПорядокОкругления, ВидЦенОкруглятьВБольшуюСторону);
			
		КонецЕсли;
		
		ИзменитьДобавитьСтрокуВКорзину(ДополнительныеПараметры.СтрокаСпискаТоваров, ДополнительныеПараметры.СтрокаХарактеристикПартий, ДополнительныеПараметры.СтрокаКорзины, Количество, Цена, ДополнительныеПараметры.СвободныйОстаток, ЕдИзмерения);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьЗаполненияДокументаПоОснованию()

#КонецОбласти

