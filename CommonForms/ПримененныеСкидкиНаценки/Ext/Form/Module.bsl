
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Характеристика.Видимость = Параметры.ОтображатьИнформациюОСкидкахПоСтроке;
	Элементы.Номенклатура.Видимость   = Параметры.ОтображатьИнформациюОСкидкахПоСтроке;
	
	Элементы.СуммаРучнойСкидки.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	
	Валюта = "RUB";
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Если Параметры.ОтображатьИнформациюОСкидкахПоСтроке Тогда
		
		Номенклатура   = Параметры.ТекущиеДанные.Номенклатура;
		Характеристика = Параметры.ТекущиеДанные.Характеристика;
		
		// Общая сумма скидки включает в себя сумму автоматической и ручной скидки.
		СуммаАвтоСкидки   = 0;
		СуммаРучнойСкидки = Параметры.ТекущиеДанные.СуммаРучнойСкидки;
		
		Отбор = Новый Структура("КлючСвязи", Параметры.ТекущиеДанные.КлючСвязи);
		Для Каждого СтрокаТЗСкидкиНаценки Из Параметры.Объект.СкидкиНаценки.НайтиСтроки(Отбор) Цикл
			
			НоваяСтрока = АвтоматическиеСкидки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗСкидкиНаценки);
			Если Параметры.ТекущиеДанные.СуммаБезСкидки <> 0 Тогда
				НоваяСтрока.Процент = 100 * СтрокаТЗСкидкиНаценки.Сумма / Параметры.ТекущиеДанные.СуммаБезСкидки;
			КонецЕсли;
			
			СуммаАвтоСкидки = СуммаАвтоСкидки + НоваяСтрока.Сумма;
			
		КонецЦикла;
		
		СуммаСкидки       = СуммаАвтоСкидки + СуммаРучнойСкидки;
		
	Иначе
		
		СуммаАвтоСкидки   = Параметры.Объект.Товары.Итог("СуммаАвтоматическойСкидки");
		СуммаРучнойСкидки = Параметры.Объект.Товары.Итог("СуммаРучнойСкидки");
		СуммаСкидки       = СуммаАвтоСкидки + СуммаРучнойСкидки;
		
	КонецЕсли;
	
	Параметры.Свойство("МинимальнаяЦена", МинимальнаяЦена);
	
	// Информация может быть отображена только после непосредственного расчета скидок в документе.
	// После закрытия формы эта информация не сохраняется.
	Если ЗначениеЗаполнено(Параметры.АдресПримененныхСкидокВоВременномХранилище) Тогда
		
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(Параметры.АдресПримененныхСкидокВоВременномХранилище);
		
		Если Параметры.ОтображатьИсключение Тогда
			ОтобразитьНадписьИсключения();
		КонецЕсли;
	
		Если Параметры.ОтображатьИнформациюОРасчетеСкидокПоСтроке Тогда 
			СформироватьИнформациюОРасчетеСкидокПоСтроке(ПримененныеСкидки, Параметры.ТекущиеДанные.КлючСвязи, АвтоматическиеСкидки.Выгрузить());
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ТекстВариантаСовместногоПрименения.Заголовок = Строка(Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоДоУсловийРекурсивно(СтрокаДерева, ЭлементФормы)
	
	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для каждого Элемент Из КоллекцияЭлементов Цикл
	
		Если Элемент.Разворачивать Тогда
			ЭлементФормы.Развернуть(Элемент.ПолучитьИдентификатор());
			РазвернутьДеревоДоУсловийРекурсивно(Элемент, ЭлементФормы);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДеревоДоУсловийРекурсивно(ИнформацияОРасчетеСкидокПоСтроке, Элементы.ИнформацияОРасчетеСкидокПоСтроке);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИнформациюОРасчетеСкидокПоСтроке(ВходящееДеревоСкидок, ДеревоСкидок, КлючСвязи, ТаблицаАвтоматическиеСкидки)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			РассчитатьИнформациюОРасчетеСкидокПоСтроке(ВходящееДеревоСкидок, СтрокаДерева, КлючСвязи, ТаблицаАвтоматическиеСкидки);
			
			СтрокаДерева.ИндексКартинки = СкидкиНаценкиСервер.ПолучитьИндексКартинкиДляГруппы(СтрокаДерева);
			СтрокаДерева.Значение = СтрокаДерева.СкидкаНаценка;
			СтрокаДерева.Разворачивать = Истина;
			
			Для каждого Стр Из СтрокаДерева.Строки Цикл
				Если Стр.Действует Тогда
					СтрокаДерева.Действует        = Истина;
					СтрокаДерева.УсловияВыполнены = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаДерева.СуммаАвтоматическойСкидки = СтрокаДерева.Строки.Итог("СуммаАвтоматическойСкидки");
			
		Иначе
			
			СтрокаДерева.ИндексКартинки = СкидкиНаценкиСервер.ПолучитьИндексКартинкиДляСкидки(СтрокаДерева);
			СтрокаДерева.Значение = СтрокаДерева.СкидкаНаценка;
			
			ВсеУсловияВыполнены = Истина;
			Для каждого СтрокаУсловие Из СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий Цикл
				
				НоваяСтрокаУсловие = СтрокаДерева.Строки.Добавить();
				НоваяСтрокаУсловие.Значение       = СтрокаУсловие.УсловиеПредоставления;
				НоваяСтрокаУсловие.ЭтоУсловие     = Истина;
				
				Если СтрокаУсловие.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда
					НайденныеСтрокиТаблицыПроверкиУсловий = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Найти(КлючСвязи, "КлючСвязи");
					Если НайденныеСтрокиТаблицыПроверкиУсловий <> Неопределено Тогда
						НазваниеКолонки = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Получить(СтрокаУсловие.УсловиеПредоставления);
						Если НазваниеКолонки <> Неопределено Тогда
							НоваяСтрокаУсловие.Действует = НайденныеСтрокиТаблицыПроверкиУсловий[НазваниеКолонки];
						КонецЕсли;
					Иначе
						
					КонецЕсли;
				Иначе
					НоваяСтрокаУсловие.Действует = СтрокаУсловие.Выполнено;
				КонецЕсли;
				
				НоваяСтрокаУсловие.ИндексКартинки = -1;
				
				НоваяСтрокаУсловие.УсловияВыполнены = НоваяСтрокаУсловие.Действует;
				Если НЕ НоваяСтрокаУсловие.Действует Тогда
					ВсеУсловияВыполнены = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВсеУсловияВыполнены Тогда
				СтрокаДерева.Действует = Истина;
				СтрокаДерева.УсловияВыполнены = Истина;
				
				Если ВходящееДеревоСкидок.ТаблицаСкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи, СкидкаНаценка", КлючСвязи, СтрокаДерева.СкидкаНаценка)).Количество() = 0 Тогда
					СтрокаДерева.НеПримениласьПоУсловиямСовместногоПрименения = Истина;
				КонецЕсли;
				
				СтруктураПоиска = Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка);
				СтрокиПоиска = ТаблицаАвтоматическиеСкидки.НайтиСтроки(СтруктураПоиска);
				СтрокаДерева.СуммаАвтоматическойСкидки = 0;
				Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
					СтрокаДерева.СуммаАвтоматическойСкидки = СтрокаДерева.СуммаАвтоматическойСкидки + СтрокаПоиска.Сумма;
					Если СтрокаПоиска.ОграниченаМинимальнойЦеной Тогда
						СтрокаДерева.ОграниченаМинимальнойЦеной = Истина;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				СтрокаДерева.УсловияВыполнены = Ложь;
			КонецЕсли;
			
			Для Каждого СтрокаУсловие Из СтрокаДерева.Строки Цикл
				СтрокаУсловие.НеПримениласьПоУсловиямСовместногоПрименения = СтрокаДерева.НеПримениласьПоУсловиямСовместногоПрименения;
				СтрокаУсловие.ДействуетСкидка = СтрокаДерева.Действует;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьИнформациюОРасчетеСкидокПоДокументу()

&НаСервере
Процедура СформироватьИнформациюОРасчетеСкидокПоСтроке(ВходящееДеревоСкидок, КлючСвязи, ТаблицаАвтоматическиеСкидки)
	
	ДеревоСкидок = ВходящееДеревоСкидок.ДеревоСкидок.Скопировать();
	
	ДеревоСкидок.Колонки.Добавить("ИндексКартинки",   Новый ОписаниеТипов("Число"));
	ДеревоСкидок.Колонки.Добавить("Действует",        Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("УсловияВыполнены", Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("НеПримениласьПоУсловиямСовместногоПрименения", Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("Разворачивать",  Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("ЭтоУсловие",     Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("Значение",       Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки, СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	ДеревоСкидок.Колонки.Добавить("СуммаАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
	ДеревоСкидок.Колонки.Добавить("ОграниченаМинимальнойЦеной", Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("ДействуетСкидка", Новый ОписаниеТипов("Булево"));
	
	РассчитатьИнформациюОРасчетеСкидокПоСтроке(ВходящееДеревоСкидок, ДеревоСкидок, КлючСвязи, ТаблицаАвтоматическиеСкидки);
	
	ЗначениеВРеквизитФормы(ДеревоСкидок, "ИнформацияОРасчетеСкидокПоСтроке");
	
КонецПроцедуры // СформироватьИнформациюОРасчетеСкидокПоДокументу()

&НаКлиенте
Процедура ИнформацияОРасчетеСкидокПоСтрокеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОРасчетеСкидокПоСтрокеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////
// Служебные

&НаСервере
Процедура ОтобразитьНадписьИсключения()
	
	
	
КонецПроцедуры
