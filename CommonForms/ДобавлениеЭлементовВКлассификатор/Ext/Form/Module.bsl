#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	УстановитьУсловноеОформление();

	// У отчета <ОтчетИсточникДанных> есть макет <ИмяМакетаСписков> (например: Списки2012Кв1)
	// в макете <ИмяМакетаСписков> в области <ОбластьИсточникДанных> 
	// содержатся коды и наименования элементов классификатора
	// реквизииты ОтчетИсточникДанных и ОбластьИсточникДанных получаем из параметров
	// ИмяМакетаСписков - берем по умочанию последний макет.
	
	ИмяСправочника = Параметры.ИмяСправочника;
	ПараметрыКлассификатора = ПолучитьРасположениеКлассификатораСтатистикиИСписокВерсий();
	
	ОбластьИсточникДанных 	= ПараметрыКлассификатора.ОбластьИсточникДанных; 
	ИсточникДанных 			= ПараметрыКлассификатора.ИсточникДанных; 
	ВидОбъекта				= ПараметрыКлассификатора.ВидОбъекта;
	СписокВерсий 			= ПолучитьВерсииСписковОтчета(ВидОбъекта + "." + ИсточникДанных);
	Заголовок 				= Метаданные.Справочники[ИмяСправочника].Синоним;
	Подбор 					= Параметры.Подбор;
	ВыборГрупп				= Параметры.ВыборГрупп;
	
	Элементы.Классификатор.МножественныйВыбор = Подбор;
	ЗакрыватьПриВыборе = Не Подбор;
	
	Если СписокВерсий.Количество() = 0 Тогда
		
		Отказ = Истина;
		ВызватьИсключение НСтр("ru = 'Невозможно выполнить подбор.
		|Классификатор не найден'");
		
	Иначе
		
		СписокВыбора = Элементы.ИмяМакетаСписков.СписокВыбора;
		
		Для Каждого Версия Из СписокВерсий Цикл
			
			СписокВыбора.Добавить(Версия.Значение, Версия.Представление);	
			
		КонецЦикла;	
		
		ИмяМакетаСписков = СписокВерсий[СписокВерсий.Количество() - 1].Значение;
		
	КонецЕсли;
	
	Элементы.ИмяМакетаСписков.Видимость = Не СписокВерсий.Количество() = 1;
	Элементы.Год.Видимость = Не СписокВерсий.Количество() = 1;
	Элементы.Назначение.Видимость = ЗначениеЗаполнено(Параметры.Назначение);
	
	ЗаполнитьКлассификатор();
	
	Если Параметры.ДанныеКлассификатора Тогда
		
		ПолеНазначение = Элементы.Назначение;
		ПолеНазначение.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеНазначение.ЦветТекста = ЦветаСтиля.ЗаблокированныйРеквизитЦвет;
		
	КонецЕсли;	
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяМакетаСписковПриИзменении(Элемент)
	
	ЗаполнитьКлассификатор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыКлассификатораФормы

//Вызывается при двойном щелчке мыши или нажатии Enter
//
&НаКлиенте
Процедура КлассификаторВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавленыНовыеЭлементыКлассификатора = Ложь;
	ВыбранныйЭлемент = КлассификаторВыборНаСервере(ВыбраннаяСтрока, ДобавленыНовыеЭлементыКлассификатора);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ОповеститьФормуИПользователяИЗакрыть(ВыбранныйЭлемент, ДобавленыНовыеЭлементыКлассификатора);
	КонецЕсли;
	
КонецПроцедуры

//Вызывается при нажатии на кнопку выбрать
//
&НаКлиенте
Процедура КлассификаторВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавленыНовыеЭлементыКлассификатора = Ложь;
	ВыбранныйЭлемент = КлассификаторВыборНаСервере(Значение, ДобавленыНовыеЭлементыКлассификатора);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ОповеститьФормуИПользователяИЗакрыть(ВыбранныйЭлемент, ДобавленыНовыеЭлементыКлассификатора);
	КонецЕсли;
	
КонецПроцедуры

//Функция обрабатывает данные выбора пользователя
//
//В случае если выбранные элементы классификатора отсутстуют в справочнике
// они будут добавлены, также будет добавлена единица измерения элемента классификатора
// в справочник "КлассификаторЕдиницИзмерения" если в данном классификаторе испльзуются 
// единицы измерения и если такой единицы нет в справочнике "КлассификаторЕдиницИзмерения"
//
//Если был осуществлен множественный выбор, то все выбранные элементы будут обработаны
// (добавлены в справочник в случае отсутствия), в возвращаемый параметр, будет передан
// массив ссылок на элементы
//
// Параметры:
// ВыбранныеСтроки - Массив, массив выбранных строк таблицы формы классификатор
// ДобавленыНовыеЭлементыКлассификатора - Булево, флаг устанавливается 
// 	если в справочник были добавлены элементы
//
// Возвращаемое значение:
// Неопределено или СправочникСсылка: 
// 		КлассификаторВидовЭкономическойДеятельности 
// 		или  КлассификаторПродукцииПоВидамДеятельности 
//		или КлассификаторУслугНаселению
//
&НаСервере
Функция КлассификаторВыборНаСервере(Знач ВыбранныеСтроки, ДобавленыНовыеЭлементыКлассификатора = Ложь)

	СсылкаНаЭлемент = Неопределено;
	
	МассивСсылок = Новый Массив();
	
	Если ТипЗнч(ВыбранныеСтроки) = тип("Массив") Тогда
		
		Для Каждого ИдентификаторСтроки из ВыбранныеСтроки Цикл
			
			Элемент = Классификатор.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если НЕ ЗначениеЗаполнено(Элемент.Ссылка) Тогда
				
				ДобавитьЭлементКлассификатора(Элемент);
				ДобавленыНовыеЭлементыКлассификатора = Истина;
				
			КонецЕсли;
			
			МассивСсылок.Добавить(Элемент.Ссылка);
			СсылкаНаЭлемент = Элемент.Ссылка;
			
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ВыбранныеСтроки) = тип("Число") Тогда	
		
		Элемент = Классификатор.НайтиПоИдентификатору(ВыбранныеСтроки);
		
		Если НЕ ЗначениеЗаполнено(Элемент.Ссылка) Тогда
			
			ДобавитьЭлементКлассификатора(Элемент);
			ДобавленыНовыеЭлементыКлассификатора = Истина;
			
		КонецЕсли;
		
		МассивСсылок.Добавить(Элемент.Ссылка);
		СсылкаНаЭлемент = Элемент.Ссылка;
		
	КонецЕсли;

	Если Подбор Тогда
		Возврат МассивСсылок;
	Иначе	
		Возврат СсылкаНаЭлемент;
	Конецесли;
	
 КонецФункции
 
#КонецОбласти
 
#КонецОбласти
 
#Область СлужебныеПроцедурыИФункции

//Выделяет синим цветом уже выбранные элементы классификатора
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Классификатор

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента 		= ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле 	= Новый ПолеКомпоновкиДанных("Классификатор");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Классификатор.ЕстьСсылка", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветФонаВыделенияПоля);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРанееДобавленныеЭлементы(ИмяСправочника)
	
	Запрос = Новый Запрос;
	
	ЗапросТекст = "ВЫБРАТЬ
	               |	%1.Код,
				   |	%1.Ссылка
	               |ИЗ
	               |	Справочник.%1 КАК %1";
				   
	МетаданныеСправочник = Метаданные.Справочники[ИмяСправочника];
	
	Запрос.Текст = СтрЗаменить(ЗапросТекст, "%1", ИмяСправочника);			   
	
	Возврат Запрос.Выполнить().Выгрузить();			   
				   
КонецФункции	

// Заполняет классификатор данными
//Параметры:
// - ИспользоватьТаблицуОтбора - Булево, если истина то классификатор можно заполнить
//	 используя таблицу отбора, а не весь классификатор 
//
&НаСервере
Процедура ЗаполнитьКлассификатор(ИспользоватьТаблицуОтбора = Ложь)
	
	Классификатор.Очистить();
	
	//Получаем полную таблицу элементов классификатора
	// в таблице содержатся Код и Наименование, элементов классификатора
	ЭлементыКлассификатораИзМакета = Справочники[ИмяСправочника].ТаблицаКлассификатора(ИмяМакетаСписков);
	
	//Получаем таблицу элементов классификатора уже имеющихся в справочнике
	РанееДобавленныеЭлементыКлассификатора 	= ПолучитьРанееДобавленныеЭлементы(ИмяСправочника);
	РанееДобавленныеЭлементыКлассификатора.Индексы.Добавить("Код");
	
	ЭлементыКлассификатора = ЭлементыКлассификатораИзМакета;
	
	Если ЭлементыКлассификатора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализируем структуру которую будем использовать для поиска существующих элементов
	СтруктураПоискаРанееСозданных = Новый Структура();
	
	Для Каждого Элемент Из ЭлементыКлассификатора Цикл
		
		НоваяСтрока = Классификатор.Добавить();
		НоваяСтрока.Код   = Элемент.Код;
		
		Наименование = Элемент.Наименование;
		НоваяСтрока.Наименование = Наименование;
		
		СтруктураПоискаРанееСозданных.Вставить("Код",        Элемент.Код);
		НайденныйЭлемент = РанееДобавленныеЭлементыКлассификатора.НайтиСтроки(СтруктураПоискаРанееСозданных);
		
		Если НайденныйЭлемент.Количество() > 0 Тогда
			
			НоваяСтрока.Ссылка = НайденныйЭлемент[0].Ссылка;
			НоваяСтрока.ЕстьСсылка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры	

// Добавляет новый элемент в классификатор
// Параметры:
// - ВыбраннаяСтрока - Строка таблицы, источник данных для заполнения реквизитов классификатораъ
// 		Если в строке присутсвуют данные о единице измерения, 
//		запускается поиск и добавление единицы измерения
//
&НаСервере
Процедура ДобавитьЭлементКлассификатора(ВыбраннаяСтрока)
	
	ЭлементКлассификатора = Справочники[ИмяСправочника].СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ЭлементКлассификатора, ВыбраннаяСтрока);
	ЭлементКлассификатора.НаименованиеПолное = ВыбраннаяСтрока.Наименование;
	
	МетаданныеСправочник = Метаданные.Справочники[ИмяСправочника];
	
	ЭлементКлассификатора.Записать();
	ВыбраннаяСтрока.Ссылка = ЭлементКлассификатора.Ссылка;
	
КонецПроцедуры	

// Вызывает оповещение об изменении справочника
// вызывает оповещение пользователя
// закрывает форму подбора из классификатора
//
&НаКлиенте
Процедура ОповеститьФормуИПользователяИЗакрыть(ВыбранныйЭлемент, ДобавленыНовыеЭлементыКлассификатора = Ложь)
	
	Если ДобавленыНовыеЭлементыКлассификатора Тогда
		
		ОповеститьОбИзменении(Тип("СправочникСсылка." + ИмяСправочника));	
		
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Сохранение'"),
		,
		ЭтаФорма.Заголовок,
		БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ОповеститьОВыборе(ВыбранныйЭлемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасположениеКлассификатораСтатистикиИСписокВерсий()
	
	ИмяКлассификатора = ИмяСправочника;
	
	СтруктураПараметров = Новый Структура("ВидОбъекта, ИсточникДанных, ОбластьИсточникДанных");
	
	Если ИмяКлассификатора = "КлассификаторВидовЭкономическойДеятельности" Тогда
		
		СтруктураПараметров.Вставить("ВидОбъекта", "Справочник");
		СтруктураПараметров.Вставить("ИсточникДанных", "КлассификаторВидовЭкономическойДеятельности");
		//++ НЕ УТ
		СтруктураПараметров.Вставить("ВидОбъекта", "Отчет");
		СтруктураПараметров.Вставить("ИсточникДанных", "РегламентированныйОтчетСтатистикаФормаП1");
		//-- НЕ УТ
		
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "s_okved");
		
	ИначеЕсли ИмяКлассификатора = "КлассификаторПродукцииПоВидамДеятельности" Тогда
		
		СтруктураПараметров.Вставить("ВидОбъекта", "Отчет");
		СтруктураПараметров.Вставить("ИсточникДанных", "РегламентированныйОтчетСтатистикаФормаП1");
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "s_okp");
		
	ИначеЕсли ИмяКлассификатора = "КлассификаторУслугНаселению" Тогда
		
		СтруктураПараметров.Вставить("ВидОбъекта", "Отчет");
		СтруктураПараметров.Вставить("ИсточникДанных", "РегламентированныйОтчетСтатистикаФормаП5М");
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "s_okun");
		
		
	ИначеЕсли ИмяКлассификатора = "КлассификаторТНВЭД" Тогда
		
		СтруктураПараметров.Вставить("ВидОбъекта", "Справочник");
		СтруктураПараметров.Вставить("ИсточникДанных", "КлассификаторТНВЭД");
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "Строки");
		
	ИначеЕсли ИмяКлассификатора = "ОбщероссийскийКлассификаторПродукции" Тогда
		
		СтруктураПараметров.Вставить("ВидОбъекта", "Справочник");
		СтруктураПараметров.Вставить("ИсточникДанных", "ОбщероссийскийКлассификаторПродукции");
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "ОбщероссийскийКлассификаторПродукции");
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция считывает версии списков отчета
//
// Парамеры: 
// - ИмяОтчета - Строка, идентификатор отчета для которого нужно вернуть версии списков
//
// ВозврвщаемоеЗначение:
// СписокЗначений с версиями списков отчета
//
Функция ПолучитьВерсииСписковОтчета(ПолноеИмяОбъекта)
	
	СписокВерсий = Новый СписокЗначений;
	
	//Ищем переданный отчет
	ОбъектМетаданные = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Если ОбъектМетаданные = Неопределено Тогда 
		Возврат СписокВерсий;	
	КонецЕсли;	
		
	Для Каждого Макет Из ОбъектМетаданные.Макеты Цикл
		
		Если Лев(Макет.Имя,6) = "Списки" Тогда
			
			СписокВерсий.Добавить(Макет.Имя, Лев(СтрЗаменить(Макет.Имя, "Списки", ""), 4));
			
		ИначеЕсли Лев(Макет.Имя, 20) = "ДанныеКлассификатора" 
			Или Макет.Имя = "КлассификаторТоварнойНоменклатурыВнешнеэкономическойДеятельности" 
			Или Макет.Имя = "ОбщероссийскийКлассификаторПродукции" Тогда
			
			СписокВерсий.Добавить(Макет.Имя, Лев(СтрЗаменить(Макет.Имя, "ДанныеКлассификатора", НСтр("ru = 'Данные классификатора'")), 25));
			
		Иначе
			
			Если СписокВерсий.Количество() > 0 Тогда
				Прервать;	
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат СписокВерсий;	
	
КонецФункции

//Возвращает имя области макета списков, в котором содержится ограничение
// классификатора для переданного значения перечисления (ВидыСвободныхСтрокФормСтатистики)
//
Функция ИмяОбластиМакетаОграничения(Значение, ВерсияСписка = "") Экспорт
	
	ИмяОбластиМакетаОграничения = Неопределено;
	
	Если ИмяСправочника = "КлассификаторВидовЭкономическойДеятельности" Тогда
		
		ИмяОбластиМакетаОграничения = "pril_okved_51";	
		
	ИначеЕсли ИмяСправочника = "ВидыПродукцииПроизводство" Тогда	
		
		Если ВерсияСписка = "Списки2010Кв1" Тогда
			ИмяОбластиМакетаОграничения = "pril_okp_50";	
		Иначе	
			ИмяОбластиМакетаОграничения = "pril_okp_55";	
		КонецЕсли;
		
	ИначеЕсли ИмяСправочника = "ВидыПродукцииРозница" Тогда	
		
		ИмяОбластиМакетаОграничения = "pril_okp_6";	
		
	ИначеЕсли ИмяСправочника = "ВидыПродукцииОпт" Тогда	
		
		ИмяОбластиМакетаОграничения = "pril_okp_7";	
		
	КонеЦесли;	
	
	Возврат ИмяОбластиМакетаОграничения;	
	
КонецФункции

#КонецОбласти
