
&НаКлиенте
Процедура ДобавитьИРассчитатьСтрокуАванса(СуммаРасчетов, ТекущаяСтрока)
	
	СтруктураПоиска = Новый Структура("Документ, Заказ", ТекущаяСтрока.Документ, ТекущаяСтрока.Заказ);
	Строки = СписокОтобранныеАвансыИДолги.НайтиСтроки(СтруктураПоиска);
	
	Если Строки.Количество() > 0 Тогда
		НоваяСтрока = Строки[0];
		СуммаРасчетов = СуммаРасчетов + НоваяСтрока.СуммаРасчетов;
	Иначе
		НоваяСтрока = СписокОтобранныеАвансыИДолги.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока.СуммаРасчетов = СуммаРасчетов;
	
	НоваяСтрока.Курс = ?(НоваяСтрока.Курс = 0, 1, НоваяСтрока.Курс);
	НоваяСтрока.Кратность = ?(НоваяСтрока.Кратность = 0, 1, НоваяСтрока.Кратность);
	
	НоваяСтрока.Курс = ?(
		НоваяСтрока.СуммаРасчетов = 0,
		1,
		ТекущаяСтрока.СуммаУчета / ТекущаяСтрока.СуммаРасчетов * КурсВалютаУчета
	);
	
	Если НЕ УчетВалютныхОпераций Тогда
		НоваяСтрока.СуммаУчета = ТекущаяСтрока.СуммаРасчетов;
	ИначеЕсли ЗапрашиватьСумму ИЛИ Строки.Количество() > 0 Тогда
		НоваяСтрока.СуммаУчета = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаРасчетов,
			НоваяСтрока.Курс,
			КурсВалютаУчета,
			НоваяСтрока.Кратность,
			КратностьВалютаУчета
		);
	КонецЕсли;
	
	Элементы.СписокОтобранныеАвансыИДолги.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	РассчитатьСуммыИтог();
	
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов формы.
//
&НаКлиенте
Процедура ПроверитьЗаполнениеРеквизитовФормы(Отказ)
	
	// Проверка заполненности реквизитов.
	НомерСтроки = 0;
		
	Для каждого СтрокаСписокОтобранныеАвансыИДолги Из СписокОтобранныеАвансыИДолги Цикл
		НомерСтроки = НомерСтроки + 1;
		Если УчетВалютныхОпераций
		И НЕ ЗначениеЗаполнено(СтрокаСписокОтобранныеАвансыИДолги.Курс) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Курс"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы и долги"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если УчетВалютныхОпераций
		И НЕ ЗначениеЗаполнено(СтрокаСписокОтобранныеАвансыИДолги.Кратность) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Кратность"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы и долги"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаСписокОтобранныеАвансыИДолги.СуммаРасчетов) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Сумма расчетов"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы и долги"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если УчетВалютныхОпераций
		И НЕ ЗначениеЗаполнено(СтрокаСписокОтобранныеАвансыИДолги.СуммаУчета) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Сумма учета"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы и долги"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовФормы()

// Процедура рассчитывает итоговые суммы.
//
&НаКлиенте
Процедура РассчитатьСуммыИтог()
	
	СуммаУчетаИтог = 0;
	
	Для каждого ТекСтрока Из СписокОтобранныеАвансыИДолги Цикл
		СуммаУчетаИтог = СуммаУчетаИтог + ТекСтрока.СуммаУчета;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьСуммыИтог()

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Компания = Параметры.Компания;
	Контрагент = Параметры.Контрагент;
	Дата = Параметры.Дата;
	Ссылка = Параметры.Ссылка;
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	
	Элементы.СписокАвансовДолговДокумент.Видимость = Контрагент.ВестиРасчетыПоДокументам;
	Элементы.СписокАвансовДолговЗаказ.Видимость = Контрагент.ВестиРасчетыПоЗаказам;
	Элементы.СписокАвансовДолговДоговор.Видимость = Контрагент.ВестиРасчетыПоДоговорам;
	Элементы.СписокОтобранныеАвансыИДолгиДокумент.Видимость = Контрагент.ВестиРасчетыПоДокументам;
	Элементы.СписокОтобранныеАвансыИДолгиЗаказ.Видимость = Контрагент.ВестиРасчетыПоЗаказам;
	Элементы.СписокОтобранныеАвансыИДолгиДоговор.Видимость = Контрагент.ВестиРасчетыПоДоговорам;
	
	АдресСписокОтобранныеАвансыИДолгиВХранилище = Параметры.АдресДебиторВХранилище;
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаУчета));
	КурсВалютаУчета = СтруктураПоВалюте.Курс;
	КратностьВалютаУчета = СтруктураПоВалюте.Кратность;
	
	СтрокаКолонок =
		"Договор,
		|Документ,
		|Заказ,
		|СуммаУчета,
		|Курс,
		|Кратность,
		|СуммаРасчетов,
		|ПризнакАванса";
	
	СписокОтобранныеАвансыИДолги.Загрузить(ПолучитьИзВременногоХранилища(АдресСписокОтобранныеАвансыИДолгиВХранилище));
	
	Элементы.СписокАвансовДолговСуммаУчета.Видимость = УчетВалютныхОпераций;
	
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РассчитатьСуммыИтог();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик нажатия кнопки ОК.
//
&НаКлиенте
Процедура ОК(Команда)
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеРеквизитовФормы(Отказ);
	
	Если НЕ Отказ Тогда
		ЗаписатьПодборВХранилище();
		Закрыть(КодВозвратаДиалога.OK);
	КонецЕсли;
	
КонецПроцедуры // ОК()

// Процедура - обработчик нажатия кнопки Обновить.
//
&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры // Обновить()

// Процедура - обработчик нажатия кнопки ЗапрашиватьСумму.
//
&НаКлиенте
Процедура ЗапрашиватьСумму(Команда)
	
	ЗапрашиватьСумму = НЕ ЗапрашиватьСумму;
	Элементы.ЗапрашиватьСумму.Пометка = ЗапрашиватьСумму;
	
КонецПроцедуры // ЗапрашиватьСумму()

// Процедура помещает результаты подбора в хранилище.
//
&НаСервере
Процедура ЗаписатьПодборВХранилище()
	
	СписокОтобранныеАвансыИДолгиВХранилище = СписокОтобранныеАвансыИДолги.Выгрузить(, СтрокаКолонок);
	ПоместитьВоВременноеХранилище(СписокОтобранныеАвансыИДолгиВХранилище, АдресСписокОтобранныеАвансыИДолгиВХранилище);
	
КонецПроцедуры // ЗаписатьПодборВХранилище()

// Получает набор данных с сервера для процедуры СписокОтобранныеАвансыИДолгиДокументПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументПриИзменении(Документ)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("СуммаРасчетов", Документ.РасшифровкаПлатежа.Итог("СуммаРасчетов"));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДокументПриИзменении()

// Добавляет строку в отобранные.
//
&НаКлиенте
Процедура ДобавитьСтрокуВОтобранные(ТекущаяСтрока)
	
	СуммаРасчетов = ТекущаяСтрока.СуммаРасчетов;
	Если ЗапрашиватьСумму Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока, СуммаРасчетов", ТекущаяСтрока, СуммаРасчетов));
		ПоказатьВводЧисла(ОписаниеОповещения, СуммаРасчетов, НСтр("ru = 'Введите сумму расчетов'"));
		
	Иначе
		
		ДобавитьИРассчитатьСтрокуАванса(СуммаРасчетов, ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВОтобранные()

// Процедура помещает результаты выбора в подбор.
//
&НаКлиенте
Процедура СписокАвансовВыборЗначения(Элемент, СтандартнаяОбработка, Значение)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	ДобавитьСтрокуВОтобранные(ТекущаяСтрока);
	
КонецПроцедуры // СписокАвансовВыборЗначения()

// Процедура - обработчик события ПриНачалеРедактирования табличной части СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		РассчитатьСуммыИтог();
		ЗаполнитьАвансыИДолги();
	КонецЕсли;
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиПриНачалеРедактирования()

// Процедура - обработчик события ПриИзменении поля ввода СуммаРасчетов табличной части
// СписокОтобранныеАвансыИДолги. Расчитывает сумму платежа.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиСуммаРасчетовПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Курс табличной части
// СписокОтобранныеАвансыИДолги. Расчитывает сумму платежа.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиКурсПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиКурсПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Кратность табличной части
// СписокОтобранныеАвансыИДолги. Расчитывает сумму платежа.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиКратностьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиКратностьПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СуммаУчета табличной части
// СписокОтобранныеАвансыИДолги. Расчитывает курс и кратность.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиСуммаУчетаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаУчета
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * КурсВалютаУчета
	);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиСуммаПлатежаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Документ табличной части
// СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	Иначе
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
		СтруктураДанные = ПолучитьДанныеДокументПриИзменении(СтрокаТабличнойЧасти.Документ);
		СтрокаТабличнойЧасти.СуммаРасчетов = СтруктураДанные.СуммаРасчетов;
		РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиДокументПриИзменении()

// Процедура - обработчик события НачалоПеретаскивания списка СписокАвансов.
//
&НаКлиенте
Процедура СписокАвансовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Структура = Новый Структура;
	Структура.Вставить("Договор", ТекущиеДанные.Договор);
	Структура.Вставить("Документ", ТекущиеДанные.Документ);
	Структура.Вставить("Заказ", ТекущиеДанные.Заказ);
	Структура.Вставить("СуммаРасчетов", ТекущиеДанные.СуммаРасчетов);
	Структура.Вставить("ПризнакАванса", ТекущиеДанные.ПризнакАванса);
	
	Если ТекущиеДанные.Свойство("СуммаУчета") Тогда
		Структура.Вставить("СуммаУчета", ТекущиеДанные.СуммаУчета);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = Структура;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
КонецПроцедуры // СписокАвансовНачалоПеретаскивания()

// Процедура - обработчик события ПроверкаПеретаскивания списка СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиПроверкаПеретаскивания()

// Процедура - обработчик события Перетаскивание списка СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = ПараметрыПеретаскивания.Значение;
	ДобавитьСтрокуВОтобранные(ТекущаяСтрока);
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиПеретаскивание()

// Процедура - обработчик события ПриИзменении списка СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиПриИзменении(Элемент)
	
	РассчитатьСуммыИтог();
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиПриИзменении()

// Процедура - обработчик события ПриИзменении списка СписокОтобранныеАвансыИДолгиДоговор.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(
		Дата,
		СтрокаТабличнойЧасти.Договор
	);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда 
		СтрокаТабличнойЧасти.Курс      = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
		СтрокаТабличнойЧасти.Кратность = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	КонецЕсли;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиДоговорПриИзменении()

// Процедура расчитывает сумму учета.
//
&НаКлиенте
Процедура РассчитатьСуммуУчета(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Курс      = ?(СтрокаТабличнойЧасти.Курс      = 0, 1, СтрокаТабличнойЧасти.Курс);
	СтрокаТабличнойЧасти.Кратность = ?(СтрокаТабличнойЧасти.Кратность = 0, 1, СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.СуммаУчета = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		КурсВалютаУчета,
		СтрокаТабличнойЧасти.Кратность,
		КратностьВалютаУчета
	);
	
КонецПроцедуры // РассчитатьСуммуУчета()

// Получает набор данных с сервера для процедуры ВалютаДенежныхСредствПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, Договор)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", Договор.ВалютаРасчетов)
		)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

// Процедура заполняет список авансов.
//
&НаСервере
Процедура ЗаполнитьАвансыИДолги()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтобранныеАвансыИДолги.ПризнакАванса,
	|	ОтобранныеАвансыИДолги.Договор,
	|	ОтобранныеАвансыИДолги.Документ,
	|	ВЫБОР
	|		КОГДА ОтобранныеАвансыИДолги.Заказ = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ОтобранныеАвансыИДолги.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ОтобранныеАвансыИДолги.СуммаРасчетов,
	|	ОтобранныеАвансыИДолги.СуммаУчета
	|ПОМЕСТИТЬ ТаблицаОтобранныеАвансыИДолги
	|ИЗ
	|	&ТаблицаОтобранныеАвансыИДолги КАК ОтобранныеАвансыИДолги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ПризнакАванса КАК ПризнакАванса,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаУчета,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаРасчетов,
	|	РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ВЫБОР
	|			КОГДА РасчетыСПокупателямиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПризнакАванса,
	|		ВЫБОР
	|			КОГДА РасчетыСПокупателямиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|				ТОГДА -РасчетыСПокупателямиОстатки.СуммаОстаток
	|			ИНАЧЕ РасчетыСПокупателямиОстатки.СуммаОстаток
	|		КОНЕЦ КАК СуммаОстаток,
	|		ВЫБОР
	|			КОГДА РасчетыСПокупателямиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|				ТОГДА -РасчетыСПокупателямиОстатки.СуммаВалОстаток
	|			ИНАЧЕ РасчетыСПокупателямиОстатки.СуммаВалОстаток
	|		КОНЕЦ КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтобранныеАвансыИДолги.Договор,
	|		ОтобранныеАвансыИДолги.Документ,
	|		ОтобранныеАвансыИДолги.Заказ,
	|		ОтобранныеАвансыИДолги.ПризнакАванса,
	|		-ОтобранныеАвансыИДолги.СуммаУчета,
	|		-ОтобранныеАвансыИДолги.СуммаРасчетов
	|	ИЗ
	|		ТаблицаОтобранныеАвансыИДолги КАК ОтобранныеАвансыИДолги
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент) КАК РасчетыСПокупателямиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
	|		ПО РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Договор,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ПризнакАванса,
	|	РасчетыСПокупателямиОстатки.Документ.Дата,
	|	КурсыВалютРасчетов.Курс,
	|	КурсыВалютРасчетов.Кратность
	|
	|ИМЕЮЩИЕ
	|	(СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) > 0
	|		ИЛИ СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаОтобранныеАвансыИДолги", СписокОтобранныеАвансыИДолги.Выгрузить());
	
	СписокАвансовДолгов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьАвансыИДолги()

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
// Процедура-обработчик результата ввода суммы зачета аванса поставщика
//
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СуммаРасчетов = РезультатЗакрытия;
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	ДобавитьИРассчитатьСтрокуАванса(СуммаРасчетов, ТекущаяСтрока);
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

#КонецОбласти