////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает доступность реквизитов формы.
//
&НаКлиенте
Процедура УстановитьДоступность()
	
	// Использовать подсистему Работы.
	Если НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуРаботы Тогда
		
		Элементы.РаботыКартинка.Доступность = Истина;
		Элементы.РаботыЗаголовок.Доступность = Истина;
		Элементы.РаботыОписаниеТекст.Доступность = Истина;
		
	Иначе
		
		Элементы.РаботыКартинка.Доступность = Ложь;
		Элементы.РаботыЗаголовок.Доступность = Ложь;
		Элементы.РаботыОписаниеТекст.Доступность = Ложь;
		
	КонецЕсли;
	
	// Использовать подсистему Производство.
	Если НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство Тогда
		
		Элементы.ПроизводствоКартинка.Доступность = Истина;
		Элементы.ПроизводствоЗаголовок.Доступность = Истина;
		Элементы.ПроизводствоОписаниеТекст.Доступность = Истина;
		
	Иначе
		
		Элементы.ПроизводствоКартинка.Доступность = Ложь;
		Элементы.ПроизводствоЗаголовок.Доступность = Ложь;
		Элементы.ПроизводствоОписаниеТекст.Доступность = Ложь;
		
	КонецЕсли;
	
	// Использовать подсистему Зарплата.
	Если НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата Тогда
		
		Элементы.ЗарплатаКартинка.Доступность = Истина;
		Элементы.ЗарплатаЗаголовок.Доступность = Истина;
		Элементы.ЗарплатаОписаниеТекст.Доступность = Истина;
		
	Иначе
		
		Элементы.ЗарплатаКартинка.Доступность = Ложь;
		Элементы.ЗарплатаЗаголовок.Доступность = Ложь;
		Элементы.ЗарплатаОписаниеТекст.Доступность = Ложь;
		
	КонецЕсли;
	
	// Использовать Подключаемое оборудование.
	Если НаборКонстант.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование Тогда
		
		Элементы.ОборудованиеЗаголовок.Доступность = Истина;
		
	Иначе
		
		Элементы.ОборудованиеЗаголовок.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступность()

// Процедура контроля снятия опции Использовать зарплату по регистрам.
//
&НаСервере
Функция ПроверитьДвиженияПоРегистрамПодсистемыЗарплата()
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачисленияИУдержания.Организация
	|ИЗ
	|	РегистрНакопления.НачисленияИУдержания КАК НачисленияИУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСПерсоналом.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСПерсоналом КАК РасчетыСПерсоналом";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// 1. Регистра Начисления и удержания.
	Если НЕ МассивРезультатов[0].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют движения по регистру ""Начисления и удержания""! Снятие флага ""Зарплата"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата", Отказ);
	КонецЕсли;
	
	// 2. Регистр Расчеты с персоналом.
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют движения по регистру ""Расчеты с персоналом""! Снятие флага ""Зарплата"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата", Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьДвиженияПоРегистрамПодсистемыЗарплата()

// Процедура контроля снятия опции Использовать зарплату по документам и справочникам.
//
&НаСервере
Функция ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуЗарплата()
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеЗарплаты.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачисленияИУдержания.Организация,
	|	СдельныйНаряд.Ссылка
	|ИЗ
	|	РегистрНакопления.НачисленияИУдержания КАК НачисленияИУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СдельныйНаряд КАК СдельныйНаряд
	|		ПО НачисленияИУдержания.Регистратор = СдельныйНаряд.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПокупателяИсполнители.Сотрудник
	|ИЗ
	|	Документ.ЗаказПокупателя.Исполнители КАК ЗаказПокупателяИсполнители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатков.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.РазделУчета = &РазделУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходИзКассы.Ссылка
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	(РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Зарплата)
	|			ИЛИ РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходСоСчета.Ссылка
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|ГДЕ
	|	РасходСоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.Зарплата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ТипЗанятости = ЗНАЧЕНИЕ(Перечисление.ТипыЗанятости.Совместительство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыНачисленийИУдержаний.Ссылка
	|ИЗ
	|	Справочник.ВидыНачисленийИУдержаний КАК ВидыНачисленийИУдержаний
	|ГДЕ
	|	ВидыНачисленийИУдержаний.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Налог)";
	
	Запрос.УстановитьПараметр("РазделУчета", "Расчеты с персоналом");
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// 1. Документ Начисление зарплаты.
	Если НЕ МассивРезультатов[0].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Начисление зарплаты""! Снятие флага ""Зарплата"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата", Отказ);
	КонецЕсли;
	
	// 2. Документ Сдельный наряд.
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Сдельный наряд"", которые начисляют зарплату сотрудникам! Снятие флага ""Зарплата"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата", Отказ);
	КонецЕсли;
	
	// 3. Документ Заказ - наряд.
	Если НЕ МассивРезультатов[2].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Заказ - наряд"", которые начисляют зарплату сотрудникам! Снятие флага ""Зарплата"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата", Отказ);
	КонецЕсли;
	
	// 4. Документ Ввод начальных остатков.
	Если НЕ МассивРезультатов[3].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Ввод начальных остатвков"", по разделу учета ""Расчеты с персоналом""! Снятие флага ""Зарплата"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата", Отказ);
	КонецЕсли;
	
	// 5. Документ Расход из кассы.
	Если НЕ МассивРезультатов[4].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Расход из кассы"", с видом операции ""Зарплата по ведомости"" и/или ""Зарплата сотруднику""! Снятие флага ""Зарплата"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата", Отказ);
	КонецЕсли;
	
	// 6. Документ Расход со счета.
	Если НЕ МассивРезультатов[5].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Расод со счета"", с видом операции ""Зарплата""! Снятие флага ""Зарплата"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата", Отказ);
	КонецЕсли;
	
	// 7. Справочник Сотрудники.
	Если НЕ МассивРезультатов[6].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе есть сотрудники с типом занятости ""Совместительство""! Снятие флага ""Зарплата"" запрещено!'");	
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата", Отказ);
	КонецЕсли;
	
	// 8. Справочник Виды начислений и удержаний.
	Если НЕ МассивРезультатов[7].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют элементы справочника ""Виды начислений и удержаний"" с типом ""Налог""! Снятие флага ""Зарплата"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата", Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Отказ = ПроверитьДвиженияПоРегистрамПодсистемыЗарплата();
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуЗарплата()

// Процедура контроля снятия опции Использовать работы.
//
&НаСервере
Функция ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуРаботы()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Отказ = НЕ РезультатЗапроса.Пустой();
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Заказ - наряд""! Снятие флага ""Работы"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуРаботы");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуРаботы()

// Процедура контроля снятия опции Использовать производство по регистрам.
//
&НаСервере
Функция ПроверитьДвиженияПоРегистрамПодсистемыПроизводство()
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Запасы.Организация
	|ИЗ
	|	РегистрНакопления.Запасы КАК Запасы
	|ГДЕ
	|	(Запасы.СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ Запасы.СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыПринятые.Организация
	|ИЗ
	|	РегистрНакопления.ЗапасыПринятые КАК ЗапасыПринятые
	|ГДЕ
	|	ЗапасыПринятые.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// 1. Регистра Запасы.
	Если НЕ МассивРезультатов[0].Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют движения по регистру ""Запасы"", где счет учета имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
		
	КонецЕсли;
	
	// 2. Регистр Запасы принятые.
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Регистр накопления ""Запасы принятые"" содержит информацию о приеме в переработку! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьДвиженияПоРегистрамПодсистемыПроизводство()

// Процедура контроля снятия опции Использовать производство.
//
&НаСервере
Функция ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуПроизводство()
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказНаПроизводство.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СборкаЗапасов.Ссылка
	|ИЗ
	|	Документ.СборкаЗапасов КАК СборкаЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокРаспределениеЗатрат.Ссылка
	|ИЗ
	|	Документ.РаспределениеЗатрат КАК ДокРаспределениеЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СдельныйНаряд.Ссылка
	|ИЗ
	|	Документ.СдельныйНаряд КАК СдельныйНаряд
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПеремещениеПоЯчейкам.Ссылка
	|ИЗ
	|	Документ.ПеремещениеПоЯчейкам КАК ПеремещениеПоЯчейкам
	|ГДЕ
	|	ПеремещениеПоЯчейкам.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПеремещениеЗапасов.Ссылка
	|ИЗ
	|	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
	|ГДЕ
	|	((ПеремещениеЗапасов.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|				ИЛИ ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение))
	|				И ПеремещениеЗапасов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.Перемещение)
	|			ИЛИ ПеремещениеЗапасов.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатковВнеоборотныеАктивы.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ВнеоборотныеАктивы КАК ВводНачальныхОстатковВнеоборотныеАктивы
	|ГДЕ
	|	(ВводНачальныхОстатковВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ ВводНачальныхОстатковВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатковЗапасы.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков.Запасы КАК ВводНачальныхОстатковЗапасы
	|ГДЕ
	|	ВводНачальныхОстатковЗапасы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатковПрямыеЗатраты.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ПрямыеЗатраты КАК ВводНачальныхОстатковПрямыеЗатраты
	|ГДЕ
	|	ВводНачальныхОстатковПрямыеЗатраты.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПринятиеКУчетуВАВнеоборотныеАктивы.Ссылка
	|ИЗ
	|	Документ.ПринятиеКУчетуВА.ВнеоборотныеАктивы КАК ПринятиеКУчетуВАВнеоборотныеАктивы
	|ГДЕ
	|	(ПринятиеКУчетуВАВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ ПринятиеКУчетуВАВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОприходованиеЗапасов.Ссылка
	|ИЗ
	|	Документ.ОприходованиеЗапасов КАК ОприходованиеЗапасов
	|ГДЕ
	|	ОприходованиеЗапасов.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	БюджетОстатки.Ссылка
	|ИЗ
	|	Документ.Бюджет.Остатки КАК БюджетОстатки
	|ГДЕ
	|	(БюджетОстатки.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетОстатки.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	БюджетКосвенныеЗатраты.Ссылка
	|ИЗ
	|	Документ.Бюджет.КосвенныеЗатраты КАК БюджетКосвенныеЗатраты
	|ГДЕ
	|	(БюджетКосвенныеЗатраты.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетКосвенныеЗатраты.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ БюджетКосвенныеЗатраты.КоррСчет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетКосвенныеЗатраты.КоррСчет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	БюджетПрямыеЗатраты.Ссылка
	|ИЗ
	|	Документ.Бюджет.ПрямыеЗатраты КАК БюджетПрямыеЗатраты
	|ГДЕ
	|	(БюджетПрямыеЗатраты.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетПрямыеЗатраты.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ БюджетПрямыеЗатраты.КоррСчет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетПрямыеЗатраты.КоррСчет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	БюджетОперации.Ссылка
	|ИЗ
	|	Документ.Бюджет.Операции КАК БюджетОперации
	|ГДЕ
	|	(БюджетОперации.СчетДт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетОперации.СчетДт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ БюджетОперации.СчетКт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетОперации.СчетКт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИзменениеПараметровВАВнеоборотныеАктивы.Ссылка
	|ИЗ
	|	Документ.ИзменениеПараметровВА.ВнеоборотныеАктивы КАК ИзменениеПараметровВАВнеоборотныеАктивы
	|ГДЕ
	|	(ИзменениеПараметровВАВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ ИзменениеПараметровВАВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеЗарплатыНачисленияУдержания.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплаты.НачисленияУдержания КАК НачислениеЗарплатыНачисленияУдержания
	|ГДЕ
	|	(НачислениеЗарплатыНачисленияУдержания.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ НачислениеЗарплатыНачисленияУдержания.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеНалоговНалоги.Ссылка
	|ИЗ
	|	Документ.НачислениеНалогов.Налоги КАК НачислениеНалоговНалоги
	|ГДЕ
	|	(НачислениеНалоговНалоги.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ НачислениеНалоговНалоги.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОперацияПроводки.Ссылка
	|ИЗ
	|	Документ.Операция.Проводки КАК ОперацияПроводки
	|ГДЕ
	|	(ОперацияПроводки.СчетДт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ ОперацияПроводки.СчетДт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ ОперацияПроводки.СчетКт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ ОперацияПроводки.СчетКт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрочиеРасходыРасходы.Ссылка
	|ИЗ
	|	Документ.ПрочиеРасходы.Расходы КАК ПрочиеРасходыРасходы
	|ГДЕ
	|	(ПрочиеРасходыРасходы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ ПрочиеРасходыРасходы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	(Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	(СтруктурныеЕдиницы.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ИЛИ СтруктурныеЕдиницы.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ИЛИ СтруктурныеЕдиницы.ПолучательОтходов.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение))";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// 1. Документ Заказ на производство.
	Если НЕ МассивРезультатов[0].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Заказ на производство""! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 2. Документ Производство.
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Производство""! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 3. Документ Распределение затрат.
	Если НЕ МассивРезультатов[2].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Распределение затрат""! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 4. Документ Заказ покупателя (Заказ на переработку).
	Если НЕ МассивРезультатов[3].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Заказ покупателя"" с видом операции ""Заказ на переработку""! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 5. Документ Сдельный наряд.
	Если НЕ МассивРезультатов[4].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Сдельный наряд""! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 6. Документ Перемещение по ячейкам (перемещение - подразделение).
	Если НЕ МассивРезультатов[5].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Перемещение по ячейкам"", где структурная единица компании имеет тип Подразделение! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 7. Документ Перемещение запасов (подразделение, косвенные затраты).
	Если НЕ МассивРезультатов[6].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Перемещение запасов"", где структурная единица компании имеет тип Подразделение и/или счет затрат имеет тип Косвенные затраты! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 8. Документ Ввод начальных остатков (подразделение, косвенные затраты).
	Если НЕ МассивРезультатов[7].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Ввод начальных остатков"", где структурная единица компании имеет тип Подразделение  и/или счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 9. Документ Принятие к учету имущества (незавершенное производство, косвенные затраты).
	Если НЕ МассивРезультатов[8].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Принятие к учету имущества"", где счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 10. Документ Оприходование запасов (подразделение).
	Если НЕ МассивРезультатов[9].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Оприходование запасов"", где структурная единица компании имеет тип Подразделение! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 11. Документ Бюджет (незавершенное производство, косвенные затраты).
	Если НЕ МассивРезультатов[10].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Бюджет"", где счета затрат имеют тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 12. Документ Изменение параметров ВА (незавершенное производство, косвенные затраты).
	Если НЕ МассивРезультатов[11].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Изменение параметров имущества"", где счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 13. Документ Начисление зарплаты (незавершенное производство, косвенные затраты).
	Если НЕ МассивРезультатов[12].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Начисление зарплаты"", где счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 14. Документ Начисление налогов (незавершенное производство, косвенные затраты).
	Если НЕ МассивРезультатов[13].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Начисление налогов"", где счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 15. Документ Операция (незавершенное производство, косвенные затраты).
	Если НЕ МассивРезультатов[14].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Операция"", где счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 16. Документ Прочие расходы (незавершенное производство, косвенные затраты).
	Если НЕ МассивРезультатов[15].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют документы ""Прочие затраты (расходы)"", где счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 17. Справочник Номенклатура (незавершенное производство, косвенные затраты).
	Если НЕ МассивРезультатов[16].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют элементы справочника ""Номенклатура"", где счет учета затрат имеет тип Косвенные затраты, Незавершенное производство или способ пополнения запаса Производство! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	// 18. Справочник Структурные единицы (подразделение).
	Если НЕ МассивРезультатов[17].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе присутствуют элементы справочника ""Структурная единица"", где параметр автоперемещения (перемещение, комплектация) имеет тип Подразделение! Снятие флага ""Производство"" запрещено!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство", Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Отказ = ПроверитьДвиженияПоРегистрамПодсистемыПроизводство();
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуПроизводство()

// Процедура проверяет корректность заполнения формы.
//
&НаСервере
Процедура ПроверитьКорректностьЗаполненияФормы(Отказ)
	
	// Зарплата.
	Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата.Получить() <> НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата
		И (НЕ НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата) Тогда
		
		Если ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуЗарплата() Тогда
			
			НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата = Истина;
			
			Отказ = Истина;
			
		Иначе
			
			Константы.ФункциональнаяОпцияИспользоватьСовместительство.Установить(Ложь);
			Константы.ФункциональнаяОпцияВестиШтатноеРасписание.Установить(Ложь);
			Константы.ФункциональнаяОпцияВестиУчетНалогаНаДоходы.Установить(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Работы.
	Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы.Получить() <> НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуРаботы
		И (НЕ НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуРаботы) И ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуРаботы() Тогда
		
		НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуРаботы = Истина;
		
		Отказ = Истина;
		
	КонецЕсли;
	
	// Производство.
	Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить() <> НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство
		И (НЕ НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство) Тогда
		
		Если ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуПроизводство() Тогда
			
			НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство = Истина;
			
			Отказ = Истина;
			
		Иначе
			
			Константы.ФункциональнаяОпцияПереработкаДавальческогоСырья.Установить(Ложь);
			Константы.ФункциональнаяОпцияИспользоватьТехоперации.Установить(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКорректностьЗаполненияФормы()

// Записывает набор констант на сервере.
//
&НаСервере
Процедура ЗаписатьНаСервере(Отказ = Ложь)
	
	ПроверитьКорректностьЗаполненияФормы(Отказ);
	Если НЕ Отказ Тогда
		
		РеквизитФормыВЗначение("НаборКонстант").Записать();
		Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьНаСервере()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НаборКонстантИзБД = Константы.СоздатьНабор("ФункциональнаяОпцияИспользоватьПодключаемоеОборудование, ФункциональнаяОпцияИспользоватьПодсистемуЗарплата, ФункциональнаяОпцияИспользоватьПодсистемуПроизводство, ФункциональнаяОпцияИспользоватьПодсистемуРаботы");
	НаборКонстантИзБД.Прочитать();

	ЗначениеВРеквизитФормы(
		НаборКонстантИзБД,
		"НаборКонстант"
	);
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступность();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик команды ЗаписатьНаборКонстант.
//
&НаКлиенте
Процедура ЗаписатьНаборКонстант(Команда)
	
	Записать();
	
КонецПроцедуры // ЗаписатьНаборКонстант()

// Процедура - записывает набор констант.
//
&НаКлиенте
Процедура Записать()
	
	Отказ = Ложь;
	ЗаписатьНаСервере(Отказ);
	Если НЕ Отказ Тогда
		ОбновитьИнтерфейс();
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры // Записать()

// Процедура - обработчик команды ЗаписатьИЗакрыть.
//
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Отказ = Ложь;
	ЗаписатьНаСервере(Отказ);
	Если НЕ Отказ Тогда
		ОбновитьИнтерфейс();
		ОбновитьПовторноИспользуемыеЗначения();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьИЗакрыть()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура - обработчик события ПриИзменении поля ЕстьРаботы.
//
&НаКлиенте
Процедура ЕстьРаботыПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры // ЕстьРаботыПриИзменении()

// Процедура - обработчик события ПриИзменении поля ЕстьПроизводство.
//
&НаКлиенте
Процедура ЕстьПроизводствоПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры // ЕстьПроизводствоПриИзменении()

// Процедура - обработчик события ПриИзменении поля ЕстьЗарплата.
//
&НаКлиенте
Процедура ЕстьЗарплатаПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры // ЕстьЗарплатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ЕстьОборудование.
//
&НаКлиенте
Процедура ЕстьОборудованиеПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры // ЕстьОборудованиеПриИзменении()

// Процедура - обработчик события Нажатие ссылки ПерсональныеЗаголовок.
//
&НаКлиенте
Процедура ПерсональныеЗаголовокНажатие(Элемент)
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстСообщения = НСтр("ru = 'Данные еще не записаны! Переход к настройкам возможен только после записи данных! Записать?'");
		Ответ = Вопрос(ТекстСообщения, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВызовИзФормыНастроек", Истина);
	
	#Если ВебКлиент Тогда
		ПараметрыФормы.Вставить("ЭтоВебКлиент", Истина);
	#Иначе
		ПараметрыФормы.Вставить("ЭтоВебКлиент", Ложь);
	#КонецЕсли
	
	ОткрытьФорму("ОбщаяФорма.ПерсональныеНастройки", ПараметрыФормы);
	
	
КонецПроцедуры // ПерсональныеЗаголовокНажатие()

// Процедура - обработчик события Нажатие ссылки ОборудованиеЗаголовок.
//
&НаКлиенте
Процедура ОборудованиеЗаголовокНажатие(Элемент)
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстСообщения = НСтр("ru = 'Данные еще не записаны! Переход к настройкам возможен только после записи данных! Записать?'");
		Ответ = Вопрос(ТекстСообщения, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	ОткрытьФормуМодально("ОбщаяФорма.ФормаНастройкиПодключаемогоОборудования");
	
КонецПроцедуры // ОборудованиеЗаголовокНажатие()

// Процедура - обработчик события Нажатие ссылки ПредприятиеЗаголовок.
//
&НаКлиенте
Процедура ПредприятиеЗаголовокНажатие(Элемент)
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстСообщения = НСтр("ru = 'Данные еще не записаны! Переход к настройкам возможен только после записи данных! Записать?'");
		Ответ = Вопрос(ТекстСообщения, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиПредприятие");
	
КонецПроцедуры // ПредприятиеЗаголовокНажатие()

// Процедура - обработчик события Нажатие ссылки ПродажиЗаголовок.
//
&НаКлиенте
Процедура ПродажиЗаголовокНажатие(Элемент)
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстСообщения = НСтр("ru = 'Данные еще не записаны! Переход к настройкам возможен только после записи данных! Записать?'");
		Ответ = Вопрос(ТекстСообщения, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиПродажи");
	
КонецПроцедуры // ПродажиЗаголовокНажатие()

// Процедура - обработчик события Нажатие ссылки ЗакупкиЗаголовок.
//
&НаКлиенте
Процедура ЗакупкиЗаголовокНажатие(Элемент)
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстСообщения = НСтр("ru = 'Данные еще не записаны! Переход к настройкам возможен только после записи данных! Записать?'");
		Ответ = Вопрос(ТекстСообщения, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиЗакупки");
	
КонецПроцедуры // ЗакупкиЗаголовокНажатие()

// Процедура - обработчик события Нажатие ссылки РаботыЗаголовок.
//
&НаКлиенте
Процедура РаботыЗаголовокНажатие(Элемент)
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстСообщения = НСтр("ru = 'Данные еще не записаны! Переход к настройкам возможен только после записи данных! Записать?'");
		Ответ = Вопрос(ТекстСообщения, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиРаботы");
	
КонецПроцедуры // РаботыЗаголовокНажатие()

// Процедура - обработчик события Нажатие ссылки ПроизводствоЗаголовок.
//
&НаКлиенте
Процедура ПроизводствоЗаголовокНажатие(Элемент)
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстСообщения = НСтр("ru = 'Данные еще не записаны! Переход к настройкам возможен только после записи данных! Записать?'");
		Ответ = Вопрос(ТекстСообщения, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиПроизводство");
	
КонецПроцедуры // ПроизводствоЗаголовокНажатие()

// Процедура - обработчик события Нажатие ссылки ЗарплатаЗаголовок.
//
&НаКлиенте
Процедура ЗарплатаЗаголовокНажатие(Элемент)
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстСообщения = НСтр("ru = 'Данные еще не записаны! Переход к настройкам возможен только после записи данных! Записать?'");
		Ответ = Вопрос(ТекстСообщения, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиЗарплата");
	
КонецПроцедуры // ЗарплатаЗаголовокНажатие()

// Процедура - обработчик события Нажатие ссылки ЗарплатаЗаголовок.
//
&НаКлиенте
Процедура ДеньгиЗаголовокНажатие(Элемент)
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстСообщения = НСтр("ru = 'Данные еще не записаны! Переход к настройкам возможен только после записи данных! Записать?'");
		Ответ = Вопрос(ТекстСообщения, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиДеньги");
	
КонецПроцедуры // ФинансыЗаголовокНажатие()

// Процедура - обработчик события Нажатие ссылки ОбменДаннымиЗаголовок.
//
&НаКлиенте
Процедура ОбменДаннымиЗаголовокНажатие(Элемент)
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстСообщения = НСтр("ru = 'Данные еще не записаны! Переход к настройкам возможен только после записи данных! Записать?'");
		Ответ = Вопрос(ТекстСообщения, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиОбмена");
	
КонецПроцедуры


