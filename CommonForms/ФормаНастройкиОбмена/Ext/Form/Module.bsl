////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УстановитьДоступностьРеквизитовОбменаДанными()
	
	Элементы.ГруппаПрефиксИнформационнойБазы.Доступность = ИспользоватьСинхронизациюДанных И Не ОбщегоНазначенияПовтИсп.РазделениеВключено();
	Элементы.ГруппаСинхронизацияДанных.Доступность = ИспользоватьСинхронизациюДанных;
	
	Элементы.НастройкиСинхронизацииДоговоровКонтрагентовОписание.Видимость = Не УправлениеНебольшойФирмойПовтИсп.ОбменСБухгалтериейНастроен();
	Элементы.ПодгруппаКонтрольДоговоровКонтрагентов.Доступность = УправлениеНебольшойФирмойПовтИсп.ОбменСБухгалтериейНастроен();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ИспользоватьСинхронизациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных")
			И (ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанныхВМоделиСервисаСПриложениемВИнтернете")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанныхВМоделиСервисаСЛокальнойПрограммой"));
			
		Элементы.ИспользоватьСинхронизациюДанных.Видимость = Ложь;
		Элементы.НастройкиСинхронизацииДанныхОписание.Видимость = Ложь;
		Элементы.ГруппаПрефиксИнформационнойБазы.Видимость = Ложь;
		
		АдресДляПодключенияКЦентральнойБазеСМобильногоУстройства = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		
	Иначе
		ИспользоватьСинхронизациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
		Элементы.ГруппаАдресДляПодключенияКЦентральнойБазеСМобильногоУстройства.Видимость = Ложь;
		
	КонецЕсли;
	
	Если НаборКонстант.НеПроводитьДокументыСНекорректнымиДоговорами Тогда
		НеПроводитьДокументыСНекорректнымиДоговорами = Перечисления.ДаНет.Да;
	Иначе
		НеПроводитьДокументыСНекорректнымиДоговорами = Перечисления.ДаНет.Нет;
	КонецЕсли;
	
	УстановитьДоступностьРеквизитовОбменаДанными();
	
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписьюНаСервере формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ИспользоватьСинхронизациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанныхВМоделиСервисаСПриложениемВИнтернете")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанныхВМоделиСервисаСЛокальнойПрограммой");
		
	Иначе
		
		ИспользованиеОбменаДаннымиВключено = (ИспользоватьСинхронизациюДанных И Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных"))
			ИЛИ (ТекущийОбъект.ФункциональнаяОпцияИспользоватьОбменССайтами И Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменССайтами"));
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.ИспользоватьСинхронизациюДанных.Установить(ИспользоватьСинхронизациюДанных);
		Константы.ИспользоватьСинхронизациюДанныхВЛокальномРежиме.Установить(ИспользоватьСинхронизациюДанных);
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если НеПроводитьДокументыСНекорректнымиДоговорами = Перечисления.ДаНет.Да Тогда
		ТекущийОбъект.НеПроводитьДокументыСНекорректнымиДоговорами = Истина;
	Иначе
		ТекущийОбъект.НеПроводитьДокументыСНекорректнымиДоговорами = Ложь;
	КонецЕсли;
	
	// Обмен с сайтами.
	Если ТекущийОбъект.ФункциональнаяОпцияИспользоватьОбменССайтами
		И НЕ Константы.ИспользоватьДополнительныеРеквизитыИСведения.Получить() Тогда
		
		Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьИнтерфейс();
	ОбменССайтом.ОбновитьПараметрыСеанса();
	ОбновитьПовторноИспользуемыеЗначения();
	
	УстановитьДоступностьРеквизитовОбменаДанными();
	
	Если ИспользованиеОбменаДаннымиВключено Тогда
		
		СтрокаСообщения = НСтр("ru = 'Для использования обмена данными рекомендуется включить использование Журнала регистрации
		|В противном случае, запись событий в Журнал регистрации не будет произведена. 
		|Включить сейчас?'");
		ОбщегоНазначенияКлиент.ПроверитьВключениеЖурналаРегистрации( , , СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура - обработчик нажатия ссылки НазадНаГлавнуюСтраницу.
//
&НаКлиенте
Процедура НазадНаГлавнуюСтраницуНажатие(Элемент)
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстСообщения = НСтр("ru = 'Данные еще не записаны! Возврат возможен только после записи данных! Записать?'");
		Оповещение = Новый ОписаниеОповещения("НазадНаГлавнуюСтраницуНажатиеЗавершение",ЭтаФорма);
		ПоказатьВопрос(Оповещение,ТекстСообщения, Режим, 0);
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НазадНаГлавнуюСтраницуНажатиеЗавершение(Ответ,Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ФормаЗаписана = ЭтаФорма.Записать();
		Если ФормаЗаписана Тогда
			ЭтаФорма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// Процедура - обработчик нажатия ссылки НастройкаСинхронизацииДанных.
//
&НаКлиенте
Процедура НастройкаСинхронизацииДанныхНажатие(Элемент)
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстСообщения = НСтр("ru = 'Данные еще не записаны! Возврат возможен только после записи данных! Записать?'");
		Ответ = Вопрос(ТекстСообщения, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ФормаЗаписана = ЭтаФорма.Записать();
			Если НЕ ФормаЗаписана Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьСинхронизациюДанных Тогда
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ОткрытьФорму("ОбщаяФорма.СинхронизацияДанныхВМоделиСервиса");
		Иначе
			ОткрытьФорму("ОбщаяФорма.ОбменыДанными");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия ссылки НастройкаОбменаССайтами.
//
&НаКлиенте
Процедура НастройкаОбменаССайтамиНажатие(Элемент)
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстСообщения = НСтр("ru = 'Данные еще не записаны! Переход к настройкам возможен только после записи данных! Записать?'");
		Оповещение = Новый ОписаниеОповещения("НастройкаОбменаССайтамиНажатиеЗавершение",ЭтаФорма);
		ПоказатьВопрос(Оповещение,ТекстСообщения, Режим, 0);
	КонецЕсли;
	
	ОткрытьФорму("ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОбменаССайтамиНажатиеЗавершение(Ответ,Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
		ОткрытьФорму("ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия реквизита КонтрольДоговоровПриПроведенииДокументовПомощь.
//
&НаКлиенте
Процедура КонтрольДоговоровПриПроведенииДокументовПомощьНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", "Контроль договоров при проведении документов");
	ПараметрыОткрытия.Вставить("КлючПодсказки", "ФормаНастройкиОбмена_КонтрольДоговоровПриПроведенииДокументов");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);
	
КонецПроцедуры

// Процедура - обработчик нажатия реквизита ПрефиксИнформационнойБазыПомощь.
//
&НаКлиенте
Процедура ПрефиксИнформационнойБазыПомощьНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", "Префикс информационной базы");
	ПараметрыОткрытия.Вставить("КлючПодсказки", "ФормаНастройкиОбмена_ПрефиксИнформационнойБазы");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);
	
КонецПроцедуры

// Процедура - обработчик нажатия реквизита ПрефиксИнформационнойБазыПомощь.
//
&НаКлиенте
Процедура ПрефиксДляОбменаССайтомПомощьНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", "Префикс для обмена с сайтом");
	ПараметрыОткрытия.Вставить("КлючПодсказки", "ФормаНастройкиОбмена_ПрефиксДляОбменаССайтом");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);
	
КонецПроцедуры


// Процедура - обработчик события ПриИзменении реквизита ИспользоватьСинхронизациюДанных.
//
&НаКлиенте
Процедура ИспользоватьСинхронизациюДанныхПриИзменении(Элемент)
	
	УстановитьДоступностьРеквизитовОбменаДанными();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении реквизита ФункциональнаяОпцияИспользоватьОбменССайтами.
//
&НаКлиенте
Процедура ФункциональнаяОпцияИспользоватьОбменССайтамиПриИзменении(Элемент)
	
	Если НаборКонстант.ФункциональнаяОпцияИспользоватьОбменССайтами
		И НЕ НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения Тогда
		
		НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения = Истина;
		
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Включено использование дополнительных реквизитов и сведений.
		|Это необходимо для обмена данными с сайтами.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры




