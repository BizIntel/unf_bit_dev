// Процедура проверяет правильность заполнения реквизитов формы.
//
&НаКлиенте
Процедура ПроверитьЗаполнениеРеквизитовФормы(Отказ)
	
	// Проверка заполненности реквизитов.
	НомерСтроки = 0;
		
	Для каждого СтрокаПредоплата Из ОтобранныеАвансы Цикл
		НомерСтроки = НомерСтроки + 1;
		Если НЕ ЗначениеЗаполнено(СтрокаПредоплата.Документ) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Документ"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаПредоплата.Сумма) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовФормы()

// Процедура рассчитывает итоговую сумму.
//
&НаКлиенте
Процедура РассчитатьСуммаИтог()
	
	СуммаИтог = 0;
	
	Для каждого ТекСтрока Из ОтобранныеАвансы Цикл
		СуммаИтог = СуммаИтог + ТекСтрока.Сумма;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьСуммаИтог()

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Период = Параметры.Период;
	Компания = Параметры.Компания;
	Сотрудник = Параметры.Сотрудник;
	ВалютаДокумента = Параметры.ВалютаДокумента;
	Ссылка = Параметры.Ссылка;
	АдресВыданныеАвансыВХранилище = Параметры.АдресВыданныеАвансыВХранилище;
	ОтобранныеАвансы.Загрузить(ПолучитьИзВременногоХранилища(АдресВыданныеАвансыВХранилище));
	ЗаполнитьАвансы();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РассчитатьСуммаИтог();
	ЗаполнитьАвансы();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик нажатия кнопки ОК.
//
&НаКлиенте
Процедура ОК(Команда)
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеРеквизитовФормы(Отказ);
	
	Если НЕ Отказ Тогда
		ЗаписатьПодборВХранилище();
		Закрыть(КодВозвратаДиалога.OK);
	КонецЕсли;
	
КонецПроцедуры // ОК()

// Процедура - обработчик нажатия кнопки Обновить.
//
&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьАвансы();
	
КонецПроцедуры // Обновить()

// Процедура - обработчик нажатия кнопки ЗапрашиватьСумму.
//
&НаКлиенте
Процедура ЗапрашиватьСумму(Команда)
	
	ЗапрашиватьСумму = НЕ ЗапрашиватьСумму;
	Элементы.ЗапрашиватьСумму.Пометка = ЗапрашиватьСумму;
	
КонецПроцедуры // ЗапрашиватьСумму()

// Процедура помещает результаты подбора в хранилище.
//
&НаСервере
Процедура ЗаписатьПодборВХранилище()
	
	АвансыВХранилище = ОтобранныеАвансы.Выгрузить();
	ПоместитьВоВременноеХранилище(АвансыВХранилище, АдресВыданныеАвансыВХранилище);
	
КонецПроцедуры // ЗаписатьПодборВХранилище()

// Процедура помещает результаты выбора в подбор.
//
&НаКлиенте
Процедура ОстатокАвансовВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Сумма = ТекущаяСтрока.Сумма;
	Если ЗапрашиватьСумму Тогда
		ПоказатьВводЧисла(Новый ОписаниеОповещения("ОстатокАвансовВыборЗначенияЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока, Сумма", ТекущаяСтрока, Сумма)), Сумма, "Введите сумму", , );
		Возврат;
	КонецЕсли;
	
	ОстатокАвансовВыборЗначенияФрагмент(Сумма, ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОстатокАвансовВыборЗначенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	Сумма = ?(Результат = Неопределено, ДополнительныеПараметры.Сумма, Результат);
	
	
	Если НЕ (Результат <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ОстатокАвансовВыборЗначенияФрагмент(Сумма, ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ОстатокАвансовВыборЗначенияФрагмент(Сумма, Знач ТекущаяСтрока)
	
	Перем НоваяСтрока, Строки, СтруктураПоиска;
	
	СтруктураПоиска = Новый Структура("Документ", ТекущаяСтрока.Документ);
	Строки = ОтобранныеАвансы.НайтиСтроки(СтруктураПоиска);
	
	Если Строки.Количество() > 0 Тогда
		НоваяСтрока = Строки[0];
		Сумма = Сумма + НоваяСтрока.Сумма;
	Иначе
		НоваяСтрока = ОтобранныеАвансы.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока.Сумма = Сумма;
	
	Элементы.ОтобранныеАвансы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	РассчитатьСуммаИтог();
	ЗаполнитьАвансы();

КонецПроцедуры // ОстатокАвансовВыборЗначения()

// Процедура - обработчик события НачалоПеретаскивания списка ОстатокАвансов.
//
&НаКлиенте
Процедура ОстатокАвансовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Структура = Новый Структура;
	Структура.Вставить("Документ", ТекущиеДанные.Документ);
	Структура.Вставить("Сумма", ТекущиеДанные.Сумма);
	
	ПараметрыПеретаскивания.Значение = Структура;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
КонецПроцедуры // ОстатокАвансовНачалоПеретаскивания()

&НаКлиенте
// Процедура - обработчик события ПроверкаПеретаскивания списка ОтобранныеАвансы.
//
Процедура ОтобранныеАвансыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	
КонецПроцедуры // ОтобранныеАвансыПроверкаПеретаскивания()

// Процедура - обработчик события Перетаскивание списка ОтобранныеАвансы.
//
&НаКлиенте
Процедура ОтобранныеАвансыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыСтруктура = ПараметрыПеретаскивания.Значение;
	
	Сумма = ПараметрыСтруктура.Сумма;
	Если ЗапрашиватьСумму Тогда
		ПоказатьВводЧисла(Новый ОписаниеОповещения("ОтобранныеАвансыПеретаскиваниеЗавершение", ЭтотОбъект, Новый Структура("ПараметрыСтруктура, Сумма", ПараметрыСтруктура, Сумма)), Сумма, "Введите сумму", , );
		Возврат;
	КонецЕсли;
	
	ОтобранныеАвансыПеретаскиваниеФрагмент(ПараметрыСтруктура, Сумма);
КонецПроцедуры

&НаКлиенте
Процедура ОтобранныеАвансыПеретаскиваниеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыСтруктура = ДополнительныеПараметры.ПараметрыСтруктура;
	Сумма = ?(Результат = Неопределено, ДополнительныеПараметры.Сумма, Результат);
	
	
	Если НЕ (Результат <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ОтобранныеАвансыПеретаскиваниеФрагмент(ПараметрыСтруктура, Сумма);

КонецПроцедуры

&НаКлиенте
Процедура ОтобранныеАвансыПеретаскиваниеФрагмент(Знач ПараметрыСтруктура, Сумма)
	
	Перем НоваяСтрока, Строки, СтруктураПоиска;
	
	СтруктураПоиска = Новый Структура("Документ", ПараметрыСтруктура.Документ);
	Строки = ОтобранныеАвансы.НайтиСтроки(СтруктураПоиска);
	
	Если Строки.Количество() > 0 Тогда
		НоваяСтрока = Строки[0];
		Сумма = Сумма + НоваяСтрока.Сумма;
	Иначе
		НоваяСтрока = ОтобранныеАвансы.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыСтруктура);
	
	НоваяСтрока.Сумма = Сумма;
	
	Элементы.ОтобранныеАвансы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	РассчитатьСуммаИтог();
	ЗаполнитьАвансы();

КонецПроцедуры // ОтобранныеАвансыПеретаскивание()

// Процедура - обработчик события ПриИзменении списка ОтобранныеАвансы.
//
&НаКлиенте
Процедура ОтобранныеАвансыПриИзменении(Элемент)
	
	РассчитатьСуммаИтог();
	ЗаполнитьАвансы();
	
КонецПроцедуры // ОтобранныеАвансыПриИзменении()

// Процедура - обработчик события ПриНачалеРедактирования списка ОтобранныеАвансы.
//
&НаКлиенте
Процедура ОтобранныеАвансыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		РассчитатьСуммаИтог();
		ЗаполнитьАвансы();
	КонецЕсли;
	
КонецПроцедуры // ОтобранныеАвансыПриНачалеРедактирования()

// Процедура заполняет список авансов.
//
&НаСервере
Процедура ЗаполнитьАвансы()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтобранныеАвансы.Документ КАК Документ,
	|	ОтобранныеАвансы.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОтобранныеАвансы
	|ИЗ
	|	&ТаблицаОтобранныеАвансы КАК ОтобранныеАвансы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПодотчетникамиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПодотчетникамиОстатки.Документ КАК Документ,
	|	СУММА(РасчетыСПодотчетникамиОстатки.СуммаВалОстаток) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПодотчетникамиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПодотчетникамиОстатки.Документ КАК Документ,
	|		ЕСТЬNULL(РасчетыСПодотчетникамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПодотчетниками.Остатки(
	|				,
	|				Валюта = &ВалютаДокумента
	|					И Организация = &Организация
	|					И Сотрудник = &Сотрудник) КАК РасчетыСПодотчетникамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтобранныеАвансы.Документ.Дата,
	|		ОтобранныеАвансы.Документ,
	|		-ОтобранныеАвансы.Сумма
	|	ИЗ
	|		ТаблицаОтобранныеАвансы КАК ОтобранныеАвансы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПодотчетниками.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПодотчетниками.Документ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПодотчетниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПодотчетниками.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПодотчетниками.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПодотчетниками КАК ДвиженияДокументаРасчетыСПодотчетниками
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПодотчетниками.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПодотчетниками.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПодотчетниками.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПодотчетниками.Сотрудник = &Сотрудник) КАК РасчетыСПодотчетникамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПодотчетникамиОстатки.ДокументДата,
	|	РасчетыСПодотчетникамиОстатки.Документ
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПодотчетникамиОстатки.СуммаВалОстаток) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ТаблицаОтобранныеАвансы", ОтобранныеАвансы.Выгрузить());
	
	ОстатокАвансов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьДолги()

// Процедура - обработчик события ПередНачаломДобавления списка ОтобранныеАвансы.
//
&НаКлиенте
Процедура ОтобранныеАвансыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры // ОтобранныеАвансыПередНачаломДобавления()
