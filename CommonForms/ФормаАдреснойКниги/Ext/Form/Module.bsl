
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Параметры.ТипКИ) Тогда
		МассивТипов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Параметры.ТипКИ, ",", , Истина);
		Для Каждого ИмяТипа Из МассивТипов Цикл
			Если ВРег(ИмяТипа) = ВРег("АдресЭлектроннойПочты") Тогда
				ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			ИначеЕсли ВРег(ИмяТипа) = ВРег("Телефон") Тогда
				ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			ИначеЕсли ВРег(ИмяТипа) = ВРег("Адрес") Тогда
				ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипыКИ.Количество() = 0 Тогда
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	
	СписокКонтрагентов.Параметры.УстановитьЗначениеПараметра("ТипыКИ", ТипыКИ);
	Если НЕ Параметры.ТекущийКонтрагент.Пустая() Тогда
		Элементы.СписокКонтрагентов.ТекущаяСтрока = Параметры.ТекущийКонтрагент;
	КонецЕсли;
	
	КлассификацияКонтактов.ОбновитьЗначенияОтбораПериодов(ЭтотОбъект);
	КлассификацияКонтактов.ОбновитьЗначенияОтбораТегов(ЭтотОбъект, 45);
	КлассификацияКонтактов.ОбновитьЗначенияОтбораСегментов(ЭтотОбъект, 45);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УникальныйИдентификаторВладельца = ВладелецФормы.УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПустаяСтрока(АдресВХранилище) И ВыбранныеАдресаты.ПолучитьЭлементы().Количество() > 0 Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Выбранные адресаты не перенесены.'");
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Перенести отмеченных адресатов?'");
		
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемПереносПредложен", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да, НСтр("ru = 'Адресная книга'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПослеЗаписиТега" Или ИмяСобытия = "ПослеЗаписиСегмента" Тогда
		ОбновитьПанельЗначенийОтборовСервер(ИмяСобытия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
Процедура СписокКонтрагентовВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ВыполнитьПеренос(Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПередУдалением(Элемент, Отказ)
	
	Для Каждого ИД Из Элемент.ВыделенныеСтроки Цикл
		СтрокаАдресата = ВыбранныеАдресаты.НайтиПоИдентификатору(ИД);
		Если НЕ ТипЗнч(СтрокаАдресата.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		ВыполнитьПеренос(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПометкаПриИзменении(Элемент)
	
	УстановитьПометкуПодчиненныхРекурсивно(Элементы.ВыбранныеАдресаты.ТекущиеДанные.Пометка, Элементы.ВыбранныеАдресаты.ТекущиеДанные.ПолучитьЭлементы());
	Если Элементы.ВыбранныеАдресаты.ТекущиеДанные.Пометка И ТипЗнч(Элементы.ВыбранныеАдресаты.ТекущиеДанные.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Родитель = Элементы.ВыбранныеАдресаты.ТекущиеДанные.ПолучитьРодителя();
		Родитель.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыСегодняНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтрагентов", "Сегодня", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗа3ДняНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтрагентов", "3Дня", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗаНеделюНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтрагентов", "Неделя", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗаМесяцНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтрагентов", "Месяц", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыПриИзменении(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтрагентов", "ПроизвольныйПериод", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТегОтборНажатие(Элемент, СтандартнаяОбработка)
	
	Пометка = КлассификацияКонтактовКлиент.ТегОтборНажатие(ЭтотОбъект, "СписокКонтрагентов", Элемент, СтандартнаяОбработка);
	Если НЕ Пометка = Неопределено Тогда
		ИзменитьЦветЭлементаСервер(Пометка, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СегментОтборНажатие(Элемент, СтандартнаяОбработка)
	
	Пометка = КлассификацияКонтактовКлиент.СегментОтборНажатие(ЭтотОбъект, "СписокКонтрагентов", Элемент, СтандартнаяОбработка);
	Если НЕ Пометка = Неопределено Тогда
		ИзменитьЦветЭлементаСервер(Пометка, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	АдресВХранилище = АдресВыбранныхАдресатовВоВременномХранилище();
	Закрыть(АдресВХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	АдресВХранилище = "ЗакрытьБезПереноса";
	Закрыть(АдресВХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВВыбранные(Команда)
	
	ВыполнитьПеренос(Элементы.СписокКонтрагентов.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИзВыбранных(Команда)
	
	Для Каждого ИД Из Элементы.ВыбранныеАдресаты.ВыделенныеСтроки Цикл
		СтрокаАдресата = ВыбранныеАдресаты.НайтиПоИдентификатору(ИД);
		Если ТипЗнч(СтрокаАдресата.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокиПервыйУровень = ВыбранныеАдресаты.ПолучитьЭлементы();
			СтрокиПервыйУровень.Удалить(СтрокаАдресата);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиКонтрагентов(Команда)
	
	ИзменитьПометкиКонтрагентов(Истина, ВыбранныеАдресаты);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиКонтрагентов(Команда)
	
	ИзменитьПометкиКонтрагентов(Ложь, ВыбранныеАдресаты);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиКонтактныхЛиц(Команда)
	
	ИзменитьПометкиКонтактныхЛиц(Истина, ВыбранныеАдресаты);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиКонтактныхЛиц(Команда)
	
	ИзменитьПометкиКонтактныхЛиц(Ложь, ВыбранныеАдресаты);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из ВыбранныеАдресаты.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.ВыбранныеАдресаты.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из ВыбранныеАдресаты.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.ВыбранныеАдресаты.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериод(Команда)
	
	КлассификацияКонтактовКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТеги(Команда)
	
	КлассификацияКонтактовКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСегменты(Команда)
	
	КлассификацияКонтактовКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область РезультатыИнтерактивныхДействий

&НаКлиенте
Процедура ПередЗакрытиемПереносПредложен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		АдресВХранилище = АдресВыбранныхАдресатовВоВременномХранилище();
		Закрыть(АдресВХранилище);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		АдресВХранилище = "ЗакрытьБезПереноса";
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереносЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НеПоказыватьВопросВыбораГруппы = РезультатВыбора.БольшеНеЗадаватьЭтотВопрос;
	
	Если РезультатВыбора.Значение = КодВозвратаДиалога.Да Тогда
		ДобавитьВыбранныхАдресатов(ДополнительныеПараметры.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Процедура ВыполнитьПеренос(знач Контрагенты)
	
	Если НеПоказыватьВопросВыбораГруппы = Ложь Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.СписокКонтрагентов.ВыделенныеСтроки Цикл
			Данные = Элементы.СписокКонтрагентов.ДанныеСтроки(ВыделеннаяСтрока);
			Если ВыделеннаяСтрока.Пустая() Или Данные.ЭтоГруппа Тогда
				ПараметрыВопроса = Новый Структура;
				ПараметрыВопроса.Вставить("Заголовок", НСтр("ru = 'Подтверждение выбора группы'"));
				ПараметрыВопроса.Вставить("ТекстСообщения", НСтр("ru = 'Выбрать всех контрагентов группы?'"));
				ПараметрыВопроса.Вставить("Кнопки", "РежимДиалогаВопрос.ДаНет");
				ПараметрыВопроса.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Истина);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПереносЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", Элементы.СписокКонтрагентов.ВыделенныеСтроки));
				ОткрытьФорму("ОбщаяФорма.Вопрос", ПараметрыВопроса, ЭтотОбъект,,,, ОписаниеОповещения);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьВыбранныхАдресатов(Контрагенты);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныхАдресатов(знач Контрагенты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КонтрагентыКонтактнаяИнформация.Вид,
		|	КонтрагентыКонтактнаяИнформация.Представление,
		|	ВЫБОР
		|		КОГДА КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|			ТОГДА 0
		|		КОГДА КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|			ТОГДА 3
		|		КОГДА КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|			ТОГДА 0
		|	КОНЕЦ КАК ИндексКартинки,
		|	КонтрагентыКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
		|ПОМЕСТИТЬ втКИКонтрагентов
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка В ИЕРАРХИИ(&Контрагенты)
		|	И КонтрагентыКонтактнаяИнформация.Тип В(&ТипыКИ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.Представление КАК КонтрагентПредставление,
		|	Контрагенты.КонтактноеЛицо КАК ОсновноеКонтактноеЛицо,
		|	ЕСТЬNULL(втКИКонтрагентов.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
		|	ЕСТЬNULL(втКИКонтрагентов.Представление, """") КАК ЗначениеКИ,
		|	втКИКонтрагентов.ИндексКартинки КАК ИндексКартинки,
		|	Контрагенты.ДатаСоздания
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтрагентов КАК втКИКонтрагентов
		|		ПО Контрагенты.Ссылка = втКИКонтрагентов.Ссылка
		|ГДЕ
		|	Контрагенты.Ссылка В ИЕРАРХИИ(&Контрагенты)
		|	И Контрагенты.ЭтоГруппа = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтрагентПредставление,
		|	втКИКонтрагентов.Порядок
		|ИТОГИ
		|	МАКСИМУМ(ОсновноеКонтактноеЛицо)
		|ПО
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КонтактныеЛицаКонтактнаяИнформация.Вид,
		|	КонтактныеЛицаКонтактнаяИнформация.Представление,
		|	ВЫБОР
		|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|			ТОГДА 0
		|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|			ТОГДА 3
		|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|			ТОГДА 0
		|	КОНЕЦ КАК ИндексКартинки,
		|	КонтактныеЛицаКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
		|ПОМЕСТИТЬ втКИКонтактныхЛиц
		|ИЗ
		|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец В ИЕРАРХИИ(&Контрагенты)
		|	И КонтактныеЛицаКонтактнаяИнформация.Тип В(&ТипыКИ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактныеЛица.Владелец КАК Контрагент,
		|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
		|	КонтактныеЛица.Представление КАК КонтактноеЛицоПредставление,
		|	ЕСТЬNULL(втКИКонтактныхЛиц.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
		|	ЕСТЬNULL(втКИКонтактныхЛиц.Представление, """") КАК ЗначениеКИ,
		|	втКИКонтактныхЛиц.ИндексКартинки
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтактныхЛиц КАК втКИКонтактныхЛиц
		|		ПО КонтактныеЛица.Ссылка = втКИКонтактныхЛиц.Ссылка
		|ГДЕ
		|	КонтактныеЛица.Владелец В ИЕРАРХИИ(&Контрагенты)
		|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтактноеЛицоПредставление,
		|	втКИКонтактныхЛиц.Порядок
		|ИТОГИ
		|	МАКСИМУМ(Контрагент)
		|ПО
		|	КонтактноеЛицо";
	
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.УстановитьПараметр("ТипыКИ", ТипыКИ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаКонтрагентов = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКонтактныхЛиц = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Отбор = Новый Структура("Контрагент");
	
	Пока ВыборкаКонтрагентов.Следующий() Цикл
		
		Если СписокКонтрагентов.Отбор.Элементы.Количество() > 0 Тогда
			КонтрагентПодходитПоОтбору = Истина;
			Для Каждого ЭлементОтбора Из СписокКонтрагентов.Отбор.Элементы Цикл
				Если ЭлементОтбора.Использование = Истина
					И ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
					И ЭлементОтбора.Представление = "ОтборПериод" Тогда
					
					Если ВыборкаКонтрагентов.ДатаСоздания < ЭлементОтбора.Элементы[0].ПравоеЗначение
						Или ВыборкаКонтрагентов.ДатаСоздания > ЭлементОтбора.Элементы[1].ПравоеЗначение Тогда
						
						КонтрагентПодходитПоОтбору = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЭлементОтбора.Использование = Истина
					И ТипЗнч(ЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
					И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка") Тогда
					
					Если ЭлементОтбора.ПравоеЗначение[0].Значение.Найти(ВыборкаКонтрагентов.Контрагент) = Неопределено Тогда
						КонтрагентПодходитПоОтбору = Ложь;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не КонтрагентПодходитПоОтбору Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		КонтрагентЕстьВВыбранных = Ложь;
		СтрокиПервыйУровень = ВыбранныеАдресаты.ПолучитьЭлементы();
		Для Каждого СтрокаПервыйУровень Из СтрокиПервыйУровень Цикл
			Если СтрокаПервыйУровень.Значение = ВыборкаКонтрагентов.Контрагент Тогда
				КонтрагентЕстьВВыбранных = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если КонтрагентЕстьВВыбранных Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПервыйУровень = СтрокиПервыйУровень.Добавить();
		СтрокаПервыйУровень.Пометка = Истина;
		СтрокаПервыйУровень.Значение = ВыборкаКонтрагентов.Контрагент;
		СтрокаПервыйУровень.ПредставлениеЗначения = ВыборкаКонтрагентов.КонтрагентПредставление;
		СтрокаПервыйУровень.ИндексКартинки = 1;
		
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		
		ВыборкаКИ_Контрагентов = ВыборкаКонтрагентов.Выбрать();
		Пока ВыборкаКИ_Контрагентов.Следующий() Цикл
			
			Если ВыборкаКИ_Контрагентов.ВидКИ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
			СтрокаВторойУровень.Пометка = Истина;
			СтрокаВторойУровень.Значение = ВыборкаКИ_Контрагентов.ВидКИ;
			СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКИ_Контрагентов.ЗначениеКИ;
			СтрокаВторойУровень.ИндексКартинки = ВыборкаКИ_Контрагентов.ИндексКартинки;
			
		КонецЦикла;
		
		ВыборкаКонтактныхЛиц.Сбросить();
		Отбор.Контрагент = ВыборкаКонтрагентов.Контрагент;
		Пока ВыборкаКонтактныхЛиц.НайтиСледующий(Отбор) Цикл
			
			СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
			СтрокаВторойУровень.Пометка = Ложь;
			СтрокаВторойУровень.Значение = ВыборкаКонтактныхЛиц.КонтактноеЛицо;
			СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКонтактныхЛиц.КонтактноеЛицоПредставление;
			СтрокаВторойУровень.ИндексКартинки = 2;
			
			СтрокиТретийУровень = СтрокаВторойУровень.ПолучитьЭлементы();
			
			ВыборкаКИ_КонтактныхЛиц = ВыборкаКонтактныхЛиц.Выбрать();
			Пока ВыборкаКИ_КонтактныхЛиц.Следующий() Цикл
				
				Если ВыборкаКИ_КонтактныхЛиц.ВидКИ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТретийУровень = СтрокиТретийУровень.Добавить();
				СтрокаТретийУровень.Пометка = Ложь;
				СтрокаТретийУровень.Значение = ВыборкаКИ_КонтактныхЛиц.ВидКИ;
				СтрокаТретийУровень.ПредставлениеЗначения = ВыборкаКИ_КонтактныхЛиц.ЗначениеКИ;
				СтрокаТретийУровень.ИндексКартинки = ВыборкаКИ_КонтактныхЛиц.ИндексКартинки;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуПодчиненныхРекурсивно(Пометка, СтрокиДерева)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокаДерева.Пометка = Пометка;
		ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		Если ПодчиненныеСтрокиДерева.Количество() > 0 Тогда
			УстановитьПометкуПодчиненныхРекурсивно(Пометка, ПодчиненныеСтрокиДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПометкиКонтрагентов(Пометка, Дерево)
	
	СтрокиПервыйУровень = Дерево.ПолучитьЭлементы();
	Для Каждого СтрокаПервыйУровень Из СтрокиПервыйУровень Цикл
		СтрокаПервыйУровень.Пометка = Пометка;
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		Для Каждого СтрокаВторойУровень Из СтрокиВторойУровень Цикл
			Если ТипЗнч(СтрокаВторойУровень.Значение) <> Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				Продолжить;
			КонецЕсли;
			СтрокаВторойУровень.Пометка = Пометка;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПометкиКонтактныхЛиц(Пометка, Дерево)
	
	СтрокиПервыйУровень = Дерево.ПолучитьЭлементы();
	Для Каждого СтрокаПервыйУровень Из СтрокиПервыйУровень Цикл
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		Для Каждого СтрокаВторойУровень Из СтрокиВторойУровень Цикл
			Если ТипЗнч(СтрокаВторойУровень.Значение) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
				Продолжить;
			КонецЕсли;
			СтрокаВторойУровень.Пометка = Пометка;
			СтрокиТретийУровень = СтрокаВторойУровень.ПолучитьЭлементы();
			Для Каждого СтрокаТретийУровень Из СтрокиТретийУровень Цикл
				СтрокаТретийУровень.Пометка = Пометка;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресВыбранныхАдресатовВоВременномХранилище()
	
	ТаблицаАдресатов = ПреобразоватьДеревоАдресатовВТаблицуЗначений(ВыбранныеАдресаты);
	Возврат ПоместитьВоВременноеХранилище(ТаблицаАдресатов, УникальныйИдентификаторВладельца);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьДеревоАдресатовВТаблицуЗначений(Дерево)
	
	ТаблицаАдресатов = Новый ТаблицаЗначений;
	ТаблицаАдресатов.Колонки.Добавить("Контакт", Новый ОписаниеТипов("СправочникСсылка.Контрагенты,СправочникСсылка.КонтактныеЛица"));
	ТаблицаАдресатов.Колонки.Добавить("КакСвязаться", Новый ОписаниеТипов("Строка"));
	
	СтрокиПервыйУровень = Дерево.ПолучитьЭлементы();
	Для Каждого СтрокаПервыйУровень Из СтрокиПервыйУровень Цикл
		
		Если СтрокаПервыйУровень.Пометка Тогда
			НоваяСтрокаКонтрагент = ТаблицаАдресатов.Добавить();
			НоваяСтрокаКонтрагент.Контакт = СтрокаПервыйУровень.Значение;
		КонецЕсли;
		
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого СтрокаВторойУровень Из СтрокиВторойУровень Цикл
			
			Если СтрокаПервыйУровень.Пометка И ТипЗнч(СтрокаВторойУровень.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") И СтрокаВторойУровень.Пометка Тогда
				
				Если НоваяСтрокаКонтрагент = Неопределено Тогда
					НоваяСтрокаКонтрагент = ТаблицаАдресатов.Добавить();
				КонецЕсли;
				
				НоваяСтрокаКонтрагент.Контакт = СтрокаПервыйУровень.Значение;
				НоваяСтрокаКонтрагент.КакСвязаться = СтрокаВторойУровень.ПредставлениеЗначения;
				НоваяСтрокаКонтрагент = Неопределено;
				
			ИначеЕсли ТипЗнч(СтрокаВторойУровень.Значение) = Тип("СправочникСсылка.КонтактныеЛица") И СтрокаВторойУровень.Пометка Тогда
				
				НоваяСтрокаКонтактноеЛицо = ТаблицаАдресатов.Добавить();
				НоваяСтрокаКонтактноеЛицо.Контакт = СтрокаВторойУровень.Значение;
				
				СтрокиТретийУровень = СтрокаВторойУровень.ПолучитьЭлементы();
				
				Для Каждого СтрокаТретийУровень Из СтрокиТретийУровень Цикл
					
					Если ТипЗнч(СтрокаТретийУровень.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") И СтрокаТретийУровень.Пометка Тогда
						
						Если НоваяСтрокаКонтактноеЛицо = Неопределено Тогда
							НоваяСтрокаКонтактноеЛицо = ТаблицаАдресатов.Добавить();
						КонецЕсли;
						
						НоваяСтрокаКонтактноеЛицо.Контакт = СтрокаВторойУровень.Значение;
						НоваяСтрокаКонтактноеЛицо.КакСвязаться = СтрокаТретийУровень.ПредставлениеЗначения;
						НоваяСтрокаКонтактноеЛицо = Неопределено;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаАдресатов;
	
КонецФункции

&НаСервере
Процедура ИзменитьЦветЭлементаСервер(Пометка, ИмяЭлемента)
	
	КлассификацияКонтактов.ИзменитьЦветЭлементаОтбора(ЭтотОбъект, Пометка, ИмяЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельЗначенийОтборовСервер(ИмяСобытия)
	
	Если ИмяСобытия = "ПослеЗаписиТега" Тогда
		КлассификацияКонтактов.ОбновитьЗначенияОтбораТегов(ЭтотОбъект, 45);
	ИначеЕсли ИмяСобытия = "ПослеЗаписиСегмента" Тогда
		КлассификацияКонтактов.ОбновитьЗначенияОтбораСегментов(ЭтотОбъект, 45);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
