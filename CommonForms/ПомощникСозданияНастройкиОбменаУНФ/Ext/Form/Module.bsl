
&НаКлиенте
Перем ХронологияПереключенияСтраниц;

&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ПодключаемыйМодуль;

&НаКлиенте
Перем ОповещениеПослеЗагрузкиВнешнейКомпоненты;

&НаКлиенте
Перем СертификатXML;

&НаКлиенте
Перем МенеджерКриптографииНаКлиенте;

&НаКлиенте
Перем ОтпечаткиСертификатов;

&НаКлиенте
Перем ВерсияВКСбербанк;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадания = Нстр("ru = 'Обновление списка банков, поддерживающих обмен DirectBank'");
	
	ФоновыеЗадания.Выполнить("ОбменСБанкамиСлужебный.ЗагрузитьСписокDirectBankАсинхронно", , , НаименованиеЗадания);
	
	ЕстьПравоДобавленияНастройкиЭДО = ПравоДоступа("Добавление", Метаданные.Справочники.НастройкиОбменСБанками);
	
	Если Не ЕстьПравоДобавленияНастройкиЭДО Тогда
		ТекстСообщения = НСтр("ru = 'У вас нет прав настройки прямого обмена с банком.
									|Обратитесь к администратору'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат;
	КонецЕсли;
	
	Элементы.Шаги.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.КомандыНавигации.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыСмешанногоРежима.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыАутентификации.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	
	ИспользуетсяНесколькоОрганизацийЭД = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции(
		"ИспользоватьНесколькоОрганизацийЭД");
		
	Если Не ИспользуетсяНесколькоОрганизацийЭД Тогда
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		Если ЗначениеЗаполнено(Организация) Тогда
			Элементы.Организация.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Банк) Тогда
		Банк = Параметры.Банк;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИдентификаторОрганизации) Тогда
		ИдентификаторОрганизации = Параметры.ИдентификаторОрганизации;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Организация")
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Организация) Тогда
		Организация = Параметры.ЗначенияЗаполнения.Организация;
	КонецЕсли;
	
	Если  Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Банк")
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Банк) Тогда
		Банк = Параметры.ЗначенияЗаполнения.Банк;
	КонецЕсли;
	
	Элементы.ГруппаВнешнийМодуль.Видимость = Ложь;
	
	АдресСервера = "https://";
	АдресСервераНастроек = "https://";
	
	Если Параметры.НеИспользоватьРучноеЗаполнение Тогда
		Элементы.РучноеЗаполнение.Видимость = Ложь;
		НеИспользоватьРучноеЗаполнение = Параметры.НеИспользоватьРучноеЗаполнение;
	КонецЕсли;
	
	Элементы.ВалютаДенежныхСредств.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаДенежныхСредств = Константы.ВалютаУчета.Получить();
	
	Элементы.ПропуститьПодключение.Видимость = НастройкаОбмена.Пустая();
	
	Элементы.КомандыНавигации.ТекущаяСтраница = Элементы.Отмена;
	
	РасширенныйРежим = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользуетсяТестовыйРежим = Ложь;
	
	ОбменСБанкамиПереопределяемый.ПроверитьИспользованиеТестовогоРежима(ИспользуетсяТестовыйРежим);
	
	СохранитьЛогин = Истина;
	
	Выборка = Справочники.КлассификаторБанковРФ.Выбрать();
	Если Выборка.Следующий() Тогда
		КлассификаторЗаполнен = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ХронологияПереключенияСтраниц = Новый Массив;
	
	#Если ВебКлиент Тогда
		Элементы.ПутьКФайлуВнешнегоМодуля.РедактированиеТекста = Ложь;
		Элементы.ПутьКФайлуКомпонентыСбербанка.РедактированиеТекста = Ложь;
		Элементы.ПутьКФайлуСертификатаСбербанка.РедактированиеТекста = Ложь;
		Элементы.ПутьКФайлуНастроек.РедактированиеТекста = Ложь;
	#КонецЕсли
	
	ИзменитьЗаголовок();
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Банк) Тогда
		
		ПереключитьШагПослеВыбораОрганизацииИБанка();
		
	КонецЕсли;
	
	Если НЕ КлассификаторЗаполнен Тогда
		Состояние(
		НСтр("ru = 'Обновление классификатора банков'"),,,
		БиблиотекаКартинок.ДлительнаяОперация48);
		ОбновитьКлассификатор();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗакрытьФорму 
		И ((Элементы.Шаги.ТекущаяСтраница <> Элементы.СтраницаФинал И Элементы.Шаги.ТекущаяСтраница <> Элементы.СтраницаДобавлениеСчета) // не достигнут последний шаг
		ИЛИ Элементы.ДекорацияНеПодключено.Видимость) Тогда // произошла ошибка
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'DirectBank не подключен.
							|Прервать работу помощника?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОЗакрытииПомощника", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере(ИдентификаторЗадания)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКФайлуКомпонентыСбербанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранФайлВКСбербанка = Ложь;
	#Если ВебКлиент Тогда
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПослеВыбораФайлаВКСбербанкаИзВеб", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении, АдресФайлаВКСбербанка, "*.zip", , УникальныйИдентификатор);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		Фильтр = НСтр("ru = 'Внешний модуль'") + "(*.zip)|*.zip";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = Нстр("ru = 'Выберите файл внешнего модуля банка'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаВКСбербанкаИзТонкогоКлиента", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатАутентификацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПодключитьОбработчикОжидания("ЗаполнитьСписокВыбораСертификатовАутентификацииСВыводомОшибки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатСмешанныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПодключитьОбработчикОжидания("ЗаполнитьСписокВыбораСертификатовАутентификацииСВыводомОшибки", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуСертификатаСбербанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранФайлСертификатаСбербанка = Ложь;
	#Если ВебКлиент Тогда
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПослеВыбораФайлаСертификатаСбербанкаИзВеб", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении, АдресФайлаСертификатаСбербанка, "*.cer", , УникальныйИдентификатор);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		Фильтр = НСтр("ru = 'Сертификат банка'") + "(*.cer)|*.cer";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл сертификата банка'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаСертификатаСбербанкаИзТонкогоКлиента", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СпособАутентификацииРучнойРежимПриИзменении(Элемент)
	
	Если СпособАутентификации Тогда
		Элементы.СтраницыАутентификации.ТекущаяСтраница = Элементы.СтраницаПользовательАутентификации;
	Иначе
		Элементы.СтраницыАутентификации.ТекущаяСтраница = Элементы.СтраницаСертификатАутентификации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуВнешнегоМодуляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранФайлВнешнегоМодуля = Ложь;
	#Если ВебКлиент Тогда
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПослеВыбораФайлаВнешнегоМодуляИзВеб", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении, АдресФайлаВнешнегоМодуля, "*.epf", , УникальныйИдентификатор);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		Фильтр = НСтр("ru = 'Внешний модуль'") + "(*.epf)|*.epf";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл внешнего модуля'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаВнешнегоМодуляИзТонкогоКлиента", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяКриптографияПриИзменении(Элемент)
	
	Элементы.ГруппаСертификаты.Доступность = ИспользуетсяКриптография;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособАутентификацииПриИзменении(Элемент)
	
	Если СпособАутентификации=1 Тогда
		Элементы.СтраницыСмешанногоРежима.ТекущаяСтраница = Элементы.СтраницаПользовательСмешанный;
	ИначеЕсли СпособАутентификации=2 Тогда
		Элементы.СтраницыСмешанногоРежима.ТекущаяСтраница = Элементы.СтраницаНастройкиИзФайла;
	Иначе
		Элементы.СтраницыСмешанногоРежима.ТекущаяСтраница = Элементы.СтраницаСертификатСмешанный;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяВнешнийМодульПриИзменении(Элемент)
	
	Элементы.ГруппаВнешнийМодуль.Видимость = ИспользуетсяВнешнийМодуль;
	Если ИспользуетсяВнешнийМодуль Тогда
		СпособАутентификации = 1;
		ИспользуетсяКриптография = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияНажатие(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОткрытьИнструкциюПоРаботеСПрограммами();
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	ИзменитьБанк();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьБанк()

	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		Возврат;
	КонецЕсли; 
	ВнешняяКомпонентаЗагружена = Ложь;
	ИзменитьЗаголовок();
	СледующийШаг();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Сертификаты.Очистить();
	ИзменитьЗаголовок()
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранФайлНастроекОбмена = Ложь;
	#Если ВебКлиент Тогда
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПослеВыбораФайлаНастроекОбменаИзВеб", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении, АдресФайлаНастроекОбмена, "*.xml", , УникальныйИдентификатор);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		Фильтр = НСтр("ru = 'Файл настроек обмена'") + "(*.xml)|*.xml";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = Нстр("ru = 'Выберите файл настроек обмена'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаНастроекОбменаИзТонкогоКлиента", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуОбменаНажатие(Элемент)
	
	ПоказатьЗначение( , НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛоготипБанкаНажатие(Элемент)
	
	Номер = Число(СтрЗаменить(Элемент.Имя, "ЛоготипБанка", ""));
	ОписаниеБанка = ДанныеПопулярныхБанков(Номер);
	ВывестиСписокБанков(ОписаниеБанка.СтрокаПоиска, Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура БанкАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = НайтиБанки(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВывестиСписокБанков(Элемент.ТекстРедактирования);
	Элемент.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОчистка(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтраницыБанки.ТекущаяСтраница=Элементы.СтраницаНайденныеБанки Тогда
		Элементы.СтраницыБанки.ТекущаяСтраница = Элементы.СтраницаПопулярныеБанки;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли; 
	Если ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.КлассификаторБанковРФ") Тогда
		НайтиСоздатьБанк(ВыбранноеЗначение);
		Если ЗначениеЗаполнено(Банк) Тогда
		    ИзменитьБанк();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НайденныеБанкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтр = Элементы.НайденныеБанки.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ВыбранноеЗначение = ТекСтр.Значение;
	НайтиСоздатьБанк(ВыбранноеЗначение);
	Если ЗначениеЗаполнено(Банк) Тогда
	    ИзменитьБанк();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификаты

&НаКлиенте
Процедура СертификатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗаполнитьОрганизациюВСертификате(ВыбранноеЗначение, Организация);
	
	НовСтрока = Сертификаты.Добавить();
	НовСтрока.Сертификат = ВыбранноеЗначение;
	
	ПеренумероватьСертификаты();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПриИзменении(Элемент)
	
	ПеренумероватьСертификаты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	ОчиститьСообщения();
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменСИспользованиемВнешнейКомпоненты") Тогда
		
		ОповещениеПослеЗагрузкиВнешнейКомпоненты = Новый ОписаниеОповещения(
			"ДобавитьСертификатЧерезВнешнююКомпоненту", ЭтотОбъект);
		ЗагрузитьВнешнююКомпонентуССервераБанка();
		
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		
		Устройства = ОбменСБанкамиСлужебныйКлиент.ПодключенныеХранилищаЧерезДополнительнуюОбработку(ПодключаемыйМодуль);
		Если Устройства.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		СписокВыбора = Новый СписокЗначений;
		Для Каждого Элемент Из Устройства Цикл
			ТекЗапись = СписокВыбора.Добавить(Элемент);
		КонецЦикла;
		
		Если Устройства.Количество() > 1 Тогда
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораКлючаЧерезДополнительнуюОбработку", ЭтотОбъект);
			ЗаголовокВыбора = НСтр("ru = 'Выберите электронный ключ:'");
			СписокВыбора.ПоказатьВыборЭлемента(ОповещениеОЗакрытии, ЗаголовокВыбора);
		Иначе
			ПослеВыбораКлючаЧерезДополнительнуюОбработку(ТекЗапись)
		КонецЕсли;
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен")
		ИЛИ ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн") Тогда
		
		ЭлектроннаяПодписьКлиент.СертификатНачалоВыбораСПодтверждением(Элементы.Сертификаты, Неопределено, Ложь, Ложь);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПровестиАутентификациюПослеПодключенияВКСбербанка", ЭтотОбъект);
		ПараметрыПодключения = Новый Структура;
		ПараметрыПодключения.Вставить("АдресВК", АдресФайлаВКСбербанка);
		ПараметрыПодключения.Вставить("ИмяВК", "VPNKeyTLS");
		
		ОбменСБанкамиСлужебныйКлиент.ПодключитьВнешнююКомпонентуБанка(
			ОписаниеОповещения, АдресФайлаВКСбербанка, "VPNKeyTLS");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	Если Элементы.Шаги.ТекущаяСтраница=Элементы.СтраницаДобавлениеСчета Тогда
		Отказ = Ложь;
		Если Не ЗначениеЗаполнено(НомерСчета) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите номер счета'"), , "НомерСчета", , Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите валюту счета'"), , "ВалютаДенежныхСредств", , Отказ);
		КонецЕсли;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Счет) Тогда
			СохранитьНовыйСчет();
		КонецЕсли; 
	КонецЕсли;
	
	Оповестить("ПослеЗаписиБанковскогоСчета");
	Закрыть(НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	СледующийШаг();

КонецПроцедуры

&НаКлиенте
Процедура СледующийШаг()

	ОчиститьСообщения();
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаВыборОрганизацииИБанка Тогда
		
		Отказ = Ложь;
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите организацию'"), , "Организация", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Банк) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите банк'"), , "Банк", , Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаВыборОрганизацииИБанка);
		
		ПереключитьШагПослеВыбораОрганизацииИБанка();
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаЗапросИспользованияВнешнегоМодуля Тогда
		
		Если ИспользуетсяВнешнийМодуль Тогда
			
			#Если ВебКлиент Тогда
				Если Не ВыбранФайлВнешнегоМодуля Тогда
					ТекстСообщения = НСтр("ru = 'Не выбран файл внешнего модуля'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуВнешнегоМодуля");
					Возврат;
				КонецЕсли;
			#Иначе
				Если ЗначениеЗаполнено(ПутьКФайлуВнешнегоМодуля) Тогда
					Попытка
						ДвоичныеДанныеВнешнегоМодуля = Новый ДвоичныеДанные(ПутьКФайлуВнешнегоМодуля);
					Исключение
						ТекстСообщения = НСтр("ru = 'Неверно указан путь к файлу внешнего модуля'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуВнешнегоМодуля");
						Возврат;
					КонецПопытки;
					АдресФайлаВнешнегоМодуля = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВнешнегоМодуля, УникальныйИдентификатор);
				Иначе
					ТекстСообщения = НСтр("ru = 'Не выбран файл внешнего модуля'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуВнешнегоМодуля");
					Возврат;
				КонецЕсли;
			#КонецЕсли
			
			Файл = Новый Файл(ПутьКФайлуВнешнегоМодуля);
			Если Не Файл.Расширение = ".epf" Тогда
				ТекстСообщения = НСтр("ru = 'Указан неверный файл.
											|Файл внешнего модуля должен иметь расширение ""epf""'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуВнешнегоМодуля");
				Возврат;
			КонецЕсли;

			Оповещение = Новый ОписаниеОповещения("ПослеИнициализацииДополнительнойОбработки", ЭтотОбъект);
			ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку");
			НачатьИнициализациюДополнительнойОбработки(Оповещение);
		Иначе
			ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаЗапросИспользованияВнешнегоМодуля);
			СменитьСтраницуШаги(Элементы.СтраницаАсинхронныйОбмен);
		КонецЕсли;
		
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаАсинхронныйОбмен Тогда
		
		НастройкиЗагруженыИзФайла = Ложь;
		
		Отказ = Ложь;
		Если Не ЗначениеЗаполнено(АдресСервера) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан адрес сервера банка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресСервера", , Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСервера) И НЕ ОбменСБанкамиСлужебныйКлиент.ПравильныйФорматАдреса(АдресСервера) Тогда
			ТекстСообщения = НСтр("ru = 'Адрес сервера банка должен начинаться с ""https://"" или ""http://""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресСервера", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан идентификатор организации'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИдентификаторОрганизации", , Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаАсинхронныйОбмен);
		
		Оповещение = Новый ОписаниеОповещения(
			"СменитьСтраницуВыборСпособаАутентификацииПослеЗаполненияПрограммКриптографии", ЭтотОбъект);
			
		СменитьСтраницуШаги(Элементы.СтраницаПодождите);
	
		ЗаполнитьПрограммыКриптографии(Оповещение);
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаСинхронныйОбмен Тогда
		
		Отказ = Ложь;
		Если Не ЗначениеЗаполнено(АдресСервера) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан адрес сервера банка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресСервера", , Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСервера) И НЕ ОбменСБанкамиСлужебныйКлиент.ПравильныйФорматАдреса(АдресСервера) Тогда
			ТекстСообщения = НСтр("ru = 'Адрес сервера банка должен начинаться с ""https://"" или ""http://""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресСервера", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РесурсПриемник) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан ресурс для отправки'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "РесурсПриемник", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РесурсИсточник) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан ресурс для получения'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "РесурсИсточник", , Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;

		ИспользуетсяКриптография = Истина;
		
		СменитьСтраницуШаги(Элементы.СтраницаПодождите);
		
		Оповещение = Новый ОписаниеОповещения("СоздатьМенеджерКриптографииПослеЗаполненияПрограммКриптографии", ЭтотОбъект);
		
		ЗаполнитьПрограммыКриптографии(Оповещение);
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаВыборСпособаАутентификации Тогда
		
		Если СпособАутентификации=0 ИЛИ СпособАутентификации=1 Тогда
			ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		КонецЕсли; 
		
		Если СпособАутентификации = 1 И НЕ ЗначениеЗаполнено(Логин) Тогда
			ТекстСообщения = НСтр("ru = 'Введите логин'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Логин");
			Возврат;
		ИначеЕсли СпособАутентификации = 0 И НЕ ЗначениеЗаполнено(СертификатАутентификации) Тогда
			ТекстСообщения = НСтр("ru = 'Выберите сертификат'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СертификатАутентификации");
			Возврат;
		КонецЕсли;
		
		ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		
		Если СпособАутентификации = 0 Тогда
			Оповещение = Новый ОписаниеОповещения("СменитьШагПослеПолученияСертификатаПоОтпечатку", ЭтотОбъект);
			ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Оповещение, СертификатАутентификации, Истина);
		Иначе
			ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаВыборСпособаАутентификации);
			СменитьСтраницуШаги(Элементы.СтраницаСертификаты);
		КонецЕсли;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаСертификаты Тогда
		Если ИспользуетсяКриптография И НЕ Сертификаты.Количество() Тогда
			ТекстСообщения = НСтр("ru = 'Добавьте сертификаты электронной подписи'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Сертификаты");
			Возврат;
		КонецЕсли;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаСертификаты);
		СменитьСтраницуШаги(Элементы.СтраницаФинал);
		
		Если СохранитьВнешнююОбработку Тогда
			ОбменСБанкамиСлужебныйВызовСервера.СохранитьВнешнююОбработку(
				АдресФайлаВнешнегоМодуля, ВерсияДополнительнойОбработки, ИмяВнешнегоМодуля, НаименованиеВнешнейОбработки);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("СоздатьНастройкуОбмена", 0.1, Истина);
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаСбербанк Тогда
		
		#Если ВебКлиент Тогда
			Если Не ВыбранФайлСертификатаСбербанка Тогда
				ТекстСообщения = НСтр("ru = 'Не выбран сертификат банка'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуСертификатаСбербанка");
				Возврат;
			КонецЕсли;
			
			Если Не ВыбранФайлВКСбербанка Тогда
				ТекстСообщения = НСтр("ru = 'Не выбран файл внешнего модуля'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуКомпонентыСбербанка");
				Возврат;
			КонецЕсли;
		#Иначе
			Если ЗначениеЗаполнено(ПутьКФайлуСертификатаСбербанка) Тогда
				Попытка
					ДвоичныеДанныеСертификатаСбербанка = Новый ДвоичныеДанные(ПутьКФайлуСертификатаСбербанка);
				Исключение
					ТекстСообщения = НСтр("ru = 'Неверно указан путь к файлу сертификата банка'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуСертификатаСбербанка");
					Возврат;
				КонецПопытки;
				АдресФайлаСертификатаСбербанка = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификатаСбербанка, УникальныйИдентификатор);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не выбран файл сертификата банка'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуСертификатаСбербанка");
				Возврат;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПутьКФайлуВКСбербанка) Тогда
				Попытка
					ДвоичныеДанныеВКСбербанка = Новый ДвоичныеДанные(ПутьКФайлуВКСбербанка);
				Исключение
					ТекстСообщения = НСтр("ru = 'Неверно указан путь к файлу внешнего модуля'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуВКСбербанка");
					Возврат;
				КонецПопытки;
				АдресФайлаВКСбербанка = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВКСбербанка, УникальныйИдентификатор);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не выбран файл внешнего модуля банка'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуВКСбербанка");
				Возврат;
			КонецЕсли;
		#КонецЕсли
			
		Файл = Новый Файл(ПутьКФайлуСертификатаСбербанка);
		Если Не Файл.Расширение = ".cer" Тогда
			ТекстСообщения = НСтр("ru = 'Указан неверный файл.
										|Файл сертификата банка должен иметь расширение ""cer""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"ПутьКФайлуСертификатаСбербанка");
			Возврат;
		КонецЕсли;

		Файл = Новый Файл(ПутьКФайлуВКСбербанка);
		Если Не Файл.Расширение = ".zip" Тогда
			ТекстСообщения = НСтр("ru = 'Указан неверный файл.
										|Файл внешнего модуля должен иметь расширение ""zip""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"ПутьКФайлуВКСбербанка");
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения(
				"Поле", "Заполнение", НСтр("ru = 'Идентификатор организации'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИдентификаторОрганизации");
			Возврат;
		КонецЕсли;

		Попытка
			Идентификатор = Новый УникальныйИдентификатор(ИдентификаторОрганизации);
		Исключение
			ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения(
				"Поле", "Корректность", НСтр("ru = 'Идентификатор организации'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИдентификаторОрганизации");
		КонецПопытки;
		
		ОбменСБанкамиСлужебныйКлиент.УдалитьВнешнююКомпонентуИзКэш("VPNKeyTLS");
		
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиВерсииВК", ЭтотОбъект);
		
		ОбменСБанкамиСлужебныйКлиент.ПроверитьВерсиюВКСбербанк(Оповещение, АдресФайлаВКСбербанка);
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаПолучениеССервера И (СпособАутентификации=0 ИЛИ СпособАутентификации=1) Тогда
		
		СпособСозданияНастройки = 0;
		НастройкиЗагруженыИзФайла = Истина;
		
		Отказ = Ложь;
		
		Если НЕ ЗначениеЗаполнено(АдресСервераНастроек) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите адрес сервера банка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресСервераНастроек", , Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСервера)
			И НЕ ОбменСБанкамиСлужебныйКлиент.ПравильныйФорматАдреса(АдресСервераНастроек) Тогда
			ТекстСообщения = НСтр("ru = 'Адрес сервера банка должен начинаться с ""https://"" или ""http://""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресСервераНастроек", , Отказ);
		КонецЕсли;
		
		Если СпособАутентификации = 0 И Не ЗначениеЗаполнено(СертификатАутентификации) Тогда  // по сертификату
			ТекстСообщения = НСтр("ru = 'Выберите сертификат для аутентификации на сервере банка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СертификатАутентификации", , Отказ);
		КонецЕсли;
		
		Если СпособАутентификации = 1 И Не ЗначениеЗаполнено(Логин) Тогда
			ТекстСообщения = НСтр("ru = 'Введите логин для аутентификации на сервере банка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Логин", , Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаПолучениеССервера);
		СменитьСтраницуШаги(Элементы.СтраницаФинал);
	
		Если СпособАутентификации = 0 Тогда // по сертификату
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПолучитьИнформациюОМенеджереКриптографииПослеПолученияСертификатаКриптографии", ЭтотОбъект);
			ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОписаниеОповещения, СертификатАутентификации, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ПолучитьНастройкиОбменаССервераБанкаБазоваяАутентификация", 0.1, Истина);
		КонецЕсли;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаПолучениеССервера И СпособАутентификации=2 Тогда
		
		СпособСозданияНастройки = 1;
		НастройкиЗагруженыИзФайла = Истина;
		
		#Если ВебКлиент Тогда
			Если Не ВыбранФайлНастроекОбмена Тогда
				ТекстСообщения = НСтр("ru = 'Не выбран файл настроек обмена'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуНастроекОбмена");
				Возврат;
			КонецЕсли;
		#Иначе
			Если ЗначениеЗаполнено(ПутьКФайлуНастроекОбмена) Тогда
				Попытка
					ДвоичныеДанныеФайлаНастроек = Новый ДвоичныеДанные(ПутьКФайлуНастроекОбмена);
				Исключение
					ТекстСообщения = НСтр("ru = 'Неверно указан путь к файлу настроек обмена'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуНастроекОбмена");
					Возврат;
				КонецПопытки;
				АдресФайлаНастроекОбмена = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаНастроек, УникальныйИдентификатор);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не выбран файл настроек обмена'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуНастроекОбмена");
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		Файл = Новый Файл(ПутьКФайлуНастроекОбмена);
		Если Не Файл.Расширение = ".xml" Тогда
			ТекстСообщения = НСтр("ru = 'Указан неверный файл.
										|Файл настроек должен иметь расширение ""xml""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуНастроекОбмена");
			Возврат;
		КонецЕсли;
		
		СпособСозданияНастройки = 1;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаПолучениеССервера);
		СменитьСтраницуШаги(Элементы.СтраницаФинал);
		ПодключитьОбработчикОжидания("СоздатьНастройкуОбмена", 0.1, Истина);
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаСертификатДляПолученияНастроек Тогда
		
		Если НЕ ЗначениеЗаполнено(СертификатАутентификации) Тогда
			ТекстСообщения = НСтр("ru = 'Выберите сертификат для аутентификации на сервере банка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СертификатАутентификации");
			Возврат;
		КонецЕсли;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаСертификатДляПолученияНастроек);
		СменитьСтраницуШаги(Элементы.СтраницаФинал);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПолучитьИнформациюОМенеджереКриптографииПослеПолученияСертификатаКриптографии", ЭтотОбъект);
		ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОписаниеОповещения, СертификатАутентификации, Истина);
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаЛогинПароль Тогда
		
		Если НЕ ЗначениеЗаполнено(Логин) Тогда
			ТекстСообщения = НСтр("ru = 'Введите логин для аутентификации на сервере банка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Логин");
			Возврат;
		КонецЕсли;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаСертификатДляПолученияНастроек);
		СменитьСтраницуШаги(Элементы.СтраницаФинал);
		ПодключитьОбработчикОжидания("ПолучитьНастройкиОбменаССервераБанкаБазоваяАутентификация", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура Назад(Команда)
	
	ПредыдущийШаг = ХронологияПереключенияСтраниц[ХронологияПереключенияСтраниц.ВГраница()];
	ХронологияПереключенияСтраниц.Удалить(ХронологияПереключенияСтраниц.ВГраница());
	СменитьСтраницуШаги(ПредыдущийШаг);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ЗакрытьФорму = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура РучнаяНастройкаАутентификации(Команда)
	
	СпособСозданияНастройки = 2;
	ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаПолучениеССервера);
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменСИспользованиемВнешнейКомпоненты") Тогда
		СменитьСтраницуШаги(Элементы.СтраницаСертификаты);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн") Тогда
		СменитьСтраницуШаги(Элементы.СтраницаСинхронныйОбмен);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		Если РазделениеВключено() Тогда
			СменитьСтраницуШаги(Элементы.СтраницаАсинхронныйОбмен);
		Иначе
			СменитьСтраницуШаги(Элементы.СтраницаЗапросИспользованияВнешнегоМодуля);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьПодключение(Команда)
	
	ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаПолучениеССервера);
	СменитьСтраницуШаги(Элементы.СтраницаДобавлениеСчета);
	
КонецПроцедуры

&НаКлиенте
Процедура НазадКПопулярным(Команда)
	
	Элементы.СтраницыБанки.ТекущаяСтраница = Элементы.СтраницаПопулярныеБанки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИзменениеИнтерфейса

&НаКлиенте
Процедура СоздатьМенеджерКриптографииПослеЗаполненияПрограммКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПереключитьСтраницыПослеСозданияМенеджераКриптографии", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "");
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуВыборСпособаАутентификацииПослеЗаполненияПрограммКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	СменитьСтраницуШаги(Элементы.СтраницаВыборСпособаАутентификации);
	ПодключитьОбработчикОжидания("ЗаполнитьСписокВыбораСертификатовАутентификации", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьСертификаты()
	
	Счетчик = 0;
	Для Каждого Строка Из Сертификаты Цикл
		Счетчик = Счетчик + 1;
		Строка.Номер = Счетчик;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуКомандНавигации(НоваяСтраница)
	
	Элементы.КомандыНавигации.ТекущаяСтраница = НоваяСтраница;
	
	Если НоваяСтраница = Элементы.Далее Тогда
		Элементы.ДалееПервая.КнопкаПоУмолчанию = Истина;
		Элементы.ДалееПервая.АктивизироватьПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.ДалееПервая;
	ИначеЕсли НоваяСтраница = Элементы.НазадДалее Тогда
		Элементы.ДалееВторая.КнопкаПоУмолчанию = Истина;
		Элементы.ДалееВторая.АктивизироватьПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.ДалееВторая;
	ИначеЕсли НоваяСтраница = Элементы.НазадГотово Тогда
		Элементы.Готово.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуШаги(НоваяСтраница)
	
	Элементы.КомандыНавигации.Доступность = Истина;
	
	КомандыСВозвратом = Элементы.НазадДалее;
	КомандыБезВозврата = Элементы.Далее;

	Если НоваяСтраница = Элементы.СтраницаФинал Тогда
		
		Элементы.ОткрытьНастройкуОбмена.Видимость = Ложь;
		Элементы.ДекорацияУспешноеПодключение.Видимость = Ложь;
		Элементы.ДекорацияНеПодключено.Видимость = Ложь;
		
		Если ХронологияПереключенияСтраниц.Количество() Тогда
			КомандыСВозвратом = Элементы.Назад;
		Иначе
			КомандыБезВозврата = Элементы.Отмена;
		КонецЕсли;
		
		Элементы.ТестированиеНастройкиОбменаКартинка.Картинка = Новый Картинка;
		СинхронныйОбмен = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн");
		Элементы.ГруппаТестированиеНастройкиОбмена.Видимость = ПрограммаБанка <> СинхронныйОбмен;
		Если СпособСозданияНастройки <> 0 Тогда
			Элементы.ГруппаПолучениеНастроекССервераБанка.Видимость = Ложь;
			Элементы.СозданиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
		Иначе // Получение настроек с сервера банка
			Элементы.ГруппаПолучениеНастроекССервераБанка.Видимость = Истина;
			Элементы.ПолучениеНастроекОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
			Элементы.СозданиеНастройкиОбменаКартинка.Картинка = Новый Картинка;
		КонецЕсли;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаАсинхронныйОбмен Тогда
		ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
	ИначеЕсли НоваяСтраница = Элементы.СтраницаПолучениеССервера Тогда
		Элементы.СпособАутентификации.СписокВыбора.Очистить();
		Если НЕ ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			Элементы.СпособАутентификации.СписокВыбора.Добавить(1, НСтр("ru = 'Логин и пароль'"));
			Элементы.СпособАутентификации.СписокВыбора.Добавить(0, НСтр("ru = 'Сертификат'"));
		КонецЕсли; 
		Элементы.СпособАутентификации.СписокВыбора.Добавить(2, НСтр("ru = 'Настройки из файла'"));
		Если Элементы.СпособАутентификации.СписокВыбора.НайтиПоЗначению(СпособАутентификации)=Неопределено Тогда
			СпособАутентификации = Элементы.СпособАутентификации.СписокВыбора[0].Значение;
		КонецЕсли;
		Элементы.СпособАутентификации.Видимость = (Элементы.СпособАутентификации.СписокВыбора.Количество()>1);
		Если СпособАутентификации = 1 Тогда 
			Элементы.СтраницыСмешанногоРежима.ТекущаяСтраница = Элементы.СтраницаПользовательСмешанный;
		ИначеЕсли СпособАутентификации = 2 Тогда 
			Элементы.СтраницыСмешанногоРежима.ТекущаяСтраница = Элементы.СтраницаНастройкиИзФайла;
		Иначе
			Элементы.СтраницыСмешанногоРежима.ТекущаяСтраница = Элементы.СтраницаСертификатСмешанный;
		КонецЕсли;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаВыборОрганизацииИБанка Тогда
		НастройкиЗагруженыИзФайла = Ложь;
		КомандыБезВозврата = Элементы.Отмена;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаСертификаты Тогда
		Элементы.ГруппаСертификаты.Доступность = ИспользуетсяКриптография;
		АсинхронныйОбмен = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		Элементы.ГруппаНастроекКриптографии.Видимость = ПрограммаБанка = АсинхронныйОбмен;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаВыборСпособаАутентификации Тогда
		Если Элементы.СпособАутентификацииРучнойРежим.СписокВыбора.НайтиПоЗначению(СпособАутентификации)=Неопределено Тогда
			СпособАутентификации = Элементы.СпособАутентификации.СписокВыбора[0].Значение;
		КонецЕсли;
		Если СпособАутентификации = 1 Тогда 
			Элементы.СтраницыАутентификации.ТекущаяСтраница = Элементы.СтраницаПользовательАутентификации;
		Иначе
			Элементы.СтраницыАутентификации.ТекущаяСтраница = Элементы.СтраницаСертификатАутентификации;
		КонецЕсли;
		СертификатАутентификацииСсылка = ПредопределенноеЗначение(
			"Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка");
	ИначеЕсли НоваяСтраница = Элементы.СтраницаВыборСпособаАутентификации Тогда
		Элементы.КомандыНавигации.Доступность = Ложь;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаДобавлениеСчета Тогда
		КомандыСВозвратом = Элементы.НазадГотово;
	КонецЕсли;
	
	Если ХронологияПереключенияСтраниц.Количество() Тогда
		СменитьСтраницуКомандНавигации(КомандыСВозвратом)
	Иначе
		СменитьСтраницуКомандНавигации(КомандыБезВозврата)
	КонецЕсли;
	
	Элементы.Шаги.ТекущаяСтраница = НоваяСтраница;

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСтраницыПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда  // ошибка создания менеджера криптографии
		Возврат;
	КонецЕсли;
	
	ХронологияПереключенияСтраниц.Добавить(Элементы.Шаги.ТекущаяСтраница);
	СменитьСтраницуШаги(Элементы.СтраницаСертификаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьШагПослеВыбораОрганизацииИБанка()
	
	Элементы.АдресСервераНастроекСертификат.Видимость = Истина;
	Элементы.АдресСервераНастроекПоЛогину.Видимость = Истина;
	Элементы.АдресСервераНастроекПоСертификату.Видимость = Истина;
	
	НастройкаОбмена = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбмена(Организация, Банк);
	
	ОбновитьПовторноИспользуемыеЗначения();
	НастройкиОбменаСБанком = ОбменСБанкамиСлужебныйВызовСервера.ПоставляемыеНастройкиОбмена(Банк, Истина);
	
	Если НастройкиОбменаСБанком = Неопределено Тогда // Неизвестный банк
		ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
	ИначеЕсли НастройкиОбменаСБанком.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменСИспользованиемВнешнейКомпоненты") Тогда
		ПрограммаБанка = НастройкиОбменаСБанком.ПрограммаБанка;
		АдресСервераДляПолученияВнешнейКомпоненты = НастройкиОбменаСБанком.АдресСервера;
		СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
	ИначеЕсли НастройкиОбменаСБанком.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн") Тогда
		ПрограммаБанка = НастройкиОбменаСБанком.ПрограммаБанка;
		СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
	ИначеЕсли НастройкиОбменаСБанком.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		ПрограммаБанка = НастройкиОбменаСБанком.ПрограммаБанка;
		СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
	ИначеЕсли НастройкиОбменаСБанком.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		ПрограммаБанка = НастройкиОбменаСБанком.ПрограммаБанка;
		Если ЗначениеЗаполнено(НастройкиОбменаСБанком.АдресСервера) Тогда
			АдресСервераНастроек = НастройкиОбменаСБанком.АдресСервера;
			СпособСозданияНастройки = 0;
			Если Не ИспользуетсяТестовыйРежим Тогда
				Элементы.АдресСервераНастроекСертификат.Видимость = Ложь;
				Элементы.АдресСервераНастроекЛогин.Видимость = Ложь;
				Элементы.АдресСервераНастроекПоЛогину.Видимость = Ложь;
				Элементы.АдресСервераНастроекПоСертификату.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НастройкиОбменаСБанком.СпособАутентификации) Тогда
			Если НастройкиОбменаСБанком.СпособАутентификации = "ИзФайла" Тогда
				Элементы.СпособАутентификации.Видимость = Ложь;
				СпособАутентификации = 2;
				СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
			ИначеЕсли НастройкиОбменаСБанком.СпособАутентификации = "ПоЛогинуИлиСертификату" Тогда
				СменитьСтраницуШаги(Элементы.СтраницаПодождите);
				Оповещение = Новый ОписаниеОповещения(
					"СменитьСтраницуПослеПолучениеССервераПослеЗаполненияПрограммКриптографии", ЭтотОбъект);
				ЗаполнитьПрограммыКриптографии(Оповещение);
			ИначеЕсли НастройкиОбменаСБанком.СпособАутентификации = "ПоСертификату" Тогда
				СпособАутентификации = 0;
				СменитьСтраницуШаги(Элементы.СтраницаПодождите);
				Оповещение = Новый ОписаниеОповещения(
					"СменитьСтраницуСертификатДляПолученияНастроекПослеЗаполненияПрограммКриптографии", ЭтотОбъект);
				ЗаполнитьПрограммыКриптографии(Оповещение);
			ИначеЕсли НастройкиОбменаСБанком.СпособАутентификации = "ПоЛогину" Тогда
				Элементы.СпособАутентификации.Видимость = Ложь;
				СпособАутентификации = 1;
				СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
			Иначе
				СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуПослеПолучениеССервераПослеЗаполненияПрограммКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьСписокВыбораСертификатовАутентификации();
	СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуСертификатДляПолученияНастроекПослеЗаполненияПрограммКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьСписокВыбораСертификатовАутентификации();
	СменитьСтраницуШаги(Элементы.СтраницаСертификатДляПолученияНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаголовок()
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Банк) Тогда
		Шаблон = "%1 - %2";
		Заголовок = СтрШаблон(Шаблон, Организация, Банк);
	Иначе
		Заголовок = "Настройка обмена с банком";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АсинхронныйОбмен

&НаКлиенте
Процедура СменитьШагПослеПолученияСертификатаПоОтпечатку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = Тип("СертификатКриптографии") Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СохранитьСертификатПослеПолученияДвоичныхДанных", ЭтотОбъект);
	
	Результат.НачатьВыгрузку(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСертификатПослеПолученияДвоичныхДанных(ВыгруженныеДанные, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДвоичныеДанныеСертификата", ВыгруженныеДанные);
	Обработчик = Новый ОписаниеОповещения(
		"СохранитьСертификатПослеПолученияИнформацииОМенеджереКриптографии", ЭтотОбъект, ДополнительныеПараметры);
	МенеджерКриптографииНаКлиенте.НачатьПолучениеИнформацииМодуляКриптографии(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСертификатПослеПолученияИнформацииОМенеджереКриптографии(ИнформацияМодуля, ДополнительныеПараметры) Экспорт
	
	ДвоичныеДанныеСертификата = ДополнительныеПараметры.ДвоичныеДанныеСертификата;
	
	НовыйСертификат = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(
		ДвоичныеДанныеСертификата, Организация, ИнформацияМодуля.Имя);
		
	Если НовыйСертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СертификатАутентификацииСсылка = НовыйСертификат;
	
	ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаВыборСпособаАутентификации);
	СменитьСтраницуШаги(Элементы.СтраницаСертификаты);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаНастроекОбменаИзВеб(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	ВыбранФайлНастроекОбмена = Результат;
	АдресФайлаНастроекОбмена = Адрес;
	ПутьКФайлуНастроекОбмена = ВыбранноеИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаНастроекОбменаИзТонкогоКлиента(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено ИЛИ НЕ ВыбранныеФайлы.Количество() Тогда
		ПутьКФайлуНастроекОбмена = "";
	Иначе
		ПутьКФайлуНастроекОбмена = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТестНастройкиАсинхронныйОбмен()
	
	ВидЭДЗапросЗонд = ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ЗапросЗонд");
	
	РеквизитыНастройкиОбмена = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыОбменаПоВидуЭД(
		НастройкаОбмена, ВидЭДЗапросЗонд);
	
	Если РеквизитыНастройкиОбмена.ТребуетсяПодпись ИЛИ РеквизитыНастройкиОбмена.АутентификацияПоСертификату Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РеквизитыНастройкиОбмена", РеквизитыНастройкиОбмена);
		Оповещение = Новый ОписаниеОповещения(
			"ПродолжитьТестНастроекАсинхронныйОбменПослеПолученияОтпечатков", ЭтотОбъект, ДополнительныеПараметры);
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина);
		
	Иначе
	
		НастройкиОбмена = Неопределено;
		СообщениеЗапросЗонд = Неопределено;
		ОбменСБанкамиСлужебныйВызовСервера.СформироватьЗапросЗонд(
			НастройкаОбмена, Новый Массив, СообщениеЗапросЗонд, НастройкиОбмена);
	
		Если НЕ ЗначениеЗаполнено(СообщениеЗапросЗонд) ИЛИ НастройкиОбмена = Неопределено Тогда
			ОбработатьРезультатТестаНастройки(Ложь);
			Возврат;
		КонецЕсли;
	
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЗапросЗонд", СообщениеЗапросЗонд);
		ДополнительныеПараметры.Вставить("РеквизитыНастройкиОбмена", РеквизитыНастройкиОбмена);
		
		Если НастройкиЗагруженыИзФайла Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ПолучитьИдентификаторСессииПослеЗапросаПароляБазоваяАутентификация", ЭтотОбъект, ДополнительныеПараметры);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеАутентификации(НастройкаОбмена, Оповещение, Истина);
		Иначе
			Оповещение = Новый ОписаниеОповещения(
			"ВыполнитьТестНастроекПослеПолученияИдентификатораСессии", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьИдентификаторСессииБазоваяАутентификация(Оповещение, АдресСервера, ИдентификаторОрганизации, Логин, Пароль);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторСессииПослеЗапросаПароляБазоваяАутентификация(ДанныеАутентификации, ДополнительныеПараметры) Экспорт
	
	Если ДанныеАутентификации = Неопределено Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения(
		"ВыполнитьТестНастроекПослеПолученияИдентификатораСессии", ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьИдентификаторСессииБазоваяАутентификация(Оповещение,
		ДополнительныеПараметры.РеквизитыНастройкиОбмена.АдресСервера,
		ДополнительныеПараметры.РеквизитыНастройкиОбмена.ИдентификаторОрганизации,
		ДанныеАутентификации.Пользователь, ДанныеАутентификации.ПарольПользователя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьТестНастроекАсинхронныйОбменПослеПолученияОтпечатков(ДанныеОтпечатков, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДанныеОтпечатков) = Тип("Строка") Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	ОтпечаткиСертификатов = Новый Массив;
	Для Каждого КлючЗначение Из ДанныеОтпечатков Цикл
		ОтпечаткиСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	РеквизитыНастройкиОбмена = ДополнительныеПараметры.РеквизитыНастройкиОбмена;

	НастройкиОбмена = Неопределено;
	СообщениеЗапросЗонд = Неопределено;
	ОбменСБанкамиСлужебныйВызовСервера.СформироватьЗапросЗонд
		(НастройкаОбмена, ОтпечаткиСертификатов, СообщениеЗапросЗонд, НастройкиОбмена);
	
	Если НЕ ЗначениеЗаполнено(СообщениеЗапросЗонд) ИЛИ НастройкиОбмена = Неопределено Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ЗапросЗонд", СообщениеЗапросЗонд);

	Если НастройкиОбмена.Подписывать Тогда
		
		Если НастройкиОбмена.ДоступныеСертификаты.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не найден подходящий сертификат подписи.
										|Убедитесь, что сертификаты, указанные в настройке обмена, установлены в личное хранилище сертификатов операционной системы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбработатьРезультатТестаНастройки(Ложь);
			Возврат;
		КонецЕсли;
		
		Операция = НСтр("ru = 'Подписание электронного документа'");
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("Операция", Операция);
		ОписаниеДанных.Вставить("ОтборСертификатов", НастройкиОбмена.ДоступныеСертификаты);
		ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		ОписаниеДанных.Вставить("БезПодтверждения", Истина);
		НаборДанных = Новый Массив;
		Данные = Новый Структура;
		ПараметрыДляПолученияДД = Новый Структура("СообщениеОбмена, ОписаниеДанных", СообщениеЗапросЗонд, ОписаниеДанных);
		СсылкаНаДД = Новый ОписаниеОповещения(
			"ПолучитьДвоичныеДанныеДляСообщенияОбмена", ОбменСБанкамиСлужебныйКлиент, ПараметрыДляПолученияДД);
		Данные.Вставить("Данные", СсылкаНаДД);
		Данные.Вставить("Объект", ОбменСБанкамиСлужебныйВызовСервера.ПрисоединенныйФайл(СообщениеЗапросЗонд));
		Представление = ОбменСБанкамиСлужебныйВызовСервера.ПредставлениеЭлектронногоДокумента(СообщениеЗапросЗонд);
		ОбработчикОткрытияЭД = Новый ОписаниеОповещения(
			"ПриОткрытииЭлектронногоДокумента", ОбменСБанкамиСлужебныйКлиент, СообщениеЗапросЗонд);
		ДанныеДляПредставления = Новый Структура("Представление, Значение", Представление, ОбработчикОткрытияЭД);
		Данные.Вставить("Представление", ДанныеДляПредставления);
		НаборДанных.Добавить(Данные);
		ОписаниеДанных.Вставить("НаборДанных", НаборДанных);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодписанияЗапросаЗонда", ЭтотОбъект, ДополнительныеПараметры);
		ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеОповещения);
	Иначе
		ПродолжитьТестНастроекПослеПроверкиЭПЗапросаЗонда(Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодписанияЗапросаЗонда(Результат, ПараметрыОбработки) Экспорт
	
	Если Результат.Успех Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьТестНастроекПослеПроверкиЭПЗапросаЗонда", ЭтотОбъект, ПараметрыОбработки);
		ОбменСБанкамиСлужебныйКлиент.ПроверитьПодписи(ОписаниеОповещения, ПараметрыОбработки.ЗапросЗонд);
	Иначе
		ОбработатьРезультатТестаНастройки(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьТестНастроекПослеПроверкиЭПЗапросаЗонда(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда // Подпись неверна
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СертификатАутентификацииСсылка) Тогда
		МассивСертификатов = Новый Массив;
		МассивСертификатов.Добавить(СертификатАутентификацииСсылка);
		ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(СертификатАутентификации, ПарольСертификата);
	Иначе
		МассивСертификатов = СертификатыАутентификации(НастройкаОбмена, ОтпечаткиСертификатов);
	КонецЕсли;
	
	Если ДополнительныеПараметры.РеквизитыНастройкиОбмена.АутентификацияПоСертификату Тогда
	
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
		ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
		ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Ложь);
		
		ПараметрыПолученияМаркера = Новый Структура("НастройкаОбмена", НастройкаОбмена);

		ОписаниеПолученияДанных = Новый ОписаниеОповещения(
			"ПолучитьМаркерБанка", ОбменСБанкамиСлужебныйКлиент, ПараметрыПолученияМаркера);
				
		ОписаниеДанных.Вставить("Данные", ОписаниеПолученияДанных);
					
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьОтправкуЗапросаЗондаПослеРасшифровкиМаркера", ЭтотОбъект, ДополнительныеПараметры);
		ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
	Иначе
		Если НастройкиЗагруженыИзФайла Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ПолучитьИдентификаторСессииПослеЗапросаПароляБазоваяАутентификация", ЭтотОбъект, ДополнительныеПараметры);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеАутентификации(НастройкаОбмена, Оповещение, Истина);
		Иначе
			Оповещение = Новый ОписаниеОповещения(
			"ВыполнитьТестНастроекПослеПолученияИдентификатораСессии", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьИдентификаторСессииБазоваяАутентификация(Оповещение, АдресСервера, ИдентификаторОрганизации, Логин, Пароль);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтправкуЗапросаЗондаПослеРасшифровкиМаркера(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		ИдентификаторСессииБанка = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
			Результат.РасшифрованныеДанные);
		ВыполнитьТестНастроекПослеПолученияИдентификатораСессии(ИдентификаторСессииБанка, ДополнительныеПараметры);
	Иначе
		ОбработатьРезультатТестаНастройки(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторСессииБазоваяАутентификация(Оповещение, АдресСервера, ИдентификаторОрганизации, Логин, Пароль)
	
	ДанныеSMSАвторизации = Неопределено;
	ИдентификаторСессииБанка = ОбменСБанкамиСлужебныйВызовСервера.МаркерБанка(
		АдресСервера, ИдентификаторОрганизации, Логин, Пароль, ДанныеSMSАвторизации);
	Если ЗначениеЗаполнено(ДанныеSMSАвторизации) Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ИдентификаторСессии", ИдентификаторСессииБанка);
		ПараметрыФормы.Вставить("Телефон", ДанныеSMSАвторизации.МаскаТелефона);
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияИдентификатораСессии", Оповещение);
		ДополнительныеПараметры.Вставить("НеподтвержденныйИдентификаторСессииБанка", ИдентификаторСессииБанка);
		ДополнительныеПараметры.Вставить("АдресСервера", АдресСервера);
		ДополнительныеПараметры.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
		ОО = Новый ОписаниеОповещения("ОтправитьОдноразовыйПарольПослеВводаИзSMS", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросОдноразовогоПароля", ПараметрыФормы, , , , , ОО);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, ИдентификаторСессииБанка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОдноразовыйПарольПослеВводаИзSMS(ОдноразовыйПароль, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ОдноразовыйПароль) Тогда
		ИдентификаторСессииБанка = ОбменСБанкамиСлужебныйВызовСервера.МаркерБанкаПоSMS(ДополнительныеПараметры.АдресСервера,
			ДополнительныеПараметры.ИдентификаторОрганизации, ДополнительныеПараметры.НеподтвержденныйИдентификаторСессииБанка,
			ОдноразовыйПароль);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеПослеПолученияИдентификатораСессии, ИдентификаторСессииБанка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТестНастроекПослеПолученияИдентификатораСессии(ИдентификаторСессии, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
		
	ПараметрыЗапроса = Новый Структура;

	ПараметрыЗапроса.Вставить("ИдентификаторСессииБанка", ИдентификаторСессии);
	ПараметрыЗапроса.Вставить("СообщениеОбмена", ДополнительныеПараметры.ЗапросЗонд);
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	МассивСообщений = Новый Массив;
	ОперацияВыполнена = ОбменСБанкамиСлужебныйВызовСервера.ОтправитьЗапросЗондНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, МассивСообщений);
		
	Если МассивСообщений.Количество() Тогда //Произошла ошибка
		Для Каждого Сообщение Из МассивСообщений Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
		
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатЗапросаЗонда();
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	
	ПараметрыОбработчикаОжидания = Новый Структура();
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОтправкиЗапросаЗонда", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияОтправкиЗапросаЗонда()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатЗапросаЗонда();
			Возврат;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
		* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОтправкиЗапросаЗонда",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаЗонда()

	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если СтруктураВозврата <> Неопределено И СтруктураВозврата.Свойство("ДанныеЭП")
		И СтруктураВозврата.ДанныеЭП.Количество() Тогда
		Для Каждого КлючЗначение Из СтруктураВозврата.ДанныеЭП Цикл
			ОбменСБанкамиСлужебныйКлиент.ДобавитьПодписи(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеЭД");
	
	МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(ИдентификаторЗадания);
	
	Если МассивСообщений.Количество() Тогда
		Для Каждого Сообщение Из МассивСообщений Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	Если БИКБанка(Банк) = "044525716" Тогда //Обход ошибки банка ВТБ24
		ОбработатьРезультатТестаНастройки(Истина);
		Возврат;
	КонецЕсли;
	
	МассивСообщений = Новый Массив;
	
	ОперацияВыполнена = ОбменСБанкамиСлужебныйВызовСервера.ПолучитьИзвещениеОСостоянииЭДАсинхронноНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, МассивСообщений);
	
	Если МассивСообщений.Количество() Тогда
		Для Каждого Сообщение Из МассивСообщений Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатПолученияИзвещенияОСостоянииЭД();
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания = Новый Структура();
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатПолученияИзвещенияОСостоянииЭД();
			Возврат;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
		* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПолученияИзвещенияОСостоянииЭД()
		
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если СтруктураВозврата <> Неопределено И СтруктураВозврата.Свойство("ДанныеЭП") И СтруктураВозврата.ДанныеЭП.Количество() Тогда
		Для Каждого КлючЗначение Из СтруктураВозврата.ДанныеЭП Цикл
			ОбменСБанкамиСлужебныйКлиент.ДобавитьПодписи(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(ИдентификаторЗадания);

	Оповестить("ОбновитьСостояниеЭД");
	
	Если МассивСообщений.Количество() Тогда
		Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	ОбработатьРезультатТестаНастройки(Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкуОбменаИзФайла()
	
	Задание = ЗагрузитьНастройкуОбменаИзФайлаНаСервере(АдресФайлаНастроекОбмена);
	
	АдресХранилища = Задание.АдресХранилища;
	
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			ПодключитьОбработчикОжидания("ПослеСозданияНастройкиОбмена", 0.1, Истина);
		Иначе
			Элементы.СозданиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
			Элементы.ДекорацияНеПодключено.Видимость = Истина;
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Задание.Идентификатор;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеЗаданияЗагрузкиНастройкиОбменаИзФайла", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеЗаданияЗагрузкиНастройкиОбменаИзФайла()
	
	Задание = ПроверитьВыполнениеФоновогоЗаданияНаСервере(ИдентификаторЗадания);
	
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			ПодключитьОбработчикОжидания("ПослеСозданияНастройкиОбмена", 0.1, Истина);
		Иначе
			Элементы.СозданиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
			Элементы.ДекорацияНеПодключено.Видимость = Истина;
		КонецЕсли;
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания(
			"ПроверитьВыполнениеЗаданияЗагрузкиНастройкиОбменаИзФайла", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройкуОбменаИзФайлаНаСервере(АдресФайлаНастроекОбмена)
	
	Задание = Новый Структура();
	Задание.Вставить("Завершено", Ложь);
	Задание.Вставить("Успешно");
	Задание.Вставить("Идентификатор");
	Задание.Вставить("АдресХранилища");
	
	Попытка
		ДвоичныеДанныеФайлаНастроек = ПолучитьИзВременногоХранилища(АдресФайлаНастроекОбмена);
		НазваниеЗадания = НСтр("ru = 'Прямой обмен с банком: Загрузка настроек обмена из файла'");
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
			"Справочники.НастройкиОбменСБанками.ЗагрузитьНастройкиОбменаИзФайла", ДвоичныеДанныеФайлаНастроек, НазваниеЗадания);
		Задание.АдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		Задание.Идентификатор = РезультатФоновогоЗадания.ИдентификаторЗадания;
		Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			Если ЗначениеЗаполнено(РезультатФоновогоЗадания.ИдентификаторЗадания) Тогда
				МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(
					РезультатФоновогоЗадания.ИдентификаторЗадания);
				Если МассивСообщений.Количество() Тогда
					Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
						СообщениеОбОшибке.Сообщить();
					КонецЦикла;
					Задание.Успешно = Ложь;
				Иначе
					Задание.Успешно = Истина;
				КонецЕсли;
				Задание.Завершено = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Задание.Завершено = Истина;
		Задание.Успешно = Ложь;
		Текст = НСтр("ru = 'Не удалось загрузить настройки обмена.'");
		ВидОперации = НСтр("ru = 'Загрузка настроек обмена из файла'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, Текст, 1);
	КонецПопытки;
	
	Возврат Задание;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьИнформациюОМенеджереКриптографииПослеПолученияСертификатаКриптографии(СертификатКриптографии, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СертификатКриптографии) <> Тип("СертификатКриптографии") Тогда
		Элементы.ПолучениеНастроекОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
		Элементы.ДекорацияНеПодключено.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюОМенеджереКриптографииПослеПолученияДвоичныхДанныхСертификата", ЭтотОбъект);
	
	СертификатКриптографии.НачатьВыгрузку(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОМенеджереКриптографииПослеПолученияДвоичныхДанныхСертификата(ВыгруженныеДанные, ДополнительныеПараметры) Экспорт
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ДанныеСертификата", ВыгруженныеДанные);
	
	Обработчик = Новый ОписаниеОповещения(
		"ПолучитьИдентификаторСессииПослеПолученияИнформацииОМенеджереКриптографии", ЭтотОбъект, ПараметрыОбработки);
	МенеджерКриптографииНаКлиенте.НачатьПолучениеИнформацииМодуляКриптографии(Обработчик);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторСессииПослеПолученияИнформацииОМенеджереКриптографии(ИнформацияМодуля, ДополнительныеПараметры) Экспорт
	
	СертификатСсылка = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(
		ДополнительныеПараметры.ДанныеСертификата, Организация, ИнформацияМодуля.Имя);
			
	Если Не ЗначениеЗаполнено(СертификатСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(СертификатСсылка, ПарольСертификата);

	ИдентификаторСессии = ОбменСБанкамиСлужебныйВызовСервера.ПолучитьМаркерБанка(
		АдресСервераНастроек, "0", ДополнительныеПараметры.ДанныеСертификата);
	
	Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Элементы.ПолучениеНастроекОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
		Элементы.ДекорацияНеПодключено.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных", НСтр("ru = 'Аутентификация на сервере банка'"));
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(СертификатСсылка);
	ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
	ОписаниеДанных.Вставить("БезПодтверждения", Истина);
	ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
	ОписаниеДанных.Вставить("Данные", ИдентификаторСессии);
	
	ОбработкаРезультата = Новый ОписаниеОповещения("ПослеРасшифровкиИдентификатораСессии", ЭтотОбъект);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРасшифровкиИдентификатораСессии(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		Элементы.ПолучениеНастроекОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
		Элементы.ДекорацияНеПодключено.Видимость = Истина;
		Возврат;
	КонецЕсли;

	ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Результат.РасшифрованныеДанные);

	ПолучитьНастройкиОбменаПослеПолученияИдентификатораСессии(ИдентификаторСессии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкиОбменаССервераБанкаБазоваяАутентификация()
	
	НастройкаОбмена = ПредопределенноеЗначение("Справочник.НастройкиОбменСБанками.ПустаяСсылка");
	Обработчик = Новый ОписаниеОповещения("ПолучитьНастройкиОбменаПослеПолученияИдентификатораСессии", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьМаркерБанкаПоЛогинуИПаролю(
		НастройкаОбмена, Обработчик, АдресСервераНастроек, "0", Логин, Пароль);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкиОбменаПослеПолученияИдентификатораСессии(ИдентификаторСессии, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Элементы.ПолучениеНастроекОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
		Элементы.ДекорацияНеПодключено.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Задание = ЗагрузитьНастройкиОбменаНаСервере(Организация, Банк, ИдентификаторСессии, АдресФайлаНастроекОбмена);
	
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			Элементы.ПолучениеНастроекОбменаКартинка.Картинка = БиблиотекаКартинок.Успешно32;
			ПодключитьОбработчикОжидания("СоздатьНастройкуОбмена", 0.1, Истина);
		Иначе
			Элементы.ПолучениеНастроекОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
			Элементы.ДекорацияНеПодключено.Видимость = Истина;
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Задание.Идентификатор;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеЗаданияПолученияНастроекОбмена", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройкиОбменаНаСервере(Организация, Банк, ИдентификаторСессии, АдресФайлаНастроекОбмена)
	
	Задание = Новый Структура();
	Задание.Вставить("Завершено", Ложь);
	Задание.Вставить("Успешно");
	Задание.Вставить("Значение");
	Задание.Вставить("Идентификатор");
	
	Попытка
		НазваниеЗадания = НСтр("ru = 'Прямой обмен с банком: Получение настроек обмена с сервера банка'");
		ПараметрыПолученияНастроек = Новый Структура;
		ПараметрыПолученияНастроек.Вставить("Организация", Организация);
		ПараметрыПолученияНастроек.Вставить("Банк", Банк);
		ПараметрыПолученияНастроек.Вставить("НомерБанковскогоСчета");
		ПараметрыПолученияНастроек.Вставить("ИдентификаторСессии", ИдентификаторСессии);
		ПараметрыПолученияНастроек.Вставить("АдресСервера", АдресСервераНастроек);
		ПараметрыПолученияНастроек.Вставить("ИдентификаторОрганизации", "0");
		
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
			"Справочники.НастройкиОбменСБанками.ПолучитьНастройкиОбменаССервераБанка", ПараметрыПолученияНастроек, НазваниеЗадания);
		АдресФайлаНастроекОбмена = РезультатФоновогоЗадания.АдресХранилища;
		Задание.Идентификатор = РезультатФоновогоЗадания.ИдентификаторЗадания;
		Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			Если ЗначениеЗаполнено(РезультатФоновогоЗадания.ИдентификаторЗадания) Тогда
				МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(
					РезультатФоновогоЗадания.ИдентификаторЗадания);
				Если МассивСообщений.Количество() Тогда
					Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
						СообщениеОбОшибке.Сообщить();
					КонецЦикла;
					Задание.Успешно = Ложь;
				Иначе
					Задание.Успешно = Истина;
				КонецЕсли;
				Задание.Завершено = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Задание.Завершено = Истина;
		Задание.Успешно = Ложь;
		Задание.Значение = Новый Структура;
		Текст = НСтр("ru = 'Не удалось загрузить настройки обмена с сервера банка.'");
		ВидОперации = НСтр("ru = 'Получение настроек обмена с сервера банка'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, Текст, 1);
	КонецПопытки;
	
	Возврат Задание;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыполнениеЗаданияПолученияНастроекОбмена()
	
	Задание = ПроверитьВыполнениеФоновогоЗаданияНаСервере(ИдентификаторЗадания);
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			Элементы.ПолучениеНастроекОбменаКартинка.Картинка = БиблиотекаКартинок.Успешно32;
			ПодключитьОбработчикОжидания("СоздатьНастройкуОбмена", 0.1, Истина);
		Иначе
			Элементы.ПолучениеНастроекОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
			Элементы.ДекорацияНеПодключено.Видимость = Истина;
		КонецЕсли;
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания(
			"ПроверитьВыполнениеЗаданияПолученияНастроекОбмена", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораСертификатовАутентификации()
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьЛичныеСертификатыПослеСозданияМенеджераКриптографии", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "ПолучениеСертификатов", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораСертификатовАутентификацииСВыводомОшибки()
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьЛичныеСертификатыПослеСозданияМенеджераКриптографии", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "ПолучениеСертификатов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЛичныеСертификатыПослеСозданияМенеджераКриптографии(МенеджерКриптографии, ДополнительныеПараметры) Экспорт

	Если НЕ ТипЗнч(МенеджерКриптографии) = Тип("МенеджерКриптографии") Тогда
		Возврат;
	Иначе
		МенеджерКриптографииНаКлиенте = МенеджерКриптографии;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПослеПолученияХранилища", ЭтотОбъект, ДополнительныеПараметры);
		
	МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(
		ОписаниеОповещения, ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСертификатыПослеПолученияХранилища(ХранилищеСертификатов, ДополнительныеПараметры) Экспорт
	
	ОповещениеПослеПолученияСертификатов = Новый ОписаниеОповещения(
		"ЗаполнитьСписокВыбораСертификатовПослеПолученияИзХранилища", ЭтотОбъект, ДополнительныеПараметры);
		
	ХранилищеСертификатов.НачатьПолучениеВсех(ОповещениеПослеПолученияСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораСертификатовПослеПолученияИзХранилища(Сертификаты, ДополнительныеПараметры) Экспорт
	
	Если НЕ Сертификаты.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СертификатСмешанный.СписокВыбора.Очистить();
	Элементы.СертификатАутентификации.СписокВыбора.Очистить();
	Элементы.СертификатДляПолученияНастроек.СписокВыбора.Очистить();
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Для Каждого Сертификат Из Сертификаты Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДатаСеанса Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСертификата(Сертификат);
		Если Сертификат.Субъект.Свойство("O") И ЗначениеЗаполнено(Сертификат.Субъект.O) Тогда
			ПредставлениеСертификата = ПредставлениеСертификата + " (" + Сертификат.Субъект.O + ")";
		КонецЕсли;
		ОтпечатокСертификата = Base64Строка(Сертификат.Отпечаток);
		Элементы.СертификатСмешанный.СписокВыбора.Добавить(ОтпечатокСертификата, ПредставлениеСертификата);
		Элементы.СертификатАутентификации.СписокВыбора.Добавить(ОтпечатокСертификата, ПредставлениеСертификата);
		Элементы.СертификатДляПолученияНастроек.СписокВыбора.Добавить(ОтпечатокСертификата, ПредставлениеСертификата);
	КонецЦикла;
	
	Элементы.СертификатСмешанный.СписокВыбора.СортироватьПоПредставлению();
	Элементы.СертификатАутентификации.СписокВыбора.СортироватьПоПредставлению();
	Элементы.СертификатДляПолученияНастроек.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СертификатыАутентификации(НастройкаОбмена, ОтпечаткиСертификатов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыПодписейОрганизации
	|ГДЕ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка = &НастройкаОбмена
	|	И НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)
	|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.ПометкаУдаления
	|	И НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Отпечаток В(&ОтпечаткиСертификатов)";
	Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
	Запрос.УстановитьПараметр("Пользователь",  Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("ОтпечаткиСертификатов", ОтпечаткиСертификатов);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.ВыгрузитьКолонку("СертификатЭП");
	
КонецФункции

&НаСервереБезКонтекста
Функция БИКБанка(Банк)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	
КонецФункции

#КонецОбласти

#Область Сбербанк

&НаКлиенте
Процедура ПослеПроверкиВерсииВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОВК = ОбменСБанкамиСлужебныйВызовСервера.ИнформацияОВКБанка(АдресФайлаВКСбербанка);
	
	ВерсияВКСбербанк = ИнформацияОВК.Версия;
	ИмяВнешнегоМодуля = ИнформацияОВК.Название;
	
	ИспользуетсяКриптография = Истина;
	ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаСбербанк);
	СменитьСтраницуШаги(Элементы.СтраницаСертификаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаСертификатаСбербанкаИзТонкогоКлиента(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено ИЛИ НЕ ВыбранныеФайлы.Количество() Тогда
		ПутьКФайлуСертификатаСбербанка = "";
	Иначе
		ПутьКФайлуСертификатаСбербанка = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаСертификатаСбербанкаИзВеб(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	ВыбранФайлСертификатаСбербанка = Результат;
	АдресФайлаСертификатаСбербанка = Адрес;
	ПутьКФайлуСертификатаСбербанка = ВыбранноеИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаВКСбербанкаИзТонкогоКлиента(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено ИЛИ НЕ ВыбранныеФайлы.Количество() Тогда
		ПутьКФайлуВКСбербанка = "";
	Иначе
		ПутьКФайлуВКСбербанка = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаВКСбербанкаИзВеб(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	ВыбранФайлВКСбербанка = Результат;
	АдресФайлаВКСбербанка = Адрес;
	ПутьКФайлуВКСбербанка = ВыбранноеИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастройкиОбменаСбербанк()
	
	Если ПодключаемыйМодуль = Неопределено Тогда // настройка загружена из файла настроек
		ОбменСБанкамиСлужебныйКлиент.УдалитьВнешнююКомпонентуИзКэш("VPNKeyTLS");
		
		Оповещение = Новый ОписаниеОповещения("АутентифицироватьсяНаТокенеПослеПроверкиВерсииВКСбербанк", ЭтотОбъект);
		
		РеквизитыНастройки = Новый Структура("АдресФайлаВК");
		ОбменСБанкамиСлужебныйВызовСервера.ПолучитьРеквизитыНастройкиОбмена(НастройкаОбмена, РеквизитыНастройки);
		
		ОбменСБанкамиСлужебныйКлиент.ПроверитьВерсиюВКСбербанк(Оповещение, РеквизитыНастройки.АдресФайлаВК);

		Возврат;
	КонецЕсли;
	
	ОбменСБанкамиСлужебныйКлиент.ЗакэшироватьПодключаемыйМодуль("VPNKeyTLS", ПодключаемыйМодуль);
	
	Обработчик = Новый ОписаниеОповещения("ОтправитьТестовыйЗапросПослеУстановкиКаналаСбербанк", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.УстановитьВиртуальныйКаналСоСбербанком(Обработчик, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьТестовыйЗапросПослеУстановкиКаналаСбербанк(КаналУстановлен, ДополнительныеПараметры) Экспорт
	
	Если Не КаналУстановлен Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьТестовыйЗапросПослеОпределенияСертификатаСбербанк", ЭтотОбъект);
	ОбменСБанкамиСлужебныйКлиент.ОпределитьСертификатПодписиСбербанк(Оповещение, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура АутентифицироватьсяНаТокенеПослеПроверкиВерсииВКСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПровестиТестНастроекПослеАутентификацииНаТокенеСбербанка", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.АутентифицироватьсяНаТокенеСбербанка(Оповещение, НастройкаОбмена, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиТестНастроекПослеАутентификацииНаТокенеСбербанка(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		ПодключаемыйМодуль = Неопределено;
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = ОбменСБанкамиСлужебныйКлиент.ПодключеннаяВнешняяКомпонентаБанка("VPNKeyTLS");
	
	ТестНастройкиОбменаСбербанк();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьТестовыйЗапросПослеОпределенияСертификатаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	РеквизитыНастройкиОбмена = ОбменСБанкамиСлужебныйВызовСервера.РеквизитыНастройкиОбмена(НастройкаОбмена);
	ИдентификаторОрганизации = РеквизитыНастройкиОбмена.ИдентификаторОрганизации;
	
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	СтрокаПодписи = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "RequestId="
		+ ИдентификаторЗапроса;

	СтрокаПодписиBase64 = ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(СтрокаПодписи);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПодписиBase64", СтрокаПодписиBase64);
	ДополнительныеПараметры.Вставить("СертификатСсылка", Результат.СертификатСсылка);
	ДополнительныеПараметры.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	
	Представление = НСтр("ru = 'Тестовый запрос'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПодписьПослеУстановкиСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ПодписатьДанныеСбербанк(
		ОписаниеОповещения, ПодключаемыйМодуль, СтрокаПодписиBase64, Результат.ИдентификаторСертификата, Представление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписьПослеУстановкиСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда // Пользователь отказался подписывать
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	ИначеЕсли Результат.Успех Тогда
		
		ПараметрыСертификата = ОбменСБанкамиСлужебныйВызовСервера.РеквизитыСертификата(ДополнительныеПараметры.СертификатСсылка);
		СтрокаСертификат = ОбменСБанкамиСлужебныйВызовСервера.СертификатВФорматеBase64(ПараметрыСертификата.ДанныеСертификата);
		
		ДополнительныеПараметры.Вставить("ДанныеПодписи", Результат.ЭП);
		
		Оповещение = Новый ОписаниеОповещения("ОтправитьТестовыйЗапросПослеУстановкиПодписиСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		
		ОбменСБанкамиСлужебныйКлиент.ПроверитьПодписьНаТокенеСбербанк(
			Оповещение, ПодключаемыйМодуль, ДополнительныеПараметры.СтрокаПодписиBase64, Результат.ЭП, СтрокаСертификат);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ОбработатьРезультатТестаНастройки(Ложь);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьТестовыйЗапросПослеУстановкиПодписиСбербанк(ПодписьВерна, ДополнительныеПараметры) Экспорт
	
	Если Не ПодписьВерна Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Установленная подпись неверна.'"));
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	ТестоваяСтрока = ОбменСБанкамиСлужебныйВызовСервера.ТекстЗапросаНочнойВыписки(НастройкаОбмена,
		ДополнительныеПараметры.ИдентификаторЗапроса, ИдентификаторОрганизации, ДополнительныеПараметры.ДанныеПодписи,
		ДополнительныеПараметры.СертификатСсылка);
		
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиТестовогоЗапросаСбербанк", ЭтотОбъект);
	ПодключаемыйМодуль1С = ОбменСБанкамиСлужебныйКлиент.ПодключеннаяВнешняяКомпонентаБанка("SBRFServiceProxy");
	ОбменСБанкамиСлужебныйКлиент.ОтправитьЗапросВСбербанк(
		Оповещение, ПодключаемыйМодуль1С, ТестоваяСтрока, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиТестовогоЗапросаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ОбработатьРезультатТестаНастройки(Ложь);
	Иначе
		ОбработатьРезультатТестаНастройки(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиАутентификациюПослеПодключенияВКСбербанка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = Результат;
	
	Оповещение = Новый ОписаниеОповещения("ПослеАутентификацииНаТокенеСбербанка", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.АутентифицироватьсяНаТокенеСбербанка(Оповещение, НастройкаОбмена, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеАутентификацииНаТокенеСбербанка(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьСертификатПослеПолученияСпискаСТокенаСбербанк", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеСертификатовСТокенаСбербанк(Оповещение, ПодключаемыйМодуль);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСертификатПослеПолученияСпискаСТокенаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
		
	СоответствиеСертификатов = Результат.СоответствиеСертификатов;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СоответствиеСертификатов", СоответствиеСертификатов);
	
	СписокСертификатов = Новый СписокЗначений;
	Если СоответствиеСертификатов.Количество() = 1 Тогда
		Для Каждого КлючЗначение Из СоответствиеСертификатов Цикл
			ОбработкаВыбораСертификатаСбербанка(СписокСертификатов.Добавить(КлючЗначение.Ключ), ДополнительныеПараметры);
			Возврат;
		КонецЦикла;
	КонецЕсли;
	
	ВыборкаСертификатов = Новый Соответствие;
	
	Для Каждого Элемент Из СоответствиеСертификатов Цикл
		
		ИдентификаторСертификата = Элемент.Ключ;
		ДвоичныеДанныеСертификата = Элемент.Значение;
		
		Если ДвоичныеДанныеСертификата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураСертификата = ОбменСБанкамиСлужебныйВызовСервера.СтруктураСертификата(ДвоичныеДанныеСертификата);
		
		Если ЗначениеЗаполнено(СтруктураСертификата) Тогда
			ШаблонПредставления = Нстр("ru = '%1, до %2'");
			ДатаСтрокой = Формат(СтруктураСертификата.ДействителенДО, "ДФ=MM.yyyy");
			Представление = СтрШаблон(ШаблонПредставления, СтруктураСертификата.КомуВыдан, ДатаСтрокой);
			ВыборкаСертификатов.Вставить(ИдентификаторСертификата, Представление);
		КонецЕсли;
		
	КонецЦикла;

	Если ВыборкаСертификатов.Количество() = 1 Тогда
		Для Каждого КлючЗначение ИЗ ВыборкаСертификатов Цикл
			ОбработкаВыбораСертификатаСбербанка(СписокСертификатов.Добавить(КлючЗначение.Ключ), ДополнительныеПараметры);
			Возврат;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элемент Из ВыборкаСертификатов Цикл
		СписокСертификатов.Добавить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	ОО = Новый ОписаниеОповещения("ОбработкаВыбораСертификатаСбербанка", ЭтотОбъект, ДополнительныеПараметры);
	
	ЗаголовокФормыВыбора = НСтр("ru = 'Выберите добавляемый сертификат подписи'");

	СписокСертификатов.ПоказатьВыборЭлемента(ОО, ЗаголовокФормыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСертификатаСбербанка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСертификата = Результат.Значение;
	
	ДвоичныеДанныеСертификата = ДополнительныеПараметры.СоответствиеСертификатов.Получить(ИдентификаторСертификата);
	
	ОписаниеОшибки = "";
	НовыйСертификат = ОбменСБанкамиСлужебныйВызовСервера.СоздатьСертификатСбербанка(
		ДвоичныеДанныеСертификата, Организация);
	Если НЕ ЗначениеЗаполнено(НовыйСертификат) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Сертификаты.Добавить();
	НоваяСтрока.Сертификат = НовыйСертификат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСИспользованиемДополнительнойОбработки

&НаКлиенте
Процедура ПослеВыбораФайлаВнешнегоМодуляИзТонкогоКлиента(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено ИЛИ НЕ ВыбранныеФайлы.Количество() Тогда
		ПутьКФайлуВнешнегоМодуля = "";
	Иначе
		ПутьКФайлуВнешнегоМодуля = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаВнешнегоМодуляИзВеб(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	ВыбранФайлВнешнегоМодуля = Результат;
	АдресФайлаВнешнегоМодуля = Адрес;
	ПутьКФайлуВнешнегоМодуля = ВыбранноеИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастройкиОбменаЧерезДополнительнуюОбработку()
	
	ОтпечатокBase64 = ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(Отпечаток);
	ДвоичныеДанные = Base64Значение(ОтпечатокBase64);
	МассивПодписи = Новый Массив;
	МассивПодписи.Добавить(ДвоичныеДанные);
	Попытка
		МассивПодписей = ПодключаемыйМодуль.Подписать(СертификатXML, МассивПодписи);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки подписи.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка подписи'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецПопытки;

	Попытка
		ДопПараметры = Новый Структура("ИдентификаторХранилища", ИдентификаторХранилища);
		ПодписьВалидна = ПодключаемыйМодуль.ПроверитьПодпись(СертификатXML, ДвоичныеДанные, МассивПодписей[0], ДопПараметры);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка проверки подписи.
								|Код ошибки: %1
								|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Проверка подписи'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецПопытки;
	
	Попытка
		ПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, 1);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка отправки тестового запроса.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Отправка тестового запроса'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецПопытки;
	
	ОбработатьРезультатТестаНастройки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКлючаЧерезДополнительнуюОбработку(ВыбранныйЭлемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторХранилища = ВыбранныйЭлемент.Значение;
	
	ТребуетсяУстановкаPINКода = ОбменСБанкамиСлужебныйКлиент.НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
		ПодключаемыйМодуль, ИдентификаторХранилища);

	Если ТребуетсяУстановкаPINКода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторХранилища", ИдентификаторХранилища);
	Если ТребуетсяУстановкаPINКода Тогда
		ОбработчикВводаPIN = Новый ОписаниеОповещения(
			"ОбработатьВводPINЧерезДополнительнуюОбработку", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросPINКода", ДополнительныеПараметры, , , , , ОбработчикВводаPIN);
	Иначе
		ПослеУстановкиPINЧерезДополнительнуюОбработку(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводPINЧерезДополнительнуюОбработку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	PINУстановлен = ОбменСБанкамиСлужебныйКлиент.УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
		ПодключаемыйМодуль, ДополнительныеПараметры.ИдентификаторХранилища, Результат);

	Если PINУстановлен Тогда
		ПослеУстановкиPINЧерезДополнительнуюОбработку(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиPINЧерезДополнительнуюОбработку(ДополнительныеПараметры)
	
	Попытка
		СертификатыНаУстройстве = ПодключаемыйМодуль.СертификатыВХранилище(ДополнительныеПараметры.ИдентификаторХранилища);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения банковских сертификатов.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Получение банковских сертификатов'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
		Возврат;
	КонецПопытки;
	ИдентификаторХранилища = ДополнительныеПараметры.ИдентификаторХранилища;
	
	Если СертификатыНаУстройстве.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'На банковском ключе отсутствуют сертификаты.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	СписокВыбораСертификатов = Новый СписокЗначений;
	
	Для Каждого СертификатXML Из СертификатыНаУстройстве Цикл
		ДанныеСертификата = ОбменСБанкамиСлужебныйКлиент.ДанныеСертификатаЧерезДополнительнуюОбработку(
			ПодключаемыйМодуль, СертификатXML);
		Если ДанныеСертификата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Отпечаток = ДанныеСертификата.Отпечаток;
		СписокВыбораСертификатов.Добавить(СертификатXML, ДанныеСертификата.Псевдоним);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокВыбора", СписокВыбораСертификатов);
	Оповещение = Новый ОписаниеОповещения(
		"ПослеВыбораСертификатаЧерезДополнительнуюОбработку", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ВыборСертификатаДляДобавления", ПараметрыФормы, ЭтотОбъект, ,
		ВариантОткрытияОкна.ОтдельноеОкно, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСертификатаЧерезДополнительнуюОбработку(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПарольСертификата = ДанныеВыбора.Пароль;
	
	СертификатXML = ДанныеВыбора.СертификатXML;
	
	ПарольУстановлен = ОбменСБанкамиСлужебныйКлиент.УстановитьПарольСертификатаЧерезДополнительнуюОбработку(
		ПодключаемыйМодуль, ДанныеВыбора.СертификатXML, ДанныеВыбора.Пароль, УникальныйИдентификатор);
		
	Если НЕ ПарольУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СертификатXML", СертификатXML);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеУстановкиСоединенияЧерезДополнительнуюОбработку", ЭтотОбъект, ДополнительныеПараметры);
	УстановитьСоединениеЧерезДополнительнуюОбработку(Оповещение, СертификатXML);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиСоединенияЧерезДополнительнуюОбработку(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		СертификатXML = ПодключаемыйМодуль.ДополнитьСертификат(ДополнительныеПараметры.СертификатXML);
	Исключение
		ШаблонОшибки = НСтр("ru = 'При загрузке сертификата произошла ошибка.
								|Код ошибки: %1
								|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Получение дополнительных данных сертификата'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
		Возврат;
	КонецПопытки;

	ДанныеСертификата = ОбменСБанкамиСлужебныйКлиент.ДанныеСертификатаЧерезДополнительнуюОбработку(
		ПодключаемыйМодуль, СертификатXML);
		
	Если ДанныеСертификата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйСертификат = ОбменСБанкамиСлужебныйВызовСервера.СохранитьСертификатВнешнегоМодуля(
		СертификатXML, ДанныеСертификата, Организация, ПрограммаБанка);
		
	НовСтрока = Сертификаты.Добавить();
	НовСтрока.Сертификат = НовыйСертификат;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоединениеЧерезДополнительнуюОбработку(Оповещение, СертификатXML)
	
	Попытка
		СоединениеУстановлено = ПодключаемыйМодуль.УстановитьСоединение(СертификатXML);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки соединения.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка соединения'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецПопытки;
	
	Если СоединениеУстановлено Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Иначе
		ПараметрыРасширеннойАутентификации = Неопределено;
		Попытка
			ТребуетсяРасширеннаяАутентификация = ПодключаемыйМодуль.ТребуетсяРасширеннаяАутентификация(
				СертификатXML, ПараметрыРасширеннойАутентификации);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка установки соединения.
										|Код ошибки: %1
										|%2'");
			ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Определение необходимости расширенной аутентификации'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
			ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
			ВыполнитьОбработкуОповещения(Оповещение, Ложь);
			Возврат;
		КонецПопытки;
		Если ТребуетсяРасширеннаяАутентификация Тогда
			Если ПараметрыРасширеннойАутентификации.Способы.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка установки соединения с банком.'");
				ТекстОшибки = НСтр("ru = 'Не определены способы расширенной аутентификации.'");
				Операция = НСтр("ru = 'Определение необходимости расширенной аутентификации'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, , 1);
				ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
				ВыполнитьОбработкуОповещения(Оповещение, Ложь);
				Возврат;
			КонецЕсли;
			
			Если НЕ ПараметрыРасширеннойАутентификации.Способы.Свойство("SMS") Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка установки соединения с банком.'");
				ТекстОшибки =НСтр("ru = 'Расширенная аутентификация по SMS не поддерживается.'");
				Операция = НСтр("ru = 'Определение необходимости расширенной аутентификации'");
				ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, , 1);
				ВыполнитьОбработкуОповещения(Оповещение, Ложь);
				Возврат;
			КонецЕсли;
			РасширеннаяАутентификацияЧерезДополнительнуюОбработку(
				Оповещение, СертификатXML, ПараметрыРасширеннойАутентификации.Сессия);
			Иначе
				ТекстСообщения = НСтр("ru = 'Ошибка установки соединения'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ВыполнитьОбработкуОповещения(Оповещение, Ложь);
			КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяАутентификацияЧерезДополнительнуюОбработку(Обработчик, СертификатXML, Сессия)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикПослеУстановкиСоединения", Обработчик);
	ДополнительныеПараметры.Вставить("Сессия", Сессия);
	ДополнительныеПараметры.Вставить("СертификатXML", СертификатXML);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеОтправкиЗапросаПароляПоSMSЧерезДополнительнуюОбработку", ЭтотОбъект, ДополнительныеПараметры);
	ЗапроситьПарольПоSMSЧерезДополнительнуюОбработку(Оповещение, СертификатXML, Сессия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьПарольПоSMSЧерезДополнительнуюОбработку(Оповещение, СертификатXML, Сессия)
	
	Попытка
		ПодключаемыйМодуль.ОтправитьОдноразовыйПарольРасширеннойАутентификацииПоSMS(СертификатXML, Сессия);
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонОшибки = НСтр("ru = 'Ошибка запуска аутентификации по SMS.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Запрос одноразового пароля по SMS'");
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаПароляПоSMSЧерезДополнительнуюОбработку(Успех, ДополнительныеПараметры) Экспорт
	
	Если НЕ Успех Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеУстановкиСоединения, Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеВводаОдноразовогоПароляЧерезДополнительнуюОбработку", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура("ИдентификаторСессии", ДополнительныеПараметры.Сессия.Идентификатор);
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросОдноразовогоПароля", ПараметрыФормы, ЭтотОбъект, ,
		ВариантОткрытияОкна.ОтдельноеОкно, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаОдноразовогоПароляЧерезДополнительнуюОбработку(ОдноразовыйПароль, ДополнительныеПараметры) Экспорт
	
	Если ОдноразовыйПароль = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеУстановкиСоединения, Ложь);
		Возврат;
	КонецЕсли;
	
	ДанныеРасширеннойАутентификации = Новый Структура();
	ДанныеРасширеннойАутентификации.Вставить("Способ", "SMS");
	ДанныеРасширеннойАутентификации.Вставить("Сессия", ДополнительныеПараметры.Сессия);
	ДанныеРасширеннойАутентификации.Вставить("Пароль", ОдноразовыйПароль);
	
	Попытка
		ПодключаемыйМодуль.РасширеннаяАутентификация(ДополнительныеПараметры.СертификатXML, ДанныеРасширеннойАутентификации);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеУстановкиСоединения, Истина);
	Исключение
		ВидОперации = НСтр("ru = 'Отправка одноразового пароля из SMS в банк'");
		ТекстСообщения = НСтр("ru = 'Ошибка аутентификации.'");
		ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеУстановкиСоединения, Ложь);
	КонецПопытки
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьДополнительнуюОбработку()
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВремФайл = ПолучитьИмяВременногоФайла("epf");
		ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресФайлаВнешнегоМодуля);
		ДвоичныеДанныеОбработки.Записать(ВремФайл);
		ПодключаемыйМодуль = ВнешниеОбработки.ПолучитьФорму(ВремФайл);
		ИмяВнешнегоМодуля = ПодключаемыйМодуль.ЭтотОбъект;
		ПозицияТочки = СтрНайти(ИмяВнешнегоМодуля, ".");
		ИмяВнешнегоМодуля = Сред(ИмяВнешнегоМодуля, ПозицияТочки + 1);
	#Иначе
		
		ОбменСБанкамиСлужебныйВызовСервера.ПодключитьВнешнююОбработку(АдресФайлаВнешнегоМодуля, ИмяВнешнегоМодуля);
		
		Если НЕ ЗначениеЗаполнено(ИмяВнешнегоМодуля) Тогда // обработка не подключилась
			Возврат Ложь;
		КонецЕсли;
		
		ИмяФормыОбработки = "ВнешняяОбработка." + ИмяВнешнегоМодуля + ".Форма";
		Попытка
			ПараметрыФормыОбработки = Новый Структура("РежимЭДО", Истина);
			ПодключаемыйМодуль = ПолучитьФорму(ИмяФормыОбработки, ПараметрыФормыОбработки, , УникальныйИдентификатор);
		Исключение
			Операция = НСтр("ru = 'Получение формы внешней обработки.'");
			ТекстСообщения = НСтр("ru = 'Не удалось подключить указанный внешний модуль'");
			ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, , 1);
			Возврат Ложь;
		КонецПопытки;
	#КонецЕсли
	
	СведенияОВнешнейОбработке = ОбменСБанкамиСлужебныйВызовСервера.СведенияОВнешнейОбработке(ИмяВнешнегоМодуля);
	
	Если Не ЗначениеЗаполнено(СведенияОВнешнейОбработке) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВерсияДополнительнойОбработки = СведенияОВнешнейОбработке.Версия;
	НаименованиеВнешнейОбработки = СведенияОВнешнейОбработке.Наименование;
	
	Если Не ЗначениеЗаполнено(ВерсияДополнительнойОбработки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура НачатьИнициализациюДополнительнойОбработки(Оповещение)

	Если НЕ ПодключитьДополнительнуюОбработку() Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;

	ВерсияАктуальнойОбработки = Неопределено;
	
	ОбменСБанкамиСлужебныйВызовСервера.ПроверитьАктуальностьВнешнейОбработки(
		ИмяВнешнегоМодуля, ВерсияДополнительнойОбработки, ВерсияАктуальнойОбработки);
		
	Если ЗначениеЗаполнено(ВерсияАктуальнойОбработки) Тогда
		ТекстВопроса = НСтр("ru = 'В информационной базе уже есть модуль версии %1.
								|Выбранный модуль имеет другую версию %2.
								|Модуль какой версии нужно теперь использовать?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, ВерсияАктуальнойОбработки, ВерсияДополнительнойОбработки);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПослеИнициализацииДополнительнойОбработки", Оповещение);
		ОповещениеДляВопроса = Новый ОписаниеОповещения(
			"ПослеВопросаОНовойВерсииДополнительнойОбработки", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Истина, ВерсияДополнительнойОбработки);
		Кнопки.Добавить(Ложь, ВерсияАктуальнойОбработки);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ЗаголовокВопроса = НСтр("ru = 'Выбор модуля для использования'");
		ПоказатьВопрос(ОповещениеДляВопроса, ТекстВопроса, Кнопки, , Истина, ЗаголовокВопроса);
	Иначе
		СохранитьВнешнююОбработку = Истина;
		ИнициализироватьДополнительнуюОбработкуПослеПодключения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьДополнительнуюОбработкуПослеПодключения(Оповещение)
	
	Попытка
		ОписаниеОбработки = ПодключаемыйМодуль.ОписаниеОбработки();
		ВерсияAPI = ОписаниеОбработки.ВерсияAPI;
	Исключение
		ВерсияAPI = 1;
	КонецПопытки;
	
	Если ВерсияAPI = 1 Тогда
		Попытка
			ПодключаемыйМодуль.Инициализировать();
			ВыполнитьОбработкуОповещения(Оповещение, Истина);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка инициализации внешнего модуля.
										|Код ошибки: %1
										|%2'");
			ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Инициализация внешней обработки'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
			ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		КонецПопытки;
	Иначе
		Попытка
			АдресКомпонентыДополнительнойОбработки = "";
			ИнициализацияВыполнена = ПодключаемыйМодуль.НачатьИнициализацию(АдресКомпонентыДополнительнойОбработки);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка инициализации внешнего модуля.
										|Код ошибки: %1
										|%2'");
			ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Инициализация внешней обработки'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
			ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		КонецПопытки;
		
		Если ИнициализацияВыполнена Тогда
			ЗавершитьИнициализациюВнешнейКомпонентыДополнительнойОбработки(Оповещение);
		Иначе
			ДополнительныеПараметры = Новый Структура("ОповещениеПослеИнициализацииДополнительнойОбработки", Оповещение);
			ОбработчикПослеУстановкиВК = Новый ОписаниеОповещения("ПослеУстановкиВнешнейКомпонентыДополнительногоМодуля",
				ЭтотОбъект, ДополнительныеПараметры, "ПослеОшибкиУстановкиВнешнейКомпонентыДополнительногоМодуля", ЭтотОбъект);
			НачатьУстановкуВнешнейКомпоненты(ОбработчикПослеУстановкиВК, АдресКомпонентыДополнительнойОбработки);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОНовойВерсииДополнительнойОбработки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Истина Тогда // Заменить внешнюю обработку
		СохранитьВнешнююОбработку = Истина;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	Иначе
		СохранитьВнешнююОбработку = Ложь;
		АдресФайлаВнешнегоМодуля = АдресВнешнейОбработки(ИмяВнешнегоМодуля, УникальныйИдентификатор);
		
		Если Не ЗначениеЗаполнено(АдресФайлаВнешнегоМодуля) ИЛИ НЕ ЭтоАдресВременногоХранилища(АдресФайлаВнешнегоМодуля) Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеИнициализацииДополнительнойОбработки, Ложь);
			Возврат;
		КонецЕсли;
		
		Если НЕ ПодключитьДополнительнуюОбработку() Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеИнициализацииДополнительнойОбработки, Ложь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИнициализироватьДополнительнуюОбработкуПослеПодключения(
		ДополнительныеПараметры.ОповещениеПослеИнициализацииДополнительнойОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИнициализациюВнешнейКомпонентыДополнительнойОбработки(Оповещение)
	
	Попытка
		ПодключаемыйМодуль.ЗавершитьИнициализацию();
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка завершения инициализации внешнего модуля.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Завершение инициализации внешней обработки'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиВнешнейКомпонентыДополнительногоМодуля(ДополнительныеПараметры) Экспорт
	
	ЗавершитьИнициализациюВнешнейКомпонентыДополнительнойОбработки(
		ДополнительныеПараметры.ОповещениеПослеИнициализацииДополнительнойОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОшибкиУстановкиВнешнейКомпонентыДополнительногоМодуля(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВидОперации = НСтр("ru = 'Установка внешней компоненты дополнительной обработки'");
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ТекстСообщения = НСтр("ru = 'При подключении внешнего модуля произошла ошибка.'");
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеИнициализацииДополнительнойОбработки, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИнициализацииДополнительнойОбработки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаЗапросИспользованияВнешнегоМодуля);
		СменитьСтраницуШаги(Элементы.СтраницаСертификаты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресВнешнейОбработки(ИмяМодуля, УникальныйИдентификатор)
	
	УстановитьПривилегированныйРежим(Истина);

	ДанныеВнешнихМодулей = Константы.ВнешниеФайлыОбменСБанками.Получить().Получить();
	
	Если НЕ ДанныеВнешнихМодулей.Свойство("ВнешниеОбработки") Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеМодуля = ДанныеВнешнихМодулей.ВнешниеОбработки.Получить(ИмяМодуля);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеМодуля.ДвоичныеДанныеМодуля, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область ОбменСИспользованиемВнешнейКомпоненты

&НаКлиенте
Процедура ТестНастройкиОбменаЧерезВнешнююКомпоненту(Обработчик)
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатТестаНастройки", ЭтотОбъект);
	
	Попытка
		ПодключаемыйМодуль.ОтправитьЗапрос("1", Неопределено);
		ВыполнитьОбработкуОповещения(Обработчик, Истина);
	Исключение
		ВидОперации = НСтр("ru = 'Отправка текстового запроса'");
		ТекстСообщения = НСтр("ru = 'Ошибка при отправке тестового сообщения в банк.'");
		ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Обработчик, Ложь);
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВнешнююКомпонентуССервераБанка()
	
	Если ВнешняяКомпонентаЗагружена Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеЗагрузкиВнешнейКомпоненты);
	Иначе
		Задание = ЗагрузитьКомпонентуНаСервере(УникальныйИдентификатор, АдресСервераДляПолученияВнешнейКомпоненты);
			
		Если Задание.Завершено Тогда
			Если Задание.Успешно Тогда
				АдресФайлаВнешнегоМодуля = Задание.АдресХранилища;
				ВыполнитьОбработкуОповещения(ОповещениеПослеЗагрузкиВнешнейКомпоненты);
			КонецЕсли;
		Иначе
			ИдентификаторЗадания = Задание.Идентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
			ПодключитьОбработчикОжидания("ПроверитьВыполнениеЗаданияПолученияВК", 1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьКомпонентуНаСервере(Знач УникальныйИдентификатор, Знач АдресСервера)
	
	Задание = Новый Структура(
		"Завершено, Успешно, Значение, Идентификатор, АдресХранилища", Ложь, Неопределено, Неопределено);
	
	Попытка
		НазваниеЗадания = НСтр("ru = 'Прямой обмен с банком: Получение внешней компоненты'");
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
			"Справочники.НастройкиОбменСБанками.ПолучитьВнешнююКомпонентуССервераБанка", АдресСервера, НазваниеЗадания);
		Задание.АдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		Задание.Идентификатор = РезультатФоновогоЗадания.ИдентификаторЗадания;
		Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			Если ЗначениеЗаполнено(РезультатФоновогоЗадания.ИдентификаторЗадания) Тогда
				МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(
					РезультатФоновогоЗадания.ИдентификаторЗадания);
				Если МассивСообщений.Количество() Тогда
					Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
						СообщениеОбОшибке.Сообщить();
					КонецЦикла;
					Задание.Успешно = Ложь;
				Иначе
					Задание.Успешно = Истина;
				КонецЕсли;
				Задание.Завершено = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Задание.Завершено = Истина;
		Задание.Успешно = Ложь;
		Задание.Значение = Новый Структура;
		Текст = НСтр("ru = 'Не удалось загрузить внешний модуль с сервера банка.'");
		ВидОперации = НСтр("ru = 'Получение внешнего модуля с сервера банка'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, Текст, 1);
	КонецПопытки;
	
	Возврат Задание;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыполнениеЗаданияПолученияВК()
	
	Задание = ПроверитьВыполнениеФоновогоЗаданияНаСервере(ИдентификаторЗадания);
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			АдресФайлаВнешнегоМодуля = АдресХранилища;
			ВыполнитьОбработкуОповещения(ОповещениеПослеЗагрузкиВнешнейКомпоненты);
		КонецЕсли;
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеЗаданияПолученияВК", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатЧерезВнешнююКомпоненту(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ПодключенаВнешняяКомпонента Тогда
		Обработчик = Новый ОписаниеОповещения("ДобавитьСертификатПослеПодключенияВнешнейКомпоненты", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ПодключитьВнешнююКомпонентуБанка(Обработчик, АдресФайлаВнешнегоМодуля, "iBank2ProviderDX_v_1_0");
	Иначе
		ДобавитьСертификатПослеПодключенияВнешнейКомпоненты(ПодключаемыйМодуль);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатПослеПодключенияВнешнейКомпоненты(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодключенаВнешняяКомпонента = Истина;
	
	ПодключаемыйМодуль = Результат;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияХранилищСертификатов", ЭтотОбъект);
	ПолучитьХранилищаСертификатов(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьХранилищаСертификатов(ОписаниеОповещения)
	
	Попытка
		ХранилищаXML = ПодключаемыйМодуль.ХранилищаСертификатов();
		Хранилища = ОбменСБанкамиСлужебныйКлиент.ДеСериализованныеДанные(ХранилищаXML);
		Если НЕ Хранилища.Количество() Тогда
			ТекстСообщения = НСтр("ru = 'Не обнаруженные подключенные электронные ключи.
										|Убедитесь что ключ подключен к компьютеру и повторите попытку'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Хранилища);
		КонецЕсли;
	Исключение
		ВидОперации = НСтр("ru = 'Получение списка устройств ключей'");
		ТекстСообщения = НСтр("ru = 'Ошибка при получении списка устройств ключей.'");
		ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения)
	
	Попытка
		ДеталиОшибкиXML = ПодключаемыйМодуль.ДеталиОшибки();
	Исключение
		ВидОперации = НСтр("ru = 'Получение информации об ошибке'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка при работе с внешним модулем банка.'");
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, , 1);
		Возврат;
	КонецПопытки;
	ДеталиОшибки = ОбменСБанкамиСлужебныйКлиент.ДеСериализованныеДанные(ДеталиОшибкиXML);

	ШаблонОшибки = ТекстСообщения + Символы.ПС + НСтр("ru = 'Код ошибки: %1
															|%2'");
	ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
	ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
	ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, , 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияХранилищСертификатов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Результат.Количество() > 1 Тогда
		СписокВыбора = Новый СписокЗначений;
		Для Каждого Элемент Из Результат Цикл
			СписокВыбора.Добавить(Элемент);
		КонецЦикла;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения(
			"ПослеВыбораКлючаЧерезВнешнююКомпоненту", ЭтотОбъект, ДополнительныеПараметры);
		ЗаголовокВыбора = НСтр("ru = 'Выберите электронный ключ:'");
		СписокВыбора.ПоказатьВыборЭлемента(ОповещениеОЗакрытии, ЗаголовокВыбора);
	Иначе
		ДополнительныеПараметры.Вставить("ИдентификаторХранилища", Результат[0]);
		ОбработчикПродолжения = Новый ОписаниеОповещения(
			"ПослеПроверкиНеобходимостиУстановкиPIN", ЭтотОбъект, ДополнительныеПараметры);
		ПроверитьНеобходимостьУстановкиPIN(ОбработчикПродолжения, Результат[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКлючаЧерезВнешнююКомпоненту(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИдентификаторХранилища", ВыбранныйЭлемент.Значение);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения(
		"ПослеПроверкиНеобходимостиУстановкиPIN", ЭтотОбъект, ДополнительныеПараметры);
	
	ПроверитьНеобходимостьУстановкиPIN(ОбработчикПродолжения, ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиНеобходимостиУстановкиPIN(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда //требуется установка PIN-кода
		ОбработчикВводаPIN = Новый ОписаниеОповещения(
			"ОбработатьВводPINЧерезВнешнююКомпоненту", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросPINКода", ДополнительныеПараметры, , , , , ОбработчикВводаPIN);
	Иначе
		ПослеУстановкиPINЧерезВнешнююКомпоненту(Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводPINЧерезВнешнююКомпоненту(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеУстановкиPINЧерезВнешнююКомпоненту", ЭтотОбъект, ДополнительныеПараметры);
	УстановитьPINКлюча(Обработчик, ДополнительныеПараметры.ИдентификаторХранилища, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьPINКлюча(Обработчик, ИдентификаторХранилища, Пин)
	
	Попытка
		ПодключаемыйМодуль.УстановитьPINКодХранилища(ИдентификаторХранилища, Пин);
		ВыполнитьОбработкуОповещения(Обработчик, Истина);
	Исключение
		ВидОперации = НСтр("ru = 'Установка PIN-кода'");
		ТекстСообщения = НСтр("ru = 'Ошибка при установке PIN-кода.'");
		ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Обработчик, Ложь);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиPINЧерезВнешнююКомпоненту(PINУстановлен, ДополнительныеПараметры) Экспорт
	
	Если Не PINУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеПолученияСертификатов", ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьСертификатыХранилища(Обработчик, ДополнительныеПараметры.ИдентификаторХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСертификатыХранилища(Обработчик, ИдентификаторХранилища)
	
	Попытка
		СертификатыXML = ПодключаемыйМодуль.СертификатыВХранилище(ИдентификаторХранилища);
		СертификатыКлюча = ОбменСБанкамиСлужебныйКлиент.ДеСериализованныеДанные(СертификатыXML);
		Если НЕ СертификатыКлюча.Количество() Тогда
			ТекстСообщения = НСтр("ru = 'Отсутствуют сертификаты на банковском ключе'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ВыполнитьОбработкуОповещения(Обработчик, Неопределено);
		Иначе
			ВыполнитьОбработкуОповещения(Обработчик, СертификатыКлюча);
		КонецЕсли;
	Исключение
		ВидОперации = НСтр("ru = 'Получение сертификатов с банковского ключа'");
		ТекстСообщения = НСтр("ru = 'Ошибка при получении сертификатов банковского ключа.'");
		ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Обработчик, Неопределено);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСертификатов(СертификатыКлюча, ДополнительныеПараметры) Экспорт
	
	Если СертификатыКлюча = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения(
		"ПослеВыбораСертификатаЧерезВнешнююКомпоненту", ЭтотОбъект, ДополнительныеПараметры);
	ВыбратьСертификатЧерезВнешнююКомпоненту(Обработчик, СертификатыКлюча);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСертификатаЧерезВнешнююКомпоненту(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СертификатXML", ДанныеВыбора.СертификатXML);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеАутентификацииНаЭлектронномКлюче", ЭтотОбъект, ДополнительныеПараметры);
	
	АутентифицироватьсяНаЭлектронномКлюче(ОписаниеОповещения, ДанныеВыбора.СертификатXML, ДанныеВыбора.Пароль);
	
КонецПроцедуры

&НаКлиенте
Процедура АутентифицироватьсяНаЭлектронномКлюче(Оповещение, СертификатXML, Пароль)
	
	Попытка
		ПодключаемыйМодуль.УстановитьПарольСертификата(СертификатXML, Пароль);
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Исключение
		ВидОперации = НСтр("ru = 'Аутентификация'");
		ТекстСообщения = НСтр("ru = 'Ошибка аутентификации.'");
		ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеАутентификацииНаЭлектронномКлюче(АутентификацияВыполнена, ДополнительныеПараметры) Экспорт
	
	Если НЕ АутентификацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеУстановкиНастроекПрокси", ЭтотОбъект, ДополнительныеПараметры);
	
	УстановитьНастройкиПрокси(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиПрокси(Обработчик)
	
	НастройкиПроксиСервера = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиПроксиСервера;
	
	Если ЗначениеЗаполнено(НастройкиПроксиСервера) Тогда
	
		НастройкиПрокси = Новый Структура;

		НастройкиПрокси.Вставить("ТипПодключения", 0);

		Если НастройкиПроксиСервера["ИспользоватьПрокси"] Тогда
			НастройкиПрокси.ТипПодключения = ?(НастройкиПроксиСервера["ИспользоватьСистемныеНастройки"], 1, 2);
		КонецЕсли;

		НастройкиПрокси.Вставить("Сервер",       НастройкиПроксиСервера["Сервер"]);
		НастройкиПрокси.Вставить("Порт",         Формат(НастройкиПроксиСервера["Порт"], "ЧГ=0"));
		НастройкиПрокси.Вставить("Пользователь", НастройкиПроксиСервера["Пользователь"]);
		НастройкиПрокси.Вставить("Пароль",       НастройкиПроксиСервера["Пароль"]);

		НастройкиПроксиXML = ОбменСБанкамиСлужебныйКлиент.СериализованныеДанные(НастройкиПрокси);
		
		Попытка
			ПодключаемыйМодуль.УстановитьПрокси(НастройкиПроксиXML);
		Исключение
			ВидОперации = НСтр("ru = 'Установка настроек прокси-сервера'");
			ТекстСообщения = НСтр("ru = 'Ошибка установки соединения.'");
			ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
			ВыполнитьОбработкуОповещения(Обработчик, Ложь);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Обработчик, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиНастроекПрокси(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеУстановкиСоединенияЧерезВнешнююКомпоненту", ЭтотОбъект, ДополнительныеПараметры);
	Идентификатор = Строка(Новый УникальныйИдентификатор);
	УстановитьСоединениеЧерезВнешнююКомпоненту(Оповещение, Идентификатор, ДополнительныеПараметры.СертификатXML);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиСоединенияЧерезВнешнююКомпоненту(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеДополненияСертификата", ЭтотОбъект, ДополнительныеПараметры);
	ДополнитьСертификат(Обработчик, ДополнительныеПараметры.СертификатXML);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСертификат(Обработчик, СертификатXML)
	
	Попытка
		СертификатXML = ПодключаемыйМодуль.ДополнитьСертификат(СертификатXML);
		ВыполнитьОбработкуОповещения(Обработчик, СертификатXML);
	Исключение
		ВидОперации = НСтр("ru = 'Дополнение сертификата'");
		ТекстСообщения = НСтр("ru = 'Ошибка загрузки сертификата.'");
		ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Обработчик, Неопределено);
	КонецПопытки
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеДополненияСертификата(СертификатXML, ДополнительныеПараметры) Экспорт
	
	Если СертификатXML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеПолученияДанныхСертификата", ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьДанныеСертификатаЧерезВнешнююКомпоненту(Обработчик, СертификатXML);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияДанныхСертификата(ДанныеСертификата, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСертификата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйСертификат = ОбменСБанкамиСлужебныйВызовСервера.СохранитьСертификатВнешнегоМодуля(
		ДополнительныеПараметры.СертификатXML, ДанныеСертификата, Организация, ПрограммаБанка);
		
	НовСтрока = Сертификаты.Добавить();
	НовСтрока.Сертификат = НовыйСертификат;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоединениеЧерезВнешнююКомпоненту(Обработчик, Идентификатор, СертификатXML)
	
	Попытка
		СоединениеУстановлено = ПодключаемыйМодуль.УстановитьСоединение(СертификатXML, Идентификатор);
	Исключение
		ВидОперации = НСтр("ru = 'Установка соединения с сервером банка'");
		ТекстСообщения = НСтр("ru = 'Ошибка установки соединения.'");
		ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Обработчик, Ложь);
		Возврат;
	КонецПопытки;
	
	Если СоединениеУстановлено Тогда
		ВыполнитьОбработкуОповещения(Обработчик, Истина);
	Иначе
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработчикПослеУстановкиСоединения", Обработчик);
		ОбработчикПослеПроверкиРасширеннойАутентификации = Новый ОписаниеОповещения(
			"ПослеПроверкиРасширеннойАутентификации", ЭтотОбъект, ДополнительныеПараметры);
		ПроверитьНеобходимостьРасширеннойАутентификации(ОбработчикПослеПроверкиРасширеннойАутентификации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьРасширеннойАутентификации(Обработчик)
	
	ПараметрыРасширеннойАутентификацииXML = Неопределено;
	Попытка
		ТребуетсяРасширеннаяАутентификация = ПодключаемыйМодуль.НеобходимоВыполнитьРасширеннуюАутентификацию(
			ПараметрыРасширеннойАутентификацииXML);
		ПараметрыРасширеннойАутентификации = ОбменСБанкамиСлужебныйКлиент.ДеСериализованныеДанные(
			ПараметрыРасширеннойАутентификацииXML);
	Исключение
		ВидОперации = НСтр("ru = 'Проверка необходимости расширенной аутентификации'");
		ТекстСообщения = НСтр("ru = 'Ошибка установки соединения.'");
		ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Обработчик, Неопределено);
		Возврат;
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяРасширеннаяАутентификация", ТребуетсяРасширеннаяАутентификация);
	Результат.Вставить("ПараметрыРасширеннойАутентификации", ПараметрыРасширеннойАутентификации);
	
	ВыполнитьОбработкуОповещения(Обработчик, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиРасширеннойАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеУстановкиСоединения, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат.ТребуетсяРасширеннаяАутентификация Тогда
		Если Результат.ПараметрыРасширеннойАутентификации.Способы.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не определены способы расширенной аутентификации.'"));
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеУстановкиСоединения, Ложь);
			Возврат;
		КонецЕсли;
		Если НЕ Результат.ПараметрыРасширеннойАутентификации.Способы.Свойство("SMS") Тогда
			ТекстСообщения = НСтр("ru = 'Расширенная аутентификация по SMS не поддерживается.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеУстановкиСоединения, Ложь);
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("Сессия", Результат.ПараметрыРасширеннойАутентификации.Сессия);
		Оповещение = Новый ОписаниеОповещения(
			"ПослеОтправкиЗапросаПароляПоSMSЧерезВнешнююКомпоненту", ЭтотОбъект, ДополнительныеПараметры);
		ЗапроситьПарольПоSMSЧерезВнешнююКомпоненту(Оповещение, Результат.ПараметрыРасширеннойАутентификации.Сессия);
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка установки соединения'"));
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеУстановкиСоединения, Ложь);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьПарольПоSMSЧерезВнешнююКомпоненту(Оповещение, Сессия)
	
	СессияXML = ОбменСБанкамиСлужебныйКлиент.СериализованныеДанные(Сессия);
	Попытка
		ПодключаемыйМодуль.ОтправитьПарольРасширеннойАутентификацииПоSMS(СессияXML);
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Исключение
		ВидОперации = НСтр("ru = 'Запрос одноразового пароля по SMS'");
		ТекстСообщения = НСтр("ru = 'Ошибка установки соединения.'");
		ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаПароляПоSMSЧерезВнешнююКомпоненту(ЗапросОтправлен, ДополнительныеПараметры) Экспорт
	
	Если Не ЗапросОтправлен Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеУстановкиСоединения, Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеВводаОдноразовогоПароляЧерезВнешнююКомпоненту", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура("ИдентификаторСессии", ДополнительныеПараметры.Сессия.Идентификатор);
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросОдноразовогоПароля", ПараметрыФормы, ЭтотОбъект, ,
		ВариантОткрытияОкна.ОтдельноеОкно, , Оповещение);

	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаОдноразовогоПароляЧерезВнешнююКомпоненту(ОдноразовыйПароль, ДополнительныеПараметры) Экспорт
	
	Если ОдноразовыйПароль = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеУстановкиСоединения, Ложь);
		Возврат;
	КонецЕсли;
	
	ДанныеРасширеннойАутентификации = Новый Структура();
	ДанныеРасширеннойАутентификации.Вставить("Способ", "SMS");
	ДанныеРасширеннойАутентификации.Вставить("Сессия", ДополнительныеПараметры.Сессия);
	ДанныеРасширеннойАутентификации.Вставить("Пароль", ОдноразовыйПароль);
	
	ОтправитьОдноразовыйПарольЧерезВнешнююКомпоненту(ДанныеРасширеннойАутентификации, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОдноразовыйПарольЧерезВнешнююКомпоненту(ДанныеРасширеннойАутентификации, ДополнительныеПараметры)
	
	ДанныеРасширеннойАутентификацииXML = ОбменСБанкамиСлужебныйКлиент.СериализованныеДанные(
		ДанныеРасширеннойАутентификации);
	Попытка
		ПодключаемыйМодуль.РасширеннаяАутентификация(ДанныеРасширеннойАутентификацииXML);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеУстановкиСоединения, Истина);
	Исключение
		ВидОперации = НСтр("ru = 'Отправка одноразового пароля из SMS в банк'");
		ТекстСообщения = НСтр("ru = 'Ошибка аутентификации.'");
		ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеУстановкиСоединения, Ложь);
	КонецПопытки
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСертификатЧерезВнешнююКомпоненту(Обработчик, СертификатыКлюча)
	
	СписокВыбораСертификатов = Новый СписокЗначений;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СписокВыбораСертификатов", СписокВыбораСертификатов);
	ДополнительныеПараметры.Вставить("ОбработчикПослеВыбораСертификатов", Обработчик);
	ДополнительныеПараметры.Вставить("СертификатыКлюча", СертификатыКлюча);
	ПолучитьДанныеСертификатовРекурсивно(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеСертификатовРекурсивно(ДополнительныеПараметры)
	
	Если Не ДополнительныеПараметры.СертификатыКлюча.Количество() Тогда
		ПоказатьВыборСертификатов(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	СертификатXML = ДополнительныеПараметры.СертификатыКлюча[0];
	ДополнительныеПараметры.СертификатыКлюча.Удалить(0);
	ДополнительныеПараметры.Вставить("СертификатXML", СертификатXML);
	
	Обработчик = Новый ОписаниеОповещения(
		"ДобавитьСертификатВСписокВыбораПослеПолученияДанных", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьДанныеСертификатаЧерезВнешнююКомпоненту(Обработчик, СертификатXML);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборСертификатов(ДополнительныеПараметры)
	
	ПараметрыФормы = Новый Структура("СписокВыбора", ДополнительныеПараметры.СписокВыбораСертификатов);
	Оповещение = Новый ОписаниеОповещения(
		"ПослеВыбораСертификатаЧерезВнешнююКомпоненту", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ВыборСертификатаДляДобавления", ПараметрыФормы, ЭтотОбъект, ,
		ВариантОткрытияОкна.ОтдельноеОкно, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеСертификатаЧерезВнешнююКомпоненту(Обработчик, СертификатXML)
	
	Попытка
		ДанныеСертификатаXML = ПодключаемыйМодуль.ДанныеСертификата(СертификатXML);
		ДанныеСертификата = ОбменСБанкамиСлужебныйКлиент.ДеСериализованныеДанные(ДанныеСертификатаXML);
		ВыполнитьОбработкуОповещения(Обработчик, ДанныеСертификата);
	Исключение
		ВидОперации = НСтр("ru = 'Получение данных сертификата с банковского ключа'");
		ТекстСообщения = НСтр("ru = 'Ошибка при получении данных сертификата банковского ключа.'");
		ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Обработчик, Неопределено);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВСписокВыбораПослеПолученияДанных(ДанныеСертификата, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСертификата = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеВыбораСертификатов, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.СписокВыбораСертификатов.Добавить(
		ДополнительныеПараметры.СертификатXML, ДанныеСертификата.Псевдоним);
		
	ПолучитьДанныеСертификатовРекурсивно(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьУстановкиPIN(Обработчик, ИдентификаторХранилища)
	
	Попытка
		НеобходимоУстановитьPINКодХранилища = ПодключаемыйМодуль.НеобходимоУстановитьPINКодХранилища(ИдентификаторХранилища);
		ВыполнитьОбработкуОповещения(Обработчик, НеобходимоУстановитьPINКодХранилища);
	Исключение
		ВидОперации = НСтр("ru = 'Определение наличия PIN-кода банковского ключа'");
		ТекстСообщения = НСтр("ru = 'Ошибка при работе с банковским ключом.'");
		ПолучитьИВывестиИнформациюОбОшибке(ВидОперации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Обработчик, Неопределено);
	КонецПопытки
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеМетоды

&НаКлиенте
Процедура ЗаполнитьПрограммыКриптографии(Оповещение)
	
	СменитьСтраницуШаги(Элементы.СтраницаПодождите);
	ДополнительныеПараметры = Новый Структура("Оповещение", Оповещение);
	
	ОповещениеПослеПодключенияРасширенияДляРаботыСКриптографией = Новый ОписаниеОповещения(
		"ПослеПодключенияРасширенияДляРаботыСКриптографией", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСКриптографией(ОповещениеПослеПодключенияРасширенияДляРаботыСКриптографией);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияДляРаботыСКриптографией(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		НачатьЗаполнениеПрограммКриптографии(ДополнительныеПараметры.Оповещение);
	Иначе
		ОповещениеПослеУстановкиРасширенияДляРаботыСКриптографией = Новый ОписаниеОповещения(
			"ПослеУстановкиРасширенияДляРаботыСКриптографией", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСКриптографией(ОповещениеПослеУстановкиРасширенияДляРаботыСКриптографией);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширенияДляРаботыСКриптографией(ДополнительныеПараметры) Экспорт
	
	ОповещениеПослеПодключенияРасширенияДляРаботыСКриптографией = Новый ОписаниеОповещения(
		"ПослеПовторногоПодключенияРасширенияДляРаботыСКриптографией", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСКриптографией(ОповещениеПослеПодключенияРасширенияДляРаботыСКриптографией);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПовторногоПодключенияРасширенияДляРаботыСКриптографией(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		НачатьЗаполнениеПрограммКриптографии(ДополнительныеПараметры.Оповещение);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеПрограммКриптографии(Оповещение)
	
	ПрограммыКриптографии = ПрограммыКриптографии();
		
	МассивПрограмм = Новый Массив;
	МассивПрограмм.Добавить("CryptoPro");
	МассивПрограмм.Добавить("SignalComECGOST");
	МассивПрограмм.Добавить("eToken");
	
	МассивПрограммДляСоздания = Новый Массив;
	
	ПроверитьОчереднуюПрограммуКриптографии(МассивПрограмм, ПрограммыКриптографии, Оповещение, МассивПрограммДляСоздания);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОчереднуюПрограммуКриптографии(МассивПрограмм, ПрограммыКриптографии, Оповещение, МассивПрограммДляСоздания)
	
	Если МассивПрограмм.Количество() = 0 Тогда
		
		Если МассивПрограммДляСоздания.Количество() Тогда
			ЗаписатьПрограммыКриптографии(ПрограммыКриптографии, МассивПрограммДляСоздания);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	
	ТекПрограмма = МассивПрограмм.Получить(0);
	МассивПрограмм.Удалить(0);
	
	ПараметрыПрограммы = Неопределено;
	Если НЕ ПрограммыКриптографии.Свойство(ТекПрограмма, ПараметрыПрограммы) Тогда
		ПроверитьОчереднуюПрограммуКриптографии(
			МассивПрограмм, ПрограммыКриптографии, Оповещение, МассивПрограммДляСоздания);
		Возврат;
	КонецЕсли;
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	ДополнительныеПараметры.Вставить("МассивПрограмм", МассивПрограмм);
	ДополнительныеПараметры.Вставить("ПрограммыКриптографии", ПрограммыКриптографии);
	ДополнительныеПараметры.Вставить("ТекущаяПрограмма", ТекПрограмма);
	ДополнительныеПараметры.Вставить("МассивПрограммДляСоздания", МассивПрограммДляСоздания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияИнформацииМодуляКриптографии", ЭтотОбъект,
		ДополнительныеПараметры, "ПриОшибкеПолученияИнформацииМодуляКриптографии", ЭтотОбъект);
	
	СредстваКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(
		ОписаниеОповещения, ПараметрыПрограммы.ИмяПрограммы, "", ПараметрыПрограммы.ТипПрограммы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьПрограммыКриптографии(ПрограммыКриптографии, МассивПрограммДляСоздания)
	
	ОписаниеПрограмм = Новый Массив;
	
	Для Каждого ТекПрограмма Из МассивПрограммДляСоздания Цикл
		ПараметрыПрограммы = ПрограммыКриптографии[ТекПрограмма];
		ОписаниеПрограммы = ЭлектроннаяПодпись.НовоеОписаниеПрограммы();
		ЗаполнитьЗначенияСвойств(ОписаниеПрограммы, ПараметрыПрограммы);
		ОписаниеПрограмм.Добавить(ОписаниеПрограммы);
	КонецЦикла;
	
	ЭлектроннаяПодпись.ЗаполнитьСписокПрограмм(ОписаниеПрограмм);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияИнформацииМодуляКриптографии(ИнформацияМодуля, ДополнительныеПараметры) Экспорт
	
	Если ИнформацияМодуля <> Неопределено Тогда
		ДополнительныеПараметры.МассивПрограммДляСоздания.Добавить(ДополнительныеПараметры.ТекущаяПрограмма);
	КонецЕсли;
	ПроверитьОчереднуюПрограммуКриптографии(ДополнительныеПараметры.МассивПрограмм,
		ДополнительныеПараметры.ПрограммыКриптографии, ДополнительныеПараметры.Оповещение,
		ДополнительныеПараметры.МассивПрограммДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОшибкеПолученияИнформацииМодуляКриптографии(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПроверитьОчереднуюПрограммуКриптографии(ДополнительныеПараметры.МассивПрограмм,
		ДополнительныеПараметры.ПрограммыКриптографии, ДополнительныеПараметры.Оповещение,
		ДополнительныеПараметры.МассивПрограммДляСоздания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрограммыКриптографии()
	
	НастройкиПрограмм = Справочники.ПрограммыЭлектроннойПодписиИШифрования.ПоставляемыеНастройкиПрограмм();
	
	Настройка = НастройкиПрограмм.Добавить();
	Настройка.Представление       = НСтр("ru = 'КриптоПро eToken CSP'");
	Настройка.ИмяПрограммы        = "eToken Base Cryptographic Provider";
	Настройка.ТипПрограммы        = 1;
	Настройка.АлгоритмПодписи     = "RSA_SIGN";
	Настройка.АлгоритмХеширования = "SHA-1";
	Настройка.АлгоритмШифрования  = "DES";
	Настройка.Идентификатор       = "eToken";
	
	ТипизированнаяТаблица = Новый ТаблицаЗначений;
	КвалификаторСтроки = Новый КвалификаторыСтроки(150);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , КвалификаторСтроки);
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	ТипизированнаяТаблица.Колонки.Добавить("ИмяПрограммы", ОписаниеТиповСтрока);
	ТипизированнаяТаблица.Колонки.Добавить("ТипПрограммы", ОписаниеТиповЧисло);
	
	Для Каждого Строка Из НастройкиПрограмм Цикл
		НовСтрока = ТипизированнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрограммыКриптографии.ИмяПрограммы,
	|	ПрограммыКриптографии.ТипПрограммы
	|ПОМЕСТИТЬ ПрограммыКриптографии
	|ИЗ
	|	&ПрограммыКриптографии КАК ПрограммыКриптографии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы
	|ИЗ
	|	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
	|ГДЕ
	|	(ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы, ПрограммыЭлектроннойПодписиИШифрования.ТипПрограммы) В
	|			(ВЫБРАТЬ
	|				ПрограммыКриптографии.ИмяПрограммы,
	|				ПрограммыКриптографии.ТипПрограммы
	|			ИЗ
	|				ПрограммыКриптографии КАК ПрограммыКриптографии)";
	Запрос.УстановитьПараметр("ПрограммыКриптографии", ТипизированнаяТаблица);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаПрограммы = НастройкиПрограмм.Найти(Выборка.ИмяПрограммы, "ИмяПрограммы");
		НастройкиПрограмм.Удалить(СтрокаПрограммы);
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	Для Каждого Строка Из НастройкиПрограмм Цикл
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ИмяПрограммы", Строка.ИмяПрограммы);
		СтруктураЗаписи.Вставить("Представление", Строка.Представление);
		СтруктураЗаписи.Вставить("ТипПрограммы", Строка.ТипПрограммы);
		СтруктураЗаписи.Вставить("АлгоритмПодписи", Строка.АлгоритмПодписи);
		СтруктураЗаписи.Вставить("АлгоритмХеширования", Строка.АлгоритмХеширования);
		СтруктураЗаписи.Вставить("АлгоритмШифрования", Строка.АлгоритмШифрования);
		СтруктураВозврата.Вставить(Строка.Идентификатор, СтруктураЗаписи);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ПослеВопросаОЗакрытииПомощника(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьФорму = Истина;
		Закрыть(НастройкаОбмена);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОрганизациюВСертификате(Сертификат, Организация)
	
	Попытка
		СертификатОбъект = Сертификат.ПолучитьОбъект();
		СертификатОбъект.Организация = Организация;
		СертификатОбъект.Записать();
	Исключение
		Возврат;
		// операция не критичная, исключение не обрабатывается
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураСозданияНастройкиОбмена()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("Банк", Банк);
	СтруктураПараметров.Вставить("АдресСервера", АдресСервера);
	СтруктураПараметров.Вставить("АутентификацияПоСертификату", СпособАутентификации = 0);
	СтруктураПараметров.Вставить("ИмяВнешнегоМодуля", ИмяВнешнегоМодуля);
	СтруктураПараметров.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	Если СохранитьЛогин Тогда
		СтруктураПараметров.Вставить("ИмяПользователя", Логин);
	КонецЕсли;
	СтруктураПараметров.Вставить("ИспользуетсяКриптография", ИспользуетсяКриптография);
	СтруктураПараметров.Вставить("ПрограммаБанка", ПрограммаБанка);
	СтруктураПараметров.Вставить("РесурсВходящихДокументов", РесурсИсточник);
	СтруктураПараметров.Вставить("РесурсИсходящихДокументов", РесурсПриемник);
	Если ЭтоАдресВременногоХранилища(АдресФайлаСертификатаСбербанка) Тогда
		СтруктураПараметров.Вставить("СертификатСбербанка", ПолучитьИзВременногоХранилища(АдресФайлаСертификатаСбербанка));
	КонецЕсли;
	Если ЭтоАдресВременногоХранилища(АдресФайлаВКСбербанка) Тогда
		СтруктураПараметров.Вставить("ВКСбербанка", ПолучитьИзВременногоХранилища(АдресФайлаВКСбербанка));
	КонецЕсли;
	МассивСертификатов = Новый Массив;
	Для Каждого Элемент Из Сертификаты Цикл
		МассивСертификатов.Добавить(Элемент.Сертификат);
	КонецЦикла;
	СтруктураПараметров.Вставить("Сертификаты", МассивСертификатов);
	СтруктураПараметров.Вставить("СертификатАутентификации", СертификатАутентификации);
	СтруктураПараметров.Вставить("Недействительна", Истина);
	СтруктураПараметров.Вставить("ВерсияВнешнейКомпоненты", ВерсияВКСбербанк);
	Возврат СтруктураПараметров;

КонецФункции

&НаКлиенте
Процедура СоздатьНастройкуОбмена()
	
	Если СпособСозданияНастройки = 0 ИЛИ СпособСозданияНастройки = 1 Тогда // загрузка из файла
		ПодключитьОбработчикОжидания("ЗагрузитьНастройкуОбменаИзФайла", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	ПараметрыНастройкиОбмена = СтруктураСозданияНастройкиОбмена();
	ЗаданиеВыполнено = Ложь; ЕстьОшибка = Ложь;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ЗапуститьСозданиеНастройкиОбмена(
		ПараметрыНастройкиОбмена, АдресХранилища, ИдентификаторЗадания, ЗаданиеВыполнено, ЕстьОшибка);
		
	Если ЗаданиеВыполнено Тогда
		Если ЕстьОшибка Тогда
			Элементы.СозданиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
			Элементы.ДекорацияНеПодключено.Видимость = Истина;
		Иначе
			ПослеСозданияНастройкиОбмена();
		КонецЕсли;
	ИначеЕсли Не ЗаданиеВыполнено Тогда
		ПараметрыОбработчикаОжидания = Новый Структура();
		ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
		ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияСозданияНастройкиОбмена", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНовыйСчет()
	
	НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	СтрокаНаименования = СокрЛп(НомерСчета) + ?(ЗначениеЗаполнено(Банк), ", в " + Строка(Банк), "");
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	НовыйСчет.Наименование = СтрокаНаименования;
	НовыйСчет.НомерСчета = НомерСчета;
	НовыйСчет.ВалютаДенежныхСредств = ВалютаДенежныхСредств;
	НовыйСчет.Владелец = Организация;
	НовыйСчет.Банк = Банк;
	НовыйСчет.ВидСчета = "Расчетный";
	НовыйСчет.СчетУчета = ПланыСчетов.Управленческий.Банк;
	НовыйСчет.ВариантУказанияКПП = Перечисления.ВариантыУказанияКПП.ВоВсехПлатежныхПоручениях;
	НовыйСчет.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Числом;
	НовыйСчет.Записать();
	Если НЕ ЗначениеЗаполнено(Организация.БанковскийСчетПоУмолчанию) Тогда
		ОбъектОрганизация = Организация.ПолучитьОбъект();
		ОбъектОрганизация.БанковскийСчетПоУмолчанию = НовыйСчет.Ссылка;
		ОбъектОрганизация.Записать();
	КонецЕсли; 
	Счет = НовыйСчет.Ссылка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапуститьСозданиеНастройкиОбмена(Знач СтруктураПараметров, Знач АдресХранилища, ИдентификаторЗадания, ЗаданиеВыполнено, ЕстьОшибка)
	
	НаименованиеЗадания = НСтр("ru = 'Создание настройки прямого обмена с банком'");
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(СтруктураПараметров);
	ПараметрыВыполнения.Добавить(АдресХранилища);
	
	Задание = ФоновыеЗадания.Выполнить(
			"ОбменСБанкамиСлужебный.СоздатьНастройкуОбмена", ПараметрыВыполнения, , НаименованиеЗадания);
			
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
		МассивСообщений = Задание.ПолучитьСообщенияПользователю();
		Если НЕ МассивСообщений = Неопределено И МассивСообщений.Количество() Тогда
			ЕстьОшибка = Истина;
			Для Каждого Сообщение Из МассивСообщений Цикл
				Сообщение.Сообщить();
			КонецЦикла
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияСозданияНастройкиОбмена()

	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		ПослеСозданияНастройкиОбмена();
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
													* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияСозданияНастройкиОбмена",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
	КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияНастройкиОбмена()
	
	Оповестить("СозданаНастройкаОбменаСБанком");
	НастройкаОбмена = ПолучитьИзВременногоХранилища(АдресХранилища);
	Элементы.СозданиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.Успешно32;
	Элементы.ОткрытьНастройкуОбмена.Видимость = Истина;
	Элементы.ТестированиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн") Тогда
		ОбработатьРезультатТестаНастройки(Истина);
		Возврат;
	КонецЕсли;
	
	ПрограммаБанка = ПрограммаБанка(НастройкаОбмена);
	Заголовок = Строка(НастройкаОбмена);

	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		ПодключитьОбработчикОжидания("ТестНастройкиАсинхронныйОбмен", 0.1, Истина);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменСИспользованиемВнешнейКомпоненты") Тогда
		ПодключитьОбработчикОжидания("ТестНастройкиОбменаЧерезВнешнююКомпоненту", 0.1, Истина);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ПодключитьОбработчикОжидания("ТестНастройкиОбменаЧерезДополнительнуюОбработку", 0.1, Истина);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		ПодключитьОбработчикОжидания("ТестНастройкиОбменаСбербанк", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрограммаБанка(НастройкаОбмена)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка");
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатТестаНастройки(Успех, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Успех Тогда
		Элементы.ТестированиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.Успешно32;
		Элементы.ДекорацияУспешноеПодключение.Видимость = Истина;
		СменитьСтраницуКомандНавигации(Элементы.НазадГотово);
		ВключитьНастройкуОбмена(НастройкаОбмена);
	Иначе
		Элементы.ДекорацияНеПодключено.Видимость = Истина;
		Элементы.ТестированиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СертификатАутентификацииСсылка) Тогда
		ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(СертификатАутентификации, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВключитьНастройкуОбмена(НастройкаОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	Объект = НастройкаОбмена.ПолучитьОбъект();
	Объект.Заблокировать();
	Объект.Недействительна = Ложь;
	Объект.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВыполнениеФоновогоЗаданияНаСервере(ФоновоеЗаданиеИдентификатор)
	
	Задание = Новый Структура("Завершено, Успешно", Ложь, Ложь);
	Попытка
		Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
			Задание.Завершено = Истина;
			МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(
				ФоновоеЗаданиеИдентификатор);
			Если МассивСообщений.Количество() Тогда
				Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
					СообщениеОбОшибке.Сообщить();
				КонецЦикла;
				Задание.Успешно = Ложь;
			Иначе
				Задание.Успешно = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Задание.Завершено = Истина;
		Задание.Успешно   = Ложь;
		Текст = НСтр("ru = 'При выполнении операции произошла ошибка.'");
		ВидОперации = НСтр("ru = 'Фоновое задание на сервере'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, Текст, 1);
	КонецПопытки;
	Возврат Задание;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция РазделениеВключено()
	
	Возврат ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере(Знач ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКлассификатор()
	
	РаботаСБанками.ЗагрузитьКлассификаторБанков();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеПопулярныхБанков(Номер)

	Результат = Новый Структура;
    Результат.Вставить("БИК", "");
    Результат.Вставить("Наименование", "");
    Результат.Вставить("СтрокаПоиска", "");
	Если Номер=1 Тогда
	    Результат.БИК = "044525225";
		Результат.Наименование = "ПАО ""Сбербанк России""";
		Результат.СтрокаПоиска = "ПАО СБЕРБАНК";
	ИначеЕсли Номер=2 Тогда	
	    Результат.БИК = "044525187";
		Результат.Наименование = "ПАО Банк ВТБ";
		Результат.СтрокаПоиска = "ВТБ (ПАО)";
	ИначеЕсли Номер=3 Тогда	
	    Результат.БИК = "044525823";
		Результат.Наименование = "АО ""Газпромбанк""";
		Результат.СтрокаПоиска = "ГПБ (АО)";
	ИначеЕсли Номер=4 Тогда	
	    Результат.БИК = "044525823";
		Результат.Наименование = "ПАО ""Банк ВТБ 24""";
		Результат.СтрокаПоиска = "ВТБ 24 (ПАО)";
	ИначеЕсли Номер=5 Тогда	
	    Результат.БИК = "044525111";
		Результат.Наименование = "АО ""Российский Сельскохозяйственный банк""";
		Результат.СтрокаПоиска = "РОССЕЛЬХОЗБАНК";
	ИначеЕсли Номер=6 Тогда	
	    Результат.БИК = "044525593";
		Результат.Наименование = "АО ""Альфа-Банк""";
		Результат.СтрокаПоиска = "АЛЬФА-БАНК";
	ИначеЕсли Номер=7 Тогда	
	    Результат.БИК = "044525219";
		Результат.Наименование = "ОАО ""Акционерный коммерческий банк ""Банк Москвы""";
		Результат.СтрокаПоиска = "БАНК МОСКВЫ";
	ИначеЕсли Номер=8 Тогда	
	    Результат.БИК = "044525545";
		Результат.Наименование = "АО ""ЮниКредит Банк""";
		Результат.СтрокаПоиска = "ЮНИКРЕДИТ";
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции // ()

&НаКлиенте
Процедура ВывестиСписокБанков(Текст, СтрокаЦеликом = Ложь)
	
	СписокБанков = НайтиБанки(Текст, Истина, СтрокаЦеликом);
	НайденныеБанки.Очистить();
	Для каждого Элемент Из СписокБанков Цикл
		НайденныеБанки.Добавить(Элемент.Значение, Элемент.Представление); 
	КонецЦикла; 
	Элементы.СтраницыБанки.ТекущаяСтраница = Элементы.СтраницаНайденныеБанки;
	
КонецПроцедуры

&НаСервере
Процедура НайтиСоздатьБанк(БИК)

	Если ТипЗнч(БИК)=Тип("СправочникСсылка.КлассификаторБанковРФ") Тогда
	    КлассификаторБанков = БИК;
	Иначе	
		КлассификаторБанков = СсылкаПоКлассификатору(БИК);
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(КлассификаторБанков) Тогда
	    Возврат;
	КонецЕсли;
	Банк = РаботаСБанкамиПереопределяемый.БанкИзКлассификатора(КлассификаторБанков);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СсылкаПоКлассификатору(БИК)
	
	Если БИК = "" Тогда
		Возврат Справочники.КлассификаторБанковРФ.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БИК", БИК);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторБанковРФ.Ссылка
	|ИЗ
	|	Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
	|ГДЕ
	|	КлассификаторБанковРФ.Код = &БИК";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.КлассификаторБанковРФ.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Ссылка;
	
КонецФункции // СсылкаПоКлассификатору()

&НаСервереБезКонтекста
Функция НайтиБанки(Текст, Все = Ложь, СтрокаЦеликом = ЛОжь)
	
	Результат = Новый СписокЗначений;
	Построитель = Новый ПостроительЗапроса;
	Построитель.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	КлассификаторБанковРФ.Ссылка,
	|	КлассификаторБанковРФ.Наименование КАК Наименование,
	|	КлассификаторБанковРФ.Код КАК БИК
	|{ВЫБРАТЬ
	|	Ссылка.*,
	|	Наименование,
	|	БИК}
	|ИЗ
	|	Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
	|ГДЕ
	|	НЕ КлассификаторБанковРФ.ПометкаУдаления
	|	И НЕ КлассификаторБанковРФ.ЭтоГруппа
	|{ГДЕ
	|	(КлассификаторБанковРФ.Наименование + КлассификаторБанковРФ.Код) КАК СтрокаПоиска}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Если СтрокаЦеликом Тогда
		Слова = Новый Массив;
		Слова.Добавить(Текст);
	Иначе
		Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли; 
	Для каждого Слово Из Слова Цикл
		Если ПустаяСтрока(Слово) Тогда
			Продолжить;
		КонецЕсли; 
		ЭлементОтбора = Построитель.Отбор.Добавить("СтрокаПоиска");
		ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
		ЭлементОтбора.Значение = Слово;
		ЭлементОтбора.Использование = Истина;
	КонецЦикла;
	
	Запрос = Построитель.ПолучитьЗапрос();
	Если Все Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 10", "");
	КонецЕсли; 
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Текст) ИЛИ Все Тогда
			Представление = Выборка.Наименование+" ("+Выборка.БИК+")";
		Иначе
			Представление = ПредставлениеНайденного(Выборка.Наименование+" ("+Выборка.БИК+")", Слова);
		КонецЕсли; 
	    Результат.Добавить(Выборка.Ссылка, Представление);
	КонецЦикла; 
	Возврат Результат;

КонецФункции // ()

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНайденного(Представление, Слова)

	ОстатокПредставления = Представление;
	РезультатФункции = "";
	Позиция = 0;
	ПерваяИтерация = Истина;
	Пока ПерваяИтерация ИЛИ Позиция>0 Цикл
		ПерваяИтерация = Ложь;
		Позиция = 0;
		СловоДляЗамены = "";
		Для каждого Слово Из Слова Цикл
			ПозицияСлова = Найти(НРег(ОстатокПредставления), НРег(Слово));
			Если ПозицияСлова>0 Тогда
			    Позиция = ?(Позиция=0, ПозицияСлова, Мин(ПозицияСлова, Позиция));
				Если Позиция=ПозицияСлова Тогда
				    СловоДляЗамены = Слово;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		Если Позиция>0 Тогда
			ТекстДо = Лев(ОстатокПредставления, Позиция-1);
			ТекстЦентр = Сред(ОстатокПредставления, Позиция, СтрДлина(СловоДляЗамены));
			ОстатокПредставления = Сред(ОстатокПредставления, Позиция+СтрДлина(СловоДляЗамены));
			ВыделенныйТекст = Новый ФорматированнаяСтрока(ТекстЦентр, Новый Шрифт(Новый Шрифт,,, Истина), WebЦвета.ЗеленыйЛес);
			РезультатФункции = Новый ФорматированнаяСтрока(РезультатФункции, ТекстДо, ВыделенныйТекст);
		КонецЕсли; 
	КонецЦикла; 
	РезультатФункции = Новый ФорматированнаяСтрока(РезультатФункции, ОстатокПредставления);
	
	Возврат РезультатФункции;

КонецФункции // ()

#КонецОбласти

#КонецОбласти