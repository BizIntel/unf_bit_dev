
&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ПеременныеКлиента;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Локальные переменные.
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	// Параметры формы.
	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И НЕ Параметры.Расшифровка = Неопределено);
	РежимВариантаОтчета = (ТипЗнч(КлючТекущегоВарианта) = Тип("Строка") И Не ПустаяСтрока(КлючТекущегоВарианта));
	
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	ФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|Расшифровка, СформироватьПриОткрытии, ТолькоПросмотр, Колонки,
		|ФиксированныеНастройки, Раздел, Подсистема, ПодсистемаПредставление");
	ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
	
	ФормаПараметры.Вставить("Отбор", Новый Соответствие);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		Для каждого КлючИЗначение Из Параметры.Отбор Цикл
			ФормаПараметры.Отбор.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла; 
		Параметры.Отбор.Очистить();
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборРасшифровки") И ТипЗнч(Параметры.ОтборРасшифровки) = Тип("Соответствие") Тогда
		Для каждого КлючИЗначение Из Параметры.ОтборРасшифровки Цикл
			ФормаПараметры.Отбор.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла; 
	КонецЕсли;
	
	ВариантИнтерфейса = ТекущийВариантИнтерфейсаКлиентскогоПриложения();
	ФормаПараметры.Вставить("ВариантИнтерфейса", ВариантИнтерфейса);
	
	НастройкиОтчета = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	НастройкиОтчета.Вставить("Контекстный", (Параметры.Свойство("Контекст") И ЗначениеЗаполнено(Параметры.Контекст)) ИЛИ (Параметры.Свойство("ОтборРасшифровки") И Параметры.ОтборРасшифровки.Количество()>0));
	
	Если Параметры.Свойство("СложныйАлгоритм") И Параметры.СложныйАлгоритм Тогда
		// Сложный алгоритм контекстного вызова отчета
		// Обработчик задан в модуле объекта отчета
		Попытка
			ОтчетОбъект.ПриКонтекстномОткрытии(Параметры.Контекст, Параметры.ПолеСвязи, ФормаПараметры.Отбор, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли; 
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		КонецПопытки;
		Если ИнформацияОбОшибке <> Неопределено Тогда
			ПоказатьОшибкиФормирования(ИнформацияОбОшибке);
		КонецЕсли;
	КонецЕсли; 
	
	ФормаПараметры.Вставить("Отбор", Новый ФиксированноеСоответствие(ФормаПараметры.Отбор));
	ФормаПараметры = Новый ФиксированнаяСтруктура(ФормаПараметры);
	
	МодифицироватьСхему(ОтчетОбъект.СхемаКомпоновкиДанных);
	АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	Отчет.КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	НастройкиОтчета.Вставить("ПолноеИмя", ОтчетМетаданные.ПолноеИмя());
	НастройкиОтчета.Вставить("ИмяОтчета", ОтчетМетаданные.Имя);
	НастройкиОтчета.Вставить("Наименование", СокрЛП(ОтчетМетаданные.Представление()));
	Если Параметры.Свойство("ДополнительнаяОбработкаСсылка") Тогда
		НастройкиОтчета.Вставить("ОтчетСсылка", Параметры.ДополнительнаяОбработкаСсылка);
	ИначеЕсли Параметры.Свойство("Отчет") Тогда
		НастройкиОтчета.Вставить("ОтчетСсылка", Параметры.Отчет);
	Иначе
		Информация = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(НастройкиОтчета.ПолноеИмя);
		НастройкиОтчета.Вставить("ОтчетСсылка", Информация.Отчет);
	КонецЕсли; 
	НастройкиОтчета.Вставить("Внешний", ТипЗнч(НастройкиОтчета.ОтчетСсылка) = Тип("Строка") ИЛИ ТипЗнч(НастройкиОтчета.ОтчетСсылка) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
	НастройкиОтчета.Вставить("Безопасный",  БезопасныйРежим() <> Ложь);
	НастройкиОтчета.Вставить("ИспользуетХранилищеВариантов", НЕ ОтчетОбъект.Метаданные().ХранилищеВариантов=Неопределено);
	НастройкиОтчета.Вставить("ФормироватьНепосредственно", НастройкиОтчета.Внешний Или НастройкиОтчета.Безопасный ИЛИ (Параметры.Свойство("ФормироватьНепосредственно") И Параметры.ФормироватьНепосредственно));
	
	НастройкиОтчета.Вставить("АдресСхемы", АдресСхемы);
	НастройкиОтчета.Вставить("ПользовательскиеНастройки", Параметры.ПользовательскиеНастройки);
	
	НастройкиОтчета.Вставить("ПредопределенныеВарианты", Новый СписокЗначений);
	Если НастройкиОтчета.Внешний И ОтчетОбъект.СхемаКомпоновкиДанных <> Неопределено Тогда
		Для Каждого ВариантОтчета Из ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек Цикл
			НастройкиОтчета.ПредопределенныеВарианты.Добавить(ВариантОтчета.Имя, ВариантОтчета.Представление);
		КонецЦикла;
	КонецЕсли;
	
	// Приведение зависимых элементов формы к кондиции.
	ЗаполнитьКомандыВыбораВариантов();
		
	Если ТипЗнч(КлючТекущегоВарианта)=Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		Если Элементы.Вариант.СписокВыбора.НайтиПоЗначению(КлючТекущегоВарианта)=Неопределено
			И Элементы.Вариант.СписокВыбора.Количество()>0 Тогда
			КлючТекущегоВарианта = Элементы.Вариант.СписокВыбора[0].Значение;
		КонецЕсли; 
	Иначе
		ТекВариант = ВариантыОтчетов.ПолучитьСсылку(НастройкиОтчета.ОтчетСсылка, КлючТекущегоВарианта);
		Если Элементы.Вариант.СписокВыбора.НайтиПоЗначению(ТекВариант)=Неопределено
			И Элементы.Вариант.СписокВыбора.Количество()>0 Тогда
			ТекВариант = Элементы.Вариант.СписокВыбора[0].Значение;
			Если ТипЗнч(ТекВариант)=Тип("Строка") Тогда
				КлючТекущегоВарианта = ТекВариант;
			ИначеЕсли ТипЗнч(ТекВариант)=Тип("СправочникСсылка.ВариантыДополнительныхОтчетов") Тогда
				КлючТекущегоВарианта = ТекВариант.ИдентификаторКоманды;
			Иначе
				КлючТекущегоВарианта = ТекВариант.КлючВарианта;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ВариантыОтчетовПовтИсп.Параметры().ОтчетыСНастройками.Найти(НастройкиОтчета.ОтчетСсылка) <> Неопределено Тогда
		ОтчетОбъект.ОпределитьНастройкиФормы(ЭтотОбъект, КлючТекущегоВарианта, НастройкиОтчета);
		СоответствиеПериодичностиПараметров = Новый Соответствие;
		Для Каждого КлючИЗначение Из НастройкиОтчета.СоответствиеПериодичностиПараметров Цикл
			ПолеКД = КлючИЗначение.Ключ;
			Если ТипЗнч(ПолеКД) = Тип("ПараметрКомпоновкиДанных") Тогда
				ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(ПолеКД));
			КонецЕсли;
			СоответствиеПериодичностиПараметров.Вставить(ПолеКД, КлючИЗначение.Значение);
		КонецЦикла;
		НастройкиОтчета.Вставить("СоответствиеПериодичностиПараметров", СоответствиеПериодичностиПараметров);
	КонецЕсли;
	
	// Формируем только программно, в фоновом задании
	Параметры.СформироватьПриОткрытии = Ложь;
	
	// Параметры по умолчанию
	Если НастройкиОтчета.Свойство("ВыводитьСуммуВыделенныхЯчеек") И Не НастройкиОтчета.ВыводитьСуммуВыделенныхЯчеек Тогда
		Элементы.АвтоСуммаГруппа.Видимость = Ложь;
		Элементы.ОтчетТабличныйДокумент.УстановитьДействие("ПриАктивизацииОбласти", "");
	КонецЕсли;
	
	// Тесная интеграция с подсистемами БСП.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
		МодульРассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	// События.
	ОтчетыПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Если НастройкиОтчета.События.ПриСозданииНаСервере Тогда
		ОтчетОбъект.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ФормаПараметры.ВариантИнтерфейса=ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		Элементы.ПредставлениеПериода.Шрифт = Новый Шрифт(Элементы.ПредставлениеПериода.Шрифт,, 13);
		Элементы.ПредставлениеПериода.ШрифтЗаголовка = Новый Шрифт(Элементы.ПредставлениеПериода.ШрифтЗаголовка,, 13);
	Иначе
		Элементы.ПредставлениеПериода.Шрифт = Новый Шрифт(Элементы.ПредставлениеПериода.Шрифт,, 9);
		Элементы.ПредставлениеПериода.ШрифтЗаголовка = Новый Шрифт(Элементы.ПредставлениеПериода.ШрифтЗаголовка,, 9);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПеременныеКлиента = Новый Структура;
	
	#Если ВебКлиент Тогда
	ПеременныеКлиента.Вставить("ИнтервалОжидания", 1);
	#Иначе
	ПеременныеКлиента.Вставить("ИнтервалОжидания", ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2));
	#КонецЕсли 
	
	Если НастройкиОтчета.Контекстный ИЛИ ФормаПараметры.СформироватьПриОткрытии=Истина Тогда
		Если ПроверитьЗаполнениеПараметров() Тогда
			Сформировать();
		КонецЕсли; 
	КонецЕсли; 
	
	ПодключитьОбработчикОжидания("ПриОткрытииЗадержка", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗадержка()
	
	Элементы.ОтчетТабличныйДокумент.ЦветРамки = WebЦвета.Белый;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(Результат, ПодчиненнаяФорма)
	
	РезультатОбработан = Ложь;
	
	// Приемка результата из стандартных форм.
	Если ТипЗнч(ПодчиненнаяФорма) = Тип("УправляемаяФорма") Тогда
		ИмяПодчиненнойФормы = ПодчиненнаяФорма.ИмяФормы;
		Если ИмяПодчиненнойФормы = "ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.НастройкиОтчета"
			Или ПодчиненнаяФорма.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
			РезультатОбработан = Истина; // См. ВсеНастройкиЗавершение.
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			ПозицияТочки = СтрДлина(ИмяПодчиненнойФормы);
			Пока КодСимвола(ИмяПодчиненнойФормы, ПозицияТочки) <> 46 Цикл // Не точка.
				ПозицияТочки = ПозицияТочки - 1;
			КонецЦикла;
			СуффиксФормыИсточника = ВРег(Сред(ИмяПодчиненнойФормы, ПозицияТочки + 1));
			Если СуффиксФормыИсточника = ВРег("ФормаНастроекОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаНастроек")
				Или СуффиксФормыИсточника = ВРег("ФормаВариантаОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаВариантаОтчетаУНФ")
				Или СуффиксФормыИсточника = ВРег("ФормаВарианта") Тогда
				Если Результат.Свойство("НастройкиКД") Тогда
					Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Результат.НастройкиКД);
					ОбновитьНастройкиНаФорме();
					ОтметитьНеактуальным(); 
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ТипЗнч(Результат) = Тип("СправочникСсылка.ВариантыОтчетов") Тогда
			Вариант = Результат;
			Если Элементы.Вариант.СписокВыбора.НайтиПоЗначению(Вариант)=Неопределено Тогда
				// Новый вариант отчета
				Элементы.Вариант.СписокВыбора.Добавить(Вариант);
			КонецЕсли; 
			УстановитьТекущийВариант(Вариант);
			ОтметитьНеактуальным(); 
		КонецЕсли;
	КонецЕсли;
	
	// Механизмы расширения.
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОповещениеОбработано = Ложь;
	Если ИмяСобытия = ВариантыОтчетовКлиентСервер.ИмяСобытияИзменениеВарианта() Тогда
		ОбновитьНастройкиНаФорме();
		ОтметитьНеактуальным(); 
		ОповещениеОбработано = Истина;
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ОповещениеОбработано);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(НовыеНастройкиКД)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьНастройки();
	
	Если ТипЗнч(КлючТекущегоВарианта)=Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		Вариант = КлючТекущегоВарианта;
		НастройкиОтчета.Вставить("ВариантСсылка", Вариант);
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Вариант, "КлючВарианта, Пользовательский");
		НастройкиОтчета.Вставить("КлючВарианта", ЗначенияРеквизитов.КлючВарианта);
		НастройкиОтчета.Вставить("ИДВариантаДляЗамера", ?(ЗначенияРеквизитов.Пользовательский=Истина, "Пользовательский", НастройкиОтчета.КлючВарианта));
	ИначеЕсли ТипЗнч(КлючТекущегоВарианта)=Тип("Строка") И ТипЗнч(НастройкиОтчета.ОтчетСсылка)=Тип("Строка") Тогда
		// Внешний отчет
		НастройкиОтчета.Вставить("ВариантСсылка", Справочники.ВариантыОтчетов.ПустаяСсылка());
		НастройкиОтчета.Вставить("КлючВарианта", КлючТекущегоВарианта);
		НастройкиОтчета.Вставить("ИДВариантаДляЗамера", НастройкиОтчета.КлючВарианта);
	ИначеЕсли ТипЗнч(КлючТекущегоВарианта)=Тип("Строка") Тогда
		// Дополнительный отчет
		Если Параметры.Свойство("ИдентификаторКоманды") И ЗначениеЗаполнено(Параметры.ИдентификаторКоманды) Тогда
			ДопВариант = ПолучитьСсылку(НастройкиОтчета.ОтчетСсылка, Параметры.ИдентификаторКоманды);
			НастройкиОтчета.Вставить("ВариантСсылка", ДопВариант);
			НастройкиОтчета.Вставить("КлючВарианта", Параметры.ИдентификаторКоманды);
		Иначе
			ДопВариант = ПолучитьСсылку(НастройкиОтчета.ОтчетСсылка, КлючТекущегоВарианта);
			НастройкиОтчета.Вставить("ВариантСсылка", ДопВариант);
			НастройкиОтчета.Вставить("КлючВарианта", КлючТекущегоВарианта);
		КонецЕсли;
		ЗначениеРеквизитаПользовательский = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДопВариант, "Пользовательский");
		НастройкиОтчета.Вставить("ИДВариантаДляЗамера", ?(ЗначениеРеквизитаПользовательский=Истина, "Пользовательский", НастройкиОтчета.КлючВарианта));
		Если ТипЗнч(ДопВариант)=Тип("СправочникСсылка.ВариантыОтчетов") Тогда
			Вариант = ДопВариант;
		КонецЕсли; 
	Иначе
		НастройкиОтчета.Вставить("ВариантСсылка", Справочники.ВариантыОтчетов.ПустаяСсылка());
		НастройкиОтчета.Вставить("КлючВарианта", КлючТекущегоВарианта);
		Если ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
			НастройкиОтчета.Вставить("ИДВариантаДляЗамера", НастройкиОтчета.КлючВарианта);
		Иначе
			НастройкиОтчета.Вставить("ИДВариантаДляЗамера", "Расшифровка");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиОтчета.ВариантСсылка) Тогда
		НастройкиОтчета.Вставить("ИдентификаторВарианта", Строка(НастройкиОтчета.ВариантСсылка.УникальныйИдентификатор()));
	Иначе
		НастройкиОтчета.Вставить("ИдентификаторВарианта", "");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Вариант) Тогда
		ОтчетыУНФ.ДобавитьОтчетВИсторию(Вариант);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(НастройкиОтчета.ВариантСсылка) И (ТипЗнч(НастройкиОтчета.ВариантСсылка)=Тип("СправочникСсылка.ВариантыОтчетов") ИЛИ ТипЗнч(НастройкиОтчета.ВариантСсылка)=Тип("СправочникСсылка.ВариантыДополнительныхОтчетов")) Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(НастройкиОтчета.ВариантСсылка);
	Иначе
		НавигационнаяСсылка = "";
	КонецЕсли; 
	
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	РежимВариантаОтчета = (ТипЗнч(КлючТекущегоВарианта) = Тип("Строка") И Не ПустаяСтрока(КлючТекущегоВарианта));
	Если РежимВариантаОтчета И НЕ НовыеНастройкиКД = Неопределено Тогда
		
		// Вызов переопределяемого модуля.
		ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
		Если НастройкиОтчета.События.ПередЗагрузкойВариантаНаСервере Тогда
			ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
			Если НастройкиОтчета.События.ПередЗагрузкойВариантаНаСервере Тогда
				ОтчетОбъект.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиОтчета.ВариантСсылка) Тогда
		НастройкиОтчета.Вставить("НаименованиеВарианта", Строка(НастройкиОтчета.ВариантСсылка));
	ИначеЕсли НЕ НовыеНастройкиКД=Неопределено И НовыеНастройкиКД.ДополнительныеСвойства.Свойство("НаименованиеВарианта") Тогда 
		НастройкиОтчета.Вставить("НаименованиеВарианта", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "НаименованиеВарианта"));
	Иначе
		НастройкиОтчета.Вставить("НаименованиеВарианта", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства, "НаименованиеВарианта"));
	КонецЕсли;
	ОтчетНаименованиеТекущегоВарианта = НастройкиОтчета.НаименованиеВарианта;
	
	Если НЕ ЗначениеЗаполнено(НастройкиОтчета.НаименованиеВарианта) Тогда
		Схема = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
		ВариантОтчета = Схема.ВариантыНастроек.Найти(НастройкиОтчета.КлючВарианта);
		Если НЕ ВариантОтчета=Неопределено Тогда
			НастройкиОтчета.Вставить("НаименованиеВарианта", ВариантОтчета.Представление);
		КонецЕсли; 
	КонецЕсли; 
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	Если НЕ НовыеНастройкиКД=Неопределено Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройкиКД);
	ИначеЕсли ЗначениеЗаполнено(Вариант) И Вариант.Пользовательский Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Вариант.Настройки.Получить());
	ИначеЕсли ЗначениеЗаполнено(Вариант) Тогда
		Схема = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
		ВариантОтчета = Схема.ВариантыНастроек.Найти(НастройкиОтчета.КлючВарианта);
		Если ВариантОтчета=Неопределено Тогда
			УстановитьТекущийВариант(Элементы.Вариант.СписокВыбора[0].Значение);
			Возврат;
		КонецЕсли; 
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтчета.Настройки);
	КонецЕсли;
	
	Если НЕ НастройкиОтчета.ПользовательскиеНастройки=Неопределено Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НастройкиОтчета.ПользовательскиеНастройки);
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	КонецЕсли; 
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("НаименованиеВарианта", НастройкиОтчета.НаименованиеВарианта);
	
	НастройкиОтчета.Вставить("ЭтоОтчетУНФ", 
	НЕ ОтчетОбъект.Метаданные().Реквизиты.Найти("ЭтоОтчетУНФ")=Неопределено И ОтчетОбъект.ЭтоОтчетУНФ);
	
	// Модификация отчета для вывода расшифровок
	УстановитьПараметрыИОтборыРасшифровки(ОтчетОбъект);
	ВыбратьКолонкиРасшифровки();
	
	Если ПравоВывода Тогда
		Уникальность = НастройкиОтчета.ПолноеИмя;
		Если ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
			Уникальность = Уникальность + "/КлючВарианта." + КлючТекущегоВарианта;
		КонецЕсли;
		КлючСохраненияПоложенияОкна = Уникальность;
		НастройкиОтчета.Печать.Вставить("КлючПараметровПечати", Уникальность);
		НастройкиПечатиВосстановить();
	КонецЕсли;
	
	ОбновитьНастройкиНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНастройки()
	
	Если ФиксированныеНастройки=Неопределено Тогда
		ФиксированныеНастройки = Новый Структура;
		Для каждого Элемент Из НастройкиОтчета Цикл
			ФиксированныеНастройки.Вставить(Элемент.Ключ);
		КонецЦикла;
		Возврат;
	КонецЕсли; 
	
	ЭлементыКУдалению = Новый Массив;
	Для каждого Элемент Из НастройкиОтчета Цикл
		Если ФиксированныеНастройки.Свойство(Элемент.Ключ) Тогда
			Продолжить;
		КонецЕсли; 
		ЭлементыКУдалению.Добавить(Элемент.Ключ);
	КонецЦикла; 
	Для каждого Ключ Из ЭлементыКУдалению Цикл
		НастройкиОтчета.Удалить(Ключ);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не РежимВариантаОтчета Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательскиеНастройкиКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ПользовательскаяНастройкаКД Из ПользовательскиеНастройкиКД.Элементы Цикл
		Тип = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ПользовательскаяНастройкаКД));
		
		Если Тип = "ЗначениеПараметраНастроек"
			И ТипЗнч(ПользовательскаяНастройкаКД.Значение) = Тип("СтандартныйПериод")
			И ПользовательскаяНастройкаКД.Использование Тогда
			
			ИдентификаторЭлемента = ОтчетыКлиентСервер.ПривестиИдентификаторКИмени(ПользовательскаяНастройкаКД.ИдентификаторПользовательскойНастройки);
			
			ПериодНачало    = Элементы.Найти(Тип + "_Начало_"    + ИдентификаторЭлемента);
			ПериодОкончание = Элементы.Найти(Тип + "_Окончание_" + ИдентификаторЭлемента);
			Если ПериодНачало = Неопределено Или ПериодОкончание = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = ПользовательскаяНастройкаКД.Значение;
			Если ПериодНачало.АвтоОтметкаНезаполненного
				И Не ЗначениеЗаполнено(Значение.ДатаНачала)
				И Не ЗначениеЗаполнено(Значение.ДатаОкончания) Тогда
				ТекстОшибки = НСтр("ru = 'Не указан период'");
				ПутьКДанным = ПериодНачало.ПутьКДанным;
			ИначеЕсли Значение.ДатаНачала > Значение.ДатаОкончания Тогда
				ТекстОшибки = НСтр("ru = 'Конец периода должен быть больше начала'");
				ПутьКДанным = ПериодОкончание.ПутьКДанным;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ФоновоеЗаданиеИдентификатор <> Неопределено И НЕ ЗавершениеРаботы Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Период

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрПериод = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СтПериод");
	Если ПараметрПериод=Неопределено Тогда
		ПараметрПериод = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	КонецЕсли; 
	Если ПараметрПериод=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНажатиеЗавершение", ЭтотОбъект);
	Если НастройкиОтчета.РежимПериода="ЗаПериод" Тогда
		Диалог = Новый ДиалогРедактированияСтандартногоПериода;
		Диалог.Период = Период;
		Диалог.Показать(Оповещение);
	ИначеЕсли НастройкиОтчета.РежимПериода="НаДату" Тогда
		ПоказатьВводДаты(Оповещение, Период.ДатаОкончания, НСтр("ru = 'На дату'"), ЧастиДаты.Дата);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатиеЗавершение(НовыйПериод, ДополнительныеДанные) Экспорт
	
	Если НовыйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(НовыйПериод)=Тип("СтандартныйПериод") Тогда
		Период = НовыйПериод;
	ИначеЕсли ТипЗнч(НовыйПериод)=Тип("Дата") Тогда
		Период.ДатаНачала = '0001-01-01';
		Период.ДатаОкончания = НовыйПериод;
		Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	КонецЕсли;
	ПериодПриИзмененииСервер();
	ОтметитьНеактуальным();
	
КонецПроцедуры

#КонецОбласти 

#Область СтрокаПоиска

&НаКлиенте
Процедура СтрокаОтбораАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ВРег(Текст)="СКД"
		ИЛИ ВРег(Текст)="IDDQD"
		ИЛИ ВРег(Текст)="GODMODE"
		ИЛИ ВРег(Текст)="GOD MODE" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстДляПоиска = СокрЛП(Текст);
	ОдинСимвол = Лев(Текст, 1);
	ДваСимвола = Лев(Текст, 2);
	Если ДваСимвола=">=" ИЛИ ДваСимвола="<=" ИЛИ ДваСимвола="<>" Тогда
		ТекстДляПоиска = Сред(ТекстДляПоиска, 3);
		УправляющиеСимволы = ДваСимвола;
	ИначеЕсли ОдинСимвол="-" ИЛИ ОдинСимвол=">" ИЛИ ОдинСимвол="<" ИЛИ ОдинСимвол="=" Тогда
		ТекстДляПоиска = Сред(ТекстДляПоиска, 2);
		УправляющиеСимволы = ОдинСимвол;
	ИначеЕсли ОдинСимвол="""" Тогда
		Если Прав(Текст, 1)="""" Тогда
			ТекстДляПоиска = Сред(ТекстДляПоиска, 2, СтрДлина(ТекстДляПоиска)-2);
		Иначе
			ТекстДляПоиска = Сред(ТекстДляПоиска, 2);
		КонецЕсли; 
		УправляющиеСимволы = ОдинСимвол;
	КонецЕсли;
	
	Если УправляющиеСимволы="-" Тогда
		Элемент.ЦветТекста = WebЦвета.Красный;
	ИначеЕсли УправляющиеСимволы="""" Тогда
		Элемент.ЦветТекста = WebЦвета.Зеленый;
	ИначеЕсли НЕ ПустаяСтрока(УправляющиеСимволы) Тогда
		Элемент.ЦветТекста = WebЦвета.Синий;
	Иначе
		Элемент.ЦветТекста = Новый Цвет;
	КонецЕсли; 
	
	СписокВыбора = СформироватьСписокЭлементов(ТекстДляПоиска, УправляющиеСимволы);
	Если СписокВыбора.Количество()=0 И СтрДлина(Текст)>2 Тогда
		СписокВыбора.Добавить("", Новый ФорматированнаяСтрока(НСтр("ru = 'Совпадений не найдено'"),, WebЦвета.НейтральноСерый));
	КонецЕсли; 
	
	Если СписокВыбора.Количество()>0 Тогда
		ДанныеВыбора = СписокВыбора;
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаОтбораОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("Структура") Тогда
		ОчиститьСтрокуОтбора();
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение.ВведенноеЗначение)=Тип("Число") Тогда
		Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение.УправляющиеСимволы) Тогда
			ПоказатьУточняющееПодменюСтрокиОтбора(ВыбранноеЗначение, ">,<,>=,<=");
		Иначе
			ОбработатьВыборСтрокаОтбора(ВыбранноеЗначение);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение.ВведенноеЗначение)=Тип("Дата") Тогда
		Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение.УправляющиеСимволы) Тогда
			ПоказатьУточняющееПодменюСтрокиОтбора(ВыбранноеЗначение, ">=,<=");
		Иначе
			ОбработатьВыборСтрокаОтбора(ВыбранноеЗначение);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение.ВведенноеЗначение)=Тип("Строка") 
		И ВыбранноеЗначение.Свойство("ИмяМетаданных") Тогда
		ТипЗначения = Тип(СтрЗаменить(ВыбранноеЗначение.ИмяМетаданных, ".", "Ссылка."));
		Поля = ПоляПоТипу(ТипЗначения);
		Если Поля.Количество()=1 Тогда
			ВыбранноеЗначение.Вставить("Поле", Поля[0]);
			ОбработатьВыборСтрокаОтбора(ВыбранноеЗначение);
		Иначе
			ПоказатьУточняющееПодменюСтрокиОтбора(ВыбранноеЗначение, Поля);
		КонецЕсли; 
	Иначе
		Поля = ПоляПоТипу(ТипЗнч(ВыбранноеЗначение.ВведенноеЗначение));
		Если Поля.Количество()=1 Тогда
			ВыбранноеЗначение.Вставить("Поле", Поля[0]);
			ОбработатьВыборСтрокаОтбора(ВыбранноеЗначение);
		Иначе
			ПоказатьУточняющееПодменюСтрокиОтбора(ВыбранноеЗначение, Поля);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУточняющееПодменюСтрокиОтбора(ВыбранноеЗначение, Варианты)
	
	Подменю = Новый СписокЗначений;
	Если ВыбранноеЗначение.Свойство("Поле") Тогда
		// Выбор варианта сравнения
		ВариантыСравнения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Варианты);
		Для каждого ВариантСравнения Из ВариантыСравнения Цикл
			СтруктураЗначения = Новый Структура;
			Для каждого КлючИЗначение Из ВыбранноеЗначение Цикл
				СтруктураЗначения.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			СтруктураЗначения.Вставить("УправляющиеСимволы", ВариантСравнения);
			Подменю.Добавить(СтруктураЗначения, ВыбранноеЗначение.Поле+" "+ВариантСравнения+" "+ВыбранноеЗначение.ВведенноеЗначение); 
		КонецЦикла;
	ИначеЕсли НЕ ВыбранноеЗначение.Свойство("ИмяМетаданных") Тогда
		// Выбор поля отбора
		Поля = Варианты;
		Для каждого Поле Из Поля Цикл
			СтруктураЗначения = Новый Структура;
			Для каждого КлючИЗначение Из ВыбранноеЗначение Цикл
				СтруктураЗначения.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			СтруктураЗначения.Вставить("Поле", Поле);
			Подменю.Добавить(СтруктураЗначения, Поле+" = "+ВыбранноеЗначение.ВведенноеЗначение); 
		КонецЦикла;
	Иначе
		// Выбор поля отбора из вложенных реквизитов
		Поля = Варианты;
		Для каждого Поле Из Поля Цикл
			СтруктураЗначения = Новый Структура;
			Для каждого КлючИЗначение Из ВыбранноеЗначение Цикл
				СтруктураЗначения.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			СтруктураЗначения.Вставить("Поле", Поле);
			Подменю.Добавить(СтруктураЗначения, Поле+" содержит "+ВыбранноеЗначение.ВведенноеЗначение); 
		КонецЦикла;
		
	КонецЕсли; 
	Описание = Новый ОписаниеОповещения("СтрокаОтбораВыборИзПодменю", ЭтотОбъект);
	ПоказатьВыборИзМеню(Описание, Подменю, Элементы.СтрокаОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаОтбораВыборИзПодменю(ВыбранноеЗначение, ДополнительныеДанные) Экспорт
	
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработатьВыборСтрокаОтбора(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСтрокаОтбора(СтруктураПараметров)
	
	Если ТипЗнч(СтруктураПараметров)=Тип("ЭлементСпискаЗначений") Тогда
		СтруктураПараметров = СтруктураПараметров.Значение;
	КонецЕсли; 
	
	Значение = СтруктураПараметров.ВведенноеЗначение;
	
	Если СтруктураПараметров.Свойство("Поле") И Найти(СтруктураПараметров.Поле, "ДобавленноеПоле_")>0 Тогда
		НаложитьОтборПоДобавленномуПолю(СтруктураПараметров.Поле, Значение, СтруктураПараметров.УправляющиеСимволы);
	ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
		Если СтруктураПараметров.УправляющиеСимволы="-" Тогда
			Значение = -Значение;
		КонецЕсли;
		ВидСравненияФильтра = ВидСравненияИзСтроки(СтруктураПараметров.УправляющиеСимволы);
		Если ВидСравненияФильтра=ВидСравненияКомпоновкиДанных.Больше ИЛИ ВидСравненияФильтра=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			Значение = Новый Структура("ЗначениеОт, ЗначениеДо, ВключаяГраницы", Значение,, (ВидСравненияФильтра=ВидСравненияКомпоновкиДанных.БольшеИлиРавно));
		ИначеЕсли ВидСравненияФильтра=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ВидСравненияФильтра=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			Значение = Новый Структура("ЗначениеОт, ЗначениеДо, ВключаяГраницы",, Значение, (ВидСравненияФильтра=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно));
		КонецЕсли; 
		УстановитьЗначениеФильтра(
		СтруктураПараметров.Поле, 
		Значение, 
		ВидСравненияФильтра);
	ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
		ВидСравненияФильтра = ВидСравненияИзСтроки(СтруктураПараметров.УправляющиеСимволы);
		Если ВидСравненияФильтра=ВидСравненияКомпоновкиДанных.Больше ИЛИ ВидСравненияФильтра=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			Значение = Новый СтандартныйПериод(Значение, '0001-01-01');
		ИначеЕсли ВидСравненияФильтра=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ВидСравненияФильтра=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			Значение = Новый СтандартныйПериод('0001-01-01', Значение);
		КонецЕсли; 
		УстановитьЗначениеФильтра(
		СтруктураПараметров.Поле, 
		Значение, 
		ВидСравненияФильтра);
	ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
		Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураПараметров.Реквизиты);
		ДобавитьГруппуФильтров(
		СтруктураПараметров.Поле,
		Реквизиты, 
		Значение, 
		ВидСравненияКомпоновкиДанных.Содержит);
	Иначе
		Если СтруктураПараметров.Свойство("Поле") Тогда
			Поле = СтруктураПараметров.Поле;
		Иначе
			Поля = ПоляПоТипу(ТипЗнч(Значение));
			Поле = Поля[0];
		КонецЕсли;
		
		Если Найти(Поле, "ДобавленноеПоле_")>0 Тогда
			НаложитьОтборПоДобавленномуПолю(СтруктураПараметров.Поле, Значение, СтруктураПараметров.УправляющиеСимволы);
		Иначе
			Список = Новый СписокЗначений;
			Список.Добавить(Значение);
			УстановитьЗначениеФильтра(
			Поле, 
			Список, 
			?(СтруктураПараметров.УправляющиеСимволы="-",
			ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии,
			ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии));
		КонецЕсли; 
		
	КонецЕсли;
	
	ОчиститьСтрокуОтбора();
	ОтметитьНеактуальным();
	
КонецПроцедуры

&НаКлиенте
Функция ВидСравненияИзСтроки(Строка)
	
	Если Строка=">" Тогда
		Возврат ВидСравненияКомпоновкиДанных.Больше;
	ИначеЕсли Строка=">=" Тогда
		Возврат ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ИначеЕсли Строка="<" Тогда
		Возврат ВидСравненияКомпоновкиДанных.Меньше;
	ИначеЕсли Строка="<=" Тогда
		Возврат ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ИначеЕсли Строка="<>" Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеРавно;
	Иначе
		Возврат ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура СтрокаОтбораПриИзменении(Элемент)
	
	Если ВРег(СтрокаОтбора)="СКД"
		ИЛИ ВРег(СтрокаОтбора)="IDDQD"
		ИЛИ ВРег(СтрокаОтбора)="GODMODE"
		ИЛИ ВРег(СтрокаОтбора)="GOD MODE" Тогда
		ОчиститьСтрокуОтбора();
		РедактироватьСКД();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаОтбораРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РедактироватьСКД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтрокуОтбора()
	
	СтрокаОтбора = "";
	Элементы.СтрокаОтбора.ОбновитьТекстРедактирования();
	
КонецПроцедуры

#КонецОбласти

#Область ТабличныйДокумент

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Данные = ПолучитьДанныеРасшифровки(Расшифровка);
	Если Данные=Неопределено ИЛИ НЕ Данные.Ресурс Тогда
		Возврат;
	КонецЕсли;
	ВыполнитьНестандартнуюРасшифровку(Расшифровка, Данные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ОтчетДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(НастройкиОтчета.АдресСхемы));
	Данные = ПолучитьДанныеРасшифровки(Расшифровка);
	Если Данные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Поле) Тогда
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Данные.Поле));
	КонецЕсли; 
	Если Данные.Значение=Неопределено И ЗначениеЗаполнено(Данные.Поле) Тогда
		Если НЕ ДоступноеПоле=Неопределено И ДоступноеПоле.Ресурс Тогда
			// Значение ресурса берем из табличного документа
			Для каждого Область Из ОтчетТабличныйДокумент.ВыделенныеОбласти Цикл
				Если НЕ ТипЗнч(Область)=Тип("ОбластьЯчеекТабличногоДокумента") Тогда
					Продолжить;
				КонецЕсли; 
				Представление = СтрЗаменить(Область.Текст, Символы.НПП, "");
				Если НЕ ПустаяСтрока(Представление) Тогда
					ДробныйРазделитель = НСтр("ru = ','");
					ТестДляПроверки = СтрЗаменить(Представление, ДробныйРазделитель, "");
					Если СтрЧислоВхождений(Представление, ДробныйРазделитель)<=1 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТестДляПроверки) Тогда
						Данные.Значение = Число(СтрЗаменить(Представление, " ", ""));
					КонецЕсли;             
				КонецЕсли; 
				Прервать;
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
    
    ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	ДополнительныеДействия = Новый СписокЗначений;
	Если Данные.ЭтоСсылка Тогда
	    ДополнительныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение, НСтр("ru = 'Открыть'"));
	КонецЕсли; 
	Если ЗначениеЗаполнено(Данные.Поле) И НЕ ДоступноеПоле=Неопределено И НЕ ДоступноеПоле.Ресурс Тогда
		ДополнительныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать, НСтр("ru = 'Отфильтровать ""'")+Данные.Поле+" = "+Данные.Значение+"""");
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.Поле) И НЕ ДоступноеПоле=Неопределено И ДоступноеПоле.ТипЗначения.Типы().Количество()>0 Тогда
		ДополнительныеДействия.Добавить(СформироватьПодменюОформить(Данные.Поле, Данные.Значение), НСтр("ru = 'Оформить'"));
		ПодменюСортировка = Новый СписокЗначений;
		ПодменюСортировка.Добавить(НаправлениеСортировкиКомпоновкиДанных.Возр, Данные.Поле+НСтр("ru = ' по возрастанию'"),, БиблиотекаКартинок.СортироватьСписокПоВозрастанию); 
		ПодменюСортировка.Добавить(НаправлениеСортировкиКомпоновкиДанных.Убыв, Данные.Поле+НСтр("ru = ' по убыванию'"),, БиблиотекаКартинок.СортироватьСписокПоУбыванию); 
	    ДополнительныеДействия.Добавить(ПодменюСортировка, НСтр("ru = 'Сортировать'"));
	КонецЕсли;
	Если ДополнительныеДействия.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура("Данные, Расшифровка, ОбработкаРасшифровки", Данные, Расшифровка, ОбработкаРасшифровки);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьРасшифровку", ЭтотОбъект, ДополнительныеПараметры);
	ОбработкаРасшифровки.ПоказатьВыборДействия(Оповещение, Расшифровка, ДоступныеДействия, ДополнительныеДействия);
	
КонецПроцедуры

&НаСервере
Функция СформироватьПодменюОформить(Поле, Значение)
	
	ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Поле));
	Если ДоступноеПоле=Неопределено Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли; 
	ТипЗначения = ДоступноеПоле.ТипЗначения;
	СписокКоманд = Новый СписокЗначений;
	
	// Определенные разработчиком варианты оформления
	Если НастройкиОтчета.Свойство("ВариантыОформления") Тогда
		ВариантыОформления = НастройкиОтчета.ВариантыОформления.Получить(Поле);
		Если НЕ ВариантыОформления=Неопределено Тогда
			Для каждого ОписаниеОформления Из ВариантыОформления Цикл
				СписокКоманд.Добавить(ОписаниеОформления.Значение, ОписаниеОформления.Ключ);
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
	
	// Пользовательские варианты оформления
	Для каждого Тип Из ТипЗначения.Типы() Цикл
		ТекСписок = ХранилищеСистемныхНастроек.Загрузить("БыстрыеНастройкиОформленияОтчетов", Строка(Тип));
		Если ТипЗнч(ТекСписок)=Тип("СписокЗначений") Тогда
			Для каждого Элемент Из ТекСписок Цикл
				СписокКоманд.Добавить(Элемент.Значение, Элемент.Представление);
			КонецЦикла; 
		КонецЕсли;
		// Стандартные команды настройки оформления
		СписокКоманд.Добавить(
		"СписокБыстрыхНастроекОформления", 
		НСтр("ru = 'Редактировать список быстрых настроек'"),, 
		БиблиотекаКартинок.УсловноеОформлениеКомпоновкиДанных);
		СписокКоманд.Добавить(
		"РучнаяНастройкаОформления", 
		НСтр("ru = 'Ручная настройка оформления'"),, 
		БиблиотекаКартинок.ТабличныйДокументТолькоПросмотр);
	КонецЦикла; 
	
	Возврат СписокКоманд;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеРасшифровки(Расшифровка)
	
	Если Не ТипЗнч(Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Данные = ПолучитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
	ЭлементРасшифровки = Данные.Элементы.Получить(Расшифровка);
	СтруктураВозврата = Новый Структура("Тип", ?(ТипЗнч(ЭлементРасшифровки)=Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка"), ТипГруппировка(), ТипРеквизит()));
	СтруктураВозврата.Вставить("Настройки", Данные.Настройки);
	СтруктураВозврата.Вставить("Отбор", ПолучитьОтборРекурсивно(ЭлементРасшифровки));
	Поля = ЭлементРасшифровки.ПолучитьПоля();
	Если Поля.Количество()=0 Тогда
		СтруктураВозврата.Вставить("Значение", Неопределено);
		СтруктураВозврата.Вставить("Поле", "");
	Иначе 
		СтруктураВозврата.Вставить("Значение", ?(Поля[0].Значение=Null, Неопределено, Поля[0].Значение));
		СтруктураВозврата.Вставить("Поле", Поля[0].Поле);
	КонецЕсли;
	СтруктураВозврата.Вставить("ЭтоСсылка", ОбщегоНазначения.ЭтоСсылка(ТипЗнч(СтруктураВозврата.Значение)));
	Если ЗначениеЗаполнено(СтруктураВозврата.Поле) Тогда
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(СтруктураВозврата.Поле));
		Если ДоступноеПоле=Неопределено Тогда
			СтруктураВозврата.Вставить("ТипЗначения", Тип("Неопределено"));
			СтруктураВозврата.Вставить("Ресурс", Ложь);
		Иначе
			СтруктураВозврата.Вставить("ТипЗначения", ДоступноеПоле.ТипЗначения);
			СтруктураВозврата.Вставить("Ресурс", ДоступноеПоле.Ресурс);
		КонецЕсли; 
	Иначе
		СтруктураВозврата.Вставить("ТипЗначения", Тип("Неопределено"));
		СтруктураВозврата.Вставить("Ресурс", Ложь);
	КонецЕсли; 
	Возврат СтруктураВозврата;
   
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОтборРекурсивно(ЭлементРасшифровки, Результат = Неопределено)
	
	Если Результат=Неопределено Тогда
		Результат = Новый Соответствие;
	КонецЕсли; 
	Если ТипЗнч(ЭлементРасшифровки)=Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Поля = ЭлементРасшифровки.ПолучитьПоля();
		Для каждого Поле Из Поля Цикл
			Если Поле.Значение=Null Тогда
				Продолжить;
			КонецЕсли;
			Результат.Вставить(Поле.Поле, Поле.Значение);
		КонецЦикла; 
	КонецЕсли;
	Родители = ЭлементРасшифровки.ПолучитьРодителей();
	Для каждого Родитель Из Родители Цикл
		ПолучитьОтборРекурсивно(Родитель, Результат);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьРасшифровку(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	Данные = ДополнительныеПараметры.Данные;
	Расшифровка = ДополнительныеПараметры.Расшифровка;
	
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать Тогда
		УстановитьЗначениеФильтра(Данные.Поле, Данные.Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		ОтметитьНеактуальным();
	ИначеЕсли ВыполненноеДействие=ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		ПоказатьЗначение(, Данные.Значение);
	ИначеЕсли ТипЗнч(ВыполненноеДействие)=Тип("НаправлениеСортировкиКомпоновкиДанных") Тогда
		ДобавитьСортировку(Данные.Поле, ВыполненноеДействие);
	ИначеЕсли ТипЗнч(ВыполненноеДействие)=Тип("Соответствие") 
		ИЛИ ТипЗнч(ВыполненноеДействие)=Тип("ФиксированноеСоответствие")
		ИЛИ ТипЗнч(ВыполненноеДействие)=Тип("Структура") Тогда
		ДобавитьОформление(Данные.Поле, ВыполненноеДействие);
	ИначеЕсли ВыполненноеДействие="РучнаяНастройкаОформления" Тогда
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		СтруктураОткрытия.Вставить("АдресНастроек", ПоместитьВоВременноеХранилище(Отчет.КомпоновщикНастроек.Настройки, УникальныйИдентификатор));
		СтруктураОткрытия.Вставить("Поле", Данные.Поле);
		СтруктураОткрытия.Вставить("ТипЗначения", Данные.ТипЗначения);
		СтруктураОткрытия.Вставить("Значение", Данные.Значение);
		Оповещение = Новый ОписаниеОповещения("РучноеОформление", ЭтотОбъект, СтруктураОткрытия);
		ОткрытьФорму("ОбщаяФорма.ФормаОформления", СтруктураОткрытия, ЭтаФорма,,,, Оповещение);
	ИначеЕсли ВыполненноеДействие="СписокБыстрыхНастроекОформления" Тогда
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("ТипЗначения", Данные.ТипЗначения);
		ОткрытьФорму("ОбщаяФорма.ФормаБыстрыхНастроекОформления", СтруктураОткрытия, ЭтаФорма);
	ИначеЕсли ВыполненноеДействие=ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда
		ДополнительныеПараметры.Вставить("НастройкиКД", ПараметрВыполненногоДействия);
		НастройкиОткрытия = ДополнительныеПараметры;
		ПодключитьОбработчикОжидания("ОткрытьФормуОтчета", 0.1, Истина);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчета()
	
	Данные = НастройкиОткрытия.Данные;
	Расшифровка = НастройкиОткрытия.Расшифровка;
	СтандартнаяОбработка = Истина;
	ВыполнитьНестандартнуюРасшифровку(Расшифровка, Данные, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Расшифровка = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ОтчетДанныеРасшифровки, НастройкиОткрытия.Расшифровка, НастройкиОткрытия.НастройкиКД); 
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("Расшифровка", Расшифровка);
		СтруктураОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		СтруктураОткрытия.Вставить("ПредставлениеВарианта", Строка(НастройкиОтчета.НаименованиеВарианта)+НСтр("ru = ' (Расшифровка)'"));
		ОткрытьФорму(НастройкиОтчета.ПолноеИмя+".Форма", СтруктураОткрытия,,, Неопределено);
	КонецЕсли;
	НастройкиОткрытия = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНестандартнуюРасшифровку(Расшифровка, Данные, СтандартнаяОбработка = Истина)
	
	ОтчетыКлиентПереопределяемый.ОбработкаРасшифровки(ЭтотОбъект, Элементы.ОтчетТабличныйДокумент, Расшифровка, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Поле", Данные.Поле);
		Строки = НайтиВМассиве(НастройкиОтчета.ВариантыРасшифровки, СтруктураОтбора);
		СтруктураОтбора.Вставить("Поле", "");
		СтрокиОбщие = НайтиВМассиве(НастройкиОтчета.ВариантыРасшифровки, СтруктураОтбора);
		Для каждого Стр Из СтрокиОбщие Цикл
			Строки.Добавить(Стр);
		КонецЦикла; 
		Если Строки.Количество()=1 Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьОтчетРасшифровку(Расшифровка, Данные, Строки[0]);
		ИначеЕсли Строки.Количество()>1 Тогда
			СтандартнаяОбработка = Ложь;
			СписокВыбора = Новый СписокЗначений;
			Для каждого Стр Из Строки Цикл
				Если НЕ ПустаяСтрока(Стр.Заголовок) Тогда
					ЗаголовокПункта = Стр.Заголовок;
				ИначеЕсли ЗначениеЗаполнено(Стр.Вариант) Тогда
					ЗаголовокПункта = Строка(Стр.Вариант);
				Иначе
					ЗаголовокПункта = Строка(Вариант);
				КонецЕсли; 
				СписокВыбора.Добавить(Стр, ЗаголовокПункта);
			КонецЦикла;
			ДополнительныеДанные = Новый Структура;
			ДополнительныеДанные.Вставить("Данные", Данные);
			ДополнительныеДанные.Вставить("Расшифровка", Расшифровка);
			Оповещение = Новый ОписаниеОповещения("ВыполнитьНестандартнуюРасшифровкуЗавершение", ЭтотОбъект, ДополнительныеДанные);  
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНестандартнуюРасшифровкуЗавершение(Стр, ДополнительныеДанные) Экспорт
	
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьОтчетРасшифровку(ДополнительныеДанные.Расшифровка, ДополнительныеДанные.Данные, Стр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетРасшифровку(Расшифровка, Данные, Стр)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОткрытия.Вставить("Расшифровка", Истина);
	ПараметрыОткрытия.Вставить("ОтборРасшифровки", Данные.Отбор);
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтаФорма, Стр.Вариант, ПараметрыОткрытия);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДобавитьОформление(Поле, Оформление)
	
	ОтчетыУНФКлиентСервер.ДобавитьУсловноеОформление(Отчет.КомпоновщикНастроек.Настройки, Поле, Оформление);
	ОтметитьНеактуальным();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСортировку(Поле, Направление)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(Поле);
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	КУдалению = Новый Массив;
	Для каждого ЭлементСортировки Из Настройки.Порядок.Элементы Цикл
		Если ТипЗнч(ЭлементСортировки)=Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
			КУдалению.Добавить(ЭлементСортировки);
			Продолжить;
		КонецЕсли; 
		Если ЭлементСортировки.Поле=ПолеКомпоновки Тогда
			КУдалению.Добавить(ЭлементСортировки);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого ЭлементСортировки Из КУдалению Цикл
		Настройки.Порядок.Элементы.Удалить(ЭлементСортировки);
	КонецЦикла;
	ЭлементСортировки = Настройки.Порядок.Элементы.Вставить(0, Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементСортировки.Использование = Истина;
	ЭлементСортировки.Поле = ПолеКомпоновки;
	ЭлементСортировки.ТипУпорядочивания = Направление;
	Настройки.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Настройки.ДополнительныеСвойства.Удалить("СортироватьПоПоказателям");
	ОтметитьНеактуальным();
	
КонецПроцедуры

&НаКлиенте
Процедура РучноеОформление(АдресНастроек, ДополнительныеПараметры) Экспорт
	
	Если АдресНастроек=Неопределено ИЛИ НЕ ЭтоАдресВременногоХранилища(АдресНастроек) Тогда
		Возврат;
	КонецЕсли; 
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресНастроек));
	ОтметитьНеактуальным();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОтчетТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	ПодключитьОбработчикОжидания("РассчитатьСуммуЯчеек", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// Панель настроек

&НаКлиенте
Процедура ВариантПриИзменении(Элемент)
	
	НастройкиОтчета.Вставить("ПользовательскиеНастройки", Неопределено);
	УстановитьТекущийВариант(Вариант);
	ОтметитьНеактуальным(); 
	
КонецПроцедуры

#Область Диаграммы

&НаКлиенте
Процедура ВидДиаграммыОчистка(Элемент, СтандартнаяОбработка)
	
	ВидДиаграммы = Неопределено;
	ПриИзмененииВидаДиаграммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДиаграммыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодключитьОбработчикОжидания("ВидДиаграммыНачалоВыбораЗадержка", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДиаграммыНачалоВыбораЗадержка()
	
	Меню = Новый СписокЗначений;
	Меню.Добавить(Неопределено, НСтр("ru = 'Не выводить'"),, БиблиотекаКартинок.Пустая);
	Меню.Добавить(ТипДиаграммы.График, НСтр("ru = 'Графики'"),, КартинкаДиаграммы(ТипДиаграммы.График));
	Меню.Добавить(ТипДиаграммы.Гистограмма, НСтр("ru = 'Обычные гистограммы'"),, КартинкаДиаграммы(ТипДиаграммы.Гистограмма));
	Меню.Добавить(ТипДиаграммы.ГистограммаГоризонтальная, НСтр("ru = 'Горизонт. гистограммы'"),, КартинкаДиаграммы(ТипДиаграммы.ГистограммаГоризонтальная));
	Меню.Добавить(ТипДиаграммы.Круговая, НСтр("ru = 'Круговые диаграммы'"),, КартинкаДиаграммы(ТипДиаграммы.Круговая));
	Меню.Добавить(ТипДиаграммы.Изометрическая, НСтр("ru = 'Изометрические диаграммы'"),, КартинкаДиаграммы(ТипДиаграммы.Изометрическая));
	Меню.Добавить("<Прочие>", НСтр("ru = 'Прочие'"),, КартинкаДиаграммы(ТипДиаграммы.Поверхность));
	Оповещение = Новый ОписаниеОповещения("ВидДиаграммыВыборГруппы", ЭтотОбъект);
	#Если ВебКлиент Тогда
	ПоказатьВыборИзМеню(Оповещение, Меню, Элементы.ВидДиаграммы);
	#Иначе
	ПоказатьВыборИзСписка(Оповещение, Меню, Элементы.ВидДиаграммы);
	#КонецЕсли 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДиаграммыВыборГруппы(Значение, ДополнительныеДанные) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Меню = Новый СписокЗначений;
	Если Значение.Значение=ТипДиаграммы.График Тогда
		Меню.Добавить(ТипДиаграммы.График, НСтр("ru = 'Обычный'"));
		Меню.Добавить(ТипДиаграммы.ГрафикПоШагам, НСтр("ru = 'По шагам'"));
		Меню.Добавить(ТипДиаграммы.ГрафикСНакоплением, НСтр("ru = 'С накоплением'"));
		Меню.Добавить(ТипДиаграммы.ГрафикСОбластями, НСтр("ru = 'С областями'"));
		Меню.Добавить(ТипДиаграммы.ГрафикСОбластямиИНакоплением, НСтр("ru = 'С областями и накоплением'"));
		Меню.Добавить(ТипДиаграммы.ГрафикСОбластямиНормированный, НСтр("ru = 'Нормированный'"));
	ИначеЕсли Значение.Значение=ТипДиаграммы.Гистограмма Тогда
		Меню.Добавить(ТипДиаграммы.Гистограмма, НСтр("ru = 'Обычная'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаСНакоплением, НСтр("ru = 'С накоплением'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаНормированная, НСтр("ru = 'Нормированная'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаОбъемная, НСтр("ru = 'Объемная'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаСНакоплениемОбъемная, НСтр("ru = 'Объемная с накоплением'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаНормированнаяОбъемная, НСтр("ru = 'Объемная нормированная'"));
	ИначеЕсли Значение.Значение=ТипДиаграммы.ГистограммаГоризонтальная Тогда
		Меню.Добавить(ТипДиаграммы.ГистограммаГоризонтальная, НСтр("ru = 'Обычная'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаСНакоплениемГоризонтальная, НСтр("ru = 'С накоплением'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаНормированнаяГоризонтальная, НСтр("ru = 'Нормированная'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная, НСтр("ru = 'Объемная'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная, НСтр("ru = 'Объемная с накоплением'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаНормированнаяГоризонтальнаяОбъемная, НСтр("ru = 'Объемная нормированная'"));
	ИначеЕсли Значение.Значение=ТипДиаграммы.Круговая Тогда
		Меню.Добавить(ТипДиаграммы.Круговая, НСтр("ru = 'Обычная'"));
		Меню.Добавить(ТипДиаграммы.КруговаяОбъемная, НСтр("ru = 'Объемная'"));
	ИначеЕсли Значение.Значение=ТипДиаграммы.Изометрическая Тогда
		Меню.Добавить(ТипДиаграммы.Изометрическая, НСтр("ru = 'Обычная'"));
		Меню.Добавить(ТипДиаграммы.ИзометрическаяНепрерывная, НСтр("ru = 'Непрерывная'"));
		Меню.Добавить(ТипДиаграммы.ИзометрическаяЛента, НСтр("ru = 'Лента'"));
		Меню.Добавить(ТипДиаграммы.ИзометрическаяПирамида, НСтр("ru = 'Пирамида'"));
	ИначеЕсли Значение.Значение="<Прочие>" Тогда
		Меню.Добавить(ТипДиаграммы.Водопад);
		Меню.Добавить(ТипДиаграммы.КаркаснаяПоверхность);
		Меню.Добавить(ТипДиаграммы.Поверхность);
		Меню.Добавить(ТипДиаграммы.ВыпуклаяПоверхность);
		Меню.Добавить(ТипДиаграммы.ВогнутаяПоверхность);
		Меню.Добавить(ТипДиаграммы.ЗатененнаяПоверхность);
		Меню.Добавить(ТипДиаграммы.Сотовая);
	Иначе
		ВидДиаграммыВыбор(Значение, Неопределено);
		Возврат;
	КонецЕсли;
	Для каждого ЭлементСписка Из Меню Цикл
		ЭлементСписка.Картинка = КартинкаДиаграммы(ЭлементСписка.Значение);
	КонецЦикла; 
	Оповещение = Новый ОписаниеОповещения("ВидДиаграммыВыбор", ЭтотОбъект);
	#Если ВебКлиент Тогда
	ПоказатьВыборИзМеню(Оповещение, Меню, Элементы.ВидДиаграммы);
	#Иначе
	ПоказатьВыборИзСписка(Оповещение, Меню, Элементы.ВидДиаграммы);
	#КонецЕсли 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КартинкаДиаграммы(ВидДиаграммы)
	
	Если ВидДиаграммы=ТипДиаграммы.График Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_График;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГрафикПоШагам Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГрафикПоШагам;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГрафикСНакоплением Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГрафикСНакоплением;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГрафикСОбластями Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГрафикСОбластями;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГрафикСОбластями Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГрафикСОбластями;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГрафикСОбластямиИНакоплением Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГрафикСОбластямиИНакоплением;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГрафикСОбластямиНормированный Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГрафикСОбластямиНормированный;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.Гистограмма Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_Гистограмма;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаСНакоплением Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГистограммаСНакоплением;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаНормированная Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГистограммаНормированная
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаОбъемная Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГистограммаОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаСНакоплениемОбъемная Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГистограммаСНакоплениемОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаНормированнаяОбъемная Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГистограммаНормированнаяОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаГоризонтальная Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГистограммаГоризонтальная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаСНакоплениемГоризонтальная Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГистограммаСНакоплениемГоризонтальная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаНормированнаяГоризонтальная Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГистограммаНормированнаяГоризонтальная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГистограммаГоризонтальнаяОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГистограммаСНакоплениемГоризонтальнаяОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаНормированнаяГоризонтальнаяОбъемная Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ГистограммаНормированнаяГоризонтальнаяОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.Круговая Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_Круговая;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.КруговаяОбъемная Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_КруговаяОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.Изометрическая Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_Изометрическая;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ИзометрическаяНепрерывная Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ИзометрическаяНепрерывная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ИзометрическаяЛента Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ИзометрическаяЛента;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ИзометрическаяПирамида Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ИзометрическаяПирамида;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.Водопад Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_Водопад;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.КаркаснаяПоверхность Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_КаркаснаяПоверхность;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.Поверхность Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_Поверхность;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ВыпуклаяПоверхность Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ВыпуклаяПоверхность;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ВогнутаяПоверхность Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ВогнутаяПоверхность;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ЗатененнаяПоверхность Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_ЗатененнаяПоверхность;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.Сотовая Тогда
		Возврат БиблиотекаКартинок.ТипДиаграммы_Сотовая;
	Иначе
		Возврат Новый Картинка;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура ВидДиаграммыВыбор(Значение, ДополнительныеДанные) Экспорт
	
	Если Значение=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ВидДиаграммы = Значение.Значение;
	ПриИзмененииВидаДиаграммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаДиаграммы()
	
	ЭлементСтруктуры = ЭлементСтуктурыДиаграмма(Отчет.КомпоновщикНастроек.Настройки.Структура, ЗначениеЗаполнено(ВидДиаграммы));
	Если НЕ ВидДиаграммы=Неопределено Тогда
		ЭлементСтруктуры.Использование = Истина;
		Параметр = ЭлементСтруктуры.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипДиаграммы"));
		Если Параметр=Неопределено ИЛИ НЕ Параметр.Использование Тогда
			Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипДиаграммы"));
		КонецЕсли; 
		Если НЕ Параметр=Неопределено Тогда
			Параметр.Значение = ВидДиаграммы;
			Параметр.Использование = Истина;
			ОтметитьНеактуальным();
		КонецЕсли;
	ИначеЕсли НЕ ЭлементСтруктуры=Неопределено Тогда 
		ЭлементСтруктуры.Использование = Ложь;
		ОтметитьНеактуальным();
	КонецЕсли; 
	ВидДиаграммыВыборСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВидДиаграммыВыборСервер()
	
	УстановитьВидимостьИДоступность("ИзмененВидДиаграммы");
	Если НастройкиОтчета.ИзменятьЗначенияДиаграммы И НЕ ЗначениеЗаполнено(ДиаграммаЗначения) Тогда
		УстановитьЗначенияДиаграммыПоУмолчаниюРекурсивно(Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаТочкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Для каждого ЭлементВыбора Из ДоступныеТочки Цикл
		Элемент.СписокВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаСерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Для каждого ЭлементВыбора Из ДоступныеСерии Цикл
		Если НЕ ЗначениеЗаполнено(ДиаграммаСерии) И ЗначениеЗаполнено(ДиаграммаТочки) И ЭлементВыбора.Значение=ДиаграммаТочки Тогда
			Продолжить;
		КонецЕсли; 
		Элемент.СписокВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаСерииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение="<Прочие>" Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ДобавитьСерию", ЭтотОбъект);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Режим", "ПоляГруппировки");
		СтруктураПараметров.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		СтруктураПараметров.Вставить("АдресНастроек", ПоместитьВоВременноеХранилище(Отчет.КомпоновщикНастроек.Настройки, УникальныйИдентификатор));
		ОткрытьФорму("ОбщаяФорма.ФормаСпискаПолей", СтруктураПараметров, ЭтаФорма,,,, Оповещение);
	ИначеЕсли ВыбранноеЗначение=ДиаграммаТочки И ЗначениеЗаполнено(ДиаграммаСерии) Тогда
		ДиаграммаТочки = ДиаграммаСерии;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаТочкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение="<Прочие>" Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ДобавитьТочку", ЭтотОбъект);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Режим", "ПоляГруппировки");
		СтруктураПараметров.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		СтруктураПараметров.Вставить("АдресНастроек", ПоместитьВоВременноеХранилище(Отчет.КомпоновщикНастроек.Настройки, УникальныйИдентификатор));
		ОткрытьФорму("ОбщаяФорма.ФормаСпискаПолей", СтруктураПараметров, ЭтаФорма,,,, Оповещение);
	ИначеЕсли ВыбранноеЗначение=ДиаграммаСерии И ЗначениеЗаполнено(ДиаграммаТочки) Тогда
		ДиаграммаСерии = ДиаграммаТочки;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаТочкиПриИзменении(Элемент)
	
	Если ДиаграммаТочки=ДиаграммаСерии Тогда
		ДиаграммаСерии = Неопределено;
	КонецЕсли; 
	ПриИзмененииНастроекДиаграммы();
	УстановитьВидимостьИДоступность("ИзмененаТочкаДиаграммы");
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаСерииПриИзменении(Элемент)
	
	Если НастройкиОтчета.ВыводитьТолькоТочки Тогда
		ДиаграммаТочки = ДиаграммаСерии;
	ИначеЕсли ДиаграммаСерии=ДиаграммаТочки Тогда
		ДиаграммаТочки = Неопределено;
	КонецЕсли;
	ПриИзмененииНастроекДиаграммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЗначенияПриИзменении(Элемент)
	
	ПриИзмененииНастроекДиаграммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСерию(ПолноеИмя, ДополнительныеДанные) Экспорт
	
	Если ПолноеИмя=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ДоступныеСерии.НайтиПоЗначению(ПолноеИмя)=Неопределено Тогда
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ПолноеИмя));
		Если ДоступноеПоле=Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДоступныеСерии.Вставить(ДоступныеСерии.Количество()-1, ПолноеИмя, ДоступноеПоле.Заголовок);
		Элементы.ДиаграммаСерии.СписокВыбора.Вставить(Элементы.ДиаграммаСерии.СписокВыбора.Количество()-1, ПолноеИмя, ДоступноеПоле.Заголовок);
	КонецЕсли; 
	ДиаграммаСерии = ПолноеИмя;
	ДиаграммаСерииПриИзменении(Элементы.ДиаграммаСерии);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДобавитьТочку(ПолноеИмя, ДополнительныеДанные) Экспорт
	
	Если ПолноеИмя=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ДоступныеТочки.НайтиПоЗначению(ПолноеИмя)=Неопределено Тогда
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ПолноеИмя));
		Если ДоступноеПоле=Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДоступныеТочки.Вставить(ДоступныеТочки.Количество()-1, ПолноеИмя, ДоступноеПоле.Заголовок);
		Элементы.ДиаграммаТочки.СписокВыбора.Вставить(Элементы.ДиаграммаТочки.СписокВыбора.Количество()-1, ПолноеИмя, ДоступноеПоле.Заголовок);
	КонецЕсли; 
	ДиаграммаТочки = ПолноеИмя;
	ДиаграммаТочкиПриИзменении(Элементы.ДиаграммаТочки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастроекДиаграммы()
	
	Если НЕ ПроверитьСовместимостьДиаграммы() Тогда
		Возврат;
	КонецЕсли; 
	ОбновитьНастройкиДиаграммы();
	ОтметитьНеактуальным();
	
КонецПроцедуры

#КонецОбласти 

#Область Фильтры

&НаСервере
Функция СписокБыстрыхФильтров()
	
	ДобавленныеФильтры = СписокДобавленныхФильтров();
	Список = Новый СписокЗначений;
	Если НастройкиОтчета.Свойство("ДополнительныеФильтры") И ТипЗнч(НастройкиОтчета.ДополнительныеФильтры)=Тип("СписокЗначений") Тогда
		Для каждого ОписаниеПоля Из НастройкиОтчета.ДополнительныеФильтры Цикл
			Если НЕ ДобавленныеФильтры.НайтиПоЗначению(ОписаниеПоля.Значение)=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ОписаниеПоля.Значение));
			Если ДоступноеПоле=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Если ПустаяСтрока(ОписаниеПоля.Представление) Тогда
				ПредставлениеПоля = ДоступноеПоле.Заголовок;
			Иначе
				ПредставлениеПоля = ОписаниеПоля.Представление;
			КонецЕсли; 
			Список.Добавить(ОписаниеПоля.Значение, ПредставлениеПоля);
		КонецЦикла; 
	КонецЕсли;
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьФильтрЗавершение(Элемент, ДополнительныеДанные) Экспорт
	
	Если Элемент=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если Элемент.Значение=Неопределено Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", ТипФильтр());
		СтрокиПолей = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
		СписокПолей = Новый СписокЗначений;
		Для каждого СтрПоле Из СтрокиПолей Цикл
			СписокПолей.Добавить(СтрПоле.Поле);
		КонецЦикла; 
		Оповещение = Новый ОписаниеОповещения("ДобавитьФильтрПрочиеПоля", ЭтотОбъект);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Режим", "ПоляОтбора");
		СтруктураПараметров.Вставить("СуществующийПоля", СписокПолей);
		СтруктураПараметров.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		СтруктураПараметров.Вставить("АдресНастроек", ПоместитьВоВременноеХранилище(Отчет.КомпоновщикНастроек.Настройки, УникальныйИдентификатор));
		ОткрытьФорму("ОбщаяФорма.ФормаСпискаПолей", СтруктураПараметров, ЭтаФорма,,,, Оповещение);
	Иначе
		ДобавитьОписаниеФильтра(Элемент.Значение);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФильтрПрочиеПоля(Путь, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Путь) Тогда
		ДобавитьОписаниеФильтра(Путь);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область Группировки

&НаСервере
Функция СписокБыстрыхГруппировок()
	
	ДобавленныеГруппировки = СписокДобавленныхГруппировок();
	Список = Новый СписокЗначений;
	Если НастройкиОтчета.Свойство("ДополнительныеГруппировкиСтрок") И ТипЗнч(НастройкиОтчета.ДополнительныеГруппировкиСтрок)=Тип("СписокЗначений") Тогда
		Для каждого ОписаниеПоля Из НастройкиОтчета.ДополнительныеГруппировкиСтрок Цикл
			Если НЕ ДобавленныеГруппировки.НайтиПоЗначению(ОписаниеПоля.Значение)=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ОписаниеПоля.Значение));
			Если ДоступноеПоле=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Если ПустаяСтрока(ОписаниеПоля.Представление) Тогда
				ПредставлениеПоля = ДоступноеПоле.Заголовок;
			Иначе
				ПредставлениеПоля = ОписаниеПоля.Представление;
			КонецЕсли; 
			Список.Добавить(ОписаниеПоля.Значение, ПредставлениеПоля);
		КонецЦикла; 
	КонецЕсли;
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокуЗавершение(Элемент, ДополнительныеДанные) Экспорт
	
	Если Элемент=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Элемент.Значение=Неопределено Тогда
		// Группировка
		ДобавитьГруппировкуРеквизит(Элемент.Значение); 
	Иначе
		СписокПолей = СписокДобавленныхГруппировок();
		Оповещение = Новый ОписаниеОповещения("ДобавитьСтрокуПрочиеПоля", ЭтотОбъект);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Режим", "ПоляГруппировки");
		СтруктураПараметров.Вставить("СуществующийПоля", СписокПолей);
		СтруктураПараметров.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		СтруктураПараметров.Вставить("АдресНастроек", ПоместитьВоВременноеХранилище(Отчет.КомпоновщикНастроек.Настройки, УникальныйИдентификатор));
		ОткрытьФорму("ОбщаяФорма.ФормаСпискаПолей", СтруктураПараметров, ЭтаФорма,,,, Оповещение);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуПрочиеПоля(ПолноеИмя, ИмяГруппировки) Экспорт
	
	Если ПолноеИмя=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДобавитьГруппировкуРеквизит(ПолноеИмя); 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПолеГруппировкиКолонокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.СписокВыбора.Количество()>0 Тогда
		// Уже заполнено
		Возврат;
	КонецЕсли; 
	Список = СписокПолейГруппировок();
	Для каждого ЭлементСписка Из Список Цикл
		Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеГруппировкиКолонокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение="<Прочие>" Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ДобавитьГруппировкуКолонок", ЭтотОбъект);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Режим", "ПоляГруппировки");
		СтруктураПараметров.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		СтруктураПараметров.Вставить("АдресНастроек", ПоместитьВоВременноеХранилище(Отчет.КомпоновщикНастроек.Настройки, УникальныйИдентификатор));
		ОткрытьФорму("ОбщаяФорма.ФормаСпискаПолей", СтруктураПараметров, ЭтаФорма,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппировкуКолонок(ПолноеИмя, ДополнительныеДанные) Экспорт
	
	Если ПолноеИмя=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ПолеГруппировкиКолонок.СписокВыбора.НайтиПоЗначению(ПолноеИмя)=Неопределено Тогда
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ПолноеИмя));
		Если ДоступноеПоле=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Элементы.ПолеГруппировкиКолонок.СписокВыбора.Вставить(Элементы.ПолеГруппировкиКолонок.СписокВыбора.Количество()-1, ПолноеИмя, ДоступноеПоле.Заголовок);
	КонецЕсли; 
	ПолеГруппировкиКолонок = ПолноеИмя;
	ПриИзмененииГруппировкиКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеГруппировкиКолонокПриИзменении(Элемент)
	
	ПриИзмененииГруппировкиКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииГруппировкиКолонки()
	
	Если НЕ ПроверитьСовместимостьГруппировокКолонок() Тогда
		Возврат;
	КонецЕсли; 
	Если НЕ ПустаяСтрока(ПолеГруппировкиКолонок) Тогда
		СтрокаНастроек = СтрокаОписанияПоля(ТипГруппировка(), ПолеГруппировкиКолонок, ПоляНастроек);
		Если СтрокаНастроек=Неопределено Тогда
			СтрокаНастроек = СтрокаОписанияПоля(ТипРеквизит(), ПолеГруппировкиКолонок, ПоляНастроек);
		КонецЕсли; 
	Иначе
		СтрокаНастроек = Неопределено;
	КонецЕсли; 
	Обновлено = Ложь;
	Если НЕ СтрокаНастроек=Неопределено Тогда
		Для каждого ОписаниеРеквизита Из СтрокаНастроек.Реквизиты Цикл
			ЭтаФорма[ОписаниеРеквизита.Ключ] = Ложь; 
		КонецЦикла; 
		ОбновитьГруппировкиИРеквизиты();
		Обновлено = Истина;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПолеГруппировкиКолонок) И ПолеГруппировкиКолонок=ПолеСравнения Тогда 
		ПолеСравнения = "";
		ПоказыватьАбсолютноеИзменение = Ложь;
		ПоказыватьОтносительноеИзменение = Ложь;
		ОбновитьГруппировкиИРеквизиты();
		Обновлено = Истина;
	КонецЕсли;
	Если НЕ Обновлено Тогда
		ОбновитьГруппировкиИРеквизиты(, Истина);
	КонецЕсли;
	
	УстановитьВидимостьИДоступность("ИзмененыГруппировки");
	ОтметитьНеактуальным(); 
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияСтрокНажатие(Элемент)
	
	РежимРедактированияСтрок = НЕ РежимРедактированияСтрок;
	УстановитьВидимостьИДоступность("ИзмененРежимРедактирования");
	
КонецПроцедуры

#КонецОбласти 

#Область Колонки

&НаСервере
Функция СписокДополнительныхКолонок()
	
	Схема = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	Список = Новый СписокЗначений;
	Для каждого Показатель Из Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если НЕ Показатель.Ресурс Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоля = Строка(Показатель.Поле);
		Если НЕ СтрокаОписанияПоля(ТипПоказатель(), ИмяПоля, ПоляНастроек)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НастройкиОтчета.Свойство("ТолькоРесурсыОстатков") И НастройкиОтчета.ТолькоРесурсыОстатков Тогда
			ПолеСхемы = ОтчетыУНФ.ПолеСхемы(Схема, ИмяПоля);
			Если НЕ ПолеСхемы=Неопределено И НЕ ПолеСхемы.Роль.ТипОстатка=ТипОстаткаКомпоновкиДанных.КонечныйОстаток Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		Список.Добавить(ИмяПоля, Показатель.Заголовок);
	КонецЦикла;
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьКолонкуЗавершение(Элемент, ДополнительныеДанные) Экспорт
	
	Если Элемент=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяЭлемента = ДобавитьОписаниеПоказателя(Элемент.Значение);
	Если НЕ ПустаяСтрока(ИмяЭлемента) Тогда
		ПриИзмененииПоказателя(ИмяЭлемента);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияКолонокНажатие(Элемент)
	
	РежимРедактированияКолонок = НЕ РежимРедактированияКолонок;
	УстановитьВидимостьИДоступность("ИзмененРежимРедактирования");
	
КонецПроцедуры

#КонецОбласти 

#Область Сравнение

&НаКлиенте
Процедура ПолеСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.СписокВыбора.Количество()>0 Тогда
		// Уже заполнено
		Возврат;
	КонецЕсли; 
	Список = СписокПолейГруппировок(Истина);
	Для каждого ЭлементСписка Из Список Цикл
		Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСравненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение="<Прочие>" Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ДобавитьПолеСравнения", ЭтотОбъект);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Режим", "ПоляГруппировки");
		СтруктураПараметров.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		СтруктураПараметров.Вставить("АдресНастроек", ПоместитьВоВременноеХранилище(Отчет.КомпоновщикНастроек.Настройки, УникальныйИдентификатор));
		ОткрытьФорму("ОбщаяФорма.ФормаСпискаПолей", СтруктураПараметров, ЭтаФорма,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ДобавитьПолеСравнения(ПолноеИмя, ДополнительныеДанные) Экспорт
	
	Если ПолноеИмя=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ПолеСравнения.СписокВыбора.НайтиПоЗначению(ПолноеИмя)=Неопределено Тогда
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ПолноеИмя));
		Если ДоступноеПоле=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Элементы.ПолеСравнения.СписокВыбора.Вставить(Элементы.ПолеСравнения.СписокВыбора.Количество()-1, ПолноеИмя, ДоступноеПоле.Заголовок);
	КонецЕсли;
	ПолеСравнения = ПолноеИмя;
	ПриИзмененииПоляСравнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСравненияПриИзменении(Элемент)
	
	ПриИзмененииПоляСравнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоляСравнения()
	
	Если НЕ ПроверитьСовместимостьГруппировокКолонок() Тогда
		ПоказыватьАбсолютноеИзменение = Ложь;
		ПоказыватьОтносительноеИзменение = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ПолеСравнения)=Тип("ПеречислениеСсылка.Периодичность") Тогда
		ПоказыватьАбсолютноеИзменение = Ложь;
		ПоказыватьОтносительноеИзменение = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПолеСравнения)=Тип("Строка") И НЕ ПустаяСтрока(ПолеСравнения) Тогда
		СтрокаНастроек = СтрокаОписанияПоля(ТипГруппировка(), ПолеСравнения, ПоляНастроек);
		Если СтрокаНастроек=Неопределено Тогда
			СтрокаНастроек = СтрокаОписанияПоля(ТипРеквизит(), ПолеСравнения, ПоляНастроек);
		КонецЕсли; 
	Иначе
		СтрокаНастроек = Неопределено;
	КонецЕсли; 
	Обновлено = Ложь;
	Если НЕ СтрокаНастроек=Неопределено Тогда
		Для каждого ОписаниеРеквизита Из СтрокаНастроек.Реквизиты Цикл
			ЭтаФорма[ОписаниеРеквизита.Ключ] = Ложь; 
		КонецЦикла; 
		ОбновитьГруппировкиИРеквизиты();
		Обновлено = Истина;
	КонецЕсли;
	Если ТипЗнч(ПолеСравнения)=Тип("Строка") И НЕ ПустаяСтрока(ПолеСравнения) И ПолеГруппировкиКолонок=ПолеСравнения Тогда 
		ПолеГруппировкиКолонок = "";
		ОбновитьГруппировкиИРеквизиты();
		Обновлено = Истина;
	КонецЕсли;
	Если НЕ Обновлено Тогда
		ОбновитьГруппировкиИРеквизиты(, Истина);
	КонецЕсли; 
	
	УстановитьВидимостьИДоступность("ИзмененыПериодыСравнения");
	ОтметитьНеактуальным(); 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВариантСравненияПриИзменении(Элемент)
	
	ОтметитьНеактуальным(); 
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура СвернутьРазвернутьПанельНастроек(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.СтраницыНастройки.Видимость;
	
	Элементы.СтраницыНастройки.Видимость	= НовоеЗначениеВидимость;
	Элементы.ГруппаРазделитель.Видимость = Не НовоеЗначениеВидимость;
	Элементы.ПанельНастроек.Ширина = ?(НовоеЗначениеВидимость, 23, 0);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

#Область ПараметрыИФильтры

&НаКлиенте
Процедура Подключаемый_ПараметрПриИзменении(Элемент)
	
	Стр = СтрокаОписанияПоИмениЭлемента(Элемент.Имя, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Стр.НестандартныйОбработчик Тогда
		ВыполнитьНестандартнуюОбработку(Стр.ПолучитьИдентификатор(), Элемент.Имя);
	Иначе
		Значение = ЗначениеПоляФильтра(Стр);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Стр.Поле, Значение);
	КонецЕсли; 
	ОтметитьНеактуальным();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрПриИзменении(Элемент)
	
	Стр = СтрокаОписанияПоИмениЭлемента(Элемент.Имя, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Стр.НестандартныйОбработчик Тогда
		ВыполнитьНестандартнуюОбработку(Стр.ПолучитьИдентификатор(), Элемент.Имя);
	ИначеЕсли Найти(Стр.Поле, "ДобавленноеПоле_")>0 Тогда
		Значение = ЗначениеПоляФильтра(Стр);
		НаложитьОтборПоДобавленномуПолю(Стр.Поле, Значение);
	Иначе
		Значение = ЗначениеПоляФильтра(Стр);
		Если Стр.ВидЭлемента="Поле" И НЕ ЗначениеЗаполнено(Значение) Тогда
			Возврат;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Стр.ДополнительныеПараметры, "СвязьПоПредставлению", Ложь) Тогда
			ИзменитьИспользованиеФильтра(Стр.Заголовок, Значение); 
		ИначеЕсли Стр.ВидЭлемента="Поле" Тогда
			ЗначениеОтбора = Новый СписокЗначений;
			ЗначениеОтбора.Добавить(Значение);
			УстановитьЗначениеФильтра(Стр.Поле, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, Ложь);
		ИначеЕсли Стр.ВидЭлемента="Тумблер" Тогда
			УстановитьЗначениеФильтра(Стр.Поле, Значение, ВидСравненияКомпоновкиДанных.Равно, Ложь, Истина);
		Иначе
			УстановитьЗначениеФильтра(Стр.Поле, Значение, ВидСравненияКомпоновкиДанных.Равно, Ложь);
		КонецЕсли; 
		Если Стр.ВидЭлемента="Поле" Тогда
			Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
				ЭтаФорма[ОписаниеРеквизита.Ключ] = Неопределено;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли; 
	ОтметитьНеактуальным();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Стр = СтрокаОписанияПоИмениЭлемента(Элемент.Имя, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если НЕ Стр.ВидЭлемента="Поле" Тогда
		Возврат;
	КонецЕсли; 
	Если Стр.ДополнительныеПараметры.Свойство("БыстрыйВыбор") Тогда
		Возврат;
	КонецЕсли;
	Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
		Значение = ЭтаФорма[ОписаниеРеквизита.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			ЭтаФорма[ОписаниеРеквизита.Ключ] = Неопределено;
		КонецЕсли; 
		Прервать;
	КонецЦикла; 
	Если Значение=Неопределено Тогда
		// Не выбран тип у многотипного фильтра
		Возврат;
	КонецЕсли;
	ИмяФормыВыбора = ОпределитьФормуВыбора(Значение, Элемент.ВыборГруппИЭлементов);
	Если ПустаяСтрока(ИмяФормыВыбора) Тогда
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура);
	Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Стр.Поле));
	ПараметрыВыбора = ОпределитьПараметрыВыбора(Поле);
	Если НЕ ПараметрыВыбора=Неопределено Тогда
		Если ТипЗнч(ПараметрыВыбора)=Тип("ФиксированныйМассив") Тогда
			МассивПараметров = Новый Массив(ПараметрыВыбора);
		ИначеЕсли ТипЗнч(ПараметрыВыбора)=Тип("ПараметрыВыбораКомпоновкиДанных") Тогда
			МассивПараметров = Новый Массив;
			Для каждого Параметр Из ПараметрыВыбора Цикл
				МассивПараметров.Добавить(Параметр);
			КонецЦикла; 
		Иначе
			МассивПараметров = ПараметрыВыбора;
		КонецЕсли;
		Если ТипЗнч(МассивПараметров)=Тип("Массив") Тогда
			Если ТипЗнч(Элемент)=Тип("ПолеФормы") И Элемент.Вид=ВидПоляФормы.ПолеВвода Тогда
				Для каждого Параметр Из Элемент.ПараметрыВыбора Цикл
					МассивПараметров.Добавить(Параметр);
				КонецЦикла; 
			КонецЕсли; 
			Для каждого Параметр Из МассивПараметров Цикл
				Если Найти(Параметр.Имя, "Отбор.")=0 Тогда
					Продолжить;
				КонецЕсли; 
				ИмяПоля = СтрЗаменить(Параметр.Имя, "Отбор.", "");
				Если Найти(ИмяПоля, ".")>0 Тогда
					Продолжить;
				КонецЕсли;
				ПараметрыОткрытия.Отбор.Вставить(ИмяПоля, Параметр.Значение);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Стр = СтрокаОписанияПоИмениЭлемента(Элемент.Имя, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Тип") Тогда 
		Если ВыбранноеЗначение=Тип("Строка") 
			ИЛИ ВыбранноеЗначение=Тип("Число") 
			ИЛИ ВыбранноеЗначение=Тип("Дата") 
			ИЛИ ВыбранноеЗначение=Тип("Булево") Тогда
			Возврат;
		КонецЕсли; 
		СтандартнаяОбработка = Ложь;
		Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
			ЭтаФорма[ОписаниеРеквизита.Ключ] = Новый(ВыбранноеЗначение);
			Прервать;
		КонецЦикла; 
		Подключаемый_ФильтрНачалоВыбора(Элемент, Неопределено, Истина);
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Стр.НестандартныйОбработчик Тогда
		ВыполнитьНестандартнуюОбработку(Стр.ПолучитьИдентификатор(), Элемент.Имя, ВыбранноеЗначение);
	ИначеЕсли Найти(Стр.Поле, "ДобавленноеПоле_")>0 Тогда
		НаложитьОтборПоДобавленномуПолю(Стр.Поле, ВыбранноеЗначение);
	Иначе
		ЗначениеОтбора = Новый СписокЗначений;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из ВыбранноеЗначение Цикл
				Если Не ЗначениеЗаполнено(ТекЭлемент) Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеОтбора.Добавить(ТекЭлемент);
			КонецЦикла;
		Иначе
			ЗначениеОтбора.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЗначениеОтбора) Тогда
			Возврат;
		КонецЕсли;
		УстановитьЗначениеФильтра(Стр.Поле, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, Ложь); 
		Если Стр.ВидЭлемента="Поле" Тогда
			Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
				ЭтаФорма[ОписаниеРеквизита.Ключ] = Неопределено;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	ОтметитьНеактуальным();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИерархияФильтраНажатие(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "_Иерархия", "");
	Стр = СтрокаОписанияПоИмениЭлемента(ИмяЭлемента, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементПоле = Элементы[ИмяЭлемента];
	Если ЭлементПоле.ВыборГруппИЭлементов=ГруппыИЭлементы.Элементы Тогда
		ЭлементПоле.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		ЭлементПоле.ПодсказкаВвода = Стр.Заголовок+НСтр("ru = ' (группа)'");
		Элемент.Подсказка = НСтр("ru = 'Используется выбор групп. Нажмите для выбора элементов.'");
		Элемент.Картинка = БиблиотекаКартинок.РежимВыбораГрупп;
	Иначе
		ЭлементПоле.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		ЭлементПоле.ПодсказкаВвода = Стр.Заголовок;
		Элемент.Подсказка = НСтр("ru = 'Используется выбор элементов. Нажмите для выбора групп.'");
		Элемент.Картинка = БиблиотекаКартинок.РежимВыбораЭлементов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьФильтрНажатие(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяКнопки = Элемент.Имя;
	Стр = СтрокаНаложенногоФильтра(ИмяКнопки);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	УдалитьФильтр(Стр.ПолучитьИдентификатор());
	ОтметитьНеактуальным();
	
КонецПроцедуры

#КонецОбласти 

#Область Группировки

&НаКлиенте
Процедура Подключаемый_ИерархияГруппировкиНажатие(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ПриИзмененииИерархииГруппировки(Элемент.Имя); 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПриИзмененииИерархииГруппировки(ИмяЭлемента)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(ИмяЭлемента, "_Иерархия", "");
	Стр = СтрокаОписанияПоИмениЭлемента(ИмяРеквизита, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
		ЭтотОбъект[ОписаниеРеквизита.Ключ] = Истина;
	КонецЦикла; 
	
	Если Стр.ДополнительныеПараметры.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Элементы Тогда
		Стр.ДополнительныеПараметры.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	ИначеЕсли Стр.ДополнительныеПараметры.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
		Стр.ДополнительныеПараметры.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
	ИначеЕсли Стр.ДополнительныеПараметры.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
		Стр.ДополнительныеПараметры.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	КонецЕсли;
	Элемент = Элементы[ИмяЭлемента];
	УстановитьПредставлениеКнопкиИерархииГруппировки(Элемент, Стр);
	
	Если Стр.НестандартныйОбработчик Тогда
		ВыполнитьНестандартнуюОбработку(Стр.ПолучитьИдентификатор(), ИмяРеквизита);
	Иначе
		ОбновитьГруппировкиИРеквизиты(Истина);
		УстановитьВидимостьИДоступность("ИзмененыГруппировки");
	КонецЕсли;
	
	ОтметитьНеактуальным();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГруппировкаПриИзменении(Элемент)
	
	ПриИзмененииГруппировкиРеквизита(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РеквизитПриИзменении(Элемент)
	
	ПриИзмененииГруппировкиРеквизита(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииГруппировкиРеквизита(ИмяЭлемента)
	
	Стр = СтрокаОписанияПоИмениЭлемента(ИмяЭлемента, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииГруппировкиРеквизитаСервер(Стр.ПолучитьИдентификатор(), ИмяЭлемента);
	
	ОтметитьНеактуальным();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииГруппировкиРеквизитаСервер(Идентификатор, ИмяЭлемента)
	
	Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
	Если НЕ ПроверитьСовместимостьДиаграммы(Стр.Поле) ИЛИ НЕ ПроверитьСовместимостьГруппировокКолонок(Стр.Поле) Тогда
		Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
			ЭтаФорма[ОписаниеРеквизита.Ключ] = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
		Значение = ЭтаФорма[ОписаниеРеквизита.Ключ];
		Прервать;
	КонецЦикла; 
	
	Если Стр.Тип=ТипРеквизит() Тогда
		СтрРодитель = Стр.ПолучитьРодителя();
		СтрРодитель.Заголовок = ЗаголовокГруппыПолей(СтрРодитель);
		ОбновитьЗаголовокЭлемента(СтрРодитель);
		ИмяГруппировки = СтрЗаменить(СтрРодитель.ИмяГруппы, "_Группа", "");
		Если Значение И НЕ ЭтаФорма[ИмяГруппировки] Тогда
			// Отображать группировку если выбрано хотя бы одно поле
			ЭтаФорма[ИмяГруппировки] = Истина;
		ИначеЕсли НЕ Значение Тогда
			// Скрыть группировку, если не выбраны поля
			Если НЕ ЕстьВыводимыеПоля(Стр.ПолучитьРодителя()) Тогда
				ЭтаФорма[ИмяГруппировки] = Ложь;
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли Стр.Тип=ТипГруппировка() Тогда
		Группа = Элементы[ИмяЭлемента+"_Реквизиты"];
		УстановитьПодчиненныеПоля(Стр, Значение);
	КонецЕсли; 
	
	Если Стр.НестандартныйОбработчик Тогда
		ВыполнитьНестандартнуюОбработку(Стр.ПолучитьИдентификатор(), ИмяЭлемента);
	Иначе
		Если Значение И ПолеГруппировкиКолонок=Стр.Поле Тогда
			ПолеГруппировкиКолонок = "";
			ОбновитьГруппировкиИРеквизиты();
		ИначеЕсли Значение И ПолеСравнения=Стр.Поле Тогда
			ПолеСравнения = "";
			ПоказыватьАбсолютноеИзменение = Ложь;
			ПоказыватьОтносительноеИзменение = Ложь;
			ОбновитьГруппировкиИРеквизиты();
		Иначе
			ОбновитьГруппировкиИРеквизиты(Истина);
		КонецЕсли; 
		УстановитьВидимостьИДоступность(?(Стр.Тип=ТипРеквизит(), "ИзмененыРеквизиты", "ИзмененыГруппировки"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СместитьВверх(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "СместитьВверх", "");
	Стр = СтрокаОписанияПоИмениЭлемента(ИмяРеквизита, ПоляНастроек);
	ИдентификаторСтроки = Стр.ПолучитьИдентификатор();
	
	Если Стр.Тип=ТипГруппировка() Тогда
		Если СместитьГруппировку(ИдентификаторСтроки, -1) Тогда
			ПриИзмененииГруппировкиРеквизита(ИмяРеквизита);
		КонецЕсли; 
	КонецЕсли; 
	
	Если Стр.Тип=ТипРеквизит() Тогда
		Если СместитьРеквизит(ИдентификаторСтроки, -1) Тогда
			ПриИзмененииГруппировкиРеквизита(ИмяРеквизита);
		КонецЕсли; 
	КонецЕсли;
	
	Если Стр.Тип=ТипПоказатель() ИЛИ Стр.Тип=ТипГруппаПоказателей() Тогда
		Если СместитьПоказатель(ИдентификаторСтроки, -1) Тогда
			ПриИзмененииПоказателя(ИмяРеквизита);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СместитьВниз(Команда)
	
	ИмяРеквизита = СтрЗаменить(Команда.Имя, "СместитьВниз", "");
	Стр = СтрокаОписанияПоИмениЭлемента(ИмяРеквизита, ПоляНастроек);
	ИдентификаторСтроки = Стр.ПолучитьИдентификатор();
	
	Если Стр.Тип=ТипГруппировка() Тогда
		Если СместитьГруппировку(ИдентификаторСтроки, 1) Тогда
			ПриИзмененииГруппировкиРеквизита(ИмяРеквизита);
		КонецЕсли; 
	КонецЕсли; 
	
	Если Стр.Тип=ТипРеквизит() Тогда
		Если СместитьРеквизит(ИдентификаторСтроки, 1) Тогда
			ПриИзмененииГруппировкиРеквизита(ИмяРеквизита);
		КонецЕсли; 
	КонецЕсли;
	
	Если Стр.Тип=ТипПоказатель() ИЛИ Стр.Тип=ТипГруппаПоказателей() Тогда
		Если СместитьПоказатель(ИдентификаторСтроки, 1) Тогда
			ПриИзмененииПоказателя(ИмяРеквизита);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область Показатели

&НаКлиенте
Процедура Подключаемый_ПоказательПриИзменении(Элемент)
	
	ПриИзмененииПоказателя(Элемент.Имя);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПриИзмененииПоказателя(ИмяЭлемента)
	
	Стр = СтрокаОписанияПоИмениЭлемента(ИмяЭлемента, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииПоказателяСервер(Стр.ПолучитьИдентификатор(), ИмяЭлемента);
	ОтметитьНеактуальным();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПоказателяСервер(Идентификатор, ИмяЭлемента)
	
	Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
	Если Стр.НестандартныйОбработчик Тогда
		ВыполнитьНестандартнуюОбработку(Стр.ПолучитьИдентификатор(), ИмяЭлемента);
	Иначе
		СтрРодитель = Стр.ПолучитьРодителя();
		Если НЕ СтрРодитель=Неопределено Тогда
			Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
				Значение = ЭтаФорма[ОписаниеРеквизита.Ключ];
				Прервать;
			КонецЦикла; 
			ИмяГруппировки = СтрЗаменить(СтрРодитель.ИмяГруппы, "_Группа", "");
			Если Значение И НЕ ЭтаФорма[ИмяГруппировки] Тогда
				// Отображать группировку если выбрано хотя бы одно поле
				ЭтаФорма[ИмяГруппировки] = Истина;
			ИначеЕсли НЕ Значение Тогда
				// Скрыть группировку, если не выбраны поля
				Если НЕ ЕстьВыводимыеПоля(Стр.ПолучитьРодителя()) Тогда
					ЭтаФорма[ИмяГруппировки] = Ложь;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		Если НЕ ПолеСравнения=Неопределено Тогда
			// Для режима сравнения можно использовать только один показатель
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Тип", ТипПоказатель());
			СтруктураОтбора.Вставить("Создан", Истина);
			Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора, Истина);
			Для каждого СтрПоказатель Из Строки Цикл
				Для каждого ОписаниеЭлемента Из СтрПоказатель.Реквизиты Цикл
					Если НЕ ИмяЭлемента=ОписаниеЭлемента.Ключ Тогда
						ЭтаФорма[ОписаниеЭлемента.Ключ] = Ложь;
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли;
		Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ИзменитьПоказатели();
		УстановитьВидимостьИДоступность("ИзмененыПоказатели");
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ГруппаПоказателейПриИзменении(Элемент)
	
	ПриИзмененииГруппыПоказателей(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииГруппыПоказателей(ИмяЭлемента)
	
	Стр = СтрокаОписанияПоИмениЭлемента(ИмяЭлемента, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииГруппыПоказателейСервер(Стр.ПолучитьИдентификатор(), ИмяЭлемента);
	ОтметитьНеактуальным();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииГруппыПоказателейСервер(Идентификатор, ИмяЭлемента)
	
	Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
	Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
		Значение = ЭтаФорма[ОписаниеРеквизита.Ключ];
		Прервать;
	КонецЦикла; 
	Для каждого СтрПоля Из Стр.ПолучитьЭлементы() Цикл
		Если СтрПоля.Тип=ТипПоказатель() Тогда
			Для каждого ОписаниеРеквизита Из СтрПоля.Реквизиты Цикл
				ЭтаФорма[ОписаниеРеквизита.Ключ] = Значение;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
	Если Стр.НестандартныйОбработчик Тогда
		ВыполнитьНестандартнуюОбработку(Стр.ПолучитьИдентификатор(), ИмяЭлемента);
	Иначе
		Если НЕ ПолеСравнения=Неопределено И КоличествоПоказателей()>1 Тогда
			ПолеСравнения = Неопределено;
		КонецЕсли;
		Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ИзменитьПоказатели();
		УстановитьВидимостьИДоступность("ИзмененыПоказатели");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?'");
		Обработчик = Новый ОписаниеОповещения("ОтправитьПоЭлектроннойПочтеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Иначе
		ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочтеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СформироватьНепосредственно();
		ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	
	Если НЕ ПроверитьЗаполнениеПараметров() Тогда
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	Сформировать();
	
КонецПроцедуры

&НаКлиенте
Процедура РаскрытьНаВесьЭкран(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", Заголовок);
	ПараметрыОткрытия.Вставить("Результат", АдресХранилищаРезультата());

	ОткрытьФорму("ОбщаяФорма.ФормаПредпросмотраОтчета", ПараметрыОткрытия, ЭтаФорма);
	ТекущийЭлемент = Элементы.СтрокаОтбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	Список = СписокБыстрыхГруппировок();
	Если НастройкиОтчета.РазрешитьДобавлениеПрочихГруппировокСтрок Тогда
		Список.Добавить(Неопределено, НСтр("ru = 'Прочие поля'"),, БиблиотекаКартинок.Выбрать);
	КонецЕсли;
	Если Список.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	Если Список.Количество()=1 Тогда
		ДобавитьСтрокуЗавершение(Список[0], Неопределено);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ДобавитьСтрокуЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, Список, Элементы.ДобавитьСтроку);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонку(Команда)
	
	Список = СписокДополнительныхКолонок();
	Если Список.Количество()=1 Тогда
		ДобавитьКолонкуЗавершение(Список[0], Неопределено);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ДобавитьКолонкуЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, Список, Элементы.ДобавитьКолонку);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФильтр(Команда)
	
	Список = СписокБыстрыхФильтров();
	Если НастройкиОтчета.РазрешитьДобавлениеПрочихФильтров Тогда
		Список.Добавить(Неопределено, НСтр("ru = 'Прочее'"),, БиблиотекаКартинок.Выбрать);
	КонецЕсли; 
	Если Список.Количество()=1 Тогда
		ДобавитьФильтрЗавершение(Список[0], Неопределено);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ДобавитьФильтрЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, Список, Элементы.ДобавитьФильтр);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьНастройки(Команда)
	
	ОбновитьДополнительныйСвойстваСКД();
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючОбъекта", НастройкиОтчета.ОтчетСсылка);
	ПараметрыОткрытия.Вставить("Вариант", Вариант);
	ПараметрыОткрытия.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
	ПараметрыОткрытия.Вставить("Настройки", Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыОткрытия.Вставить("КлючТекущихНастроек", НастройкиОтчета.КлючВарианта);
	Форма = ОткрытьФорму("ОбщаяФорма.СохранениеВариантаОтчетаУНФ", ПараметрыОткрытия, ЭтаФорма);
	Если Форма=Неопределено Тогда
		Состояние(НСтр("ru = 'Нет права редактирования настроек выбранного отчета'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	// Механизмы расширения
	Результат = Ложь;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработчикКоманды(ЭтотОбъект, Команда, Результат);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Результат);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция ТипФильтр()
	
	Возврат "Фильтр";	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипПараметр()
	
	Возврат "Параметр";	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипПоказатель()
	
	Возврат "Показатель";	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипГруппаПоказателей()
	
	Возврат "ГруппаПоказателей";	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипГруппировка()
	
	Возврат "Группировка";	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипРеквизит()
	
	Возврат "Реквизит";	
	
КонецФункции


#КонецОбласти 

#Область КонтекстныйВызовСервера

&НаКлиенте
// Исключение из стандартов разработки.
Функция ВыполнитьКонтекстныйВызовСервера(КлючОперации, ПараметрыОперации) Экспорт
	// Программный интерфейс для контекстного вызова сервера из клиентского общего модуля.
	
	Возврат КонтекстныйВызовСервера(КлючОперации, ПараметрыОперации);
	
КонецФункции

&НаСервере
Функция КонтекстныйВызовСервера(КлючОперации, ПараметрыОперации)
	РезультатВызова = Новый Структура;
	Если НастройкиОтчета.События.КонтекстныйВызовСервера Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.КонтекстныйВызовСервера(ЭтотОбъект, КлючОперации, ПараметрыОперации, РезультатВызова);
	КонецЕсли;
	Возврат РезультатВызова;
КонецФункции

#КонецОбласти 

#Область Период

&НаСервере
Процедура ПериодПриИзмененииСервер()
	
	ОбновитьПредставлениеПериода();
	ОбновитьОтображениеОтметокФильтров();
	ОбновитьЗаголовокОтчета();
	
	// Сохранение периода по умолчанию для варианта
	Если НЕ ПустаяСтрока(НастройкиОтчета.ИдентификаторВарианта) И НЕ НастройкиОтчета.РежимПериода="БезПериода" И НЕ НастройкиОтчета.Контекстный Тогда
		ХранилищеСистемныхНастроек.Сохранить("ПериодОтчета", НастройкиОтчета.ИдентификаторВарианта, Период);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеПериода()
	
	Если НЕ Элементы.ПредставлениеПериода.Видимость Тогда
		Возврат;
	КонецЕсли; 
	Если НастройкиОтчета.РежимПериода="ЗаПериод" Тогда
		Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) И НЕ ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
			ПредставлениеПериода = НСтр("ru = 'за все время'");
		ИначеЕсли Элементы.ПредставлениеПериода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет Тогда
			ПредставлениеПериода = НСтр("ru = 'за '")+НРег(ПредставлениеПериода(Отчет.Период.ДатаНачала, КонецДня(Период.ДатаОкончания)));
		Иначе
			ПредставлениеПериода = НРег(ПредставлениеПериода(НачалоДня(Период.ДатаНачала), ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), Период.ДатаОкончания)));
		КонецЕсли;
	ИначеЕсли НастройкиОтчета.РежимПериода="НаДату" Тогда
		Если НЕ ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
			ПредставлениеПериода = НСтр("ru = 'актуальные данные'");
		Иначе
			ПредставлениеПериода = Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ФормаИНастройки

&НаСервере
Процедура ОбновитьЗаголовокОтчета()
	
	Если Не ПустаяСтрока(НастройкиОтчета.НаименованиеВарианта) Тогда
		ЗаголовокОтчета = НастройкиОтчета.НаименованиеВарианта;
	Иначе
		ЗаголовокОтчета = НастройкиОтчета.Наименование;
	КонецЕсли;
	Если РежимРасшифровки Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " (" + НСтр("ru = 'Расшифровка'") + ")";
	КонецЕсли; 
	Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочте()
	
	ТабличныеДокументы = Новый СписокЗначений;
	ТабличныеДокументы.Добавить(ОтчетТабличныйДокумент, ОтчетНаименованиеТекущегоВарианта);
	
	ЗаголовокСохранения = СтрШаблон(НСтр("ru = 'Отправка отчета ""%1"" по почте'"), ОтчетНаименованиеТекущегоВарианта);
	
	ПараметрыОтправки = Новый Структура("Тема", ОтчетНаименованиеТекущегоВарианта);
	
	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	МодульРаботаСПочтовымиСообщениямиКлиент.ОтправитьТабличныеДокументы(ТабличныеДокументы, ЗаголовокСохранения, ПараметрыОтправки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность(Событие = "")
	
	ПолнаяИнициализация = ПустаяСтрока(Событие);
	ИзмененыГруппировки = (Событие="ИзмененыГруппировки" ИЛИ ПустаяСтрока(Событие));
	ИзмененыПоказатели = (Событие="ИзмененыПоказатели" ИЛИ ПустаяСтрока(Событие));
	ИзмененыПериодыСравнения = (Событие="ИзмененыПериодыСравнения" ИЛИ ПустаяСтрока(Событие));
	ИзмененРежимРедактирования = (Событие="ИзмененРежимРедактирования" ИЛИ ПустаяСтрока(Событие));
	ИзмененВидДиаграммы = (Событие="ИзмененВидДиаграммы" ИЛИ ПустаяСтрока(Событие));
	ИзмененаТочкаДиаграммы = (Событие="ИзмененаТочкаДиаграммы" ИЛИ ПустаяСтрока(Событие));
	
	Если ПолнаяИнициализация Тогда
		Элементы.Вариант.Видимость = (Элементы.Вариант.СписокВыбора.Количество()>1) И НЕ РежимРасшифровки И НастройкиОтчета.ИспользуетХранилищеВариантов;
		Элементы.ГруппаСтроки.Видимость = НастройкиОтчета.ПоказыватьГруппуСтрокиНаФормеОтчета;
		Элементы.ГруппаКолонки.Видимость = НастройкиОтчета.ПоказыватьГруппуКолонкиНаФормеОтчета;
		Элементы.ГруппаПоказателиЭлементыИКнопки.Видимость = НастройкиОтчета.ПоказыватьПоказателиНаФормеОтчета;
		Элементы.ГруппаКомандыПоказатели.Видимость = НастройкиОтчета.ПоказыватьПоказателиНаФормеОтчета;
		Элементы.ПолеГруппировкиКолонок.Видимость = НастройкиОтчета.ПоказыватьГруппировкиКолонокНаФормеОтчета И НастройкиОтчета.ПоказыватьГруппуКолонкиНаФормеОтчета;
		Элементы.ГруппаСравнение.Видимость = НастройкиОтчета.ИспользоватьСравнение И НастройкиОтчета.РежимПериода="ЗаПериод";
		Элементы.ЗаголовокПолеСравнения.Видимость = Элементы.ГруппаСравнение.Видимость;
		Элементы.ГруппаФильтры.Видимость = НастройкиОтчета.ПоказыватьГруппуФильтрыНаФормеОтчета;
		Элементы.ЗапомнитьНастройки.Видимость = НЕ НастройкиОтчета.Контекстный И НастройкиОтчета.ИспользуетХранилищеВариантов;
		Элементы.ДобавитьФильтр.Видимость = НастройкиОтчета.РазрешитьДобавлениеПрочихФильтров;
		
		// Диаграммы
		Элементы.ГруппаНастройкиДиаграмм.Видимость = НастройкиОтчета.ПоказыватьНастройкиДиаграммыНаФормеОтчета;
		Элементы.ГруппаДиаграммыСерииИТочки.Видимость = НЕ НастройкиОтчета.НестандартнаяДиаграмма;
		
		Элементы.ПредставлениеПериода.Видимость = НЕ (НастройкиОтчета.РежимПериода="БезПериода");
		Элементы.ПредставлениеПериода.Заголовок = ?(НастройкиОтчета.РежимПериода="НаДату", 
		НСтр("ru = 'На дату'"), 
		НСтр("ru = 'Период'"));
	КонецЕсли;
	
	Если ИзмененВидДиаграммы Тогда
		НастройкиОтчета.ВыводитьТолькоТочки = (ВидДиаграммы=ТипДиаграммы.Круговая ИЛИ ВидДиаграммы=ТипДиаграммы.КруговаяОбъемная);
		Элементы.ДиаграммаТочки.Видимость = ЗначениеЗаполнено(ВидДиаграммы);
		Элементы.ДиаграммаЗначения.Видимость = ЗначениеЗаполнено(ВидДиаграммы) И НастройкиОтчета.ИзменятьЗначенияДиаграммы;
		Если НЕ НастройкиОтчета.ВыводитьТолькоТочки И ДиаграммаТочки=ДиаграммаСерии Тогда
			ДиаграммаТочки = Неопределено;
		КонецЕсли;
		Элементы.ДекорацияВидДиаграммыКартинка.Картинка = КартинкаДиаграммы(ВидДиаграммы);
	КонецЕсли;
	
	Если ИзмененВидДиаграммы ИЛИ ИзмененаТочкаДиаграммы Тогда
		Элементы.ДиаграммаСерии.Видимость = ЗначениеЗаполнено(ВидДиаграммы) И НЕ НастройкиОтчета.ВыводитьТолькоТочки И ЗначениеЗаполнено(ДиаграммаТочки);
		Элементы.ДекорацияЗаголовокСерии.Видимость = Элементы.ДиаграммаСерии.Видимость;
	КонецЕсли; 
	
	Если ИзмененыПоказатели ИЛИ ИзмененыПериодыСравнения Тогда
		КоличествоПоказателей = КоличествоПоказателей();
		Элементы.ГруппаВариантыСравнения.Видимость = ((КоличествоПоказателей=1 ИЛИ НЕ НастройкиОтчета.ПоказыватьПоказателиНаФормеОтчета) И ТипЗнч(ПолеСравнения)=Тип("ПеречислениеСсылка.Периодичность") И НастройкиОтчета.ИспользоватьДополнительныеРежимыСравнения);
	КонецЕсли;
	
	Если ИзмененыПоказатели Тогда
		Элементы.ГруппаСравнение.Доступность = ((КоличествоПоказателей=1 ИЛИ НЕ НастройкиОтчета.ПоказыватьПоказателиНаФормеОтчета));
		Элементы.ЗаголовокПолеСравнения.Доступность = Элементы.ГруппаСравнение.Доступность;
		Элементы.РежимРедактированияКолонок.Видимость = (КоличествоПоказателей>1);
		Элементы.ДобавитьКолонку.Видимость = (КоличествоСкрытыхПоказателей()>0);
		Элементы.ОтступПоказатели.Видимость = НЕ Элементы.ДобавитьКолонку.Видимость;
	КонецЕсли;
	
	Если ИзмененыГруппировки Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", ТипГруппировка());
		СтруктураОтбора.Вставить("Создан", Истина);
		Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
		Элементы.РежимРедактированияСтрок.Видимость = (СтруктураОтбора.Количество()>1);
	КонецЕсли; 
	
	Если ИзмененРежимРедактирования Тогда
		ОбрабатываемыеТипы = Новый Массив;
		ОбрабатываемыеТипы.Добавить(ТипГруппировка());
		ОбрабатываемыеТипы.Добавить(ТипРеквизит());
		ОбрабатываемыеТипы.Добавить(ТипПоказатель());
		ОбрабатываемыеТипы.Добавить(ТипГруппаПоказателей());
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", ОбрабатываемыеТипы);
		Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора, Истина);
		Для каждого Стр Из Строки Цикл
			Если Стр.Тип=ТипГруппировка() ИЛИ Стр.Тип=ТипРеквизит() Тогда
				ГруппаКоманд = Элементы[СтрЗаменить(Стр.ИмяГруппы, "_Группа", "_ГруппаКоманды")];
				ГруппаКоманд.Видимость = РежимРедактированияСтрок;
			ИначеЕсли Стр.Тип=ТипПоказатель() ИЛИ Стр.Тип=ТипГруппаПоказателей() Тогда 
				ГруппаКоманд = Элементы[СтрЗаменить(Стр.ИмяГруппы, "_Группа", "_ГруппаКоманды")];
				ГруппаКоманд.Видимость = РежимРедактированияКолонок;
			КонецЕсли;
			ОбновитьЗаголовокЭлемента(Стр);
		КонецЦикла; 
		Элементы.РежимРедактированияСтрок.Картинка = ?(РежимРедактированияСтрок, БиблиотекаКартинок.РежимРедактированияСпискаЭлементовАктивно, БиблиотекаКартинок.РежимРедактированияСпискаЭлементов);
		Элементы.РежимРедактированияКолонок.Картинка = ?(РежимРедактированияКолонок, БиблиотекаКартинок.РежимРедактированияСпискаЭлементовАктивно, БиблиотекаКартинок.РежимРедактированияСпискаЭлементов);
	КонецЕсли;
	
	Если ПолнаяИнициализация Тогда
		
		Элементы.СтраницыНастройки.Видимость = 
		Элементы.Вариант.Видимость
		ИЛИ Элементы.ГруппаПараметрыЭлементы.ПодчиненныеЭлементы.Количество()>0
		ИЛИ Элементы.ГруппаСтрокиЭлементы.ПодчиненныеЭлементы.Количество()>0
		ИЛИ Элементы.ГруппаПоказателиЭлементы.ПодчиненныеЭлементы.Количество()>0
		ИЛИ Элементы.ГруппаДополнительныеНастройки.ПодчиненныеЭлементы.Количество()>0
		ИЛИ Элементы.ГруппаФильтрЭлементы.ПодчиненныеЭлементы.Количество()>0
		ИЛИ Элементы.ГруппаСравнение.Видимость
		ИЛИ Элементы.ПолеГруппировкиКолонок.Видимость;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокЭлемента(Стр)
	
	Если Стр.Тип<>ТипГруппировка() И Стр.Тип<>ТипРеквизит() И Стр.Тип<>ТипПоказатель() И Стр.Тип<>ТипГруппаПоказателей() Тогда
		Возврат;
	КонецЕсли;
	Если Стр.Тип=ТипРеквизит() Тогда
		ШиринаЗаголовка = 23-?(РежимРедактированияСтрок, 7, 0);
	ИначеЕсли Стр.Тип=ТипГруппировка() Тогда 
		ШиринаЗаголовка = 28-?(РежимРедактированияСтрок, 7, 0)-?(Стр.ДополнительныеПараметры.Свойство("ТипГруппировки"), 4, 0);
	ИначеЕсли Стр.Тип=ТипПоказатель() И НЕ Стр.ПолучитьРодителя()=Неопределено Тогда
		ШиринаЗаголовка = 23-?(РежимРедактированияКолонок, 7, 0);
	Иначе
		ШиринаЗаголовка = 28-?(РежимРедактированияКолонок, 7, 0);
	КонецЕсли; 
	Для каждого ОписаниеЭлемента Из Стр.Элементы Цикл
		Элемент = Элементы[ОписаниеЭлемента.Ключ];
		Если СтрДлина(Стр.Заголовок)<=ШиринаЗаголовка Тогда
			Элемент.Заголовок = Стр.Заголовок;
			Элемент.Подсказка = "";
		Иначе
			Элемент.Заголовок = Лев(Стр.Заголовок, ШиринаЗаголовка-2)+"...";
			Элемент.Подсказка = Стр.Заголовок;
		КонецЕсли; 
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
Функция КоличествоПоказателей()
	
	КоличествоПоказателей = 0;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипПоказатель());
	СтруктураОтбора.Вставить("Создан", Истина);
	Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора, Истина);
	Для каждого Стр Из Строки Цикл
		Для каждого ОписаниеЭлемента Из Стр.Элементы Цикл
			Если ЭтаФорма[ОписаниеЭлемента.Ключ] Тогда
				КоличествоПоказателей = КоличествоПоказателей+1;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;  
	Возврат КоличествоПоказателей;
	
КонецФункции

&НаСервере
Функция КоличествоСкрытыхПоказателей()
	
	Список = СписокДополнительныхКолонок();
	Возврат Список.Количество();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКомандыВыбораВариантов()
	
	Элементы.Вариант.СписокВыбора.Очистить();
	
	Для каждого Стр Из ТаблицаВариантов() Цикл
		Элементы.Вариант.СписокВыбора.Добавить(Стр.Ссылка, Стр.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаВариантов(ТолькоВидимые = Истина)
	
	Если ТипЗнч(НастройкиОтчета.ОтчетСсылка)=Тип("Строка") Тогда
		// Для внешних отчетов добавляются варианты из схемы
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("Ссылка");
		Результат.Колонки.Добавить("КлючВарианта");
		Результат.Колонки.Добавить("Наименование");
		Для Каждого ЭлементСписка Из НастройкиОтчета.ПредопределенныеВарианты Цикл
			СтрокаТаблицы = Результат.Добавить();
			СтрокаТаблицы.Наименование = ЭлементСписка.Представление;
			СтрокаТаблицы.КлючВарианта = ЭлементСписка.Значение;
		КонецЦикла;
	ИначеЕсли ТолькоВидимые Тогда
		// Заполнение списка вариантов на форме
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Отчет", НастройкиОтчета.ОтчетСсылка);
		Запрос.Параметры.Вставить("ОтключенныеПредопределенныеВарианты", ОтчетыУНФПовтИсп.ПредопределенныеВариантыНедоступныеПоФО());
		Запрос.Параметры.Вставить("ОтключенныеВарианты", ОтчетыУНФПовтИсп.ВариантыНедоступныеПоФО());
		Запрос.Параметры.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
		Запрос.Параметры.Вставить("Контекстный", НастройкиОтчета.Контекстный);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВариантыОтчетов.Ссылка КАК Ссылка,
		|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
		|	ВариантыОтчетов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
		|		ПО НастройкиВариантовОтчетовУНФ.Вариант = ВариантыОтчетов.Ссылка
		|ГДЕ
		|	ВариантыОтчетов.Отчет = &Отчет
		|	И НЕ ВариантыОтчетов.ПометкаУдаления
		|	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеПредопределенныеВарианты)
		|	И НЕ ВариантыОтчетов.Ссылка В (&ОтключенныеВарианты)
		|	И (ЕСТЬNULL(ВариантыОтчетов.ПредопределенныйВариант.Включен, ИСТИНА)
		|			ИЛИ &Контекстный)
		|	И (НЕ ВариантыОтчетов.ТолькоДляАвтора
		|			ИЛИ ВариантыОтчетов.Автор = &ТекущийПользователь
		|			ИЛИ ВариантыОтчетов.Автор = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВариантыДополнительныхОтчетов.Ссылка,
		|	ВариантыДополнительныхОтчетов.ИдентификаторКоманды,
		|	ВариантыДополнительныхОтчетов.Наименование
		|ИЗ
		|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
		|ГДЕ
		|	ВариантыДополнительныхОтчетов.Отчет = &Отчет
		|	И НЕ ВариантыДополнительныхОтчетов.ПометкаУдаления
		|	И НЕ ВариантыДополнительныхОтчетов.Ссылка В (&ОтключенныеВарианты)
		|	И (НЕ ВариантыДополнительныхОтчетов.ТолькоДляАвтора
		|			ИЛИ ВариантыДополнительныхОтчетов.Автор = &ТекущийПользователь
		|			ИЛИ ВариантыДополнительныхОтчетов.Автор = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование,
		|	КлючВарианта";
		Результат = Запрос.Выполнить().Выгрузить();
	Иначе
		// Для получения настроек вариантов используется выборка предопределенных
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Отчет", НастройкиОтчета.ОтчетСсылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВариантыОтчетов.Ссылка КАК Ссылка,
		|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
		|	ВариантыОтчетов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Отчет = &Отчет
		|	И НЕ ВариантыОтчетов.ПометкаУдаления
		|	И НЕ ВариантыОтчетов.Пользовательский
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВариантыДополнительныхОтчетов.Ссылка,
		|	ВариантыДополнительныхОтчетов.ИдентификаторКоманды,
		|	ВариантыДополнительныхОтчетов.Наименование
		|ИЗ
		|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
		|ГДЕ
		|	ВариантыДополнительныхОтчетов.Отчет = &Отчет
		|	И НЕ ВариантыДополнительныхОтчетов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование,
		|	КлючВарианта";
		Результат = Запрос.Выполнить().Выгрузить();
	КонецЕсли; 
	Результат.Свернуть("Ссылка, КлючВарианта, Наименование");
	Результат.Сортировать("Наименование Возр, КлючВарианта Возр");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастройкиПечатиСохранить()
	
	ЗаполнитьЗначенияСвойств(НастройкиОтчета.Печать, ОтчетТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура НастройкиПечатиВосстановить()
	
	ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать);
	
КонецПроцедуры

#КонецОбласти 

#Область ПроверкаСКД

&НаСервере
Процедура ПроверитьСовместомостьВарианта()
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	
	// Не более одной вложенной группировки для колонок таблицы
	КоличествоГруппировокКолонок = КоличествоГруппировокТаблицыРекурсивно(Отчет.КомпоновщикНастроек.Настройки.Структура);
	ЕстьСоставныеГруппировкиКолонок = ЕстьСоставныеГруппировкиКолонок(Отчет.КомпоновщикНастроек.Настройки.Структура);
	Если НЕ ДополнительныеСвойства.Свойство("Сравнение") И КоличествоГруппировокКолонок=2 Тогда
		// "Заводская" настройка
		КоличествоПоказателей = КоличествоПоказателейСКД();
		Если КоличествоПоказателей=1 Тогда
			// Можно использовать режим сравнения
			КоличествоГруппировокКолонок = КоличествоГруппировокКолонок-1;
		КонецЕсли; 
	ИначеЕсли ДополнительныеСвойства.Свойство("Сравнение") И ЗначениеЗаполнено(ДополнительныеСвойства.Сравнение) Тогда
		// Без учета группировки сравнения
		КоличествоГруппировокКолонок = КоличествоГруппировокКолонок-1;
	КонецЕсли; 
	Если КоличествоГруппировокКолонок>1 ИЛИ ЕстьСоставныеГруппировкиКолонок Тогда
		НастройкиОтчета.Вставить("ИспользоватьСравнение", Ложь);
		НастройкиОтчета.Вставить("ПоказыватьГруппировкиКолонокНаФормеОтчета", Ложь);
	КонецЕсли;
	
	// Отсутствуют вложенные настройки выбранных полей
	Если ЕстьВложенныеНастройкиВыбора() Тогда
		НастройкиОтчета.Вставить("ПоказыватьГруппуКолонкиНаФормеОтчета", Ложь);
	КонецЕсли;
	
	// Диаграммы
	Если НЕ ЭлементСтуктурыДиаграмма(Отчет.КомпоновщикНастроек.Настройки.Структура)=Неопределено Тогда
		НастройкиОтчета.Вставить("ЭтоДиаграмма", Истина);
	Иначе
		НастройкиОтчета.Вставить("ЭтоДиаграмма", Ложь);
	КонецЕсли; 
	НастройкиОтчета.Вставить("НестандартнаяДиаграмма", НестандартнаяДиаграмма(Отчет.КомпоновщикНастроек.Настройки));
	
	Если Отчет.КомпоновщикНастроек.Настройки.Структура.Количество()>1 Тогда
		КоличествоДиаграмм = 0;
		КоличествоГруппировок = 0;
		Для каждого ЭлементСтруктуры Из Отчет.КомпоновщикНастроек.Настройки.Структура Цикл
			Если НЕ ЭлементСтруктуры.Использование Тогда
				Продолжить;
			КонецЕсли; 
			Если ТипЗнч(ЭлементСтруктуры)=Тип("ТаблицаКомпоновкиДанных") ИЛИ ТипЗнч(ЭлементСтруктуры)=Тип("ГруппировкаКомпоновкиДанных") Тогда
				КоличествоГруппировок = КоличествоГруппировок+1;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("ДиаграммаКомпоновкиДанных") Тогда
				КоличествоДиаграмм = КоличествоДиаграмм+1;
			КонецЕсли; 
		КонецЦикла;
		Если КоличествоГруппировок>1 Тогда
			НастройкиОтчета.ПоказыватьГруппуСтрокиНаФормеОтчета = Ложь;
		КонецЕсли; 
		Если КоличествоДиаграмм>1 Тогда
			НастройкиОтчета.Вставить("НестандартнаяДиаграмма", Истина);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция КоличествоГруппировокТаблицыРекурсивно(Структура, Уровень = 0)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры)=Тип("ГруппировкаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементСтруктуры)=Тип("ТаблицаКомпоновкиДанных") Тогда
			Уровень = Макс(Уровень, КоличествоГруппировокТаблицыРекурсивно(ЭлементСтруктуры.Колонки));
		КонецЕсли;
		Если ТипЗнч(ЭлементСтруктуры)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Уровень = КоличествоГруппировокТаблицыРекурсивно(ЭлементСтруктуры.Структура, Уровень+1);
		КонецЕсли; 
	КонецЦикла; 
	Возврат Уровень;
	
КонецФункции

&НаСервере
Функция ЕстьВложенныеНастройкиВыбора(ЭлементыСтруктуры = Неопределено)
	
	Если ЭлементыСтруктуры=Неопределено Тогда
		ЭлементыСтруктуры = Отчет.КомпоновщикНастроек.Настройки.Структура;
	КонецЕсли; 
	
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если НЕ ТипЗнч(Элемент)=Тип("ДиаграммаКомпоновкиДанных") Тогда
			Для каждого ЭлементВыбора Из Элемент.Выбор.Элементы Цикл
				Если НЕ ТипЗнч(ЭлементВыбора)=Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
					Возврат Истина;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		Результат = Ложь;
		Если ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных")
			ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаДиаграммыКомпоновкиДанных")
			ИЛИ ТипЗнч(Элемент)=Тип("НастройкиКомпоновкиДанных") Тогда
			Результат = Результат ИЛИ ЕстьВложенныеНастройкиВыбора(Элемент.Структура);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			Результат = Результат ИЛИ ЕстьВложенныеНастройкиВыбора(Элемент.Строки);
			Результат = Результат ИЛИ ЕстьВложенныеНастройкиВыбора(Элемент.Колонки);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ДиаграммаКомпоновкиДанных") Тогда
			Результат = Результат ИЛИ ЕстьВложенныеНастройкиВыбора(Элемент.Серии);
			Результат = Результат ИЛИ ЕстьВложенныеНастройкиВыбора(Элемент.Точки);
		КонецЕсли; 
		Если Результат Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла; 
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементСтуктурыДиаграмма(ЭлементыСтруктуры, Создать = Ложь)
	
	Для каждого ЭлементСтруктуры Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(ЭлементСтруктуры)=Тип("ДиаграммаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры;
		КонецЕсли; 
	КонецЦикла;
	Если Создать Тогда
		ЭлементСтруктуры = ?(ЭлементыСтруктуры.Количество()>0, ЭлементыСтруктуры.Вставить(0, Тип("ДиаграммаКомпоновкиДанных")), ЭлементыСтруктуры.Добавить(Тип("ДиаграммаКомпоновкиДанных")));
		ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Возврат ЭлементСтруктуры;
	КонецЕсли; 
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЭлементСтуктурыГруппировкаТаблица(ЭлементыСтруктуры)
	
	Для каждого ЭлементСтруктуры Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(ЭлементСтруктуры)=Тип("ТаблицаКомпоновкиДанных") ИЛИ ТипЗнч(ЭлементСтруктуры)=Тип("ГруппировкаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры;
		КонецЕсли; 
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НестандартнаяДиаграмма(Настройки)
	
	НастройкиОтчета.Вставить("ВыводитьТолькоТочки", Ложь);
	
	НастройкиОтчета.Вставить("ИзменятьЗначенияДиаграммы", Истина);
	
	ЭлементДиаграмма = ЭлементСтуктурыДиаграмма(Настройки.Структура);
	Если ЭлементДиаграмма=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементДиаграмма.Выбор.Элементы.Количество()=1 И ТипЗнч(ЭлементДиаграмма.Выбор.Элементы[0])=Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
		НастройкиОтчета.Вставить("ИзменятьЗначенияДиаграммы", Ложь);
	Иначе
		ЭлементыВыбора = ЭлементДиаграмма.Выбор.Элементы;
		КоличествоЭлементовВыбора = 0;
		Для каждого ЭлементВыбора Из ЭлементыВыбора Цикл
			Если ТипЗнч(ЭлементВыбора)=Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ЭлементВыбора)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				НастройкиОтчета.Вставить("ИзменятьЗначенияДиаграммы", Ложь);
				Прервать;
			КонецЕсли;
			КоличествоЭлементовВыбора = КоличествоЭлементовВыбора+1;
			Если КоличествоЭлементовВыбора>1 Тогда
				НастройкиОтчета.Вставить("ИзменятьЗначенияДиаграммы", Ложь);
				Прервать;
			КонецЕсли;
			ДоступноеПоле = Настройки.ДоступныеПоляВыбора.НайтиПоле(ЭлементВыбора.Поле);
			Если ДоступноеПоле=Неопределено ИЛИ НЕ ДоступноеПоле.Ресурс Тогда
				НастройкиОтчета.Вставить("ИзменятьЗначенияДиаграммы", Ложь);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	Тип = ТипДиаграммыЭлементаСтруктуры(ЭлементДиаграмма);
	
	Если Тип=ТипДиаграммы.Круговая ИЛИ Тип=ТипДиаграммы.КруговаяОбъемная Тогда
		НастройкиОтчета.Вставить("ВыводитьТолькоТочки", Истина);
		Если ЭлементДиаграмма.Серии.Количество()>1 ИЛИ ЭлементДиаграмма.Точки.Количество()>1 Тогда
			Возврат Истина;
		КонецЕсли;
		Серии = ?(ЭлементДиаграмма.Серии.Количество()=0, ЭлементДиаграмма.Точки, ЭлементДиаграмма.Серии);
		Точки = ?(ЭлементДиаграмма.Точки.Количество()=0, ЭлементДиаграмма.Серии, ЭлементДиаграмма.Точки);
	ИначеЕсли ЭлементДиаграмма.Серии.Количество()>1 ИЛИ ЭлементДиаграмма.Точки.Количество()>1 Тогда
		Возврат Истина;
	Иначе
		Серии = ЭлементДиаграмма.Серии;
		Точки = ЭлементДиаграмма.Точки;
	КонецЕсли;
	
	Если Серии.Количество()=0 И Точки.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоляСерий = ?(Серии.Количество()=0, Неопределено, Серии[0].ПоляГруппировки.Элементы);
	ПоляТочек = ?(Точки.Количество()=0, Неопределено, Точки[0].ПоляГруппировки.Элементы);
	
	Если НЕ ПоляСерий=Неопределено Тогда
		Если НЕ ПоляСерий.Количество()=1 Тогда
			Возврат Истина;
		КонецЕсли; 
		Если НЕ ТипЗнч(ПоляСерий[0])=Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли; 
	Если НЕ ПоляТочек=Неопределено Тогда
		Если НЕ ПоляТочек.Количество()=1 Тогда
			Возврат Истина;
		КонецЕсли; 
		Если НЕ ТипЗнч(ПоляТочек[0])=Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти 

#Область ИнициализаияСКД

&НаСервере
Процедура МодифицироватьСхему(СхемаКомпоновкиДанных)
	
	// Служебные модификации схемы
	ОтчетыУНФ.СтандартизироватьСхему(СхемаКомпоновкиДанных);
	ОтчетыУНФ.ДобавитьВычисляемыеПоля(СхемаКомпоновкиДанных);
	
	// Запрет непосредственного использования поля ДинамическийПериод 
	Поле = ОтчетыУНФ.ПолеСхемы(СхемаКомпоновкиДанных, "ДинамическийПериод");
	Если Поле<>Неопределено И НЕ ДинамическийПериодВГруппировках() Тогда
		Ограничения = Поле.ОграничениеИспользования;
		Ограничения.Группировка = Истина;
		Ограничения.Поле = Истина;
		Ограничения.Порядок = Истина;
		Ограничения.Условие = Истина;
	КонецЕсли; 
	
	// УНФ
	Если Константы.УчетПоКомпании.Получить() Тогда
		Для каждого Набор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
			Поле = Набор.Поля.Найти("Организация");
			Если Поле=Неопределено ИЛИ НЕ Тип(Поле)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Ограничения = Поле.ОграничениеИспользования;
			Ограничения.Группировка = Истина;
			Ограничения.Порядок = Истина;
			Ограничения.Условие = Истина;
			Ограничения = Поле.ОграничениеИспользованияРеквизитов;
			Ограничения.Группировка = Истина;
			Ограничения.Порядок = Истина;
			Ограничения.Условие = Истина;
		КонецЦикла; 
	КонецЕсли; 
	// Конец УНФ
	
КонецПроцедуры

&НаСервере
Функция ДинамическийПериодВГруппировках(ЭлементыСтруктуры = Неопределено)
	
	Если ЭлементыСтруктуры=Неопределено Тогда
		ЭлементыСтруктуры = Отчет.КомпоновщикНастроек.Настройки.Структура;
	КонецЕсли; 
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") 
			ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Строка(Поле.Поле)="ДинамическийПериод" Тогда
					Возврат Истина;
				КонецЕсли; 
			КонецЦикла; 
		ИначеЕсли ТипЗнч(Элемент)=Тип("ДиаграммаКомпоновкиДанных") Тогда
			Если ДинамическийПериодВГруппировках(Элемент.Точки) Тогда
				Возврат Истина;
			КонецЕсли;
			Если ДинамическийПериодВГруппировках(Элемент.Серии) Тогда
				Возврат Истина;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			Если ДинамическийПериодВГруппировках(Элемент.Строки) Тогда
				Возврат Истина;
			КонецЕсли;
			Если ДинамическийПериодВГруппировках(Элемент.Колонки) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОпределитьПараметрыОтчетаПоУмолчанию()
	
	// Сброс значений фиксированных полей формы перед разбором СКД
	ПолеГруппировкиКолонок = "";
	ПолеСравнения = Неопределено;
	ПоказыватьАбсолютноеИзменение = Ложь;
	ПоказыватьОтносительноеИзменение = Ложь;
	РежимРедактированияКолонок = Ложь;
	РежимРедактированияСтрок = Ложь;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	ОтчетыУНФ.ИнициализироватьНастройкиОтчета(НастройкиОтчета);
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	Для каждого Свойство Из ДополнительныеСвойства Цикл
		НастройкиОтчета.Вставить(Свойство.Ключ, Свойство.Значение);
	КонецЦикла; 
	
	НастройкиВариантов = Новый Соответствие;
	Для Каждого Итератор Из ТаблицаВариантов(Ложь) Цикл
		НастройкиВариантов[Итератор.КлючВарианта] = Новый Структура;
		ОтчетыУНФ.ИнициализироватьНастройкиВарианта(НастройкиВариантов[Итератор.КлючВарианта]);
	КонецЦикла;
	Если НастройкиОтчета.ЭтоОтчетУНФ Тогда
		ОтчетОбъект.ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов);
	КонецЕсли;
	Ключ = НастройкиОтчета.КлючВарианта;
	Если НЕ НастройкиВариантов.Получить(Ключ)=Неопределено Тогда
		ОбъединитьНастройки(НастройкиОтчета, НастройкиВариантов[Ключ], Истина);
	Иначе
		СтруктураНастроек = Новый Структура;
		ОтчетыУНФ.ИнициализироватьНастройкиВарианта(СтруктураНастроек);
		ОбъединитьНастройки(НастройкиОтчета, СтруктураНастроек, Ложь);
	КонецЕсли;
	
	Если НЕ НастройкиОтчета.Свойство("РежимПериода") Тогда
		НастройкиОтчета.Вставить("РежимПериода", РежимОтображенияПериода(ОтчетОбъект));
	КонецЕсли; 
	Если НЕ НастройкиОтчета.Свойство("ИспользоватьСравнение") Тогда
		НастройкиОтчета.Вставить("ИспользоватьСравнение", ПризнакИспользованияСравнения());
	КонецЕсли; 
	Если НЕ НастройкиОтчета.Свойство("ИспользоватьПериодичность") Тогда
		НастройкиОтчета.Вставить("ИспользоватьПериодичность", ПризнакИспользованияПериодичности(ОтчетОбъект));
	КонецЕсли; 
	
	ЭлементыПорядка = Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы;
	НастройкиОтчета.Вставить("СортироватьПоПоказателям", ПорядокНеЗадан(ЭлементыПорядка));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыИОтборыРасшифровки(ОтчетОбъект)
	
	// Фиксированный отбор
	ПараметрыКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	ОтборыКД = Отчет.КомпоновщикНастроек.Настройки.Отбор;
	ПараметрыПериодов = ОпределитьПараметрыПериодовСКД(ОтчетОбъект);
	Обычный = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	
	// Восстановление периода из настроек
	Если НЕ ПустаяСтрока(НастройкиОтчета.ИдентификаторВарианта) И НЕ ПараметрыПериодов.Период=Неопределено И НастройкиОтчета.ПользовательскиеНастройки=Неопределено Тогда
		ПериодИзНастроек = ХранилищеСистемныхНастроек.Загрузить("ПериодОтчета", НастройкиОтчета.ИдентификаторВарианта);
		Если ПериодИзНастроек=Неопределено И НЕ ПустаяСтрока(НастройкиОтчета.КлючВарианта) Тогда
			ПериодИзНастроек = ХранилищеСистемныхНастроек.Загрузить("ПериодОтчета", Строка(НастройкиОтчета.КлючВарианта));
		КонецЕсли; 
		Если ТипЗнч(ПериодИзНастроек)=Тип("СтандартныйПериод") Тогда
			Если ТипЗнч(ПараметрыПериодов.Период.Значение)=Тип("СтандартныйПериод") Тогда
				ПараметрыПериодов.Период.Значение = ПериодИзНастроек;
				ПараметрыПериодов.Период.Использование = Истина;
			ИначеЕсли ТипЗнч(ПараметрыПериодов.Период.Значение)=Тип("СтандартнаяДатаНачала") Тогда
				ПараметрыПериодов.Период.Значение = Новый СтандартнаяДатаНачала(ПериодИзНастроек.ДатаОкончания);
				ПараметрыПериодов.Период.Использование = Истина;
			ИначеЕсли ТипЗнч(ПараметрыПериодов.Период.Значение)=Тип("Дата") Тогда
				ПараметрыПериодов.Период.Значение = ПериодИзНастроек.ДатаОкончания;
				ПараметрыПериодов.Период.Использование = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Для Каждого КлючИЗначение Из ФормаПараметры.Отбор Цикл
		Имя = КлючИЗначение.Ключ;
		Значение = КлючИЗначение.Значение;
		
		// Установка периода
		Если (Имя="НачалоПериода" ИЛИ Имя="КонецПериода") И НЕ ПараметрыПериодов.Период=Неопределено Тогда
			Если Имя="НачалоПериода" Тогда
				ПараметрыПериодов.Период.Значение.ДатаНачала = Значение;
			ИначеЕсли Имя="КонецПериода" Тогда
				ПараметрыПериодов.Период.Значение.ДатаОкончания = Значение;
			КонецЕсли;
			Если НЕ ПараметрыПериодов.Период.Использование Тогда
				ПараметрыПериодов.Период.Использование = Истина;
			КонецЕсли; 
			Продолжить;
		КонецЕсли; 
		
		Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
			Значение = Новый Массив(Значение);
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(Значение);
			Значение = Список;
		КонецЕсли;
		
		// Установка параметров
		ПараметрСхемы = ОтчетОбъект.СхемаКомпоновкиДанных.Параметры.Найти(Имя);
		ПараметрКД = ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Имя));
		Если НЕ ПараметрСхемы=Неопределено И ПараметрСхемы.ОграничениеИспользования Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ПараметрКД.ИдентификаторПользовательскойНастройки = "";
			ПараметрКД.Использование    = Истина;
			ПараметрКД.РежимОтображения = Обычный;
			ПараметрКД.Значение         = Значение;
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Значение)=Тип("Структура") Тогда
			ВидСравненияКД = Значение.ВидСравнения;
			Значение = Значение.Значение;
		Иначе
			Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
				ВидСравненияКД = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравненияКД = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		
		// Установка отборов
		ДоступноеПолеКД = ОтборыКД.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Имя));
		Если ТипЗнч(ДоступноеПолеКД) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборыКД, Имя, Значение, ВидСравненияКД, , Истина, Обычный, "");
			Продолжить;
		КонецЕсли;
		
		// Фильтр не установлен
		ТекстОшибки = НСтр("ru = 'Не удалось установить фиксированный отбор ""%1"".'");
		ВариантыОтчетов.ОшибкаПоВарианту(НастройкиОтчета.ВариантСсылка, ТекстОшибки, Имя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьКолонкиРасшифровки()
	
	// Колонки расшифровки
	Если ЗначениеЗаполнено(ФормаПараметры.Колонки) Тогда
		Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Если ТипЗнч(ФормаПараметры.Колонки)=Тип("Строка") Тогда
			МассивКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФормаПараметры.Колонки);
		Иначе
			МассивКолонок = ФормаПараметры.Колонки;
		КонецЕсли; 
		Для каждого ИмяКолонки Из МассивКолонок Цикл
			Колонка = Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Колонка.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
			Колонка.Использование = Истина;
		КонецЦикла;
		ФормаПараметры = Новый Структура(ФормаПараметры);
		ФормаПараметры.Вставить("Колонки", "");
		ФормаПараметры = Новый ФиксированнаяСтруктура(ФормаПараметры);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьПараметрыПериодовСКД(ОтчетОбъект)
	
	ПараметрПериод = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СтПериод");
	Если ПараметрПериод=Неопределено Тогда
		ПараметрПериод = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	КонецЕсли;
	ПараметрНачалоПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
	ПараметрКонецПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
	ПараметрДанныхПериодичность = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Периодичность");
	
	ПараметрСхемыКонецПериода = ОтчетОбъект.СхемаКомпоновкиДанных.Параметры.Найти("КонецПериода");
	ПараметрСхемыПериод = ОтчетОбъект.СхемаКомпоновкиДанных.Параметры.Найти("СтПериод");
	Если ПараметрСхемыПериод=Неопределено Тогда
		ПараметрСхемыПериод = ОтчетОбъект.СхемаКомпоновкиДанных.Параметры.Найти("Период");
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Период", ПараметрПериод);
	Результат.Вставить("НачалоПериода", ПараметрНачалоПериода);
	Результат.Вставить("КонецПериода", ПараметрКонецПериода);
	Результат.Вставить("Периодичность", ПараметрДанныхПериодичность);
	
	Результат.Вставить("КонецПериодаСКД", ПараметрСхемыКонецПериода);
	Результат.Вставить("ПериодСКД", ПараметрСхемыПериод);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПризнакИспользованияСравнения()
	
	Если Не НастройкиОтчета.ИспользоватьСравнение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПризнакИспользованияПериодичности(ОтчетОбъект)
	
	Если НЕ НастройкиОтчета.ИспользоватьСравнение Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если Не НастройкиОтчета.ИспользоватьСравнение Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если НЕ НастройкиОтчета.РежимПериода = "ЗаПериод" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПериодов = ОпределитьПараметрыПериодовСКД(ОтчетОбъект);
	
	Если ПараметрыПериодов.Периодичность=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция РежимОтображенияПериода(ОтчетОбъект)
	
	ПараметрыПериодов = ОпределитьПараметрыПериодовСКД(ОтчетОбъект);
	
	Если ПараметрыПериодов.Период=Неопределено Тогда
		Возврат "БезПериода";
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПериодов.Период.Значение)=Тип("СтандартныйПериод") Тогда
		
		Если ПараметрыПериодов.КонецПериода=Неопределено ИЛИ ПараметрыПериодов.КонецПериодаСКД=Неопределено Тогда
			Возврат "ЗаПериод";
		КонецЕсли;
		
		Если ПараметрыПериодов.КонецПериодаСКД.ВключатьВДоступныеПоля 
			И НЕ ПустаяСтрока(ПараметрыПериодов.КонецПериода.ИдентификаторПользовательскойНастройки) 
			И ПараметрыПериодов.КонецПериода.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда
			Возврат "НаДату";
		КонецЕсли;
		
		Возврат "ЗаПериод";
		
	ИначеЕсли ТипЗнч(ПараметрыПериодов.Период.Значение)=Тип("Дата") 
		ИЛИ ТипЗнч(ПараметрыПериодов.Период.Значение)=Тип("СтандартнаяДатаНачала") Тогда
		
		Если НЕ ПараметрыПериодов.ПериодСКД=Неопределено И НЕ ПараметрыПериодов.ПериодСКД.ОграничениеИспользования Тогда
			Возврат "НаДату";
		КонецЕсли; 
		
		Если ПараметрыПериодов.КонецПериода=Неопределено Тогда
			Возврат "БезПериода";
		КонецЕсли;
		
		Если НЕ ПараметрыПериодов.КонецПериодаСКД=Неопределено И НЕ ПараметрыПериодов.КонецПериодаСКД.ОграничениеИспользования Тогда
			Возврат "НаДату";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат "БезПериода";
	
КонецФункции

&НаСервере
Функция ПорядокНеЗадан(ЭлементыПорядка)
	
	Если ЭлементыПорядка.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если ЭлементыПорядка.Количество()=1 И ТипЗнч(ЭлементыПорядка[0])=Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти 

#Область ФоновыеЗадания

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	Если ФоновоеЗаданиеВыполнено() Тогда
		
		ОперацииПослеФормирования();
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет сформирован'"), , Заголовок);
		
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗапустить()
	
	ОбновитьДополнительныйСвойстваСКД();
	
	Если Отчет.КомпоновщикНастроек.Настройки.Структура.Количество()=0 Тогда
		ПоказатьОшибкиФормирования(НСтр("ru = 'Не выбрано ни одной группировки'"));
		Возврат Ложь;
	КонецЕсли; 
	
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	ФормированиеПриОткрытии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ФормированиеПриОткрытии", Ложь);
	Если Не ПроверитьЗаполнение() Тогда
		Если ФормированиеПриОткрытии Тогда
			ТекстОшибки = "";
			Сообщения = ПолучитьСообщенияПользователю(Истина);
			Для Каждого Сообщение Из Сообщения Цикл
				ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "", "", ";" + Символы.ПС + Символы.ПС) + Сообщение.Текст;
			КонецЦикла;
			ПоказатьОшибкиФормирования(ТекстОшибки);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ОтчетТабличныйДокумент.Очистить();
	ОбновитьСортировку();
	ОбновитьПараметрыПериода();
	
	// Запуск фонового задания
	ДопСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	
	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("СсылкаВарианта",              НастройкиОтчета.ВариантСсылка);
	ПараметрыФормированияОтчета.Вставить("СсылкаОтчета",                НастройкиОтчета.ОтчетСсылка);
	ПараметрыФормированияОтчета.Вставить("КлючВарианта",                КлючТекущегоВарианта);
	ПараметрыФормированияОтчета.Вставить("НастройкиКД",                 Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормированияОтчета.Вставить("ФиксированныеНастройкиКД",    Отчет.КомпоновщикНастроек.ФиксированныеНастройки);
	ПараметрыФормированияОтчета.Вставить("ПользовательскиеНастройкиКД", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	ИнформацияОбОшибке = Неопределено;
	Попытка
		Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
			ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		КонецЕсли; 
		РезультатФоновогоЗадания = УправлениеНебольшойФирмойСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"ВариантыОтчетов.СформироватьОтчетВФоне",
			ПараметрыФормированияОтчета,
			НСтр("ru = 'Варианты отчетов: Формирование отчета'"),
			,
			Ложь);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	ДопСвойства.Удалить("КлючВарианта");
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке);
		Возврат Ложь;
	КонецЕсли;
	
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
		ЗаданиеЗапущено = Ложь;
	Иначе
		ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
		ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		
		ЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	Возврат ЗаданиеЗапущено;
	
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеВыполнено()
	Попытка
		ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Исключение
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
КонецФункции

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат()
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	Успех = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатФормирования, "Успех");
	Если Успех <> Истина Тогда
		
		ПоказатьОшибкиФормирования(РезультатФормирования.ТекстОшибки);
		
	Иначе
		
		НастройкиПечатиСохранить();
		ОтчетТабличныйДокумент = РезультатФормирования.ТабличныйДокумент;
		НастройкиПечатиВосстановить();
		
		Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
			УдалитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
		КонецЕсли;
		ОтчетДанныеРасшифровки = ПоместитьВоВременноеХранилище(РезультатФормирования.Расшифровка, УникальныйИдентификатор);
		
		ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Ложь;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Картинка                       = Новый Картинка;
		ОтображениеСостояния.Текст                          = "";
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
КонецПроцедуры

#КонецОбласти 

#Область ФормированиеОтчета

&НаКлиенте
Процедура ОтметитьНеактуальным()
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = НСтр("ru = 'Отчет не сформирован. Нажмите ""Сформировать"" (F5) для получения отчета.'");
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ИдентификаторЗамера = Новый УникальныйИдентификатор;
	МодульОценкаПроизводительностиКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиентСервер");
	
	Если НастройкиОтчета.РежимПериода="ЗаПериод" Тогда
		КонПериода = ?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, ТекущаяДата());
		Если ДобавитьМесяц(Период.ДатаНачала,1)> КонПериода Тогда
			ШкалаПериода = "";
		ИначеЕсли ДобавитьМесяц(Период.ДатаНачала,3)> КонПериода Тогда
			ШкалаПериода = "Месяц";
		ИначеЕсли ДобавитьМесяц(Период.ДатаНачала,6)> КонПериода Тогда
			ШкалаПериода = "Квартал";
		Иначе
			ШкалаПериода = "Год";
		КонецЕсли;
		
		ИмяОперации = "Отчет "+НастройкиОтчета.Наименование+"."+НастройкиОтчета.ИДВариантаДляЗамера + ШкалаПериода;
	Иначе
		ИмяОперации = "Отчет "+НастройкиОтчета.Наименование+"."+НастройкиОтчета.ИДВариантаДляЗамера;
	КонецЕсли; 
	
	МодульОценкаПроизводительностиКлиентСервер.НачатьРучнойЗамерВремени(
		ИмяОперации + " (формирование)",
		ИдентификаторЗамера);
	// СтандартныеПодсистемы.ОценкаПроизводительности	
	
	Если НастройкиОтчета.РежимПериода="ЗаПериод" Тогда
		Если ЗначениеЗаполнено(Период.ДатаНачала) Тогда
			ПредставлениеДляЗаголовка = НСтр("ru = 'за '")+ПредставлениеПериода;
		Иначе
			ПредставлениеДляЗаголовка = ПредставлениеПериода;
		КонецЕсли; 
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Заголовок", НастройкиОтчета.НаименованиеВарианта+" "+ПредставлениеДляЗаголовка);
	ИначеЕсли НастройкиОтчета.РежимПериода="НаДату" Тогда
		Если НЕ ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
			ПредставлениеДляЗаголовка = НСтр("ru = 'текущий момент'");
		Иначе
			ПредставлениеДляЗаголовка = ПредставлениеПериода;
		КонецЕсли;
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Заголовок", НастройкиОтчета.НаименованиеВарианта+НСтр("ru = ' на '")+ПредставлениеДляЗаголовка);
	Иначе
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Заголовок", НастройкиОтчета.НаименованиеВарианта);
	КонецЕсли;
	
	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Новый ПользовательскиеНастройкиКомпоновкиДанных);
	
	Если НастройкиОтчета.ФормироватьНепосредственно Тогда
		СформироватьНепосредственно();
		ОперацииПослеФормирования();
	Иначе
		ТребуетсяОбработчик = ФоновоеЗаданиеЗапустить();
		Если ТребуетсяОбработчик Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
		Иначе
			ОперацииПослеФормирования();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПослеФормирования()
	
	// Сворачивание группировок отчета
	Если НЕ РежимРасшифровки Тогда
		СвернутьГруппировки(); 
	КонецЕсли; 

	// СтандартныеПодсистемы.ОценкаПроизводительности
	МодульОценкаПроизводительностиКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиентСервер");
	МодульОценкаПроизводительностиКлиентСервер.ЗакончитьРучнойЗамерВремени(ИдентификаторЗамера);
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьГруппировки()
	
	КоличествоГруппировок = КоличествоГруппировокРекурсивно(Отчет.КомпоновщикНастроек.Настройки.Структура);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипГруппировка());
	Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
	РазвернутьГруппировок = 0;
	Для каждого Стр Из Строки Цикл
		Если Стр.ДополнительныеПараметры.Свойство("Развернуть") И Стр.ДополнительныеПараметры.Развернуть Тогда
			РазвернутьГруппировок = РазвернутьГруппировок+1;
		Иначе
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НастройкиОтчета.Свойство("УровеньГруппировкиСтрок") И ЗначениеЗаполнено(НастройкиОтчета.УровеньГруппировкиСтрок) Тогда
		КоличествоИтераций = КоличествоГруппировок.Строк-НастройкиОтчета.УровеньГруппировкиСтрок+1;
	Иначе
		КоличествоИтераций = КоличествоГруппировок.Строк-РазвернутьГруппировок;
	КонецЕсли; 
	Для ии = 1 По КоличествоИтераций Цикл
		ОтчетТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(КоличествоГруппировок.Строк-ии);
	КонецЦикла; 
	Если НастройкиОтчета.Свойство("УровеньГруппировкиКолонок") И ЗначениеЗаполнено(НастройкиОтчета.УровеньГруппировкиКолонок) Тогда
		КоличествоИтераций = КоличествоГруппировок.Колонок-НастройкиОтчета.УровеньГруппировкиКолонок+1;
	Иначе
		КоличествоИтераций = КоличествоГруппировок.Колонок;
	КонецЕсли; 
	Для ии = 1 По КоличествоИтераций Цикл
		ОтчетТабличныйДокумент.ПоказатьУровеньГруппировокКолонок(КоличествоГруппировок.Колонок-ии);
	КонецЦикла;
	
	Если НЕ НастройкиОтчета.Свойство("ФиксироватьКолонки") ИЛИ НЕ ЗначениеЗаполнено(НастройкиОтчета.ФиксироватьКолонки) Тогда
		ОтчетТабличныйДокумент.ФиксацияСлева = 0;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоГруппировокРекурсивно(Элементы, Результат = Неопределено, ТекущийУровень = 0, Строки = Истина)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура("Строк, Колонок", 0, 0);
	КонецЕсли;
	
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			КоличествоГруппировокРекурсивно(Элемент.Строки, Результат, ТекущийУровень, Истина);
			КоличествоГруппировокРекурсивно(Элемент.Колонки, Результат, ТекущийУровень, Ложь);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") Тогда
			Если Элемент.Структура.Количество()>0 Тогда
				КоличествоГруппировокРекурсивно(Элемент.Структура, Результат, ТекущийУровень+1, Строки);
			Иначе
				Если Строки И Результат.Строк<ТекущийУровень Тогда
					Результат.Строк = ТекущийУровень+1;
				ИначеЕсли НЕ Строки И Результат.Колонок<ТекущийУровень Тогда
					Результат.Колонок = ТекущийУровень+1;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьНепосредственно()
	
	ОбновитьДополнительныйСвойстваСКД();
	
	Если Отчет.КомпоновщикНастроек.Настройки.Структура.Количество()=0 Тогда
		ПоказатьОшибкиФормирования(НСтр("ru = 'Не выбрано ни одной группировки'"));
		Возврат;
	КонецЕсли; 
	
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	// Формирование отчета.
	ДопСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	НастройкиПечатиСохранить();
	ИнформацияОбОшибке = Неопределено;
	
	Попытка
		
		ОтчетТабличныйДокумент.Очистить();
		ОбновитьСортировку();
		ОбновитьПараметрыПериода();
		СкомпоноватьРезультат(РежимКомпоновкиРезультата.Фоновый);
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	
	ДопСвойства.Удалить("КлючВарианта");
	НастройкиПечатиВосстановить();
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = СтандартныеПодсистемыКлиентСервер.ИсходнаяПричинаОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при формировании:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ОписаниеОшибки;
	
	Если Не ПустаяСтрока(ПодробноеПредставлениеОшибки) Тогда
		ВариантыОтчетов.ПредупреждениеПоВарианту(НастройкиОтчета.ВариантСсылка, ПодробноеПредставлениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьСтруктуруРекурсивно(Источник, Приемник, СхемаКомпоновкиДанных, СкрытьСравнение = Ложь)
	
	Для каждого ЭлементИсточник Из Источник Цикл
		Если ТипЗнч(ЭлементИсточник)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(ЭлементИсточник)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Если ТипЗнч(Приемник)=Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
				ЭлементПриемник = Приемник.Добавить();
			Иначе
				ЭлементПриемник = Приемник.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли; 
			ЭлементПриемник.Использование = ЭлементИсточник.Использование;
			СкопироватьВыборРекурсивно(ЭлементИсточник.Выбор.Элементы, ЭлементПриемник.Выбор.Элементы);
			Для каждого ПолеИсточник Из ЭлементИсточник.ПоляГруппировки.Элементы Цикл
				ПолеПриемник = ЭлементПриемник.ПоляГруппировки.Элементы.Добавить(ТипЗнч(ПолеИсточник));
				Если ТипЗнч(ПолеИсточник)=Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
					ПолеПриемник.Использование = ПолеИсточник.Использование;
					ПолеПриемник.Поле = ПолеИсточник.Поле;
					ПолеПриемник.ТипГруппировки = ПолеИсточник.ТипГруппировки;
					ПолеПриемник.ТипДополнения = ПолеИсточник.ТипДополнения;
					ПолеПриемник.НачалоПериода = ПолеИсточник.НачалоПериода;
					ПолеПриемник.КонецПериода = ПолеИсточник.КонецПериода;
					ПолеСхемы = ОтчетыУНФ.ПолеСхемы(СхемаКомпоновкиДанных, ПолеИсточник.Поле);
					Если ТипЗнч(ПолеСхемы)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И ПолеСхемы.Роль.НомерПериода>0 Тогда
						ЭлементПриемник.Использование = НЕ СкрытьСравнение;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			Для каждого ПорядокИсточник Из ЭлементИсточник.Порядок.Элементы Цикл
				ПорядокПриемник = ЭлементПриемник.Порядок.Элементы.Добавить(ТипЗнч(ПорядокИсточник));
				Если ТипЗнч(ПорядокИсточник)=Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
					ПорядокПриемник.Использование = ПорядокИсточник.Использование;
					ПорядокПриемник.Поле = ПорядокИсточник.Поле;
					ПорядокПриемник.ТипУпорядочивания = ПорядокИсточник.ТипУпорядочивания;
				КонецЕсли; 
			КонецЦикла; 
			СкопироватьСтруктуруРекурсивно(ЭлементИсточник.Структура, ЭлементПриемник.Структура, СхемаКомпоновкиДанных, СкрытьСравнение);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьВыборРекурсивно(Источник, Приемник)
	
	Для каждого ИсточникВыбор Из Источник Цикл
		ПриемникВыбор = Приемник.Добавить(ТипЗнч(ИсточникВыбор));
		ПриемникВыбор.Использование = ИсточникВыбор.Использование;
		Если ТипЗнч(ИсточникВыбор)=Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			ПриемникВыбор.Поле = ИсточникВыбор.Поле;
			ПриемникВыбор.Заголовок = ИсточникВыбор.Заголовок;
		ИначеЕсли ТипЗнч(ИсточникВыбор)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьВыборРекурсивно(ИсточникВыбор.Элементы, ПриемникВыбор.Элементы);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСортировку()
	
	// Сортировка по дате периодических группировок
	СхемаКД = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	ОбновитьСортировкуРекурсивно(Отчет.КомпоновщикНастроек.Настройки.Структура, СхемаКД);
	
	// Автоматическая сортировка по показателям
	Если НЕ НастройкиОтчета.Свойство("СортироватьПоПоказателям") 
		ИЛИ НЕ НастройкиОтчета.СортироватьПоПоказателям Тогда
		Возврат;
	КонецЕсли; 
	ЭлементыПорядка = Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы;
	КоличествоЭлементов = ЭлементыПорядка.Количество();
	Для ии = 1 По КоличествоЭлементов Цикл
		ЭлементПорядка = ЭлементыПорядка[КоличествоЭлементов-ии];
		Если НЕ ТипЗнч(ЭлементПорядка)=Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
			ЭлементыПорядка.Удалить(ЭлементПорядка);
		КонецЕсли; 
	КонецЦикла; 
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипПоказатель());
	СтруктураОтбора.Вставить("Создан", Истина);
	Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора, Истина);
	ИмяПоказателя = "";
	Для каждого Стр Из Строки Цикл
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			Если ЭтаФорма[Реквизит.Ключ] Тогда
				ИмяПоказателя = Стр.Поле;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если НЕ ПустаяСтрока(ИмяПоказателя) Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Если НЕ ПустаяСтрока(ИмяПоказателя) Тогда
		ЭлементПорядка = ЭлементыПорядка.Вставить(0, Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Использование = Истина;
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяПоказателя);
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	КонецЕсли;
	Если ЭлементыПорядка.Количество()=0 Тогда
		ЭлементыПорядка.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыПериода()
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	ПараметрПериод = Настройки.ПараметрыДанных.Элементы.Найти("СтПериод");
	Если ПараметрПериод=Неопределено Тогда
		ПараметрПериод = Настройки.ПараметрыДанных.Элементы.Найти("Период");
	КонецЕсли;
	Если НЕ ПараметрПериод=Неопределено Тогда
		Если ТипЗнч(ПараметрПериод.Значение)=Тип("СтандартныйПериод") Тогда
			ПараметрПериод.Значение = Период;
			Если НастройкиОтчета.РежимПериода="НаДату" И ПараметрПериод.Значение.ДатаНачала>ПараметрПериод.Значение.ДатаОкончания Тогда
				ПараметрПериод.Значение.ДатаНачала = '0001-01-01';
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрПериод.Значение)=Тип("СтандартнаяДатаНачала") Тогда
			ПараметрПериод.Значение.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
			ПараметрПериод.Значение.Дата = Период.ДатаОкончания;
		ИначеЕсли ТипЗнч(ПараметрПериод.Значение)=Тип("Дата") Тогда
			ПараметрПериод.Значение = Период.ДатаОкончания;
		КонецЕсли; 
		ПараметрПериод.Использование = Истина;
	КонецЕсли;
	ПараметрКонецПериода = Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
	Если НЕ ПараметрКонецПериода=Неопределено Тогда
		ПараметрКонецПериода.Значение = Период.ДатаОкончания;
		ПараметрКонецПериода.Использование = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСортировкуРекурсивно(Структура, СхемаКД, ЭлементРодитель = Неопределено, ДополнениеУстановлено = Ложь)
	
	Для каждого Элемент Из Структура Цикл
		
		Если ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") 
			ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			
			// Для вложенных элементов структуры всегда переопределяем настройки порядка
			Элемент.Порядок.Элементы.Очистить();
			
			// Сортируем по периодическим полям
			СписокПолей = Новый СписокЗначений;
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если НЕ Поле.Использование Тогда
					Продолжить;
				КонецЕсли;
				ИмяПоля = Строка(Поле.Поле);
				Если НЕ ИмяПоля="ДинамическийПериод" И НЕ ИмяПоля="МесяцГода" И НЕ ИмяПоля="ДеньМесяцГода" И НЕ ИмяПоля="НеделяГода" Тогда
					// Динамический период всегда сортируем, остальные поля проверяем на периодичность
					ПолеСхемы = ОтчетыУНФ.ПолеСхемы(СхемаКД, Поле.Поле);
					Если НЕ ТипЗнч(ПолеСхемы)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
						Продолжить;
					КонецЕсли; 
					Если ПолеСхемы.Роль.НомерПериода=0 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли; 
				ЭлементПорядка = Элемент.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				ЭлементПорядка.Использование = Истина;
				ЭлементПорядка.Поле = Поле.Поле;
				ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			КонецЦикла;
			Если НЕ ДополнениеУстановлено Тогда
				ДополнениеУстановлено = ОбновитьДополнениеГруппировки(Элемент, СхемаКД); 
			КонецЕсли; 
			
			// Для диаграмм выполняем сортировку по значениям показателей
			Если ТипЗнч(Элемент)=Тип("ГруппировкаДиаграммыКомпоновкиДанных") И ТипЗнч(ЭлементРодитель)=Тип("ДиаграммаКомпоновкиДанных") Тогда
				Тип = ТипДиаграммыЭлементаСтруктуры(ЭлементРодитель);
				Для каждого ЭлементВыбор Из ЭлементРодитель.Выбор.Элементы Цикл
					Если ТипЗнч(ЭлементВыбор)=Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
						Продолжить;
					КонецЕсли; 
					ЭлементПорядка = Элемент.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
					ЭлементПорядка.Использование = Истина;
					ЭлементПорядка.Поле = ЭлементВыбор.Поле;
					Если Тип=ТипДиаграммы.ГистограммаГоризонтальная 
						ИЛИ Тип=ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная 
						ИЛИ Тип=ТипДиаграммы.ГистограммаНормированнаяГоризонтальная 
						ИЛИ Тип=ТипДиаграммы.ГистограммаНормированнаяГоризонтальнаяОбъемная 
						ИЛИ Тип=ТипДиаграммы.ГистограммаСНакоплениемГоризонтальная 
						ИЛИ Тип=ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная Тогда
						ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
					Иначе
						ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			
			ЭлементПорядка = Элемент.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			ЭлементПорядка.Использование = Истина;
			ОбновитьСортировкуРекурсивно(Элемент.Структура, СхемаКД, Элемент, ДополнениеУстановлено);
			
		ИначеЕсли ТипЗнч(Элемент)=Тип("ДиаграммаКомпоновкиДанных") Тогда
			
			ОбновитьСортировкуРекурсивно(Элемент.Серии, СхемаКД, Элемент, ДополнениеУстановлено);
			ОбновитьСортировкуРекурсивно(Элемент.Точки, СхемаКД, Элемент, ДополнениеУстановлено);
			
		ИначеЕсли ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			
			ОбновитьСортировкуРекурсивно(Элемент.Строки, СхемаКД, Элемент, ДополнениеУстановлено);
			ОбновитьСортировкуРекурсивно(Элемент.Колонки, СхемаКД, Элемент, ДополнениеУстановлено);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыСозданияРеквизитовНастроек

&НаСервере
Процедура ОбновитьНастройкиНаФорме()
	
	Отчет.КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	ВосставноитьДинамическиеПериодыРекурсивно(Отчет.КомпоновщикНастроек.Настройки.Структура);
	ИсправитьНастройкиВарианта();
	Элементы.ПолеГруппировкиКолонок.СписокВыбора.Очистить();
	Элементы.ПолеСравнения.СписокВыбора.Очистить();
	
	ОпределитьПараметрыОтчетаПоУмолчанию();
	ПроверитьСовместомостьВарианта();
	ОбновитьПериодНаФорме();
	
	ПоляНастроек.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьОписанияПараметров();
	
	ЗаполнитьВариантыСравнения();
	ЗаполнитьВариантыГруппировкиКолонок();
	
	Если НастройкиОтчета.ПоказыватьНастройкиДиаграммыНаФормеОтчета Тогда
		ЗаполнитьВариантыСерийТочекЗначений();
		ОбновитьНастройкиДиаграммыНаФорме();
	КонецЕсли;
	Если НастройкиОтчета.ПоказыватьГруппуКолонкиНаФормеОтчета Тогда
		ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
		ДополнительныеСвойства.Свойство("ПоказыватьАбсолютноеИзменение", ПоказыватьАбсолютноеИзменение);
		ДополнительныеСвойства.Свойство("ПоказыватьОтносительноеИзменение", ПоказыватьОтносительноеИзменение);
		ЗаполнитьОписанияПоказателей();
	КонецЕсли; 
	Если НастройкиОтчета.ПоказыватьГруппуСтрокиНаФормеОтчета ИЛИ НастройкиОтчета.ПоказыватьГруппуКолонкиНаФормеОтчета Тогда
		ЗаполнитьОписанияГруппировок();
	КонецЕсли; 
	
	Если НастройкиОтчета.ПоказыватьГруппуФильтрыНаФормеОтчета Тогда
		ЗаполнитьОписанияФильтров();
	КонецЕсли;
	
	ВнестиИзмененияВРеквизитыНаФорме();
	УстановитьВидимостьИДоступность();
	
	Если НастройкиОтчета.ПрограммноеИзменениеФормыОтчета Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ОбновитьНастройкиНаФорме(НастройкиОтчета, Отчет.КомпоновщикНастроек.Настройки, ЭтаФорма);
	КонецЕсли;
	
	ОбновитьПредставлениеПериода();
	ОбновитьОтображениеОтметокФильтров();
	ОбновитьЗаголовокОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиДиаграммыНаФорме()
	
	ДиаграммаСерии = Неопределено;
	ДиаграммаТочки = Неопределено;
	ДиаграммаЗначения = Неопределено;
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	ЭлементДиаграмма = ЭлементСтуктурыДиаграмма(Настройки.Структура);
	Если ЭлементДиаграмма=Неопределено Тогда
		ВидДиаграммы = Неопределено;
		Возврат;
	КонецЕсли; 
	
	ВидДиаграммы = ТипДиаграммыЭлементаСтруктуры(ЭлементДиаграмма);
	
	Если НастройкиОтчета.ИзменятьЗначенияДиаграммы Тогда
		Если ЭлементДиаграмма.Выбор.Элементы.Количество()=1 И ТипЗнч(ЭлементДиаграмма.Выбор.Элементы[0])=Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			ЭлементыВыбора = Настройки.Выбор.Элементы;
		Иначе
			ЭлементыВыбора = ЭлементДиаграмма.Выбор.Элементы;
		КонецЕсли;
		Для каждого ЭлементВыбора Из ЭлементыВыбора Цикл
			Если ТипЗнч(ЭлементВыбора)=Тип("АвтоВыбранноеПолеКомпоновкиДанных") ИЛИ ТипЗнч(ЭлементВыбора)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			ДоступноеПоле = Настройки.ДоступныеПоляВыбора.НайтиПоле(ЭлементВыбора.Поле);
			Если ДоступноеПоле=Неопределено ИЛИ НЕ ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			ДиаграммаЗначения = Строка(ЭлементВыбора.Поле);
		КонецЦикла; 
	КонецЕсли; 
	
	Если НастройкиОтчета.НестандартнаяДиаграмма Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяСерии = ?(ЭлементДиаграмма.Серии.Количество()=0, "", Строка(ЭлементДиаграмма.Серии[0].ПоляГруппировки.Элементы[0].Поле));
	ИмяТочки = ?(ЭлементДиаграмма.Точки.Количество()=0, "", Строка(ЭлементДиаграмма.Точки[0].ПоляГруппировки.Элементы[0].Поле));
	Если ИмяТочки="ДинамическийПериод" Тогда
		ПараметрДанныхПериодичность = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Периодичность"));
		Если ПараметрДанныхПериодичность=Неопределено ИЛИ НЕ ПараметрДанныхПериодичность.Использование ИЛИ НЕ ЗначениеЗаполнено(ПараметрДанныхПериодичность.Значение) Тогда
			ИмяТочки = УправлениеНебольшойФирмойОтчеты.ПолучитьЗначениеПериодичности(Период.ДатаНачала, Период.ДатаОкончания);
		Иначе
			ИмяТочки = ПараметрДанныхПериодичность.Значение;
		КонецЕсли; 
	КонецЕсли;
	Если ПустаяСтрока(ИмяТочки) И НЕ ПустаяСтрока(ИмяСерии) Тогда
		ИмяТочки = ИмяСерии;
		ИмяСерии = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяТочки) Тогда
		Если ДоступныеТочки.НайтиПоЗначению(ИмяТочки)=Неопределено Тогда
			Если ТипЗнч(ИмяТочки)=Тип("ПеречислениеСсылка.Периодичность") Тогда
			    ДоступныеТочки.Вставить(ДоступныеТочки.Количество()-1, ИмяТочки, Строка(ИмяТочки));
				Элементы.ДиаграммаТочки.СписокВыбора.Вставить(Элементы.ДиаграммаТочки.СписокВыбора.Количество()-1, ИмяТочки, Строка(ИмяТочки));
			Иначе
				ДоступноеПоле = Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяТочки));
				Если НЕ ДоступноеПоле=Неопределено Тогда
					ДоступныеТочки.Вставить(ДоступныеТочки.Количество()-1, ИмяТочки, ДоступноеПоле.Заголовок);
					Элементы.ДиаграммаТочки.СписокВыбора.Вставить(Элементы.ДиаграммаТочки.СписокВыбора.Количество()-1, ИмяТочки, ДоступноеПоле.Заголовок);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		ДиаграммаТочки = ИмяТочки;  
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяСерии) Тогда
		Если ДоступныеСерии.НайтиПоЗначению(ИмяСерии)=Неопределено Тогда
			ДоступноеПоле = Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяСерии));
			Если НЕ ДоступноеПоле=Неопределено Тогда
				ДоступныеСерии.Вставить(ДоступныеСерии.Количество()-1, ИмяСерии, ДоступноеПоле.Заголовок);
				Элементы.ДиаграммаСерии.СписокВыбора.Вставить(Элементы.ДиаграммаСерии.СписокВыбора.Количество()-1, ИмяСерии, ДоступноеПоле.Заголовок);
			КонецЕсли;
		КонецЕсли;
		ДиаграммаСерии = ИмяСерии;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыСерийТочекЗначений()
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	
	ДоступныеСерии.Очистить();
	ДоступныеТочки.Очистить();
	Элементы.ДиаграммаЗначения.СписокВыбора.Очистить();
	
	ДоступныеСерии.Добавить(Неопределено, НСтр("ru = 'Не использовать'"));
	ДоступныеТочки.Добавить(Неопределено, НСтр("ru = 'Не использовать'"));
	
	ПоляПериодичностиТочки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ПериодГод,ПериодПолугодие,ПериодКвартал,ПериодМесяц,МесяцГода,ПериодНеделя,НеделяГода,ПериодДень,ДеньМесяца,ДеньНедели");
	ПоляПериодичностиСерии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ПериодГод,ПериодПолугодие,ПериодКвартал,ПериодМесяц");
	
	Для каждого ИмяПоля Из ПоляПериодичностиТочки Цикл
		ДоступноеПоле = Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
		Если ДоступноеПоле=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДоступныеТочки.Добавить(ИмяПоля, ДоступноеПоле.Заголовок, Истина);
	КонецЦикла; 
	
	Для каждого ИмяПоля Из ПоляПериодичностиСерии Цикл
		ДоступноеПоле = Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
		Если ДоступноеПоле=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаголовокПоля = ДоступноеПоле.Заголовок;
		ДоступныеСерии.Добавить(ИмяПоля, ДоступноеПоле.Заголовок, Истина);
	КонецЦикла; 
	
	ДополнительныеГруппировкиКолонок = ?(НастройкиОтчета.Свойство("ДополнительныеГруппировкиКолонок"), НастройкиОтчета.ДополнительныеГруппировкиКолонок, Неопределено);
	Если ТипЗнч(ДополнительныеГруппировкиКолонок)=Тип("СписокЗначений") Тогда
		Для каждого ОписаниеПоля Из ДополнительныеГруппировкиКолонок Цикл
			Если ПустаяСтрока(ОписаниеПоля.Представление) Тогда
				ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ОписаниеПоля.Значение));
				Если ДоступноеПоле=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ПредставлениеПоля = ДоступноеПоле.Заголовок;
			Иначе
				ПредставлениеПоля = ОписаниеПоля.Представление;
			КонецЕсли;
			Если ДоступныеСерии.НайтиПоЗначению(ОписаниеПоля.Значение)=Неопределено Тогда
				ДоступныеСерии.Добавить(ОписаниеПоля.Значение, ПредставлениеПоля);
			КонецЕсли;
			Если ДоступныеТочки.НайтиПоЗначению(ОписаниеПоля.Значение)=Неопределено Тогда
				ДоступныеТочки.Добавить(ОписаниеПоля.Значение, ПредставлениеПоля);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если НастройкиОтчета.РазрешитьДобавлениеПрочихГруппировокКолонок Тогда
		ДоступныеСерии.Добавить("<Прочие>", НСтр("ru = 'Прочее'"),, БиблиотекаКартинок.Выбрать);
		ДоступныеТочки.Добавить("<Прочие>", НСтр("ru = 'Прочее'"),, БиблиотекаКартинок.Выбрать);
	КонецЕсли;
	
	Для каждого ЭлементВыбора Из ДоступныеТочки Цикл
		Элементы.ДиаграммаТочки.СписокВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
	КонецЦикла; 
	Для каждого ЭлементВыбора Из ДоступныеСерии Цикл
		Элементы.ДиаграммаСерии.СписокВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
	КонецЦикла; 
	
	Для каждого ДоступноеПоле Из Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если НЕ ДоступноеПоле.Ресурс Тогда
			Продолжить;
		КонецЕсли;
		Элементы.ДиаграммаЗначения.СписокВыбора.Добавить(Строка(ДоступноеПоле.Поле), ДоступноеПоле.Заголовок);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиДиаграммы()

	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	ЭлементДиаграмма = ЭлементСтуктурыДиаграмма(Настройки.Структура, Истина);
	Если ЭлементДиаграмма=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементДиаграмма.Использование = ЗначениеЗаполнено(ВидДиаграммы);
	Если НЕ НастройкиОтчета.НестандартнаяДиаграмма Тогда
		ЭлементДиаграмма.Серии.Очистить();
		ЭлементДиаграмма.Точки.Очистить();
	КонецЕсли; 
	Если НастройкиОтчета.ИзменятьЗначенияДиаграммы Тогда
		ЭлементДиаграмма.Выбор.Элементы.Очистить();
	КонецЕсли; 
	
	Если ТипЗнч(ДиаграммаТочки)=Тип("ПеречислениеСсылка.Периодичность") Тогда
		ИмяГруппировкиТочки = "ДинамическийПериод";
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Периодичность", ДиаграммаТочки);
	Иначе
		ИмяГруппировкиТочки = ДиаграммаТочки;
	КонецЕсли; 
	Если НЕ НастройкиОтчета.НестандартнаяДиаграмма И ЗначениеЗаполнено(ДиаграммаТочки) Тогда
		Точка = ЭлементДиаграмма.Точки.Добавить();
		Поле = Точка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		Поле.Поле = Новый ПолеКомпоновкиДанных(ИмяГруппировкиТочки);
		Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		Поле.Использование = Истина;
		Точка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Точка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		Точка.Использование = Истина;
	КонецЕсли;
	Если НЕ НастройкиОтчета.НестандартнаяДиаграмма И НЕ НастройкиОтчета.ВыводитьТолькоТочки И ЗначениеЗаполнено(ДиаграммаТочки) И ЗначениеЗаполнено(ДиаграммаСерии) Тогда
		Серия = ЭлементДиаграмма.Серии.Добавить();
		Поле = Серия.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		Поле.Поле = Новый ПолеКомпоновкиДанных(ДиаграммаСерии);
		Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		Поле.Использование = Истина;
		Серия.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Серия.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		Серия.Использование = Истина;
	КонецЕсли; 
	Если НастройкиОтчета.ИзменятьЗначенияДиаграммы Тогда
		Если ЗначениеЗаполнено(ДиаграммаЗначения) Тогда
			ЭлементВыбор = ЭлементДиаграмма.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЭлементВыбор.Использование = Истина;
			ЭлементВыбор.Поле = Новый ПолеКомпоновкиДанных(ДиаграммаЗначения);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ОбновитьДополнениеГруппировки(Группировка, Схема)
	
	Если НЕ Группировка.ПоляГруппировки.Элементы.Количество()=1 Тогда
		Возврат Ложь;
	КонецЕсли;
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы[0];
	ИмяПоля = Строка(ПолеГруппировки.Поле);
	Если ИмяПоля="ДинамическийПериод" Тогда
		ПараметрСхемыПериодичность = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Периодичность"));
		Если НЕ ПараметрСхемыПериодичность=Неопределено И ЗначениеЗаполнено(ПараметрСхемыПериодичность.Значение) Тогда
			ИмяПериодичности = ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрСхемыПериодичность.Значение);
			УстановитьТипДополнения(ПолеГруппировки, ТипДополненияПоИмениПоля(ИмяПериодичности));
		Иначе
			УстановитьТипДополнения(ПолеГруппировки, ТипДополненияПериодаКомпоновкиДанных.БезДополнения);
		КонецЕсли;
	ИначеЕсли ИмяПоля="МесяцГода" Тогда
		УстановитьТипДополнения(ПолеГруппировки, ТипДополненияПериодаКомпоновкиДанных.Месяц);
	ИначеЕсли ИмяПоля="ДеньИМесяцГода" Тогда
		УстановитьТипДополнения(ПолеГруппировки, ТипДополненияПериодаКомпоновкиДанных.День);
	Иначе
		ПолеСхемы = ОтчетыУНФ.ПолеСхемы(Схема, ИмяПоля);
		Если НЕ ТипЗнч(ПолеСхемы)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") ИЛИ ПолеСхемы.Роль.НомерПериода=0 Тогда
			УстановитьТипДополнения(ПолеГруппировки, ТипДополненияПериодаКомпоновкиДанных.БезДополнения);
		Иначе
			УстановитьТипДополнения(ПолеГруппировки, ТипДополненияПоИмениПоля(ИмяПоля));
		КонецЕсли; 
	КонецЕсли;
	Возврат (ПолеГруппировки.ТипДополнения<>ТипДополненияПериодаКомпоновкиДанных.БезДополнения);
	
КонецФункции

&НаСервере
Процедура УстановитьТипДополнения(ПолеГруппировки, ТипДополнения)
	
	ПолеГруппировки.ТипДополнения = ТипДополнения;
	Если ПолеГруппировки.ТипДополнения=ТипДополненияПериодаКомпоновкиДанных.БезДополнения Тогда
		ПолеГруппировки.НачалоПериода = '0001-01-01';
		ПолеГруппировки.КонецПериода = '0001-01-01';
	Иначе
		ПолеГруппировки.НачалоПериода = Период.ДатаНачала;
		ПолеГруппировки.КонецПериода = ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), Период.ДатаОкончания);
	КонецЕсли; 
	
КонецПроцедуры
 
&НаСервере
Функция ТипДополненияПоИмениПоля(ИмяПоля)
	
	Если ИмяПоля="ПериодДень" ИЛИ ИмяПоля="День" Тогда
		Возврат ТипДополненияПериодаКомпоновкиДанных.День;
	ИначеЕсли ИмяПоля="ПериодНеделя" ИЛИ ИмяПоля="Неделя" Тогда
		Возврат ТипДополненияПериодаКомпоновкиДанных.Неделя;
	ИначеЕсли ИмяПоля="ПериодМесяц" ИЛИ ИмяПоля="Месяц" Тогда
		Возврат ТипДополненияПериодаКомпоновкиДанных.Месяц;
	ИначеЕсли ИмяПоля="ПериодКвартал" ИЛИ ИмяПоля="Квартал" Тогда
		Возврат ТипДополненияПериодаКомпоновкиДанных.Квартал;
	ИначеЕсли ИмяПоля="ПериодПолугодие" ИЛИ ИмяПоля="Полугодие" Тогда
		Возврат ТипДополненияПериодаКомпоновкиДанных.Полугодие;
	ИначеЕсли ИмяПоля="ПериодГод" ИЛИ ИмяПоля="Год" Тогда
		Возврат ТипДополненияПериодаКомпоновкиДанных.Год;
	КонецЕсли;
	Возврат ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	
КонецФункции

&НаСервере
Процедура ОбновитьПериодНаФорме()
	
	Если НЕ ПоляНастроек.ПолучитьЭлементы().Количество()=0 Тогда
		// Не первая загрузка варианта
		Возврат;
	КонецЕсли;
	
	ПараметрПериод = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СтПериод");
	Если ПараметрПериод=Неопределено Тогда
		ПараметрПериод = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	КонецЕсли;
	Если ПараметрПериод=Неопределено ИЛИ НЕ ПараметрПериод.Использование Тогда
		Период = Новый СтандартныйПериод;
	ИначеЕсли ТипЗнч(ПараметрПериод.Значение)=Тип("Дата") Тогда
		Период = Новый СтандартныйПериод('0001-01-01', ПараметрПериод.Значение);
	ИначеЕсли ТипЗнч(ПараметрПериод.Значение)=Тип("СтандартныйПериод") Тогда
		Период = ПараметрПериод.Значение;
	ИначеЕсли ТипЗнч(ПараметрПериод.Значение)=Тип("СтандартнаяДатаНачала") Тогда
		Период = Новый СтандартныйПериод('0001-01-01', ПараметрПериод.Значение.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыРекурсивно(Группа, МассивЭлементов, МассивРеквизитов)
	
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УдалитьЭлементыРекурсивно(Элемент, МассивЭлементов, МассивРеквизитов);
		ИначеЕсли ТипЗнч(Элемент)=Тип("КомандаФормы") Тогда
			Команды.Удалить(Команды.Найти(Элемент.ИмяКоманды));
		ИначеЕсли ТипЗнч(Элемент)=Тип("ПолеФормы") Тогда
			УдалитьЭлементыРекурсивно(Элемент.КонтекстноеМеню, МассивЭлементов, МассивРеквизитов);
			Позиция = Найти(Элемент.ПутьКДанным, ".");
			Если Позиция>0 Тогда
				ИмяРеквизита = Лев(Элемент.ПутьКДанным, Позиция-1);
			Иначе
				ИмяРеквизита = Элемент.ПутьКДанным;
			КонецЕсли;
			Если МассивРеквизитов.Найти(ИмяРеквизита)=Неопределено Тогда
				МассивРеквизитов.Добавить(ИмяРеквизита);
			КонецЕсли; 
		КонецЕсли;
		МассивЭлементов.Добавить(Элемент);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ВнестиИзмененияВРеквизитыНаФорме(ПолнаяЗамена = Истина)
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	Если ПолнаяЗамена Тогда
		МассивУдаляемыхЭлементов = Новый Массив;
		УдалитьЭлементыРекурсивно(Элементы.ГруппаПараметрыЭлементы, МассивУдаляемыхЭлементов, МассивУдаляемыхРеквизитов);
		УдалитьЭлементыРекурсивно(Элементы.ГруппаСтрокиЭлементы, МассивУдаляемыхЭлементов, МассивУдаляемыхРеквизитов);
		УдалитьЭлементыРекурсивно(Элементы.ГруппаПоказателиЭлементы, МассивУдаляемыхЭлементов, МассивУдаляемыхРеквизитов);
		УдалитьЭлементыРекурсивно(Элементы.ГруппаФильтрЭлементы, МассивУдаляемыхЭлементов, МассивУдаляемыхРеквизитов);
		УдалитьЭлементыРекурсивно(Элементы.ГруппаДополнительныеНастройки, МассивУдаляемыхЭлементов, МассивУдаляемыхРеквизитов);
		Для каждого Элемент Из МассивУдаляемыхЭлементов Цикл
			Элементы.Удалить(Элемент);
		КонецЦикла; 
	КонецЕсли; 
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивИмен = Новый Массив;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Создан", Ложь);
	СтруктураОтбора.Вставить("Скрыт", Ложь);
	Идентификаторы = ИдентификаторыСтрок(ПоляНастроек, СтруктураОтбора, Истина);
	Для каждого Идентификатор Из Идентификаторы Цикл
		Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
		Для каждого Элемент Из Стр.Реквизиты Цикл
			Если НЕ МассивИмен.Найти(Элемент.Ключ)=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			// Булевые фильтры отображаем с тремя состояниями 
			Если Стр.Тип=ТипФильтр() 
				И ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Стр.ТипЗначения, Тип("Булево")) 
				И НЕ Стр.ВидЭлемента="Флажок" 
				И НЕ Стр.ВидЭлемента="Булево" Тогда
				ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.БулевоТриСостояния");
				МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Элемент.Ключ, ОписаниеТипов,, Стр.Заголовок));
			Иначе
				МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Элемент.Ключ, Стр.ТипЗначения,, Стр.Заголовок));
			КонецЕсли; 
			МассивИмен.Добавить(Элемент.Ключ);
		КонецЦикла; 
	КонецЦикла;
	
	Если МассивДобавляемыхРеквизитов.Количество()>0 ИЛИ МассивУдаляемыхРеквизитов.Количество()>0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	КонецЕсли; 
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
		Если Стр.Тип=ТипПоказатель() ИЛИ Стр.Тип=ТипГруппаПоказателей() Тогда
			ДобавитьЭлементГруппаПоказателейПоказатель(Стр);
		ИначеЕсли Стр.Тип=ТипГруппировка() Тогда
			ДобавитьЭлементГруппировка(Стр);
		ИначеЕсли Стр.Тип=ТипРеквизит() Тогда
			ДобавитьЭлементРеквизит(Стр);
		ИначеЕсли Стр.Тип=ТипПараметр() Тогда
			Если Стр.ВидЭлемента="Поле" Тогда
				Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый  ПараметрКомпоновкиДанных(Стр.Поле));
				Если ЗначениеЗаполнено(Параметр.ДоступныеЗначения) Тогда
					ПараметрыВыбора = Параметр.ДоступныеЗначения;
				Иначе
					ПараметрыВыбора = Неопределено;
				КонецЕсли; 
			Иначе
				ПараметрыВыбора = Неопределено;
			КонецЕсли; 
			ОтчетыУНФ.ДобавитьЭлементФильтр(Стр, ЭтаФорма, ПараметрыВыбора, Неопределено);
		ИначеЕсли Стр.Тип=ТипФильтр() Тогда
			СвязиПараметровВыбора = Неопределено;
			Если Стр.ВидЭлемента="Поле" Тогда
				Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Стр.Поле));
				Если Поле=Неопределено Тогда
					ПараметрыВыбора = Неопределено;
				Иначе
					ПараметрыВыбора = ОпределитьПараметрыВыбора(Поле);
					СвязиПараметровВыбора = ОпределитьСвязиПараметровВыбора(Поле);
				КонецЕсли; 
			Иначе
				ПараметрыВыбора = Неопределено;
			КонецЕсли; 
			ОтчетыУНФ.ДобавитьЭлементФильтр(Стр, ЭтаФорма, ПараметрыВыбора, СвязиПараметровВыбора);
		КонецЕсли; 
		Стр.Создан = Истина;
	КонецЦикла;
	
	// Заполним значения фильтров и параметров
	Для каждого Идентификатор Из Идентификаторы Цикл
		Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
		Если НЕ Стр.Тип=ТипФильтр() И НЕ Стр.Тип=ТипПараметр() Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.ВидЭлемента="Тумблер" И Стр.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
			Для каждого Реквизит Из Стр.Реквизиты Цикл
				Если Стр.ЗначениеПоУмолчанию=Истина Тогда
					ЭтаФорма[Реквизит.Ключ] = Перечисления.БулевоТриСостояния.Истина;
				ИначеЕсли Стр.ЗначениеПоУмолчанию=Ложь Тогда
					ЭтаФорма[Реквизит.Ключ] = Перечисления.БулевоТриСостояния.Ложь;
				Иначе
					ЭтаФорма[Реквизит.Ключ] = Перечисления.БулевоТриСостояния.НеИзменять;
				КонецЕсли; 
			КонецЦикла;
		ИначеЕсли Стр.ВидЭлемента="Флажок" Тогда
			Для каждого Реквизит Из Стр.Реквизиты Цикл
				Если (ТипЗнч(Стр.ЗначениеПоУмолчанию)=Тип("СписокЗначений") 
					И НЕ Стр.ЗначениеПоУмолчанию.НайтиПоЗначению(Реквизит.Значение)=Неопределено)
					ИЛИ Стр.ЗначениеПоУмолчанию=Реквизит.Значение Тогда
					ЭтаФорма[Реквизит.Ключ] = Истина;
				Иначе
					ЭтаФорма[Реквизит.Ключ] = Ложь;
				КонецЕсли; 
			КонецЦикла;
		ИначеЕсли Стр.ВидЭлемента="Тумблер" И ЗначениеЗаполнено(Стр.ЗначениеПоУмолчанию) Тогда
			Для каждого Реквизит Из Стр.Реквизиты Цикл
				ЭтаФорма[Реквизит.Ключ] = Стр.ЗначениеПоУмолчанию;
			КонецЦикла; 
		ИначеЕсли НЕ Стр.ВидЭлемента="Поле" ИЛИ Стр.Тип=ТипПараметр() Тогда
			Для каждого Реквизит Из Стр.Реквизиты Цикл
				ЭтаФорма[Реквизит.Ключ] = Реквизит.Значение;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ИсправлениеНастроек

&НаСервере
Процедура ВосставноитьДинамическиеПериодыРекурсивно(ЭлементыСтруктуры)
	
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			ВосставноитьДинамическиеПериодыРекурсивно(Элемент.Строки);
			ВосставноитьДинамическиеПериодыРекурсивно(Элемент.Колонки);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ДиаграммаКомпоновкиДанных") Тогда
			ВосставноитьДинамическиеПериодыРекурсивно(Элемент.Серии);
			ВосставноитьДинамическиеПериодыРекурсивно(Элемент.Точки);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") 
			ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если ТипЗнч(Поле)=Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
					Если Поле.Поле=Новый ПолеКомпоновкиДанных("ДинамическийПериод") Тогда
						Поле.Использование = Истина;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			ВосставноитьДинамическиеПериодыРекурсивно(Элемент.Структура);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ИсправитьНастройкиВарианта()
	
	ИсправитьГруппировкиРекурсивно(Отчет.КомпоновщикНастроек.Настройки.Структура);
	
КонецПроцедуры

&НаСервере
Процедура ИсправитьГруппировкиРекурсивно(ЭлементыСтруктуры)
	
	Схема = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			ИсправитьГруппировкиРекурсивно(Элемент.Строки);
			ИсправитьГруппировкиРекурсивно(Элемент.Колонки);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ДиаграммаКомпоновкиДанных") Тогда
			ИсправитьГруппировкиРекурсивно(Элемент.Серии);
			ИсправитьГруппировкиРекурсивно(Элемент.Точки);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") 
			ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭтоПустаяГруппировка(Элемент, Отчет.КомпоновщикНастроек.Настройки) Тогда
				СкопироватьСтруктуруРекурсивно(Элемент.Структура, ЭлементыСтруктуры, Схема);
				ЭлементыСтруктуры.Удалить(Элемент);
				Продолжить;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПустаяГруппировка(Группировка, Настройки)
	
	Если Группировка.ПоляГруппировки.Элементы.Количество()=0 Тогда
		// Детальные записи
		Возврат Ложь;
	КонецЕсли; 
	
	Для каждого Поле Из Группировка.ПоляГруппировки.Элементы Цикл
		Если ТипЗнч(Поле)=Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если Поле.Поле=Новый ПолеКомпоновкиДанных("ДинамическийПериод") Тогда
			Возврат Ложь;
		КонецЕсли; 
		ДоступноеПоле = Настройки.ДоступныеПоляГруппировок.НайтиПоле(Поле.Поле);
		Если НЕ ДоступноеПоле=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

#КонецОбласти 

#Область Группировки

&НаСервере
Процедура ЗаполнитьВариантыГруппировкиКолонок()
	
	Элементы.ПолеГруппировкиКолонок.СписокВыбора.Очистить();
	Элементы.ПолеГруппировкиКолонок.СписокВыбора.Добавить("", НСтр("ru = 'Не группировать'"));
	
	ДополнительныеГруппировкиКолонок = ?(НастройкиОтчета.Свойство("ДополнительныеГруппировкиКолонок"), НастройкиОтчета.ДополнительныеГруппировкиКолонок, Неопределено);
	Если ТипЗнч(ДополнительныеГруппировкиКолонок)=Тип("СписокЗначений") Тогда
		Для каждого ОписаниеПоля Из ДополнительныеГруппировкиКолонок Цикл
			Если ПустаяСтрока(ОписаниеПоля.Представление) Тогда
				ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ОписаниеПоля.Значение));
				Если ДоступноеПоле=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ПредставлениеПоля = ДоступноеПоле.Заголовок;
			Иначе
				ПредставлениеПоля = ОписаниеПоля.Представление;
			КонецЕсли; 
			Элементы.ПолеГруппировкиКолонок.СписокВыбора.Добавить(ОписаниеПоля.Значение, ПредставлениеПоля);
		КонецЦикла; 
	КонецЕсли; 
	
	Если НастройкиОтчета.РазрешитьДобавлениеПрочихГруппировокКолонок Тогда
		Элементы.ПолеГруппировкиКолонок.СписокВыбора.Добавить("<Прочие>", НСтр("ru = 'Прочее'"),, БиблиотекаКартинок.Выбрать);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ДобавитьОписаниеГруппировки(Путь, НестандартныйОбработчик = Ложь, ТипГруппировки = Неопределено)
	
	Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Путь));
	Если Поле=Неопределено Тогда
		Возврат "";
	КонецЕсли; 
	ИмяРеквизита = НовоеИмяРеквизита(ТипГруппировка());
	
	Стр = СтрокаОписанияПоля(ТипГруппировка(), Путь, ПоляНастроек);
	Если Стр=Неопределено Тогда
		ИндексВставки = ИндексВставкиГруппировки(Путь);
		Если ИндексВставки=Неопределено Тогда
			Стр = ПоляНастроек.ПолучитьЭлементы().Добавить();
		Иначе
			Стр = ПоляНастроек.ПолучитьЭлементы().Вставить(ИндексВставки);
		КонецЕсли; 
		Стр.Тип = ТипГруппировка();
		Стр.Поле = Путь;
	Иначе
		Если Стр.Создан Тогда
			Возврат "";
		КонецЕсли;
		Стр.Скрыт = Ложь;
	КонецЕсли;
	Стр.Заголовок = Поле.Заголовок;
	Стр.Реквизиты = Новый Структура(ИмяРеквизита, Истина);
	Стр.Элементы = Новый Структура;
	Стр.ВидЭлемента = "Флажок";
	Стр.ТипЗначения = Новый ОписаниеТипов("Булево");
	Стр.НестандартныйОбработчик = НестандартныйОбработчик;
	Стр.ДополнительныеПараметры = Новый Структура;
	Стр.ДополнительныеПараметры.Вставить("ТипГруппировки", ?(ТипГруппировки=Неопределено, ТипГруппировкиКомпоновкиДанных.Элементы, ТипГруппировки));
	ОпределитьНачальноеПоложение(Стр, Поле);
		
	ВнестиИзмененияВРеквизитыНаФорме(Ложь);
	Возврат ИмяРеквизита;
	
КонецФункции

&НаСервере
Функция ИндексВставкиГруппировки(ИмяПоля)
	
	 Схема = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	 ПолеСхемы = ОтчетыУНФ.ПолеСхемы(Схема, ИмяПоля);
	 
	 Индекс = Неопределено;
	 // Проверка: группировки-периоды должны располагаться в порядке нумерации периодов
	 Если ТипЗнч(ПолеСхемы)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И ПолеСхемы.Роль.НомерПериода>0 Тогда
		 Для каждого Стр Из ПоляНастроек.ПолучитьЭлементы() Цикл
			 Если НЕ Стр.Тип=ТипГруппировка() Тогда
				 Продолжить;
			 КонецЕсли; 
			 Если ЗначениеЗаполнено(Стр.Поле) Тогда
				 ПолеГруппировки = ОтчетыУНФ.ПолеСхемы(Схема, Стр.Поле);
				 Если ТипЗнч(ПолеГруппировки)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И НЕ ПолеГруппировки.Роль.НомерПериода=0 И ПолеГруппировки.Роль.НомерПериода<ПолеСхемы.Роль.НомерПериода Тогда
					 Индекс = ?(Индекс=Неопределено, ПоляНастроек.ПолучитьЭлементы().Индекс(Стр), Мин(Индекс, ПоляНастроек.ПолучитьЭлементы().Индекс(Стр)));
					 Прервать;
				 КонецЕсли;
			 Иначе
				 Для каждого ПодСтр Из Стр.ПолучитьЭлементы() Цикл
					 Если НЕ ПодСтр.Тип=ТипРеквизит() Тогда
						 Продолжить;
					 КонецЕсли; 
					 ПолеГруппировки = ОтчетыУНФ.ПолеСхемы(Схема, ПодСтр.Поле);
					 Если ТипЗнч(ПолеГруппировки)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И НЕ ПолеГруппировки.Роль.НомерПериода=0 И ПолеГруппировки.Роль.НомерПериода<ПолеСхемы.Роль.НомерПериода Тогда
						 Индекс = ?(Индекс=Неопределено, ПоляНастроек.ПолучитьЭлементы().Индекс(Стр), Мин(Индекс, ПоляНастроек.ПолучитьЭлементы().Индекс(Стр)));
						 Прервать;
					 КонецЕсли;
				 КонецЦикла; 
			 КонецЕсли; 
		 КонецЦикла; 
	 КонецЕсли;
	 
	 Возврат Индекс;
	
КонецФункции
 
&НаСервере
Функция ПроверитьСовместимостьГруппировокКолонок(ИмяПоляПроверки = "")
	
	Результат = Истина;
	
	Если НЕ ЗначениеЗаполнено(ПолеГруппировкиКолонок) И НЕ ЗначениеЗаполнено(ПолеСравнения) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Если ТипЗнч(ПолеСравнения)=Тип("ПеречислениеСсылка.Периодичность") Тогда
		СтрокаДлительностьПериода = ОбщегоНазначения.ИмяЗначенияПеречисления(ПолеСравнения);
		ИмяСравнения = "Период" + СтрокаДлительностьПериода;
	Иначе
		ИмяСравнения = ПолеСравнения;
	КонецЕсли;
	
	Схема = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	Если ЗначениеЗаполнено(ПолеГруппировкиКолонок) Тогда
		ГруппировкаКолонокСхемы = ОтчетыУНФ.ПолеСхемы(Схема, ПолеГруппировкиКолонок);
		ГруппировкаКолонокПериод = (ТипЗнч(ГруппировкаКолонокСхемы)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И ГруппировкаКолонокСхемы.Роль.НомерПериода>0);
	Иначе
		ГруппировкаКолонокСхемы = Неопределено;
		ГруппировкаКолонокПериод = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяСравнения) Тогда
		СравнениеСхемы = ОтчетыУНФ.ПолеСхемы(Схема, ИмяСравнения);
		СравнениеПериод = (ТипЗнч(СравнениеСхемы)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И СравнениеСхемы.Роль.НомерПериода>0);
	Иначе
		СравнениеСхемы = Неопределено;
		СравнениеПериод = Ложь;
	КонецЕсли; 	
	
	Если НЕ ГруппировкаКолонокПериод И НЕ СравнениеПериод Тогда
		Возврат Результат;
	КонецЕсли; 
	
	МассивПолей = Новый Массив;
	Если НЕ ПустаяСтрока(ИмяПоляПроверки) Тогда
		МассивПолей.Добавить(ИмяПоляПроверки);
	Иначе
		ПоляГруппировокРекурсивно(МассивПолей, Отчет.КомпоновщикНастроек.Настройки.Структура, Истина);
	КонецЕсли; 
	Для каждого ИмяПоля Из МассивПолей Цикл
		Поле = ОтчетыУНФ.ПолеСхемы(Схема, ИмяПоля);
		Если НЕ ТипЗнч(Поле)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если Поле.Роль.НомерПериода=0 Тогда
			Продолжить;
		КонецЕсли;
		Если (ГруппировкаКолонокПериод И НЕ ИмяПоля=ПолеГруппировкиКолонок) ИЛИ (СравнениеПериод И НЕ ИмяПоля=ИмяСравнения) Тогда
			Если НЕ ПустаяСтрока(ИмяПоляПроверки) Тогда
				Если ГруппировкаКолонокПериод И НЕ ИмяПоля=ПолеГруппировкиКолонок Тогда
					ОписаниеПоля = """"+?(ПустаяСтрока(ГруппировкаКолонокСхемы.Заголовок), ГруппировкаКолонокСхемы.Поле, ГруппировкаКолонокСхемы.Заголовок)+"""";
					ОписаниеПоля = ОписаниеПоля+НСтр("ru = ' в колонках отчета'");
				ИначеЕсли СравнениеПериод И НЕ ИмяПоля=ИмяСравнения Тогда
					ОписаниеПоля = """"+?(ПустаяСтрока(СравнениеСхемы.Заголовок), СравнениеСхемы.Поле, СравнениеСхемы.Заголовок)+"""";
					ОписаниеПоля = ОписаниеПоля+НСтр("ru = ' в колонках отчета'");
				КонецЕсли; 
			Иначе
				ОписаниеПоля = """"+?(ПустаяСтрока(Поле.Заголовок), Поле.Поле, Поле.Заголовок)+"""";
				ОписаниеПоля = ОписаниеПоля+НСтр("ru = ' в строках отчета'");
				Если ГруппировкаКолонокПериод И НЕ ИмяПоля=ПолеГруппировкиКолонок Тогда
					ПолеГруппировкиКолонок = Неопределено;
				КонецЕсли; 
				Если СравнениеПериод И НЕ ИмяПоля=ИмяСравнения Тогда
					ПолеСравнения = Неопределено;
				КонецЕсли;
			КонецЕсли; 
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запрещено использование в строках и колонках различных полей-периодов. Предварительно отключите поле %1'"),
			ОписаниеПоля));
			Результат = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьОписаниеРеквизита(Путь, НестандартныйОбработчик = Ложь, ИдентификаторРодителя, ОбновлятьФорму = Истина)
	
	СтрРодитель = ПоляНастроек.НайтиПоИдентификатору(ИдентификаторРодителя);
	
	Если НЕ ПустаяСтрока(СтрРодитель.Поле) Тогда
		// Добавление вложенного реквизита для группировки
		ИмяПоля = СтрРодитель.Поле;
		СтрРодитель.Поле = "";
		ДобавитьОписаниеРеквизита(ИмяПоля, НестандартныйОбработчик, ИдентификаторРодителя, Ложь);
		// Для группировки с несколькими полями вид иерархии только по элементам
		Если СтрРодитель.ДополнительныеПараметры.Свойство("ТипГруппировки") И НЕ СтрРодитель.ДополнительныеПараметры.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Элементы Тогда
			СтрРодитель.ДополнительныеПараметры.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		КонецЕсли; 
		// Отключаем возможность изменять вид иерархии группировки с несколькими полями
		Для каждого ОписаниеЭлемента Из СтрРодитель.Элементы Цикл
			Если НЕ Элементы.Найти(ОписаниеЭлемента.Ключ+"_Иерархия")=Неопределено Тогда
				Элементы[ОписаниеЭлемента.Ключ+"_Иерархия"].Видимость = Ложь;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Путь));
	Если Поле=Неопределено Тогда
		Возврат "";
	КонецЕсли; 
	ИмяРеквизита = НовоеИмяРеквизита(ТипРеквизит());
	
	Стр = СтрокаОписанияПоля(ТипРеквизит(), Путь, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Стр = СтрРодитель.ПолучитьЭлементы().Добавить();
		Стр.Тип = ТипРеквизит();
		Стр.Поле = Путь;
	Иначе
		Если Стр.Создан Тогда
			Возврат "";
		КонецЕсли;
		Стр.Скрыт = Ложь;
	КонецЕсли;
	Стр.Заголовок = Поле.Заголовок;
	Стр.Реквизиты = Новый Структура(ИмяРеквизита, Истина);
	Стр.Элементы = Новый Структура;
	Стр.ВидЭлемента = "Флажок";
	Стр.ТипЗначения = Новый ОписаниеТипов("Булево");
	Стр.НестандартныйОбработчик = НестандартныйОбработчик;
	Стр.ДополнительныеПараметры = Новый Структура;
	Стр.ДополнительныеПараметры.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
	
	Если ОбновлятьФорму Тогда
		ВнестиИзмененияВРеквизитыНаФорме(Ложь);
	КонецЕсли;
	
	// Обновление заголовка группировки
	СтрРодитель.Заголовок = ЗаголовокГруппыПолей(СтрРодитель);
	ОбновитьЗаголовокЭлемента(СтрРодитель); 
	
	Возврат ИмяРеквизита;
	
КонецФункции

&НаСервере
Функция ЗаголовокГруппыПолей(СтрРодитель)
	
	ЗаголовокГруппировки = "";
	Для каждого СтрРеквизита Из СтрРодитель.ПолучитьЭлементы() Цикл
		ЗаголовокГруппировки = ЗаголовокГруппировки+?(ПустаяСтрока(ЗаголовокГруппировки), "", ", ")+СтрРеквизита.Заголовок;
	КонецЦикла;
	Возврат ЗаголовокГруппировки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОписанияГруппировок()
	
	ДобавитьОписанияГруппировокРекурсивно(Отчет.КомпоновщикНастроек.Настройки.Структура);
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	УдалитьНеиспользуемыеГруппировкиРекурсивно(Отчет.КомпоновщикНастроек.Настройки.Структура, СхемаКомпоновкиДанных);
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	Если ДополнительныеСвойства.Свойство("Сравнение") И ЗначениеЗаполнено(ДополнительныеСвойства.Сравнение) И НЕ ЗначениеЗаполнено(ПолеСравнения) Тогда
		ПолеСравнения = ДополнительныеСвойства.Сравнение;
		Если ДополнительныеСвойства.Свойство("ПоказыватьАбсолютноеИзменение") Тогда
			ПоказыватьАбсолютноеИзменение = ДополнительныеСвойства.ПоказыватьАбсолютноеИзменение;
		КонецЕсли; 
		Если ДополнительныеСвойства.Свойство("ПоказыватьОтносительноеИзменение") Тогда
			ПоказыватьОтносительноеИзменение = ДополнительныеСвойства.ПоказыватьОтносительноеИзменение;
		КонецЕсли; 
	КонецЕсли; 
	Если ДополнительныеСвойства.Свойство("ГруппировкаКолонок") И ЗначениеЗаполнено(ДополнительныеСвойства.ГруппировкаКолонок) И НЕ ЗначениеЗаполнено(ПолеГруппировкиКолонок) Тогда
		ПолеГруппировкиКолонок = ДополнительныеСвойства.ГруппировкаКолонок;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьНеиспользуемыеГруппировкиРекурсивно(Структура, СхемаКомпоновкиДанных)
	
	МассивКУдалению = Новый Массив;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			УдалитьНеиспользуемыеГруппировкиРекурсивно(Элемент.Строки, СхемаКомпоновкиДанных);
			УдалитьНеиспользуемыеГруппировкиРекурсивно(Элемент.Колонки, СхемаКомпоновкиДанных);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		    Если НЕ Элемент.Использование Тогда
				СкопироватьСтруктуруРекурсивно(Элемент.Структура, Структура, СхемаКомпоновкиДанных);
				МассивКУдалению.Добавить(Элемент);
				Продолжить;
			КонецЕсли;
			УдалитьНеиспользуемыеГруппировкиРекурсивно(Элемент.Структура, СхемаКомпоновкиДанных);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Элемент Из МассивКУдалению Цикл
		Структура.Удалить(Элемент);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписанияГруппировокРекурсивно(ЭлементыСтруктуры, ЭтоСтрока = Истина)
	
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьОписанияГруппировокРекурсивно(Элемент.Строки);
			ДобавитьОписанияГруппировокРекурсивно(Элемент.Колонки, Ложь);
		ИначеЕсли ЭтоСтрока И (ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных")) Тогда
			ИмяРеквизита = НовоеИмяРеквизита(ТипГруппировка());
			ЗаголовокГруппировки = Строка(Элемент.ПоляГруппировки);
			Если ПустаяСтрока(ЗаголовокГруппировки) Тогда
				ЗаголовокГруппировки = НСтр("ru = '<Детальные записи>'");
			КонецЕсли; 
			Стр = ДобавитьОписаниеНастройки(ПоляНастроек.ПолучитьЭлементы(), ТипГруппировка(), ИмяРеквизита, ЗаголовокГруппировки, Элемент);
			Если Стр=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Стр.Реквизиты.Вставить(ИмяРеквизита, Элемент.Использование);
			ОпределитьНачальноеПоложение(Стр, Элемент);
			Если Элемент.ПоляГруппировки.Элементы.Количество()=1 Тогда
				Поле = Элемент.ПоляГруппировки.Элементы[0];
				Стр.Поле = Строка(Поле.Поле);
				Стр.ДополнительныеПараметры.Вставить("ТипГруппировки", Поле.ТипГруппировки);
			Иначе
				// Добавление описаний отдельных полей группировкок, если их несколько
				Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
					Путь = Строка(Поле.Поле);
					ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Поле.Поле);
					Если ДоступноеПоле=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрРеквизит = ДобавитьОписаниеНастройки(Стр.ПолучитьЭлементы(), ТипРеквизит(), Путь, ДоступноеПоле.Заголовок);
					Если СтрРеквизит=Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					ИмяРеквизита = НовоеИмяРеквизита(ТипРеквизит());
					СтрРеквизит.Реквизиты.Вставить(ИмяРеквизита, Поле.Использование И Элемент.Использование);
					СтрРеквизит.ДополнительныеПараметры.Вставить("ТипГруппировки", Поле.ТипГруппировки);  
					ОпределитьНачальноеПоложение(СтрРеквизит, ДоступноеПоле);
				КонецЦикла; 
			КонецЕсли;
			ДобавитьОписанияГруппировокРекурсивно(Элемент.Структура);
		ИначеЕсли НЕ ЭтоСтрока И ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Если НЕ Элемент.ПоляГруппировки.Элементы.Количество()=1 Тогда
				ДобавитьОписанияГруппировокРекурсивно(Элемент.Структура, ЭтоСтрока);
				Продолжить;
			КонецЕсли;
			Поле = Элемент.ПоляГруппировки.Элементы[0];
			ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Поле.Поле);
			ИмяПоля = Строка(Поле.Поле);
			ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
			Если НЕ ДополнительныеСвойства.Свойство("ГруппировкаКолонок") И НЕ ДополнительныеСвойства.Свойство("Сравнение") Тогда
				// базовая версия отчета
				Если ИмяПоля="ДинамическийПериод" Тогда
					КоличествоПоказателей = КоличествоПоказателейСКД(Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы);
					Если КоличествоПоказателей>1 Тогда
					    ПолеСравнения = Неопределено;
						ПоказыватьАбсолютноеИзменение = Ложь;
						ПоказыватьОтносительноеИзменение = Ложь;
						Элемент.Использование = Ложь;
						Продолжить;
					Иначе
						ЗначениеСравнения = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Периодичность"));
						ПолеСравнения = ЗначениеСравнения.Значение;
					КонецЕсли; 
				Иначе
					Если ЗначениеЗаполнено(ПолеГруппировкиКолонок) И НЕ ЗначениеЗаполнено(ПолеСравнения) И НастройкиОтчета.ИспользоватьСравнение Тогда
						Если Элементы.ПолеСравнения.СписокВыбора.НайтиПоЗначению(ПолеГруппировкиКолонок)=Неопределено Тогда
							ДоступноеПолеГруппировки = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеГруппировкиКолонок);
							Элементы.ПолеСравнения.СписокВыбора.Вставить(Элементы.ПолеСравнения.СписокВыбора.Количество()-1, ПолеГруппировкиКолонок, ДоступноеПолеГруппировки.Заголовок); 
						КонецЕсли;
						ПолеСравнения = ПолеГруппировкиКолонок;
					КонецЕсли; 
					Если Элементы.ПолеГруппировкиКолонок.СписокВыбора.НайтиПоЗначению(ИмяПоля)=Неопределено И НЕ ДоступноеПоле=Неопределено Тогда
						Элементы.ПолеГруппировкиКолонок.СписокВыбора.Вставить(Элементы.ПолеГруппировкиКолонок.СписокВыбора.Количество()-1, ИмяПоля, ДоступноеПоле.Заголовок); 
					КонецЕсли;
					ПолеГруппировкиКолонок = ИмяПоля;
				КонецЕсли; 
			ИначеЕсли ДополнительныеСвойства.Свойство("ГруппировкаКолонок") И НРег(ИмяПоля)=НРег(ДополнительныеСвойства.ГруппировкаКолонок) Тогда
				// определили группировку колонок
				Если Элементы.ПолеГруппировкиКолонок.СписокВыбора.НайтиПоЗначению(ИмяПоля)=Неопределено И НЕ ДоступноеПоле=Неопределено Тогда
					Элементы.ПолеГруппировкиКолонок.СписокВыбора.Вставить(Элементы.ПолеГруппировкиКолонок.СписокВыбора.Количество()-1, ИмяПоля, ДоступноеПоле.Заголовок); 
				КонецЕсли;
				ПолеГруппировкиКолонок = ИмяПоля;
			ИначеЕсли ДополнительныеСвойства.Свойство("Сравнение") И НРег(ИмяПоля)=НРег(ДополнительныеСвойства.Сравнение) Тогда
				КоличествоПоказателей = КоличествоПоказателейСКД(Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы);
				Если КоличествоПоказателей>1 Тогда
					// отключение режима сравнения
					ДополнительныеСвойства.Удалить("Сравнение");
				    ПолеСравнения = Неопределено;
					ПоказыватьАбсолютноеИзменение = Ложь;
					ПоказыватьОтносительноеИзменение = Ложь;
					Элемент.Использование = Ложь;
					Продолжить;
				Иначе
					// определили сравнение
					Если Элементы.ПолеСравнения.СписокВыбора.НайтиПоЗначению(ИмяПоля)=Неопределено И НЕ ДоступноеПоле=Неопределено Тогда
						Элементы.ПолеСравнения.СписокВыбора.Вставить(Элементы.ПолеСравнения.СписокВыбора.Количество()-1, ИмяПоля, ДоступноеПоле.Заголовок); 
					КонецЕсли;
					ПолеСравнения = ИмяПоля;
				КонецЕсли; 
			ИначеЕсли ДополнительныеСвойства.Свойство("Сравнение") И ИмяПоля="ДинамическийПериод" И ТипЗнч(ДополнительныеСвойства.Сравнение)=Тип("ПеречислениеСсылка.Периодичность") Тогда
				КоличествоПоказателей = КоличествоПоказателейСКД(Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы);
				Если КоличествоПоказателей>1 Тогда
					// отключение режима сравнения
					ДополнительныеСвойства.Удалить("Сравнение");
				    ПолеСравнения = Неопределено;
					ПоказыватьАбсолютноеИзменение = Ложь;
					ПоказыватьОтносительноеИзменение = Ложь;
					Элемент.Использование = Ложь;
					Продолжить;
				Иначе
					// определили сравнение по периоду
					Если Элементы.ПолеСравнения.СписокВыбора.НайтиПоЗначению(ДополнительныеСвойства.Сравнение)=Неопределено Тогда
						Элементы.ПолеСравнения.СписокВыбора.Вставить(Элементы.ПолеСравнения.СписокВыбора.Количество()-1, ДополнительныеСвойства.Сравнение); 
					КонецЕсли;
					ПолеСравнения = ДополнительныеСвойства.Сравнение;
				КонецЕсли; 
			КонецЕсли; 
			ДобавитьОписанияГруппировокРекурсивно(Элемент.Структура, ЭтоСтрока);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНачальноеПоложение(Стр, Группировка)
	
	РазвернутьГруппировку = Ложь;
	МассивПолей = Новый Массив;
	Если ТипЗнч(Группировка)=Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		МассивПолей.Добавить(Группировка);
	Иначе
		Для каждого Поле Из Группировка.ПоляГруппировки.Элементы Цикл
			Если НЕ ТипЗнч(Поле)=Тип("ПолеГруппировкиКомпоновкиДанных") ИЛИ НЕ Поле.Использование Тогда
				Продолжить;
			КонецЕсли; 
			ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Поле.Поле);
			Если ДоступноеПоле=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивПолей.Добавить(ДоступноеПоле);
		КонецЦикла;
	КонецЕсли; 
	
	Для каждого ДоступноеПоле Из МассивПолей Цикл
		РазвернутьПоле = Истина;
		Для каждого Тип Из ДоступноеПоле.ТипЗначения.Типы() Цикл
			Если Тип=Тип("СправочникСсылка.Валюты") ИЛИ 
				 Тип=Тип("СправочникСсылка.СтруктурныеЕдиницы") ИЛИ 
				 Тип=Тип("СправочникСсылка.Кассы") ИЛИ 
				 Тип=Тип("СправочникСсылка.БанковскиеСчета") ИЛИ 
				 Тип=Тип("СправочникСсылка.Организации") ИЛИ 
				 Тип=Тип("СправочникСсылка.НаправленияДеятельности") ИЛИ
				 Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Продолжить;
			Иначе
				РазвернутьПоле = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если РазвернутьПоле Тогда
			РазвернутьГруппировку = Истина;
			Продолжить;
		Иначе
			РазвернутьГруппировку = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Стр.ДополнительныеПараметры.Вставить("Развернуть", РазвернутьГруппировку);
	
КонецПроцедуры
 
&НаСервере
Функция СместитьГруппировку(Идентификатор, Шаг)
	
	Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
	Группа = Элементы[Стр.ИмяГруппы];
	ГруппаРеквизитов = Элементы[СтрЗаменить(Стр.ИмяГруппы, "_Группа", "_Реквизиты")];
	ИмяРеквизита = СтрЗаменить(Стр.ИмяГруппы, "_Группа", "");
	
	Индекс = ПоляНастроек.ПолучитьЭлементы().Индекс(Стр);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипГруппировка());
	Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
	ИндексВМассиве = Строки.Найти(Стр);
	Если ИндексВМассиве+Шаг<0 ИЛИ ИндексВМассиве+Шаг>=Строки.Количество() Тогда
		// Перемещение не требуется
		Возврат Ложь;
	Иначе
		СтрСмещения = Строки[ИндексВМассиве+Шаг];
		Если СтрСмещения.ПолучитьЭлементы().Количество()>0 И Стр.ПолучитьЭлементы().Количество()=0 И ПроверитьВозможностьДобавленияГруппировки(Стр, СтрСмещения) Тогда
			// Перемещаем в группу полей
			Если Шаг<0 Тогда
				НоваяСтрока = СтрСмещения.ПолучитьЭлементы().Добавить();
			Иначе
				НоваяСтрока = СтрСмещения.ПолучитьЭлементы().Вставить(0);
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			НоваяСтрока.Тип = ТипРеквизит();
			ПоляНастроек.ПолучитьЭлементы().Удалить(Стр);
			ГруппаСмещения = Элементы[СтрЗаменить(СтрСмещения.ИмяГруппы, "_Группа", "_Реквизиты")];
			Если Шаг<0 Тогда
				Элементы.Переместить(Группа, ГруппаСмещения); 
				Элементы.Переместить(ГруппаРеквизитов, ГруппаСмещения);
			Иначе
				Элементы.Переместить(Группа, ГруппаСмещения, ГруппаСмещения.ПодчиненныеЭлементы[0]); 
				Элементы.Переместить(ГруппаРеквизитов, ГруппаСмещения, ГруппаСмещения.ПодчиненныеЭлементы[0]);
			КонецЕсли;
			ДобавитьОтступ(ИмяРеквизита, Группа);
			КартинкаИерархияГруппировки = Элементы.Найти(ИмяРеквизита+"_Иерархия");
			Если НЕ КартинкаИерархияГруппировки=Неопределено Тогда
				Элементы.Удалить(КартинкаИерархияГруппировки);
			КонецЕсли; 
		ИначеЕсли ИндексВМассиве+Шаг=Строки.Количество()-1 Тогда
			// Добавление в конец
			ПоляНастроек.ПолучитьЭлементы().Сдвинуть(Индекс, ПоляНастроек.ПолучитьЭлементы().Количество()-Индекс-1); 
			Элементы.Переместить(Группа, Элементы.ГруппаСтрокиЭлементы); 
			Элементы.Переместить(ГруппаРеквизитов, Элементы.ГруппаСтрокиЭлементы);
		Иначе
			СтрСоСмещением = Строки[ИндексВМассиве+Шаг];
			ИндексВставки = ПоляНастроек.ПолучитьЭлементы().Индекс(СтрСоСмещением);
			ПоляНастроек.ПолучитьЭлементы().Сдвинуть(Индекс, ИндексВставки-Индекс);
			Если Шаг>0 Тогда
				СтрВставки = Строки[ИндексВМассиве+Шаг+1];
			Иначе
				СтрВставки = СтрСоСмещением;
			КонецЕсли; 
			Элементы.Переместить(Группа, Элементы.ГруппаСтрокиЭлементы, Элементы[СтрВставки.ИмяГруппы]); 
			Элементы.Переместить(ГруппаРеквизитов, Элементы.ГруппаСтрокиЭлементы, Элементы[СтрВставки.ИмяГруппы]); 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьДобавленияГруппировки(Стр, СтрГруппа)
	
	Схема = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	
	// Группировки-периоды нельзя включать в группы с другими группировками
	ПолеСхемы = ОтчетыУНФ.ПолеСхемы(Схема, Стр.Поле);
	Если ТипЗнч(ПолеСхемы)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И ПолеСхемы.Роль.НомерПериода>0 Тогда
		Для каждого ПодСтр Из СтрГруппа.ПолучитьЭлементы() Цикл
			ВложенноеПоле = ОтчетыУНФ.ПолеСхемы(Схема, ПодСтр.Поле);
			Если ТипЗнч(ВложенноеПоле)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И ВложенноеПоле.Роль.НомерПериода=0 Тогда
				Возврат Ложь;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СместитьРеквизит(Идентификатор, Шаг)
	
	Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
	Группа = Элементы[Стр.ИмяГруппы];
	ГруппаРеквизитов = Элементы[СтрЗаменить(Стр.ИмяГруппы, "_Группа", "_Реквизиты")];
	ИмяРеквизита = СтрЗаменить(Стр.ИмяГруппы, "_Группа", "");
	
	СтрокаРодитель = Стр.ПолучитьРодителя();
	Строки = СтрокаРодитель.ПолучитьЭлементы();
	Индекс = Строки.Индекс(Стр);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипГруппировка());
	СтрокиГруппировки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
	ИндексГруппировки = СтрокиГруппировки.Найти(СтрокаРодитель);
	
	Если Индекс+Шаг<0 Тогда
		// Вынос из группы
		Если Строки.Количество()<=1 Тогда
			// Последнюю строку не выносим
			Возврат Ложь;
		КонецЕсли; 
		НоваяСтрока = ПоляНастроек.ПолучитьЭлементы().Вставить(ПоляНастроек.ПолучитьЭлементы().Индекс(СтрокаРодитель));
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.Тип = ТипГруппировка();
		Строки.Удалить(Стр);
		СтрокаРодитель.Заголовок = ЗаголовокГруппыПолей(СтрокаРодитель);
		ОбновитьЗаголовокЭлемента(СтрокаРодитель);
		КартинкаОтступ = Элементы[СтрЗаменить(Стр.ИмяГруппы, "_Группа", "_Отступ")];
		Элементы.Удалить(КартинкаОтступ);
		ДобавитьПереключательИерархииГруппировки(Стр, ИмяРеквизита, Группа);
		Элементы.Переместить(Группа, Элементы.ГруппаСтрокиЭлементы, Элементы[СтрокаРодитель.ИмяГруппы]);
		Элементы.Переместить(ГруппаРеквизитов, Элементы.ГруппаСтрокиЭлементы, Элементы[СтрокаРодитель.ИмяГруппы]);
	ИначеЕсли Индекс+Шаг>=Строки.Количество() Тогда
		// Вынос из группы
		Если Строки.Количество()<=1 Тогда
			// Последнюю строку не выносим
			Возврат Ложь;
		КонецЕсли; 
		ИндексВставки = ПоляНастроек.ПолучитьЭлементы().Индекс(СтрокаРодитель)+1;
		ИндексВМассиве = СтрокиГруппировки.Найти(СтрокаРодитель)+1;
		Если ИндексВМассиве>=СтрокиГруппировки.Количество() Тогда
			НоваяСтрока = ПоляНастроек.ПолучитьЭлементы().Добавить();
		Иначе
			НоваяСтрока = ПоляНастроек.ПолучитьЭлементы().Вставить(ИндексВставки);
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.Тип = ТипГруппировка();
		Строки.Удалить(Стр);
		СтрокаРодитель.Заголовок = ЗаголовокГруппыПолей(СтрокаРодитель);
		ОбновитьЗаголовокЭлемента(СтрокаРодитель);
		КартинкаОтступ =Элементы[СтрЗаменить(Стр.ИмяГруппы, "_Группа", "_Отступ")];
		Элементы.Удалить(КартинкаОтступ);
		ДобавитьПереключательИерархииГруппировки(Стр, ИмяРеквизита, Группа);
		Если ИндексВМассиве>=СтрокиГруппировки.Количество() Тогда
			Элементы.Переместить(Группа, Элементы.ГруппаСтрокиЭлементы);
			Элементы.Переместить(ГруппаРеквизитов, Элементы.ГруппаСтрокиЭлементы);
		Иначе
			СтрокаВставки = ПоляНастроек.ПолучитьЭлементы().Получить(ИндексВставки+1);
			Элементы.Переместить(Группа, Элементы.ГруппаСтрокиЭлементы, Элементы[СтрокаВставки.ИмяГруппы]);
			Элементы.Переместить(ГруппаРеквизитов, Элементы.ГруппаСтрокиЭлементы, Элементы[СтрокаВставки.ИмяГруппы]);
		КонецЕсли; 
	ИначеЕсли Индекс+Шаг=Строки.Количество()-1 Тогда
		// Добавление в конец
		Строки.Сдвинуть(Индекс, СтрокаРодитель.ПолучитьЭлементы().Количество()-Индекс-1); 
		Элементы.Переместить(Группа, Группа.Родитель); 
		Элементы.Переместить(ГруппаРеквизитов, Группа.Родитель); 
	Иначе
		Если Шаг=-1 Тогда
			СтрВставки = Строки[Индекс-1];
		Иначе
			СтрВставки = Строки[Индекс+2];
		КонецЕсли;
		СтрокаРодитель.ПолучитьЭлементы().Сдвинуть(Индекс, Шаг);
		ГруппаВставки = Элементы[СтрВставки.ИмяГруппы];
		ГруппаКомандВставки = Элементы[СтрЗаменить(СтрВставки.ИмяГруппы, "_Группа", "_ГруппаКоманды")];
		Элементы.Переместить(Группа, Группа.Родитель, ГруппаВставки);
		Элементы.Переместить(ГруппаРеквизитов, Группа.Родитель, ГруппаВставки);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементГруппировка(Стр)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипГруппировка());
	Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
	Если Строки.Количество()>0 И Строки.Найти(Стр)=Строки.Количество()-1 Тогда
		ИндексВставки = Неопределено;
	Иначе
		ИндексВставки = ПоляНастроек.ПолучитьЭлементы().Индекс(Строки[Строки.Найти(Стр)+1]);
	КонецЕсли; 
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		
		ИмяРеквизита = Реквизит.Ключ;
		
		Если ИндексВставки=Неопределено Тогда
			Группа = Элементы.Добавить(ИмяРеквизита+"_Группа", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиЭлементы);
		Иначе
			ИмяГруппыВставки = ПоляНастроек.ПолучитьЭлементы().Получить(ИндексВставки).ИмяГруппы;
			Если НЕ ПустаяСтрока(ИмяГруппыВставки) Тогда
				Группа = Элементы.Вставить(ИмяРеквизита+"_Группа", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиЭлементы, Элементы[ИмяГруппыВставки]);
			Иначе
				Группа = Элементы.Добавить(ИмяРеквизита+"_Группа", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиЭлементы);
			КонецЕсли; 
		КонецЕсли; 
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		ОбновитьЗаголовокЭлемента(Стр); 
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ГруппировкаПриИзменении");
		Элемент.ВысотаЗаголовка = 1;
		
		ДекорацияОтступ = Элементы.Добавить(ИмяРеквизита+"Разделитель", Тип("ДекорацияФормы"), Группа); 
		ДекорацияОтступ.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		ДекорацияОтступ.Ширина = 1;
		
		ЭтаФорма[ИмяРеквизита] = Реквизит.Значение;
		ДобавитьПереключательИерархииГруппировки(Стр, ИмяРеквизита, Группа);
		Стр.Элементы.Вставить(ИмяРеквизита, ИмяРеквизита);
		Стр.ИмяГруппы = Группа.Имя;
		
		ДобавитьКоманды(Стр, ИмяРеквизита, Группа);
	
		ГруппаРеквизиты = Элементы.Добавить(ИмяРеквизита+"_Реквизиты", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиЭлементы);
		ГруппаРеквизиты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаРеквизиты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаРеквизиты.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаРеквизиты.ОтображатьЗаголовок = Ложь;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементРеквизит(Стр)
	
	// Поиск группы реквизитов
	СтрРодителя = Стр.ПолучитьРодителя();
	Для каждого ОписаниеРеквизита Из СтрРодителя.Реквизиты Цикл
		ГруппаРеквизитов = Элементы[ОписаниеРеквизита.Ключ+"_Реквизиты"];
	КонецЦикла; 
	Если НЕ ТипЗнч(ГруппаРеквизитов)=Тип("ГруппаФормы") Тогда
		Возврат;
	КонецЕсли; 
	// Добавление элементов реквизитов
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		
		ИмяРеквизита = Реквизит.Ключ;
		
		Группа = Элементы.Добавить(ИмяРеквизита+"_Группа", Тип("ГруппаФормы"), ГруппаРеквизитов);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		ДобавитьОтступ(ИмяРеквизита, Группа);
		
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Элемент.ВысотаЗаголовка = 1;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_РеквизитПриИзменении");
		
		ДекорацияОтступ = Элементы.Добавить(ИмяРеквизита+"Разделитель", Тип("ДекорацияФормы"), Группа); 
		ДекорацияОтступ.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		ДекорацияОтступ.Ширина = 1;
		
		ЭтаФорма[ИмяРеквизита] = Реквизит.Значение;
		Стр.Элементы.Вставить(ИмяРеквизита, ИмяРеквизита);
		Стр.ИмяГруппы = Группа.Имя;
		
		ДобавитьКоманды(Стр, ИмяРеквизита, Группа);
		
		ГруппаРеквизиты = Элементы.Добавить(ИмяРеквизита+"_Реквизиты", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиЭлементы);
		ГруппаРеквизиты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаРеквизиты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаРеквизиты.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаРеквизиты.ОтображатьЗаголовок = Ложь;
		
		ОбновитьЗаголовокЭлемента(Стр); 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтступ(ИмяРеквизита, Группа)
	
	Если Группа.ПодчиненныеЭлементы.Количество()>0 Тогда
		КартинкаОтступ = Элементы.Вставить(ИмяРеквизита+"_Отступ", Тип("ДекорацияФормы"), Группа, Группа.ПодчиненныеЭлементы[0]);
	Иначе
		КартинкаОтступ = Элементы.Добавить(ИмяРеквизита+"_Отступ", Тип("ДекорацияФормы"), Группа);
	КонецЕсли; 
	КартинкаОтступ.Вид = ВидДекорацииФормы.Картинка;
	КартинкаОтступ.РастягиватьПоГоризонтали = Ложь;
	КартинкаОтступ.РастягиватьПоВертикали = Ложь;
	КартинкаОтступ.Высота = 1;
	КартинкаОтступ.Ширина = 2;
	КартинкаОтступ.Картинка = БиблиотекаКартинок.КоннекторВерхПравоНиз;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьПереключательИерархииГруппировки(Стр, ИмяРеквизита, Группа)
	
	Если ПустаяСтрока(Стр.Поле) Тогда
		Возврат;
	КонецЕсли; 
	ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Стр.Поле));
	Если ДоступноеПоле=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ОтчетыУНФ.ОписаниеТиповСодержитИерархическийТип(ДоступноеПоле.ТипЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаКоманд = Элементы.Найти(ИмяРеквизита+"_ГруппаКоманды");
	Если ГруппаКоманд=Неопределено Тогда
		Кнопка = Элементы.Добавить(ИмяРеквизита+"_Иерархия", Тип("ДекорацияФормы"), Группа);
	Иначе
		Кнопка = Элементы.Вставить(ИмяРеквизита+"_Иерархия", Тип("ДекорацияФормы"), Группа, ГруппаКоманд);
	КонецЕсли; 
	Кнопка.Вид = ВидДекорацииФормы.Картинка;
	Кнопка.Гиперссылка = Истина;
	Кнопка.Ширина = 2;
	Кнопка.Высота = 1;
	Кнопка.РастягиватьПоГоризонтали = Ложь;
	Кнопка.РастягиватьПоВертикали = Ложь;
	Если НЕ Стр.ДополнительныеПараметры.Свойство("ТипГруппировки") Тогда
		Стр.ДополнительныеПараметры.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
	КонецЕсли;
	УстановитьПредставлениеКнопкиИерархииГруппировки(Кнопка, Стр);
	Кнопка.УстановитьДействие("Нажатие", "Подключаемый_ИерархияГруппировкиНажатие");
		
КонецПроцедуры
 
&НаСервере
Процедура ДобавитьКоманды(Стр, ИмяРеквизита, Группа)
	
	ГруппаКоманд = Элементы.Добавить(ИмяРеквизита+"_ГруппаКоманды", Тип("ГруппаФормы"), Группа);
	ГруппаКоманд.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКоманд.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаКоманд.ОтображатьЗаголовок = Ложь;
	ГруппаКоманд.РастягиватьПоГоризонтали = Ложь;
	ГруппаКоманд.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Если Стр.Тип=ТипПоказатель() ИЛИ Стр.Тип=ТипГруппаПоказателей() Тогда
		ГруппаКоманд.Видимость = РежимРедактированияКолонок;
	Иначе
		ГруппаКоманд.Видимость = РежимРедактированияСтрок;
	КонецЕсли; 
	
	Кнопка = Элементы.Добавить(ИмяРеквизита+"СместитьВверх", Тип("ДекорацияФормы"), ГруппаКоманд);
	Кнопка.Вид = ВидДекорацииФормы.Картинка;
	Кнопка.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	Кнопка.Гиперссылка = Истина;
	Кнопка.Ширина = 1;
	Кнопка.Высота = 1;
	Кнопка.РастягиватьПоГоризонтали = Ложь;
	Кнопка.РастягиватьПоВертикали = Ложь;
	Кнопка.Картинка = БиблиотекаКартинок.СтрелкаВверхУзкая;
	Кнопка.УстановитьДействие("Нажатие", "Подключаемый_СместитьВверх");
	
	Кнопка = Элементы.Добавить(ИмяРеквизита+"СместитьВниз", Тип("ДекорацияФормы"), ГруппаКоманд);
	Кнопка.Вид = ВидДекорацииФормы.Картинка;
	Кнопка.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	Кнопка.Гиперссылка = Истина;
	Кнопка.Ширина = 1;
	Кнопка.Высота = 1;
	Кнопка.РастягиватьПоГоризонтали = Ложь;
	Кнопка.РастягиватьПоВертикали = Ложь;
	Кнопка.Картинка = БиблиотекаКартинок.СтрелкаВнизУзкая;
	Кнопка.УстановитьДействие("Нажатие", "Подключаемый_СместитьВниз");
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеКнопкиИерархииГруппировки(Кнопка, Стр)
	
	Если Стр.ДополнительныеПараметры.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Элементы Тогда
		Кнопка.Картинка = БиблиотекаКартинок.РежимВыбораЭлементов;
		Кнопка.Подсказка = НСтр("ru = 'Отображать только элементы'");
	ИначеЕсли Стр.ДополнительныеПараметры.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
		Кнопка.Картинка = БиблиотекаКартинок.РежимВыбораГрупп;
		Кнопка.Подсказка = НСтр("ru = 'Отображать только иерархию'");
	ИначеЕсли Стр.ДополнительныеПараметры.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
		Кнопка.Картинка = БиблиотекаКартинок.РежимВыбораГруппИЭлементов;
		Кнопка.Подсказка = НСтр("ru = 'Отображать элементы и иерархию'");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодчиненныеПоля(СтрРодитель, Значение)
	
	Для каждого Стр Из СтрРодитель.ПолучитьЭлементы() Цикл
		Если НЕ Стр.Создан Тогда
			Продолжить;
		КонецЕсли;
		Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
			ЭтаФорма[ОписаниеРеквизита.Ключ] = Значение;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ЕстьВыводимыеПоля(СтрРодитель)
	
	Для каждого Стр Из СтрРодитель.ПолучитьЭлементы() Цикл
		Если НЕ Стр.Создан Тогда
			Продолжить;
		КонецЕсли;
		Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
			Если ЭтаФорма[ОписаниеРеквизита.Ключ] Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьГруппировкиИРеквизиты(ТолькоГруппировкиСтрок = Ложь, ТолькоГруппировкиКолонок = Ложь)
	
	ТребуетсяТаблица = ТребуетсяТаблица();
	Структура = Отчет.КомпоновщикНастроек.Настройки.Структура;
	СуществующийЭлемент = ЭлементСтуктурыГруппировкаТаблица(Структура);
	Если ТолькоГруппировкиСтрок=ТолькоГруппировкиКолонок Тогда
		Если НЕ СуществующийЭлемент=Неопределено Тогда
			Структура.Удалить(СуществующийЭлемент);
		КонецЕсли; 
		СтруктураСтрок = Отчет.КомпоновщикНастроек.Настройки.Структура;
	ИначеЕсли ТолькоГруппировкиСтрок Тогда
		Если ТребуетсяТаблица И ТипЗнч(СуществующийЭлемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			СтруктураКолонок = СуществующийЭлемент.Колонки;
			СтруктураСтрок = СуществующийЭлемент.Строки;
			СтруктураСтрок.Очистить();
		Иначе
			ТолькоГруппировкиСтрок = Ложь;
			Если НЕ СуществующийЭлемент=Неопределено Тогда
				Структура.Удалить(СуществующийЭлемент);
			КонецЕсли; 
			СтруктураСтрок = Структура;
		КонецЕсли;
	ИначеЕсли ТолькоГруппировкиКолонок Тогда
		Структура = Отчет.КомпоновщикНастроек.Настройки.Структура;
		Если ТребуетсяТаблица И ТипЗнч(СуществующийЭлемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			СтруктураКолонок = СуществующийЭлемент.Колонки;
			СтруктураСтрок = СуществующийЭлемент.Строки;
			СтруктураКолонок.Очистить();
		Иначе
			ТолькоГруппировкиКолонок = Ложь;
			Если НЕ СуществующийЭлемент=Неопределено Тогда
				Структура.Удалить(СуществующийЭлемент);
			КонецЕсли; 
			СтруктураСтрок = Структура;
		КонецЕсли;
	КонецЕсли; 
	
	Если ТребуетсяТаблица И НЕ ТолькоГруппировкиСтрок И НЕ ТолькоГруппировкиКолонок Тогда
		ТаблицаКомпоновки = СтруктураСтрок.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		СтруктураСтрок = ТаблицаКомпоновки.Строки;
		СтруктураКолонок = ТаблицаКомпоновки.Колонки;
	КонецЕсли;
	
	Если НЕ ТолькоГруппировкиСтрок Тогда
		Если Не ПустаяСтрока(ПолеГруппировкиКолонок) Тогда
			ДобавитьГруппировкуКолонки(СтруктураКолонок, ПолеГруппировкиКолонок); 
		КонецЕсли; 
		Если НастройкиОтчета.ИспользоватьСравнение И ЗначениеЗаполнено(ПолеСравнения) Тогда
			ДобавитьГруппировкуСравнения(СтруктураКолонок); 
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ТолькоГруппировкиКолонок Тогда
		Для каждого Стр Из ПоляНастроек.ПолучитьЭлементы() Цикл
			Если НЕ Стр.Тип=ТипГруппировка() Тогда
				Продолжить;
			КонецЕсли;
			Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
				Использование = ЭтаФорма[ОписаниеРеквизита.Ключ];
				Если НЕ Использование Тогда
					Продолжить;
				КонецЕсли; 
				Если ТребуетсяТаблица Тогда
					ТекущийЭлементСтруктуры = СтруктураСтрок.Добавить();
				Иначе
					ТекущийЭлементСтруктуры = СтруктураСтрок.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				КонецЕсли; 
				ТекущийЭлементСтруктуры.Использование = Использование;
				ТекущийЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				ТекущийЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
				СтруктураСтрок = ТекущийЭлементСтруктуры.Структура;
				Если Стр.ПолучитьЭлементы().Количество()=0 Тогда
					Поле = ТекущийЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					Поле.Поле = Новый ПолеКомпоновкиДанных(Стр.Поле);
					Поле.Использование = Использование;
					Поле.ТипГруппировки = Стр.ДополнительныеПараметры.ТипГруппировки;
				Иначе
					Для каждого СтрРеквизит Из Стр.ПолучитьЭлементы() Цикл
						Для каждого ОписаниеПоля Из СтрРеквизит.Реквизиты Цикл
							Если НЕ ЭтаФорма[ОписаниеПоля.Ключ] Тогда
								Продолжить;
							КонецЕсли; 
							Поле = ТекущийЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
							Поле.Поле = Новый ПолеКомпоновкиДанных(СтрРеквизит.Поле);
							Поле.Использование = Использование;
							Поле.ТипГруппировки = СтрРеквизит.ДополнительныеПараметры.ТипГруппировки;
						КонецЦикла; 
					КонецЦикла; 
				КонецЕсли;
				Стр.Заголовок = Строка(ТекущийЭлементСтруктуры.ПоляГруппировки);
				ОбновитьЗаголовокЭлемента(Стр);
				ОпределитьНачальноеПоложение(Стр, ТекущийЭлементСтруктуры);
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяТаблица()
	
	Возврат Не ПустаяСтрока(ПолеГруппировкиКолонок) ИЛИ (НастройкиОтчета.ИспользоватьСравнение И ЗначениеЗаполнено(ПолеСравнения));
	
КонецФункции

&НаСервере
Процедура ДобавитьГруппировкуКолонки(СтруктураКолонок, ИмяПоля)
	
	ТекущийЭлементСтруктуры = СтруктураКолонок.Добавить();
	ТекущийЭлементСтруктуры.Использование = Истина;
	ТекущийЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ТекущийЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Поле = ТекущийЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Поле.Использование = Истина;
	Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	СтруктураКолонок = ТекущийЭлементСтруктуры.Структура;
	
КонецПроцедуры

&НаСервере
Функция СписокПолейГруппировок(Сравнение = Ложь)
	
	СписокВыбора = Новый СписокЗначений;
	
	ТекущееКоличество = СписокВыбора.Количество();
	Для ии = 1 По ТекущееКоличество-1 Цикл
		Если ТипЗнч(СписокВыбора[ТекущееКоличество-ии].Значение)=Тип("ПеречислениеСсылка.Периодичность") Тогда
			Продолжить;
		КонецЕсли; 
		СписокВыбора.Удалить(ТекущееКоличество-ии);
	КонецЦикла;
	
	Если НЕ Сравнение ИЛИ НастройкиОтчета.ИспользоватьДополнительныеРежимыСравнения Тогда
		ДополнительныеГруппировкиКолонок = ?(НастройкиОтчета.Свойство("ДополнительныеГруппировкиКолонок"), НастройкиОтчета.ДополнительныеГруппировкиКолонок, Неопределено);
		Если ТипЗнч(ДополнительныеГруппировкиКолонок)=Тип("СписокЗначений") Тогда
			Для каждого ОписаниеПоля Из ДополнительныеГруппировкиКолонок Цикл
				Если ПустаяСтрока(ОписаниеПоля.Представление) Тогда
					ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ОписаниеПоля.Значение));
					Если ДоступноеПоле=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ПредставлениеПоля = ДоступноеПоле.Заголовок;
				Иначе
					ПредставлениеПоля = ОписаниеПоля.Представление;
				КонецЕсли; 
				СписокВыбора.Добавить(ОписаниеПоля.Значение, ПредставлениеПоля);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если (НастройкиОтчета.РазрешитьДобавлениеПрочихГруппировокКолонок И НЕ Сравнение) 
		ИЛИ (НастройкиОтчета.РазрешитьДобавлениеПрочихПолейСравнения И Сравнение) Тогда
		СписокВыбора.Добавить("<Прочие>", НСтр("ru = 'Прочее'"),, БиблиотекаКартинок.Выбрать);
	КонецЕсли; 
	Возврат СписокВыбора;
	
КонецФункции

&НаСервере
Функция СписокДобавленныхГруппировок()
	
	СписокПолей = Новый СписокЗначений;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипГруппировка());
	СтрокиПолей = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
	Для каждого СтрПоле Из СтрокиПолей Цикл
		Пропустить = Истина;
		Для каждого ОписаниеРеквизита Из СтрПоле.Реквизиты Цикл
			Если ЭтаФорма[ОписаниеРеквизита.Ключ] Тогда
				Пропустить = Ложь;
			КонецЕсли; 
		КонецЦикла; 
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли; 
		СписокПолей.Добавить(СтрПоле.Поле);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипРеквизит());
	СтрокиПолей = СтрокиДерева(ПоляНастроек, СтруктураОтбора, Истина);
	Для каждого СтрПоле Из СтрокиПолей Цикл
		СписокПолей.Добавить(СтрПоле.Поле);
	КонецЦикла;
	
	Возврат СписокПолей;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьГруппировкуРеквизит(Путь)
	
	Если Найти(Путь, ".")>0 Тогда
		ИмяРодителя = Лев(Путь, Найти(Путь, ".")-1);
		Стр = СтрокаОписанияПоля(ТипГруппировка(), ИмяРодителя, ПоляНастроек);
		СтрРеквизит = СтрокаОписанияПоля(ТипРеквизит(), ИмяРодителя, ПоляНастроек);
		Если НЕ Стр=Неопределено Тогда
			ИмяЭлемента = ДобавитьОписаниеРеквизита(Путь,, Стр.ПолучитьИдентификатор());
			Если НЕ ПустаяСтрока(ИмяЭлемента) Тогда
				ПриИзмененииГруппировкиРеквизита(ИмяЭлемента);
			КонецЕсли; 
			Возврат;
		ИначеЕсли НЕ СтрРеквизит=Неопределено Тогда
			ИмяЭлемента = ДобавитьОписаниеРеквизита(Путь,, СтрРеквизит.ПолучитьРодителя().ПолучитьИдентификатор());
			Если НЕ ПустаяСтрока(ИмяЭлемента) Тогда
				ПриИзмененииГруппировкиРеквизита(ИмяЭлемента);
			КонецЕсли; 
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ИмяЭлемента = ДобавитьОписаниеГруппировки(Путь);
	Если НЕ ПустаяСтрока(ИмяЭлемента) Тогда
		ПриИзмененииГруппировкиРеквизита(ИмяЭлемента);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область Диаграммы

&НаСервере
Процедура УстановитьЗначенияДиаграммыПоУмолчаниюРекурсивно(ЭлементыВыбора)
	
	Для каждого ЭлементВыбор Из ЭлементыВыбора Цикл
		Если ЗначениеЗаполнено(ДиаграммаЗначения) Тогда
			Прервать;
		КонецЕсли; 
		Если ТипЗнч(ЭлементВыбор)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			УстановитьЗначенияДиаграммыПоУмолчаниюРекурсивно(ЭлементВыбор.Элементы);
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЭлементВыбор)=Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ЭлементВыбор.Поле);
		Если НЕ ДоступноеПоле=Неопределено И ДоступноеПоле.Ресурс Тогда
			ДиаграммаЗначения = Строка(ЭлементВыбор.Поле);
			ОбновитьНастройкиДиаграммы();
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ТипДиаграммыЭлементаСтруктуры(ЭлементДиаграмма)
	
	Если НЕ ТипЗнч(ЭлементДиаграмма)=Тип("ДиаграммаКомпоновкиДанных") ИЛИ НЕ ЭлементДиаграмма.Использование Тогда
		Возврат Неопределено;
	КонецЕсли;
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	Параметр = ЭлементДиаграмма.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипДиаграммы"));
	Если Параметр=Неопределено ИЛИ НЕ Параметр.Использование Тогда
		Параметр = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипДиаграммы"));
	КонецЕсли; 
	Если НЕ Параметр=Неопределено И Параметр.Использование Тогда
		Тип = Параметр.Значение;
	Иначе
		Тип = ТипДиаграммы.Гистограмма;
		Если НЕ Параметр=Неопределено Тогда
			Параметр.Значение = Тип;
			Параметр.Использование = Истина;
		КонецЕсли; 
	КонецЕсли;
	Возврат Тип;
	
КонецФункции

&НаСервере
Функция ПроверитьСовместимостьДиаграммы(ИмяПоляПроверки = "")
	
	Результат = Истина;
	
	Если НЕ ЗначениеЗаполнено(ВидДиаграммы) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Схема = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	Если ЗначениеЗаполнено(ДиаграммаТочки) Тогда
		ПолеТочка = ОтчетыУНФ.ПолеСхемы(Схема, ДиаграммаТочки);
		ТочкаПериод = (ТипЗнч(ПолеТочка)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И ПолеТочка.Роль.НомерПериода>0);
		Если ЗначениеЗаполнено(ДиаграммаСерии) Тогда
			ПолеСерия = ОтчетыУНФ.ПолеСхемы(Схема, ДиаграммаСерии);
			СерияПериод = (ТипЗнч(ПолеСерия)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И ПолеСерия.Роль.НомерПериода>0);
		Иначе
			ПолеСерия = Неопределено;
			СерияПериод = Ложь;
		КонецЕсли; 	
	Иначе
		ПолеТочка = Неопределено;
		ТочкаПериод = Ложь;
		ПолеСерия = Неопределено;
		СерияПериод = Ложь;
	КонецЕсли;
	
	Если НЕ СерияПериод И НЕ ТочкаПериод Тогда
		Возврат Результат;
	КонецЕсли; 
	
	МассивПолей = Новый Массив;
	Если НЕ ПустаяСтрока(ИмяПоляПроверки) Тогда
		МассивПолей.Добавить(ИмяПоляПроверки);
	Иначе
		ПоляГруппировокРекурсивно(МассивПолей, Отчет.КомпоновщикНастроек.Настройки.Структура);
	КонецЕсли; 
	Для каждого ИмяПоля Из МассивПолей Цикл
		Поле = ОтчетыУНФ.ПолеСхемы(Схема, ИмяПоля);
		Если НЕ ТипЗнч(Поле)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если Поле.Роль.НомерПериода=0 Тогда
			Продолжить;
		КонецЕсли;
		Если (ТочкаПериод И НЕ ИмяПоля=ДиаграммаТочки) ИЛИ (СерияПериод И НЕ ИмяПоля=ДиаграммаСерии) Тогда
			Если НЕ ПустаяСтрока(ИмяПоляПроверки) Тогда
				Если ТочкаПериод И НЕ ИмяПоля=ДиаграммаТочки Тогда
					ОписаниеПоля = """"+?(ПустаяСтрока(ПолеТочка.Заголовок), ПолеТочка.Поле, ПолеТочка.Заголовок)+"""";
					ОписаниеПоля = ОписаниеПоля+НСтр("ru = ' в диаграмме'");
				ИначеЕсли СерияПериод И НЕ ИмяПоля=ДиаграммаСерии Тогда
					ОписаниеПоля = """"+?(ПустаяСтрока(ПолеСерия.Заголовок), ПолеСерия.Поле, ПолеСерия.Заголовок)+"""";
					ОписаниеПоля = ОписаниеПоля+НСтр("ru = ' в диаграмме'");
				КонецЕсли; 
			Иначе
				ОписаниеПоля = """"+?(ПустаяСтрока(Поле.Заголовок), Поле.Поле, Поле.Заголовок)+"""";
				ОписаниеПоля = ОписаниеПоля+НСтр("ru = ' в структуре отчета'");
				Если ТочкаПериод И НЕ ИмяПоля=ДиаграммаТочки Тогда
					ДиаграммаТочки = Неопределено;
				КонецЕсли; 
				Если СерияПериод И НЕ ИмяПоля=ДиаграммаСерии Тогда
					ДиаграммаСерии = Неопределено;
				КонецЕсли;
			КонецЕсли; 
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запрещено использование в отчете и диаграмме различных полей-периодов. Предварительно отключите поле %1'"),
			ОписаниеПоля));
			Результат = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область Показатели

&НаСервере
Функция ДобавитьОписаниеПоказателя(Путь, НестандартныйОбработчик = Ложь, Знач ТипКолонки = "")
	
	Если ПустаяСтрока(ТипКолонки) Тогда
		ТипКолонки = ТипПоказатель();
	КонецЕсли; 
	ИмяРеквизита = НовоеИмяРеквизита(ТипКолонки);
	Стр = ДобавитьОписаниеНастройки(ПоляНастроек.ПолучитьЭлементы(), ТипКолонки, Путь);
	Стр.Реквизиты.Вставить(ИмяРеквизита, Истина);
	Стр.НестандартныйОбработчик = НестандартныйОбработчик;
		
	ВнестиИзмененияВРеквизитыНаФорме(Ложь);
	Возврат ИмяРеквизита;
	
КонецФункции
 
&НаСервере
Процедура ЗаполнитьОписанияПоказателей(ЭлементыВыбор = Неопределено, СтрРодитель = Неопределено)
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	Если ЭлементыВыбор=Неопределено Тогда
		ЭлементыВыбор = Настройки.Выбор.Элементы;
	КонецЕсли;
	Если СтрРодитель=Неопределено Тогда
		СтрРодитель = ПоляНастроек;
	КонецЕсли; 
	
	Для каждого Показатель Из ЭлементыВыбор Цикл
		Если ТипЗнч(Показатель)=Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Показатель)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ИмяРеквизита = ТипГруппаПоказателей()+СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
			СтрГруппы = СтрРодитель.ПолучитьЭлементы().Добавить();
			СтрГруппы.Тип = ТипГруппаПоказателей();
			СтрГруппы.ВидЭлемента = "Флажок";
			СтрГруппы.ТипЗначения = Новый ОписаниеТипов("Булево");
			СтрГруппы.Заголовок = Показатель.Заголовок;
			СтрГруппы.Реквизиты = Новый Структура(ИмяРеквизита, Показатель.Использование);
			СтрГруппы.Элементы = Новый Структура;
			СтрГруппы.ДополнительныеПараметры = Новый Структура;
			СтрГруппы.ДополнительныеПараметры.Вставить("Расположение", Показатель.Расположение);
			ЗаполнитьОписанияПоказателей(Показатель.Элементы, СтрГруппы);
			Продолжить;
		КонецЕсли; 
		ИмяПоля = Строка(Показатель.Поле);
		ДоступноеПоле = Настройки.ДоступныеПоляВыбора.НайтиПоле(Показатель.Поле);
		Если ДоступноеПоле=Неопределено ИЛИ НЕ ДоступноеПоле.Ресурс Тогда
			Продолжить;
		КонецЕсли; 
		ИмяРеквизита = НовоеИмяРеквизита(ТипПоказатель());
		Стр = СтрРодитель.ПолучитьЭлементы().Добавить();
		Стр.ДополнительныеПараметры = Новый Структура;
		Стр.Тип = ТипПоказатель();
		Стр.Реквизиты = Новый Структура(ИмяРеквизита, Показатель.Использование);
		Стр.Элементы = Новый Структура;
		Стр.Поле = ИмяПоля;
		Стр.ВидЭлемента = "Флажок";
		Стр.ТипЗначения = Новый ОписаниеТипов("Булево");
		Стр.Заголовок = ?(ПустаяСтрока(Показатель.Заголовок), ДоступноеПоле.Заголовок, Показатель.Заголовок);
		Стр.ДополнительныеПараметры = Новый Структура;
		Если Показатель.Заголовок=" " Тогда
			Стр.ДополнительныеПараметры.Вставить("ПустойЗаголовок", Истина);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементГруппаПоказателейПоказатель(Стр)
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		
		ИмяРеквизита = Реквизит.Ключ;
		
		Если Стр.ПолучитьРодителя()=Неопределено Тогда
			ГруппаРодителя = Элементы.ГруппаПоказателиЭлементы;
		Иначе
			СтрРодителя = Стр.ПолучитьРодителя();
			ГруппаРодителя = Элементы[СтрЗаменить(СтрРодителя.ИмяГруппы, "_Группа", "_Поля")];
		КонецЕсли; 
		
		Группа = Элементы.Добавить(ИмяРеквизита+"_Группа", Тип("ГруппаФормы"), ГруппаРодителя);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		Отступ = УровеньОтступа(Стр);
		Для ии = 1 По Отступ Цикл
			ДобавитьОтступ(ИмяРеквизита+ии, Группа);
		КонецЦикла; 
		
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Если Стр.Тип=ТипГруппаПоказателей() Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ГруппаПоказателейПриИзменении");
			Если ПустаяСтрока(Стр.Заголовок) Тогда
				ЗаголовокГруппы = "";
				Для каждого ПодСтр Из Стр.ПолучитьЭлементы() Цикл
					Если ПустаяСтрока(ПодСтр.Заголовок) Тогда
						Продолжить;
					КонецЕсли; 
					ПоказательВыбран = Ложь;
					Для каждого ОписаниеРеквизита Из ПодСтр.Реквизиты Цикл
						Если ЭтотОбъект[ОписаниеРеквизита.Ключ] Тогда
							ПоказательВыбран = Истина;
						КонецЕсли; 
					КонецЦикла; 
					Если НЕ ПоказательВыбран Тогда
						Продолжить;
					КонецЕсли; 
					ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+ПодСтр.Заголовок;
				КонецЦикла;
				Если ПустаяСтрока(ЗаголовокГруппы) Тогда
					ЗаголовокГруппы = " ";
				КонецЕсли; 
				Стр.Заголовок = ЗаголовокГруппы;
			КонецЕсли; 
		Иначе
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПоказательПриИзменении");
		КонецЕсли; 
		ОбновитьЗаголовокЭлемента(Стр);
		Элемент.ВысотаЗаголовка = 1;
		
		ДекорацияОтступ = Элементы.Добавить(ИмяРеквизита+"Разделитель", Тип("ДекорацияФормы"), Группа); 
		ДекорацияОтступ.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		ДекорацияОтступ.Ширина = 1;
		
		Если ЗначениеЗаполнено(Реквизит.Значение) Тогда
			ЭтаФорма[ИмяРеквизита] = Реквизит.Значение;
		КонецЕсли;
		Стр.Элементы.Вставить(ИмяРеквизита, ИмяРеквизита);
		Стр.ИмяГруппы = Группа.Имя;
		
		ДобавитьКоманды(Стр, ИмяРеквизита, Группа);
		
		Если Стр.Тип=ТипГруппаПоказателей() Тогда
			ГруппаРеквизиты = Элементы.Добавить(ИмяРеквизита+"_Поля", Тип("ГруппаФормы"), ГруппаРодителя);
			ГруппаРеквизиты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаРеквизиты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаРеквизиты.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаРеквизиты.ОтображатьЗаголовок = Ложь;
		КонецЕсли; 
		
		Если Стр.Поле="Отступ" Тогда
			Группа.Видимость = Ложь;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УровеньОтступа(Стр)
	
	Позиция = Стр;
	Результат = 0;
	Пока НЕ Позиция.ПолучитьРодителя()=Неопределено Цикл
		Результат = Результат+1;
		Позиция = Позиция.ПолучитьРодителя();
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИзменитьПоказатели(ЭлементыВыбор = Неопределено, СтрРодитель = Неопределено)
	
	Если ЭлементыВыбор=Неопределено Тогда
		ЭлементыВыбор = Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы;
	КонецЕсли; 
	Если СтрРодитель=Неопределено Тогда
		СтрРодитель = ПоляНастроек;
	КонецЕсли; 
	
	Для каждого Стр Из СтрРодитель.ПолучитьЭлементы() Цикл
		Если НЕ Стр.Создан Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.Тип=ТипГруппаПоказателей() Тогда
			Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
				Если НЕ ЭтаФорма[ОписаниеРеквизита.Ключ] Тогда
					Продолжить;
				КонецЕсли; 
				ГруппаПоказателей = ЭлементыВыбор.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ГруппаПоказателей.Заголовок = Стр.Заголовок;
				ГруппаПоказателей.Использование = Истина;
				Если Стр.ДополнительныеПараметры.Свойство("Расположение") Тогда
					ГруппаПоказателей.Расположение = Стр.ДополнительныеПараметры.Расположение;
				КонецЕсли; 
				ИзменитьПоказатели(ГруппаПоказателей.Элементы, Стр);
			КонецЦикла;
			Продолжить;
		КонецЕсли; 
		Если НЕ Стр.Тип=ТипПоказатель() Тогда
			Продолжить;
		КонецЕсли; 
		Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
			Если НЕ ЭтаФорма[ОписаниеРеквизита.Ключ] Тогда
				Продолжить;
			КонецЕсли; 
			ПолеКД = Новый ПолеКомпоновкиДанных(Стр.Поле);
			ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеКД);
			ВыбранноеПоле = ЭлементыВыбор.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеКД;
			ВыбранноеПоле.Использование = Истина;
			Если ДоступноеПоле=Неопределено ИЛИ Стр.Заголовок<>ДоступноеПоле.Заголовок Тогда
				ВыбранноеПоле.Заголовок = Стр.Заголовок;
			КонецЕсли; 
			Если Стр.ДополнительныеПараметры.Свойство("ПустойЗаголовок") И Стр.ДополнительныеПараметры.ПустойЗаголовок Тогда
				ВыбранноеПоле.Заголовок = " ";
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СместитьПоказатель(Идентификатор, Шаг)
	
	Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
	ЭтоГруппа = (Стр.Тип=ТипГруппаПоказателей());
	Группа = Элементы[Стр.ИмяГруппы];
	Если ЭтоГруппа Тогда
		ГруппаПоказателей = Элементы[СтрЗаменить(Стр.ИмяГруппы, "_Группа", "_Поля")];
	КонецЕсли; 
	
	Если Стр.ПолучитьРодителя()=Неопределено Тогда
		Индекс = ПоляНастроек.ПолучитьЭлементы().Индекс(Стр);
		СтруктураОтбора = Новый Структура;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипПоказатель());
		МассивТипов.Добавить(ТипГруппаПоказателей());
		СтруктураОтбора.Вставить("Тип", МассивТипов);
		Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
		ИндексВМассиве = Строки.Найти(Стр);
		СтрокиРодителя = ПоляНастроек.ПолучитьЭлементы();
	Иначе
		Строки = Стр.ПолучитьРодителя().ПолучитьЭлементы();
		Индекс = Строки.Индекс(Стр);
		ИндексВМассиве = Индекс;
		СтрокиРодителя = Строки;
	КонецЕсли; 
	
	Если ИндексВМассиве+Шаг<0 ИЛИ ИндексВМассиве+Шаг>=Строки.Количество() Тогда
		// Перемещение не требуется
		Возврат Ложь;
	ИначеЕсли ИндексВМассиве+Шаг=Строки.Количество()-1 Тогда
		// Добавление в конец
		СтрокиРодителя.Сдвинуть(Индекс, Строки.Количество()-Индекс-1); 
		Элементы.Переместить(Группа, Группа.Родитель); 
		Если ЭтоГруппа Тогда
			Элементы.Переместить(ГруппаПоказателей, ГруппаПоказателей.Родитель);
		КонецЕсли; 
	Иначе
		СтрСоСмещением = Строки[ИндексВМассиве+Шаг];
		ИндексВставки = СтрокиРодителя.Индекс(СтрСоСмещением);
		СтрокиРодителя.Сдвинуть(Индекс, ИндексВставки-Индекс);
		Если Шаг>0 Тогда
			СтрВставки = Строки[ИндексВМассиве+Шаг+1];
		Иначе
			СтрВставки = СтрСоСмещением;
		КонецЕсли; 
		Элементы.Переместить(Группа, Группа.Родитель, Элементы[СтрВставки.ИмяГруппы]); 
		Если ЭтоГруппа Тогда
			Элементы.Переместить(ГруппаПоказателей, ГруппаПоказателей.Родитель, Элементы[СтрВставки.ИмяГруппы]); 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти 

#Область Сравнение

&НаСервере
Процедура ЗаполнитьВариантыСравнения()
	
	Если НЕ НастройкиОтчета.ИспользоватьСравнение Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПолеСравнения.СписокВыбора.Очистить();
	Элементы.ПолеСравнения.СписокВыбора.Добавить(Неопределено, НСтр("ru = 'Не сравнивать'"));
	
	Если НастройкиОтчета.ИспользоватьПериодичность Тогда
		Элементы.ПолеСравнения.СписокВыбора.Добавить(Перечисления.Периодичность.День, НСтр("ru = 'Дни'"));
		Элементы.ПолеСравнения.СписокВыбора.Добавить(Перечисления.Периодичность.Неделя, НСтр("ru = 'Недели'"));
		Элементы.ПолеСравнения.СписокВыбора.Добавить(Перечисления.Периодичность.Месяц, НСтр("ru = 'Месяцы'"));
		Элементы.ПолеСравнения.СписокВыбора.Добавить(Перечисления.Периодичность.Квартал, НСтр("ru = 'Кварталы'"));
		Элементы.ПолеСравнения.СписокВыбора.Добавить(Перечисления.Периодичность.Полугодие, НСтр("ru = 'Полугодия'"));
		Элементы.ПолеСравнения.СписокВыбора.Добавить(Перечисления.Периодичность.Год, НСтр("ru = 'Годы'"));
	КонецЕсли;
	
	ДополнительныеГруппировкиКолонок = ?(НастройкиОтчета.Свойство("ДополнительныеГруппировкиКолонок"), НастройкиОтчета.ДополнительныеГруппировкиКолонок, Неопределено);
	Если ТипЗнч(ДополнительныеГруппировкиКолонок)=Тип("СписокЗначений") Тогда
		Для каждого ОписаниеПоля Из ДополнительныеГруппировкиКолонок Цикл
			Если ПустаяСтрока(ОписаниеПоля.Представление) Тогда
				ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ОписаниеПоля.Значение));
				Если ДоступноеПоле=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ПредставлениеПоля = ДоступноеПоле.Заголовок;
			Иначе
				ПредставлениеПоля = ОписаниеПоля.Представление;
			КонецЕсли; 
			Элементы.ПолеСравнения.СписокВыбора.Добавить(ОписаниеПоля.Значение, ПредставлениеПоля);
		КонецЦикла; 
	КонецЕсли;
	
	Если НастройкиОтчета.РазрешитьДобавлениеПрочихПолейСравнения Тогда
		Элементы.ПолеСравнения.СписокВыбора.Добавить("<Прочие>", НСтр("ru = 'Прочее'"),, БиблиотекаКартинок.Выбрать);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппировкуСравнения(СтруктураКолонок)
	
	Если ТипЗнч(ПолеСравнения)=Тип("ПеречислениеСсылка.Периодичность") Тогда
		// Добавить группировку сравнения по периоду
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Периодичность", ПолеСравнения);
		ИмяПоля = "ДинамическийПериод";
		// Добавление разрешения на группировку по служебному полю ДинамическийПериод
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
		Поле = ОтчетыУНФ.ПолеСхемы(СхемаКомпоновкиДанных, ИмяПоля);
		Если Поле<>Неопределено И Поле.ОграничениеИспользования.Группировка Тогда
			Ограничения = Поле.ОграничениеИспользования;
			Ограничения.Группировка = Ложь;
			Ограничения.Поле = Ложь;
			Ограничения.Порядок = Ложь;
			ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, НастройкиОтчета.АдресСхемы);
		КонецЕсли; 
	Иначе
		ИмяПоля = ПолеСравнения;
	КонецЕсли; 
	
	ДобавитьГруппировкуКолонки(СтруктураКолонок, ИмяПоля);
	
КонецПроцедуры

#КонецОбласти

#Область Фильтры

&НаСервере
Процедура ДобавитьОписаниеФильтра(Путь, НестандартныйОбработчик = Ложь, УстановитьФильтр = Истина)
	
	Стр = ДобавитьОписаниеНастройки(ПоляНастроек.ПолучитьЭлементы(), ТипФильтр(), Путь);
	Стр.НестандартныйОбработчик = НестандартныйОбработчик;
	
	ВнестиИзмененияВРеквизитыНаФорме(Ложь);
	
	Если Найти(Путь, "ДобавленноеПоле_")>0 Тогда
		// Используемые в отчете дополнительные поля
		Если НЕ Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ДобавленныеПоля")
			ИЛИ ТипЗнч(Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ДобавленныеПоля)<>Тип("Массив") Тогда
			Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ДобавленныеПоля", Новый Массив);
		КонецЕсли;
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ДобавленныеПоля.Добавить(Путь);
	ИначеЕсли УстановитьФильтр Тогда
		УстановитьЗначениеФильтра(Стр.Поле, Неопределено,, Ложь, Истина)
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписанияФильтров()
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	Для каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(ЭлементОтбора.ПредставлениеПользовательскойНастройки, "ДобавленноеПоле_")>0 Тогда
			// Добавленные поля обрабатываются отдельно
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ЭлементОтбора.Представление) Тогда
			// Предопределенный отбор с собственным представлением
			Значение = ЭлементОтбора.Использование;
			Стр = ПоляНастроек.ПолучитьЭлементы().Добавить();
			Стр.Тип = ТипФильтр();
			Стр.Поле = "";
			Стр.ТипЗначения = Новый ОписаниеТипов("Булево");
			Стр.Заголовок = ЭлементОтбора.Представление;
			Стр.ДополнительныеПараметры = Новый Структура;
			Стр.ДополнительныеПараметры.Вставить("СвязьПоПредставлению", Истина);
			Стр.ЗначениеПоУмолчанию = Значение;
			Стр.ВидЭлемента = "Булево";
			Идентификатор = НовоеИмяРеквизита(ТипФильтр());
			Стр.Элементы = Новый Структура;
			Стр.Реквизиты = Новый Структура;
			Стр.Реквизиты.Вставить(Идентификатор, Значение);
			ЭлементОтбора.ПредставлениеПользовательскойНастройки = НовоеИмяОтметкиФильтра();
		Иначе
			Если НЕ ТипЗнч(ЭлементОтбора)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли; 
			Если НЕ ТипЗнч(ЭлементОтбора.ЛевоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьОписаниеНастройки(ПоляНастроек.ПолучитьЭлементы(), ТипФильтр(), Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.Представление, ЭлементОтбора);
		КонецЕсли; 
	КонецЦикла;
	
	// Добавленные поля
	Если Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ДобавленныеПоля") Тогда
		Для каждого Поле Из Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ДобавленныеПоля Цикл
			Если Поле="ДобавленноеПоле_Тег" ИЛИ
				Поле="ДобавленноеПоле_Сегмент" Тогда
				ДобавитьОписаниеНастройки(ПоляНастроек.ПолучитьЭлементы(), ТипФильтр(), Поле);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьЭлементыИРеквизитыФильтра(Стр, ЭлементОтбора = Неопределено, ДоступноеПоле, РучноеДобавление)
	
	ТипЗначения = Стр.ТипЗначения;
	Если ТипЗначения.Типы().Количество()=0 Тогда
		// Некорректно задан тип
		ПоляНастроек.ПолучитьЭлементы().Удалить(Стр);
		Возврат;
	КонецЕсли;
	
	Идентификатор = НовоеИмяРеквизита(ТипФильтр());
	
	Стр.Элементы = Новый Структура;
	Стр.Реквизиты = Новый Структура;
	
	Значение = ?(НЕ ЭлементОтбора=Неопределено И ЭлементОтбора.Использование 
	И (ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно
	ИЛИ ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке
	ИЛИ ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
	ИЛИ ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно
	ИЛИ ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно), 
	ЭлементОтбора.ПравоеЗначение, 
	Неопределено);
	Стр.ЗначениеПоУмолчанию = Значение;
	
	Если (ТипЗначения.СодержитТип(Тип("Дата")) ИЛИ ТипЗначения.СодержитТип(Тип("Число"))) И ТипЗначения.Типы().Количество()=1 Тогда
		// Ищем другие фильтры по этому полю
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", ТипФильтр());
		СтруктураОтбора.Вставить("Поле", Стр.Поле);
		Идентификаторы = ИдентификаторыСтрок(ПоляНастроек, СтруктураОтбора);
		Если Идентификаторы.Количество()>1 Тогда
			Для ии = 1 По Идентификаторы.Количество()-1 Цикл
				ПоляНастроек.ПолучитьЭлементы().Удалить(Идентификаторы[1]);
			КонецЦикла;
			Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификаторы[0]);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТипЗначения.Типы().Количество()>1 Тогда
		// Многотипный фильтр
		Стр.ВидЭлемента = "Поле";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ТипЗначения.СодержитТип(Тип("Строка")) Тогда
		// Строка
		Стр.ВидЭлемента = "Поле";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ТипЗначения.СодержитТип(Тип("Дата")) Тогда
		// Дата
		Стр.ВидЭлемента = "Период";
		Если НЕ Стр.Реквизиты.Свойство(Идентификатор) Тогда
			Стр.Реквизиты.Вставить(Идентификатор, Новый СтандартныйПериод(ВариантСтандартногоПериода.ПроизвольныйПериод));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Стр.Реквизиты[Идентификатор] = Новый СтандартныйПериод;
		ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда
			Стр.Реквизиты[Идентификатор].ДатаНачала = Значение;
			Стр.Реквизиты[Идентификатор].ДатаОкончания = Значение;
		ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно 
			И Стр.Реквизиты[Идентификатор].ДатаНачала<Значение Тогда
			Стр.Реквизиты[Идентификатор].ДатаНачала = Значение;
		ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно 
			И Стр.Реквизиты[Идентификатор].ДатаОкончания>Значение Тогда
			Стр.Реквизиты[Идентификатор].ДатаОкончания = Значение;
		КонецЕсли; 
		Стр.ТипЗначения = Новый ОписаниеТипов("СтандартныйПериод");
	ИначеЕсли ТипЗначения.СодержитТип(Тип("Число")) Тогда
		// Число
		Стр.ВидЭлемента = "Пределы";
		Если НЕ Стр.Реквизиты.Свойство(Идентификатор+"От") Тогда
			Стр.Реквизиты.Вставить(Идентификатор+"От", 0);
		КонецЕсли; 
		Если НЕ Стр.Реквизиты.Свойство(Идентификатор+"До") Тогда
			Стр.Реквизиты.Вставить(Идентификатор+"До", 0);
		КонецЕсли;
		Если ЭлементОтбора=Неопределено ИЛИ ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда
			Стр.Реквизиты.Вставить(Идентификатор+"От", Значение);
			Стр.Реквизиты.Вставить(Идентификатор+"До", Значение);
		ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно 
			И (НЕ Стр.Реквизиты.Свойство(Идентификатор+"От")
			ИЛИ Стр.Реквизиты[Идентификатор+"От"]<?(Значение=Неопределено, 0, Значение)) Тогда
			Стр.Реквизиты.Вставить(Идентификатор+"От", ?(Значение=Неопределено, 0, Значение));
		ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно 
			И (НЕ Стр.Реквизиты.Свойство(Идентификатор+"До")
			ИЛИ Стр.Реквизиты[Идентификатор+"До"]>?(Значение=Неопределено, 0, Значение)) Тогда
			Стр.Реквизиты.Вставить(Идентификатор+"До", ?(Значение=Неопределено, 0, Значение));
		КонецЕсли;
	ИначеЕсли ТипЗначения.СодержитТип(Тип("Булево")) Тогда
		// Булево
		Стр.ВидЭлемента = "Тумблер";
		Значения = Новый СписокЗначений;
		Значения.Добавить(Перечисления.БулевоТриСостояния.НеИзменять, НСтр("ru = 'Все'"), Значение=Неопределено);
		Значения.Добавить(Перечисления.БулевоТриСостояния.Ложь, Формат(Ложь, ДоступноеПоле.ФорматРедактирования), Значение=Истина);
		Значения.Добавить(Перечисления.БулевоТриСостояния.Истина, Формат(Истина, ДоступноеПоле.ФорматРедактирования), Значение=Ложь);
		Стр.Реквизиты.Вставить(Идентификатор, Значения);
		Стр.ТипЗначения = Новый ОписаниеТипов("Булево,Неопределено");
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения.Типы().Получить(0)) Тогда
		// Ссылочный тип
		ПараметрыВыбора = ОпределитьПараметрыВыбора(ДоступноеПоле);
		КоличествоЭлементов = ОтчетыУНФ.ОпределитьКоличествоЭлементов(ТипЗначения.Типы().Получить(0), ПараметрыВыбора);
		Если (КоличествоЭлементов=0 ИЛИ КоличествоЭлементов=1) И НЕ РучноеДобавление Тогда
			Возврат;
		КонецЕсли;
		Если КоличествоЭлементов<3 Тогда
			Значения = ОтчетыУНФ.ПолучитьСписокЭлементов(ТипЗначения.Типы().Получить(0), ПараметрыВыбора);
			СтрокаЗаголовка = "";
			Для каждого Элемент Из Значения Цикл
				СтрокаЗаголовка = СтрокаЗаголовка+Строка(Элемент);
			КонецЦикла;
			Если СтрДлина(СтрокаЗаголовка)<=22 Тогда
				Стр.ВидЭлемента = "Тумблер";
				Стр.Реквизиты.Вставить(Идентификатор, Значения);
			Иначе
				Стр.ДополнительныеПараметры.Вставить("БыстрыйВыбор", Истина);
				Стр.ВидЭлемента = "Поле";
				Стр.Реквизиты.Вставить(Идентификатор, Значение);
			КонецЕсли; 
		Иначе
			Если КоличествоЭлементов<=10 Тогда
				Стр.ДополнительныеПараметры.Вставить("БыстрыйВыбор", Истина);
			КонецЕсли; 
			Стр.ВидЭлемента = "Поле";
			Стр.Реквизиты.Вставить(Идентификатор, Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПоляФильтра(Стр)
	
	Если (Стр.ВидЭлемента="Поле"
		ИЛИ Стр.ВидЭлемента="Период"
		ИЛИ Стр.ВидЭлемента="Булево") 
		И Стр.Реквизиты.Количество()>0 Тогда
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			Возврат ЭтаФорма[Реквизит.Ключ];
		КонецЦикла;
	ИначеЕсли Стр.ВидЭлемента="Тумблер" Тогда
		Значения = Новый СписокЗначений;
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			ЗначениеРеквизита = ЭтаФорма[Реквизит.Ключ];
			Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) ИЛИ 
				ЗначениеРеквизита=ПредопределенноеЗначение("Перечисление.БулевоТриСостояния.НеИзменять") Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ЗначениеРеквизита)=Тип("ПеречислениеСсылка.БулевоТриСостояния") Тогда
				Значения.Добавить(?(
				ЗначениеРеквизита=ПредопределенноеЗначение("Перечисление.БулевоТриСостояния.Истина"), Истина,?(
				ЗначениеРеквизита=ПредопределенноеЗначение("Перечисление.БулевоТриСостояния.Ложь"), Ложь,
				Неопределено)));
			Иначе
				Значения.Добавить(ЗначениеРеквизита);
			КонецЕсли; 
		КонецЦикла;
		Если Значения.Количество()=0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Значения;
		КонецЕсли; 
	ИначеЕсли Стр.ВидЭлемента="Пределы" 
		И Стр.Реквизиты.Количество()>1 Тогда
		Итерация = 1;
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			Если Итерация=1 Тогда
				ЗначениеОт = ЭтаФорма[Реквизит.Ключ];
			ИначеЕсли Итерация=2 Тогда
				ЗначениеДо = ЭтаФорма[Реквизит.Ключ];
			КонецЕсли; 
			Итерация = Итерация+1;
		КонецЦикла; 
		Если ЗначениеОт=0 И ЗначениеДо=0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Новый Структура("ЗначениеОт, ЗначениеДо", ?(ЗначениеОт=0, Неопределено, ЗначениеОт), ?(ЗначениеДо=0, Неопределено, ЗначениеДо));
		КонецЕсли;
	ИначеЕсли Стр.ВидЭлемента="Флажок" Тогда
		Значения = Новый СписокЗначений;
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			Если ЭтаФорма[Реквизит.Ключ] Тогда
				Значения.Добавить(Реквизит.Значение);
			КонецЕсли; 
		КонецЦикла; 
		Если Значения.Количество()=0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Значения;
		КонецЕсли; 
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура ИзменитьИспользованиеФильтра(ПредставлениеОтбора, Значение)
	
	Если ПустаяСтрока(ПредставлениеОтбора) Тогда
		Возврат;
	КонецЕсли; 
	Для каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если НЕ ЭлементОтбора.Представление=ПредставлениеОтбора Тогда
			Продолжить;
		КонецЕсли; 		
		ЭлементОтбора.Использование = Значение;
		Прервать;
	КонецЦикла;
	ОбновитьОтображениеОтметокФильтров();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеФильтра(Поле, Значение, ВидСравнения = Неопределено, ОбновлятьВПанели = Истина, ЗаменитьЗначение = Ложь)
	
	НайденныеЭлементы = Новый Массив;
	ПолеКД = Новый ПолеКомпоновкиДанных(Поле);
	Для каждого ЭлементОтбор Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если НЕ ТипЗнч(ЭлементОтбор)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементОтбор.ЛевоеЗначение=ПолеКД Тогда
			Продолжить;
		КонецЕсли;
		НайденныеЭлементы.Добавить(ЭлементОтбор);
	КонецЦикла;
	
	Если Значение=Неопределено Тогда
		Для каждого ЭлементОтбор Из НайденныеЭлементы Цикл
			ЭлементОтбор.Использование = Ложь;
		КонецЦикла;
		Если НайденныеЭлементы.Количество()=0 Тогда
			ЭлементОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбор.ЛевоеЗначение = ПолеКД;
			ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбор.Использование = Ложь;
		КонецЕсли; 
	ИначеЕсли ТипЗнч(Значение)=Тип("Структура") Тогда
		ЗначениеОт = Значение.ЗначениеОт;
		ЗначениеДо = Значение.ЗначениеДо;
		ИмяОтметки = НовоеИмяОтметкиФильтра();
		Для каждого ЭлементОтбор Из НайденныеЭлементы Цикл
			Если НЕ ЗначениеОт=Неопределено И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно) Тогда
				ЭлементОтбор.ПравоеЗначение = ЗначениеОт;
				ЭлементОтбор.Использование = Истина;
				ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
				Если Значение.Свойство("ВключаяГраницы") И Значение.ВключаяГраницы Тогда
					ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ИначеЕсли Значение.Свойство("ВключаяГраницы") И НЕ Значение.ВключаяГраницы Тогда
					ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
				КонецЕсли; 
				ЗначениеОт = Неопределено;
				Продолжить;
			КонецЕсли; 
			Если НЕ ЗначениеДо=Неопределено И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно) Тогда
				ЭлементОтбор.ПравоеЗначение = ЗначениеДо;
				ЭлементОтбор.Использование = Истина;
				ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
				Если Значение.Свойство("ВключаяГраницы") И Значение.ВключаяГраницы Тогда
					ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ИначеЕсли Значение.Свойство("ВключаяГраницы") И НЕ Значение.ВключаяГраницы Тогда
					ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
				КонецЕсли; 
				ЗначениеДо = Неопределено;
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЗначениеОт) И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно) Тогда
				// Не изменяем
				Продолжить;
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ЗначениеДо) И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно) Тогда
				// Не изменяем
				Продолжить;
			КонецЕсли; 
			Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбор);
		КонецЦикла;
		Если НЕ ЗначениеОт=Неопределено Тогда
			ЭлементОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбор.ЛевоеЗначение = ПолеКД;
			Если Значение.Свойство("ВключаяГраницы") И Значение.ВключаяГраницы Тогда
				ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ИначеЕсли Значение.Свойство("ВключаяГраницы") И НЕ Значение.ВключаяГраницы Тогда
				ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			Иначе
				ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			КонецЕсли; 
			ЭлементОтбор.ПравоеЗначение = ЗначениеОт;
			ЭлементОтбор.Использование = Истина;
			ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
		КонецЕсли; 
		Если НЕ ЗначениеДо=Неопределено Тогда
			ЭлементОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбор.ЛевоеЗначение = ПолеКД;
			Если Значение.Свойство("ВключаяГраницы") И Значение.ВключаяГраницы Тогда
				ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ИначеЕсли Значение.Свойство("ВключаяГраницы") И НЕ Значение.ВключаяГраницы Тогда
				ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			Иначе
				ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			КонецЕсли; 
			ЭлементОтбор.ПравоеЗначение = ЗначениеДо;
			ЭлементОтбор.Использование = Истина;
			ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение)=Тип("СтандартныйПериод") Тогда
		ДатаНачала = Значение.ДатаНачала;
		ДатаОкончания = Значение.ДатаОкончания;
		Для каждого ЭлементОтбор Из НайденныеЭлементы Цикл
			Если ЗначениеЗаполнено(ДатаНачала) И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно) Тогда
				ЭлементОтбор.ПравоеЗначение = ДатаНачала;
				ЭлементОтбор.Использование = Истина;
				ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
				ЗначениеОт = Неопределено;
				Продолжить;
			КонецЕсли; 
			Если ЗначениеЗаполнено(ДатаОкончания) И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно) Тогда
				ЭлементОтбор.ПравоеЗначение = ДатаОкончания;
				ЭлементОтбор.Использование = Истина;
				ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
				ЗначениеОт = Неопределено;
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДатаНачала) И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно) Тогда
				// Не изменяем
				Продолжить;
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ДатаОкончания) И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно) Тогда
				// Не изменяем
				Продолжить;
			КонецЕсли; 
			Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбор);
		КонецЦикла;
		ИмяОтметки = НовоеИмяОтметкиФильтра();
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			ЭлементОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбор.ЛевоеЗначение = ПолеКД;
			ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбор.ПравоеЗначение = НачалоДня(ДатаНачала);
			ЭлементОтбор.Использование = Истина;
			ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			ЭлементОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбор.ЛевоеЗначение = ПолеКД;
			ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ЭлементОтбор.ПравоеЗначение = КонецДня(ДатаОкончания);
			ЭлементОтбор.Использование = Истина;
			ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
		КонецЕсли; 
	Иначе
		КоличествоЭлементов = НайденныеЭлементы.Количество();
		Если КоличествоЭлементов=0 ИЛИ ЗаменитьЗначение Тогда
			Если КоличествоЭлементов>0 Тогда
				Для ии = 0 По КоличествоЭлементов-1 Цикл
					Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(НайденныеЭлементы[ии]);
				КонецЦикла;
			КонецЕсли; 
			// Новый элемент отбора
			НайденныйЭлемент = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НайденныйЭлемент.ЛевоеЗначение = ПолеКД;
			НайденныйЭлемент.ВидСравнения = ВидСравнения;
			Если ТипЗнч(Значение)=Тип("СписокЗначений") 
				ИЛИ (НЕ ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
				И НЕ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии) Тогда
				НайденныйЭлемент.ПравоеЗначение = Значение;
			Иначе 
				НайденныйЭлемент.ПравоеЗначение = Новый СписокЗначений;
				НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
			КонецЕсли; 
			НайденныйЭлемент.Использование = Истина;
		Иначе
			Если ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				// Оставим только первый элемент
				Для ии = 1 По КоличествоЭлементов-1 Цикл
					Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(НайденныеЭлементы[ии]);
				КонецЦикла;
			КонецЕсли; 
			НайденныйЭлемент = НайденныеЭлементы[0];
			Если НЕ ЗначениеЗаполнено(НайденныйЭлемент.ПравоеЗначение) 
				ИЛИ НЕ НайденныйЭлемент.Использование Тогда
				// Найденный элемент отбора пустой
				НайденныйЭлемент.ВидСравнения = ВидСравнения;
				Если (ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии 
					ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии)
					И НЕ ТипЗнч(Значение)=Тип("СписокЗначений") Тогда 
					НайденныйЭлемент.ПравоеЗначение = Новый СписокЗначений;
					НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
				Иначе
					НайденныйЭлемент.ПравоеЗначение = Значение;
				КонецЕсли; 
				НайденныйЭлемент.Использование = Истина;
			ИначеЕсли НЕ ВидСравнения=НайденныйЭлемент.ВидСравнения Тогда
				// Не совпадают виды сравнения найденного и добавляемого элементов
				Если (НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно И (ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии))
					ИЛИ (НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно И (ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии)) Тогда
					// Объединение фильтров
					Если ТипЗнч(Значение)=Тип("СписокЗначений") Тогда
						ЗначениеФильтра = Значение;
					Иначе
						ЗначениеФильтра = Новый СписокЗначений;
						ЗначениеФильтра.Добавить(Значение);
					КонецЕсли; 
					ЗначениеФильтра.Добавить(НайденныйЭлемент.ПравоеЗначение);
					НайденныйЭлемент.ВидСравнения = ВидСравнения;
					НайденныйЭлемент.ПравоеЗначение = ЗначениеФильтра;
				ИначеЕсли (ВидСравнения=ВидСравненияКомпоновкиДанных.Равно И (НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке ИЛИ НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии))
					ИЛИ (ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно И (НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии)) Тогда
					Если ТипЗнч(НайденныйЭлемент.ПравоеЗначение)=Тип("СписокЗначений") Тогда
						НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
					Иначе
						ТекущееЗначение = НайденныйЭлемент.ПравоеЗначение;
						НайденныйЭлемент.ПравоеЗначение = Новый СписокЗначений;
						НайденныйЭлемент.ПравоеЗначение.Добавить(ТекущееЗначение);
						НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
					КонецЕсли; 
				ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					// Был ВСпискеПоИерархии, накладывается НеВСпискеПоИерархии
					Элемент = НайденныйЭлемент.ПравоеЗначение.НайтиПоЗначению(Значение);
				ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
					// Был НеВСпискеПоИерархии, накладывается ВСпискеПоИерархии
					НайденныйЭлемент.ВидСравнения = ВидСравнения;
					Если ТипЗнч(Значение)=Тип("СписокЗначений") Тогда
						НайденныйЭлемент.ПравоеЗначение = Значение;
					ИначеЕсли ТипЗнч(НайденныйЭлемент.ПравоеЗначение)=Тип("СписокЗначений") Тогда
						НайденныйЭлемент.ПравоеЗначение.Очистить();
						НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
					Иначе
						НайденныйЭлемент.ПравоеЗначение = Значение;
					КонецЕсли; 
					НайденныйЭлемент.Использование = Истина;
				Иначе
					// В других случаях добавляем новый отбор
					НайденныйЭлемент = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НайденныйЭлемент.ЛевоеЗначение = ПолеКД;
					НайденныйЭлемент.ВидСравнения = ВидСравнения;
					НайденныйЭлемент.ПравоеЗначение = Значение;
					НайденныйЭлемент.Использование = Истина;
				КонецЕсли; 
			Иначе
				// Объединение найденного и добавляемого фильтров
				Если ТипЗнч(НайденныйЭлемент.ПравоеЗначение)=Тип("СписокЗначений") И НЕ ТипЗнч(Значение)=Тип("СписокЗначений") Тогда
					Если НайденныйЭлемент.ПравоеЗначение.НайтиПоЗначению(Значение)=Неопределено Тогда
						НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
					КонецЕсли;
				ИначеЕсли ТипЗнч(НайденныйЭлемент.ПравоеЗначение)=Тип("СписокЗначений") И ТипЗнч(Значение)=Тип("СписокЗначений") Тогда
					Для каждого Элемент Из Значение Цикл
						Если НЕ НайденныйЭлемент.ПравоеЗначение.НайтиПоЗначению(Элемент.Значение)=Неопределено Тогда
							Продолжить;
						КонецЕсли; 
						НайденныйЭлемент.ПравоеЗначение.Добавить(Элемент.Значение);
					КонецЦикла; 
				Иначе
					НайденныйЭлемент.ПравоеЗначение = Значение;
				КонецЕсли; 
				НайденныйЭлемент.Использование = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НайденныйЭлемент.ПравоеЗначение) Тогда
				Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(НайденныйЭлемент);
			КонецЕсли; 
		КонецЕсли;
		Если НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			ИЛИ НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			НайденныйЭлемент.ПредставлениеПользовательскойНастройки = "";
		КонецЕсли; 
		Если НЕ НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		И НЕ НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии
		И ПустаяСтрока(НайденныйЭлемент.ПредставлениеПользовательскойНастройки) Тогда
			НайденныйЭлемент.ПредставлениеПользовательскойНастройки = НовоеИмяОтметкиФильтра();
		КонецЕсли; 
	КонецЕсли;
	
	Если ОбновлятьВПанели Тогда
		Если СтрокаОписанияПоля(ТипФильтр(), Поле, ПоляНастроек)=Неопределено Тогда
			ДобавитьОписаниеФильтра(Поле,, Ложь);
		КонецЕсли; 
		ОбновитьРеквизитыФильтровВПанели(Поле, Значение, ВидСравнения);
	КонецЕсли; 
	ОбновитьОтображениеОтметокФильтров();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппуФильтров(Поле, Реквизиты, Значение, ВидСравнения)
	
	НайденныеЭлементы = Новый Массив;
	Представление = Поле+" содержит """+Значение+"""";
	Для каждого ЭлементОтбор Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если НЕ ТипЗнч(ЭлементОтбор)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ЭлементОтбор.Представление=Представление Тогда
			Продолжить;
		КонецЕсли;
		НайденныеЭлементы.Добавить(ЭлементОтбор);
	КонецЦикла;
	
	Для каждого ЭлементОтбор Из НайденныеЭлементы Цикл
		Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбор);
	КонецЦикла;
	
	ГруппаОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбор.ПредставлениеПользовательскойНастройки = НовоеИмяОтметкиФильтра();
	ГруппаОтбор.Представление = Представление;
	ГруппаОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Для каждого Реквизит Из Реквизиты Цикл
		ЭлементОтбор = ГруппаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле+"."+Реквизит);
		ЭлементОтбор.ВидСравнения = ВидСравнения;
		ЭлементОтбор.ПравоеЗначение = Значение;
		ЭлементОтбор.Использование = Истина;
	КонецЦикла; 
	
	ОбновитьОтображениеОтметокФильтров();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьФильтр(Идентификатор)
	
	СтрНаложенногоФильтра = НаложенныеФильтры.НайтиПоИдентификатору(Идентификатор);
	МассивКОтключению = Новый Массив;
	МассивКУдаленияю = Новый Массив;
	ПолеКД = Новый ПолеКомпоновкиДанных(СтрНаложенногоФильтра.Поле);
	Для каждого ЭлементОтбор Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбор.ПредставлениеПользовательскойНастройки=СтрНаложенногоФильтра.ИмяКнопки Тогда
			Если Найти(ЭлементОтбор.ПредставлениеПользовательскойНастройки, "ДобавленноеПоле_")>0 Тогда
				МассивКУдаленияю.Добавить(ЭлементОтбор);
			Иначе
				МассивКОтключению.Добавить(ЭлементОтбор);
			КонецЕсли; 
			Если НЕ ПустаяСтрока(ЭлементОтбор.Представление) Тогда
				ОбновитьРеквизитыФильтровВПанелиПоПредставлению(ЭлементОтбор.Представление, Ложь);
			Иначе
				ОбновитьРеквизитыФильтровВПанели(СтрНаложенногоФильтра.Поле, СтрНаложенногоФильтра.Значение,, Истина);
			КонецЕсли; 
			Продолжить;
		КонецЕсли; 
		Если НЕ ТипЗнч(ЭлементОтбор)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементОтбор.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементОтбор.ЛевоеЗначение=ПолеКД Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно
			ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			МассивКОтключению.Добавить(ЭлементОтбор);
		ИначеЕсли ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("СписокЗначений") И ТипЗнч(СтрНаложенногоФильтра.Значение)=Тип("СписокЗначений") Тогда
			МассивКОтключению.Добавить(ЭлементОтбор);
		ИначеЕсли ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("СписокЗначений") Тогда 
			Элемент = ЭлементОтбор.ПравоеЗначение.НайтиПоЗначению(СтрНаложенногоФильтра.Значение);
			Если НЕ Элемент=Неопределено Тогда
				ЭлементОтбор.ПравоеЗначение.Удалить(Элемент);
				Если ЭлементОтбор.ПравоеЗначение.Количество()=0 Тогда
					МассивКОтключению.Добавить(ЭлементОтбор);
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементОтбор.ПравоеЗначение=СтрНаложенногоФильтра.Значение Тогда
			МассивКОтключению.Добавить(ЭлементОтбор);
		КонецЕсли;
		// Сброс отоборов в панели настроек
		ОбновитьРеквизитыФильтровВПанели(СтрНаложенногоФильтра.Поле, СтрНаложенногоФильтра.Значение,, Истина);
	КонецЦикла; 
	Для каждого ЭлементОтбор Из МассивКОтключению Цикл
		ЭлементОтбор.Использование = Ложь;
	КонецЦикла; 
	Для каждого ЭлементОтбор Из МассивКУдаленияю Цикл
		Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбор);
	КонецЦикла; 
	
	ОбновитьОтображениеОтметокФильтров();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыФильтровВПанелиПоПредставлению(Представление, Значение)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипФильтр());
	Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
	Для каждого Стр Из Строки Цикл
		Если НЕ ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Стр.ДополнительныеПараметры, "СвязьПоПредставлению", Ложь) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ Стр.Заголовок=Представление Тогда
			Продолжить;
		КонецЕсли; 
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			ЭтаФорма[Реквизит.Ключ] = Значение;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыФильтровВПанели(Поле, Значение, ВидСравнения = Неопределено, Удаление = Ложь)
	
	Стр = СтрокаОписанияПоля(ТипФильтр(), Поле, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Стр.НестандартныйОбработчик Тогда
		Если Стр.ВидЭлемента="Флажок" Тогда
			Для каждого Реквизит Из Стр.Реквизиты Цикл
				Если НЕ Реквизит.Значение=Значение Тогда
					Продолжить;
				КонецЕсли; 
				НовоеЗначение = ?(Удаление, Неопределено, Значение);
				ЭтаФорма[Реквизит.Ключ] = НовоеЗначение;
			КонецЦикла; 
		Иначе
			Для каждого Реквизит Из Стр.Реквизиты Цикл
				НовоеЗначение = ?(Удаление, Реквизит.Значение, Значение);
				ЭтаФорма[Реквизит.Ключ] = НовоеЗначение;
			КонецЦикла; 
		КонецЕсли; 
	ИначеЕсли Стр.ВидЭлемента="Флажок" ИЛИ Стр.ВидЭлемента="Булево" Тогда
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			Если Реквизит.Значение=Значение Тогда
				ЭтаФорма[Реквизит.Ключ] = НЕ Удаление;
			КонецЕсли; 
		КонецЦикла; 
	ИначеЕсли Стр.ВидЭлемента="Пределы" Тогда
		Если Удаление Тогда
			ЗначениеОт = 0;
			ЗначениеДо = 0;
		ИначеЕсли ТипЗнч(Значение)=Тип("Структура") Тогда 
			ЗначениеОт = Значение.ЗначениеОт; 
			ЗначениеДо = Значение.ЗначениеДо;
		ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Больше ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			ЗначениеОт = Значение; 
			ЗначениеДо = Неопределено;
		ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			ЗначениеОт = Неопределено; 
			ЗначениеДо = Значение;
		КонецЕсли;
		Итерация = 1;
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			Если Итерация=1 Тогда
				Если ЗначениеОт=Неопределено Тогда
					Итерация = Итерация+1;
					Продолжить;
				КонецЕсли;
				ЭтаФорма[Реквизит.Ключ] = ЗначениеОт;
			ИначеЕсли Итерация=2 Тогда
				Если ЗначениеДо=Неопределено Тогда
					Итерация = Итерация+1;
					Продолжить;
				КонецЕсли; 
				ЭтаФорма[Реквизит.Ключ] = ЗначениеДо;
			КонецЕсли; 
			Итерация = Итерация+1;
		КонецЦикла; 
	ИначеЕсли Стр.ВидЭлемента="Тумблер" Тогда
		Если Стр.ТипЗначения.Типы().Количество()=1 И Стр.ТипЗначения.Типы().Получить(0)=Тип("Булево") Тогда
			Если Удаление Тогда
				НовоеЗначение = ПредопределенноеЗначение("Перечисление.БулевоТриСостояния.НеИзменять");
			Иначе 
				НовоеЗначение = ВБулевоТриСостояния(Значение);
			КонецЕсли; 
		Иначе
			Если Удаление Тогда
				НовоеЗначение = Неопределено;
			Иначе 
				НовоеЗначение = Значение;
			КонецЕсли; 
		КонецЕсли; 
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			ЭтаФорма[Реквизит.Ключ] = НовоеЗначение;
		КонецЦикла; 
	ИначеЕсли Стр.ВидЭлемента="Период" Тогда
		Если Удаление Тогда
			НовоеЗначение = Новый СтандартныйПериод;
		ИначеЕсли ТипЗнч(Значение)=Тип("СтандартныйПериод") Тогда 
			НовоеЗначение = Значение;
		ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Больше ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			НовоеЗначение = Новый СтандартныйПериод(Значение, '0001-01-01');
		ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			НовоеЗначение = Новый СтандартныйПериод('0001-01-01', Значение);
		КонецЕсли; 
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			Если НЕ ЗначениеЗаполнено(НовоеЗначение) Тогда
				ЭтаФорма[Реквизит.Ключ] = НовоеЗначение;
			ИначеЕсли НовоеЗначение.ДатаНачала='0001-01-01' Тогда
				ЭтаФорма[Реквизит.Ключ].ДатаОкончания = НовоеЗначение.ДатаОкончания;
			ИначеЕсли НовоеЗначение.ДатаОкончания='0001-01-01' Тогда
				ЭтаФорма[Реквизит.Ключ].ДатаНачала = НовоеЗначение.ДатаНачала;
			Иначе
				ЭтаФорма[Реквизит.Ключ] = НовоеЗначение;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция СписокДобавленныхФильтров()
	
	СписокПолей = Новый СписокЗначений;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипФильтр());
	СтрокиПолей = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
	Для каждого СтрПоле Из СтрокиПолей Цикл
		СписокПолей.Добавить(СтрПоле.Поле);
	КонецЦикла;
	
	Возврат СписокПолей;
	
КонецФункции

#КонецОбласти

#Область Параметры

&НаКлиенте
Функция ПроверитьЗаполнениеПараметров()
	
	Результат = Истина;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипПараметр());
	Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
	Для каждого Стр Из Строки Цикл
		Если НЕ Стр.ДополнительныеПараметры.Свойство("АвтоОтметкаНезаполненного") ИЛИ НЕ Стр.ДополнительныеПараметры.АвтоОтметкаНезаполненного Тогда
			Продолжить;
		КонецЕсли;
		Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Стр.Поле));
		Если Параметр=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Параметр.Значение) Тогда
			Результат = Ложь;
			ПредставлениеПараметра = ?(ЗначениеЗаполнено(Стр.Заголовок), Стр.Заголовок, Стр.Поле);
			Для каждого Элемент Из Стр.Элементы Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Не заполнен обязательный параметр ""%1""",
				ПредставлениеПараметра),,
				Элемент.Ключ);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьОписаниеПараметра(ИмяПараметра, НестандартныйОбработчик = Ложь)
	
	Если НРег(ИмяПараметра)="период" 
		ИЛИ НРег(ИмяПараметра)="стпериод" 
		ИЛИ НРег(ИмяПараметра)="началопериода" 
		ИЛИ НРег(ИмяПараметра)="конецпериода" 
		ИЛИ (НРег(ИмяПараметра)="периодичность" И НастройкиОтчета.ИспользоватьПериодичность) Тогда
		Возврат;
	КонецЕсли;
	
	Стр = ДобавитьОписаниеНастройки(ПоляНастроек.ПолучитьЭлементы(), ТипПараметр(), ИмяПараметра);
	
	ВнестиИзмененияВРеквизитыНаФорме(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписанияПараметров()
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	Для каждого Параметр Из Настройки.ПараметрыДанных.Элементы Цикл
		Если НЕ ЗначениеЗаполнено(Параметр.ИдентификаторПользовательскойНастройки) 
			ИЛИ Параметр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Продолжить;
		КонецЕсли;
		ИмяПараметра = Строка(Параметр.Параметр);
		Параметр.Использование = Истина;
		Если НРег(ИмяПараметра)="период" 
			ИЛИ НРег(ИмяПараметра)="стпериод" 
			ИЛИ НРег(ИмяПараметра)="началопериода" 
			ИЛИ НРег(ИмяПараметра)="конецпериода" 
			ИЛИ (НРег(ИмяПараметра)="периодичность" И НастройкиОтчета.ИспользоватьПериодичность) Тогда
			Продолжить;
		КонецЕсли; 
		Стр = ДобавитьОписаниеНастройки(ПоляНастроек.ПолучитьЭлементы(), ТипПараметр(), ИмяПараметра,, Параметр);
		Если Стр=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьЭлементыИРеквизитыПараметра(Стр, Параметр = Неопределено, ДоступныйПараметр)
	
	ТипЗначения = Стр.ТипЗначения;
	Идентификатор = НовоеИмяРеквизита(ТипПараметр());
	
	Стр.Элементы = Новый Структура;
	Стр.Реквизиты = Новый Структура;
	
	Значение = ?(НЕ Параметр=Неопределено И Параметр.Использование, 
	Параметр.Значение, 
	Неопределено);
	
	Стр.ЗначениеПоУмолчанию = Значение;
	
	Если ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации"))
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗначения.Типы().Количество()=0 Тогда
		// Неверно задан тип
		Возврат;
	ИначеЕсли ТипЗначения.Типы().Количество()>1 Тогда
		// Многотипный фильтр
		Стр.ВидЭлемента = "Поле";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначения, Тип("Строка")) Тогда
		// Строка
		Стр.ВидЭлемента = "Поле";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначения, Тип("Дата")) Тогда
		// Дата
		Стр.ВидЭлемента = "Поле";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначения, Тип("СтандартныйПериод")) Тогда
		// Дата
		Стр.ВидЭлемента = "Период";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначения, Тип("Число")) Тогда
		// Число
		Стр.ВидЭлемента = "Поле";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначения, Тип("Булево")) Тогда
		// Булево
		Стр.ВидЭлемента = "Булево";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения.Типы().Получить(0)) Тогда
		// Ссылочный тип
		ПараметрыВыбора = ОпределитьПараметрыВыбора(ДоступныйПараметр);
		КоличествоЭлементов = ОтчетыУНФ.ОпределитьКоличествоЭлементов(ТипЗначения.Типы().Получить(0), ПараметрыВыбора);
		Если КоличествоЭлементов=0 Тогда
			// Ни одного объекта в БД
			Возврат;
		КонецЕсли; 
		Если КоличествоЭлементов<3 Тогда
			Стр.ВидЭлемента = "Тумблер";
			Значения = ОтчетыУНФ.ПолучитьСписокЭлементов(ТипЗначения.Типы().Получить(0), ПараметрыВыбора);
			Стр.Реквизиты.Вставить(Идентификатор, Значения);
		Иначе
			Если КоличествоЭлементов<=10 Тогда
				Стр.ДополнительныеПараметры.Вставить("БыстрыйВыбор", Истина);
			КонецЕсли; 
			Стр.ВидЭлемента = "Поле";
			Стр.Реквизиты.Вставить(Идентификатор, Значение);
		КонецЕсли;
	Иначе
		// ХранилищеЗначения, УникальныйИдентификатор
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область НаложеныеФильтры

&НаСервере
Процедура ЗаполнитьТаблицуНаложенныхФильтров()
	
	НаложенныеФильтры.Очистить();
	СхемаКД = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	
	Для каждого ЭлементОтбор Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если НЕ ЭлементОтбор.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭлементОтбор.Представление) И ЭлементОтбор.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Стр = НаложенныеФильтры.Добавить();
			Стр.ИмяКнопки = ЭлементОтбор.ПредставлениеПользовательскойНастройки;
			Стр.Заголовок = ЭлементОтбор.Представление;
			Если ТипЗнч(ЭлементОтбор)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ЭлементОтбор.ТипГруппы=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				Стр.ПризнакИсключения = Истина;
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбор)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Стр = НаложенныеФильтры.Добавить();
			Если ПустаяСтрока(ЭлементОтбор.ПредставлениеПользовательскойНастройки) Тогда
				ЭлементОтбор.ПредставлениеПользовательскойНастройки = НовоеИмяОтметкиФильтра();
			КонецЕсли; 
			Стр.ИмяКнопки = ЭлементОтбор.ПредставлениеПользовательскойНастройки;
			Стр.Заголовок = ЗаголовокГруппыОтбора(ЭлементОтбор);
			Если ЭлементОтбор.ТипГруппы=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				Стр.ПризнакИсключения = Истина;
			КонецЕсли; 
		КонецЕсли; 
		
		Если НЕ ТипЗнч(ЭлементОтбор)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбор.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = Строка(ЭлементОтбор.ЛевоеЗначение);
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбор.ЛевоеЗначение);
		
		Если ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно 
				ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше
				ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно
				ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Поле", ИмяПоля);
			СтрокиФильтров = НаложенныеФильтры.НайтиСтроки(СтруктураОтбора);
			Если СтрокиФильтров.Количество()=0 Тогда
				Стр = НаложенныеФильтры.Добавить();
				Если НЕ ДоступноеПоле=Неопределено И ДоступноеПоле.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
					Стр.Значение = Новый СтандартныйПериод;
				Иначе
					Стр.Значение = Новый Структура("ЗначениеОт,ЗначениеДо", Неопределено, Неопределено);
				КонецЕсли; 
			Иначе
				Стр = СтрокиФильтров[0];
			КонецЕсли;
		Иначе
			Стр = НаложенныеФильтры.Добавить();
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭлементОтбор.ПредставлениеПользовательскойНастройки) Тогда
			Стр.ИмяКнопки = ЭлементОтбор.ПредставлениеПользовательскойНастройки;
		КонецЕсли;
		
		Стр.Поле = ИмяПоля;
		Если НЕ ПустаяСтрока(ЭлементОтбор.Представление) Тогда
			Стр.Заголовок = ЭлементОтбор.Представление;
		КонецЕсли; 
		Если ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно ИЛИ 
			ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ 
			ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВИерархии ИЛИ 
			ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			Стр.ПризнакИсключения = Истина;
		КонецЕсли; 
		
		Если ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно 
			ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше Тогда
			Если ТипЗнч(Стр.Значение)=Тип("СтандартныйПериод") Тогда
				Стр.Значение.ДатаНачала = НачалоДня(ЭлементОтбор.ПравоеЗначение);
			ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Структура") Тогда
				Стр.Значение.ЗначениеОт = ?(Стр.Значение.ЗначениеОт=Неопределено, ЭлементОтбор.ПравоеЗначение, Макс(?(ЭлементОтбор.ПравоеЗначение = Неопределено, 0, ЭлементОтбор.ПравоеЗначение), Стр.Значение.ЗначениеОт));
			ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Число") Тогда
				Стр.Значение = Новый Структура("ЗначениеОт, ЗначениеДо");
				Стр.Значение.ЗначениеОт = ?(Стр.Значение.ЗначениеОт=Неопределено, ЭлементОтбор.ПравоеЗначение, Макс(?(ЭлементОтбор.ПравоеЗначение = Неопределено, 0, ЭлементОтбор.ПравоеЗначение), Стр.Значение.ЗначениеОт));
			ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Дата") Тогда
				Стр.Значение = Новый СтандартныйПериод;
				Стр.Значение.ДатаНачала = НачалоДня(ЭлементОтбор.ПравоеЗначение);
			КонецЕсли; 
		ИначеЕсли ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно 
			ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
			Если ТипЗнч(Стр.Значение)=Тип("СтандартныйПериод") Тогда
				Стр.Значение.ДатаОкончания = ?(НЕ ЗначениеЗаполнено(ЭлементОтбор.ПравоеЗначение), ЭлементОтбор.ПравоеЗначение, ЭлементОтбор.ПравоеЗначение);
			ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Структура") Тогда
				Стр.Значение.ЗначениеДо = ?(Стр.Значение.ЗначениеДо=Неопределено, ЭлементОтбор.ПравоеЗначение, Мин(?(ЭлементОтбор.ПравоеЗначение = Неопределено, 0, ЭлементОтбор.ПравоеЗначение), Стр.Значение.ЗначениеДо));
			ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Число") Тогда
				Стр.Значение = Новый Структура("ЗначениеОт, ЗначениеДо");
				Стр.Значение.ЗначениеДо = ?(Стр.Значение.ЗначениеДо=Неопределено, ЭлементОтбор.ПравоеЗначение, Мин(?(ЭлементОтбор.ПравоеЗначение = Неопределено, 0, ЭлементОтбор.ПравоеЗначение), Стр.Значение.ЗначениеДо));
			ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Дата") Тогда
				Стр.Значение = Новый СтандартныйПериод;
				Стр.Значение.ДатаОкончания = ?(НЕ ЗначениеЗаполнено(ЭлементОтбор.ПравоеЗначение), ЭлементОтбор.ПравоеЗначение, ЭлементОтбор.ПравоеЗначение);
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("СписокЗначений") И ЭлементОтбор.ПравоеЗначение.Количество()<=10 Тогда
			Для каждого ЭлементСписка Из ЭлементОтбор.ПравоеЗначение Цикл
				Если ЗначениеЗаполнено(Стр.Значение) Тогда
					НоваяСтрока = НаложенныеФильтры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
					НоваяСтрока.Значение = ЭлементСписка.Значение;
					Стр = НоваяСтрока;
				Иначе
					Стр.Значение = ЭлементСписка.Значение;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ЭлементОтбор.ПредставлениеПользовательскойНастройки) Тогда
					Индекс = ЭлементОтбор.ПравоеЗначение.Индекс(ЭлементСписка);
					Стр.ИмяКнопки = ЭлементОтбор.ПредставлениеПользовательскойНастройки+"_"+Формат(Индекс, "ЧГ=0");
				КонецЕсли;
			КонецЦикла;
		Иначе
			Стр.Значение = ЭлементОтбор.ПравоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование заголовков отметок фильтров
	Для каждого Стр Из НаложенныеФильтры Цикл
		
		Если НЕ ПустаяСтрока(Стр.Заголовок) Тогда
			Продолжить;
		КонецЕсли; 
		
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Стр.Поле));
		Если ДоступноеПоле=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Стр.Заголовок = ДоступноеПоле.Заголовок;
		
		ЗаголовокФильтра = Стр.Заголовок;
		Префикс = "";
		
		Если ТипЗнч(Стр.Значение)=Тип("СтандартныйПериод") Тогда
			ПредставлениеЗначения = ПредставлениеПериода(Стр.Значение.ДатаНачала, Стр.Значение.ДатаОкончания);
			Префикс = ЗаголовокФильтра;
		ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Структура") Тогда
			Если НЕ Стр.Значение.ЗначениеОт=Неопределено И НЕ Стр.Значение.ЗначениеДо=Неопределено Тогда
				ПредставлениеЗначения = НСтр("ru = 'от '")+Строка(Стр.Значение.ЗначениеОт) + НСтр("ru = ' до '") + Строка(Стр.Значение.ЗначениеДо);
			ИначеЕсли НЕ Стр.Значение.ЗначениеОт=Неопределено Тогда
				ПредставлениеЗначения = НСтр("ru = 'от '")+Строка(Стр.Значение.ЗначениеОт);
			ИначеЕсли НЕ Стр.Значение.ЗначениеДо=Неопределено Тогда
				ПредставлениеЗначения = НСтр("ru = 'до '")+Строка(Стр.Значение.ЗначениеДо);
			КонецЕсли; 
			Префикс = ЗаголовокФильтра;
		ИначеЕсли ТипЗнч(Стр.Значение)=Тип("СписокЗначений") Тогда
			ПредставлениеЗначения = Строка(Стр.Значение);
		ИначеЕсли НЕ ЗначениеЗаполнено(Стр.Значение) Тогда
			ПредставлениеЗначения = ЗаголовокФильтра+НСтр("ru = ': не указано'");
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Стр.Значение)) Тогда
			ПредставлениеЗначения = Строка(Стр.Значение);
		ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Булево") ИЛИ ТипЗнч(Стр.Значение)=Тип("Дата") Тогда
			ПолеСхемы = ОтчетыУНФ.ПолеСхемы(СхемаКД, Стр.Поле);
			Если ПолеСхемы = Неопределено Тогда
				Параметр = Неопределено;
			Иначе
				Параметр = ПолеСхемы.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Формат"));
				Если Параметр=Неопределено ИЛИ НЕ ЗначениеЗаполнено(Параметр.Значение) Тогда
					Параметр = ПолеСхемы.ПараметрыРедактирования.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ФорматРедактирования"));
				КонецЕсли; 
			КонецЕсли;
			Если Параметр <> Неопределено
				И Параметр.Использование
				И ЗначениеЗаполнено(Параметр.Значение) Тогда
				ПредставлениеЗначения = Формат(Стр.Значение, Параметр.Значение);
				Префикс = "";
			Иначе
				ПредставлениеЗначения = Строка(Стр.Значение);
				Префикс = ЗаголовокФильтра;
			КонецЕсли; 
		Иначе
			ПредставлениеЗначения = Строка(Стр.Значение);
			Префикс = ЗаголовокФильтра;
		КонецЕсли;
		
		Стр.Заголовок = ?(ПустаяСтрока(Префикс), "", Префикс + ": ") + ПредставлениеЗначения;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокГруппыОтбора(Группа)
	
	Результат = "";
	Для каждого Элемент Из Группа.Элементы Цикл
		Если НЕ ПустаяСтрока(Результат) И НЕ Группа.ТипГруппы=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
			Результат = Результат+" "+ПредставлениеТипаГруппы(Группа.ТипГруппы)+" ";
		ИначеЕсли ПустаяСтрока(Результат) И Группа.ТипГруппы=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
			Результат = ПредставлениеТипаГруппы(Группа.ТипГруппы)+" ";
		КонецЕсли; 
		Если ТипЗнч(Элемент.ЛевоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
			ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Элемент.ЛевоеЗначение);
			Результат = Результат+?(ДоступноеПоле=Неопределено ИЛИ ПустаяСтрока(ДоступноеПоле.Заголовок), Строка(Элемент.ЛевоеЗначение), ДоступноеПоле.Заголовок);
		Иначе
			Результат = Результат+Строка(Элемент.ЛевоеЗначение);
		КонецЕсли; 
		Результат = Результат+ПредставлениеВидаСравнения(Элемент.ВидСравнения);
		Если Элемент.ВидСравнения<>ВидСравненияКомпоновкиДанных.Заполнено И Элемент.ВидСравнения<>ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			Если ТипЗнч(Элемент.ПравоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
				ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Элемент.ПравоеЗначение);
				Результат = Результат+?(ДоступноеПоле=Неопределено ИЛИ ПустаяСтрока(ДоступноеПоле.Заголовок), Строка(Элемент.ЛевоеЗначение), ДоступноеПоле.Заголовок);
			Иначе
				Результат = Результат+Строка(Элемент.ПравоеЗначение);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеТипаГруппы(Тип)
	
	Если Тип=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
		Возврат НСтр("ru = 'И'");
	ИначеЕсли Тип=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
		Возврат НСтр("ru = 'ИЛИ'");
	ИначеЕсли Тип=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
		Возврат НСтр("ru = 'НЕ'");
	Иначе
		Возврат "";
	КонецЕсли; 	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеВидаСравнения(ВидСравнения)
	
	Если ВидСравнения=ВидСравненияКомпоновкиДанных.Больше Тогда
		Возврат ">";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Возврат ">=";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Возврат НСтр("ru = ' в группе '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Возврат НСтр("ru = ' в списке '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Возврат НСтр("ru = ' в списке групп '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Возврат НСтр("ru = ' заполнено'");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
		Возврат "<";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Возврат "<=";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
		Возврат НСтр("ru = ' начинается с '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Возврат НСтр("ru = ' не в группе '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Возврат НСтр("ru = ' не в списке '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Возврат НСтр("ru = ' не в списке групп '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		Возврат НСтр("ru = ' не заполнено'");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
		Возврат НСтр("ru = ' не начинается с '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеПодобно Тогда
		Возврат НСтр("ru = ' не подобно '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Возврат "<>";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Возврат НСтр("ru = ' не содержит '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Подобно Тогда
		Возврат НСтр("ru = ' подобно '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда
		Возврат "=";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Содержит Тогда
		Возврат НСтр("ru = ' содержит '");
	Иначе
		Возврат "";
	КонецЕсли; 	
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображениеОтметокФильтров()
	
	ЗаполнитьТаблицуНаложенныхФильтров();
	
	Если ФормаПараметры.ВариантИнтерфейса=ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		МаксимальнаяДлинаСтрокиОтметок = 65;
	Иначе
		МаксимальнаяДлинаСтрокиОтметок = 125;
	КонецЕсли; 
	
	МассивКУдалению = Новый Массив;
	Для каждого Элемент Из Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы Цикл
		Для каждого ПодЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			Если ПодЭлемент=Элементы.ПредставлениеПериода ИЛИ ПодЭлемент=Элементы.ДекорацияНаполнитель_1 Тогда
				Продолжить;
			КонецЕсли; 
			МассивКУдалению.Добавить(ПодЭлемент);
		КонецЦикла;
		Если Элемент=Элементы.СтрокаОтметокФильтров_1 Тогда
			Продолжить;
		КонецЕсли; 
		МассивКУдалению.Добавить(Элемент);
	КонецЦикла; 
	
	Для каждого Элемент Из МассивКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Если Элементы.ПредставлениеПериода.Видимость Тогда
		Если ФормаПараметры.ВариантИнтерфейса=ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
			Элементы.ПредставлениеПериода.Ширина = Окр(СтрДлина(ПредставлениеПериода)*0.75+4);
		Иначе
			Элементы.ПредставлениеПериода.Ширина = Окр(СтрДлина(ПредставлениеПериода)*0.8+4);
		КонецЕсли; 
		ТекущаяДлинаСтрокиОтметок = Элементы.ПредставлениеПериода.Ширина+СтрДлина(Элементы.ПредставлениеПериода.Заголовок)+1;
	Иначе
		ТекущаяДлинаСтрокиОтметок = 0;
	КонецЕсли; 
	
	Для каждого Стр Из НаложенныеФильтры Цикл
		
		Если ПустаяСтрока(Стр.ИмяКнопки) Тогда
			Стр.ИмяКнопки = НовоеИмяОтметкиФильтра();
		КонецЕсли;
		
		Если СтрДлина(Стр.Заголовок)>25 Тогда
			ЗаголовокЭлемента = Лев(Стр.Заголовок, 23)+"...";
		Иначе
			ЗаголовокЭлемента = Стр.Заголовок;
		КонецЕсли; 
		
		Если ФормаПараметры.ВариантИнтерфейса=ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
			ДлинаЭлемента = Окр(СтрДлина(ЗаголовокЭлемента)*0.8+4);
		Иначе
			ДлинаЭлемента = Окр(СтрДлина(ЗаголовокЭлемента)*0.85+4);
		КонецЕсли; 
		
		Если Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы.Количество() = 0
			ИЛИ ТекущаяДлинаСтрокиОтметок + ДлинаЭлемента > МаксимальнаяДлинаСтрокиОтметок Тогда
			Индекс = Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы.Количество()+1;
			ГруппаСтрока = Элементы.Добавить("СтрокаОтметокФильтров_"+Индекс, Тип("ГруппаФормы"), Элементы.СтрокиОтметокФильтров);
			ГруппаСтрока.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСтрока.ОтображатьЗаголовок = Ложь;
			ГруппаСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаСтрока.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаСтрока.РастягиватьПоГоризонтали = Истина;
			ГруппаСтрока.Высота = 1;
			ДекорацияНаполнитель = Элементы.Добавить("ДекорацияНаполнитель_"+Индекс, Тип("ДекорацияФормы"), ГруппаСтрока);
			ДекорацияНаполнитель.РастягиватьПоГоризонтали = Истина;
			ДекорацияНаполнитель.РастягиватьПоВертикали = Ложь;
			ДекорацияНаполнитель.Высота = 1;
			ТекущаяДлинаСтрокиОтметок = 0;
		Иначе
			ГруппаСтрока = Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы[Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы.Количество() - 1];
		КонецЕсли;
		
		ЭлементыЗаголовка = Новый Массив;
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(ЗаголовокЭлемента));
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить,,,, Стр.ИмяКнопки));
		
		ЭлементОтметка = Элементы.Вставить(Стр.ИмяКнопки, Тип("ДекорацияФормы"), ГруппаСтрока, ГруппаСтрока.ПодчиненныеЭлементы[ГруппаСтрока.ПодчиненныеЭлементы.Количество()-1]);
		ЭлементОтметка.Вид = ВидДекорацииФормы.Надпись;
		ЭлементОтметка.Заголовок = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		Если НЕ Стр.Заголовок=ЗаголовокЭлемента Тогда
			ЭлементОтметка.Подсказка = Стр.Заголовок;
		КонецЕсли; 
		ЭлементОтметка.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		Если Стр.ПризнакИсключения Тогда
			ЭлементОтметка.ЦветРамки = WebЦвета.Красный;
		КонецЕсли; 
		ЭлементОтметка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементОтметка.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		ЭлементОтметка.Ширина = ДлинаЭлемента;
		ЭлементОтметка.Высота = 1;
		ЭлементОтметка.РастягиватьПоГоризонтали = Ложь;
		ЭлементОтметка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_УдалитьФильтрНажатие");
		
		ТекущаяДлинаСтрокиОтметок = ТекущаяДлинаСтрокиОтметок+ДлинаЭлемента;
	
	КонецЦикла;
	
	Если Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы.Количество()>50 Тогда
		Элементы.ОтчетТабличныйДокумент.РастягиватьПоВертикали = Ложь;
	ИначеЕсли НЕ Элементы.ОтчетТабличныйДокумент.РастягиватьПоВертикали Тогда
		Элементы.ОтчетТабличныйДокумент.РастягиватьПоВертикали = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СтрокаПоиска

&НаКлиенте
Функция СформироватьСписокЭлементов(Текст, УправляющиеСимволы)
	
	Если СтрДлина(Текст)>=3 
		И (ПустаяСтрока(УправляющиеСимволы) 
		ИЛИ УправляющиеСимволы="-" 
		ИЛИ УправляющиеСимволы="""") Тогда
		МассивТипов = Новый Массив;
		Если НастройкиОтчета.ПоляПоиска.Количество()=0 Тогда
			// Выполняем поиск по полям, присутсвующим в списке фильтров
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Тип", ТипФильтр());
			Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
			Для каждого Стр Из Строки Цикл
				Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Стр.Поле));
				Если Поле=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Для каждого Тип Из Поле.ТипЗначения.Типы() Цикл
					Если МассивТипов.Найти(Тип)=Неопределено Тогда
						МассивТипов.Добавить(Тип);
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
		Иначе
			// Разработчиком отчета задан список полей для поиска данных\
			Для каждого ИмяПоля Из НастройкиОтчета.ПоляПоиска Цикл
				ПолеОтбора = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
				Если ПолеОтбора=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Для каждого Тип Из ПолеОтбора.ТипЗначения.Типы() Цикл
					Если МассивТипов.Найти(Тип)=Неопределено Тогда
						МассивТипов.Добавить(Тип);
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли; 
		Результат = СформироватьСписокЭлементовСервер(Текст, МассивТипов, УправляющиеСимволы);
	Иначе
		Результат = Новый СписокЗначений;
	КонецЕсли; 
	
	Если НЕ УправляющиеСимволы="""" И ЭтоЧисло(Текст) Тогда
		Число = Число(СтрЗаменить(СтрЗаменить(СтрЗаменить(Текст, " ", ""), Символы.НПП, ""), ",", "."));
		// Обработка числовых полей в фильтрах
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", ТипФильтр());
		Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора, Истина);
		Для каждого СтрФильтр Из Строки Цикл
			Если НЕ СтрФильтр.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьЭлементВыбораВСписок(Результат, СтрФильтр, Число, УправляющиеСимволы); 
		КонецЦикла; 
		// Добавление активных показателей
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", ТипПоказатель());
		Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора, Истина);
		Для каждого СтрПоказатель Из Строки Цикл
			Если НЕ СтрПоказатель.Создан Тогда
				Продолжить;
			КонецЕсли; 
			Для каждого Реквизит Из СтрПоказатель.Реквизиты Цикл
				Если НЕ ЭтаФорма[Реквизит.Ключ] Тогда
					Продолжить;
				КонецЕсли; 
				ДобавитьЭлементВыбораВСписок(Результат, СтрПоказатель, Число, УправляющиеСимволы); 
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлементВыбораВСписок(Список, СтрПоля, Значение, УправляющиеСимволы)
	
	Для каждого Элемент Из Список Цикл
		Если НЕ Элемент.Значение.Свойство("Поле") Тогда
			// Нечисловое поле
			Продолжить;
		КонецЕсли; 
		Если Элемент.Значение.Поле=СтрПоля.Поле Тогда
			// Поле уже добавлено в список выбора 
			Возврат;
		КонецЕсли; 
	КонецЦикла; 
	СтуктураЗначения = Новый Структура;
	СтуктураЗначения.Вставить("Поле", СтрПоля.Поле);
	СтуктураЗначения.Вставить("ВведенноеЗначение", Значение);
	СтуктураЗначения.Вставить("УправляющиеСимволы", УправляющиеСимволы);
	ЗаголовокПоля = СтрПоля.Заголовок;
	СтрРодитель = СтрПоля.ПолучитьРодителя();
	Если НЕ СтрРодитель=Неопределено И НЕ ПустаяСтрока(СтрРодитель.Заголовок) Тогда
		ЗаголовокПоля = ЗаголовокПоля+" ("+СтрРодитель.Заголовок+")";
	КонецЕсли; 
	Если ПустаяСтрока(ЗаголовокПоля) Тогда
		Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(СтрПоля.Поле));
		Если НЕ Поле=Неопределено Тогда
			ЗаголовокПоля = Поле.Заголовок;
		КонецЕсли; 
	КонецЕсли;
	Если ПустаяСтрока(ЗаголовокПоля) Тогда
		ЗаголовокПоля = СтрПоля.Поле;
	КонецЕсли;
	Если Не ПустаяСтрока(УправляющиеСимволы) Тогда
		Список.Добавить(СтуктураЗначения, ЗаголовокПоля+" "+УправляющиеСимволы+" "+Строка(Значение));
	Иначе
		СтуктураЗначения.Вставить("УправляющиеСимволы", "=");
		Список.Добавить(СтуктураЗначения, ЗаголовокПоля+" = "+Строка(Значение));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСписокЭлементовСервер(Текст, МассивТипов, УправляющиеСимволы)
	
	Результат = Новый СписокЗначений;
	Если МассивТипов.Количество()=0 Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ТекстЗапроса = "";
	Для каждого Тип Из МассивТипов Цикл
		Если НЕ ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			Продолжить;
		КонецЕсли;
		ПустаяСсылка = Новый(Тип);
		ОбъектМетаданных = ПустаяСсылка.Метаданные();
		Если НЕ ОбщегоНазначения.ЭтоПеречисление(ОбъектМетаданных) Тогда
			Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса+Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ"+Символы.ПС;
			КонецЕсли;
			ТекстУсловия = "";
			ТекстПрочиеПоля = "";
			Для каждого Поле Из ОбъектМетаданных.ВводПоСтроке Цикл
				ТекстУсловия = ТекстУсловия+
				?(ПустаяСтрока(ТекстУсловия), "", Символы.ПС+Символы.Таб+"ИЛИ ")+
				"Объект."+Поле.Имя+" ПОДОБНО ""%""+&Текст+""%""";
				Если Поле.Имя="Наименование" ИЛИ Поле.Имя="Номер" Тогда
					Продолжить;
				КонецЕсли;
				ТекстПрочиеПоля = ТекстПрочиеПоля+?(ПустаяСтрока(ТекстПрочиеПоля), """", "+"", ")+Поле.Имя+": ""+Объект."+Поле.Имя;
			КонецЦикла;
			Если ПустаяСтрока(ТекстУсловия) Тогда
				Продолжить;
			КонецЕсли; 
			ТекстЗапроса = ТекстЗапроса+
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ВЫБРАТЬ ПЕРВЫЕ 5
			|	""%1"" КАК Тип,
			|	Объект.Ссылка,
			|	Объект.Представление,
			|   %3 КАК ПрочиеПоля
			|ИЗ
			|	%1 КАК Объект
			|ГДЕ
			|	%2
			|
			|СГРУППИРОВАТЬ ПО
			|	Объект.Ссылка,
			|	Объект.Представление
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Объект.Ссылка) < 5",
			ОбъектМетаданных.ПолноеИмя(),
			ТекстУсловия,
			?(ПустаяСтрока(ТекстПрочиеПоля), """""", ТекстПрочиеПоля));
			
		КонецЕсли; 
	КонецЦикла;
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат Результат;
	КонецЕсли; 
	ТекстЗапроса = ТекстЗапроса+Символы.ПС+"ИТОГИ ПО Тип";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Текст", Текст);
	ВыборкаТип = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТип.Следующий() Цикл
		Выборка = ВыборкаТип.Выбрать();	
		Пока Выборка.Следующий() Цикл
			Если УправляющиеСимволы="""" Тогда
				Продолжить;
			КонецЕсли; 
			Элемент = Новый Структура;
			Элемент.Вставить("ВведенноеЗначение", Выборка.Ссылка);
			Элемент.Вставить("УправляющиеСимволы", УправляющиеСимволы);
			Результат.Добавить(Элемент, СформироватьПредставлениеЭлементаСписка(Выборка, Текст));	
		КонецЦикла;
		Если Выборка.Количество()>1 ИЛИ (УправляющиеСимволы="""" И Выборка.Количество()>0) Тогда
			Реквизиты = "";
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ВыборкаТип.Тип);
			Для каждого Поле Из ОбъектМетаданных.ВводПоСтроке Цикл
				Реквизиты = Реквизиты+?(ПустаяСтрока(Реквизиты), "", ",")+Поле.Имя;
			КонецЦикла;
			Элемент = Новый Структура;
			Элемент.Вставить("ИмяМетаданных", ВыборкаТип.Тип);
			Элемент.Вставить("Реквизиты", Реквизиты);
			Элемент.Вставить("ВведенноеЗначение", Текст);
			Элемент.Вставить("УправляющиеСимволы", УправляющиеСимволы);
			ПредставлениеТипа = Метаданные.НайтиПоПолномуИмени(ВыборкаТип.Тип).Представление();
			Представление = ПредставлениеТипа+НСтр("ru = ' содержит '")+Текст;
			Результат.Добавить(Элемент, Новый ФорматированнаяСтрока(Представление, 
			?(УправляющиеСимволы="""", Новый Шрифт, Новый Шрифт(Новый Шрифт,,, Истина))));
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПредставлениеЭлементаСписка(Выборка, Текст)
	
	Представление = Выборка.Представление+?(ПустаяСтрока(Выборка.ПрочиеПоля), "", " ("+Выборка.ПрочиеПоля+")");
	Позиция = Найти(НРег(Представление), НРег(Текст));
	Если Позиция>0 Тогда
		ТекстДо = Лев(Представление, Позиция-1);
		ТекстЦентр = Сред(Представление, Позиция, СтрДлина(Текст));
		ТекстПосле = Сред(Представление, Позиция+СтрДлина(Текст));
		ВыделенныйТекст = Новый ФорматированнаяСтрока(ТекстЦентр, Новый Шрифт(Новый Шрифт,,, Истина), WebЦвета.ЗеленыйЛес);
		РезультатФункции = Новый ФорматированнаяСтрока(ТекстДо, ВыделенныйТекст, ТекстПосле);
	Иначе
		РезультатФункции = Представление;
	КонецЕсли; 
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ПоляПоТипу(Тип)
	
	МассивПолей = ОсновныеПоляПоиска();
	РезультатФункции = Новый Массив;
	ДополнительныеПоля = Новый Массив;
	Если НастройкиОтчета.ПоляПоиска.Количество()=0 Тогда
		Если КешТиповПолей.Количество()=0 Тогда
			ОбновитьКешТиповПолей();
		КонецЕсли;
		Для каждого Элемент Из КешТиповПолей Цикл
			Если Элемент.Значение.СодержитТип(Тип) Тогда
				Если Найти(Элемент.Представление, ".")>0 И МассивПолей.Найти(Элемент.Представление)=Неопределено Тогда
					ДополнительныеПоля.Добавить(Элемент.Представление);
				Иначе
					РезультатФункции.Добавить(Элемент.Представление);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Для каждого ИмяПоля Из НастройкиОтчета.ПоляПоиска Цикл
			ПолеОтбора = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
			Если ПолеОтбора=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Если ПолеОтбора.ТипЗначения.СодержитТип(Тип) Тогда
				Если Найти(ИмяПоля, ".")>0 И МассивПолей.Найти(ИмяПоля)=Неопределено Тогда
					ДополнительныеПоля.Добавить(ИмяПоля);
				Иначе
					РезультатФункции.Добавить(ИмяПоля);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	Если РезультатФункции.Количество()=0 Тогда
		Для каждого Поле Из ДополнительныеПоля Цикл
			РезультатФункции.Добавить(Поле);
		КонецЦикла; 
	КонецЕсли; 
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция ОсновныеПоляПоиска()
	
	МассивПолей = Новый Массив;
	ПоляГруппировокРекурсивно(МассивПолей, Отчет.КомпоновщикНастроек.Настройки.Структура);
	ПоляФильтровРекурсивно(МассивПолей, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
	Возврат МассивПолей;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПоляГруппировокРекурсивно(МассивПолей, ЭлементыСтруктуры, БезКолонок = Ложь)
	
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			ПоляГруппировокРекурсивно(МассивПолей, Элемент.Строки, БезКолонок);
			Если НЕ БезКолонок Тогда
				ПоляГруппировокРекурсивно(МассивПолей, Элемент.Колонки, БезКолонок);
			КонецЕсли; 
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				МассивПолей.Добавить(Строка(Поле.Поле));
			КонецЦикла; 
			ПоляГруппировокРекурсивно(МассивПолей, Элемент.Структура, БезКолонок);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоляФильтровРекурсивно(МассивПолей, ЭлементыОтбора)
	
	Для каждого Элемент Из ЭлементыОтбора Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПоляФильтровРекурсивно(МассивПолей, Элемент.Элементы);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			МассивПолей.Добавить(Строка(Элемент.ЛевоеЗначение));
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКешТиповПолей()
	
	КешТиповПолей.Очистить();
	// Первый уровень
	Для каждого Поле Из Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы Цикл
		КешТиповПолей.Добавить(Поле.ТипЗначения, Строка(Поле.Поле));
	КонецЦикла;
	// Второй уровень
	Для каждого Поле Из Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы Цикл
		Для каждого ПодПоле Из Поле.Элементы Цикл
			Если ПодПоле.Папка Тогда
				Если Прав(Строка(ПодПоле.Поле), 5)=".Теги" Тогда
					Продолжить;
				КонецЕсли; 
				Для каждого ПолеТЧ Из ПодПоле.Элементы Цикл
					КешТиповПолей.Добавить(ПолеТЧ.ТипЗначения, Строка(ПолеТЧ.Поле));
				КонецЦикла; 
			Иначе
				КешТиповПолей.Добавить(ПодПоле.ТипЗначения, Строка(ПодПоле.Поле));
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ИзменениеВарианта

&НаКлиенте
Процедура РедактироватьСКД()
	
	Если Не НастройкиОтчета.РазрешитьРедактироватьСКД Тогда
		Состояние(НСтр("ru = 'Редактирование настроек данного отчета запрещено'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура(ФормаПараметры);
	ПараметрыФормы.Вставить("Вариант",                               Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",                          Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             Новый ПользовательскиеНастройкиКомпоновкиДанных);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	ПараметрыФормы.Вставить("АдресСхемы",                            НастройкиОтчета.АдресСхемы);
	
	ОткрытьФорму(НастройкиОтчета.ПолноеИмя + ".ФормаВарианта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область НестандартныеОбработчики

&НаСервере
Процедура ВыполнитьНестандартнуюОбработку(ИдентификаторСтроки, ИмяЭлемента, Значение = Неопределено)
	
	Если НЕ НастройкиОтчета.ПрограммноеИзменениеФормыОтчета Тогда
		Возврат;
	КонецЕсли;
	Стр = ПоляНастроек.НайтиПоИдентификатору(ИдентификаторСтроки);
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	СтруктураЗначений = Новый Структура;
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		Если ЗначениеЗаполнено(Значение) Тогда
			СтруктураЗначений.Вставить(Реквизит.Ключ, Значение);
		Иначе
			СтруктураЗначений.Вставить(Реквизит.Ключ, ЭтаФорма[Реквизит.Ключ]);
		КонецЕсли; 
	КонецЦикла; 
	ОтчетОбъект.ПриИзмененииНестандартногоРеквизита(Стр.Тип, Стр.Поле, СтруктураЗначений, Отчет.КомпоновщикНастроек.Настройки, ЭтаФорма, ИмяЭлемента);
	
КонецПроцедуры

#КонецОбласти

#Область ДобавленныеПоля

&НаСервере
Процедура НаложитьОтборПоДобавленномуПолю(Поле, Значение, УправляющиеСимволы = "")
	
	// Тег
	Если Поле="ДобавленноеПоле_Тег" Тогда
		ПолеКонтрагент = ДоступноеПолеКонтрагент(Отчет.КомпоновщикНастроек.Настройки);
		Если ПолеКонтрагент=Неопределено Тогда
			Возврат;
		КонецЕсли;
		НовыйВидСравнения = ?(УправляющиеСимволы="-", ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
		Суффикс = ?(УправляющиеСимволы="-", "Не", "");
		НайденныйЭлемент = Неопределено;
		Для каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ЭлементОтбора.ПредставлениеПользовательскойНастройки=Поле+Суффикс Тогда
				НайденныйЭлемент = ЭлементОтбора;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если НайденныйЭлемент=Неопределено Тогда
			НайденныйЭлемент = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НайденныйЭлемент.Использование = Истина;
			НайденныйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Строка(ПолеКонтрагент.Поле)+".Теги.Тег");
			НайденныйЭлемент.ВидСравнения = НовыйВидСравнения;
			НайденныйЭлемент.ПравоеЗначение = Новый СписокЗначений;
			НайденныйЭлемент.ПредставлениеПользовательскойНастройки = Поле+Суффикс;
		КонецЕсли;
		Если ТипЗнч(НайденныйЭлемент.ПравоеЗначение)<>Тип("СписокЗначений") Тогда
			НайденныйЭлемент.ПравоеЗначение = Новый СписокЗначений;
		КонецЕсли;
		Если ЗначениеЗаполнено(Значение) И НайденныйЭлемент.ПравоеЗначение.НайтиПоЗначению(Значение)=Неопределено Тогда
			НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
		КонецЕсли; 
		НайденныйЭлемент.Использование = НайденныйЭлемент.ПравоеЗначение.Количество()>0;
		ОбновитьОтображениеОтметокФильтров();
	// Сегмент
	ИначеЕсли Поле="ДобавленноеПоле_Сегмент" Тогда
		ПолеКонтрагент = ДоступноеПолеКонтрагент(Отчет.КомпоновщикНастроек.Настройки);
		Если ПолеКонтрагент=Неопределено Тогда
			Возврат;
		КонецЕсли; 
		МассивСегментов = Справочники.Сегменты.ПолучитьСоставСегмента(Значение);
		СписокКонтрагентов = Новый СписокЗначений;
		СписокКонтрагентов.ЗагрузитьЗначения(МассивСегментов);
		ГруппаОтборов = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборов.Использование = Истина;
		ГруппаОтборов.Представление = Строка(Значение);
		ГруппаОтборов.ПредставлениеПользовательскойНастройки = "ДобавленноеПоле_"+СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		ГруппаОтборов.ТипГруппы = ?(УправляющиеСимволы="-", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ЭлементОтбора = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Строка(ПолеКонтрагент.Поле));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = СписокКонтрагентов;
		ОбновитьОтображениеОтметокФильтров();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступноеПолеКонтрагент(Настройки)
		
	Поле = Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Контрагент"));
	Если Поле=Неопределено Тогда
		Поле = Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Покупатель"));
	КонецЕсли;
	Если Поле=Неопределено Тогда
		Поле = Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Поставщик"));
	КонецЕсли;
	Возврат Поле;
	
КонецФункции

#КонецОбласти 

#Область СуммаЯчеек

// Вычисляет сумму выделенных ячеек и возвращает ее представление.
//
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - Таблица, для которой вычисляет сумма ячеек.
//   ВыделенныеОбласти
//       - Неопределено - При вызове с клиента этот параметр будет определен автоматически.
//       - Массив - При вызове с сервера в этот параметр следует передавать области,
//           предварительно вычисленные на клиенте
//           при помощи функции ОтчетыКлиент.ВыделенныеОбласти(ТабличныйДокумент).
//
// Возвращаемое значение: 
//   Строка - Представление суммы выделенных ячеек.
//
// См. также:
//   ОтчетыКлиент.ВыделенныеОбласти().
//
&НаКлиентеНаСервереБезКонтекста
Функция СуммаЯчеек(ТабличныйДокумент, ВыделенныеОбласти)
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	Если ВыделенныеОбласти = Неопределено Тогда
		#Если Клиент Тогда
			ВыделенныеОбласти = ТабличныйДокумент.ВыделенныеОбласти;
		#Иначе
			Возврат НСтр("ru = 'Не указано значение параметра ""ВыделенныеОбласти"".'");
		#КонецЕсли
	КонецЕсли;
	
	#Если Клиент И Не ТолстыйКлиентОбычноеПриложение Тогда
		КоличествоВыделенныхОбластей = ВыделенныеОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0 Тогда
			Возврат ""; // Нет ни одного числа.
		ИначеЕсли КоличествоВыделенныхОбластей >= 100 Тогда
			Возврат "<"; // Нужен вызов сервера.
		КонецЕсли;
		КоличествоВыделенныхЯчеек = 0;
	#КонецЕсли
	
	Сумма = Неопределено;
	ПроверенныеЯчейки = Новый Соответствие;
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		#Если Клиент Тогда
			Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
		#КонецЕсли
		
		ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Верх;
		ВыделеннаяОбластьНиз = ВыделеннаяОбласть.Низ;
		ВыделеннаяОбластьЛево = ВыделеннаяОбласть.Лево;
		ВыделеннаяОбластьПраво = ВыделеннаяОбласть.Право;
		
		Если ВыделеннаяОбластьВерх = 0 Тогда
			ВыделеннаяОбластьВерх = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьНиз = 0 Тогда
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбластьЛево = 0 Тогда
			ВыделеннаяОбластьЛево = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьПраво = 0 Тогда
			ВыделеннаяОбластьПраво = ТабличныйДокумент.ШиринаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Низ;
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		ВыделеннаяОбластьВысота = ВыделеннаяОбластьНиз   - ВыделеннаяОбластьВерх;
		ВыделеннаяОбластьШирина = ВыделеннаяОбластьПраво - ВыделеннаяОбластьЛево;
		
		#Если Клиент И Не ТолстыйКлиентОбычноеПриложение Тогда
			КоличествоВыделенныхЯчеек = КоличествоВыделенныхЯчеек + ВыделеннаяОбластьШирина * ВыделеннаяОбластьВысота;
			Если КоличествоВыделенныхЯчеек >= 1000 Тогда
				Возврат "<"; // Нужен вызов сервера.
			КонецЕсли;
		#КонецЕсли
		
		Для НомерКолонки = ВыделеннаяОбластьЛево По ВыделеннаяОбластьПраво Цикл
			Для НомерСтроки = ВыделеннаяОбластьВерх По ВыделеннаяОбластьНиз Цикл
				Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ПроверенныеЯчейки.Получить(Ячейка.Имя) = Неопределено Тогда
					ПроверенныеЯчейки.Вставить(Ячейка.Имя, Истина);
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если Ячейка.Видимость = Истина Тогда
					Если Ячейка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Колонки
						И Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
						Число = Ячейка.Значение;
					ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
						Число = ОписаниеТиповЧисло.ПривестиЗначение(Ячейка.Текст);
					Иначе
						Продолжить;
					КонецЕсли;
					Если ТипЗнч(Число) = Тип("Число") Тогда
						Если Сумма = Неопределено Тогда
							Сумма = Число;
						Иначе
							Сумма = Сумма + Число;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если Сумма = Неопределено Тогда
		Возврат ""; // Нет ни одного числа.
	КонецЕсли;
	
	Возврат Формат(Сумма, "ЧН=0");
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуЯчеек()
	
	Если КоличествоВыделенныхЯчеек()>1 Тогда
		СуммаВыделенныхЯчеек = СуммаЯчеек(ОтчетТабличныйДокумент, Неопределено);
		Если СуммаВыделенныхЯчеек="<" Тогда
			СуммаВыделенныхЯчеек = РассчитатьСуммуЯчеекСервер(ОтчетТабличныйДокумент, ВыделенныеОбласти());
		КонецЕсли; 
		Если ПустаяСтрока(СуммаВыделенныхЯчеек) Тогда
			Элементы.СтрокаОтбора.ПодсказкаВвода = "";
		Иначе
			Элементы.СтрокаОтбора.ПодсказкаВвода = "Σ "+СуммаВыделенныхЯчеек;
		КонецЕсли; 
	Иначе
		Элементы.СтрокаОтбора.ПодсказкаВвода = "";
	КонецЕсли;
	
	Если ПустаяСтрока(Элементы.СтрокаОтбора.ПодсказкаВвода) Тогда
		Элементы.СтрокаОтбора.ПодсказкаВвода = Элементы.СтрокаОтбора.Подсказка;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеОбласти()
	
	ВыделенныеОбласти = Новый Массив;
	Для каждого Область Из ОтчетТабличныйДокумент.ВыделенныеОбласти Цикл
		Если НЕ ТипЗнч(Область)=Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоложения = Новый Структура;
		СтруктураПоложения.Вставить("Верх", Область.Верх);
		СтруктураПоложения.Вставить("Низ", Область.Низ);
		СтруктураПоложения.Вставить("Лево", Область.Лево);
		СтруктураПоложения.Вставить("Право", Область.Право);
		СтруктураПоложения.Вставить("ТипОбласти", Область.ТипОбласти);
		ВыделенныеОбласти.Добавить(СтруктураПоложения);
	КонецЦикла;
	Возврат ВыделенныеОбласти;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьСуммуЯчеекСервер(Знач ТабличныйДокумент, ВыделенныеОбласти)
	
	Возврат СуммаЯчеек(ТабличныйДокумент, ВыделенныеОбласти);
	
КонецФункции 

&НаКлиенте
Функция КоличествоВыделенныхЯчеек()
	
	Результат = 0;
	Для каждого Область Из ОтчетТабличныйДокумент.ВыделенныеОбласти Цикл
		Если НЕ ТипЗнч(Область)=Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли; 
		Результат = Результат+(Область.Право-Область.Лево+1)*(Область.Низ-Область.Верх+1);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ОбщиеПроцедуры

&НаСервере
Функция ДобавитьОписаниеНастройки(ЭлементыДобавления, Тип, ИмяПоля, Представление = "", ЭлементСхемы = Неопределено)
	
	СуществующаяСтрока = СтрокаОписанияПоля(Тип, ИмяПоля, ПоляНастроек);
	Если НЕ СуществующаяСтрока=Неопределено Тогда
		Если СуществующаяСтрока.Создан Тогда
			Возврат Неопределено;
		КонецЕсли;
		СуществующаяСтрока.Скрыт = Ложь;
		Возврат СуществующаяСтрока;
	КонецЕсли;
	Если Тип=ТипФильтр() Тогда
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
	ИначеЕсли Тип=ТипПараметр() Тогда
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных(ИмяПоля));
	ИначеЕсли Тип=ТипГруппировка() Тогда
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
	Иначе
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
	КонецЕсли; 
	Стр = ЭлементыДобавления.Добавить();
	Стр.Тип = Тип;
	Стр.Поле = ИмяПоля;
	Если Тип=ТипПараметр() ИЛИ Тип=ТипФильтр() Тогда
		Если ДоступноеПоле=Неопределено Тогда
			ЭлементыДобавления.Удалить(Стр);
			Возврат Неопределено;
		КонецЕсли; 
		Стр.ТипЗначения = ДоступноеПоле.ТипЗначения;
	Иначе
		Стр.ТипЗначения = Новый ОписаниеТипов("Булево");
	КонецЕсли; 
	Если ПустаяСтрока(Представление) Тогда
		Если ДоступноеПоле=Неопределено Тогда
			ЭлементыДобавления.Удалить(Стр);
			Возврат Неопределено;
		КонецЕсли; 
		Стр.Заголовок = ДоступноеПоле.Заголовок;
	Иначе
		Стр.Заголовок = Представление;
	КонецЕсли;
	Стр.ДополнительныеПараметры = Новый Структура;
	Стр.Реквизиты = Новый Структура;
	Стр.Элементы = Новый Структура;
	Если Тип=ТипФильтр() Тогда
		Если ДоступноеПоле=Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли; 
		ОпределитьЭлементыИРеквизитыФильтра(Стр, ЭлементСхемы, ДоступноеПоле, Ложь);
	ИначеЕсли Тип=ТипПараметр() Тогда
		Если ДоступноеПоле=Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли; 
		Стр.ДополнительныеПараметры.Вставить("АвтоОтметкаНезаполненного", ДоступноеПоле.ЗапрещатьНезаполненныеЗначения);
		ОпределитьЭлементыИРеквизитыПараметра(Стр, ЭлементСхемы, ДоступноеПоле);
	Иначе
		Стр.ВидЭлемента = "Флажок";
	КонецЕсли;
	Возврат Стр;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбъединитьНастройки(Приемник, Источник, Заменять = Неопределено) Экспорт
	
	Для Каждого Элемент Из Источник Цикл
		Если Приемник.Свойство(Элемент.Ключ) Тогда
			ЭлементПриемника = Приемник[Элемент.Ключ];
			Если ТипЗнч(Элемент.Значение)=ТипЗнч(ЭлементПриемника) Тогда
				Если ТипЗнч(Элемент.Значение)=Тип("Массив") Тогда  
					Для каждого ЗначениеИсточник Из Элемент.Значение Цикл
						ЭлементПриемника.Добавить(ЗначениеИсточник);
					КонецЦикла;
					Продолжить;
				ИначеЕсли ТипЗнч(Элемент.Значение)=Тип("Структура") ИЛИ ТипЗнч(Элемент.Значение)=Тип("Соответствие") Тогда  
					Для каждого ЗначениеИсточник Из Элемент.Значение Цикл
						ЭлементПриемника.Вставить(ЗначениеИсточник.Ключ, ЗначениеИсточник.Значение);
					КонецЦикла;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если Заменять = Ложь Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылку(Отчет, КлючВарианта)
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Если ТипЗнч(Отчет) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") 
		ИЛИ ТипЗнч(Отчет) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВариантыОтчетов.Ссылка КАК Ссылка,
		|	ВариантыОтчетов.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Отчет = &Отчет
		|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВариантыДополнительныхОтчетов.Ссылка,
		|	ВариантыДополнительныхОтчетов.ПометкаУдаления
		|ИЗ
		|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
		|ГДЕ
		|	ВариантыДополнительныхОтчетов.Отчет = &Отчет
		|	И ВариантыДополнительныхОтчетов.ИдентификаторКоманды = &КлючВарианта
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПометкаУдаления";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВариантыОтчетов.Вариант КАК Ссылка
		|ИЗ
		|	РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Отчет = &Отчет
		|	И ВариантыОтчетов.ВерсияРасширений = &ВерсияРасширений
		|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
		Запрос.УстановитьПараметр("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
	КонецЕсли;
	Запрос.УстановитьПараметр("Отчет", Отчет);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИдентификаторыСтрок(Дерево, СтруктураОтбора, ВключаяВложенные = Ложь)
	
	Результат = Новый Массив;
	Для каждого Стр Из Дерево.ПолучитьЭлементы() Цикл
		Совпадает = Истина;
		Для каждого Отбор Из СтруктураОтбора Цикл
			Если ТипЗнч(Отбор.Значение)=Тип("Массив") Тогда
				ЕстьСовпадение = Ложь;
				Для каждого Значение Из Отбор.Значение Цикл
					Если Стр[Отбор.Ключ]=Значение  Тогда
						ЕстьСовпадение = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
				Если НЕ ЕстьСовпадение Тогда
					Совпадает = Ложь;
					Прервать;
				КонецЕсли; 
			Иначе
				Если НЕ Стр[Отбор.Ключ]=Отбор.Значение  Тогда
					Совпадает = Ложь;
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		Если Совпадает Тогда
			Результат.Добавить(Стр.ПолучитьИдентификатор());
		КонецЕсли;
		Если ВключаяВложенные Тогда
			ВложенныеЭлементы = ИдентификаторыСтрок(Стр, СтруктураОтбора, Истина);
			Для каждого ПодСтр Из ВложенныеЭлементы Цикл
				Результат.Добавить(ПодСтр);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СтрокиДерева(Дерево, СтруктураОтбора, ВключаяВложенные = Ложь)
	
	Результат = Новый Массив;
	Для каждого Стр Из Дерево.ПолучитьЭлементы() Цикл
		Совпадает = Истина;
		Для каждого Отбор Из СтруктураОтбора Цикл
			Если ТипЗнч(Отбор.Значение)=Тип("Массив") Тогда
				ЕстьСовпадение = Ложь;
				Для каждого Значение Из Отбор.Значение Цикл
					Если Стр[Отбор.Ключ]=Значение  Тогда
						ЕстьСовпадение = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
				Если НЕ ЕстьСовпадение Тогда
					Совпадает = Ложь;
					Прервать;
				КонецЕсли; 
			Иначе
				Если НЕ Стр[Отбор.Ключ]=Отбор.Значение  Тогда
					Совпадает = Ложь;
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		Если Совпадает Тогда
			Результат.Добавить(Стр);
		КонецЕсли;
		Если ВключаяВложенные Тогда
			ВложенныеЭлементы = СтрокиДерева(Стр, СтруктураОтбора, Истина);
			Для каждого ПодСтр Из ВложенныеЭлементы Цикл
				Результат.Добавить(ПодСтр);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Функция СтрокаНаложенногоФильтра(ИмяКнопки)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяКнопки", ИмяКнопки);
	Строки = НаложенныеФильтры.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0];
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаОписанияПоИмениЭлемента(ИмяЭлемента, ПоляНастроек)
	
	Для каждого Стр Из ПоляНастроек.ПолучитьЭлементы() Цикл
		Для каждого Элемент Из Стр.Элементы Цикл
			Если Элемент.Ключ=ИмяЭлемента Тогда
				Возврат Стр;
			КонецЕсли; 
		КонецЦикла; 
		ПодСтр = СтрокаОписанияПоИмениЭлемента(ИмяЭлемента, Стр);
		Если НЕ ПодСтр=Неопределено Тогда
			Возврат ПодСтр;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Неопределено; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаОписанияПоля(Тип, Поле, ПоляНастроек)
	
	Для каждого Стр Из ПоляНастроек.ПолучитьЭлементы() Цикл
		Если Стр.Тип=Тип И Стр.Поле=Поле Тогда
			Возврат Стр;
		КонецЕсли; 
		ПодСтр = СтрокаОписанияПоля(Тип, Поле, Стр);
		Если НЕ ПодСтр=Неопределено Тогда
			Возврат ПодСтр;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Неопределено; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьПараметрыВыбора(ДоступноеПоле)
	
	Если ДоступноеПоле=Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ДоступноеПоле.ПолучитьПараметрыВыбора();
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьСвязиПараметровВыбора(ДоступноеПоле)
	
	Если ДоступноеПоле=Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ДоступноеПоле.ПолучитьСвязиПараметровВыбора();
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Функция ЭтоЧисло(Текст)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если СтрЧислоВхождений(Текст, ".")+СтрЧислоВхождений(Текст, ",")>1 Тогда
		Возврат Ложь;
	КонецЕсли; 
	Для ии = 1 По СтрДлина(Текст) Цикл
		Символ = Сред(Текст, ии, 1);
		Если Найти(" 0123456789.,"+Символы.НПП, Символ)>0 Тогда
			Продолжить;
		КонецЕсли;
		Возврат Ложь;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции
 
&НаСервере
Процедура ОбновитьДополнительныйСвойстваСКД()
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	
	ИменаПолей =
	"ИспользоватьСравнение
	|ФиксироватьКолонки";
	
	Свойства = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолей, Символы.ПС);
	Для каждого Свойство Из Свойства Цикл
		Если НЕ НастройкиОтчета.Свойство(Свойство) Тогда
			Продолжить;
		КонецЕсли; 
		ДополнительныеСвойства.Вставить(Свойство, НастройкиОтчета[Свойство]);
	КонецЦикла;
	
	Если НастройкиОтчета.РежимПериода="НаДату" Тогда
		ДополнительныеСвойства.Вставить("Период", Период.ДатаОкончания);
	ИначеЕсли НастройкиОтчета.РежимПериода="ЗаПериод" Тогда
		ДополнительныеСвойства.Вставить("НачалоПериода", Период.ДатаНачала);
		ДополнительныеСвойства.Вставить("КонецПериода", Период.ДатаОкончания);
	КонецЕсли;
	ДополнительныеСвойства.Вставить("НеДобавлятьПериод", Истина);
	
	ДополнительныеСвойства.Вставить("РежимРасшифровки", РежимРасшифровки);
	ДополнительныеСвойства.Вставить("ГруппировкаКолонок", ПолеГруппировкиКолонок);
	ДополнительныеСвойства.Вставить("Сравнение", ПолеСравнения);
	ДополнительныеСвойства.Вставить("ПоказыватьАбсолютноеИзменение", ПоказыватьАбсолютноеИзменение);
	ДополнительныеСвойства.Вставить("ПоказыватьОтносительноеИзменение", ПоказыватьОтносительноеИзменение);
	
	Если ДополнительныеСвойства.Свойство("Адрес") Тогда
		ДополнительныеСвойства.Удалить("Адрес");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВБулевоТриСостояния(Значение)
	
	Если Значение=Истина Тогда 
		Возврат ПредопределенноеЗначение("Перечисление.БулевоТриСостояния.Истина");
	ИначеЕсли Значение=Ложь Тогда 
		Возврат ПредопределенноеЗначение("Перечисление.БулевоТриСостояния.Ложь");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.БулевоТриСостояния.НеИзменять");
	КонецЕсли;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция НайтиВМассиве(Массив, Отбор)
	
	Результат = Новый Массив;
	Для каждого Элемент Из Массив Цикл
		Пропустить = Ложь;
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если НЕ Элемент[ЭлементОтбора.Ключ]=ЭлементОтбора.Значение Тогда
				Пропустить = Истина;
				Прервать;
			КонецЕсли;  
		КонецЦикла;
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;
		Результат.Добавить(Элемент);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ОпределитьФормуВыбора(Значение, ВыборГруппИЭлементов)
	
	Тип = ТипЗнч(Значение);
	Если НЕ ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
		Возврат "";
	КонецЕсли; 
	ПолноеИмяТипа = ОбщегоНазначения.ИмяТаблицыПоСсылке(Новый(Тип));
	Если ВыборГруппИЭлементов=ГруппыИЭлементы.Группы Тогда
		Возврат ПолноеИмяТипа+".ФормаВыбораГруппы";
	Иначе
		Возврат ПолноеИмяТипа+".ФормаВыбора";
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция АдресХранилищаРезультата()
	
	Возврат ПоместитьВоВременноеХранилище(ОтчетТабличныйДокумент, УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовоеИмяОтметкиФильтра()
	
	Возврат НовоеИмяРеквизита("ОтметкаФильтра");	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовоеИмяРеквизита(Тип)
	
	Возврат Тип+СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");	
	
КонецФункции 

&НаСервере
Функция КоличествоПоказателейСКД(ВыборЭлементы = Неопределено)
	
	Если ВыборЭлементы=Неопределено Тогда
		ВыборЭлементы = Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы;
	КонецЕсли; 
	КоличествоПоказателей = 0;
	Для каждого Элемент Из ВыборЭлементы Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			КоличествоВложенных = КоличествоПоказателейСКД(Элемент.Элементы);
			КоличествоПоказателей = КоличествоПоказателей+КоличествоВложенных;
		ИначеЕсли ТипЗнч(Элемент)=Тип("ВыбранноеПолеКомпоновкиДанных") И Элемент.Использование Тогда
			КоличествоПоказателей = КоличествоПоказателей+1;
		КонецЕсли; 
	КонецЦикла;   
	Возврат КоличествоПоказателей;
	
КонецФункции

&НаСервере
Функция ЕстьСоставныеГруппировкиКолонок(Структура)
	
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			Результат = ЕстьСоставныеГруппировкиКолонок(Элемент.Колонки);
			Если Результат Тогда
				Возврат Истина;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			КоличествоПолей = 0;
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Поле.Использование Тогда
					КоличествоПолей = КоличествоПолей+1;
				КонецЕсли; 
			КонецЦикла; 
			Если КоличествоПолей>1 Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Добавляет описание группировки в дерево полей настроек
//
// Параметры:
//   Путь - Строка - Полное имя поля группировки  
//   НестандартныйОбработчик - Булево - Признак использования нестандартного обработчика 
//      при изменении признака использования группировки
//   ТипГруппировки - ТипГруппировкиКомпоновкиДанных - Тип добавляемой группировки
//
// Возвращаемое значение:
//   ДанныеФормыЭлементКоллекции - добавленная строка дерева настроек
//
&НаСервере
Функция ДобавитьОписаниеГруппировкиВызов(Путь, НестандартныйОбработчик = Ложь, ТипГруппировки = Неопределено) Экспорт
	
	Возврат ДобавитьОписаниеГруппировки(Путь, НестандартныйОбработчик, ТипГруппировки);
	
КонецФункции
 
// Добавляет описание реквизита (поля группировки) в дерево полей настроек
//
// Параметры:
//   Путь - Строка - Полное имя поля реквизита  
//   НестандартныйОбработчик - Булево - Признак использования нестандартного обработчика 
//      при изменении признака использования реквизита
//   ИдентификаторРодителя - Число - Идентификатор строки родителя в дереве полей настроек
//   ОбновлятьФорму - Булево - Признак обновления заголовка родительской группировки на форме отчета
//
// Возвращаемое значение:
//   ДанныеФормыЭлементКоллекции - добавленная строка дерева настроек
//
&НаСервере
Функция ДобавитьОписаниеРеквизитаВызов(Путь, НестандартныйОбработчик = Ложь, ИдентификаторРодителя, ОбновлятьФорму = Истина) Экспорт
	
	Возврат ДобавитьОписаниеРеквизита(Путь, НестандартныйОбработчик, ИдентификаторРодителя, ОбновлятьФорму);
	
КонецФункции

// Добавляет описание показателя (выбранного поля-ресурса) в дерево полей настроек
//
// Параметры:
//   Путь - Строка - Полное имя поля показателя  
//   НестандартныйОбработчик - Булево - Признак использования нестандартного обработчика 
//      при изменении признака использования показателя
//   ТипКолонки - Строка - "Показатель" / "ГруппаПоказателей"
//
// Возвращаемое значение:
//   ДанныеФормыЭлементКоллекции - добавленная строка дерева настроек
//
&НаСервере
Функция ДобавитьОписаниеПоказателяВызов(Путь, НестандартныйОбработчик = Ложь, ТипКолонки = "") Экспорт
	
	Возврат ДобавитьОписаниеПоказателя(Путь, НестандартныйОбработчик, ТипКолонки);
	
КонецФункции
 
// Добавляет описание фильтра (отбора) в дерево полей настроек
//
// Параметры:
//   Путь - Строка - Полное имя поля фильтра  
//   НестандартныйОбработчик - Булево - Признак использования нестандартного обработчика 
//      при изменении фильтра
//
// Возвращаемое значение:
//   ДанныеФормыЭлементКоллекции - добавленная строка дерева настроек
//
&НаСервере
Процедура ДобавитьОписаниеФильтраВызов(Путь, НестандартныйОбработчик = Ложь) Экспорт
	
	ДобавитьОписаниеФильтра(Путь, НестандартныйОбработчик);
	
КонецПроцедуры

// Добавляет описание параметра в дерево полей настроек
//
// Параметры:
//   Путь - Строка - Полное имя параметра данных  
//   НестандартныйОбработчик - Булево - Признак использования нестандартного обработчика 
//      при изменении параметра
//
// Возвращаемое значение:
//   ДанныеФормыЭлементКоллекции - добавленная строка дерева настроек
//
&НаСервере
Процедура ДобавитьОписаниеПараметраВызов(ИмяПараметра, НестандартныйОбработчик = Ложь) Экспорт
	
	ДобавитьОписаниеПараметра(ИмяПараметра, НестандартныйОбработчик);
	
КонецПроцедуры

// Обновление реквизитов и элементов на форме отчета
//
// Параметры:
//   ПолноеОбновление - Булево - Признак полного удаления и повторного создания реквизитов и элементов
//
&НаСервере
Процедура ОбновитьФормуВызов(ПолноеОбновление = Истина) Экспорт
	
	ВнестиИзмененияВРеквизитыНаФорме(ПолноеОбновление); 
	
КонецПроцедуры

// Возвращает массив идентификаторов строк дерева настроек по заданному отбору
//
// Параметры:
//   СтруктураОтбора - Структура - Отбор строк  
//   ВключаяВложенные - Булево - Признак поиска среди вложенных элементов дерева
//
// Возвращаемое значение:
//   Массив - Массив элементов типа Число
//
&НаСервере
Функция ИдентификаторыСтрокНастроекВызов(СтруктураОтбора, ВключаяВложенные = Ложь) Экспорт
	
	Возврат ИдентификаторыСтрок(ПоляНастроек, СтруктураОтбора, ВключаяВложенные);
	
КонецФункции

// Возвращает массив строк дерева настроек по заданному отбору
//
// Параметры:
//   СтруктураОтбора - Структура - Отбор строк  
//   ВключаяВложенные - Булево - Признак поиска среди вложенных элементов дерева
//
// Возвращаемое значение:
//   Массив - Массив элементов типа ДанныеФормыЭлементКоллекции
//   Неопределено - Строка не найдена
//
&НаСервере
Функция СтрокиДереваНастроекВызов(СтруктураОтбора, ВключаяВложенные = Ложь) Экспорт
	
	Возврат СтрокиДерева(ПоляНастроек, СтруктураОтбора, ВключаяВложенные);
	
КонецФункции 

// Возвращает строку дерева настроек для заданного элемента формы
//
// Параметры:
//   ИмяЭлемента - Строка - Имя элемента формы для поиска  
//
// Возвращаемое значение:
//   ДанныеФормыЭлементКоллекции - Строка дерева настроек
//
&НаСервере
Функция СтрокаОписанияПоИмениЭлементаВызов(ИмяЭлемента) Экспорт
	
	Возврат СтрокаОписанияПоИмениЭлемента(ИмяЭлемента, ПоляНастроек); 
	
КонецФункции

// Возвращает строку дерева настроек для заданных типа и поля
//
// Параметры:
//   Тип - Строка - Тип настройки 
//      "Группировка" / "Реквизит" / "Показатель" / "ГруппаПоказателей" / "Фильтр" / "Параметр"
//   Поле - Строка - Имя поля 
//
// Возвращаемое значение:
//   ДанныеФормыЭлементКоллекции - Строка дерева настроек
//   Неопределено - Строка не найдена
//
&НаСервере
Функция СтрокаОписанияПоляВызов(Тип, Поле) Экспорт
	
	Возврат СтрокаОписанияПоля(Тип, Поле, ПоляНастроек); 
	
КонецФункции

// Обновление отображения отметок активных фильтров
//
&НаСервере
Процедура ОбновитьОтображениеОтметокФильтровВызов() Экспорт
	
	ОбновитьОтображениеОтметокФильтров();
	
КонецПроцедуры

#КонецОбласти 