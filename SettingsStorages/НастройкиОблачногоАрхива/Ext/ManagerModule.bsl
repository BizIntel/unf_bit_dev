////////////////////////////////////////////////////////////////////////////////
// Подсистема "ОблачныйАрхив".
// ХранилищеНастроек.НастройкиОблачногоАрхива.МодульМенеджера.
//
////////////////////////////////////////////////////////////////////////////////

#Область Описание

////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ
//
// КлючОбъекта, доступные значения:
// - ИнформацияОКлиенте;
// - НастройкиАгентаКопированияКлиент;
// - НастройкиАгентаКопированияОбщие;
// - АктивацииАгентовКопирования;
// - ПараметрыОкруженияСервер;
// - ПараметрыАвторизацииИПП;
// - НастройкиЖурналаРегистрации;
// - АдресаВебСервисов;
// - НастройкиВебСервисов.
//
////////////////////////////////////////////////////////////////////////////////
// Все настройки не требуют указания пользователя.
//
#Область Описание_ЕстьКлючНастроек
////////////////////////////////////////////////////////////////////////////////
// - Для этих ключей объекта существует ключ настроек (ключом настроек выступает ИмяКомпьютера()):
//
// - ИнформацияОКлиенте - берутся из РегистрСведений.СвойстваЛокальныхКомпьютеровДляОблачногоАрхива, если не просрочено.
//       Если данные просрочены (им больше 6 часов), то извне должно инициироваться получение настроек заново.
//       Т.к. ОблачныйАрхив работает только на файловых ИБ, то получение настроек можно осуществлять как на сервере,
//         так и на клиенте - это один и тот же компьютер. Состав настроек:
//    * ДатаПроверки;
//    * АгентКопированияУстановлен;
//    * АгентКопированияАктивирован_ЕстьФайлыСертификатов;
//    * КаталогУстановкиАгентаКопирования;
//    * ВерсияУстановленногоАгентаКопирования;
//    * ТипОС;
//    * ВерсияОС;
//    * ИмяКомпьютера;
//    * ВерсияПлатформы;
//    * ИдентификаторКомпьютера;
//    * ЭтоАдминистраторWindows;
//    * ЛогинАдминистратораОС.
//
// - НастройкиАгентаКопированияКлиент - берутся из РегистрСведений.НастройкиОблачногоАрхиваНаЛокальномКомпьютере, если не просрочено.
//       Если данные просрочены (им больше 6 часов), то извне должно инициироваться получение настроек заново.
//       Т.к. ОблачныйАрхив работает только на файловых ИБ, то получение настроек можно осуществлять как на сервере,
//         так и на клиенте - это один и тот же компьютер. Состав настроек:
//    * ДатаПроверки;
//    * КаталогЛогов;
//    * КаталогСтатистики;
//    * КаталогРабочий;
//    * РасписаниеАвтоматическогоРезервногоКопирования;
//      ** РасписаниеВключено;
//      ** Вариант;
//      ** Ежедневно_ОдинРазВДень:
//        *** Время (Время);
//      ** Ежедневно_НесколькоРазВДень:
//        *** ВремяНачала (Время);
//        *** ВремяОкончания (Время);
//        *** КоличествоЧасовПовтора (Число 1..23);
//      ** Еженедельно:
//        *** Время (Время);
//        *** ДниНедели (Массив (числа 1..7));
//      ** Ежемесячно_ПоДням:
//        *** Время (Время);
//        *** ДниМесяца (Массив (числа 1..32));
//      ** Ежемесячно_ПоДнямНедели:
//        *** Время (Время);
//        *** НомерНедели (Число 1..5) (first, second, third, fourth, last);
//        *** ДниНедели (Массив (числа 1..7)).
//
// - АктивацииАгентовКопирования - берутся из РегистрСведений.АктивированныеАгентыРезервногоКопирования, если не просрочено;
//       Если данные просрочены (им больше 6 часов), то извне должно инициироваться получение настроек заново.
//       Т.к. ОблачныйАрхив работает только на файловых ИБ, то получение настроек можно осуществлять как на сервере,
//         так и на клиенте - это один и тот же компьютер. Состав настроек:
//    * ДатаПроверки;
//    * АгентКопированияАктивированНаТекущийЛогин;
//    * АгентКопированияАктивированНаДругойЛогин;
//    * СрокОкончанияПодписки.
//
#КонецОбласти
#Область Описание_НетКлючаНастроек
////////////////////////////////////////////////////////////////////////////////
// - Для этих ключей объекта отсутствует ключ настроек:
//
// - ПараметрыАвторизацииИПП:
//    * Логин;
//    * Пароль.
//
// - НастройкиЖурналаРегистрации - берутся из Константа.НастройкиОблачногоАрхива:
//    * ЖурналРегистрации_ПодробнаяЗапись;
//    * ЖурналРегистрации_ВыводитьОтладочныеСообщенияНаЭкран.
//
// - АдресаВебСервисов - возвращаются функциями:
//    * АдресWSDLАвторизации1С;
//    * АдресWSDLБэкап1СПубличный;
//    * АдресWSDLБэкап1СПриватный;
//    * АдресWSDLАгентаКопирования.
//
// - НастройкиВебСервисов - берутся из Константа.НастройкиОблачногоАрхива:
//    * Таймаут.
//
// - ПараметрыОкруженияСервер - берутся из Константа.НастройкиОблачногоАрхива:
//    * ПодсистемаНастроена;
//    * ПредыдущееСостояниеПодсистемаНастроена;
//    * ДатаИзмененияПодсистемаНастроена;
//    * ВерсияПодсистемы;
//    * ИмяИБ;
//    * ИдентификаторИБ;
//    * ИдентификаторИБ_СтрокаСоединения;
//    * ИдентификаторИБ_ИмяКомпьютера;
//    * ИнформационнаяБазаФайловая.
//
// - НастройкиАгентаКопированияОбщие:
//    * КоличествоХранимыхКопий_Ежемесячные;
//    * КоличествоХранимыхКопий_Еженедельные;
//    * КоличествоХранимыхКопий_Ежедневные.
//
#КонецОбласти
//
// С целью отладки существует еще один параметр:
// - Отладка:
//   * ДатаСоздания - дата - не должна быть позже текущей универсальной даты,
//       если меньше текущей даты на полчаса, то берутся оригинальные настройки;
//   * Повторяет всю-всю структуру параметров,
//       как глобальных: ПараметрыОкруженияСервер, АдресаВебСервисов, НастройкиВебСервисов, НастройкиЖурналаРегистрации, ПараметрыАвторизацииИПП,
//       так и привязанных к Имени компьютера: ИнформацияОКлиенте, НастройкиАгентаКопированияКлиент, АктивацииАгентовКопирования;
// Для целей отладки существует такой механизм:
//    В константе может существовать ключ Отладка, внутри которого будут храниться
//    все ключи основных настроек, но с произвольными значениями. Также обязательно должен храниться ключ Отладка.ДатаСоздания - если прошло
//    более 30 минут с момента установки отладочных параметров сеанса, то они не действительны.
//    "Время жизни" отладочных параметров сделано с целью, чтобы случайно установкой тестовых параметров не нарушить работу системы.
// Установить "отладочные" параметры можно только с помощью специальной обработки.

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список доступных значений для поля "КлючОбъекта".
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Массив - список доступных значений.
//
Функция ПолучитьЗначенияДопустимыхКлючейОбъекта() Экспорт

	Результат = Новый Массив;

	Результат.Добавить("ИнформацияОКлиенте");
	Результат.Добавить("НастройкиАгентаКопированияКлиент");
	Результат.Добавить("НастройкиАгентаКопированияОбщие");
	Результат.Добавить("АктивацииАгентовКопирования");
	Результат.Добавить("ПараметрыОкруженияСервер");
	Результат.Добавить("ПараметрыАвторизацииИПП");
	Результат.Добавить("НастройкиЖурналаРегистрации");
	Результат.Добавить("АдресаВебСервисов");
	Результат.Добавить("НастройкиВебСервисов");

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗагрузки(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИмяПользователяИБ)

	лкТекущаяУниверсальнаяДата = ТекущаяУниверсальнаяДата();

	ТипСтруктура = Тип("Структура");

	УстановитьПривилегированныйРежим(Истина);

		// Все настройки можно продублировать в ключе Отладка.
		ПолучитьНастройкиПоУмолчанию = Истина;
		Настройки = Неопределено;
		лкХранилищеНастроекОблачногоАрхива = Константы.НастройкиОблачногоАрхива.Получить().Получить();
		Если ТипЗнч(лкХранилищеНастроекОблачногоАрхива) = ТипСтруктура Тогда
			// Присутствуют отладочные параметры?
			Если лкХранилищеНастроекОблачногоАрхива.Свойство("Отладка") = Истина Тогда
				Если (лкХранилищеНастроекОблачногоАрхива.Отладка.Свойство("ДатаСоздания"))
						И (лкХранилищеНастроекОблачногоАрхива.Отладка.ДатаСоздания <= лкТекущаяУниверсальнаяДата)
						И (лкХранилищеНастроекОблачногоАрхива.Отладка.ДатаСоздания >= лкТекущаяУниверсальнаяДата - 30*60) Тогда
					лкХранилищеНастроекОблачногоАрхива = лкХранилищеНастроекОблачногоАрхива.Отладка;
				КонецЕсли;
			КонецЕсли;
			Если лкХранилищеНастроекОблачногоАрхива.Свойство(КлючОбъекта, Настройки) = Истина Тогда
				// Есть такое свойство
				Если ТипЗнч(Настройки) = ТипСтруктура Тогда
					// Правильный тип
					ПолучитьНастройкиПоУмолчанию = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ПолучитьНастройкиПоУмолчанию = Истина Тогда
			Настройки = Неопределено; // При валидации подставятся значения по-умолчанию
		КонецЕсли;

		// Глобальные настройки, отсутствует ключ настроек
		Если (КлючОбъекта = "ПараметрыАвторизацииИПП")
				ИЛИ (КлючОбъекта = "НастройкиЖурналаРегистрации")
				ИЛИ (КлючОбъекта = "АдресаВебСервисов")
				ИЛИ (КлючОбъекта = "НастройкиВебСервисов")
				ИЛИ (КлючОбъекта = "ПараметрыОкруженияСервер")
				ИЛИ (КлючОбъекта = "НастройкиАгентаКопированияОбщие") Тогда

			Настройки = ПровестиВалидациюНастроек(Настройки, КлючОбъекта, "");

		// Глобальные настройки, есть ключ настроек
		ИначеЕсли (КлючОбъекта = "ИнформацияОКлиенте")
				ИЛИ (КлючОбъекта = "НастройкиАгентаКопированияКлиент")
				ИЛИ (КлючОбъекта = "АктивацииАгентовКопирования") Тогда

			Настройки = ПровестиВалидациюНастроек(Настройки, КлючОбъекта, КлючНастроек);

		Иначе

			Результат = СтрШаблон(
				НСтр("ru='ХранилищаНастроек.НастройкиОблачногоАрхива.ОбработкаЗагрузки: не найден ключ объекта %1'"),
				КлючОбъекта);
			ВызватьИсключение Результат;

		КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ОбработкаПолученияОписания(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИмяПользователяИБ)

	// Для всех настроек отсутствует описание настроек
	ОписаниеНастроек = Новый ОписаниеНастроек;

КонецПроцедуры

Процедура ОбработкаСохранения(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИмяПользователяИБ)

	ТипСтруктура = Тип("Структура");
	лкТекущаяУниверсальнаяДата = ТекущаяУниверсальнаяДата();

	Настройки = ПровестиВалидациюНастроек(Настройки, КлючОбъекта, КлючНастроек);

	// Глобальные настройки, отсутствует ключ настроек.
	// Сохранение: Другие способы сохранения.
	Если (КлючОбъекта = "ПараметрыАвторизацииИПП") Тогда

		ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(Настройки);

	// Константа.НастройкиОблачногоАрхива.
	ИначеЕсли (КлючОбъекта = "НастройкиЖурналаРегистрации")
			ИЛИ (КлючОбъекта = "НастройкиВебСервисов")
			ИЛИ (КлючОбъекта = "НастройкиАгентаКопированияОбщие") Тогда

		УстановитьПривилегированныйРежим(Истина);
			лкХранилищеНастроекОблачногоАрхива = Константы.НастройкиОблачногоАрхива.Получить().Получить();
			Если ТипЗнч(лкХранилищеНастроекОблачногоАрхива) <> ТипСтруктура Тогда
				лкХранилищеНастроекОблачногоАрхива = Новый Структура;
			КонецЕсли;
			лкХранилищеНастроекОблачногоАрхива.Вставить(КлючОбъекта, Настройки);
			Константы.НастройкиОблачногоАрхива.Установить(Новый ХранилищеЗначения(лкХранилищеНастроекОблачногоАрхива));
		УстановитьПривилегированныйРежим(Ложь);

	// Сохранение: Настройки, которые предусматривают частичное сохранение.
	// Константа.НастройкиОблачногоАрхива.
	ИначеЕсли (КлючОбъекта = "ПараметрыОкруженияСервер") Тогда

		// Удалить из настроек параметры, которые не должны сохраняться:
		// - ВерсияПодсистемы;
		// - ИдентификаторИБ;
		// - ИнформационнаяБазаФайловая.
		МассивУдаляемыхСвойств = Новый Массив;
		МассивУдаляемыхСвойств.Добавить("ВерсияПодсистемы");
		МассивУдаляемыхСвойств.Добавить("ИдентификаторИБ");
		МассивУдаляемыхСвойств.Добавить("ИнформационнаяБазаФайловая");
		УстановитьПривилегированныйРежим(Истина);
			лкХранилищеНастроекОблачногоАрхива = Константы.НастройкиОблачногоАрхива.Получить().Получить();
			Если ТипЗнч(лкХранилищеНастроекОблачногоАрхива) <> ТипСтруктура Тогда
				лкХранилищеНастроекОблачногоАрхива = Новый Структура;
			КонецЕсли;
			Для Каждого УдаляемоеСвойство Из МассивУдаляемыхСвойств Цикл
				Если Настройки.Свойство(УдаляемоеСвойство) Тогда
					Настройки.Удалить(УдаляемоеСвойство);
				КонецЕсли;
			КонецЦикла;
			лкХранилищеНастроекОблачногоАрхива.Вставить(КлючОбъекта, Настройки);
			Константы.НастройкиОблачногоАрхива.Установить(Новый ХранилищеЗначения(лкХранилищеНастроекОблачногоАрхива));
		УстановитьПривилегированныйРежим(Ложь);

	// Глобальные настройки, есть ключ настроек.

	// РегистрСведений.СвойстваЛокальныхКомпьютеровДляОблачногоАрхива.
	ИначеЕсли (КлючОбъекта = "ИнформацияОКлиенте") Тогда
		Запись = РегистрыСведений.СвойстваЛокальныхКомпьютеровДляОблачногоАрхива.СоздатьМенеджерЗаписи();
			Запись.ДатаПроверки                  = лкТекущаяУниверсальнаяДата;
			Запись.MachineGuid                   = Настройки.ИдентификаторКомпьютера;
			Запись.ТипОС                         = Настройки.ТипОС;
			Запись.ВерсияОС                      = Настройки.ВерсияОС;
			Запись.ИмяКомпьютера                 = Настройки.ИмяКомпьютера;
			Запись.КаталогУстановки              = Настройки.КаталогУстановкиАгентаКопирования;
			Запись.ВерсияАгентаКопирования       = Настройки.ВерсияУстановленногоАгентаКопирования;
			Запись.АгентКопированияУстановлен    = Настройки.АгентКопированияУстановлен;
			Запись.ПрисутствуютФайлыСертификатов = Настройки.АгентКопированияАктивирован_ЕстьФайлыСертификатов;
			Запись.ЛогинАдминистратораОС         = Настройки.ЛогинАдминистратораОС;
		Запись.Записать(Истина);
		// Некоторые настройки НЕ сохраняются:
		//  Настройки.ТипПлатформы;
		//  Настройки.ВерсияПлатформы;
		//  Настройки.ЭтоАдминистраторWindows.

	// РегистрСведений.НастройкиОблачногоАрхиваНаЛокальномКомпьютере.
	ИначеЕсли (КлючОбъекта = "НастройкиАгентаКопированияКлиент") Тогда
		Запись = РегистрыСведений.НастройкиОблачногоАрхиваНаЛокальномКомпьютере.СоздатьМенеджерЗаписи();
			Запись.ДатаПроверки      = лкТекущаяУниверсальнаяДата;
			Запись.ИмяКомпьютера     = Настройки.ИмяКомпьютера;
			Запись.КаталогЛогов      = Настройки.КаталогЛогов;
			Запись.КаталогРабочий    = Настройки.КаталогРабочий;
			Запись.КаталогСтатистики = Настройки.КаталогСтатистики;
			Запись.Расписание        = Новый ХранилищеЗначения(Настройки.РасписаниеАвтоматическогоРезервногоКопирования, Новый СжатиеДанных(0));
		Запись.Записать(Истина);

	// РегистрСведений.АктивированныеАгентыРезервногоКопирования.
	ИначеЕсли (КлючОбъекта = "АктивацииАгентовКопирования") Тогда
		Запись = РегистрыСведений.АктивированныеАгентыРезервногоКопирования.СоздатьМенеджерЗаписи();
			Запись.ДатаПроверки                              = лкТекущаяУниверсальнаяДата;
			Запись.MachineGuid                               = Настройки.ИдентификаторКомпьютера;
			Запись.АгентКопированияАктивированНаДругойЛогин  = Настройки.АгентКопированияАктивированНаДругойЛогин;
			Запись.АгентКопированияАктивированНаТекущийЛогин = Настройки.АгентКопированияАктивирован_ДанныеВебСервисов;
			Запись.СрокОкончанияПодписки                     = Настройки.СрокОкончанияПодписки;
		Запись.Записать(Истина);
		// Некоторые настройки НЕ сохраняются:
		//  Настройки.ИмяКомпьютера; // Привязка ИмяКомпьютера к MachineGuid осуществляется в регистре сведений "СвойстваЛокальныхКомпьютеровДляОблачногоАрхива".

	// Сохранение: Настройки, которые не предусматривают сохранение.
	ИначеЕсли (КлючОбъекта = "АдресаВебСервисов") Тогда

		// Не сохраняется

	Иначе

		Результат = СтрШаблон(
			НСтр("ru='ХранилищаНастроек.НастройкиОблачногоАрхива.ОбработкаСохранения: не найден ключ объекта %1'"),
			КлючОбъекта);
		ВызватьИсключение Результат;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУстановкиОписания(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИмяПользователяИБ)

	// Для всех настроек отсутствует описание настроек
	Если (КлючОбъекта = "ПараметрыАвторизацииИПП") Тогда
	// Константа.НастройкиОблачногоАрхива.
	ИначеЕсли (КлючОбъекта = "НастройкиЖурналаРегистрации")
			ИЛИ (КлючОбъекта = "НастройкиВебСервисов")
			ИЛИ (КлючОбъекта = "НастройкиАгентаКопированияОбщие") Тогда
	// Сохранение: Настройки, которые предусматривают частичное сохранение.
	// Константа.НастройкиОблачногоАрхива.
	ИначеЕсли (КлючОбъекта = "ПараметрыОкруженияСервер") Тогда
	// Глобальные настройки, есть ключ настроек.
	// РегистрСведений.СвойстваЛокальныхКомпьютеровДляОблачногоАрхива.
	ИначеЕсли (КлючОбъекта = "ИнформацияОКлиенте") Тогда
	// РегистрСведений.НастройкиОблачногоАрхиваНаЛокальномКомпьютере.
	ИначеЕсли (КлючОбъекта = "НастройкиАгентаКопированияКлиент") Тогда
	// РегистрСведений.АктивированныеАгентыРезервногоКопирования.
	ИначеЕсли (КлючОбъекта = "АктивацииАгентовКопирования") Тогда
	// Сохранение: Настройки, которые не предусматривают сохранение.
	ИначеЕсли (КлючОбъекта = "АдресаВебСервисов") Тогда
		// Не сохраняется
	Иначе
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция приводит структуру настроек к правильному виду - удаляет ненужные поля,
//   заполняет поля по-умолчанию, добавляет отсутствующие поля, заполняет поля правильными значениями.
// 
// Параметры:
//  Настройки    - Структура;
//  КлючОбъекта  - Строка;
//  КлючНастроек - Строка;
//
// Возвращаемое значение:
//  Структура.
//
Функция ПровестиВалидациюНастроек(Настройки, КлючОбъекта, КлючНастроек) Экспорт

	лкТекущаяУниверсальнаяДата = ТекущаяУниверсальнаяДата();

	ТипСтруктура      = Тип("Структура");
	ТипЧисло          = Тип("Число");
	ТипБулево         = Тип("Булево");
	ТипСтрока         = Тип("Строка");
	ТипМассив         = Тип("Массив");
	ТипДата           = Тип("Дата");

	Если (КлючОбъекта = "ПараметрыАвторизацииИПП") Тогда

#Область ПараметрыАвторизацииИПП

		ДанныеАутентификацииПользователяИнтернетПоддержки = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();

		// Для этого ключа объекта не действует КлючНастроек.
		// Обязательные поля:
		// - Логин  - Строка;
		// - Пароль - Строка.
		РезультатПоУмолчанию = Новый Структура("Логин, Пароль",
			?(ТипЗнч(ДанныеАутентификацииПользователяИнтернетПоддержки) = ТипСтруктура, ДанныеАутентификацииПользователяИнтернетПоддержки.Логин, ""),
			?(ТипЗнч(ДанныеАутентификацииПользователяИнтернетПоддержки) = ТипСтруктура, ДанныеАутентификацииПользователяИнтернетПоддержки.Пароль, ""));
		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство? Если НЕТ - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			// Строковые значения
			СвойстваСтроковые = Новый Массив;
			СвойстваСтроковые.Добавить("Логин");
			СвойстваСтроковые.Добавить("Пароль");
			Для Каждого ТекущееСвойство Из СвойстваСтроковые Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипСтрока)
						ИЛИ (ПустаяСтрока(Результат[Свойство])) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

#КонецОбласти

	ИначеЕсли (КлючОбъекта = "НастройкиЖурналаРегистрации") Тогда

#Область НастройкиЖурналаРегистрации

		// Для этого ключа объекта не действует КлючНастроек.
		// Обязательные поля:
		// - ЖурналРегистрации_ПодробнаяЗапись - Булево, по-умолчанию Истина (писать подробно все сообщения);
		// - ЖурналРегистрации_ВыводитьОтладочныеСообщенияНаЭкран - Булево - по-умолчанию, на экран ничего не выводить.

		РезультатПоУмолчанию = Новый Структура("
				|ЖурналРегистрации_ПодробнаяЗапись, ЖурналРегистрации_ВыводитьОтладочныеСообщенияНаЭкран",
			Истина,
			Ложь);
		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			// Булевые значения
			СвойстваБулевые = Новый Массив;
			СвойстваБулевые.Добавить("ЖурналРегистрации_ПодробнаяЗапись");
			СвойстваБулевые.Добавить("ЖурналРегистрации_ВыводитьОтладочныеСообщенияНаЭкран");
			Для Каждого ТекущееСвойство Из СвойстваБулевые Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипБулево) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

#КонецОбласти

	ИначеЕсли (КлючОбъекта = "АдресаВебСервисов") Тогда

#Область АдресаВебСервисов

		// Для этого ключа объекта не действует КлючНастроек.
		// Обязательные поля:
		// - АдресWSDLАвторизации1С     - Строка (НЕ сохраняется);
		// - АдресWSDLБэкап1СПубличный  - Строка (НЕ сохраняется);
		// - АдресWSDLБэкап1СПриватный  - Строка (НЕ сохраняется);
		// - АдресWSDLАгентаКопирования - Строка (НЕ сохраняется).
		//
		РезультатПоУмолчанию = Новый Структура("
				|АдресWSDLАвторизации1С, АдресWSDLБэкап1СПубличный, АдресWSDLБэкап1СПриватный, АдресWSDLАгентаКопирования",
			ОблачныйАрхивКлиентСервер.ПолучитьАдресWSDLАвторизации1С(),
			ОблачныйАрхивКлиентСервер.ПолучитьАдресWSDLБэкап1СПубличный(),
			ОблачныйАрхивКлиентСервер.ПолучитьАдресWSDLБэкап1СПриватный(),
			ОблачныйАрхивКлиентСервер.ПолучитьАдресRESTAPIВерсийАгентаКопирования());
		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			// Строковые значения
			СвойстваСтроковые = Новый Массив;
			СвойстваСтроковые.Добавить("АдресWSDLАвторизации1С");
			СвойстваСтроковые.Добавить("АдресWSDLБэкап1СПубличный");
			СвойстваСтроковые.Добавить("АдресWSDLБэкап1СПриватный");
			СвойстваСтроковые.Добавить("АдресWSDLАгентаКопирования");
			Для Каждого ТекущееСвойство Из СвойстваСтроковые Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипСтрока)
						ИЛИ (ПустаяСтрока(Результат[Свойство])) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

#КонецОбласти

	ИначеЕсли (КлючОбъекта = "НастройкиВебСервисов") Тогда

#Область НастройкиВебСервисов

		// Для этого ключа объекта не действует КлючНастроек.
		// Обязательные поля:
		// - Таймаут - Число.
		//
		РезультатПоУмолчанию = Новый Структура("Таймаут",
			30); // Секунд
		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).
			Свойство = "Таймаут";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипЧисло)
					ИЛИ (Результат[Свойство] < 0)
					ИЛИ (Результат[Свойство] > 999) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;
		КонецЕсли;

#КонецОбласти

	ИначеЕсли (КлючОбъекта = "ПараметрыОкруженияСервер") Тогда

#Область ПараметрыОкруженияСервер

		// Для этого ключа объекта не действует КлючНастроек.
		// Обязательные поля:
		// - ПодсистемаНастроена                    - Число (0 - не настроена, 1 - настроена, но не введены настройки на клиентах, 2 - настроена);
		// - ПредыдущееСостояниеПодсистемаНастроена - Число (0 - не настроена, 1 - настроена, но не введены настройки на клиентах, 2 - настроена);
		// - ДатаИзмененияПодсистемаНастроена       - Дата - Дата изменения состояния подсистемы;
		// - ВерсияПодсистемы                       - Строка (14) (НЕ сохраняется);
		// - ИмяИБ                                  - Строка (150);
		// - ИдентификаторИБ                        - Строка (150) (НЕ сохраняется);
		// - ИдентификаторИБ_СтрокаСоединения       - Строка;
		// - ИдентификаторИБ_ИмяКомпьютера          - Строка;
		// - ИнформационнаяБазаФайловая             - Булево (НЕ сохраняется).
		//

		лкСтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		лкИмяКомпьютера    = ИмяКомпьютера();
		лкИдентификаторИБ  = Строка(СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы());

		РезультатПоУмолчанию = Новый Структура("
				|ПодсистемаНастроена, ПредыдущееСостояниеПодсистемаНастроена, ДатаИзмененияПодсистемаНастроена, ВерсияПодсистемы, ИмяИБ,
				|ИдентификаторИБ, ИдентификаторИБ_СтрокаСоединения, ИдентификаторИБ_ИмяКомпьютера, ИнформационнаяБазаФайловая",
			0, // ПодсистемаНастроена
			0, // ПредыдущееСостояниеПодсистемаНастроена
			'00010101', // ДатаИзмененияПодсистемаНастроена
			ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()),
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(СокрЛП(Метаданные.Синоним),""), // ИмяИБ
			лкИдентификаторИБ,
			лкСтрокаСоединения,
			лкИмяКомпьютера,
			ОбщегоНазначения.ИнформационнаяБазаФайловая());
		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			Свойство = "ПодсистемаНастроена";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипЧисло)
					ИЛИ (Результат[Свойство] < 0)
					ИЛИ (Результат[Свойство] > 2) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;

			Свойство = "ПредыдущееСостояниеПодсистемаНастроена";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипЧисло)
					ИЛИ (Результат[Свойство] < 0)
					ИЛИ (Результат[Свойство] > 2) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;

			Свойство = "ДатаИзмененияПодсистемаНастроена";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если ТипЗнч(Результат[Свойство]) <> ТипДата Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;

			// Это свойство НЕ сохраняется в настройках (см. ОбработкаСохранения),
			//  т.е. оно может быть заполнено только для отладочных значений.
			Свойство = "ВерсияПодсистемы";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипСтрока)
					ИЛИ (ПустаяСтрока(Результат[Свойство])) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;
			Результат[Свойство] = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(Результат[Свойство]);

			// Это свойство НЕ сохраняется в настройках (см. ОбработкаСохранения),
			//  т.е. оно может быть заполнено только для отладочных значений.
			Свойство = "ИдентификаторИБ";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипСтрока)
					ИЛИ (ПустаяСтрока(Результат[Свойство])) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;
			Результат[Свойство] = Лев(Результат[Свойство], 150);

			Свойство = "ИмяИБ";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипСтрока)
					ИЛИ (ПустаяСтрока(Результат[Свойство])) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;
			Результат[Свойство] = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(СокрЛП(Результат[Свойство]),"");
			Результат[Свойство] = Лев(Результат[Свойство], 150);

			// Строковые значения
			СвойстваСтроковые = Новый Массив;
			СвойстваСтроковые.Добавить("ИдентификаторИБ_СтрокаСоединения");
			СвойстваСтроковые.Добавить("ИдентификаторИБ_ИмяКомпьютера");
			СвойстваСтроковые.Добавить("ИнформационнаяБазаФайловая");
			Для Каждого ТекущееСвойство Из СвойстваСтроковые Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипСтрока)
						ИЛИ (ПустаяСтрока(Результат[Свойство])) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

#КонецОбласти

	ИначеЕсли (КлючОбъекта = "НастройкиАгентаКопированияОбщие") Тогда

#Область НастройкиАгентаКопированияОбщие

		// Для этого ключа объекта не действует КлючНастроек.
		// Обязательные поля:
		// - КоличествоХранимыхКопий_Ежедневные   - Число - сколько хранить копий за последние дни (последняя копия за день);
		// - КоличествоХранимыхКопий_Еженедельные - Число - сколько хранить копий за последние недели (последняя копия за неделю);
		// - КоличествоХранимыхКопий_Ежемесячные  - Число - сколько хранить копий за последние месяцы (последняя копия за месяц).
		РезультатПоУмолчанию = Новый Структура("
				|КоличествоХранимыхКопий_Ежедневные, КоличествоХранимыхКопий_Еженедельные, КоличествоХранимыхКопий_Ежемесячные",
			30,
			50,
			12);
		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			Свойство = "КоличествоХранимыхКопий_Ежедневные";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипЧисло)
					ИЛИ (Результат[Свойство] < 1)
					ИЛИ (Результат[Свойство] > 99) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;

			Свойство = "КоличествоХранимыхКопий_Еженедельные";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипЧисло)
					ИЛИ (Результат[Свойство] < 1)
					ИЛИ (Результат[Свойство] > 99) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;

			Свойство = "КоличествоХранимыхКопий_Ежемесячные";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипЧисло)
					ИЛИ (Результат[Свойство] < 1)
					ИЛИ (Результат[Свойство] > 99) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;

		КонецЕсли;

#КонецОбласти

	ИначеЕсли (КлючОбъекта = "НастройкиАгентаКопированияКлиент") Тогда

#Область НастройкиАгентаКопированияКлиент

		ПустоеРасписание = ПровестиВалидациюНастроек(Неопределено, "РасписаниеАвтоматическогоРезервногоКопирования", КлючНастроек);
		РезультатПоУмолчанию = Новый Структура("ДатаПроверки,ИмяКомпьютера,
				|РасписаниеАвтоматическогоРезервногоКопирования,
				|КаталогСтатистики,КаталогРабочий,КаталогЛогов",
			'00010101', // ДатаПроверки - оставить пустой, чтобы данные обновились, если их нет.
			КлючНастроек, // ИмяКомпьютера
			ПустоеРасписание, // РасписаниеАвтоматическогоРезервногоКопирования
			"%TEMP%\Acronis\Statistics", // КаталогСтатистики
			"%TEMP%\Acronis\WorkingDirectory", // КаталогРабочий
			"%TEMP%\Acronis\Logs"); // КаталогЛогов

		Если НЕ ПустаяСтрока(КлючНастроек) Тогда
			Запись = РегистрыСведений.НастройкиОблачногоАрхиваНаЛокальномКомпьютере.СоздатьМенеджерЗаписи();
			Запись.ИмяКомпьютера = КлючНастроек;
			Запись.Прочитать(); // Только чтение, без последующей записи.
			Если Запись.Выбран() Тогда
				РасписаниеАвтоматическогоРезервногоКопирования = Запись.Расписание.Получить();
				// Расписание может быть сохранено с ошибками или поменялся формат. Всегда проводить валидацию!
				РасписаниеАвтоматическогоРезервногоКопирования = ПровестиВалидациюНастроек(РасписаниеАвтоматическогоРезервногоКопирования, "РасписаниеАвтоматическогоРезервногоКопирования", "");
				Если ТипЗнч(РасписаниеАвтоматическогоРезервногоКопирования) <> ТипСтруктура Тогда
					РасписаниеАвтоматическогоРезервногоКопирования = ПустоеРасписание;
				КонецЕсли;
				РезультатПоУмолчанию.Вставить("ДатаПроверки", Запись.ДатаПроверки);
				РезультатПоУмолчанию.Вставить("ИмяКомпьютера", КлючНастроек);
				РезультатПоУмолчанию.Вставить("РасписаниеАвтоматическогоРезервногоКопирования", РасписаниеАвтоматическогоРезервногоКопирования);
				РезультатПоУмолчанию.Вставить("КаталогСтатистики", Запись.КаталогСтатистики);
				РезультатПоУмолчанию.Вставить("КаталогРабочий", Запись.КаталогРабочий);
				РезультатПоУмолчанию.Вставить("КаталогЛогов", Запись.КаталогЛогов);
			КонецЕсли;
		КонецЕсли;

		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		// Для этого ключа объекта действует КлючНастроек (ИмяКомпьютера).
		// Обязательные поля:
		//  * ДатаПроверки                                   - ДатаВремя;
		//  * ИмяКомпьютера                                  - Строка (КлючНастроек);
		//  * РасписаниеАвтоматическогоРезервногоКопирования - Структура;
		//  * КаталогСтатистики                              - Строка;
		//  * КаталогРабочий                                 - Строка;
		//  * КаталогЛогов                                   - Строка.

		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			Свойство = "ДатаПроверки";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если ТипЗнч(Результат[Свойство]) <> ТипДата Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;

			// Строковые значения
			СвойстваСтроковые = Новый Массив;
			СвойстваСтроковые.Добавить("ИмяКомпьютера");
			СвойстваСтроковые.Добавить("КаталогЛогов");
			СвойстваСтроковые.Добавить("КаталогСтатистики");
			СвойстваСтроковые.Добавить("КаталогРабочий");
			Для Каждого ТекущееСвойство Из СвойстваСтроковые Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипСтрока)
						ИЛИ (ПустаяСтрока(Результат[Свойство])) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

			Свойство = "РасписаниеАвтоматическогоРезервногоКопирования";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если ТипЗнч(Результат[Свойство]) <> ТипСтруктура Тогда
				Результат.Вставить(Свойство, ПровестиВалидациюНастроек(Неопределено, "РасписаниеАвтоматическогоРезервногоКопирования", ""));
			КонецЕсли;

		КонецЕсли;

		// Каталоги не должны заканчиваться на символ "\" или "/" - удалить символ, если он есть.
		СвойстваДляПроверки = Новый Массив;
		СвойстваДляПроверки.Добавить("КаталогЛогов");
		СвойстваДляПроверки.Добавить("КаталогСтатистики");
		СвойстваДляПроверки.Добавить("КаталогРабочий");
		Для Каждого ТекущееСвойство Из СвойстваДляПроверки Цикл
			Результат.Вставить(
				ТекущееСвойство,
				ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПоследнийСимвол(Результат[ТекущееСвойство], "\/"));
		КонецЦикла;

#КонецОбласти

	ИначеЕсли (КлючОбъекта = "ИнформацияОКлиенте") Тогда

#Область ИнформацияОКлиенте

		лкСистемнаяИнформация = Новый СистемнаяИнформация;

		Пересчитать_ЭтоАдминистраторWindows = Истина;
		лкПараметрыОкруженияБИП_ОблачныйАрхив = ПараметрыСеанса.ПараметрыОкруженияБИП_ОблачныйАрхив.Получить();
		Если ТипЗнч(лкПараметрыОкруженияБИП_ОблачныйАрхив)= ТипСтруктура Тогда
			Если лкПараметрыОкруженияБИП_ОблачныйАрхив.Свойство("ЭтоАдминистраторWindows") Тогда
				Если ТипЗнч(лкПараметрыОкруженияБИП_ОблачныйАрхив.ЭтоАдминистраторWindows) = ТипБулево Тогда
					Пересчитать_ЭтоАдминистраторWindows = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Пересчитать_ЭтоАдминистраторWindows = Истина Тогда
			ОблачныйАрхив.УстановкаПараметровСеанса();
		КонецЕсли;
		ЭтоАдминистраторWindows = ПараметрыСеанса.ПараметрыОкруженияБИП_ОблачныйАрхив.Получить().ЭтоАдминистраторWindows;

		РезультатПоУмолчанию = Новый Структура("ДатаПроверки,ИдентификаторКомпьютера,ТипОС,ВерсияОС,ИмяКомпьютера,ТипПлатформы,ВерсияПлатформы,
				|КаталогУстановкиАгентаКопирования,ВерсияУстановленногоАгентаКопирования,АгентКопированияУстановлен,
				|АгентКопированияАктивирован_ЕстьФайлыСертификатов, ЭтоАдминистраторWindows, ЛогинАдминистратораОС",
			'00010101', // ДатаПроверки - оставить пустой, чтобы данные обновились, если их нет.
			"", // ИдентификаторКомпьютера;
			СокрЛП(лкСистемнаяИнформация.ТипПлатформы), // ТипОС;
			лкСистемнаяИнформация.ВерсияОС, // ВерсияОС;
			КлючНастроек, // ИмяКомпьютера;
			СокрЛП(лкСистемнаяИнформация.ТипПлатформы), // ТипПлатформы;
			ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(лкСистемнаяИнформация.ВерсияПриложения), // ВерсияПлатформы;
			"c:\Program Files (x86)\Acronis\BackupAgent\", // КаталогУстановкиАгентаКопирования;
			"00.00.000.0000", // ВерсияУстановленногоАгентаКопирования;
			Ложь, // АгентКопированияУстановлен (рассчитывается по совокупности нескольких факторов);
			Ложь, // АгентКопированияАктивирован_ЕстьФайлыСертификатов;
			ЭтоАдминистраторWindows, // ЭтоАдминистраторWindows;
			""); // ЛогинАдминистратораОС.

		Если НЕ ПустаяСтрока(КлючНастроек) Тогда
			Запись = РегистрыСведений.СвойстваЛокальныхКомпьютеровДляОблачногоАрхива.СоздатьМенеджерЗаписи();
			Запись.ИмяКомпьютера = КлючНастроек;
			Запись.Прочитать(); // Только чтение, без последующей записи.
			Если Запись.Выбран() Тогда
				РезультатПоУмолчанию.Вставить("ДатаПроверки", Запись.ДатаПроверки);
				РезультатПоУмолчанию.Вставить("ИдентификаторКомпьютера", Запись.MachineGuid);
				РезультатПоУмолчанию.Вставить("ТипОС", Запись.ТипОС);
				РезультатПоУмолчанию.Вставить("ВерсияОС", Запись.ВерсияОС);
				РезультатПоУмолчанию.Вставить("ИмяКомпьютера", КлючНастроек);
				РезультатПоУмолчанию.Вставить("КаталогУстановкиАгентаКопирования", Запись.КаталогУстановки);
				РезультатПоУмолчанию.Вставить("ВерсияУстановленногоАгентаКопирования", ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(Запись.ВерсияАгентаКопирования));
				РезультатПоУмолчанию.Вставить("АгентКопированияУстановлен", Запись.АгентКопированияУстановлен);
				РезультатПоУмолчанию.Вставить("АгентКопированияАктивирован_ЕстьФайлыСертификатов", Запись.ПрисутствуютФайлыСертификатов);
				РезультатПоУмолчанию.Вставить("ЛогинАдминистратораОС", Запись.ЛогинАдминистратораОС);
				// Эти ключи остаются как есть:
				// ТипПлатформы;
				// ВерсияПлатформы;
				// ЭтоАдминистраторWindows.
			КонецЕсли;
		КонецЕсли;

		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		// Для этого ключа объекта действует КлючНастроек (ИмяКомпьютера).
		// Обязательные поля:
		//  * ДатаПроверки                                             - ДатаВремя;
		//  * ИдентификаторКомпьютера                                  - Строка // MachineGuid;
		//  * ТипОС                                                    - Строка;
		//  * ВерсияОС                                                 - Строка;
		//  * ИмяКомпьютера                                            - Строка (КлючНастроек);
		//  * ТипПлатформы                                             - Строка;
		//  * ВерсияПлатформы                                          - Строка;
		//  * КаталогУстановкиАгентаКопирования                        - Строка;
		//  * ВерсияУстановленногоАгентаКопирования                    - Строка;
		//  * АгентКопированияУстановлен                               - Булево;
		//  * АгентКопированияАктивирован_ЕстьФайлыСертификатов        - Булево;
		//  * ЭтоАдминистраторWindows                                  - Булево;
		//  * ЛогинАдминистратораОС                                    - Строка.
		
		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			Свойство = "ДатаПроверки";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если ТипЗнч(Результат[Свойство]) <> ТипДата Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;

			// Это свойство НЕ сохраняется в настройках (см. ОбработкаСохранения),
			//  т.е. оно может быть заполнено только для отладочных значений.
			Свойство = "ВерсияПлатформы";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипСтрока)
					ИЛИ (ПустаяСтрока(Результат[Свойство])) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;
			Результат[Свойство] = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(Результат[Свойство]);

			// Это свойство НЕ сохраняется в настройках (см. ОбработкаСохранения),
			//  т.е. оно может быть заполнено только для отладочных значений.
			Свойство = "ЭтоАдминистраторWindows";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипБулево) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;

			Свойство = "ВерсияУстановленногоАгентаКопирования";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипСтрока)
					ИЛИ (ПустаяСтрока(Результат[Свойство])) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;
			Результат[Свойство] = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(Результат[Свойство]);

			// Строковые значения
			СвойстваСтроковые = Новый Массив;
			СвойстваСтроковые.Добавить("ИмяКомпьютера");
			СвойстваСтроковые.Добавить("ИдентификаторКомпьютера");
			СвойстваСтроковые.Добавить("ТипОС");
			СвойстваСтроковые.Добавить("ВерсияОС");
			СвойстваСтроковые.Добавить("ТипПлатформы");
			СвойстваСтроковые.Добавить("КаталогУстановкиАгентаКопирования");
			СвойстваСтроковые.Добавить("ЛогинАдминистратораОС");
			Для Каждого ТекущееСвойство Из СвойстваСтроковые Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипСтрока)
						ИЛИ (ПустаяСтрока(Результат[Свойство])) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

			// Булевые значения
			СвойстваБулевые = Новый Массив;
			СвойстваБулевые.Добавить("АгентКопированияУстановлен");
			СвойстваБулевые.Добавить("АгентКопированияАктивирован_ЕстьФайлыСертификатов");
			Для Каждого ТекущееСвойство Из СвойстваБулевые Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипБулево) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

		// Каталоги не должны заканчиваться на символ "\" или "/" - удалить символ, если он есть.
		СвойстваДляПроверки = Новый Массив;
		СвойстваДляПроверки.Добавить("КаталогУстановкиАгентаКопирования");
		Для Каждого ТекущееСвойство Из СвойстваДляПроверки Цикл
			Результат.Вставить(
				ТекущееСвойство,
				ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПоследнийСимвол(Результат[ТекущееСвойство], "\/"));
		КонецЦикла;

#КонецОбласти

	ИначеЕсли (КлючОбъекта = "АктивацииАгентовКопирования") Тогда

#Область АктивацииАгентовКопирования

		РезультатПоУмолчанию = Новый Структура("ДатаПроверки,ИдентификаторКомпьютера,ИмяКомпьютера,
				|АгентКопированияАктивированНаДругойЛогин, АгентКопированияАктивирован_ДанныеВебСервисов, СрокОкончанияПодписки",
			'00010101', // ДатаПроверки - оставить пустой, чтобы данные обновились, если их нет.
			"", // ИдентификаторКомпьютера
			КлючНастроек, // ИмяКомпьютера
			Ложь, // АгентКопированияАктивированНаДругойЛогин
			Ложь, // АгентКопированияАктивированНаТекущийЛогин, АгентКопированияАктивирован_ДанныеВебСервисов
			'00010101'); // СрокОкончанияПодписки

		Если НЕ ПустаяСтрока(КлючНастроек) Тогда
			// Со временем может произойти, что при изменении имени компьютера в регистре сведений
			//  СвойстваЛокальныхКомпьютеровДляОблачногоАрхива накопятся записи с несуществующими именами компьютеров,
			//   но повторяющимися MachineGuid.
			//  Поэтому необходимо отсортировать по времени обновления и взять первую запись.
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	РегСоответствияИмениИИдентификатораКомпьютера.ИмяКомпьютера         КАК ИмяКомпьютера,
				|	РегСоответствияИмениИИдентификатораКомпьютера.MachineGuid           КАК ИдентификаторКомпьютера,
				|	ЕСТЬNULL(РегДанные.ДатаПроверки, &ПустаяДата)                       КАК ДатаПроверки,
				|	ЕСТЬNULL(РегДанные.АгентКопированияАктивированНаТекущийЛогин, Ложь) КАК АгентКопированияАктивирован_ДанныеВебСервисов,
				|	ЕСТЬNULL(РегДанные.СрокОкончанияПодписки, &ПустаяДата)              КАК СрокОкончанияПодписки,
				|	ЕСТЬNULL(РегДанные.АгентКопированияАктивированНаДругойЛогин, Ложь)  КАК АгентКопированияАктивированНаДругойЛогин
				|ИЗ
				|	РегистрСведений.СвойстваЛокальныхКомпьютеровДляОблачногоАрхива КАК РегСоответствияИмениИИдентификатораКомпьютера
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.АктивированныеАгентыРезервногоКопирования КАК РегДанные
				|	ПО
				|		РегСоответствияИмениИИдентификатораКомпьютера.MachineGuid = РегДанные.MachineGuid
				|ГДЕ
				|	РегСоответствияИмениИИдентификатораКомпьютера.ИмяКомпьютера = &ИмяКомпьютера
				|
				|УПОРЯДОЧИТЬ ПО
				|	РегСоответствияИмениИИдентификатораКомпьютера.ДатаПроверки УБЫВ
				|";
			Запрос.УстановитьПараметр("ИмяКомпьютера", КлючНастроек);
			Запрос.УстановитьПараметр("ПустаяДата", '00010101');

			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл // Получить 1 запись
					ЗаполнитьЗначенияСвойств(РезультатПоУмолчанию, Выборка);
					Прервать; // Получить одну запись запись
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		// Для этого ключа объекта действует КлючНастроек (ИмяКомпьютера).
		// Обязательные поля:
		//  * ДатаПроверки                                             - ДатаВремя;
		//  * ИдентификаторКомпьютера                                  - Строка // MachineGuid;
		//  * ИмяКомпьютера                                            - Строка (КлючНастроек);
		//  * АгентКопированияАктивирован_ДанныеВебСервисов            - Булево;
		//  * АгентКопированияАктивированНаДругойЛогин                 - Булево;
		//  * СрокОкончанияПодписки                                    - ДатаВремя.
		
		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			// Значения типа Дата
			СвойстваДата = Новый Массив;
			СвойстваДата.Добавить("ДатаПроверки");
			СвойстваДата.Добавить("СрокОкончанияПодписки");
			Для Каждого ТекущееСвойство Из СвойстваДата Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипДата) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

			// Строковые значения
			СвойстваСтроковые = Новый Массив;
			СвойстваСтроковые.Добавить("ИмяКомпьютера");
			СвойстваСтроковые.Добавить("ИдентификаторКомпьютера");
			Для Каждого ТекущееСвойство Из СвойстваСтроковые Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипСтрока)
						ИЛИ (ПустаяСтрока(Результат[Свойство])) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

			// Булевые значения
			СвойстваБулевые = Новый Массив;
			СвойстваБулевые.Добавить("АгентКопированияАктивирован_ДанныеВебСервисов");
			СвойстваБулевые.Добавить("АгентКопированияАктивированНаДругойЛогин");
			Для Каждого ТекущееСвойство Из СвойстваБулевые Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипБулево) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

#КонецОбласти

#Область РасписаниеАвтоматическогоРезервногоКопированияВсе

	ИначеЕсли (КлючОбъекта = "РасписаниеАвтоматическогоРезервногоКопирования") Тогда

#Область РасписаниеАвтоматическогоРезервногоКопирования

		// Для этого ключа объекта не действует КлючНастроек.
		// Обязательные поля:
		//  ** РасписаниеВключено - Булево;
		//  ** Вариант - Строка - "Ежедневно_ОдинРазВДень", "Ежедневно_НесколькоРазВДень", "Еженедельно",
		//               "Ежемесячно_ПоДням", "Ежемесячно_ПоДнямНедели".
		//               Возможно добавление варианта "Однократно" перед остальными вариантами.
		//  ** Ежедневно_ОдинРазВДень:
		//    *** Время (Время);
		//  ** Ежедневно_НесколькоРазВДень:
		//    *** ВремяНачала (Время);
		//    *** ВремяОкончания (Время);
		//    *** КоличествоЧасовПовтора (Число 1..23);
		//  ** Еженедельно:
		//    *** Время (Время);
		//    *** ДниНедели (Массив (числа 1..7));
		//  ** Ежемесячно_ПоДням:
		//    *** Время (Время);
		//    *** ДниМесяца (Массив (числа 1..32));
		//  ** Ежемесячно_ПоДнямНедели:
		//    *** Время (Время);
		//    *** НомерНедели (Число 1..5) (first, second, third, fourth, last);
		//    *** ДниНедели (Массив (числа 1..7)).
		РезультатПоУмолчанию = Новый Структура("
				|РасписаниеВключено, Вариант, Ежедневно_ОдинРазВДень, Ежедневно_НесколькоРазВДень, Еженедельно, Ежемесячно_ПоДням, Ежемесячно_ПоДнямНедели",
			Ложь, // По-умолчанию, расписание не настроено.
			"Ежедневно_ОдинРазВДень",
			Новый Структура("Время",
				'00010101180000'),
			Новый Структура("ВремяНачала,ВремяОкончания,КоличествоЧасовПовтора",
				'00010101000000',
				'00010101235959',
				6),
			Новый Структура("Время, ДниНедели", 
				'00010101180000',
				Новый Массив()),
			Новый Структура("Время, ДниМесяца",
				'00010101180000',
				Новый Массив()),
			Новый Структура("Время, НомерНедели, ДниНедели",
				'00010101180000',
				1,
				Новый Массив()));

		// Скопировать в Результат только "Вариант" и "РасписаниеВключено". Остальные ключи копировать в зависимости от значения "Вариант".
		Результат = Новый Структура("РасписаниеВключено, Вариант, Ежедневно_ОдинРазВДень",
			Ложь, // По-умолчанию, расписание не настроено.
			"Ежедневно_ОдинРазВДень",
			Новый Структура("Время",
				'00010101180000'));

		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			// Булевые значения
			СвойстваБулевые = Новый Массив;
			СвойстваБулевые.Добавить("РасписаниеВключено");
			Для Каждого ТекущееСвойство Из СвойстваБулевые Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипБулево) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

			// Строковые значения
			Свойство = "Вариант";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипСтрока)
					ИЛИ (ПустаяСтрока(Результат[Свойство])) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			Иначе
				МассивРазрешенных = Новый Массив;
				МассивРазрешенных.Добавить("Ежедневно_ОдинРазВДень");
				МассивРазрешенных.Добавить("Ежедневно_НесколькоРазВДень");
				МассивРазрешенных.Добавить("Еженедельно");
				МассивРазрешенных.Добавить("Ежемесячно_ПоДням");
				МассивРазрешенных.Добавить("Ежемесячно_ПоДнямНедели");
				Если МассивРазрешенных.Найти(Результат[Свойство]) = Неопределено Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЕсли;

			Если Результат.Вариант = "Ежедневно_ОдинРазВДень" Тогда
				ВременноеЗначение = Неопределено;
				Настройки.Свойство(Результат.Вариант, ВременноеЗначение);
				Результат.Вставить(Результат.Вариант, ПровестиВалидациюНастроек(ВременноеЗначение, КлючОбъекта + "." + Результат.Вариант, ""));
				Результат.Вставить("РасписаниеВключено", Истина);
			ИначеЕсли Результат.Вариант = "Ежедневно_НесколькоРазВДень" Тогда
				ВременноеЗначение = Неопределено;
				Настройки.Свойство(Результат.Вариант, ВременноеЗначение);
				Результат.Вставить(Результат.Вариант, ПровестиВалидациюНастроек(ВременноеЗначение, КлючОбъекта + "." + Результат.Вариант, ""));
				Результат.Вставить("РасписаниеВключено", Истина);
			ИначеЕсли Результат.Вариант = "Еженедельно" Тогда
				ВременноеЗначение = Неопределено;
				Настройки.Свойство(Результат.Вариант, ВременноеЗначение);
				Результат.Вставить(Результат.Вариант, ПровестиВалидациюНастроек(ВременноеЗначение, КлючОбъекта + "." + Результат.Вариант, ""));
				Результат.Вставить("РасписаниеВключено", Истина);
			ИначеЕсли Результат.Вариант = "Ежемесячно_ПоДням" Тогда
				ВременноеЗначение = Неопределено;
				Настройки.Свойство(Результат.Вариант, ВременноеЗначение);
				Результат.Вставить(Результат.Вариант, ПровестиВалидациюНастроек(ВременноеЗначение, КлючОбъекта + "." + Результат.Вариант, ""));
				Результат.Вставить("РасписаниеВключено", Истина);
			ИначеЕсли Результат.Вариант = "Ежемесячно_ПоДнямНедели" Тогда
				ВременноеЗначение = Неопределено;
				Настройки.Свойство(Результат.Вариант, ВременноеЗначение);
				Результат.Вставить(Результат.Вариант, ПровестиВалидациюНастроек(ВременноеЗначение, КлючОбъекта + "." + Результат.Вариант, ""));
				Результат.Вставить("РасписаниеВключено", Истина);
			КонецЕсли;

		КонецЕсли;

#КонецОбласти

	ИначеЕсли (КлючОбъекта = "РасписаниеАвтоматическогоРезервногоКопирования.Ежедневно_ОдинРазВДень") Тогда

#Область РасписаниеАвтоматическогоРезервногоКопирования_Ежедневно_ОдинРазВДень

		// Для этого ключа объекта не действует КлючНастроек.
		// Обязательные поля:
		//  ** Ежедневно_ОдинРазВДень:
		//    *** Время (Время);
		РезультатПоУмолчанию = Новый Структура("
				|Время",
			'00010101180000');
		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			// Значения типа Дата
			СвойстваДата = Новый Массив;
			СвойстваДата.Добавить("Время");
			Для Каждого ТекущееСвойство Из СвойстваДата Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипДата) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

#КонецОбласти

	ИначеЕсли (КлючОбъекта = "РасписаниеАвтоматическогоРезервногоКопирования.Ежедневно_НесколькоРазВДень") Тогда

#Область РасписаниеАвтоматическогоРезервногоКопирования_Ежедневно_НесколькоРазВДень

		// Для этого ключа объекта не действует КлючНастроек.
		// Обязательные поля:
		//  ** Ежедневно_НесколькоРазВДень:
		//    *** ВремяНачала (Время);
		//    *** ВремяОкончания (Время);
		//    *** КоличествоЧасовПовтора (Число 1..23);
		РезультатПоУмолчанию = Новый Структура("
				|ВремяНачала, ВремяОкончания, КоличествоЧасовПовтора",
			'00010101000000',
			'00010101235959',
			6);
		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			// Значения типа Дата
			СвойстваДата = Новый Массив;
			СвойстваДата.Добавить("ВремяНачала");
			СвойстваДата.Добавить("ВремяОкончания");
			Для Каждого ТекущееСвойство Из СвойстваДата Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипДата) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

		Свойство = "КоличествоЧасовПовтора";
		Настройки.Свойство(Свойство, Результат[Свойство]);
		Если (ТипЗнч(Результат[Свойство]) <> ТипЧисло)
				ИЛИ (Результат[Свойство] < 1)
				ИЛИ (Результат[Свойство] > 23) Тогда
			Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
		КонецЕсли;

#КонецОбласти

	ИначеЕсли (КлючОбъекта = "РасписаниеАвтоматическогоРезервногоКопирования.Еженедельно") Тогда

#Область РасписаниеАвтоматическогоРезервногоКопирования_Еженедельно

		// Для этого ключа объекта не действует КлючНастроек.
		// Обязательные поля:
		//  ** Еженедельно:
		//    *** Время (Время);
		//    *** ДниНедели (Массив (числа 1..7)).
		МассивДнейПоУмолчанию = Новый Массив;
		МассивДнейПоУмолчанию.Добавить(1);
		РезультатПоУмолчанию = Новый Структура("
				|Время, ДниНедели",
			'00010101180000',
			МассивДнейПоУмолчанию);
		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			// Значения типа Дата
			СвойстваДата = Новый Массив;
			СвойстваДата.Добавить("Время");
			Для Каждого ТекущееСвойство Из СвойстваДата Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипДата) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

			Свойство = "ДниНедели";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипМассив) Тогда
				Результат.Вставить(Свойство, МассивДнейПоУмолчанию);
			Иначе // Проверить, что в массиве - числа от 1 до 7 включительно
				ПравильныйМассив = Новый Массив;
				Для Каждого ТекущийЭлементМассива Из Результат[Свойство] Цикл
					Если (ТекущийЭлементМассива >= 1)
							И (ТекущийЭлементМассива <= 7) Тогда
						ПравильныйМассив.Добавить(ТекущийЭлементМассива);
					КонецЕсли;
				КонецЦикла;
				// Обязательно должна быть хотя бы одна дата.
				Если ПравильныйМассив.Количество() = 0 Тогда
					ПравильныйМассив = МассивДнейПоУмолчанию;
				КонецЕсли;
				Результат.Вставить(Свойство, ПравильныйМассив);
			КонецЕсли;

		КонецЕсли;

#КонецОбласти

	ИначеЕсли (КлючОбъекта = "РасписаниеАвтоматическогоРезервногоКопирования.Ежемесячно_ПоДням") Тогда

#Область РасписаниеАвтоматическогоРезервногоКопирования_Ежемесячно_ПоДням

		// Для этого ключа объекта не действует КлючНастроек.
		// Обязательные поля:
		//  ** Ежемесячно_ПоДням:
		//    *** Время (Время);
		//    *** ДниМесяца (Массив (числа 1..32));
		МассивДнейПоУмолчанию = Новый Массив;
		МассивДнейПоУмолчанию.Добавить(1);
		РезультатПоУмолчанию = Новый Структура("
				|Время, ДниМесяца",
			'00010101180000',
			МассивДнейПоУмолчанию);
		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			// Значения типа Дата
			СвойстваДата = Новый Массив;
			СвойстваДата.Добавить("Время");
			Для Каждого ТекущееСвойство Из СвойстваДата Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипДата) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

			Свойство = "ДниМесяца";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипМассив) Тогда
				Результат.Вставить(Свойство, МассивДнейПоУмолчанию);
			Иначе // Проверить, что в массиве - числа от 1 до 7 включительно
				ПравильныйМассив = Новый Массив;
				Для Каждого ТекущийЭлементМассива Из Результат[Свойство] Цикл
					Если (ТекущийЭлементМассива >= 1)
							И (ТекущийЭлементМассива <= 32) Тогда
						ПравильныйМассив.Добавить(ТекущийЭлементМассива);
					КонецЕсли;
				КонецЦикла;
				// Обязательно должна быть хотя бы одна дата
				Если ПравильныйМассив.Количество() = 0 Тогда
					ПравильныйМассив = МассивДнейПоУмолчанию;
				КонецЕсли;
				Результат.Вставить(Свойство, ПравильныйМассив);
			КонецЕсли;

		КонецЕсли;

#КонецОбласти

	ИначеЕсли (КлючОбъекта = "РасписаниеАвтоматическогоРезервногоКопирования.Ежемесячно_ПоДнямНедели") Тогда

#Область РасписаниеАвтоматическогоРезервногоКопирования_Ежемесячно_ПоДнямНедели

		// Для этого ключа объекта не действует КлючНастроек.
		// Обязательные поля:
		//  ** Ежемесячно_ПоДнямНедели:
		//    *** Время (Время);
		//    *** НомерНедели (Число 1..5) (first, second, third, fourth, last);
		//    *** ДниНедели (Массив (числа 1..7)).
		МассивДнейПоУмолчанию = Новый Массив;
		МассивДнейПоУмолчанию.Добавить(1);
		РезультатПоУмолчанию = Новый Структура("
				|Время, НомерНедели, ДниНедели",
			'00010101180000',
			1,
			МассивДнейПоУмолчанию);
		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоУмолчанию);

		Если ТипЗнч(Настройки) = ТипСтруктура Тогда
			// Проверять:
			//  заполнение (есть ли такое свойство. Если нет - добавить со значением по-умолчанию);
			//  правильный тип;
			//  правильный интервал значения (вхождение в список значений, минимум, максимум).

			// Значения типа Дата
			СвойстваДата = Новый Массив;
			СвойстваДата.Добавить("Время");
			Для Каждого ТекущееСвойство Из СвойстваДата Цикл
				Свойство = ТекущееСвойство;
				Настройки.Свойство(Свойство, Результат[Свойство]);
				Если (ТипЗнч(Результат[Свойство]) <> ТипДата) Тогда
					Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
				КонецЕсли;
			КонецЦикла;

			Свойство = "НомерНедели";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипЧисло)
					ИЛИ (Результат[Свойство] < 1)
					ИЛИ (Результат[Свойство] > 5) Тогда
				Результат.Вставить(Свойство, РезультатПоУмолчанию[Свойство]);
			КонецЕсли;

			Свойство = "ДниНедели";
			Настройки.Свойство(Свойство, Результат[Свойство]);
			Если (ТипЗнч(Результат[Свойство]) <> ТипМассив) Тогда
				Результат.Вставить(Свойство, МассивДнейПоУмолчанию);
			Иначе // Проверить, что в массиве - числа от 1 до 7 включительно.
				ПравильныйМассив = Новый Массив;
				Для Каждого ТекущийЭлементМассива Из Результат[Свойство] Цикл
					Если (ТекущийЭлементМассива >= 1)
							И (ТекущийЭлементМассива <= 7) Тогда
						ПравильныйМассив.Добавить(ТекущийЭлементМассива);
					КонецЕсли;
				КонецЦикла;
				// Обязательно должна быть хотя-бы одна дата.
				Если ПравильныйМассив.Количество() = 0 Тогда
					ПравильныйМассив = МассивДнейПоУмолчанию;
				КонецЕсли;
				Результат.Вставить(Свойство, ПравильныйМассив);
			КонецЕсли;

		КонецЕсли;

#КонецОбласти

#КонецОбласти

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецЕсли