///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СВЯЗАННЫЕ С РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТЬЮ УСН

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СВЯЗАННЫЕ С РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТЬЮ УСН

// Функция возвращает документ ЗаписиУСН в периоде по виду формирования
// Если таковой не найден, то создает его
//
// Параметры:
//		Организация - Организация, по которой проводились формирования
//		ПериодФормирования - Период формирования, в котором ищем
//		ВидФормирования - вид формирования, который ищем
//
// Возвращает:
//		ДокументОбъект.ЗаписиУСН - документ, соответствующий критериям
//
Функция ПолучитьДокументЗаписейУСНВПериодеПоВиду(Организация, ПериодФормирования, ВидФормирования) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаписиУСН.Ссылка
	|ИЗ
	|	Документ.ЗаписиУСН КАК ЗаписиУСН
	|ГДЕ
	|	ЗаписиУСН.Дата = &ПериодФормирования
	|	И НЕ ЗаписиУСН.ПометкаУдаления
	|	И ЗаписиУСН.Организация = &Организация
	|	И ЗаписиУСН.ВидЗаписей = &ВидФормирования");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидФормирования", ВидФормирования);
	Запрос.УстановитьПараметр("ПериодФормирования", ПериодФормирования);
	
	РезультатПоиска = Запрос.Выполнить().Выбрать();
	
	Если РезультатПоиска.Следующий() Тогда
		Возврат РезультатПоиска.Ссылка.ПолучитьОбъект();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция на выбранную дату по выбранной оргназиации проверят заполненность 
// параметров УСН
// Возвращает:
//		Истина, если параметры заполнены
//
Функция ПараметрыУСНЗаполнены(Организация, Период) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ДанныеЗаполнены
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК СистемыНалогообложенияОрганизаций
	|ГДЕ
	|	СистемыНалогообложенияОрганизаций.ОбъектНалогообложения <> ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНалогообложения.ПустаяСсылка)
	|	И СистемыНалогообложенияОрганизаций.СтавкаНалога > 0");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Период);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция на выбранную дату по выбранной оргназиации проверят заполненность 
// тарифа страховых взносов
// Возвращает:
//		Истина, если параметры заполнены
//
Функция ТарифыСтраховыхВзносовЗаполнены(Организация, Период) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ДанныеЗаполнены
	|ИЗ
	|	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(&Дата, Организация = &Организация) КАК ПрименяемыеТарифыСтраховыхВзносовСрезПоследних
	|ГДЕ
	|	ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.ВидТарифа <> ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Период);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает объект налогообложения на дату или на событие
//
Функция ОбъектНалогообложенияНаДату(Организация,ДатаИлиСобытие) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СистемыНалогообложенияОрганизаций.ОбъектНалогообложения
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация) КАК СистемыНалогообложенияОрганизаций");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ТипЗнч(ДатаИлиСобытие) = Тип("Дата") Тогда
		Запрос.УстановитьПараметр("Дата", ДатаИлиСобытие);
	Иначе
		Запрос.УстановитьПараметр("Дата", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДатаИлиСобытие, "ДатаДокументаОбработкиСобытия"));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОбъектНалогообложения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// по документу взаиморасчетов с бюжетом определяет показатель периода
//
Функция ПолучитьПоказательПериода(ДокументВзаиморасчетовСБюжетом, ВидВзаиморасчетов, ДатаДокумента = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ДокументВзаиморасчетовСБюжетом) Тогда
		Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВзаиморасчетовСБюжетом, "Дата");
	Иначе
		Дата = ДатаДокумента;
	КонецЕсли;
	
	Если ВидВзаиморасчетов = Справочники.ВидыНалогов.АвансовыйПлатежПриУСН Тогда
		Возврат "КВ."+Формат(Месяц(Дата)/3, "ЧЦ=2; ЧВН=")+"."+Формат(Год(Дата), "ЧГ=");
	ИначеЕсли ВидВзаиморасчетов = Справочники.ВидыНалогов.ЕНВД 
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ТорговыйСбор Тогда
		Возврат "КВ."+Формат(Месяц(Дата)/3, "ЧЦ=2; ЧВН=")+"."+Формат(Год(Дата), "ЧГ=");
	ИначеЕсли ВидВзаиморасчетов = Справочники.ВидыНалогов.ЕдиныйНалогПриУСН 
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРНакопительная
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРСтраховая
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРСвыше300тр
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ТФОМС 
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ФФОМС
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.Патент Тогда
		
		Возврат "ГД.00."+Формат(Год(Дата), "ЧГ=");
	ИначеЕсли ВидВзаиморасчетов = Справочники.ВидыНалогов.НДФЛСотрудники
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ФОМССотрудники
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ФСССотрудники
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ФССТравматизмСотрудники Тогда
		
		Возврат "МС."+Формат(Месяц(Дата), "ЧЦ=2; ЧВН=")+"."+Формат(Год(Дата), "ЧГ=");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// возвращает, был ли исчислен минимальный налог
//
Функция ИсчисленМинимальныйНалог(Организация = Неопределено, Год) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетности.ЗначениеПоказателя КАК МинимальныйНалог
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетности КАК ЗначенияПоказателейОтчетности
	|ГДЕ
	|	ЗначенияПоказателейОтчетности.Организация = &Организация
	|	И ЗначенияПоказателейОтчетности.ПериодОтчетности = &ПериодОтчетности
	|	И ЗначенияПоказателейОтчетности.ПоказательОтчетности = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПоказателиОтчетности.РасчетМинимальнойСуммыЕН)");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ТипЗнч(Год) = Тип("Дата") Тогда
		Запрос.УстановитьПараметр("ПериодОтчетности", НачалоДня(КонецГода(Год)));
	Иначе
		Запрос.УстановитьПараметр("ПериодОтчетности", Дата(Год,1,1));
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.МинимальныйНалог;
	
КонецФункции

// функция возвращает необходимые КБК для уплаты по организации и году
//
Функция ПолучитьКБКУплаты(Организация, Дата = Неопределено, ВидВзаиморасчетов = Неопределено) Экспорт
	
	
	Если Дата = Неопределено Тогда
		Год = Год(ТекущаяДатаСеанса());
		ДатаСреза = НачалоГода(ТекущаяДатаСеанса());
	Иначе
		Год = Год(Дата);
	КонецЕсли;
	
	Если ВидВзаиморасчетов = Неопределено 
			ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.АвансовыйПлатежПриУСН 
			ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ЕдиныйНалогПриУСН Тогда
		
		Если ТипЗнч(Год) <> Тип("Дата") Тогда
			ДатаСреза = Дата(Год, 1,1);
		Иначе
			ДатаСреза = Год;
			Год = Год(Год);
		КонецЕсли;
		
		Доходы = (ОбъектНалогообложенияНаДату(Организация, ДатаСреза) = Перечисления.ВидыОбъектовНалогообложения.Доходы);
		
		Если Доходы Тогда
			
			Если Число(Год) >= 2011 Тогда 
				Возврат "18210501011011000110";
			Иначе
				Возврат "18210501012011000110";
			КонецЕсли;
			
		Иначе
			
			Если Число(Год) >= 2011 Тогда
				Возврат "18210501021011000110";
			Иначе
				Возврат "18210501022011000110";
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		СтруктураРесурсов =РегистрыСведений.ЗначенияКБК.ПолучитьПоследнее(Дата, Новый Структура("ВидВзаиморасчета", ВидВзаиморасчетов));
		Возврат СтруктураРесурсов.Значение;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьСтатусыОтправленныхОтчетов() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаписиКалендаряПодготовкиОтчетности.Организация,
	|	ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря,
	|	ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря.Задача КАК Задача
	|ИЗ
	|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|ГДЕ
	|	ЗаписиКалендаряПодготовкиОтчетности.Состояние = Значение(Перечисление.СостоянияСобытийКалендаря.ПолучитьПодтверждение)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Справки2НДФЛ Тогда
			ДокументОтчетности = ПолучитьСправку2НДФЛВНалоговыйОрганПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ФНС";
		ИначеЕсли Выборка.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ОтчетностьВПФР Тогда
			ДокументОтчетности = ПолучитьКомплектОтчетностиПерсучетаПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ПФР";
		ИначеЕсли Выборка.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма4ФСС Тогда
			ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ФСС";
		ИначеЕсли Выборка.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма1Предприниматель Тогда
			ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ФСГС";
		ИначеЕсли Выборка.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СведенияОЗастрахованныхЛицах Тогда
			ДокументОтчетности = ПолучитьСЗВМПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ПФР";
		ИначеЕсли Выборка.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Декларация12 Тогда
			ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ФСРАР";
		Иначе
			ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ФНС";
		КонецЕсли;
		
		ТекущееСостояние = СведенияПоОтправкам.ТекущееСостояниеОтправки(ДокументОтчетности, КонтролирующийОрган);
		Если ТекущееСостояние <> Неопределено Тогда
			Состояние = ТекущееСостояние.ТекущийЭтапОтправки.СостояниеСдачиОтчетности;
			Если Состояние = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота
				ИЛИ Состояние = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота Тогда
				
				КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
					Выборка.Организация,
					Выборка.СобытиеКалендаря,
					?(Состояние = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота,Перечисления.СостоянияСобытийКалендаря.Завершить, Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота),
					ДокументОтчетности);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует назначения платежей по страховым взносам
//
Функция ПолучитьТекстНазначенияПлатежаНалогаПоСтраховымВзносам(ДатаДокумента, ВидВзаиморасчетов) Экспорт
	
	Если ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРНакопительная Тогда
		Если ДатаДокумента > '20130101' Тогда
			Возврат Нстр("ru ='Страховые взносы в фиксированном размере на выплату накопительной части трудовой пенсии.'");
		Иначе
			Возврат Нстр("ru ='Страховые взносы исходя из стоимости страхового года на выплату накопительной части трудовой пенсии.'");
		КонецЕсли;
	ИначеЕсли ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРСтраховая
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРСвыше300тр Тогда
		Если ДатаДокумента > '20130101' Тогда
			Возврат Нстр("ru ='Страховые взносы в фиксированном размере на выплату страховой части трудовой пенсии.'");
		Иначе
			Возврат Нстр("ru ='Страховые взносы исходя из стоимости страхового года на выплату страховой части трудовой пенсии.'");
		КонецЕсли;
	ИначеЕсли ВидВзаиморасчетов = Справочники.ВидыНалогов.ТФОМС Тогда
		Возврат Нстр("ru ='Страховые взносы на ОМС, зачисляемые в бюджет ТФОМС.'");
	ИначеЕсли ВидВзаиморасчетов = Справочники.ВидыНалогов.ФФОМС Тогда
		Возврат Нстр("ru ='Страховые взносы на ОМС, зачисляемые в бюджет ФФОМС.'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

//
//  Функция проверяет, включен ли учет по организации-компании
//
Функция ПолучитьТорговыеТочкиРозничнойПродажиАлкоголяПоОрганизации(Организация) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиОбменаЕГАИС.ТорговаяТочка
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|ГДЕ
	|	НастройкиОбменаЕГАИС.Организация = &Организация
	|		И НЕ НастройкиОбменаЕГАИС.ТорговаяТочка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТорговаяТочка");
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
//// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРАМ

// Выполняет движения по регистру накопления КнигаУчетаДоходовИРасходов
// 
Процедура ОтразитьКнигаУчетаДоходовИРасходов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКнигаУчетаДоходовИРасходов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.КнигаУчетаДоходовИРасходов.Записывать = Истина;
	Движения.КнигаУчетаДоходовИРасходов.Загрузить(Таблица);

КонецПроцедуры

// Функция создает платежное поручение исходящие на основании
// данных по взаиморасчету с бюджетом
//
Функция СоздатьБезналичноеСписаниеПоВзаиморасчетамСБюджетом(ДокументВзаиморасчетовСБюджетом, БанкСчет, Патент = Неопределено) Экспорт
	
	// поиск существующего документа, не акцептаованного банка и не помеченного на удаление
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.ДокументОснование = &ДокументОснование
	|	И (НЕ ПлатежноеПоручение.ПометкаУдаления)");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументВзаиморасчетовСБюджетом);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Ссылка = Выборка.Ссылка;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		// удалить движения по сумме взаиморасчетов
		Если ДокументОбъект.Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Заполнить(ДокументВзаиморасчетовСБюджетом);
	ДокументОбъект.БанковскийСчет = БанкСчет;
	
	Если Патент <> Неопределено Тогда
		// Определяем кбк и назначение платежа по патенту
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Патенты.КБК,
		|	Патенты.НомерПатента
		|ИЗ
		|	Справочник.Патенты КАК Патенты
		|ГДЕ
		|	Патенты.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Патент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДокументОбъект.КодБК = Выборка.КБК;
			ДокументОбъект.НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уплата налога, взимаемого в связи с применением патентной системы налогообложения, зачисляемого в бюджеты %1, № %2,  НДС не облагается'"),
				Справочники.Патенты.НаправлениеПОКБК(Выборка.КБК),
				Выборка.НомерПатента);
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции
/////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЙ ЗАПИСЕЙ КУДИР

// Функция возвращает дату-время с которой(!) требуется выполнить формирования
//
Функция ПолучитьДатуНачалаФормированияЗаписейКУДиР() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(ДатыИзмененныхДокументов.ДатаДокумента), &ТекущаяДата) КАК ДатаДокумента
	|ИЗ
	|	РегистрСведений.ДатыИзмененныхДокументов КАК ДатыИзмененныхДокументов";
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаДокумента;
	Иначе
		Возврат ТекущаяДата;
	КонецЕсли;
	
КонецФункции


// Процедура формирует записи по прочим доходам
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодФормирования - Дата - дата окончания квартала, за который нужно провести формирования
//		Результат - Структура - структура результата
//
Процедура ВыполнитьФормированиеПоДоходам(Организация, ПериодФормирования, Результат, МенеджерВТ) Экспорт
	
	ДокументФормирования = Результат.ДокументФормирования;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.СуммаДокумента,
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Номер,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента,
	|	ЕСТЬNULL(СУММА(ТаблицаОплатаПлатежнымиКартами.Сумма), 0) КАК СуммаБезналичнойОплаты
	|ПОМЕСТИТЬ ВТРозничныеПродажи
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ТаблицаОплатаПлатежнымиКартами
	|		ПО (ТаблицаОплатаПлатежнымиКартами.Ссылка = ОтчетОРозничныхПродажах.Ссылка)
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ОтчетОРозничныхПродажах.ПометкаУдаления
	|	И ОтчетОРозничныхПродажах.Проведен
	|	И ОтчетОРозничныхПродажах.Организация = &Организация
	|	И ОтчетОРозничныхПродажах.УчитыватьВНУ
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.СуммаДокумента,
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Номер,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.Ссылка КАК ПервичныйДокумент,
	|	ПоступлениеВКассу.Контрагент КАК Контрагент,
	|	ПоступлениеВКассу.Подотчетник КАК Подотчетник,
	|	ПоступлениеВКассу.СуммаДокумента КАК ДоходБаза,
	|	ПоступлениеВКассу.СуммаДокумента КАК ДоходВсего,
	|	0 КАК СуммаКомиссииДокумента,
	|	ПоступлениеВКассу.ВидОперации КАК ВидОперации,
	|	ПоступлениеВКассу.Дата КАК ДатаПервичногоДокумента,
	|	ПоступлениеВКассу.Номер КАК НомерПервичногоДокумента,
	|	ПоступлениеВКассу.Дата КАК Период,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеВКассу.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	ПоступлениеВКассу.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|ГДЕ
	|	ПоступлениеВКассу.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеВКассу.ПометкаУдаления
	|	И ПоступлениеВКассу.Проведен
	|	И ПоступлениеВКассу.Организация = &Организация
	|	И ПоступлениеВКассу.УчитыватьВНУ
	|	И ПоступлениеВКассу.ВидОперации В(&МассивИспользуемыхВидовПоступленийВКассу)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	NULL,
	|	NULL,
	|	ОтчетОРозничныхПродажах.СуммаДокумента - ОтчетОРозничныхПродажах.СуммаБезналичнойОплаты,
	|	ОтчетОРозничныхПродажах.СуммаДокумента - ОтчетОРозничныхПродажах.СуммаБезналичнойОплаты,
	|	0,
	|	"""",
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Номер,
	|	ОтчетОРозничныхПродажах.Дата,
	|	"""",
	|	"""",
	|	НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажах.Дата, ДЕНЬ),
	|	ОтчетОРозничныхПродажах.ВалютаДокумента
	|ИЗ
	|	ВТРозничныеПродажи КАК ОтчетОРозничныхПродажах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка,
	|	ПоступлениеНаСчет.Контрагент,
	|	ПоступлениеНаСчет.Подотчетник,
	|	ПоступлениеНаСчет.СуммаДокумента + ПоступлениеНаСчет.СуммаКомиссииДокумента,
	|	ПоступлениеНаСчет.СуммаДокумента + ПоступлениеНаСчет.СуммаКомиссииДокумента,
	|	ПоступлениеНаСчет.СуммаКомиссииДокумента,
	|	ПоступлениеНаСчет.ВидОперации,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПоступлениеНаСчет.Дата
	|		ИНАЧЕ ПоступлениеНаСчет.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	ПоступлениеНаСчет.Номер,
	|	ПоступлениеНаСчет.Дата,
	|	ПоступлениеНаСчет.НомерВходящегоДокумента,
	|	ПоступлениеНаСчет.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеНаСчет.Дата, ДЕНЬ),
	|	ПоступлениеНаСчет.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|ГДЕ
	|	ПоступлениеНаСчет.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеНаСчет.ПометкаУдаления
	|	И ПоступлениеНаСчет.Проведен
	|	И ПоступлениеНаСчет.Организация = &Организация
	|	И ПоступлениеНаСчет.УчитыватьВНУ
	|	И ПоступлениеНаСчет.ВидОперации В(&МассивИспользуемыхВидовПоступленийНаСчет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходСоСчета.Ссылка,
	|	РасходСоСчета.Контрагент,
	|	РасходСоСчета.Подотчетник,
	|	-РасходСоСчета.СуммаДокумента,
	|	-РасходСоСчета.СуммаДокумента,
	|	0,
	|	РасходСоСчета.ВидОперации,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасходСоСчета.Дата
	|		ИНАЧЕ РасходСоСчета.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	РасходСоСчета.Номер,
	|	РасходСоСчета.Дата,
	|	РасходСоСчета.НомерВходящегоДокумента,
	|	РасходСоСчета.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходСоСчета.Дата, ДЕНЬ),
	|	РасходСоСчета.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|ГДЕ
	|	РасходСоСчета.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходСоСчета.ПометкаУдаления
	|	И РасходСоСчета.Проведен
	|	И РасходСоСчета.Организация = &Организация
	|	И РасходСоСчета.УчитыватьВНУ
	|	И РасходСоСчета.ВидОперации В(&МассивИспользуемыхВидовРасходовСоСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзКассы.Ссылка,
	|	РасходИзКассы.Контрагент,
	|	РасходИзКассы.Подотчетник,
	|	-РасходИзКассы.СуммаДокумента,
	|	-РасходИзКассы.СуммаДокумента,
	|	0,
	|	РасходИзКассы.ВидОперации,
	|	РасходИзКассы.Дата,
	|	РасходИзКассы.Номер,
	|	РасходИзКассы.Дата,
	|	"""",
	|	"""",
	|	НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ),
	|	РасходИзКассы.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходИзКассы.ПометкаУдаления
	|	И РасходИзКассы.Проведен
	|	И РасходИзКассы.Организация = &Организация
	|	И РасходИзКассы.УчитыватьВНУ
	|	И РасходИзКассы.ВидОперации В(&МассивИспользуемыхВидовРасходовИзКассы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДоходы.ПервичныйДокумент,
	|	ВТДоходы.Контрагент,
	|	ВТДоходы.Подотчетник,
	|	ВТДоходы.ДоходБаза * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК ДоходБаза,
	|	ВТДоходы.ДоходВсего * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК ДоходВсего,
	|	ВТДоходы.СуммаКомиссииДокумента * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК СуммаКомиссииДокумента,
	|	ВТДоходы.ВидОперации,
	|	ВТДоходы.ДатаПервичногоДокумента,
	|	ВТДоходы.НомерПервичногоДокумента,
	|	ВТДоходы.Период,
	|	ВТДоходы.НомерВходящегоДокумента,
	|	ВТДоходы.НазначениеПлатежа,
	|	ВТДоходы.ДатаНачалоДня
	|ИЗ
	|	ВТДоходы КАК ВТДоходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
	|		ПО ВТДоходы.ДатаНачалоДня = КурсыВалютПоДням.Дата
	|			И ВТДоходы.ВалютаДенежныхСредств = КурсыВалютПоДням.Валюта";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ПериодФормирования));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодФормирования));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивИспользуемыхВидовПоступленийВКассу = Новый Массив;
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя);
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.Прочее);
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты);
	
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийВКассу", МассивИспользуемыхВидовПоступленийВКассу);
	
	МассивИспользуемыхВидовПоступленийНаСчет = Новый Массив;
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя);
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее);
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты);
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийНаСчет", МассивИспользуемыхВидовПоступленийНаСчет);
	
	МассивИспользуемыхВидовРасходовИзКассы = Новый Массив;
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.Покупателю);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовИзКассы", МассивИспользуемыхВидовРасходовИзКассы);
	
	МассивИспользуемыхВидовРасходовСоСчета = Новый Массив;
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Покупателю);
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты);
	
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовСоСчета", МассивИспользуемыхВидовРасходовСоСчета);
	
	ВыборкаЗаписейУСН = Запрос.ВыполнитьПакет()[2].Выбрать();
	
	Если ДокументФормирования = Неопределено И ВыборкаЗаписейУСН.Количество() > 0 Тогда
		ДокументФормирования = Документы.ЗаписиУСН.СоздатьДокумент();
		ДокументФормирования.Дата = ПериодФормирования;
		ДокументФормирования.Организация = Организация;
		ДокументФормирования.ВидЗаписей = Перечисления.ВидыЗаписейФормированийКУДиР.ДоходыПрочие;
	КонецЕсли;
	
	Если ДокументФормирования <> Неопределено Тогда
		
		ДокументФормирования.ЗаписиКУДиР.Очистить();
		
		Пока ВыборкаЗаписейУСН.Следующий() Цикл
			НоваяСтрокаУСН = ДокументФормирования.ЗаписиКУДиР.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУСН, ВыборкаЗаписейУСН);
			Если НЕ ПустаяСтрока(ВыборкаЗаписейУСН.НомерВходящегоДокумента) Тогда
				НоваяСтрокаУСН.НомерПервичногоДокумента = ВыборкаЗаписейУСН.НомерВходящегоДокумента;
			КонецЕсли;
			НоваяСтрокаУСН.НомерПервичногоДокумента =  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НоваяСтрокаУСН.НомерПервичногоДокумента, Истина, Истина);
			
			Если ТипЗнч(ВыборкаЗаписейУСН.ПервичныйДокумент) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
				НоваяСтрокаУСН.Содержание = НСтр("ru = 'Поступление розничной выручки'");
			Иначе
				Если ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поступление наличных денежных средств от покупателя ""%1""'"), СокрЛП(ВыборкаЗаписейУСН.Контрагент));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее 
					ИЛИ ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты Тогда
					НоваяСтрокаУСН.Содержание = НСтр("ru = 'Поступление наличных денежных средств по прочим операциям'");
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поступление безналичных денежных средств от покупателя ""%1""'"), СокрЛП(ВыборкаЗаписейУСН.Контрагент));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее
					ИЛИ ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты Тогда
					НоваяСтрокаУСН.Содержание = НСтр("ru = 'Поступление безналичных денежных средств по прочим операциям'");
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
					НоваяСтрокаУСН.Содержание = НСтр("ru = 'Поступление от розничных продаж, оплаченной безналичным способом'");
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Возврат наличных денежных средств покупателю ""%1""'"), СокрЛП(ВыборкаЗаписейУСН.Контрагент));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Возврат безналичных денежных средств покупателю ""%1""'"), СокрЛП(ВыборкаЗаписейУСН.Контрагент));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
					НоваяСтрокаУСН.Содержание = НСтр("ru = 'Возврат розничному покупателю безналичных денежных средств'");
				КонецЕсли;
					
				Если ЗначениеЗаполнено(ВыборкаЗаписейУСН.НазначениеПлатежа) Тогда
					НоваяСтрокаУСН.Содержание = НоваяСтрокаУСН.Содержание + ", " + Символы.ПС + СокрЛП(ВыборкаЗаписейУСН.НазначениеПлатежа);
				КонецЕсли;
			КонецЕсли;
			
			Если ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам И 
					ВыборкаЗаписейУСН.СуммаКомиссииДокумента > 0 Тогда
				НоваяСтрокаУСНКомиисия = ДокументФормирования.ЗаписиКУДиР.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУСНКомиисия, НоваяСтрокаУСН);
				НоваяСтрокаУСНКомиисия.ДоходБаза = 0;
				НоваяСтрокаУСНКомиисия.ДоходВсего = 0;
				НоваяСтрокаУСНКомиисия.РасходБаза = ВыборкаЗаписейУСН.СуммаКомиссииДокумента;
				НоваяСтрокаУСНКомиисия.РасходВсего = ВыборкаЗаписейУСН.СуммаКомиссииДокумента;
				НоваяСтрокаУСНКомиисия.Содержание = НСтр("ru = 'Комиссия банка за операции эквайринга'");
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.ДополнительнаяИнформация = НСтр("ru='Сформировано записей: '") + Строка(ДокументФормирования.ЗаписиКУДиР.Количество());
		ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
		Результат.ДокументФормирования = ДокументФормирования.Ссылка;
	КонецЕсли;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТРозничныеПродажи; УНИЧТОЖИТЬ ВТДоходы";
	Запрос.Выполнить();
	
КонецПроцедуры


// Процедура формирует записи по расходам на оплату труда
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодФормирования - Дата - дата окончания квартала, за который нужно провести формирования
//		Результат - Структура - структура результата
//
Процедура ВыполнитьФормированиеПоРасходамНаОплатуТруда(Организация, ПериодФормирования, Результат, МенеджерВТ)
	
	ДокументФормирования = Результат.ДокументФормирования;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходИзКассы.Ссылка КАК ПервичныйДокумент,
	|	РасходИзКассы.Контрагент КАК Контрагент,
	|	РасходИзКассы.Подотчетник КАК Подотчетник,
	|	РасходИзКассы.СуммаДокумента КАК ДоходБаза,
	|	РасходИзКассы.СуммаДокумента КАК ДоходВсего,
	|	РасходИзКассы.ВидОперации КАК ВидОперации,
	|	РасходИзКассы.Дата КАК ДатаПервичногоДокумента,
	|	РасходИзКассы.Номер КАК НомерПервичногоДокумента,
	|	РасходИзКассы.Дата КАК Период,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	РасходИзКассы.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТРасходы
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходИзКассы.ПометкаУдаления
	|	И РасходИзКассы.Проведен
	|	И РасходИзКассы.Организация = &Организация
	|	И РасходИзКассы.УчитыватьВНУ
	|	И РасходИзКассы.ВидОперации В(&МассивИспользуемыхВидовРасходовИзКассы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходСоСчета.Ссылка,
	|	РасходСоСчета.Контрагент,
	|	РасходСоСчета.Подотчетник,
	|	РасходСоСчета.СуммаДокумента,
	|	РасходСоСчета.СуммаДокумента,
	|	РасходСоСчета.ВидОперации,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасходСоСчета.Дата
	|		ИНАЧЕ РасходСоСчета.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	РасходСоСчета.Номер,
	|	РасходСоСчета.Дата,
	|	РасходСоСчета.НомерВходящегоДокумента,
	|	РасходСоСчета.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходСоСчета.Дата, ДЕНЬ),
	|	РасходСоСчета.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|ГДЕ
	|	РасходСоСчета.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходСоСчета.ПометкаУдаления
	|	И РасходСоСчета.Организация = &Организация
	|	И РасходСоСчета.УчитыватьВНУ
	|	И РасходСоСчета.ВидОперации В(&МассивИспользуемыхВидовРасходовСоСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасходы.ПервичныйДокумент,
	|	ВТРасходы.Контрагент,
	|	ВТРасходы.Подотчетник,
	|	ВТРасходы.ДоходБаза * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК РасходБаза,
	|	ВТРасходы.ДоходВсего * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК РасходВсего,
	|	ВТРасходы.ВидОперации,
	|	ВТРасходы.ДатаПервичногоДокумента,
	|	ВТРасходы.НомерПервичногоДокумента,
	|	ВТРасходы.Период,
	|	&СодержаниеСтроки КАК Содержание,
	|	ВТРасходы.НомерВходящегоДокумента,
	|	ВТРасходы.НазначениеПлатежа,
	|	ВТРасходы.ДатаНачалоДня
	|ИЗ
	|	ВТРасходы КАК ВТРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
	|		ПО ВТРасходы.ДатаНачалоДня = КурсыВалютПоДням.Дата
	|			И ВТРасходы.ВалютаДенежныхСредств = КурсыВалютПоДням.Валюта";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ПериодФормирования));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодФормирования));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СодержаниеСтроки", НСтр("ru='Расходы на оплату труда'"));
	
	МассивИспользуемыхВидовРасходовИзКассы = Новый Массив;
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.Зарплата);
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовИзКассы", МассивИспользуемыхВидовРасходовИзКассы);
	
	МассивИспользуемыхВидовРасходовСоСчета = Новый Массив;
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Зарплата);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовСоСчета", МассивИспользуемыхВидовРасходовСоСчета);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаУСН Из РезультатЗапроса Цикл
		СтрокаУСН.НомерПервичногоДокумента =  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаУСН.НомерПервичногоДокумента, Истина, Истина);
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТРасходы;";
	Запрос.Выполнить();
	
	Если ДокументФормирования = Неопределено И РезультатЗапроса.Количество() > 0 Тогда
		ДокументФормирования = Документы.ЗаписиУСН.СоздатьДокумент();
		ДокументФормирования.Дата = ПериодФормирования;
		ДокументФормирования.Организация = Организация;
		ДокументФормирования.ВидЗаписей = Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаОплатуТруда;
	КонецЕсли;
	
	Если ДокументФормирования <> Неопределено Тогда
		ДокументФормирования.ЗаписиКУДиР.Загрузить(РезультатЗапроса);
		Результат.ДополнительнаяИнформация = НСтр("ru='Сформировано записей: '") + Строка(ДокументФормирования.ЗаписиКУДиР.Количество());
		ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
		Результат.ДокументФормирования = ДокументФормирования.Ссылка;
	КонецЕсли;
	
КонецПроцедуры


// Процедура формирует записи по прочим расходам
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодФормирования - Дата - дата окончания Организация, за который нужно провести формирования
//		Результат - Структура - структура результата
//
Процедура ВыполнитьФормированиеПоПрочимРасходам(Организация, ПериодФормирования, Результат, МенеджерВТ)
	
	ДокументФормирования = Результат.ДокументФормирования;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходИзКассы.Ссылка КАК ПервичныйДокумент,
	|	РасходИзКассы.Контрагент КАК Контрагент,
	|	РасходИзКассы.Подотчетник КАК Подотчетник,
	|	РасходИзКассы.СуммаДокумента КАК ДоходБаза,
	|	РасходИзКассы.СуммаДокумента КАК ДоходВсего,
	|	РасходИзКассы.ВидОперации КАК ВидОперации,
	|	РасходИзКассы.Дата КАК ДатаПервичногоДокумента,
	|	РасходИзКассы.Номер КАК НомерПервичногоДокумента,
	|	РасходИзКассы.Дата КАК Период,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	РасходИзКассы.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТРасходы
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходИзКассы.ПометкаУдаления
	|	И РасходИзКассы.Проведен
	|	И РасходИзКассы.Организация = &Организация
	|	И РасходИзКассы.УчитыватьВНУ
	|	И РасходИзКассы.ВидОперации В(&МассивИспользуемыхВидовРасходовИзКассы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходСоСчета.Ссылка,
	|	РасходСоСчета.Контрагент,
	|	РасходСоСчета.Подотчетник,
	|	РасходСоСчета.СуммаДокумента,
	|	РасходСоСчета.СуммаДокумента,
	|	РасходСоСчета.ВидОперации,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасходСоСчета.Дата
	|		ИНАЧЕ РасходСоСчета.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	РасходСоСчета.Номер,
	|	РасходСоСчета.Дата,
	|	РасходСоСчета.НомерВходящегоДокумента,
	|	РасходСоСчета.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходСоСчета.Дата, ДЕНЬ),
	|	РасходСоСчета.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|ГДЕ
	|	РасходСоСчета.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходСоСчета.ПометкаУдаления
	|	И РасходСоСчета.Организация = &Организация
	|	И РасходСоСчета.УчитыватьВНУ
	|	И РасходСоСчета.ВидОперации В(&МассивИспользуемыхВидовРасходовСоСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка,
	|	ПоступлениеНаСчет.Контрагент,
	|	ПоступлениеНаСчет.Подотчетник,
	|	-ПоступлениеНаСчет.СуммаДокумента,
	|	-ПоступлениеНаСчет.СуммаДокумента,
	|	ПоступлениеНаСчет.ВидОперации,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПоступлениеНаСчет.Дата
	|		ИНАЧЕ ПоступлениеНаСчет.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	ПоступлениеНаСчет.Номер,
	|	ПоступлениеНаСчет.Дата,
	|	ПоступлениеНаСчет.НомерВходящегоДокумента,
	|	ПоступлениеНаСчет.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеНаСчет.Дата, ДЕНЬ),
	|	ПоступлениеНаСчет.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|ГДЕ
	|	ПоступлениеНаСчет.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеНаСчет.ПометкаУдаления
	|	И ПоступлениеНаСчет.Организация = &Организация
	|	И ПоступлениеНаСчет.УчитыватьВНУ
	|	И ПоступлениеНаСчет.ВидОперации В(&МассивИспользуемыхВидовПоступленийНаСчет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасходы.ПервичныйДокумент,
	|	ВТРасходы.Контрагент,
	|	ВТРасходы.Подотчетник,
	|	ВТРасходы.ДоходБаза * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК РасходБаза,
	|	ВТРасходы.ДоходВсего * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК РасходВсего,
	|	ВТРасходы.ВидОперации,
	|	ВТРасходы.ДатаПервичногоДокумента,
	|	ВТРасходы.НомерПервичногоДокумента,
	|	ВТРасходы.Период,
	|	ВТРасходы.НомерВходящегоДокумента,
	|	ВТРасходы.НазначениеПлатежа,
	|	ВТРасходы.ДатаНачалоДня
	|ИЗ
	|	ВТРасходы КАК ВТРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
	|		ПО ВТРасходы.ДатаНачалоДня = КурсыВалютПоДням.Дата
	|			И ВТРасходы.ВалютаДенежныхСредств = КурсыВалютПоДням.Валюта";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ПериодФормирования));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодФормирования));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивИспользуемыхВидовРасходовИзКассы = Новый Массив;
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.Налоги);
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.Прочее);
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты);
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.НаРасходы);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовИзКассы", МассивИспользуемыхВидовРасходовИзКассы);
	
	МассивИспользуемыхВидовРасходовСоСчета = Новый Массив;
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Налоги);
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Прочее);
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты);
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.НаРасходы);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовСоСчета", МассивИспользуемыхВидовРасходовСоСчета);
	
	МассивИспользуемыхВидовПоступленийНаСчет = Новый Массив;
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийНаСчет", МассивИспользуемыхВидовПоступленийНаСчет);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Колонки.Добавить("Содержание");
	
	// проставим номера и содержания операций
	Для Каждого Строка Из РезультатЗапроса Цикл
		Если НЕ ПустаяСтрока(Строка.НомерВходящегоДокумента) Тогда
			Строка.НомерПервичногоДокумента = Строка.НомерВходящегоДокумента;
		КонецЕсли;
		Строка.НомерПервичногоДокумента =  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Строка.НомерПервичногоДокумента, Истина, Истина);
		
		Если Строка.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
			Строка.Содержание = НСтр("ru = 'Расход наличных денежных средств на уплату налогов'");
		ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее 
			ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
			ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
			Строка.Содержание =  НСтр("ru = 'Расход наличных денежных средств по прочим операциям'");
		ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
			Строка.Содержание = НСтр("ru = 'Расход безналичных денежных средств на уплату налогов'");
		ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
			ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
			ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы Тогда
			Строка.Содержание = НСтр("ru = 'Расход безналичных денежных средств по прочим операциям'");
		ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги Тогда
			Строка.Содержание = НСтр("ru = 'Возврат излишне уплаченных налогов'");
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТРасходы;";
	Запрос.Выполнить();
	
	Если ДокументФормирования = Неопределено И РезультатЗапроса.Количество() > 0 Тогда
		ДокументФормирования = Документы.ЗаписиУСН.СоздатьДокумент();
		ДокументФормирования.Дата = ПериодФормирования;
		ДокументФормирования.Организация = Организация;
		ДокументФормирования.ВидЗаписей = Перечисления.ВидыЗаписейФормированийКУДиР.РасходыПрочие;
	КонецЕсли;
	
	Если ДокументФормирования <> Неопределено Тогда
		ДокументФормирования.ЗаписиКУДиР.Загрузить(РезультатЗапроса);
		Результат.ДополнительнаяИнформация = НСтр("ru='Сформировано записей: '") + Строка(ДокументФормирования.ЗаписиКУДиР.Количество());
		ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
		Результат.ДокументФормирования = ДокументФормирования.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует записи расходам на ОС и НМА
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодФормирования - Дата - дата окончания квартала, за который нужно провести формирования
//		Результат - Структура - структура результата
//
Процедура ВыполнитьФормированиеПоРасходамНаОСиНМА(Организация, ПериодФормирования, Результат, МенеджерВТ)
	
	
	ДокументФормирования = Результат.ДокументФормирования;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СправочникВнеоборотныеАктивы.Ссылка КАК ВнеоборотныйАктив,
	|	СправочникВнеоборотныеАктивы.НачальнаяСтоимость КАК ПервоначальнаяСтоимость
	|ПОМЕСТИТЬ ВТВнеоборотныеАктивы
	|ИЗ
	|	Справочник.ВнеоборотныеАктивы КАК СправочникВнеоборотныеАктивы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуВА.ВнеоборотныеАктивы КАК ПринятиеКУчетуВАТаблица
	|		ПО (СправочникВнеоборотныеАктивы.УчитыватьВНУ)
	|			И (СправочникВнеоборотныеАктивы.ДатаОплаты <> &ПустаяДата)
	|			И СправочникВнеоборотныеАктивы.Ссылка = ПринятиеКУчетуВАТаблица.ВнеоборотныйАктив
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуВА КАК ПринятиеКУчетуВА
	|		ПО (ПринятиеКУчетуВА.Ссылка = ПринятиеКУчетуВАТаблица.Ссылка)
	|			И (ПринятиеКУчетуВА.Проведен)
	|			И (ПринятиеКУчетуВА.Организация = &Организация)
	|			И (ВЫБОР
	|				КОГДА СправочникВнеоборотныеАктивы.ДатаОплаты > ПринятиеКУчетуВА.Дата
	|					ТОГДА СправочникВнеоборотныеАктивы.ДатаОплаты
	|				ИНАЧЕ ПринятиеКУчетуВА.Дата
	|			КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникВнеоборотныеАктивы.Ссылка,
	|	СправочникВнеоборотныеАктивы.НачальнаяСтоимость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПериодыГрафиков.Период КАК Период,
	|	ВтПериодыГрафиков.ДоляПериода КАК Доля
	|ПОМЕСТИТЬ ВтПериодыГрафиков
	|ИЗ
	|	&ВтПериодыГрафиков КАК ВтПериодыГрафиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПериодыГрафиков.Период КАК ПериодПризнания,
	|	ВтОСКПостроениюГрафикаВычетов.ВнеоборотныйАктив КАК ОсновноеСредство,
	|	ВтОСКПостроениюГрафикаВычетов.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ВЫРАЗИТЬ(ВтОСКПостроениюГрафикаВычетов.ПервоначальнаяСтоимость * ВтПериодыГрафиков.Доля КАК ЧИСЛО(15, 2)) КАК Сумма
	|ПОМЕСТИТЬ ВтПризнаниеРасходовГрафик
	|ИЗ
	|	ВТВнеоборотныеАктивы КАК ВтОСКПостроениюГрафикаВычетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПериодыГрафиков КАК ВтПериодыГрафиков
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПризнаниеРасходовГрафик.ПериодПризнания КАК ПериодПризнания,
	|	ВтПризнаниеРасходовГрафик.ОсновноеСредство КАК ОсновноеСредство,
	|	ВтПризнаниеРасходовГрафик.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ВтПризнаниеРасходовГрафик.Сумма
	|ИЗ
	|	ВтПризнаниеРасходовГрафик КАК ВтПризнаниеРасходовГрафик
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ПериодПризнания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТекстПризнанияРасходовПоОС + ПризнаваемыеРасходы.ОсновноеСредство.Наименование + "" (№"" + ПризнаваемыеРасходы.ОсновноеСредство.Код + "")"" КАК Содержание,
	|	ПризнаваемыеРасходы.РасходБаза,
	|	ПризнаваемыеРасходы.РасходБаза КАК РасходВсего
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтПризнаниеРасходовГрафик.ОсновноеСредство КАК ОсновноеСредство,
	|		ВтПризнаниеРасходовГрафик.Сумма КАК РасходБаза
	|	ИЗ
	|		ВтПризнаниеРасходовГрафик КАК ВтПризнаниеРасходовГрафик
	|	ГДЕ
	|		ВтПризнаниеРасходовГрафик.ПериодПризнания = &ДатаНачала
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГрафикПризнанияРасходовНаОСиНМА.ОсновноеСредство,
	|		ГрафикПризнанияРасходовНаОСиНМА.Сумма
	|	ИЗ
	|		Документ.ЗаписиУСН.ГрафикПоОС КАК ГрафикПризнанияРасходовНаОСиНМА
	|	ГДЕ
	|		ГрафикПризнанияРасходовНаОСиНМА.ПериодПризнания = &ДатаНачала
	|		И ГрафикПризнанияРасходовНаОСиНМА.Ссылка.Организация = &Организация
	|		И &Условие) КАК ПризнаваемыеРасходы");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоКвартала(ПериодФормирования));
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодФормирования);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВтПериодыГрафиков", ПолучитьТаблицуПериодовГрафиковРасходовНаОСПоПериодуФормирования(ПериодФормирования));
	Запрос.УстановитьПараметр("ТекстПризнанияРасходовПоОС", НСтр("ru='Признаны расходы по ОС: '"));
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	Если ДокументФормирования = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ГрафикПризнанияРасходовНаОСиНМА.Ссылка <> &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ДокументФормирования.Ссылка);
	КонецЕсли;
	
	Результаты = Запрос.ВыполнитьПакет();
	
	// таблица графиков по ос
	ГрафикПоОС = Результаты[3].Выгрузить();
	ОбработатьОкругленияТаблицыГрафикПоОС(ГрафикПоОС);
	
	
	Таблица = Результаты[4].Выгрузить();
	Если ДокументФормирования = Неопределено И Таблица.Количество() > 0 Тогда
		ДокументФормирования = Документы.ЗаписиУСН.СоздатьДокумент();
		ДокументФормирования.Дата = ПериодФормирования;
		ДокументФормирования.Организация = Организация;
		ДокументФормирования.ВидЗаписей = Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаОСиНМА;
		Если ДокументФормирования.Ссылка.Пустая() Тогда
			ДокументФормирования.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументФормирования <> Неопределено Тогда
		ГрафикПоОС.Колонки.Удалить("ПервоначальнаяСтоимость");
		ДокументФормирования.ГрафикПоОС.Загрузить(ГрафикПоОС);
		ДокументФормирования.ЗаписиКУДиР.Загрузить(Таблица);
		Для Каждого Строка Из ДокументФормирования.ЗаписиКУДиР Цикл
			Строка.ПервичныйДокумент = ДокументФормирования.Ссылка;
			Строка.НомерПервичногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументФормирования.Номер, Истина, Истина);
			Строка.ДатаПервичногоДокумента = ДокументФормирования.Дата;
		КонецЦикла;
		
		Результат.ДополнительнаяИнформация = НСтр("ru='Сформировано записей: '") + Строка(ДокументФормирования.ЗаписиКУДиР.Количество());
		ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
		Результат.ДокументФормирования = ДокументФормирования.Ссылка;
	КонецЕсли;
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТВнеоборотныеАктивы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтПериодыГрафиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтПризнаниеРасходовГрафик";
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура выполняет контроль таблицы ГрафикПоОС
// на погрешность округлений коэффициентов распределений
// Если таковые имеются то в последний месяц сумма расходов
// изменяется на величину этих погрешностей
//
// Параметры:
//		ГрафикПоОС - ТаблицаЗначений
//
Процедура ОбработатьОкругленияТаблицыГрафикПоОС(ГрафикПоОС)
	
	СуммаНакопленная = 0;
	ОС = Неопределено;
	СтоимостьОС = 0;
	ПредыдущаяСтрока = Неопределено;
	
	Для Каждого Стр Из ГрафикПоОС Цикл
		
		// обрабатываем первую строку
		Если ОС = Неопределено Тогда
			
			ОС = Стр.ОсновноеСредство;
			СтоимостьОС = Стр.ПервоначальнаяСтоимость;
			СуммаНакопленная = Стр.Сумма;
			ПредыдущаяСтрока = Стр;
			Продолжить;
			
		КонецЕсли;
		
		// Если ОС изменилось, значит перешли к обработки нового
		// необходимо зафиксировать результат
		Если Стр.ОсновноеСредство <> ПредыдущаяСтрока.ОсновноеСредство Тогда
			
			ПредыдущаяСтрока.Сумма = ПредыдущаяСтрока.Сумма + (СтоимостьОС-СуммаНакопленная);
			
			ОС = Стр.ОсновноеСредство;
			СтоимостьОС = Стр.ПервоначальнаяСтоимость;
			СуммаНакопленная = 0;
			
		КонецЕсли;
		
		СуммаНакопленная = СуммаНакопленная + Стр.Сумма;
		ПредыдущаяСтрока = Стр;
		
	КонецЦикла;
	
	Если ПредыдущаяСтрока <> Неопределено Тогда
		ПредыдущаяСтрока.Сумма = ПредыдущаяСтрока.Сумма + (СтоимостьОС-СуммаНакопленная);
	КонецЕсли;

	
КонецПроцедуры

// Функция формирует таблицу периодов графиков принятия расходов на ОС и НМА
// исходя из периода формирования
//
// Параметры:
//		ПериодФормирования - Дата - дата от которой необходимо посчитать периоды графиков
//
// Возвращает:
//		ТаблицаЗначений - таблица периодов графиков
//
Функция ПолучитьТаблицуПериодовГрафиковРасходовНаОСПоПериодуФормирования(ПериодФормирования)
	
	ТаблицаГрафиков = Новый ТаблицаЗначений;
	ТаблицаГрафиков.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаГрафиков.Колонки.Добавить("ДоляПериода", Новый ОписаниеТипов("Число"));
	
	Итератор = НачалоКвартала(ПериодФормирования);
	
	КонечныйПериод = КонецГода(ПериодФормирования);
	
	Пока Итератор <= КонечныйПериод Цикл
		Стр = ТаблицаГрафиков.Добавить();
		Стр.Период = Итератор;
		Итератор = ДобавитьМесяц(Итератор,3);
	КонецЦикла;
	
	КоличествоКварталов = ТаблицаГрафиков.Количество();
	
	Для Каждого Стр Из ТаблицаГрафиков Цикл
		
		Стр.ДоляПериода = 1/КоличествоКварталов;
		
	КонецЦикла;
	
	Возврат ТаблицаГрафиков;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// СЕКЦИЯ ПРОЦЕДУР РАСЧЕТ НАЛОГОВ И ВЗНОСОВ


// Процедура формирует записи по расчету налога
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция ВыполнитьРасчетЕдиногоНалога(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено, ФиксироватьСтатусСобытия=Истина) Экспорт
	
	СтруктураРасчетаЕдиногоНалога = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|ОбъектНалогообложения,
		|СтавкаНалогаЕН,
		|РасчетМинимальнойСуммыЕН,
		|СуммаАвансовыхПлатежейЗаГодЕН,
		|Авансы1квЕН,
		|Авансы2квЕН,
		|Авансы3квЕН,
		|СуммаДоходовЗаГодЕН,
		|СуммаЕН,
		|ВсегоКУплатеЕН,
		|СуммаРасходовЗаГодЕН,
		|СуммаСтраховыхВзносовЕН,
		|СуммаСтраховыхВзносовКУплатеЕН,
		|Зачет100ПроцСтрахВзносовЕН,
		|СуммаАвансовыхПлатежейЗаГодЕН,
		|НалоговаяБазаЕН,
		|ДополнительнаяИнформация,
		|ВидВзаиморасчетовСБюджетом,
		|СуммаВзаиморасчетовСБюджетом,
		|ДокументВзаиморасчетовСБюджетом", 
		Организация,
		СобытиеКалендаря,
		ПериодРасчета,
		Неопределено,
		0,
		Ложь, 
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		Ложь,
		0,
		0,
		Новый Структура("Описание,Предупреждение,Ошибка", "", Ложь, Ложь),
		Справочники.ВидыНалогов.ЕдиныйНалогПриУСН,
		0,
		0);
	
	ДокументФормирования = 1;//Результат.ДокументФормирования;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот КАК ДоходовЗаГод,
	|	КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот КАК РасходовЗаГод
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &ОкончаниеПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.СтавкаНалога,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ОбъектНалогообложения
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&ОкончаниеПериода, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РасчетыПоНалогамОбороты.СуммаРасход) КАК СуммаУплачено,
	|	СУММА(РасчетыПоНалогамОбороты.СуммаПриход) КАК СуммаНачислено,
	|	НАЧАЛОПЕРИОДА(РасчетыПоНалогамОбороты.СрокУплаты, КВАРТАЛ) КАК КварталУплаты
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогам.Обороты(
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И ВидНалога В (&ВидыВзаиморасчетов)
	|				И (СрокУплаты МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	|				И СрокУплаты <> &СрокУплаты) КАК РасчетыПоНалогамОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(РасчетыПоНалогамОбороты.СрокУплаты, КВАРТАЛ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогам.Обороты(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			,
	|			Организация = &Организация
	|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты
	|;");
	
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодРасчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВидыВзаиморасчетов = Новый Массив;
	ВидыВзаиморасчетов.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСН);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетов", ВидыВзаиморасчетов);
	Запрос.УстановитьПараметр("СрокУплаты", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300тр);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Параметры расчета налога
	ТаблицаПоПараметрам = РезультатЗапроса[1].Выгрузить();
	
	СтруктураРасчетаЕдиногоНалога.СтавкаНалогаЕН = ТаблицаПоПараметрам[0].СтавкаНалога;
	СтруктураРасчетаЕдиногоНалога.ОбъектНалогообложения = ТаблицаПоПараметрам[0].ОбъектНалогообложения;
	
	ТаблицаПоНалогу = РезультатЗапроса[0].Выгрузить();
	
	Если ТаблицаПоНалогу.Количество() = 0 Тогда
		
		СтруктураРасчетаЕдиногоНалога.ДополнительнаяИнформация.Описание = НСтр("ru='Нет данных для расчета налога'");
		СтруктураРасчетаЕдиногоНалога.ДополнительнаяИнформация.Предупреждение = Истина;
		
		ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаЕдиногоНалога);
		
		// запись состояние события календаря
		Если СобытиеКалендаря <> Неопределено Тогда
			КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
				Организация,
				СобытиеКалендаря,
				Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
				СтруктураРасчетаЕдиногоНалога.СуммаЕН);
			
			ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаЕдиногоНалога);
			
		КонецЕсли;
		
		Возврат СтруктураРасчетаЕдиногоНалога;
		
	Иначе
		
		СтрокаДанныхНалога = ТаблицаПоНалогу[0];
		СтруктураРасчетаЕдиногоНалога.СуммаДоходовЗаГодЕН = СтрокаДанныхНалога.ДоходовЗаГод;
		СтруктураРасчетаЕдиногоНалога.СуммаРасходовЗаГодЕН = СтрокаДанныхНалога.РасходовЗаГод;
		
	КонецЕсли;
	
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПериодРасчета), Новый Структура("Организация", Организация));
	
	ВыборкаВзносыВПФРИФСС = РезультатЗапроса[3].Выбрать();
	Если ВыборкаВзносыВПФРИФСС.Следующий() Тогда
		Если СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД Тогда
			СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН = 0;
		Иначе
			СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН = ВыборкаВзносыВПФРИФСС.СуммаУплачено;
		КонецЕсли;
	Иначе
		СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН = 0;
	КонецЕсли;
	
	Если СтруктураРасчетаЕдиногоНалога.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		СтруктураРасчетаЕдиногоНалога.СуммаРасходовЗаГодЕН = 0;
	Иначе
		СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовКУплатеЕН = 0;
	КонецЕсли;
	
	// убираем отрицательные
	СтруктураРасчетаЕдиногоНалога.НалоговаяБазаЕН = Макс(СтруктураРасчетаЕдиногоНалога.СуммаДоходовЗаГодЕН - СтруктураРасчетаЕдиногоНалога.СуммаРасходовЗаГодЕН,0);
	
	СуммаМинимальногоНалога = СтруктураРасчетаЕдиногоНалога.СуммаДоходовЗаГодЕН*1/100;
	СуммаЕдиногоНалога = СтруктураРасчетаЕдиногоНалога.НалоговаяБазаЕН *СтруктураРасчетаЕдиногоНалога.СтавкаНалогаЕН/100;
	
	Если СуммаМинимальногоНалога > СуммаЕдиногоНалога Тогда
		
		// минимальный налог в 1% от доходов
		СтруктураРасчетаЕдиногоНалога.СуммаЕН = СуммаМинимальногоНалога;
		СтруктураРасчетаЕдиногоНалога.СтавкаНалогаЕН = 1;
		СтруктураРасчетаЕдиногоНалога.РасчетМинимальнойСуммыЕН = Истина;
		СтруктураРасчетаЕдиногоНалога.НалоговаяБазаЕН = СтруктураРасчетаЕдиногоНалога.СуммаДоходовЗаГодЕН;
		СтруктураРасчетаЕдиногоНалога.ДополнительнаяИнформация.Описание = НСтр("ru='Рассчитан минимальный налог по ставке 1%'");
		
	Иначе
		
		СтруктураРасчетаЕдиногоНалога.СуммаЕН = СуммаЕдиногоНалога;
		СтруктураРасчетаЕдиногоНалога.ДополнительнаяИнформация.Описание = НСтр("ru='Рассчитан налог за год'");
		
	КонецЕсли;
	
	ВыборкаПоУплате = РезультатЗапроса[2].Выбрать();
	УплаченоЗаПериод = 0;
	
	Пока ВыборкаПоУплате.Следующий() Цикл
		
		Если Месяц(ВыборкаПоУплате.КварталУплаты) <= 4 Тогда  // апрель, 1й квартал
			СтруктураРасчетаЕдиногоНалога.Авансы1квЕН = ВыборкаПоУплате.СуммаНачислено;
		ИначеЕсли Месяц(ВыборкаПоУплате.КварталУплаты) <= 7 Тогда // июль, 2й квартал
			СтруктураРасчетаЕдиногоНалога.Авансы2квЕН = ВыборкаПоУплате.СуммаНачислено;
		Иначе // все остальное пихаем на 3й квартал
			СтруктураРасчетаЕдиногоНалога.Авансы3квЕН = ВыборкаПоУплате.СуммаНачислено;
		КонецЕсли;
		
		УплаченоЗаПериод = УплаченоЗаПериод + ВыборкаПоУплате.СуммаУплачено;
		
	КонецЦикла;
	
	СтруктураРасчетаЕдиногоНалога.Авансы2квЕН = СтруктураРасчетаЕдиногоНалога.Авансы2квЕН + СтруктураРасчетаЕдиногоНалога.Авансы1квЕН;
	СтруктураРасчетаЕдиногоНалога.Авансы3квЕН = СтруктураРасчетаЕдиногоНалога.Авансы3квЕН + СтруктураРасчетаЕдиногоНалога.Авансы2квЕН;
	
	СтруктураРасчетаЕдиногоНалога.СуммаАвансовыхПлатежейЗаГодЕН = УплаченоЗаПериод;
	
	СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН = (СтруктураРасчетаЕдиногоНалога.СуммаЕН) - СтруктураРасчетаЕдиногоНалога.СуммаАвансовыхПлатежейЗаГодЕН;
	Если СтруктураРасчетаЕдиногоНалога.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо,ИПИспользуетТрудНаемныхРаботников");
		Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не РеквизитыОрганизации.ИПИспользуетТрудНаемныхРаботников
			И ПериодРасчета >= '20120101' Тогда 
			
			СтруктураРасчетаЕдиногоНалога.Зачет100ПроцСтрахВзносовЕН = Истина;
			СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовКУплатеЕН =
					?(1*СтруктураРасчетаЕдиногоНалога.СуммаЕН < СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН,
					(1*СтруктураРасчетаЕдиногоНалога.СуммаЕН), СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН);
			СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН = СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН
				- СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовКУплатеЕН;
			
		Иначе
			СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовКУплатеЕН =
					?(0.5*СтруктураРасчетаЕдиногоНалога.СуммаЕН < СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН,
					(0.5*СтруктураРасчетаЕдиногоНалога.СуммаЕН), СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН);
			СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН = СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН
				- СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовКУплатеЕН;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН = Окр(Макс(0,СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН));
	
	
	НачатьТранзакцию();
	
	ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаЕдиногоНалога);
	СтруктураРасчетаЕдиногоНалога.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН;
	
	// запись состояние события календаря
	Если СобытиеКалендаря <> Неопределено И ФиксироватьСтатусСобытия Тогда
		
		КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			СтруктураРасчетаЕдиногоНалога.СуммаЕН);
		// Регистрация документа оплаты
		
		ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаЕдиногоНалога);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат СтруктураРасчетаЕдиногоНалога;
	
КонецФункции

// Процедура формирует записи по расчету авансового платежа по усн
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция ВыполнитьРасчетАвансовогоПлатежа(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураРасчетаАвансовогоПлатежа = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|ОбъектНалогообложения,
		|СтавкаНалогаАП,
		|СуммаАвансовыхПлатежейАП,
		|СуммаДоходовАП,
		|СуммаАП,
		|ВсегоКУплатеАП,
		|СуммаРасходовАП,
		|СуммаСтраховыхВзносовАП,
		|СуммаСтраховыхВзносовКУплатеАП,
		|Зачет100ПроцСтрахВзносовАП,
		|НалоговаяБазаАП,
		|ДополнительнаяИнформация,
		|ВидВзаиморасчетовСБюджетом,
		|СуммаВзаиморасчетовСБюджетом,
		|ДокументВзаиморасчетовСБюджетом", 
		Организация,
		СобытиеКалендаря,
		ПериодРасчета,
		Неопределено,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		Ложь,
		0,
		Новый Структура("Описание,Предупреждение,Ошибка", "", Ложь, Ложь),
		Справочники.ВидыНалогов.АвансовыйПлатежПриУСН,
		0,
		0);
	
	ДокументФормирования = 1;//Результат.ДокументФормирования;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот КАК ДоходовЗаГод,
	|	КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот КАК РасходовЗаГод
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &ОкончаниеПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.СтавкаНалога,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ОбъектНалогообложения
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&ОкончаниеПериода, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогам.Обороты(
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И ВидНалога В (&ВидыВзаиморасчетов)
	|				И (СрокУплаты МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	|				И СрокУплаты <> &СрокУплаты) КАК РасчетыПоНалогамОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогам.Обороты(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			,
	|			Организация = &Организация
	|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты
	|;");

	
	ВидыВзаиморасчетов = Новый Массив;
	ВидыВзаиморасчетов.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСН);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодРасчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыВзаиморасчетов", ВидыВзаиморасчетов);
	Запрос.УстановитьПараметр("СрокУплаты", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300тр);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);

	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Параметры расчета налога
	ТаблицаПоПараметрам = РезультатЗапроса[1].Выгрузить();
	
	СтруктураРасчетаАвансовогоПлатежа.СтавкаНалогаАП = ТаблицаПоПараметрам[0].СтавкаНалога;
	СтруктураРасчетаАвансовогоПлатежа.ОбъектНалогообложения = ТаблицаПоПараметрам[0].ОбъектНалогообложения;
	
	ТаблицаПоНалогу = РезультатЗапроса[0].Выгрузить();
	
	Если ТаблицаПоНалогу.Количество() = 0 Тогда
		
		СтруктураРасчетаАвансовогоПлатежа.ДополнительнаяИнформация.Описание = НСтр("ru='Нет данных для расчета налога'");
		СтруктураРасчетаАвансовогоПлатежа.ДополнительнаяИнформация.Предупреждение = Истина;
		
		ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаАвансовогоПлатежа);
		
		// запись состояние события календаря
		Если СобытиеКалендаря <> Неопределено Тогда
			КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
				Организация,
				СобытиеКалендаря,
				Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
				СтруктураРасчетаАвансовогоПлатежа.СуммаАП);
			
			ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаАвансовогоПлатежа);
			
		КонецЕсли;
		
		Возврат СтруктураРасчетаАвансовогоПлатежа;
		
	Иначе
		
		СтрокаДанныхНалога = ТаблицаПоНалогу[0];
		СтруктураРасчетаАвансовогоПлатежа.СуммаДоходовАП = СтрокаДанныхНалога.ДоходовЗаГод;
		СтруктураРасчетаАвансовогоПлатежа.СуммаРасходовАП = СтрокаДанныхНалога.РасходовЗаГод;
		
	КонецЕсли;
	
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПериодРасчета), Новый Структура("Организация", Организация));
	
	ВыборкаВзносыВПФРИФСС = РезультатЗапроса[3].Выбрать();
	Если ВыборкаВзносыВПФРИФСС.Следующий() Тогда
		Если СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД Тогда
			СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП = 0;
		Иначе
			СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП = ВыборкаВзносыВПФРИФСС.СуммаУплачено;
		КонецЕсли;
	Иначе
		СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП = 0;
	КонецЕсли;

	
	Если СтруктураРасчетаАвансовогоПлатежа.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		СтруктураРасчетаАвансовогоПлатежа.СуммаРасходовАП = 0;
	Иначе
		СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовКУплатеАП = 0;
	КонецЕсли;
	
	// убираем отрицательные
	СтруктураРасчетаАвансовогоПлатежа.НалоговаяБазаАП =Макс(СтруктураРасчетаАвансовогоПлатежа.СуммаДоходовАП - СтруктураРасчетаАвансовогоПлатежа.СуммаРасходовАП, 0);
	
	СуммаАвансовогоПлатежа = СтруктураРасчетаАвансовогоПлатежа.НалоговаяБазаАП*СтруктураРасчетаАвансовогоПлатежа.СтавкаНалогаАП/100;
	
	СтруктураРасчетаАвансовогоПлатежа.СуммаАП = СуммаАвансовогоПлатежа;
	СтруктураРасчетаАвансовогоПлатежа.ДополнительнаяИнформация.Описание = НСтр("ru='Рассчитан авансовый платеж'");
	
	
	ВыборкаПоУплате = РезультатЗапроса[2].Выбрать();
	Если ВыборкаПоУплате.Следующий() Тогда
		СтруктураРасчетаАвансовогоПлатежа.СуммаАвансовыхПлатежейАП = ВыборкаПоУплате.СуммаУплачено;
	Иначе
		СтруктураРасчетаАвансовогоПлатежа.СуммаАвансовыхПлатежейАП = 0;
	КонецЕсли;
	
	СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП = СтруктураРасчетаАвансовогоПлатежа.СуммаАП - СтруктураРасчетаАвансовогоПлатежа.СуммаАвансовыхПлатежейАП;
	Если СтруктураРасчетаАвансовогоПлатежа.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо,ИПИспользуетТрудНаемныхРаботников");
		
		// проверяем, производились ли выплаты сотрудникмм и расчтный период больше 01.01.12
		// то можно принимать к вычету все 100%
		Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не РеквизитыОрганизации.ИПИспользуетТрудНаемныхРаботников
			И ПериодРасчета >= '20120101' Тогда
			
			СтруктураРасчетаАвансовогоПлатежа.Зачет100ПроцСтрахВзносовАП = Истина;
			СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовКУплатеАП =
					?(1*СтруктураРасчетаАвансовогоПлатежа.СуммаАП < СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП,
					(1*СтруктураРасчетаАвансовогоПлатежа.СуммаАП), СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП);
			СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП = СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП
				- СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовКУплатеАП;
			
		Иначе
			СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовКУплатеАП =
					?(0.5*СтруктураРасчетаАвансовогоПлатежа.СуммаАП < СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП,
					(0.5*СтруктураРасчетаАвансовогоПлатежа.СуммаАП), СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП);
			СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП = СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП
				- СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовКУплатеАП;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП = Окр(Макс(0,СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП));
	
	НачатьТранзакцию();
	
	ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаАвансовогоПлатежа);
	СтруктураРасчетаАвансовогоПлатежа.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП;
	
	// запись состояние события календаря
	Если СобытиеКалендаря <> Неопределено Тогда
		
		КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			СтруктураРасчетаАвансовогоПлатежа.СуммаАП);
		// Регистрация документа оплаты
		
		ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаАвансовогоПлатежа);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат СтруктураРасчетаАвансовогоПлатежа;
	
КонецФункции

// Процедура формирует декларацию по УСН
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьДекларациюПоУСН(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	КонтрольРасчетаЕдиногоНалога(Организация, ПериодРасчета);
	
	СтруктураДекларацииПоУСН = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента", 
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование декларации по УСН невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураДекларацииПоУСН.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураДекларацииПоУСН.ДокументОтчетности <> Неопределено Тогда
		СтруктураДекларацииПоУСН.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураДекларацииПоУСН.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
			Если (ПериодРасчета >= '20140101' И СтруктураДекларацииПоУСН.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2009Кв1")
				ИЛИ (ПериодРасчета >= '20150101' И СтруктураДекларацииПоУСН.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2014Кв1") Тогда
				// Форма документа отчетности не соответствует периоду формирования
				ДокументОбъект = СтруктураДекларацииПоУСН.ДокументОтчетности.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				ДокументОбъект.Записать();
				
				СтруктураДекларацииПоУСН.ДокументОтчетности = Неопределено;
				СтруктураДекларацииПоУСН.ПараметрыФормыДокумента = Неопределено;
			КонецЕсли;
	КонецЕсли;
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Отправить,
		"");
	
	Возврат СтруктураДекларацииПоУСН;
	
КонецФункции

// Процедура формирует отчет 4-ФСС
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция Сформировать4ФСС(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	
	СтруктураФорма4ФСС = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента",
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование декларации по УСН невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураФорма4ФСС.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураФорма4ФСС.ДокументОтчетности <> Неопределено Тогда
		СтруктураФорма4ФСС.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураФорма4ФСС.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
			Если (ПериодРасчета >= '20130630' И СтруктураФорма4ФСС.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2012Кв1")
				ИЛИ (ПериодРасчета >= '20140101' И СтруктураФорма4ФСС.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2013Кв2") 
				ИЛИ (ПериодРасчета >= '20150101' И СтруктураФорма4ФСС.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2014Кв1")
				ИЛИ (ПериодРасчета >= '20160101' И СтруктураФорма4ФСС.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2015Кв1")
				ИЛИ (ПериодРасчета >= '20160701' И СтруктураФорма4ФСС.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2016Кв1")Тогда
				// Форма документа отчетности не соответствует периоду формирования
				ДокументОбъект = СтруктураФорма4ФСС.ДокументОтчетности.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				ДокументОбъект.Записать();
				
				СтруктураФорма4ФСС.ДокументОтчетности = Неопределено;
				СтруктураФорма4ФСС.ПараметрыФормыДокумента = Неопределено;
			КонецЕсли;
	КонецЕсли;
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Отправить,
		"");
	
	Возврат СтруктураФорма4ФСС;
	
КонецФункции


// Функция проверяет, выполнялся ли расчет единого налога, если таковой не выполнялся
// то производит соответствующий расчет
Функция КонтрольРасчетаЕдиногоНалога(Организация, ПериодРасчета) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗначенияПоказателейОтчетности.ЗначениеПоказателя
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетности КАК ЗначенияПоказателейОтчетности
	|ГДЕ
	|	ЗначенияПоказателейОтчетности.Организация = &Организация
	|	И ЗначенияПоказателейОтчетности.ПоказательОтчетности В ИЕРАРХИИ(&ПоказательОтчетности)
	|	И ЗначенияПоказателейОтчетности.ПериодОтчетности = &ПериодОтчетности");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодОтчетности", ПериодРасчета);
	Запрос.УстановитьПараметр("ПоказательОтчетности", ПланыВидовХарактеристик.ПоказателиОтчетности.ЕдиныйНалог);
	
	ВыполнитьРасчетЕдиногоНалога(Организация, ПериодРасчета, КалендарьОтчетности.ПолучитьСобытиеРасчетаЕдиногоНалогаВПериоде(ПериодРасчета), Ложь);
	
	Если Запрос.Выполнить().Пустой() Тогда
		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура формирует записи по расчету взносов в ПФР и ФСС
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция ВыполнитьРасчетВзносовВПФРиФСС(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураРасчетаВзносовВПФРиФСС = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|ДатаРегистрацииИППФР,
		|ДатаРожденияЗаСебя,
		|ПлательщикДобровольныхВзносовФССЗаСебя,
		|ПФРНакопительнаяЗаСебя,
		|ПФРСтраховаяЗаСебя,
		|ТФОМСЗаСебя,
		|ФФОМСЗаСебя,
		|МРОТЗаСебя,
		|УплаченоСНачалоГОДЗаСебя,
		|ВидВзаиморасчетовСБюджетом,
		|СуммаВзаиморасчетовСБюджетом,
		|ДокументВзаиморасчетовСБюджетом",
		Организация,
		СобытиеКалендаря,
		ПериодРасчета,
		0,
		0,
		Ложь,
		0,
		0,
		0,
		0,
		0,
		0,
		Неопределено,
		0,
		Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыПоНалогамОбороты.ВидНалога КАК ВидВзаиморасчетов,
	|	РасчетыПоНалогамОбороты.СуммаРасход
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогам.Обороты(
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И ВидНалога В (&ВидыВзаиморасчетов)
	|				И СрокУплаты < &СрокУплаты И СрокУплаты >= &НачалоГода) КАК РасчетыПоНалогамОбороты");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СрокУплаты", ПериодРасчета);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПериодРасчета));
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетов", ВидыВзаиморасчетовВзносыВПФРИФСС);
	
	// соберем данные ранее уплаченных платежей
	
	УплаченоСНачалоГода = Новый Соответствие();
	УплаченоСНачалоГода.Вставить(Справочники.ВидыНалогов.ПФРНакопительная,0);
	УплаченоСНачалоГода.Вставить(Справочники.ВидыНалогов.ПФРСтраховая,0);
	УплаченоСНачалоГода.Вставить(Справочники.ВидыНалогов.ТФОМС,0);
	УплаченоСНачалоГода.Вставить(Справочники.ВидыНалогов.ФФОМС,0);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УплаченоСНачалоГода[Выборка.ВидВзаиморасчетов] = Выборка.СуммаРасход;
		
	КонецЦикла;
	
	
	
	
	// Здесь будет произведен расчет взносов
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ФизическоеЛицо,ДатаРегистрации");
	ДатаРождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ФизическоеЛицо, "ДатаРождения");
	СтруктураРасчетаВзносовВПФРиФСС.ДатаРегистрацииИППФР = Реквизиты.ДатаРегистрации;
	СтруктураРасчетаВзносовВПФРиФСС.ДатаРожденияЗаСебя = ДатаРождения;
	
	СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя = РегистрыСведений.МРОТ.МРОТНаДату(НачалоГода(ПериодРасчета));
	
	// ПФР
	ДатаНачалаПрименения = ?(СтруктураРасчетаВзносовВПФРиФСС.ДатаРегистрацииИППФР < НачалоГода(ПериодРасчета), НачалоГода(ПериодРасчета), СтруктураРасчетаВзносовВПФРиФСС.ДатаРегистрацииИППФР);
	
	КоличествоМесяцевНеполных = Месяц(ПериодРасчета) - Месяц(ДатаНачалаПрименения);
	ПоМесяцам = СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя*КоличествоМесяцевНеполных;
	КоличествоДней = День(КонецМесяца(ДатаНачалаПрименения))-День(ДатаНачалаПрименения)+1;
	ПоДням = СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя*КоличествоДней/День(КонецМесяца(ДатаНачалаПрименения));
	
	// Коэффициент, с 2013 года равен 2, до этого 1.
	Если Год(ПериодРасчета) = 2013 Тогда
		Коэффициент = 2;
	Иначе
		Коэффициент = 1;
	КонецЕсли;
	
	Если Год(ПериодРасчета) > 2013 Тогда
		СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя = (ПоМесяцам+ПоДням)*0.26*Коэффициент;
	Иначе
		Если Год(СтруктураРасчетаВзносовВПФРиФСС.ДатаРожденияЗаСебя) < 1967 Тогда
			СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя = (ПоМесяцам+ПоДням)*0.26*Коэффициент;
		Иначе
			СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя = (ПоМесяцам+ПоДням)*0.20*Коэффициент;
			СтруктураРасчетаВзносовВПФРиФСС.ПФРНакопительнаяЗаСебя = (ПоМесяцам+ПоДням)*0.06*Коэффициент;
		КонецЕсли;
	КонецЕсли;
	
	// ОМС
	
	СтруктураРасчетаВзносовВПФРиФСС.ФФОМСЗаСебя = (ПоМесяцам+ПоДням)*0.051;
	СтруктураРасчетаВзносовВПФРиФСС.ТФОМСЗаСебя = (ПоМесяцам+ПоДням)*0.0;
	
	// корректируем на сумму уплаты с начала года
	СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя = 
		Макс(
			СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя - УплаченоСНачалоГода[Справочники.ВидыНалогов.ПФРСтраховая],
			0);
			
	СтруктураРасчетаВзносовВПФРиФСС.ПФРНакопительнаяЗаСебя =
			Макс(
			СтруктураРасчетаВзносовВПФРиФСС.ПФРНакопительнаяЗаСебя - УплаченоСНачалоГода[Справочники.ВидыНалогов.ПФРНакопительная],
			0);
			
	СтруктураРасчетаВзносовВПФРиФСС.ФФОМСЗаСебя = 
			Макс(
			СтруктураРасчетаВзносовВПФРиФСС.ФФОМСЗаСебя - УплаченоСНачалоГода[Справочники.ВидыНалогов.ФФОМС],
			0);
			
	СтруктураРасчетаВзносовВПФРиФСС.ТФОМСЗаСебя = 
			Макс(
			СтруктураРасчетаВзносовВПФРиФСС.ТФОМСЗаСебя - УплаченоСНачалоГода[Справочники.ВидыНалогов.ТФОМС],
			0);
	
	СтруктураРасчетаВзносовВПФРиФСС.УплаченоСНачалоГОДЗаСебя = 
		УплаченоСНачалоГода[Справочники.ВидыНалогов.ПФРСтраховая]
		+УплаченоСНачалоГода[Справочники.ВидыНалогов.ПФРНакопительная]
		+УплаченоСНачалоГода[Справочники.ВидыНалогов.ТФОМС]
		+УплаченоСНачалоГода[Справочники.ВидыНалогов.ФФОМС];
	
	НачатьТранзакцию();
	
	ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаВзносовВПФРиФСС);
	
	
	// запись состояние события календаря
	Если СобытиеКалендаря <> Неопределено Тогда
		
		КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			"");
			
		СтруктураРасчетаВзносовВПФРиФСС.ВидВзаиморасчетовСБюджетом = Справочники.ВидыНалогов.ПФРСтраховая;
		СтруктураРасчетаВзносовВПФРиФСС.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя;
		ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаВзносовВПФРиФСС);
		
		СтруктураРасчетаВзносовВПФРиФСС.ВидВзаиморасчетовСБюджетом = Справочники.ВидыНалогов.ПФРНакопительная;
		СтруктураРасчетаВзносовВПФРиФСС.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаВзносовВПФРиФСС.ПФРНакопительнаяЗаСебя;
		ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаВзносовВПФРиФСС);
		
		СтруктураРасчетаВзносовВПФРиФСС.ВидВзаиморасчетовСБюджетом = Справочники.ВидыНалогов.ФФОМС;
		СтруктураРасчетаВзносовВПФРиФСС.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаВзносовВПФРиФСС.ФФОМСЗаСебя;
		ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаВзносовВПФРиФСС);
		
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат СтруктураРасчетаВзносовВПФРиФСС;
	
КонецФункции


// Процедура формирует записи по расчету взносов в ПФР при доходах свыше 300 тр.
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция ВыполнитьРасчетВзносовВПФРПриДоходахСвыше300тр(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураРасчетаВзносовВПФРиФСС = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|СуммаДоходовУСНСвыше300тр,
		|СуммаДоходовЕНВДСвыше300тр,
		|СуммаДоходовПатентСвыше300тр,
		|ПФРСвыше300тр,
		|МРОТЗаСебя,
		|УплаченоСНачалоГОДСвыше300тр,
		|ВидВзаиморасчетовСБюджетом,
		|СуммаВзаиморасчетовСБюджетом,
		|ДокументВзаиморасчетовСБюджетом,
		|хзТаблицаЕНВДСвыше300тр",
		Организация,
		СобытиеКалендаря,
		ПериодРасчета,
		0,
		0,
		0,
		0,
		0,
		0,
		Неопределено,
		0,
		Неопределено,
		Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот КАК ДоходовЗаГод,
	|	КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот КАК РасходовЗаГод
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &ОкончаниеПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.СуммаРасход), 0) КАК СуммаРасход
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогам.Обороты(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			,
	|			Организация = &Организация
	|				И ВидНалога В (&ВидыВзаиморасчетов)
	|				И СрокУплаты <= &СрокУплаты
	|				И СрокУплаты > &ВторойКвартал) КАК РасчетыПоНалогам");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СрокУплаты", ДобавитьМесяц(НачалоГода(ПериодРасчета),15));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодРасчета));
	// Второй квартал необходим для исключения выплат,
	//которые были произведены за предыдущий год со сроком уплаты до 01.04
	Запрос.УстановитьПараметр("ВторойКвартал", ДобавитьМесяц(НачалоГода(ПериодРасчета),3));
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300тр);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетов", ВидыВзаиморасчетовВзносыВПФРИФСС);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	
	ТаблицаПоНалогу = РезультатЗапроса[0].Выгрузить();
	ДоходыУСН = 0;
	
	Если ТаблицаПоНалогу.Количество() > 0 Тогда
		
		СтрокаДанныхНалога = ТаблицаПоНалогу[0];
		ДоходыУСН= СтрокаДанныхНалога.ДоходовЗаГод;
		
	КонецЕсли;
	
	
	Выборка = РезультатЗапроса[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураРасчетаВзносовВПФРиФСС.УплаченоСНачалоГОДСвыше300тр = Выборка.СуммаРасход;
		
	КонецЦикла;
	
	
	СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя = РегистрыСведений.МРОТ.МРОТНаДату(НачалоГода(ПериодРасчета));
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПериодРасчета), Новый Структура("Организация", Организация));
	// Общий доход подсчитывается как сумма
	// по используемым режимам налогообложения
	//
	Если СистемаНалогообложения.ПлательщикУСН Тогда
		СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовУСНСвыше300тр = СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовУСНСвыше300тр + ДоходыУСН;
	КонецЕсли;
	
	ВременнаяТаблица = Новый ТаблицаЗначений;
	
	ВременнаяТаблица.Колонки.Добавить("ВидДеятельности");
	ВременнаяТаблица.Колонки.Добавить("КодИФНС");
	ВременнаяТаблица.Колонки.Добавить("ОКАТО");
	ВременнаяТаблица.Колонки.Добавить("К2Установленный");
	ВременнаяТаблица.Колонки.Добавить("ДнейВсего");
	ВременнаяТаблица.Колонки.Добавить("ДнейОтработано");
	ВременнаяТаблица.Колонки.Добавить("К2Скорректированный");
	ВременнаяТаблица.Колонки.Добавить("БазоваяДоходность");
	ВременнаяТаблица.Колонки.Добавить("ФизПоказатель");
	ВременнаяТаблица.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов(Новый КвалификаторыЧисла(15,2)));
	ВременнаяТаблица.Колонки.Добавить("СуммаДохода", Новый ОписаниеТипов(Новый КвалификаторыЧисла(15,2)));
	ВременнаяТаблица.Колонки.Добавить("КварталЕНВД", Новый ОписаниеТипов(Новый КвалификаторыЧисла(1,0)));
	
	// Рассчитываем доход по ЕНВД
	Если СистемаНалогообложения.ПлательщикЕНВД Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодПоОКАТО КАК КодОКАТО,
			|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.Ссылка КАК ВидДеятельности,
			|	ЕстьNull(ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ВидПредпринимательскойДеятельности.БазоваяДоходность, 0) КАК БазоваяДоходность,
			|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя1 + ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя2 + ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя3 КАК ФизПоказатель,
			|	ЕстьNull(ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КоэффициентК2, 0) КАК КоэффициентК2,
			|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней1 + ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней2 + ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней3 КАК ВыработкаДней,
			|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего1 + ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего2 + ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего3 КАК ДнейВсего,
			|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодНалоговогоОрганаПолучателя КАК КодИФНС,
			|	КВАРТАЛ(ПоказателиЕНВДПоказателиЕНВД.Ссылка.Дата) КАК КварталЕНВД
			|ИЗ
			|	Документ.ПоказателиЕНВД.ПоказателиЕНВД КАК ПоказателиЕНВДПоказателиЕНВД
			|ГДЕ
			|	НЕ ПоказателиЕНВДПоказателиЕНВД.Ссылка.ПометкаУдаления
			|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Организация = &Организация
			|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД,
			|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КоэффициентДефляторСрезПоследних.Значение КАК К1
			|ИЗ
			|	РегистрСведений.КоэффициентДефлятор.СрезПоследних(&ОкончаниеПериода, ) КАК КоэффициентДефляторСрезПоследних";
		
		Результат = Запрос.ВыполнитьПакет();
		Выборка = Результат[1].Выбрать();
		Выборка.Следующий();
		
		К1 = Выборка.К1;
		Выборка = Результат[0].Выбрать();
		ДоходыЕНВД = 0;
		
		Пока Выборка.Следующий() Цикл
			Строка = ВременнаяТаблица.Добавить();
			Строка.ОКАТО = Выборка.КодОКАТО;
			Строка.КодИФНС = Выборка.КодИФНС;
			Строка.ВидДеятельности = Выборка.ВидДеятельности;
			Строка.К2Установленный = Выборка.КоэффициентК2;
			Строка.ДнейВсего = Выборка.ДнейВсего;
			Строка.ДнейОтработано = Выборка.ВыработкаДней;
			Строка.БазоваяДоходность = Выборка.БазоваяДоходность;
			Строка.К2Скорректированный = Выборка.КоэффициентК2*Выборка.ВыработкаДней/Выборка.ДнейВсего;
			Строка.ФизПоказатель = Выборка.ФизПоказатель;
			Строка.СуммаНалога = Окр(Строка.ФизПоказатель * Строка.БазоваяДоходность * К1 * Строка.К2Скорректированный * 0.15);
			Строка.СуммаДохода = Строка.ФизПоказатель * Строка.БазоваяДоходность * К1 * Строка.К2Скорректированный;
			Строка.КварталЕНВД = Выборка.КварталЕНВД;
			
			
			ДоходыЕНВД = ДоходыЕНВД + Выборка.ФизПоказатель * Выборка.БазоваяДоходность * К1 * (Выборка.КоэффициентК2*Выборка.ВыработкаДней/Выборка.ДнейВсего);
		КонецЦикла;
		
		СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовЕНВДСвыше300тр = СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовЕНВДСвыше300тр + ДоходыЕНВД;
	КонецЕсли;
	
	СтруктураРасчетаВзносовВПФРиФСС.хзТаблицаЕНВДСвыше300тр = Новый ХранилищеЗначения(ВременнаяТаблица);
	
	// Посчитаем патент
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Патенты.Ссылка,
	|	Патенты.ДатаНачала,
	|	Патенты.ДатаОкончания,
	|	Патенты.ПотенциальноВозможныйГодовойДоход
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	НЕ Патенты.ПометкаУдаления
	|	И Патенты.Владелец = &Организация
	|	И (Патенты.ДатаОкончания МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|			ИЛИ Патенты.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|			ИЛИ &НачалоПериода МЕЖДУ Патенты.ДатаНачала И Патенты.ДатаОкончания
	|			ИЛИ &ОкончаниеПериода МЕЖДУ Патенты.ДатаНачала И Патенты.ДатаОкончания)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовПатентСвыше300тр = 
			СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовПатентСвыше300тр + 
			РегламентированнаяОтчетностьУСНКлиентСервер.РассчитатьПотенциальноВозможныйДоход(
				Выборка.ПотенциальноВозможныйГодовойДоход, НачалоГода(ПериодРасчета), КонецДня(ПериодРасчета))
	КонецЦикла;
	
	СуммаДоходовВзносыСвыше300тр = СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовЕНВДСвыше300тр
			+ СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовУСНСвыше300тр
			+ СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовПатентСвыше300тр;
	
	// Посчитаем сумму фиксированных страховых взносов
	
	ДатаНачалаПрименения = ?(ДатаРегистрации < НачалоГода(ПериодРасчета), НачалоГода(ПериодРасчета), ДатаРегистрации);
	
	КоличествоМесяцевНеполных = 12 - Месяц(ДатаНачалаПрименения);
	ПоМесяцам = СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя*КоличествоМесяцевНеполных;
	КоличествоДней = День(КонецМесяца(ДатаНачалаПрименения))-День(ДатаНачалаПрименения)+1;
	ПоДням = СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя*КоличествоДней/День(КонецМесяца(ДатаНачалаПрименения));
	СуммаФиксированныхВзносов = (ПоМесяцам+ПоДням)*0.26;
	
	// Максимальная сумма согласно пп. "а" п. 1 ст. 2 Закона N 237-ФЗ
	// за вычетом фиксированных платежей.
	МаксимальнаяСуммаСтраховыхВзносов = СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя*8*0.26*12 - СуммаФиксированныхВзносов;
	
	СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр = Мин(МаксимальнаяСуммаСтраховыхВзносов,?(СуммаДоходовВзносыСвыше300тр > 300000,(СуммаДоходовВзносыСвыше300тр - 300000)*0.01, 0));
	СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр = ?(СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр < СтруктураРасчетаВзносовВПФРиФСС.УплаченоСНачалоГОДСвыше300тр, 0, СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр - СтруктураРасчетаВзносовВПФРиФСС.УплаченоСНачалоГОДСвыше300тр);
	
	НачатьТранзакцию();
	
	ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаВзносовВПФРиФСС);
	
	
	// запись состояние события календаря
	Если СобытиеКалендаря <> Неопределено Тогда
		
		КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			"");
			
		СтруктураРасчетаВзносовВПФРиФСС.ВидВзаиморасчетовСБюджетом = Справочники.ВидыНалогов.ПФРСвыше300тр;
		СтруктураРасчетаВзносовВПФРиФСС.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр;
		ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаВзносовВПФРиФСС);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат СтруктураРасчетаВзносовВПФРиФСС;
	
КонецФункции


// Процедура формирует сведения о среднесписочной численности
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьСведенияОСреднесписочнойЧисленности(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураСведенияОССЧ = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента", 
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование сведений о среднесписочной численности невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураСведенияОССЧ.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураСведенияОССЧ.ДокументОтчетности <> Неопределено Тогда
		СтруктураСведенияОССЧ.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураСведенияОССЧ.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
	КонецЕсли;
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Отправить,
		"");
	
	Возврат СтруктураСведенияОССЧ;
	
КонецФункции

// Процедура формирует документы справки 2-НДФЛ для сотрудников по организации
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьСправки2НДФЛ(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование сведений о среднесписочной численности невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СформироватьСправкуНДФЛВНалоговыйОрган(Организация, СобытиеКалендаря);
	
	СтруктураСправки2НДФЛ = Новый Структура(
		"Организация,
		|Период", 
		Организация,
		КонецГода(ПериодРасчета));
	
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			"");
	
	
	Возврат СтруктураСправки2НДФЛ;
	
КонецФункции

// Процедура формирует декларацию по УСН
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьСправкуРСВ1(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураДекларацииПоРСВ = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента,
		|ОтчетныйПериод", 
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ПериодРасчета,
		Неопределено,
		НачалоКвартала(ПериодРасчета));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование декларации по УСН невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураДекларацииПоРСВ.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураДекларацииПоРСВ.ДокументОтчетности <> Неопределено Тогда
		СтруктураДекларацииПоРСВ.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураДекларацииПоРСВ.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
			Если Год(ПериодРасчета)> 2012 И СтруктураДекларацииПоРСВ.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2012Кв1"
				Или Год(ПериодРасчета)> 2013 И СтруктураДекларацииПоРСВ.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2013Кв1"
				Или ПериодРасчета> Дата('20150331') И СтруктураДекларацииПоРСВ.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2014Кв1"
				Тогда
				// Форма документа отчетности не соответствует периоду формирования
				ДокументОбъект = СтруктураДекларацииПоРСВ.ДокументОтчетности.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				ДокументОбъект.Записать();
				
				СтруктураДекларацииПоРСВ.ДокументОтчетности = Неопределено;
				СтруктураДекларацииПоРСВ.ПараметрыФормыДокумента = Неопределено;
			КонецЕсли;
		
	КонецЕсли;
		
	Возврат СтруктураДекларацииПоРСВ;
	
КонецФункции

// Процедура формирует записи по расчету торгового сбора
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция ВыполнитьРасчетТорговогоСбора(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураРасчетаТорговогоСбора = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|хзТаблицаТорговыхТочек,
		|ВидВзаиморасчетовСБюджетом,
		|СуммаВзаиморасчетовСБюджетом,
		|ДокументВзаиморасчетовСБюджетом",
		Организация,
		СобытиеКалендаря,
		ПериодРасчета,
		Неопределено,
		Справочники.ВидыНалогов.ТорговыйСбор,
		0,
		Неопределено);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТорговыеТочки.РегистрацияВИФНС.Код КАК КодИФНС,
		|	СУММА(ВЫБОР
		|			КОГДА ТорговыеТочки.ЛьготаПрименяется
		|				ТОГДА 0
		|			ИНАЧЕ ТорговыеТочки.ИсчисленнаяСумма
		|		КОНЕЦ) КАК СуммаВзаиморасчетов,
		|	СУММА(ТорговыеТочки.ИсчисленнаяСумма) КАК ИсчисленнаяСуммаБезЛьгот,
		|	ТорговыеТочки.РегистрацияВИФНС.КодПоОКТМО КАК КодПоОКТМО
		|ИЗ
		|	Справочник.ТорговыеТочки КАК ТорговыеТочки
		|ГДЕ
		|	ТорговыеТочки.Владелец = &Организация
		|	И ТорговыеТочки.ДатаНачалаОсуществленияДеятельности <= &ОкончаниеПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ТорговыеТочки.РегистрацияВИФНС");
		

	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодРасчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВременнаяТаблица = Запрос.Выполнить().Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ДокументВзаиморасчетовСБюджетом",Новый ОписаниеТипов("ДокументСсылка.НачислениеНалогов"));
	ЗарегистрироватьВзаиморасчетыСБюджетомТорговыйСбор(ВременнаяТаблица,СтруктураРасчетаТорговогоСбора);
	
	СтруктураРасчетаТорговогоСбора.хзТаблицаТорговыхТочек = Новый ХранилищеЗначения(ВременнаяТаблица);
	
	СтруктураРасчетаТорговогоСбора.СуммаВзаиморасчетовСБюджетом = ВременнаяТаблица.Итог("СуммаВзаиморасчетов");
	
	НачатьТранзакцию();
	
	
	ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаТорговогоСбора);
	
	// запись состояние события календаря
	Если СобытиеКалендаря <> Неопределено Тогда
		
		КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			"");
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	СтруктураРасчетаТорговогоСбора.хзТаблицаТорговыхТочек = Неопределено;
	
	Возврат СтруктураРасчетаТорговогоСбора;
	
КонецФункции

// Процедура формирует форму №1-предприниматель
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьФорму1Предприниматель(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	
	СтруктураФорма1Предприниматель = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента",
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование формы №1-предприниматель невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураФорма1Предприниматель.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураФорма1Предприниматель.ДокументОтчетности <> Неопределено Тогда
		СтруктураФорма1Предприниматель.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураФорма1Предприниматель.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
	КонецЕсли;
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Отправить,
		"");
	
	Возврат СтруктураФорма1Предприниматель;
	
КонецФункции

// Процедура формирует форму 6-НДФЛ
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьФорму6НДФЛ(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураФормы6НДФЛ = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента", 
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование формы 6-НДФЛ невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураФормы6НДФЛ.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураФормы6НДФЛ.ДокументОтчетности <> Неопределено Тогда
		СтруктураФормы6НДФЛ.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураФормы6НДФЛ.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
	КонецЕсли;

	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Отправить,
		"");
	
	Возврат СтруктураФормы6НДФЛ;
	
КонецФункции

// Процедура формирует декларацию 12
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьДекларацию12(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураДекларация12 = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента", 
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование декларация об объеме розничной продажи пива и пивных напитков (Приложение №12) невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураДекларация12.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураДекларация12.ДокументОтчетности <> Неопределено Тогда
		СтруктураДекларация12.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураДекларация12.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
	КонецЕсли;

	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Отправить,
		"");
	
	Возврат СтруктураДекларация12;
	
КонецФункции


// Процедура формирует сведения о застрахованных лицах по организации
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьСЗВМ(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование сведений о застрахованных лицах (СЗВ-М) невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СформироватьСведенияОЗастрахованныхЛицахСЗВ_М(Организация, СобытиеКалендаря);
	
	СтруктураСобытия = Новый Структура(
		"Организация,
		|Период", 
		Организация,
		КонецГода(ПериодРасчета));
	
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			"");
	
	
	Возврат СтруктураСобытия;
	
КонецФункции


Процедура ЗарегистрироватьВзаиморасчетыСБюджетомТорговыйСбор(ТаблицаПоТорговомуСбору, СтруктураРасчетаТорговогоСбора)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВзаиморасчетыСБюджетом.Ссылка,
	|	ВзаиморасчетыСБюджетом.КодИФНС КАК КодИФНС,
	|	ВзаиморасчетыСБюджетом.КодПоОКАТО КАК КодПоОКТМО,
	|	ВзаиморасчетыСБюджетом.Сумма Как СуммаВзаиморасчетов
	|ИЗ
	|	Документ.НачислениеНалогов.Налоги КАК ВзаиморасчетыСБюджетом
	|ГДЕ
	|	ВзаиморасчетыСБюджетом.Ссылка.Организация = &Организация
	|	И ВзаиморасчетыСБюджетом.ВидНалога = &ВидВзаиморасчетов
	|	И ВзаиморасчетыСБюджетом.Ссылка.Дата = &ПериодВзаиморасчетов
	|	И НЕ ВзаиморасчетыСБюджетом.Ссылка.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Организация", СтруктураРасчетаТорговогоСбора.Организация);
	Запрос.УстановитьПараметр("ВидВзаиморасчетов", СтруктураРасчетаТорговогоСбора.ВидВзаиморасчетовСБюджетом);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов", КонецДня(СтруктураРасчетаТорговогоСбора.ПериодОтчетности));
	
	ТаблицаВзаиморасчетов = Запрос.Выполнить().Выгрузить();
	
	// найдем все самые подходящие и заполним их в таблице по торговорму сбору
	Для Каждого Строка Из ТаблицаПоТорговомуСбору Цикл
		
		Найденные = ТаблицаВзаиморасчетов.НайтиСтроки(
			Новый Структура("КодПоОКТМО,КодИФНС,СуммаВзаиморасчетов",
			Строка.КодПоОКТМО,
			Справочники.НалоговыеОрганы.НайтиПоКоду(Строка.КодИФНС),
			Строка.СуммаВзаиморасчетов));
		
		// больше одной по логике ОП не должно находиться
		Если Найденные.Количество() > 0 Тогда
			
			Строка.ДокументВзаиморасчетовСБюджетом = Найденные[0].Ссылка;
			
		КонецЕсли;
		
		Если Найденные.Количество() > 1 Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru='ЕНВД.Внутренняя логика'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				НСтр("ru='Нарушение логики работы алгоритма поиска документов взаиморасчетов по ЕНВД'"));
		КонецЕсли;
		
		// удалим из обработки найденные
		Для Каждого СтрокаКУдалению ИЗ Найденные Цикл
			ТаблицаВзаиморасчетов.Удалить(ТаблицаВзаиморасчетов.Индекс(СтрокаКУдалению));
		КонецЦикла;
		
	КонецЦикла;
	
	// найдем близко  подходящие и заполним их в таблице по ЕНВД
	Для Каждого Строка Из ТаблицаПоТорговомуСбору Цикл
		
		// пропускаем заполненные
		Если НЕ Строка.ДокументВзаиморасчетовСБюджетом.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Найденные = ТаблицаВзаиморасчетов.НайтиСтроки(
			Новый Структура("КодПоОКТМО,КодИФНС",
			Строка.КодПоОКТМО,
			Справочники.НалоговыеОрганы.НайтиПоКоду(Строка.КодИФНС)));
		
		// больше одной по логике ОП не должно находиться
		Если Найденные.Количество() > 0 Тогда
			
			Объект = Найденные[0].Ссылка.ПолучитьОбъект();
			Объект.СуммаВзаиморасчетов = Строка.СуммаВзаиморасчетов;
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
			Строка.ДокументВзаиморасчетовСБюджетом = Объект.Ссылка;
			
			// удалим из обработки найденные
			ТаблицаВзаиморасчетов.Удалить(ТаблицаВзаиморасчетов.Индекс(Найденные[0]));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// пометим на удаление те взаиморасчеты, которые не подошли
	Для Каждого Строка Из ТаблицаВзаиморасчетов Цикл
		Объект = Строка.Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(Истина);
		Объект.Записать();
	КонецЦикла;
	
	
	// Создадим новые взаиморасчет
	Найденные = ТаблицаПоТорговомуСбору.НайтиСтроки(Новый Структура("ДокументВзаиморасчетовСБюджетом", Документы.НачислениеНалогов.ПустаяСсылка()));
	ДатаОкончанияСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРасчетаТорговогоСбора.СобытиеКалендаря, "ДатаОкончанияСобытия");
	
	Для Каждого Строка Из Найденные Цикл
		
		Объект = Документы.НачислениеНалогов.СоздатьДокумент();
		Объект.Организация = СтруктураРасчетаТорговогоСбора.Организация;
		Объект.Дата = КонецДня(СтруктураРасчетаТорговогоСбора.ПериодОтчетности);
		Объект.СуммаДокумента = Строка.СуммаВзаиморасчетов;
		Объект.ВидОперации = Перечисления.ВидыОперацийНачислениеНалогов.Начисление;
		
		
		НовСтр = Объект.Налоги.Добавить();
		НовСтр.ВидНалога = СтруктураРасчетаТорговогоСбора.ВидВзаиморасчетовСБюджетом;
		НовСтр.СрокУплаты = ДатаОкончанияСобытия;
		НовСтр.КодИФНС = Справочники.НалоговыеОрганы.НайтиПоКоду(Строка.КодИФНС);
		НовСтр.КодПоОКАТО = Строка.КодПоОКТМО;
		НовСтр.Сумма = Строка.СуммаВзаиморасчетов;
		НовСтр.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
		
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		
		Строка.ДокументВзаиморасчетовСБюджетом = Объект.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

// Процедура регистрирует документ обязательств перед бюджетом
//
Процедура ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчета) Экспорт
	
	ДокументВзаиморасчетов = ПолучитьДокументВзаиморасчетовСБюджетом(
		СтруктураРасчета.Организация,
		СтруктураРасчета.ВидВзаиморасчетовСБюджетом,
		СтруктураРасчета.ПериодОтчетности,
		?(СтруктураРасчета.СобытиеКалендаря = Неопределено,
			СтруктураРасчета.ПериодОтчетности,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРасчета.СобытиеКалендаря,"ДатаОкончанияСобытия")));
	
	СтрокаСНалогом = ДокументВзаиморасчетов.Налоги.Найти(СтруктураРасчета.ВидВзаиморасчетовСБюджетом, "ВидНалога");
	СтрокаСНалогом.Сумма = СтруктураРасчета.СуммаВзаиморасчетовСБюджетом;
	
	ДокументВзаиморасчетов.Записать(РежимЗаписиДокумента.Проведение);
	
	СтруктураРасчета.ДокументВзаиморасчетовСБюджетом = ДокументВзаиморасчетов.Ссылка;
	
КонецПроцедуры

// Функция возвращает актуальный документ взаиморасчетов с бюджетом
//
Функция ПолучитьДокументВзаиморасчетовСБюджетом(Организация,ВидВзаиморасчетов,ПериодОтчетности, СрокУплаты, ВозвращатьСсылку = Ложь) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеНалоговНалоги.Ссылка КАК ДокументВзаиморасчетов
	|ИЗ
	|	Документ.НачислениеНалогов.Налоги КАК НачислениеНалоговНалоги
	|ГДЕ
	|	НачислениеНалоговНалоги.Ссылка.Организация = &Организация
	|	И НачислениеНалоговНалоги.ВидНалога = &ВидВзаиморасчетов
	|	И НачислениеНалоговНалоги.Ссылка.Дата = &Дата
	|	И НачислениеНалоговНалоги.НомерСтроки = 1
	|	И НЕ НачислениеНалоговНалоги.Ссылка.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидВзаиморасчетов", ВидВзаиморасчетов);
	Запрос.УстановитьПараметр("Дата",КонецДня(ПериодОтчетности));
	
	ДокументВзаиморасчетов = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ВозвращатьСсылку Тогда
			ДокументВзаиморасчетов = Выборка.ДокументВзаиморасчетов;
		Иначе
			ДокументВзаиморасчетов = Выборка.ДокументВзаиморасчетов.ПолучитьОбъект();
		КонецЕсли;
		
	Иначе
		
		ДокументВзаиморасчетов = Документы.НачислениеНалогов.СоздатьДокумент();
		ДокументВзаиморасчетов.Организация = Организация;
		ДокументВзаиморасчетов.Дата = КонецДня(ПериодОтчетности);
		ДокументВзаиморасчетов.ВидОперации = Перечисления.ВидыОперацийНачислениеНалогов.Начисление;
		СтрокаСНалогом = ДокументВзаиморасчетов.Налоги.Добавить();
		
		СтрокаСНалогом.ВидНалога = ВидВзаиморасчетов;
		СтрокаСНалогом.СрокУплаты = СрокУплаты;
		СтрокаСНалогом.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
		
		Если ВозвращатьСсылку Тогда
			
			ДокументВзаиморасчетов.Записать(РежимЗаписиДокумента.Проведение);
			ДокументВзаиморасчетов = ДокументВзаиморасчетов.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат ДокументВзаиморасчетов;
	
КонецФункции

// Функция получает значение произвольного показателя из регистра Значения показателей отчетности
// так как зачастую там хранится хранилище значений, поэтому трубется получать отдельно
//
Функция ПолучитьЗначениеПроизвольногоПоказателя(Организация,ПериодОтчетности,ПоказательОтчетности) Экспорт
	
	мз = РегистрыСведений.ЗначенияПоказателейОтчетности.СоздатьМенеджерЗаписи();
	мз.Организация = Организация;
	мз.ПериодОтчетности = ПериодОтчетности;
	мз.ПоказательОтчетности = ПоказательОтчетности;
	
	мз.Прочитать();
	
	Если мз.Выбран() Тогда
		Возврат мз.ПроизвольноеЗначениеПоказателя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура по событию календаря отчетности возвращает документ СправкиНДФЛДляПередачиВНалоговыйОрган
// которые содержит результат формирования отчетности.
//
// В случае, если документ отчета не найден, то возвращается неопределено
//
// Возвращает:
// документ СправкиНДФЛДляПередачиВНалоговыйОрган
//
Функция ПолучитьСправку2НДФЛВНалоговыйОрганПоСобытиюКалендаря(Организация, СобытиеКалендаря) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган КАК СправкиНДФЛДляПередачиВНалоговыйОрган
	|ГДЕ
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.НалоговыйПериод = &ГодОтчетности
	|	И СправкиНДФЛДляПередачиВНалоговыйОрган.Организация = &Организация
	|	И НЕ СправкиНДФЛДляПередачиВНалоговыйОрган.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГодОтчетности", Год(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьСправкуНДФЛВНалоговыйОрган(Организация, СобытиеКалендаря)
	
	СправкаНДФЛ = ПолучитьСправку2НДФЛВНалоговыйОрганПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СправкаНДФЛ = Неопределено Тогда
		
		// Создаем справку по организации
		докСправка = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.СоздатьДокумент();
		докСправка.Организация = Организация;
		докСправка.НалоговыйПериод = Год(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
		СправкаНДФЛ = докСправка.ПолучитьСсылкуНового();
	Иначе
		докСправка = СправкаНДФЛ.ПолучитьОбъект();
	КонецЕсли;
	
	// Заполняем данными по сотрудникам
	докСправка.Дата = ТекущаяДатаСеанса();
	докСправка.ПринятоНалоговымОрганом = Ложь;
	докСправка.РегистрацияВНалоговомОргане = ПолучитьРегистрациюВИФНС(Организация);
	ЗапросПоОрганизации = Новый Запрос;
	ЗапросПоОрганизации.Текст =
	"ВЫБРАТЬ
	|	Организации.ИНН,
	|	Организации.КПП,
	|	Организации.КодПоОКАТО,
	|	Организации.КодНалоговогоОрганаПолучателя,
	|	Организации.КодНалоговогоОрганаПолучателя КАК КодИФНСПолучателя,
	|	ЕСТЬNULL(ОрганизацияТелефон.Представление, """""""") КАК ТелефонОрганизации,
	|	Организации.ЮридическоеФизическоеЛицо
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацияТелефон
	|		ПО Организации.Ссылка = ОрганизацияТелефон.Ссылка
	|			И (ОрганизацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации))
	|ГДЕ
	|	Организации.Ссылка = &Ссылка";
	ЗапросПоОрганизации.УстановитьПараметр("Ссылка", Организация);
	Выборка = ЗапросПоОрганизации.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЭтоЮрЛицо = Выборка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		докСправка.ИмяФайла = СправкиПоНДФЛ.ИмяФайлаОбмена(Выборка, докСправка.Дата, ЭтоЮрЛицо);
		докСправка.Телефон = Выборка.ТелефонОрганизации;
		ЗаполнитьЗначенияСвойств(докСправка, СправкиПоНДФЛ.ДанныеПодписывающихЛиц(Организация, докСправка.Дата));
		докСправка.ОКАТО_КПП = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Выборка.КодПоОКАТО, 11) + "/" + РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Выборка.КПП, 9);
	КонецЕсли;
	
	
	// Рассчитаем номер первой справки о доходах
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",докСправка.Дата);
	Запрос.УстановитьПараметр("НалоговыйПериод",докСправка.НалоговыйПериод);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки) КАК КоличествоСформированныхСправок
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.СотрудникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
	|ГДЕ
	|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Дата < &ДатаДокумента
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Проведен
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Организация = &Организация
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.НалоговыйПериод = &НалоговыйПериод";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НомерПервойСправки = ?(Выборка.КоличествоСформированныхСправок = NULL, 0, Выборка.КоличествоСформированныхСправок) + 1;
	Иначе	
		НомерПервойСправки = 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",докСправка.Дата);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Ссылка",СправкаНДФЛ);
	Запрос.УстановитьПараметр("ГодНП",докСправка.НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецНП",КонецГода(Дата(докСправка.НалоговыйПериод,1,1)));
	Запрос.УстановитьПараметр("ДатаПодачиСведений", НачалоМесяца(докСправка.Дата));
	Запрос.УстановитьПараметр("ОКАТО_КПП", докСправка.ОКАТО_КПП);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДФЛСведенияОДоходах.Сотрудник КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13) КАК Ставка
	|ИЗ
	|	РегистрНакопления.НДФЛДоходы КАК НДФЛСведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.СотрудникиОрганизации КАК СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации
	|		ПО НДФЛСведенияОДоходах.Сотрудник = СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Дата < &ДатаДокумента)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Проведен)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Организация = &Организация)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.НалоговыйПериод = &ГодНП)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.ОКАТО_КПП = &ОКАТО_КПП)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка <> &Ссылка)
	|ГДЕ
	|	НДФЛСведенияОДоходах.Организация = &Организация
	|	И ГОД(НДФЛСведенияОДоходах.Период) = &ГодНП
	|	И НДФЛСведенияОДоходах.ПериодРегистрации < &ДатаПодачиСведений
	|	И СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДФЛСведенияОДоходах.Сотрудник.Наименование";
	
	СотрудникиОрганизации = докСправка.СотрудникиОрганизации;
	СотрудникиОрганизации.Загрузить(СправкиПоНДФЛ.ДанныеСотрудников(Запрос.Выполнить().Выгрузить(), докСправка.Дата, докСправка.НалоговыйПериод));
	Для Каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
		СтрокаТЧ.НомерСправки = НомерПервойСправки + докСправка.СотрудникиОрганизации.Индекс(СтрокаТЧ)
	КонецЦикла;
	СтруктураДанных = СправкиПоНДФЛ.ДанныеОДоходах(СотрудникиОрганизации.Выгрузить(), докСправка.НалоговыйПериод, Организация, Организация, докСправка.ОКАТО_КПП, докСправка.Дата);
	докСправка.СведенияОДоходах.Загрузить(СтруктураДанных.Доходы);
	докСправка.СведенияОВычетах.Загрузить(СтруктураДанных.Вычеты);
	ТаблицаИтогов = СтруктураДанных.Итоги;
	Если докСправка.НалоговыйПериод < 2011 Тогда
		Для Каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТаблицаИтогов.Найти(СтрокаТЧ.НомерСправки, "НомерСправки"),, "Ставка");
		КонецЦикла;
	Иначе
		докСправка.СуммыНалогов.Загрузить(ТаблицаИтогов);
		СтруктураПоиска = Новый Структура("НомерСправки");
		Для Каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
			СтрокиИтогов = ТаблицаИтогов.НайтиСтроки(СтруктураПоиска);
			Если СтрокиИтогов.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокиИтогов[0], "ДатаУведомления,КодНалоговогоОрганаУведомления,НомерУведомления");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	докСправка.Записать(РежимЗаписиДокумента .Проведение);
	
КонецПроцедуры

// Процедура по событию календаря отчетности возвращает документ СправкиНДФЛДляПередачиВНалоговыйОрган
// которые содержит результат формирования отчетности.
//
// В случае, если документ отчета не найден, то возвращается неопределено
//
// Возвращает:
// документ СправкиНДФЛДляПередачиВНалоговыйОрган
//
Функция ПолучитьСЗВМПоСобытиюКалендаря(Организация, СобытиеКалендаря) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СведенияОЗастрахованныхЛицахСЗВ_М КАК СведенияОЗастрахованныхЛицахСЗВ_М
	|ГДЕ
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ОкончаниеОтчетногоПериода = &ОтчетныйПериод
	|	И СведенияОЗастрахованныхЛицахСЗВ_М.Организация = &Организация
	|	И НЕ СведенияОЗастрахованныхЛицахСЗВ_М.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьСведенияОЗастрахованныхЛицахСЗВ_М(Организация, СобытиеКалендаря)
	
	СЗВМ = ПолучитьСЗВМПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СЗВМ = Неопределено Тогда
		// Создаем СЗВ-М по организации
		докСЗВМ = Документы.СведенияОЗастрахованныхЛицахСЗВ_М.СоздатьДокумент();
		докСЗВМ.Организация = Организация;
		докСЗВМ.ОкончаниеОтчетногоПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия");
		докСЗВМ.ОтчетныйПериод = НачалоМесяца(докСЗВМ.ОкончаниеОтчетногоПериода);
		СЗВМ = докСЗВМ.ПолучитьСсылкуНового();
	Иначе
		докСЗВМ = СЗВМ.ПолучитьОбъект();
		докСЗВМ.ОкончаниеОтчетногоПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия");
		докСЗВМ.ОтчетныйПериод = НачалоМесяца(докСЗВМ.ОкончаниеОтчетногоПериода);
	КонецЕсли;
	
	докСЗВМ.Дата = ТекущаяДатаСеанса();
	докСЗВМ.ТипФормы = Перечисления.ТипыСведенийСЗВ_М.Исходная;
	докСЗВМ.ДокументПринятВПФР = Ложь;
	докСЗВМ.СформированАвтоматически = Истина;
	
	докСЗВМ.ИмяФайлаДляПФР = Документы.СведенияОЗастрахованныхЛицахСЗВ_М.ИмяФайла(докСЗВМ.Организация, докСЗВМ.Дата);
	ЗаполнитьЗначенияСвойств(докСЗВМ, СправкиПоНДФЛ.ДанныеПодписывающихЛиц(Организация, докСЗВМ.Дата));
	
	// Заполняем данными по сотрудникам
	ДанныеДляЗаполнения = Документы.СведенияОЗастрахованныхЛицахСЗВ_М.ДанныеДляЗаполнения(докСЗВМ);
	
	докСЗВМ.Сотрудники.Очистить();
	
	докСЗВМ.Сотрудники.Загрузить(ДанныеДляЗаполнения);
	
	докСЗВМ.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

// Процедура по событию календаря отчетности возвращает элемент справочника КомплектыОтчетностиПерсучета
// которые содержит результат формирования отчетности.
//
// В случае, если элемент справочника не найден, то возвращается неопределено
//
// Возвращает:
// элемент справочника КомплектыОтчетностиПерсучета
//
Функция ПолучитьКомплектОтчетностиПерсучетаПоСобытиюКалендаря(Организация, СобытиеКалендаря) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КомплектыОтчетностиПерсучета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
	|ГДЕ
	|	КомплектыОтчетностиПерсучета.ОтчетныйПериод = &ОтчетныйПериод
	|	И КомплектыОтчетностиПерсучета.Организация = &Организация
	|	И НЕ КомплектыОтчетностиПерсучета.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтчетныйПериод", НачалоКвартала(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	
КонецФункции


Процедура СформироватьКомплектОтчетностиВПФР(Организация, ДатаДокументаОбработкиСобытия, СобытиеКалендаря) Экспорт
	
	//////////////////////////////////////////////////////////////////////////
	// Создаем комплект отчетности для отправки
	// Получаем справку РСВ-1
	ПараметрыКомплекта =  СформироватьСправкуРСВ1(Организация,ДатаДокументаОбработкиСобытия, СобытиеКалендаря);
	
	Комплект = ПолучитьКомплектОтчетностиПерсучетаПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	РСВСсылка = РегламентированнаяОтчетностьУСН.ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	ЗаполнитьДанныеРСВ_1(ПараметрыКомплекта);
	
	Если Комплект = Неопределено Тогда
		Справочники.КомплектыОтчетностиПерсучета.НовыйКомплектСведений(Организация, ПараметрыКомплекта.ОтчетныйПериод, ПараметрыКомплекта.ДокументОтчетности, Истина);
	Иначе
		КомплектОбъект = Комплект.ПолучитьОбъект();
		Справочники.КомплектыОтчетностиПерсучета.ЗаполнитьКомплектСведений(КомплектОбъект, ПараметрыКомплекта.ДокументОтчетности, Ложь);
	КонецЕсли;
	
	// Определяем наличие сотрудников за отчетный период
	СтруктураОтчетностьВПФР = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|ИмеютсяСотрудникиВПФР",
		Организация,
		СобытиеКалендаря,
		ПараметрыКомплекта.ДатаДокументаОбработкиСобытия,
		Ложь);
	
	СтруктураОтчетностьВПФР.ИмеютсяСотрудникиВПФР = УчетСтраховыхВзносов.ОпределитьНаличиеСотрудниковПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	РегламентированнаяОтчетностьУСН.ОтразитьЗначенияПоказателейОтчетности(СтруктураОтчетностьВПФР);
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
		"");
	
КонецПроцедуры

Процедура ЗаполнитьДанныеРСВ_1(ДанныеКомплекта)
	
	ОкончаниеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ДанныеКомплекта.ОтчетныйПериод);
	
	
	Если ЗначениеЗаполнено(ДанныеКомплекта.ДокументОтчетности) Тогда
		
		ИнтерфейсыВзаимодействияБРО.ОбновитьДанныеРеглОтчета(
				"РегламентированныйОтчетРСВ1", 
				ДанныеКомплекта.Организация, 
				ДанныеКомплекта.ОтчетныйПериод,
				ОкончаниеОтчетногоПериода,
				ДанныеКомплекта.ДокументОтчетности);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеКомплекта.ДокументОтчетности) Тогда
		
		КорректирующаяФорма = Ложь;
		
		ДанныеКомплекта.ДокументОтчетности = ИнтерфейсыВзаимодействияБРО.СформироватьАвтоматическиРеглОтчет(
				"РегламентированныйОтчетРСВ1", 
				ДанныеКомплекта.Организация, 
				ДанныеКомплекта.ОтчетныйПериод,
				ОкончаниеОтчетногоПериода,
				КорректирующаяФорма);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕГЛАМЕНТИРОВАННЫМИ ОТЧЕТАМИ

// Процедура по событию календаря отчетности возвращает ссылку на документ РегламентированныйОтчет
// которые содержит результат формирования отчетности.
//
// В случае, если документ отчета не найден, то возвращается неопределено
//
// Возвращает:
//		ДокументСсылка.РегламентированныйОтчет, Неопределено
//
Функция ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация,СобытиеКалендаря) Экспорт
	
	СтруктураСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СобытиеКалендаря,"Задача,ДатаДокументаОбработкиСобытия");
	
	ИмяОтчета = РегламентированнаяОтчетностьУСНКлиентСервер.ПолучитьСоответствиеЗадачОтчетностиИменамОтчетов()[СтруктураСобытия.Задача];
	
	Если ИмяОтчета = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не найдено соответствие задачи календаря регламентированному отчету'");
	КонецЕсли;
	
	ИмяОтчетаПоСобытию = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентированныйОтчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Организация = &Организация
	|	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания
	|	И (НЕ РегламентированныйОтчет.ПометкаУдаления)");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИсточникОтчета", ИмяОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", СтруктураСобытия.ДатаДокументаОбработкиСобытия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Создает документ Расходный Кассовый ордер на Налоговую
//
Функция ЗарегистрироватьРасходыПоНалогамИВзносамНаличные(Организация,ДокументВзаиморасчетовСБюджетом, ДатаУплаты, ИскатьРанееСозданный = Истина, Сумма = Неопределено) Экспорт
	
	ДокументРасходов = Неопределено;
	ЭтоДокумент = ТипЗнч(ДокументВзаиморасчетовСБюджетом) = Тип("ДокументСсылка.НачислениеНалогов");
	
	Если ИскатьРанееСозданный Тогда
		Если ЭтоДокумент Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РасходДенежныхСредствИзКассы.Ссылка
			|ИЗ
			|	Документ.РасходИзКассы КАК РасходДенежныхСредствИзКассы
			|ГДЕ
			|	РасходДенежныхСредствИзКассы.ДокументОснование = &ДокументОснование
			|	И РасходДенежныхСредствИзКассы.Организация = &Организация
			|	И (НЕ РасходДенежныхСредствИзКассы.ПометкаУдаления)");
			
			Запрос.УстановитьПараметр("ДокументОснование", ДокументВзаиморасчетовСБюджетом);
			Запрос.УстановитьПараметр("Организация", Организация);
			
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РасходДенежныхСредствИзКассы.Ссылка
			|ИЗ
			|	Документ.РасходИзКассы КАК РасходДенежныхСредствИзКассы
			|ГДЕ
			|	РасходДенежныхСредствИзКассы.Организация = &Организация
			|	И РасходДенежныхСредствИзКассы.ВидНалога = &ВидНалога
			|	И РасходДенежныхСредствИзКассы.СрокУплаты = &СрокУплаты
			|	И (НЕ РасходДенежныхСредствИзКассы.ПометкаУдаления)");
			
			Запрос.УстановитьПараметр("ВидНалога", ДокументВзаиморасчетовСБюджетом.ВидНалога);
			Запрос.УстановитьПараметр("СрокУплаты", ДокументВзаиморасчетовСБюджетом.СрокУплаты);
			Запрос.УстановитьПараметр("Организация", Организация);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДокументРасходов = Выборка.Ссылка;
			ДокументРасходов = ДокументРасходов.ПолучитьОбъект();
			Если ДокументРасходов.ПометкаУдаления Тогда
				ДокументРасходов.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументРасходов = Неопределено Тогда
		ДокументРасходов = Документы.РасходИзКассы.СоздатьДокумент();
	КонецЕсли;
	
	
	ДокументРасходов.Дата = ДатаУплаты;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДокументРасходов.Дата);
	Запрос.УстановитьПараметр("КонстантаНациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("КонстантаВалютаУчета", Константы.ВалютаУчета.Получить());
	
	Если ЭтоДокумент Тогда
		Запрос.УстановитьПараметр("Ссылка", ДокументВзаиморасчетовСБюджетом);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Налоги) КАК ВидОперации,
		|	&Ссылка КАК ДокументОснование,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.Прочее) КАК Статья,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.КассаПоУмолчанию КАК Касса,
		|	&КонстантаНациональнаяВалюта КАК ВалютаДенежныхСредств,
		|	ТаблицаДокумента.Организация.СтавкаНДСПоУмолчанию КАК СтавкаНДС,
		|	1 КАК Курс,
		|	1 КАК Кратность,
		|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаДокумента * КурсыВалютУчета.Курс * 1 / (1 * ЕСТЬNULL(КурсыВалютУчета.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаДокумента,
		|	ТаблицаДокументаНалоги.ВидНалога КАК ВидНалога,
		|	ТаблицаДокументаНалоги.СрокУплаты КАК СрокУплаты,
		|	ТаблицаДокументаНалоги.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.НачислениеНалогов КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
		|			ТаблицаДокумента.Ссылка КАК Ссылка,
		|			ТаблицаДокумента.ВидНалога КАК ВидНалога,
		|			ТаблицаДокумента.СрокУплаты КАК СрокУплаты,
		|			ТаблицаДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности
		|		ИЗ
		|			Документ.НачислениеНалогов.Налоги КАК ТаблицаДокумента
		|		ГДЕ
		|			ТаблицаДокумента.Ссылка = &Ссылка) КАК ТаблицаДокументаНалоги
		|		ПО ТаблицаДокумента.Ссылка = ТаблицаДокументаНалоги.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &КонстантаВалютаУчета) КАК КурсыВалютУчета
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Налоги) КАК ВидОперации,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.Прочее) КАК Статья,
		|	Организации.Ссылка КАК Организация,
		|	Организации.КассаПоУмолчанию КАК Касса,
		|	&КонстантаНациональнаяВалюта КАК ВалютаДенежныхСредств,
		|	Организации.СтавкаНДСПоУмолчанию КАК СтавкаНДС,
		|	1 КАК Курс,
		|	1 КАК Кратность,
		|	ВЫРАЗИТЬ(&СуммаДокумента * КурсыВалютУчета.Курс * 1 / (1 * ЕСТЬNULL(КурсыВалютУчета.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаДокумента,
		|	&ВидНалога КАК ВидНалога,
		|	&СрокУплаты КАК СрокУплаты
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &КонстантаВалютаУчета) КАК КурсыВалютУчета
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Организации.Ссылка = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СуммаДокумента", ДокументВзаиморасчетовСБюджетом.СуммаДокумента);
		Запрос.УстановитьПараметр("ВидНалога", ДокументВзаиморасчетовСБюджетом.ВидНалога);
		Запрос.УстановитьПараметр("СрокУплаты", ДокументВзаиморасчетовСБюджетом.СрокУплаты);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДокументРасходов, Выборка);
		Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
			ДокументРасходов.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
		КонецЕсли;
	КонецЕсли;
	
	Если Сумма <> Неопределено Тогда
		ДокументРасходов.СуммаДокумента = Сумма;
	КонецЕсли;
	
	ДокументРасходов.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация, , ДокументРасходов.Дата);
	ДокументРасходов.РасшифровкаПлатежа.Очистить();
	ДокументРасходов.УчитыватьВНУ = Истина;
	
	
	ДокументРасходов.Записать(РежимЗаписиДокумента.Проведение);
	
	ИсторияРаботыПользователя.Добавить(ДокументРасходов.Ссылка);
	
	Возврат ДокументРасходов.Ссылка;
	
КонецФункции

// Функция создает платежное поручение исходящие на основании
// данных, где 
// ДанныеДокумента - Структура со следующими параметрами:
// - Организация;
// - ВидНалога;
// - Период
// - СуммаДокумента;
// - СрокУплаты;
// - КодОКТМОДокумента;
// - КодИФНСДокумента;
Функция СоздатьБезналичноеСписание(ДанныеДокумента, БанкСчет) Экспорт
	
	ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("КонстантаНациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("КонстантаВалютаУчета", Константы.ВалютаУчета.Получить());
	
	Запрос.УстановитьПараметр("Организация", ДанныеДокумента.Организация);
	Запрос.УстановитьПараметр("ВидНалога", ДанныеДокумента.ВидНалога);
	Запрос.УстановитьПараметр("СуммаДокумента", ДанныеДокумента.СуммаДокумента);
	Запрос.УстановитьПараметр("СрокУплаты", ДанныеДокумента.СрокУплаты);
	Запрос.УстановитьПараметр("КодОКТМОДокумента", ДанныеДокумента.КодОКТМОДокумента);
	Запрос.УстановитьПараметр("КодИФНСДокумента", ДанныеДокумента.КодИФНСДокумента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога) КАК ВидОперации,
	|	Организации.Ссылка КАК Организация,
	|	Организации.КодПоОКАТО,
	|	Организации.КодПоОКТМО,
	|	Организации.КодНалоговогоОрганаПолучателя КАК КодНалоговогоОрганаПолучателя,
	|	Организации.КодОрганаПФР КАК КодОрганаПФР,
	|	Организации.КодОрганаФСС КАК КодОрганаФСС,
	|	Организации.РегистрационныйНомерПФР_ИП,
	|	Организации.РегистрационныйНомерПФР,
	|	Организации.РегистрационныйНомерФСС,
	|	Организации.ИННПлательщика,
	|	Организации.НаименованиеПлательщикаПриПеречисленииНалогов,
	|	ВЫБОР
	|		КОГДА Организации.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = &КонстантаНациональнаяВалюта
	|			ТОГДА ВЫБОР
	|					КОГДА Организации.БанковскийСчетПоУмолчанию.ВариантУказанияКПП = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияКПП.ВоВсехПлатежныхПоручениях)
	|						ТОГДА Организации.КПП
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВложенныйЗапрос.БанковскийСчет.ВариантУказанияКПП = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияКПП.ВоВсехПлатежныхПоручениях)
	|					ТОГДА Организации.КПП
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК КПППлательщика,
	|	ВЫБОР
	|		КОГДА Организации.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = &КонстантаНациональнаяВалюта
	|			ТОГДА Организации.БанковскийСчетПоУмолчанию
	|		ИНАЧЕ ВложенныйЗапрос.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|	&КонстантаНациональнаяВалюта КАК ВалютаДокумента,
	|	Организации.СтавкаНДСПоУмолчанию КАК СтавкаНДС,
	|	1 КАК Курс,
	|	1 КАК Кратность,
	|	ВЫРАЗИТЬ(&СуммаДокумента * КурсыВалютУчета.Курс * 1 / (1 * ЕСТЬNULL(КурсыВалютУчета.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаДокумента,
	|	&ВидНалога КАК ВидНалога,
	|	&КодОКТМОДокумента КАК КодОКТМОДокумента,
	|	&КодИФНСДокумента КАК КодИФНСДокумента,
	|	&СрокУплаты
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Организации.Ссылка КАК Ссылка,
	|		Организации.КодПоОКАТО КАК КодПоОКАТО,
	|		Организации.КодПоОКТМО КАК КодПоОКТМО,
	|		Организации.КодНалоговогоОрганаПолучателя КАК КодНалоговогоОрганаПолучателя,
	|		Организации.КодОрганаПФР КАК КодОрганаПФР,
	|		Организации.КодОрганаФСС КАК КодОрганаФСС,
	|		Организации.РегистрационныйНомерПФР_ИП КАК РегистрационныйНомерПФР_ИП,
	|		Организации.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|		Организации.РегистрационныйНомерФСС КАК РегистрационныйНомерФСС,
	|		Организации.ИНН КАК ИННПлательщика,
	|		Организации.КПП КАК КПП,
	|		Организации.НаименованиеПлательщикаПриПеречисленииНалогов КАК НаименованиеПлательщикаПриПеречисленииНалогов,
	|		Организации.БанковскийСчетПоУмолчанию КАК БанковскийСчетПоУмолчанию,
	|		Организации.СтавкаНДСПоУмолчанию КАК СтавкаНДСПоУмолчанию
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.Ссылка = &Организация) КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &КонстантаВалютаУчета) КАК КурсыВалютУчета
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|			БанковскиеСчета.Владелец КАК Владелец,
	|			БанковскиеСчета.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|		ИЗ
	|			Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ГДЕ
	|			БанковскиеСчета.Владелец = &Организация
	|			И БанковскиеСчета.ВалютаДенежныхСредств = &КонстантаНациональнаяВалюта
	|			И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ) КАК ВложенныйЗапрос
	|		ПО Организации.Ссылка = ВложенныйЗапрос.Владелец";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
		
		Если Выборка.СрокУплаты <= ТекущаяДатаСеанса() Тогда
			ДокументОбъект.ПоказательОснования = "ЗД";
		КонецЕсли;
		
		ДокументОбъект.КодБК = РегламентированнаяОтчетностьУСН.ПолучитьКБКУплаты(ДокументОбъект.Организация, ДокументОбъект.Дата, Выборка.ВидНалога);
		
		ДокументОбъект.ПоказательПериода = РегламентированнаяОтчетностьУСН.ПолучитьПоказательПериода(, Выборка.ВидНалога, ДанныеДокумента.Период);
		
		Если Выборка.ВидНалога = Справочники.ВидыНалогов.ЕНВД Тогда
			ДокументОбъект.КодОКАТО = Выборка.КодОКТМОДокумента;
		Иначе
			Если Год(ДокументОбъект.Дата) > 2013 Тогда
				ДокументОбъект.КодОКАТО = Выборка.КодПоОКТМО;
			Иначе
				ДокументОбъект.КодОКАТО = Выборка.КодПоОКАТО;
			КонецЕсли;
		КонецЕсли;
		
		ВидГосОргана = Перечисления.ВидыГосударственныхОрганов.ПустаяСсылка();
		КодОргана = "";
		ДокументОбъект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		
		Если Выборка.ВидНалога = Справочники.ВидыНалогов.АвансовыйПлатежПриУСН
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ЕдиныйНалогПриУСН
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.НДФЛСотрудники Тогда
			
			ДокументОбъект.ПоказательТипа = "0";
			ДокументОбъект.СтатусСоставителя =   "01";
			
			ДокументОбъект.ОчередностьПлатежа = 5;
			ВидГосОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
			КодОргана = Выборка.КодНалоговогоОрганаПолучателя;
			
		ИначеЕсли Выборка.ВидНалога = Справочники.ВидыНалогов.ЕНВД Тогда
			
			ДокументОбъект.ПоказательТипа = "0";
			ДокументОбъект.СтатусСоставителя =   "01";
			
			ДокументОбъект.ОчередностьПлатежа = 5;
			ВидГосОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
			КодОргана = Выборка.КодИФНСДокумента;
			
		ИначеЕсли Выборка.ВидНалога = Справочники.ВидыНалогов.ФССТравматизмСотрудники Тогда
			ДокументОбъект.ПоказательТипа = "0";
			ДокументОбъект.СтатусСоставителя =   "08";
			ДокументОбъект.ПоказательОснования = "0";
			ДокументОбъект.ПоказательПериода =   "0";
			ДокументОбъект.ПоказательНомера =    "0";
			
			ДокументОбъект.ОчередностьПлатежа = 5;
			ВидГосОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС;
			КодОргана = Выборка.КодОрганаФСС;
			ДокументОбъект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
			
		ИначеЕсли Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительная
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРСвыше300тр
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховая
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ТФОМС
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ФФОМС
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ФОМССотрудники
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ФСССотрудники Тогда
			
			Если Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники
				ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники
				ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ФОМССотрудники 
				ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ФСССотрудники Тогда
				ДокументОбъект.СтатусСоставителя =   "14";
			Иначе
				ДокументОбъект.СтатусСоставителя =   "09";
			КонецЕсли;
			
			ДокументОбъект.ПоказательТипа = "0";
			
			ДокументОбъект.ОчередностьПлатежа = 5;
			ВидГосОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
			КодОргана = Выборка.КодНалоговогоОрганаПолучателя;
			
		КонецЕсли;
		ДокументОбъект.ИдентификаторПлатежа = "0";
		ДокументОбъект.ПоказательТипа = "0";
		
		Если Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительная
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховая
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРСвыше300тр
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ТФОМС
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ФФОМС Тогда
			Назначение = РегламентированнаяОтчетностьУСНКлиентСервер.ПолучитьТекстНазначенияПлатежаНалогаПоДате(
				ДанныеДокумента.Период,
				Выборка.ВидНалога,
				Выборка.РегистрационныйНомерПФР_ИП);
		Иначе
			Назначение = РегламентированнаяОтчетностьУСНКлиентСервер.ПолучитьТекстНазначенияПлатежаНалогаПоДате(
				ДанныеДокумента.Период,
				Выборка.ВидНалога,
				Выборка.РегистрационныйНомерПФР,
				Выборка.РегистрационныйНомерФСС);
		КонецЕсли;
		ДокументОбъект.НазначениеПлатежа = Назначение;
		ДокументОбъект.ТекстПлательщика = Выборка.НаименованиеПлательщикаПриПеречисленииНалогов;
		
		Если ЗначениеЗаполнено(ВидГосОргана) Тогда
			ГосОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(ВидГосОргана, КодОргана);
			ДокументОбъект.Контрагент = ГосОрган.Ссылка;
			ДокументОбъект.ИННПолучателя = ГосОрган.ИНН;
			ДокументОбъект.КПППолучателя = ГосОрган.КПП;
			ДокументОбъект.ТекстПолучателя = ГосОрган.ПлатежныеРеквизиты.ПолучательПлатежа;
			ДокументОбъект.СчетКонтрагента = ГосОрган.ПлатежныеРеквизиты.БанковскийСчет;
		КонецЕсли;
		
		
	КонецЕсли;
	
	ДокументОбъект.БанковскийСчет = БанкСчет;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Процедура УстановитьДатуНачалаФормированияЗаписейКУДиР(ДатаГраницы) Экспорт
	
	Набор = РегистрыСведений.ДатыИзмененныхДокументов.СоздатьНаборЗаписей();
	НоваяСтрока = Набор.Добавить();
	НоваяСтрока.ДатаДокумента = ДатаГраницы;
	Набор.Записать(Истина);
	
КонецПроцедуры

// Процедура формирует записи по расходам на услуги
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодФормирования - Дата - дата окончания квартала, за который нужно провести формирования
//		Результат - Структура - структура результата
//
Процедура ВыполнитьФормированиеПоРасходамНаТоварыУслуги(Организация, ПериодФормирования, Результат, МенеджерВТ)
	
	ДокументФормирования = Результат.ДокументФормирования;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходИзКассы.Ссылка КАК ПервичныйДокумент,
	|	РасходИзКассы.НалогообложениеНДС КАК НалогообложениеНДС,
	|	РасходИзКассы.Контрагент КАК Контрагент,
	|	РасходИзКассы.СуммаДокумента КАК РасходБаза,
	|	РасходИзКассы.СуммаДокумента КАК РасходВсего,
	|	РасходИзКассы.ВидОперации КАК ВидОперации,
	|	РасходИзКассы.Дата КАК ДатаПервичногоДокумента,
	|	РасходИзКассы.Номер КАК НомерПервичногоДокумента,
	|	РасходИзКассы.Дата КАК Период,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	РасходИзКассы.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТРасходИзКассы
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходИзКассы.ПометкаУдаления
	|	И РасходИзКассы.Проведен
	|	И РасходИзКассы.Организация = &Организация
	|	И РасходИзКассы.УчитыватьВНУ
	|	И РасходИзКассы.ВидОперации В(&МассивИспользуемыхВидовРасходовИзКассы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходИзКассы.ПервичныйДокумент,
	|	СУММА(РасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ВТРасходИзКассыНДС
	|ИЗ
	|	ВТРасходИзКассы КАК РасходИзКассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходИзКассы.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ПО (РасходИзКассы.НалогообложениеНДС = &ОблагаетсяНДС)
	|			И РасходИзКассы.ПервичныйДокумент = РасшифровкаПлатежа.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходИзКассы.ПервичныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходСоСчета.Ссылка КАК ПервичныйДокумент,
	|	РасходСоСчета.НалогообложениеНДС КАК НалогообложениеНДС,
	|	РасходСоСчета.Контрагент КАК Контрагент,
	|	РасходСоСчета.СуммаДокумента КАК РасходБаза,
	|	РасходСоСчета.СуммаДокумента КАК РасходВсего,
	|	РасходСоСчета.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасходСоСчета.Дата
	|		ИНАЧЕ РасходСоСчета.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаПервичногоДокумента,
	|	РасходСоСчета.Номер КАК НомерПервичногоДокумента,
	|	РасходСоСчета.Дата КАК Период,
	|	РасходСоСчета.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	РасходСоСчета.НазначениеПлатежа КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходСоСчета.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	РасходСоСчета.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТРасходСоСчета
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|ГДЕ
	|	РасходСоСчета.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходСоСчета.ПометкаУдаления
	|	И РасходСоСчета.Организация = &Организация
	|	И РасходСоСчета.УчитыватьВНУ
	|	И РасходСоСчета.ВидОперации В(&МассивИспользуемыхВидовРасходовСоСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходСоСчета.ПервичныйДокумент,
	|	СУММА(РасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ВТРасходСоСчетаНДС
	|ИЗ
	|	ВТРасходСоСчета КАК РасходСоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходСоСчета.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ПО (РасходСоСчета.НалогообложениеНДС = &ОблагаетсяНДС)
	|			И РасходСоСчета.ПервичныйДокумент = РасшифровкаПлатежа.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходСоСчета.ПервичныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка КАК ПервичныйДокумент,
	|	ПоступлениеНаСчет.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ПоступлениеНаСчет.Контрагент КАК Контрагент,
	|	-ПоступлениеНаСчет.СуммаДокумента КАК РасходБаза,
	|	-ПоступлениеНаСчет.СуммаДокумента КАК РасходВсего,
	|	ПоступлениеНаСчет.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПоступлениеНаСчет.Дата
	|		ИНАЧЕ ПоступлениеНаСчет.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаПервичногоДокумента,
	|	ПоступлениеНаСчет.Номер КАК НомерПервичногоДокумента,
	|	ПоступлениеНаСчет.Дата КАК Период,
	|	ПоступлениеНаСчет.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПоступлениеНаСчет.НазначениеПлатежа КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеНаСчет.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	ПоступлениеНаСчет.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТПоступлениеНаСчет
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|ГДЕ
	|	ПоступлениеНаСчет.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеНаСчет.ПометкаУдаления
	|	И ПоступлениеНаСчет.Организация = &Организация
	|	И ПоступлениеНаСчет.УчитыватьВНУ
	|	И ПоступлениеНаСчет.ВидОперации В(&МассивИспользуемыхВидовПоступленийНаСчет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.ПервичныйДокумент,
	|	-СУММА(РасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ВТПоступлениеНаСчетНДС
	|ИЗ
	|	ВТПоступлениеНаСчет КАК ПоступлениеНаСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаСчет.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ПО (ПоступлениеНаСчет.НалогообложениеНДС = &ОблагаетсяНДС)
	|			И ПоступлениеНаСчет.ПервичныйДокумент = РасшифровкаПлатежа.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаСчет.ПервичныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.Ссылка КАК ПервичныйДокумент,
	|	ПоступлениеВКассу.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ПоступлениеВКассу.Контрагент КАК Контрагент,
	|	-ПоступлениеВКассу.СуммаДокумента КАК РасходБаза,
	|	-ПоступлениеВКассу.СуммаДокумента КАК РасходВсего,
	|	ПоступлениеВКассу.ВидОперации КАК ВидОперации,
	|	ПоступлениеВКассу.Дата КАК ДатаПервичногоДокумента,
	|	ПоступлениеВКассу.Номер КАК НомерПервичногоДокумента,
	|	ПоступлениеВКассу.Дата КАК Период,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеВКассу.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	ПоступлениеВКассу.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТПоступлениеВКассу
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|ГДЕ
	|	ПоступлениеВКассу.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеВКассу.ПометкаУдаления
	|	И ПоступлениеВКассу.Проведен
	|	И ПоступлениеВКассу.Организация = &Организация
	|	И ПоступлениеВКассу.УчитыватьВНУ
	|	И ПоступлениеВКассу.ВидОперации В(&МассивИспользуемыхВидовПоступленийВКассу)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.ПервичныйДокумент,
	|	-СУММА(РасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ВТПоступлениеВКассуНДС
	|ИЗ
	|	ВТПоступлениеВКассу КАК ПоступлениеВКассу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеВКассу.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ПО (ПоступлениеВКассу.НалогообложениеНДС = &ОблагаетсяНДС)
	|			И ПоступлениеВКассу.ПервичныйДокумент = РасшифровкаПлатежа.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеВКассу.ПервичныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Ссылка КАК ПервичныйДокумент,
	|	АвансовыйОтчет.НалогообложениеНДС КАК НалогообложениеНДС,
	|	"""" КАК Контрагент,
	|	АвансовыйОтчет.СуммаДокумента КАК РасходБаза,
	|	АвансовыйОтчет.СуммаДокумента КАК РасходВсего,
	|	"""" КАК ВидОперации,
	|	АвансовыйОтчет.Дата КАК ДатаПервичногоДокумента,
	|	АвансовыйОтчет.Номер КАК Период,
	|	АвансовыйОтчет.Дата,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(АвансовыйОтчет.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	АвансовыйОтчет.ВалютаДокумента КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТАвансовыйОтчет
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ АвансовыйОтчет.ПометкаУдаления
	|	И АвансовыйОтчет.Организация = &Организация
	|	И АвансовыйОтчет.УчитыватьВНУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчет.ПервичныйДокумент КАК ПервичныйДокумент,
	|	Запасы.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТАвансовыйОтчетНДССтроки
	|ИЗ
	|	ВТАвансовыйОтчет КАК АвансовыйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.Запасы КАК Запасы
	|		ПО (АвансовыйОтчет.НалогообложениеНДС = &ОблагаетсяНДС)
	|			И АвансовыйОтчет.ПервичныйДокумент = Запасы.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.ПервичныйДокумент,
	|	Расходы.СуммаНДС
	|ИЗ
	|	ВТАвансовыйОтчет КАК АвансовыйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.Расходы КАК Расходы
	|		ПО (АвансовыйОтчет.НалогообложениеНДС = &ОблагаетсяНДС)
	|			И АвансовыйОтчет.ПервичныйДокумент = Расходы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчет.ПервичныйДокумент,
	|	СУММА(АвансовыйОтчет.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ВТАвансовыйОтчетНДС
	|ИЗ
	|	ВТАвансовыйОтчетНДССтроки КАК АвансовыйОтчет
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.ПервичныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасходИзКассы.ПервичныйДокумент КАК ПервичныйДокумент,
	|	ВТРасходИзКассы.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ВТРасходИзКассы.Контрагент КАК Контрагент,
	|	ВТРасходИзКассы.РасходБаза - ЕСТЬNULL(ВТРасходИзКассыНДС.СуммаНДС, 0) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК РасходБаза,
	|	ВТРасходИзКассы.РасходВсего - ЕСТЬNULL(ВТРасходИзКассыНДС.СуммаНДС, 0) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК РасходВсего,
	|	ЕСТЬNULL(ВТРасходИзКассыНДС.СуммаНДС, 0) КАК СуммаНДС,
	|	ВТРасходИзКассы.ВидОперации КАК ВидОперации,
	|	ВТРасходИзКассы.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ВТРасходИзКассы.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ВТРасходИзКассы.Период КАК Период,
	|	ВТРасходИзКассы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТРасходИзКассы.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ВТРасходИзКассы.ДатаНачалоДня КАК ДатаНачалоДня,
	|	ВТРасходИзКассы.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ИЗ
	|	ВТРасходИзКассы КАК ВТРасходИзКассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасходИзКассыНДС КАК ВТРасходИзКассыНДС
	|		ПО (ВТРасходИзКассыНДС.ПервичныйДокумент = ВТРасходИзКассы.ПервичныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
	|		ПО ВТРасходИзКассы.ДатаНачалоДня = КурсыВалютПоДням.Дата
	|			И ВТРасходИзКассы.ВалютаДенежныхСредств = КурсыВалютПоДням.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТРасходСоСчета.ПервичныйДокумент,
	|	ВТРасходСоСчета.НалогообложениеНДС,
	|	ВТРасходСоСчета.Контрагент,
	|	(ВТРасходСоСчета.РасходБаза - ЕСТЬNULL(ВТРасходСоСчетаНДС.СуммаНДС, 0)) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1),
	|	(ВТРасходСоСчета.РасходВсего - ЕСТЬNULL(ВТРасходСоСчетаНДС.СуммаНДС, 0)) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1),
	|	ЕСТЬNULL(ВТРасходСоСчетаНДС.СуммаНДС, 0) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1),
	|	ВТРасходСоСчета.ВидОперации,
	|	ВТРасходСоСчета.ДатаПервичногоДокумента,
	|	ВТРасходСоСчета.НомерПервичногоДокумента,
	|	ВТРасходСоСчета.Период,
	|	ВТРасходСоСчета.НомерВходящегоДокумента,
	|	ВТРасходСоСчета.НазначениеПлатежа,
	|	ВТРасходСоСчета.ДатаНачалоДня,
	|	ВТРасходСоСчета.ВалютаДенежныхСредств
	|ИЗ
	|	ВТРасходСоСчета КАК ВТРасходСоСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасходСоСчетаНДС КАК ВТРасходСоСчетаНДС
	|		ПО (ВТРасходСоСчетаНДС.ПервичныйДокумент = ВТРасходСоСчета.ПервичныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
	|		ПО ВТРасходСоСчета.ДатаНачалоДня = КурсыВалютПоДням.Дата
	|			И ВТРасходСоСчета.ВалютаДенежныхСредств = КурсыВалютПоДням.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПоступлениеНаСчет.ПервичныйДокумент,
	|	ВТПоступлениеНаСчет.НалогообложениеНДС,
	|	ВТПоступлениеНаСчет.Контрагент,
	|	(ВТПоступлениеНаСчет.РасходБаза - ЕСТЬNULL(ВТПоступлениеНаСчетНДС.СуммаНДС, 0)) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1),
	|	(ВТПоступлениеНаСчет.РасходВсего - ЕСТЬNULL(ВТПоступлениеНаСчетНДС.СуммаНДС, 0)) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1),
	|	ЕСТЬNULL(ВТПоступлениеНаСчетНДС.СуммаНДС, 0) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1),
	|	ВТПоступлениеНаСчет.ВидОперации,
	|	ВТПоступлениеНаСчет.ДатаПервичногоДокумента,
	|	ВТПоступлениеНаСчет.НомерПервичногоДокумента,
	|	ВТПоступлениеНаСчет.Период,
	|	ВТПоступлениеНаСчет.НомерВходящегоДокумента,
	|	ВТПоступлениеНаСчет.НазначениеПлатежа,
	|	ВТПоступлениеНаСчет.ДатаНачалоДня,
	|	ВТПоступлениеНаСчет.ВалютаДенежныхСредств
	|ИЗ
	|	ВТПоступлениеНаСчет КАК ВТПоступлениеНаСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоступлениеНаСчетНДС КАК ВТПоступлениеНаСчетНДС
	|		ПО (ВТПоступлениеНаСчетНДС.ПервичныйДокумент = ВТПоступлениеНаСчет.ПервичныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
	|		ПО ВТПоступлениеНаСчет.ДатаНачалоДня = КурсыВалютПоДням.Дата
	|			И ВТПоступлениеНаСчет.ВалютаДенежныхСредств = КурсыВалютПоДням.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПоступлениеВКассу.ПервичныйДокумент,
	|	ВТПоступлениеВКассу.НалогообложениеНДС,
	|	ВТПоступлениеВКассу.Контрагент,
	|	(ВТПоступлениеВКассу.РасходБаза - ЕСТЬNULL(ВТПоступлениеВКассуНДС.СуммаНДС, 0)) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1),
	|	(ВТПоступлениеВКассу.РасходВсего - ЕСТЬNULL(ВТПоступлениеВКассуНДС.СуммаНДС, 0)) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1),
	|	ЕСТЬNULL(ВТПоступлениеВКассуНДС.СуммаНДС, 0) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1),
	|	ВТПоступлениеВКассу.ВидОперации,
	|	ВТПоступлениеВКассу.ДатаПервичногоДокумента,
	|	ВТПоступлениеВКассу.НомерПервичногоДокумента,
	|	ВТПоступлениеВКассу.Период,
	|	ВТПоступлениеВКассу.НомерВходящегоДокумента,
	|	ВТПоступлениеВКассу.НазначениеПлатежа,
	|	ВТПоступлениеВКассу.ДатаНачалоДня,
	|	ВТПоступлениеВКассу.ВалютаДенежныхСредств
	|ИЗ
	|	ВТПоступлениеВКассу КАК ВТПоступлениеВКассу
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоступлениеВКассуНДС КАК ВТПоступлениеВКассуНДС
	|		ПО (ВТПоступлениеВКассуНДС.ПервичныйДокумент = ВТПоступлениеВКассу.ПервичныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
	|		ПО ВТПоступлениеВКассу.ДатаНачалоДня = КурсыВалютПоДням.Дата
	|			И ВТПоступлениеВКассу.ВалютаДенежныхСредств = КурсыВалютПоДням.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТАвансовыйОтчет.ПервичныйДокумент,
	|	ВТАвансовыйОтчет.НалогообложениеНДС,
	|	ВТАвансовыйОтчет.Контрагент,
	|	(ВТАвансовыйОтчет.РасходБаза - ЕСТЬNULL(ВТАвансовыйОтчетНДС.СуммаНДС, 0)) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1),
	|	(ВТАвансовыйОтчет.РасходВсего - ЕСТЬNULL(ВТАвансовыйОтчетНДС.СуммаНДС, 0)) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1),
	|	ЕСТЬNULL(ВТАвансовыйОтчетНДС.СуммаНДС, 0) * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1),
	|	ВТАвансовыйОтчет.ВидОперации,
	|	ВТАвансовыйОтчет.ДатаПервичногоДокумента,
	|	ВТАвансовыйОтчет.Период,
	|	ВТАвансовыйОтчет.Дата,
	|	ВТАвансовыйОтчет.НомерВходящегоДокумента,
	|	ВТАвансовыйОтчет.НазначениеПлатежа,
	|	ВТАвансовыйОтчет.ДатаНачалоДня,
	|	ВТАвансовыйОтчет.ВалютаДенежныхСредств
	|ИЗ
	|	ВТАвансовыйОтчет КАК ВТАвансовыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАвансовыйОтчетНДС КАК ВТАвансовыйОтчетНДС
	|		ПО (ВТАвансовыйОтчетНДС.ПервичныйДокумент = ВТАвансовыйОтчет.ПервичныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
	|		ПО ВТАвансовыйОтчет.ДатаНачалоДня = КурсыВалютПоДням.Дата
	|			И ВТАвансовыйОтчет.ВалютаДенежныхСредств = КурсыВалютПоДням.Валюта";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ПериодФормирования));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодФормирования));
	Запрос.УстановитьПараметр("ОблагаетсяНДС", Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивИспользуемыхВидовРасходовИзКассы = Новый Массив;
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.Поставщику);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовИзКассы", МассивИспользуемыхВидовРасходовИзКассы);
	
	МассивИспользуемыхВидовРасходовСоСчета = Новый Массив;
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Поставщику);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовСоСчета", МассивИспользуемыхВидовРасходовСоСчета);
	
	МассивИспользуемыхВидовПоступленийНаСчет = Новый Массив;
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийНаСчет", МассивИспользуемыхВидовПоступленийНаСчет);
	
	МассивИспользуемыхВидовПоступленийВКассу = Новый Массив;
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийВКассу", МассивИспользуемыхВидовПоступленийВКассу);
	
	ВыборкаЗаписейУСН = Запрос.ВыполнитьПакет()[11].Выбрать();
	
	Если ДокументФормирования = Неопределено И ВыборкаЗаписейУСН.Количество() > 0 Тогда
		ДокументФормирования = Документы.ЗаписиУСН.СоздатьДокумент();
		ДокументФормирования.Дата = ПериодФормирования;
		ДокументФормирования.Организация = Организация;
		ДокументФормирования.ВидЗаписей = Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаУслуги;
	КонецЕсли;
	
	Если ДокументФормирования <> Неопределено Тогда
		
		ДокументФормирования.ЗаписиКУДиР.Очистить();
		
		Пока ВыборкаЗаписейУСН.Следующий() Цикл
			НоваяСтрокаУСН = ДокументФормирования.ЗаписиКУДиР.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУСН, ВыборкаЗаписейУСН);
			Если НЕ ПустаяСтрока(ВыборкаЗаписейУСН.НомерВходящегоДокумента) Тогда
				НоваяСтрокаУСН.НомерПервичногоДокумента = ВыборкаЗаписейУСН.НомерВходящегоДокумента;
			КонецЕсли;
			НоваяСтрокаУСН.НомерПервичногоДокумента =  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НоваяСтрокаУСН.НомерПервичногоДокумента, Истина, Истина);
			
			Если ТипЗнч(ВыборкаЗаписейУСН.ПервичныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Расходы на оплату товаров, услуг из подотчетных денежных средств'"), СокрЛП(ВыборкаЗаписейУСН.Контрагент));
			Иначе
				Если ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Расход наличных денежных средств на оплату поставщику ""%1""'"), СокрЛП(ВыборкаЗаписейУСН.Контрагент));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Расход безналичных денежных средств на оплату поставщику ""%1""'"), СокрЛП(ВыборкаЗаписейУСН.Контрагент));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Возврат наличных денежных средств от поставщика ""%1""'"), СокрЛП(ВыборкаЗаписейУСН.Контрагент));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Возврат безналичных денежных средств от поставщика ""%1""'"), СокрЛП(ВыборкаЗаписейУСН.Контрагент));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаЗаписейУСН.НазначениеПлатежа) Тогда
				НоваяСтрокаУСН.Содержание = НоваяСтрокаУСН.Содержание + ", " + Символы.ПС + СокрЛП(ВыборкаЗаписейУСН.НазначениеПлатежа);
			КонецЕсли;
			
			Если ВыборкаЗаписейУСН.СуммаНДС > 0 Тогда
				НоваяСтрокаУСННДС = ДокументФормирования.ЗаписиКУДиР.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУСННДС, НоваяСтрокаУСН);
				НоваяСтрокаУСННДС.РасходБаза = ВыборкаЗаписейУСН.СуммаНДС;
				НоваяСтрокаУСННДС.РасходВсего = ВыборкаЗаписейУСН.СуммаНДС;
				НоваяСтрокаУСННДС.Содержание = НоваяСтрокаУСННДС.Содержание+ НСтр("ru = ' (НДС)'");
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.ДополнительнаяИнформация = НСтр("ru='Сформировано записей: '") + Строка(ДокументФормирования.ЗаписиКУДиР.Количество());
		ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
		Результат.ДокументФормирования = ДокументФормирования.Ссылка;
	КонецЕсли;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТРасходИзКассы; УНИЧТОЖИТЬ ВТРасходИзКассыНДС;
	|УНИЧТОЖИТЬ ВТРасходСоСчета; УНИЧТОЖИТЬ ВТРасходСоСчетаНДС;
	|УНИЧТОЖИТЬ ВТПоступлениеНаСчет; УНИЧТОЖИТЬ ВТПоступлениеНаСчетНДС;
	|УНИЧТОЖИТЬ ВТПоступлениеВКассу; УНИЧТОЖИТЬ ВТПоступлениеВКассуНДС;
	|УНИЧТОЖИТЬ ВТАвансовыйОтчет; УНИЧТОЖИТЬ ВТАвансовыйОтчетНДС; УНИЧТОЖИТЬ ВТАвансовыйОтчетНДССтроки;";
	Запрос.Выполнить();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТРАЖЕНИЯ РЕЗУЛЬТАТОВ РАСЧЕТОВ НАЛОГОВ

// Процедура производит запись данных в регистр ЗначенияПоказателейОтчетности
Процедура ОтразитьЗначенияПоказателейОтчетности(СтруктураПоказателей) Экспорт
	
	НачатьТранзакцию();
	
	ЗаписьРегистра = РегистрыСведений.ЗначенияПоказателейОтчетности.СоздатьМенеджерЗаписи();
	
	МассивИменПоказателей = Новый Массив;
	
	Для Каждого Показатель Из СтруктураПоказателей Цикл
		МассивИменПоказателей.Добавить(Показатель.Ключ);
	КонецЦикла;
	
	// ссылки показателей 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиОтчетности.Ссылка Как ПоказательОтчетности,
	|	ПоказателиОтчетности.Код Как ПоказательОтчетностиСтрока
	|ИЗ
	|	ПланВидовХарактеристик.ПоказателиОтчетности КАК ПоказателиОтчетности
	|ГДЕ
	|	ПоказателиОтчетности.Код В(&Наименования)");
	Запрос.УстановитьПараметр("Наименования", МассивИменПоказателей);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		мзЗначенияПоказателей = РегистрыСведений.ЗначенияПоказателейОтчетности.СоздатьМенеджерЗаписи();
		мзЗначенияПоказателей.Организация = СтруктураПоказателей.Организация;
		мзЗначенияПоказателей.ПериодОтчетности = СтруктураПоказателей.ПериодОтчетности;
		мзЗначенияПоказателей.ПоказательОтчетности = Выборка.ПоказательОтчетности;
		
		Если Лев(Выборка.ПоказательОтчетностиСтрока, 2)="хз" Тогда
			мзЗначенияПоказателей.ПроизвольноеЗначениеПоказателя = СтруктураПоказателей[Выборка.ПоказательОтчетностиСтрока];
		Иначе
			мзЗначенияПоказателей.ЗначениеПоказателя = СтруктураПоказателей[Выборка.ПоказательОтчетностиСтрока];
		КонецЕсли;
		
		мзЗначенияПоказателей.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С СОБЫТИЯМИ

Функция ПолучитьТекущуюОрганизациюДляЦелейЗадачОтчетности() Экспорт
	Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация =УправлениеНебольшойФирмойСервер.ПолучитьПредопределеннуюОрганизацию();
	КонецЕсли;
	Возврат Организация; 
КонецФункции

Функция ПолучитьТекущиеДанныеСобытияПоЗадачеКалендаря(ЗадачаКалендаря, Организация = Неопределено) Экспорт
	
	СтруктураДанныхСобытия = Новый Структура("СобытиеКалендаря, СостояниеСобытия, Организация, ЗадачаПрименима");
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ПолучитьТекущуюОрганизациюДляЦелейЗадачОтчетности();
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Возврат СтруктураДанныхСобытия;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанныхСобытия.Организация = Организация;
	
	ПрименяетсяДляООО = Ложь;
	ПрименяетсяДляИП = Ложь;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = 
		Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		ПрименяетсяДляООО = Истина;
	Иначе
		ПрименяетсяДляИП = Истина;
	КонецЕсли;
	
	СтруктураДанныхСобытия.ЗадачаПрименима = УстановитьПрименимостьЗадачиПоОрганизации(Организация,ЗадачаКалендаря);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КалендарьПодготовкиОтчетности.Ссылка КАК СобытиеКалендаря,
	|	ЗаписиКалендаряПодготовкиОтчетности.Состояние КАК СостояниеСобытия
	|ИЗ
	|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря КАК СобытиеКалендаря,
	|			МАКСИМУМ(ЗаписиКалендаряПодготовкиОтчетности.ДатаСменыСостояния) КАК ДатаСменыСостояния
	|		ИЗ
	|			Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|		ГДЕ
	|			ЗаписиКалендаряПодготовкиОтчетности.Организация = &Организация
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря) КАК ВложенныйЗапрос
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|			ПО ВложенныйЗапрос.СобытиеКалендаря = ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря
	|				И ВложенныйЗапрос.ДатаСменыСостояния = ЗаписиКалендаряПодготовкиОтчетности.ДатаСменыСостояния
	|		ПО КалендарьПодготовкиОтчетности.Ссылка = ВложенныйЗапрос.СобытиеКалендаря
	|ГДЕ
	|	КалендарьПодготовкиОтчетности.Задача = &Задача
	|	И КалендарьПодготовкиОтчетности.ДатаНачалаСобытия <= &ТекущаяДата
	|	И КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия >= &ТекущаяДата
	|	И ((КалендарьПодготовкиОтчетности.ПрименяетсяДляИП И &ПрименяетсяДляИП) 
	|		ИЛИ (КалендарьПодготовкиОтчетности.ПрименяетсяДляООО И &ПрименяетсяДляООО))");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Задача", ЗадачаКалендаря);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ПрименяетсяДляИП", ПрименяетсяДляИП);
	Запрос.УстановитьПараметр("ПрименяетсяДляООО", ПрименяетсяДляООО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанныхСобытия, Выборка);
	КонецЕсли;
	
	Возврат СтруктураДанныхСобытия;
	
КонецФункции

Функция УстановитьПрименимостьЗадачиПоОрганизации(Организация,ЗадачаКалендаря) Экспорт
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Срез = РегистрыСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Новый Структура("Организация", Организация));
	Если Срез.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Срез = Срез[0];
	
	Если ЗадачаКалендаря.ИмяПредопределенныхДанных = "ЕдиныйНалог" Тогда
		Возврат Срез.ПлательщикУСН;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "АвансовыйПлатежПоУСН" Тогда
		Возврат Срез.ПлательщикУСН;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "ДекларацияПоУСН" Тогда
		Возврат Срез.ПлательщикУСН;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "СтраховыеВзносыИП" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "НалогиСотрудников" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников");
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "ДекларацияПоЕНВД" Тогда
		Возврат Срез.ПлательщикЕНВД;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "ЕдиныйНалогЕНВД" Тогда
		Возврат Срез.ПлательщикЕНВД;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "СреднесписочнаяЧисленность" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников");
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "Справки2НДФЛ" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников");
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "ОтчетностьВПФР" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников");
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "Форма4ФСС" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников");
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "СтраховыеВзносыПриДоходахСвыше300тр" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных ="НалогПатент" Тогда
		Возврат Срез.ПрименяетсяПатент;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "ТорговыйСбор" Тогда
		Возврат Срез.ПлательщикТорговыйСбор;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "Декларация12" Тогда
		Возврат Срез.РозничнаяПродажаАлкоголя;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С СОБЫТИЯМИ

// Функция возвращает значения параметров учетной политики
// на дату среза
//
// Параметры:
//		Организация - СправочникСсылка.Организации - организация 
//			по которой необходимо получить параметры, если неопределено, то 
//			используется текущая организация
//
//		ДатаУчетнойПолитики - Дата- дата, на которую необходимо получить параметры 
//			учетной политики, если неопределено то используется текущая дата
//
// Возвращает:
//		Структура - значение параметров учетной политики в соответствии со срезом,
//			если параметры не заданы, то возвращается неопределено
//
Функция ПолучитьПараметрыУчетаОрганизации(Организация , ДатаУчетнойПолитики = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ОбъектНалогообложения,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.СтавкаНалога
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ?(ДатаУчетнойПолитики=Неопределено, ТекущаяДатаСеанса(), ДатаУчетнойПолитики));
	
	Результат = ЗАпрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыУчета = Новый Структура;
	
	Для Каждого ПараметрУчета Из Результат.Колонки Цикл
		ПараметрыУчета.Вставить(ПараметрУчета.Имя, Результат[0][ПараметрУчета.Имя]);
	КонецЦикла;
	
	Возврат ПараметрыУчета;
	
КонецФункции

// Функция выполняет формирование записей КУДиР по всем видам записей
//
// Параметры:
//		ДатаДокументаОбработкиСобытия - Дата - дата окончания квартала формирований
//
Процедура ВыполнитьФормированияВсехЗаписейКУДИР(ДатаДокументаОбработкиСобытия) Экспорт
	
	ДатаГраницыФормирования = РегламентированнаяОтчетностьУСН.ПолучитьДатуНачалаФормированияЗаписейКУДиР();
	
	// контроль, что уже все сформировано
	Если ДатаГраницыФормирования > ДатаДокументаОбработкиСобытия Тогда
		Возврат;
	КонецЕсли;
	
	// Получим список организаций
	//
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.ИспользуетсяОтчетность";
	
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	
	
		// формируем с начала квартала внесенных изменений
		// готовим массив обрабатываемых периодов
		ИтераторОбрабатываемыхПериодов = КонецКвартала(ДатаГраницыФормирования);
		
	Пока ИтераторОбрабатываемыхПериодов <= ДатаДокументаОбработкиСобытия Цикл
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоКвартала(ИтераторОбрабатываемыхПериодов), КонецДня(ИтераторОбрабатываемыхПериодов), НациональнаяВалюта, УчетВалютныхОпераций);
		
		ВыборкаОрганизаций.Сбросить();
		Пока ВыборкаОрганизаций.Следующий() Цикл
			РегламентированнаяОтчетностьУСН.ВыполнитьФормированияВсехЗаписейКУДИРЗаКвартал(
				ВыборкаОрганизаций.Ссылка,
				ИтераторОбрабатываемыхПериодов,
				МенеджерВТ);
			
		КонецЦикла;
		ИтераторОбрабатываемыхПериодов = КонецКвартала(ИтераторОбрабатываемыхПериодов+1);
	КонецЦикла;
	
	РегламентированнаяОтчетностьУСН.УстановитьДатуНачалаФормированияЗаписейКУДиР(ДатаДокументаОбработкиСобытия+1)
	
	
КонецПроцедуры

// Функция выполняет формирование записей КУДиР по всем видам записей
//
// Параметры:
//		Организация - СправочникСсылка... - бизнес единица, по которой необходимо провести формирование
//		ПериодФормирования - Дата - дата окончания квартала формирований
//
Функция ВыполнитьФормированияВсехЗаписейКУДИРЗаКвартал(Организация, ПериодФормирования, МенеджерВТ) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДокументФормирования", Документы.ЗаписиУСН.ПустаяСсылка());
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("ЕстьПредупреждения", Ложь);
	Результат.Вставить("ДополнительнаяИнформация", "");
	Результат.ДокументФормирования = ПолучитьДокументЗаписейУСНВПериодеПоВиду(
		Организация,
		ПериодФормирования,
		Перечисления.ВидыЗаписейФормированийКУДиР.ДоходыПрочие);
		
	ВыполнитьФормированиеПоДоходам(
		Организация,
		ПериодФормирования,
		Результат,
		МенеджерВт);
		
	Результат.ДокументФормирования = ПолучитьДокументЗаписейУСНВПериодеПоВиду(
		Организация,
		ПериодФормирования,
		Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаУслуги);
		
	ВыполнитьФормированиеПоРасходамНаТоварыУслуги(
		Организация,
		ПериодФормирования,
		Результат,
		МенеджерВТ);
		
	Результат.ДокументФормирования = ПолучитьДокументЗаписейУСНВПериодеПоВиду(
		Организация,
		ПериодФормирования,
		Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаОплатуТруда);
		
	ВыполнитьФормированиеПоРасходамНаОплатуТруда(
		Организация,
		ПериодФормирования,
		Результат,
		МенеджерВТ);
		
	Результат.ДокументФормирования = ПолучитьДокументЗаписейУСНВПериодеПоВиду(
		Организация,
		ПериодФормирования,
		Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаОСиНМА);
		
	ВыполнитьФормированиеПоРасходамНаОСиНМА(
		Организация,
		ПериодФормирования,
		Результат,
		МенеджерВТ);
		
		Результат.ДокументФормирования = ПолучитьДокументЗаписейУСНВПериодеПоВиду(
		Организация,
		ПериодФормирования,
		Перечисления.ВидыЗаписейФормированийКУДиР.РасходыПрочие);
		
	ВыполнитьФормированиеПоПрочимРасходам(
		Организация,
		ПериодФормирования,
		Результат,
		МенеджерВТ);
		
КонецФункции


Функция ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоПериода, ОкончаниеПериода, НациональнаяВалюта, УчитыватьВалютныеОперации) Экспорт
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	Дата = НачалоПериода;
	Пока Дата <= ОкончаниеПериода Цикл
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Дата = НачалоДня(Дата);
		Дата = Дата+ 86400;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц =МенеджерВТ;
	Если УчитыватьВалютныеОперации Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДат.Дата
		|ПОМЕСТИТЬ ВТТаблицаДат
		|ИЗ
		|	&ТаблицаДат КАК ТаблицаДат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютыДокумента.Валюта,
		|	КурсыВалютыДокумента.Период,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалютыДокумента.Кратность, 0) <> 0
		|				И ЕСТЬNULL(КурсыВалютыДокумента.Курс, 0) <> 0
		|				И ЕСТЬNULL(КурсНациональнойВалюты.Кратность, 0) <> 0
		|				И ЕСТЬNULL(КурсНациональнойВалюты.Курс, 0) <> 0
		|			ТОГДА КурсыВалютыДокумента.Курс * КурсНациональнойВалюты.Кратность / (КурсНациональнойВалюты.Курс * КурсыВалютыДокумента.Кратность)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Коэффициент
		|ПОМЕСТИТЬ ВТКУРСЫВАЛЮТ
		|ИЗ
		|	РегистрСведений.КурсыВалют КАК КурсыВалютыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ОкончаниеПериода, Валюта = &НациональнаяВалюта) КАК КурсНациональнойВалюты
		|		ПО (КурсыВалютыДокумента.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КурсыВалютыДокумента.Валюта,
		|	КурсыВалютыДокумента.Период,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалютыДокумента.Кратность, 0) <> 0
		|				И ЕСТЬNULL(КурсыВалютыДокумента.Курс, 0) <> 0
		|				И ЕСТЬNULL(КурсНациональнойВалюты.Кратность, 0) <> 0
		|				И ЕСТЬNULL(КурсНациональнойВалюты.Курс, 0) <> 0
		|			ТОГДА КурсыВалютыДокумента.Курс * КурсНациональнойВалюты.Кратность / (КурсНациональнойВалюты.Курс * КурсыВалютыДокумента.Кратность)
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ПредыдущаяДатаНачалу, ) КАК КурсыВалютыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ПредыдущаяДатаНачалу, Валюта = &НациональнаяВалюта) КАК КурсНациональнойВалюты
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДат.Дата,
		|	КурсыВалют.Валюта,
		|	МАКСИМУМ(КурсыВалют.Период) КАК Период
		|ПОМЕСТИТЬ ВТКУРСЫВАЛЮТПОДНЯМВРЕМЕННАЯ
		|ИЗ
		|	ВТТаблицаДат КАК ТаблицаДат,
		|	ВТКУРСЫВАЛЮТ КАК КурсыВалют
		|ГДЕ
		|	ТаблицаДат.Дата >= КурсыВалют.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДат.Дата,
		|	КурсыВалют.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютПоДнямВременная.Дата,
		|	КурсыВалютПоДнямВременная.Валюта,
		|	ЕСТЬNULL(КурсыВалют.Коэффициент, 1) КАК Коэффициент
		|ПОМЕСТИТЬ ВТКУРСЫВАЛЮТПОДНЯМ
		|ИЗ
		|	ВТКУРСЫВАЛЮТПОДНЯМВРЕМЕННАЯ КАК КурсыВалютПоДнямВременная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКУРСЫВАЛЮТ КАК КурсыВалют
		|		ПО КурсыВалютПоДнямВременная.Период = КурсыВалют.Период
		|			И КурсыВалютПоДнямВременная.Валюта = КурсыВалют.Валюта";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КурсНациональнойВалюты.Период КАК Дата,
		|	КурсНациональнойВалюты.Валюта,
		|	1 КАК Коэффициент
		|ПОМЕСТИТЬ ВТКУРСЫВАЛЮТПОДНЯМ
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ОкончаниеПериода, Валюта = &НациональнаяВалюта) КАК КурсНациональнойВалюты";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПредыдущаяДатаНачалу",НачалоПериода-86400);
	
	Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("НациональнаяВалюта", НациональнаяВалюта);
	Запрос.УстановитьПараметр("ТаблицаДат", ТаблицаДат);
	Запрос.Выполнить();
	
КонецФункции

Процедура ЗаписатьДатуДокументаВРегистр(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(Источник.Дата) ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность") Тогда
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.ДатыИзмененныхДокументов.СоздатьМенеджерЗаписи();
	Запись.ДатаДокумента = Источник.Дата;
	Запись.Документ = Источник.Ссылка;
	Запись.Записать();
	
КонецПроцедуры

Процедура ВыполнитьФормированияВсехЗаписейКУДИР_ФоновоеЗадание(Параметры, ВременноеХранилищеРезультата) Экспорт
	Перем ДатаФормирования;
	
	Если Параметры <> Неопределено Тогда
		Параметры.Свойство("ДатаФормирования", ДатаФормирования);
	КонецЕсли;
	
	Если ДатаФормирования = Неопределено Тогда
		ДатаФормирования = КонецКвартала(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ВыполнитьФормированияВсехЗаписейКУДИР(ДатаФормирования);
	ЗаписиСформированы = Истина;
	
	ПоместитьВоВременноеХранилище(ЗаписиСформированы, ВременноеХранилищеРезультата);
	
КонецПроцедуры

Процедура УстановитьУчитыватьВНУВДокументах(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	ДатаНачала = НачалоГода(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатьиДвиженияДенежныхСредств.Ссылка КАК Статья
	|ПОМЕСТИТЬ ВТСтатьиДвиженияДенежныхСредств
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|ГДЕ
	|	НЕ СтатьиДвиженияДенежныхСредств.ПометкаУдаления
	|	И СтатьиДвиженияДенежныхСредств.УчитыватьВНУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.Ссылка
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ПО (ПоступлениеВКассу.Дата >= &ДатаНачала)
	|			И (НЕ ПоступлениеВКассу.ПометкаУдаления)
	|			И (НЕ ПоступлениеВКассу.УчитыватьВНУ)
	|			И ПоступлениеВКассу.Статья = СтатьиДвиженияДенежныхСредств.Статья
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ПО (ПоступлениеНаСчет.Дата >= &ДатаНачала)
	|			И (НЕ ПоступлениеНаСчет.ПометкаУдаления)
	|			И (НЕ ПоступлениеНаСчет.УчитыватьВНУ)
	|			И ПоступлениеНаСчет.Статья = СтатьиДвиженияДенежныхСредств.Статья
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзКассы.Ссылка
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ПО (РасходИзКассы.Дата >= &ДатаНачала)
	|			И (НЕ РасходИзКассы.ПометкаУдаления)
	|			И (НЕ РасходИзКассы.УчитыватьВНУ)
	|			И РасходИзКассы.Статья = СтатьиДвиженияДенежныхСредств.Статья
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходСоСчета.Ссылка
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ПО (РасходСоСчета.Дата >= &ДатаНачала)
	|			И (НЕ РасходСоСчета.ПометкаУдаления)
	|			И (НЕ РасходСоСчета.УчитыватьВНУ)
	|			И РасходСоСчета.Статья = СтатьиДвиженияДенежныхСредств.Статья");
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	
	РегистрироватьНаУзлахОбмена = Ложь;
	ВключитьБизнесЛогику = Ложь;
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
				
			Попытка
				// Заблокируем таблицу для записи.
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ."+СокрЛП(Выборка.Ссылка.Метаданные().Имя));
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если ДокументОбъект = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				Если ДокументОбъект.УчитыватьВНУ Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ДокументОбъект.УчитыватьВНУ = Истина;
				
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, РегистрироватьНаУзлахОбмена, ВключитьБизнесЛогику);
				
				ЗафиксироватьТранзакцию();
			Исключение
				// Если не удалось обработать какой-либо документ, пропускаем и обрабатываем позднее.
				ОтменитьТранзакцию();
				
				СтрСообщения = "Заполнение документов, необходимых в налоговом учете";
				ТекстСообщения = НСтр("ru='Не удалось завершить действие: %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				ОписаниеОшибки = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Истина, ВременноеХранилищеРезультата);
	
КонецПроцедуры

Функция ПолучитьДанныеСобытия(Событие, РеквизитыСобытия) Экспорт
	
	Если ТипЗнч(Событие) <> Тип("СправочникСсылка.КалендарьПодготовкиОтчетности")
		И ТипЗнч(Событие) <> Тип("СправочникСсылка.КалендарьПерсональныхЗадачОтчетности") Тогда
		ВызватьИсключение (НСтр("ru='Неверные параметры метода ПолучитьДанныеСобытия'"));
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Событие, РеквизитыСобытия);
	
	Если Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалог Тогда
		ТипЗадачи = "РасчетЕдиногоНалога";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН Тогда
		ТипЗадачи = "РасчетАвансовогоПлатежа";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоУСН Тогда
		ТипЗадачи = "ФормированиеДекларацииПоУСН";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП Тогда
		ТипЗадачи = "РасчетСтраховыхВзносовИП";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогиСотрудников Тогда
		ТипЗадачи = "РасчетНалоговСотрудников";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоЕНВД Тогда
		ТипЗадачи = "ФормированиеДекларацииЕНВД";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалогЕНВД Тогда
		ТипЗадачи = "РасчетЕдиногоНалогаЕНВД";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СреднесписочнаяЧисленность Тогда
		ТипЗадачи = "ФормированиеСреднесписочнойЧисленности";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Справки2НДФЛ Тогда
		ТипЗадачи = "ФормированиеСправок2НДФЛ";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ОтчетностьВПФР Тогда
		ТипЗадачи = "ФормированиеОтчетностиВПФР";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма4ФСС Тогда
		ТипЗадачи = "Формирование4ФСС";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыПриДоходахСвыше300тр Тогда
		ТипЗадачи = "СтраховыеВзносыПриДоходахСвыше300тр";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогПатент Тогда
		ТипЗадачи = "НалогПатент";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ТорговыйСбор Тогда
		ТипЗадачи = "ТорговыйСбор";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма1Предприниматель Тогда
		ТипЗадачи = "Форма1Предприниматель";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма6НДФЛ Тогда
		ТипЗадачи = "Форма6НДФЛ";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СведенияОЗастрахованныхЛицах Тогда
		ТипЗадачи = "СведенияОЗастрахованныхЛицах";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Декларация12 Тогда
		ТипЗадачи = "Декларация12";
	Иначе
		ТипЗадачи = "";
	КонецЕсли;
	
	Результат.Вставить("ТипЗадачи", ТипЗадачи);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеДокументаОтчетности(ДокументОтчетности, РеквизитыДокумента) Экспорт
	
	Если ТипЗнч(ДокументОтчетности) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение (НСтр("ru='Неверные параметры метода ПолучитьДанныеДокументаОтчетности'"));
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОтчетности, РеквизитыДокумента);
	
КонецФункции

// Возвращает список банковских счетов не помеченных на удаление и их представлений по организации
//
Функция ПолучитьСписокБанковскихСчетов(Организация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбъединенныйЗапрос.Счет КАК Счет,
	|	ОбъединенныйЗапрос.Счет.Представление КАК Представление,
	|	СУММА(ОбъединенныйЗапрос.Приоритет) КАК Приоритет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.БанковскийСчетПоУмолчанию КАК Счет,
	|		1 КАК Приоритет
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.Ссылка = &Организация
	|		И Организации.БанковскийСчетПоУмолчанию <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БанкСчет.Ссылка,
	|		0
	|	ИЗ
	|		Справочник.БанковскиеСчета КАК БанкСчет
	|	ГДЕ
	|		БанкСчет.Владелец = &Организация
	|		И (НЕ БанкСчет.ПометкаУдаления)) КАК ОбъединенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъединенныйЗапрос.Счет,
	|	ОбъединенныйЗапрос.Счет.Представление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СпсСчетов = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпсСчетов.Добавить(Выборка.Счет, Выборка.Представление);
	КонецЦикла;
	
	Возврат СпсСчетов;
	
	
	
КонецФункции


// Проверяет соответствие справочника регистрация в ифнс данным в справочнике организаций
//
// Параметры:
//		Организация - ОрганизацияСсылка или ОрганизацияОбъект. Рекомендуется Объект.
//		Отказ - булево
//
Процедура ПроверитьРегистрациюВИФНС(Организация, Отказ, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Организация.РегистрацияВНалоговомОргане) Тогда
		РегистрацияВНалоговомОргане = Организация.РегистрацияВНалоговомОргане.ПолучитьОбъект();
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияВНалоговомОргане.Ссылка
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|ГДЕ
		|	(НЕ РегистрацияВНалоговомОргане.ПометкаУдаления)
		|	И РегистрацияВНалоговомОргане.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", Организация.Ссылка);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
			Если Организация.Ссылка.Пустая() Тогда
				РегистрацияВНалоговомОргане.Владелец = Организация.ПолучитьСсылкуНового();
			Иначе
				РегистрацияВНалоговомОргане.Владелец = Организация.Ссылка;
			КонецЕсли;
				
			РегистрацияВНалоговомОргане.Наименование = НСтр("ru='Автозапись'");
			
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			РегистрацияВНалоговомОргане = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	РегистрацияВНалоговомОргане.КодПоОКАТО = Организация.КодПоОКАТО;
	РегистрацияВНалоговомОргане.КодПоОКТМО = Организация.КодПоОКТМО;
	РегистрацияВНалоговомОргане.КПП        = Организация.КПП;
	
	ГосОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, Организация.КодНалоговогоОрганаПолучателя);
	
	РегистрацияВНалоговомОргане.НаименованиеИФНС = ГосОрган.ПолноеНаименование;
	
	РегистрацияВНалоговомОргане.Код = Организация.КодНалоговогоОрганаПолучателя;
	Если Не ПустаяСтрока(РегистрацияВНалоговомОргане.Код) Тогда
		РегистрацияВНалоговомОргане.Наименование = РегистрацияВНалоговомОргане.Код;
	КонецЕсли;
	
	Попытка
		РегистрацияВНалоговомОргане.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(
			"РегистрацияВИФНС. Запись",
			УровеньЖурналаРегистрации.Ошибка,
			,
			Организация,
			ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	
	Если ТипЗнч(Организация) = Тип("СправочникОбъект.Организации") Тогда
		Организация.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане.Ссылка;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане.Ссылка;
	
КонецПроцедуры

// возвращает актуализированную информацию ссылки регистрации на ифнс
Функция ПолучитьРегистрациюВИФНС(Организация) Экспорт
	
	Регистрация = Неопределено;
	ПроверитьРегистрациюВИФНС(Организация, Ложь, Регистрация);
	Возврат Регистрация;
	
КонецФункции



// Выполняет движения по регистру накопления КнигаУчетаДоходовИРасходов
// 
Процедура ОтразитьКнигаУчетаДоходовПатент(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКнигаУчетаДоходовПатент;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.КнигаУчетаДоходовПатент.Записывать = Истина;
	Движения.КнигаУчетаДоходовПатент.Загрузить(Таблица);

КонецПроцедуры


// Процедура формирует записи по патенту.
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция ВыполнитьРасчетНалогаПоПатенту(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураРасчетаПатент = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|ВидВзаиморасчетовСБюджетом,
		|СуммаПатент,
		|ОКАТОВзаиморасчетов,
		|ИФНСВзаиморасчетов,
		|СуммаВзаиморасчетовСБюджетом,
		|ДокументВзаиморасчетовСБюджетом",
		Организация,
		СобытиеКалендаря,
		ПериодРасчета,
		Справочники.ВидыНалогов.Патент,
		0,
		"",
		"",
		0,
		Неопределено);
	
	// Найдем патент и определим сумму
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Патенты.ДатаПервогоПлатежа,
	|	Патенты.ДатаВторогоПлатежа,
	|	Патенты.ДатаНачала,
	|	Патенты.ДатаОкончания,
	|	Патенты.СуммаПервогоПлатежа,
	|	Патенты.СуммаВторогоПлатежа,
	|	Патенты.КодПоОКТМО,
	|	Патенты.КодНалоговогоОрганаПолучателя
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	Патенты.Ссылка = &Основание";
	Запрос.УстановитьПараметр("Основание", СобытиеКалендаря.Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ПериодРасчета = Выборка.ДатаПервогоПлатежа Тогда
			СтруктураРасчетаПатент.СуммаПатент = Выборка.СуммаПервогоПлатежа;
		ИначеЕсли ПериодРасчета = Выборка.ДатаВторогоПлатежа Тогда
			СтруктураРасчетаПатент.СуммаПатент = Выборка.СуммаВторогоПлатежа;
		КонецЕсли;
		СтруктураРасчетаПатент.ОКАТОВзаиморасчетов = Выборка.КодПоОКТМО;
		СтруктураРасчетаПатент.ИФНСВзаиморасчетов = Выборка.КодНалоговогоОрганаПолучателя;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаПатент);
	СтруктураРасчетаПатент.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаПатент.СуммаПатент;
	
	// запись состояние события календаря
	Если СобытиеКалендаря <> Неопределено Тогда
		
		КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			СтруктураРасчетаПатент.СуммаПатент);
		// Регистрация документа оплаты
		
		ЗарегистрироватьВзаиморасчетыСБюджетомПоПатенту(СтруктураРасчетаПатент);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат СтруктураРасчетаПатент;
	
КонецФункции


// Процедура регистрирует документ обязательств перед бюджетом
//
Процедура ЗарегистрироватьВзаиморасчетыСБюджетомПоПатенту(СтруктураРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ  ПЕРВЫЕ 1
	|	ДокументыСобытийКалендаряОтчетности.СвязанныйДокумент
	|ИЗ
	|	РегистрСведений.ДокументыСобытийКалендаряОтчетности КАК ДокументыСобытийКалендаряОтчетности
	|ГДЕ
	|	ДокументыСобытийКалендаряОтчетности.Событие = &Событие
	|	И ДокументыСобытийКалендаряОтчетности.СвязанныйДокумент ССЫЛКА Документ.НачислениеНалогов";
	
	Запрос.УстановитьПараметр("Событие", СтруктураРасчета.СобытиеКалендаря);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДокументВзаиморасчетов = Выборка.СвязанныйДокумент.ПолучитьОбъект();
		СтрокаСНалогом = ДокументВзаиморасчетов.Налоги.Найти(СтруктураРасчета.ВидВзаиморасчетовСБюджетом, "ВидНалога");
		Если СтрокаСНалогом = Неопределено Тогда
			СтрокаСНалогом = ДокументВзаиморасчетов.Налоги.Добавить();
			СтрокаСНалогом.ВидНалога = СтруктураРасчета.ВидВзаиморасчетовСБюджетом;
		КонецЕсли;
		
		СтрокаСНалогом.СрокУплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРасчета.СобытиеКалендаря,"ДатаОкончанияСобытия");
		СтрокаСНалогом.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
	Иначе
		// Создаем документ взаиморасчетов
		ДокументВзаиморасчетов = Документы.НачислениеНалогов.СоздатьДокумент();
		ДокументВзаиморасчетов.Организация = СтруктураРасчета.Организация;
		ДокументВзаиморасчетов.Дата = КонецДня(СтруктураРасчета.ПериодОтчетности);
		ДокументВзаиморасчетов.ВидОперации = Перечисления.ВидыОперацийНачислениеНалогов.Начисление;
		СтрокаСНалогом = ДокументВзаиморасчетов.Налоги.Добавить();
		
		СтрокаСНалогом.ВидНалога = СтруктураРасчета.ВидВзаиморасчетовСБюджетом;
		СтрокаСНалогом.СрокУплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРасчета.СобытиеКалендаря,"ДатаОкончанияСобытия");
		СтрокаСНалогом.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
		
	КонецЕсли;
	
	СтрокаСНалогом.Сумма      = СтруктураРасчета.СуммаВзаиморасчетовСБюджетом;
	СтрокаСНалогом.КодИФНС    = СтруктураРасчета.ИФНСВзаиморасчетов;
	СтрокаСНалогом.КодПоОКАТО = СтруктураРасчета.ОКАТОВзаиморасчетов;
	
	ДокументВзаиморасчетов.Записать(РежимЗаписиДокумента.Проведение);
	ЗаписьСвязанногоДокумента = РегистрыСведений.ДокументыСобытийКалендаряОтчетности.СоздатьМенеджерЗаписи();
	ЗаписьСвязанногоДокумента.Событие = СтруктураРасчета.СобытиеКалендаря;
	ЗаписьСвязанногоДокумента.СвязанныйДокумент = ДокументВзаиморасчетов.Ссылка;
	ЗаписьСвязанногоДокумента.Записать();
	
	СтруктураРасчета.ДокументВзаиморасчетовСБюджетом = ДокументВзаиморасчетов.Ссылка;
	
КонецПроцедуры

// Функция возвращает актуальный документ взаиморасчетов с бюджетом
//
Функция ПолучитьДокументВзаиморасчетовСБюджетомПатент(Организация,ВидВзаиморасчетов,ПериодОтчетности, СрокУплаты, ВозвращатьСсылку = Ложь, Событие) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыСобытийКалендаряОтчетности.СвязанныйДокумент КАК ДокументВзаиморасчетов
	|ИЗ
	|	РегистрСведений.ДокументыСобытийКалендаряОтчетности КАК ДокументыСобытийКалендаряОтчетности
	|ГДЕ
	|	ДокументыСобытийКалендаряОтчетности.Событие = &Событие
	|	И ДокументыСобытийКалендаряОтчетности.СвязанныйДокумент ССЫЛКА Документ.НачислениеНалогов");
	
	Запрос.УстановитьПараметр("Событие", Событие);
	
	ДокументВзаиморасчетов = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ВозвращатьСсылку Тогда
			ДокументВзаиморасчетов = Выборка.ДокументВзаиморасчетов;
		Иначе
			ДокументВзаиморасчетов = Выборка.ДокументВзаиморасчетов.ПолучитьОбъект();
		КонецЕсли;
		
	Иначе
		
		ДокументВзаиморасчетов = Документы.НачислениеНалогов.СоздатьДокумент();
		ДокументВзаиморасчетов.Организация = Организация;
		ДокументВзаиморасчетов.Дата = КонецДня(ПериодОтчетности);
		ДокументВзаиморасчетов.ВидОперации = Перечисления.ВидыОперацийНачислениеНалогов.Начисление;
		СтрокаСНалогом = ДокументВзаиморасчетов.Налоги.Добавить();
		
		СтрокаСНалогом.ВидНалога = ВидВзаиморасчетов;
		СтрокаСНалогом.СрокУплаты = СрокУплаты;
		СтрокаСНалогом.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
		
		Если ВозвращатьСсылку Тогда
			
			ДокументВзаиморасчетов.Записать(РежимЗаписиДокумента.Проведение);
			ДокументВзаиморасчетов = ДокументВзаиморасчетов.Ссылка;
			
			ЗаписьСвязанногоДокумента = РегистрыСведений.ДокументыСобытийКалендаряОтчетности.СоздатьМенеджерЗаписи();
			ЗаписьСвязанногоДокумента.Событие = Событие;
			ЗаписьСвязанногоДокумента.СвязанныйДокумент = ДокументВзаиморасчетов.Ссылка;
			ЗаписьСвязанногоДокумента.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат ДокументВзаиморасчетов;
	
КонецФункции


Процедура ВыполнитьФормированияЗаписейПатента(Патент) Экспорт
	
	Если Не ЗначениеЗаполнено(Патент) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = НачалоДня(Патент.ДатаНачала);
	ОкончаниеПериода = КонецДня(Патент.ДатаОкончания);
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоПериода, ОкончаниеПериода, НациональнаяВалюта, УчетВалютныхОпераций);
	
	// Поиск документа, уже созданного ранее
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаписиПатент.Ссылка
	|ИЗ
	|	Документ.ЗаписиПатент КАК ЗаписиПатент
	|ГДЕ
	|	НЕ ЗаписиПатент.ПометкаУдаления
	|	И ЗаписиПатент.Патент = &Патент
	|	И НЕ ЗаписиПатент.РучныеЗаписи";
	
	Запрос.УстановитьПараметр("Патент", Патент);
	
	
	РезультатПоиска = Запрос.Выполнить().Выбрать();
	
	Если РезультатПоиска.Следующий() Тогда
		ДокументФормирования = РезультатПоиска.Ссылка.ПолучитьОбъект();
	Иначе
		ДокументФормирования = Документы.ЗаписиПатент.СоздатьДокумент();
		ДокументФормирования.Патент = Патент;
		ДокументФормирования.Организация = Патент.Владелец;
		ДокументФормирования.Дата = Патент.ДатаОкончания;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.СуммаДокумента,
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Номер,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента,
	|	ЕСТЬNULL(СУММА(ТаблицаОплатаПлатежнымиКартами.Сумма), 0) КАК СуммаБезналичнойОплаты
	|ПОМЕСТИТЬ ВТРозничныеПродажи
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ТаблицаОплатаПлатежнымиКартами
	|		ПО (ТаблицаОплатаПлатежнымиКартами.Ссылка = ОтчетОРозничныхПродажах.Ссылка)
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ОтчетОРозничныхПродажах.ПометкаУдаления
	|	И ОтчетОРозничныхПродажах.Проведен
	|	И ОтчетОРозничныхПродажах.Организация = &Организация
	|	И ОтчетОРозничныхПродажах.Патент = &Патент
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.СуммаДокумента,
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Номер,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.Ссылка КАК ПервичныйДокумент,
	|	ПоступлениеВКассу.Контрагент КАК Контрагент,
	|	ПоступлениеВКассу.Подотчетник КАК Подотчетник,
	|	ПоступлениеВКассу.СуммаДокумента КАК ДоходБаза,
	|	ПоступлениеВКассу.СуммаДокумента КАК ДоходВсего,
	|	ПоступлениеВКассу.ВидОперации КАК ВидОперации,
	|	ПоступлениеВКассу.Дата КАК ДатаПервичногоДокумента,
	|	ПоступлениеВКассу.Номер КАК НомерПервичногоДокумента,
	|	ПоступлениеВКассу.Дата КАК Период,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеВКассу.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	ПоступлениеВКассу.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|ГДЕ
	|	ПоступлениеВКассу.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеВКассу.ПометкаУдаления
	|	И ПоступлениеВКассу.Проведен
	|	И ПоступлениеВКассу.Организация = &Организация
	|	И ПоступлениеВКассу.Патент = &Патент
	|	И ПоступлениеВКассу.ВидОперации В(&МассивИспользуемыхВидовПоступленийВКассу)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	NULL,
	|	NULL,
	|	ОтчетОРозничныхПродажах.СуммаДокумента - ОтчетОРозничныхПродажах.СуммаБезналичнойОплаты,
	|	ОтчетОРозничныхПродажах.СуммаДокумента - ОтчетОРозничныхПродажах.СуммаБезналичнойОплаты,
	|	"""",
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Номер,
	|	ОтчетОРозничныхПродажах.Дата,
	|	"""",
	|	"""",
	|	НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажах.Дата, ДЕНЬ),
	|	ОтчетОРозничныхПродажах.ВалютаДокумента
	|ИЗ
	|	ВТРозничныеПродажи КАК ОтчетОРозничныхПродажах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка,
	|	ПоступлениеНаСчет.Контрагент,
	|	ПоступлениеНаСчет.Подотчетник,
	|	ПоступлениеНаСчет.СуммаДокумента+ ПоступлениеНаСчет.СуммаКомиссииДокумента,
	|	ПоступлениеНаСчет.СуммаДокумента+ ПоступлениеНаСчет.СуммаКомиссииДокумента,
	|	ПоступлениеНаСчет.ВидОперации,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПоступлениеНаСчет.Дата
	|		ИНАЧЕ ПоступлениеНаСчет.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	ПоступлениеНаСчет.Номер,
	|	ПоступлениеНаСчет.Дата,
	|	ПоступлениеНаСчет.НомерВходящегоДокумента,
	|	ПоступлениеНаСчет.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеНаСчет.Дата, ДЕНЬ),
	|	ПоступлениеНаСчет.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|ГДЕ
	|	ПоступлениеНаСчет.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеНаСчет.ПометкаУдаления
	|	И ПоступлениеНаСчет.Проведен
	|	И ПоступлениеНаСчет.Организация = &Организация
	|	И ПоступлениеНаСчет.Патент = &Патент
	|	И ПоступлениеНаСчет.ВидОперации В(&МассивИспользуемыхВидовПоступленийНаСчет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДоходы.ПервичныйДокумент,
	|	ВТДоходы.Контрагент,
	|	ВТДоходы.Подотчетник,
	|	ВТДоходы.ДоходБаза * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК Доход,
	|	ВТДоходы.ВидОперации,
	|	ВТДоходы.ДатаПервичногоДокумента,
	|	ВТДоходы.НомерПервичногоДокумента,
	|	ВТДоходы.Период,
	|	ВТДоходы.НомерВходящегоДокумента,
	|	ВТДоходы.НазначениеПлатежа,
	|	ВТДоходы.ДатаНачалоДня
	|ИЗ
	|	ВТДоходы КАК ВТДоходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
	|		ПО ВТДоходы.ДатаНачалоДня = КурсыВалютПоДням.Дата
	|			И ВТДоходы.ВалютаДенежныхСредств = КурсыВалютПоДням.Валюта";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("Организация", Патент.Владелец);
	Запрос.УстановитьПараметр("Патент", Патент);
	МассивИспользуемыхВидовПоступленийВКассу = Новый Массив;
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя);
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.Прочее);
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты);
	
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийВКассу", МассивИспользуемыхВидовПоступленийВКассу);
	
	МассивИспользуемыхВидовПоступленийНаСчет = Новый Массив;
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя);
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее);
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты);
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийНаСчет", МассивИспользуемыхВидовПоступленийНаСчет);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[2].Выгрузить();
	РезультатЗапроса.Колонки.Добавить("Содержание");
	
	Для Каждого Строка Из РезультатЗапроса Цикл
		Строка.Доход = Окр(Строка.Доход, 2, 1);
		Если НЕ ПустаяСтрока(Строка.НомерВходящегоДокумента) Тогда
			Строка.НомерПервичногоДокумента = Строка.НомерВходящегоДокумента;
		КонецЕсли;
		Строка.НомерПервичногоДокумента =  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Строка.НомерПервичногоДокумента, Истина, Истина);
		Если ТипЗнч(Строка.ПервичныйДокумент) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			Строка.Содержание = НСтр("ru = 'Поступление розничной выручки'");
		Иначе
			Если Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя Тогда
				Строка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поступление наличных денежных средств от покупателя ""%1""'"), СокрЛП(Строка.Контрагент));
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее 
				ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты Тогда
				Строка.Содержание = НСтр("ru = 'Поступление наличных денежных средств по прочим операциям'");
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
				Строка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поступление безналичных денежных средств от покупателя ""%1""'"), СокрЛП(Строка.Контрагент));
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее
				ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты Тогда
				Строка.Содержание = НСтр("ru = 'Поступление безналичных денежных средств по прочим операциям'");
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
				Строка.Содержание = НСтр("ru = 'Поступление от розничных продаж, оплаченной безналичным способом'");
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Строка.НазначениеПлатежа) Тогда
				Строка.Содержание = Строка.Содержание + ", " + Символы.ПС + СокрЛП(Строка.НазначениеПлатежа);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДокументФормирования.ЗаписиКнигаДоходовПатент.Загрузить(РезультатЗапроса);
	ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры


Процедура ВыполнитьФормированияЗаписейПатента_ФоновоеЗадание(Параметры, ВременноеХранилищеРезультата) Экспорт
	Перем Патент;
	
	Если Параметры <> Неопределено Тогда
		Параметры.Свойство("Патент", Патент);
	КонецЕсли;
	
	Если Патент = Неопределено Тогда
		ЗаписиСформированы = Истина;
	Иначе
		ВыполнитьФормированияЗаписейПатента(Патент);
		ЗаписиСформированы = Истина;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ЗаписиСформированы, ВременноеХранилищеРезультата);
	
КонецПроцедуры


Процедура ОтразитьИзменениеСтатусаРегламентированнойОтчетности(Источник, Отказ, Замещение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблица.Организация,
	|	ВременнаяТаблица.Ссылка,
	|	ВременнаяТаблица.Статус
	|ПОМЕСТИТЬ ВТИсходнаяТаблица
	|ИЗ
	|	&Таблица КАК ВременнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналОтчетовСтатусы.Ссылка,
	|	ЖурналОтчетовСтатусы.НаименованиеОтчета,
	|	ЖурналОтчетовСтатусы.ВидКонтролирующегоОргана,
	|	ВТИсходнаяТаблица.Статус
	|ИЗ
	|	РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходнаяТаблица КАК ВТИсходнаяТаблица
	|	ПО ЖурналОтчетовСтатусы.Организация = ВТИсходнаяТаблица.Организация
	|		И ЖурналОтчетовСтатусы.Ссылка = ВТИсходнаяТаблица.Ссылка
	|		И ЖурналОтчетовСтатусы.Статус <> ВТИсходнаяТаблица.Статус";
	
	Запрос.УстановитьПараметр("Таблица", Источник.Выгрузить(,"Организация, Ссылка, Статус"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = "";
		ЗаголовокСообщения = "";
		ТипКонтролирующегоОргана = Строка(Выборка.ВидКонтролирующегоОргана);
		
		Если Выборка.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС
			И ТипЗнч(Выборка.Ссылка) <> Тип("ДокументСсылка.РегламентированныйОтчет")
			И ТипЗнч(Выборка.Ссылка) <> Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган")
			И ТипЗнч(Выборка.Ссылка) <> Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Статус = НСтр("ru = 'Не сдано'")
			ИЛИ  Выборка.Статус = НСтр("ru = 'Сдан частично'")
			ИЛИ  Выборка.Статус = НСтр("ru = 'Не принято в обработку'") Тогда
			ЗаголовокСообщения = НСтр("ru = 'Отчет в %2 не принят!'");
			ТекстСообщения     = НСтр("ru = 'Исправьте ошибки и отправьте отчет «%1» еще раз'");
		ИначеЕсли Выборка.Статус = НСтр("ru = 'Сдано'") Тогда
			ЗаголовокСообщения = НСтр("ru = 'Сдан отчет в %2!'");
			ТекстСообщения     = НСтр("ru = 'Отчет «%1» принят в %2'");
		ИначеЕсли Выборка.Статус = НСтр("ru = 'Сдано, требует уточнения'") Тогда
			ЗаголовокСообщения = НСтр("ru = 'Отчет в %2 сдан, но требует уточнения'");
			ТекстСообщения     = НСтр("ru = 'Подготовьте и отправьте корректирующий отчет «%1»'");
		КонецЕсли;
		
		
		ЗаголовокСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокСообщения, Выборка.НаименованиеОтчета, ТипКонтролирующегоОргана);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НаименованиеОтчета, ТипКонтролирующегоОргана);
		
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ОбменМобильноеПриложениеПереопределяемый.ОтправитьPushУведомлениеУстройствамСНалоговымКалендарем(ЗаголовокСообщения, ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область Форма6НДФЛ

Процедура ОписаниеПоказателей_6НДФЛ_2016Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002501", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010004501", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010006001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010007001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010008001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010009001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014001", Истина, Истина);
	
КонецПроцедуры

Процедура Заполнить6НДФЛ(ПараметрыОтчета, Контейнер) Экспорт
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	РегистрацияВНалоговомОргане = ПараметрыОтчета.РегистрацииВНО;
	
	// очищаем разделы
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_6НДФЛ_2016Кв1(ПоказателиОтчета);
	
	ДанныеРаздела1 = Контейнер.Раздел1;
	Значение = Неопределено;
	Для каждого КлючИЗначение Из ДанныеРаздела1 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			ДанныеРаздела1[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Контейнер.Раздел1_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_ДанныеДопСтрок.Очистить();
	 
	ОписаниеТаблиц = Новый Структура("КоличествоПолучателейДохода, Раздел1Доходы, Раздел1Вычеты, Раздел1Налоги, Раздел2");
	РасчетПоказателей_6НДФЛ_2016Кв1(НачалоПериода, ОкончаниеПериода, Организация, РегистрацияВНалоговомОргане, ОписаниеТаблиц);
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	// Раздел 1
	
	Результат = ОписаниеТаблиц.КоличествоПолучателейДохода;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРаздела1,Результат[0]);
	КонецЕсли;
	РезультатРаздел1Налоги = ОписаниеТаблиц.Раздел1Налоги;
	
	ВременнаяТаблица = Контейнер.Раздел1_ДанныеДопСтрок.СкопироватьКолонки();
	Для каждого СтрокаДанных Из ОписаниеТаблиц.Раздел1Доходы Цикл
		ЗаполнитьЗначенияСвойств(ВременнаяТаблица.Добавить(), СтрокаДанных);
	КонецЦикла;
	Для каждого СтрокаДанных Из ОписаниеТаблиц.Раздел1Вычеты Цикл
		ЗаполнитьЗначенияСвойств(ВременнаяТаблица.Добавить(), СтрокаДанных);
	КонецЦикла;
	Для каждого СтрокаДанных Из РезультатРаздел1Налоги Цикл
		ЗаполнитьЗначенияСвойств(ВременнаяТаблица.Добавить(), СтрокаДанных);
	КонецЦикла;
	
	РезультатРаздел1Налоги.Свернуть(,"П000010007001,П000010008001,П000010009001");
	Если РезультатРаздел1Налоги.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРаздела1, РезультатРаздел1Налоги[0]);
	КонецЕсли;
	
	ВременнаяТаблица.Свернуть("П000010001001","П000010002001,П000010002501,П000010003001,П000010004001,П000010004501,П000010005001");
	ВременнаяТаблица.Сортировать("П000010001001");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВременнаяТаблица, Контейнер.Раздел1_ДанныеДопСтрок);
	
	// Раздел 2
	
	Для каждого СтрокаДанных Из ОписаниеТаблиц.Раздел2 Цикл
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_ДанныеДопСтрок.Добавить(), СтрокаДанных);
	КонецЦикла;
	
	
	
КонецПроцедуры


Процедура РасчетПоказателей_6НДФЛ_2016Кв1(НачалоПериода, ОкончаниеПериода, Организация, РегистрацияВНалоговомОргане, ОписаниеТаблиц, ПодробныеДанные = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("НачалоПредыдущегоГода", ДобавитьМесяц(НачалоПериода, -12));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("НачалоПериодаКвартала", НачалоКвартала(ОкончаниеПериода));
	
	// Титульный лист
	
	Если ОписаниеТаблиц.Свойство("КоличествоПолучателейДохода") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НДФЛДоходы.Сотрудник), 0) КАК П000010006001
		|ИЗ
		|	РегистрНакопления.НДФЛДоходы КАК НДФЛДоходы
		|ГДЕ
		|	НДФЛДоходы.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
		|	И НДФЛДоходы.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И НДФЛДоходы.Организация = &Организация
		|	И НДФЛДоходы.СуммаДохода <> 0";
		
		ОписаниеТаблиц.КоличествоПолучателейДохода = Запрос.Выполнить().Выгрузить()
		
	КонецЕсли;
	
	// Разделы 1 и 2 
	//
	Если ОписаниеТаблиц.Свойство("Раздел1Доходы") Или ОписаниеТаблиц.Свойство("Раздел1Вычеты") Тогда
		
		Если ОписаниеТаблиц.Свойство("Раздел1Доходы") Тогда 
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НДФЛДоходы.КодДохода.СтавкаНДФЛ КАК П000010001001,
			|	НДФЛДоходы.СуммаДохода КАК П000010002001, 
			|	0 КАК П000010002501
			|ИЗ
			|	РегистрНакопления.НДФЛДоходы КАК НДФЛДоходы
			|ГДЕ
			|	НДФЛДоходы.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
			|	И НДФЛДоходы.Организация = &Организация
			|	И НДФЛДоходы.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|	И НДФЛДоходы.СуммаДохода <> 0";
			
			ОписаниеТаблиц.Раздел1Доходы = Запрос.Выполнить().Выгрузить()
		КонецЕсли;
		
		Если ОписаниеТаблиц.Свойство("Раздел1Вычеты") Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПримененныеВычетыПоНДФЛ.СуммаВычета КАК П000010003001,
			|	13 КАК П000010001001
			|ИЗ
			|	РегистрНакопления.ПримененныеВычетыПоНДФЛ КАК ПримененныеВычетыПоНДФЛ
			|ГДЕ
			|	ПримененныеВычетыПоНДФЛ.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
			|	И ПримененныеВычетыПоНДФЛ.Организация = &Организация
			|	И ПримененныеВычетыПоНДФЛ.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|	И ПримененныеВычетыПоНДФЛ.СуммаВычета <> 0";
			
			ОписаниеТаблиц.Раздел1Вычеты = Запрос.Выполнить().Выгрузить();
		
		КонецЕсли;
		
	КонецЕсли;
		
	
	Если ОписаниеТаблиц.Свойство("Раздел1Налоги") Или ОписаниеТаблиц.Свойство("Раздел2") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	13 КАК П000010001001,
		|	СУММА(НДФЛРасчетыНалоговыхАгентовСБюджетом.Сумма) КАК П000010004001,
		|	0 КАК П000010008001,
		|	0 КАК П000010004501,
		|	0 КАК П000010005001,
		|	0 КАК П000010007001,
		|	0 КАК П000010009001
		|ИЗ
		|	РегистрНакопления.НДФЛРасчетыНалоговыхАгентовСБюджетом КАК НДФЛРасчетыНалоговыхАгентовСБюджетом
		|ГДЕ
		|	НДФЛРасчетыНалоговыхАгентовСБюджетом.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
		|	И НДФЛРасчетыНалоговыхАгентовСБюджетом.Организация = &Организация
		|	И НДФЛРасчетыНалоговыхАгентовСБюджетом.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	НДФЛРасчетыНалоговыхАгентовСБюджетомОбороты.СуммаРасход,
		|	NULL
		|ИЗ
		|	РегистрНакопления.НДФЛРасчетыНалоговыхАгентовСБюджетом.Обороты(&НачалоПериода, &ОкончаниеПериода, , Организация = &Организация) КАК НДФЛРасчетыНалоговыхАгентовСБюджетомОбороты";
		
		
		ОписаниеТаблиц.Раздел1Налоги = Запрос.Выполнить().Выгрузить();
		
		
		Если ОписаниеТаблиц.Свойство("Раздел2") Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НДФЛНачисления.П000020010001 КАК П000020010001,
			|	НДФЛНачисления.П000020014001,
			|	НДФЛНачисления.П000020011001 КАК П000020011001,
			|	НДФЛНачисления.П000020012001 КАК П000020012001,
			|	НДФЛДоходы.СуммаДохода КАК П000020013001
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОНЕЦПЕРИОДА(НДФЛРасчетыНалоговыхАгентовСБюджетом.ПериодРегистрации, МЕСЯЦ) КАК П000020010001,
			|		НДФЛРасчетыНалоговыхАгентовСБюджетом.ПериодРегистрации,
			|		СУММА(НДФЛРасчетыНалоговыхАгентовСБюджетом.Сумма) КАК П000020014001,
			|		НДФЛРасчетыНалоговыхАгентовСБюджетом.Период КАК П000020011001,
			|		ДОБАВИТЬКДАТЕ(НДФЛРасчетыНалоговыхАгентовСБюджетом.Период, ДЕНЬ, 1) КАК П000020012001
			|	ИЗ
			|		РегистрНакопления.НДФЛРасчетыНалоговыхАгентовСБюджетом КАК НДФЛРасчетыНалоговыхАгентовСБюджетом
			|	ГДЕ
			|		НДФЛРасчетыНалоговыхАгентовСБюджетом.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
			|		И НДФЛРасчетыНалоговыхАгентовСБюджетом.Организация = &Организация
			|		И НДФЛРасчетыНалоговыхАгентовСБюджетом.Сумма <> 0
			|		И НДФЛРасчетыНалоговыхАгентовСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|		И НДФЛРасчетыНалоговыхАгентовСБюджетом.Период МЕЖДУ &НачалоПериодаКвартала И &ОкончаниеПериода
			|	
			|	СГРУППИРОВАТЬ ПО
			|		НДФЛРасчетыНалоговыхАгентовСБюджетом.Период,
			|		ДОБАВИТЬКДАТЕ(НДФЛРасчетыНалоговыхАгентовСБюджетом.Период, ДЕНЬ, 1),
			|		НДФЛРасчетыНалоговыхАгентовСБюджетом.ПериодРегистрации) КАК НДФЛНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			НДФЛДоходы.ПериодРегистрации КАК ПериодРегистрации,
			|			СУММА(НДФЛДоходы.СуммаДохода) КАК СуммаДохода
			|		ИЗ
			|			РегистрНакопления.НДФЛДоходы КАК НДФЛДоходы
			|		ГДЕ
			|			НДФЛДоходы.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
			|			И НДФЛДоходы.Организация = &Организация
			|			И НДФЛДоходы.СуммаДохода <> 0
			|			И НДФЛДоходы.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|		
			|		СГРУППИРОВАТЬ ПО
			|			НДФЛДоходы.ПериодРегистрации) КАК НДФЛДоходы
			|		ПО НДФЛНачисления.ПериодРегистрации = НДФЛДоходы.ПериодРегистрации
			|
			|УПОРЯДОЧИТЬ ПО
			|	П000020010001,
			|	П000020011001,
			|	П000020012001";
			
			ОписаниеТаблиц.Раздел2 = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти