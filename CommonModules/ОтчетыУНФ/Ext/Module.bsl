////////////////////////////////////////////////////////////////////////////////
// Подсистема "Отчеты УНФ" (сервер).
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает картинку-образец отчета по ссылке на вариант
//
// Параметры:
//   Вариант - СправочникСсылка.ВариантыОтчетов или СправочникСсылка.ВариантыДополнительных - ссылка на вариант отчета
//
// Возвращаемое значение:
//   Картинка или Неопределено - образец отчета или Неопределено в случае его отсутствия
//
Функция ОбразецВарианта(Вариант) Экспорт
	
	Образец = Неопределено;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вариант", Вариант);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиВариантовОтчетовУНФ.Образец
	|ИЗ
	|	РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|ГДЕ
	|	НастройкиВариантовОтчетовУНФ.Вариант = &Вариант";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Значение = Выборка.Образец.Получить();
		Если ТипЗнч(Значение)=Тип("Картинка") Тогда
			Образец = Значение;
		КонецЕсли; 
	КонецЕсли;
	Возврат Образец;
	
КонецФункции

// Определяет количество элементов для заданного типа значений
//
// Параметры:
//   ТипЗначения     - Тип - Тип значения, для которого выполняется расчет
//   ПараметрыВыбора - ФиксированныйМассив - Фиксированный массив из элементов типа ПараметрВыбора
//
// Возвращаемое значение: 
//   * Число         - Количество элементов заданного типа
//
Функция ОпределитьКоличествоЭлементов(ТипЗначения, ПараметрыВыбора = Неопределено) Экспорт
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		Ссылка = Новый(ТипЗначения);
		МетаданныеОбъекта = Ссылка.Метаданные();
		Возврат МетаданныеОбъекта.ЗначенияПеречисления.Количество();
	Иначе
		ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Новый(ТипЗначения));
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	%1 КАК Объект",
		ИмяТаблицы);
		Если НЕ ПараметрыВыбора=Неопределено И ПараметрыВыбора.Количество()>0 Тогда
			Условия = "";
			Для каждого Параметр Из ПараметрыВыбора Цикл
				Если Найти(Параметр.Имя, "Отбор.")=0 Тогда
					Продолжить;
				КонецЕсли; 
				Если ТипЗнч(ПараметрыВыбора)=Тип("ПараметрыВыбораКомпоновкиДанных") Тогда
					Индекс = ПараметрыВыбора.Индекс(Параметр);
				ИначеЕсли ТипЗнч(ПараметрыВыбора)=Тип("Массив") Тогда 
					Индекс = ПараметрыВыбора.Найти(Параметр);
				Иначе
					Продолжить;
				КонецЕсли;
				ИмяРеквизита = СтрЗаменить(Параметр.Имя, "Отбор.", "");
				Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита)=Неопределено И НЕ СуществуетСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ИмяРеквизита) Тогда
					Продолжить;
				КонецЕсли; 
				Условия = Условия+
				?(ПустаяСтрока(Условия), "ГДЕ ", Символы.ПС+"	И")+
				" Объект."+ИмяРеквизита+
				?(ТипЗнч(Параметр.Значение)=Тип("СписокЗначений") ИЛИ ТипЗнч(Параметр.Значение)=Тип("ФиксированныйМассив"), " В (&Значение"+Индекс+")", " = &Значение"+Индекс);
				Если ТипЗнч(Параметр.Значение)=Тип("СписокЗначений") Тогда
					ЗначениеПараметра = Параметр.Значение.ВыгрузитьЗначения();
				ИначеЕсли ТипЗнч(Параметр.Значение)=Тип("ФиксированныйМассив") Тогда
					ЗначениеПараметра = Новый Массив(Параметр.Значение);
				Иначе
					ЗначениеПараметра = Параметр.Значение;
				КонецЕсли; 
				Запрос.УстановитьПараметр("Значение"+Индекс, ЗначениеПараметра);
			КонецЦикла; 
			Если НЕ ПустаяСтрока(Условия) Тогда
				Запрос.Текст = Запрос.Текст+Символы.ПС+Условия;
			КонецЕсли; 
		КонецЕсли; 
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат ?(Выборка.Количество=Null, 0, Выборка.Количество);
		Иначе
			Возврат 0;
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции

// Возвращает список элементов заданного типа с учетом параметров выбора
//
// Параметры:
//   ТипЗначения     - Тип - Тип значения, для которого выполняется выборка элементов
//   ПараметрыВыбора - ФиксированныйМассив - Фиксированный массив из элементов типа ПараметрВыбора
//
// Возвращаемое значение: 
//   * Массив        - Массив элементов заданного типа
//
Функция ПолучитьСписокЭлементов(ТипЗначения, ПараметрыВыбора) Экспорт
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		Ссылка = Новый(ТипЗначения);
		МетаданныеОбъекта = Ссылка.Метаданные();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
		МассивЗначений = Новый Массив;
		Для каждого Значение Из МетаданныеОбъекта.ЗначенияПеречисления Цикл
			МассивЗначений.Добавить(МенеджерОбъекта[Значение.Имя]);
		КонецЦикла; 
		Возврат МассивЗначений;
	Иначе
		ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Новый(ТипЗначения));
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Объект.Ссылка КАК Ссылка
		|ИЗ
		|	%1 КАК Объект",
		ИмяТаблицы);
		Если НЕ ПараметрыВыбора=Неопределено И ПараметрыВыбора.Количество()>0 Тогда
			Условия = "";
			Для каждого Параметр Из ПараметрыВыбора Цикл
				Если Найти(Параметр.Имя, "Отбор.")=0 Тогда
					Продолжить;
				КонецЕсли; 
				Если ТипЗнч(ПараметрыВыбора)=Тип("ПараметрыВыбораКомпоновкиДанных") Тогда
					Индекс = ПараметрыВыбора.Индекс(Параметр);
				ИначеЕсли ТипЗнч(ПараметрыВыбора)=Тип("Массив") Тогда 
					Индекс = ПараметрыВыбора.Найти(Параметр);
				Иначе
					Продолжить;
				КонецЕсли; 
				ИмяРеквизита = СтрЗаменить(Параметр.Имя, "Отбор.", "");
				Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита)=Неопределено И НЕ СуществуетСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ИмяРеквизита) Тогда
					Продолжить;
				КонецЕсли; 
				Условия = Условия+
				?(ПустаяСтрока(Условия), "ГДЕ ", Символы.ПС+"	И")+
				" Объект."+ИмяРеквизита+
				?(ТипЗнч(Параметр.Значение)=Тип("СписокЗначений") ИЛИ ТипЗнч(Параметр.Значение)=Тип("ФиксированныйМассив"), " В (&Значение"+Индекс+")", " = &Значение"+Индекс);
				Если ТипЗнч(Параметр.Значение)=Тип("СписокЗначений") Тогда
					ЗначениеПараметра = Параметр.Значение.ВыгрузитьЗначения();
				ИначеЕсли ТипЗнч(Параметр.Значение)=Тип("ФиксированныйМассив") Тогда
					ЗначениеПараметра = Новый Массив(Параметр.Значение);
				Иначе
					ЗначениеПараметра = Параметр.Значение;
				КонецЕсли; 
				Запрос.УстановитьПараметр("Значение"+Индекс, ЗначениеПараметра);
			КонецЦикла; 
			Если НЕ ПустаяСтрока(Условия) Тогда
				Запрос.Текст = Запрос.Текст+Символы.ПС+Условия;
			КонецЕсли; 
		КонецЕсли;
		Запрос.Текст = Запрос.Текст+Символы.ПС+"АВТОУПОРЯДОЧИВАНИЕ";
		ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
		Если ТаблицаЗначений.Количество()>0 Тогда
			Возврат ТаблицаЗначений.ВыгрузитьКолонку("Ссылка");
		Иначе
			Возврат Новый Массив;
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции

// Отмечает в списке значений используемые выбранные поля отчета
//
// Параметры:
//   Элементы  - КоллекцияВыбранныхПолейКомпоновкиДанных - Коллекция выбранных полй, для которой выполняется рекурсивная отметка полей
//   Результат - СписокЗначений - Список полей выбора, для которых нужно определить признак использования
//
Процедура ОтметитьВыбранныеПоляРекурсивно(Элементы, Результат)
	
	Для каждого ВыбранноеПоле Из Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле)=Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Элемент = Результат.НайтиПоЗначению(Строка(ВыбранноеПоле.Поле));
			Если НЕ Элемент=Неопределено И ВыбранноеПоле.Использование Тогда
				Элемент.Пометка = Истина;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ВыбранноеПоле)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ОтметитьВыбранныеПоляРекурсивно(ВыбранноеПоле.Элементы, Результат);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Устанавливает формат вывода поля отчета
//
// Параметры:
//   Группировка - ГруппировкаКомпоновкиДанных, ДиаграммаКомпоновкиДанных, ГруппировкаДиаграммыКомпоновкиДанных,
//	     ТаблицаКомпоновкиДанных или ГруппировкаТаблицыКомпоновкиДанных - Элемент структуры, для которого устанавливается
//       условное оформление с форматом поля
//   ИмяПоля - Строка - Имя поля, для которого изменяется формат вывода
//   Формат - Строка - Устанавливаемый формат вывода
//
Процедура ДобавитьУФФормат(Группировка, ИмяПоля, Формат)
	
	ЭлементОформления = Группировка.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ПолеУФ = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеУФ.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ПолеУФ.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат",Формат);
	
КонецПроцедуры

// Возвращает признак использования иерархии для описания типов
//
// Параметры:
//   ОписаниеТипов - ОписаниеТипов - Описание типов, для которого определяется использование иерархии
//
// Возвращаемое значение: 
//   * Булево      - Истина в случае если среди типов есть хоть один иерархический
//
Функция ОписаниеТиповСодержитИерархическийТип(ОписаниеТипов) Экспорт
	
	Для каждого Тип Из ОписаниеТипов.Типы() Цикл
		Если НЕ ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			Продолжить;
		КонецЕсли;
		ПустаяСсылка = Новый(Тип);
		ОбъектМетаданных = ПустаяСсылка.Метаданные();
		Если НЕ ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) И НЕ ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		Если ОбъектМетаданных.Иерархический Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

// Добавляет отчет в список последних используемых отчетов
//
// Параметры:
//   Вариант - СправочникСсылка.ВариантыОтчетов, СправочникСсылка.ВариантыДополнительныхОтчетов - 
//       Вариант отчета, добавляемый в историю
//
Процедура ДобавитьОтчетВИсторию(Вариант) Экспорт
	
	История = ХранилищеСистемныхНастроек.Загрузить("СписокОтчетов", "История");
	Если НЕ ТипЗнч(История)=Тип("Массив") Тогда
		//Очищаем пустые строки и восстанавливаем историю
		История = Новый Массив;
	КонецЕсли;
	
	Индекс = История.Найти(Вариант);
	Если НЕ Индекс=Неопределено Тогда
		История.Удалить(Индекс);
	КонецЕсли; 
	История.Вставить(0, Вариант);
	
	ХранилищеСистемныхНастроек.Сохранить("СписокОтчетов", "История", История);
	
КонецПроцедуры

#Область НастройкиОтчета

// Заполняет структуру настроек отчета параметрами по умолчанию
//
// Параметры:
//   НастройкиОтчета - Структура - Структура настроек
//
Процедура ИнициализироватьНастройкиОтчета(НастройкиОтчета) Экспорт
	
	// Признак поддержки отчетом интерфейса программного изменения общей формы отчета
	НастройкиОтчета.Вставить("ПрограммноеИзменениеФормыОтчета", Ложь);
	
	// Признак возможности изменения настроек диаграмм в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьНастройкиДиаграммыНаФормеОтчета", Истина);
	
	// Признак возможности выбора колонок в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьГруппуКолонкиНаФормеОтчета", Истина);
	
	// Признак возможности изменения группировок в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьГруппуСтрокиНаФормеОтчета", Истина);
	
	// Признак возможности изменения группировок в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьГруппировкиКолонокНаФормеОтчета", Истина);
	
	// Признак возможности изменения группировок в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьПоказателиНаФормеОтчета", Истина);
	
	// Признак возможности изменения фильтров в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьГруппуФильтрыНаФормеОтчета", Истина);
	
	// Признак разрешения ручного редактирвоания настроек варианта СКД
	НастройкиОтчета.Вставить("РазрешитьРедактироватьСКД", Истина);
	
	// Признак разрешения использования режима сравнения 
	НастройкиОтчета.Вставить("ИспользоватьСравнение", Ложь);
	
	НастройкиОтчета.Вставить("ИспользоватьДополнительныеРежимыСравнения", Истина);
	
	НастройкиОтчета.Вставить("СформироватьПриОткрытии", Ложь);
	
	// Признак возможности разворачивания отчета по периоду. Имеет смысл только если разрешен режим сравнения 
	НастройкиОтчета.Вставить("ИспользоватьПериодичность", Истина);
	
	НастройкиОтчета.Вставить("РазрешитьДобавлениеПрочихГруппировокСтрок", Истина);
	НастройкиОтчета.Вставить("РазрешитьДобавлениеПрочихГруппировокКолонок", Истина);
	НастройкиОтчета.Вставить("РазрешитьДобавлениеПрочихПолейСравнения", Истина);
	НастройкиОтчета.Вставить("РазрешитьДобавлениеПрочихФильтров", Истина);
	
	// Список наиболее часто используемых полей группировоки строк, отображаемых в меню при добавлении строки
	НастройкиОтчета.Вставить("ДополнительныеГруппировкиСтрок", Новый СписокЗначений);
	
	// Список наиболее часто используемых полей сравнения и группировки колонок 
	НастройкиОтчета.Вставить("ДополнительныеГруппировкиКолонок", Новый СписокЗначений);
	
	// Список наиболее часто используемых полей отбора, отображаемых в меню при добавлении фильтра
	НастройкиОтчета.Вставить("ДополнительныеФильтры", Новый СписокЗначений);
	
КонецПроцедуры

// Заполняет структуру настроек варианта параметрами по умолчанию
//
// Параметры:
//   НастройкиВарианта - Структура - Структура настроек
//
Процедура ИнициализироватьНастройкиВарианта(НастройкиВарианта) Экспорт
	
	// Отчет отображается в режиме "Рекомендуемые отчеты" панели отчетов
	НастройкиВарианта.Вставить("Рекомендуемый", Ложь);
	
	// Содержит имя функциональной опции, связанной с вариантом отчета
	НастройкиВарианта.Вставить("ФункциональнаяОпция", "");
	
	// Признак разрешения использования в варианте отчета только полей-ресурсов с ролью "Конечный остаток"
	НастройкиВарианта.Вставить("ТолькоРесурсыОстатков", Ложь);
	
	// Содержит массив описаний связи полей отчета и объектов метаданных для контекстного формирования. 
	//   см. подробнее процедуру ДобавитьОписаниеПривязки 
	НастройкиВарианта.Вставить("СвязанныеПоля", Новый Массив);
	
	// Содержит варианты оформления полей отчета. Соответствие вида: ИмяПоля (Строка) - ОписанийОформлений (Соответствие)
	//   см. подробнее процедуру ДобавитьВариантОформления
	НастройкиВарианта.Вставить("ВариантыОформления", Новый Соответствие);
	
	// Содержит массив описаний отчетов расшифровки
	//   см. подробнее процедуру ДобавитьВариантРасшифровки
	НастройкиВарианта.Вставить("ВариантыРасшифровки", Новый Массив);
	
	// Имя макета (типа ДвоичныеДанные), содержащего картинку с образцом варианта
	//   стандарт образца: картинка размерами 580х366 пикселей
	НастройкиВарианта.Вставить("ИмяМакетаОбразца", "");
	
	// Содержит теги для поиска варианта
	//   теги в строке разделяются запятыми
	НастройкиВарианта.Вставить("Теги", "");
	
	// Массив имен полей, по которым можно наложить отбор через строку поиска в форме отчета
	//   если массив пустой, то отбор можно будет наложить только по значениям полей фильтров, отображенных в форме
	НастройкиВарианта.Вставить("ПоляПоиска", Новый Массив);
	
КонецПроцедуры

// Добавляет описание контекстной привязки
//
// Параметры:
//   СвязанныеПоля - Массив - Массив описаний связанных полей
//   Поле - Строка - Имя поля, по которому выполняется отбор при контекстном открытии
//   Объект - Строка - Полное имя объекта метаданных, к которому выполняется привязка, например "Справочник.Номенклатура"
//   ДополнительныйРазрез - Произвольная ссылка - Дополнительная фильтрация. Поддерживается:
//      ПеречислениеСсылка.ТипыНоменклатуры - для разделения номенклатуры
//      ПеречислениеСсылка.ТипыСтруктурныхЕдиниц - для разделения структурных единиц
//      Перечисления вариантов операций документов
//   СложныйАлгоритм - Булево - Признак использования сложного алгоритма наложения отборов при контекстном открытии
//      В модуле объекта отчета должна присутствовать экспортируемая процедура ПриКонтекстномОткрытии
//   Рекомендуемый - Булево - Признак рекомендуемости для контекстного режима списка отчетов
//
Процедура ДобавитьОписаниеПривязки(СвязанныеПоля, Поле, Объект, ДополнительныйРазрез = Неопределено, СложныйАлгоритм = Ложь, Рекомендуемый = Ложь) Экспорт
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("Поле", Поле);
	СтруктураОписания.Вставить("Объект", Объект);
	СтруктураОписания.Вставить("СложныйАлгоритм", СложныйАлгоритм);
	СтруктураОписания.Вставить("ДополнительныйРазрез", ДополнительныйРазрез);
	СтруктураОписания.Вставить("Рекомендуемый", Рекомендуемый);
	СвязанныеПоля.Добавить(СтруктураОписания);
	
КонецПроцедуры

// Добавляет предопределенный вариант оформления поля отчета
//
// Параметры:
//   ВариантыОформления - Соответствие - Описания предопределенных вариантов оформления в разрезе полей
//   Поле - Строка - Имя поля, для которго добавляется предопределенный вариант оформления
//   КлючВариантаОформления - Строка - Имя предопределенного варианта оформления
//   ЭлементОформления - Строка - Имя параметра оформления
//   ЗначениеОформления - Произвольный - Значение параметра оформления
//
Процедура ДобавитьВариантОформления(ВариантыОформления, Поле, КлючВариантаОформления, ЭлементОформления, ЗначениеОформления) Экспорт
	
	Если ВариантыОформления.Получить(Поле)=Неопределено Тогда
		ВариантыОформления.Вставить(Поле, Новый Соответствие);
	КонецЕсли;
	ОформленияПоля = ВариантыОформления.Получить(Поле);
	
	Если ОформленияПоля.Получить(КлючВариантаОформления)=Неопределено Тогда
		ОформленияПоля.Вставить(КлючВариантаОформления, Новый Структура);
	КонецЕсли;
	Оформление = ОформленияПоля.Получить(КлючВариантаОформления);
	
	Оформление.Вставить(ЭлементОформления, ЗначениеОформления);
	
КонецПроцедуры

// Добавляет описание нестандартного варианта расшифровки
//
// Параметры:
//   ВариантыРасшифровки - Массив - Варианты расшифровки
//   ИмяОтчета - Строка - Имя отчета для расшифровки
//   КлючВарианта - Строка - Ключ вариант отчета для расшифровки
//   Поле - Строка - Имя расшифровываемого поля
//   Заголовок - Строка - Заголовок варианта расшифровки
//
Процедура ДобавитьВариантРасшифровки(ВариантыРасшифровки, ИмяОтчета, КлючВарианта, Поле = "", Заголовок = "") Экспорт
	
	Вариант = ВариантыОтчетов.ПолучитьСсылку(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ИмяОтчета), КлючВарианта);
	
	Если Не ЗначениеЗаполнено(Вариант) Тогда
		ВызватьИсключение СтрШаблон(НСтр(
		"ru = 'Не удалось определить вариант отчета по переданным параметрам:
		|ИмяОтчета = ""%1"", КлючВарианта = ""%2"".'"),
		ИмяОтчета, КлючВарианта);
	КонецЕсли;
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("Вариант", Вариант);
	СтруктураОписания.Вставить("Поле", Поле);
	СтруктураОписания.Вставить("Заголовок", Заголовок);
	ВариантыРасшифровки.Добавить(СтруктураОписания);
	
КонецПроцедуры

// Добавляет стандартные варианты оформления для суммовых полей
//
// Параметры:
//   ВариантыОформления - Соответствие - Описания предопределенных вариантов оформления в разрезе полей
//   Поля - Строка, Массив - Имена суммовых полей
//   НастройкиКД - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета для установки основного варианта оформления
//
Процедура ДобавитьВариантыОформленияСумм(ВариантыОформления, Поля, НастройкиКД = Неопределено) Экспорт
	
	Если ТипЗнч(Поля)=Тип("Строка") Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля);
	ИначеЕсли ТипЗнч(Поля)=Тип("Массив") Тогда
		МассивПолей = Поля;
	Иначе
		Возврат;
	КонецЕсли;
	
	КлючОсновногоВариантаОформления = НСтр("ru = 'С копейками'");
	
	Для каждого ИмяПоля Из МассивПолей Цикл
		
		КлючВариантаОформления = КлючОсновногоВариантаОформления;
		ОтчетыУНФ.ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧДЦ=2");
		
		КлючВариантаОформления = НСтр("ru = 'Без копеек'");
		ОтчетыУНФ.ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧДЦ=0");
		
		КлючВариантаОформления = НСтр("ru = 'В тысячах'");
		ОтчетыУНФ.ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧДЦ=0; ЧС=3");
			
	КонецЦикла; 
	
	Если НЕ НастройкиКД=Неопределено Тогда
		Для каждого ИмяПоля Из МассивПолей Цикл
			ОтчетыУНФКлиентСервер.ДобавитьУсловноеОформление(НастройкиКД, ИмяПоля, ВариантыОформления[ИмяПоля][КлючОсновногоВариантаОформления]); 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

// Добавляет стандартные варианты оформления для количественных полей
//
// Параметры:
//   ВариантыОформления - Соответствие - Описания предопределенных вариантов оформления в разрезе полей
//   Поля - Строка, Массив - Имена количественных полей
//   НастройкиКД - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета для установки основного варианта оформления
//
Процедура ДобавитьВариантыОформленияКоличества(ВариантыОформления, Поля, НастройкиКД = Неопределено) Экспорт
	
	Если ТипЗнч(Поля)=Тип("Строка") Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля);
	ИначеЕсли ТипЗнч(Поля)=Тип("Массив") Тогда
		МассивПолей = Поля;
	Иначе
		Возврат;
	КонецЕсли;
	
	КлючОсновногоВариантаОформления = НСтр("ru = 'Не выравнивать'");
	
	Для каждого ИмяПоля Из МассивПолей Цикл
		
		КлючВариантаОформления = КлючОсновногоВариантаОформления;
		ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧРГ=' '");
			
		КлючВариантаОформления = НСтр("ru = 'Выравнивать до 3-х знаков после запятой'");
		ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧДЦ=3");
		
	КонецЦикла;
	
	Если НЕ НастройкиКД=Неопределено Тогда
		Для каждого ИмяПоля Из МассивПолей Цикл
			ОтчетыУНФКлиентСервер.ДобавитьУсловноеОформление(НастройкиКД, ИмяПоля, ВариантыОформления[ИмяПоля][КлючОсновногоВариантаОформления]); 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеОтчета

// Возвращает структуру служебных данных для формирования отчета
//
// Параметры:
//    НастройкиОтчета - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета
//
// Возвращаемое значение: 
//   * Структура     - Структура сложебных данных для формирования. Содержит поля;
//      НастройкиОтчета - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета
//      ВыводитьЗаголовок - Булево - Признак отображения заголовка отчета
//      Заголовок - Строка - Заголовок отчета
//      ПараметрыВключаемыеВТекстОтбора - Массив - Массив имен параметров, включаемых в текст отбора при выводе заголовка
//      Переносит параметры из структуры ДополнительныеСвойства настроек компоновки данных
//
Функция ПараметрыФормированияОтчета(НастройкиОтчета) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкиОтчета", НастройкиОтчета);
	
	ДополнительныеСвойства = НастройкиОтчета.ДополнительныеСвойства;
	Для каждого Свойство Из ДополнительныеСвойства Цикл
		Результат.Вставить(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;
	
	Параметр = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	Результат.Вставить("ВыводитьЗаголовок", НЕ Параметр=Неопределено И Параметр.Использование И Параметр.Значение);
	Если Результат.ВыводитьЗаголовок И НЕ Результат.Свойство("Заголовок") Тогда
		Параметр = НастройкиОтчета.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
		Если НЕ Параметр=Неопределено И Параметр.Использование Тогда
			Результат.Вставить("Заголовок", Параметр.Значение);
		Иначе
			Результат.Вставить("Заголовок", "");
		КонецЕсли; 
	КонецЕсли; 
	
	ПараметрыВключаемыеВТекстОтбора = Новый Массив;
	НевыводимыеПараметры = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("НачалоПериода,КонецПериода,Период,СтПериод,Периодичность,ТипДиаграммы,ВыводитьЗаголовок");
	Для каждого Параметр Из НастройкиОтчета.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
		Если НЕ НевыводимыеПараметры.Найти(Строка(Параметр.Параметр))=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ПараметрыВключаемыеВТекстОтбора.Добавить(Параметр); 
	КонецЦикла;
	Если ПараметрыВключаемыеВТекстОтбора.Количество()>0 Тогда
		Результат.Вставить("ПараметрыВключаемыеВТекстОтбора", ПараметрыВключаемыеВТекстОтбора);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Добавляет дополнительные вычисляемые поля в схему компоновки данных отчета
//    Добавляемые поля: МесяцГода, ДеньМесяцГода, НеделяГода
//
// Параметры:
//    СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//
Процедура ДобавитьВычисляемыеПоля(СхемаКомпоновкиДанных) Экспорт
	
	Поле = ПолеСхемы(СхемаКомпоновкиДанных, "ПериодДляРасчета");
	Если Поле=Неопределено Тогда
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, "Период");
	КонецЕсли; 
	Если Поле=Неопределено Тогда
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, "ПериодСекунда");
	КонецЕсли; 
	Если НЕ Поле=Неопределено Тогда
		ИмяПоля = Поле.ПутьКДанным;
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("МесяцГода");
		Если ВычисляемоеПоле=Неопределено Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = "МесяцГода";
			ВычисляемоеПоле.Выражение = "ОтчетыУНФ.МесяцГода("+ИмяПоля+")";
			ВычисляемоеПоле.Заголовок = НСтр("ru = 'Месяц года'");
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата));
			ВычисляемоеПоле.Оформление.УстановитьЗначениеПараметра("Формат", НСтр("ru = 'ДФ=ММММ'"));
			ВычисляемоеПоле.ОграничениеИспользования.Условие = Истина;
		КонецЕсли; 
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ДеньМесяцГода");
		Если ВычисляемоеПоле=Неопределено Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = "ДеньМесяцГода";
			ВычисляемоеПоле.Выражение = "ОтчетыУНФ.ДеньМесяцГода("+ИмяПоля+")";
			ВычисляемоеПоле.Заголовок = НСтр("ru = 'День и месяц года'");
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата));
			ВычисляемоеПоле.Оформление.УстановитьЗначениеПараметра("Формат", НСтр("ru = 'ДФ=''д ММММ'''")); 
			ВычисляемоеПоле.ОграничениеИспользования.Условие = Истина;
		КонецЕсли; 
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("НеделяГода");
		Если ВычисляемоеПоле=Неопределено Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = "НеделяГода";
			ВычисляемоеПоле.Выражение = "ОтчетыУНФ.НомерНеделиГода("+ИмяПоля+")";
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
			ВычисляемоеПоле.Заголовок = НСтр("ru = 'Неделя года'");
			ВычисляемоеПоле.ОграничениеИспользования.Условие = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Поле = ПолеСхемы(СхемаКомпоновкиДанных, "Контрагент");
	Если Поле=Неопределено Тогда
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, "Покупатель");
	КонецЕсли;
	Если Поле=Неопределено Тогда
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, "Поставщик");
	КонецЕсли;
	Если Поле<>Неопределено Тогда
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ДобавленноеПоле_Тег");
		Если ВычисляемоеПоле=Неопределено Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = "ДобавленноеПоле_Тег";
			ВычисляемоеПоле.Выражение = "";
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Теги");
			ВычисляемоеПоле.Заголовок = НСтр("ru = 'Тег'");
			ВычисляемоеПоле.ОграничениеИспользования.Группировка = Истина;
			ВычисляемоеПоле.ОграничениеИспользования.Поле = Истина;
			ВычисляемоеПоле.ОграничениеИспользования.Порядок = Истина;
		КонецЕсли; 
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ДобавленноеПоле_Сегмент");
		Если ВычисляемоеПоле=Неопределено Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = "ДобавленноеПоле_Сегмент";
			ВычисляемоеПоле.Выражение = "";
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Сегменты");
			ВычисляемоеПоле.Заголовок = НСтр("ru = 'Сегмент'");
			ВычисляемоеПоле.ОграничениеИспользования.Группировка = Истина;
			ВычисляемоеПоле.ОграничениеИспользования.Поле = Истина;
			ВычисляемоеПоле.ОграничениеИспользования.Порядок = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Стандартизирует схему компоновки данных отчета
//    * Устанавливает стандартные заголовки периодических полей отчета
//    * Устанавливаент стандартные форматы вывода периодических полей отчета 
//
// Параметры:
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//
Процедура СтандартизироватьСхему(СхемаКомпоновкиДанных) Экспорт
	
	ТабПолей = Новый ТаблицаЗначений;
	ТабПолей.Колонки.Добавить("Поле");
	ТабПолей.Колонки.Добавить("Заголовок");
	ТабПолей.Колонки.Добавить("Формат");
	
	// Форматы по умолчанию
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодСекунда", НСтр("ru = 'Секунда'"), НСтр("ru = 'ДФ=''дд.ММ.гггг ЧЧ:мм:сс'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодМинута", НСтр("ru = 'Минута'"), НСтр("ru = 'ДФ=''дд.ММ.гггг ЧЧ:мм'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодЧас", НСтр("ru = 'Час'"), НСтр("ru = 'ДФ=''дд.ММ.гггг ЧЧ:00'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодДень", НСтр("ru = 'День'"), НСтр("ru = 'ДФ=дд.ММ.гггг'"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодНеделя", НСтр("ru = 'Начало недели'"), НСтр("ru = 'ДФ=дд.ММ.гггг'"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодДекада", НСтр("ru = 'Начало декады'"), НСтр("ru = 'ДФ=дд.ММ.гггг'"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодМесяц", НСтр("ru = 'Месяц'"), НСтр("ru = 'ДФ=''МММ гггг'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодКвартал", НСтр("ru = 'Квартал'"), НСтр("ru = 'ДФ=''к ''''кв.'''' гггг'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодПолугодие", НСтр("ru = 'Начало полугодия'"), НСтр("ru = 'ДФ=дд.ММ.гггг'"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодГод", НСтр("ru = 'Год'"), НСтр("ru = 'ДФ=гггг'"));
	
	Для каждого Стр Из ТабПолей Цикл
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, Стр.Поле);
		Если Поле=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Стр.Заголовок) Тогда
			Поле.Заголовок = Стр.Заголовок;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Стр.Формат) Тогда
			Поле.Оформление.УстановитьЗначениеПараметра("Формат", Стр.Формат); 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Стандартный обработчик компонови результата отчета
//
// Параметры:
//    КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек компоновки данных отчета
//    СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//    ДокументРезультат - ТабличныйДокумент - Результат компоновки отчета
//    ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки
//    СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки компоновки
//
Процедура ПриКомпоновкеРезультата(КомпоновщикНастроек, СхемаКомпоновкиДанных, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.Настройки;
	ДополнительныеСвойства = НастройкиОтчета.ДополнительныеСвойства;
	ПараметрыОтчета = ПараметрыФормированияОтчета(НастройкиОтчета);
	
	Если ДополнительныеСвойства.Свойство("АдресСхемы") И ЭтоАдресВременногоХранилища(ДополнительныеСвойства.АдресСхемы) Тогда
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ДополнительныеСвойства.АдресСхемы);
	Иначе
		СтандартизироватьСхему(СхемаКомпоновкиДанных);
		ДобавитьВычисляемыеПоля(СхемаКомпоновкиДанных);
	КонецЕсли; 
	
	УправлениеНебольшойФирмойОтчеты.УстановитьМакетОформленияОтчета(НастройкиОтчета);
	УправлениеНебольшойФирмойОтчеты.ВывестиЗаголовокОтчета(ПараметрыОтчета, ДокументРезультат);
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ГруппировкаКолонок", ?(ДополнительныеСвойства.Свойство("ГруппировкаКолонок"), ДополнительныеСвойства.ГруппировкаКолонок, "ГруппировкаКолонок"));
	ПараметрыФормирования.Вставить("Сравнение", ?(ДополнительныеСвойства.Свойство("Сравнение"), ДополнительныеСвойства.Сравнение, "Сравнение"));
	Если ТипЗнч(ПараметрыФормирования.Сравнение)=Тип("ПеречислениеСсылка.Периодичность") Тогда
		ПараметрыФормирования.Вставить("Сравнение", "ДинамическийПериод");
	КонецЕсли;
	ПараметрыФормирования.Вставить("ПорядокГруппировок", Новый Массив);
	ПараметрыФормирования.Вставить("ПорядокГруппировокЗаполнен", Ложь);
	ПараметрыФормирования.Вставить("СтруктураПолейСравнения", Новый Структура);
	Если ДополнительныеСвойства.Свойство("ИспользоватьСравнение") И ДополнительныеСвойства.ИспользоватьСравнение Тогда
		УправлениеНебольшойФирмойОтчеты.НастроитьДинамическийПериод(СхемаКомпоновкиДанных, ПараметрыОтчета);
		ОбновитьПоляСравнения(СхемаКомпоновкиДанных, НастройкиОтчета, ПараметрыФормирования);
	КонецЕсли; 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	//Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	Если ДополнительныеСвойства.Свойство("ВнешниеНаборыДанных") И ЭтоАдресВременногоХранилища(ДополнительныеСвойства.ВнешниеНаборыДанных) Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ПолучитьИзВременногоХранилища(ДополнительныеСвойства.ВнешниеНаборыДанных), ДанныеРасшифровки, Истина);
	Иначе
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	КонецЕсли; 

	//Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	//Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	ТаблицаЗафиксирована = Ложь;

	ДокументРезультат.ФиксацияСверху = 0;
	
	//Основной цикл вывода отчета
	ОбластиКУдалению = Новый Массив;
	
	Пока Истина Цикл
		//Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();

		Если ЭлементРезультата = Неопределено Тогда
			//Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
		Иначе
			// Зафиксируем шапку
			Если  Не ТаблицаЗафиксирована 
				  И ЭлементРезультата.ЗначенияПараметров.Количество() > 0 
				  И ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) <> Тип("ДиаграммаКомпоновкиДанных") Тогда

				ТаблицаЗафиксирована = Истина;
				ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;

			КонецЕсли;
			//Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
			Если ДополнительныеСвойства.Свойство("Сравнение") И ТипЗнч(ДополнительныеСвойства.Сравнение)=Тип("ПеречислениеСсылка.Периодичность") Тогда
				ВывестиКартинкиВЭлементРезультата(ЭлементРезультата, ДанныеРасшифровки, ДокументРезультат, ПараметрыФормирования); 
			КонецЕсли; 
			
		КонецЕсли;
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();
	
	Если (ПараметрыОтчета.Свойство("ВыводитьЗаголовок") И ПараметрыОтчета.ВыводитьЗаголовок) Тогда
		ДокументРезультат.ФиксацияСверху = 0;
	КонецЕсли; 
	
	Если (ДополнительныеСвойства.Свойство("ФиксироватьКолонки") И ДополнительныеСвойства.ФиксироватьКолонки) Тогда
		ДокументРезультат.ФиксацияСлева = СтрокФиксироватьСлева(КомпоновщикНастроек);
	КонецЕсли;
	
	Для каждого Область Из ОбластиКУдалению Цикл
		ДокументРезультат.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЦикла;
	
	ВыполнитьОперацииПослеФормирования(ДокументРезультат, ПараметрыФормирования);
	
КонецПроцедуры

// Изменяет схему отчета для поддержки мультивалютности
//
// Параметры:
//    СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//    Настройки - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета
//
Процедура ОбработатьСхемуМультивалютногоОтчета(СхемаКомпоновкиДанных, Настройки) Экспорт
	
	Если Настройки.Структура.Количество()>1 Тогда
		Возврат;
	КонецЕсли; 
	ГруппировкиСВалютами = МультивалютныеГруппировкиРекурсивно(Настройки.Структура);
	ДобавитьГруппировкиПериодов(ГруппировкиСВалютами, СхемаКомпоновкиДанных);
	Если ГруппировкиСВалютами.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	ГруппировкиКолонок = ГруппировкиКолонокРекурсивно(Настройки.Структура);
	ГруппировкиБезВалют = ПрочиеГруппировки(Настройки, ГруппировкиСВалютами, ГруппировкиКолонок);
	ВыбранныеРесурсы = Новый Массив;
	Для каждого Ресурс Из СхемаКомпоновкиДанных.ПоляИтога Цикл
		Ресурс.Группировки.Очистить();
		Для каждого ИмяГруппировки Из ГруппировкиБезВалют Цикл
			Ресурс.Группировки.Добавить(ИмяГруппировки);
		КонецЦикла;
		Ресурс.Группировки.Добавить("ОбщийИтог");
	КонецЦикла; 
	Для каждого ПолеВыбор Из Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если НЕ ПолеВыбор.Ресурс Тогда
			Продолжить;
		КонецЕсли; 
		ИмяПоля = Строка(ПолеВыбор.Поле);
		Если Найти(ИмяПоля, "Вал")>0 Тогда
			Продолжить;
		КонецЕсли; 
		Суффиксы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("НачальныйОстаток,Приход,Расход,Оборот,КонечныйОстаток,Остаток,");
		ПолеВыборВал = Неопределено;
		Для каждого Суффикс Из Суффиксы Цикл
			Если ПустаяСтрока(Суффикс) Тогда
				ИмяПоляВал = ИмяПоля+"Вал";
			Иначе
				Позиция = Найти(ИмяПоля, Суффикс);
				Если Позиция=0 Тогда
					Продолжить;
				КонецЕсли;
				ИмяПоляВал = Лев(ИмяПоля, Позиция-1)+"Вал"+Сред(ИмяПоля, Позиция);
			КонецЕсли; 
			ПолеВыборВал = Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляВал));
			Если ПолеВыборВал=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Прервать;
		КонецЦикла;
		Если НЕ ПолеВыборВал=Неопределено Тогда
			НовыйРесурс = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			НовыйРесурс.ПутьКДанным = ИмяПоля;
			НовыйРесурс.Выражение = "СУММА("+ИмяПоляВал+")";
			Для каждого Группировка Из ГруппировкиСВалютами Цикл
				НовыйРесурс.Группировки.Добавить(Группировка);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Обновляет состав дополнительных вычисляемых полей для поддержки режима сравнения
//
// Параметры:
//    СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//    Настройки - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета
//    ПараметрыФормирования - Структура - Служебные параметры формирования отчета
//
Процедура ОбновитьПоляСравнения(СхемаКомпоновкиДанных, НастройкиОтчета, ПараметрыФормирования) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыФормирования.Сравнение) Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиОтчета.Структура.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	Для каждого ЭлементСтруктуры Из НастройкиОтчета.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры)=Тип("ТаблицаКомпоновкиДанных") Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Если НЕ ТипЗнч(ЭлементСтруктуры)=Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Структура = ЭлементСтруктуры.Колонки;
	Если Структура.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	ИмяПоляСравнения = ПараметрыФормирования.Сравнение;
	СписокПоказателей = СписокПоказателей(НастройкиОтчета);
	
	Если НЕ НастройкиОтчета.ДополнительныеСвойства.Свойство("ПоказыватьАбсолютноеИзменение") Тогда
		НастройкиОтчета.ДополнительныеСвойства.Вставить("ПоказыватьАбсолютноеИзменение", Ложь);
	КонецЕсли; 
	Если НЕ НастройкиОтчета.ДополнительныеСвойства.Свойство("ПоказыватьОтносительноеИзменение") Тогда
		НастройкиОтчета.ДополнительныеСвойства.Вставить("ПоказыватьОтносительноеИзменение", Ложь);
	КонецЕсли; 
	Если НЕ НастройкиОтчета.ДополнительныеСвойства.Свойство("ПоказыватьПиктограммки") Тогда
		НастройкиОтчета.ДополнительныеСвойства.Вставить("ПоказыватьПиктограммки", Ложь);
	КонецЕсли;
	Если НЕ НастройкиОтчета.ДополнительныеСвойства.Свойство("Сравнение") Тогда
		НастройкиОтчета.ДополнительныеСвойства.Вставить("Сравнение", Неопределено);
	КонецЕсли;
	
	НастройкиВыбор = НастройкиОтчета.Выбор.Элементы;
	Для каждого Показатель Из СписокПоказателей Цикл
		ИменаПолей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1Иконка,%1Разница,%1Прирост", Показатель.Значение);
		УдалитьПоляСравнения(ИменаПолей, НастройкиВыбор, СхемаКомпоновкиДанных);
		Если НЕ ТипЗнч(НастройкиОтчета.ДополнительныеСвойства.Сравнение)=Тип("ПеречислениеСсылка.Периодичность") Тогда
			// Ресурсы сравнения добавляем только при сравнении периодов
			Продолжить;
		КонецЕсли;
		Для каждого ПолеИтога Из СхемаКомпоновкиДанных.ПоляИтога Цикл
			Если НЕ ПолеИтога.ПутьКДанным=Показатель.Значение Тогда
				Продолжить;
			КонецЕсли;
			Выражение = ПолеИтога.Выражение;
			// Иконка
			Если НЕ НастройкиОтчета.ДополнительныеСвойства.Сравнение=Неопределено И Показатель.Пометка Тогда
				ИмяПоля = Показатель.Значение+"Иконка";
				ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
				ВычисляемоеПоле.ПутьКДанным = ИмяПоля;
				ПараметрыФормирования.СтруктураПолейСравнения.Вставить(ИмяПоля);
				ВычисляемоеПоле.Выражение = Показатель.Значение;
				ВычисляемоеПоле.Заголовок = " ";
				ВычисляемоеПоле.Оформление.УстановитьЗначениеПараметра("МаксимальнаяШирина", 2);
				Ресурс = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
				Ресурс.ПутьКДанным = ВычисляемоеПоле.ПутьКДанным;
				Ресурс.Группировки.Очистить();
				Для каждого ИмяГруппировки Из ПолеИтога.Группировки Цикл
					Ресурс.Группировки.Добавить(ИмяГруппировки); 
				КонецЦикла; 
				Ресурс.Выражение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ВЫБОР КОГДА ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"",,, ""Текущая"", ""Текущая""),0)= 
				|ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""ДинамическийПериод"",, ""Предыдущая"", ""Предыдущая""),0) ТОГДА Неопределено
				|КОГДА ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"",,, ""Текущая"", ""Текущая""),0)> 
				|ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""ДинамическийПериод"",, ""Предыдущая"", ""Предыдущая""),0) ТОГДА &СтрелкаВверх
				|КОГДА ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"",,, ""Текущая"", ""Текущая""),0)< 
				|ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""ДинамическийПериод"",, ""Предыдущая"", ""Предыдущая""),0) ТОГДА &СтрелкаВниз
				|КОНЕЦ",
				СтрЗаменить(Выражение, """-""", "0"));
				Если НЕ ПолеВыбораСуществует(НастройкиОтчета, Новый ПолеКомпоновкиДанных(ИмяПоля)) Тогда
					НовыйПоказатель = НастройкиВыбор.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					НовыйПоказатель.Использование = Истина;
					НовыйПоказатель.Поле = Новый ПолеКомпоновкиДанных(ВычисляемоеПоле.ПутьКДанным);
					НовыйПоказатель.Заголовок = ВычисляемоеПоле.Заголовок;
				КонецЕсли; 
				Если СхемаКомпоновкиДанных.Параметры.Найти("СтрелкаВверх")=Неопределено Тогда
					Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
					Параметр.Имя = "СтрелкаВверх";
					Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
					Параметр.Значение = Новый ХранилищеЗначения(БиблиотекаКартинок.ЗначениеУвеличилось);
				КонецЕсли; 
				Если СхемаКомпоновкиДанных.Параметры.Найти("СтрелкаВниз")=Неопределено Тогда
					Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
					Параметр.Имя = "СтрелкаВниз";
					Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
					Параметр.Значение = Новый ХранилищеЗначения(БиблиотекаКартинок.ЗначениеУменьшилось);
				КонецЕсли; 
			КонецЕсли; 
			// + / -
			Если НастройкиОтчета.ДополнительныеСвойства.ПоказыватьАбсолютноеИзменение И Показатель.Пометка Тогда
				ИмяПоля = Показатель.Значение+"Разница";
				ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
				ВычисляемоеПоле.ПутьКДанным = ИмяПоля;
				ПараметрыФормирования.СтруктураПолейСравнения.Вставить(ИмяПоля);
				ВычисляемоеПоле.Выражение = Показатель.Значение;
				ВычисляемоеПоле.Заголовок = НСтр("ru = 'Разница'");
				Ресурс = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
				Ресурс.ПутьКДанным = ВычисляемоеПоле.ПутьКДанным;
				Ресурс.Группировки.Очистить();
				Для каждого ИмяГруппировки Из ПолеИтога.Группировки Цикл
					Ресурс.Группировки.Добавить(ИмяГруппировки); 
				КонецЦикла; 
				Ресурс.Выражение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"",,, ""Текущая"", ""Текущая""),0) - 
				|ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""ДинамическийПериод"",, ""Предыдущая"", ""Предыдущая""),0)",
				СтрЗаменить(Выражение, """-""", "0"));
				Если НЕ ПолеВыбораСуществует(НастройкиОтчета, Новый ПолеКомпоновкиДанных(ИмяПоля)) Тогда
					НовыйПоказатель = НастройкиВыбор.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					НовыйПоказатель.Использование = Истина;
					НовыйПоказатель.Поле = Новый ПолеКомпоновкиДанных(ВычисляемоеПоле.ПутьКДанным);
					НовыйПоказатель.Заголовок = ВычисляемоеПоле.Заголовок;
				КонецЕсли; 
			КонецЕсли; 
			// %
			Если НастройкиОтчета.ДополнительныеСвойства.ПоказыватьОтносительноеИзменение И Показатель.Пометка Тогда
				ИмяПоля = Показатель.Значение+"Прирост";
				ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
				ВычисляемоеПоле.ПутьКДанным = ИмяПоля;
				ПараметрыФормирования.СтруктураПолейСравнения.Вставить(ИмяПоля);
				ВычисляемоеПоле.Выражение = Показатель.Значение;
				ВычисляемоеПоле.Заголовок = НСтр("ru = '%'");
				ДобавитьУФФормат(ЭлементСтруктуры, ВычисляемоеПоле.ПутьКДанным, "ЧДЦ=2");
				Ресурс = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
				Ресурс.ПутьКДанным = ВычисляемоеПоле.ПутьКДанным;
				Ресурс.Группировки.Очистить();
				Для каждого ИмяГруппировки Из ПолеИтога.Группировки Цикл
					Ресурс.Группировки.Добавить(ИмяГруппировки); 
				КонецЦикла; 
				Ресурс.Выражение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ВЫБОР КОГДА ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""ДинамическийПериод"",, ""Предыдущая"", ""Предыдущая""),0)=0 
				|ТОГДА 0 ИНАЧЕ (ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"",,, ""Текущая"", ""Текущая""),0) - 
				|ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""ДинамическийПериод"",, ""Предыдущая"", ""Предыдущая""),0))/
				|ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""ДинамическийПериод"",, ""Предыдущая"", ""Предыдущая""),0)*100 КОНЕЦ",
				СтрЗаменить(Выражение, """-""", "0"));
				Если НЕ ПолеВыбораСуществует(НастройкиОтчета, Новый ПолеКомпоновкиДанных(ИмяПоля)) Тогда
					НовыйПоказатель = НастройкиВыбор.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					НовыйПоказатель.Использование = Истина;
					НовыйПоказатель.Поле = Новый ПолеКомпоновкиДанных(ВычисляемоеПоле.ПутьКДанным);
					НовыйПоказатель.Заголовок = ВычисляемоеПоле.Заголовок;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

// Выводит картинки из данных расшифровки в отчет. Используется в режиме сравнения
//
// Параметры:
//    ЭлементРезультата - ЭлементРезультатаКомпоновкиДанных - Элемент результата выполнения компоновки данных
//    ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки
//    ДокументРезультат - ТабличныйДокумент - Результат компоновки отчета
//    ПараметрыФормирования - Структура - Служебные параметры формирования отчета
//
Процедура ВывестиКартинкиВЭлементРезультата(ЭлементРезультата, ДанныеРасшифровки, ДокументРезультат, ПараметрыФормирования) Экспорт
	
	Если ЭлементРезультата.ЗначенияПараметров.Количество() = 0 Тогда 
		Возврат; 
	КонецЕсли;

	Для Каждого ЭлементПараметра Из ЭлементРезультата.ЗначенияПараметров Цикл
		Если ТипЗнч(ЭлементПараметра.Значение) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			Поля = ДанныеРасшифровки.Элементы[ЭлементПараметра.Значение].ПолучитьПоля();
			Для Каждого Поле Из Поля Цикл
				Если НЕ ПараметрыФормирования.ПорядокГруппировокЗаполнен Тогда
					Если ПараметрыФормирования.СтруктураПолейСравнения.Количество()=0 Тогда
						ПараметрыФормирования.ПорядокГруппировокЗаполнен = Истина;
					ИначеЕсли НЕ Поле.Поле=ПараметрыФормирования.ГруппировкаКолонок И НЕ Поле.Поле=ПараметрыФормирования.Сравнение Тогда
						ПараметрыФормирования.ПорядокГруппировокЗаполнен = Истина;
					Иначе
						Если НЕ ПараметрыФормирования.Свойство("ПерваяКолонка") Тогда
							ПараметрыФормирования.Вставить("ПерваяКолонка", ДокументРезультат.ШиринаТаблицы-ПараметрыФормирования.СтруктураПолейСравнения.Количество()+1);
						КонецЕсли; 
						ПараметрыФормирования.ПорядокГруппировок.Добавить(Поле.Поле);
					КонецЕсли; 
				КонецЕсли; 
				Если ТипЗнч(Поле.Значение)=Тип("ХранилищеЗначения") ТОгда
					Картинка = Поле.Значение.Получить();
					Для НомерКолонки = 1 По ДокументРезультат.ШиринаТаблицы Цикл
						ОбластьЯчейки = ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, НомерКолонки, ДокументРезультат.ВысотаТаблицы, НомерКолонки);
						Если ЭлементПараметра.Значение=ОбластьЯчейки.Расшифровка Тогда
							Изображение = ДокументРезультат.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
							Изображение.РазмерКартинки = РазмерКартинки.АвтоРазмер;
							Изображение.Картинка = Картинка;
							Изображение.ГраницаСверху = Ложь;
							Изображение.ГраницаСнизу = Ложь;
							Изображение.ГраницаСправа = Ложь;
							Изображение.ГраницаСлева = Ложь;
							Изображение.ГраницаСлева = Ложь;
							Изображение.ЦветФона = Новый Цвет;
							Изображение.Расположить(ОбластьЯчейки);
							ОбластьЯчейки.Текст = "";
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

// Служебные операции после формирования отчета
//    * Удаление лишних колонок для отчетов в режиме сравнения
//    * Обработка диаграмм табличного документа
//
// Параметры:
//    ДокументРезультат - ТабличныйДокумент - Результат компоновки отчета
//    ПараметрыФормирования - Структура - Служебные параметры формирования отчета
//
Процедура ВыполнитьОперацииПослеФормирования(ДокументРезультат, ПараметрыФормирования) Экспорт
	
	ОбластиКУдалению = Новый Массив;
	
	ВыводитьСравнение = Ложь;
	Если ПараметрыФормирования.Свойство("СтруктураПолейСравнения") И ПараметрыФормирования.Свойство("ПерваяКолонка") И ПараметрыФормирования.ПерваяКолонка>0 Тогда
		ПараметрыФормирования.ПорядокГруппировок.Добавить("ОбщиеИтоги");
		ИндексПоля = 0;
		Для каждого Поле Из ПараметрыФормирования.ПорядокГруппировок Цикл
			Если Поле=ПараметрыФормирования.Сравнение Тогда
				Если НЕ ВыводитьСравнение Тогда
					// Для первых колонок сравненеи скрываем
					Позиция = ПараметрыФормирования.ПерваяКолонка+ИндексПоля*(ПараметрыФормирования.СтруктураПолейСравнения.Количество()+1);
					ОбластиКУдалению.Вставить(0, ДокументРезультат.Область(,Позиция,,Позиция+ПараметрыФормирования.СтруктураПолейСравнения.Количество()-1));
				КонецЕсли; 
				ВыводитьСравнение = Истина;
			Иначе
				// Для группировки колонок сравнение всегда скрывается
				Позиция = ПараметрыФормирования.ПерваяКолонка+ИндексПоля*(ПараметрыФормирования.СтруктураПолейСравнения.Количество()+1);
				ОбластиКУдалению.Вставить(0, ДокументРезультат.Область(,Позиция,,Позиция+ПараметрыФормирования.СтруктураПолейСравнения.Количество()-1));
				ВыводитьСравнение = Ложь;
			КонецЕсли;
			ИндексПоля = ИндексПоля+1;
		КонецЦикла; 
	КонецЕсли;
	
	Для каждого Область Из ОбластиКУдалению Цикл
		ДокументРезультат.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЦикла;
	
	ОбоработатьДиаграммыТабличногоДокумента(ДокументРезультат);
	
КонецПроцедуры

// Приведение к общему виду диаграмм табличного документа
//
// Параметры:
//    ДокументРезультат - ТабличныйДокумент - Результат компоновки отчета
//
Процедура ОбоработатьДиаграммыТабличногоДокумента(ДокументРезультат) Экспорт
	
	ТонкаяЛиния = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	ТолстаяЛиния = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
	ЦветаСерий = ЦветаСерийДиаграмм32();
	// Если точек на диаграмме меньше, то серии рисуем толстой линией, если больше - то тонкой
	МаксТочекДиаграммыСТолстойЛинией = 10;
	ПроцентОграничения = 20;
	
	Для каждого Рисунок Из ДокументРезультат.Рисунки Цикл
		Если НЕ Рисунок.ТипРисунка=ТипРисункаТабличногоДокумента.Диаграмма Тогда
			Продолжить;
		КонецЕсли;
		Рисунок.Высота = 95;
		Рисунок.Ширина = 180;
		Диаграмма = Рисунок.Объект;
		Диаграмма.ОтображатьЗаголовок = Ложь;
		Для ИндексСерии = 0 По Диаграмма.Серии.Количество() - 1 Цикл
			Серия = Диаграмма.Серии[ИндексСерии];
			Если НЕ ЗначениеЗаполнено(Серия.Значение) Тогда
				Серия.Значение = НСтр("ru = '<Не указано>'")
			КонецЕсли; 
			Если ИндексСерии<ЦветаСерий.Количество() Тогда
				Серия.Цвет = ЦветаСерий[ИндексСерии];
			Иначе
				Серия.Цвет = ЦветаСерий[ИндексСерии%ЦветаСерий.Количество()];
			КонецЕсли;
			Если Диаграмма.Точки.Количество() > МаксТочекДиаграммыСТолстойЛинией Тогда
				Серия.Линия = ТонкаяЛиния;
			Иначе
				Серия.Линия = ТолстаяЛиния;
			КонецЕсли;
		КонецЦикла;
		
		ЭтоГистограмма = (Диаграмма.ТипДиаграммы=ТипДиаграммы.Гистограмма 
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаОбъемная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаНормированная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаНормированнаяОбъемная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаСНакоплением
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаСНакоплениемОбъемная);
		ЭтоГоризонтальнаяГистограмма = (Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаГоризонтальная 
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаНормированнаяГоризонтальная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаНормированнаяГоризонтальнаяОбъемная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаСНакоплениемГоризонтальная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная);
		ЭтоГрафик = (Диаграмма.ТипДиаграммы=ТипДиаграммы.График 
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГрафикПоШагам
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГрафикСНакоплением
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГрафикСОбластями
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГрафикСОбластямиИНакоплением
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГрафикСОбластямиНормированный);
		ЭтоКруговаяДиаграмма = (Диаграмма.ТипДиаграммы=ТипДиаграммы.Круговая 
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.КруговаяОбъемная);
		
		Если Диаграмма.Серии.Количество()<=5 Тогда
			СвернутоСерий = 0;
		ИначеЕсли ЭтоГистограмма ИЛИ ЭтоГрафик Тогда
			ВыводимыеСерии = Новый Массив;
			МаксимальноеЗначение = 0;
			СоответствиеСерий = Новый Соответствие;
			Для ИндексТочки = 0 По Диаграмма.Точки.Количество() - 1 Цикл
				Точка = Диаграмма.Точки[ИндексТочки];
				Для ИндексСерии = 0 По Диаграмма.Серии.Количество() - 1 Цикл
					Серия = Диаграмма.Серии[ИндексСерии];
					Значение = Диаграмма.ПолучитьЗначение(Точка, Серия).Значение;
					Значение = ?(ЗначениеЗаполнено(Значение), Значение, 0);
					МаксимальноеЗначение = Макс(МаксимальноеЗначение, Значение);
					ТекущееЗначение = СоответствиеСерий.Получить(Серия);
					Если НЕ ТипЗнч(ТекущееЗначение)=Тип("Число") ИЛИ Значение>ТекущееЗначение Тогда
						СоответствиеСерий.Вставить(Серия, Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЦикла;
			Ограничение = МаксимальноеЗначение*ПроцентОграничения/100;
			Для каждого Элемент Из СоответствиеСерий Цикл
				Если Элемент.Значение>=Ограничение И ВыводимыеСерии.Найти(Элемент.Ключ)=Неопределено Тогда
					ВыводимыеСерии.Добавить(Элемент.Ключ);
				КонецЕсли; 
			КонецЦикла; 
			СвернутоСерий = (Диаграмма.Серии.Количество()-ВыводимыеСерии.Количество());
		ИначеЕсли ЭтоКруговаяДиаграмма Тогда
			СвернутоСерий = (Диаграмма.Серии.Количество()-10);
		КонецЕсли;
		
		Диаграмма.СводнаяСерия.Цвет = ЦветаСтиля.ЦветДиаграммыОтсутствующиеДанные;
		Диаграмма.СводнаяСерия.Текст = НСтр("ru = 'Прочее'");
		Если ЗначениеЗаполнено(СвернутоСерий) Тогда
			Диаграмма.СводнаяСерия.Текст = Диаграмма.СводнаяСерия.Текст+" ("+Формат(СвернутоСерий, "ЧГ=0")+")";
		КонецЕсли; 
		Если ЭтоГрафик Тогда
			Диаграмма.ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Горизонтально;
			Если Диаграмма.Серии.Количество()>5 Тогда
				Диаграмма.МаксимумСерий = МаксимумСерий.Процент;
				Диаграмма.МаксимумСерийПроцент = ПроцентОграничения;
			КонецЕсли; 
			Диаграмма.ОбластьПостроения.Право = 0.75;
			Диаграмма.ОбластьПостроения.Низ = 0.99;
			Диаграмма.ОбластьЛегенды.Лево = 0.76;
			Диаграмма.ОбластьЛегенды.Верх = 0;
			Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Нет;
		ИначеЕсли ЭтоГистограмма ИЛИ ЭтоГоризонтальнаяГистограмма Тогда
			Если ЭтоГистограмма Тогда
				Диаграмма.ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Вертикально;
			Иначе
				Диаграмма.ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Горизонтально;
			КонецЕсли; 
			Если Диаграмма.Серии.Количество()>5 Тогда
				Диаграмма.МаксимумСерий = МаксимумСерий.Процент;
				Диаграмма.МаксимумСерийПроцент = ПроцентОграничения;
			КонецЕсли; 
			Диаграмма.ОбластьПостроения.Право = 0.75;
			Диаграмма.ОбластьПостроения.Низ = 0.99;
			Диаграмма.ОбластьЛегенды.Лево = 0.76;
			Диаграмма.ОбластьЛегенды.Верх = 0;
			Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Нет;
		ИначеЕсли ЭтоКруговаяДиаграмма Тогда
			Диаграмма.МаксимумСерий = МаксимумСерий.Ограничено;
			Диаграмма.МаксимумСерийКоличество = 10;
			Диаграмма.ОбластьПостроения.Право = 0.65;
			Диаграмма.ОбластьПостроения.Низ = 0.99;
			Диаграмма.ОбластьЛегенды.Лево = 0.66;
			Диаграмма.ОбластьЛегенды.Верх = 0;
			Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Процент;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив цветов стандартной палитры диаграмм
//
// Возвращаемое значение: 
//   * Массив - Массив элементов типа Цвет
//
Функция ЦветаСерийДиаграмм32() Экспорт
	
	Цвета = Новый Массив;
	Цвета.Добавить(Новый Цвет(245, 152, 150));
	Цвета.Добавить(Новый Цвет(142, 201, 249));
	Цвета.Добавить(Новый Цвет(255, 202, 125));
	Цвета.Добавить(Новый Цвет(178, 154, 218));
	Цвета.Добавить(Новый Цвет(163, 214, 166));
	Цвета.Добавить(Новый Цвет(244, 140, 175));
	Цвета.Добавить(Новый Цвет(125, 221, 233));
	Цвета.Добавить(Новый Цвет(255, 242, 128));
	Цвета.Добавить(Новый Цвет(205, 145, 215));
	Цвета.Добавить(Новый Цвет(125, 202, 194));
	//10
	Цвета.Добавить(Новый Цвет(229, 216, 165));
	Цвета.Добавить(Новый Цвет(178, 136, 143));
	Цвета.Добавить(Новый Цвет(135, 151, 106));
	Цвета.Добавить(Новый Цвет(94, 163, 153));
	Цвета.Добавить(Новый Цвет(163, 137, 109));
	Цвета.Добавить(Новый Цвет(169, 155, 174));
	Цвета.Добавить(Новый Цвет(122, 131, 135));
	Цвета.Добавить(Новый Цвет(132, 122, 112));
	Цвета.Добавить(Новый Цвет(240, 185, 200));
	Цвета.Добавить(Новый Цвет(158, 152, 131));
	//20
	Цвета.Добавить(Новый Цвет(107, 195, 102));
	Цвета.Добавить(Новый Цвет(188, 255, 189));
	Цвета.Добавить(Новый Цвет(150, 197, 191));
	Цвета.Добавить(Новый Цвет(193, 146, 64));
	Цвета.Добавить(Новый Цвет(197, 146, 250));
	Цвета.Добавить(Новый Цвет(210, 110, 71));
	Цвета.Добавить(Новый Цвет(158, 140, 255));
	Цвета.Добавить(Новый Цвет(114, 149, 92));
	Цвета.Добавить(Новый Цвет(126, 144, 230));
	Цвета.Добавить(Новый Цвет(252, 119, 87));
	//30
	Цвета.Добавить(Новый Цвет(127, 192, 255));
	Цвета.Добавить(Новый Цвет(179, 114, 101));
	Возврат Цвета;
	
КонецФункции
 
#КонецОбласти 

// Возвращает поле схемы компоновки данных по имени или полю компоновки данных
//
// Параметры:
//   Схема - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//   Поле - Строка, ПолеКомпоновкиДанных - Поле компоновки для которого нужно получить соответствующее поле схемы
//
// Возвращаемое значение: 
//   * ПолеНабораДанныхСхемыКомпоновкиДанных,ВычисляемоеПолеСхемыКомпоновкиДанных - Найденное поле схемы компоновки данных
//   * Неопределено                                                               - Если поле не найдено
//
Функция ПолеСхемы(Схема, Поле) Экспорт
	
	ИмяПоля = Строка(Поле);
	Если ПустаяСтрока(ИмяПоля) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Для каждого Набор Из Схема.НаборыДанных Цикл
		ПолеСхемы = Набор.Поля.Найти(ИмяПоля);
		Если НЕ ПолеСхемы=Неопределено Тогда
			Возврат ПолеСхемы;
		КонецЕсли;  
	КонецЦикла;
	ПолеСхемы = Схема.ВычисляемыеПоля.Найти(ИмяПоля);
	Если НЕ ПолеСхемы=Неопределено Тогда
		Возврат ПолеСхемы;
	КонецЕсли; 
	Возврат Неопределено;
	
КонецФункции

// Возвращает таблицу периодов для заданного промежутка 
//
// Параметры:
//   НачалоПериода - Дата - Дата начала определения периодов
//   КонецПериода - Дата - Дата конца определения периодов
//   ПараметрыОтчета - Структура - Служебные параметры формирования отчета
//
// Возвращаемое значение: 
//   * ТаблицаЗначений - Таблица периодов с колонками ПериодНачало, ПериодКонец
//
Функция ТаблицаПериодов(НачалоПериода, КонецПериода, ПараметрыОтчета) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПериодНачало");
	Результат.Колонки.Добавить("ПериодКонец");
	
	Если ПараметрыОтчета.Периодичность <> Перечисления.Периодичность.ПустаяСсылка() Тогда
		Периодичность = ПараметрыОтчета.Периодичность;
	Иначе
		Периодичность = УправлениеНебольшойФирмойОтчеты.ПолучитьЗначениеПериодичности(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	КонецЕсли;
	
	ТекущаяДата = НачалоПериода;
	
	Пока ТекущаяДата <= КонецПериода Цикл
		НоваяСтрока = Результат.Добавить();
		Если Периодичность = Перечисления.Периодичность.День Тогда
			НоваяСтрока.ПериодНачало = НачалоДня(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецДня(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
			НоваяСтрока.ПериодНачало = НачалоНедели(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецНедели(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
			НоваяСтрока.ПериодНачало = НачалоДекады(ТекущаяДата);
			НоваяСтрока.ПериодКонец = КонецДекады(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
			НоваяСтрока.ПериодНачало = НачалоМесяца(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецМесяца(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			НоваяСтрока.ПериодНачало = НачалоКвартала(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецКвартала(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
			Если Месяц(ТекущаяДата) > 6 Тогда
				НоваяСтрока.ПериодНачало = НачалоДня(Дата(Год(ТекущаяДата), 7, 1));
				НоваяСтрока.ПериодКонец  = КонецГода(ТекущаяДата);
			Иначе
				НоваяСтрока.ПериодНачало = НачалоДня(Дата(Год(ТекущаяДата), 1, 1));
				НоваяСтрока.ПериодКонец  = КонецМесяца(Дата(Год(ТекущаяДата), 6, 1));
			КонецЕсли;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
			НоваяСтрока.ПериодНачало = НачалоГода(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецГода(ТекущаяДата);
		Иначе
			ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Отсутствует обработчик параметра Периодичность = ""%1"".'"),
			Периодичность);
		КонецЕсли;
		ТекущаяДата = НоваяСтрока.ПериодКонец + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает начало декады для заданной даты
//
// Параметры:
//    ПараметрДата - Дата - Дата определения начала декады
//
// Возвращаемое значение: 
//    * Дата - Дата начала декады
//
Функция НачалоДекады(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если День(ПараметрДата) < 11 Тогда
		Возврат Дата(Год(ПараметрДата), Месяц(ПараметрДата), 1);
	КонецЕсли;
	
	Если День(ПараметрДата) < 21 Тогда
		Возврат Дата(Год(ПараметрДата), Месяц(ПараметрДата), 11);
	КонецЕсли;
	
	Возврат Дата(Год(ПараметрДата), Месяц(ПараметрДата), 21);
	
КонецФункции

// Возвращает конец декады для заданной даты
//
// Параметры:
//    ПараметрДата - Дата - Дата определения конца декады
//
// Возвращаемое значение: 
//    * Дата - Дата конца декады
//
Функция КонецДекады(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если День(ПараметрДата) >= 21 Тогда
		Возврат КонецМесяца(ПараметрДата);
	КонецЕсли;
	
	Если День(ПараметрДата) >= 11 Тогда
		Возврат КонецДня(Дата(Год(ПараметрДата), Месяц(ПараметрДата), 20));
	КонецЕсли;
	
	Возврат КонецДня(Дата(Год(ПараметрДата), Месяц(ПараметрДата), 10));
	
КонецФункции

// Возвращает преобразованную дату, для которой актуальными остается только месяц, остальные части даты сбрасываются 
//
// Параметры:
//    ПараметрДата - Дата - Дата определения месяца
//
// Возвращаемое значение: 
//    * Дата - Дата содержащая месяц
//
Функция МесяцГода(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Дата(1900, Месяц(ПараметрДата), 1, 0, 0, 0);		
	
КонецФункции

// Возвращает преобразованную дату, для которой актуальными остается только месяц и день, остальные части даты сбрасываются 
//
// Параметры:
//    ПараметрДата - Дата - Дата определения месяца и дня
//
// Возвращаемое значение: 
//    * Дата - Дата содержащая месяц и день
//
Функция ДеньМесяцГода(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Дата(1900, Месяц(ПараметрДата), День(ПараметрДата), 0, 0, 0);		
	
КонецФункции

// Возвращает номер недели года. Используется в вычисляемых полях отчетов
//
// Параметры:
//    ПараметрДата - Дата - Дата определения номера недели
//
// Возвращаемое значение: 
//    * Число - Номер недели года
//
Функция НомерНеделиГода(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НеделяГода(ПараметрДата);		
	
КонецФункции

// Возвращает исходный текст, очищенный от html-тегов
//
// Параметры:
//    Текст - Строка - Текст с тегами
//
// Возвращаемое значение: 
//    * Строка - Текст с удаленными тегами
//
Функция ТекстБезТегов(Текст) Экспорт
	
	Результат = "";
	ОстатокСтроки = Текст;
	Позиция = Найти(ОстатокСтроки, "<");
	Пока Позиция>0 Цикл
		ТекстДо = Лев(ОстатокСтроки, Позиция-1);
		Результат = Результат+ТекстДо;
		ОстатокСтроки = Сред(ОстатокСтроки, Позиция);
		ПозицияКонца = Найти(ОстатокСтроки, ">");
		Если ПозицияКонца=0 Тогда
			ОстатокСтроки = "";
			Прервать;
		КонецЕсли; 
		ОстатокСтроки = Сред(ОстатокСтроки, ПозицияКонца+1);
		Позиция = Найти(ОстатокСтроки, "<");
	КонецЦикла;
	Результат = Результат+ОстатокСтроки;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Обновление

// Обновляет настройки встроенных и дополнительных отчетов 
// в регистрах сведений НастройкиВариантовОтчетовУНФ и ПривязкаПолейОтчетовУНФ
//
// Параметры:
//   СтруктураПараметров  - не используется
//
Процедура Обновить(СтруктураПараметров = Неопределено) Экспорт
	
	ОбновитьОтчеты();
	
КонецПроцедуры

// Актуализирует данные справочника ТегиОтчетов
//
// Параметры:
//   СтруктураПараметров  - не используется
//
Процедура ОбновитьТегиОтчетов(СтруктураПараметров = Неопределено) Экспорт
	
	АктулизироватьТеги(); 
	
КонецПроцедуры

// Обновляет настройки отчетов по списку 
//    в регистрах сведений НастройкиВариантовОтчетовУНФ и ПривязкаПолейОтчетовУНФ;
//    добавляет отсутствующие элементы в справочник ТегиОтчетов
//
// Параметры:
//   МассивОтчетов  - Массив значений типа ОбъектМетаданных, Строка или СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//      массив отчетов, служебные данные которых требуется обновить
//
Процедура ОбновитьОтчетыВыборочно(МассивОтчетов) Экспорт
	
	МассивИдентификаторов = МассивОтчетовВМассивИдентификаторов(МассивОтчетов);
	ОбновитьОтчеты(МассивИдентификаторов);
	АктулизироватьТеги(МассивИдентификаторов);
	
КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыСозданияЭлементов

// Добавляет фильтр на форму отчета
//
// Параметры:
//   Стр - ДанныеФормыЭлементДерева или СтрокаДереваЗначений - строка описания фильтра
//   Форма - УправляемаяФорма - Экземпляр формы отчета, на которую добавляется фильтр
//   ПараметрыВыбора - ФиксированныйМассив - Фиксированный массив элементов типа ПараметрВыбора
//   СвязиПараметровВыбора - ФиксированныйМассив - Фиксированный массив элементов типа СвязьПараметраВыбора
//
// Места использования:
//   ОбщаяФорма.ОтчетыУНФ.ВнестиИзмененияВРеквизитыНаФорме()
//
Процедура ДобавитьЭлементФильтр(Стр, Форма, ПараметрыВыбора, СвязиПараметровВыбора) Экспорт
	
	Элементы = Форма.Элементы;
	Если Стр.ВидЭлемента="Поле" Тогда
		СоздатьФильтрПолеВвода(Стр, Форма, Элементы, ПараметрыВыбора, СвязиПараметровВыбора);
	ИначеЕсли Стр.ВидЭлемента="Период" Тогда
		СоздатьФильтрПериод(Стр, Форма, Элементы);
	ИначеЕсли Стр.ВидЭлемента="Пределы" Тогда
		СоздатьФильтрПределы(Стр, Форма, Элементы);
	ИначеЕсли Стр.ВидЭлемента="Тумблер" Тогда
		СоздатьФильтрТумблер(Стр, Форма, Элементы);
	ИначеЕсли Стр.ВидЭлемента="Флажок" Тогда
		СоздатьФильтрФлажки(Стр, Форма, Элементы);
	ИначеЕсли Стр.ВидЭлемента="Булево" Тогда
		СоздатьФильтрБулево(Стр, Форма, Элементы);
	Иначе
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ПодпискаНаСобытиеДополнительныйОтчетПриЗаписи(Источник, Отказ) Экспорт
	
	Если НЕ Источник.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет
		И НЕ Источник.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления 
		ИЛИ Источник.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена Тогда
		ОтключитьДополнительныйОтчет(Источник);
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОтчетОбъект = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(Источник.Ссылка);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		КомментарийЗаписиЖурналаРегистрации = СтрШаблон(
		НСтр("ru = 'Ошибка при записи варианта дополнительного отчета ""%1"":
		|%2'"),
		Источник.Наименование,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru ='Запись вариантов дополнительного отчета'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		КомментарийЗаписиЖурналаРегистрации);
		
		Возврат;
		
	КонецПопытки;
	
	МетаданныеОбъекта = ОтчетОбъект.Метаданные();
	
	НастройкиОтчета = Новый Структура;
	ИнициализироватьНастройкиОтчета(НастройкиОтчета);
	НастройкиВариантов = Новый Соответствие;
	Если Источник.ИспользуетХранилищеВариантов Тогда
		ТаблицаВариантов = ТаблицаВариантовПредопределенногоОтчета(Источник.Ссылка);
		Для Каждого Стр Из ТаблицаВариантов Цикл
			НастройкиВариантов[Стр.КлючВарианта] = Новый Структура;
			ИнициализироватьНастройкиВарианта(НастройкиВариантов[Стр.КлючВарианта]);
			НастройкиВариантов[Стр.КлючВарианта].Вставить("Вариант", Стр.Ссылка);
		КонецЦикла;
		ИмяСправочникаОчистки = "ВариантыДополнительныхОтчетов";
	Иначе
		Для каждого Стр Из Источник.Команды Цикл
			НастройкиВариантов[Стр.Идентификатор] = Новый Структура;
			ИнициализироватьНастройкиВарианта(НастройкиВариантов[Стр.Идентификатор]);
		КонецЦикла; 
		НайтиСоздатьДополнительныеВарианты(Источник, НастройкиВариантов);
		ИмяСправочникаОчистки = "ВариантыОтчетов";
	КонецЕсли;
	// Удаление настроек в случае изменения хранилища вариантов отчета
	Если НЕ Источник.ЭтоНовый() Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Отчет", Источник.Ссылка);
		Выборка = Справочники[ИмяСправочникаОчистки].Выбрать(,, Отбор);
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли; 
			Выборка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);	
		КонецЦикла; 
	КонецЕсли; 
	Если НЕ МетаданныеОбъекта.Реквизиты.Найти("ЭтоОтчетУНФ")=Неопределено И ОтчетОбъект.ЭтоОтчетУНФ Тогда
		ОтчетОбъект.ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов);
	КонецЕсли; 
	Для Каждого ОписаниеНастроек Из НастройкиВариантов Цикл
		СтруктураНастроек = ОписаниеНастроек.Значение;
		// Настройки отчета УНФ
		ДобавитьОбразецВСтруктуруНастроекВарианта(СтруктураНастроек, ОтчетОбъект, ОписаниеНастроек.Ключ);
		СтруктураНастроек.Вставить("ЭтоВнешнийОтчет", Истина);
		ОбновитьНастройкиВарианта(СтруктураНастроек.Вариант, СтруктураНастроек, Истина);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПриСозданииНаСервереФормыСвязанногоОбъекта(Форма) Экспорт
	
	ИдентификаторОбъектаМетаданных = ОтчетыУНФПовтИсп.ИдентификаторОбъектаМетаданныхПоИмениФормы(Форма.ИмяФормы);
	Если Не ЗначениеЗаполнено(ИдентификаторОбъектаМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФункциональныхОпций = Новый Структура;
	ПараметрыФункциональныхОпций.Вставить("СвязанныеОтчеты", ИдентификаторОбъектаМетаданных);
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФункциональныхОпций);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область Обновление

Процедура ОбновитьОтчеты(МассивИдентификаторов = Неопределено)
	
	Результаты = РезультатыЗапросаВариантыОтчетов(МассивИдентификаторов);
	
	НачатьТранзакцию();
	
	УдалитьНеактуальныеНастройки(Результаты);
	ОбновитьНастройкиОтчетов(Результаты);
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
КонецПроцедуры

Функция РезультатыЗапросаВариантыОтчетов(МассивИдентификаторов = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчеты", ?(МассивИдентификаторов=Неопределено, Новый Массив, МассивИдентификаторов));
	Запрос.УстановитьПараметр("БезОтбора", НЕ ЗначениеЗаполнено(МассивИдентификаторов));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Отчет КАК Отчет,
	|	ВариантыОтчетов.Ссылка КАК Вариант,
	|	ВариантыОтчетов.КлючВарианта
	|ПОМЕСТИТЬ АктуальныеВарианты
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	НЕ ВариантыОтчетов.ПометкаУдаления
	|	И (&БезОтбора
	|			ИЛИ ВариантыОтчетов.Отчет В (&Отчеты))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработкиКоманды.Ссылка,
	|	ЕСТЬNULL(ВариантыДополнительныхОтчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ВариантыДополнительныхОтчетов.ПустаяСсылка)),
	|	ДополнительныеОтчетыИОбработкиКоманды.Идентификатор
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ДополнительныеОтчетыИОбработкиКоманды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|		ПО ДополнительныеОтчетыИОбработкиКоманды.Ссылка = ВариантыДополнительныхОтчетов.Отчет
	|			И ДополнительныеОтчетыИОбработкиКоманды.Идентификатор = ВариантыДополнительныхОтчетов.ИдентификаторКоманды
	|ГДЕ
	|	НЕ ДополнительныеОтчетыИОбработкиКоманды.Ссылка.ПометкаУдаления
	|	И НЕ ДополнительныеОтчетыИОбработкиКоманды.Ссылка.ИспользуетХранилищеВариантов
	|	И (ДополнительныеОтчетыИОбработкиКоманды.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет)
	|			ИЛИ ДополнительныеОтчетыИОбработкиКоманды.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.Отчет))
	|	И &БезОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиВариантовОтчетовУНФ.Вариант
	|ИЗ
	|	РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|ГДЕ
	|	НЕ НастройкиВариантовОтчетовУНФ.Вариант В
	|				(ВЫБРАТЬ
	|					АктуальныеВарианты.Вариант
	|				ИЗ
	|					АктуальныеВарианты КАК АктуальныеВарианты)
	|	И (&БезОтбора
	|			ИЛИ НастройкиВариантовОтчетовУНФ.Вариант.Отчет В (&Отчеты))
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиВариантовОтчетовУНФ.Вариант
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПривязкаПолейОтчетовУНФ.Вариант
	|ИЗ
	|	РегистрСведений.ПривязкаПолейОтчетовУНФ КАК ПривязкаПолейОтчетовУНФ
	|ГДЕ
	|	НЕ ПривязкаПолейОтчетовУНФ.Вариант В
	|				(ВЫБРАТЬ
	|					АктуальныеВарианты.Вариант
	|				ИЗ
	|					АктуальныеВарианты КАК АктуальныеВарианты)
	|	И (&БезОтбора
	|			ИЛИ ПривязкаПолейОтчетовУНФ.Вариант.Отчет В (&Отчеты))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПривязкаПолейОтчетовУНФ.Вариант
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальныеВарианты.Отчет КАК Отчет,
	|	АктуальныеВарианты.Вариант,
	|	АктуальныеВарианты.КлючВарианта
	|ИЗ
	|	АктуальныеВарианты КАК АктуальныеВарианты
	|ИТОГИ ПО
	|	Отчет";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Процедура УдалитьНеактуальныеНастройки(Результаты)
	
	ВыборкаНастройки = Результаты[1].Выбрать();
	Пока ВыборкаНастройки.Следующий() Цикл
		Набор = РегистрыСведений.НастройкиВариантовОтчетовУНФ.СоздатьНаборЗаписей();
		Набор.Отбор.Вариант.Установить(ВыборкаНастройки.Вариант);
		Набор.Записать(Истина);
	КонецЦикла; 
	
	ВыборкаПоля = Результаты[2].Выбрать();
	Пока ВыборкаПоля.Следующий() Цикл
		Набор = РегистрыСведений.ПривязкаПолейОтчетовУНФ.СоздатьНаборЗаписей();
		Набор.Отбор.Вариант.Установить(ВыборкаНастройки.Вариант);
		Набор.Записать(Истина);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбновитьНастройкиОтчетов(Результаты)
	
	ВыборкаОтчеты = Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОтчеты.Следующий() Цикл
		НастройкиОтчета = Новый Структура;
		ИнициализироватьНастройкиОтчета(НастройкиОтчета);
		НастройкиВариантов = Новый Соответствие;
		Если ТипЗнч(ВыборкаОтчеты.Отчет)=Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
			Попытка
				ОтчетОбъект = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ВыборкаОтчеты.Отчет);
			Исключение
				ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обновить дополнительный внешний отчет ""%1"" по причине:
				|%2'"), 
				ВыборкаОтчеты.Отчет, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ДополнительныеОтчетыИОбработки,
				ВыборкаОтчеты.Отчет,
				ТекстСообщения);
				
				Продолжить;
			КонецПопытки;
			МетаданныеОбъекта = ОтчетОбъект.Метаданные();
		ИначеЕсли ТипЗнч(ВыборкаОтчеты.Отчет)=Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			МетаданныеОбъекта = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ВыборкаОтчеты.Отчет);
			ОтчетОбъект = Новый(Тип("ОтчетОбъект."+МетаданныеОбъекта.Имя));
		Иначе
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ВыборкаОтчеты.Отчет)=Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") И НЕ ВыборкаОтчеты.Отчет.ИспользуетХранилищеВариантов Тогда
			// Для дополнительных отчетов, не использующих хранилище вариантов, требуется актуализация справочника ВариантыДополнительныхОтчетов
			ВыборкаВарианты = ВыборкаОтчеты.Выбрать();
			Пока ВыборкаВарианты.Следующий() Цикл
				СтруктураНастроек = Новый Структура;
				ИнициализироватьНастройкиВарианта(СтруктураНастроек);
				Если ЗначениеЗаполнено(ВыборкаВарианты.Вариант) Тогда
					СтруктураНастроек.Вставить("Вариант", ВыборкаВарианты.Вариант);
				КонецЕсли; 
				НастройкиВариантов[ВыборкаВарианты.КлючВарианта] = СтруктураНастроек;
			КонецЦикла;
			НайтиСоздатьДополнительныеВарианты(ВыборкаОтчеты.Отчет, НастройкиВариантов);
		Иначе
			// Обновление настроек предопределенных вариантов
			Для Каждого Стр Из ТаблицаВариантовПредопределенногоОтчета(ВыборкаОтчеты.Отчет) Цикл
				СтруктураНастроек = Новый Структура;
				ИнициализироватьНастройкиВарианта(СтруктураНастроек);
				СтруктураНастроек.Вставить("Вариант", Стр.Ссылка);
				СтруктураНастроек.Вставить("КлючВарианта", Стр.КлючВарианта);
				НастройкиВариантов[Стр.КлючВарианта] = СтруктураНастроек;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ МетаданныеОбъекта=Неопределено И НЕ МетаданныеОбъекта.Реквизиты.Найти("ЭтоОтчетУНФ")=Неопределено И ОтчетОбъект.ЭтоОтчетУНФ Тогда
			Попытка
				ОтчетОбъект.ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов);
			Исключение
				ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка при вызове обработчика ""ПриОпределенииНастроекОтчета"" в отчете ""%1"" по причине:
				|%2'"), 
				ВыборкаОтчеты.Отчет, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ДополнительныеОтчетыИОбработки,
				ВыборкаОтчеты.Отчет,
				ТекстСообщения);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		Для Каждого ОписаниеНастроек Из НастройкиВариантов Цикл
			СтруктураНастроек = ОписаниеНастроек.Значение;
			Если ПустаяСтрока(ОписаниеНастроек.Ключ) Тогда
				Для каждого Элемент Из НастройкиОтчета Цикл
					СтруктураНастроек.Вставить(Элемент.Ключ, Элемент.Значение);
				КонецЦикла; 
			КонецЕсли; 
			ДобавитьОбразецВСтруктуруНастроекВарианта(СтруктураНастроек, ОтчетОбъект, ОписаниеНастроек.Ключ);
			СтруктураНастроек.Вставить("ЭтоВнешнийОтчет", ТипЗнч(ВыборкаОтчеты.Отчет)=Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
			ОбновитьНастройкиВарианта(СтруктураНастроек.Вариант, СтруктураНастроек);
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиСоздатьДополнительныеВарианты(ДопОтчет, НастройкиВариантов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчет", ДопОтчет.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыДополнительныхОтчетов.Ссылка,
	|	ВариантыДополнительныхОтчетов.ИдентификаторКоманды
	|ИЗ
	|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|ГДЕ
	|	ВариантыДополнительныхОтчетов.Отчет = &Отчет";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Вариант = Выборка.Ссылка.ПолучитьОбъект();
		Вариант.Автор = ДопОтчет.Ответственный;
		Если НЕ НастройкиВариантов.Получить(Выборка.ИдентификаторКоманды)=Неопределено Тогда
			НастройкиВариантов[Выборка.ИдентификаторКоманды].Вставить("Вариант", Выборка.Ссылка);
			Вариант.ПометкаУдаления = ДопОтчет.ПометкаУдаления;
			Вариант.Записать();
		Иначе
			// Устаревший вариант дополнительного отчета
			Вариант.Записать();
			Вариант.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла; 
	
	Если НЕ ДопОтчет.ИспользуетХранилищеВариантов Тогда
		Для каждого Стр Из ДопОтчет.Команды Цикл
			СтруктураНастроек = НастройкиВариантов[Стр.Идентификатор];
			Если СтруктураНастроек.Свойство("Вариант") Тогда
				Продолжить;
			КонецЕсли; 
			Вариант = Справочники.ВариантыДополнительныхОтчетов.СоздатьЭлемент();
			Вариант.Наименование = Стр.Представление;
			Вариант.Отчет = ДопОтчет.Ссылка;
			Вариант.ИдентификаторКоманды = Стр.Идентификатор;
			Вариант.ПометкаУдаления = ДопОтчет.ПометкаУдаления;
			Вариант.Автор = ДопОтчет.Ответственный;
			Вариант.Контекстный = ДопОтчет.Назначение.Количество()>0;
			Вариант.Записать();
			СтруктураНастроек.Вставить("Вариант", Вариант.Ссылка);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьОбразецВСтруктуруНастроекВарианта(СтруктураНастроек, Отчет, КлючВарианта)
	
	МетаданныеОтчета = Отчет.Метаданные();
	
	ИмяМакета = "";
	СтруктураНастроек.Свойство("ИмяМакетаОбразца", ИмяМакета);
	Если НЕ ЗначениеЗаполнено(ИмяМакета) И Найти(КлючВарианта, " ")=0 Тогда
		ИмяМакета = "Образец"+КлючВарианта;
	КонецЕсли;
	Если ПустаяСтрока(ИмяМакета) Тогда
		СтруктураНастроек.Вставить("Образец");
		Возврат;
	КонецЕсли; 
	
	Если МетаданныеОтчета.Макеты.Найти(ИмяМакета)=Неопределено Тогда
		СтруктураНастроек.Вставить("Образец");
		Возврат;
	КонецЕсли; 
	
	Макет = Отчет.ПолучитьМакет(ИмяМакета);
	Если ТипЗнч(Макет)=Тип("ДвоичныеДанные") Тогда
		СтруктураНастроек.Вставить("Образец", Макет);
	Иначе
		СтруктураНастроек.Вставить("Образец");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтключитьДополнительныйОтчет(ДополнительныйОтчет)
	
	Если НЕ ЗначениеЗаполнено(ДополнительныйОтчет.Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДополнительныйОтчет.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыДополнительныхОтчетов.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ДополнительныеОтчетыИОбработкиКоманды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|		ПО ДополнительныеОтчетыИОбработкиКоманды.Ссылка = ВариантыДополнительныхОтчетов.Отчет
	|			И ДополнительныеОтчетыИОбработкиКоманды.Идентификатор = ВариантыДополнительныхОтчетов.ИдентификаторКоманды
	|ГДЕ
	|	ДополнительныеОтчетыИОбработкиКоманды.Ссылка = &Ссылка
	|	И НЕ ВариантыДополнительныхОтчетов.Ссылка ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбновитьНастройкиВарианта(Вариант, СтруктураНастроек, ЗаменятьСуществующие = Ложь)
	
	Запись = РегистрыСведений.НастройкиВариантовОтчетовУНФ.СоздатьМенеджерЗаписи();
	Запись.Вариант = Вариант;
	Запись.Прочитать();
	Если НЕ ЗаменятьСуществующие И Запись.Выбран() И СтруктураНастроек.ЭтоВнешнийОтчет Тогда
		// Настройки дополнительных отчетов автоматически обновляются только один раз
		Возврат;
	КонецЕсли; 
	Если (НЕ Запись.ИзмененаПользователем ИЛИ ЗаменятьСуществующие) И НастройкаОтчетаИзменена(Запись, СтруктураНастроек) Тогда
		Запись.Вариант = Вариант;
		Если СтруктураНастроек.Свойство("Теги") Тогда
			Запись.Теги = СтруктураНастроек.Теги;
		Иначе
			Запись.Теги = "";
		КонецЕсли; 
		Если СтруктураНастроек.Свойство("Рекомендуемый") Тогда
			Запись.Рекомендуемый = СтруктураНастроек.Рекомендуемый;
		Иначе
			Запись.Рекомендуемый = Ложь;
		КонецЕсли; 
		Если СтруктураНастроек.Свойство("ФункциональнаяОпция") Тогда
			Запись.ФункциональнаяОпция = СтруктураНастроек.ФункциональнаяОпция;
		Иначе
			Запись.ФункциональнаяОпция = "";
		КонецЕсли; 
		Если НЕ СтруктураНастроек.Свойство("Образец") ИЛИ НЕ ТипЗнч(СтруктураНастроек.Образец)=Тип("ДвоичныеДанные") Тогда
			Запись.Образец = Новый ХранилищеЗначения(Неопределено);
		Иначе
			Запись.Образец = Новый ХранилищеЗначения(Новый Картинка(СтруктураНастроек.Образец));
		КонецЕсли;
		Запись.ИзмененаПользователем = ЗаменятьСуществующие;
		Запись.Записать(Истина);
	КонецЕсли;
	
	// Связанные поля отчета
	ОбновитьПривязки = Истина;
	Набор = РегистрыСведений.ПривязкаПолейОтчетовУНФ.СоздатьНаборЗаписей();
	Набор.Отбор.Вариант.Установить(Вариант);
	Набор.Прочитать();
	Для каждого Запись Из Набор Цикл
		Если Запись.ИзмененаПользователем Тогда
			// Если редактировалось пользователем - не изменяем
			ОбновитьПривязки = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Если ОбновитьПривязки ИЛИ ЗаменятьСуществующие Тогда
		Набор.Очистить();
		Набор.Записать(Истина);
	КонецЕсли; 
	
	Если СтруктураНастроек.Свойство("СвязанныеПоля") И (ОбновитьПривязки ИЛИ ЗаменятьСуществующие) Тогда
		Для каждого ОписаниеПоля Из СтруктураНастроек.СвязанныеПоля Цикл
			Попытка
				ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОписаниеПоля.Объект);
			Исключение
				ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Неверное описание типа связанного поля ""%1"" в модуле ""%2"", вариант ""%3""'"), 
				ОписаниеПоля.Объект,
				Вариант.Отчет.ПолноеИмя,
				Вариант.КлючВарианта);
				ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.ПривязкаПолейОтчетовУНФ,,
				ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки; 
			Если ЗначениеЗаполнено(ОписаниеПоля.ДополнительныйРазрез) Тогда
				// Если есть настройка с дополнительным разрезом, удаляем общую настроку
				Запись = РегистрыСведений.ПривязкаПолейОтчетовУНФ.СоздатьМенеджерЗаписи();
				Запись.Вариант = Вариант;
				Запись.Объект = ИдентификаторОбъекта;
				Запись.Поле = ОписаниеПоля.Поле;
				Запись.ДополнительныйРазрез = Неопределено;
				Запись.Прочитать();
				Если Запись.Выбран() Тогда
					Запись.Удалить();
				КонецЕсли; 
			КонецЕсли; 
			Запись = РегистрыСведений.ПривязкаПолейОтчетовУНФ.СоздатьМенеджерЗаписи();
			Запись.Вариант = Вариант;
			Запись.Объект = ИдентификаторОбъекта;
			ЗаполнитьЗначенияСвойств(Запись, ОписаниеПоля,, "Объект");
			Запись.ИзмененаПользователем = ЗаменятьСуществующие;
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТипЗнч(Вариант)=Тип("СправочникСсылка.ВариантыДополнительныхОтчетов") И (ОбновитьПривязки ИЛИ ЗаменятьСуществующие) Тогда
		// Дополнительный контекстный отчет
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Вариант);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеОтчетыИОбработкиНазначение.ОбъектНазначения
		|ИЗ
		|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК ДополнительныеОтчетыИОбработкиНазначение
		|		ПО ВариантыДополнительныхОтчетов.Отчет = ДополнительныеОтчетыИОбработкиНазначение.Ссылка
		|ГДЕ
		|	ВариантыДополнительныхОтчетов.Ссылка = &Ссылка
		|	И НЕ ДополнительныеОтчетыИОбработкиНазначение.ОбъектНазначения ЕСТЬ NULL ";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ПривязкаПолейОтчетовУНФ.СоздатьМенеджерЗаписи();
			Запись.Вариант = Вариант;
			Запись.Объект = Выборка.ОбъектНазначения;
			Запись.ИзмененаПользователем = ЗаменятьСуществующие;
			Запись.Записать(Истина);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Функция НастройкаОтчетаИзменена(Запись, СтруктураВарианта)
	
	Если НЕ Запись.Выбран() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураВарианта.Свойство("Теги") И НЕ Запись.Теги=СтруктураВарианта.Теги Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураВарианта.Свойство("ФункциональнаяОпция") И НЕ Запись.ФункциональнаяОпция=СтруктураВарианта.ФункциональнаяОпция Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураВарианта.Свойство("Рекомендуемый") И НЕ Запись.Рекомендуемый=СтруктураВарианта.Рекомендуемый Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеХранилища = Запись.Образец.Получить();
	Если НЕ ТипЗнч(ДанныеХранилища)=Тип("Картинка") И ТипЗнч(СтруктураВарианта.Образец)=Тип("ДвоичныеДанные") Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если НЕ ТипЗнч(СтруктураВарианта.Образец)=Тип("ДвоичныеДанные") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ДанныеХранилища)=Тип("Картинка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ДанныеХранилища.ПолучитьДвоичныеДанные().Размер()=СтруктураВарианта.Образец.Размер() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

Процедура АктулизироватьТеги(МассивИдентификаторов = Неопределено)
	
	МассивТегов = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчеты", МассивИдентификаторов);
	Запрос.УстановитьПараметр("БезОтбора", НЕ ЗначениеЗаполнено(МассивИдентификаторов));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиВариантовОтчетовУНФ.Теги
	|ИЗ
	|	РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|ГДЕ
	|	(&БезОтбора
	|			ИЛИ НастройкиВариантовОтчетовУНФ.Вариант.Отчет В (&Отчеты))";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПорцияТегов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Теги);
		Для каждого Тег Из ПорцияТегов Цикл
			Если МассивТегов.Найти(Тег)=Неопределено Тогда
				МассивТегов.Добавить(Тег);
			КонецЕсли; 
		КонецЦикла;  
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Теги", МассивТегов);
	Запрос.УстановитьПараметр("БезОтбора", НЕ ЗначениеЗаполнено(МассивИдентификаторов));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТегиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ТегиОтчетов КАК ТегиОтчетов
	|ГДЕ
	|	НЕ ТегиОтчетов.Наименование В (&Теги)
	|	И &БезОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТегиОтчетов.Ссылка,
	|	ТегиОтчетов.Наименование
	|ИЗ
	|	Справочник.ТегиОтчетов КАК ТегиОтчетов
	|ГДЕ
	|	ТегиОтчетов.Наименование В(&Теги)";
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаКУдалению = Результат[0].Выбрать();
	МассивСуществующих = Результат[1].Выгрузить().ВыгрузитьКолонку("Наименование");
	
	Пока ВыборкаКУдалению.Следующий() Цикл
		Спр = ВыборкаКУдалению.Ссылка.ПолучитьОбъект();
		Спр.Удалить();
	КонецЦикла;  
	
	Для каждого Тег Из МассивТегов Цикл
		Если НЕ МассивСуществующих.Найти(Тег)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Спр = Справочники.ТегиОтчетов.СоздатьЭлемент();
		Спр.Наименование = Тег;
		Спр.Записать();
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область ФормированиеОтчета

Процедура ДобавитьСтрокуТаблицыПолей(Таблица, Поле, Заголовок = Неопределено, Формат = Неопределено)
	
	Стр = Таблица.Добавить();
	Стр.Поле = Поле;
	Стр.Заголовок = Заголовок;
	Стр.Формат = Формат;
	
КонецПроцедуры

Функция МультивалютныеГруппировкиРекурсивно(Структура, Знач Добавить = Ложь)
	
	Результат = Новый Массив;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				ИмяПоля = Строка(Поле.Поле);
				Если ИмяПоля="Валюта" Тогда
					Добавить = Истина;
				КонецЕсли; 
			КонецЦикла;
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				ИмяПоля = Строка(Поле.Поле);
				Если Добавить И Результат.Найти(ИмяПоля)=Неопределено Тогда
					Если Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Элементы Тогда
						Результат.Добавить(ИмяПоля);
					ИначеЕсли Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
						Результат.Добавить(ИмяПоля+" Иерархия");
					ИначеЕсли Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
						Результат.Добавить(ИмяПоля);
						Результат.Добавить(ИмяПоля+" Иерархия");
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			ВложенныйРезультат = МультивалютныеГруппировкиРекурсивно(Элемент.Структура, Добавить);
			Для каждого ИмяПоля Из ВложенныйРезультат Цикл
				Если НЕ Результат.Найти(ИмяПоля)=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Результат.Добавить(ИмяПоля);
			КонецЦикла; 
		ИначеЕсли ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			ВложенныйРезультат = МультивалютныеГруппировкиРекурсивно(Элемент.Строки, Добавить);
			Для каждого ИмяПоля Из ВложенныйРезультат Цикл
				Если НЕ Результат.Найти(ИмяПоля)=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Результат.Добавить(ИмяПоля);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьГруппировкиПериодов(Группировки, СхемаКомпоновкиДанных)
	
	Если Группировки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ПоляПериода = Новый Массив;
	Для каждого Набор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Для каждого Поле Из Набор.Поля Цикл
			Если НЕ ТипЗнч(Поле)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли; 
			Если Поле.Роль.НомерПериода>0 Тогда
				ПоляПериода.Добавить(Поле.ПутьКДанным);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	Добавлять = Ложь;
	Для каждого ИмяПоля Из ПоляПериода Цикл
		Если НЕ Группировки.Найти(ИмяПоля)=Неопределено Тогда
			Добавлять = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если Добавлять Тогда
		Для каждого ИмяПоля Из ПоляПериода Цикл
			Если Группировки.Найти(ИмяПоля)=Неопределено Тогда
				Группировки.Добавить(ИмяПоля);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Функция ГруппировкиКолонокРекурсивно(Структура)
	
	Результат = Новый Массив;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				ИмяПоля = Строка(Поле.Поле);
				Если Результат.Найти(ИмяПоля)=Неопределено Тогда
					Если Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Элементы Тогда
						Результат.Добавить(ИмяПоля);
					ИначеЕсли Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
						Результат.Добавить(ИмяПоля+" Иерархия");
					ИначеЕсли Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
						Результат.Добавить(ИмяПоля);
						Результат.Добавить(ИмяПоля+" Иерархия");
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			ВложенныйРезультат = ГруппировкиКолонокРекурсивно(Элемент.Структура);
			Для каждого ИмяПоля Из ВложенныйРезультат Цикл
				Если НЕ Результат.Найти(ИмяПоля)=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Результат.Добавить(ИмяПоля);
			КонецЦикла; 
		ИначеЕсли ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			ВложенныйРезультат = ГруппировкиКолонокРекурсивно(Элемент.Колонки);
			Для каждого ИмяПоля Из ВложенныйРезультат Цикл
				Если НЕ Результат.Найти(ИмяПоля)=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Результат.Добавить(ИмяПоля);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ПрочиеГруппировки(Настройки, ГруппировкиВалют, ГруппировкиКолонок)
	
	ТипыСправочник = Справочники.ТипВсеСсылки();
	ТипыПВХ = ПланыВидовХарактеристик.ТипВсеСсылки();
	Результат = Новый Массив;
	Для каждого Поле Из Настройки.ДоступныеПоляГруппировок.Элементы Цикл
		ИмяПоля = Строка(Поле.Поле);
		Если ГруппировкиВалют.Найти(ИмяПоля)=Неопределено И ГруппировкиКолонок.Найти(ИмяПоля)=Неопределено Тогда
			Результат.Добавить(ИмяПоля);
		КонецЕсли;
		Для каждого Тип Из Поле.ТипЗначения.Типы() Цикл
			Если ТипыСправочник.СодержитТип(Тип) ИЛИ ТипыПВХ.СодержитТип(Тип) Тогда
				МетаданныеОбъекта = Метаданные.НайтиПоТипу(Тип);
				Если МетаданныеОбъекта.Иерархический Тогда
					ИмяПоля = ИмяПоля+" Иерархия";
					Если ГруппировкиВалют.Найти(ИмяПоля)=Неопределено И ГруппировкиКолонок.Найти(ИмяПоля)=Неопределено Тогда
						Результат.Добавить(ИмяПоля);
					КонецЕсли;
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;   
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция СтрокФиксироватьСлева(КомпоновщикНастроек) Экспорт

    ПараметрВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки");
	Если ПараметрВывода.Использование 
		И ПараметрВывода.Значение = РасположениеПолейГруппировкиКомпоновкиДанных.Вместе Тогда
		ГруппировкиОтдельно = Ложь; 
	Иначе
		ГруппировкиОтдельно = Истина;
	КонецЕсли; 
    ПараметрВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов");
	Если ПараметрВывода.Использование 
		И ПараметрВывода.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно Тогда
		РеквизитыОтдельно = Истина; 
	Иначе
		РеквизитыОтдельно = Ложь;
	КонецЕсли; 
    СтрокФиксироватьСлева = МасксимальноеКоличествоПолейРекурсивно(КомпоновщикНастроек.Настройки.Структура, ГруппировкиОтдельно, РеквизитыОтдельно);

    ПараметрВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ГоризонтальноеРасположениеОбщихИтогов");
    Если (ПараметрВывода.Значение = РасположениеИтоговКомпоновкиДанных.Начало
        ИЛИ ПараметрВывода.Значение = РасположениеИтоговКомпоновкиДанных.НачалоИКонец)
        И ПараметрВывода.Использование = Истина Тогда

        СтрокФиксироватьСлева = СтрокФиксироватьСлева + 1;

    КонецЕсли;

    ПараметрВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("РасположениеРесурсов");
    Если ПараметрВывода.Значение = РасположениеРесурсовКомпоновкиДанных.Вертикально
        И ПараметрВывода.Использование = Истина Тогда

        СтрокФиксироватьСлева = СтрокФиксироватьСлева + 1;

    КонецЕсли;

    Возврат СтрокФиксироватьСлева;

КонецФункции

Функция МасксимальноеКоличествоПолейРекурсивно(ЭлементыСтруктуры, ГруппировкиОтдельно, РеквизитыОтдельно)
	
	КоличествоПолей = 0;
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если НЕ Элемент.Использование Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") И НЕ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ГруппировкиОтдельно Тогда
			Возврат 1;
		КонецЕсли; 
		КоличествоПолейГруппировки = 0;
		Для каждого ПолеГруппировки Из Элемент.ПоляГруппировки.Элементы Цикл
			Если НЕ ПолеГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли; 
			Если НЕ ТипЗнч(ПолеГруппировки)=Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			ИмяПоля = Строка(ПолеГруппировки.Поле);
			ЭтоРеквизит = Ложь;
			Позиция = Найти(ИмяПоля, ".");
			Если НЕ РеквизитыОтдельно И Позиция>0 Тогда
				ИмяРодителя = Лев(ИмяПоля, Позиция-1);
				Для каждого ПолеПроверки Из Элемент.ПоляГруппировки.Элементы Цикл
					ИмяПоляПроверки  = Строка(ПолеПроверки.Поле);
					Если ИмяПоля=ИмяПоляПроверки Тогда
						Прервать;
					КонецЕсли;
					ПозицияПроверки = Найти(ИмяПоляПроверки, ".");
					ИмяРодителяПроверки = ?(ПозицияПроверки=0, ИмяПоляПроверки, Лев(ИмяПоляПроверки, ПозицияПроверки-1));
					Если ИмяРодителя=ИмяРодителяПроверки Тогда
						ЭтоРеквизит = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
			КоличествоПолейГруппировки = КоличествоПолейГруппировки+?(ЭтоРеквизит, ?(КоличествоПолейГруппировки=0, 1, 0), 1);
		КонецЦикла;
		КоличествоПолей = Макс(КоличествоПолей, КоличествоПолейГруппировки);
	КонецЦикла;
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			КоличествоПолей = Макс(КоличествоПолей, МасксимальноеКоличествоПолейРекурсивно(Элемент.Структура, ГруппировкиОтдельно, РеквизитыОтдельно));
		ИначеЕсли ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			КоличествоПолей = Макс(КоличествоПолей, МасксимальноеКоличествоПолейРекурсивно(Элемент.Строки, ГруппировкиОтдельно, РеквизитыОтдельно));
		КонецЕсли; 
	КонецЦикла; 
	Возврат КоличествоПолей;
	
КонецФункции

#КонецОбласти 

#Область ПроцедурыСозданияЭлементов

Функция СоздатьГруппу(Стр, Отображение = Неопределено, ЭтаФорма, Элементы) Экспорт
	
	Идентификатор = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	Группа = Элементы.Добавить("ГруппаФильтр"+Идентификатор, Тип("ГруппаФормы"), ?(Стр.Тип="Фильтр", Элементы.ГруппаФильтрЭлементы, Элементы.ГруппаПараметрыЭлементы));
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Поведение = ПоведениеОбычнойГруппы.Обычное;
	Группа.Заголовок = Стр.Заголовок;
	Группа.Подсказка = Стр.Заголовок;
	Группа.ОтображатьОтступСлева = Ложь;
	Группа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	Если Отображение = Неопределено Тогда
		Группа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	Иначе
		Группа.Отображение = Отображение;
	КонецЕсли;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Стр.ИмяГруппы = Группа.Имя;
	Возврат Группа;
	
КонецФункции

Процедура СоздатьФильтрПериод(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр,, ЭтаФорма, Элементы);
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита+"Начало", Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.ПутьКДанным = ИмяРеквизита+".ДатаНачала";
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		Элемент.Ширина = 9;
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
		
		Элемент = Элементы.Добавить(ИмяРеквизита+"Разделитель", Тип("ДекорацияФормы"), Группа);
		Элемент.Вид = ВидДекорацииФормы.Надпись;
		Элемент.Заголовок = "-";
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.Ширина = 1;
		Стр.Элементы.Вставить(Элемент.Имя);
		
		Элемент = Элементы.Добавить(ИмяРеквизита+"Окончание", Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.ПутьКДанным = ИмяРеквизита+".ДатаОкончания";
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		Элемент.Ширина = 9;
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура СоздатьФильтрПределы(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр,, ЭтаФорма, Элементы);
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок = ?(Прав(ИмяРеквизита,2)="От", НСтр("ru = 'от'"), НСтр("ru = 'до'"));
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.КнопкаОчистки = Истина;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.КнопкаВыбора = Ложь;
		Элемент.Ширина = 10;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура СоздатьФильтрТумблер(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр, ОтображениеОбычнойГруппы.Нет, ЭтаФорма, Элементы);
	Группа.Поведение = ПоведениеОбычнойГруппы.Обычное;
	Группа.ОтображатьЗаголовок = Ложь;
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Значения = Реквизит.Значение;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеПереключателя;
		Элемент.ВидПереключателя = ВидПереключателя.Тумблер;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элемент.Заголовок = Группа.Заголовок;
		Если Стр.Тип="Фильтр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		ИначеЕсли Стр.Тип="Параметр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		КонецЕсли; 
		Если ТипЗнч(Значения)=Тип("Массив") Тогда
			Элемент.СписокВыбора.Добавить(Стр.ТипЗначения.ПривестиЗначение(Неопределено), НСтр("ru = 'Все'"));
			Для каждого Значение Из Значения Цикл
				Элемент.СписокВыбора.Добавить(Значение);
			КонецЦикла; 
		Иначе
			Для каждого ЭлементСписка Из Значения Цикл
				Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, ЭлементСписка.Пометка);
			КонецЦикла; 
		КонецЕсли; 
		ЭтаФорма[ИмяРеквизита] = ?(ТипЗнч(ЭтаФорма[ИмяРеквизита])=Тип("ПеречислениеСсылка.БулевоТриСостояния"), 
		ПредопределенноеЗначение("Перечисление.БулевоТриСостояния.НеИзменять"), 
		Неопределено);
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура СоздатьФильтрФлажки(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр,, ЭтаФорма, Элементы);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Заголовок = Строка(Реквизит.Значение);
		Если СтрДлина(Заголовок)>28 Тогда
			Элемент.Заголовок = Лев(Заголовок, 26)+"...";
			Элемент.Подсказка = Заголовок;
		Иначе
			Элемент.Заголовок = Заголовок;
		КонецЕсли; 
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Элемент.ВысотаЗаголовка = 1;
		Если Стр.Тип="Фильтр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		ИначеЕсли Стр.Тип="Параметр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		КонецЕсли; 
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура СоздатьФильтрБулево(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр,, ЭтаФорма, Элементы);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.ОтображатьЗаголовок = Ложь;
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Если СтрДлина(Стр.Заголовок)>28 Тогда
			Элемент.Заголовок = Лев(Стр.Заголовок, 26)+"...";
			Элемент.Подсказка = Стр.Заголовок;
		Иначе
			Элемент.Заголовок = Стр.Заголовок;
		КонецЕсли; 
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Элемент.ВысотаЗаголовка = 1;
		Если Стр.Тип="Фильтр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		ИначеЕсли Стр.Тип="Параметр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		КонецЕсли;
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьФильтрПолеВвода(Стр, ЭтаФорма, Элементы, ПараметрыВыбора, СвязиПараметровВыбора) Экспорт
	
	Группа = СоздатьГруппу(Стр,, ЭтаФорма, Элементы);
	Группа.ОтображатьЗаголовок = Ложь;
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.КнопкаОткрытия = Ложь;
		Элемент.КнопкаСоздания = Ложь;
		Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСписке;
		Если Стр.ТипЗначения.Типы().Количество()>1 Тогда
			Элемент.КнопкаВыпадающегоСписка = Ложь;
			Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		ИначеЕсли НЕ Стр.ТипЗначения.Типы().Количество()=0 И ОбщегоНазначения.ЭтоСсылка(Стр.ТипЗначения.Типы().Получить(0)) Тогда
			Элемент.КнопкаВыпадающегоСписка = Истина;
		Иначе
			Элемент.КнопкаВыпадающегоСписка = Неопределено;
		КонецЕсли; 
		Элемент.ПодсказкаВвода = Стр.Заголовок;
		Элемент.Ширина = 23;
		
		Если Стр.ДополнительныеПараметры.Свойство("БыстрыйВыбор") И Стр.ДополнительныеПараметры.БыстрыйВыбор Тогда
			Элемент.БыстрыйВыбор = Истина;
		Иначе
			Элемент.БыстрыйВыбор = Ложь;
		КонецЕсли; 
		Если Стр.ДополнительныеПараметры.Свойство("АвтоОтметкаНезаполненного") И Стр.ДополнительныеПараметры.АвтоОтметкаНезаполненного Тогда
			Элемент.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли; 
		Если Стр.Тип="Фильтр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
			Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ФильтрОбработкаВыбора");
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ФильтрНачалоВыбора");
			Если ОписаниеТиповСодержитИерархическийТип(Стр.ТипЗначения) Тогда
				Кнопка = Элементы.Добавить(ИмяРеквизита+"_Иерархия", Тип("ДекорацияФормы"), Группа);
				Кнопка.Вид = ВидДекорацииФормы.Картинка;
				Кнопка.Гиперссылка = Истина;
				Кнопка.Ширина = 2;
				Элемент.Ширина = Элемент.Ширина-3;
				Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
				Кнопка.Высота = 1;
				Кнопка.РастягиватьПоГоризонтали = Ложь;
				Кнопка.РастягиватьПоВертикали = Ложь;
				Кнопка.Картинка = БиблиотекаКартинок.РежимВыбораЭлементов;
				Кнопка.Подсказка = НСтр("ru = 'Используется выбор элементов'");
				Кнопка.УстановитьДействие("Нажатие", "Подключаемый_ИерархияФильтраНажатие");
			КонецЕсли; 
		ИначеЕсли Стр.Тип="Параметр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		КонецЕсли; 
		Если НЕ ПараметрыВыбора=Неопределено И ПараметрыВыбора.Количество()>0 Тогда
			Если ТипЗнч(ПараметрыВыбора)=Тип("СписокЗначений") Тогда
				Элемент.СписокВыбора.Очистить();
				Для каждого Параметр Из ПараметрыВыбора Цикл
					Элемент.СписокВыбора.Добавить(Параметр.Значение, Параметр.Представление);
				КонецЦикла;
				Если Элемент.СписокВыбора.Количество()>0 Тогда
					Элемент.РежимВыбораИзСписка = Истина;
					Элемент.КнопкаВыбора = Ложь;
				КонецЕсли; 
			Иначе
				МассивПараметров = Новый Массив;
				Для каждого Параметр Из ПараметрыВыбора Цикл
					МассивПараметров.Добавить(Новый ПараметрВыбора(Параметр.Имя, Параметр.Значение));
				КонецЦикла;
				Если МассивПараметров.Количество()>0 Тогда
					Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиОтчета

Процедура ДобавитьСимволВалютыКЗаголовкамПолей(СхемаКомпоновкиДанных, Поля, Валюта = Неопределено) Экспорт
	
	Если Валюта=Неопределено Тогда
		СимволВалюты = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(Константы.ВалютаУчета.Получить());
	Иначе
		СимволВалюты = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(Валюта);
	КонецЕсли;
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля);
	
	Для каждого Набор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Для каждого Поле Из МассивПолей Цикл
			ПолеСхемы = Набор.Поля.Найти(Поле);
			Если ПолеСхемы=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			ПолеСхемы.Заголовок = ПолеСхемы.Заголовок+", "+СимволВалюты;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолеВыбораСуществует(НастройкиОтчета, Поле)
	
	Для каждого ПолеВыбора Из НастройкиОтчета.Выбор.Элементы Цикл
		Если НЕ ТипЗнч(ПолеВыбора)=Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Если ПолеВыбора.Поле=Поле Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СтандартизацияПрограммногоИзмененияФормыОтчета

Процедура ДобавитьПолеВыбораПериодаПланирования(НастройкиСКД, Форма, Обязательный = Истина) Экспорт
	
	ЗначениеПараметраКД = НастройкиСКД.ПараметрыДанных.Элементы.Найти("СценарийПланирования");
	ЗначениеПоУмолчанию = ?(НЕ ЗначениеПараметраКД=Неопределено И ЗначениеПараметраКД.Использование, ЗначениеПараметраКД.Значение, Справочники.СценарииПланирования.ПустаяСсылка());
	Стр = Форма.СтрокаОписанияПоляВызов("Параметр", "СценарийПланирования");
	Если Стр=Неопределено Тогда
		Стр = Форма.ПоляНастроек.ПолучитьЭлементы().Добавить();
		Стр.Тип = "Параметр";
		Стр.Поле = "СценарийПланирования";
		Стр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СценарииПланирования");
		Стр.Заголовок = НСтр("ru = 'Сценарий планирования'");
		Стр.ВидЭлемента = "Поле";
		Стр.Реквизиты = Новый Структура;
		Стр.Элементы = Новый Структура;
		Стр.ДополнительныеПараметры = Новый Структура;
		Стр.ДополнительныеПараметры.Вставить("АвтоОтметкаНезаполненного", Истина);
		ИмяРеквизита = "ПараметрСценарийПланирования";
		Стр.Реквизиты.Вставить(ИмяРеквизита, ЗначениеПоУмолчанию);
		МассивРеквизитов = Новый Массив;
		Для каждого Элемент Из Стр.Реквизиты Цикл
			МассивРеквизитов.Добавить(Новый РеквизитФормы(Элемент.Ключ, Стр.ТипЗначения,, Стр.Заголовок));
		КонецЦикла; 
		Стр.Создан = Истина;
		Форма.ИзменитьРеквизиты(МассивРеквизитов);
		Форма[ИмяРеквизита] = ЗначениеПоУмолчанию;
		НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра(Стр.Поле, ЗначениеПоУмолчанию);
		Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Форма.Элементы.ГруппаПараметрыЭлементы);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	Иначе
		Для каждого ОписаниеЭлемента Из Стр.Элементы Цикл
			Элемент = Форма.Элементы[ОписаниеЭлемента.Ключ];
			Если НЕ ТипЗнч(Элемент)=Тип("ПолеФормы") Тогда
				Продолжить;
			КонецЕсли; 
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Прервать;
		КонецЦикла;
		Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
			Форма[ОписаниеРеквизита.Ключ] = ЗначениеПоУмолчанию;
		КонецЦикла; 
	КонецЕсли;
	Если ТипЗнч(Элемент)=Тип("ПолеФормы") Тогда
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элемент.КнопкаОткрытия = Ложь;
		Элемент.КнопкаВыбора = Ложь;
		Элемент.КнопкаСоздания = Ложь;
		Элемент.БыстрыйВыбор = Истина;
		Элемент.ЦветРамки = ЦветаСтиля.НедоступныеДанныеЦвет;
		Элемент.ПодсказкаВвода = Стр.Заголовок;
		Элемент.Ширина = 23;
		Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		Если Обязательный Тогда
			Элемент.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПараметрОтчетаПоУмолчанию(НастройкиСКД, ИмяПараметра, Значение) Экспорт
	
	ЗначениеПараметраКД = НастройкиСКД.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ЗначениеПараметраКД=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ЗначениеПараметраКД.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметраКД.Значение = Значение;
	
КонецПроцедуры

#КонецОбласти

Функция ТаблицаВариантовПредопределенногоОтчета(Отчет)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчет", Отчет);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Ссылка КАК Ссылка,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВариантыОтчетов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	(ВариантыОтчетов.ТипОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Внутренний)
	|			ИЛИ ВариантыОтчетов.ТипОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Дополнительный))
	|	И ВариантыОтчетов.Отчет = &Отчет
	|	И НЕ ВариантыОтчетов.ПометкаУдаления
	|	И НЕ ВариантыОтчетов.Пользовательский
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	КлючВарианта";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СписокПоказателей(НастройкиОтчета)
	
	Результат = Новый СписокЗначений;
	Для каждого ДоступноеПоле Из НастройкиОтчета.ДоступныеПоляВыбора.Элементы Цикл
		Если НЕ ДоступноеПоле.Ресурс Тогда
			Продолжить;
		КонецЕсли;
		Результат.Добавить(Строка(ДоступноеПоле.Поле)); 
	КонецЦикла;
	ОтметитьВыбранныеПоляРекурсивно(НастройкиОтчета.Выбор.Элементы, Результат);
	Возврат Результат;
	
КонецФункции

Процедура УдалитьПоляСравнения(ИменаПолей, НастройкиВыбор, СхемаКомпоновкиДанных)
	
	МассивИменПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолей);
	Для каждого ИмяПоля Из МассивИменПолей Цикл
		Для каждого ВыбранноеПоле Из НастройкиВыбор Цикл
			Если НЕ ТипЗнч(ВыбранноеПоле)=Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Если ВыбранноеПоле.Поле=Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
				НастройкиВыбор.Удалить(ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
		Ресурс = СхемаКомпоновкиДанных.ПоляИтога.Найти(ИмяПоля);
		Если НЕ Ресурс=Неопределено Тогда
			СхемаКомпоновкиДанных.ПоляИтога.Удалить(Ресурс);
		КонецЕсли;
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(ИмяПоля);
		Если НЕ ВычисляемоеПоле=Неопределено Тогда
			СхемаКомпоновкиДанных.ВычисляемыеПоля.Удалить(ВычисляемоеПоле);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СуществуетСтандартныйРеквизит(СтандартныеРеквизиты, Имя)
	
	Для каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя=Имя Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция МассивОтчетовВМассивИдентификаторов(МассивОтчетов)
	
	МассивИдентификаторов = Новый Массив;
	Для каждого Элемент Из МассивОтчетов Цикл
		Если ТипЗнч(Элемент)=Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			МассивИдентификаторов.Добавить(Элемент);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ОбъектМетаданных") И Метаданные.Отчеты.Содержит(Элемент) Тогда
			МассивИдентификаторов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Элемент));
		ИначеЕсли ТипЗнч(Элемент)=Тип("Строка") И Найти(Элемент, "Отчет.")>0 Тогда
			МассивИдентификаторов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Элемент));
		ИначеЕсли ТипЗнч(Элемент)=Тип("Строка") И Найти(Элемент, "Отчет.")=0 Тогда
			МассивИдентификаторов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Отчет."+Элемент));
		КонецЕсли; 
	КонецЦикла;
	Возврат МассивИдентификаторов;
	
КонецФункции

#КонецОбласти
