////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись в модели сервиса".
//  
////////////////////////////////////////////////////////////////////////////////


#Область ПрограммныйИнтерфейс

Функция ИспользованиеВозможно() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЭлектроннуюПодписьВМоделиСервиса");
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("МаркерыБезопасности",
		"ЭлектроннаяПодписьВМоделиСервиса.УстановкаПараметровСеанса");
	
	КонецПроцедуры
	
// Вызывается при установке параметров сеанса.
//
// Параметры:
//  ИменаПараметровСеанса - Массив, Неопределено.
//
Процедура ПриУстановкеПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	Если ИменаПараметровСеанса <> Неопределено 
		И ИменаПараметровСеанса.Найти("МаркерыБезопасности") <> Неопределено Тогда
		ПараметрыСеанса.МаркерыБезопасности = Новый ФиксированноеСоответствие(Новый Соответствие);		
	КонецЕсли;
	
КонецПроцедуры	

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ().
//
Процедура ПриПолученииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
		
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИспользоватьЭлектроннуюПодписьВМоделиСервиса");
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресСервисаПодключенияЭлектроннойПодписиВМоделиСервиса");
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресКриптосервиса");	
	
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ИмяПользователяСервисаПодключенияЭлектроннойПодписиВМоделиСервиса";
	СтрокаПараметра.Описание = "ИмяПользователяСервисаПодключенияЭлектроннойПодписиВМоделиСервиса";
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка");
	
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ПарольПользователяСервисаПодключенияЭлектроннойПодписиВМоделиСервиса";
	СтрокаПараметра.Описание = "ПарольПользователяСервисаПодключенияЭлектроннойПодписиВМоделиСервиса";
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка");
	
КонецПроцедуры

// Вызывается перед попыткой записи значений параметров ИБ в одноименные
// константы.
//
// Параметры:
// ЗначенияПараметров - Структура - значения параметров которые требуется установить.
// В случае если значение параметра устанавливается в данной процедуре из структуры
// необходимо удалить соответствующую пару КлючИЗначение.
//
Процедура ПриУстановкеЗначенийПараметровИБ(Знач ЗначенияПараметров) Экспорт
	
	Владелец = ТехнологияСервисаИнтеграцияСБСП.ИдентификаторОбъектаМетаданных("Константа.АдресСервисаПодключенияЭлектроннойПодписиВМоделиСервиса");
	Если ЗначенияПараметров.Свойство("ИмяПользователяСервисаПодключенияЭлектроннойПодписиВМоделиСервиса") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ТехнологияСервисаИнтеграцияСБСП.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ЗначенияПараметров.ИмяПользователяСервисаПодключенияЭлектроннойПодписиВМоделиСервиса, "Логин");
		УстановитьПривилегированныйРежим(Ложь);
		ЗначенияПараметров.Удалить("ИмяПользователяСервисаПодключенияЭлектроннойПодписиВМоделиСервиса");
	КонецЕсли;
	
	Если ЗначенияПараметров.Свойство("ПарольПользователяСервисаПодключенияЭлектроннойПодписиВМоделиСервиса") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ТехнологияСервисаИнтеграцияСБСП.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ЗначенияПараметров.ПарольПользователяСервисаПодключенияЭлектроннойПодписиВМоделиСервиса, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
		ЗначенияПараметров.Удалить("ПарольПользователяСервисаПодключенияЭлектроннойПодписиВМоделиСервиса");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию программных интерфейсов,
// используя в качестве ключей имена программных интерфейсов.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура:
//  Ключ - Имя программного интерфейса,
//  Значение - Массив(Строка) - поддерживаемые версии программного интерфейса.
//
// Пример реализации:
//
//  // СервисПередачиФайлов
//  МассивВерсий = Новый Массив;
//  МассивВерсий.Добавить("1.0.1.1");
//  МассивВерсий.Добавить("1.0.2.1"); 
//  СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//  // Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий) Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.1.1");
	СтруктураПоддерживаемыхВерсий.Вставить("ЭлектроннаяПодписьВМоделиСервиса", МассивВерсий);	
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ИспользованиеЭлектроннойПодписиВМоделиСервисаВозможно", ИспользованиеВозможно());
	
КонецПроцедуры

// Объявляет служебные события подсистемы ЭлектроннаяПодписьВМоделиСервиса:
//
// Серверные события:
//   ПриВключенииСервисаКриптографии.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Вызывается в момент включения сервиса криптографии.
	//
	// Синтаксис:
	// Процедура ПриВключенииСервисаКриптографии() Экспорт
	//
	СерверныеСобытия.Добавить("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса\ПриВключенииСервисаКриптографии");
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов"].Добавить(
		"ЭлектроннаяПодписьВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса\ПриПолученииТаблицыПараметровИБ"].Добавить(
		"ЭлектроннаяПодписьВМоделиСервиса");
		
	СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса\ПриУстановкеЗначенийПараметровИБ"].Добавить(
		"ЭлектроннаяПодписьВМоделиСервиса");
		
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиента"].Добавить(
		"ЭлектроннаяПодписьВМоделиСервиса");
	
КонецПроцедуры

#КонецОбласти	