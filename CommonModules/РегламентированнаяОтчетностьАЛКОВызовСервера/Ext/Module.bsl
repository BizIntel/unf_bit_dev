////////////////////////////////////////////////////////////////////////////////
// Серверные (с возможностью вызова из клиентского кода) процедуры и функции 
// регламентированных отчетов ФСРАР общего назначения:
// - для работы с длительными операциями;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс


#Область ДлительныеОперации

// Определяет завершена длительная операция корректно, или в результате ошибки.
//
// Параметры:
//		АдресВоВременномХранилище - Строка - Адрес временного хранилища, 
//									в котором должен быть помещен результат выполнения.
//
// Возвращаемое значение:
//		Булево - Истина, если длительная операция завершена корректно.
//
//
Функция ПроверитьКорректностьЗавершения(АдресВоВременномХранилище) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		Возврат (НЕ Результат = Неопределено);
	Иначе
		Возврат Ложь;	
	КонецЕсли;

КонецФункции

// Оболочка для вызова из клиентского кода ДлительныеОперации.ПрочитатьПрогресс.
// Считывает информацию о ходе выполнения фонового задания.
//
// Параметры:
//		ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
//
// Возвращаемое значение:
//		Неопределено, Структура 		- 	информация о ходе выполнения фонового задания, 
//										записанная процедурой ДлительныеОперации.СообщитьПрогресс:
//    		* Процент                 - Число  - Необязательный. Процент выполнения.
//			* Текст                   - Строка - Необязательный. Информация о текущей операции.
//			* ДополнительныеПараметры - Произвольный - Необязательный. Любая дополнительная информация.
//
Функция ПолучитьИнформациюИзФоновойЗадачи(ИдентификаторЗадания) Экспорт

	Информация = ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
		
	Возврат Информация;
	
КонецФункции

// Проверяет завершение длительной операции по идентификатору.
//
// Параметры:
//		ИдентификаторЗадания 	- УникальныйИдентификатор - идентификатор фонового задания.
//		СообщениеОбОшибке	  	- Строка - возвращает сообщение об ошибке.
//
// Возвращаемое значение:
//		Булево - Истина, если длительная операция завершена, в том числе с ошибками.
//
Функция ПроверитьВыполнениеЗадания(ИдентификаторЗадания, СообщениеОбОшибке) Экспорт
	
	Если ИдентификаторЗадания = Неопределено Тогда		
	    Возврат Истина;	
	КонецЕсли;
	
	Попытка
		
		Выполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
		СообщениеОбОшибке = "";
		
	Исключение
	    // что-то произошло, нужно сообщить
		СообщениеОбОшибке = НСтр("ru = 'Не удалось выполнить данную операцию. 
		                    |Подробности см. в Журнале регистрации.
							|" + ОписаниеОшибки() + "'");
		Выполнено = Истина;
		
	КонецПопытки;
	
	Возврат Выполнено;
		
КонецФункции

// Проверяет завершение длительной операции по идентификатору.
//
// Параметры:
//		ВидДлОперации 				- Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.
//		ПараметрыДлительнойОперации	- Структура - Параметры, передаваемые в длительную операцию.
//									Состав зависит от значения ВидДлОперации.
//
// Возвращаемое значение:
//		Булево - Истина, если длительная операция выполнена.
//
Функция ВыполнитьДлительнуюОперацию(ВидДлОперации, ПараметрыДлительнойОперации) Экспорт

	Если ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление Тогда
	    Возврат ВосстановитьРегистры(ПараметрыДлительнойОперации);
		
	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузки Тогда	
	    Возврат ПроверитьВыгрузкуОтчета(ПараметрыДлительнойОперации);
		
	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка Тогда	
	    Возврат ВыгрузкаОтчета(ПараметрыДлительнойОперации);
		
	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган Тогда	
	    Возврат ВыгрузкаОтчета(ПараметрыДлительнойОперации);
		
	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете Тогда	
	    Возврат ВыгрузкаОтчета(ПараметрыДлительнойОперации);
		
	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета Тогда	
	    Возврат ВыгрузкаОтчета(ПараметрыДлительнойОперации);
		
	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ПересчетИтогов Тогда	
	    Возврат ПересчетИтогов(ПараметрыДлительнойОперации);
		
	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.Печать Тогда	
	    Возврат ПечатьОтчета(ПараметрыДлительнойОперации);
		
	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ПечатьВАрхив Тогда	
	    Возврат ПечатьОтчета(ПараметрыДлительнойОперации);
	
	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.Сохранение Тогда	
	    Возврат СохранитьРегистры(ПараметрыДлительнойОперации);
		
	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ЗаполнениеПоданнымИБ Тогда	
	    Возврат ЗаполнитьПоДаннымИБ(ПараметрыДлительнойОперации);
		
	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ОчисткаРегистровСведенийОтМусора Тогда	
	    Возврат ОчисткаРегистровСведенийОтМусора(ПараметрыДлительнойОперации);
		
	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.СкопироватьТекущиеРегистры Тогда	
		// Это не операция копирования отчета - копирование отчета реализовано
		// через операцию Восстановления.
		// Это копирование содержимого регистров в случае, если отчет записывается
		// с новым номером корректировки в режиме "создать новый".
		Возврат СкопироватьТекущиеРегистры(ПараметрыДлительнойОперации);
		
	КонецЕсли; 

КонецФункции

#КонецОбласти

// Проверяет подключение организации к 1С-Отчетности и к сдаче на портале ФСРАР.
//
// Параметры:
//		ОрганизацияОтчета - Справочник.Организации.Ссылка - Организация, подключение которой проверяется.
//
// Возвращаемое значение:
//		Структура, со свойствами
// 			* ФСРАР 		- Булево, Истина, если организация подключена к сдаче отчетности в ФСРАР.
// 			* Отчетность 	- Булево, Истина, если организация подключена к сдаче отчетности в 1С-Отчетности.
//
Функция ОрганизацияПодключенаК1СОтчетностиИкФСРАР(ОрганизацияОтчета) Экспорт

	Результат = Новый Структура;
	
	ПодключенаКФСРАР = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(ОрганизацияОтчета, Перечисления.ТипыКонтролирующихОрганов.ФСРАР);
	Результат.Вставить("ФСРАР", ПодключенаКФСРАР);
	Если ПодключенаКФСРАР Тогда
		
		Результат.Вставить("Отчетность", Истина);
		
	Иначе
		
		ПодключенаК1СОтчетности = ИнтерфейсыВзаимодействияБРО.ОрганизацияИмеетУчетнуюЗапись(ОрганизацияОтчета);
		Результат.Вставить("Отчетность", ПодключенаК1СОтчетности);
		
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

// Формирует пустую структуру сведений по обособленному подразделению, 
// состоящей из Наименования, КПП и адресной информации.
//
// Параметры:
// 		Нет.
// Возвращаемое значение:
// 		Структура, со свойствами:
//			* Наименование 			- Наимкенование ОП.
//			* КПП					- КПП ОП.
//			Адресные поля
//			* УникальныйНомерФИАС 	- Уникальный идентификатор адреса в системе ФИАС.
//			* ДополнительныеКоды	- пустая структура
//			* КодСтраны
//			* Страна
//			* Индекс
//			* КодРегиона
//			* Регион
//			* Район
//			* Город
//			* НаселенныйПункт
//			* Улица
//			* Дом
//			* Корпус
//			* Литера
//			* Квартира
//			* ПредставлениеАдреса
//			* АдресXML				- XML представление адреса подсистемы УправлениеКонтактнойИнформацией

Функция ПолучитьПустуюСтруктуруСведенийОбОП() Экспорт

	 Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьПустуюСтруктуруСведенийОбОП();

КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции


#Область СохранитьВосстановитьКопироватьРегистрыСведенийДлительнаяОперация

Функция СохранитьРегистры(ПараметрыДлительнойОперации)
	
	РежимДлительнойОперации  = ПараметрыДлительнойОперации.РежимДлительнойОперации;
	
	СтруктураРеквизитовФормы = ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	УникальныйИдентификатор  = ПараметрыДлительнойОперации.УникальныйИдентификатор;
	НомерАлкоОтчета          = ПараметрыДлительнойОперации.НомерАлкоОтчета;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ВспомогательныйАдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = АдресВоВременномХранилище;
	СтруктураРеквизитовФормы.ВспомогательныйАдресВоВременномХранилище = ВспомогательныйАдресВоВременномХранилище;
	
	ПараметрыДлительнойОперации.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыДлительнойОперации.Вставить("ВспомогательныйАдресВоВременномХранилище", ВспомогательныйАдресВоВременномХранилище);
	
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", 	ВспомогательныйАдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ДокументСсылкаПриемник", 	СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыОтчета.Вставить("ДокументСсылкаИсточник", 	СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыОтчета.Вставить("ЭтоСохранение",  		Истина);
		
	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ЗаданиеВыполнено = Ложь;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);
		
	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.СохранитьВосстановитьКопироватьРегистрыСведенийАЛКО";
	
	// Отключаем режим длительной операции, на данный момент в нем нет необходимости
	// но оставим функционал на будущее, если понадобится.
	РежимДлительнойОперации = Ложь;
	
	Если СтруктураРеквизитовФормы.мБезОткрытияФормы или (НЕ РежимДлительнойОперации)  Тогда
		
	    // запуск без механизма длительных операций
		РегламентированнаяОтчетностьАЛКО.СохранитьВосстановитьКопироватьРегистрыСведенийАЛКО(ПараметрыОтчета, АдресВоВременномХранилище);
		ЗаданиеВыполнено = Истина;	
		
	Иначе
			
		Если ОбщегоНазначенияКлиентСервер.РежимОтладки() или (НЕ РежимДлительнойОперации)  Тогда
						
			РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
			
			ЗаданиеВыполнено = Истина;
			
		Иначе
			
			НаименованиеЗадания = НСтр("ru = 'Сохранение данных отчета Алко № " + НомерАлкоОтчета + ".'");
			
			ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
			
			Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, , НаименованиеЗадания);
				
		    
			Попытка
				Задание.ОжидатьЗавершения(ВремяОжидания);
			Исключение
				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
			КонецПопытки;
					    
			ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
			СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
			
			// Если операция уже завершилась, то сразу обрабатываем результат.
			СообщениеОбОшибке = Неопределено;
		    ЗаданиеВыполнено = ПроверитьВыполнениеЗадания(ПараметрыДлительнойОперации.ИдентификаторЗадания, СообщениеОбОшибке);
			
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СообщениеОбОшибке;				
				Сообщение.Сообщить(); 
			
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли; 
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

#КонецОбласти


#Область СкопироватьТекущиеРегистрыДлительнаяОперация

Функция СкопироватьТекущиеРегистры(ПараметрыДлительнойОперации)

	РежимДлительнойОперации  = ПараметрыДлительнойОперации.РежимДлительнойОперации;
	
	СтруктураРеквизитовФормы 	= ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	УникальныйИдентификатор 	= ПараметрыДлительнойОперации.УникальныйИдентификатор;
	НомерАлкоОтчета          	= ПараметрыДлительнойОперации.НомерАлкоОтчета;
	
	ИмяФормы					= ПараметрыДлительнойОперации.ИмяФормы;
	
	СписокИменРегистровСведений 			= ПараметрыДлительнойОперации.СписокИменРегистровСведений;
	СтруктураИдГруппИменРегистровСведений 	= ПараметрыДлительнойОперации.СтруктураИдГруппИменРегистровСведений; 
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ВспомогательныйАдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = АдресВоВременномХранилище;
	СтруктураРеквизитовФормы.ВспомогательныйАдресВоВременномХранилище = ВспомогательныйАдресВоВременномХранилище;
	
	ПараметрыДлительнойОперации.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыДлительнойОперации.Вставить("ВспомогательныйАдресВоВременномХранилище", ВспомогательныйАдресВоВременномХранилище);
		
	ДокументСсылкаИсточник = СтруктураРеквизитовФормы.мДокументИсточник; 
	
	// Данные уже будут сохранены.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);
	
	ПараметрыОтчета.Вставить("ДокументСсылкаПриемник", СтруктураРеквизитовФормы.мСохраненныйДок);	
	// Если Отчет скопирован - нужно получить данные исходного отчета
	ПараметрыОтчета.Вставить("ДокументСсылкаИсточник",  ДокументСсылкаИсточник);
	
	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);			
	ПараметрыОтчета.Вставить("СписокИменРегистровСведений",	СписокИменРегистровСведений);		
	ПараметрыОтчета.Вставить("СтруктураИдГруппИменРегистровСведений",	СтруктураИдГруппИменРегистровСведений);	
		
	ПараметрыОтчета.Вставить("СписокСохранения",	СписокСохранения);
	
	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ЗаданиеВыполнено = Ложь;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);
	
	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.СкопироватьДанныеТаблицАЛКО";
		
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() или (НЕ РежимДлительнойОперации)  Тогда
		
		РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		
		ЗаданиеВыполнено = Истина;
		
	Иначе
		
		НаименованиеЗадания = НСтр("ru = 'Копирование данных таблиц отчета Алко № " + НомерАлкоОтчета + ".'");
				
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		
		Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, , НаименованиеЗадания);
			
	    
		Попытка
			Задание.ОжидатьЗавершения(ВремяОжидания);
		Исключение
			// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
		КонецПопытки;
		
	    ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	    СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
		
		// Если операция уже завершилась, то сразу обрабатываем результат.
		СообщениеОбОшибке = Неопределено;
		ЗаданиеВыполнено = ПроверитьВыполнениеЗадания(ПараметрыДлительнойОперации.ИдентификаторЗадания, СообщениеОбОшибке);
		
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СообщениеОбОшибке;				
			Сообщение.Сообщить(); 
		
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

#КонецОбласти


#Область ВосстановитьРегистрыДлительнаяОперация

Функция ВосстановитьРегистры(ПараметрыДлительнойОперации)

	РежимДлительнойОперации  = ПараметрыДлительнойОперации.РежимДлительнойОперации;
	
	СтруктураРеквизитовФормы 	= ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	УникальныйИдентификатор 	= ПараметрыДлительнойОперации.УникальныйИдентификатор;
	НомерАлкоОтчета          	= ПараметрыДлительнойОперации.НомерАлкоОтчета;
	
	ИмяФормы					= ПараметрыДлительнойОперации.ИмяФормы;
	
	СтруктураСервисРегистров				= ПараметрыДлительнойОперации.СтруктураСервисРегистров;
	СтруктураСервисРегистровУдаленные		= ПараметрыДлительнойОперации.СтруктураСервисРегистровУдаленные;
	
	СписокИменРегистровСведений 			= ПараметрыДлительнойОперации.СписокИменРегистровСведений;
	СтруктураИдГруппИменРегистровСведений 	= ПараметрыДлительнойОперации.СтруктураИдГруппИменРегистровСведений; 
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ВспомогательныйАдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = АдресВоВременномХранилище;
	СтруктураРеквизитовФормы.ВспомогательныйАдресВоВременномХранилище = ВспомогательныйАдресВоВременномХранилище;
	
	ПараметрыДлительнойОперации.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыДлительнойОперации.Вставить("ВспомогательныйАдресВоВременномХранилище", ВспомогательныйАдресВоВременномХранилище);
	
	// Имеет смысл либо при копировании отчета, либо при открытии отчета, с сохраненными данными в старом формате
	// либо при открытии отчета с несохраненными данными (отказом от сохранения при закрытии).
	ЭтоКопирование = (НЕ СтруктураРеквизитовФормы.мДокументИсточник = Неопределено);
	
	ДокументСсылкаИсточник = ?(ЭтоКопирование,  СтруктураРеквизитовФормы.мДокументИсточник,
												СтруктураРеквизитовФормы.мСохраненныйДок); 
	 
												
	ЭтоОтменаИзменений 	= РегламентированнаяОтчетностьАЛКО.ЖурналНеПуст(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СписокСохранения = ДокументСсылкаИсточник.ДанныеОтчета.Получить();
	ЭтоСтарыйФормат = НЕ СписокСохранения.Свойство("СтруктураСервисРегистров");
	
	РежимДлительнойОперацииПриКопировании = Ложь;
	Если ЭтоКопирование Тогда
		
		СтруктураСервисРегистровИзСписка = СписокСохранения.СтруктураСервисРегистров;
		
		КоличествоСтрок = 0;
		Для каждого ЭлементСервисРегистров Из СтруктураСервисРегистровИзСписка Цикл
		
			СервисРегистровИзСписка = ЭлементСервисРегистров.Значение;
			Для каждого СтрокаСервисРегистровИзСписка Из СервисРегистровИзСписка Цикл
			   КоличествоСтрок = КоличествоСтрок + СтрокаСервисРегистровИзСписка.КоличествоСтрок;			   
		   	КонецЦикла; 
			
		КонецЦикла;
		
		РежимДлительнойОперацииПриКопировании = (КоличествоСтрок > 1000);
	    	
	КонецЕсли; 
		
	РежимДлительнойОперации = ЭтоСтарыйФормат или РежимДлительнойОперацииПриКопировании;
	
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);
	
	ПараметрыОтчета.Вставить("ДокументСсылкаПриемник", СтруктураРеквизитовФормы.мСохраненныйДок);	
	// Если Отчет скопирован - нужно получить данные исходного отчета
	ПараметрыОтчета.Вставить("ДокументСсылкаИсточник",  ДокументСсылкаИсточник);
	
	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);			
	ПараметрыОтчета.Вставить("СписокИменРегистровСведений",	СписокИменРегистровСведений);		
	ПараметрыОтчета.Вставить("СтруктураИдГруппИменРегистровСведений",	СтруктураИдГруппИменРегистровСведений);	
	ПараметрыОтчета.Вставить("СтруктураСервисРегистров",	СтруктураСервисРегистров);		
	ПараметрыОтчета.Вставить("СтруктураСервисРегистровУдаленные",	СтруктураСервисРегистровУдаленные);
	
	ПараметрыОтчета.Вставить("ЭтоКопирование",		ЭтоКопирование);
	ПараметрыОтчета.Вставить("ЭтоСтарыйФормат",		ЭтоСтарыйФормат);
	ПараметрыОтчета.Вставить("ЭтоОтменаИзменений",	ЭтоОтменаИзменений);
	
	ПараметрыОтчета.Вставить("СписокСохранения",	СписокСохранения);
	
	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ЗаданиеВыполнено = Ложь;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);
	
	
	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ВосстановитьДанныеТаблицАЛКО";
		
	Если СтруктураРеквизитовФормы.мБезОткрытияФормы или (НЕ РежимДлительнойОперации) Тогда
		
		// запуск без механизма длительных операций
		РегламентированнаяОтчетностьАЛКО.ВосстановитьДанныеТаблицАЛКО(ПараметрыОтчета, АдресВоВременномХранилище);
		ЗаданиеВыполнено = Истина;	
		
	Иначе
		
		Если ОбщегоНазначенияКлиентСервер.РежимОтладки()  Тогда
			
			РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
			
			ЗаданиеВыполнено = Истина;
			
		Иначе
			
			НаименованиеЗадания = НСтр("ru = 'Восстановление данных таблиц отчета Алко № " + НомерАлкоОтчета + ".'");
					
			ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
			
			Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, , НаименованиеЗадания);
				
		    
			Попытка
				Задание.ОжидатьЗавершения(ВремяОжидания);
			Исключение
				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
			КонецПопытки;
			
		    ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
		    СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
			
			// Если операция уже завершилась, то сразу обрабатываем результат.
			СообщениеОбОшибке = Неопределено;
			ЗаданиеВыполнено = ПроверитьВыполнениеЗадания(ПараметрыДлительнойОперации.ИдентификаторЗадания, СообщениеОбОшибке);
			
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СообщениеОбОшибке;				
				Сообщение.Сообщить(); 
			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

#КонецОбласти


#Область ПересчетИтоговДлительнаяОперация

Функция ПересчетИтогов(ПараметрыДлительнойОперации)

	РежимДлительнойОперации  = ПараметрыДлительнойОперации.РежимДлительнойОперации;
	
	СтруктураРеквизитовФормы 	= ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	УникальныйИдентификатор 	= ПараметрыДлительнойОперации.УникальныйИдентификатор;
	НомерАлкоОтчета          	= ПараметрыДлительнойОперации.НомерАлкоОтчета;
	
	ИмяФормы					= ПараметрыДлительнойОперации.ИмяФормы;
	СтруктураРесурсов           = ПараметрыДлительнойОперации.СтруктураРесурсов;
	СтруктураСервисРегистров	= ПараметрыДлительнойОперации.СтруктураСервисРегистров;
	
	СтруктураИдГруппБуферИтогов 			= ПараметрыДлительнойОперации.СтруктураИдГруппБуферИтогов;
	СтруктураИдГруппИменРегистровСведений 	= ПараметрыДлительнойОперации.СтруктураИдГруппИменРегистровСведений; 
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ВспомогательныйАдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = АдресВоВременномХранилище;
	СтруктураРеквизитовФормы.ВспомогательныйАдресВоВременномХранилище = ВспомогательныйАдресВоВременномХранилище;
	
	ПараметрыДлительнойОперации.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыДлительнойОперации.Вставить("ВспомогательныйАдресВоВременномХранилище", ВспомогательныйАдресВоВременномХранилище);
	
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);	
	ПараметрыОтчета.Вставить("ДокументСсылка", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);
		
	ПараметрыОтчета.Вставить("СтруктураРесурсов", СтруктураРесурсов);
		
	ПараметрыОтчета.Вставить("СтруктураИдГруппИменРегистровСведений",	СтруктураИдГруппИменРегистровСведений);
		
	ПараметрыОтчета.Вставить("СтруктураИдГруппБуферИтогов",	СтруктураИдГруппБуферИтогов);
	
	ПараметрыОтчета.Вставить("СтруктураСервисРегистров",	СтруктураСервисРегистров);
	
	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ЗаданиеВыполнено = Ложь;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);
		
	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ПересчетИтоговАЛКО";
	
	Если СтруктураРеквизитовФормы.мБезОткрытияФормы или (НЕ РежимДлительнойОперации) Тогда
		
		// запуск без механизма длительных операций
		РегламентированнаяОтчетностьАЛКО.ПересчетИтоговАЛКО(ПараметрыОтчета, АдресВоВременномХранилище);
		ЗаданиеВыполнено = Истина;	
		
	Иначе
	    
		Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
						
			РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
					
			ЗаданиеВыполнено = Истина;
			
		Иначе
			НаименованиеЗадания = НСтр("ru = 'Перерасчет отчета Алко № " + НомерАлкоОтчета + ".'");
					
			ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
			
			Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, , НаименованиеЗадания);
				
		    
			Попытка
				Задание.ОжидатьЗавершения(ВремяОжидания);
			Исключение
				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
			КонецПопытки;
			
		    ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
		    СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
			
			// Если операция уже завершилась, то сразу обрабатываем результат.
			СообщениеОбОшибке = Неопределено;
			ЗаданиеВыполнено = ПроверитьВыполнениеЗадания(ПараметрыДлительнойОперации.ИдентификаторЗадания, СообщениеОбОшибке);
			
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СообщениеОбОшибке;				
				Сообщение.Сообщить(); 
			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

#КонецОбласти


#Область ПечатьОтчетаДлительнаяОперация

Функция ПечатьОтчета(ПараметрыДлительнойОперации)
	
	РежимДлительнойОперации  = ПараметрыДлительнойОперации.РежимДлительнойОперации;
	
	СтруктураРеквизитовФормы 	= ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	УникальныйИдентификатор 	= ПараметрыДлительнойОперации.УникальныйИдентификатор;
	НомерАлкоОтчета          	= ПараметрыДлительнойОперации.НомерАлкоОтчета;
	
	ИмяФормы					= ПараметрыДлительнойОперации.ИмяФормы;	
	ПараметрыФормы				= ПараметрыДлительнойОперации.ПараметрыФормы;
	
	Заголовок 				= ПараметрыДлительнойОперации.Заголовок; 
	ОтчетныйПериодСГодом 	= ПараметрыДлительнойОперации.ОтчетныйПериодСГодом;
	ВидПечати				= ПараметрыДлительнойОперации.ВидПечати;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ВспомогательныйАдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = АдресВоВременномХранилище;
	СтруктураРеквизитовФормы.ВспомогательныйАдресВоВременномХранилище = ВспомогательныйАдресВоВременномХранилище;
	
	ПараметрыДлительнойОперации.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыДлительнойОперации.Вставить("ВспомогательныйАдресВоВременномХранилище", ВспомогательныйАдресВоВременномХранилище);
		
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
		
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилищеZIP");	
	АдресВоВременномХранилищеZIP = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	СтруктураРеквизитовФормы.АдресВоВременномХранилищеZIP = АдресВоВременномХранилищеZIP;
	ПараметрыДлительнойОперации.Вставить("АдресВоВременномХранилищеZIP", АдресВоВременномХранилищеZIP);
	
	СтруктураРеквизитовФормы.Вставить("Заголовок", Заголовок);	
	СтруктураРеквизитовФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);	
	СтруктураРеквизитовФормы.Вставить("ОтчетныйПериодСГодом", ОтчетныйПериодСГодом);
		
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ДокументСсылка", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);
		
	ПараметрыОтчета.Вставить("ПараметрыФормы", ПараметрыФормы);
			
	ПараметрыОтчета.Вставить("ВидПечати", ВидПечати);
	
	ПараметрыОтчета.Вставить("СтруктураСервисРегистров",	ПараметрыФормы.СтруктураСервисРегистров);
	
	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ЗаданиеВыполнено = Ложь;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);
		
	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ПечатьОтчетаАЛКО";
		
			
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() или (НЕ РежимДлительнойОперации) Тогда
				
		РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
				
		ЗаданиеВыполнено = Истина;
		
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Печать отчета Алко № " + НомерАлкоОтчета + ".'");
				
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		
		Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, , НаименованиеЗадания);
			
	    
		Попытка
			Задание.ОжидатьЗавершения(ВремяОжидания);
		Исключение
			// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
		КонецПопытки;
		
	    ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	    СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
		
		// Если операция уже завершилась, то сразу обрабатываем результат.
		СообщениеОбОшибке = Неопределено;
	    ЗаданиеВыполнено = ПроверитьВыполнениеЗадания(ПараметрыДлительнойОперации.ИдентификаторЗадания, СообщениеОбОшибке);
		
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СообщениеОбОшибке;				
			Сообщение.Сообщить(); 
		
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ЗаданиеВыполнено;
	
КонецФункции
	
#КонецОбласти 


#Область ОчисткаОтМусораДлительнаяОперация

Функция ОчисткаРегистровСведенийОтМусора(ПараметрыДлительнойОперации)
	
	РежимДлительнойОперации  = ПараметрыДлительнойОперации.РежимДлительнойОперации;
	
	СтруктураРеквизитовФормы 	= ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	УникальныйИдентификатор 	= ПараметрыДлительнойОперации.УникальныйИдентификатор;
	НомерАлкоОтчета          	= ПараметрыДлительнойОперации.НомерАлкоОтчета;
	
	ИмяФормы					= ПараметрыДлительнойОперации.ИмяФормы;	
	
	СтруктураИдГруппИменРегистровСведений 	= ПараметрыДлительнойОперации.СтруктураИдГруппИменРегистровСведений;
	СтруктураСервисРегистров 				= ПараметрыДлительнойОперации.СтруктураСервисРегистров;
	СтруктураСервисРегистровУдаленные 		= ПараметрыДлительнойОперации.СтруктураСервисРегистровУдаленные;
	УдалятьПомеченныеНаУдаление				= ПараметрыДлительнойОперации.УдалятьПомеченныеНаУдаление;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ВспомогательныйАдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = АдресВоВременномХранилище;
	СтруктураРеквизитовФормы.ВспомогательныйАдресВоВременномХранилище = ВспомогательныйАдресВоВременномХранилище;
	
	ПараметрыДлительнойОперации.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыДлительнойОперации.Вставить("ВспомогательныйАдресВоВременномХранилище", ВспомогательныйАдресВоВременномХранилище);
		
	СтруктураРеквизитовФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);	
	
	КоличествоУдаленных = 0;
	Для каждого ЭлементСервисРегистровУдаленные Из СтруктураСервисРегистровУдаленные Цикл
	
		СервисРегистровУдаленные = ЭлементСервисРегистровУдаленные.Значение;
		Для каждого СтрокаСервисРегистров Из СервисРегистровУдаленные Цикл
			КоличествоУдаленных = КоличествоУдаленных + СтрокаСервисРегистров.КоличествоСтрок;			   
		КонецЦикла;
			
	КонецЦикла;
	
	РежимДлительнойОперации = (КоличествоУдаленных > 1000);
		
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", 	ВспомогательныйАдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ДокументСсылка", 			СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", 		ИмяФормы);
		
	ПараметрыОтчета.Вставить("СтруктураИдГруппИменРегистровСведений", 	СтруктураИдГруппИменРегистровСведений);
	ПараметрыОтчета.Вставить("СтруктураСервисРегистров",				СтруктураСервисРегистров);
	ПараметрыОтчета.Вставить("СтруктураСервисРегистровУдаленные",		СтруктураСервисРегистровУдаленные);
	ПараметрыОтчета.Вставить("УдалятьПомеченныеНаУдаление",				УдалятьПомеченныеНаУдаление);

	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ЗаданиеВыполнено = Ложь;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);
		
	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ОчиститьРегистрыСведенийАЛКООтМусора";
			
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() или (НЕ РежимДлительнойОперации)  Тогда
		
		РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
				
		ЗаданиеВыполнено = Истина;
		
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Очистка от мусора регистров отчета Алко № " + НомерАлкоОтчета + ".'");
				
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		
		Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, , НаименованиеЗадания);
			
	    
		Попытка
			Задание.ОжидатьЗавершения(ВремяОжидания);
		Исключение
			// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
		КонецПопытки;
		
	    ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	    СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
		
		// Если операция уже завершилась, то сразу обрабатываем результат.
		СообщениеОбОшибке = Неопределено;
	    ЗаданиеВыполнено = ПроверитьВыполнениеЗадания(ПараметрыДлительнойОперации.ИдентификаторЗадания, СообщениеОбОшибке);
		
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СообщениеОбОшибке;				
			Сообщение.Сообщить(); 
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции
	
#КонецОбласти 


#Область ПроверитьВыгрузкуОтчетаДлительнаяОперация

Функция ПроверитьВыгрузкуОтчета(ПараметрыДлительнойОперации)

	РежимДлительнойОперации  = ПараметрыДлительнойОперации.РежимДлительнойОперации;
	
	СтруктураРеквизитовФормы 	= ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	УникальныйИдентификатор 	= ПараметрыДлительнойОперации.УникальныйИдентификатор;
	НомерАлкоОтчета          	= ПараметрыДлительнойОперации.НомерАлкоОтчета;
	
	ИмяФормы					= ПараметрыДлительнойОперации.ИмяФормы;
	ПараметрыФормы           	= ПараметрыДлительнойОперации.ПараметрыФормы;
	ПараметрыВыгрузки			= ПараметрыДлительнойОперации.ПараметрыВыгрузки;
		
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ВспомогательныйАдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = АдресВоВременномХранилище;
	СтруктураРеквизитовФормы.ВспомогательныйАдресВоВременномХранилище = ВспомогательныйАдресВоВременномХранилище;
	
	ПараметрыДлительнойОперации.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыДлительнойОперации.Вставить("ВспомогательныйАдресВоВременномХранилище", ВспомогательныйАдресВоВременномХранилище);
		
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ДокументСсылка", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);
	
	ПараметрыОтчета.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);	
	ПараметрыОтчета.Вставить("ПараметрыФормы", ПараметрыФормы);	
				
	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ЗаданиеВыполнено = Ложь;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);
		
	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ПроверитьВыгрузкуОтчетаАЛКО";
		
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() или (НЕ РежимДлительнойОперации)  Тогда
		
		РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		
		ЗаданиеВыполнено = Истина;
		
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Проверка выгрузки отчета Алко № " + НомерАлкоОтчета + ".'");
				
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		
		Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, , НаименованиеЗадания);
			
	    
		Попытка
			Задание.ОжидатьЗавершения(ВремяОжидания);
		Исключение
			// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
		КонецПопытки;
		
	    ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	    СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
		
		// Если операция уже завершилась, то сразу обрабатываем результат.
		СообщениеОбОшибке = Неопределено;
		ЗаданиеВыполнено = ПроверитьВыполнениеЗадания(ПараметрыДлительнойОперации.ИдентификаторЗадания, СообщениеОбОшибке);
		
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СообщениеОбОшибке;				
			Сообщение.Сообщить(); 
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

#КонецОбласти


#Область ВыгрузкаОтчетаДлительнаяОперация

Функция ВыгрузкаОтчета(ПараметрыДлительнойОперации)

	РежимДлительнойОперации  = ПараметрыДлительнойОперации.РежимДлительнойОперации;
	
	СтруктураРеквизитовФормы 	= ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	УникальныйИдентификатор 	= ПараметрыДлительнойОперации.УникальныйИдентификатор;
	НомерАлкоОтчета          	= ПараметрыДлительнойОперации.НомерАлкоОтчета;
	
	ИмяФормы					= ПараметрыДлительнойОперации.ИмяФормы;
	ПараметрыФормы           	= ПараметрыДлительнойОперации.ПараметрыФормы;
	ПараметрыВыгрузки			= ПараметрыДлительнойОперации.ПараметрыВыгрузки;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ВспомогательныйАдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = АдресВоВременномХранилище;
	СтруктураРеквизитовФормы.ВспомогательныйАдресВоВременномХранилище = ВспомогательныйАдресВоВременномХранилище;
	
	ПараметрыДлительнойОперации.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыДлительнойОперации.Вставить("ВспомогательныйАдресВоВременномХранилище", ВспомогательныйАдресВоВременномХранилище);
		
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ДокументСсылка", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);
		
	ПараметрыОтчета.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);		
	ПараметрыОтчета.Вставить("ПараметрыФормы", ПараметрыФормы);	
		
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
			
	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ЗаданиеВыполнено = Ложь;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);
		
	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ВыгрузитьОтчетАЛКО";
		
		
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() или (НЕ РежимДлительнойОперации) Тогда
				
		РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		
		ЗаданиеВыполнено = Истина;
		
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Выгрузка отчета Алко № " + НомерАлкоОтчета + ".'");
				
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		
		Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, , НаименованиеЗадания);
			
	    
		Попытка
			Задание.ОжидатьЗавершения(ВремяОжидания);
		Исключение
			// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
		КонецПопытки;
		
	    ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	    СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
		
		// Если операция уже завершилась, то сразу обрабатываем результат.
		СообщениеОбОшибке = Неопределено;
		ЗаданиеВыполнено = ПроверитьВыполнениеЗадания(ПараметрыДлительнойОперации.ИдентификаторЗадания, СообщениеОбОшибке);
		
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СообщениеОбОшибке;				
			Сообщение.Сообщить(); 
		
		КонецЕсли;
			
	КонецЕсли;
	
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

#КонецОбласти


#Область ЗаполнитьПоДаннымИБДлительнаяОперация

Функция ЗаполнитьПоДаннымИБ(ПараметрыДлительнойОперации)

	СтруктураРеквизитовФормы 	= ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	УникальныйИдентификатор 	= ПараметрыДлительнойОперации.УникальныйИдентификатор;
	НомерАлкоОтчета          	= ПараметрыДлительнойОперации.НомерАлкоОтчета;
	
	ИмяФормы					= ПараметрыДлительнойОперации.ИмяФормы;
	ИмяОбъектаФормы				= ПараметрыДлительнойОперации.ИмяОбъектаФормы;
		
	СтруктураИдГруппБуферИтогов 			= ПараметрыДлительнойОперации.СтруктураИдГруппБуферИтогов;
	СтруктураИдГруппИменРегистровСведений 	= ПараметрыДлительнойОперации.СтруктураИдГруппИменРегистровСведений;
	
	Контейнер = ПараметрыДлительнойОперации.Контейнер;
		
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ВспомогательныйАдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = АдресВоВременномХранилище;
	СтруктураРеквизитовФормы.ВспомогательныйАдресВоВременномХранилище = ВспомогательныйАдресВоВременномХранилище;
	
	ПараметрыДлительнойОперации.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыДлительнойОперации.Вставить("ВспомогательныйАдресВоВременномХранилище", ВспомогательныйАдресВоВременномХранилище);
		
			
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			 	СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ПараметрыОтчета.Вставить("ДокументСсылка", 				СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ПараметрыОтчета.Вставить("АдресХранилища",				АдресВоВременномХранилище);
	
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки"); // Адрес временного хранилища, где размещена расшифровка результата автозаполнения.
		
	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", 		ВспомогательныйАдресВоВременномХранилище);	
		
	ПараметрыОтчета.Вставить("СтруктураИдГруппИменРегистровСведений",	СтруктураИдГруппИменРегистровСведений);
	
	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", 			ИмяФормы);
	
	ПараметрыОтчета.Вставить("СтруктураИдГруппБуферИтогов",	СтруктураИдГруппБуферИтогов);
			
	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ЗаданиеВыполнено = Ложь;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	
	// для внешнего отчета ничего делать не надо
	ИдОтчета = ИмяОбъектаФормы;
	ПараметрыЭкспортнойПроцедуры.Добавить(ИдОтчета);
	
	ИдРедакцииОтчета = Сред(ИмяФормы, СтрНайти(ИмяФормы, ".", НаправлениеПоиска.СКонца,,1) + 1);	
	ПараметрыЭкспортнойПроцедуры.Добавить(ИдРедакцииОтчета);
	
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(Контейнер);
	
	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет";
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки()  Тогда
				
		РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		
		ЗаданиеВыполнено = Истина;
		
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы отчета Алко № " + НомерАлкоОтчета + ".'");
				
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		
		Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, , НаименованиеЗадания);
			
	    
		Попытка
			Задание.ОжидатьЗавершения(ВремяОжидания);
		Исключение
			// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
		КонецПопытки;
		
	    ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	    СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
		
		// Если операция уже завершилась, то сразу обрабатываем результат.
		СообщениеОбОшибке = Неопределено;
		ЗаданиеВыполнено = ПроверитьВыполнениеЗадания(ПараметрыДлительнойОперации.ИдентификаторЗадания, СообщениеОбОшибке);
		
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СообщениеОбОшибке;				
			Сообщение.Сообщить(); 
		
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
			
	
КонецФункции

#КонецОбласти


#КонецОбласти

