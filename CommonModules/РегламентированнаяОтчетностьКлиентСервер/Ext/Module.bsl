////////////////////////////////////////////////////////////////////////////////
// Модуль содержит общие процедуры и функции для форм регламентированной
// отчетности.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция возвращает значение текущего показателя.
//
// Параметры:
//   Форма - Форма - форма регл. отчета.
//   СтраницаПанели - Строка - имя раздела регл. отчета.
//   ОсновнаяЧасть - Строка - имя области.
//
// Возвращаемое значение:
//   Строка - значение текущего показателя.
//
Функция ВернутьЗначениеПараметраСЛиста(Форма, СтраницаПанели, ОсновнаяЧасть) Экспорт

	ТекОбласть = Форма.ТабличныйДокумент;

	#Если НаКлиенте Тогда
		Результат = ТекОбласть.Области[ОсновнаяЧасть].Значение;
	#Иначе
		Результат = ТекОбласть.Области[ОсновнаяЧасть].Текст;
	#КонецЕсли

	Возврат Результат;

КонецФункции

// Возвращает свойства раздела.
//
Функция ПолучитьСвойствоРаздела(Форма, Знач ИмяСтраницы, Знач ИмяСвойства, ВозвращаемоеЗначение = Неопределено) Экспорт

	Результат = Неопределено;

	Если ТипЗнч(Форма.мСвойстваРазделовДекларации) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Результат;
	КонецЕсли;
    	
	ИмяСтраницыП = ИмяСтраницы;
	
	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если ИмяСтраницыП = СтрокаУровня1.ИмяСтраницы Тогда
			
			Если СвойствоОпределено(СтрокаУровня1, ИмяСвойства) Тогда
				
				Результат = СтрокаУровня1[ИмяСвойства];
				
			Иначе
				
				Результат = ВозвращаемоеЗначение;
				
			КонецЕсли;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Возвращает признак определения свойства.
//
Функция СвойствоОпределено(Объект, ИмяСвойства) Экспорт
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

// Сохраняет данные многостраничного раздела текущей страницы.
//
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницы, ОчищатьРазделЕслиЕстьМногострочность) Экспорт
	Перем ТаблицаСтраницРаздела;

	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = Форма[ИмяТекТабличногоПоля];
    	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	// Возьмем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	// Если нет активной страницы - то выход
	Если СтрТаблицаСтраницы.Количество() = 0 Тогда
		
		Если ОчищатьРазделЕслиЕстьМногострочность Тогда
			#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
				Форма.ОчиститьТабличноеПолеНаКлиенте(ИмяТекущейСтраницы);
			#Иначе
				Форма.ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницы);
			#КонецЕсли
		КонецЕсли;
		
		Возврат;
		
	Иначе
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
	КонецЕсли;
    
	// Сохраним данные текущей страницы.
	// В каждой декларации функция СобратьДанныеТекущегоТаблПоля - разные !
	#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		СтруктураДанныхТекущейТаблицы = Форма.СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТекТабличногоПоля);
	#Иначе
		СтруктураДанныхТекущейТаблицы = Форма.СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТекТабличногоПоля);
	#КонецЕсли
	
	КолМногострочныхЧастей = ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницы, "МногострочностьВРазделе").Количество();
		
	// Определяет, как работать с многострочностью в документе, либо как с ТаблЗначений или со структурой

	СохранятьМногострКакТЗ = ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницы, "СохранятьМногострКакТЗ");

	// Если лист является многострочным и многостраничным, то необходимо добавить в поле данные доп. строк
	// в этой декларации не используется, т.к. многострочность одна на листе
	Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда

		ВРазделеДекларацииЕстьМногострочность = Истина;
		// Определим ИмяГруппы дополнительных строк, по необходимой страницы
		// Если на листе больше одной многострочной части, то алгорит сбора будет другим

		#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
			СтруктураДанныхДопСтрокРаздела = Форма.СформироватьСтруктуруДанныхДопСтрокСтраницыКлиент(ИмяТекущейСтраницы);
		#Иначе
			СтруктураДанныхДопСтрокРаздела = Форма.СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяТекущейСтраницы);
		#КонецЕсли
			
		ТаблицаДопСтрокРаздела = СтруктураДанныхДопСтрокРаздела;

	ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда

		ВРазделеДекларацииЕстьМногострочность = Истина;
		// Блок для разделов, где хранится только одна многострочная часть
		#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
			ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяТекущейСтраницы);
			Форма.ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппыДопСтрок);
		#Иначе
			ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекущейСтраницы);
			Форма.ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
		#КонецЕсли

		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
											
		ТаблицаДопСтрокРаздела = Форма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
						
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокРаздела);
		                        		
	ИначеЕсли КолМногострочныхЧастей = 0 Тогда

		ВРазделеДекларацииЕстьМногострочность = Ложь;

	КонецЕсли;

	// Сохраним данные
	СтрТаблицаСтраницы.Данные.Очистить();
	СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
		
	Если ВРазделеДекларацииЕстьМногострочность Тогда
        		
		Если ОчищатьРазделЕслиЕстьМногострочность Тогда
			#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
				Форма.ОчиститьТабличноеПолеНаКлиенте(ИмяТекущейСтраницы);
			#Иначе
				Форма.ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницы);
			#КонецЕсли
		КонецЕсли;
        		
		// Запишем данные доп. строк
						
		Если (СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0) 
		   И (СтрТаблицаСтраницы.ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = ТаблицаДопСтрокРаздела;
			
		Иначе
			
		   СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(ТаблицаДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			
		КонецЕсли;
		
	КонецЕсли;

	// Попытаемся определить представление, только по текущей странице (по активной), последний параметр Истина
	ОпределитьПредставлениеДопСтраниц(Форма, ИмяТекущейСтраницы, Истина);

КонецПроцедуры

// Проверяет, является ли переданное значение числом.
//
Функция ЯвляетсяЧислом(Значение) Экспорт

	Если ТипЗнч(Значение) = Тип("Число") Тогда

		Возврат Истина

	Иначе

		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Если Значение = "" Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Попытка
			Р = Число(Значение);
		Исключение
			Возврат Ложь;
		КонецПопытки;
			Возврат Истина;

	КонецЕсли;

КонецФункции

// Возвращает адрес в формате 9-ти запятых.
//
Функция ПредставлениеАдресаВФормате9Запятых(Знач АдресВФормате9Запятых, АнализироватьРегион = Ложь) Экспорт
	
	Если (СтрЧислоВхождений(АдресВФормате9Запятых, ",") <> 9 И СтрЧислоВхождений(АдресВФормате9Запятых, ",") <> 12) ИЛИ (Лев(АдресВФормате9Запятых, 3) <> "643" И Лев(АдресВФормате9Запятых, 3) <> "999") Тогда	
		Возврат АдресВФормате9Запятых;
	КонецЕсли;
	
	КопияАдреса = АдресВФормате9Запятых;
	
	ПоследняяКоордината = 0;
	СоставляющиеАдреса = Новый Массив;
	КоординатыЗапятых = Новый Массив;
	
	Для Сч = 1 По 12 Цикл
		КоординатаЗапятой = СтрНайти(КопияАдреса, ",");
		Если КоординатаЗапятой > 0 Тогда
			КоординатыЗапятых.Добавить(ПоследняяКоордината + КоординатаЗапятой);
			ПоследняяКоордината = ПоследняяКоордината + КоординатаЗапятой;
			КопияАдреса = Сред(КопияАдреса, КоординатаЗапятой + 1);
		Иначе
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	КоличествоЗапятых = КоординатыЗапятых.Количество();
	
	СоставляющиеАдреса.Добавить(СокрЛП(Лев(АдресВФормате9Запятых, КоординатыЗапятых[0] - 1)));
	Для Сч = 0 По КоличествоЗапятых - 2 Цикл
		СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[Сч] + 1, КоординатыЗапятых[Сч + 1] - (КоординатыЗапятых[Сч] + 1))));
	КонецЦикла;
	СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[КоличествоЗапятых - 1] + 1)));
	
	ТекПредставление = "";

	ТипДома = "дом";
    Если КоличествоЗапятых > 9 Тогда
		ТипДома = ?(ПустаяСтрока(СоставляющиеАдреса[10]), ТипДома, СоставляющиеАдреса[10]);
	КонецЕсли;	
	ТипКорпуса = "корпус";
    Если КоличествоЗапятых > 10 Тогда
		ТипКорпуса = ?(ПустаяСтрока(СоставляющиеАдреса[11]), ТипКорпуса, СоставляющиеАдреса[11]);
	КонецЕсли;	
	ТипКвартиры = "кв.";
    Если КоличествоЗапятых > 11 Тогда
		ТипКвартиры = ?(ПустаяСтрока(СоставляющиеАдреса[12]), ТипКвартиры, СоставляющиеАдреса[12]);
	КонецЕсли;	
	
	Если СокрЛП(СоставляющиеАдреса[1]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[1]);
	КонецЕсли;
    		
	Если СокрЛП(СоставляющиеАдреса[2]) <> "" Тогда
		Регион = СокрЛП(СоставляющиеАдреса[2]);
		Если АнализироватьРегион Тогда
			
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Регион) Тогда
				
				Регион = РегламентированнаяОтчетностьВызовСервера.ПолучитьНазваниеРегионаПоКоду(Регион);
				
			КонецЕсли;
			
		КонецЕсли;

		ТекПредставление = ТекПредставление + ", " + Регион;
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[3]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[3]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[4]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[4]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[5]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[5]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[6]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[6]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[7]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ТипДома + " № " + СокрЛП(СоставляющиеАдреса[7]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[8]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ТипКорпуса + " " + СокрЛП(СоставляющиеАдреса[8]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[9]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ТипКвартиры + " " + СокрЛП(СоставляющиеАдреса[9]);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;
	
КонецФункции

// Обновляет структуру многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы) Экспорт
	Перем СтруктураГруппы;
    	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		НСтрСтр = Формат(НСтр, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		    ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Очищает табличное поле.
//
Процедура ОчиститьТабличноеПоле(Форма, Знач ВыбТабличноеПолеИмя) Экспорт

	// Проверяем многострочные блоки в разделе.
	НастройкиМнгЧ = ПолучитьСвойствоРаздела(Форма, ВыбТабличноеПолеИмя, "МногострочностьВРазделе");
	ЕстьМногострочныеБлоки = (ТипЗнч(НастройкиМнгЧ) = Тип("ДанныеФормыКоллекция")) И (НастройкиМнгЧ.Количество() > 0);
	Если ЕстьМногострочныеБлоки Тогда
		Для каждого Блок Из НастройкиМнгЧ Цикл
			МногострочныйБлок = Блок.ИдГруппы;
			УдалитьДопСтрокиМногострочнойЧастиРегОтчета(Форма, МногострочныйБлок, Ложь);
		КонецЦикла;
	КонецЕсли;
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;
        		
		Если Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
			ТекущаяОбласть.Значение = "";
		Иначе
			ТекущаяОбласть.Очистить();
		КонецЕсли;
		
	КонецЦикла;

	ИмяСтраницыПанели = ВыбТабличноеПолеИмя;
	ПредставлениеДанных = ПолучитьСвойствоРаздела(Форма, ВыбТабличноеПолеИмя, "ПредставлениеДанных");
	Если ПредставлениеДанных Тогда
		
		#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
			Форма.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(ИмяСтраницыПанели);
			Форма.ЗаполнениеЗначенийВКвадратикахНаКлиенте(ИмяСтраницыПанели);
		#Иначе
			Форма.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(ИмяСтраницыПанели);
			Форма.ЗаполнениеЗначенийВКвадратикахНаСервере(ИмяСтраницыПанели);
		#КонецЕсли
		
	КонецЕсли;

	Если ЕстьМногострочныеБлоки Тогда
		Для каждого Блок Из НастройкиМнгЧ Цикл
			МногострочныйБлок = Блок.ИдГруппы;
			
			#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
				Форма.ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(МногострочныйБлок);
			#Иначе
				Форма.ОбновитьСтруктуруМногострочногоРазделаНаСервере(МногострочныйБлок);
			#КонецЕсли
			
		КонецЦикла;
		
		// Расчет всегда запускаем только в многострочных листах. В не многострочных, запускается при вставки доп. страницы, или интерактивно в коде.
		#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
			Форма.РасчетНаКлиенте(ИмяСтраницыПанели);
		#Иначе
			Форма.РасчетНаСервере(ИмяСтраницыПанели);
		#КонецЕсли
				
	КонецЕсли;

КонецПроцедуры

// Удаляет дополнительные строки многострочной части регламентированного отчета.
//
Процедура УдалитьДопСтрокиМногострочнойЧастиРегОтчета(Форма, ИдГруппы, ОбновлятьБлок = Истина) Экспорт
	Перем ТаблицаДопСтрок;
	Перем ИсходноеКоличествоСтрокГруппы;

	Форма.мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, ТаблицаДопСтрок);
	
	ТаблицаДопСтрок = Форма[ТаблицаДопСтрок];
	
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИдГруппы, ИсходноеКоличествоСтрокГруппы);
	ТекущееКоличествоСтрок = ТаблицаДопСтрок.Количество();
	
	#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		ТекТабличноеПолеИмя = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы);
	#Иначе
		ТекТабличноеПолеИмя = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы);
	#КонецЕсли
	
	ТекТабличноеПоле = Форма.ТабличныйДокумент;
	
	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда

		НастройкиМнгЧ = ПолучитьСвойствоРаздела(Форма, ТекТабличноеПолеИмя, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИдГруппы))[0];
		МнгЧастьОбластьИмя = НастройкиМнгЧ.Область;
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;

		МнгЧастьОбласть = ТекТабличноеПоле.Области.Найти(МнгЧастьОбластьИмя);
		Низ = ТекТабличноеПоле.Области.Найти(МнгЧастьОбластьИмя).Низ + 1;
		
		#Если НаКлиенте Тогда
			Текст = МнгЧастьОбласть.Текст;
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, Низ, Низ + ((ТекущееКоличествоСтрок - ИсходноеКоличествоСтрокГруппы) * ВысотаСтроки) - 1);
			Форма.ТабличныйДокумент = ТекТабличноеПоле;
		#Иначе
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, Низ, Низ + ((ТекущееКоличествоСтрок - ИсходноеКоличествоСтрокГруппы) * ВысотаСтроки) - 1);
		#КонецЕсли
				
		ТаблицаДопСтрок.Очистить();
		Для Инд = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			ТаблицаДопСтрок.Добавить();
		КонецЦикла;
		Если ОбновлятьБлок Тогда
			#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
				Форма.ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИдГруппы);
			#Иначе
				Форма.ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИдГруппы);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проставляет значения в квадратиках.
// 
Процедура ПроставитьВКвадратыЗначения(Форма, Знач Лист, Знач Показатель, Знач Размерность, Знач Значение, ДополнитьЗначение = Ложь, НольКакНоль = Ложь) Экспорт

	Раздел = Форма["ТабличныйДокумент"];

	ДопРазряд = ""; // дополнительный разряд в счетчике
	ТестОк = Истина;

	// Логика осталась от прошлого, в случае именования ячеек с ведущем нулем
	// например: КБК_01, КБК_02 и т.д.
	Если Раздел.Области.Найти(Показатель + ДопРазряд + "1") = Неопределено Тогда
		ТестОк = Ложь;
	КонецЕсли;

	Если НЕ ТестОк Тогда
		Если ДопРазряд = "0" Тогда
			ДопРазряд = "";
		Иначе
			ДопРазряд = "0";
		КонецЕсли;
	КонецЕсли;

	// Если и с противоположным индексом показателя на листе нет, то не выполняем процедуру.
	Если Раздел.Области.Найти(Показатель + ДопРазряд + "1") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаФорматаЯчейки = СтрЗаменить(Форма.СтруктураРеквизитовФормы.мСтрокаФормата, "; ЧН=-", "");
	// Убираем пробелы между группами разрядов числа
	СтрокаФорматаЯчейки = СтрокаФорматаЯчейки + "; ЧГ=0";

	Если (ДополнитьЗначение) Или ((ЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда

		Если ((ЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда

			Если НольКакНоль Тогда
				ЗначениеДопСтрока = ДополнитьСтроку("0", Размерность," ");
			Иначе
				ЗначениеДопСтрока = ДополнитьСтроку("", Размерность," ");
			КонецЕсли;

		Иначе

			ЗначениеДопСтрока = Формат(Значение, СтрокаФорматаЯчейки);
			ЗначениеДопСтрока = ДополнитьСтроку(ЗначениеДопСтрока, Размерность," ");

		КонецЕсли;

	Иначе

		ЗначениеДопСтрока = Значение;

	КонецЕсли; // ДополнитьЗначение

	ДопЗначение = 0;

	Для НомЯчейки = 1 По Размерность Цикл

		// Конструкция Попытка/Исключение/КонецПопытки добавлена, т.к. в декларациях по алкогольной
		// продукции 2006 не на всех листах есть ИНН/КПП, а установка этих показателей производится
		// централизовано через роЗаполнитьАвто где нет возможности обходить не нужные для заполнения
		// листы.
		Попытка
			Раздел.Области[Показатель + ?(СтрДлина(НомЯчейки) = 1, ДопРазряд + НомЯчейки, НомЯчейки)].Значение = Сред(ЗначениеДопСтрока, НомЯчейки, 1);
		Исключение
		КонецПопытки;

	КонецЦикла;
    	
КонецПроцедуры

// Дополняет строку.
//
Функция ДополнитьСтроку(Знач Стр, Длина, Чем=" ", Режим = 0) Экспорт
	
	СимволовДополнить = Длина -  СтрДлина(Стр);
	Добавок = "";
	Для Н=1 По СимволовДополнить Цикл
		Добавок =	Добавок + Чем;
	КонецЦикла;
	Возврат ?(Режим=0, Добавок + Стр, Стр + Добавок);
	
КонецФункции

// Обновляет структуру многостраничных разделов.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(Форма, ИмяСтраницы = Неопределено) Экспорт
    	
	Для Каждого Страница Из Форма.мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Форма[Страница.Значение];

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяСтраницы <> ИмяТекущейСтраницыПанели Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		// Для декларации по прибыли, специальные два раздела сохраняются особым образом
		// пришлось внести изменения в общий модуль и процедуру для всех отчетов

		Если (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ1") Или (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ2") Тогда
			
			#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
				Форма.СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешенияКлиент(ИмяТекущейСтраницыПанели);
			#Иначе
				Форма.СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения(ИмяТекущейСтраницыПанели);
			#КонецЕсли
			
		Иначе

		// Обновляя представления сохранения активного листа декларации
		// Параметр Ложь - не позволяет удалять многострочные части, если они есть на листе
			СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает свойство групповых значений.
//
Процедура СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, Операция, ЦветФона = Неопределено, ИмяСтраницы = Неопределено) Экспорт

	Если ИмяСтраницы = Неопределено Тогда
		
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
					
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ИмяСтраницыПанели = ИмяСтраницы;
	КонецЕсли;

	ИмяПоляТаблДокумента = "ТабличныйДокумент";

	СмысловаяЧасть = ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
	Если СмысловаяЧасть = "" Тогда
	// не групповая ячейка
		Возврат;
	КонецЕсли;
	ТекущийСчетчик = ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
	ТекущийСчетчикЦел = Число(ТекущийСчетчик);
	МожноРаботать = Истина;
	Пока МожноРаботать Цикл
		Координата = СмысловаяЧасть + Строка(ТекущийСчетчикЦел);

		Если Форма[ИмяПоляТаблДокумента].Области.Найти(Координата) <> Неопределено Тогда
			Попытка
				Если Операция = "УстановитьЗащиту" Тогда
					Форма[ИмяПоляТаблДокумента].Области[Координата].Защита = Истина;
				КонецЕсли;

				Если Операция = "СнятьЗащиту" Тогда
					Форма[ИмяПоляТаблДокумента].Области[Координата].Защита = Ложь;
				КонецЕсли;

				Если Операция = "ПроставитьЦветРаскраски" Тогда
					Форма[ИмяПоляТаблДокумента].Области[Координата].ЦветФона = ЦветФона;
				КонецЕсли;

				Если Операция = "Очистить" Тогда
					Форма[ИмяПоляТаблДокумента].Области[Координата].Значение = "";
				КонецЕсли;

				ТекущийСчетчикЦел = ТекущийСчетчикЦел + 1; // работаем со следующей ячейкой

			Исключение
				МожноРаботать = Ложь; // далее нет ячеек многоквадратного значения
				Прервать;
			КонецПопытки;

		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла; // Пока

КонецПроцедуры

// Возвращает смысловую часть имени ячейки.
//
Функция ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Определение = Истина) Экспорт

	Для Инд = 1 По СтрДлина(ИмяЯчейки) Цикл
		
		Если Инд > 4 Тогда
			Возврат "";
		КонецЕсли;
		
		СимволСтроки = Сред(ИмяЯчейки,СтрДлина(ИмяЯчейки) - Инд + 1 ,1);

		Если СимволСтроки = "_" Тогда 
			АдресПоследнегоРазделителя = СтрДлина(ИмяЯчейки) - Инд + 1;
			Прервать;
		КонецЕсли;

		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СимволСтроки) Тогда
			АдресПоследнегоРазделителя = СтрДлина(ИмяЯчейки) - Инд + 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	СмысловаяЧасть = Сред(ИмяЯчейки, 1, АдресПоследнегоРазделителя);

	ТекущийСчетчик = Сред(ИмяЯчейки, АдресПоследнегоРазделителя + 1, СтрДлина(ИмяЯчейки) - АдресПоследнегоРазделителя);

	Если Определение Тогда
		Возврат СмысловаяЧасть;
	Иначе
		Возврат ТекущийСчетчик;
	КонецЕсли;

КонецФункции

// Выводит раздел в табличный документ.
//
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		ТекТабличноеПолеИмя = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекТабличноеПолеИмя = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
	
	ТекТабличноеПоле = Форма["ТабличныйДокумент"];
				
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);

	Раздел = Форма["ТабличныйДокумент"];
		
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		НастройкиМнгЧ = ПолучитьСвойствоРаздела(Форма, ТекТабличноеПолеИмя, "МногострочностьВРазделе");
				
		РегламентированнаяОтчетностьВызовСервера.ВывестиРазделВТабличныйДокументНаСервере(НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, Форма.мСтруктураКолвоКолонокРазделов);
		
		Форма["ТабличныйДокумент"] = Раздел;
		ТекТабличноеПоле           = Форма["ТабличныйДокумент"];

	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
						
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

// Проверяет, входит ли показатель в многострочную часть.
//
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя) Экспорт
    	
	Если НЕ СвойствоОпределено(Форма, "мСтруктураМногострочныхРазделов") Тогда
		Возврат 0;
	КонецЕсли;

	ДлИмени = 11;
	Попытка
		Для Каждого КЗ Из Форма.мСтруктураМногострочныхРазделов Цикл
			ДлИмени = СтрДлина(КЗ.Ключ);
			Прервать;
		КонецЦикла;
	Исключение
	КонецПопытки;
	ИмяГруппы = Лев(ИмяПоказателя, ДлИмени);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

// Возвращает таблицу отчетов, действующих в выбранном отчетном периоде.
//
Функция ПолучитьТаблицуОтчетовДействующихВВыбранныйПериод(Форма) Экспорт

	Форма.РезультирующаяТаблица.Очистить();
	
	// Временный код необходимый до полного перевода Основных форм всех
	// регламентированных отчетов на новую форму.
	ЕстьКолонкаРедакцияФормы = Ложь;
	Для каждого ЭлФорма Из Форма.мТаблицаФормОтчета Цикл
		
		ЕстьКолонкаРедакцияФормы = ЭлФорма.Свойство("РедакцияФормы");
		Прервать;
			
	КонецЦикла; 
	// Конец временного кода.
	
	
	// Осуществим перебор по таблице содеражащей формы отчетов и периоды действий.
	// При занесении строк РезультирующаяТаблица попутно отсортируем,
	// это нужно чтобы избежать в дальнейшем метода ДанныеФормыКоллекция.Сортировать()
	// на Клиенте, который вызывает Серверный вызов.
	СписокДатКонца = Новый СписокЗначений;
	Для Каждого ЭлФорма Из Форма.мТаблицаФормОтчета Цикл
		
		ДатаНачалаДействияФормы = ЭлФорма.ДатаНачалоДействия;
		ДатаКонцаДействияФормы  = КонецДня(?(ЭлФорма.ДатаКонецДействия = ПустоеЗначениеТипа(Тип("Дата")), '20291231', ЭлФорма.ДатаКонецДействия));
		
		Если Форма.мДатаКонцаПериодаОтчета <= ДатаКонцаДействияФормы
		   И Форма.мДатаКонцаПериодаОтчета >= ДатаНачалаДействияФормы Тогда
			
			ТекущаяДатаКонца = СписокДатКонца.Добавить(ДатаКонцаДействияФормы);
			
			// Обход ошибки платформы: в тонком и веб клиентах сортировка списка значений,
			// состоящего из одинаковых значений типа Дата, ошибочно производится по-разному.
			КоличествоОдинаковыхЗначений = 0;
			ОбщееКоличествоЗначений      = СписокДатКонца.Количество();
			Для каждого ЭлемСписка Из СписокДатКонца Цикл
				Если ЭлемСписка.Значение = СписокДатКонца[0].Значение Тогда
					КоличествоОдинаковыхЗначений = КоличествоОдинаковыхЗначений + 1;
				КонецЕсли;
			КонецЦикла;
			Если КоличествоОдинаковыхЗначений <> ОбщееКоличествоЗначений Тогда
				СписокДатКонца.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
			КонецЕсли;
			
			ПозицияТекущейДаты  = СписокДатКонца.Индекс(ТекущаяДатаКонца);
			
			// Перебираемая запись из таблицы форм удовлетворяет текущим параметрам
			// учитывая конец периода отчета.
			НоваяФорма = Форма.РезультирующаяТаблица.Добавить();
			НоваяФорма.ФормаОтчета        = ЭлФорма.ФормаОтчета;
			НоваяФорма.ОписаниеОтчета     = ЭлФорма.ОписаниеОтчета;
			НоваяФорма.ДатаНачалоДействия = ЭлФорма.ДатаНачалоДействия;
			НоваяФорма.ДатаКонецДействия  = ЭлФорма.ДатаКонецДействия;
			
			Если ЕстьКолонкаРедакцияФормы Тогда
			
				НоваяФорма.РедакцияФормы	  = ЭлФорма.РедакцияФормы;
			
			КонецЕсли;
			
			// Сдвигаем новую запись так чтобы коллекция оставалась отсортированной
			// по ДатаКонецДействия.
			ПозицияНовойФормы = Форма.РезультирующаяТаблица.Индекс(НоваяФорма);
			НаСколькоСдвинуть = ПозицияТекущейДаты - ПозицияНовойФормы; 
			Форма.РезультирующаяТаблица.Сдвинуть(ПозицияНовойФормы, НаСколькоСдвинуть);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Форма.РезультирующаяТаблица;
	
КонецФункции

// Обновляет структуру многострочных разделов.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов(Форма) Экспорт
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
			Форма.ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы);
		#Иначе
			Форма.ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);
		#КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

// Возвращает количество листов в разделе.
//
Функция КолвоЛистоВРазделе(Форма, ИмяСтраницыПанели) Экспорт

	ФлагИскл = 0;
	КолЛистовВОдномерномЛисте = 1;

	ТекТаблПоле = Форма["ПолеТабличногоДокумента" + ИмяСтраницыПанели];

	Пока ФлагИскл = 0 Цикл

		Если КолЛистовВОдномерномЛисте = 1 Тогда
			КолЛистовВОдномерномЛистеСтр = "";
		Иначе
			КолЛистовВОдномерномЛистеСтр = Формат(Число(КолЛистовВОдномерномЛисте)) + "_";
		КонецЕсли;

		Если ТекТаблПоле.Области.Найти("НомСтр" + КолЛистовВОдномерномЛистеСтр + "1") <> Неопределено Тогда

			КолЛистовВОдномерномЛисте = КолЛистовВОдномерномЛисте + 1;

		Иначе

			КолЛистовВОдномерномЛисте = КолЛистовВОдномерномЛисте - 1;
			ФлагИскл = 1;

		КонецЕсли;

	КонецЦикла;// пока искл = 0

	Возврат КолЛистовВОдномерномЛисте;

КонецФункции

// Устанавливает цвет фона ячейки.
//
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				СвойстваГрупповыхЗначений(Форма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				СвойстваГрупповыхЗначений(Форма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			СвойстваГрупповыхЗначений(Форма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					// Декларация по НДС. В многострочном блоке встречаются строки, которые не должны быть закрашены в стандартный зеленый цвет.
					
				КонецЕсли;

				Если НЕ ВБлокеВсеПоказателиЗаполняются Тогда
					
					#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
						ЭтотПоказательНеЗаполняется = Форма.ЭтотПоказательНеЗаполняетсяНаКлиенте(ИмяПоказателя);
					#Иначе
						ЭтотПоказательНеЗаполняется = Форма.ЭтотПоказательНеЗаполняетсяНаСервере(ИмяПоказателя);
					#КонецЕсли
					
					Если ЭтотПоказательНеЗаполняется Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						СвойстваГрупповыхЗначений(Форма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					СвойстваГрупповыхЗначений(Форма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Проверяет, является ли ячейка составным полем.
//
Функция ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки, БыстраяПроверка = Истина) Экспорт

		СмысловаяЧасть = ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
		Если СмысловаяЧасть = "" Тогда
			// не квадратичная ячейка
			Возврат Ложь;
		КонецЕсли;

		Если БыстраяПроверка Тогда
			Возврат Истина;
		КонецЕсли;

		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		// Получаем текущий счетчик
		ТекущийСчетчик = ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки,Ложь);
		Если СтрДлина(ТекущийСчетчик) >= 2 Тогда

			Если Сред(ТекущийСчетчик, 1, 1) = "0" Тогда
				ПризнакСчетчикаСнулемВпереди = Истина;
			Иначе
				ПризнакСчетчикаСнулемВпереди = Ложь;
			КонецЕсли;
		Иначе
			ПризнакСчетчикаСнулемВпереди = Ложь; // перед счетчиком нет нуля
		КонецЕсли;

		Если ЯвляетсяЧислом(ТекущийСчетчик) Тогда
			ТекущийСчетчикЦел = ТекущийСчетчик;
		Иначе
			Возврат Ложь;
		КонецЕсли;

		Координата = СмысловаяЧасть + ?(ПризнакСчетчикаСнулемВпереди = Истина,"0" + Строка(ТекущийСчетчикЦел + 1),ТекущийСчетчикЦел + 1);

		Если Форма[ИмяПоляТаблДокумента].Области.Найти(Координата) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		// значение получено
		Возврат Истина;

КонецФункции

// Проверяет значение КПП на соответствие требованиям.
//
Функция КППСоответствуетТребованиям(Знач КПП) Экспорт
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КПП) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(СтрЗаменить(Строка(КПП), "0", "1")) <> 9 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Отображает кнопки печати.
//
Процедура ПоказатьКнопкиПечати(Форма) Экспорт
	
	Форма.Элементы.ПоказатьСДвухмернымШтрихкодомPDF417.Видимость = Ложь;
	Форма.Элементы.ПоказатьБланк.Видимость = Ложь;
	Форма.Элементы.Печать.Видимость = Ложь;
	
	Если Форма.СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена <> Неопределено
	 ИЛИ Форма.СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		Если Форма.СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Неопределено Тогда
			Форма.Элементы.ПоказатьСДвухмернымШтрихкодомPDF417.Видимость = Ложь;
			Форма.Элементы.ПоказатьБланк.Видимость = Ложь;
		Иначе
			Форма.Элементы.ПоказатьСДвухмернымШтрихкодомPDF417.Видимость = Форма.СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена;
			Форма.Элементы.ПоказатьБланк.Видимость = Форма.СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена;
		КонецЕсли;
	Иначе
		Форма.Элементы.ПоказатьСДвухмернымШтрихкодомPDF417.Видимость = Ложь;
		Форма.Элементы.ПоказатьБланк.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.Печать.Видимость = НЕ Форма.Элементы.ПоказатьБланк.Видимость;
	
КонецПроцедуры

// Устанавливает формат вывода.
//
Процедура УстановитьФорматВывода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	ЕдиницаИзмерения = Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	Если ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);
        		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
        		
		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			ТекТабличноеПоле = Форма.ТабличныйДокумент;

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				// Получим установленный в ячейки признак допустимого знака.
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;

				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					// Создадим числовой тип на основе мОписаниеТиповЧислоЕ, с учетом знака отрицательности.
					Массив = Новый Массив;
					Массив.Добавить(Тип("Число"));
					КвалификаторЧисла = Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя);
					ЧислоЕЗнак = Новый ОписаниеТипов(Массив, КвалификаторЧисла);
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				СтруктураГруппы = Форма[СтруктураГруппы];
				ОписанияБлоков = ПолучитьСвойствоРаздела(Форма, НаимРаздела, "МногострочностьВРазделе");
				ОписанияБлоковТип = ТипЗнч(ОписанияБлоков);
				Если ОписанияБлоковТип = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ОписанияБлоковТип = Тип("ДанныеФормыКоллекция") Тогда
					#Если НаКлиенте Тогда
						ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
					#Иначе
						ВБлокеВсеПоказателиЗаполняются = НЕ ДанныеФормыВЗначение(ОписанияБлоков, Тип("ТаблицаЗначений")).Найти(ИмяГруппы, "ИдГруппы").НезаполняемыеПоказателиЕсть;
					#КонецЕсли
				КонецЕсли;

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					Если НЕ ВБлокеВсеПоказателиЗаполняются Тогда
						
						#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
							ЭтотПоказательНеЗаполняется = Форма.ЭтотПоказательНеЗаполняетсяНаКлиенте(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0"));
						#Иначе
							ЭтотПоказательНеЗаполняется = Форма.ЭтотПоказательНеЗаполняетсяНаСервере(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0"));
						#КонецЕсли
						
						Если ЭтотПоказательНеЗаполняется Тогда
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;

					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					// Получим установленный в ячейки признак допустимого знака.
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;

					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						// Создадим числовой тип на основе мОписаниеТиповЧислоЕ, с учетом знака отрицательности.
						Массив = Новый Массив;
						Массив.Добавить(Тип("Число"));
						КвалификаторЧисла = Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя);
						ЧислоЕЗнак = Новый ОписаниеТипов(Массив, КвалификаторЧисла);
					КонецЕсли;

					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;

				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
    
	КонецЦикла;

КонецПроцедуры

// Возвращает представление регламентированного отчета.
//
Функция ПредставлениеДокументаРеглОтч(Док) Экспорт
	
	Представление = "";
	
	#Если Сервер Тогда
		Если ТипЗнч(Док) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			Представление = Док.НаименованиеОтчета + " ";
		КонецЕсли;	
	#КонецЕсли
		
	Если ТипЗнч(Док) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		Представление = Док.Отчет + " ";
		
	ИначеЕсли ТипЗнч(Док) = Тип("Структура") И Док.Свойство("НаименованиеОтчета") Тогда
		
		Представление = Док.НаименованиеОтчета + " ";
			
	КонецЕсли;
	
	Представление = Представление + "за " + ПредставлениеПериода(НачалоДня(Док.ДатаНачала), КонецДня(Док.ДатаОкончания), "ФП=Истина");
					
	Если Док.Вид = 0 ИЛИ Док.Вид = "П" Тогда
		
		Представление = Представление + " (Первичный";
		
	Иначе
		
		Представление = Представление + " (Корректирующий, номер корректировки " + Док.Вид;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Док.КодНалоговогоОргана) Тогда
		
		Представление = Представление + ")";
		
	Иначе
		
		Представление = Представление + ". ИФНС: " + СокрЛП(Док.КодНалоговогоОргана) + ")";
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Проверяет значение ОКВЭД на соответствие формату.
//
Функция ОКВЭДСоответствуетТребованиям(Знач ОКВЭД) Экспорт
	
	ОКВЭД = СокрЛП(ОКВЭД);
	Для Инд = 1 По СтрДлина(ОКВЭД) Цикл
		ТекСимв = Сред(ОКВЭД, Инд, 1);
		Если ТекСимв >= "0" И ТекСимв <= "8" Тогда
			ОКВЭД = Лев(ОКВЭД, Инд - 1) + "9" + Сред(ОКВЭД, Инд + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОКВЭД = "" ИЛИ ОКВЭД = "99" ИЛИ ОКВЭД = "99.9" ИЛИ ОКВЭД = "99.99" ИЛИ ОКВЭД = "99.99.9" ИЛИ ОКВЭД = "99.99.99";
	
КонецФункции

// Возвращает разложенную структуру адреса.
//
Функция РазложитьАдрес(Знач СтрокаАдрес) Экспорт
	
	Страна          = "";
	Индекс          = "";
	Регион          = "";
	Район           = "";
	Город           = "";
	НаселенныйПункт = "";
	Улица           = "";
	Дом             = "";
	Корпус          = "";
	Квартира        = "";
	ТипДома         = "";
	ТипКорпуса      = "";
	ТипКвартиры     = "";

	МассивАдрес	=	СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();   

	Если ЭлементовВМассиве > 0 Тогда
		Страна = СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве > 1 Тогда
		Индекс = СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве > 2 Тогда
		Регион = СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 Тогда
		Район = СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 Тогда
		Город = СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве > 5 Тогда
		НаселенныйПункт	= СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве > 6 Тогда
		Улица = СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве > 7 Тогда
		Дом = СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве > 8 Тогда
		Корпус = СокрЛП(МассивАдрес[8]);
	КонецЕсли;
	Если ЭлементовВМассиве > 9 Тогда
		Квартира = СокрЛП(МассивАдрес[9]);
	КонецЕсли;
	Если ЭлементовВМассиве > 10 Тогда
		ТипДома = СокрЛП(МассивАдрес[10]);
	КонецЕсли;
	Если ЭлементовВМассиве > 11 Тогда
		ТипКорпуса = СокрЛП(МассивАдрес[11]);
	КонецЕсли;
	Если ЭлементовВМассиве > 12 Тогда
		ТипКвартиры = СокрЛП(МассивАдрес[12]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Страна",          Страна);
	СтруктураВозврата.Вставить("Индекс",          Индекс);
	СтруктураВозврата.Вставить("Регион",          Регион);
	СтруктураВозврата.Вставить("Район",           Район);
	СтруктураВозврата.Вставить("Город",           Город);
	СтруктураВозврата.Вставить("НаселенныйПункт", НаселенныйПункт);
	СтруктураВозврата.Вставить("Улица",           Улица);
	СтруктураВозврата.Вставить("Дом",             Дом);
	СтруктураВозврата.Вставить("Корпус",          Корпус);
	СтруктураВозврата.Вставить("Квартира",        Квартира);
	СтруктураВозврата.Вставить("ТипДома",         ТипДома);
	СтруктураВозврата.Вставить("ТипКорпуса",      ТипКорпуса);
	СтруктураВозврата.Вставить("ТипКвартиры",     ТипКвартиры);

	Возврат СтруктураВозврата;
	
КонецФункции

// Сохраняет значение в многостраничном блоке.
//
Процедура СохранитьЗначениеВМногостраничномБлоке(Форма, Знач ИмяГруппы, Знач НомерСтрокиНаФорме, Знач ИмяКолонки, Знач ЗначениеПоказателя) Экспорт
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СтруктураГруппы[Число(НомерСтрокиНаФорме) - 1][ИмяКолонки] = ЗначениеПоказателя;

КонецПроцедуры

// Процедура вызывается после вставки дополнительной страницы.
//
Процедура ПослеВставкиДополнительнойСтраницы(Форма, ИмяВставляемойСтраницы, ПерейтиНаВставленныйЛист = Истина) Экспорт
	
	ТекущийЭлемент = Форма.РазделыОтчета.НайтиПоИдентификатору(Форма.Элементы.РазделыОтчета.ТекущаяСтрока);
	
	Родитель = ТекущийЭлемент.ПолучитьРодителя();

	Если НЕ Родитель = Неопределено Тогда
		ТекущийЭлемент = Родитель;
	КонецЕсли;
    	
	НомерДобавляемойСтраницы = ТекущийЭлемент.ПолучитьЭлементы().Количество() + 1;
    	
	ДобавляемаяСтраница = ТекущийЭлемент.ПолучитьЭлементы().Добавить();
	ДобавляемаяСтраница.КолонкаРазделыОтчета              = "Стр. " + НомерДобавляемойСтраницы;
	ДобавляемаяСтраница.КолонкаРазделыОтчетаСокрНаим      = ТекущийЭлемент.КолонкаРазделыОтчетаСокрНаим;
	ДобавляемаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомерДобавляемойСтраницы;
	ДобавляемаяСтраница.ИндексКартинки                    = 1;
	ДобавляемаяСтраница.РазделМногостраничный             = ТекущийЭлемент.РазделМногостраничный;
	ДобавляемаяСтраница.РазделМногострочный               = ТекущийЭлемент.РазделМногострочный;
	
	Если ПерейтиНаВставленныйЛист Тогда
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = ДобавляемаяСтраница.ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

// Очищает показатели отчета, заполняемые из ИБ.
//
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(Форма, НазванияМногостраничныхРазделовДляУдаления = "") Экспорт

	Если НЕ ПустаяСтрока(НазванияМногостраничныхРазделовДляУдаления) Тогда
		НазванияМнгостраничныхРазделов = Новый Структура(НазванияМногостраничныхРазделовДляУдаления);
	Иначе
		НазванияМнгостраничныхРазделов = Новый Структура;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;
		РазделАвтозаполняется = СтрокаУровня1.РазделЯвляетсяАвтозаполняемым;

		Если НазваниеСтраницы = "Титульный"
		 ИЛИ НЕ НазваниеСтраницы = НазванияМногостраничныхРазделовДляУдаления Тогда
			Продолжить;
		КонецЕсли;

		мРазделИмя = "ТабличныйДокумент";
		мРаздел    = Форма[мРазделИмя];
		Если НазванияМнгостраничныхРазделов.Свойство(НазваниеСтраницы) Тогда
			// Очистим текущий лист.
			#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
				Форма.ОчиститьТабличноеПолеНаКлиенте(НазваниеСтраницы);
			#Иначе
				Форма.ОчиститьТабличноеПолеНаСервере(НазваниеСтраницы);
			#КонецЕсли
							
			ТаблицаСтраницРаздела = Неопределено;
			Форма.мСтруктураМногостраничныхРазделов.Свойство(НазваниеСтраницы, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
			
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаСтраницРаздела.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаСтраницРаздела[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					// удаляем дополнительную страницу
					ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
									
			// Варианты заполнения установим в один массив. Все варианты возьмем из Эталона.
			// Цвет ячеек перерисуется в показе статика многостраничного раздела, ниже.
			ОчиститьВариантыЗаполнения(Форма, НазваниеСтраницы, Ложь);
			
			Продолжить;

		КонецЕсли;
		
		#Если НаКлиенте Тогда
			ВариантыАвтозаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, НазваниеСтраницы);
		#Иначе
			ВариантыАвтозаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, НазваниеСтраницы);
		#КонецЕсли

		Если ВариантыАвтозаполнения <> Неопределено Тогда

			Если ВариантыАвтозаполнения[0].Свойство("КодПоказателяПоСтруктуре") Тогда
				ПоказательПоСтруктуре = Истина;
			Иначе
				ПоказательПоСтруктуре = Ложь;
			КонецЕсли;

			// Переберем все показатели, которые могут заполняться из ИБ или автозаполняемые.
			Для каждого Пок Из ВариантыАвтозаполнения Цикл

				Если ПоказательПоСтруктуре Тогда
					Если НЕ ПустаяСтрока(Пок.КодПоказателяПоСтруктуре) Тогда
						// Для показателей квадратичных, очистка произойдет через Расчет()
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				КодПоказателя = Пок.КодПоказателя;
				Если (Пок.ВариантЗаполнения = 3) Тогда // Или (Пок.ВариантЗаполнения = 4) Тогда
					// Если показатель в многострочной части, вернем кол-во строк блока.
					Колво = ПоказательВходитВМногострочнуюЧасть(Форма, КодПоказателя);
					Если Колво = 0 Тогда
						мРаздел.Области[КодПоказателя].Очистить();
					Иначе
						Для Инд = 1 По Колво Цикл
							мРаздел.Области[КодПоказателя + "_" + Формат(Инд, "ЧГ=0")].Очистить();
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Очищает варианты заполнения.
//
Процедура ОчиститьВариантыЗаполнения(Форма, Знач Раздел = Неопределено, УстановитьЦветВРазделе = Истина, Знач ИмяСекции = "") Экспорт

	Перем МассивВариантовЗаполненияСтраниц;

	// Данная процедура используется только в новых декларациях, где установлены показатели Е как 14.2
	// Через процеудру УстановитьФормат

	мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	ИзмененияЕсть = Ложь;
	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы = СтрокаУровня1.ИмяСтраницы;
		Если Раздел <> Неопределено Тогда
			Если Раздел <> НазваниеСтраницы Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если Форма.мСтруктураВариантыЗаполнения.Свойство(НазваниеСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + НазваниеСтраницы];
			
			// Получим ЭТАЛОННЫЙ макет вариантов показателей.
			#Если НаКлиенте Тогда
				ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, НазваниеСтраницы, Истина, мОписаниеТиповЧислоЕ);
			#Иначе
				Если СтрНайти(СокрЛП(ИмяСекции), СокрЛП(НазваниеСтраницы)) > 0 Тогда
					ЗаменяемоеИмяСекции = ИмяСекции;
				Иначе
					ЗаменяемоеИмяСекции = "";
				КонецЕсли;
				ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, НазваниеСтраницы, Истина, мОписаниеТиповЧислоЕ, ЗаменяемоеИмяСекции);
			#КонецЕсли

			// Сюда попадают Титульные, ФизЛица и др.
			Если ТаблицаВариантыЗаполнения <> Неопределено Тогда
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				
				// Вставим в массив эталонный вариант.
				ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();
				
				#Если НаКлиенте Тогда
					КопироватьДанныеФормы(ТаблицаВариантыЗаполнения, ТаблВариантов);
				#Иначе
					ТаблВариантов.ТаблицаВариантовЗаполнения.Загрузить(ТаблицаВариантыЗаполнения);
				#КонецЕсли
				
				Форма.мСтруктураВариантыЗаполнения.Вставить(НазваниеСтраницы, НазваниеСтраницы);
				
				ИзмененияЕсть = Истина;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если (ИзмененияЕсть) И (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		
		ИзменитьТаблицуВариантовЗаполнения(Форма, НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		
	КонецЕсли;

	Если (ИзмененияЕсть) И (НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		// Обеспечим простановку цветов ячеек.
		// Автоматически при переходах по вкладкам разделов устанавливаются цвета только
		// Для многостраничных разделов. Поэтому, если раздел не многостраничны и автозаполняется
		// тогда прорисовываем цвета, а также, если многостраничный, автозаполняемый и текущий лист,
		// также перерисуем.
		Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			ИмяСтраницы = СтрокаУровня1.ИмяСтраницы;

			// Возможно, нужный раздел передали через параметр. Тогда установим цвета только
			// в нужном разделе.
			Если Раздел <> Неопределено Тогда
				Если Раздел <> ИмяСтраницы Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Автозаполняется = ПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "РазделЯвляетсяАвтозаполняемым", Ложь);
			//Многостраничность = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "МногостраничностьВРазделе", Ложь);

			// Перерисовка по цвету происходить должна и для многостр. и для обычного раздела.
			// Т.к. меняются варианты заполнения. Процедура запускается при очистки отчета в целом
			// и перед автозаполнением для многостраничных разделов заполняемых из ИБ (крайние случаи: имущество, прибыль).
			// 
			// В механизме очистки отчета в целом, предусмотре вызов роОчиститьВариантыЗаполнения, поэтому
			// при очистки из отчета, всей декларации необходимо перекрасить ячейки, т.к. варианты при очистка декларации
			// всегда становятся эталонными, а значит, перекрашиваем ячейки в соответствующий цвет.

			Если Автозаполняется И УстановитьЦветВРазделе И ИмяСтраницы = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела Тогда
				
				#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
					Форма.УстановитьЦветФонаЯчейкиНаКлиенте(,,ИмяСтраницы);
				#Иначе
					Форма.УстановитьЦветФонаЯчейкиНаСервере(,,ИмяСтраницы);
				#КонецЕсли
									
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Изменяет таблицу вариантов заполнения.
//
Процедура ИзменитьТаблицуВариантовЗаполнения(Форма, ПолныйРучнойВвод = Ложь) Экспорт

	Перем МассивВариантовЗаполненияСтраниц;
	
	мДеревоСтраницОтчета = Форма.мДеревоСтраницОтчета;
	ПереборЗнач = мДеревоСтраницОтчета.ПолучитьЭлементы().Количество();

	Пока ПереборЗнач > 0 Цикл
		
		ИмяСтраницы = мДеревоСтраницОтчета.ПолучитьЭлементы()[ПереборЗнач-1].ИмяСтраницы;
		ПереборЗнач = ПереборЗнач-1;
		
		Попытка
			МногостраничностьЕсть = ?(Форма.мСтруктураМногостраничныхРазделов = Неопределено, Ложь, Истина);
		Исключение
			МногостраничностьЕсть = Ложь;
		КонецПопытки;
		
		Если МногостраничностьЕсть Тогда
			КолСтрВРазделе = ПолучитьКоличествоСтраницРаздела(Форма, ИмяСтраницы);
		Иначе
			КолСтрВРазделе = 1;
		КонецЕсли;
				
		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницы);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницы);
		#КонецЕсли

		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ПолныйРучнойВвод Тогда
				
			Если КолСтрВРазделе = 1 Тогда

				Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
					Если Строка.ВариантЗаполнения = 4 Тогда
						Строка.ВариантЗаполнения = 0;
					КонецЕсли;
				КонецЦикла;
				
				#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
					Форма.УстановитьЦветФонаЯчейкиНаКлиенте(,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
				#Иначе
					Форма.УстановитьЦветФонаЯчейкиНаСервере(,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
				#КонецЕсли	
					
			КонецЕсли;
			
			Если КолСтрВРазделе >= 2 Тогда

				Если Не Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
					Продолжить;
				КонецЕсли;

				МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
				
				Для Инд = 0 По МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
					Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд].ТаблицаВариантовЗаполнения Цикл
						Если Строка.ВариантЗаполнения = 4 Тогда
							Строка.ВариантЗаполнения = 0;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
					Форма.УстановитьЦветФонаЯчейкиНаКлиенте(,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
				#Иначе
					Форма.УстановитьЦветФонаЯчейкиНаСервере(,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
				#КонецЕсли
									
			КонецЕсли;

		ИначеЕсли ПолныйРучнойВвод Тогда

			Если КолСтрВРазделе = 1 Тогда
				Для Каждого Стр Из ТаблицаВариантыЗаполнения Цикл
					Если Стр.ВариантЗаполнения = 0 Тогда
						Стр.ВариантЗаполнения = 4
					КонецЕсли;
				КонецЦикла;

				#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
					Форма.УстановитьЦветФонаЯчейкиНаКлиенте(,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
				#Иначе
					Форма.УстановитьЦветФонаЯчейкиНаСервере(,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
				#КонецЕсли
				
			КонецЕсли;

			Если КолСтрВРазделе >= 2 Тогда
				
				Если Не Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
					Продолжить;
				КонецЕсли;

				МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
				
				Для Инд = 0 По МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
					
					Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд].ТаблицаВариантовЗаполнения Цикл
						Если Строка.ВариантЗаполнения = 0 Тогда
							Строка.ВариантЗаполнения = 4;
						КонецЕсли;
					КонецЦикла;

				КонецЦикла;

				#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
					Форма.УстановитьЦветФонаЯчейкиНаКлиенте(,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
				#Иначе
					Форма.УстановитьЦветФонаЯчейкиНаСервере(,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
				#КонецЕсли
				
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Устанавливает номера листов.
//
Процедура ПроставлениеНомеровЛистов(Форма, ПризнакНумеруемыхФорм, СписокПечатаемыхЛистов) Экспорт
	
	Если ПризнакНумеруемыхФорм = Неопределено Тогда
		ПризнакНумеруемыхФорм = Истина;
	КонецЕсли;
		
	Если ПризнакНумеруемыхФорм Тогда
		Если Форма.СтруктураРеквизитовФормы.мСчетчикСтраниц <> Истина Тогда
			НомерЛиста = 1;
			Для Каждого Эл Из Форма.СтруктураРеквизитовФормы.мПечатныеФормы Цикл
				Если НЕ УдалосьПроставитьНомерСтраницы(Эл, НомерЛиста) Тогда
										
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось проставить номер страницы для %1'"), Эл.Представление);

					Сообщение.Сообщить();
					
					Продолжить;
					
				КонецЕсли;
				НомерЛиста = НомерЛиста + 1;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.мПечатныеФормы.Количество() <> 0 Тогда
				ТаблДок = Форма.СтруктураРеквизитовФормы.мПечатныеФормы.Получить(0).Значение;
				ЦифрВОбщемКоличествеЛистов = 0;
				Для ОбратныйИндекс = 1 По 9 Цикл
					Индекс = 10 - ОбратныйИндекс;
					Если ТаблДок.Области.Найти("СоставленаНа" + Индекс) <> Неопределено Тогда
						ЦифрВОбщемКоличествеЛистов = Индекс;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ВсегоЛистов = Формат(НомерЛиста - 1, "ЧЦ=" + ЦифрВОбщемКоличествеЛистов + "; ЧН=0; ЧВН=; ЧГ=");
				Для Инд = 1 По ЦифрВОбщемКоличествеЛистов Цикл
					ТекИнд = ЦифрВОбщемКоличествеЛистов - Инд + 1;
					Попытка
						ТаблДок.Области["СоставленаНа" + ТекИнд].Значение = Сред(ВсегоЛистов, ТекИнд, 1);
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НомераЛистов = Новый СписокЗначений;
		
	НомерЛиста = 1;
	
	Для Каждого Эл Из Форма.СтруктураРеквизитовФормы.мПечатныеФормы Цикл
				
		НомЛиста = НомераЛистов.НайтиПоЗначению(Эл.Представление);
		
		Если НомЛиста = Неопределено Тогда
			
			НомЛиста = НомераЛистов.Добавить(Эл.Представление, "1");
			
			НЛиста = 1;
			
		Иначе
			
			НЛиста = Число(НомЛиста.Представление) + 1;
			
			НомЛиста.Представление = Строка(Число(НомЛиста.Представление) + 1);
									
		КонецЕсли;
		
		Значение = Новый Массив;
		Значение.Добавить(ПоместитьВоВременноеХранилище(Эл.Значение, Форма.УникальныйИдентификатор));
		Значение.Добавить(Форма.УникальныйИдентификатор);
		Значение.Добавить(Форма.Заголовок);
		
		Если НЛиста = 1 Тогда
			
			СписокПечатаемыхЛистов.Добавить(Значение, Эл.Представление);
		
		ИначеЕсли НЛиста = 2 Тогда
			
			ЭлементСписка = СписокПечатаемыхЛистов.Получить(СписокПечатаемыхЛистов.Количество() - 1);
			
			ЭлементСписка.Представление = ЭлементСписка.Представление + ". Лист 1";
			
			СписокПечатаемыхЛистов.Добавить(Значение, Эл.Представление + ". Лист " + НЛиста);
		
		Иначе
		
			СписокПечатаемыхЛистов.Добавить(Значение, Эл.Представление + ". Лист " + НЛиста);
			
		КонецЕсли;	
				
		НомерЛиста = НомерЛиста + 1;
		
	КонецЦикла;
	
	Форма.СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	УдалитьСлужебныеСимоволыИзПечатнойФормы(СписокПечатаемыхЛистов);
	
КонецПроцедуры

// Формирует структуру параметров файла выгрузки.
// 
Функция СформироватьСтруктуруПараметровФайлаВыгрузки(ФайлВыгрузки) Экспорт

	ПоказателиВыгрузки = Новый Соответствие;
	ОбъектЧтениеXML = Новый ЧтениеXML;
	Попытка
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если Строка(ОбъектЧтениеXML.ТипУзла) = "Начало элемента" И ОбъектЧтениеXML.Имя <> "СодПерСвед" Тогда
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
		ОбъектЧтениеXML.Закрыть();
		ПоказателиВыгрузки.Вставить("ЭтоXML", Истина);
	Исключение
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ФайлВыгрузки, "cp866");
		ТекСтр = Текст.ПрочитатьСтроку();
		Пока ТекСтр <> Неопределено Цикл
			ТекСтр = СокрЛП(ТекСтр);
			ВхождениеДвоеточия = СтрНайти(ТекСтр, ":");
			Если ВхождениеДвоеточия <> 0 Тогда
				ПоказателиВыгрузки.Вставить(СокрЛП(Лев(ТекСтр, ВхождениеДвоеточия - 1)), СокрЛП(Сред(ТекСтр, ВхождениеДвоеточия + 1)));
			КонецЕсли;
			ТекСтр = Текст.ПрочитатьСтроку();
		КонецЦикла;
		Текст.Закрыть();
		ПоказателиВыгрузки.Вставить("ЭтоXML", Ложь);
	КонецПопытки;
	Возврат ПоказателиВыгрузки;

КонецФункции

// Устанавливает сведения о представителе организации.
//
Процедура ПроставитьСведенияОПредставителеОрганизации(Форма, ФлагТолькоФЛ, СхемаПолученияКодИФНС = "0") Экспорт
	
	// Получим данные из регистра контактной информации.
	ФИОУпПред = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, "ФИОУпПред").ФИОУпПред;

	// Проверим данные в справочнике РегистрацииВНалоговомОргане

	Титульный = Форма.ТабличныйДокумент;
	КодИФНС = "";
	Если СхемаПолученияКодИФНС = "0" Тогда
		КодИФНС = ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КодИМНС");
	КонецЕсли;
	// Для декларации по НДПИ, код ИФНС получается из рисунков на титульном листе.
	Если СхемаПолученияКодИФНС = "1" Тогда
		Попытка
			КодИФНС = СокрЛП(Титульный.Рисунки.D59.Значение
			        + Титульный.Рисунки.D60.Значение
			        + Титульный.Рисунки.D62.Значение
			        + Титульный.Рисунки.D61.Значение);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	КПП = ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КПП1"); 	

	СтруктураПредставителя = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОПредставителеОрганизации(Форма.СтруктураРеквизитовФормы.Организация, КодИФНС, КПП, Форма.ДатаПодписи);
		
	Если НЕ ((ПустаяСтрока(СтруктураПредставителя.ПредставительЮр)) И (ПустаяСтрока(СтруктураПредставителя.ПредставительФЛ)) И (ПустаяСтрока(СтруктураПредставителя.ДокументПредставителя))) Тогда
		// Булево, если ПредставительЮр - пусто, значит ФЛ.
		Форма.СтруктураРеквизитовФормы.мПредставительФизЛицо = ПустаяСтрока(СтруктураПредставителя.ПредставительЮр);
		Если (НЕ Форма.СтруктураРеквизитовФормы.мПредставительФизЛицо) И (ФлагТолькоФЛ) Тогда
			// В данной декларации не предусмотрено заполнения представителя - Юр. лица, поэтому очистим данные, если они есть.
			Форма.СтруктураРеквизитовФормы.мПредставительФизЛицо = Неопределено;
			Форма.СтруктураРеквизитовФормы.мНазваниеПредставителя = "";
			Форма.СтруктураРеквизитовФормы.мДокументПредставителя = "";
			Форма.СтруктураРеквизитовФормы.мФамилияПредставителя = "";
			Форма.СтруктураРеквизитовФормы.мИмяПредставителя = "";
			Форма.СтруктураРеквизитовФормы.мОтчествоПредставителя = "";
			Титульный.Области.ОргУп.Значение = "";
			Титульный.Области.ДокУпПред.Значение = "";

		Иначе
			Форма.СтруктураРеквизитовФормы.мНазваниеПредставителя = СокрЛП(СтруктураПредставителя.ПредставительЮр);
			Форма.СтруктураРеквизитовФормы.мДокументПредставителя = СокрЛП(СтруктураПредставителя.ДокументПредставителя);
			Форма.СтруктураРеквизитовФормы.мФамилияПредставителя = СокрЛП(СтруктураПредставителя.Фамилия);
			Форма.СтруктураРеквизитовФормы.мИмяПредставителя = СокрЛП(СтруктураПредставителя.Имя);
			Форма.СтруктураРеквизитовФормы.мОтчествоПредставителя = СокрЛП(СтруктураПредставителя.Отчество);
			Титульный.Области.ОргУп.Значение = ?(Форма.СтруктураРеквизитовФормы.мПредставительФизЛицо, СтруктураПредставителя.ПредставительФЛ, СтруктураПредставителя.ПредставительЮр);
			Титульный.Области.ДокУпПред.Значение = СтруктураПредставителя.ДокументПредставителя;
		КонецЕсли;
	Иначе
		// Если данные в справочнике "РегистрацииВНалоговомОргане" отсутствуют по представителю, то очистим ячейки на титульном листе.
		Титульный.Области.ОргУп.Значение = "";
		Титульный.Области.ДокУпПред.Значение = "";

		Форма.СтруктураРеквизитовФормы.мПредставительФизЛицо = Неопределено;
		Форма.СтруктураРеквизитовФормы.мНазваниеПредставителя = "";
		Форма.СтруктураРеквизитовФормы.мДокументПредставителя = "";
		Форма.СтруктураРеквизитовФормы.мФамилияПредставителя = "";
		Форма.СтруктураРеквизитовФормы.мИмяПредставителя = "";
		Форма.СтруктураРеквизитовФормы.мОтчествоПредставителя = "";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Титульный.Области.ОргУп.Значение) Тогда
		Титульный.Области.ОргДиректор.Значение = "";
	КонецЕсли;

КонецПроцедуры

// Преобразовывает строку в массив.
// 
Функция РазобратьСтрокуВМассивПоРазделителю(Знач Стр, СтрРазделитель = ".") Экспорт
	
	Результат = Новый Массив;
	
	ВхождениеРазделителя = СтрНайти(Стр, СтрРазделитель);
	Пока ВхождениеРазделителя <> 0 Цикл
		ЧастьДоРазделителя = СокрЛП(Лев(Стр, ВхождениеРазделителя - 1));
		Результат.Добавить(ЧастьДоРазделителя);
		Стр = СокрЛП(Сред(Стр, ВхождениеРазделителя + 1));
		ВхождениеРазделителя = СтрНайти(Стр, СтрРазделитель);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Стр) Тогда
		Результат.Добавить(СокрЛП(Стр));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита.
//
Функция ПолучитьРеквизит(Реквизит1, Реквизит2) Экспорт
	Если Реквизит1 <> Неопределено И НЕ ПустаяСтрока(Реквизит1) Тогда
		Возврат Реквизит1;
	ИначеЕсли Реквизит2 <> Неопределено И НЕ Пустаястрока(Реквизит2) Тогда
		Возврат Реквизит2;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Проверяет тип на пустое значение.
//
Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт

	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;

	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";

	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';

	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;

	Иначе
		Возврат Новый (ЗаданныйТип);

	КонецЕсли;

КонецФункции

// Возвращает текст сообщения об ошибке.
//
Функция СформироватьТекстСообщения(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = СтрНайти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = СтрНайти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1))
					   + Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);

КонецФункции

// Выводит сообщение об ошибке.
//
Процедура СообщитьОбОшибке(Знач ТекстСообщения, Отказ, Заголовок = "", Знач Статус = Неопределено, ВызыватьИсключение = Истина) Экспорт
    	
	ТекстСообщения = СформироватьТекстСообщения(ТекстСообщения);
	Отказ = Истина;
	
	#Если Сервер Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентированная отчетность'"), УровеньЖурналаРегистрации.Ошибка, , , Заголовок + Символы.ПС + ТекстСообщения);
	
	#ИначеЕсли ВнешнееСоединение Тогда
		
		Если ВызыватьИсключение Тогда
			Если ЗначениеЗаполнено(Заголовок) Тогда
				ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
				Заголовок = "";
			КонецЕсли;
			
			ВызватьИсключение (ТекстСообщения);
		КонецЕсли;
		
	#Иначе
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Заголовок);

			Сообщение.Сообщить();
						
			Заголовок = "";
			
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);

		Сообщение.Сообщить();
		
	#КонецЕсли
	
КонецПроцедуры

// Процедура вызывается после очистки регламентированного отчета.
//
Процедура ПослеОчисткиРегламентированногоОтчета(Форма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста) Экспорт
	
	Форма.Модифицированность = Истина;
	
	Если НЕ Форма.Элементы.Найти("ТабличныйДокумент") = Неопределено
	   И ТипЗнч(Форма.ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
		ОтрисоватьЗначкиУдаленияСтрок(Форма);
	КонецЕсли;
	
	// Если есть экспортная процедура ОперацииВыполняемыеПриУдаленииЭкземпляраМногостраничногоРаздела
	// определяющая действия после удаления экземплярности, тогда вызовем ее.
	// Например, в этой процеудуре может быть перерасчет каких-то листов,
	// перепроставление сквозных номеров и т.д. Пример: декларация по НДС 2007Кв1.
	Если ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста Тогда
		// Иммеет смысл только для многостраничного раздела.
		#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
			Форма.СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы);
		#Иначе
			Форма.СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы);
		#КонецЕсли
	Иначе
		#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
			Форма.РасчетНаКлиенте(ИмяСтраницы);
		#Иначе
			Форма.РасчетНаСервере(ИмяСтраницы);
		#КонецЕсли
	КонецЕсли;
	
	Если ПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "РазделЯвляетсяАвтозаполняемым") Тогда
		#Если НаКлиенте И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
			Форма.УстановитьЦветФонаЯчейкиНаКлиенте(,, ИмяСтраницы);
		#Иначе
			Форма.УстановитьЦветФонаЯчейкиНаСервере(,, ИмяСтраницы);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Возвращает найденный элемент дерева.
//
Функция НайтиЭлементВДанныхФормыДерево(ЭлементыДанныхФормыДерево, ИмяКолонки, ИскомоеЗначение) Экспорт
	
	Для Ном = 0 По ЭлементыДанныхФормыДерево.Количество() - 1 Цикл
		
		ЭлементДерева = ЭлементыДанныхФормыДерево.Получить(Ном);
		
		Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
			Возврат ЭлементДерева;
		КонецЕсли;
		
		Если ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			
			РезультатПоиска = НайтиЭлементВДанныхФормыДерево(ЭлементДерева.ПолучитьЭлементы(), ИмяКолонки, ИскомоеЗначение);
			
			Если НЕ РезультатПоиска = Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает количество форм соответствующих выбранному периоду.
//
Функция КоличествоФормСоответствующихВыбранномуПериоду(Форма) Экспорт

	ИтоговоеКоличество = 0;

	Для Каждого ЭлФорма Из Форма.мТаблицаФормОтчета Цикл

		ДатаНачалаДействияФормы = ЭлФорма.ДатаНачалоДействия;
		ДатаКонцаДействияФормы  = КонецДня(?(ЭлФорма.ДатаКонецДействия = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата")), '20291231', ЭлФорма.ДатаКонецДействия));

		Если Форма.мДатаКонцаПериодаОтчета <= ДатаКонцаДействияФормы
		   И Форма.мДатаКонцаПериодаОтчета >= ДатаНачалаДействияФормы Тогда

			ИтоговоеКоличество = ИтоговоеКоличество + 1; 

		КонецЕсли;

	КонецЦикла;

	Возврат ИтоговоеКоличество;

КонецФункции

// Выбирает форму регламентированного отчета по умолчанию.
//
Процедура ВыборФормыРегламентированногоОтчетаПоУмолчанию(Форма) Экспорт
	
	// Этот код необходим для обеспечения гарантированного открытия
	// стартовых форм Реготчетов в режимеОткрытияОкна "БлокироватьОкноВладельца",
	// даже если Отчет открывается через ВсеФункции - Отчеты.
	// Внесение кода в эту процедуру позволит избежать выставления режима открытия
	// персонально для каждой стартовой формы.
	#Если НаСервере Тогда
		 // Интересует только случай работы данной процедуры на Сервере,
		 // и только Основные (стартовые) формы.
		 // По умолчанию все основные формы Реготчетов называются "ОсновнаяФорма",
		 // за исключением РСВ1, у которого еще возможен вариант "ОсновнаяФормаДополнительная".
	     Если СтрНайти(Форма.ИмяФормы,".ОсновнаяФорма") > 0 Тогда
		 
		 	 // устанавливаем РежимОткрытияОкна
			 Форма.РежимОткрытияОкна  = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
				 
		 КонецЕсли;
	 
	#КонецЕсли 
	
	ТаблицаФормОтчета = РегламентированнаяОтчетностьКлиентСервер.ПолучитьТаблицуОтчетовДействующихВВыбранныйПериод(Форма);
	Для Каждого Стр Из ТаблицаФормОтчета Цикл
		Если Стр.ДатаКонецДействия = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата")) Тогда
			Стр.ДатаКонецДействия = '20291231';
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого Строка Из ТаблицаФормОтчета Цикл
		Если (Строка.ДатаНачалоДействия > КонецДня(Форма.мДатаКонцаПериодаОтчета))
		 ИЛИ ((Строка.ДатаКонецДействия > '00010101000000') И (Строка.ДатаКонецДействия < НачалоДня(Форма.мДатаКонцаПериодаОтчета))) Тогда
			Продолжить;
		КонецЕсли;

		Форма.мВыбраннаяФорма		= Строка.ФормаОтчета;
		Форма.ОписаниеНормативДок	= Строка.ОписаниеОтчета;
				   
		Форма.ПолеРедакцияФормы		= Строка.РедакцияФормы;
						
		Возврат;
	КонецЦикла;

	// Если не удалось найти форму, соответствующую выбранному периоду,
	// то по умолчанию выдаем текущую (действующую) форму.
	Если Форма.мВыбраннаяФорма = Неопределено Тогда
		Если ТаблицаФормОтчета.Количество() >= 1 Тогда
			
			Форма.мВыбраннаяФорма		= Форма.мТаблицаФормОтчета[0].ФормаОтчета;
			Форма.ОписаниеНормативДок	= Форма.мТаблицаФормОтчета[0].ОписаниеОтчета;
			
			Форма.ПолеРедакцияФормы		= Форма.мТаблицаФормОтчета[0].РедакцияФормы;
									 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Заполняет сведения об организации для статистического отчета.
//
Процедура ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(Форма, ВПрограммеИзмененаДатаПодписи = Ложь, ИмяПоля = "ПолеТабличногоДокументаФормаОтчета") Экспорт 

	Если (Форма.СтруктураРеквизитовФормы.Организация = Неопределено)
	 Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "АдрПочт");
		Сведения.Добавить("", "АдрПрописки");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКВЭД");
	КонецЕсли;

	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ДолжнИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "АдресЭлПочтыИсп");

	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ИННЮЛ       = "";
		ОКПО        = "";
		АдрПочт     = "";
		АдрПрописки = "";
		НаимЮЛПол   = "";
		ОснВидДеят  = "";
		ОКВЭД       = "";
	КонецЕсли;

	ДолжнИсп        = "";
	ФИОИсп          = "";
	ТелИсп          = "";
	АдресЭлПочтыИсп = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ОргСведения.Свойство("ИННЮЛ",          ИННЮЛ);
		ОргСведения.Свойство("ОКПО",           ОКПО);
		ОргСведения.Свойство("АдрПочт",        АдрПочт);
		ОргСведения.Свойство("АдрПрописки",    АдрПрописки);
		ОргСведения.Свойство("НаимЮЛПол",      НаимЮЛПол);
#Если НаСервере Тогда
		ОКПО = РегламентированнаяОтчетностьВызовСервера.ПолучитьОКПОФормыСтатистикиСПодразделением(Форма);
#Иначе
		Попытка
			ОбособленноеПодразделение = Форма.ОбособленноеПодразделение;
			Организация = Форма.СтруктураРеквизитовФормы.Организация;
			ОКПО = РегламентированнаяОтчетностьВызовСервера.ПолучитьОКПОПодразделения(ОбособленноеПодразделение, Организация);
		Исключение
		КонецПопытки;
#КонецЕсли
	КонецЕсли;

	ОргСведения.Свойство("ФИОИсп",          ФИОИсп);
	ОргСведения.Свойство("ДолжнИсп",        ДолжнИсп);
	ОргСведения.Свойство("ТелИсп",          ТелИсп);
	ОргСведения.Свойство("АдресЭлПочтыИсп", АдресЭлПочтыИсп);

	Если ВПрограммеИзмененаДатаПодписи Тогда
		Попытка
			Форма[ИмяПоля].Области.ОргИсполнитель.Значение           = ФИОИсп;
			Форма[ИмяПоля].Области.ОргДолжностьИсп.Значение          = ДолжнИсп;
			Форма[ИмяПоля].Области.ОргТелефонИсп.Значение            = ТелИсп;
			Форма[ИмяПоля].Области.ОргАдресЭлектроннойПочты.Значение = АдресЭлПочтыИсп;
		Исключение
		КонецПопытки;
		Возврат;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма[ИмяПоля].Области.ОргНазв.Значение))
		ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		
		Попытка
			ОбособленноеПодразделение = Форма.ОбособленноеПодразделение;
			Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда 
				Форма[ИмяПоля].Области.ОргНазв.Значение = Строка(ОбособленноеПодразделение) + ?(ПустаяСтрока(НаимЮЛПол), "", " (" + НаимЮЛПол + ")");
			Иначе
				Форма[ИмяПоля].Области.ОргНазв.Значение = НаимЮЛПол;
			КонецЕсли;
		Исключение
			Форма[ИмяПоля].Области.ОргНазв.Значение = НаимЮЛПол;
		КонецПопытки;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма[ИмяПоля].Области.ОргКодОКПО.Значение))
		ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Форма.СтруктураРеквизитовФормы.Организация) Тогда
			Форма[ИмяПоля].Области.ОргКодОКПО.Значение = "";
		Иначе
			Форма[ИмяПоля].Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;
	КонецЕсли;

	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		Или (ПустаяСтрока(Форма[ИмяПоля].Области.ОргАдрес.Значение)) Тогда
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Форма.СтруктураРеквизитовФормы.Организация) Тогда
			Если (ЗначениеЗаполнено(СтрЗаменить(АдрПочт, ",", ""))) Тогда
				Форма[ИмяПоля].Области.ОргАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
				Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = АдрПочт;
			Иначе
				Форма[ИмяПоля].Области.ОргАдрес.Значение = "";
				Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
			КонецЕсли;
		Иначе
			Если (ЗначениеЗаполнено(СтрЗаменить(АдрПрописки, ",", ""))) Тогда
				Форма[ИмяПоля].Области.ОргАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрПрописки);
				Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = АдрПрописки;
			Иначе
				Форма[ИмяПоля].Области.ОргАдрес.Значение = "";
				Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма[ИмяПоля].Области.ОргИсполнитель.Значение))
		ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма[ИмяПоля].Области.ОргИсполнитель.Значение = ФИОИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма[ИмяПоля].Области.ОргДолжностьИсп.Значение))
		ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма[ИмяПоля].Области.ОргДолжностьИсп.Значение = ДолжнИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма[ИмяПоля].Области.ОргТелефонИсп.Значение))
		ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма[ИмяПоля].Области.ОргТелефонИсп.Значение = ТелИсп;
	КонецЕсли;
	
	Попытка
		Если (НЕ ЗначениеЗаполнено(Форма[ИмяПоля].Области.ОргАдресЭлектроннойПочты.Значение))
			ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
			Форма[ИмяПоля].Области.ОргАдресЭлектроннойПочты.Значение = АдресЭлПочтыИсп;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Форма.Модифицированность = Истина;

КонецПроцедуры

// Заполняет сведения об организации для статистического отчета "СтатистикиЗП".
//
Процедура ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистикиЗП(Форма, ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт
	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "ОКПО");  // ОКПО
		Сведения.Добавить("", "АдрПочт");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКВЭД");
	КонецЕсли;

	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ДолжнИсп");
	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "АдресЭлПочтыИсп");

	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ИННЮЛ = "";
		ОКПО = "";
		АдрПочт     = "";
		НаимЮЛПол = "";
		ОснВидДеят = "";
		ОКВЭД = "";

	КонецЕсли;

	ТелИсп   = "";
	ДолжнИсп = "";
	ФИОИсп = "";
	АдресЭлПочтыИсп = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ОргСведения.Свойство("ИННЮЛ",          ИННЮЛ);
		ОргСведения.Свойство("ОКПО",           ОКПО);
		ОргСведения.Свойство("АдрПочт",        АдрПочт);
		ОргСведения.Свойство("НаимЮЛПол",      НаимЮЛПол);
		ОргСведения.Свойство("ОснВидДеят",     ОснВидДеят);
		ОргСведения.Свойство("ОКВЭД",          ОКВЭД);
#Если НаСервере Тогда
		ОКПО = РегламентированнаяОтчетностьВызовСервера.ПолучитьОКПОФормыСтатистикиСПодразделением(Форма);
#Иначе
		Попытка
			ОбособленноеПодразделение = Форма.ОбособленноеПодразделение;
			Организация = Форма.СтруктураРеквизитовФормы.Организация;
			ОКПО = РегламентированнаяОтчетностьВызовСервера.ПолучитьОКПОПодразделения(ОбособленноеПодразделение, Организация);
		Исключение
		КонецПопытки;
#КонецЕсли
	КонецЕсли;

	ОргСведения.Свойство("ТелИсп", 		   ТелИсп);
	ОргСведения.Свойство("ФИОИсп",         ФИОИсп);
	ОргСведения.Свойство("ДолжнИсп",       ДолжнИсп);
	ОргСведения.Свойство("АдресЭлПочтыИсп", АдресЭлПочтыИсп);

	Если ВПрограммеИзмененаДатаПодписи Тогда
		Попытка
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение = ТелИсп;
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдресЭлектроннойПочты.Значение = АдресЭлПочтыИсп;
		Исключение
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Если ЗначениеЗаполнено(Форма.ОбособленноеПодразделение) Тогда
			// Устанавливаем в "ОргНазв" значение по схеме:
			// "НаименованиеОбособленногоПодразделения (ПолноеНаименованиеОрганизации)".
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение = СокрЛП(Форма.ОбособленноеПодразделение) + ?(ПустаяСтрока(НаимЮЛПол), "", " (" + НаимЮЛПол + ")");
		Иначе
			// Устанавливаем в "ОргНазв" значение по схеме:
			// "ПолноеНаименованиеОрганизации (КраткоеНаименованиеОрганизации)".
			Попытка
				СокращенноеНаименование = СокрЛП(Форма.СтруктураРеквизитовФормы.Организация.НаименованиеСокращенное);
			Исключение
				СокращенноеНаименование = "";
			КонецПопытки;
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол + ?(ПустаяСтрока(СокращенноеНаименование), "", " (" + СокращенноеНаименование + ")");
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение = ОКПО;
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение)) Тогда
		Если (ЗначениеЗаполнено(СтрЗаменить(АдрПочт, ",", ""))) И (Не ЗначениеЗаполнено(Форма.ОбособленноеПодразделение)) Тогда
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
			Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = АдрПочт;
		Иначе
			// Либо соответствующий адрес организации не заполнен,
			// либо указано обособленное подразделение (адрес отсутствует).
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = "";
			Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение = ТелИсп;
	КонецЕсли;
	
	Попытка
		Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдресЭлектроннойПочты.Значение))
			ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдресЭлектроннойПочты.Значение = АдресЭлПочтыИсп;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Форма.Модифицированность = Истина;
КонецПроцедуры

// Возвращает представление нуля из строки формата.
//
Функция ПолучитьПредставлениеНуляИзСтрокиФормата(Знач СтрокаФормата) Экспорт 
	
	Если ПустаяСтрока(СтрокаФормата) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, ";", Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки);
		Если СтрНайти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			Возврат СокрЛП(ПодстрокаФормата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Заменяет представление нуля в строке формата.
//
Функция ЗаменитьПредставлениеНуляВСтрокеФормата(Знач СтрокаФормата, ПредставлениеНуля) Экспорт 
	
	НоваяСтрокаФормата = "";
	
	РазделительПодстрок = ";";
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, РазделительПодстрок, Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СокрЛП(СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки));
		Если ПустаяСтрока(ПодстрокаФормата) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			ПодстрокаФормата = ПредставлениеНуля;
		КонецЕсли;
		НоваяСтрокаФормата = НоваяСтрокаФормата + ?(ПустаяСтрока(НоваяСтрокаФормата), "", РазделительПодстрок) + ПодстрокаФормата;
	КонецЦикла;
	
	Если ПустаяСтрока(НоваяСтрокаФормата) Тогда
		Возврат ПредставлениеНуля;
	КонецЕсли;

	Возврат НоваяСтрокаФормата;
	
КонецФункции

// Собирает данные текущего табличного поля.
//
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля) Экспорт 

	ТабличноеПоле = Форма[ИмяТабличногоПоля];

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
		// Сохраним формат отображения нуля для восстановления представления
		// в поле табличного документа и контроля выгрузки показателя в формате XML
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") И ЗначениеПоказателя = 0 Тогда
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(ТекущаяОбласть.Формат);
			Если ЗначениеЗаполнено(ФорматПредставленияНуля) Тогда
				СтруктураДанныхПоля.Вставить("ЧН" + ИмяПоказателя, ФорматПредставленияНуля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	СтруктураДанныхПоля.Вставить("ОргАдрес", Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);

	Возврат СтруктураДанныхПоля;

КонецФункции

// Заполняет показатели отчета.
//
Процедура ЗаполнитьПоказателиОтчета(Форма, ПоказателиОтчета) Экспорт 
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Группа Из Форма.Элементы.Страницы.ПодчиненныеЭлементы Цикл
		Для Каждого ЭлементГруппы Из Группа.ПодчиненныеЭлементы Цикл 
			Если СтрЧислоВхождений(ЭлементГруппы.Имя, Префикс) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказателиОтчета.Вставить(ЭлементГруппы.Имя, СобратьДанныеТекущегоТаблПоля(Форма, ЭлементГруппы.Имя));
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Возвращает имя раздела текущей области.
//
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено; // отсутствует активная область табличного документа
	КонецЕсли;

	ИмяТекущейОбласти   = ТекущаяОбласть.Имя;
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];

		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

// Добавляет необходимое количество дополнительных строк.
//
Процедура ДобавитьНеобходимоеКоличествоДопСтрок(Форма, ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
	
	ИмяОбласти = Форма.СтруктураРеквизитовФормы.мСоответствияМнгЧ[ИмяГруппы];
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области[ИмяОбласти].Верх;
	МногострочнаяЧастьНиз = МногострочнаяЧастьВерх + ИсходноеКоличествоСтрокГруппы - 1;
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("R" + Формат(МногострочнаяЧастьНиз, "ЧГ="));
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ИсходноеКоличествоСтрокГруппы, , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		НомНовойСтроки = ТекущееКоличествоСтрокГруппы - НомСтроки + ИсходноеКоличествоСтрокГруппы;
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + НомНовойСтроки - 1, Область.Лево, МногострочнаяЧастьВерх + НомНовойСтроки - 1, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Формат(НомНовойСтроки, "ЧГ=");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ИмяОбласти).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = ИмяОбласти;
	
КонецПроцедуры

// Отрисовывает пиктограммы удаления строк.
//
Процедура ОтрисоватьЗначкиУдаленияСтрок(Форма, ДлинаИмениОбластейСДопСтроками = 26) Экспорт 
	
	ТабДок = Форма.ТабличныйДокумент;
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, ДлинаИмениОбластейСДопСтроками));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, ДлинаИмениОбластейСДопСтроками)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает найденный уникальный идентификатор элемента дерева.
//
Функция НайтиИДВДереве(Дерево, UID, UID_Пустой) Экспорт 
	Для Каждого Элемент Из Дерево Цикл 
		Если Элемент.UID = UID Тогда
			Возврат Элемент.ПолучитьИдентификатор();
		КонецЕсли;
	
		НайденныйИД = НайтиИДВДереве(Элемент.ПолучитьЭлементы(), UID, UID_Пустой);
		Если НайденныйИД <> Неопределено Тогда
			Возврат НайденныйИД;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

#Область ПроцедурыИФункцииРаботыСОтчетамиСтатистики

// Процедура вызывается при инициализации формы регламентированного отчета.
//
Процедура ПриИнициализацииФормыРегламентированногоОтчета(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, КонтролирующийОрган);
	
КонецПроцедуры

// Выводит сообщение пользователю.
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач ИдентификаторНазначения  = "") Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Если НЕ ПустаяСтрока(ИдентификаторНазначения) Тогда
		Сообщение.ИдентификаторНазначения  = ИдентификаторНазначения;
	КонецЕсли;	
	Сообщение.Сообщить();

КонецПроцедуры

// Округляет число по формату.
//
Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло) Экспорт 
	
	Перем Делитель;
	
	Если Форма.СоответствиеЕдиницыИзмеренияДелителю.Свойство("Окр" + СтрЗаменить(Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения, " ", ""), Делитель) Тогда
		
		Возврат Окр(ИсходноеЧисло / Делитель, Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Делитель;
		
	КонецЕсли;
	
КонецФункции

// Округляет число по формату делителя.
//
Функция ОкруглитьЧислоПоФорматуДелителя(Форма, ИсходноеЧисло) Экспорт 
	
	ОкругленноеЧисло = Окр(ИсходноеЧисло / Форма.СтруктураРеквизитовФормы.мДелитель, Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Форма.СтруктураРеквизитовФормы.мДелитель;
	Возврат ОкругленноеЧисло;
	
КонецФункции

// Возвращает свойства показателей.
//
Функция НайтиСвойстваПоказателя(Форма, КодПоказателя) Экспорт 
	
	СвойстваПоказателей = Форма.СвойстваПоказателей;
	СвойстваПоказателя = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", КодПоказателя));
		
	Если СвойстваПоказателя.Количество() = 0 Тогда
		
		СвойстваПоказателя = Неопределено;
		
		Для Каждого Стр Из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СвойстваПоказателя = СвойстваПоказателя[0];
		
	КонецЕсли;
		
	Возврат СвойстваПоказателя;
	
КонецФункции

#КонецОбласти

// Сравнивает краткие версии отчетов.
//
Функция СравнитьКраткиеВерсииОтчетов(Версия1, Версия2) Экспорт
	
	// раскладываем версию 1 и преобразуем составляющие к числам
	ЧастиВерсии1 = РегламентированнаяОтчетностьКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(Версия1, ".");
	ЧислоСоставляющихВерсии1 = ЧастиВерсии1.Количество();
	Для Инд = 0 По ЧислоСоставляющихВерсии1 - 1 Цикл
		ЧастьВерсии1 = ЧастиВерсии1[Инд];
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастьВерсии1) Тогда
			Возврат Неопределено;
		КонецЕсли;
		ЧастиВерсии1[Инд] = Число(ЧастьВерсии1);
	КонецЦикла;
	
	// раскладываем версию 2 и преобразуем составляющие к числам
	ЧастиВерсии2 = РегламентированнаяОтчетностьКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(Версия2, ".");
	ЧислоСоставляющихВерсии2 = ЧастиВерсии1.Количество();
	Для Инд = 0 По ЧислоСоставляющихВерсии2 - 1 Цикл
		ЧастьВерсии2 = ЧастиВерсии2[Инд];
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастьВерсии2) Тогда
			Возврат Неопределено;
		КонецЕсли;
		ЧастиВерсии2[Инд] = Число(ЧастьВерсии2);
	КонецЦикла;
	
	// дополняем массив составляющих нулями, уравнивая число составляющих первой и второй версий
	Если ЧислоСоставляющихВерсии1 > ЧислоСоставляющихВерсии2 Тогда
		Для Инд = ЧислоСоставляющихВерсии2 + 1 По ЧислоСоставляющихВерсии1 Цикл
			ЧастиВерсии2.Добавить(0);
		КонецЦикла;
	ИначеЕсли ЧислоСоставляющихВерсии2 > ЧислоСоставляющихВерсии1 Тогда
		Для Инд = ЧислоСоставляющихВерсии1 + 1 По ЧислоСоставляющихВерсии2 Цикл
			ЧастиВерсии1.Добавить(0);
		КонецЦикла;
	КонецЕсли;
	
	// сравниваем по каждому составляющему
	Для Инд = 0 По ЧислоСоставляющихВерсии1 - 1 Цикл
		ЧастьВерсии1 = ЧастиВерсии1[Инд];
		ЧастьВерсии2 = ЧастиВерсии2[Инд];
		Если ЧастьВерсии1 > ЧастьВерсии2 Тогда
			Возврат -1;
		ИначеЕсли ЧастьВерсии1 < ЧастьВерсии2 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

// Процедура выделяет в табличном документе области с незаполненными показателями
// и снимает выделение областей с заполненными показателями. Предназначена для
// областей, содержащих значения показателей, ввод которых осуществляется вручную.
//
// Параметры:
//   ТаблДок                     - ТабличныйДокумент - табличный документ;
//   ПараметрыВыделяемыхОбластей - Массив - массив структур с ключами:
//     "ИмяОбласти"                               - Строка - имя области табл. документа;
//     "ГраницаСверхуАвто"       (необязательный) - Линия - линия верхней границы (по умолчанию);
//     "ГраницаСнизуАвто"        (необязательный) - Линия - линия нижней границы (по умолчанию);
//     "ГраницаСлеваАвто"        (необязательный) - Линия - линия левой границы (по умолчанию);
//     "ГраницаСправаАвто"       (необязательный) - Линия - линия правой границы (по умолчанию);
//     "ЦветАвто"                (необязательный) - Цвет  - цвет рамки (по умолчанию);
//     "ГраницаСверхуВыделенная" (необязательный) - Линия - линия выделенной верхней границы;
//     "ГраницаСнизуВыделенная"  (необязательный) - Линия - линия выделенной нижней границы;
//     "ГраницаСлеваВыделенная"  (необязательный) - Линия - линия выделенной левой границы;
//     "ГраницаСправаВыделенная" (необязательный) - Линия - линия выделенной правой границы;
//     "ЦветВыделения"           (необязательный) - Цвет  - цвет выделенной рамки;
//
Процедура ИзменитьРамкиОбластейТабличногоДокумента(ТаблДок, ПараметрыВыделяемыхОбластей) Экспорт
	
	ПараметрыИзменения = Новый Структура;
	
	Для каждого ПараметрыОбласти Из ПараметрыВыделяемыхОбластей Цикл
		
		ИмяОбл = ПараметрыОбласти.ИмяОбласти;
		
		Если Лев(ИмяОбл, 2) = "П0"
			И СтрДлина(ИмяОбл) > 14
			И Сред(ИмяОбл, 14, 1) = "_" Тогда
			
			ИмяБезПостфикса = Лев(ИмяОбл, 13);
			
			Инд = 1;
			Постфикс = "_1";
			Обл = ТаблДок.Области.Найти(ИмяБезПостфикса + Постфикс);
			
			Пока Обл <> Неопределено Цикл
				
				ПараметрыОбласти.Вставить("Область", Обл);
				
				ИзменитьРамкуОбластиТабличногоДокумента(ПараметрыОбласти);
				
				Инд = Инд + 1;
				Постфикс = "_" + Формат(Инд, "ЧГ=");
				Обл = ТаблДок.Области.Найти(ИмяБезПостфикса + Постфикс);
				
			КонецЦикла;
			
		Иначе
			
			Обл = ТаблДок.Области.Найти(ИмяОбл);
			
			Если Обл <> Неопределено Тогда
				
				ПараметрыОбласти.Вставить("Область", Обл);
				
				ИзменитьРамкуОбластиТабличногоДокумента(ПараметрыОбласти);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выделяет в табличном документе область с заполненным показателем
// и снимает выделение области с заполненным показателем. Предназначена для
// области, содержащей значение показателя, ввод которого осуществляется вручную.
//
// Параметр:
//   ПараметрыИзменения - Структура - ключи:
//     "Область" - ОбластьЯчеекТабличногоДокумента - область, выделение которой изменяется;
//     "ГраницаСверхуАвто"       (необязательный) - Линия - линия верхней границы (по умолчанию);
//     "ГраницаСнизуАвто"        (необязательный) - Линия - линия нижней границы (по умолчанию);
//     "ГраницаСлеваАвто"        (необязательный) - Линия - линия левой границы (по умолчанию);
//     "ГраницаСправаАвто"       (необязательный) - Линия - линия правой границы (по умолчанию);
//     "ЦветАвто"                (необязательный) - Цвет  - цвет рамки (по умолчанию);
//     "ГраницаСверхуВыделенная" (необязательный) - Линия - линия выделенной верхней границы;
//     "ГраницаСнизуВыделенная"  (необязательный) - Линия - линия выделенной нижней границы;
//     "ГраницаСлеваВыделенная"  (необязательный) - Линия - линия выделенной левой границы;
//     "ГраницаСправаВыделенная" (необязательный) - Линия - линия выделенной правой границы;
//     "ЦветВыделения"           (необязательный) - Цвет  - цвет выделенной рамки;
//
Процедура ИзменитьРамкуОбластиТабличногоДокумента(ПараметрыИзменения) Экспорт
	
	Обл = ПараметрыИзменения.Область;
	
	Если НЕ ЗначениеЗаполнено(Обл.Значение)
		И (Обл.ЦветФона = Новый Цвет(255, 255, 192) ИЛИ Обл.ЦветФона = Новый Цвет(230, 240, 220)) Тогда
		
		ТочечнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная);
		
		Если НЕ ПараметрыИзменения.Свойство("ГраницаСверхуВыделенная") Тогда
			ПараметрыИзменения.Вставить("ГраницаСверхуВыделенная", ТочечнаяЛиния);
		КонецЕсли;
		Если НЕ ПараметрыИзменения.Свойство("ГраницаСнизуВыделенная") Тогда
			ПараметрыИзменения.Вставить("ГраницаСнизуВыделенная", ТочечнаяЛиния);
		КонецЕсли;
		Если НЕ ПараметрыИзменения.Свойство("ГраницаСлеваВыделенная") Тогда
			ПараметрыИзменения.Вставить("ГраницаСлеваВыделенная", ТочечнаяЛиния);
		КонецЕсли;
		Если НЕ ПараметрыИзменения.Свойство("ГраницаСправаВыделенная") Тогда
			ПараметрыИзменения.Вставить("ГраницаСправаВыделенная", ТочечнаяЛиния);
		КонецЕсли;
		Если НЕ ПараметрыИзменения.Свойство("ЦветВыделения") Тогда
			ПараметрыИзменения.Вставить("ЦветВыделения", Новый Цвет(255, 0, 0));
		КонецЕсли;
		
		Обл.ГраницаСверху = ПараметрыИзменения.ГраницаСверхуВыделенная;
		Обл.ГраницаСнизу  = ПараметрыИзменения.ГраницаСнизуВыделенная;
		Обл.ГраницаСлева  = ПараметрыИзменения.ГраницаСлеваВыделенная;
		Обл.ГраницаСправа = ПараметрыИзменения.ГраницаСправаВыделенная;
		Обл.ЦветРамки = ПараметрыИзменения.ЦветВыделения;
		
	Иначе
		
		СплошнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		
		Если НЕ ПараметрыИзменения.Свойство("ГраницаСверхуАвто") Тогда
			ПараметрыИзменения.Вставить("ГраницаСверхуАвто", СплошнаяЛиния);
		КонецЕсли;
		Если НЕ ПараметрыИзменения.Свойство("ГраницаСнизуАвто") Тогда
			ПараметрыИзменения.Вставить("ГраницаСнизуАвто", СплошнаяЛиния);
		КонецЕсли;
		Если НЕ ПараметрыИзменения.Свойство("ГраницаСлеваАвто") Тогда
			ПараметрыИзменения.Вставить("ГраницаСлеваАвто", СплошнаяЛиния);
		КонецЕсли;
		Если НЕ ПараметрыИзменения.Свойство("ГраницаСправаАвто") Тогда
			ПараметрыИзменения.Вставить("ГраницаСправаАвто", СплошнаяЛиния);
		КонецЕсли;
		Если НЕ ПараметрыИзменения.Свойство("ЦветАвто") Тогда
			ПараметрыИзменения.Вставить("ЦветАвто", Новый Цвет(0, 0, 0));
		КонецЕсли;
		
		Обл.ГраницаСверху = ПараметрыИзменения.ГраницаСверхуАвто;
		Обл.ГраницаСнизу  = ПараметрыИзменения.ГраницаСнизуАвто;
		Обл.ГраницаСлева  = ПараметрыИзменения.ГраницаСлеваАвто;
		Обл.ГраницаСправа = ПараметрыИзменения.ГраницаСправаАвто;
		Обл.ЦветРамки = ПараметрыИзменения.ЦветАвто;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение ОКВЭД.
//
// Параметры:
//  ДатаПодписи - Дата - дата подписи регл. отчета.
//  СтруктураРеквизитовФормы - Структура - структура реквизитов формы регл. отчета.
//  ОКВЭД - Строка - устанавливаемое значение ОКВЭД.
//
Процедура УстановитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы, ОКВЭД) Экспорт
	
	ОКВЭД = СокрЛП(СтруктураРеквизитовФормы.ОКВЭД2);
	
	Если (ДатаПодписи < '2017-01-01'
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОКВЭД))
		ИЛИ (СтруктураРеквизитовФормы.ВидДокумента > 0
		И СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2016-12-01'
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОКВЭД)) Тогда
		
		ОКВЭД = СокрЛП(СтруктураРеквизитовФормы.ОКВЭД);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение вида экономической деятельности.
//
// Параметры:
//  ДатаПодписи - Дата - дата подписи регл. отчета.
//  СтруктураРеквизитовФормы - Структура - структура реквизитов формы регл. отчета.
//  ВидЭкономическойДеятельности - Строка - устанавливаемое значение вида экономической деятельности.
//
Процедура УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи, СтруктураРеквизитовФормы, ВидЭкономическойДеятельности) Экспорт
	
	ВидЭкономическойДеятельности = СокрЛП(СтруктураРеквизитовФормы.ОснВидДеят2);
	
	Если (ДатаПодписи < '2017-01-01'
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОснВидДеят))
		ИЛИ (СтруктураРеквизитовФормы.ВидДокумента > 0
		И СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2016-12-01'
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОснВидДеят)) Тогда
		
		ВидЭкономическойДеятельности = СокрЛП(СтруктураРеквизитовФормы.ОснВидДеят);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УдалосьПроставитьНомерСтраницы(ТаблДок,Знач НомерЛиста)
	
	ОбластиСНомерамиЛистов = Новый СписокЗначений;
	Для Каждого Обл Из ТаблДок.Значение.Области Цикл
		Если (НЕ Тип(Обл) = Тип("РисунокТабличногоДокумента") И Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник) ИЛИ Обл.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		КрайнийПравыйСимвол = Прав(Обл.Имя, 1);
		Если Лев(ВРЕГ(Обл.Имя), 6) = "НОМСТР" И (КодСимвола(КрайнийПравыйСимвол) >= КодСимвола("0") И КодСимвола(КрайнийПравыйСимвол) <= КодСимвола("9"))Тогда
			ОбластиСНомерамиЛистов.Добавить(Обл, Обл.Имя);
		КонецЕсли;
		ОбластиСНомерамиЛистов.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	КонецЦикла;
	
	Цифры = Новый Массив;
	Для Инд = 1 По 9 Цикл
		Цифра = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
		НомерЛиста = Цел(НомерЛиста / 10);
		Если ПустаяСтрока(Цифра) Тогда
			Прервать;
		Иначе
			Цифры.Добавить(Цифра);
		КонецЕсли;
	КонецЦикла;
	
	Для Инд = 0 По ОбластиСНомерамиЛистов.Количество() - 1 Цикл
		ОбластиСНомерамиЛистов.Получить(Инд).Значение.Значение = Формат(?(Цифры.Количество() > Инд, Цифры[Инд], 0), "ЧЦ=1; ЧН=0; ЧГ=");
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура УдалитьСлужебныеСимоволыИзПечатнойФормы(СписокПечатаемыхЛистов)
	
	ПустаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	Для Каждого Лист Из СписокПечатаемыхЛистов Цикл 
		ТабДок = ПолучитьИзВременногоХранилища(Лист.Значение[0]);
		Для Каждого Обл Из ТабДок.Области Цикл 
			Если СтрНайти(Обл.Имя, "УдалитьСтроку") = 1 И Не Обл.СодержитЗначение Тогда 
				Обл.Текст = "";
			КонецЕсли;
			Если СтрНайти(Обл.Имя, "ДобавитьСтроку") = 1 И Не Обл.СодержитЗначение Тогда 
				Обл.Текст = "";
				УстановитьГраницуОбласти(Обл, ПустаяЛиния);
				Попытка
					Если Обл.Верх = Обл.Низ И Обл.Лево = Обл.Право Тогда 
						УстановитьГраницуОбласти(ТабДок.Область(Обл.Верх, Обл.Лево+1,Обл.Верх, Обл.Лево+1), ПустаяЛиния);
					КонецЕсли;
				Исключение
				КонецПопытки;
		КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьГраницуОбласти(Обл, Граница)
	
	Обл.ГраницаСлева = Граница;
	Обл.ГраницаСправа = Граница;
	Обл.ГраницаСверху = Граница;
	Обл.ГраницаСнизу = Граница;
	
КонецПроцедуры

Функция ПолучитьКоличествоСтраницРаздела(Форма, ИмяТекущейСтраницыПанели)
	
	Перем ТаблицаСтраницРаздела;
		
	Если НЕ Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат 1;
	КонецЕсли;

	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	КоличествоСтраниц = Макс(ТаблицаСтраницРаздела.Количество(), 1);
	
	Возврат КоличествоСтраниц;
	
КонецФункции

Процедура ОпределитьПредставлениеДопСтраниц(Форма, ИмяСтраницы = Неопределено, ТолькоУАктивнойСтраницы = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	ТолькоАктивная = ?(ТолькоУАктивнойСтраницы = Неопределено, Ложь, ТолькоУАктивнойСтраницы);
	
	Для Каждого Страница Из Форма.мСтруктураМногостраничныхРазделов Цикл
		ИмяТекСтраницы        = Страница.Ключ;
		ТаблицаСтраницРаздела = Форма[Страница.Значение];

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяТекСтраницы <> ИмяСтраницы Тогда
				Продолжить; // Пропускаем не нужные страницы
			КонецЕсли;
		КонецЕсли;

		// Если есть хоть одна страница - определим ее представление
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			НомерСтраницы = 0;

			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				НомерСтраницы = НомерСтраницы + 1;

				СохрПредставлениеСтраницы = СтрокаТаблицы.Представление;

				// Если колонки нет, тогда автоматическое представление включено по умолчанию.
				Если ТаблицаСтраницРаздела[0].Свойство("АвтоматическоеПредставление") Тогда
					АвтоматическоеПредставление = СтрокаТаблицы.АвтоматическоеПредставление;
				Иначе
					АвтоматическоеПредставление = Истина;
				КонецЕсли;

				Если НЕ АвтоматическоеПредставление Тогда
					Продолжить;
				КонецЕсли;

				// Определяем представление дополнительной страницы
				СтруктураДанныхСтраницы = СтрокаТаблицы.Данные[0].Значение;

				ИмяПредставления = ПолучитьСвойствоРаздела(Форма, ИмяТекСтраницы, "ИмяПредставления");

				Если НЕ ЗначениеЗаполнено(ИмяПредставления) Тогда
					ТекущееПредставлениеСтраницы = Неопределено;
				Иначе
					СтруктураДанныхСтраницы.Свойство(ИмяПредставления, ТекущееПредставлениеСтраницы);
				КонецЕсли;

				Если (НЕ ТолькоАктивная) Или ((ТолькоАктивная) И (СтрокаТаблицы.АктивнаяСтраница))Тогда

					ТекущееПредставлениеСтраницы = ?(НЕ ЗначениеЗаполнено(ТекущееПредставлениеСтраницы), "Лист N " + Строка(НомерСтраницы), ТекущееПредставлениеСтраницы + ". Лист N " + Строка(НомерСтраницы));
					Если Не ПустаяСтрока(ТекущееПредставлениеСтраницы) Тогда
						СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;
					Иначе
						СтрокаТаблицы.Представление = "Новая страница";
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти