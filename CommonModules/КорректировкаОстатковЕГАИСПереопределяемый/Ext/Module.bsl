
#Область ПрограммныйИнтерфейс

// Возвращает запрос на получение учетных остатков.
//
// Параметры:
//  ДатаОстатков - Дата - дата получения остатков,
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация получения остатков,
//  КорректироватьОстаткиНемаркируемойПродукции - Булево - признак корректировки остатков немаркируемой продукции.
//
// Возвращаемое значение:
//   Запрос - запрос учетных остатков.
//
Функция ЗапросУчетныхОстатков(ДатаОстатков, ОрганизацияЕГАИС, КорректироватьОстаткиНемаркируемойПродукции) Экспорт
	
	ТранспортныйМодуль = ТранспортныйМодуль(ОрганизацияЕГАИС);
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Отсутствуют доступные транспортные модули'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТранспортныйМодуль.ТорговаяТочка);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("КорректироватьОстаткиНемаркируемойПродукции", КорректироватьОстаткиНемаркируемойПродукции);
	
	УсловиеПоДате = ?(ЗначениеЗаполнено(ДатаОстатков), "&ДатаОстатков", "");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ПродаетсяВРозлив,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))) КАК АлкогольнаяПродукция,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.ТипПродукции, ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.ПустаяСсылка))) КАК ТипПродукции,
	|	ВЫБОР
	|		КОГДА ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА ЗапасыОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокСкладБазЕд,
	|	ВЫБОР
	|		КОГДА ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы <> ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|			ТОГДА 0
	|		ИНАЧЕ ЗапасыОстатки.КоличествоОстаток
	|	КОНЕЦ КАК ОстатокТорговыйЗалБазЕд
	|ПОМЕСТИТЬ УчетныеОстатки
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			" + УсловиеПоДате + ",
	|			СтруктурнаяЕдиница = &ТорговыйОбъект
	|				И Номенклатура.АлкогольнаяПродукция
	|				И ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(Номенклатура.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|						ТОГДА &КорректироватьОстаткиНемаркируемойПродукции
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ЗапасыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ЗапасыОстатки.Номенклатура = СоответствиеНоменклатурыЕГАИС.Номенклатура
	|			И ЗапасыОстатки.Характеристика = СоответствиеНоменклатурыЕГАИС.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ВЫБОР
	|		КОГДА ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА ЗапасыОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы <> ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|			ТОГДА 0
	|		ИНАЧЕ ЗапасыОстатки.КоличествоОстаток
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетныеОстатки.Номенклатура КАК Номенклатура,
	|	УчетныеОстатки.Характеристика,
	|	УчетныеОстатки.ПродаетсяВРозлив,
	|	УчетныеОстатки.Номенклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	УчетныеОстатки.АлкогольнаяПродукция,
	|	УчетныеОстатки.ТипПродукции,
	|	УчетныеОстатки.ОстатокСкладБазЕд,
	|	УчетныеОстатки.ОстатокСкладБазЕд * ВЫБОР
	|		КОГДА УчетныеОстатки.ПродаетсяВРозлив
	|			ТОГДА УчетныеОстатки.Номенклатура.ОбъемДАЛ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ОстатокСклад,
	|	УчетныеОстатки.ОстатокТорговыйЗалБазЕд,
	|	УчетныеОстатки.ОстатокТорговыйЗалБазЕд * ВЫБОР
	|		КОГДА УчетныеОстатки.ПродаетсяВРозлив
	|			ТОГДА УчетныеОстатки.Номенклатура.ОбъемДАЛ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ОстатокТорговыйЗал
	|ИЗ
	|	УчетныеОстатки КАК УчетныеОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат Запрос;
	
КонецФункции

// Заполняет в табличной части коэффициент пересчета в декалитры для базовой единицы измерения номенклатуры.
//
// Параметры:
//  ТабличнаяЧасть - ТабличнаяЧасть - табличная часть, в которой нужно обновить коэффициент,
//  ПолеНоменклатура - Строка - имя реквизита Номенклатура табличной части,
//  ПолеКоэффициент - Строка - имя реквизита Коэффициента пересчета в декалитры.
//
Процедура ЗаполнитьКоэффициентПересчетаВДАЛ(ТабличнаяЧасть, ПолеНоменклатура = "Номенклатура", ПолеКоэффициент = "ОбъемДАЛ") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТабличнаяЧасть." + ПолеНоменклатура + " КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТабличнаяЧасть." + ПолеКоэффициент + " КАК КоэффициентПересчета,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.Номенклатура,
	|	ИсходнаяТаблица.Номенклатура.ОбъемДАЛ КАК КоэффициентПересчета,
	|	ИсходнаяТаблица.НомерСтроки
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|ГДЕ
	|	ИсходнаяТаблица.Номенклатура.ОбъемДАЛ <> ИсходнаяТаблица.КоэффициентПересчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТабличнаяЧасть[Выборка.НомерСтроки - 1][ПолеКоэффициент] = Выборка.КоэффициентПересчета;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в табличной части сопоставленную номенклатуру и алкогольную продукцию.
//
// Параметры:
//  ТабличнаяЧасть - ТабличнаяЧасть, ТаблицаЗначений - таблица для заполнения,
//  ПолеАлкогольнаяПродукция - Строка - имя реквизита Алкогольная пролукция,
//  ПолеНоменклатура - Строка - имя реквизита Номенклатура табличной части,
//  ПолеХарактеристика - Строка - имя реквизита Характеристика номенклатуры.
//
Процедура ЗаполнитьНесопоставленнуюПродукцию(ТабличнаяЧасть,
	ПолеАлкогольнаяПродукция = "АлкогольнаяПродукция", ПолеНоменклатура = "Номенклатура", ПолеХарактеристика = "Характеристика") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОстатков", ТабличнаяЧасть);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаОстатков." + ПолеАлкогольнаяПродукция + " КАК Справочник.КлассификаторАлкогольнойПродукцииЕГАИС) КАК АлкогольнаяПродукция,
	|	ВЫРАЗИТЬ(ТаблицаОстатков." + ПолеНоменклатура + " КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаОстатков." + ПолеХарактеристика + " КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ТаблицаОстатков.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	&ТаблицаОстатков КАК ТаблицаОстатков
	|ГДЕ
	|	(ТаблицаОстатков.Номенклатура = &ПустаяНоменклатура
	|			ИЛИ ТаблицаОстатков.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатков.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ТаблицаОстатков.АлкогольнаяПродукция, СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция) КАК АлкогольнаяПродукция,
	|	ТаблицаОстатков.НомерСтроки
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаОстатков.Номенклатура = СоответствиеНоменклатурыЕГАИС.Номенклатура
	|			И ТаблицаОстатков.Характеристика = СоответствиеНоменклатурыЕГАИС.Характеристика
	|			И (ТаблицаОстатков.Номенклатура <> &ПустаяНоменклатура)
	|ГДЕ
	|	(НЕ СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL
	|			ИЛИ ТаблицаОстатков.Номенклатура <> &ПустаяНоменклатура)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
		СтрокаТаблицы[ПолеНоменклатура] = Выборка.Номенклатура;
		СтрокаТаблицы[ПолеХарактеристика] = Выборка.Характеристика;
		СтрокаТаблицы[ПолеАлкогольнаяПродукция] = Выборка.АлкогольнаяПродукция;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в табличной части признак использования характеристик номенклатуры.
//
// Параметры:
//  ТабличнаяЧасть - ДанныеФормыКоллекция, ТаблицаЗначений - таблица для заполнения.
//
Процедура ЗаполнитьПризнакИспользованияХарактеристик(ТабличнаяЧасть) Экспорт
	
	//НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	//	ТабличнаяЧасть,
	//	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
	//	Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
КонецПроцедуры

// В процедуре необходимо определить значения переменных ЭтоСклад и ЭтоТорговыйЗал в зависимости от типа торгового объекта.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - ссылка на организацию ЕГАИС,
//  ЭтоСклад - Булево - признак того, что торговый объект является складским помещением. Выходной параметр,
//  ЭтоТорговыйЗал - Булево - признак того, что торговый объект является торговым залом. Выходной параметр.
//
Процедура ПриОпределенииТипаТорговогоОбъекта(ОрганизацияЕГАИС, ЭтоСклад, ЭтоТорговыйЗал) Экспорт
	
	ТранспортныйМодуль = ТранспортныйМодуль(ОрганизацияЕГАИС);
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Отсутствуют доступные транспортные модули'");
	КонецЕсли;
	
	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранспортныйМодуль.ТорговаяТочка, "ТипСтруктурнойЕдиницы");
	
	ЭтоСклад = ТипСклада = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	ЭтоТорговыйЗал = ТипСклада = Перечисления.ТипыСтруктурныхЕдиниц.Розница;
	
КонецПроцедуры

// Вызывается при создании на сервере основной формы помощника.
//
// Параметры:
//  Форма - УправляемаяФорма - форма запущенной обработки корректировки остатков,
//  Отказ - Булево - признак отказа от создания формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	//ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(Форма, "СозданныеДокументы", "СозданныеДокументыДата");
	//
	//НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
	//	Форма,
	//	"ТаблицаОстатковХарактеристика",
	//	"Объект.ТаблицаОстатков.ХарактеристикиИспользуются");
	//	
	//НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
	//	Форма,
	//	"ТаблицаКорректировкиХарактеристика",
	//	"Объект.ТаблицаКорректировки.ХарактеристикиИспользуются");
	
КонецПроцедуры

// Проверяет наличие документа инвентаризации по складу.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - ссылка на собственную организацию в справочнике ЕГАИС,
//  ТекстОшибкиСклад - Строка, ФорматированнаяСтрока - текст ошибки проверки инвентаризации на складе. Выходной параметр,
//  ТекстОшибкиТорговыйЗал - Строка, ФорматированнаяСтрока - текст ошибки проверки инвентаризации в торговом зале. Выходной параметр.
//
Процедура ПроверитьНаличиеИнвентаризации(ОрганизацияЕГАИС, ТекстОшибкиСклад, ТекстОшибкиТорговыйЗал) Экспорт
	
	ТранспортныйМодуль = ТранспортныйМодуль(ОрганизацияЕГАИС);
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Отсутствуют доступные транспортные модули'");
	КонецЕсли;
	
	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранспортныйМодуль.ТорговаяТочка, "ТипСтруктурнойЕдиницы");
	
	МассивСтроки = Новый Массив;
	МассивСтроки.Добавить(?(ТипСклада = Перечисления.ТипыСтруктурныхЕдиниц.Склад, НСтр("ru='на складе'"), НСтр("ru='в торговом зале'")));
	МассивСтроки.Добавить(" ");
	МассивСтроки.Добавить(Новый ФорматированнаяСтрока(Строка(ТранспортныйМодуль.ТорговаяТочка),,,, ПолучитьНавигационнуюСсылку(ТранспортныйМодуль.ТорговаяТочка)));
	
	ПредставлениеСклада = Новый ФорматированнаяСтрока(МассивСтроки);
	
	ТекстОшибки = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", ТранспортныйМодуль.ТорговаяТочка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИнвентаризацияЗапасов.Ссылка КАК Ссылка,
	|	ИнвентаризацияЗапасов.Дата КАК Дата
	|ИЗ
	|	Документ.ИнвентаризацияЗапасов КАК ИнвентаризацияЗапасов
	|ГДЕ
	|	ИнвентаризацияЗапасов.СтруктурнаяЕдиница = &Склад
	|	И НЕ ИнвентаризацияЗапасов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		МассивСтроки = Новый Массив;
		МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Инвентаризация товаров'"),,,, "ОткрытьСписокИнвентаризаций"));
		МассивСтроки.Добавить(" ");
		МассивСтроки.Добавить(ПредставлениеСклада);
		МассивСтроки.Добавить(" ");
		МассивСтроки.Добавить(НСтр("ru='не проводилась.'"));
		
		ТекстОшибки = Новый ФорматированнаяСтрока(МассивСтроки);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НачалоДня(Выборка.Дата) < НачалоДня(ДобавитьМесяц(ТекущаяДатаСеанса(), -1)) Тогда
			МассивСтроки = Новый Массив;
			МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Инвентаризация товаров'"),,,, "ОткрытьСписокИнвентаризаций"));
			МассивСтроки.Добавить(" ");
			МассивСтроки.Добавить(ПредставлениеСклада);
			МассивСтроки.Добавить(" ");
			МассивСтроки.Добавить(НСтр("ru='проводилась больше месяца назад.'"));
			МассивСтроки.Добавить(Символы.ПС);
			МассивСтроки.Добавить(НСтр("ru='Рекомендуется провести повторную инвентаризацию.'"));
			
			ТекстОшибки = Новый ФорматированнаяСтрока(МассивСтроки);
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Если ТипСклада = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
			ТекстОшибкиСклад = ТекстОшибки;
		Иначе
			ТекстОшибкиТорговыйЗал = ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после заполнения таблицы значений неподтвержденными документами.
//
// Параметры:
//  НеподтвержденныеДокументы - ТаблицаЗначений - таблица с найденными неподтвержденными документами,
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - собственная организация по классификатору.
//
Процедура ПриПроверкеНеподтвержденныхДокументов(НеподтвержденныеДокументы, ОрганизацияЕГАИС) Экспорт
	
	СписокСтатусов = Новый Массив;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаОтказа);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаПодтверждения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктПодтверждения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктРасхождений);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТТНВходящая.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|		ПО ТТНВходящая.Ссылка = ПриходнаяНакладная.ТоварноТранспортнаяНакладнаяЕГАИС
	|ГДЕ
	|	ТТНВходящая.Проведен
	|	И ТТНВходящая.Грузополучатель = &ОрганизацияЕГАИС
	|	И ТТНВходящая.СтатусОбработки В(&СписокСтатусов)
	|	И ПриходнаяНакладная.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = НеподтвержденныеДокументы.Найти(Выборка.ДокументСсылка, "ДокументСсылка");
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = НеподтвержденныеДокументы.Добавить();
			СтрокаТаблицы.ДокументСсылка = Выборка.ДокументСсылка;
			СтрокаТаблицы.ТипЗначения = Документы.ТТНВходящаяЕГАИС.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается после заполнения таблицы значений документами, требующих оформления.
//
// Параметры:
//  НеоформленныеДокументы - ТаблицаЗначений - таблица с найденными документами,
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - собственная организация по классификатору.
//
Процедура ПриПроверкеНеоформленныхДокументов(НеоформленныеДокументы, ОрганизацияЕГАИС) Экспорт
	
	СписокСтатусов = Новый Массив;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящая.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|		ПО ТТНВходящая.Ссылка = ПриходнаяНакладная.ТоварноТранспортнаяНакладнаяЕГАИС
	|			И (ПриходнаяНакладная.Проведен)
	|ГДЕ
	|	ТТНВходящая.Проведен
	|	И ТТНВходящая.Грузополучатель = &ОрганизацияЕГАИС
	|	И ТТНВходящая.СтатусОбработки В(&СписокСтатусов)
	|	И ПриходнаяНакладная.Ссылка ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = НеоформленныеДокументы.Найти(Выборка.ДокументСсылка, "ДокументСсылка");
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = НеоформленныеДокументы.Добавить();
			СтрокаТаблицы.ДокументСсылка = Выборка.ДокументСсылка;
			СтрокаТаблицы.ТипЗначения = Документы.ТТНВходящаяЕГАИС.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает доступный транспортный модуль по организации ЕГАИС.
//
Функция ТранспортныйМодуль(ОрганизацияЕГАИС)
	
	ИдентификаторФСРАР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияЕГАИС, "Код");
	
	Отбор = Новый Структура("Поле, Значение", "ИдентификаторФСРАР", ИдентификаторФСРАР);
	
	ДоступныеМодули = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	
	Если ДоступныеМодули.Количество() > 0 Тогда
		Возврат ДоступныеМодули[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти