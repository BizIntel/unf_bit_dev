// Добавляет в таблицу значений строки из другой таблицы значений и
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

// Выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//  РаспределяемаяСумма - Число - сумма, которую надо распределить;
//  МассивКоэффициентов - Массив - коэффициенты распределения;
//  Точность - Число - точность округления при распределении. Необязателен.
//
// Возвращаемое значение:
//  Массив - массив размерностью равный массиву коэффициентов, содержит
//           суммы в соответствии с весом коэффициента (из массива коэффициентов).
//           В случае если распределить не удалось (сумма = 0, кол-во коэффициентов = 0,
//           или суммарный вес коэффициентов = 0), тогда возвращается значение Неопределено.
//
Функция РаспределитьСуммуПропорциональноКоэффициентам(Знач РаспределяемаяСумма, Коэффициенты, Знач Точность = 2) Экспорт
	
	Если Коэффициенты.Количество() = 0 Или Не ЗначениеЗаполнено(РаспределяемаяСумма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМаксимальногоКоэффициента = 0;
	МаксимальныйКоэффициент = 0;
	РаспределеннаяСумма = 0;
	СуммаКоэффициентов  = 0;
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Коэффициент = Коэффициенты[Индекс];
		
		АбсолютноеЗначениеКоэффициента = ?(Коэффициент > 0, Коэффициент, -Коэффициент);
		Если МаксимальныйКоэффициент < АбсолютноеЗначениеКоэффициента Тогда
			МаксимальныйКоэффициент = АбсолютноеЗначениеКоэффициента;
			ИндексМаксимальногоКоэффициента = Индекс;
		КонецЕсли;
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив(Коэффициенты.Количество());
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Результат[Индекс] = Окр(РаспределяемаяСумма * Коэффициенты[Индекс] / СуммаКоэффициентов, Точность, 1);
		РаспределеннаяСумма = РаспределеннаяСумма + Результат[Индекс];
	КонецЦикла;
	
	// Погрешности округления отнесем на коэффициент с максимальным весом.
	Если Не РаспределеннаяСумма = РаспределяемаяСумма Тогда
		Результат[ИндексМаксимальногоКоэффициента] = Результат[ИндексМаксимальногоКоэффициента] + РаспределяемаяСумма - РаспределеннаяСумма;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяСумма, Таблица, ИмяКолонки, ИмяКолонкиБазы = "") Экспорт
	
	Если РаспределяемаяСумма <> 0 Тогда
		Если ПустаяСтрока(ИмяКолонкиБазы) Тогда
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонки);
		Иначе
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонкиБазы);
		КонецЕсли;
		МассивНовыхСумм = РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма, МассивСтарыхСумм);
		Если МассивНовыхСумм <> Неопределено Тогда
	 		Таблица.ЗагрузитьКолонку(МассивНовыхСумм, ИмяКолонки);
		КонецЕсли; 
	Иначе
		Таблица.ЗаполнитьЗначения(0, ИмяКолонки);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуСуммДокументаСФВыданный(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства, ВременнаяТаблицаЗапасы)
	
	Реквизиты = СтруктураДополнительныеСвойства.ДляПроведения;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаШапка.Договор КАК Договор,
	|	ВременнаяТаблицаШапка.ДоговорВалютаРасчетов КАК ВалютаРасчетов,
	|	ВременнаяТаблицаШапка.ДоговорРасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	КурсыВалют.Курс КАК КурсВзаиморасчетов,
	|	КурсыВалют.Кратность КАК КратностьВзаиморасчетов,
	|	ВременнаяТаблицаШапка.Курс КАК КурсВДокументе,
	|	ВременнаяТаблицаШапка.Кратность КАК КратностьВДокументе,
	|	&НациональнаяВалюта КАК НациональнаяВалюта,
	|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВременнаяТаблицаШапка.Дата КАК Период
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалют
	|		ПО (КурсыВалют.Валюта = ВременнаяТаблицаШапка.ДоговорВалютаРасчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаЗапасы.ДокументОснование КАК ДокументОснование,
	|	ВременнаяТаблицаЗапасы.СтавкаНДС,
	|	ВременнаяТаблицаЗапасы.СтавкаНДС.Ставка КАК ПроцентНДС,
	|	ВременнаяТаблицаЗапасы.СуммаВал КАК СуммаВзаиморасчетов,
	|	ВременнаяТаблицаЗапасы.СуммаНДСВал КАК СуммаНДСВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.Документ.ВалютаДокумента = &НациональнаяВалюта
	|			ТОГДА ВременнаяТаблицаЗапасы.СуммаНДСВалютаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДСРуб,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.Документ.ВалютаДокумента = &НациональнаяВалюта
	|			ТОГДА ВременнаяТаблицаЗапасы.ВсегоВалютаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРуб,
	|	0 КАК СуммаБУ
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.ДокументОснование КАК ДокументОснование,
	|	ВременнаяТаблицаЗапасы.ДокументОснование.Дата КАК Период,
	|	ВременнаяТаблицаЗапасы.Курс КАК КурсВзаиморасчетов,
	|	ВременнаяТаблицаЗапасы.Кратность КАК КратностьВзаиморасчетов,
	|	ВременнаяТаблицаЗапасы.КурсУпрВал КАК КурсУпрВал,
	|	ВременнаяТаблицаЗапасы.КратностьУпрВал КАК КратностьУпрВал,
	|	ВременнаяТаблицаЗапасы.КурсРегВал КАК КурсРегВал,
	|	ВременнаяТаблицаЗапасы.КратностьРегВал КАК КратностьРегВал,
	|	СУММА(ВременнаяТаблицаЗапасы.СуммаВал) КАК ИтогСуммаВал,
	|	СУММА(ВременнаяТаблицаЗапасы.СуммаРуб) КАК ИтогСуммаРег
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаЗапасы.ДокументОснование,
	|	ВременнаяТаблицаЗапасы.ДокументОснование.Дата,
	|	ВременнаяТаблицаЗапасы.КратностьРегВал,
	|	ВременнаяТаблицаЗапасы.КурсУпрВал,
	|	ВременнаяТаблицаЗапасы.Кратность,
	|	ВременнаяТаблицаЗапасы.КратностьУпрВал,
	|	ВременнаяТаблицаЗапасы.КурсРегВал,
	|	ВременнаяТаблицаЗапасы.Курс
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование";
	
	Если ВременнаяТаблицаЗапасы <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы", ВременнаяТаблицаЗапасы+" КАК ВременнаяТаблицаЗапасы");
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Заполним ТаблицаСуммДокумента
	ТаблицаСуммДокумента = МассивРезультатов[1].Выгрузить();
	
	// Добавим информацию о реквизитах шапки.
	Выборка = МассивРезультатов[0].Выбрать();
	Выборка.Следующий();
	
	Реквизиты.Вставить("Контрагент", Выборка.Контрагент);
	Реквизиты.Вставить("Договор", Выборка.Договор);
	Реквизиты.Вставить("ВалютаРасчетов", Выборка.ВалютаРасчетов);
	Реквизиты.Вставить("РасчетыВУсловныхЕдиницах", Выборка.РасчетыВУсловныхЕдиницах);
	Реквизиты.Вставить("НациональнаяВалюта", Выборка.НациональнаяВалюта);
	Реквизиты.Вставить("КурсВзаиморасчетов", ?(Реквизиты.ВалютаРасчетов = Реквизиты.НациональнаяВалюта, Выборка.КурсВзаиморасчетов, Выборка.КурсВДокументе));
	Реквизиты.Вставить("КратностьВзаиморасчетов", ?(Реквизиты.ВалютаРасчетов = Реквизиты.НациональнаяВалюта, Выборка.КратностьВзаиморасчетов, Выборка.КратностьВДокументе));
	Реквизиты.Вставить("ВалютаДокумента", Выборка.ВалютаДокумента);
	Реквизиты.Вставить("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	
	// Рублевые суммы документов
	Реквизиты.Вставить("НациональнаяВалюта", УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту());
	Реквизиты.Вставить("Контрагент", Реквизиты.Контрагент);
	Реквизиты.Вставить("ВалютаРасчетов", Реквизиты.ВалютаРасчетов);
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаРасчетов <> Реквизиты.НациональнаяВалюта); // И ДокументСсылкаРасходнаяНакладная.ВалютаДокумента <> Реквизиты.НациональнаяВалюта);
	
	ВыборкаДокОснования = МассивРезультатов[2].Выбрать();
	
	Если Реквизиты.РасчетыВВалюте Тогда // Документ оформлен в валюте расчетов
		
		НесколькоОснований = (ВыборкаДокОснования.Количество() > 1);
		Если НесколькоОснований Тогда
			ВремТаблица = ТаблицаСуммДокумента.СкопироватьКолонки();
			ИтоговаяТаблицаСуммДокумента = ТаблицаСуммДокумента.СкопироватьКолонки();
		Иначе
			ВремТаблица = ТаблицаСуммДокумента;
		КонецЕсли;
		
		Пока ВыборкаДокОснования.Следующий() Цикл
			
			// Подготовим и обработаем таблицу по одному документу основанию.
			Если НесколькоОснований Тогда
				Для Каждого ТекущаяСтрока Из ТаблицаСуммДокумента Цикл
					Если ТекущаяСтрока.ДокументОснование = ВыборкаДокОснования.ДокументОснование Тогда
						ВремНоваяСтрока = ВремТаблица.Добавить();
						ЗаполнитьЗначенияСвойств(ВремНоваяСтрока, ТекущаяСтрока);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ИтогСуммаРуб = ?(ВыборкаДокОснования.КратностьВзаиморасчетов = 0, 0,
				Окр(ВыборкаДокОснования.ИтогСуммаВал * ВыборкаДокОснования.КурсВзаиморасчетов / ВыборкаДокОснования.КратностьВзаиморасчетов, 2));
			РаспределитьСуммуПоКолонкеТаблицы(
				ИтогСуммаРуб, ВремТаблица, "СуммаРуб", "СуммаВзаиморасчетов");
				
			Если ВремТаблица.Колонки.Найти("СуммаНДСРуб") <> Неопределено Тогда
				// Сумма НДС в рублях рассчитывается построчно исходя из общей рублевой суммы по этой строке и ставки НДС
				Для каждого СтрокаТаблицы Из ВремТаблица Цикл
					СтрокаТаблицы.СуммаНДСРуб = Окр(СтрокаТаблицы.СуммаРуб * СтрокаТаблицы.ПроцентНДС / (100 + СтрокаТаблицы.ПроцентНДС), 2);
				КонецЦикла;
			КонецЕсли;
			
			// Перенесём данные в итоговую таблицу.
			Если НесколькоОснований Тогда
				Для Каждого ТекущаяСтрока Из ВремТаблица Цикл
					ИтогНоваяСтрока = ИтоговаяТаблицаСуммДокумента.Добавить();
					ЗаполнитьЗначенияСвойств(ИтогНоваяСтрока, ТекущаяСтрока);
				КонецЦикла;
				
				ВремТаблица.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Если НесколькоОснований Тогда
			ТаблицаСуммДокумента = ИтоговаяТаблицаСуммДокумента;
		Иначе
			ТаблицаСуммДокумента = ВремТаблица;
		КонецЕсли;
		
	Иначе // Договор в у.е., документ оформлен в рублях
	// !!! Эта ветка пока не задействована !!!
		
		НесколькоОснований = (ВыборкаДокОснования.Количество() > 1);
		Если НесколькоОснований Тогда
			ВремТаблица = ТаблицаСуммДокумента.СкопироватьКолонки();
			ИтоговаяТаблицаСуммДокумента = ТаблицаСуммДокумента.СкопироватьКолонки();
		Иначе
			ВремТаблица = ТаблицаСуммДокумента;
		КонецЕсли;
		
		Пока ВыборкаДокОснования.Следующий() Цикл
			// Подготовим и обработаем таблицу по одному документу основанию.
			Если НесколькоОснований Тогда
				Для Каждого ТекущаяСтрока Из ТаблицаСуммДокумента Цикл
					Если ТекущаяСтрока.ДокументОснование = ВыборкаДокОснования.ДокументОснование Тогда
						ВремНоваяСтрока = ВремТаблица.Добавить();
						ЗаполнитьЗначенияСвойств(ВремНоваяСтрока, ТекущаяСтрока);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Курс      = ВыборкаДокОснования.КурсВзаиморасчетов;
			Кратность = ВыборкаДокОснования.КратностьВзаиморасчетов;
			
			Если ВыборкаДокОснования.КурсВзаиморасчетов = 1 и ВыборкаДокОснования.КратностьВзаиморасчетов = 1 Тогда
				
				КурсИКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаРасчетов, ВыборкаДокОснования.Период);
				
				Курс      = КурсИКратность.Курс;
				Кратность = КурсИКратность.Кратность
				
			КонецЕсли;
			
			ИтогСуммаВзаиморасчетов = ?(Курс = 0 ИЛИ Кратность = 0, 0,
				Окр(ВыборкаДокОснования.ИтогСуммаРег / (Курс / Кратность), 2));
			РаспределитьСуммуПоКолонкеТаблицы(
				ИтогСуммаВзаиморасчетов, ВремТаблица, "СуммаВзаиморасчетов", "СуммаРуб");
				
			Если ВремТаблица.Колонки.Найти("СуммаНДСВзаиморасчетов") <> Неопределено 
				И ВремТаблица.Колонки.Найти("СуммаНДСРуб") <> Неопределено Тогда
				// Сумма НДС в валюте рассчитывается в целом по документу и распределяется по строкам
				ИтогСуммаНДСВзаиморасчетов = ?(Курс = 0 ИЛИ Кратность = 0, 0,
					Окр(ВремТаблица.Итог("СуммаНДСРуб") / (Курс / Кратность), 2));
				РаспределитьСуммуПоКолонкеТаблицы(
					ИтогСуммаНДСВзаиморасчетов, ВремТаблица, "СуммаНДСВзаиморасчетов", "СуммаНДСРуб");
				КонецЕсли;
			
			// Перенесём данные в итоговую таблицу.
			Если НесколькоОснований Тогда
				Для Каждого ТекущаяСтрока Из ВремТаблица Цикл
					ИтогНоваяСтрока = ИтоговаяТаблицаСуммДокумента.Добавить();
					ЗаполнитьЗначенияСвойств(ИтогНоваяСтрока, ТекущаяСтрока);
				КонецЦикла;
				
				ВремТаблица.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Если НесколькоОснований Тогда
			ТаблицаСуммДокумента = ИтоговаяТаблицаСуммДокумента;
		Иначе
			ТаблицаСуммДокумента = ВремТаблица;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаСуммДокумента Цикл
		ТекущаяСтрока.СуммаБУ = ТекущаяСтрока.СуммаРуб;
	КонецЦикла;
	
	Возврат ТаблицаСуммДокумента;
	
КонецФункции

Функция ПодготовитьТаблицуСуммДокумента(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства, ВременнаяТаблицаЗапасы)
	
	Реквизиты = СтруктураДополнительныеСвойства.ДляПроведения;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаШапка.Договор КАК Договор,
	|	ВременнаяТаблицаШапка.ДоговорВалютаРасчетов КАК ВалютаРасчетов,
	|	ВременнаяТаблицаШапка.ДоговорРасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	КурсыВалют.Курс КАК КурсВзаиморасчетов,
	|	КурсыВалют.Кратность КАК КратностьВзаиморасчетов,
	|	ВременнаяТаблицаШапка.Курс КАК КурсВДокументе,
	|	ВременнаяТаблицаШапка.Кратность КАК КратностьВДокументе,
	|	&НациональнаяВалюта КАК НациональнаяВалюта,
	|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВременнаяТаблицаШапка.Дата КАК Период
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалют
	|		ПО (КурсыВалют.Валюта = ВременнаяТаблицаШапка.ДоговорВалютаРасчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.НомерСтроки,
	|	ВременнаяТаблицаЗапасы.СтавкаНДС,
	|	ВременнаяТаблицаЗапасы.СтавкаНДС.Ставка КАК ПроцентНДС,
	|	ВременнаяТаблицаЗапасы.СуммаВал КАК СуммаВзаиморасчетов,
	|	ВременнаяТаблицаЗапасы.СуммаНДСВал КАК СуммаНДСВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.Документ.ВалютаДокумента = &НациональнаяВалюта
	|			ТОГДА ВременнаяТаблицаЗапасы.СуммаНДСВалютаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДСРуб,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.Документ.ВалютаДокумента = &НациональнаяВалюта
	|			ТОГДА ВременнаяТаблицаЗапасы.ВсегоВалютаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРуб,
	|	0 КАК СуммаБУ
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы";
	
	Если ВременнаяТаблицаЗапасы <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы", ВременнаяТаблицаЗапасы+" КАК ВременнаяТаблицаЗапасы");
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Заполним ТаблицаСуммДокумента
	ТаблицаСуммДокумента = МассивРезультатов[1].Выгрузить();
	
	// Добавим информацию о реквизитах шапки.
	Выборка = МассивРезультатов[0].Выбрать();
	Выборка.Следующий();
	
	Реквизиты.Вставить("Контрагент", Выборка.Контрагент);
	Реквизиты.Вставить("Договор", Выборка.Договор);
	Реквизиты.Вставить("ВалютаРасчетов", Выборка.ВалютаРасчетов);
	Реквизиты.Вставить("РасчетыВУсловныхЕдиницах", Выборка.РасчетыВУсловныхЕдиницах);
	Реквизиты.Вставить("НациональнаяВалюта", Выборка.НациональнаяВалюта);
	Реквизиты.Вставить("КурсВзаиморасчетов", ?(Реквизиты.ВалютаРасчетов = Реквизиты.НациональнаяВалюта, Выборка.КурсВзаиморасчетов, Выборка.КурсВДокументе));
	Реквизиты.Вставить("КратностьВзаиморасчетов", ?(Реквизиты.ВалютаРасчетов = Реквизиты.НациональнаяВалюта, Выборка.КратностьВзаиморасчетов, Выборка.КратностьВДокументе));
	Реквизиты.Вставить("ВалютаДокумента", Выборка.ВалютаДокумента);
	Реквизиты.Вставить("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	
	// Рублевые суммы документов
	Реквизиты.Вставить("НациональнаяВалюта", УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту());
	Реквизиты.Вставить("Контрагент", Реквизиты.Контрагент);
	Реквизиты.Вставить("ВалютаРасчетов", Реквизиты.ВалютаРасчетов);
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаРасчетов <> Реквизиты.НациональнаяВалюта); // И ДокументСсылкаРасходнаяНакладная.ВалютаДокумента <> Реквизиты.НациональнаяВалюта);
	
	Если Реквизиты.РасчетыВВалюте Тогда // Документ оформлен в валюте расчетов
		
		ИтогСуммаРуб = ?(Реквизиты.КратностьВзаиморасчетов = 0, 0,
			Окр(ТаблицаСуммДокумента.Итог("СуммаВзаиморасчетов") * Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов, 2));
		РаспределитьСуммуПоКолонкеТаблицы(
			ИтогСуммаРуб, ТаблицаСуммДокумента, "СуммаРуб", "СуммаВзаиморасчетов");
		
		Если ТаблицаСуммДокумента.Колонки.Найти("СуммаНДСРуб") <> Неопределено Тогда
			// Сумма НДС в рублях рассчитывается построчно исходя из общей рублевой суммы по этой строке и ставки НДС
			Для каждого СтрокаТаблицы Из ТаблицаСуммДокумента Цикл
				СтрокаТаблицы.СуммаНДСРуб = Окр(СтрокаТаблицы.СуммаРуб * СтрокаТаблицы.ПроцентНДС / (100 + СтрокаТаблицы.ПроцентНДС), 2);
			КонецЦикла;
		КонецЕсли;
		
	Иначе // Договор в у.е., документ оформлен в рублях
		
		Курс      = Реквизиты.КурсВзаиморасчетов;
		Кратность = Реквизиты.КратностьВзаиморасчетов;
		
		Если Реквизиты.КурсВзаиморасчетов = 1 и Реквизиты.КратностьВзаиморасчетов = 1 Тогда
			
			КурсИКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаРасчетов, Реквизиты.Период);
			
			Курс      = КурсИКратность.Курс;
			Кратность = КурсИКратность.Кратность
			
		КонецЕсли;
		
		ИтогСуммаВзаиморасчетов = ?(Курс = 0 ИЛИ Кратность = 0, 0,
			Окр(ТаблицаСуммДокумента.Итог("СуммаРуб") / (Курс / Кратность), 2));
		РаспределитьСуммуПоКолонкеТаблицы(
			ИтогСуммаВзаиморасчетов, ТаблицаСуммДокумента, "СуммаВзаиморасчетов", "СуммаРуб");
		
		Если ТаблицаСуммДокумента.Колонки.Найти("СуммаНДСВзаиморасчетов") <> Неопределено 
			И ТаблицаСуммДокумента.Колонки.Найти("СуммаНДСРуб") <> Неопределено Тогда
			// Сумма НДС в валюте рассчитывается в целом по документу и распределяется по строкам
			ИтогСуммаНДСВзаиморасчетов = ?(Курс = 0 ИЛИ Кратность = 0, 0,
				Окр(ТаблицаСуммДокумента.Итог("СуммаНДСРуб") / (Курс / Кратность), 2));
			РаспределитьСуммуПоКолонкеТаблицы(
				ИтогСуммаНДСВзаиморасчетов, ТаблицаСуммДокумента, "СуммаНДСВзаиморасчетов", "СуммаНДСРуб");
		КонецЕсли;
			
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаСуммДокумента Цикл
		ТекущаяСтрока.СуммаБУ = ТекущаяСтрока.СуммаРуб;
	КонецЦикла;
	
	Возврат ТаблицаСуммДокумента;
	
КонецФункции

Функция ПодготовитьТаблицуДокументаРасчетыВВалюте(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства, ВременнаяТаблицаЗапасы = "", ЭтоКорректировка = Ложь) Экспорт

	// Документ может быть оформлен только в двух валютах: национальной и валюте расчетов по договору.
	
	Если ТипЗнч(ДокументСсылкаРасходнаяНакладная) = Тип("ДокументСсылка.СчетФактура") Тогда
		ЭтоСФ = Истина;
		ТаблицаСуммДокумента = ПодготовитьТаблицуСуммДокументаСФВыданный(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства, ВременнаяТаблицаЗапасы);
	Иначе
		ЭтоСФ = Ложь;
		ТаблицаСуммДокумента = ПодготовитьТаблицуСуммДокумента(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства, ВременнаяТаблицаЗапасы);
	КонецЕсли;
	
	// Реквизиты дозаполняются в процедурах ПодготовитьТаблицуСуммДокументаСФВыданный и ПодготовитьТаблицуСуммДокумента.
	Реквизиты = СтруктураДополнительныеСвойства.ДляПроведения;
	Реквизиты.Вставить("ТаблицаСуммДокумента", ТаблицаСуммДокумента);
	
	// Распределим авансы.
	ТаблицаВзаиморасчетов = ПустаяТаблицаВзаиморасчетовЗачетАвансов();
	ОстаткиАвансов = ПолучитьТаблицаПредоплата(СтруктураДополнительныеСвойства, ЭтоСФ, ЭтоКорректировка, ДокументСсылкаРасходнаяНакладная);
	
	Если ЭтоСФ Тогда
		ТаблицаСуммДокументаИтоги = ТаблицаСуммДокумента.Скопировать(, "ДокументОснование, СуммаВзаиморасчетов, СуммаРуб");
		ТаблицаСуммДокументаИтоги.Свернуть("ДокументОснование", "СуммаВзаиморасчетов, СуммаРуб");
	Иначе
		ТаблицаСуммДокументаИтоги = ТаблицаСуммДокумента.Скопировать(, "СуммаВзаиморасчетов, СуммаРуб");
		ТаблицаСуммДокументаИтоги.Свернуть("", "СуммаВзаиморасчетов, СуммаРуб");
	КонецЕсли;
	
	ДобавитьКолонкиВзаиморасчетовДляТаблицыДокумента(ТаблицаСуммДокументаИтоги);
	Для Каждого ТекущаяСтрока Из ТаблицаСуммДокументаИтоги Цикл
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Реквизиты);
	КонецЦикла;
	
	ЗаполнитьТаблицуВзаиморасчетовЗачетАвансов(
		ТаблицаСуммДокументаИтоги, 
		ОстаткиАвансов, 
		Реквизиты, 
		ТаблицаВзаиморасчетов, 
		ОстаткиАвансов,
		ЭтоСФ);

	Возврат ТаблицаВзаиморасчетов;
	
КонецФункции

Функция ПолучитьТаблицаПредоплата(СтруктураДополнительныеСвойства, ЭтоСФ, ЭтоКорректировка, ДокументСсылка) Экспорт
	
	// 1. Если аванс будет зачитываться "под ноль", то рублевая сумма тоже должна стать = 0.
	// 2. Блокировка используемой таблицы остатков должна быть установлена ранее в процедуре "СформироватьТаблицаРасчетыСПокупателями" в модуле менеджера документа.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ГраницаКонтроляИсключая", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("МоментВремениКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
	//Запрос.УстановитьПараметр("ДатаДок", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.Параметры.Вставить("ТипРасчетовАванс", Перечисления.ТипыРасчетов.Аванс);
	Запрос.Параметры.Вставить("Контрагент", ДокументСсылка.Контрагент);
	Запрос.Параметры.Вставить("Договор", ДокументСсылка.Договор);
	Запрос.Параметры.Вставить("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	
	Если НЕ ЭтоСФ Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
		|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
		|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
		|	-РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
		|	-РасчетыСПокупателямиОстатки.СуммаРегОстаток КАК СуммаРегОстаток,
		|	1 КАК Поле1
		|ПОМЕСТИТЬ ВТ_ОстаткиАвансовДанные
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(
		|			&ГраницаКонтроляИсключая,
		|			Организация = &Организация
		|				И ТипРасчетов = &ТипРасчетовАванс
		|				И Договор = &Договор
		|				И Контрагент = &Контрагент
		|				И (Документ, Заказ) В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаПредоплата.Документ,
		|						ВЫБОР
		|							КОГДА ВременнаяТаблицаПредоплата.Заказ = НЕОПРЕДЕЛЕНО
		|								ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|							ИНАЧЕ ВременнаяТаблицаПредоплата.Заказ
		|						КОНЕЦ
		|					ИЗ
		|						ВременнаяТаблицаПредоплата)) КАК РасчетыСПокупателямиОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПокупателями.Договор,
		|	РасчетыСПокупателями.Документ,
		|	РасчетыСПокупателями.Заказ,
		|	РасчетыСПокупателями.СуммаВал,
		|	РасчетыСПокупателями.СуммаРег,
		|	2
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Регистратор = &Ссылка
		|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовАванс
		|	И РасчетыСПокупателями.Организация = &Организация
		|	И РасчетыСПокупателями.Контрагент = &Контрагент
		|	И РасчетыСПокупателями.Договор = &Договор
		|	И (РасчетыСПокупателями.Документ, РасчетыСПокупателями.Заказ) В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаПредоплата.Документ,
		|				ВЫБОР
		|					КОГДА ВременнаяТаблицаПредоплата.Заказ = НЕОПРЕДЕЛЕНО
		|						ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|					ИНАЧЕ ВременнаяТаблицаПредоплата.Заказ
		|				КОНЕЦ
		|			ИЗ
		|				ВременнаяТаблицаПредоплата)
		|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияПриход
		|	И РасчетыСПокупателями.МоментВремени < &МоментВремениКонтроля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиАвансовДанные.Договор КАК Договор,
		|	ВТ_ОстаткиАвансовДанные.Документ КАК Документ,
		|	ВТ_ОстаткиАвансовДанные.Заказ КАК Заказ,
		|	СУММА(ВТ_ОстаткиАвансовДанные.СуммаВалОстаток) КАК СуммаВалОстаток,
		|	СУММА(ВТ_ОстаткиАвансовДанные.СуммаРегОстаток) КАК СуммаРегОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиАвансов
		|ИЗ
		|	ВТ_ОстаткиАвансовДанные КАК ВТ_ОстаткиАвансовДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиАвансовДанные.Договор,
		|	ВТ_ОстаткиАвансовДанные.Документ,
		|	ВТ_ОстаткиАвансовДанные.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаДокумента.Период КАК ДатаДокументаРасчетов,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Договор КАК Договор,
		|	ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ТаблицаДокумента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаДокумента.Документ КАК Документ,
		|	ТаблицаДокумента.ДокументОснование КАК ДокументОснование,
		|	ТаблицаДокумента.Заказ КАК Заказ,
		|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
		|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
		|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаЗачета,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_ОстаткиАвансов.СуммаРегОстаток ЕСТЬ NULL
		|				ТОГДА ТаблицаДокумента.СуммаРубПоКурсуАванса
		|			ИНАЧЕ ВТ_ОстаткиАвансов.СуммаРегОстаток
		|		КОНЕЦ) КАК СуммаРубПоКурсуАванса,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_ОстаткиАвансов.СуммаРегОстаток ЕСТЬ NULL
		|				ТОГДА ТаблицаДокумента.СуммаРубПоКурсуАванса
		|			ИНАЧЕ ВТ_ОстаткиАвансов.СуммаРегОстаток
		|		КОНЕЦ) КАК СуммаБУ,
		|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВзаиморасчетов,
		|	ВТ_ОстаткиАвансов.СуммаРегОстаток КАК СуммаРегОстаток,
		|	ВТ_ОстаткиАвансов.СуммаВалОстаток КАК СуммаВалОстаток,
		|	ТаблицаДокумента.СуммаРубПоКурсуАванса КАК СуммаРубПоКурсуАванса1
		|ИЗ
		|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиАвансов КАК ВТ_ОстаткиАвансов
		|		ПО ТаблицаДокумента.Документ = ВТ_ОстаткиАвансов.Документ
		|			И (ВЫБОР
		|				КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
		|					ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|				ИНАЧЕ ТаблицаДокумента.Заказ
		|			КОНЕЦ = ВТ_ОстаткиАвансов.Заказ)
		|			И ТаблицаДокумента.СуммаВал = ВТ_ОстаткиАвансов.СуммаВалОстаток
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Период,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.Контрагент,
		|	ТаблицаДокумента.Договор,
		|	ТаблицаДокумента.ВалютаРасчетов,
		|	ТаблицаДокумента.РасчетыВУсловныхЕдиницах,
		|	ТаблицаДокумента.Документ,
		|	ТаблицаДокумента.ДокументОснование,
		|	ТаблицаДокумента.Заказ,
		|	ВТ_ОстаткиАвансов.СуммаРегОстаток,
		|	ВТ_ОстаткиАвансов.СуммаВалОстаток,
		|	ТаблицаДокумента.СуммаРубПоКурсуАванса";
		
		Если ЭтоКорректировка Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВременнаяТаблицаПредоплата КАК ТаблицаДокумента", "ВременнаяТаблицаПредоплатаРег КАК ТаблицаДокумента");
		КонецЕсли;
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСПокупателями.Договор КАК Договор,
		|	РасчетыСПокупателями.Документ КАК Документ,
		|	РасчетыСПокупателями.СуммаВал КАК СуммаВалОстаток,
		|	РасчетыСПокупателями.СуммаРег КАК СуммаРегОстаток,
		|	2 КАК Поле1
		|ПОМЕСТИТЬ ВТ_ОстаткиАвансовДанные
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Регистратор В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаПредоплата.ДокументОснование
		|			ИЗ
		|				ВременнаяТаблицаПредоплата)
		|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовАванс
		|	И РасчетыСПокупателями.Организация = &Организация
		|	И РасчетыСПокупателями.Контрагент = &Контрагент
		|	И РасчетыСПокупателями.Договор = &Договор
		|	И РасчетыСПокупателями.Документ В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаПредоплата.Документ
		|			ИЗ
		|				ВременнаяТаблицаПредоплата)
		|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияПриход
		|	И РасчетыСПокупателями.МоментВремени < &МоментВремениКонтроля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиАвансовДанные.Договор КАК Договор,
		|	ВТ_ОстаткиАвансовДанные.Документ КАК Документ,
		|	СУММА(ВТ_ОстаткиАвансовДанные.СуммаВалОстаток) КАК СуммаВалОстаток,
		|	СУММА(ВТ_ОстаткиАвансовДанные.СуммаРегОстаток) КАК СуммаРегОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиАвансов
		|ИЗ
		|	ВТ_ОстаткиАвансовДанные КАК ВТ_ОстаткиАвансовДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиАвансовДанные.Договор,
		|	ВТ_ОстаткиАвансовДанные.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаДокумента.Период КАК ДатаДокументаРасчетов,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Договор КАК Договор,
		|	ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ТаблицаДокумента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаДокумента.Документ КАК Документ,
		|	НЕОПРЕДЕЛЕНО КАК Заказ,
		|	ТаблицаДокумента.ДокументОснование КАК ДокументОснование,
		|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
		|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
		|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаЗачета,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_ОстаткиАвансов.СуммаРегОстаток ЕСТЬ NULL
		|				ТОГДА ТаблицаДокумента.СуммаРубПоКурсуАванса
		|			ИНАЧЕ ВТ_ОстаткиАвансов.СуммаРегОстаток
		|		КОНЕЦ) КАК СуммаРубПоКурсуАванса,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_ОстаткиАвансов.СуммаРегОстаток ЕСТЬ NULL
		|				ТОГДА ТаблицаДокумента.СуммаРубПоКурсуАванса
		|			ИНАЧЕ ВТ_ОстаткиАвансов.СуммаРегОстаток
		|		КОНЕЦ) КАК СуммаБУ,
		|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВзаиморасчетов,
		|	ВТ_ОстаткиАвансов.СуммаРегОстаток КАК СуммаРегОстаток,
		|	ВТ_ОстаткиАвансов.СуммаВалОстаток КАК СуммаВалОстаток,
		|	ТаблицаДокумента.СуммаРубПоКурсуАванса КАК СуммаРубПоКурсуАвансаПоДаннымДокумента
		|ИЗ
		|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиАвансов КАК ВТ_ОстаткиАвансов
		|		ПО ТаблицаДокумента.Документ = ВТ_ОстаткиАвансов.Документ
		|			И ТаблицаДокумента.СуммаВал = ВТ_ОстаткиАвансов.СуммаВалОстаток
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Период,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.Контрагент,
		|	ТаблицаДокумента.Договор,
		|	ТаблицаДокумента.ВалютаРасчетов,
		|	ТаблицаДокумента.РасчетыВУсловныхЕдиницах,
		|	ТаблицаДокумента.Документ,
		|	ТаблицаДокумента.ДокументОснование,
		|	ВТ_ОстаткиАвансов.СуммаРегОстаток,
		|	ВТ_ОстаткиАвансов.СуммаВалОстаток,
		|	ТаблицаДокумента.СуммаРубПоКурсуАванса";
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура ЗаполнитьТаблицуВзаиморасчетовЗачетАвансов(
	ТаблицаДокумента,
	ДокументыАвансов,
	Реквизиты,
	ТаблицаВзаиморасчетов,
	ОстаткиАвансов,
	ЭтоСФ) Экспорт
	
	ВалютаРегламентированногоУчета = Реквизиты.НациональнаяВалюта;

	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл

		НераспределенныйОстаток = СтрокаДокумента.СуммаВзаиморасчетов;

		Если ЭтоСФ Тогда
			ДокументыАвансовДляСтрокиДокумента = ДокументыАвансов.НайтиСтроки(
					Новый Структура("ДокументОснование",
					СтрокаДокумента.ДокументОснование));
		Иначе
			ДокументыАвансовДляСтрокиДокумента = ДокументыАвансов;
		КонецЕсли;
		
		Для каждого СтрокаТаблицыАвансов Из ДокументыАвансовДляСтрокиДокумента Цикл

			НераспределенныйОстатокПоДокументу = СтрокаТаблицыАвансов.СуммаЗачета;
			НераспределенныйОстаток = НераспределенныйОстаток - СтрокаТаблицыАвансов.СуммаЗачета;
			
			ДобавитьСтрокиЗачтенныхАвансов(
				ТаблицаВзаиморасчетов,
				НераспределенныйОстатокПоДокументу,
				СтрокаТаблицыАвансов,
				СтрокаДокумента,
				Реквизиты,
				ЭтоСФ);
			
		КонецЦикла;

		ДобавитьСтрокуЗадолженности(
			ТаблицаВзаиморасчетов,
			НераспределенныйОстаток,
			СтрокаДокумента,
			Реквизиты,
			ЭтоСФ);

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСтрокиЗачтенныхАвансов(ТаблицаВзаиморасчетов, НераспределеннаяСумма, СтрокаОстатка, СтрокаДокумента, Реквизиты, ЭтоСФ)

	Если НераспределеннаяСумма <= 0 Тогда
		Возврат;
	КонецЕсли;

	ЗачитываемыйАванс = Мин(НераспределеннаяСумма, СтрокаОстатка.СуммаВзаиморасчетов);

	Если ЗачитываемыйАванс <= 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();

	Если ЭтоСФ Тогда
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента,
			"Контрагент, Договор, ДокументОснование,
			|ВалютаРасчетов, РасчетыВВалюте, РасчетыВУсловныхЕдиницах");
	Иначе
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента,
			"Контрагент, Договор,
			|ВалютаРасчетов, РасчетыВВалюте, РасчетыВУсловныхЕдиницах");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаОстатка,
		"Документ, ДатаДокументаРасчетов");

	Если ТаблицаВзаиморасчетов.Колонки.Найти("ТипОплаты") <> Неопределено Тогда
		СтрокаВзаиморасчетов.ТипОплаты = СтрокаДокумента.ТипОплаты;
	КонецЕсли;

	СтрокаВзаиморасчетов.ОстатокВзаиморасчетов 		= СтрокаОстатка.СуммаВзаиморасчетов;
	СтрокаВзаиморасчетов.СуммаВзаиморасчетов 		= ЗачитываемыйАванс;

	КоэффициентКурсаАванса = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
		?(СтрокаОстатка.СуммаВзаиморасчетов = 0, 0, СтрокаОстатка.СуммаБУ / СтрокаОстатка.СуммаВзаиморасчетов));

	КоэффициентРуб = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
		?(СтрокаОстатка.СуммаВзаиморасчетов = 0, 0, СтрокаДокумента.СуммаРуб / СтрокаДокумента.СуммаВзаиморасчетов));

	КоэффициентЗачтенногоАванса = СтрокаВзаиморасчетов.СуммаВзаиморасчетов / СтрокаОстатка.СуммаВзаиморасчетов;
	
	СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса = Окр(ЗачитываемыйАванс * КоэффициентКурсаАванса, 2);
	СтрокаВзаиморасчетов.СуммаРуб              = Окр(ЗачитываемыйАванс * КоэффициентРуб, 2);

	НераспределеннаяСумма = НераспределеннаяСумма - ЗачитываемыйАванс;

	СтрокаОстатка.СуммаВзаиморасчетов = СтрокаОстатка.СуммаВзаиморасчетов - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
	СтрокаОстатка.СуммаБУ             = СтрокаОстатка.СуммаБУ - СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;

	СтрокаВзаиморасчетов.Заказ = СтрокаОстатка.Заказ;

КонецПроцедуры

Процедура ДобавитьСтрокуЗадолженности(ТаблицаВзаиморасчетов, НераспределеннаяСумма, СтрокаДокумента, Реквизиты, ЭтоСФ)

	Если НераспределеннаяСумма <= 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();

	Если ЭтоСФ Тогда
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента,
			"Контрагент, Договор, ДокументОснование, ВалютаРасчетов, РасчетыВВалюте, РасчетыВУсловныхЕдиницах");
	Иначе
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента,
			"Контрагент, Договор, ВалютаРасчетов, РасчетыВВалюте, РасчетыВУсловныхЕдиницах");
	КонецЕсли;

	Если ТаблицаВзаиморасчетов.Колонки.Найти("ТипОплаты") <> Неопределено Тогда
		СтрокаВзаиморасчетов.ТипОплаты = СтрокаДокумента.ТипОплаты;
	КонецЕсли;

	СтрокаВзаиморасчетов.Документ              = Реквизиты.Ссылка;
	СтрокаВзаиморасчетов.ДатаДокументаРасчетов = Реквизиты.Период;

	СтрокаВзаиморасчетов.СуммаВзаиморасчетов = НераспределеннаяСумма;

	КоэффициентРуб = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
		?(СтрокаДокумента.СуммаВзаиморасчетов = 0, 0, СтрокаДокумента.СуммаРуб / СтрокаДокумента.СуммаВзаиморасчетов));

	СтрокаВзаиморасчетов.СуммаРуб              = Окр(НераспределеннаяСумма * КоэффициентРуб, 2);
	СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса = СтрокаВзаиморасчетов.СуммаРуб;

КонецПроцедуры

Процедура ДобавитьКолонкиВзаиморасчетовДляТаблицыДокумента(ТаблицаДокумента)
	
	ТаблицаДокумента.Колонки.Добавить("Контрагент",            Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДокумента.Колонки.Добавить("Договор",    Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДокумента.Колонки.Добавить("ВалютаРасчетов",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаДокумента.Колонки.Добавить("РасчетыВВалюте",           Новый ОписаниеТипов("Булево"));
	ТаблицаДокумента.Колонки.Добавить("РасчетыВУсловныхЕдиницах", Новый ОписаниеТипов("Булево"));
	
КонецПроцедуры

Функция ПустаяТаблицаВзаиморасчетовЗачетАвансов() Экспорт

	ПустаяТаблица = Новый ТаблицаЗначений();

	ДобавитьКолонкиВзаиморасчетовДляТаблицыДокумента(ПустаяТаблица);
	
	ПустаяТаблица.Колонки.Добавить("Документ",      Документы.ТипВсеСсылки());
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("ОстатокВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов",   ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб",              ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРубПоКурсуАванса", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("ДокументОснование");
	
	МассивТиповЗаказы = Новый Массив;
	МассивТиповЗаказы.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТиповЗаказы.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	
	ПустаяТаблица.Колонки.Добавить("Заказ", Новый ОписаниеТипов(МассивТиповЗаказы));
	
	Возврат ПустаяТаблица;

КонецФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРублевыеСуммыДокументовВВалюте(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства) Экспорт
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.ВалютаДокумента = СтруктураДополнительныеСвойства.ДляПроведения.НациональнаяВалюта Тогда
		// Если документ оформлен в рублях, то он и на печатную форму должен выводиться с теми суммами, которые в ТЧ указаны.
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРублевыеСуммыДокументовВВалюте", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = СтруктураДополнительныеСвойства.ДляПроведения.ТаблицаСуммДокумента;
	// Стандартные реквизиты
	ТаблицаДвижений.Колонки.Добавить("Период");
	ТаблицаДвижений.Колонки.Добавить("Регистратор");
	// Измерения
	ТаблицаДвижений.Колонки.Добавить("ТабличнаяЧастьДокумента");
	ТаблицаДвижений.Колонки.Добавить("НомерСтрокиДокумента");
	ТаблицаДвижений.Колонки.Добавить("Организация");
	// Ресурсы
	ТаблицаДвижений.Колонки.Добавить("Всего");
	ТаблицаДвижений.Колонки.Добавить("НДС");
	
	Для Каждого ТекущаяСтрока Из ТаблицаДвижений Цикл
		// Стандартные реквизиты
		ТекущаяСтрока.Период = СтруктураДополнительныеСвойства.ДляПроведения.Дата;
		// Измерения
		ТекущаяСтрока.Организация = СтруктураДополнительныеСвойства.ДляПроведения.Организация;
		ТекущаяСтрока.ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.Запасы;
		ТекущаяСтрока.НомерСтрокиДокумента = ТекущаяСтрока.НомерСтроки;
		// Ресурсы
		ТекущаяСтрока.Всего = ТекущаяСтрока.СуммаБУ;
		ТекущаяСтрока.НДС = ТекущаяСтрока.СуммаНДСРуб;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРублевыеСуммыДокументовВВалюте", ТаблицаДвижений);
	
КонецПроцедуры

Процедура РаспределитьАвансыПоТаблицеРеализации(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства, ТаблицаВзаиморасчеты, ИмяТЧ = "Запасы") Экспорт
	
	Если ДокументСсылкаРасходнаяНакладная[ИмяТЧ].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты                    = СтруктураДополнительныеСвойства.ДляПроведения;
	ТаблицаПоступлениеРеализация = СтруктураДополнительныеСвойства.ДляПроведения.ТаблицаСуммДокумента;
	
	Если ТаблицаВзаиморасчеты = Неопределено
		ИЛИ ТаблицаВзаиморасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭтоСФ = ТипЗнч(ДокументСсылкаРасходнаяНакладная) = Тип("ДокументСсылка.СчетФактура");
	
	Период          = Реквизиты.Дата;
	НациональнаяВалюта = Реквизиты.НациональнаяВалюта;
	
	Если ЭтоСФ Тогда
		ТаблицаДоговоров = ТаблицаВзаиморасчеты.Скопировать(, "ДокументОснование, Договор, ВалютаРасчетов, РасчетыВУсловныхЕдиницах");
		ТаблицаДоговоров.Свернуть("ДокументОснование, Договор, ВалютаРасчетов, РасчетыВУсловныхЕдиницах");
		ТаблицаВзаиморасчеты.Индексы.Добавить("ДокументОснование");
	Иначе
		ТаблицаДоговоров = ТаблицаВзаиморасчеты.Скопировать(, "Договор, ВалютаРасчетов, РасчетыВУсловныхЕдиницах");
		ТаблицаДоговоров.Свернуть("Договор, ВалютаРасчетов, РасчетыВУсловныхЕдиницах");
	КонецЕсли;
	ТаблицаВзаиморасчеты.Индексы.Добавить("Договор");
	
	ТаблицаРезультат = ТаблицаПоступлениеРеализация.СкопироватьКолонки();
	
	Для каждого СтрокаДоговора Из ТаблицаДоговоров Цикл
		
		ВалютаРасчетов     = СтрокаДоговора.ВалютаРасчетов;
		РасчетыВУсловныхЕдиницах = СтрокаДоговора.РасчетыВУсловныхЕдиницах;
		
		Отбор = Новый Структура("Договор", СтрокаДоговора.Договор);
		Если ЭтоСФ Тогда
			Отбор.Вставить("ДокументОснование", СтрокаДоговора.ДокументОснование);
		КонецЕсли;
		ТаблицаВзаиморасчетыПоДоговору = ТаблицаВзаиморасчеты.Скопировать(Отбор);
		
		СуммаКорректировки = ТаблицаВзаиморасчетыПоДоговору.Итог("СуммаРубПоКурсуАванса") 
			- ТаблицаВзаиморасчетыПоДоговору.Итог("СуммаРуб");
		
		Если ТаблицаПоступлениеРеализация.Колонки.Найти("Договор") = Неопределено Тогда
			Если ЭтоСФ Тогда
				Отбор = Новый Структура("ДокументОснование", СтрокаДоговора.ДокументОснование);
				ТаблицаРезультатПоДоговору = ТаблицаПоступлениеРеализация.Скопировать(Отбор);
			Иначе
				ТаблицаРезультатПоДоговору = ТаблицаПоступлениеРеализация.Скопировать();
			КонецЕсли;
		Иначе
			ТаблицаРезультатПоДоговору = ТаблицаПоступлениеРеализация.Скопировать(Отбор);
		КонецЕсли;
		
		Если ВалютаРасчетов = НациональнаяВалюта 
			ИЛИ СуммаКорректировки = 0 Тогда
			
			// Результат корректировки по договору добавляем в общую таблицу.
			ЗагрузитьВТаблицуЗначений(ТаблицаРезультатПоДоговору, ТаблицаРезультат);
			
			Продолжить;
		КонецЕсли;
		
		// БУ - корректируются значения колонки СуммаБУ.
		СуммаРуб = ТаблицаРезультатПоДоговору.Итог("СуммаРуб");
		РублевыеСуммыДокументов.РаспределитьСуммуПоКолонкеТаблицы(
			СуммаРуб + СуммаКорректировки,
			ТаблицаРезультатПоДоговору,
			"СуммаБУ",
			"СуммаРуб");
		
		// НДС
		НДСПоКурсуАвансов = РасчетыВУсловныхЕдиницах
			// Нужно проверить, для каких видов операций нужно выполнять действия с НДС, а для каких не нужно.
			// И НЕ (БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяРеализациейОтгруженныхТоваров(Реквизиты.Регистратор)
			// И УчетнаяПолитика.НачислятьНДСПоОтгрузке(Реквизиты.Организация, Реквизиты.Период))
			;
		
		Если НДСПоКурсуАвансов Тогда // Корректируются значения колонки СуммаНДСРуб.
			
			//ТолькоПоКурсуАванса = ТаблицаВзаиморасчетыПоДоговору.Итог("ОстатокВзаиморасчетов") 
			//	>= ТаблицаВзаиморасчетыПоДоговору.Итог("СуммаВзаиморасчетов");
			ТолькоПоКурсуАванса = Истина;
			
			//Если НЕ ТолькоПоКурсуАванса Тогда
			//	СуммаНДСРуб           = ТаблицаРезультатПоДоговору.Итог("СуммаНДСРуб");
			//	СуммаКорректировкиНДС = Окр(СуммаКорректировки * СуммаНДСРуб / СуммаРуб, 2);
			//	РублевыеСуммыДокументов.РаспределитьСуммуПоКолонкеТаблицы(
			//		СуммаНДСРуб + СуммаКорректировкиНДС,
			//		ТаблицаРезультатПоДоговору,
			//		"СуммаНДСРуб");
			//КонецЕсли;
			
			Для Каждого СтрокаТаблицыПоДоговору Из ТаблицаРезультатПоДоговору Цикл
				Если ТолькоПоКурсуАванса Тогда
					ПроцентНДС = СтрокаТаблицыПоДоговору.ПроцентНДС;
					СтрокаТаблицыПоДоговору.СуммаНДСРуб = Окр(СтрокаТаблицыПоДоговору.СуммаБУ * ПроцентНДС / (100 + ПроцентНДС), 2);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Результат корректировки по договору добавляем в общую таблицу.
		ЗагрузитьВТаблицуЗначений(ТаблицаРезультатПоДоговору, ТаблицаРезультат);
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ТаблицаСуммДокумента", ТаблицаРезультат);
	
КонецПроцедуры

Процедура ДобавитьДвиженияВТаблицуРасчетов(ТаблицаРасчетыРуб, ТаблицаРасчеты, ДокументСсылка, СтруктураДополнительныеСвойства, ЭтоОплата, ЭтоКорректировка = Ложь) Экспорт
	
	ТаблицаРасчеты.Колонки.Добавить("СуммаРег", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	
	Для Каждого ТекущаяСтрока Из ТаблицаРасчетыРуб Цикл // ТЧ РасшифровкаПлатежа или ТаблицаСуммДокумента
		
		Если ТекущаяСтрока.Документ = ДокументСсылка Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоОплата И ТекущаяСтрока.Договор.ВалютаРасчетов = Константы.НациональнаяВалюта.Получить() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоКорректировка Тогда
			СуммаРегКорректировка = ?(ТекущаяСтрока.ЕстьВДокументеРеализации, ТекущаяСтрока.СуммаРасчетов - ТекущаяСтрока.СуммаРасчетовДоИзменения, ТекущаяСтрока.СуммаРасчетов) * ТекущаяСтрока.Курс / ТекущаяСтрока.Кратность;
			Если СуммаРегКорректировка = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НовоеДвижение = ТаблицаРасчеты.Добавить();
		
		ЗаполнитьЗначенияСвойств(НовоеДвижение, ТекущаяСтрока);
		
		// Стандартные реквизиты
		НовоеДвижение.Период = СтруктураДополнительныеСвойства.ДляПроведения.Дата;
		Если ЭтоОплата Тогда
			НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Иначе
			НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
		КонецЕсли;
		// Измерения
		НовоеДвижение.Организация = СтруктураДополнительныеСвойства.ДляПроведения.Организация;
		НовоеДвижение.ТипРасчетов = Перечисления.ТипыРасчетов.Аванс;
		НовоеДвижение.Контрагент = ДокументСсылка.Контрагент;
		Если ЭтоОплата Тогда
			НовоеДвижение.Документ = ДокументСсылка;
		КонецЕсли;
		Если ЭтоКорректировка Тогда
			НовоеДвижение.Договор = ДокументСсылка.Договор;
		КонецЕсли;
		// Ресурсы
		Если ЭтоОплата Тогда
			Если ДокументСсылка.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить() Тогда
				НовоеДвижение.СуммаРег = ТекущаяСтрока.СуммаПлатежа;
			Иначе
				НовоеДвижение.СуммаРег = ТекущаяСтрока.СуммаРасчетов * ТекущаяСтрока.Курс / ТекущаяСтрока.Кратность;
			КонецЕсли;
		ИначеЕсли ЭтоКорректировка Тогда
			НовоеДвижение.СуммаРег = СуммаРегКорректировка;
		Иначе
			НовоеДвижение.СуммаРег = ТекущаяСтрока.СуммаРубПоКурсуАванса;
		КонецЕсли;
		// Реквизиты
		НовоеДвижение.СодержаниеПроводки = НСтр("ru = 'Рублевые суммы документов'");
		
		Если НЕ ЗначениеЗаполнено(НовоеДвижение.Заказ) Тогда
			НовоеДвижение.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры