
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Получение обновлений программы".
// ОбщийМодуль.ПолучениеОбновленийПрограммыКлиентСервер.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция НовыйНастройкиАвтоматическогоОбновления() Экспорт
	
	Результат = Новый Структура;
	// 1 - При запуске программы, 2 - по расписанию, 0 - не проверять автоматически.
	Результат.Вставить("РежимАвтоматическойПроверкиНаличияОбновленийПрограммы", 1);
	Результат.Вставить("Расписание", Неопределено); // Расписание не настроено
	Результат.Вставить("ДатаПоследнейПроверки", '00010101');
	Результат.Вставить("КаталогДистрибутивовПлатформы", Неопределено); // Каталог по умолчанию
	Результат.Вставить("РежимУстановки", 0); // По умолчанию - "тихий" режим установки
	
	Возврат Результат;
	
КонецФункции

Функция ТекущаяВерсияПлатформы1СПредприятие() Экспорт
	
	СистИнфо = Новый СистемнаяИнформация;
	Возврат СистИнфо.ВерсияПриложения;
	
КонецФункции

Функция КаталогФайлаИзПолногоИмени(ПолноеИмяФайла)
	
	СтрДл = СтрДлина(ПолноеИмяФайла);
	Для Итератор = 0 По СтрДл - 1 Цикл
		ИндексТекСимвола = СтрДл - Итератор;
		ТекСимвол = Сред(ПолноеИмяФайла, ИндексТекСимвола, 1);
		Если ТекСимвол = "\" Или ТекСимвол = "/" Тогда
			Возврат Лев(ПолноеИмяФайла, ИндексТекСимвола);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ЭтоКодВозвратаОграниченияСистемныхПолитик(КодВозврата) Экспорт
	
	Возврат (КодВозврата = 1625 Или КодВозврата = 1643 Или КодВозврата = 1644);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интеграция подсистем.

Функция ВстроенаПодсистемаТекущиеДела() Экспорт
	
	#Если Клиент Тогда
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела");
	#Иначе
	Возврат ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела");
	#КонецЕсли
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс сервиса автоматического обновления.

#Если Не ВебКлиент Тогда

// Возвращает информацию о доступном обновлении конфигурации и платформы.
//
Функция ИнформацияОДоступномОбновлении(
	ИмяТекущейПрограммы,
	ВерсияТекущейПрограммы,
	ИмяНовойПрограммы,
	НомерРедакцииНовойПрограммы,
	СценарийОбновления,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	НастройкиСоединения    = Неопределено;
	ПараметрыКлиента       = Неопределено;
	НастройкиПроксиСервера = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("НастройкиСоединения") Тогда
			НастройкиСоединения = ДополнительныеПараметры.НастройкиСоединения;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ПараметрыКлиента") Тогда
			ПараметрыКлиента = ДополнительныеПараметры.ПараметрыКлиента;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("НастройкиПроксиСервера") Тогда
			НастройкиПроксиСервера = ДополнительныеПараметры.НастройкиПроксиСервера;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиПроксиСервера <> Неопределено Тогда
		НастройкиПрокси = НастройкиПроксиСервера.НастройкиПрокси;
	Иначе
		НастройкиПрокси = Неопределено;
	КонецЕсли;
	
	ДополнительныеПараметрыВызовОперации = Новый Структура;
	ДополнительныеПараметрыВызовОперации.Вставить("НастройкиСоединения"   , НастройкиСоединения);
	ДополнительныеПараметрыВызовОперации.Вставить("ПараметрыКлиента"      , ПараметрыКлиента);
	ДополнительныеПараметрыВызовОперации.Вставить("НастройкиПроксиСервера", НастройкиПрокси);
	Результат = ИнформацияОДоступномОбновленииВызовОперации(
		ИмяТекущейПрограммы,
		ВерсияТекущейПрограммы,
		ИмяНовойПрограммы,
		НомерРедакцииНовойПрограммы,
		СценарийОбновления,
		ДополнительныеПараметрыВызовОперации);
	
	Если СценарийОбновления = "РабочееОбновление" Тогда
		ПолучениеОбновленийПрограммыВызовСервера.СохранитьИнформациюОДоступномОбновленииВНастройках(
			Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает информацию о файлах обновления для получения файлов.
//
Функция ОписаниеФайловОбновлений(
	ОбновлениеКонфигурации,
	ОбновлениеПлатформы,
	Логин,
	Пароль,
	НастройкиСоединения = Неопределено,
	ПараметрыКлиента = Неопределено,
	НастройкиПроксиСервера = Неопределено) Экспорт
	
	Если НастройкиПроксиСервера <> Неопределено Тогда
		НастройкиПрокси = НастройкиПроксиСервера.НастройкиПрокси;
	Иначе
		НастройкиПрокси = Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеФайловОбновленийВызовОперации(
		ОбновлениеКонфигурации,
		ОбновлениеПлатформы,
		Логин,
		Пароль,
		НастройкиСоединения,
		ПараметрыКлиента,
		НастройкиПрокси);
	
КонецФункции

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Вызов операций сервиса автоматического обновления. Общего назначения.

#Если Не ВебКлиент Тогда

Функция ХостСервисаОбновлений(Домен)
	
	Если Домен = 0 Тогда
		Возврат "update-api.1c.ru";
	Иначе
		Возврат "update-api.1c.eu";
	КонецЕсли;
	
КонецФункции

Функция URLОперацииСервисаОбновлений(Операция, Домен)
	
	Возврат "https://"
		+ ХостСервисаОбновлений(Домен)
		+ "/update-platform/programs/update/"
		+ Операция;
	
КонецФункции

Функция ИнформацияОДоступномОбновленииВызовОперации(
	ИмяТекущейПрограммы,
	ВерсияТекущейПрограммы,
	ИмяНовойПрограммы,
	НомерРедакцииНовойПрограммы,
	СценарийОбновления,
	ДополнительныеПараметры)
	
	НастройкиСоединения    = ДополнительныеПараметры.НастройкиСоединения;
	ПараметрыКлиента       = ДополнительныеПараметры.ПараметрыКлиента;
	НастройкиПроксиСервера = ДополнительныеПараметры.НастройкиПроксиСервера;
	
	Если НастройкиСоединения = Неопределено Тогда
		НастройкиСоединения = ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОшибки"         , "");
	Результат.Вставить("Сообщение"         , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("ДоступноОбновление", Ложь);
	
	КомпонентОбновлениеКонфигурации = НовыйИнформацияОДоступномОбновленииКонфигурации();
	ОбновлениеПлатформы             = НовыйИнформацияОДоступномОбновленииПлатформы();
	Результат.Вставить("Конфигурация", КомпонентОбновлениеКонфигурации);
	Результат.Вставить("Платформа"   , ОбновлениеПлатформы);
	
	Если ИмяТекущейПрограммы = "Unknown" Тогда
		Результат.ИмяОшибки = "ConnectError";
		Результат.Сообщение = НСтр("ru = 'Неверные параметры подключения к сервису.'");
		Результат.ИнформацияОбОшибке =
			НСтр("ru = 'Не удалось получить информацию о доступном обновлении.
				|Не определено имя программы в методе ПриОпределенииИмениПрограммы() общего модуля ИнтернетПоддержкаПользователейПереопределяемый.'");
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		Возврат Результат;
	КонецЕсли;
	
	// Проверка доступности сервиса.
	URLОперацииPing = URLОперацииСервисаОбновлений("ping", НастройкиСоединения.ДоменРасположенияСерверовИПП);
	РезультатПроверки =
		ИнтернетПоддержкаПользователейКлиентСервер.ПроверитьURLДоступен(
		URLОперацииPing,
		НастройкиПроксиСервера);
	
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		Результат.ИмяОшибки = РезультатПроверки.ИмяОшибки;
		Результат.Сообщение = РезультатПроверки.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о доступном обновлении.
				|Не удалось проверить доступность сервиса автоматического обновления программы: %1.
				|Причина:
				|%2'"),
			URLОперацииPing,
			РезультатПроверки.ИнформацияОбОшибке);
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		Возврат Результат;
	КонецЕсли;
	
	
	// Вызов операции сервиса.
	URLОперации = URLОперацииСервисаОбновлений("info", НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ПараметрыЗапросаJSON = InfoRequestJSON(
		ИмяТекущейПрограммы,
		ВерсияТекущейПрограммы,
		ИмяНовойПрограммы,
		НомерРедакцииНовойПрограммы,
		СценарийОбновления,
		ПолучениеОбновленийПрограммыВызовСервера.ДополнительныеПараметрыЗапросаКСервисуОбновлений(ПараметрыКлиента));
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("Таймаут"                 , НастройкиСоединения.ТаймаутПодключения);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , НастройкиПроксиСервера);
	
	РезультатОтправки = ИнтернетПоддержкаПользователейКлиентСервер.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении информации о доступном обновлении.
				|%1'"),
			РезультатОтправки.ИнформацияОбОшибке);
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = РезультатОтправки.КодОшибки;
		Результат.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о доступном обновлении.
				|%1'"),
			РезультатОтправки.СообщениеОбОшибке);
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Обработка ответа.
	Попытка
		ЗаполнитьИнформациюОбОбновленииИзInfoResonseИзJSON(Результат, РезультатОтправки.Содержимое);
	Исключение
		
		ИнфОшибка = ИнформацияОбОшибке();
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить наличие обновлений программы.
				|Ошибка при обработке ответа сервиса.
				|Некорректный ответ сервиса.
				|%1
				|Тело ответа: %2'"),
			ПодробноеПредставлениеОшибки(ИнфОшибка),
			Лев(РезультатОтправки.Содержимое, 1024));
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = "НекорректныйОтветСервиса";
		Результат.Сообщение =
			НСтр("ru = 'Не удалось проверить наличие обновлений программы.
				|Некорректный ответ сервиса.'");
		
		Возврат Результат;
		
	КонецПопытки;
	
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить наличие обновлений программы.
				|
				|Сервис сообщил об ошибке.
				|
				|Ответ сервиса: %1'"),
			Лев(РезультатОтправки.Содержимое, 1024)));
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получена информация о доступном обновлении.
				|%1'"),
			РезультатОтправки.Содержимое));
	
	КомпонентОбновлениеКонфигурации.ДоступноОбновление =
		Не ПустаяСтрока(КомпонентОбновлениеКонфигурации.Версия);
	
	// Уровень обязательности установки платформы:
	// 0 - обязательно;
	// 1 - рекомендуется;
	// 2 - доступна.
	Если Не ПустаяСтрока(ОбновлениеПлатформы.Версия) Тогда
		
		ТекВерсияПлатформы = ТекущаяВерсияПлатформы1СПредприятие();
		ОбновлениеПлатформы.ДоступноОбновление =
			(ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
				ТекВерсияПлатформы,
				ОбновлениеПлатформы.Версия) < 0);
		
		Если Не ПустаяСтрока(КомпонентОбновлениеКонфигурации.Версия)
			И Не ПустаяСтрока(КомпонентОбновлениеКонфигурации.МинимальнаяВерсияПлатформы) Тогда
			
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
				ТекВерсияПлатформы,
				КомпонентОбновлениеКонфигурации.МинимальнаяВерсияПлатформы) < 0 Тогда
				ОбновлениеПлатформы.ОбязательностьУстановки = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбновлениеПлатформы.ОбязательностьУстановки > 0 Тогда
			// Если выше не было установлено 0 - обязательно.
			
			Если ОбновлениеПлатформы.РекомендуетсяПереход Тогда
				ОбновлениеПлатформы.ОбязательностьУстановки = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ДоступноОбновление = (КомпонентОбновлениеКонфигурации.ДоступноОбновление
		Или ОбновлениеПлатформы.ДоступноОбновление);
	Результат.Вставить("Сценарий", СценарийОбновления);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеФайловОбновленийВызовОперации(
	ПараметрОбновлениеКонфигурации,
	ОбновлениеПлатформы,
	Логин,
	Пароль,
	НастройкиСоединения,
	ПараметрыКлиента,
	НастройкиПроксиСервера)
	
	Если НастройкиСоединения = Неопределено Тогда
		НастройкиСоединения = ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОшибки"             , "");
	Результат.Вставить("Сообщение"             , "");
	Результат.Вставить("ИнформацияОбОшибке"    , "");
	Результат.Вставить("ОбновленияКонфигурации", Новый Массив);
	Результат.Вставить("URLФайлаОбновленияПлатформы", "");
	Результат.Вставить("РазмерОбновленияПлатформы"  , 0);
	
	Если ОбновлениеПлатформы <> Неопределено Тогда
		Результат.Вставить("ВерсияПлатформы"          , ОбновлениеПлатформы.Версия);
		Результат.Вставить("РазмерОбновленияПлатформы", ОбновлениеПлатформы.РазмерОбновления);
	Иначе
		Результат.Вставить("ВерсияПлатформы"          , "");
		Результат.Вставить("РазмерОбновленияПлатформы", 0);
	КонецЕсли;
	
	// Проверка доступности сервиса.
	URLОперацииPing = URLОперацииСервисаОбновлений(
		"ping",
		НастройкиСоединения.ДоменРасположенияСерверовИПП);
	РезультатПроверки =
		ИнтернетПоддержкаПользователейКлиентСервер.ПроверитьURLДоступен(
			URLОперацииPing,
			НастройкиПроксиСервера);
	
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		Результат.ИмяОшибки = РезультатПроверки.ИмяОшибки;
		Результат.Сообщение = РезультатПроверки.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о файлах обновления.
				|Не удалось проверить доступность сервиса автоматического обновления программы: %1.
				|Причина:
				|%2'"),
			URLОперацииPing,
			РезультатПроверки.ИнформацияОбОшибке);
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		Возврат Результат;
	КонецЕсли;
	
	// Вызов операции сервиса.
	URLОперации = URLОперацииСервисаОбновлений("", НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ПараметрыЗапросаJSON = UpdateRequestJSON(
		ПараметрОбновлениеКонфигурации,
		ОбновлениеПлатформы,
		Логин,
		Пароль,
		ПолучениеОбновленийПрограммыВызовСервера.ДополнительныеПараметрыЗапросаКСервисуОбновлений(ПараметрыКлиента));
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("Таймаут"                 , НастройкиСоединения.ТаймаутПодключения);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , НастройкиПроксиСервера);
	
	РезультатОтправки = ИнтернетПоддержкаПользователейКлиентСервер.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении информации о файлах обновления.
				|%1'"),
			РезультатОтправки.ИнформацияОбОшибке);
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = РезультатОтправки.КодОшибки;
		Результат.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о файлах обновления.
				|%1'"),
			РезультатОтправки.СообщениеОбОшибке);
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Обработка ответа.
	Попытка
		ЗаполнитьИнформациюОФайлахОбновленияИзUpdateResonseJSON(Результат, РезультатОтправки.Содержимое);
	Исключение
		
		ИнфОшибка = ИнформацияОбОшибке();
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию об обновлении программы.
				|Ошибка при обработке ответа сервиса.
				|Некорректный ответ сервиса.
				|%1
				|Тело ответа: %2'"),
			ПодробноеПредставлениеОшибки(ИнфОшибка),
			Лев(РезультатОтправки.Содержимое, 1024));
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = "НекорректныйОтветСервиса";
		Результат.Сообщение =
			НСтр("ru = 'Не удалось получить информацию об обновлении программы.
				|Некорректный ответ сервиса.'");
		
		Возврат Результат;
		
	КонецПопытки;
	
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию об обновлении программы.
				|
				|Сервис сообщил об ошибке.
				|
				|Ответ сервиса: %1'"),
			Лев(РезультатОтправки.Содержимое, 1024)));
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получена информация о файлах обновления.
				|%1'"),
			РезультатОтправки.Содержимое));
	
	// Проверка возвращенных данных.
	Если ПараметрОбновлениеКонфигурации <> Неопределено Тогда
		Если ПараметрОбновлениеКонфигурации.ФайлыДляЗагрузки.Количество() <> Результат.ОбновленияКонфигурации.Количество() Тогда
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возвращена неполная информация об обновлении конфигурации.
					|Не совпадает количество запрошенных и возвращенных файлов (%1 и %2).'"),
				ПараметрОбновлениеКонфигурации.ФайлыДляЗагрузки.Количество(),
				Результат.ОбновленияКонфигурации.Количество());
			ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				Результат.ИнформацияОбОшибке);
			
			Результат.ИмяОшибки = "НекорректныйОтветСервиса";
			Результат.Сообщение =
				НСтр("ru = 'Не удалось получить информацию об обновлении программы.
					|Некорректный ответ сервиса.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИнформацияОДоступномОбновленииКонфигурации()
	
	Результат = Новый Структура;
	Результат.Вставить("Версия"                    , "");
	Результат.Вставить("МинимальнаяВерсияПлатформы", "");
	Результат.Вставить("ФайлыДляЗагрузки"          , Новый Массив);
	Результат.Вставить("РазмерОбновления"          , 0);
	Результат.Вставить("URLНовоеВВерсии"           , "");
	Результат.Вставить("URLПорядокОбновления"      , "");
	Результат.Вставить("ИдентификаторВерсии"       , "");
	Результат.Вставить("ДоступноОбновление"        , Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИнформацияОДоступномОбновленииПлатформы()
	
	Результат = Новый Структура;
	Результат.Вставить("Версия"                 , "");
	Результат.Вставить("ИдентификаторФайла"     , "");
	Результат.Вставить("РазмерОбновления"       , 0);
	Результат.Вставить("URLОсобенностиПерехода" , "");
	Результат.Вставить("URLСтраницыПлатформы"   , "");
	Результат.Вставить("РекомендуетсяПереход"   , Ложь);
	Результат.Вставить("ДоступноОбновление"     , Ложь);
	Результат.Вставить("ОбязательностьУстановки", 2);
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Вызов операций сервиса автоматического обновления. Обработка объектов JSON.

#Если Не ВебКлиент Тогда

Функция InfoRequestJSON(
	ИмяТекущейПрограммы,
	ВерсияТекущейПрограммы,
	ИмяНовойПрограммы,
	НомерРедакцииНовойПрограммы,
	СценарийОбновления,
	ДопПараметрыЗапроса)
	
	// {
	//  programName: String,
	//  versionNumber: String,
	//  platformVersion: String,
	//  programNewName: String,
	//  redactionNumber: String,
	//  updateType: NewConfigurationAndOrPlatform / NewProgramOrRedaction / NewPlatform,
	//  additionalParameters: [
	//    {
	//      key: String,
	//      value: String
	//    }
	//  ]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programName");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ИмяТекущейПрограммы));
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("versionNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ВерсияТекущейПрограммы);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("platformVersion");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ТекущаяВерсияПлатформы1СПредприятие());
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNewName");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяНовойПрограммы);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("redactionNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(НомерРедакцииНовойПрограммы);
	
	Если СценарийОбновления = "РабочееОбновление" Тогда
		ИмяСценарияВСервисе = "NewConfigurationAndOrPlatform";
	ИначеЕсли СценарийОбновления = "ПереходНаДругуюПрограммуИлиРедакцию" Тогда
		ИмяСценарияВСервисе = "NewProgramOrRedaction";
	Иначе
		ИмяСценарияВСервисе = "NewPlatform";
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("updateType");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяСценарияВСервисе);
	
	ЗаписатьДополнительныеПараметрыЗапроса(ДопПараметрыЗапроса, ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Функция UpdateRequestJSON(
	ОбновлениеКонф,
	ОбновлениеПл,
	Логин,
	Пароль,
	ДопПараметрыЗапроса)
	
	//{
	//  upgradeSequence: [String],
	//  programVersionUin: String,
	//  platformDistributionUin: String
	//  login: String,
	//  password: String,
	//  additionalParameters: [
	//    {
	//      key: String,
	//      value: StringprogramVersionUin;
	//    }
	//  ]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("upgradeSequence");
	Если ОбновлениеКонф = Неопределено Тогда
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Неопределено);
	Иначе
		ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
		Для каждого ТекИд Из ОбновлениеКонф.ФайлыДляЗагрузки Цикл
			ЗаписьДанныхСообщения.ЗаписатьЗначение(ТекИд);
		КонецЦикла;
		ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programVersionUin");
	Если ОбновлениеКонф = Неопределено Тогда
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Неопределено);
	Иначе
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ОбновлениеКонф.ИдентификаторВерсии);
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("platformDistributionUin");
	Если ОбновлениеПл = Неопределено Тогда
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Неопределено);
	Иначе
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ОбновлениеПл.ИдентификаторФайла);
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);
	
	ЗаписатьДополнительныеПараметрыЗапроса(ДопПараметрыЗапроса, ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Функция ЗначениеСвойстваJSON(ЧтениеОтвета, ЗначениеПоУмолчанию = Неопределено)
	
	ЧтениеОтвета.Прочитать();
	Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
		Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Число
		Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
		Возврат ЧтениеОтвета.ТекущееЗначение;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Процедура ЗаполнитьИнформациюОбОбновленииКонфигурацииИзJSON(Результат, ЧтениеОтвета)
	
	ОбновлениеКомКонф = Результат.Конфигурация;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			
			Возврат;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "configurationVersion" Тогда
				ОбновлениеКомКонф.Версия = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "size" Тогда
				ОбновлениеКомКонф.РазмерОбновления = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ИмяСвойства = "platformVersion" Тогда
				ОбновлениеКомКонф.МинимальнаяВерсияПлатформы = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "updateInfoUrl" Тогда
				ОбновлениеКомКонф.URLНовоеВВерсии = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "howToUpdateInfoUrl" Тогда
				ОбновлениеКомКонф.URLПорядокОбновления = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "programVersionUin" Тогда
				ОбновлениеКомКонф.ИдентификаторВерсии = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "upgradeSequence" Тогда
				
				ЧтениеОтвета.Прочитать();
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
					Пока ЧтениеОтвета.Прочитать() Цикл
						Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
							Прервать;
						ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
							ОбновлениеКомКонф.ФайлыДляЗагрузки.Добавить(ЧтениеОтвета.ТекущееЗначение);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбОбновленииПлатформыИзJSON(Результат, ЧтениеОтвета)
	
	ОбновлениеКомПл = Результат.Платформа;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			
			Возврат;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "platformVersion" Тогда
				ОбновлениеКомПл.Версия = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "transitionInfoUrl" Тогда
				ОбновлениеКомПл.URLОсобенностиПерехода = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "releaseUrl" Тогда
				ОбновлениеКомПл.URLСтраницыПлатформы = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "distributionUin" Тогда
				ОбновлениеКомПл.ИдентификаторФайла = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "size" Тогда
				ОбновлениеКомПл.РазмерОбновления = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ИмяСвойства = "recommended" Тогда
				ОбновлениеКомПл.РекомендуетсяПереход = ЗначениеСвойстваJSON(ЧтениеОтвета, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбОбновленииИзInfoResonseИзJSON(Результат, ТелоJSON)
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "errorName" Тогда
				
				Результат.ИмяОшибки = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
				
			ИначеЕсли ИмяСвойства = "errorMessage" Тогда
				
				Результат.ИнформацияОбОшибке = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
				Результат.Сообщение          = Результат.ИнформацияОбОшибке;
				
			ИначеЕсли ИмяСвойства = "configurationUpdateResponse" Тогда
				
				ЗаполнитьИнформациюОбОбновленииКонфигурацииИзJSON(Результат, ЧтениеОтвета);
				
			ИначеЕсли ИмяСвойства = "platformUpdateResponse" Тогда
				
				ЗаполнитьИнформациюОбОбновленииПлатформыИзJSON(Результат, ЧтениеОтвета);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

Процедура ЗаписатьДополнительныеПараметрыЗапроса(ДопПараметрыЗапроса, ЗаписьДанныхСообщения)
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("additionalParameters");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для каждого КлючЗначение Из ДопПараметрыЗапроса Цикл
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("key");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(КлючЗначение.Ключ);
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("value");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(КлючЗначение.Значение));
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОФайлахОбновленияКонфигурацииИзJSON(Результат, ЧтениеОтвета)
	
	ЧтениеОтвета.Прочитать();
	Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеОтвета.Прочитать();
	Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			Возврат;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			
			templatePath = "";
			executeUpdateProcess = Ложь;
			updateFileUrl = "";
			updateFileName = "";
			updateFileFormat = "";
			size = 0;
			hashSum = "";
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			
			Результат.ОбновленияКонфигурации.Добавить(
				НовыйОбновлениеКонфигурации(
					updateFileUrl,
					templatePath,
					updateFileName,
					executeUpdateProcess,
					updateFileFormat,
					size,
					hashSum));
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			
			Если ИмяСвойства = "templatePath" Тогда
				templatePath = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "executeUpdateProcess" Тогда
				executeUpdateProcess = ЗначениеСвойстваJSON(ЧтениеОтвета, Ложь);
			ИначеЕсли ИмяСвойства = "updateFileUrl" Тогда
				updateFileUrl = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "updateFileName" Тогда
				updateFileName = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "updateFileFormat" Тогда
				updateFileFormat = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "size" Тогда
				size = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ИмяСвойства = "hashSum" Тогда
				hashSum = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОФайлахОбновленияИзUpdateResonseJSON(Результат, ТелоJSON)
	
	//{
	//  errorName: String,
	//  errorMessage: String,
	//  configurationUpdateDataList: [
	//    {
	//      templatePath: String,
	//      executeUpdateProcess: Boolean,
	//      updateFileUrl: String,
	//      updateFileName: String,
	//      updateFileFormat: String,
	//      size: Long,
	//      hashSum: String
	//    }
	//  ],
	//  platformDistributionUrl: String,
	//  additionalParameters: [
	//    {
	//      key: String,
	//      value: String
	//    }
	//  ]
	//}
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "errorName" Тогда
				
				Результат.ИмяОшибки = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
				
			ИначеЕсли ИмяСвойства = "errorMessage" Тогда
				
				Результат.ИнформацияОбОшибке = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
				Результат.Сообщение          = Результат.ИнформацияОбОшибке;
				
			ИначеЕсли ИмяСвойства = "platformDistributionUrl" Тогда
				
				Результат.URLФайлаОбновленияПлатформы = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
				
			ИначеЕсли ИмяСвойства = "configurationUpdateDataList" Тогда
				
				ЗаполнитьИнформациюОФайлахОбновленияКонфигурацииИзJSON(Результат, ЧтениеОтвета);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

Функция НовыйОбновлениеКонфигурации(
	URLФайлаОбновления,
	ПодкаталогШаблонов,
	ОтносительныйПутьCFUФайла,
	ПрименитьОбработчикиОбновления,
	ФорматФайлаОбновления,
	РазмерФайла,
	КонтрольнаяСумма)
	
	Результат = Новый Структура;
	Результат.Вставить("URLФайлаОбновления"            , URLФайлаОбновления);
	Результат.Вставить("ПодкаталогШаблонов"            , ПодкаталогШаблонов);
	Результат.Вставить("ОтносительныйПутьCFUФайла"     , ОтносительныйПутьCFUФайла);
	Результат.Вставить("ПрименитьОбработчикиОбновления", ПрименитьОбработчикиОбновления);
	Результат.Вставить("ФорматФайлаОбновления"         , НРег(ФорматФайлаОбновления));
	Результат.Вставить("РазмерФайла"                   , РазмерФайла);
	Результат.Вставить("КонтрольнаяСумма"              , КонтрольнаяСумма);
	Результат.Вставить("ПодкаталогCfu", КаталогФайлаИзПолногоИмени(ОтносительныйПутьCFUФайла));
	
	Если Прав(ВРег(Результат.ОтносительныйПутьCFUФайла), 4) <> ".CFU" Тогда
		Результат.ОтносительныйПутьCFUФайла = Результат.ОтносительныйПутьCFUФайла + ".cfu";
	КонецЕсли;
	
	Если Прав(Результат.ПодкаталогШаблонов, 1) <> "\" Тогда
		Результат.ПодкаталогШаблонов = Результат.ПодкаталогШаблонов + "\";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Каталоги для работы с обновлениями.

#Если Не ВебКлиент Тогда

Функция КаталогУстановкиПлатформы1СПредприятие(НомерВерсии) Экспорт
	
	КаталогProgramData = СистемныйКаталог(35);
	
	ПутьКонфигурационногоФайла = КаталогProgramData + "1C\1CEStart\1CEStart.cfg";
	ОписательФайла = Новый Файл(ПутьКонфигурационногоФайла);
	Если НЕ ОписательФайла.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	// Чтение каталогов установки и поиск каталогов установки платформы
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКонфигурационногоФайла);
	ПрочитаннаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
	Пока ПрочитаннаяСтрока <> Неопределено Цикл
		Если ВРег(Лев(ПрочитаннаяСтрока, 17)) = "INSTALLEDLOCATION" Тогда
			ПутьКаталогаУстановки = Сред(ПрочитаннаяСтрока, 19);
			Если НЕ ПустаяСтрока(ПутьКаталогаУстановки) Тогда
				ПутьКаталогаВерсииПлатформы = ПутьКаталогаУстановки
					+ ?(Прав(ПутьКаталогаУстановки, 1) = "\", "", "\")
					+ НомерВерсии + "\bin\";
				ОписательФайла = Новый Файл(ПутьКаталогаВерсииПлатформы);
				Если ОписательФайла.Существует() Тогда
					ЧтениеТекста.Закрыть();
					Возврат ПутьКаталогаВерсииПлатформы;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПрочитаннаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	
	ЧтениеТекста.Закрыть();
	
	Возврат Неопределено;
	
КонецФункции

Функция КаталогДляРаботыСОбновлениямиПлатформы() Экспорт
	
	КаталогAppData = СистемныйКаталог(28);
	ПутьКаталога = КаталогAppData + ?(Прав(КаталогAppData, 1) = "\", "", "\")
		+ "1C\1Cv8PlatformUpdate";
	
	ОписательФайла = Новый Файл(ПутьКаталога);
	Если НЕ ОписательФайла.Существует() Тогда
		СоздатьКаталог(ПутьКаталога);
	КонецЕсли;
	
	Возврат ПутьКаталога + "\";
	
КонецФункции

Функция КаталогДляРаботыСОбновлениямиКонфигурации()
	
	КаталогAppData = СистемныйКаталог(28);
	ПутьКаталога = КаталогAppData + ?(Прав(КаталогAppData, 1) = "\", "", "\")
		+ "1C\1Cv8ConfigUpdate";
	
	ОписательФайла = Новый Файл(ПутьКаталога);
	Если Не ОписательФайла.Существует() Тогда
		СоздатьКаталог(ПутьКаталога);
	КонецЕсли;
	
	Возврат ПутьКаталога + "\";
	
КонецФункции

Функция КаталогСодержитДистрибутивПлатформы1СПредприятие(Знач Каталог, Версия) Экспорт
	
	Если Прав(Каталог, 1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	Если НЕ ФайлСуществует(Каталог)
		ИЛИ НЕ ФайлСуществует(Каталог + "setup.exe")
		ИЛИ НЕ ФайлСуществует(Каталог + "Setup.ini") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Чтение строк *.ini-файла
	ЧтениеТекста = Новый ЧтениеТекста(Каталог + "Setup.ini");
	ЕстьИмяПродукта = Ложь;
	ЕстьНомерВерсии = Ложь;
	ИскомаяСтрокаПродукта = "PRODUCT=1C:ENTERPRISE 8";
	ИскомаяСтрокаВерсии   = "PRODUCTVERSION=" + Версия;
	
	Попытка
		
		ПрочитаннаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
		Пока ПрочитаннаяСтрока <> Неопределено Цикл
			ПрочитаннаяСтрокаВРег = ВРег(СокрЛП(ПрочитаннаяСтрока));
			Если ПрочитаннаяСтрокаВРег = ИскомаяСтрокаПродукта Тогда
				ЕстьИмяПродукта = Истина;
			ИначеЕсли ПрочитаннаяСтрокаВРег = ИскомаяСтрокаВерсии Тогда
				ЕстьНомерВерсии = Истина;
			КонецЕсли;
			
			Если ЕстьИмяПродукта И ЕстьНомерВерсии Тогда
				ЧтениеТекста.Закрыть();
				Возврат Истина;
			КонецЕсли;
			
			ПрочитаннаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
		КонецЦикла;
		
		ЧтениеТекста.Закрыть();
		
	Исключение
		
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

Функция КаталогШаблонов()
	
	ИмяКаталога = СистемныйКаталог(26);
	КаталогПоУмолчанию = ИмяКаталога + "1C\1Cv8\tmplts\";
	ИмяФайла = ИмяКаталога + "1C\1CEStart\1CEStart.cfg";
	Если Не ФайлСуществует(ИмяФайла) Тогда
		Возврат КаталогПоУмолчанию;
	КонецЕсли;
	
	Текст = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF16);
	Стр = "";
	Пока Стр <> Неопределено Цикл
		
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрНайти(ВРег(Стр), ВРег("ConfigurationTemplatesLocation")) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияРазделителя = СтрНайти(Стр, "=");
		Если ПозицияРазделителя = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныйКаталог = Сред(Стр, ПозицияРазделителя + 1);
		Если Прав(НайденныйКаталог, 1) <> "\" Тогда
			НайденныйКаталог = НайденныйКаталог + "\";
		КонецЕсли;
		
		Возврат ?(ФайлСуществует(НайденныйКаталог), НайденныйКаталог, КаталогПоУмолчанию);
		
	КонецЦикла;
	
	Возврат КаталогПоУмолчанию;

КонецФункции

Функция ФайлСуществует(ПутьФайла, ЭтоКаталог = Неопределено) Экспорт
	
	Описатель = Новый Файл(ПутьФайла);
	Если НЕ Описатель.Существует() Тогда
		Возврат Ложь;
	ИначеЕсли ЭтоКаталог = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат (Описатель.ЭтоКаталог() = ЭтоКаталог);
	КонецЕсли;
	
КонецФункции

Функция СистемныйКаталог(Идентификатор)
	
	App = Новый COMОбъект("Shell.Application");
	Folder = App.Namespace(Идентификатор);
	Результат = Folder.Self.Path;
	Возврат ?(Прав(Результат, 1) = "\", Результат, Результат + "\");
	
КонецФункции

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Реализация контекста получения и установки обновлений программы.

#Если Не ВебКлиент Тогда

Функция НовыйКонтекстПолученияИУстановкиОбновлений(Параметры) Экспорт
	
	ОписаниеФайловОбновлений = Параметры.ОписаниеФайловОбновлений;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОшибки"         , "");
	Результат.Вставить("Сообщение"         , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Завершено"         , Ложь);
	
	Результат.Вставить("ВерсияПлатформы", ОписаниеФайловОбновлений.ВерсияПлатформы);
	
	Результат.Вставить("Прогресс", 0);
	Если Параметры.ОбновитьКонфигурацию Тогда
		Результат.Вставить("ОбновленияКонфигурации", ОписаниеФайловОбновлений.ОбновленияКонфигурации);
	Иначе
		Результат.Вставить("ОбновленияКонфигурации", Новый Массив);
	КонецЕсли;
	
	КоличествоФайлов = 0;
	ОбъемФайлов      = 0;
	Если Не Параметры.ОбновитьПлатформу Или ПустаяСтрока(Результат.ВерсияПлатформы) Тогда
		Результат.Вставить("ОбновитьПлатформу", Ложь);
	Иначе
		Результат.Вставить("ОбновитьПлатформу", Истина);
		КоличествоФайлов = КоличествоФайлов + 1;
		ОбъемФайлов      = ОбъемФайлов + ОписаниеФайловОбновлений.РазмерОбновленияПлатформы;
	КонецЕсли;
	
	Если Результат.ОбновленияКонфигурации.Количество() > 0 Тогда
		
		Результат.Вставить("ВременныйКаталогОбновленийКонфигурации",
			КаталогДляРаботыСОбновлениямиКонфигурации());
		Результат.Вставить("КаталогИндексаФайлов",
			Результат.ВременныйКаталогОбновленийКонфигурации + "FileIndex\");
		Результат.Вставить("КаталогШаблонов", КаталогШаблонов());
		
		Для каждого ТекОбновление Из Результат.ОбновленияКонфигурации Цикл
			
			КоличествоФайлов = КоличествоФайлов + 1;
			ОбъемФайлов      = ОбъемФайлов + ТекОбновление.РазмерФайла;
			ТекОбновление.Вставить("Получено"          , Ложь);
			ТекОбновление.Вставить("КаталогДистрибутива",
				Результат.КаталогШаблонов + СтрЗаменить(ТекОбновление.ПодкаталогШаблонов, "_", "."));
			ТекОбновление.Вставить("КаталогCFUФайлаВКаталогеДистрибутивов",
				ТекОбновление.КаталогДистрибутива + ТекОбновление.ПодкаталогCfu);
			ТекОбновление.Вставить("ПолноеИмяCFUФайлаВКаталогеДистрибутивов",
				ТекОбновление.КаталогДистрибутива + ТекОбновление.ОтносительныйПутьCFUФайла);
			ТекОбновление.Вставить("ИмяИндексногоФайла",
				СтрЗаменить(ТекОбновление.ПодкаталогШаблонов, "\", "_") + "_"
					+ СтрЗаменить(СтрЗаменить(ТекОбновление.ОтносительныйПутьCFUФайла, "\", "_"), ".", "_")
					+ ".txt");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.Вставить("ОбновлениеПлатформыУстановлено", Ложь);
	Результат.Вставить("КаталогДистрибутиваПлатформы"  , "");
	Результат.Вставить("URLФайлаОбновленияПлатформы"   , ОписаниеФайловОбновлений.URLФайлаОбновленияПлатформы);
	Результат.Вставить("РазмерОбновленияПлатформы"     , ОписаниеФайловОбновлений.РазмерОбновленияПлатформы);
	Результат.Вставить("УстановкаПлатформыОтменена"    , 0);
	Результат.Вставить("КодВозвратаПрограммыУстановки" , 0);
	
	Результат.Вставить("КоличествоФайлов"       , КоличествоФайлов);
	Результат.Вставить("ОбъемФайлов"            , ОбъемФайлов);
	Результат.Вставить("ФайлыОбновленияПолучены", Ложь);
	Результат.Вставить("ТекущееДействие",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подготовка к получению обновления...'"),
			КоличествоФайлов));
	
	Возврат Результат;
	
КонецФункции

Функция ОбновлениеКонфигурацииПолучено(Обновление, Контекст) Экспорт
	
	Если Обновление.Получено Тогда
		
		Возврат Истина;
		
	ИначеЕсли Не ФайлСуществует(Обновление.ПолноеИмяCFUФайлаВКаталогеДистрибутивов, Ложь)
		Или ПустаяСтрока(Обновление.КонтрольнаяСумма) Тогда
		
		Возврат Ложь;
		
	Иначе
		
		// Проверка контрольных сумм.
		#Если Не ТонкийКлиент Тогда
		
		Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
		Хеширование.ДобавитьФайл(Обновление.ПолноеИмяCFUФайлаВКаталогеДистрибутивов);
		Попытка
			Если Обновление.КонтрольнаяСумма <> Base64Строка(Хеширование.ХешСумма) Тогда
				Возврат Ложь;
			Иначе
				Обновление.Получено = Истина;
				Возврат Истина;
			КонецЕсли;
		Исключение
			ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Ложь;
		КонецПопытки;
		
		#Иначе
		
		Попытка
			
			ПолноеИмяИндексногоФайла = Контекст.КаталогИндексаФайлов + Обновление.ИмяИндексногоФайла;
			Если Не ФайлСуществует(ПолноеИмяИндексногоФайла, Ложь) Тогда
				Возврат ложь;
			КонецЕсли;
			
			ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяИндексногоФайла);
			ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
			Если ТекСтрока = Неопределено Тогда
				Возврат Ложь;
			ИначеЕсли ТекСтрока <> Обновление.ПолноеИмяCFUФайлаВКаталогеДистрибутивов Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
			Если ТекСтрока = Неопределено Тогда
				Возврат Ложь;
			ИначеЕсли ТекСтрока <> Обновление.КонтрольнаяСумма Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ОписательФайлаОбновления = Новый Файл(Обновление.ПолноеИмяCFUФайлаВКаталогеДистрибутивов);
			ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
			Если ТекСтрока = Неопределено Тогда
				Возврат Ложь;
			ИначеЕсли ТекСтрока <> Строка(ОписательФайлаОбновления.Размер()) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
			Если ТекСтрока = Неопределено Тогда
				Возврат Ложь;
			ИначеЕсли ТекСтрока <> Строка(ОписательФайлаОбновления.ПолучитьУниверсальноеВремяИзменения()) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ЧтениеТекста.Закрыть();
			Обновление.Получено = Истина;
			Возврат Истина;
			
		Исключение
			ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Ложь;
		КонецПопытки;
		
		#КонецЕсли
		
	КонецЕсли;
	
КонецФункции

Процедура СоздатьКаталогиДляПолученияОбновления(Обновление, Контекст) Экспорт
	
	ВременныйКаталогОбновленийКонфигурации = Контекст.ВременныйКаталогОбновленийКонфигурации;
	Попытка
		СоздатьКаталог(ВременныйКаталогОбновленийКонфигурации);
	Исключение
		
		ИнфОшибка = ИнформацияОбОшибке();
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при создании каталога для сохранения дистрибутива конфигурации (%1).'"),
				ВременныйКаталогОбновленийКонфигурации)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнфОшибка);
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = "ОшибкаВзаимодействияСФайловойСистемой";
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать каталог %1 для сохранения дистрибутива конфигурации. %2'"),
			ВременныйКаталогОбновленийКонфигурации,
			КраткоеПредставлениеОшибки(ИнфОшибка));
		Возврат;
		
	КонецПопытки;
	
	КаталогИндексаФайлов = Контекст.КаталогИндексаФайлов;
	Попытка
		СоздатьКаталог(КаталогИндексаФайлов);
	Исключение
		
		ИнфОшибка = ИнформацияОбОшибке();
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при создании каталога (%1).'"),
				КаталогИндексаФайлов)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнфОшибка);
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = "ОшибкаВзаимодействияСФайловойСистемой";
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать каталог %1. %2'"),
			КаталогИндексаФайлов,
			КраткоеПредставлениеОшибки(ИнфОшибка));
		Возврат;
		
	КонецПопытки;
	
	// Создание каталога дистрибутива.
	Если Обновление.ФорматФайлаОбновления <> "zip" Тогда
		
		// Только cfu-файл.
		Попытка
			СоздатьКаталог(Обновление.КаталогCFUФайлаВКаталогеДистрибутивов);
		Исключение
			
			ИнфОшибка = ИнформацияОбОшибке();
			СообщениеЖурнала =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при создании каталога дистрибутива конфигурации (%1).'"),
					Обновление.КаталогCFUФайлаВКаталогеДистрибутивов)
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнфОшибка);
			ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			
			Контекст.ИмяОшибки = "ОшибкаВзаимодействияСФайловойСистемой";
			Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
			Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать каталог %1 для сохранения дистрибутива конфигурации. %2'"),
				Обновление.КаталогДистрибутива,
				КраткоеПредставлениеОшибки(ИнфОшибка));
			Возврат;
			
		КонецПопытки;
		
		Обновление.Вставить("ИмяПолученногоФайла", Обновление.ПолноеИмяCFUФайлаВКаталогеДистрибутивов);
		
	Иначе
		
		Попытка
			СоздатьКаталог(Обновление.КаталогДистрибутива);
		Исключение
			
			ИнфОшибка = ИнформацияОбОшибке();
			СообщениеЖурнала =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при создании каталога дистрибутива конфигурации (%1).'"),
					Обновление.КаталогДистрибутива)
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнфОшибка);
			ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			
			Контекст.ИмяОшибки = "ОшибкаВзаимодействияСФайловойСистемой";
			Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
			Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать каталог %1 для сохранения дистрибутива конфигурации. %2'"),
				Обновление.КаталогДистрибутива,
				КраткоеПредставлениеОшибки(ИнфОшибка));
			Возврат;
			
		КонецПопытки;
		
		Обновление.Вставить("ИмяПолученногоФайла",
			ВременныйКаталогОбновленийКонфигурации
				+ СтрЗаменить(Обновление.ПодкаталогШаблонов, "\", "_")
				+ "1cv8.zip");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьПолучениеОбновления(Обновление, Контекст) Экспорт
	
	// Извлечение дистрибутива.
	Если Обновление.ФорматФайлаОбновления = "zip" Тогда
		
		// Извлечение из архива.
		Попытка
			ЧтениеZIP = Новый ЧтениеZipФайла(Обновление.ИмяПолученногоФайла);
			ЧтениеZIP.ИзвлечьВсе(Обновление.КаталогДистрибутива,
				РежимВосстановленияПутейФайловZIP.Восстанавливать);
		Исключение
			
			СообщениеЖурнала =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при извлечении файлов архива (%1) в каталог %2.'"),
					Обновление.ИмяПолученногоФайла,
					Обновление.КаталогДистрибутива)
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			
			Контекст.ИмяОшибки          = "ОшибкаИзвлеченияДанныхИзФайла";
			Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
			Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось извлечь файлы дистрибутива. %1'"),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
			
		КонецПопытки;
		
		ЧтениеZIP.Закрыть();
		
		// Проверка существования cfu-файла в полученном дистрибутиве.
		Если Не ФайлСуществует(Обновление.ПолноеИмяCFUФайлаВКаталогеДистрибутивов, Ложь) Тогда
			
			Контекст.ИмяОшибки          = "ОшибкаДистрибутиваКонфигурации";
			Контекст.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный файл дистрибутива %1. Отсутствует файл обновления конфигурации %2.'"),
				Обновление.URLФайлаОбновления,
				Обновление.ОтносительныйПутьCFUФайла);
			ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(Контекст.ИнформацияОбОшибке);
			Контекст.Сообщение = НСтр("ru = 'Дистрибутив не содержит файл обновления конфигурации.'");
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Обновление.ФорматФайлаОбновления = "zip" Тогда
		Попытка
			УдалитьФайлы(Обновление.ИмяПолученногоФайла);
		Исключение
			ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	
	// Запись индексного файла.
	Попытка
		
		ПолноеИмяИндексногоФайла = Контекст.КаталогИндексаФайлов + Обновление.ИмяИндексногоФайла;
		ОписательФайлаОбновления = Новый Файл(Обновление.ПолноеИмяCFUФайлаВКаталогеДистрибутивов);
		
		ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяИндексногоФайла);
		ЗаписьТекста.ЗаписатьСтроку(Обновление.ПолноеИмяCFUФайлаВКаталогеДистрибутивов);
		ЗаписьТекста.ЗаписатьСтроку(Обновление.КонтрольнаяСумма);
		ЗаписьТекста.ЗаписатьСтроку(Строка(ОписательФайлаОбновления.Размер()));
		ЗаписьТекста.ЗаписатьСтроку(Строка(ОписательФайлаОбновления.ПолучитьУниверсальноеВремяИзменения()));
		ЗаписьТекста.Закрыть();
		
	Исключение
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

Функция ИмяСобытияЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Получение обновлений программы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти
