
// Формирует файл, который можно будет сохранить
//
Функция СохранитьФайлВыгрузкиСправки2НДФЛ(Документ) Экспорт
	
	ИмяСформированногоФайла = "";
	НалоговыйПериод = Документ.НалоговыйПериод;
	Если НалоговыйПериод >= 2015 Тогда
		ТекстФайла = СформироватьВыходнойФайл2015(Документ, ИмяСформированногоФайла, НалоговыйПериод);
	ИначеЕсли Документ.НалоговыйПериод >= 2013 Тогда
		ТекстФайла = СформироватьВыходнойФайл2014(Документ, ИмяСформированногоФайла);
	Иначе
		ТекстФайла = СформироватьВыходнойФайл2011(Документ, ИмяСформированногоФайла);
	КонецЕсли;
	
	Возврат ПолучитьФайлПОИмениИТексту( ИмяСформированногоФайла + ".xml", ТекстФайла);
	
КонецФункции

// Формирует текст файла XML
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл2011(Объект, ИмяФайла)
	
	ПакетЗапросов = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ПолучитьДанныеПоСправке2НДФЛ(Объект);
	СотрудникиОрганизации = ПакетЗапросов.Сотрудники;
	СуммыНалогов = ПакетЗапросов.СведенияОСуммах;
	СведенияОДоходах = ПакетЗапросов.СведенияОДоходах;
	СведенияОВычетах = ПакетЗапросов.СведенияОВычетах;
	
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющихЛичность = Новый Соответствие;
	СоответствиеКодовДоходов = Новый Соответствие;
	СоответствиеКодовВычетов = Новый Соответствие;
	ПрочитатьКлассификаторыВСоответствия(
		СоответствиеКодовСтран,
		СоответствиеИменСтран,
		СоответствиеДокументовУдостоверяющихЛичность,
		СоответствиеКодовДоходов,
		СоответствиеКодовВычетов);
	
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Организация, НалоговыйПериод, ОКАТО_КПП, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал, ИмяФайла");
	СтруктураДанныхНА = ДанныеНалоговогоАгентаДляНДФЛ(СтруктураРеквизитов.Организация, СтруктураРеквизитов.НалоговыйПериод, СтруктураРеквизитов.ОКАТО_КПП, СтруктураРеквизитов.Дата, СтруктураРеквизитов.Телефон, СтруктураРеквизитов.ДолжностьПодписавшегоЛица, СтруктураРеквизитов.СправкуПодписал);
	СтруктураДанныхНА.Признак = "1";
	ОрганизацияЭтоФизЛицо = Не СтруктураДанныхНА.ЭтоЮрЛицо;
		
	// Загружаем формат файла сведений
	ДеревоФорматаXML = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ПолучитьМакет("ФорматНДФЛ2011XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();

	ДеревоФормата = ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);	
	
	// Создаем начальное дерево
	ДеревоВыгрузки = СоздатьДеревоXML();
	
	ИмяФайла = СтруктураРеквизитов.ИмяФайла;
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("ИдФайл", ИмяФайла);
	Атрибуты.Вставить("ВерсПрог", "1С:Предприятие 8");
	Атрибуты.Вставить("ВерсФорм", "5.02");

	
	Узел2НДФЛ = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
	
	Если СтруктураДанныхНА.ЭтоЮрЛицо Тогда
		НомерВыбираемогоЭлемента = 1;
	Иначе
		НомерВыбираемогоЭлемента = 2;
	КонецЕсли;	
	
	// Информационная часть
	ФорматФайла = ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "Файл", НомерВыбираемогоЭлемента);
	
	// Общие сведения служебной части
	НаборЗаписейОбщСвСЧ = ФорматФайла.СвРекв.Значение;
	НаборЗаписейОбщСвСЧ.ОКАТО.Значение = СтруктураДанныхНА.ОКАТО;
	НаборЗаписейОбщСвСЧ.ПризнакФ.Значение = СтруктураДанныхНА.Признак;
	НаборЗаписейОбщСвСЧ.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
	
	ФорматСправка = ФорматФайла.Документ.Значение;
	ФорматСправка.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
	ФорматСправка.ДатаДок.Значение = СтруктураДанныхНА.Дата;
	ФорматСправка.Признак.Значение = СтруктураДанныхНА.Признак;
	ФорматСправка.КодНО.Значение = СтруктураДанныхНА.КодНалоговогоОргана;
	
	// Сведения об отправителе
	ФорматСправка.СвНА.Значение.ОКАТО.Значение = СтруктураДанныхНА.ОКАТО;
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхНА.Телефон) Тогда
		ФорматСправка.СвНА.Значение.Удалить("Тлф");
	Иначе
		ФорматСправка.СвНА.Значение.Тлф.Значение = СтруктураДанныхНА.Телефон;
	КонецЕсли;
	
	Если ОрганизацияЭтоФизЛицо Тогда
		
		НаборЗаписейОбщСвСЧ.СвФЛ.Значение.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
		
		НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАФЛ.Значение;
		НаборЗаписейОтправитель.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
		НаборЗаписейОтправитель.ФИО.Значение.Фамилия = СтруктураДанныхНА.Фамилия;
		НаборЗаписейОтправитель.ФИО.Значение.Имя = СтруктураДанныхНА.Имя;
		НаборЗаписейОтправитель.ФИО.Значение.Отчество = СтруктураДанныхНА.Отчество;
		
	Иначе
		
		// Сведения об отправителе
		НаборЗаписейОтправитель = НаборЗаписейОбщСвСЧ.СвЮЛ.Значение;
		НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
		НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
		
		НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАЮЛ.Значение;
		НаборЗаписейОтправитель.НаимОрг.Значение = СтруктураДанныхНА.НазваниеОрганизации;
		НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
		НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
		
	КонецЕсли;
	
	Атрибуты = ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейОбщСвСЧ);
	
	ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(Узел2НДФЛ, "СвРекв", "", Атрибуты), НаборЗаписейОбщСвСЧ);
	
	СтруктураОтбора = Новый Структура("НомерСправки");
	СтруктураОтбораДохода = Новый Структура("МесяцНалоговогоПериода,КодДохода");
	ТаблицаВычетовКДоходам = Объект.СведенияОВычетах.ВыгрузитьКолонки("СуммаВычета");
	ТаблицаВычетовКДоходам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	Для каждого СтрокаДанных Из СотрудникиОрганизации Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = СведенияОДоходах.Скопировать(СведенияОДоходах.НайтиСтроки(СтруктураОтбора));
		ВычетыПоВидам = СведенияОВычетах.Скопировать(СведенияОВычетах.НайтиСтроки(СтруктураОтбора));
		Итоги = СуммыНалогов.Скопировать(СуммыНалогов.НайтиСтроки(СтруктураОтбора));
				
		ДоходыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
			СтрокаТЗ.КодВычетаСтрокой = КодВычетаДляНалоговойОтчетности(2011, СтрокаТЗ.КодВычета);
		КонецЦикла;
		
		СтруктураДанныхСправки = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматСправка);
		
		СтруктураДанныхСправки.НомСпр.Значение = СтрокаДанных.НомерСправки;
		
		// Данные о физическом лице - получателе дохода
		НаборЗаписейФизЛицо = СтруктураДанныхСправки.ПолучДох.Значение;
		
		//  Фамилия, Имя, Отчество
		НаборЗаписейФизЛицо.ФИО.Значение.Фамилия = СтрокаДанных.Фамилия;
		НаборЗаписейФизЛицо.ФИО.Значение.Имя = СтрокаДанных.Имя;
		НаборЗаписейФизЛицо.ФИО.Значение.Отчество = СтрокаДанных.Отчество;
		Если ПустаяСтрока(СтрокаДанных.ИНН) Тогда
			НаборЗаписейФизЛицо.Удалить("ИННФЛ");
		Иначе
			НаборЗаписейФизЛицо.ИННФЛ.Значение = СтрокаДанных.ИНН;
		КонецЕсли;
		НаборЗаписейФизЛицо.Статус.Значение = 1;
		НаборЗаписейФизЛицо.ДатаРожд.Значение = СтрокаДанных.ДатаРождения;
		НаборЗаписейФизЛицо.Гражд.Значение = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
		
		// Удостоверение личности
		НаборЗаписейДокУдЛичности = НаборЗаписейФизЛицо.УдЛичнФЛ.Значение;//  КодУдЛичн, СерНомДок 
		НаборЗаписейДокУдЛичности.КодУдЛичн = СоответствиеДокументовУдостоверяющихЛичность[СтрокаДанных.ВидДокумента];
		НаборЗаписейДокУдЛичности.СерНомДок = СокрЛП(СтрокаДанных.СерияДокумента) + " " + СокрЛП(СтрокаДанных.НомерДокумента);
		
		// Адреса
		Если ЗначениеЗаполнено(СтрокаДанных.АдресРФ) Тогда
			СтруктураАдреса = ПреобразоватьСтрокуВСтруктуру(СтрокаДанных.АдресРФ);
			ЗаполнитьЗначенияСвойств(НаборЗаписейФизЛицо.АдрМЖРФ.Значение,СтруктураАдреса); //  Индекс, КодРегион, Район, Город, Улица, Дом, Корп,
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.КодРегион = СтруктураАдреса.КодРегиона;
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.НаселПункт = ?(СтруктураАдреса.Свойство("НаселенныйПункт"),СтруктураАдреса.НаселенныйПункт,"");
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.Кварт = ?(СтруктураАдреса.Свойство("Квартира"),СтруктураАдреса.Квартира,"");
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрМЖРФ");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.АдресЗарубежом) Тогда
			СтруктураАдреса = ПреобразоватьСтрокуВСтруктуру(СтрокаДанных.Адрес);
			НаборЗаписейФизЛицо.АдрИНО.Значение.КодСтр = СоответствиеИменСтран[СтруктураАдреса.Страна];
			НаборЗаписейФизЛицо.АдрИНО.Значение.АдрТекст = СтруктураАдреса.Представление;
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрИНО");
		КонецЕсли;
		
		// Сведения об облагаемых доходах
		ФорматНаборЗаписейСведенияОДоходах = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СтруктураДанныхСправки.СведДох.Значение);
		СтруктураДанныхСправки.Удалить("СведДох");
		
		Атрибуты = ДанныеВыгружаемыеКакАтрибуты(СтруктураДанныхСправки);
		
		УзелСправки = ДобавитьУзелВДеревоXML(Узел2НДФЛ, "Документ", "", Атрибуты);
		ДобавитьИнформациюВДерево(УзелСправки, СтруктураДанныхСправки);
		
		Для каждого СтрокаИтогов Из Итоги Цикл
			
			НаборЗаписейСведенияОДоходах = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматНаборЗаписейСведенияОДоходах);
			НаборЗаписейСведенияОДоходах.Ставка.Значение = 13;
			
			НаборЗаписейДоходы = НаборЗаписейСведенияОДоходах.ДохВыч.Значение;
			ТаблицаДоходов = НаборЗаписейДоходы.СвСумДох.Значение;
			
			Если СтрокаИтогов.ОбщаяСуммаДохода > 0 Тогда
				ТаблицаСтрок = ИзвлечьДоходыПоСтавке(СтрокаИтогов.Ставка, СтрокаДанных.СтатусНалогоплательщика, ДоходыПоВидам);
				ТаблицаСтрок.Свернуть("МесяцНалоговогоПериода,КодДохода");
				ТаблицаСтрок.Сортировать("МесяцНалоговогоПериода,КодДохода");
				Для каждого СтрокаДоходов Из ТаблицаСтрок Цикл // Доходы
					
					ЗаполнитьЗначенияСвойств(СтруктураОтбораДохода, СтрокаДоходов);
					Строки = ДоходыПоВидам.НайтиСтроки(СтруктураОтбораДохода);
					СуммаДохода = 0;
					ТаблицаВычетовКДоходам.Очистить();
					Для каждого ОтобраннаяСтрока Из Строки Цикл
						СуммаДохода = СуммаДохода + ОтобраннаяСтрока.СуммаДохода;
						Если ЗначениеЗаполнено(ОтобраннаяСтрока.КодВычета) И ЗначениеЗаполнено(ОтобраннаяСтрока.СуммаВычета) Тогда
							ЗаполнитьЗначенияСвойств(ТаблицаВычетовКДоходам.Добавить(), ОтобраннаяСтрока);	
						КонецЕсли;	
					КонецЦикла;
					
					СтрокаТЗ = ТаблицаДоходов.Добавить();
					СтрокаТЗ.Месяц = ?(СтрДлина(СтрокаДоходов.МесяцНалоговогоПериода) = 1,"0","") + СтрокаДоходов.МесяцНалоговогоПериода;
					СтрокаТЗ.КодДоход = СоответствиеКодовДоходов[СтрокаДоходов.КодДохода];
					СтрокаТЗ.СумДоход = СуммаДохода;
					Если ТаблицаВычетовКДоходам.Количество() > 0 Тогда
						ТаблицаДляСтроки = ТаблицаВычетовКДоходам.Скопировать();
						ТаблицаДляСтроки.Колонки.КодВычетаСтрокой.Имя = "КодВычет";
						ТаблицаДляСтроки.Колонки.СуммаВычета.Имя = "СумВычет";
						ОписаниеФормата = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(НаборЗаписейСведенияОДоходах.НалВычССИ.Значение.ПредВычССИ);
						ОписаниеФормата.Значение = ТаблицаДляСтроки;
						СтрокаТЗ.СвСумВыч = Новый Структура("СвСумВыч", ОписаниеФормата);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
				
			// Налоговые вычеты
			Если ВычетыПоВидам.Количество() > 0 И СтрокаИтогов.Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
				
				НаборЗаписейВычет = НаборЗаписейСведенияОДоходах.НалВычССИ.Значение;
				ТаблицаВычетов = НаборЗаписейВычет.ПредВычССИ.Значение;
				Для каждого СтрокаВычетов Из ВычетыПоВидам Цикл // Вычеты
					СтрокаТЗ = ТаблицаВычетов.Добавить();
					СтрокаТЗ.КодВычет = СоответствиеКодовВычетов[СтрокаВычетов.КодВычета];
					СтрокаТЗ.СумВычет = СтрокаВычетов.СуммаВычета;
				КонецЦикла;
				
				Если (ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код311, "КодВычета") <> Неопределено Или ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код312, "КодВычета") <> Неопределено Или ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код318, "КодВычета") <> Неопределено) Тогда
					Уведомление = НаборЗаписейВычет.УведИмущВыч.Значение;
					Уведомление.НомерУвед = СтрокаДанных.НомерУведомления;
					Уведомление.ДатаУвед = СтрокаДанных.ДатаУведомления;
					Уведомление.ИФНСУвед = СтрокаДанных.КодНалоговогоОрганаУведомления;
				Иначе
					НаборЗаписейВычет.Удалить("УведИмущВыч");
				КонецЕсли;
				
			Иначе
				НаборЗаписейСведенияОДоходах.Удалить("НалВычССИ");
			КонецЕсли;
			
			// Общая сумма дохода и налога на доходы по итогам налогового периода
			
			СтруктураСГДНалПер = НаборЗаписейСведенияОДоходах.СГДНалПер.Значение;
			СтруктураСГДНалПер.СумДохОбщ = СтрокаИтогов.ОбщаяСуммаДохода;
			СтруктураСГДНалПер.НалБаза = СтрокаИтогов.ОблагаемаяСуммаДохода;
			СтруктураСГДНалПер.НалИсчисл = СтрокаИтогов.Исчислено;
			СтруктураСГДНалПер.НалУдерж = СтрокаИтогов.Удержано;
			СтруктураСГДНалПер.НалПеречисл = СтрокаИтогов.Перечислено;
			СтруктураСГДНалПер.НалУдержЛиш = СтрокаИтогов.ИзлишнеУдержано;
			СтруктураСГДНалПер.НалНеУдерж = СтрокаИтогов.Задолженность;
			
			Атрибуты = ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейСведенияОДоходах);
			УзелСведенияОДоходах = ДобавитьУзелВДеревоXML(УзелСправки, "СведДох","", Атрибуты);
			ДобавитьИнформациюВДерево(УзелСведенияОДоходах, НаборЗаписейСведенияОДоходах);
			
		КонецЦикла;
		
	КонецЦикла;
		
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = СоздатьПотокXML();
	ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	// получаем содержимое файла в виде строки
	СтрокаXML = ПотокВыгрузкиXML.Закрыть();
	
	Возврат СтрокаXML

КонецФункции

Функция СформироватьВыходнойФайл2014(Объект, ИмяФайла)
	
	ПакетЗапросов = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ПолучитьДанныеПоСправке2НДФЛ(Объект);
	СотрудникиОрганизации = ПакетЗапросов.Сотрудники;
	СуммыНалогов = ПакетЗапросов.СведенияОСуммах;
	СведенияОДоходах = ПакетЗапросов.СведенияОДоходах;
	СведенияОВычетах = ПакетЗапросов.СведенияОВычетах;
	
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющихЛичность = Новый Соответствие;
	СоответствиеКодовДоходов = Новый Соответствие;
	СоответствиеКодовВычетов = Новый Соответствие;
	ПрочитатьКлассификаторыВСоответствия(
		СоответствиеКодовСтран,
		СоответствиеИменСтран,
		СоответствиеДокументовУдостоверяющихЛичность,
		СоответствиеКодовДоходов,
		СоответствиеКодовВычетов);
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Организация, НалоговыйПериод, ОКАТО_КПП, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал, ИмяФайла");
	СтруктураДанныхНА = ДанныеНалоговогоАгентаДляНДФЛ(СтруктураРеквизитов.Организация, СтруктураРеквизитов.НалоговыйПериод, СтруктураРеквизитов.ОКАТО_КПП, СтруктураРеквизитов.Дата, СтруктураРеквизитов.Телефон, СтруктураРеквизитов.ДолжностьПодписавшегоЛица, СтруктураРеквизитов.СправкуПодписал);
	СтруктураДанныхНА.Признак = "1";
	СтруктураДанныхНА.ОКТМО = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(СтруктураДанныхНА.ОКТМО, "-", "Справа");
	ОрганизацияЭтоФизЛицо = Не СтруктураДанныхНА.ЭтоЮрЛицо;
		
	// Загружаем формат файла сведений
	ДеревоФорматаXML = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ПолучитьМакет("ФорматНДФЛ2014XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();

	ДеревоФормата = ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);	
	
	// Создаем начальное дерево
	ДеревоВыгрузки = СоздатьДеревоXML();
	
	ИмяФайла = СтруктураРеквизитов.ИмяФайла;
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("ИдФайл", ИмяФайла);
	Атрибуты.Вставить("ВерсПрог", "1С:Предприятие 8");
	Атрибуты.Вставить("ВерсФорм", "5.03");
	
	Узел2НДФЛ = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
	
	Если СтруктураДанныхНА.ЭтоЮрЛицо Тогда
		НомерВыбираемогоЭлемента = 1;
	Иначе
		НомерВыбираемогоЭлемента = 2;
	КонецЕсли;	
	
	// Информационная часть
	ФорматФайла = ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "Файл", НомерВыбираемогоЭлемента);
	
	// Общие сведения служебной части
	НаборЗаписейОбщСвСЧ = ФорматФайла.СвРекв.Значение;
	НаборЗаписейОбщСвСЧ.ОКТМО.Значение = СтруктураДанныхНА.ОКТМО;
	НаборЗаписейОбщСвСЧ.ПризнакФ.Значение = СтруктураДанныхНА.Признак;
	НаборЗаписейОбщСвСЧ.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
	
	ФорматСправка = ФорматФайла.Документ.Значение;
	ФорматСправка.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
	ФорматСправка.ДатаДок.Значение = СтруктураДанныхНА.Дата;
	ФорматСправка.Признак.Значение = СтруктураДанныхНА.Признак;
	ФорматСправка.НомКорр.Значение = "00"; // исходные справки
	ФорматСправка.КодНО.Значение = СтруктураДанныхНА.КодНалоговогоОргана;
	
	// Сведения об отправителе
	ФорматСправка.СвНА.Значение.ОКТМО.Значение = СтруктураДанныхНА.ОКТМО;
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхНА.Телефон) Тогда
		ФорматСправка.СвНА.Значение.Удалить("Тлф");
	Иначе
		ФорматСправка.СвНА.Значение.Тлф.Значение = СтруктураДанныхНА.Телефон;
	КонецЕсли;
	
	Если ОрганизацияЭтоФизЛицо Тогда
		
		НаборЗаписейОбщСвСЧ.СвФЛ.Значение.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
		
		НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАФЛ.Значение;
		НаборЗаписейОтправитель.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
		НаборЗаписейОтправитель.ФИО.Значение.Фамилия = СтруктураДанныхНА.Фамилия;
		НаборЗаписейОтправитель.ФИО.Значение.Имя = СтруктураДанныхНА.Имя;
		НаборЗаписейОтправитель.ФИО.Значение.Отчество = СтруктураДанныхНА.Отчество;
		
	Иначе
		
		// Сведения об отправителе
		НаборЗаписейОтправитель = НаборЗаписейОбщСвСЧ.СвЮЛ.Значение;
		НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
		НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
		
		НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАЮЛ.Значение;
		НаборЗаписейОтправитель.НаимОрг.Значение = СтруктураДанныхНА.НазваниеОрганизации;
		НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
		НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
		
	КонецЕсли;
	
	Атрибуты = ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейОбщСвСЧ);

	ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(Узел2НДФЛ, "СвРекв", "", Атрибуты), НаборЗаписейОбщСвСЧ);
	
	СтруктураОтбора = Новый Структура("НомерСправки");
	СтруктураОтбораДохода = Новый Структура("МесяцНалоговогоПериода,КодДохода");
	ТаблицаВычетовКДоходам = Объект.СведенияОВычетах.ВыгрузитьКолонки("СуммаВычета");
	ТаблицаВычетовКДоходам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	Для каждого СтрокаДанных Из СотрудникиОрганизации Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = СведенияОДоходах.Скопировать(СведенияОДоходах.НайтиСтроки(СтруктураОтбора));
		ВычетыПоВидам = СведенияОВычетах.Скопировать(СведенияОВычетах.НайтиСтроки(СтруктураОтбора));
		Итоги = СуммыНалогов.Скопировать(СуммыНалогов.НайтиСтроки(СтруктураОтбора));
				
		ДоходыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
			СтрокаТЗ.КодВычетаСтрокой = КодВычетаДляНалоговойОтчетности(2014, СтрокаТЗ.КодВычета);
		КонецЦикла;
		
		СтруктураДанныхСправки = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматСправка);
		
		СтруктураДанныхСправки.НомСпр.Значение = СтрокаДанных.НомерСправки;
		
		// Данные о физическом лице - получателе дохода
		НаборЗаписейФизЛицо = СтруктураДанныхСправки.ПолучДох.Значение;
		
		//  Фамилия, Имя, Отчество
		НаборЗаписейФизЛицо.ФИО.Значение.Фамилия = СтрокаДанных.Фамилия;
		НаборЗаписейФизЛицо.ФИО.Значение.Имя = СтрокаДанных.Имя;
		НаборЗаписейФизЛицо.ФИО.Значение.Отчество = СтрокаДанных.Отчество;
		Если ПустаяСтрока(СтрокаДанных.ИНН) Тогда
			НаборЗаписейФизЛицо.Удалить("ИННФЛ");
		Иначе
			НаборЗаписейФизЛицо.ИННФЛ.Значение = СтрокаДанных.ИНН;
		КонецЕсли;
		НаборЗаписейФизЛицо.Статус.Значение = 1;
		НаборЗаписейФизЛицо.ДатаРожд.Значение = СтрокаДанных.ДатаРождения;
		НаборЗаписейФизЛицо.Гражд.Значение = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
		
		// Удостоверение личности
		НаборЗаписейДокУдЛичности = НаборЗаписейФизЛицо.УдЛичнФЛ.Значение;//  КодУдЛичн, СерНомДок 
		НаборЗаписейДокУдЛичности.КодУдЛичн = СоответствиеДокументовУдостоверяющихЛичность[СтрокаДанных.ВидДокумента];
		НаборЗаписейДокУдЛичности.СерНомДок = СокрЛП(СтрокаДанных.СерияДокумента) + " " + СокрЛП(СтрокаДанных.НомерДокумента);
		
		// Адреса
		Если ЗначениеЗаполнено(СтрокаДанных.АдресРФ) Тогда
			СтруктураАдреса = ПреобразоватьСтрокуВСтруктуру(СтрокаДанных.АдресРФ);
			ЗаполнитьЗначенияСвойств(НаборЗаписейФизЛицо.АдрМЖРФ.Значение,СтруктураАдреса); //  Индекс, КодРегион, Район, Город, Улица, Дом, Корп,
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.КодРегион = СтруктураАдреса.КодРегиона;
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.НаселПункт = ?(СтруктураАдреса.Свойство("НаселенныйПункт"),СтруктураАдреса.НаселенныйПункт,"");
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.Кварт = ?(СтруктураАдреса.Свойство("Квартира"),СтруктураАдреса.Квартира,"");
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрМЖРФ");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.АдресЗарубежом) Тогда
			СтруктураАдреса = ПреобразоватьСтрокуВСтруктуру(СтрокаДанных.Адрес);
			НаборЗаписейФизЛицо.АдрИНО.Значение.КодСтр = СоответствиеИменСтран[СтруктураАдреса.Страна];
			НаборЗаписейФизЛицо.АдрИНО.Значение.АдрТекст = СтруктураАдреса.Представление;
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрИНО");
		КонецЕсли;
		
		// Сведения об облагаемых доходах
		ФорматНаборЗаписейСведенияОДоходах = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СтруктураДанныхСправки.СведДох.Значение);
		СтруктураДанныхСправки.Удалить("СведДох");
		
		Атрибуты = ДанныеВыгружаемыеКакАтрибуты(СтруктураДанныхСправки);
		
		УзелСправки = ДобавитьУзелВДеревоXML(Узел2НДФЛ, "Документ", "", Атрибуты);
		ДобавитьИнформациюВДерево(УзелСправки, СтруктураДанныхСправки);
		
		Для каждого СтрокаИтогов Из Итоги Цикл
			
			НаборЗаписейСведенияОДоходах = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматНаборЗаписейСведенияОДоходах);
			НаборЗаписейСведенияОДоходах.Ставка.Значение = 13;
			
			НаборЗаписейДоходы = НаборЗаписейСведенияОДоходах.ДохВыч.Значение;
			ТаблицаДоходов = НаборЗаписейДоходы.СвСумДох.Значение;
			
			Если СтрокаИтогов.ОбщаяСуммаДохода > 0 Тогда
				ТаблицаСтрок = ИзвлечьДоходыПоСтавке(СтрокаИтогов.Ставка, СтрокаДанных.СтатусНалогоплательщика, ДоходыПоВидам);
				ТаблицаСтрок.Свернуть("МесяцНалоговогоПериода,КодДохода");
				ТаблицаСтрок.Сортировать("МесяцНалоговогоПериода,КодДохода");
				Для каждого СтрокаДоходов Из ТаблицаСтрок Цикл // Доходы
					
					ЗаполнитьЗначенияСвойств(СтруктураОтбораДохода, СтрокаДоходов);
					Строки = ДоходыПоВидам.НайтиСтроки(СтруктураОтбораДохода);
					СуммаДохода = 0;
					ТаблицаВычетовКДоходам.Очистить();
					Для каждого ОтобраннаяСтрока Из Строки Цикл
						СуммаДохода = СуммаДохода + ОтобраннаяСтрока.СуммаДохода;
						Если ЗначениеЗаполнено(ОтобраннаяСтрока.КодВычета) И ЗначениеЗаполнено(ОтобраннаяСтрока.СуммаВычета) Тогда
							ЗаполнитьЗначенияСвойств(ТаблицаВычетовКДоходам.Добавить(), ОтобраннаяСтрока);	
						КонецЕсли;	
					КонецЦикла;
					
					СтрокаТЗ = ТаблицаДоходов.Добавить();
					СтрокаТЗ.Месяц = ?(СтрДлина(СтрокаДоходов.МесяцНалоговогоПериода) = 1,"0","") + СтрокаДоходов.МесяцНалоговогоПериода;
					СтрокаТЗ.КодДоход = СоответствиеКодовДоходов[СтрокаДоходов.КодДохода];
					СтрокаТЗ.СумДоход = СуммаДохода;
					Если ТаблицаВычетовКДоходам.Количество() > 0 Тогда
						ТаблицаДляСтроки = ТаблицаВычетовКДоходам.Скопировать();
						ТаблицаДляСтроки.Колонки.КодВычетаСтрокой.Имя = "КодВычет";
						ТаблицаДляСтроки.Колонки.СуммаВычета.Имя = "СумВычет";
						ОписаниеФормата = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(НаборЗаписейСведенияОДоходах.НалВычССИ.Значение.ПредВычССИ);
						ОписаниеФормата.Значение = ТаблицаДляСтроки;
						СтрокаТЗ.СвСумВыч = Новый Структура("СвСумВыч", ОписаниеФормата);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
				
			// Налоговые вычеты
			Если ВычетыПоВидам.Количество() > 0 И СтрокаИтогов.Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
				
				НаборЗаписейВычет = НаборЗаписейСведенияОДоходах.НалВычССИ.Значение;
				ТаблицаВычетов = НаборЗаписейВычет.ПредВычССИ.Значение;
				Для каждого СтрокаВычетов Из ВычетыПоВидам Цикл // Вычеты
					СтрокаТЗ = ТаблицаВычетов.Добавить();
					СтрокаТЗ.КодВычет = СоответствиеКодовВычетов[СтрокаВычетов.КодВычета];
					СтрокаТЗ.СумВычет = СтрокаВычетов.СуммаВычета;
				КонецЦикла;
				
				Если (ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код311, "КодВычета") <> Неопределено Или ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код312, "КодВычета") <> Неопределено Или ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код318, "КодВычета") <> Неопределено) Тогда
					Уведомление = НаборЗаписейВычет.УведИмущВыч.Значение;
					Уведомление.НомерУвед = СтрокаДанных.НомерУведомления;
					Уведомление.ДатаУвед = СтрокаДанных.ДатаУведомления;
					Уведомление.ИФНСУвед = СтрокаДанных.КодНалоговогоОрганаУведомления;
				Иначе
					НаборЗаписейВычет.Удалить("УведИмущВыч");
				КонецЕсли;
				
			Иначе
				НаборЗаписейСведенияОДоходах.Удалить("НалВычССИ");
			КонецЕсли;
			
			// Общая сумма дохода и налога на доходы по итогам налогового периода
			
			СтруктураСГДНалПер = НаборЗаписейСведенияОДоходах.СГДНалПер.Значение;
			СтруктураСГДНалПер.СумДохОбщ = СтрокаИтогов.ОбщаяСуммаДохода;
			СтруктураСГДНалПер.НалБаза = СтрокаИтогов.ОблагаемаяСуммаДохода;
			СтруктураСГДНалПер.НалИсчисл = СтрокаИтогов.Исчислено;
			СтруктураСГДНалПер.НалУдерж = СтрокаИтогов.Удержано;
			СтруктураСГДНалПер.НалПеречисл = СтрокаИтогов.Перечислено;
			СтруктураСГДНалПер.НалУдержЛиш = СтрокаИтогов.ИзлишнеУдержано;
			СтруктураСГДНалПер.НалНеУдерж = СтрокаИтогов.Задолженность;
			
			Атрибуты = ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейСведенияОДоходах);
			УзелСведенияОДоходах = ДобавитьУзелВДеревоXML(УзелСправки, "СведДох","", Атрибуты);
			ДобавитьИнформациюВДерево(УзелСведенияОДоходах, НаборЗаписейСведенияОДоходах);
			
		КонецЦикла;
		
	КонецЦикла;
		
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = СоздатьПотокXML();
	ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	// получаем содержимое файла в виде строки
	СтрокаXML = ПотокВыгрузкиXML.Закрыть();
	
	Возврат СтрокаXML

КонецФункции

Функция СформироватьВыходнойФайл2015(Объект, ИмяФайла, НалоговыйПериод)
	
	ПакетЗапросов = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ПолучитьДанныеПоСправке2НДФЛ(Объект);
	СотрудникиОрганизации = ПакетЗапросов.Сотрудники;
	СуммыНалогов = ПакетЗапросов.СведенияОСуммах;
	СведенияОДоходах = ПакетЗапросов.СведенияОДоходах;
	СведенияОВычетах = ПакетЗапросов.СведенияОВычетах;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВычетыНДФЛ.Ссылка,
	|	ВычетыНДФЛ.КодПрименяемыйВНалоговойОтчетностиС2016Года КАК КодВычетаСтрокой,
	|	ВычетыНДФЛ.ГруппаВычета
	|ИЗ
	|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ";
	
	Запрос.Текст = ?(НалоговыйПериод = 2015, СтрЗаменить(ТекстЗапроса, "2016", "2015"), ТекстЗапроса);
	СведенияИзКлассификатораВычетов = Запрос.Выполнить().Выгрузить();
	СведенияИзКлассификатораВычетов.Индексы.Добавить("Ссылка");
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющихЛичность = Новый Соответствие;
	СоответствиеКодовДоходов = Новый Соответствие;
	СоответствиеКодовВычетов = Новый Соответствие;
	ПрочитатьКлассификаторыВСоответствия(
		СоответствиеКодовСтран,
		СоответствиеИменСтран,
		СоответствиеДокументовУдостоверяющихЛичность,
		СоответствиеКодовДоходов,
		СоответствиеКодовВычетов);
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Организация, НалоговыйПериод, ОКАТО_КПП, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал, ИмяФайла");
	СтруктураДанныхНА = ДанныеНалоговогоАгентаДляНДФЛ(СтруктураРеквизитов.Организация, СтруктураРеквизитов.НалоговыйПериод, СтруктураРеквизитов.ОКАТО_КПП, СтруктураРеквизитов.Дата, СтруктураРеквизитов.Телефон, СтруктураРеквизитов.ДолжностьПодписавшегоЛица, СтруктураРеквизитов.СправкуПодписал);
	СтруктураДанныхНА.Признак = "1";
	СтруктураДанныхНА.ОКТМО = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(СтруктураДанныхНА.ОКТМО, "-", "Справа");
	ОрганизацияЭтоФизЛицо = Не СтруктураДанныхНА.ЭтоЮрЛицо;
		
		// Загружаем формат файла сведений
	ДеревоФорматаXML = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ПолучитьМакет("ФорматНДФЛ2015XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();

	ДеревоФормата = ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);
	
	// Создаем начальное дерево
	ДеревоВыгрузки = СоздатьДеревоXML();
	                                                              
	ИмяФайла = СтруктураРеквизитов.ИмяФайла;
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("ИдФайл", ИмяФайла);
	Атрибуты.Вставить("ВерсПрог", "1С:Предприятие 8");
	Атрибуты.Вставить("ВерсФорм", "5.04");

	
	Узел2НДФЛ = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
	
	Если СтруктураДанныхНА.ЭтоЮрЛицо Тогда
		НомерВыбираемогоЭлемента = 1;
	Иначе
		НомерВыбираемогоЭлемента = 2;
	КонецЕсли;	
	
	// Информационная часть
	ФорматФайла = ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "Файл", НомерВыбираемогоЭлемента);
	
	// Общие сведения служебной части
	НаборЗаписейОбщСвСЧ = ФорматФайла.СвРекв.Значение;
	НаборЗаписейОбщСвСЧ.ОКТМО.Значение = СтруктураДанныхНА.ОКТМО;
	НаборЗаписейОбщСвСЧ.ПризнакФ.Значение = СтруктураДанныхНА.Признак;
	НаборЗаписейОбщСвСЧ.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
	
	ФорматСправка = ФорматФайла.Документ.Значение;
	ФорматСправка.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
	ФорматСправка.ДатаДок.Значение = СтруктураДанныхНА.Дата;
	ФорматСправка.Признак.Значение = СтруктураДанныхНА.Признак;
	ФорматСправка.НомКорр.Значение = "00"; // исходные справки
	ФорматСправка.КодНО.Значение = СтруктураДанныхНА.КодНалоговогоОргана;
	
	// Сведения о лице, подписавшем документ
	НаборЗаписейПодписант = ФорматСправка.Подписант.Значение;
	НаборЗаписейПодписант.ПрПодп.Значение = "1"; // налоговый агент
	Если СтруктураДанныхНА.ЭтоЮрЛицо Тогда
		НаборЗаписейПодписант.Удалить("ФИО");
	Иначе
		НаборЗаписейПодписант.ФИО.Значение.Фамилия = СтруктураДанныхНА.Фамилия;
		НаборЗаписейПодписант.ФИО.Значение.Имя = СтруктураДанныхНА.Имя;
		НаборЗаписейПодписант.ФИО.Значение.Отчество = СтруктураДанныхНА.Отчество;
	КонецЕсли;
	НаборЗаписейПодписант.Удалить("СвПред");
	
	// Сведения об отправителе
	ФорматСправка.СвНА.Значение.ОКТМО.Значение = СтруктураДанныхНА.ОКТМО;
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхНА.Телефон) Тогда
		ФорматСправка.СвНА.Значение.Удалить("Тлф");
	Иначе
		ФорматСправка.СвНА.Значение.Тлф.Значение = СтруктураДанныхНА.Телефон;
	КонецЕсли;
	
	Если ОрганизацияЭтоФизЛицо Тогда
		
		НаборЗаписейОбщСвСЧ.СвФЛ.Значение.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
		
		НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАФЛ.Значение;
		НаборЗаписейОтправитель.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
		НаборЗаписейОтправитель.ФИО.Значение.Фамилия = СтруктураДанныхНА.Фамилия;
		НаборЗаписейОтправитель.ФИО.Значение.Имя = СтруктураДанныхНА.Имя;
		НаборЗаписейОтправитель.ФИО.Значение.Отчество = СтруктураДанныхНА.Отчество;
		
	Иначе
		
		// Сведения об отправителе
		НаборЗаписейОтправитель = НаборЗаписейОбщСвСЧ.СвЮЛ.Значение;
		НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
		НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
		
		НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАЮЛ.Значение;
		НаборЗаписейОтправитель.НаимОрг.Значение = СтруктураДанныхНА.НазваниеОрганизации;
		НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
		НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
		
	КонецЕсли;
	
	Атрибуты = ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейОбщСвСЧ);
	
	ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(Узел2НДФЛ, "СвРекв", "", Атрибуты), НаборЗаписейОбщСвСЧ);
	
	СтруктураОтбора = Новый Структура("НомерСправки");
	СтруктураОтбораДохода = Новый Структура("МесяцНалоговогоПериода,КодДохода");
	ТаблицаВычетовКДоходам = Объект.СведенияОВычетах.ВыгрузитьКолонки("СуммаВычета");
	ТаблицаВычетовКДоходам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	ТаблицаВычетовКДоходам.Колонки.Добавить("ГруппаВычета", Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыВычетовПоНДФЛ"));
	Для каждого СтрокаДанных Из СотрудникиОрганизации Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = СведенияОДоходах.Скопировать(СведенияОДоходах.НайтиСтроки(СтруктураОтбора));
		ВычетыПоВидам = СведенияОВычетах.Скопировать(СведенияОВычетах.НайтиСтроки(СтруктураОтбора));
		Итоги = СуммыНалогов.Скопировать(СуммыНалогов.НайтиСтроки(СтруктураОтбора));
		
		ДоходыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		ДополнитьТаблицуСВычетами(ДоходыПоВидам, СведенияИзКлассификатораВычетов);
		ДополнитьТаблицуСВычетами(ВычетыПоВидам, СведенияИзКлассификатораВычетов);
							
		СтруктураДанныхСправки = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматСправка);
		
		СтруктураДанныхСправки.НомСпр.Значение = СтрокаДанных.НомерСправки;
		
		// Данные о физическом лице - получателе дохода
		НаборЗаписейФизЛицо = СтруктураДанныхСправки.ПолучДох.Значение;
		
		//  Фамилия, Имя, Отчество
		НаборЗаписейФизЛицо.ФИО.Значение.Фамилия = СтрокаДанных.Фамилия;                     
		НаборЗаписейФизЛицо.ФИО.Значение.Имя = СтрокаДанных.Имя;                     
		НаборЗаписейФизЛицо.ФИО.Значение.Отчество = СтрокаДанных.Отчество;
		Если ПустаяСтрока(СтрокаДанных.ИНН) Тогда
			НаборЗаписейФизЛицо.Удалить("ИННФЛ");
		Иначе
			НаборЗаписейФизЛицо.ИННФЛ.Значение = СтрокаДанных.ИНН;
		КонецЕсли;
		
		НаборЗаписейФизЛицо.Удалить("ИННИно");
		
		НаборЗаписейФизЛицо.Статус.Значение = 1;
		НаборЗаписейФизЛицо.ДатаРожд.Значение = СтрокаДанных.ДатаРождения;
		НаборЗаписейФизЛицо.Гражд.Значение = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
		
		// Удостоверение личности
		НаборЗаписейДокУдЛичности = НаборЗаписейФизЛицо.УдЛичнФЛ.Значение;//  КодУдЛичн, СерНомДок 
		НаборЗаписейДокУдЛичности.КодУдЛичн = СоответствиеДокументовУдостоверяющихЛичность[СтрокаДанных.ВидДокумента];
		НаборЗаписейДокУдЛичности.СерНомДок = СокрЛП(СтрокаДанных.СерияДокумента) + " " + СокрЛП(СтрокаДанных.НомерДокумента);
		
		// Адреса
		Если ЗначениеЗаполнено(СтрокаДанных.АдресРФ) Тогда
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
					СтрокаДанных.АдресРФ, Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке);
			ЗаполнитьЗначенияСвойств(НаборЗаписейФизЛицо.АдрМЖРФ.Значение,СтруктураАдреса); //  Индекс, КодРегион, Район, Город, Улица, Дом, Корп,
			Если СтруктураАдреса.Свойство("Регион") Тогда
				КодРегиона = АдресныйКлассификатор.КодРегионаПоНаименованию(СтруктураАдреса.Регион);
				Если КодРегиона <> Неопределено Тогда
					КодРегионаСтрокой = "";
					Если ТипЗнч(КодРегиона) = Тип("Число") Тогда
						КодРегионаСтрокой = Формат(КодРегиона, "ЧЦ=2; ЧВН=; ЧГ=");		
					ИначеЕсли ТипЗнч(КодРегиона) = Тип("Строка") Тогда 	
						КодРегионаСтрокой = КодРегиона;	
					КонецЕсли;	
				КонецЕсли;	
				
				НаборЗаписейФизЛицо.АдрМЖРФ.Значение.КодРегион = КодРегионаСтрокой;
			КонецЕсли;	
			Если СтруктураАдреса.Свойство("НаселенныйПункт") Тогда
				НаборЗаписейФизЛицо.АдрМЖРФ.Значение.НаселПункт = СтруктураАдреса.НаселенныйПункт;
			КонецЕсли;	
			Если СтруктураАдреса.Свойство("Квартира") Тогда 
				НаборЗаписейФизЛицо.АдрМЖРФ.Значение.Кварт = СтруктураАдреса.Квартира;
			КонецЕсли;	
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрМЖРФ");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.АдресЗарубежом) Тогда
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
					СтрокаДанных.АдресЗарубежом, Справочники.ВидыКонтактнойИнформации.АдресФизЛицаЗаПределамиРФ);
			НаборЗаписейФизЛицо.АдрИНО.Значение.КодСтр = СоответствиеИменСтран[СтруктураАдреса.Страна];
			НаборЗаписейФизЛицо.АдрИНО.Значение.АдрТекст = СтруктураАдреса.Представление;
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрИНО");
		КонецЕсли;
		
		// Сведения об облагаемых доходах
		ФорматНаборЗаписейСведенияОДоходах = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СтруктураДанныхСправки.СведДох.Значение);
		СтруктураДанныхСправки.Удалить("СведДох");
		
		Атрибуты = ДанныеВыгружаемыеКакАтрибуты(СтруктураДанныхСправки);
		
		УзелСправки = ДобавитьУзелВДеревоXML(Узел2НДФЛ, "Документ", "", Атрибуты);
		ДобавитьИнформациюВДерево(УзелСправки, СтруктураДанныхСправки);
		
		Для каждого СтрокаИтогов Из Итоги Цикл
			
			НаборЗаписейСведенияОДоходах = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматНаборЗаписейСведенияОДоходах);
			НаборЗаписейСведенияОДоходах.Ставка.Значение = 13;
			
			НаборЗаписейДоходы = НаборЗаписейСведенияОДоходах.ДохВыч.Значение;
			ТаблицаДоходов = НаборЗаписейДоходы.СвСумДох.Значение;
			
			Если СтрокаИтогов.ОбщаяСуммаДохода > 0 Тогда
				ТаблицаСтрок = ИзвлечьДоходыПоСтавке(СтрокаИтогов.Ставка, СтрокаДанных.СтатусНалогоплательщика, ДоходыПоВидам);
				ТаблицаСтрок.Свернуть("МесяцНалоговогоПериода,КодДохода");
				ТаблицаСтрок.Сортировать("МесяцНалоговогоПериода,КодДохода");
				Для каждого СтрокаДоходов Из ТаблицаСтрок Цикл // Доходы
					
					ЗаполнитьЗначенияСвойств(СтруктураОтбораДохода, СтрокаДоходов);
					Строки = ДоходыПоВидам.НайтиСтроки(СтруктураОтбораДохода);
					СуммаДохода = 0;
					ТаблицаВычетовКДоходам.Очистить();
					Для каждого ОтобраннаяСтрока Из Строки Цикл
						СуммаДохода = СуммаДохода + ОтобраннаяСтрока.СуммаДохода;
						Если ЗначениеЗаполнено(ОтобраннаяСтрока.КодВычета) И ЗначениеЗаполнено(ОтобраннаяСтрока.СуммаВычета) Тогда
							ЗаполнитьЗначенияСвойств(ТаблицаВычетовКДоходам.Добавить(), ОтобраннаяСтрока);	
						КонецЕсли;	
					КонецЦикла;
					
					СтрокаТЗ = ТаблицаДоходов.Добавить();
					СтрокаТЗ.Месяц = ?(СтрДлина(СтрокаДоходов.МесяцНалоговогоПериода) = 1,"0","") + СтрокаДоходов.МесяцНалоговогоПериода;
					СтрокаТЗ.КодДоход = СоответствиеКодовДоходов[СтрокаДоходов.КодДохода];
					СтрокаТЗ.СумДоход = СуммаДохода;
					Если ТаблицаВычетовКДоходам.Количество() > 0 Тогда
						ТаблицаДляСтроки = ТаблицаВычетовКДоходам.Скопировать();
						ТаблицаДляСтроки.Колонки.КодВычетаСтрокой.Имя = "КодВычет";
						ТаблицаДляСтроки.Колонки.СуммаВычета.Имя = "СумВычет";
						ОписаниеФормата = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(НаборЗаписейСведенияОДоходах.НалВычССИ.Значение.ПредВычССИ);
						ОписаниеФормата.Значение = ТаблицаДляСтроки;
						СтрокаТЗ.СвСумВыч = Новый Структура("СвСумВыч", ОписаниеФормата);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
				
			// Налоговые вычеты
			Если ВычетыПоВидам.Количество() > 0 И СтрокаИтогов.Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
				
				НаборЗаписейВычет = НаборЗаписейСведенияОДоходах.НалВычССИ.Значение;
				ТаблицаВычетов = НаборЗаписейВычет.ПредВычССИ.Значение;
				Для каждого СтрокаВычетов Из ВычетыПоВидам Цикл // Вычеты
					СтрокаТЗ = ТаблицаВычетов.Добавить();
					СтрокаТЗ.КодВычет = СоответствиеКодовВычетов[СтрокаВычетов.КодВычета];
					СтрокаТЗ.СумВычет = СтрокаВычетов.СуммаВычета;
				КонецЦикла;
				
				Если ВычетыПоВидам.Найти(Перечисления.ГруппыВычетовПоНДФЛ.Имущественные, "ГруппаВычета") <> Неопределено Тогда
					ТаблицаУведомлений = НаборЗаписейВычет.УведИмущВыч.Значение;
					Уведомление = ТаблицаУведомлений.Добавить();
					Уведомление.НомерУвед = СтрокаДанных.НомерУведомления;
					Уведомление.ДатаУвед = СтрокаДанных.ДатаУведомления;
					Уведомление.ИФНСУвед = СтрокаДанных.КодНалоговогоОрганаУведомления;
				КонецЕсли;
				
				Если ВычетыПоВидам.Найти(Перечисления.ГруппыВычетовПоНДФЛ.Социальные, "ГруппаВычета") <> Неопределено Тогда
					ТаблицаУведомлений = НаборЗаписейВычет.УведСоцВыч.Значение;
					Уведомление = ТаблицаУведомлений.Добавить();
					Уведомление.НомерУвед = "";
					Уведомление.ДатаУвед = "";
					Уведомление.ИФНСУвед = "";
				КонецЕсли;
				
			Иначе
				НаборЗаписейСведенияОДоходах.Удалить("НалВычССИ");
			КонецЕсли;
			
			// Общая сумма дохода и налога на доходы по итогам налогового периода
			
			СтруктураСГДНалПер = НаборЗаписейСведенияОДоходах.СумИтНалПер.Значение;
			СтруктураСГДНалПер.СумДохОбщ.Значение = СтрокаИтогов.ОбщаяСуммаДохода;
			СтруктураСГДНалПер.НалБаза.Значение = СтрокаИтогов.ОблагаемаяСуммаДохода;
			СтруктураСГДНалПер.НалИсчисл.Значение = СтрокаИтогов.Исчислено;
			СтруктураСГДНалПер.НалУдерж.Значение = СтрокаИтогов.Удержано;
			СтруктураСГДНалПер.НалПеречисл.Значение = СтрокаИтогов.Перечислено;
			СтруктураСГДНалПер.НалУдержЛиш.Значение = СтрокаИтогов.ИзлишнеУдержано;
			СтруктураСГДНалПер.НалНеУдерж.Значение = СтрокаИтогов.Задолженность;
			
			СтруктураСГДНалПер.Удалить("УведФиксПлат");
			
			Атрибуты = ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейСведенияОДоходах);
			УзелСведенияОДоходах = ДобавитьУзелВДеревоXML(УзелСправки, "СведДох","", Атрибуты);
			ДобавитьИнформациюВДерево(УзелСведенияОДоходах, НаборЗаписейСведенияОДоходах);
			
		КонецЦикла;
		
	КонецЦикла;
		
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = СоздатьПотокXML();
	ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	// получаем содержимое файла в виде строки
	СтрокаXML = ПотокВыгрузкиXML.Закрыть();
	
	Возврат СтрокаXML

КонецФункции

Процедура ДополнитьТаблицуСВычетами(ТаблицаСВычетами, СведенияОВычетах)
	
	Для каждого СтрокаТЗ Из ТаблицаСВычетами Цикл
		СтрокаВычета = СведенияОВычетах.Найти(СтрокаТЗ.КодВычета, "Ссылка");
		Если СтрокаВычета <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтрокаВычета);
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

//Вовращает номер пачки документа
Функция НомерПачкиДокумента(Знач НомерДокумента) Экспорт

	НомерПачки = "";

	НомерДокумента = СокрП(НомерДокумента);
	
	//Возьмём все цифры в правой части номера
	ДлинаНомера = СтрДлина(НомерДокумента);
	Для Н=1 по ДлинаНомера цикл
		Символ = Сред(НомерДокумента,ДлинаНомера-Н+1,1); 	
		Если (Символ>="0") и (Символ<="9") тогда
			НомерПачки = Символ+НомерПачки;
		Иначе
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	

	Если НомерПачки <> "" тогда
		Возврат Формат(Число(Прав(НомерПачки, 5)), "ЧГ=0"); 
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ДанныеОДоходах(ТаблицаСотрудников, НалоговыйПериод, Организация, ГоловнаяОрганизация, ОКАТО_КПП, Дата) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылки", ТаблицаСотрудников);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ГодНП",НалоговыйПериод);
	НачалоНалоговогоПериода = Дата(НалоговыйПериод, 1, 1);
	КонецНалоговогоПериода = КонецГода(НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецНП",КонецНалоговогоПериода);
	Запрос.УстановитьПараметр("НачалоНП", НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("НачалоСледующегоНП", КонецНалоговогоПериода + 1); // начало следующего налогового периода
	Запрос.УстановитьПараметр("ДатаПодачиСведений", Дата);
	Запрос.УстановитьПараметр("ДатаДоПодачиСведений", Дата - 1);
	ЧитатьСводныеДанные = ОКАТО_КПП = Неопределено;
	Запрос.УстановитьПараметр("ЧитатьСводныеДанные", ЧитатьСводныеДанные);
	Запрос.УстановитьПараметр("ЧитатьСводныеДанныеПоСтавкам", ЧитатьСводныеДанные Или НалоговыйПериод > 2010);
	Запрос.УстановитьПараметр("РазделятьИтогиПоСтавкам", НалоговыйПериод > 2010);
	Запрос.УстановитьПараметр("ОКАТО_КПП", ОКАТО_КПП);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Сотрудник КАК Сотрудник,
	|	СотрудникиОрганизаций.НомерСправки,
	|	СотрудникиОрганизаций.Ставка
	|ПОМЕСТИТЬ ВТФизлица
	|ИЗ
	|	&Ссылки КАК СотрудникиОрганизаций";
	Запрос.Выполнить();
	НачМесяца = НачалоНалоговогоПериода;
	ДатыПоМесяцамТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
	ДатыПоМесяцамТекст = ДатыПоМесяцамТекст + "
	|ПОМЕСТИТЬ ВТПериодыНалогаНаДоходы";
	Пока НачМесяца < НачалоМесяца(КонецНалоговогоПериода) Цикл
		НачМесяца = НачалоМесяца(КонецМесяца(НачМесяца) + 1);
		ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	Запрос.Текст = ДатыПоМесяцамТекст;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.НомерСправки,
	|	ЕСТЬNULL(НДФЛИмущественныйВычет.ДатаУведомления, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУведомления,
	|	ЕСТЬNULL(НДФЛИмущественныйВычет.КодИФНС, """") КАК КодНалоговогоОрганаУведомления,
	|	ЕСТЬNULL(НДФЛИмущественныйВычет.НомерУведомления, """") КАК НомерУведомления
	|ПОМЕСТИТЬ ВТУведомления
	|ИЗ
	|	ВТФизлица КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛИмущественныйВычет КАК НДФЛИмущественныйВычет
	|		ПО СотрудникиОрганизаций.Сотрудник = НДФЛИмущественныйВычет.Сотрудник
	|			И (НДФЛИмущественныйВычет.Период < &ДатаПодачиСведений)
	|			И (ГОД(НДФЛИмущественныйВычет.Период) = &ГодНП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.НомерСправки,
	|	МЕСЯЦ(НДФЛСведенияОДоходах.Период) КАК Месяц,
	|	НДФЛСведенияОДоходах.КодДохода,
	|	НДФЛСведенияОДоходах.КодВычета,
	|	СУММА(НДФЛСведенияОДоходах.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛСведенияОДоходах.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ НДФЛСведенияОДоходах.СуммаВычета
	|		КОНЕЦ) КАК СуммаВычета
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	ВТФизлица КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛДоходы КАК НДФЛСведенияОДоходах
	|		ПО СотрудникиОрганизаций.Сотрудник = НДФЛСведенияОДоходах.Сотрудник
	|			И (НДФЛСведенияОДоходах.Организация = &ГоловнаяОрганизация)
	|			И (ГОД(НДФЛСведенияОДоходах.Период) = &ГодНП)
	|			И (НДФЛСведенияОДоходах.ПериодРегистрации < &ДатаПодачиСведений)
	|ГДЕ
	|	НДФЛСведенияОДоходах.КодДохода ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиОрганизаций.НомерСправки,
	|	НДФЛСведенияОДоходах.КодДохода,
	|	НДФЛСведенияОДоходах.КодВычета,
	|	МЕСЯЦ(НДФЛСведенияОДоходах.Период)
	|
	|ИМЕЮЩИЕ
	|	СУММА(НДФЛСведенияОДоходах.СуммаДохода) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.НомерСправки КАК НомерСправки,
	|	ПримененныеВычетыПоНДФЛ.КодВычета КАК КодВычета,
	|	ПримененныеВычетыПоНДФЛ.СуммаВычета,
	|	ПримененныеВычетыПоНДФЛ.Период КАК МесяцНалоговогоПериода,
	|	СотрудникиОрганизаций.Сотрудник КАК ФизЛицо
	|ПОМЕСТИТЬ ВтВычеты
	|ИЗ
	|	ВТФизлица КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПримененныеВычетыПоНДФЛ КАК ПримененныеВычетыПоНДФЛ
	|		ПО СотрудникиОрганизаций.Сотрудник = ПримененныеВычетыПоНДФЛ.Сотрудник
	|			И (ПримененныеВычетыПоНДФЛ.Период < &ДатаПодачиСведений)
	|			И (ГОД(ПримененныеВычетыПоНДФЛ.Период) = &ГодНП)
	|			И (ПримененныеВычетыПоНДФЛ.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	ПримененныеВычетыПоНДФЛ.КодВычета ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыИВычеты.НомерСправки,
	|	СУММА(ДоходыИВычеты.ОбщаяСуммаДохода) КАК ОбщаяСуммаДохода,
	|	СУММА(ДоходыИВычеты.ОблагаемаяСуммаДохода) КАК ОблагаемаяСуммаДохода
	|ПОМЕСТИТЬ ВТИтогиДоходов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Доходы.НомерСправки КАК НомерСправки,
	|		Доходы.СуммаДохода КАК ОбщаяСуммаДохода,
	|		Доходы.СуммаДохода - Доходы.СуммаВычета КАК ОблагаемаяСуммаДохода,
	|		Доходы.КодДохода КАК КодДохода
	|	ИЗ
	|		ВТДоходы КАК Доходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Вычеты.НомерСправки,
	|		0,
	|		-Вычеты.СуммаВычета,
	|		ЗНАЧЕНИЕ(Справочник.КодыДоходовНДФЛ.Код2000)
	|	ИЗ
	|		ВтВычеты КАК Вычеты) КАК ДоходыИВычеты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИВычеты.НомерСправки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправкиОДоходах.НомерСправки КАК НомерСправки,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НДФЛНачисленоУдержано.ПериодРегистрации МЕЖДУ &НачалоНП И &КонецНП
	|					ТОГДА НДФЛНачисленоУдержано.СуммаПриход
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК НачисленоЗаТекущийГод,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НДФЛНачисленоУдержано.ПериодРегистрации < &НачалоСледующегоНП
	|					ТОГДА НДФЛНачисленоУдержано.СуммаПриход
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК НачисленоЗаВсеГоды,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НДФЛНачисленоУдержано.ПериодРегистрации МЕЖДУ &НачалоНП И &КонецНП
	|					ТОГДА НДФЛНачисленоУдержано.СуммаРасход
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК УдержаноЗаТекущийГод,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НДФЛНачисленоУдержано.ПериодРегистрации < &НачалоСледующегоНП
	|					ТОГДА НДФЛНачисленоУдержано.СуммаРасход
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК УдержаноЗаВсеГоды
	|ПОМЕСТИТЬ ВТНалоги
	|ИЗ
	|	ВТФизлица КАК СправкиОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛРасчетыНалоговыхАгентовСБюджетом.Обороты(, &ДатаПодачиСведений,, Организация = &ГоловнаяОрганизация) КАК НДФЛНачисленоУдержано
	|		ПО  СправкиОДоходах.Сотрудник = НДФЛНачисленоУдержано.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	СправкиОДоходах.НомерСправки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.ПериодРегистрации КАК МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетом.Сотрудник КАК ФизЛицо,
	|	СУММА(НДФЛРасчетыСБюджетом.СуммаВычета) КАК Налог
	|ПОМЕСТИТЬ ВТУдержаноНДФЛПоМесяцам
	|ИЗ
	|	РегистрНакопления.ПримененныеВычетыПоНДФЛ КАК НДФЛРасчетыСБюджетом
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.СуммаВычета < 0
	|	И НДФЛРасчетыСБюджетом.ПериодРегистрации МЕЖДУ &НачалоНП И &КонецНП
	|	И НДФЛРасчетыСБюджетом.Период < &ДатаПодачиСведений
	|	И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|	И НДФЛРасчетыСБюджетом.Сотрудник В
	|			(ВЫБРАТЬ
	|				ФизическиеЛица.Сотрудник
	|			ИЗ
	|				ВТФизлица КАК ФизическиеЛица)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.ПериодРегистрации,
	|	НДФЛРасчетыСБюджетом.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|
	|ВЫБРАТЬ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.Сотрудник КАК ФизЛицо,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.СуммаРасход,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ПериодРегистрации КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ВТПеречисленоНДФЛПоМесяцам
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыНалоговыхАгентовСБюджетом.Обороты(
	|			&НачалоНП,
	|			&ДатаДоПодачиСведений,
	|			,
	|			Организация = &Организация
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						ФизическиеЛица.Сотрудник
	|					ИЗ
	|						ВТФизлица КАК ФизическиеЛица)
	|				И (ПериодРегистрации МЕЖДУ &НачалоНП И &КонецНП)) КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты
	| ОБЪЕДИНИТЬ ВСЕ 
	|ВЫБРАТЬ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.Сотрудник,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.СуммаРасход,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ПериодРегистрации
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыНалоговыхАгентовСБюджетом.Обороты(
	|			&НачалоНП,
	|			&ДатаДоПодачиСведений,
	|			,
	|			Организация = &Организация
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						ФизическиеЛица.Сотрудник
	|					ИЗ
	|						ВТФизлица КАК ФизическиеЛица)
	|				И (ПериодРегистрации МЕЖДУ &НачалоНП И &КонецНП)) КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты
	|ГДЕ Год(РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ПериодРегистрации) < 2012
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Перечислено.ФизЛицо,
	|	СУММА(Перечислено.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТПеречисленоНДФЛ
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ФизЛицо КАК ФизЛицо,
	|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.СуммаРасход КАК Сумма
	|	ИЗ
	|		ВТПеречисленоНДФЛПоМесяцам КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержаноНДФЛПоМесяцам КАК УдержаноНДФЛПоСтавке13
	|			ПО РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ФизЛицо = УдержаноНДФЛПоСтавке13.ФизЛицо
	|				И РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.МесяцНалоговогоПериода = УдержаноНДФЛПоСтавке13.МесяцНалоговогоПериода) КАК Перечислено
	|
	|СГРУППИРОВАТЬ ПО
	|	Перечислено.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.НомерСправки КАК НомерСправки,
	|	Доходы.Месяц КАК Месяц,
	|	Доходы.КодДохода,
	|	ВЫБОР
	|		КОГДА Доходы.СуммаВычета = 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ Доходы.КодВычета
	|	КОНЕЦ КАК КодВычета,
	|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
	|	СУММА(Доходы.СуммаВычета) КАК СуммаВычета
	|ПОМЕСТИТЬ ВТДоходыПоМесяцам
	|ИЗ
	|	ВТДоходы КАК Доходы
	|ГДЕ
	|	Доходы.Месяц ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Месяц,
	|	Доходы.НомерСправки,
	|	Доходы.КодДохода,
	|	ВЫБОР
	|		КОГДА Доходы.СуммаВычета = 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ Доходы.КодВычета
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Доходы.НомерСправки,
	|	Доходы.КодДохода,
	|	Доходы.Месяц
	|ПОМЕСТИТЬ ВТОсобыеМесяцы
	|ИЗ
	|	ВТДоходыПоМесяцам КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.НомерСправки,
	|	Доходы.КодДохода,
	|	Доходы.Месяц
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА Доходы.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) = 2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МесяцыОсобыхВычетов.НомерСправки,
	|	МесяцыОсобыхВычетов.КодДохода,
	|	МесяцыОсобыхВычетов.Месяц,
	|	МАКСИМУМ(Доходы.КодВычета) КАК КодВычета
	|ПОМЕСТИТЬ ВТСтрокиСУказаннымВычетом
	|ИЗ
	|	ВТОсобыеМесяцы КАК МесяцыОсобыхВычетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПоМесяцам КАК Доходы
	|		ПО МесяцыОсобыхВычетов.НомерСправки = Доходы.НомерСправки
	|			И МесяцыОсобыхВычетов.КодДохода = Доходы.КодДохода
	|			И МесяцыОсобыхВычетов.Месяц = Доходы.Месяц
	|ГДЕ
	|	Доходы.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	МесяцыОсобыхВычетов.НомерСправки,
	|	МесяцыОсобыхВычетов.КодДохода,
	|	МесяцыОсобыхВычетов.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МесяцыОсобыхВычетов.НомерСправки,
	|	МесяцыОсобыхВычетов.КодДохода,
	|	МесяцыОсобыхВычетов.Месяц,
	|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
	|ПОМЕСТИТЬ ВТДоходыИзСтрокБезВычетов
	|ИЗ
	|	ВТОсобыеМесяцы КАК МесяцыОсобыхВычетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПоМесяцам КАК Доходы
	|		ПО МесяцыОсобыхВычетов.НомерСправки = Доходы.НомерСправки
	|			И МесяцыОсобыхВычетов.КодДохода = Доходы.КодДохода
	|			И МесяцыОсобыхВычетов.Месяц = Доходы.Месяц
	|ГДЕ
	|	Доходы.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	МесяцыОсобыхВычетов.НомерСправки,
	|	МесяцыОсобыхВычетов.КодДохода,
	|	МесяцыОсобыхВычетов.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.НомерСправки КАК НомерСправки,
	|	Доходы.Месяц КАК Месяц,
	|	Доходы.КодДохода,
	|	Доходы.КодДохода.Код КАК КодДоходаКодДляОтчетности,
	|	Доходы.КодВычета КАК КодВычета,
	|	Доходы.СуммаДохода + ВЫБОР
	|		КОГДА СтрокиСУказаннымВычетом.НомерСправки ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ДоходыИзСтрокБезВычетов.СуммаДохода, 0)
	|	КОНЕЦ КАК СуммаДохода,
	|	Доходы.СуммаВычета КАК СуммаВычета
	|ИЗ
	|	ВТДоходыПоМесяцам КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсобыеМесяцы КАК СтрокиБезКодаВычета
	|		ПО Доходы.НомерСправки = СтрокиБезКодаВычета.НомерСправки
	|			И Доходы.КодДохода = СтрокиБезКодаВычета.КодДохода
	|			И Доходы.Месяц = СтрокиБезКодаВычета.Месяц
	|			И (Доходы.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыИзСтрокБезВычетов КАК ДоходыИзСтрокБезВычетов
	|		ПО Доходы.НомерСправки = ДоходыИзСтрокБезВычетов.НомерСправки
	|			И Доходы.Месяц = ДоходыИзСтрокБезВычетов.Месяц
	|			И Доходы.КодДохода = ДоходыИзСтрокБезВычетов.КодДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиСУказаннымВычетом КАК СтрокиСУказаннымВычетом
	|		ПО Доходы.НомерСправки = СтрокиСУказаннымВычетом.НомерСправки
	|			И Доходы.Месяц = СтрокиСУказаннымВычетом.Месяц
	|			И Доходы.КодДохода = СтрокиСУказаннымВычетом.КодДохода
	|			И Доходы.КодВычета = СтрокиСУказаннымВычетом.КодВычета
	|ГДЕ
	|	СтрокиБезКодаВычета.НомерСправки ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСправки,
	|	Месяц,
	|	КодДоходаКодДляОтчетности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вычеты.НомерСправки КАК НомерСправки,
	|	Вычеты.КодВычета,
	|	СУММА(Вычеты.СуммаВычета) КАК СуммаВычета,
	|	Вычеты.КодВычета.Код КАК КодВычетаКод
	|ИЗ
	|	ВтВычеты КАК Вычеты
	|ГДЕ
	|	Вычеты.КодВычета ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Вычеты.НомерСправки,
	|	Вычеты.КодВычета,
	|	Вычеты.КодВычета.Код
	|
	|ИМЕЮЩИЕ
	|	СУММА(Вычеты.СуммаВычета) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСправки,
	|	КодВычетаКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.НомерСправки КАК НомерСправки,
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13) КАК Ставка,
	|	ИтогиДоходов.ОбщаяСуммаДохода,
	|	ИтогиДоходов.ОблагаемаяСуммаДохода,
	|	Налоги.НачисленоЗаТекущийГод КАК Исчислено,
	|	Налоги.УдержаноЗаТекущийГод КАК Удержано,
	|	ЕСТЬNULL(ПеречисленоНДФЛ.Сумма, 0) КАК Перечислено,
	|	ВЫБОР
	|		КОГДА Налоги.НачисленоЗаВсеГоды - Налоги.УдержаноЗаВсеГоды > 0
	|			ТОГДА Налоги.НачисленоЗаВсеГоды - Налоги.УдержаноЗаВсеГоды
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Задолженность,
	|	ВЫБОР
	|		КОГДА Налоги.НачисленоЗаВсеГоды - Налоги.УдержаноЗаВсеГоды < 0
	|			ТОГДА -(Налоги.НачисленоЗаВсеГоды - Налоги.УдержаноЗаВсеГоды)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИзлишнеУдержано,
	|	Уведомления.ДатаУведомления,
	|	Уведомления.КодНалоговогоОрганаУведомления,
	|	Уведомления.НомерУведомления
	|ИЗ
	|	ВТФизлица КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУведомления КАК Уведомления
	|		ПО СотрудникиОрганизаций.НомерСправки = Уведомления.НомерСправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтогиДоходов КАК ИтогиДоходов
	|		ПО СотрудникиОрганизаций.НомерСправки = ИтогиДоходов.НомерСправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНалоги КАК Налоги
	|		ПО СотрудникиОрганизаций.НомерСправки = Налоги.НомерСправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПеречисленоНДФЛ КАК ПеречисленоНДФЛ
	|		ПО СотрудникиОрганизаций.Сотрудник = ПеречисленоНДФЛ.ФизЛицо
	|ГДЕ
	|	(ИтогиДоходов.НомерСправки ЕСТЬ НЕ NULL 
	|				И (ИтогиДоходов.ОбщаяСуммаДохода <> 0
	|					ИЛИ ИтогиДоходов.ОблагаемаяСуммаДохода <> 0)
	|			ИЛИ Налоги.НомерСправки ЕСТЬ НЕ NULL 
	|				И (Налоги.НачисленоЗаТекущийГод <> 0
	|					ИЛИ Налоги.УдержаноЗаТекущийГод <> 0
	|					ИЛИ Налоги.НачисленоЗаВсеГоды - Налоги.УдержаноЗаВсеГоды <> 0)
	|			ИЛИ ПеречисленоНДФЛ.Сумма ЕСТЬ НЕ NULL 
	|				И ПеречисленоНДФЛ.Сумма <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСправки";

	Результаты = Запрос.ВыполнитьПакет();
	ВсегоЗапросов = Результаты.Количество();
	
	Возврат Новый Структура("Доходы, Вычеты, Итоги", Результаты[ВсегоЗапросов - 3].Выгрузить(), Результаты[ВсегоЗапросов - 2].Выгрузить(), Результаты[ВсегоЗапросов - 1].Выгрузить());
	
КонецФункции

Функция ДанныеПодписывающихЛиц(Организация, ДатаАктуальности, ЭтоЮрЛицо = Неопределено, РасшифровкаПодписи = Ложь) Экспорт
	
	Если ЭтоЮрЛицо = Неопределено Тогда
		ЭтоЮрЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("Руководитель, ДолжностьРуководителя, ГлавныйБухгалтер, СправкуПодписал, ДолжностьПодписавшегоЛица");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ЭтоЮрЛицо Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо,
		|	ОтветственныеЛицаСрезПоследних.ТипОтветственногоЛица КАК ОтветственноеЛицо,
		|	ОтветственныеЛицаСрезПоследних.Должность КАК Должность
		|ПОМЕСТИТЬ ВТОтветственныеЛица
		|ИЗ
		|	РегистрСведений.ОтветственныеЛица.СрезПоследних(
		|			&Дата,
		|			Организация = &Организация
		|				И ТипОтветственногоЛица В (ЗНАЧЕНИЕ(Перечисление.ТипыОтветственныхЛиц.ГлавныйБухгалтер), ЗНАЧЕНИЕ(Перечисление.ТипыОтветственныхЛиц.Руководитель))) КАК ОтветственныеЛицаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛица.ОтветственноеЛицо,
		|	ОтветственныеЛица.Должность,
		|	ФИО.Фамилия КАК Фамилия,
		|	ФИО.Имя КАК Имя,
		|	ФИО.Отчество КАК Отчество
		|ИЗ
		|	ВТОтветственныеЛица КАК ОтветственныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИО
		|		ПО ОтветственныеЛица.ФизЛицо = ФИО.ФизЛицо";
		Запрос.УстановитьПараметр("Дата", ДатаАктуальности - 1);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ОтветственноеЛицо = Перечисления.ТипыОтветственныхЛиц.ГлавныйБухгалтер Тогда
				СтруктураДанных.ДолжностьПодписавшегоЛица = Выборка.Должность;
				Если РасшифровкаПодписи Тогда
					СтруктураДанных.ГлавныйБухгалтер = СокрЛП(Выборка.Имя)+" "+ СокрЛП(Выборка.Отчество) +" "+СокрЛП(Выборка.Фамилия);
				Иначе
					СтруктураДанных.ГлавныйБухгалтер = СокрЛП(Выборка.Фамилия) +" "+СокрЛП(Выборка.Имя)+" "+СокрЛП(Выборка.Отчество);
				КонецЕсли;
				
				СтруктураДанных.СправкуПодписал = СтруктураДанных.ГлавныйБухгалтер;
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ТипыОтветственныхЛиц.Руководитель Тогда
				СтруктураДанных.ДолжностьРуководителя = Выборка.Должность;
				Если РасшифровкаПодписи Тогда
					СтруктураДанных.Руководитель = СокрЛП(Выборка.Имя)+" "+ СокрЛП(Выборка.Отчество) +" "+СокрЛП(Выборка.Фамилия);
				Иначе
					СтруктураДанных.Руководитель = СокрЛП(Выборка.Фамилия) +" "+СокрЛП(Выборка.Имя)+" "+СокрЛП(Выборка.Отчество);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИП = РегламентированнаяОтчетностьПереопределяемый.ФИОИндивидуальногоПредпринимателя(Организация);
		Если ИП <> Неопределено Тогда
			Если РасшифровкаПодписи Тогда
				СтруктураДанных.Руководитель = СокрЛП(ИП.Имя)+" "+СокрЛП(ИП.Отчество)+" "+СокрЛП(ИП.Фамилия);
			Иначе
				СтруктураДанных.Руководитель = СокрЛП(ИП.Фамилия) +" "+ СокрЛП(ИП.Имя)+" "+СокрЛП(ИП.Отчество);
			КонецЕсли;
		КонецЕсли;
		СтруктураДанных.ДолжностьРуководителя  = НСтр("ru='Руководитель'");
		СтруктураДанных.ГлавныйБухгалтер = СтруктураДанных.Руководитель;
		СтруктураДанных.СправкуПодписал = СтруктураДанных.Руководитель;
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции // ДанныеРуководителяОрганизации()

Функция ДанныеСотрудников(ТаблицаСотрудников, Дата, НалоговыйПериод) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", ТаблицаСотрудников);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("КонецНП",КонецГода(Дата(НалоговыйПериод,1,1)));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Сотрудник,
	|	СотрудникиОрганизаций.Ставка
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&Ссылки КАК СотрудникиОрганизаций";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПаспортныеДанныеФизЛицСрезПоследних.Физлицо,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ВидДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.Серия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.Номер
	|ПОМЕСТИТЬ ВТПаспортныеДанные
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			&Дата,
	|			Физлицо В
	|				(ВЫБРАТЬ
	|					Сотрудники.Сотрудник.ФизЛицо
	|				ИЗ
	|					ВТСотрудники КАК Сотрудники)) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.Ставка,
	|	ФИОФизЛиц.Фамилия,
	|	ФИОФизЛиц.Имя,
	|	ФИОФизЛиц.Отчество,
	|	СотрудникиАдрес.ЗначенияПолей КАК АдресРФ,
	|	"""" КАК АдресЗарубежом,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.Серия КАК СерияДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.Номер КАК НомерДокумента,
	|	ФизическиеЛица.ДатаРождения,
	|	ФизическиеЛица.ИНН,
	|	ФизическиеЛица.Наименование КАК Наименование,
	|	ФизическиеЛица.Гражданство КАК Гражданство,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент) КАК СтатусНалогоплательщика
	|	
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Сотрудники.Сотрудник.ФизЛицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК СотрудникиАдрес
	|		ПО (ФизическиеЛица.Ссылка = СотрудникиАдрес.Ссылка)
	|			И (СотрудникиАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПаспортныеДанные КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ПаспортныеДанныеФизЛицСрезПоследних.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата) КАК ФИОФизЛиц
	|		ПО  ФизическиеЛица.Ссылка = ФИОФизЛиц.ФизЛицо
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Возврат Запрос.Выполнить().Выгрузить()
	
КонецФункции

// Формирует имя файла в установленном формате для организации документа
//
// Параметры
// 	ЭтоЮрЛицо - булево, дополнительная характеристика организации
//
// Возвращаемое значение:
//  Строка с именем файла
//
Функция ИмяФайлаОбмена(Параметры, Дата, ЭтоЮрЛицо) Экспорт
	
	Возврат "NO_NDFL2"
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПолучателя), Параметры.КодИФНСПолучателя, Параметры.КодНалоговогоОрганаПолучателя)
			+ "_" + Параметры.КодНалоговогоОрганаПолучателя
			+ "_" + ?(ЭтоЮрЛицо, СокрЛП(Параметры.ИНН) + СокрЛП(Параметры.КПП), СокрЛП(Параметры.ИНН))
			+ "_" + Формат(Дата, "ДФ=ггггММдд")
			+ "_" + Новый УникальныйИдентификатор();
	
КонецФункции // ИмяФайлаОбмена()

Функция СправкиНДФЛДанныеДляПечати(МассивОбъектов, ПолучатьИтоговыеСуммы = Ложь) Экспорт
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		ИсточникДанных = МассивОбъектов[0].Метаданные().ПолноеИмя();
		ЭтоСправкаДляНалоговогоОргана = (ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган"));
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Если ПолучатьИтоговыеСуммы Тогда
		Если ЭтоСправкаДляНалоговогоОргана Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.НомерСправки) КАК НомерСправки,
			|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка
			|ПОМЕСТИТЬ ВТКоличествоСправок
			|ИЗ
			|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.СотрудникиОрганизации КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
			|ГДЕ
			|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка В(&МассивОбъектов)
			|
			|СГРУППИРОВАТЬ ПО
			|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ОбщаяСуммаДохода) КАК ОбщаяСуммаДохода,
			|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ОблагаемаяСуммаДохода) КАК ОблагаемаяСуммаДохода,
			|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Исчислено) КАК Исчислено,
			|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Удержано) КАК Удержано,
			|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Задолженность) КАК Задолженность,
			|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ИзлишнеУдержано) КАК ИзлишнеУдержано,
			|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Перечислено) КАК Перечислено,
			|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка
			|ПОМЕСТИТЬ ВТСуммыНалогов
			|ИЗ
			|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.СуммыНалогов КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
			|ГДЕ
			|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка В(&МассивОбъектов)
			|
			|СГРУППИРОВАТЬ ПО
			|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СправкаНДФЛ.Ссылка,
			|	1 КАК НомерСправки
			|ПОМЕСТИТЬ ВТКоличествоСправок
			|ИЗ
			|	Документ.СправкаНДФЛ КАК СправкаНДФЛ
			|ГДЕ
			|	СправкаНДФЛ.Ссылка В(&МассивОбъектов)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(СправкаНДФЛ.ОбщаяСуммаДохода) КАК ОбщаяСуммаДохода,
			|	СУММА(СправкаНДФЛ.ОблагаемаяСуммаДохода) КАК ОблагаемаяСуммаДохода,
			|	СУММА(СправкаНДФЛ.Исчислено) КАК Исчислено,
			|	СУММА(СправкаНДФЛ.Удержано) КАК Удержано,
			|	СУММА(СправкаНДФЛ.Задолженность) КАК Задолженность,
			|	СУММА(СправкаНДФЛ.ИзлишнеУдержано) КАК ИзлишнеУдержано,
			|	СУММА(СправкаНДФЛ.Перечислено) КАК Перечислено,
			|	СправкаНДФЛ.Ссылка
			|ПОМЕСТИТЬ ВТСуммыНалогов
			|ИЗ
			|	Документ.СправкаНДФЛ.СуммыНалогов КАК СправкаНДФЛ
			|ГДЕ
			|	СправкаНДФЛ.Ссылка В(&МассивОбъектов)
			|
			|СГРУППИРОВАТЬ ПО
			|	СправкаНДФЛ.Ссылка";
		КонецЕсли;
		
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.НалоговыйПериод,
		|	ДанныеДокумента.РегистрацияВНалоговомОргане.КодПоОКАТО КАК ОКАТО,
		|	ДанныеДокумента.РегистрацияВНалоговомОргане.КодПоОКТМО КАК ОКТМО,
		|	ДанныеДокумента.РегистрацияВНалоговомОргане.КПП КАК КПП,
		|	Организации.КодНалоговогоОрганаПолучателя КАК КодНалоговогоОргана,
		|	ДанныеДокумента.Дата,
		|	ДанныеДокумента.Телефон,
		|	ДанныеДокумента.ДолжностьПодписавшегоЛица,
		|	ДанныеДокумента.СправкуПодписал,
		|	ДанныеДокумента.Номер,
		|	Организации.ИНН,
		|	Организации.ЮридическоеФизическоеЛицо,
		|	Организации.НаименованиеПолное,
		|	Организации.Наименование КАК НаименованиеСокращенное,
		|	ФИОФизЛиц.Фамилия,
		|	ФИОФизЛиц.Имя,
		|	ФИОФизЛиц.Отчество,
		|	ДанныеДокумента.Ссылка,
		|	ДанныеДокумента.МоментВремени,
		|	ЕСТЬNULL(ДанныеОНалогах.ОбщаяСуммаДохода, 0) КАК ОбщаяСуммаДохода,
		|	ЕСТЬNULL(ДанныеОНалогах.Исчислено, 0) КАК Исчислено,
		|	ЕСТЬNULL(ДанныеОНалогах.Удержано, 0) КАК Удержано,
		|	КоличествоСправок.НомерСправки КАК КоличествоСправок
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	#ИсточникДанных КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ДанныеДокумента.Организация = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСправок КАК КоличествоСправок
		|		ПО ДанныеДокумента.Ссылка = КоличествоСправок.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыНалогов КАК ДанныеОНалогах
		|		ПО ДанныеДокумента.Ссылка = ДанныеОНалогах.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних() КАК ФИОФизЛиц
		|		ПО  Организации.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
		|ГДЕ
		|	ДанныеДокумента.Ссылка В(&МассивОбъектов)";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.НалоговыйПериод,
		|	ДанныеДокумента.РегистрацияВНалоговомОргане.КодПоОКАТО КАК ОКАТО,
		|	ДанныеДокумента.РегистрацияВНалоговомОргане.КодПоОКТМО КАК ОКТМО,
		|	ДанныеДокумента.РегистрацияВНалоговомОргане.КПП КАК КПП,
		|	Организации.КодНалоговогоОрганаПолучателя КАК КодНалоговогоОргана,
		|	ДанныеДокумента.Дата,
		|	ДанныеДокумента.Телефон,
		|	ДанныеДокумента.ДолжностьПодписавшегоЛица,
		|	ДанныеДокумента.СправкуПодписал,
		|	Организации.ИНН,
		|	Организации.ЮридическоеФизическоеЛицо,
		|	Организации.НаименованиеПолное,
		|	Организации.Наименование КАК НаименованиеСокращенное,
		|	ФИОФизЛиц.Фамилия,
		|	ФИОФизЛиц.Имя,
		|	ФИОФизЛиц.Отчество,
		|	ДанныеДокумента.Ссылка,
		|	ДанныеДокумента.МоментВремени,
		|	ДанныеДокумента.Номер,
		|	0 КАК ОбщаяСуммаДохода,
		|	0 КАК Исчислено,
		|	0 КАК Удержано,
		|	0 КАК КоличествоСправок
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	#ИсточникДанных КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ДанныеДокумента.Организация = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних() КАК ФИОФизЛиц
		|		ПО  Организации.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
		|ГДЕ
		|	ДанныеДокумента.Ссылка В(&МассивОбъектов)";
	КонецЕсли;   

	        				   	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИсточникДанных", ИсточникДанных);
	
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("СправкуПодписал");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.НалоговыйПериод,
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.Телефон,
	|	ДанныеДокументов.ДолжностьПодписавшегоЛица,
	|	ДанныеДокументов.СправкуПодписал,
	|	ДанныеДокументов.ИНН,
	|	ДанныеДокументов.КПП,
	|	ДанныеДокументов.КодНалоговогоОргана,
	|	ДанныеДокументов.ЮридическоеФизическоеЛицо,
	|	ДанныеДокументов.НаименованиеПолное,
	|	ДанныеДокументов.НаименованиеСокращенное,
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.Номер КАК Номер,
	|	ЕСТЬNULL(ДанныеДокументов.Фамилия, """") КАК ФамилияИП,
	|	ЕСТЬNULL(ДанныеДокументов.Имя, """") КАК ИмяИП,
	|	ЕСТЬNULL(ДанныеДокументов.Отчество, """") КАК ОтчествоИП,
	|	ДанныеДокументов.СправкуПодписал КАК ФИОПодписавшего,
	|	ДанныеДокументов.ДолжностьПодписавшегоЛица КАК Должность,
	|	ДанныеДокументов.ОКАТО,
	|	ДанныеДокументов.ОКТМО,
	|	ДанныеДокументов.ОбщаяСуммаДохода,
	|	ДанныеДокументов.Исчислено,
	|	ДанныеДокументов.Удержано,
	|	ДанныеДокументов.КоличествоСправок
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.МоментВремени";

	
	ДанныеОрганизации = Запрос.Выполнить().Выбрать();
	
	ДанныеНалоговыхАгентов = Новый Соответствие;
	
	Пока ДанныеОрганизации.Следующий() Цикл 
				   
		ДанныеНалоговогоАгента = Новый Структура;
		ДанныеНалоговогоАгента.Вставить("Организация", ДанныеОрганизации.Организация);
		ДанныеНалоговогоАгента.Вставить("НалоговыйПериод", ДанныеОрганизации.НалоговыйПериод);
		ДанныеНалоговогоАгента.Вставить("НалоговыйПериодСтрокой", Формат(ДанныеОрганизации.НалоговыйПериод,"ЧЦ=4; ЧДЦ=0; ЧГ=0"));
		ДанныеНалоговогоАгента.Вставить("Дата", ДанныеОрганизации.Дата);
		ДанныеНалоговогоАгента.Вставить("Телефон", ДанныеОрганизации.Телефон);
		ДанныеНалоговогоАгента.Вставить("ЭтоЮрЛицо",РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(ДанныеОрганизации.Организация)); 
		ДанныеНалоговогоАгента.Вставить("КодНалоговогоОргана", ДанныеОрганизации.КодНалоговогоОргана); 
		ДанныеНалоговогоАгента.Вставить("ИННорг", ДанныеОрганизации.ИНН); 
		ДанныеНалоговогоАгента.Вставить("ОКАТО", ДанныеОрганизации.ОКАТО); 
		ДанныеНалоговогоАгента.Вставить("ОКТМО",  СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СокрЛП(ДанныеОрганизации.ОКТМО), 11, "-", "Справа")); 
		ДанныеНалоговогоАгента.Вставить("КПП", ДанныеОрганизации.КПП);
		ДанныеНалоговогоАгента.Вставить("НаименованиеПолное", ДанныеОрганизации.НаименованиеПолное);
		ДанныеНалоговогоАгента.Вставить("ФИОПодписавшего", ДанныеОрганизации.ФИОПодписавшего);
		ДанныеНалоговогоАгента.Вставить("ДолжностьПодписавшегоЛица", ДанныеОрганизации.Должность);
		ДанныеНалоговогоАгента.Вставить("Номер", ДанныеОрганизации.Номер);
		ДанныеНалоговогоАгента.Вставить("Признак");
		ДанныеНалоговогоАгента.Вставить("Фамилия");
		ДанныеНалоговогоАгента.Вставить("Имя");
		ДанныеНалоговогоАгента.Вставить("Отчество");	
		
		Если ДанныеНалоговогоАгента.ЭтоЮрЛицо Тогда
			ДанныеНалоговогоАгента.Вставить("НазваниеОрганизации", ?(ЗначениеЗаполнено(ДанныеОрганизации.НаименованиеСокращенное), ДанныеОрганизации.НаименованиеСокращенное, ДанныеОрганизации.НаименованиеПолное));
		Иначе
			ДанныеНалоговогоАгента.Вставить("НазваниеОрганизации", ДанныеОрганизации.ФамилияИП + " " + ДанныеОрганизации.ИмяИП + " " + ДанныеОрганизации.ОтчествоИП);
			ДанныеНалоговогоАгента.Фамилия = ДанныеОрганизации.ФамилияИП;
			ДанныеНалоговогоАгента.Имя = ДанныеОрганизации.ИмяИП;
			ДанныеНалоговогоАгента.Отчество = ДанныеОрганизации.ОтчествоИП;
		КонецЕсли;
		
		Если ЭтоСправкаДляНалоговогоОргана Тогда
			ДанныеНалоговогоАгента.Признак = "1";
		Иначе
			ДанныеНалоговогоАгента.Признак =  "1";
		КонецЕсли;	
		
		Если ПолучатьИтоговыеСуммы Тогда
			ДанныеНалоговогоАгента.Вставить("ОбщаяСуммаДохода", ДанныеОрганизации.ОбщаяСуммаДохода);
			ДанныеНалоговогоАгента.Вставить("Исчислено", ДанныеОрганизации.Исчислено);
			ДанныеНалоговогоАгента.Вставить("Удержано", ДанныеОрганизации.Удержано);
			ДанныеНалоговогоАгента.Вставить("КоличествоСправок", ДанныеОрганизации.КоличествоСправок);
		КонецЕсли;	
		
		ДанныеНалоговыхАгентов.Вставить(ДанныеОрганизации.Ссылка, ДанныеНалоговогоАгента);
	КонецЦикла;	
	
	Возврат ДанныеНалоговыхАгентов;
КонецФункции

Функция ДанныеНалоговогоАгентаДляНДФЛ(Организация, НалоговыйПериод, ОКАТО_КПП, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал) Экспорт
	
	СтруктураДанныхНА = Новый Структура("Организация, НалоговыйПериод, НалоговыйПериодСтрокой, Дата, Телефон, Признак, ЭтоЮрЛицо, НазваниеОрганизации, Фамилия, Имя, Отчество, КодНалоговогоОргана, ИННорг, КПП, ОКАТО, ОКТМО, ДолжностьПодписавшегоЛица, ФИОПодписавшего", Организация, НалоговыйПериод, Формат(НалоговыйПериод,"ЧЦ=4; ЧДЦ=0; ЧГ=0"), Дата, Телефон);
	ЭтоЮрЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	СтруктураДанныхНА.ЭтоЮрЛицо = ЭтоЮрЛицо;
	ДанныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КодНалоговогоОрганаПолучателя, РегистрацияВНалоговомОргане, НаименованиеПолное, Наименование");
	СтруктураДанныхНА.КодНалоговогоОргана = ДанныеОрганизации.КодНалоговогоОрганаПолучателя;
	СтруктураДанныхНА.ИННорг = ДанныеОрганизации.ИНН;
	
	СтруктураДанныхРегистрацииВИФНС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОрганизации.РегистрацияВНалоговомОргане, "КПП, КодПоОКАТО, КодПоОКТМО");
	СтруктураДанныхНА.ОКАТО = СтруктураДанныхРегистрацииВИФНС.КодПоОКАТО;
	СтруктураДанныхНА.КПП = СтруктураДанныхРегистрацииВИФНС.КПП;
	СтруктураДанныхНА.ОКТМО = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СокрЛП(СтруктураДанныхРегистрацииВИФНС.КодПоОКТМО), 11, "-", "Справа");
	
	СтруктураДанныхНА.НазваниеОрганизации = ?(ЗначениеЗаполнено(ДанныеОрганизации.НаименованиеПолное), ДанныеОрганизации.НаименованиеПолное, ДанныеОрганизации.Наименование);
	Если Не ЭтоЮрЛицо Тогда
		ФИОИП = РегламентированнаяОтчетностьПереопределяемый.ФИОИндивидуальногоПредпринимателя(Организация);
		Если ФИОИП <> Неопределено Тогда
			СтруктураДанныхНА.Фамилия = ФИОИП.Фамилия;
			СтруктураДанныхНА.Имя = ФИОИП.Имя;
			СтруктураДанныхНА.Отчество = ФИОИП.Отчество;
		КонецЕсли;
	КонецЕсли;
	СтруктураДанныхНА.ФИОПодписавшего = СправкуПодписал;
	СтруктураДанныхНА.ДолжностьПодписавшегоЛица = ДолжностьПодписавшегоЛица;
	
	Возврат СтруктураДанныхНА;
	
КонецФункции // ДанныеНалоговогоАгентаДля2НДФЛ()

Функция СформироватьПечатнуюФорму2НДФЛ(ОбъектыПечати, МассивОбъектов, ДанныеНА, ДанныеСотрудниковДокументов, ДанныеОДоходахДокументов, ДанныеОВычетахДокументов) Экспорт
	ПустаяСтруктураАдреса = Новый Структура("Индекс,КодРегиона,Район,Город,НаселенныйПункт,Улица,Дом,Корпус,Квартира");
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющихЛичность = Новый Соответствие;
	СоответствиеКодовДоходов = Новый Соответствие;
	СоответствиеКодовВычетов = Новый Соответствие;
	ПрочитатьКлассификаторыВСоответствия( СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющихЛичность, СоответствиеКодовДоходов, СоответствиеКодовВычетов);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ВременныйТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Справка2011 = ПолучитьОбщийМакет("Форма2НДФЛс2011");
	
	ОбластьМакетаШапкаПервойСтраницы_2011 = Справка2011.ПолучитьОбласть("ШапкаПервойСтраницы"); 
	ОбластьМакетаШапкаВторойСтраницы_2011 = Справка2011.ПолучитьОбласть("ШапкаВторойСтраницы");
	ОбластьМакетаЗаголовокРаздела3_2011 = Справка2011.ПолучитьОбласть("ЗаголовокРаздела3"); 
	ОбластьМакетаЗаголовокРаздела4_2011 = Справка2011.ПолучитьОбласть("ЗаголовокРаздела4");
	ОбластьМакетаПодвалРаздела4_2011	= Справка2011.ПолучитьОбласть("ПодвалРаздела4");
	ОбластьМакетаРаздел5_2011 = Справка2011.ПолучитьОбласть("Раздел5");
	ОбластьМакетаНалоговыйАгент_2011 = Справка2011.ПолучитьОбласть("НалоговыйАгент");
	ОбластьМакетаПримечание_2011 = Справка2011.ПолучитьОбласть("Примечание");
	
	ОбластьМакетаСтрокаВычетов_2011 = Справка2011.ПолучитьОбласть("СтрокаВычетов"); 
	ОбластьМакетаСтрокаДоходов_2011 = Справка2011.ПолучитьОбласть("СтрокаДоходов"); 
	ОбластиМакетаДляДоходов_2011 = Новый Массив;
	ОбластиМакетаДляДоходов_2011.Добавить(Справка2011.ПолучитьОбласть("СтрокаДоходов|ЛеваяЧасть"));
	ОбластиМакетаДляДоходов_2011.Добавить(Справка2011.ПолучитьОбласть("СтрокаДоходов|ПраваяЧасть"));
	ОбластиМакетаДляВычетов_2011 = Новый Массив;
	
	Для Сч = 1 По 4 Цикл
		ОбластиМакетаДляВычетов_2011.Добавить(Справка2011.ПолучитьОбласть("СтрокаВычетов|Вычеты"+Сч));
	КонецЦикла;
	
	Справка2014 = ПолучитьОбщийМакет("Форма2НДФЛс2014");
	
	ОбластьМакетаШапкаПервойСтраницы_2014 = Справка2014.ПолучитьОбласть("ШапкаПервойСтраницы"); 
	ОбластьМакетаШапкаВторойСтраницы_2014 = Справка2014.ПолучитьОбласть("ШапкаВторойСтраницы");
	ОбластьМакетаЗаголовокРаздела3_2014 = Справка2014.ПолучитьОбласть("ЗаголовокРаздела3"); 
	ОбластьМакетаЗаголовокРаздела4_2014 = Справка2014.ПолучитьОбласть("ЗаголовокРаздела4");
	ОбластьМакетаПодвалРаздела4_2014	= Справка2014.ПолучитьОбласть("ПодвалРаздела4");
	ОбластьМакетаРаздел5_2014 = Справка2014.ПолучитьОбласть("Раздел5");
	ОбластьМакетаНалоговыйАгент_2014 = Справка2014.ПолучитьОбласть("НалоговыйАгент");
	ОбластьМакетаПримечание_2014 = Справка2014.ПолучитьОбласть("Примечание");
	
	ОбластьМакетаСтрокаВычетов_2014 = Справка2014.ПолучитьОбласть("СтрокаВычетов"); 
	ОбластьМакетаСтрокаДоходов_2014 = Справка2014.ПолучитьОбласть("СтрокаДоходов"); 
	ОбластиМакетаДляДоходов_2014 = Новый Массив;
	ОбластиМакетаДляДоходов_2014.Добавить(Справка2014.ПолучитьОбласть("СтрокаДоходов|ЛеваяЧасть"));
	ОбластиМакетаДляДоходов_2014.Добавить(Справка2014.ПолучитьОбласть("СтрокаДоходов|ПраваяЧасть"));
	ОбластиМакетаДляВычетов_2014 = Новый Массив;
	Для Сч = 1 По 4 Цикл
		ОбластиМакетаДляВычетов_2014.Добавить(Справка2014.ПолучитьОбласть("СтрокаВычетов|Вычеты"+Сч));
	КонецЦикла;
	
	Справка2015 = ПолучитьОбщийМакет("Форма2НДФЛс2015");
	
	ОбластьМакетаШапкаПервойСтраницы_2015 = Справка2015.ПолучитьОбласть("ШапкаПервойСтраницы"); 
	ОбластьМакетаШапкаВторойСтраницы_2015 = Справка2015.ПолучитьОбласть("ШапкаВторойСтраницы");
	ОбластьМакетаЗаголовокРаздела3_2015 = Справка2015.ПолучитьОбласть("ЗаголовокРаздела3"); 
	ОбластьМакетаЗаголовокРаздела4_2015 = Справка2015.ПолучитьОбласть("ЗаголовокРаздела4");
	ОбластьМакетаПодвалРаздела4_2015	= Справка2015.ПолучитьОбласть("ПодвалРаздела4");
	ОбластьМакетаРаздел5_2015 = Справка2015.ПолучитьОбласть("Раздел5");
	ОбластьМакетаНалоговыйАгент_2015 = Справка2015.ПолучитьОбласть("НалоговыйАгент");
	ОбластьМакетаПримечание_2015 = Справка2015.ПолучитьОбласть("Примечание");
	
	ОбластьМакетаСтрокаВычетов_2015 = Справка2015.ПолучитьОбласть("СтрокаВычетов"); 
	ОбластьМакетаСтрокаДоходов_2015 = Справка2015.ПолучитьОбласть("СтрокаДоходов"); 
	ОбластиМакетаДляДоходов_2015 = Новый Массив;
	ОбластиМакетаДляДоходов_2015.Добавить(Справка2015.ПолучитьОбласть("СтрокаДоходов|ЛеваяЧасть"));
	ОбластиМакетаДляДоходов_2015.Добавить(Справка2015.ПолучитьОбласть("СтрокаДоходов|ПраваяЧасть"));
	ОбластиМакетаДляВычетов_2015 = Новый Массив;
	Для Сч = 1 По 4 Цикл
		ОбластиМакетаДляВычетов_2015.Добавить(Справка2015.ПолучитьОбласть("СтрокаВычетов|Вычеты"+Сч));
	КонецЦикла;		
	
	Для Каждого Ссылка Из МассивОбъектов  Цикл
		
		ДанныеНалоговогоАгента = ДанныеНА.Получить(Ссылка);
		
		Если ДанныеНалоговогоАгента.НалоговыйПериод >= 2015 Тогда			
			ОбластьМакетаШапкаПервойСтраницы = ОбластьМакетаШапкаПервойСтраницы_2015; 
			ОбластьМакетаШапкаВторойСтраницы = ОбластьМакетаШапкаВторойСтраницы_2015;
			ОбластьМакетаЗаголовокРаздела3 = ОбластьМакетаЗаголовокРаздела3_2015; 
			ОбластьМакетаЗаголовокРаздела4 = ОбластьМакетаЗаголовокРаздела4_2015;
			ОбластьМакетаПодвалРаздела4	= ОбластьМакетаПодвалРаздела4_2015;
			ОбластьМакетаРаздел5 = ОбластьМакетаРаздел5_2015;
			ОбластьМакетаНалоговыйАгент = ОбластьМакетаНалоговыйАгент_2015;
			ОбластьМакетаПримечание = ОбластьМакетаПримечание_2015;
			
			ОбластьМакетаСтрокаВычетов = ОбластьМакетаСтрокаВычетов_2015; 
			ОбластьМакетаСтрокаДоходов = ОбластьМакетаСтрокаДоходов_2015; 
			ОбластиМакетаДляДоходов = ОбластиМакетаДляДоходов_2015;
			ОбластиМакетаДляВычетов = ОбластиМакетаДляВычетов_2015;			
		ИначеЕсли ДанныеНалоговогоАгента.НалоговыйПериод >= 2013 Тогда
			ОбластьМакетаШапкаПервойСтраницы = ОбластьМакетаШапкаПервойСтраницы_2014; 
			ОбластьМакетаШапкаВторойСтраницы = ОбластьМакетаШапкаВторойСтраницы_2014;
			ОбластьМакетаЗаголовокРаздела3 = ОбластьМакетаЗаголовокРаздела3_2014; 
			ОбластьМакетаЗаголовокРаздела4 = ОбластьМакетаЗаголовокРаздела4_2014;
			ОбластьМакетаПодвалРаздела4	= ОбластьМакетаПодвалРаздела4_2014;
			ОбластьМакетаРаздел5 = ОбластьМакетаРаздел5_2014;
			ОбластьМакетаНалоговыйАгент = ОбластьМакетаНалоговыйАгент_2014;
			ОбластьМакетаПримечание = ОбластьМакетаПримечание_2014;
			
			ОбластьМакетаСтрокаВычетов = ОбластьМакетаСтрокаВычетов_2014; 
			ОбластьМакетаСтрокаДоходов = ОбластьМакетаСтрокаДоходов_2014; 
			ОбластиМакетаДляДоходов = ОбластиМакетаДляДоходов_2014;
			ОбластиМакетаДляВычетов = ОбластиМакетаДляВычетов_2014;
		Иначе
			ОбластьМакетаШапкаПервойСтраницы = ОбластьМакетаШапкаПервойСтраницы_2011; 
			ОбластьМакетаШапкаВторойСтраницы = ОбластьМакетаШапкаВторойСтраницы_2011;
			ОбластьМакетаЗаголовокРаздела3 = ОбластьМакетаЗаголовокРаздела3_2011; 
			ОбластьМакетаЗаголовокРаздела4 = ОбластьМакетаЗаголовокРаздела4_2011;
			ОбластьМакетаПодвалРаздела4	= ОбластьМакетаПодвалРаздела4_2011;
			ОбластьМакетаРаздел5 = ОбластьМакетаРаздел5_2011;
			ОбластьМакетаНалоговыйАгент = ОбластьМакетаНалоговыйАгент_2011;
			ОбластьМакетаПримечание = ОбластьМакетаПримечание_2011;
			
			ОбластьМакетаСтрокаВычетов = ОбластьМакетаСтрокаВычетов_2011; 
			ОбластьМакетаСтрокаДоходов = ОбластьМакетаСтрокаДоходов_2011; 
			ОбластиМакетаДляДоходов = ОбластиМакетаДляДоходов_2011;
			ОбластиМакетаДляВычетов = ОбластиМакетаДляВычетов_2011;
			
		КонецЕсли;
		
		ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(ДанныеНалоговогоАгента);  // Раздел 1
		Если ДанныеНалоговогоАгента.Признак = "СводнаяСправка" Тогда
			ОбластьМакетаШапкаПервойСтраницы.Область("ОбластьСправкаВИФНС").Видимость = Ложь;
			ОбластьМакетаШапкаПервойСтраницы.Область("ОбластьСводнойСправки").Видимость = Истина;
		Иначе
			ОбластьМакетаШапкаПервойСтраницы.Область("ОбластьСправкаВИФНС").Видимость = Истина;
			ОбластьМакетаШапкаПервойСтраницы.Область("ОбластьСводнойСправки").Видимость = Ложь;
		КонецЕсли;
		
		ОбластьМакетаШапкаВторойСтраницы.Параметры.Заполнить(ОбластьМакетаШапкаПервойСтраницы.Параметры);  // последующие страницы
		ОбластьМакетаНалоговыйАгент.Параметры.Заполнить(ДанныеНалоговогоАгента); // подписи
				
		СтрокиДанныхПоСотрудникам = ДанныеСотрудниковДокументов.НайтиСтроки(Новый Структура("Ссылка", Ссылка));
				
		Для каждого СтрокаДанных Из СтрокиДанныхПоСотрудникам Цикл 
			
			ВсегоИтогов = 1;
			
			
			СтруктураОтбора = Новый Структура("Ссылка, НомерСправки", Ссылка, СтрокаДанных.НомерСправки); 
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
			ДоходыПоВидам = ДанныеОДоходахДокументов.Скопировать(СтруктураОтбора);
			ВычетыПоВидам = ДанныеОВычетахДокументов.Скопировать(СтруктураОтбора);
			
			ДоходыПоВидам.Колонки.Добавить("КодДоходаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4)));
			ДоходыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
			ДоходыПоВидам.Сортировать("МесяцНалоговогоПериода, КодДохода, СуммаДохода Убыв, КодВычета");
			ПредыдущийМесяц = -1;
			ПредыдущийКодДохода = "";
			Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
				Если ПредыдущийМесяц <> СтрокаТЗ.МесяцНалоговогоПериода Или ПредыдущийКодДохода <> СтрокаТЗ.КодДохода Тогда
					СтрокаТЗ.КодДоходаСтрокой = СоответствиеКодовДоходов[СтрокаТЗ.КодДохода];
					ПредыдущийМесяц = СтрокаТЗ.МесяцНалоговогоПериода;
					ПредыдущийКодДохода = СтрокаТЗ.КодДохода;
				Иначе
					СтрокаТЗ.МесяцНалоговогоПериода = 0;
				КонецЕсли;
				СтрокаТЗ.КодВычетаСтрокой = КодВычетаДляНалоговойОтчетности(ДанныеНалоговогоАгента.НалоговыйПериод, СтрокаТЗ.КодВычета);
				КонецЦикла;
			ВычетыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
			Для каждого СтрокаТЗ Из ВычетыПоВидам Цикл
				СтрокаТЗ.КодВычетаСтрокой = КодВычетаДляНалоговойОтчетности(ДанныеНалоговогоАгента.НалоговыйПериод, СтрокаТЗ.КодВычета);
			КонецЦикла;
			
			Если ТабДокумент.ВысотаТаблицы > 0 Тогда  // если справок несколько - разобьем на отдельные страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			// Заполнение данных в параметрах макета
			
			ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(СтрокаДанных);  // Раздел 2
			ОбластьМакетаШапкаПервойСтраницы.Параметры.НомерСправки = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					ОбластьМакетаШапкаПервойСтраницы.Параметры.НомерСправки,
					Ложь,
					Истина);
			
			ОбластьМакетаШапкаПервойСтраницы.Параметры.Статус = ?(СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ,2,?(СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист,3,1));
			ОбластьМакетаШапкаПервойСтраницы.Параметры.Гражданство = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
			ОбластьМакетаШапкаПервойСтраницы.Параметры.КодУдЛичн = СоответствиеДокументовУдостоверяющихЛичность[СтрокаДанных.ВидДокумента];
			
			Если ЗначениеЗаполнено(СтрокаДанных.АдресРФ) Тогда
				СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
						СтрокаДанных.АдресРФ, Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке);
				ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(СтруктураАдреса);
			Иначе // очищаем адресные данные
				ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(ПустаяСтруктураАдреса);
			КонецЕсли;
			
			ОбластьМакетаШапкаПервойСтраницы.Параметры.КодСтр = "";
			ОбластьМакетаШапкаПервойСтраницы.Параметры.АдрТекст = "";
			
			ОбластьМакетаПодвалРаздела4.Параметры.Заполнить(СтрокаДанных); // реквизиты Уведомления об имущ.вычете Раздела 4
			
			// Вывод подготовленной справки в табличный документ
			
			ТабДокумент.Вывести(ОбластьМакетаШапкаПервойСтраницы);
			
			ПерваяСтавка = Истина;
			ОбластьМакетаШапкаВторойСтраницы.Параметры.НомерСтраницы = 1;
			ВыведеноИтогов = 0;
			
			Ставка = Перечисления.НДФЛСтавки.Ставка13;
			
			
			ВыведеноИтогов = ВыведеноИтогов + 1;
			
			ВременныйТабДокумент.Очистить();
			
			// Раздел 3
			
			ОбластьМакетаЗаголовокРаздела3.Параметры.Ставка =Ставка;
			
			ВременныйТабДокумент.Вывести(ОбластьМакетаЗаголовокРаздела3);
			
			ДоходыПоСтавке = ИзвлечьДоходыПоСтавке(Ставка, СтрокаДанных.СтатусНалогоплательщика, ДоходыПоВидам);
			Если ДоходыПоСтавке.Количество() = 0 Тогда
				ВременныйТабДокумент.Вывести(ОбластьМакетаСтрокаДоходов);
			Иначе
				ВывестиТабличныеДанные(ДоходыПоСтавке, ВременныйТабДокумент, ОбластиМакетаДляДоходов, 1, 2);
			КонецЕсли;
			ВывестиРазделВСправку(ТабДокумент, ВременныйТабДокумент, Ложь, ОбластьМакетаНалоговыйАгент, ОбластьМакетаПримечание, ОбластьМакетаШапкаВторойСтраницы);
			
			// Раздел 4
			Если ПерваяСтавка Тогда
				
				ВременныйТабДокумент.Очистить();
				
				ВременныйТабДокумент.Вывести(ОбластьМакетаЗаголовокРаздела4);
				ВычетыПоВидам.Сортировать("КодВычета");
				Если ВычетыПоВидам.Количество() = 0 Или Ставка <> Перечисления.НДФЛСтавки.Ставка13 Тогда
					ВременныйТабДокумент.Вывести(ОбластьМакетаСтрокаВычетов);
				Иначе
					ВывестиТабличныеДанные(ВычетыПоВидам, ВременныйТабДокумент, ОбластиМакетаДляВычетов, 1, 4);
				КонецЕсли;
				
				ВременныйТабДокумент.Вывести(ОбластьМакетаПодвалРаздела4);
				ВывестиРазделВСправку(ТабДокумент, ВременныйТабДокумент, Ложь, ОбластьМакетаНалоговыйАгент, ОбластьМакетаПримечание, ОбластьМакетаШапкаВторойСтраницы);
				
				ПерваяСтавка = Ложь;
				
			КонецЕсли;
			
			// Раздел 5
			ВременныйТабДокумент.Очистить();
			
			ОбластьМакетаРаздел5.Параметры.Заполнить(СтрокаДанных);
			Если ДанныеНалоговогоАгента.НалоговыйПериод < 2015 Тогда
				ОбластьМакетаРаздел5.Параметры.Ставка = Ставка;
			КонецЕсли;
			
			ВременныйТабДокумент.Вывести(ОбластьМакетаРаздел5);
			ВывестиРазделВСправку(ТабДокумент, ВременныйТабДокумент, ВыведеноИтогов = ВсегоИтогов, ОбластьМакетаНалоговыйАгент, ОбластьМакетаПримечание, ОбластьМакетаШапкаВторойСтраницы);
			
			
			ТабДокумент.Вывести(ОбластьМакетаНалоговыйАгент);
			ТабДокумент.Вывести(ОбластьМакетаПримечание);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Возврат ТабДокумент;

КонецФункции


Процедура ВывестиТабличныеДанные(МассивСтрок, ДокументРезультат, ОбластиМакета, Знач МинимумСтрок, КоличествоКолонок = 2)

	ВсегоСтрок = МассивСтрок.Количество();
	
	Для каждого Область Из ОбластиМакета Цикл
		ОчиститьПараметрыОбластиТабличногоДокумента(Область);
	КонецЦикла;
	
	ЛеваяЧастьМакета = ОбластиМакета[0];
	МаксимумСтр = (ВсегоСтрок / КоличествоКолонок);
	// Вычислим высоту таблицы
	ВысотаТаблицы = ?(ВсегоСтрок < МинимумСтрок, ВсегоСтрок, ?(ВсегоСтрок > МинимумСтрок * КоличествоКолонок, ?(Цел(МаксимумСтр) = МаксимумСтр, МаксимумСтр, Цел(МаксимумСтр) + 1) , МинимумСтрок));
	Для Сч = 1 По ВысотаТаблицы Цикл
		
		// перенесем данные
		ЛеваяЧастьМакета.Параметры.Заполнить(МассивСтрок[Сч - 1]);
		Если ВсегоСтрок > МинимумСтрок Тогда  // правая часть
			Для СчКолонок = 2 По КоличествоКолонок Цикл
				Если ВысотаТаблицы * (СчКолонок - 1) + Сч <= ВсегоСтрок Тогда
					ОбластиМакета[СчКолонок - 1].Параметры.Заполнить(МассивСтрок[ВысотаТаблицы * (СчКолонок - 1) + Сч - 1]);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		// выведем области макета
		ДокументРезультат.Вывести(ЛеваяЧастьМакета);	
		Для СчКолонок = 2 По КоличествоКолонок Цикл
			ДокументРезультат.Присоединить(ОбластиМакета.Получить(СчКолонок - 1));	
		КонецЦикла;
		
		Для каждого Область Из ОбластиМакета Цикл
			ОчиститьПараметрыОбластиТабличногоДокумента(Область);
		КонецЦикла;
		
	КонецЦикла;
	
	// довыведем пустые строки раздела
	Если ВысотаТаблицы < МинимумСтрок Тогда
		Для Сч = ВысотаТаблицы + 1 По МинимумСтрок Цикл
			ДокументРезультат.Вывести(ЛеваяЧастьМакета);	
			Для СчКолонок = 2 По КоличествоКолонок Цикл
				ДокументРезультат.Присоединить(ОбластиМакета[СчКолонок - 1]);	
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВывестиТабличныеДанные()

Функция ИзвлечьДоходыПоСтавке(Ставка, СтатусНалогоплательщика, ДоходыПоВидам)
	
	ТаблицаПодходящихДоходов = ДоходыПоВидам.СкопироватьКолонки();

	ЭтоНеРезидент = СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент;
	ЭтоРезидент = СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Резидент;
	Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
		
		СтавкаДохода = Перечисления.НДФЛСтавки.Ставка13;
		
		Если СтавкаДохода = Ставка Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаПодходящихДоходов.Добавить(), СтрокаТЗ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат	ТаблицаПодходящихДоходов

КонецФункции // ИзвлечьДоходыПоСтавке()

Процедура ВывестиРазделВСправку(ТабДокумент, Раздел, ЭтоПоследнийРаздел, ОбластьНалоговыйАгент, ОбластьПримечание, ШапкаВторойСтраницы)
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(Раздел);
	ВыводимыеОбласти.Добавить(ОбластьНалоговыйАгент);
	
	ВывестиПодвалЛиста = Не ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
	
	Если Не ВывестиПодвалЛиста И ЭтоПоследнийРаздел Тогда
		ВыводимыеОбласти.Добавить(ОбластьПримечание);
		
		ВывестиПодвалЛиста = Не ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		
	КонецЕсли;
	Если ВывестиПодвалЛиста Тогда
		ТабДокумент.Вывести(ОбластьНалоговыйАгент);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ШапкаВторойСтраницы.Параметры.НомерСтраницы = ШапкаВторойСтраницы.Параметры.НомерСтраницы + 1;
		ТабДокумент.Вывести(ШапкаВторойСтраницы);
	КонецЕсли;
	
	ТабДокумент.Вывести(Раздел);
	
КонецПроцедуры

Процедура ПрочитатьКлассификаторыВСоответствия(СоответствиеКодовСтран = Неопределено, СоответствиеИменСтран = Неопределено, СоответствиеДокументовУдостоверяющиеЛичность = Неопределено, СоответствиеКодовДоходов = Неопределено, СоответствиеКодовВычетов = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Если СоответствиеКодовСтран <> Неопределено И СоответствиеИменСтран <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторСтранМира.Ссылка,
		|	КлассификаторСтранМира.Код,
		|	КлассификаторСтранМира.Наименование
		|ИЗ
		|	Справочник.СтраныМира КАК КлассификаторСтранМира";
		Выборка = Запрос.Выполнить().Выбрать();
		СоответствиеКодовСтран = Новый Соответствие;
		СоответствиеИменСтран = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			СоответствиеКодовСтран.Вставить(Выборка.Ссылка,Выборка.Код);
			СоответствиеИменСтран.Вставить(Выборка.Наименование,Выборка.Код)
		КонецЦикла;
	КонецЕсли;
	
	Если СоответствиеДокументовУдостоверяющиеЛичность <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыДокументовФизическихЛиц.Ссылка,
		|	ВидыДокументовФизическихЛиц.КодМВД
		|ИЗ
		|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц";
		Выборка = Запрос.Выполнить().Выбрать();
		СоответствиеДокументовУдостоверяющиеЛичность = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			СоответствиеДокументовУдостоверяющиеЛичность.Вставить(Выборка.Ссылка,Выборка.КодМВД)
		КонецЦикла;
	КонецЕсли;
	
	Если СоответствиеКодовДоходов <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоходыНДФЛ.Ссылка,
		|	ДоходыНДФЛ.Код
		|ИЗ
		|	Справочник.КодыДоходовНДФЛ КАК ДоходыНДФЛ";
		Выборка = Запрос.Выполнить().Выбрать();
		СоответствиеКодовДоходов = Новый Соответствие;
		
		Пока Выборка.Следующий() Цикл
			СоответствиеКодовДоходов.Вставить(Выборка.Ссылка, Выборка.Код);
		КонецЦикла;
	КонецЕсли;
	
	Если СоответствиеКодовВычетов <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВычетыНДФЛ.Ссылка,
		|	ВычетыНДФЛ.Код
		|ИЗ
		|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ";
		Выборка = Запрос.Выполнить().Выбрать();
		СоответствиеКодовВычетов = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			СоответствиеКодовВычетов.Вставить(Выборка.Ссылка, Выборка.Код)
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Показывает ошибки из протокола
//
Процедура ОтразитьОшибки(КонтрольПройден, КлючПоследнегоПротокола, Сотрудник) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ПротоколыПроверкиДанных.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючПоследнегоПротокола);
	МенеджерЗаписи.Прочитать();
	
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоРезультат = МенеджерЗаписи.Протокол.Получить();
	
	Для Каждого СтрВерхнийУровень Из ДеревоРезультат.Строки Цикл
		
		// Если верхний уровень проверки ОК, значит и подчиненные ок
		Если СтрВерхнийУровень.РезультатКонтроля < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрНижнийУровень Из СтрВерхнийУровень.Строки Цикл
			
			Если СтрНижнийУровень.РезультатКонтроля = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрНижнийУровень.Расшифровка.ЗначениеРасшифровки) = Тип("СправочникСсылка.Сотрудники")
				И СтрНижнийУровень.Расшифровка.ЗначениеРасшифровки <> Сотрудник Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстСообщения = "";
			Если СтрНижнийУровень.ПараметрКонтроля = "СведенияОбОрганизации" Тогда
				ТекстСообщения = СтрНижнийУровень.Описание + " организации: "; 
			ИначеЕсли СтрНижнийУровень.ПараметрКонтроля = "СведенияПоСотрудникам" Тогда
				ТекстСообщения = СтрНижнийУровень.Описание + ": ";
			КонецЕсли;
			Если ТипЗнч(СтрНижнийУровень.Расшифровка.ПараметрыРасшифровки) = Тип("Структура") Тогда
				Если СтрНижнийУровень.ПараметрКонтроля = "СведенияОбОрганизации" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрНижнийУровень.Описание, СтрНижнийУровень.Расшифровка.ПараметрыРасшифровки.СобственныеДанныеЗаполнения.Организация, "ОтветственныеЛицаДляПечатныхФорм");
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрНижнийУровень.Описание, Сотрудник);
				КонецЕсли;
			Иначе
				Для Каждого Ошибка Из СтрНижнийУровень.Расшифровка.ПараметрыРасшифровки Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения + Ошибка.Значение, СтрНижнийУровень.Расшифровка.ЗначениеРасшифровки, СтрЗаменить(Ошибка.Ключ,"Объект.",""),,);
					
					КонтрольПройден = Ложь;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

//////////ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ///////////////////

Функция КодВычетаДляНалоговойОтчетности(НалоговыйПериод, КодВычета) Экспорт

	КодыДляНалоговойОтчетности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КодВычета, "КодПрименяемыйВНалоговойОтчетностиС2016Года,КодПрименяемыйВНалоговойОтчетностиС2015Года,КодПрименяемыйВНалоговойОтчетностиС2011Года");	
	Если  НалоговыйПериод < 2015 Тогда
		Возврат КодыДляНалоговойОтчетности.КодПрименяемыйВНалоговойОтчетностиС2011Года
	ИначеЕсли НалоговыйПериод = 2015 Тогда
		Возврат КодыДляНалоговойОтчетности.КодПрименяемыйВНалоговойОтчетностиС2015Года
	Иначе
		Возврат КодыДляНалоговойОтчетности.КодПрименяемыйВНалоговойОтчетностиС2016Года
	КонецЕсли;
	
КонецФункции
// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент       – Табличный документ
//  ВыводимыеОбласти  – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции

// Преобразовать строку полей в список значений
Функция ПреобразоватьСтрокуВСтруктуру(СтрокаПолей)
	
	Результат = Новый Структура;
	ПоследнийЭлемент = Неопределено;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоСтрокаXML(СтрокаПолей) Тогда
		Адрес = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(СтрокаПолей).ЗначенияПолей;
		Для Каждого Стр ИЗ Адрес Цикл
			Результат.Вставить(Стр.Представление ,Стр.Значение);
		КонецЦикла;
	Иначе
		Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
			Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
			Если Лев(Стр, 1) = Символы.Таб Тогда
				Если ПоследнийЭлемент <> Неопределено Тогда
					Результат[ПоследнийЭлемент] = Результат[ПоследнийЭлемент] + Символы.ПС + Сред(Стр, 2);
				КонецЕсли;
			Иначе
				Поз = Найти(Стр, "=");
				Если Поз <> 0 Тогда 
					Результат.Вставить(Лев(Стр, Поз-1), Сред(Стр, Поз+1));
					ПоследнийЭлемент = Лев(Стр, Поз-1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции


Процедура ОчиститьПараметрыОбластиТабличногоДокумента(Область) Экспорт
	
	Для Параметр = 0 По Область.Параметры.Количество() -1 Цикл
		Область.Параметры[Параметр] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗагрузитьXMLВДокументDOM(ТекстXML) Экспорт
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Возврат ДокументDOM;
КонецФункции	

// Создает объект дерево значений, представляющее XML файл
Функция СоздатьДеревоXML() Экспорт
	НовоеДеревоXML = Новый ДеревоЗначений;
	НовоеДеревоXML.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
	НовоеДеревоXML.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Возврат НовоеДеревоXML;
	
КонецФункции

Функция ДобавитьУзелВДеревоXML(Ветка, Имя, Значение, СписокАтрибутов = Неопределено, ТипДанных = "", ЗначениеЗаписи = Неопределено) Экспорт
	ПустаяДата = Дата(1,1,1);
	
	НовыйУзел = Ветка.Строки.Добавить();
	НовыйУзел.Имя = Имя;
	НовыйУзел.Значение = Значение;
	
	Если СписокАтрибутов <> Неопределено Тогда
		ВеткаАтрибутов = НовыйУзел.Строки.Добавить();
		ВеткаАтрибутов.Имя = "АтрибутыXMLУзла";
		ВеткаАтрибутов.Значение = Неопределено;
		
		Для Каждого ЭлементСпискаАтрибутов Из СписокАтрибутов Цикл
			ЛистАтрибутов = ВеткаАтрибутов.Строки.Добавить();
			ЛистАтрибутов.Имя = ЭлементСпискаАтрибутов.Ключ;
			// доделать до правильного преобразования
			ЛистАтрибутов.Значение = Строка(ЭлементСпискаАтрибутов.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипДанных = "СТРОКА" И ЗначениеЗаписи <> Неопределено Тогда
		ЗначениеЗаписи = "";
	ИначеЕсли ТипДанных = "ЧИСЛО" И ЗначениеЗаписи <> Неопределено Тогда
		Если ТипЗнч(ЗначениеЗаписи) = Тип("Число") Тогда
			ЗначениеЗаписи = 0;	
		Иначе
			ЗначениеЗаписи = "";
		КонецЕсли;	
	ИначеЕсли ТипДанных = "ДАТА" И ЗначениеЗаписи <> Неопределено Тогда
		ЗначениеЗаписи = ПустаяДата;	
	КонецЕсли;	
	
	Возврат НовыйУзел;
	
КонецФункции


Функция ЗагрузитьФорматНабораЗаписей(Знач ДеревоФормата, Знач ИмяНабораЗаписей, НомерВыбираемогоЭлемента = 1) Экспорт	
	ФорматНабора = Новый Структура();
	
	УзлыФормата = ДеревоФормата.ДочерниеУзлы[0].ПолучитьЭлементыПоИмени(ИмяНабораЗаписей)[0].ДочерниеУзлы;
	
	Для Каждого УзелФормата Из УзлыФормата Цикл
		
		ФорматЗаписи = Новый Структура("ТипДанных, Размер, РазрядностьДробнойЧасти, Поля, Значение, ЭлементНеОбязателен, ТипЭлемента, НеВыводитьВФайл");
		
		// имя записи хранится в 4 колонке
		ИмяЗаписи =  УзелФормата.ДочерниеУзлы[3].ТекстовоеСодержимое;
		
		// тип данных хранится во 2 колонке
		ТипДанных = ВРег(УзелФормата.ДочерниеУзлы[1].ТекстовоеСодержимое);
		
		//Признак обязательности элемента хранится в 5-й колонке	
		ЭлементНеОбязателен = (ВРег(УзелФормата.ДочерниеУзлы[4].ТекстовоеСодержимое) = "НЕ ОБЯЗАТЕЛЬНО" Или ВРег(УзелФормата.ДочерниеУзлы[4].ТекстовоеСодержимое) = "Н");
		
		Если УзелФормата.ДочерниеУзлы.Количество() = 7 И УзелФормата.ДочерниеУзлы[6].ИмяУзла = "ТипЭлемента" Тогда
			ТипЭлемента = ВРег(УзелФормата.ДочерниеУзлы[6].ТекстовоеСодержимое);
		Иначе
			ТипЭлемента = "С";
		КонецЕсли;	
		
		Если ТипДанных = "" Тогда// Если тип данных не задан, то встретили строку - группировку
			Продолжить;
		КонецЕсли; 
		
		ПозицияРазделителя = Найти(ТипДанных,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ТипДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТипДанных, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		ПозицияРазделителя = Найти(ИмяЗаписи,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ИмяЗаписи = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		ФорматЗаписи.ТипДанных =  ТипДанных;
		ФорматЗаписи.ЭлементНеОбязателен = ЭлементНеОбязателен;
		ФорматЗаписи.ТипЭлемента = ТипЭлемента;
		ФорматЗаписи.НеВыводитьВФайл = Ложь;
		// размер хранится в 3 колонке
		СтрРазмерПоля =  УзелФормата.ДочерниеУзлы[2].ТекстовоеСодержимое;
		
		Если ФорматЗаписи.ТипДанных = "КОНСТАНТА" Тогда
			
			// в колонке "размер" должно указываться значение константы
			ФорматЗаписи.Значение = СтрРазмерПоля;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ЧИСЛО" Тогда
			
			ПозицияТочки = Найти(СтрРазмерПоля,".");
			Если ПозицияТочки<>0 Тогда
				ФорматЗаписи.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
				ФорматЗаписи.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
			Иначе	
				ФорматЗаписи.Размер = Число(СтрРазмерПоля);
				ФорматЗаписи.РазрядностьДробнойЧасти = 0;
			КонецЕсли;	 
			
			ФорматЗаписи.Значение = 0;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРОКА" Тогда
			
			ФорматЗаписи.Размер = Число(СтрРазмерПоля);
			
			ФорматЗаписи.Значение = "";
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ДАТА" Тогда
			
			ФорматЗаписи.Значение = Дата('00010101');
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ТАБЛИЦА" Тогда	
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиИзДереваФормата(ДеревоФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый ТаблицаЗначений;
			
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ОписаниеТиповПоля = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Поле.Размер, Поле.РазрядностьДробнойЧасти));
				ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
					ОписаниеТиповПоля = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(Поле.Размер));
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ОписаниеТиповПоля = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
				КонецЕсли; 
				ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля, ОписаниеТиповПоля);
				
			КонецЦикла; 
				
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРУКТУРА" Тогда	
			
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = Найти(СтрРазмерПоля,"/");
			Если ПозицияРазделителя <> 0 Тогда
				СтрРазмерПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрРазмерПоля, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиИзДереваФормата(ДеревоФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый Структура;
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				ПустоеЗначениеПоля = Неопределено;
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ПустоеЗначениеПоля = 0;
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ПустоеЗначениеПоля = Дата('00010101');
				Иначе
					ПустоеЗначениеПоля = "";
				КонецЕсли; 
				
				ФорматЗаписи.Значение.Вставить(Поле.ИмяПоля, ПустоеЗначениеПоля);
				
			КонецЦикла; 
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			// Имя набора записей хранится в третьей колонке
			ИмяНабора = УзелФормата.ДочерниеУзлы[2].ТекстовоеСодержимое;
			ПозицияРазделителя = Найти(ИмяНабора,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяНабора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяНабора, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ФорматЗаписи.Значение = ЗагрузитьФорматНабораЗаписей(ДеревоФормата, ИмяНабора, НомерВыбираемогоЭлемента);
			
		КонецЕсли;	
		
		ФорматНабора.Вставить(ИмяЗаписи, ФорматЗаписи);
		
	КонецЦикла;	
	
	Возврат ФорматНабора;
		
КонецФункции


Функция ПолучитьФорматЗаписиИзДереваФормата(Знач ДеревоФормата, Знач ИмяЗаписи)
	
	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",					Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипДанных",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипЭлемента",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",					Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаФормаЗаписи.Колонки.Добавить("ЭлементНеОбязателен", Новый ОписаниеТипов("Булево"));
	ТаблицаФормаЗаписи.Колонки.Добавить("НеВыводитьВФайл", Новый ОписаниеТипов("Булево"));

	
	УзлыФормата = ДеревоФормата.ДочерниеУзлы[0].ПолучитьЭлементыПоИмени(ИмяЗаписи)[0].ДочерниеУзлы;
	
	Для Каждого УзелФормата Из УзлыФормата Цикл
		
		//имя поля хранится в 4-ой колонке
		ИмяПоля = УзелФормата.ДочерниеУзлы[3].ТекстовоеСодержимое;
		Если ИмяПоля <> "" Тогда
			
			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			//тип данных хранится во 2-ой колонке	
			НовоеПоле.ТипДанных = ВРег(УзелФормата.ДочерниеУзлы[1].ТекстовоеСодержимое);
			
			НовоеПоле.НеВыводитьВФайл = Ложь;
			
			Если УзелФормата.ДочерниеУзлы.Количество() = 7 И УзелФормата.ДочерниеУзлы[6].ИмяУзла = "ТипЭлемента" Тогда
				НовоеПоле.ТипЭлемента = ВРег(УзелФормата.ДочерниеУзлы[6].ТекстовоеСодержимое);
			Иначе
				НовоеПоле.ТипЭлемента = "С";
			КонецЕсли;	
			
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = УзелФормата.ДочерниеУзлы[2].ТекстовоеСодержимое;
			//Если указан размер поля, сохраним его
			Если (НовоеПоле.ТипДанных = "ЧИСЛО" Или НовоеПоле.ТипДанных = "СТРОКА") И СтрРазмерПоля <> "" Тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 Тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
					НовоеПоле.РазрядностьДробнойЧасти = 0;
				КонецЕсли;	 
			КонецЕсли;	 
			//Признак обязательности элемента хранится в 5-й колонке	
			НовоеПоле.ЭлементНеОбязателен = (ВРег(УзелФормата.ДочерниеУзлы[4].ТекстовоеСодержимое) = "НЕ ОБЯЗАТЕЛЬНО" Или ВРег(УзелФормата.ДочерниеУзлы[4].ТекстовоеСодержимое) = "Н");
			
		КонецЕсли;	 
		
	КонецЦикла;
	
	Возврат ТаблицаФормаЗаписи;
КонецФункции

Функция ДанныеВыгружаемыеКакАтрибуты(СтруктураДанных)

	Атрибуты = Новый Структура;
	Для каждого Поле Из СтруктураДанных Цикл
		Если Поле.Значение.ТипЭлемента = "А" Тогда
			Данные = Поле.Значение.Значение;
			Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
				Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
			ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
				Если Не ЗначениеЗаполнено(Данные) Тогда
					Данные = ""
				Иначе
					Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
				КонецЕсли;
			КонецЕсли;
			Атрибуты.Вставить(Поле.Ключ, Данные);
			СтруктураДанных.Удалить(Поле.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Атрибуты
	
КонецФункции

// добавляет реквизит в дерево значений, представляющее XML файл
Процедура ДобавитьИнформациюВДерево(ДеревоВыгрузки, НаборЗаписей) Экспорт	
		
	ПустаяДата = Дата(1,1,1);
	
	Для каждого ЭлементНабора Из НаборЗаписей Цикл
		ИмяЗаписи = ЭлементНабора.Ключ;
				
		Запись = ЭлементНабора.Значение;
		
		Если Запись.НеВыводитьВФайл Тогда 
			Запись.НеВыводитьВФайл = Ложь;
			Продолжить;
		КонецЕсли;	
	
		ТипДанных = Запись.ТипДанных;
		Если ТипДанных = "КОНСТАНТА" Тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение, , ТипДанных, Запись.Значение);
			
		ИначеЕсли ТипДанных = "ЧИСЛО" Тогда
			
			// для проверок
			//Запись.Размер 
			//Запись.РазрядностьДробнойЧасти
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Формат(Запись.Значение,"ЧЦ=" + Запись.Размер + "; ЧДЦ=" + Запись.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0"), , ТипДанных, Запись.Значение);
			Запись.НеВыводитьВФайл = Ложь;
		ИначеЕсли ТипДанных = "СТРОКА" Тогда
			
			// для проверок
			//Запись.Размер 
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение, ,ТипДанных, Запись.Значение);
			
		ИначеЕсли ТипДанных = "ДАТА" Тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ?(Запись.Значение = ПустаяДата,"00.00.0000", Формат(Запись.Значение,"ДФ=dd.MM.yyyy")), ,ТипДанных, Запись.Значение);
			
		ИначеЕсли ТипДанных = "ТАБЛИЦА" Тогда	
			
			ПроверятьНеобязательныеПоля = Ложь;
			Для каждого Поле Из Запись.Поля Цикл
				ПроверятьНеобязательныеПоля = Поле.ЭлементНеОбязателен;
				Если ПроверятьНеобязательныеПоля Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Для каждого СтрокаТЗ Из Запись.Значение Цикл
				
				
				ВыводитьНеобязательныеПоля = Ложь;
				Если ПроверятьНеобязательныеПоля Тогда
					Для каждого Поле Из Запись.Поля Цикл
						Если Поле.ЭлементНеОбязателен Тогда
							ВыводитьНеобязательныеПоля = ЗначениеЗаполнено(СтрокаТЗ[Поле.ИмяПоля]);
							Если ВыводитьНеобязательныеПоля Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				
				Атрибуты = Новый Структура;
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ЭлементНеОбязателен И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					Данные = СтрокаТЗ[Поле.ИмяПоля];
					
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						Если Не ЗначениеЗаполнено(Данные) Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					
					Если Поле.ТипЭлемента = "А" И НЕ Поле.НеВыводитьВФайл Тогда
						Атрибуты.Вставить(Поле.ИмяПоля, Данные);
					КонецЕсли;
					
				КонецЦикла;
				
				ВеткаСтрокиТЗ = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты);
				
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ТипЭлемента = "А" Тогда
						Поле.НеВыводитьВФайл = Ложь;
						Продолжить;
					КонецЕсли;
					
					Если Поле.НеВыводитьВФайл Тогда
						Поле.НеВыводитьВФайл = Ложь;
						Продолжить;
					КонецЕсли;	
					
					Если Поле.ЭлементНеОбязателен И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					ДобавитьИнформациюВДерево(ВеткаСтрокиТЗ, СтрокаТЗ[Поле.ИмяПоля])
					
				КонецЦикла;
				
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "СТРУКТУРА" Тогда	
			МассивДанных = Новый Массив;
			Атрибуты = Новый Структура;
			Для каждого Поле Из Запись.Поля Цикл
				
				Данные = Запись.Значение[Поле.ИмяПоля];
				
				Если Поле.ЭлементНеОбязателен И Не ЗначениеЗаполнено(Данные) Тогда
					Продолжить;
				КонецЕсли;
				
				ПустоеЗначение = "";
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					Если ТипЗнч(Данные) = Тип("Число") Тогда
						ПустоеЗначение = 0;	
					КонецЕсли;	
					Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0");
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					Если Не ЗначениеЗаполнено(Данные) Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						ПустоеЗначение = '00010101';
					КонецЕсли;
				КонецЕсли;
				
				Если Поле.ТипЭлемента = "А" И НЕ Поле.НеВыводитьВФайл  Тогда
					Атрибуты.Вставить(Поле.ИмяПоля, Данные);
				ИначеЕсли НЕ Поле.НеВыводитьВФайл Тогда 
					СтруктураДанных = Новый Структура("ИмяПоля, Значение, Данные, ТипДанных", Поле.ИмяПоля, Запись.Значение[Поле.ИмяПоля], Данные, Поле.ТипДанных);
					МассивДанных.Добавить(СтруктураДанных);
				КонецЕсли;
				Поле.НеВыводитьВФайл = Ложь;
				Запись.Значение[Поле.ИмяПоля] = ПустоеЗначение;	
			КонецЦикла; 
				
			ВеткаСтруктуры = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты);
			
			Для Каждого Поле Из МассивДанных Цикл
				ДобавитьУзелВДеревоXML(ВеткаСтруктуры, Поле.ИмяПоля, Поле.Данные, ,Поле.ТипДанных, Поле.Данные);
            КонецЦикла;

		ИначеЕсли ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			Значение = Запись.Значение;
			
			Атрибуты = Новый Структура;
			Для каждого Поле Из Значение Цикл
				Если Поле.Значение.ТипЭлемента = "А" И НЕ Поле.Значение.НеВыводитьВФайл  Тогда
					Данные = Поле.Значение.Значение;
					Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
						Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
						Если Не ЗначениеЗаполнено(Данные) Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					Атрибуты.Вставить(Поле.Ключ, Данные);
					Значение.Удалить(Поле.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты), Значение);
			
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры

// Создает и возвращает объект ЗаписьXML, для создания XML документа
Функция СоздатьПотокXML(ИмяФайла = Неопределено, Кодировка  = "windows-1251") Экспорт	
	ПотокXML = Новый ЗаписьXML();
	
	ПотокXML.УстановитьСтроку(Кодировка);
	ПотокXML.Отступ = Истина;
	Если ИмяФайла <> Неопределено Тогда
		ПотокXML.ОткрытьФайл(ИмяФайла, Кодировка);
	КонецЕсли;
	
	ПотокXML.ЗаписатьОбъявлениеXML();
	
	Возврат ПотокXML;
	
КонецФункции

// записывает значения из дерева значение в поток связанный с файлом XML
Процедура ЗаписатьУзелДереваXMLВXML(СтрокаДерева, ПотокXML, ПрефиксПространстваИмен = Неопределено, URIПространстваИмен = Неопределено, ЗаменятьПодчеркивания = Истина)Экспорт	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			Если ЗаменятьПодчеркивания Тогда
				ПотокXML.ЗаписатьНачалоЭлемента(СтрЗаменить(СтрокаДерева.Имя,"__","-"));
			Иначе
				ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Имя);	
			КонецЕсли;	
			Если ПрефиксПространстваИмен <> Неопределено И URIПространстваИмен <> Неопределено Тогда
				ПотокXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксПространстваИмен, URIПространстваИмен);
			КонецЕсли;
			СписокАтрибутов = СтрокаДерева.Строки.Найти("АтрибутыXMLУзла", "Имя", Ложь);
			
			Если СписокАтрибутов <> Неопределено Тогда
				Для каждого СтрокаСАтрибутом Из СписокАтрибутов.Строки Цикл
					ПотокXML.ЗаписатьАтрибут(СтрокаСАтрибутом.Имя, СтрокаСАтрибутом.Значение);
				КонецЦикла;
			КонецЕсли;
			
			ПотокXML.ЗаписатьТекст(?(СтрокаДерева.Значение = "00.00.0000", "", СтрокаДерева.Значение));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Лист Из СтрокаДерева.Строки Цикл
		Если Лист.Имя = "АтрибутыXMLУзла" Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьУзелДереваXMLВXML(Лист, ПотокXML, ПрефиксПространстваИмен, URIПространстваИмен, ЗаменятьПодчеркивания);
	КонецЦикла;
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьФайлПОИмениИТексту( Знач ИмяФайла, ТекстФайла, Кодировка = Неопределено) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайла);
	
	Каталог = КаталогВременныхФайлов()+ОбщегоНазначения.ЗначениеРазделителяСеанса()+"\";
	ПроверкаКаталога = Новый Файл(Каталог);
	Если НЕ ПроверкаКаталога.Существует() Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли;
	ПолноеИмяФайла = Каталог + "\" + ИмяФайла;
	Если Кодировка = Неопределено Тогда
		ТекстовыйДокумент.Записать(ПолноеИмяФайла, КодировкаТекста.ANSI);
	Иначе
		ТекстовыйДокумент.Записать(ПолноеИмяФайла, Кодировка);
	КонецЕсли;
	
	ДанныеФайла = Новый ДвоичныеДанные(ПолноеИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
	УдалитьФайлы(ПолноеИмяФайла);
	УдалитьФайлы(Каталог);
	
	Возврат АдресФайла;
	
КонецФункции

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность.
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность)
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	Документ2НДФЛ = Новый Массив;
	СоответствиеСсылокСвойствам = Новый Соответствие;
	Для Каждого ЗапрашиваемыеДанные Из СвойстваОбъектов Цикл
		Если ТипЗнч(ЗапрашиваемыеДанные.Ссылка) = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Тогда
			Документ2НДФЛ.Добавить(ЗапрашиваемыеДанные.Ссылка);
			СоответствиеСсылокСвойствам.Вставить(ЗапрашиваемыеДанные.Ссылка, ЗапрашиваемыеДанные);
		КонецЕсли;
	КонецЦикла;		
	
	Если Документ2НДФЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ2НДФЛ", Документ2НДФЛ);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.Ссылка,
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.Дата КАК ДатаСоздания,
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.Организация,
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.РегистрацияВНалоговомОргане.Код КАК КодКонтролирующегоОргана,
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.ПометкаУдаления,
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.НалоговыйПериод,
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.Комментарий,
	|	""-"" КАК ВариантОтчета
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган КАК СправкиНДФЛДляПередачиВНалоговыйОрган
	|ГДЕ
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.Ссылка В(&Документ2НДФЛ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатыНачалаОкончания = Новый Структура("ДатаНачала, ДатаОкончания");
	Пока Выборка.Следующий() Цикл
		ЗапрашиваемыеДанные = СоответствиеСсылокСвойствам[Выборка.Ссылка];
		ДатыНачалаОкончания.ДатаНачала = НачалоГода(Дата(Выборка.НалоговыйПериод,1,1));
		ДатыНачалаОкончания.ДатаНачала = КонецГода(Дата(Выборка.НалоговыйПериод,1,1));
		ЗаполнитьЗначенияСвойств(ЗапрашиваемыеДанные, Выборка);
		ЗаполнитьЗначенияСвойств(ЗапрашиваемыеДанные, ДатыНачалаОкончания);
	КонецЦикла;
	
КонецПроцедуры

