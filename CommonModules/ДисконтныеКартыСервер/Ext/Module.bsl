#Область ПрограммныйИнтерфейс

// Процедура формирует наименование элемента справочника по значению других реквизитов.
//
Функция УстановитьНаименованиеДисконтнойКарты(Владелец, ВладелецКарты, КодКартыШтрихкод, КодКартыМагнитный) Экспорт

	Если Владелец.ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
		КодКартыСтр = СокрЛП(КодКартыШтрихкод) + " / " + СокрЛП(КодКартыМагнитный);
	ИначеЕсли Владелец.ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
		КодКартыСтр = СокрЛП(КодКартыМагнитный);
	Иначе
		КодКартыСтр = СокрЛП(КодКартыШтрихкод);
	КонецЕсли;
	
	ТекНаименование = "" + ?(ВладелецКарты.Пустая() ИЛИ Не Владелец.ЭтоИменнаяКарта, "", ""+ВладелецКарты+". ") +
	                      ?(Владелец.Пустая(), "", ""+Владелец+". ")
						  + КодКартыСтр;
						  
	Возврат ТекНаименование;

КонецФункции // ПолучитьНаименованиеДисконтнойКарты()

// Процедура записывает в базу данных дисконтную карту на основании
// переданной структуры с данными дисконтной карты.
//
// Параметры
//  СтруктураДанныхКарты - Структура с данными дисконтной карты
//
// Возвращаемое значение
//  СправочникСсылка.ДисконтныеКарты
//
Функция ЗарегистрироватьДисконтнуюКарту(СтруктураДанныхКарты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КартаОбъект = Справочники.ДисконтныеКарты.СоздатьЭлемент();
	
	КартаОбъект.КодКартыШтрихкод  = СтруктураДанныхКарты.Штрихкод;
	КартаОбъект.КодКартыМагнитный = СтруктураДанныхКарты.МагнитныйКод;
	
	КартаОбъект.Владелец   = СтруктураДанныхКарты.ВидКарты;
	
	КартаОбъект.ВладелецКарты = СтруктураДанныхКарты.Контрагент;
	
	КартаОбъект.Наименование = УстановитьНаименованиеДисконтнойКарты(КартаОбъект.Владелец, КартаОбъект.ВладелецКарты, КартаОбъект.КодКартыШтрихкод, КартаОбъект.КодКартыМагнитный);
	
	КартаОбъект.Записать();
	
	Возврат КартаОбъект.Ссылка;
	
КонецФункции

// Функция возвращает пустую структуру данных дисконтных карт 
//
// Параметры
//  Нет
//
// Возвращаемое значение
//  Структура - Данные дисконтной карты
//
Функция ПолучитьСтруктуруДанныхДисконтнойКарты() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Штрихкод");
	СтруктураДанных.Вставить("МагнитныйКод");
	СтруктураДанных.Вставить("Ссылка");
	СтруктураДанных.Вставить("ВидКарты");
	СтруктураДанных.Вставить("ТипКарты");
	СтруктураДанных.Вставить("ЭтоИменнаяКарта");
	СтруктураДанных.Вставить("Контрагент");
	
	Возврат СтруктураДанных;
	
КонецФункции

// Функция возвращает тип кода дисконтной карты, если только он
// используется в видах дисконтных карт.
//
// Параметры
//  Нет
//
// Возвращаемое значение
//  Перечисление.ТипыКодовКарт / Неопределено
//
Функция ПолучитьОсновнойТипКодаДисконтнойКарты() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыДисконтныхКарт.ТипКарты КАК ТипКарты
	|ИЗ
	|	Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	|ГДЕ
	|	НЕ ВидыДисконтныхКарт.ПометкаУдаления");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Количество = Выборка.Количество();
	Если Количество = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли Количество = 1 Тогда
		Выборка.Следующий();
		Если Выборка.ТипКарты = Перечисления.ТипыКарт.Штриховая Тогда
			Возврат Перечисления.ТипыКодовКарт.Штрихкод;
		ИначеЕсли Выборка.ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
			Возврат Перечисления.ТипыКодовКарт.МагнитныйКод;
		ИначеЕсли Выборка.ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
			Возврат Неопределено;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ПоискДисконтныхКарт

// Процедура возвращает дисконтную карту партнера, если она у него одна.
//
// Параметры
//  Партнер - СправочникСсылка.Партнеры
//
// Возвращаемое значение
//  СправочникСсылка.ДисконтныеКарты / Неопределено
//
Функция ПолучитьКартуПоУмолчаниюДляПартнера(Контрагент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДисконтныеКарты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.ВладелецКарты = &Контрагент
	|	И НЕ ДисконтныеКарты.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ЗаменяемаяКарта = Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция выполняет поиск дисконтных карт
//
// Параметры
//  КодКарты - Строка
//  ТипКода - Перечисление.ТипыКодовКарт
//
// Возвращаемое значение
//  Структура. В структуре содержится 2 таблицы значений: Зарегистрированные дисконтные карты
//  и НеЗарегистрированныеДисконтныеКарты.
//
Функция НайтиДисконтныеКарты(КодКарты, ТипКода, Шаблон = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗарегистрированныеДисконтныеКарты = Новый Массив;
	НеЗарегистрированныеДисконтныеКарты = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВидыДисконтныхКарт.Ссылка КАК Ссылка,
	|	ВидыДисконтныхКарт.ЭтоИменнаяКарта КАК ЭтоИменнаяКарта,
	|	ВидыДисконтныхКарт.ТипКарты КАК ТипКарты,
	|	ВидыДисконтныхКарт.ШаблонДисконтнойКарты,
	|	ВидыДисконтныхКарт.ПометкаУдаления
	|ПОМЕСТИТЬ ВидыКарт
	|ИЗ
	|	Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	|ГДЕ
	|	(ВидыДисконтныхКарт.ТипКарты = &ТипКартыСмешанная
	|			ИЛИ ВидыДисконтныхКарт.ТипКарты = &ТипКарты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДисконтныеКарты.Ссылка КАК Ссылка,
	|	ДисконтныеКарты.Наименование КАК Наименование,
	|	ДисконтныеКарты.КодКартыШтрихкод КАК Штрихкод,
	|	ДисконтныеКарты.КодКартыМагнитный КАК МагнитныйКод,
	|	ДисконтныеКарты.ВладелецКарты КАК Контрагент,
	|	ДисконтныеКарты.Владелец КАК ВидКарты,
	|	ДисконтныеКарты.Владелец.ЭтоИменнаяКарта КАК ЭтоИменнаяКарта,
	|	ДисконтныеКарты.Владелец.ТипКарты КАК ТипКарты
	|ПОМЕСТИТЬ ДисконтныеКарты
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыКарт КАК ВидыКарт
	|		ПО (ВидыКарт.Ссылка = ДисконтныеКарты.Владелец)
	|			И (&ИмяПоляКодКарты = &КодКарты)
	|			И (НЕ ДисконтныеКарты.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Порядок,
	|	ДисконтныеКарты.Ссылка КАК Ссылка,
	|	ДисконтныеКарты.Наименование КАК Наименование,
	|	ДисконтныеКарты.Штрихкод КАК Штрихкод,
	|	ДисконтныеКарты.МагнитныйКод КАК МагнитныйКод,
	|	ДисконтныеКарты.Контрагент КАК Контрагент,
	|	ДисконтныеКарты.ВидКарты КАК ВидКарты,
	|	ДисконтныеКарты.ЭтоИменнаяКарта КАК ЭтоИменнаяКарта,
	|	ДисконтныеКарты.ТипКарты КАК ТипКарты,
	|	ЗНАЧЕНИЕ(Справочник.ШаблоныДисконтныхКарт.ПустаяСсылка) КАК ШаблонДисконтнойКарты
	|ИЗ
	|	ДисконтныеКарты КАК ДисконтныеКарты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ЗНАЧЕНИЕ(Справочник.ДисконтныеКарты.ПустаяСсылка),
	|	"""",
	|	&Штрихкод,
	|	&МагнитныйКод,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ВидыКарт.Ссылка,
	|	ВидыКарт.ЭтоИменнаяКарта,
	|	ВидыКарт.ТипКарты,
	|	ВидыКарт.ШаблонДисконтнойКарты
	|ИЗ
	|	ВидыКарт КАК ВидыКарт
	|ГДЕ
	|	НЕ ВидыКарт.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.ВидКарты
	|				ИЗ
	|					ДисконтныеКарты КАК Т)
	|	И НЕ ВидыКарт.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок");
	
	Запрос.УстановитьПараметр("ТипКартыСмешанная", Перечисления.ТипыКарт.Смешанная);
	Если ТипКода = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
		Запрос.УстановитьПараметр("ТипКарты", Перечисления.ТипыКарт.Магнитная);
	Иначе
		Запрос.УстановитьПараметр("ТипКарты", Перечисления.ТипыКарт.Штриховая);
	КонецЕсли;
	
	Если ТипКода = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ИмяПоляКодКарты",        "ДисконтныеКарты.КодКартыМагнитный");
		
		Запрос.УстановитьПараметр("Штрихкод",     "");
		Запрос.УстановитьПараметр("МагнитныйКод", КодКарты);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ИмяПоляКодКарты",        "ДисконтныеКарты.КодКартыШтрихкод");
		
		Запрос.УстановитьПараметр("Штрихкод",     КодКарты);
		Запрос.УстановитьПараметр("МагнитныйКод", "");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодКарты",  КодКарты);
	Запрос.УстановитьПараметр("ДлинаКода", СтрДлина(КодКарты));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			НоваяСтрока = ПолучитьСтруктуруДанныхДисконтнойКарты();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ЗарегистрированныеДисконтныеКарты.Добавить(НоваяСтрока);
		Иначе
			ТекШаблон = Выборка.ШаблонДисконтнойКарты;
			// Эта функция вызывается при вводе кода вручную.
			// Пользователь будет вводить сам код, по-этому его нельзя проверить на соответствие шаблону, т.к. мы не знаем, что содержится на магнитной дорожке.
			// Т.е. будем давать выбрать любой вид дисконтной карты.
			// Если код считан с магнитной карты, то выполняется другая функция, где проверка на соответствие шаблону выполняется.
			Если ТекШаблон.Пустая() ИЛИ ПростаяПроверкаШаблонаМК(КодКарты, ТекШаблон) Тогда
				НоваяСтрока = ПолучитьСтруктуруДанныхДисконтнойКарты();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НеЗарегистрированныеДисконтныеКарты.Добавить(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	ВозвращаемоеЗначение = Новый Структура("ЗарегистрированныеДисконтныеКарты, НеЗарегистрированныеДисконтныеКарты");
	ВозвращаемоеЗначение.ЗарегистрированныеДисконтныеКарты   = ЗарегистрированныеДисконтныеКарты;
	ВозвращаемоеЗначение.НеЗарегистрированныеДисконтныеКарты = НеЗарегистрированныеДисконтныеКарты;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Определяет соответствует ли код карты шаблону
// На входе:
// ДанныеДорожек - Массив содержащий строки кода дорожки. Всего 3 Элемента.
// ДанныеШаблона - структура содержащая данные шаблона:
//	- Суффикс
//	- Префикс
//	- РазделительБлоков
//	- ДлинаКода
// На выходе:
// Истина - код соответствует шаблону
Функция ПростаяПроверкаШаблонаМК(КодКарты, ДанныеШаблона)
	// Проверяем только одну дорожку.
	текСтрока = КодКарты;
	Если (НЕ ДанныеШаблона.БезОграниченияРазмера И СтрДлина(текСтрока) > ДанныеШаблона.ДлинаКода)
		ИЛИ (ДанныеШаблона.ДлинаПоля > 0 И СтрДлина(текСтрока) > ДанныеШаблона.ДлинаПоля)
	Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Функция выполняет поиск дисконтных карт по магнитному коду
//
// Параметры
//  Магнитный код - Строка
//
// Возвращаемое значение
//  Структура. В структуре содержится 2 таблицы значений: Зарегистрированные дисконтные карты
//  и НеЗарегистрированныеДисконтныеКарты.
//
Функция НайтиДисконтныеКартыПоМагнитномуКоду(МагнитныйКод) Экспорт
	
	Возврат НайтиДисконтныеКарты(МагнитныйКод, Перечисления.ТипыКодовКарт.МагнитныйКод);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
