
////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции регламентированных отчетов ФСРАР общего назначения:
// - для работы с формой длительной операции;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс


#Область ПрограммныйИнтерфейсФормаДлительнойОперации

// Открывает форму длительной операции с настройками, зависящими от типа длительной операции.
//
// Параметры:
//		ФормаОтчета					- Управляемая форма - Форма отчета, длительная операция которой показывается.
//		ВидДлОперации				- Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.
//		ИдентификаторЗадания		- Строка - 	УникальныйИдентификатор - Идентификатор фонового задания, процесс
//									выполнения которого показывает форма длительной операции.
//
Процедура ПоказатьФормуДлительнойОперации(ФормаОтчета, ВидДлОперации, ИдентификаторЗадания) Экспорт
	
	ВидДлОперацииВосстановление 	= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление");
	ВидДлОперацииВыгрузка 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка");
	ВидДлОперацииВыгрузкаПакета		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета");
	ВидДлОперацииОтправка 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган");
	ВидДлОперацииПересчет 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПересчетИтогов");
	ВидДлОперацииПечать 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Печать");
	ВидДлОперацииПечатьВАрхив 		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПечатьВАрхив");
	ВидДлОперацииПроверка 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузки");
	ВидДлОперацииПроверкаВИнтернете = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете");
	ВидДлОперацииСохранение 		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Сохранение");
	ВидДлОперацииАвтоЗаполнение		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ЗаполнениеПоданнымИБ");
	ВидДлОперацииОчисткаОтМусора	= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОчисткаРегистровСведенийОтМусора");
	ВидДлОперацииСкопироватьТекущиеРегистры	= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.СкопироватьТекущиеРегистры");
	
	ВыполняетсяДлительнаяОперация = Истина;
	
	Если ВидДлОперации = ВидДлОперацииВосстановление Тогда
		
		ВидимостьПроцентов = Ложь;
		// Режим длительной операции включается только при копировании отчетов
		// или при импорте данных отчета из старого формата.
		СообщениеПользователю = "Копируются данные отчета";		
		ДоступностьКнОтмена = Ложь;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииСкопироватьТекущиеРегистры Тогда
		
		ВидимостьПроцентов = Ложь;
		// Это не операция копирования отчета - копирование отчета реализовано
		// через операцию Восстановления.
		// Это копирование содержимого регистров в случае, если отчет записывается
		// с новым номером корректировки в режиме "создать новый".
		СообщениеПользователю = "Копируются данные отчета";		
		ДоступностьКнОтмена = Ложь;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииВыгрузка Тогда
		
		ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Выгружается отчет.";		 
		ДоступностьКнОтмена = Истина;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииВыгрузкаПакета Тогда
		
		ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Выгружается отчет для портала ФСРАР.";		 
		ДоступностьКнОтмена = Истина;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииОтправка Тогда
		
		ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Выгружается отчет для отправки в ФСРАР.";		 
		ДоступностьКнОтмена = Истина;
	
	ИначеЕсли ВидДлОперации = ВидДлОперацииПересчет Тогда
		
		ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Пересчитываются строки таблиц Разделов отчета.";		 
		ДоступностьКнОтмена = Ложь;
	
	ИначеЕсли ВидДлОперации = ВидДлОперацииПечать
		или   ВидДлОперации = ВидДлОперацииПечатьВАрхив Тогда
		
		ВидимостьПроцентов = Ложь;
		СообщениеПользователю = "Формируются печатные листы отчета.";		 
		ДоступностьКнОтмена = Истина;
	
	ИначеЕсли ВидДлОперации = ВидДлОперацииПроверка Тогда
		
		ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Проверяется возможность выгрузки отчета.";		 
		ДоступностьКнОтмена = Истина;
	
	ИначеЕсли ВидДлОперации = ВидДлОперацииПроверкаВИнтернете Тогда
		
		ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Выгружается отчет для проверки в Интернете.";		 
		ДоступностьКнОтмена = Истина;
	
	ИначеЕсли ВидДлОперации = ВидДлОперацииСохранение Тогда
		
	    ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Сохраняются данные отчета.";		 
		ДоступностьКнОтмена = Ложь;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииАвтоЗаполнение Тогда
		
	    ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Идет заполнение отчета по данным информационной базы.";		 
		ДоступностьКнОтмена = Ложь;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииОчисткаОтМусора Тогда
		
	    ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Идет очистка регистров отчета от ненужной информации.";		 
		ДоступностьКнОтмена = Ложь;
			
	КонецЕсли;
	
	ФормаОтчета.СообщениеПользователю = СообщениеПользователю;
	ФормаОтчета.НачалосьВыполнениеДлительнойОперации = Ложь;
	
	СтруктураНастроекФормыДлительнойОперации = Новый Структура;
	
	СтруктураНастроекФормыДлительнойОперации.Вставить("СообщениеПользователю", СообщениеПользователю);
	СтруктураНастроекФормыДлительнойОперации.Вставить("ДоступностьКнОтмена", ДоступностьКнОтмена);
	СтруктураНастроекФормыДлительнойОперации.Вставить("ВидимостьПроцентаВыполненияОперации", ВидимостьПроцентов);
	СтруктураНастроекФормыДлительнойОперации.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	СтруктураНастроекФормыДлительнойОперации.Вставить("ВыполняетсяДлительнаяОперация", ВыполняетсяДлительнаяОперация);
	
	УправлениеФормойДлительнойОперации(ФормаОтчета, СтруктураНастроекФормыДлительнойОперации);
	
КонецПроцедуры

// Определяет форму-владелец для формы длительной операции отчета.
// Поскольку длительные операции реализованы как при открытой, так и при закрытой форме отчета,
// при показе формы длительной операции необходимо определить форму-владелец для нее,
// в том случае, если она неизвестна.
// Приоритет при этом имеет ОбщаяФорма.РегламентированнаяОтчетность.
//
// Параметры:
// 		ФормаОтчета				- Управляемая форма - Форма отчета, длительная операция которого показывается.
//
// Возвращаемое значение:
// 		Управляемая форма.
//
Функция ОпределитьОткрытуюФормуВладелецФормыДлительнойОперации(ФормаОтчета) Экспорт

	Если ФормаОтчета.Открыта() Тогда
	
		Возврат ФормаОтчета;
	
	КонецЕсли; 
	
	// определяем форму текущего активного окна	
		
	// Помимо 1С отчетности может быть открыто что-то еще и 
	// и пользователь в ожидании завершения длительной операции
	// может переключиться.
	// Поэтому ищем среди открытых окон 1С-отчетность или Управление отчетностью.
	ОкнаПриложений = ПолучитьОкна();
	Для Каждого ОкноПриложения Из ОкнаПриложений Цикл
	
		МассивФорм = ОкноПриложения.Содержимое;
		КолФорм = МассивФорм.Количество();
		
		Если КолФорм > 0 Тогда
		    Для Инд = 0 По КолФорм - 1 Цикл
			
				ТекФорма = МассивФорм[Инд];
				ИмяТекФормы = ТекФорма.ИмяФормы;
				
				Если ВРег(ИмяТекФормы) = ВРег("ОбщаяФорма.РегламентированнаяОтчетность") Тогда
				    // это форма 1С-отчетность
					Возврат ТекФорма;
					
				ИначеЕсли СтрНайти(ВРег(ИмяТекФормы), ВРег("УправлениеОтчетностью")) > 0 Тогда
					// это форма Управление отчетностью
					Возврат ТекФорма;				
				
				КонецЕсли; 
			
			КонецЦикла; 		
		КонецЕсли;		
	
	КонецЦикла; 
	
	Возврат Неопределено;

КонецФункции 

// Открывает, закрывает форму длительной операции с переданными настройками, 
// или передает в открытую форму длительной операции новые настройки отображения.
//
// Параметры:
//	 ФормаОтчета				- Управляемая форма - Форма отчета, длительная операция которой показывается.
//	 СтруктураНастроекФормыДлительнойОперации - Структура, содержит свойства:
//
//	 	* СообщениеПользователю 				- Строка - Необязательный. Основное сообщение, выводимое в форме 
//												длительной операции.
// 		* ДопСообщениеПользователю 				- Строка - Необязательный. Дополнительное сообщение, выводимое после основного, 
//												с новой строки.
// 		* ДоступностьКнОтмена					- Булево - Необязательный. Определяет доступность и видимость кнопки "Отмена" 
//												на форме длительной операции.
// 		* ВидимостьПроцентаВыполненияОперации 	- Булево - Необязательный. Определяет видимость шкалы прогресса
//												с процентом выполнения.
// 		* ПроцентВыполненияОперации 			- Число - Необязательный. Процент выполнения длительной операции, 
//												который надо показать. Данное свойство учитывается только если передано
//												свойство ВидимостьПроцентаВыполненияОперации.
// 		* ИмяПроцедурыПослеОткрытияФормыДлитОперации - Строка - Необязательный. Имя процедуры, выполняемой с задержкой после 
//												выполнения процедуры.
// 		* ВыполняетсяДлительнаяОперация			- Булево - Необязательный. Признак выполнения длительной операции.
//												Если Истина - форма длительной операции открывается, если не открыта или
//															в нее передаются новые настройки, если уже открыта.
//												Если Ложь - форма длительной операции закрывается.
//												По умолчанию Ложь.
//		
//
Процедура УправлениеФормойДлительнойОперации(ФормаОтчета, СтруктураНастроекФормыДлительнойОперации) Экспорт
												
												
	Перем СообщениеПользователю, ДопСообщениеПользователю, ДоступностьКнОтмена, 
		ВидимостьПроцентаВыполненияОперации, ПроцентВыполненияОперации, 
		ИмяПроцедурыПослеОткрытияФормыДлитОперации, ВыполняетсяДлительнаяОперация;
		
	СтруктураНастроекФормыДлительнойОперации.Свойство("СообщениеПользователю", СообщениеПользователю);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ДопСообщениеПользователю", ДопСообщениеПользователю);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ДоступностьКнОтмена", ДоступностьКнОтмена);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ВидимостьПроцентаВыполненияОперации", ВидимостьПроцентаВыполненияОперации);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ПроцентВыполненияОперации", ПроцентВыполненияОперации);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ИмяПроцедурыПослеОткрытияФормыДлитОперации", ИмяПроцедурыПослеОткрытияФормыДлитОперации);
	
	
	СтруктураНастроекФормыДлительнойОперации.Свойство("ВыполняетсяДлительнаяОперация", ВыполняетсяДлительнаяОперация);
	ВыполняетсяДлительнаяОперация = ?(ВыполняетсяДлительнаяОперация = Неопределено, Ложь, ВыполняетсяДлительнаяОперация);
	
	// Если в форме отчета не зафиксирована форма-владелец, попробуем ее найти.
	Если ФормаОтчета.ВладелецФормыДлитОпер = Неопределено Тогда
		
	    ВладелецФормыДлитОпер = ОпределитьОткрытуюФормуВладелецФормыДлительнойОперации(ФормаОтчета);
		ФормаОтчета.ВладелецФормыДлитОпер = ВладелецФормыДлитОпер;
		
	Иначе
		ВладелецФормыДлитОпер = ФормаОтчета.ВладелецФормыДлитОпер;
	КонецЕсли; 											
	
	
	
	// пробуем найти открытую форму длительной операции для данного отчета.
	ФормаДлительнойОперацииОтчета = ФормаОтчета.ФормаДлительнойОперации;
	Если НЕ ТипЗнч(ФормаДлительнойОперацииОтчета) = Тип("УправляемаяФорма") Тогда
		
		ФормаДлительнойОперацииОтчета = ОпределитьОткрытуюФормуДлительнойОперации(ФормаОтчета);
		Если ТипЗнч(ФормаДлительнойОперацииОтчета) = Тип("УправляемаяФорма") Тогда			
			ФормаОтчета.ФормаДлительнойОперации = ФормаДлительнойОперацииОтчета;			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняетсяДлительнаяОперация Тогда
						
		ПараметрыФормы = Новый Структура;
				
		Если НЕ ДоступностьКнОтмена = Неопределено Тогда
		    ПараметрыФормы.Вставить("ДоступностьКнОтмена", ДоступностьКнОтмена);
		КонецЕсли;
		
		Если НЕ СообщениеПользователю = Неопределено Тогда
		    ПараметрыФормы.Вставить("СообщениеПользователю", СообщениеПользователю);		
		Иначе
			ПараметрыФормы.Вставить("СообщениеПользователю", "");
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ДопСообщениеПользователю", ДопСообщениеПользователю);		
				
		ВариантСПроцентами = Истина;
		Если НЕ ВидимостьПроцентаВыполненияОперации = Неопределено Тогда
		    ПараметрыФормы.Вставить("ВидимостьПроцентВыполнения", ВидимостьПроцентаВыполненияОперации);		
		Иначе
			ВариантСПроцентами = Ложь;
		КонецЕсли; 

		Если ВариантСПроцентами Тогда
		
			Если НЕ ПроцентВыполненияОперации = Неопределено Тогда
			    ПараметрыФормы.Вставить("ПроцентВыполнения", ПроцентВыполненияОперации);					
			КонецЕсли;	
		
		КонецЕсли; 
		
		ПараметрыФормы.Вставить("УникальностьФормы", ФормаОтчета.УникальностьФормы);
		
        ИмяФормыДлительнойОперации = "ОбщаяФорма.АЛКОДлительнаяОперация";
		 
				
		Если НЕ ТипЗнч(ФормаДлительнойОперацииОтчета) = Тип("УправляемаяФорма") Тогда
			
			ФормаДлительнойОперацииОтчета = ПолучитьФорму(ИмяФормыДлительнойОперации, ПараметрыФормы, ВладелецФормыДлитОпер, ФормаОтчета.УникальностьФормы);
			ФормаДлительнойОперацииОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму(ФормаДлительнойОперацииОтчета);
			
			ФормаОтчета.ФормаДлительнойОперации = ФормаДлительнойОперацииОтчета;			
						
		ИначеЕсли НЕ ФормаДлительнойОперацииОтчета.Открыта() Тогда
						
			ФормаДлительнойОперацииОтчета = ПолучитьФорму(ИмяФормыДлительнойОперации, ПараметрыФормы, ВладелецФормыДлитОпер, ФормаОтчета.УникальностьФормы);
			ФормаДлительнойОперацииОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму(ФормаДлительнойОперацииОтчета);
			
			ФормаОтчета.ФормаДлительнойОперации = ФормаДлительнойОперацииОтчета;
			
		Иначе
			// Оповещение в форму длительной операции.
			Оповестить("ИмитацияАктивности", ПараметрыФормы, ФормаОтчета.УникальностьФормы);			
		КонецЕсли;
			 
	Иначе
		
		// Нужно закрыть форму длительной операции, если она открыта
		Если ТипЗнч(ФормаДлительнойОперацииОтчета) = Тип("УправляемаяФорма") Тогда
			
			// Оповещение в форму длительной операции.
			Оповестить("ЗакрытьДлительнуюОперацию", , ФормаОтчета.УникальностьФормы);
			
			ФормаОтчета.ФормаДлительнойОперации = Неопределено;
						
		КонецЕсли;	
					
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИмяПроцедурыПослеОткрытияФормыДлитОперации) Тогда
	    ВыполнитьСЗадержкой(ФормаОтчета, ИмяПроцедурыПослеОткрытияФормыДлитОперации, ФормаОтчета.ВремяЗадержкиДлитОперации);	
	КонецЕсли;	
	
КонецПроцедуры

// Закрывает форму длительной операции.
//
// Параметры:
//		ФормаОтчета				- Управляемая форма - Форма отчета, длительная операция которой показывается.
//		
//
Процедура ВыключитьЗаставкуДлительнойОперации(ФормаОтчета) Экспорт
	
	ВыполняетсяДлительнаяОперация = Ложь;
	
	СтруктураНастроекФормыДлительнойОперации = Новый Структура;
	СтруктураНастроекФормыДлительнойОперации.Вставить("ВыполняетсяДлительнаяОперация", ВыполняетсяДлительнаяОперация);
	
	УправлениеФормойДлительнойОперации(ФормаОтчета,СтруктураНастроекФормыДлительнойОперации);
	
КонецПроцедуры 

// Проверяет выполнение длительной операции и в случае завершения вызывает из 
// модуля формы отчета ПослеВыполненияДлительнойОперацииНаКлиенте(), в противном случае
// читает информацию переданную из длительной операции и отображает ее в форме 
// длительной операции.
//
// Параметры:
//		ФормаОтчета				- Управляемая форма - Форма отчета, длительная операция которой показывается.
//		
// Возвращаемое значение:
//		Булево - Истина, если длительная операция завершена.
//
Функция ВыполнитьДействияПриПроверкеВыполненияДлительнойОперации(ФормаОтчета) Экспорт

	Отладка = Истина;
	
	Попытка
		
		Если ФормаОтчета.ОтменаОперации Тогда
		    ВыключитьЗаставкуДлительнойОперации(ФормаОтчета);
			Возврат Истина;		
		КонецЕсли; 
		
		ИдентификаторЗадания = ФормаОтчета.СтруктураРеквизитовФормы.ИдентификаторЗадания;
		СообщениеОбОшибке = Неопределено;
		
		Если РегламентированнаяОтчетностьАЛКОВызовСервера.ПроверитьВыполнениеЗадания(ИдентификаторЗадания, СообщениеОбОшибке) Тогда 
			
			АдресРезультата = ФормаОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище;
			
			ЕстьОшибка = Ложь;
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				
				ЕстьОшибка = Истина;
				
			ИначеЕсли НЕ РегламентированнаяОтчетностьАЛКОВызовСервера.ПроверитьКорректностьЗавершения(АдресРезультата) Тогда				
				
				ЕстьОшибка = Истина;
				СообщениеОбОшибке = НСтр("ru = 'Не удалось выполнить данную операцию. 
		                    					|Подробности см. в Журнале регистрации.'");
				
			КонецЕсли;
			
			Если ЕстьОшибка Тогда
				
				ВыключитьЗаставкуДлительнойОперации(ФормаОтчета);
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СообщениеОбОшибке;				
				Сообщение.Сообщить();
				
			Иначе
				ФормаОтчета.ПослеВыполненияДлительнойОперацииНаКлиенте();
			КонецЕсли; 
						
			Возврат Истина;
			
		Иначе
						
			// Обновляем информацию в форме длительной операции.
			
			Информация = РегламентированнаяОтчетностьАЛКОВызовСервера.ПолучитьИнформациюИзФоновойЗадачи(ИдентификаторЗадания);
			
			Если ТипЗнч(Информация) = Тип("Структура") Тогда
				
				Если НЕ ФормаОтчета.НачалосьВыполнениеДлительнойОперации Тогда
					ФормаОтчета.НачалосьВыполнениеДлительнойОперации = Истина;									    				
				КонецЕсли; 
				
				// Передача структуры информации через ДопПараметры.
				СтруктураИнформации = Информация.ДополнительныеПараметры;
				
				СообщениеИзФоновойЗадачи = Неопределено;
				Если СтруктураИнформации.Свойство("СообщениеПользователю") и Отладка Тогда
				    СообщениеИзФоновойЗадачи = Строка(СтруктураИнформации.СообщениеПользователю);				
				КонецЕсли; 
								
				СообщениеПользователю = ?(ЗначениеЗаполнено(ФормаОтчета.СообщениеПользователю), ФормаОтчета.СообщениеПользователю, "");  
									
				ВидимостьПроцентов = Ложь;
				Если СтруктураИнформации.Свойство("ВидимостьПроцентаВыполненияОперации") Тогда
				    ВидимостьПроцентов = СтруктураИнформации.ВидимостьПроцентаВыполненияОперации;				
				КонецЕсли;
				
				ПроцентВыполнения = 0;
				Если СтруктураИнформации.Свойство("ПроцентВыполненияОперации") Тогда
				    ПроцентВыполнения = СтруктураИнформации.ПроцентВыполненияОперации;				
				КонецЕсли;
				
				СтруктураНастроекФормыДлительнойОперации = Новый Структура;
				
				СтруктураНастроекФормыДлительнойОперации.Вставить("СообщениеПользователю", СообщениеПользователю);
				СтруктураНастроекФормыДлительнойОперации.Вставить("ДопСообщениеПользователю", СообщениеИзФоновойЗадачи);				
				СтруктураНастроекФормыДлительнойОперации.Вставить("ВидимостьПроцентаВыполненияОперации", ВидимостьПроцентов);
				СтруктураНастроекФормыДлительнойОперации.Вставить("ПроцентВыполненияОперации", ПроцентВыполнения);
				СтруктураНастроекФормыДлительнойОперации.Вставить("ВыполняетсяДлительнаяОперация", Истина);
	
				УправлениеФормойДлительнойОперации(ФормаОтчета, СтруктураНастроекФормыДлительнойОперации);
														
			ИначеЕсли НЕ ФормаОтчета.НачалосьВыполнениеДлительнойОперации Тогда
														
				// По вспомогательному адресу ничего не лежит,										
				// значит работа фоновой задачи еще  не началась.
				СообщениеПользователю = "Выполняются другие фоновые задачи,
										|необходимо дождаться их завершения.";
										
				СтруктураНастроекФормыДлительнойОперации = Новый Структура;
				
				СтруктураНастроекФормыДлительнойОперации.Вставить("СообщениеПользователю", СообщениеПользователю);				
				СтруктураНастроекФормыДлительнойОперации.Вставить("ВыполняетсяДлительнаяОперация", Истина);
	
				УправлениеФормойДлительнойОперации(ФормаОтчета, СтруктураНастроекФормыДлительнойОперации);
				
			КонецЕсли;
									
			Возврат Ложь;
				
		КонецЕсли;
		
	Исключение
				
		ВыключитьЗаставкуДлительнойОперации(ФормаОтчета);		
				
		ВызватьИсключение;
		
		Возврат Истина;
		
	КонецПопытки;

КонецФункции

#КонецОбласти


// Выполняет процедуру формы с указанной задержкой, если форма не открыта - осуществляется попытка
// выполнить без задержки.
// Полезна, когда небольшая задержка необходима для выполнения кода после синхронизации Клиент-Сервер,
// это актуально для Веб-Клиента.
// Кроме того, поскольку в некоторых обработчиках запрещено использовать серверные методы, с помощью этой
// процедуры легко реализовать вызов серверного метода из такого обработчика, но с небольшой задержкой.
//
// Параметры:
//		Форма					- Управляемая форма - Форма, в контексте которой будет выполняться процедура.
//		ИмяПроцедуры			- Строка - Имя процедуры Формы, которую надо выполнить. 
//								Процедура должна не иметь параметров.
//								Для гарантии выполнения вне зависимости от работоспособности метода
//								ПодключитьОбработчикОжидания(), предполагается наличие в модуле Формы также
//								процедуры с именем ИмяПроцедуры + "ИзОповещения" 
//								с параметрами (Результат, Допданные) Экспорт.
//		Таймаут					- Число - Необязательный. Интервал времени в секундах с точностью до 1/10 секунды, 
//								через который будет осуществляться вызов процедуры (положительное число). 
//								Если передан 0, тогда сначала производится попытка определения таймаута по 
//								экспортной клиентской переменной или реквизиту Формы ВремяЗадержки.
//								
//
Процедура ВыполнитьСЗадержкой(Форма, ИмяПроцедуры, Таймаут = 0) Экспорт

	Если НЕ ( ТипЗнч(Форма) = Тип("УправляемаяФорма") ) Тогда
	    Возврат;	
	КонецЕсли;
	
	Если Таймаут = 0 Тогда
		
	    Попытка
		    Таймаут = Форма.ВремяЗадержки;		
		Исключение		
		КонецПопытки;	
	
	КонецЕсли;
	
	Задержка = ?(Таймаут < 0.1, 0.1, Таймаут);
		
	Если ЗначениеЗаполнено(ИмяПроцедуры) Тогда
		
		БезЗадержки = Ложь;
		Если Форма.Открыта() Тогда
		    Форма.ПодключитьОбработчикОжидания(ИмяПроцедуры, Задержка, Истина);
		Иначе
			
			Попытка
			    // Форма может не иметь реквизит СтруктураРеквизитовФормы.
				
				// Форма.Открыта() для открытой формы не всегда Истина, 
				// если еще работают клиентские методы при открытии-инициализации.
				Если НЕ Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		    		Форма.ПодключитьОбработчикОжидания(ИмяПроцедуры, Задержка, Истина);
				Иначе
					БезЗадержки = Истина;
				КонецЕсли;
				
			Исключение
			    БезЗадержки = Истина;
			КонецПопытки;
					
		    Если БезЗадержки Тогда
			
				// при закрытой форме ПодключитьОбработчикОжидания() не отрабатывает корректно
				// выполним без задержки.
			    // должен существовать метод формы с окончанием ИзОповещения 
				// и параметрами (Результат, Допданные) Экспорт
				Попытка
				
					Оповещение = Новый ОписаниеОповещения(ИмяПроцедуры + "ИзОповещения", Форма.ЭтотОбъект);
					ВыполнитьОбработкуОповещения(Оповещение);	
				
				Исключение
				    // Ничего не делаем - нет нужного метода в модуле переданной формы,
					// просто сообщаем о возникшей ошибке.
					Инфо = ИнформацияОбОшибке();
    				ПоказатьИнформациюОбОшибке(Инфо);
				КонецПопытки;
			    
			КонецЕсли;		    
		    		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Сохраняет ZIP архив файлов табличного документа в выбранном пользователем формате, 
// предварительно сохраненный во временном хранилище, на клиентском компьютере.
// При этом определяется имя файла по умолчанию для сохраняемого файла на основании переданных реквизитов 
// отчета.
//
// Параметры:
//		АдресВоВременномХранилищеZIP	- Строка - 	Адрес временного хранилища, 
//										в котором должен быть помещен ZIP архив.
//		ТипЭкспорта						- ТипФайлаТабличногоДокумента - выбранный пользователем вариант 
//										формата файлов для сохранения табличного документа.
//		СокращенноеИмяОтчета			- Строка - Очень короткое имя отчета, для алкоотчетов например 
//										это "ALKO_01" дли Приложения 1 или "ALKO_11" для Приложения 11.
//		ОтчетныйПериодСГодом			- Строка - Строка вида "2квартал2016года", отражающая отчетный период отчета.
//		ОрганизацияНаименованиеСокращенное - Строка - Сокращенное наименование организации-декларанта отчета.
//								
//
Процедура СохранитьФайлыZIP(АдресВоВременномХранилищеZIP, ТипЭкспорта, СокращенноеИмяОтчета,
							ОтчетныйПериодСГодом, ОрганизацияНаименованиеСокращенное) Экспорт
		
	
	СоответсвиеРасширений = Новый Соответствие;
			
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.PDF, ".pdf");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.XLS, ".xls");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.XLSX, ".xlsx");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.MXL, ".mxl");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.DOCX, ".docx");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.ODS, ".ods");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.HTML, ".html");
	
	Расширение = СоответсвиеРасширений.Получить( ТипЭкспорта );
	
	СтрОтчПериод = Стрзаменить(ОтчетныйПериодСГодом, " ", "");
	// убираем все символы которых не должно быть в имени файла	
	СокращенноеНаименованиеОрг = ОрганизацияНаименованиеСокращенное;
	
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, " ", "-");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ".", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ",", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ":", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ";", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "?", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "!", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "№", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "#", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "@", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "~", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "`", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, """", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "'", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "/", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "\", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "|", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "[", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "]", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "{", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "}", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "+", "-");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "*", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "&", "-");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "^", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "=", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "%", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "$", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ">", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "<", "");
	
	ИмяКонечногоФайла = СокращенноеИмяОтчета + "_" + СокращенноеНаименованиеОрг + "_" + СтрОтчПериод 
						+ "_(" + Сред(Расширение, 2) + ").zip";
			
	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилищеZIP) Тогда
		
		ПолучитьФайл(АдресВоВременномХранилищеZIP, ИмяКонечногоФайла, Истина);
		
	КонецЕсли;
		
КонецПроцедуры

// Проверяет подключение организации к 1С-Отчетности и к сдаче на портале ФСРАР.
// В случае не подключения к 1С-отчетности - выдаются стандартная форма-предложение оформить Заявление на подключение.
// В случае не подключения к порталу ФСРАР - выдается предупреждение. 
//
// Параметры:
//		ОрганизацияОтчета 	- Справочник.Организации.Ссылка - Организация, подключение которой проверяется.
//		ТолькоОтчетность	- Булево - Необязательный. 
//							Если Истина, проверяется подключение только к 1С- отчетности. 
//							Ложь - проверяется подключение и к 1С-отчетности и к ФСРАР.
//		
// Возвращаемое значение:
// 		Структура, со свойствами
// 			* ФСРАР 		- Булево, Истина, если организация подключена к сдаче отчетности в ФСРАР.
// 			* Отчетность 	- Булево, Истина, если организация подключена к сдаче отчетности в 1С-Отчетности.
//
Функция ПроверитьПодключениеОрганизации(ОрганизацияОтчета, ТолькоОтчетность = Ложь) Экспорт

	Подключение = РегламентированнаяОтчетностьАЛКОВызовСервера.ОрганизацияПодключенаК1СОтчетностиИкФСРАР(ОрганизацияОтчета);
	
	Если НЕ Подключение.Отчетность Тогда
	    // Выдаем стандартное приглашение.
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение(ОрганизацияОтчета);
	ИначеЕсли (НЕ Подключение.ФСРАР) и (НЕ ТолькоОтчетность) Тогда	
	    ПоказатьПредупреждение(,НСтр("ru = 'По организации отчета не включена возможность электронного документооборота с Росалкогольрегулированием!'"));
	КонецЕсли;
	
	Возврат Подключение;

КонецФункции

Процедура ВводРеквизитовОП_АЛКО(Форма) Экспорт
	
	Если Форма.АктивнаяСтраницаРаздела.ДополнительныеДанные.Количество() = 0 Тогда
		Форма.АктивнаяСтраницаРаздела.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
		
	СведенияОбОП = РегламентированнаяОтчетностьАЛКОВызовСервера.ПолучитьПустуюСтруктуруСведенийОбОП();
		
	СохраненныеСведения = Неопределено;
	ИмяЭлементаСтруктуры = "СведенияОбОП";
	
	Если Форма.АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.Свойство(ИмяЭлементаСтруктуры, СохраненныеСведения) Тогда
    	ЗаполнитьЗначенияСвойств(СведенияОбОП, СохраненныеСведения);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СведенияОбОП", 		СведенияОбОП);
	ПараметрыФормы.Вставить("ЭтоПБОЮЛ", 			Форма.СтруктураДанныхТитульный.ЭтоПБОЮЛ);
	ПараметрыФормы.Вставить("УникальностьФормы",	Форма.УникальностьФормы);
	
	ИмяФормыВводРеквизитовОП = "ОбщаяФорма.АЛКОВводРеквизитовОП";
	
	ДополнительныеПараметры = Новый Структура("ИмяЭлементаСтруктуры, СведенияОбОП", ИмяЭлементаСтруктуры, СведенияОбОП);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводРеквизитовОПЗавершение", Форма.ЭтотОбъект, ДополнительныеПараметры);
		
	ОткрытьФорму(ИмяФормыВводРеквизитовОП, ПараметрыФормы, Форма, , , , ОписаниеОповещения, 
												РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура НомерКорректировкиПриИзмененииАЛКО(Форма, Элемент) Экспорт
	
	Если Число(Форма.НомерКорректировки) >=0 Тогда
		
		Если Форма.СтруктураДанныхТитульный.Свойство("НомКорр") Тогда
			
		    Если Форма.СтруктураДанныхТитульный.НомКорр <> Форма.НомерКорректировки Тогда
			
				Форма.СтруктураДанныхТитульный.Вставить("НомКорр", Форма.НомерКорректировки);
				Форма.Модифицированность = Истина;
			
			КонецЕсли; 
			
		Иначе
			Форма.СтруктураДанныхТитульный.Вставить("НомКорр", Форма.НомерКорректировки);
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Форма.СтруктураРеквизитовФормы.ВидДокумента = ?(Форма.НомерКорректировки = 0, 0, 1);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭлементТитульногоПриИзмененииАЛКО(Форма, Элемент, ИмяВСтруктуреДанныхТитульный, ИмяРеквизитаФормы) Экспорт
	
	Если Форма.СтруктураДанныхТитульный.Свойство(ИмяВСтруктуреДанныхТитульный) Тогда
		
	    Если Форма.СтруктураДанныхТитульный.ЭлектроннаяПочта <> Форма[ИмяРеквизитаФормы] Тогда
		
			Форма.СтруктураДанныхТитульный.Вставить(ИмяВСтруктуреДанныхТитульный, Форма[ИмяРеквизитаФормы]);
			Форма.Модифицированность = Истина;
		
		КонецЕсли; 
		
	Иначе
		Форма.СтруктураДанныхТитульный.Вставить(ИмяВСтруктуреДанныхТитульный, Форма[ИмяРеквизитаФормы]);
		Форма.Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОрганизацияОткрытиеАЛКО(Форма, Элемент = Неопределено, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОрганизации = Новый Структура("Ключ", Форма.ОрганизацияОтчета);
	
	Оповещение = Новый ОписаниеОповещения("ОрганизацияОткрытиеЗавершение", Форма.ЭтотОбъект);

	ФормаСправочникаОрганизации = ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыОрганизации, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
	ЭлементУправления = Неопределено;

	Если НЕ Элемент = Неопределено Тогда
	
		ИмяЭлемента = Элемент.Имя;
				
		Если (ИмяЭлемента = "ИНН") или (ИмяЭлемента = "КПП") Тогда
			
			Если Форма.ЭтоПБОЮЛ Тогда
			    ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти("ИННИП");		
			КонецЕсли;
			
			Если ЭлементУправления = Неопределено Тогда
			    ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти(ИмяЭлемента);		
			КонецЕсли; 
		    		
		ИначеЕсли ИмяЭлемента = "ЭлектронныйАдресОрганизации" Тогда
			
			ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти("КонтактнаяИнформацияПолеEmailОрганизации");
					
		ИначеЕсли ИмяЭлемента = "ПолныйАдресТелефон" Тогда
			
			ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти("КонтактнаяИнформацияПолеЮрАдресОрганизации");
			
		ИначеЕсли (ИмяЭлемента = "Руководитель") или (ИмяЭлемента = "ГлавныйБухгалтер") Тогда
			
			ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти(ИмяЭлемента);
			
		КонецЕсли;	
	
	КонецЕсли; 
	
	
	Если ЭлементУправления <> Неопределено Тогда
	    ФормаСправочникаОрганизации.ТекущийЭлемент = ЭлементУправления;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаФормыРазделаВыборАЛКО(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент);
	
	// Отрабатываем ситуацию двойного клика на колонке отбора.
	ИмяПоля = Поле.Имя;
		
	Если ИмяПоля = "Активно" + Форма.ТекущийИдГруппы Тогда
		 
		СтандартнаяОбработка = Ложь;
				
		Форма.АктивныйЭлементТаблицы = Элемент;
		// Нельзя использовать серверные методы. 				
		Оповестить("АктивацияДеактивация", , Форма.УникальностьФормы);
				
	    Возврат;
		
	КонецЕсли; 
	
	Форма.ТекущееСостояние =  "Редактирование";
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекущиеДанные.Активно Тогда
	    // Строка выключена из отбора, соответственно в итогах не участвует.
		// И меняется не поле активности (пометка на удаление).
		Возврат;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаФормыРазделаПередУдалениемАЛКО(Форма, Элемент, Отказ = Истина) Экспорт
	
	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент);
	
	Отказ = Истина;
			
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;	
	КонецЕсли; 
				
	// Отмена удаления.
	Форма.АктивныйЭлементТаблицы = Элемент;
	// Нельзя использовать серверные методы. 				
	Оповестить("АктивацияДеактивация", , Форма.УникальностьФормы);
																		
КонецПроцедуры

Процедура ТаблицаФормыРазделаПередНачаломДобавленияАЛКО(Форма, Элемент, Отказ, Копирование, 
																Родитель, Группа, Параметр) Экспорт
	
	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент); 
			
	Форма.ТекущееСостояние = ?(Копирование, "Копирование", "Добавление");
		
	// Добавляем строку в конец, если Копирование - копируем.
	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
	
	// Заполняем переменные, которые будут использоваться формой записи регистра сведений.
	Форма.КоличествоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеГруппы(
															Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);
	Форма.ИндексАктивнойСтраницыВРегистре = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(
															Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);
			
КонецПроцедуры

Процедура ТаблицаФормыРазделаПриИзмененииАЛКО(Форма, Элемент) Экспорт
	
	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент);
	
	Форма.АктивныйЭлементТаблицы = Элемент;
					
КонецПроцедуры

Процедура ТаблицаФормыРазделаПриАктивизацииСтрокиАЛКО(Форма, Элемент) Экспорт
	
	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент);
	
	Форма.АктивныйЭлементТаблицы = Элемент;
	// Нельзя использовать серверные методы. 				
	Оповестить("ПриАктивизацииСтрокиНаКлиенте", , Форма.УникальностьФормы);
		
КонецПроцедуры

Процедура КомандаОчиститьРегистрыОтМусораАЛКО(Форма) Экспорт
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, "Частичная очистка");
	Кнопки.Добавить(КодВозвратаДиалога.Нет, "Полная очистка");
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
	
	ТекстВопроса = НСтр("ru='Внимание! 
							|После применения данной процедуры восстановление удаленных страниц станет невозможным!
							|
							|Частичная очистка - очистка регистров от данных удаленных страниц.
							|Может выполняться длительное время, если удаленные страницы содержали большое количество строк.
							|
							|Полная очистка - очистка регистров от данных удаленных страниц и 
							|дополнительно удаляются строки, помеченные на удаление в активных (неудаленных) страницах.
							|Выполняется дольше частичной очистки. 
							|
							|Если помеченных на удаление строк немного, рекомендуется частичная очистка.
							|
							|Если Отчет изменен, перед очисткой изменения будут сохранены.
							|
							|Очистка не влияет на работоспособность отчета, она необходима лишь в целях уменьшения 
							|размера информационной базы, особенно если база файловая.
							|
							|Для файловой ИБ возможна выдача ошибок о превышении максимального размера 
							|внутреннего файла 1Cv8.1CD в Журнале регистрации при операциях Заполнения, 
							|Копирования отчета или при интерактивном добавлении строк табличной части.
							|Если это произошло - необходимо полностью удалить ненужные отчеты (не только пометить на удаление), 
							|а в тех отчетах, которые необходимы, выполнить данную процедуру очистки.'");
														
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьРегистрыОтМусораЗавершение", Форма.ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(0).Значение, "Выберите вариант очистки");
	
КонецПроцедуры

Процедура КомандаВосстановитьУдаленныеСтраницыАЛКО(Форма) Экспорт
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, "Восстановить");	
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
	
	ТекстВопроса = НСтр("ru='Внимание!
							|Восстановление будет возможно только для тех страниц, которые были удалены после 
							|последнего запуска процедуры ""Очистить регистры от ненужной информации""!
							|
							|Будут восстановлены лишь табличные данные, реквизиты Обособленных подразделений(ОП)
							|в восстановленных страницах будут не заполненны.
							|
							|Восстановленные страницы будут добавлены в конец списка страниц по разделам.
							|
							|Страницы раздела ""Сведения о лицензиях"" восстанавливаться не будут.
							|
							|По завершении восстановления отчет будет сохранен.
							|Ненужные страницы можно будет опять удалить.
							|
							|Рекомендуется скопировать отчет перед выполнением восстановления,
							|поскольку может быть восстановлено большое количество страниц, разбираться
							|в которых, не имея исходный вариант, может быть сложно.'");
														
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВосстановитьУдаленныеСтраницыЗавершение", Форма.ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(0).Значение, "Восстановление удаленных страниц");
	
КонецПроцедуры

Процедура ПослеСохраненияАЛКО(Форма) Экспорт
	
	// Если текущий раздел многострочный - нужно обновить таблицу формы.		
	Если НЕ ЗначениеЗаполнено(Форма.ТекущийРаздел)  Тогда	
		
		Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда			
		    Форма.ТекущийРаздел = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;											
		Иначе	
		    Форма.ТекущийРаздел = "Титульный";
		КонецЕсли;
			
	КонецЕсли; 
			
	Если НЕ Форма.ТекущийРаздел = "Титульный" Тогда
		
		Форма.ТекущийИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьТочныйИдГруппыПоРазделуАЛКО(
																						Форма, Форма.ТекущийРаздел);
		ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
		
		// Заполняем переменные, которые будут использоваться формой записи регистра сведений.
		Форма.КоличествоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеГруппы(
																Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);
		Форма.ИндексАктивнойСтраницыВРегистре = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(
																Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);
				
		
		ЭлементТаблицыФормы = Форма.Элементы.Найти("ТаблицаФормыРаздела" + Форма.ТекущийИдГруппы);
		Если НЕ ЭлементТаблицыФормы = Неопределено Тогда
		    ЭлементТаблицыФормы.Обновить();		
		КонецЕсли; 
				
	КонецЕсли;
		
	Если Форма.РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(Форма);
		Форма.Модифицированность = Ложь;
		
	КонецЕсли;
			
	Если НЕ Форма.УниверсальноеОписаниеОповещения = Неопределено Тогда
		
		Оповещение = Форма.УниверсальноеОписаниеОповещения;
		Форма.УниверсальноеОписаниеОповещения = Неопределено;
		ВыполнитьОбработкуОповещения(Оповещение);
		
	Иначе
		
		// Чтобы предотвратить мерцание панели отправки при открытии, при копировании, при миграции,
		// сделана группа - оболочка панели отправки. 
		// Видимость отключена в конфигураторе и отключается 
		// в процедуре РегламентированнаяОтчетностьАЛКО.ОкончаниеИнициализацииАЛКО().
		Форма.Элементы.ГруппаУправлениеЭДО.Видимость = Истина;
	
	КонецЕсли;
		
КонецПроцедуры

Процедура ПослеВыполненияЗадания_АвтоЗаполненияАЛКО(Форма) Экспорт

	////////////////////////////////////////////////////////
	// Обновляем дерево разделов и выводим текущий раздел.
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(Форма);
		
	Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	Иначе
		Если Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		    Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].ПолучитьИдентификатор();			
		КонецЕсли;		
	КонецЕсли;
	
	// Заставим принудительно обновить многострочную страницу.
	Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = 0;
	
	Форма.ТекущийЭлемент = Форма.Элементы.РазделыОтчета.ТекущийЭлемент;
	
	Форма.Элементы.Расшифровать.Доступность = Форма.Элементы.Расшифровать.Видимость;
	
	Форма.Модифицированность = Истина;
		
КонецПроцедуры


Процедура ПечатьФайлZIPВыборФорматаАЛКО(Форма) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
		
	Оповещение = Новый ОписаниеОповещения("ПечатьФайлZIPзавершение", Форма.ЭтотОбъект, ДополнительныеПараметры);
	
	СписокТиповЭкспорта = Новый СписокЗначений;
	СписокТиповЭкспорта.Добавить(ТипФайлаТабличногоДокумента.PDF,  "*.pdf  Adobe reader");
	СписокТиповЭкспорта.Добавить(ТипФайлаТабличногоДокумента.XLSX, "*.xlsx MS Exel 2007");
	СписокТиповЭкспорта.Добавить(ТипФайлаТабличногоДокумента.MXL,  "*.mxl  табличный документ 1С:Предприятия");	
	СписокТиповЭкспорта.Добавить(ТипФайлаТабличногоДокумента.HTML, "*.html WEB броузер");
		
	СписокТиповЭкспорта.ПоказатьВыборЭлемента(Оповещение, "Выберите формат файлов в архиве");
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ОпределитьОткрытуюФормуДлительнойОперации(ФормаОтчета)

	ИмяФормыДлительнойОперации = "ОбщаяФорма.АЛКОДлительнаяОперация";
	
	// определяем форму текущего активного окна	Длительной операции
	// открытого для отчета, которому принадлежит форма.
	УникальностьФормы = ФормаОтчета.УникальностьФормы;
		
	// Ищем среди открытых форм	
	ОкнаПриложений = ПолучитьОкна();
	Для Каждого ОкноПриложения Из ОкнаПриложений Цикл
	
		МассивФорм = ОкноПриложения.Содержимое;
		КолФорм = МассивФорм.Количество();
		
		Если КолФорм > 0 Тогда
		    Для Инд = 0 По КолФорм - 1 Цикл
			
				ТекФорма = МассивФорм[Инд];
				ИмяТекФормы = ТекФорма.ИмяФормы;
				Если ВРег(ИмяТекФормы) = ВРег(ИмяФормыДлительнойОперации) Тогда
				    // это форма длительной операции
					// проверяем на совпадение по уникальности
					Если ТекФорма.УникальностьФормы = УникальностьФормы Тогда
					    Возврат ТекФорма;					
					КонецЕсли; 
				
				КонецЕсли; 
			
			КонецЦикла; 		
		КонецЕсли;		
	
	КонецЦикла; 
	
	Возврат Неопределено;

КонецФункции 

Процедура ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент)
	
	ИмяТаблицы = Элемент.Имя;
	
	ИдГруппы = СтрЗаменить(ИмяТаблицы, "ТаблицаФормыРаздела", "");
	
    Раздел = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
									
	Форма.ТекущийИдГруппы  = ИдГруппы;
	Форма.ТекущийРаздел	 = Раздел;
		
	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
	
	// Заполняем переменные, которые будут использоваться формой записи регистра сведений.
	Форма.КоличествоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеГруппы(
															Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);
	Форма.ИндексАктивнойСтраницыВРегистре = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(
															Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);	
		
КонецПроцедуры

#КонецОбласти
 

