//////////////////////////////////////////////////////////////////////////////// 
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ОбъектСОшибкой, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, Поле = Неопределено, Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
	ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;
	
	Если ОбъектСОшибкой <> Неопределено Тогда
		Сообщение.УстановитьДанные(ОбъектСОшибкой);
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры // СообщитьОбОшибке()

// Функция проверяет возможность печати чека на фискальном регистраторе.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма документа
//
// Возвращаемое значение:
//	Булево - Признак возможности печати
//
Функция ПроверитьВозможностьПечатиЧека(Форма, ПоказыватьПредупреждение = Ложь) Экспорт
	
	ПечататьЧек = Истина;
	
	// Если объект не проведен или модифицирован - выполним проведение.
	Если НЕ Форма.Объект.Проведен
		ИЛИ Форма.Модифицированность Тогда
		
		Попытка
			Если НЕ Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
				ПечататьЧек = Ложь;
			КонецЕсли;
		Исключение
			ПоказыватьПредупреждение = Истина;
			ПечататьЧек = Ложь;
		КонецПопытки;
			
	КонецЕсли;
	
	Возврат ПечататьЧек;

КонецФункции // ПроверитьВозможностьПечатиЧека()

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция пересчитывает сумму из одной валюты в другую
//
// Параметры:      
//	Сумма         - Число - сумма, которую следует пересчитать.
// 	КурсНач       - Число - курс из которого надо пересчитать.
// 	КурсКон       - Число - курс в который надо пересчитать.
// 	КратностьНач  - Число - кратность из которого надо пересчитать 
//                  (по умолчанию = 1).
// 	КратностьКон  - Число - кратность в который надо пересчитать 
//                  (по умолчанию = 1).
//
// Возвращаемое значение: 
//  Число - сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1) Экспорт
	
	Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если КурсНач = 0 ИЛИ КурсКон = 0 ИЛИ КратностьНач = 0 ИЛИ КратностьКон = 0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'");
		Сообщение.Сообщить();
		Возврат Сумма;
	КонецЕсли;
	
	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
	
	Возврат СуммаПересчитанная;
	
КонецФункции // ПересчитатьИзВалютыВВалюту()

// Процедура обновляет состояние документа.
//
Процедура ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение) Экспорт
	
	Если Объект.Проведен Тогда
		СостояниеДокумента = "Проведен";
		КартинкаСостоянияДокумента = 1;
	ИначеЕсли РазрешеноПроведение Тогда
		СостояниеДокумента = "Не проведен";
		КартинкаСостоянияДокумента = 0;
	Иначе
		СостояниеДокумента = "Записан";
		КартинкаСостоянияДокумента = 3;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСостояниеДокумента()

// Функция возвращает представление дня недели.
//
Функция ПолучитьПредставлениеДняНедели(ДеньНеделиКалендаря) Экспорт
	
	НомерДняНедели = ДеньНедели(ДеньНеделиКалендаря);
	Если НомерДняНедели = 1 Тогда
		
		Возврат НСтр("ru = 'Пн'");
		
	ИначеЕсли НомерДняНедели = 2 Тогда
		
		Возврат НСтр("ru = 'Вт'");
		
	ИначеЕсли НомерДняНедели = 3 Тогда
		
		Возврат НСтр("ru = 'Ср'");
		
	ИначеЕсли НомерДняНедели = 4 Тогда
		
		Возврат НСтр("ru = 'Чт'");
		
	ИначеЕсли НомерДняНедели = 5 Тогда
		
		Возврат НСтр("ru = 'Пт'");
		
	ИначеЕсли НомерДняНедели = 6 Тогда
		
		Возврат НСтр("ru = 'Сб'");
		
	Иначе
		
		Возврат НСтр("ru = 'Вс'");
		
	КонецЕсли;
	
КонецФункции // ПолучитьПредставлениеДняНедели()

// Заполняет структуру данных для открытии формы выбора календаря
//
Функция ПолучитьПараметрыОткрытияФормыКалендаря(ДатаКалендаряПриОткрытии, 
		ЗакрыватьПриВыборе = Истина, 
		МножественныйВыбор = Ложь) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить(
		"ДатаКалендаря", 
			ДатаКалендаряПриОткрытии
		);
		
	СтруктураПараметров.Вставить(
		"ЗакрыватьПриВыборе", 
			ЗакрыватьПриВыборе
		);
		
	СтруктураПараметров.Вставить(
		"МножественныйВыбор", 
			МножественныйВыбор
		);
		
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьПараметрыОткрытияФормыКалендаря()

// Помещает переданное значение в СписокЗначений
// 
Функция ЗначениеВСписокЗначенийНаКлиенте(Значение, СписокЗначений = Неопределено, ДобавлятьДубликаты = Ложь) Экспорт
	
	Если ТипЗнч(СписокЗначений) = Тип("СписокЗначений") Тогда
		
		Если ДобавлятьДубликаты Тогда
			
			СписокЗначений.Добавить(Значение);
			
		ИначеЕсли СписокЗначений.НайтиПоЗначению(Значение) = Неопределено Тогда
			
			СписокЗначений.Добавить(Значение);
			
		КонецЕсли;
		
	Иначе
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Значение);
		
	КонецЕсли;
	
	Возврат СписокЗначений;
	
КонецФункции // ЗначениеВСписокЗначенийНаКлиенте()

// Заполняет список значеий Приемник из списка значений Источник
//
Процедура ЗаполнитьСписокИзСписка(Источник,Приемник) Экспорт

	Приемник.Очистить();
	Для каждого ЭлСписка Из Источник Цикл
		Приемник.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ПОДЧИНЕННЫМИ ТАБЛИЧНЫМИ ЧАСТЯМИ

// Процедура добавляет ключ связи в табличную часть.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//
Процедура ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ФормаДокумента, Строка = Неопределено) Экспорт
	
	Если Строка <> Неопределено Тогда
		СтрокаТабличнойЧасти = Строка;
	Иначе
		СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.КлючСвязи = СоздатьНовыйКлючСвязи(ФормаДокумента);
	
КонецПроцедуры // ДобавитьКлючСвязиВСтрокуТабличнойЧасти()

// Процедура добавляет ключ связи в подчиненную табличную часть.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Процедура ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти, Строка = Неопределено) Экспорт
	
	ПодчиненнаяТабличнаяЧасть = ФормаДокумента.Элементы[ИмяПодчиненнойТабличнойЧасти];
	
	Если Строка = Неопределено Тогда
		СтрокаПодчиненнойТабличнойЧасти = ПодчиненнаяТабличнаяЧасть.ТекущиеДанные;
	Иначе
		СтрокаПодчиненнойТабличнойЧасти = Строка;
	КонецЕсли;
	СтрокаПодчиненнойТабличнойЧасти.КлючСвязи = ПодчиненнаяТабличнаяЧасть.ОтборСтрок["КлючСвязи"];
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", ПодчиненнаяТабличнаяЧасть.ОтборСтрок["КлючСвязи"]);
	ФормаДокумента.Элементы[ИмяПодчиненнойТабличнойЧасти].ОтборСтрок = СтрОтбора;

КонецПроцедуры // ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти()

// Процедура запрещает добавление новой строки, если не выбрана строка в основной табличной части.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Функция ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти) Экспорт

	Если ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана строка основной табличной части!'");
		Сообщение.Сообщить();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции // ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть()

// Процедура удаляет строки из подчиненной табличной части.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Процедура УдалитьСтрокиПодчиненнойТабличнойЧасти(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненнаяТабличнаяЧасть = ФормаДокумента.Объект[ИмяПодчиненнойТабличнойЧасти];
	
	РезультатПоиска = ПодчиненнаяТабличнаяЧасть.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи));
	Для каждого СтрокаПоиска Из  РезультатПоиска Цикл
		ИндексУдаления = ПодчиненнаяТабличнаяЧасть.Индекс(СтрокаПоиска);
		ПодчиненнаяТабличнаяЧасть.Удалить(ИндексУдаления);
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиПодчиненнойТабличнойЧасти()

// Процедура создает новый ключ связи для таблиц.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Функция СоздатьНовыйКлючСвязи(ФормаДокумента) Экспорт

	СписокЗначений = Новый СписокЗначений;
	
	ТабличнаяЧасть = ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти];
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
        СписокЗначений.Добавить(СтрокаТЧ.КлючСвязи);
	КонецЦикла;

    Если СписокЗначений.Количество() = 0 Тогда
		КлючСвязи = 1;
	Иначе
		СписокЗначений.СортироватьПоЗначению();
		КлючСвязи = СписокЗначений.Получить(СписокЗначений.Количество() - 1).Значение + 1;
	КонецЕсли;

	Возврат КлючСвязи;

КонецФункции //  СоздатьНовыйКлючСвязи()

// Процедура устанавливает отбор на подчиненную табличную часть.
//
Процедура УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти, Строка = Неопределено) Экспорт
	
	Если Строка <> Неопределено Тогда
		СтрокаТабличнойЧасти = Строка;
	Иначе
		СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	ФормаДокумента.Элементы[ИмяПодчиненнойТабличнойЧасти].ОтборСтрок = СтрОтбора;
	
КонецПроцедуры //УстановитьОтборНаПодчиненнуюТабличнуюЧасть()

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМ СПИСКА И ВЫБОРА СПРАВОЧНИКА КОНТРАГЕНТЫ

// Функция проверяет корректность позиционирования при активизации строки.
//
Функция ПозиционированиеКорректно(Форма) Экспорт
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		
	Если ТипЗнч(Форма.Элементы.Список.ТекущаяСтрока) <> ТипГруппировка И ЗначениеЗаполнено(Форма.Элементы.Список.ТекущаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПозиционированиеКорректно()

// Процедура заполняет надпись подвала: Основание выбора справочника Контрагенты.
//
Процедура ЗаполнитьСтрокуОснования(Форма) Экспорт
	
	Основание = Форма.Основания.НайтиСтроки(Новый Структура("Контрагент", Форма.Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() = 0 Тогда
		Форма.ОснованиеВыбора = "";
	Иначе
		Форма.ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуОснования()

// Процедура восстанваливает отображение списка после полнотекстового поиска.
//
Процедура ВостановитьОтображениеСпискаПослеПолнотекстовогоПоиска(Форма) Экспорт
	
	Если Строка(Форма.Элементы.Список.Отображение) <> Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска Тогда
		Если Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = "Иерархический список" Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ИначеЕсли Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = "Дерево" Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВостановитьОтображениеСпискаПослеПолнотекстовогоПоиска()

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ ФОРМ СПИСКА (ИНФОРМАЦИОННАЯ ПАНЕЛЬ)

// Обрабатывает событие активизации строки списка документов.
//
Процедура ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка(Форма, ПараметрыИнфПанели) Экспорт
	
	ТекущиеДанныеСписка = Форма.Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка <> Неопределено
		И ТекущиеДанныеСписка.Свойство(ПараметрыИнфПанели.РеквизитКИ) Тогда
		
		ТекущийРеквизитКИ = ТекущиеДанныеСписка[ПараметрыИнфПанели.РеквизитКИ];
		
		Если Форма.ИнформацияСсылка <> ТекущийРеквизитКИ Тогда
			
			Если ЗначениеЗаполнено(ТекущийРеквизитКИ) Тогда
				
				ДанныеИП = УправлениеНебольшойФирмойСервер.ИнформационнаяПанельПолучитьДанные(ТекущийРеквизитКИ, ПараметрыИнфПанели);
				ИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели, ДанныеИП);
				
				Форма.ИнформацияСсылка = ТекущийРеквизитКИ;
				
			Иначе
				
				ИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели);
		
	КонецЕсли;
	
КонецПроцедуры // ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка()

// Процедура заполняет данные информационной панели списка.
//
Процедура ИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели, ДанныеИП = Неопределено)
	
	Если ДанныеИП = Неопределено Тогда
	
		Форма.ИнформацияСсылка = Неопределено;
		
		// Контактная информация контрагентов.
		Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
			
			Форма.ИнформацияКонтрагентТелефон = "";
			Форма.ИнформацияКонтрагентЭП = "";
			Форма.ИнформацияКонтрагентФакс = "";
			
			Форма.ИнформацияКонтрагентФактАдрес = "";
			Если Форма.Элементы.Найти("ИнформацияКонтрагентАдресДоставки") <> Неопределено
				ИЛИ Форма.Элементы.Найти("РасшифровкаСпискаКонтрагентАдресДоставки") <> Неопределено Тогда
				
				Форма.ИнформацияКонтрагентАдресДоставки = "";
				
			КонецЕсли;
			Форма.ИнформацияКонтрагентЮрАдрес = "";
			
			Форма.ИнформацияКонтрагентПочтовыйАдрес = "";
			Форма.ИнформацияКонтрагентДругаяИнформация = "";
			
			// Взаиморасчеты.
			Если ПараметрыИнфПанели.Свойство("Взаиморасчеты") Тогда
				
				Форма.ИнформацияДолгКонтрагента = 0;
				Форма.ИнформацияНашДолг = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Контактная информация контактных лиц.
		Если ПараметрыИнфПанели.Свойство("КонтактноеЛицо") Тогда
			
			Форма.ИнформацияКонтактноеЛицоТелефон = "";
			Форма.ИнформацияКонтактноеЛицоЭП = "";
			
		КонецЕсли;
		
	Иначе
		
		// Контактная информация контрагентов.
		Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
			
			Форма.ИнформацияКонтрагентТелефон 	= ДанныеИП.Телефон;
			Форма.ИнформацияКонтрагентЭП 		= ДанныеИП.ЭлПочта;
			Форма.ИнформацияКонтрагентФакс 		= ДанныеИП.Факс;
			
			Форма.ИнформацияКонтрагентФактАдрес = ДанныеИП.ФактАдрес;
			Если Форма.Элементы.Найти("ИнформацияКонтрагентАдресДоставки") <> Неопределено
				ИЛИ Форма.Элементы.Найти("РасшифровкаСпискаКонтрагентАдресДоставки") <> Неопределено Тогда
				
				Форма.ИнформацияКонтрагентАдресДоставки = ДанныеИП.АдресДоставки;
				
			КонецЕсли;
			Форма.ИнформацияКонтрагентЮрАдрес 	= ДанныеИП.ЮрАдрес;
			
			Форма.ИнформацияКонтрагентПочтовыйАдрес 	= ДанныеИП.ПочтовыйАдрес;
			Форма.ИнформацияКонтрагентДругаяИнформация 	= ДанныеИП.ДругаяИнформация;
			
			// Взаиморасчеты.
			Если ПараметрыИнфПанели.Свойство("Взаиморасчеты") Тогда
				
				Форма.ИнформацияДолгКонтрагента = ДанныеИП.Долг;
				Форма.ИнформацияНашДолг 		= ДанныеИП.НашДолг;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Контактная информация контактных лиц.
		Если ПараметрыИнфПанели.Свойство("КонтактноеЛицо") Тогда
			
			Форма.ИнформацияКонтактноеЛицоТелефон 	= ДанныеИП.ТелефонКЛ;
			Форма.ИнформацияКонтактноеЛицоЭП 		= ДанныеИП.ЭлПочтаКЛ;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнформационнаяПанельЗаполнить()

#Область ДисконтныеКарты

// Обрабатывает событие активизации строки списка документов.
//
Процедура ДисконтныеКартыИнформационнаяПанельОбработатьАктивизациюСтрокиСписка(Форма, ПараметрыИнфПанели) Экспорт
	
	ТекущиеДанныеСписка = Форма.Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка <> Неопределено
		И ТекущиеДанныеСписка.Свойство(ПараметрыИнфПанели.РеквизитКИ) Тогда
		
		ТекущийРеквизитКИ = ТекущиеДанныеСписка[ПараметрыИнфПанели.РеквизитКИ];
		
		Если Форма.ИнформацияСсылка <> ПараметрыИнфПанели.ДисконтнаяКарта Тогда
			
			Если ЗначениеЗаполнено(ПараметрыИнфПанели.ДисконтнаяКарта) Тогда
				
				ДанныеИП = УправлениеНебольшойФирмойСервер.ИнформационнаяПанельПолучитьДанные(ТекущийРеквизитКИ, ПараметрыИнфПанели);
				ДисконтныеКартыИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели, ДанныеИП);
				
				Форма.ИнформацияСсылка = ТекущийРеквизитКИ;
				
			Иначе
				
				ДисконтныеКартыИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ДисконтныеКартыИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели);
		
	КонецЕсли;
	
КонецПроцедуры // ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка()

// Процедура заполняет данные информационной панели списка.
//
Процедура ДисконтныеКартыИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели, ДанныеИП = Неопределено)
	
	Если ДанныеИП = Неопределено Тогда
	
		Форма.ИнформацияСсылка = Неопределено;
		
		// Контактная информация контрагентов.
		Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
			
			Форма.ИнформацияКонтрагентТелефон = "";
			Форма.ИнформацияКонтрагентЭП = "";
			Форма.ИнформацияПроцентСкидкиПоДисконтнойКарте = "";
			Форма.ИнформацияСуммаПродажПоДисконтнойКарте = "";
			
		КонецЕсли;
		
	Иначе
		
		// Контактная информация контрагентов.
		Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
			
			Форма.ИнформацияКонтрагентТелефон 				= ДанныеИП.Телефон;
			Форма.ИнформацияКонтрагентЭП 					= ДанныеИП.ЭлПочта;
			Форма.ИнформацияПроцентСкидкиПоДисконтнойКарте 	= ДанныеИП.ПроцентСкидкиПоДисконтнойКарте;
			Форма.ИнформацияСуммаПродажПоДисконтнойКарте	= ДанныеИП.СуммаПродажПоДисконтнойКарте;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнформационнаяПанельЗаполнить()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ЗУП

// Процедура подставляет счет затрат по умолчанию при выборе начисления
// в табличной части документа.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПроставитьСчетЗатратПоУмолчанию(ФормаДокумента, СтруктурнаяЕдиница = Неопределено) Экспорт
	
	ДанныеТекущейСтроки = ФормаДокумента.Элементы.НачисленияУдержания.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура("СчетЗатрат, ТипСчета");
	СтруктураПараметров.Вставить("ВидНачисленияУдержания", ДанныеТекущейСтроки.ВидНачисленияУдержания);
	СтруктураПараметров.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Если ЗначениеЗаполнено(ДанныеТекущейСтроки.ВидНачисленияУдержания) Тогда
		
		УправлениеНебольшойФирмойСервер.ПолучитьСчетЗатратВидаНачисления(СтруктураПараметров);
		ДанныеТекущейСтроки.СчетЗатрат = СтруктураПараметров.СчетЗатрат;
		
	КонецЕсли;
	
	Если ДанныеТекущейСтроки.Свойство("ТипСчета") Тогда
		
		ДанныеТекущейСтроки.ТипСчета = СтруктураПараметров.ТипСчета;
		
	КонецЕсли;
	
КонецПроцедуры // ПроставитьСчетЗатратПоУмолчанию()

// Процедура устанавливает период регистрации на начало месяца.
// А так же обновляет надпись периода на форме
Процедура ПриИзмененииПериодаРегистрации(ПереданнаяФорма) Экспорт
	
	Если СтрНайти(ПереданнаяФорма.ИмяФормы, "ЖурналДокументов") > 0 
		ИЛИ СтрНайти(ПереданнаяФорма.ИмяФормы, "ФормаОтчета") Тогда
		ПереданнаяФорма.ПериодРегистрации 				= НачалоМесяца(ПереданнаяФорма.ПериодРегистрации);
		ПереданнаяФорма.ОтображениеПериодаРегистрации 	= Формат(ПереданнаяФорма.ПериодРегистрации, "ДФ='MMMM yyyy'");
	ИначеЕсли СтрНайти(ПереданнаяФорма.ИмяФормы, "ФормаСписка") > 0 Тогда
		ПереданнаяФорма.ОтборПериодРегистрации 			= НачалоМесяца(ПереданнаяФорма.ОтборПериодРегистрации);
		ПереданнаяФорма.ОтображениеПериодаРегистрации 	= Формат(ПереданнаяФорма.ОтборПериодРегистрации, "ДФ='MMMM yyyy'");
	Иначе
		ПереданнаяФорма.Объект.ПериодРегистрации 		= НачалоМесяца(ПереданнаяФорма.Объект.ПериодРегистрации);
		ПереданнаяФорма.ОтображениеПериодаРегистрации 	= Формат(ПереданнаяФорма.Объект.ПериодРегистрации, "ДФ='MMMM yyyy'");
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииПериодаРегистрации()

// Процедура выполняет приращение даты по кнопкам регулирования
// Используется в журнале и документах зарплаты, Расзод ДС из кассы, отчетах Расчетные листки
// Шаг равняется месяцу
//
// Параметры:
// ПереданнаяФорма 	- форма, данные которой правятся
// Направление 		- значение приращения, может быть положительным и отрицательным
Процедура ПриРегулированииПериодаРегистрации(ПереданнаяФорма, Направление) Экспорт
	
	Если СтрНайти(ПереданнаяФорма.ИмяФормы, "ЖурналДокументов") > 0 
		ИЛИ СтрНайти(ПереданнаяФорма.ИмяФормы, "ФормаОтчета") Тогда
		
		ПереданнаяФорма.ПериодРегистрации = ?(ЗначениеЗаполнено(ПереданнаяФорма.ПериодРегистрации), 
							ДобавитьМесяц(ПереданнаяФорма.ПериодРегистрации, Направление),
							ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), Направление));
		
	ИначеЕсли СтрНайти(ПереданнаяФорма.ИмяФормы, "ФормаСписка") > 0 Тогда
		
		ПереданнаяФорма.ОтборПериодРегистрации = ?(ЗначениеЗаполнено(ПереданнаяФорма.ОтборПериодРегистрации), 
							ДобавитьМесяц(ПереданнаяФорма.ОтборПериодРегистрации, Направление),
							ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), Направление));
		
	Иначе
		
		ПереданнаяФорма.Объект.ПериодРегистрации = ?(ЗначениеЗаполнено(ПереданнаяФорма.Объект.ПериодРегистрации), 
							ДобавитьМесяц(ПереданнаяФорма.Объект.ПериодРегистрации, Направление),
							ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), Направление));
		
	КонецЕсли;
	
КонецПроцедуры // ПриРегулированииПериодаРегистрации()

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ЦЕНООБРАЗОВАНИЕ

// Процедура рассчитывает сумму строки табличной части при заполнение по "Цены и валюта".
//
Процедура РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабЧасти, ОбнулятьАвтоСкидки = Истина)
	
	Если СтрокаТабЧасти.Свойство("Количество") И СтрокаТабЧасти.Свойство("Цена") Тогда
		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена;
	КонецЕсли;
	
	Если СтрокаТабЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
		Если СтрокаТабЧасти.ПроцентСкидкиНаценки = 100 Тогда
			СтрокаТабЧасти.Сумма = 0;
		ИначеЕсли СтрокаТабЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабЧасти.Количество <> 0 Тогда
			СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Сумма * (1 - СтрокаТабЧасти.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
	КонецЕсли;	

	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабЧасти.СтавкаНДС);
			
	Если ФормаДокумента.Объект.Свойство("СуммаВключаетНДС") Тогда
		
		Если СтрокаТабЧасти.Свойство("Сумма") Тогда
			
			СтрокаТабЧасти.СуммаНДС = ?(
				ФормаДокумента.Объект.СуммаВключаетНДС, 
				СтрокаТабЧасти.Сумма - (СтрокаТабЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
				СтрокаТабЧасти.Сумма * СтавкаНДС / 100
			);
			СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабЧасти.СуммаНДС);
			
		Иначе
			
			БазаРасчетаНДС = СтрокаТабЧасти.ТаможеннаяСтоимость + СтрокаТабЧасти.СуммаПошлины;
			
			СтрокаТабЧасти.СуммаНДС = ?(
				ФормаДокумента.Объект.СуммаВключаетНДС, 
				БазаРасчетаНДС - (БазаРасчетаНДС) / ((СтавкаНДС + 100) / 100),
				БазаРасчетаНДС * СтавкаНДС / 100
			);
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТабЧасти.СуммаНДС = СтрокаТабЧасти.Сумма * СтавкаНДС / 100;
		СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + СтрокаТабЧасти.СуммаНДС;
		
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если ОбнулятьАвтоСкидки Тогда
		Если СтрокаТабЧасти.Свойство("ПроцентАвтоматическойСкидки") Тогда
			СтрокаТабЧасти.ПроцентАвтоматическойСкидки = 0;
			СтрокаТабЧасти.СуммаАвтоматическойСкидки = 0;
		КонецЕсли;
		Если СтрокаТабЧасти.Свойство("ОбщаяСуммаСкидкиБольшеСуммы") Тогда
			СтрокаТабЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
		КонецЕсли;
	Иначе
		Если СтрокаТабЧасти.Свойство("ОбщаяСуммаСкидкиБольшеСуммы") Тогда
			ТекСуммаРучнойСкидки = ?(СтрокаТабЧасти.ПроцентСкидкиНаценки = 0, СтрокаТабЧасти.Цена * СтрокаТабЧасти.Количество * СтрокаТабЧасти.ПроцентСкидкиНаценки / 100, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + СтрокаТабЧасти.СуммаАвтоматическойСкидки;
			Если ТекСуммаСкидки >= СтрокаТабЧасти.Сумма И СтрокаТабЧасти.Цена > 0 Тогда
				СтрокаТабЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Истина;
			Иначе
				СтрокаТабЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры // РассчитатьСуммуСтрокиТабличнойЧасти()	

// Выполняем пересчет цены по флагу СуммаВключаетНДС табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Процедура ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
	
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			
			Если ФормаДокумента.Объект.СуммаВключаетНДС Тогда
				
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * (100 + СтавкаНДС)) / 100;
				
			Иначе
				
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * 100) / (100 + СтавкаНДС);
				
			КонецЕсли;
			
		КонецЕсли;
		
		РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры // ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС()

// Выполняем пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ФормаДокумента, ИмяТабличнойЧасти, ПересчитатьСкидки = Ложь, ПересчитыватьЦеныСЗаказом = Истина) Экспорт
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;

	СтруктураДанных.Вставить("Дата",				ФормаДокумента.Объект.Дата);
	СтруктураДанных.Вставить("Организация",			ФормаДокумента.Компания);
	СтруктураДанных.Вставить("ВидЦен",				ФормаДокумента.Объект.ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента",		ФормаДокумента.Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	ФормаДокумента.Объект.СуммаВключаетНДС);
	
	Если ПересчитатьСкидки Тогда
		СтруктураДанных.Вставить("ВидСкидкиНаценки", ФормаДокумента.Объект.ВидСкидкиНаценки);
		СтруктураДанных.Вставить("ПроцентСкидкиНаценки", 0);
		Если УправлениеНебольшойФирмойСервер.ЕстьРеквизитДокументаПоСсылке("ПроцентСкидкиПоДисконтнойКарте", ФормаДокумента.Объект.Ссылка) Тогда
			СтруктураДанных.Вставить("ПроцентСкидкиПоДисконтнойКарте", ФормаДокумента.Объект.ПроцентСкидкиПоДисконтнойКарте);		
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;	
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		СтрокаТабличнойЧасти.Вставить("Цена",				0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
		
	УправлениеНебольшойФирмойСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
		
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		
		РезультатПоиска = ФормаДокумента.Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			
			Если ПересчитыватьЦеныСЗаказом ИЛИ 
				(НЕ ПересчитыватьЦеныСЗаказом И НЕ ЗначениеЗаполнено(СтрокаРезультат.Заказ)) Тогда
				СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			КонецЕсли;
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаРезультат);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПересчитатьСкидки Тогда
		Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки;
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

// Выполняем пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;

	СтруктураДанных.Вставить("Дата",				ФормаДокумента.Объект.Дата);
	СтруктураДанных.Вставить("Организация",			ФормаДокумента.Компания);
	СтруктураДанных.Вставить("ВидЦенКонтрагента",	ФормаДокумента.Объект.ВидЦенКонтрагента);
	СтруктураДанных.Вставить("ВалютаДокумента",		ФормаДокумента.Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	ФормаДокумента.Объект.СуммаВключаетНДС);
	
	Для каждого СтрокаТЧ Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;	
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		СтрокаТабличнойЧасти.Вставить("Цена",				0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
		
	УправлениеНебольшойФирмойСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(СтруктураДанных, ТабличнаяЧастьДокумента);
		
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		
		РезультатПоиска = ФормаДокумента.Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаРезультат);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

// Выполняем пересчет цены по валюте табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ФормаДокумента, ПредыдущаяВалюта, ИмяТабличнойЧасти) Экспорт
	
	СтруктураКурсы = УправлениеНебольшойФирмойСервер.ПолучитьКурсыВалют(ПредыдущаяВалюта, ФормаДокумента.Объект.ВалютаДокумента, ФормаДокумента.Объект.Дата);
																   
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		// Цена.
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			
			СтрокаТабличнойЧасти.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
																	СтруктураКурсы.КурсНач, 
																	СтруктураКурсы.Курс, 
																	СтруктураКурсы.КратностьНач, 
																	СтруктураКурсы.Кратность);
																	
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
			
		// Сумма.	
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
			
			СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, 
																	СтруктураКурсы.КурсНач, 
																	СтруктураКурсы.Курс, 
																	СтруктураКурсы.КратностьНач, 
																	СтруктураКурсы.Кратность);														
					
			Если СтрокаТабличнойЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
				
				// Скидки.
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
					СтрокаТабличнойЧасти.Сумма = 0;
				ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
								
			КонецЕсли;														
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
	        СтрокаТабличнойЧасти.СуммаНДС = ?(ФормаДокумента.Объект.СуммаВключаетНДС, 
								  				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
								  				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
					        		
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЕсли;
        		        
	КонецЦикла; 

КонецПроцедуры // ПересчитатьЦеныТабличнойЧастиПоВалюте()

#Область ДисконтныеКарты

// Выполняем пересчет суммы табличной части документа после считывания дисконтной карты.
Процедура ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
																	   
	Скидка = УправлениеНебольшойФирмойСервер.ПолучитьПроцентСкдикиПоВидуСкидокНаценок(ФормаДокумента.Объект.ВидСкидкиНаценки) + ФормаДокумента.Объект.ПроцентСкидкиПоДисконтнойКарте;
	
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Скидка;
		
		РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
		        
	КонецЦикла;
	
КонецПроцедуры // ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ СО СЧЕТАМИ-ФАКТУРАМИ

// Устанавливает надпись гиперссылки на Счет-фактуру
//
Процедура УстановитьТекстПроСчетФактуру(ФормаДокумента, Полученный = Ложь) Экспорт

	НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ФормаДокумента.Объект.Ссылка, Полученный);
	Если ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
		ФормаДокумента.СчетФактураТекст = ПредставлениеСчетаФактуры(НайденныйСчетФактура.Номер, НайденныйСчетФактура.Дата);	
	Иначе
	    ФормаДокумента.СчетФактураТекст = "Ввести счет-фактуру";
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

// Формирует надпись гиперссылки на Счет-фактуру
//
Функция ПредставлениеСчетаФактуры(Дата, Номер) Экспорт

	ТекстПроСчетФактуру = НСтр("ru = '№ %Номер% от %Дата% г.'");
	КороткийНомер = РаботаСФормойДокументаКлиентСервер.ПолучитьКороткийНомерДокумента(Номер);
	ТекстПроСчетФактуру = СтрЗаменить(ТекстПроСчетФактуру, "%Номер%", КороткийНомер);
	ТекстПроСчетФактуру = СтрЗаменить(ТекстПроСчетФактуру, "%Дата%", Формат(Дата, "ДФ=dd.MM.yyyy"));	
	Возврат ТекстПроСчетФактуру;

КонецФункции // ПолучитьПредставлениеСчетаФактуры()

// Устанавливает надпись гиперссылки на Счет-фактуру
//
Процедура ОткрытьСчетФактуру(ФормаДокумента, Полученный = Ложь) Экспорт
	
	НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ФормаДокумента.Объект.Ссылка, Полученный);
	
	Если ФормаДокумента.Объект.ПометкаУдаления 
		И НЕ ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Счет-фактуру нельзя вводить на основании документа, помеченного на удаление!'");	
		Сообщение.Сообщить();
		Возврат;	
	КонецЕсли;
	
	Если ФормаДокумента.Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Документ был изменен. Сначала следует записать документ!'");	
		Сообщение.Сообщить();
		Возврат;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФормаДокумента.Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Документ не записан. Сначала следует записать документ!'");	
		Сообщение.Сообщить();
		Возврат;	
	КонецЕсли;
	
	Если Полученный Тогда
		ИмяФормы = "Документ.СчетФактураПолученный.ФормаОбъекта";
	Иначе
		ИмяФормы = "Документ.СчетФактура.ФормаОбъекта";
	КонецЕсли;
	
	// Откроем или введем новый документ
	СтруктураПараметровСчетФактуры = Новый Структура;
	Если ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
		
		СтруктураПараметровСчетФактуры.Вставить("Ключ", НайденныйСчетФактура.Ссылка);
		
	Иначе
		
		СтруктураПараметровСчетФактуры.Вставить("Основание", ФормаДокумента.Объект.Ссылка);
		
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, СтруктураПараметровСчетФактуры, ФормаДокумента);
	
КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру() 

// Процедура оповещает открытые формы с целью обновления надписи-гиперссылки о счет фактуре
// 
// Используется при печати УПД (Универсального передаточного документа)
// ОписаниеСчетовФактур. Тип Массив (многомерный).
// 
// Каждая строка массива содержит описание созданной счет фактуры.
// Расшифровка описания:
//  [0] - ссылка на документ основание
//  [1] - дата счет фактуры
//  [2] - номер счет фактуры
//
Процедура ОбновитьНадписиОСчетахФактурахОткрытыхФормах(ОписаниеСчетовФактур)
	
	Если ТипЗнч(ОписаниеСчетовФактур) = Тип("Массив") Тогда
		
		Для каждого СчетФактураСозданная Из ОписаниеСчетовФактур Цикл
		
			Структура = Новый Структура;
			Структура.Вставить("ДокументОснование", СчетФактураСозданная[0]);
			Структура.Вставить("Представление", УправлениеНебольшойФирмойКлиент.ПредставлениеСчетаФактуры(СчетФактураСозданная[2], СчетФактураСозданная[1]));
			Оповестить("ОбновлениеТекстаПроСчетФактуру", Структура);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНадписиОСчетахФактурахОткрытыхФормах()

// Процедура - обработчик общей команды УниверсальныйПередаточныйДокумент
//
Процедура СформироватьПечатныеФормыУПД(ПараметрКоманды) Экспорт
	
	СообщенияПользователю = Новый Массив;
	ИсточникиПечати = Новый Структура("ИмяИсточника, СчетФактура, ДокументыРеализации, СозданныеСчетаФактуры", Неопределено, Неопределено, Неопределено, Неопределено);
	
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыПечатиУПД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю);
	
	Если ИсточникиПечати.ДокументыРеализации <> Неопределено Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ИсточникиПечати.ИмяИсточника, "УниверсальныйПередаточныйДокумент", ИсточникиПечати.ДокументыРеализации, , УправлениеНебольшойФирмойКлиент.ПолучитьЗаголовокПечатнойФормы(ИсточникиПечати.ДокументыРеализации));
		
	КонецЕсли;
	
	Если ИсточникиПечати.СчетФактура <> Неопределено Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.СчетФактура", "УниверсальныйПередаточныйДокумент", ИсточникиПечати.СчетФактура, Неопределено, УправлениеНебольшойФирмойКлиент.ПолучитьЗаголовокПечатнойФормы(ИсточникиПечати.СчетФактура));
		ОбновитьНадписиОСчетахФактурахОткрытыхФормах(ИсточникиПечати.СозданныеСчетаФактуры);
		
	КонецЕсли;
	
	Для каждого Сообщение Из СообщенияПользователю Цикл
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик общей команды УниверсальныйКорректировочныйДокумент
//
Процедура СформироватьПечатныеФормыУКД(ПараметрКоманды) Экспорт
	
	СообщенияПользователю = Новый Массив;
	ИсточникиПечати = Новый Структура("ИмяИсточника, СчетФактура, ДокументыРеализации, СозданныеСчетаФактуры", Неопределено, Неопределено, Неопределено, Неопределено);
	
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыПечатиУКД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю);
	
	Если ИсточникиПечати.СчетФактура <> Неопределено Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьУКД", "УКДСтатус1", ИсточникиПечати.СчетФактура,, УправлениеНебольшойФирмойКлиент.ПолучитьЗаголовокПечатнойФормы(ИсточникиПечати.СчетФактура));
		
	ИначеЕсли ИсточникиПечати.ДокументыРеализации <> Неопределено Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьУКД", "УКДСтатус2", ИсточникиПечати.ДокументыРеализации,, УправлениеНебольшойФирмойКлиент.ПолучитьЗаголовокПечатнойФормы(ИсточникиПечати.ДокументыРеализации));
		ОбновитьНадписиОСчетахФактурахОткрытыхФормах(ИсточникиПечати.СозданныеСчетаФактуры);
		
	КонецЕсли;
	
	Для каждого Сообщение Из СообщенияПользователю Цикл
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ

// Процедура разворачивает дерево значений на форме.
//
Процедура РазвернутьДеревоЗначенийСвойств(ЭлементФормы, Дерево) Экспорт
	
	Для каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		Идентификатор = Элемент.ПолучитьИдентификатор();
		ЭлементФормы.Развернуть(Идентификатор, Истина);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьДеревоЗначенийСвойств()

// Процедура обработчик события ПередУдалением.
//
Процедура ДеревоЗначенийСвойствПередУдалением(Элемент, Отказ, Модифицированность) Экспорт
	
	Отказ = Истина;
	Элемент.ТекущиеДанные.Значение = Элемент.ТекущиеДанные.ТипЗначенияСвойства.ПривестиЗначение(Неопределено);
	Модифицированность = Истина;
	
КонецПроцедуры // ДеревоЗначенийСвойствПередУдалением()

// Процедура обработчик события ПриНачалеРедактирования.
//
Процедура ДеревоЗначенийСвойствПриНачалеРедактирования(Элемент) Экспорт
	
	Элемент.ПодчиненныеЭлементы.Значение.ОграничениеТипа = Элемент.ТекущиеДанные.ТипЗначенияСвойства;
	
КонецПроцедуры // ДеревоЗначенийСвойствПриНачалеРедактирования()

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКИМИ СПИСКАМИ

// Добавление группы отбора
// Параметры:
//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например
//                      Список.Отбор.Элементы или группа в отборе.
//  ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы.
//  Представление строка - представление группы.
//
Функция СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

// Процедура изменения элемента отбора в группе элементов отбора.
//
Процедура ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

Процедура УстановитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

Процедура УдалитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			КоллекцияЭлементов.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Удаляет элемент отбора динамического списка
//
//Параметры:
//Список  - обрабатываемый динамический список,
//ИмяПоля - имя поля компоновки, отбор по которому нужно удалить
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Счетчик = 1;
	Пока Счетчик <= Список.Отбор.Элементы.Количество() Цикл
		ЭлементОтбора = Список.Отбор.Элементы[Счетчик - 1];
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Устанавливает элемент отбор динамического списка
//
//Параметры:
//Список			- обрабатываемый динамический список,
//ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено) Экспорт
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Изменяет элемент отбора динамического списка
//
//Параметры:
//Список         - обрабатываемый динамический список,
//ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение - значение отбора,
//Установить     - признак необходимости установить отбор
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено, ОтборПоПериоду = Ложь) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		Если ОтборПоПериоду Тогда
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаНачала, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);		
		Иначе
		    УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

// Функция считывает значения элементов отбора динамического списка
//
Функция ПрочитатьЗначенияОтбораДинамическогоСписка(Список) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	
	Если ТипЗнч(Список) = Тип("ДинамическийСписок") Тогда
		
		Для каждого ЭлементОтбораДинамическогоСписка Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			
			ИмяОтбора = Строка(ЭлементОтбораДинамическогоСписка.ЛевоеЗначение);
			ЗначениеОтбора = ЭлементОтбораДинамическогоСписка.ПравоеЗначение;
			
			Если Найти(ИмяОтбора, ".") > 0 ИЛИ НЕ ЭлементОтбораДинамическогоСписка.Использование Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ДанныеЗаполнения.Вставить(ИмяОтбора, ЗначениеОтбора);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции // ПрочитатьЗначенияОтбораДинамическогоСписка()

///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ РАСЧЕТАМИ ИТОГОВ

// Процедура открывает форму самостоятельного управления расчетами итогов
//
Процедура УправлениеИтогами() Экспорт
	
КонецПроцедуры //УправлениеИтогами()

///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПЕЧАТЬЮ

// Функция формирует заголовок для общей формы "Печать".
// ПараметрКоманды - параметр команды печати.
//
Функция ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") 
		И ПараметрКоманды.Количество() = 1 Тогда 
		
		Возврат Новый Структура("ЗаголовокФормы", ПараметрКоманды[0]);
		
	КонецЕсли;

	Возврат Новый Структура;
	
КонецФункции // ПолучитьЗаголовокПечатнойФормы()

Функция ПечатьСчетовФактур(ПараметрКоманды) Экспорт
	
	ПараметрыПечати = ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды);
	
	Если ПараметрКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ПараметрКоманды.ДополнительныеПараметры);
	КонецЕсли; 
	
	СписокМакетов = УправлениеНебольшойФирмойСервер.ПолучитьСписокМакетовСчетовФактур(ПараметрКоманды.ОбъектыПечати);
	Если СписокМакетов <> "" Тогда 
		
		Если ПараметрКоманды.ОбъектыПечати.Количество() > 0
			И ТипЗнч(ПараметрКоманды.ОбъектыПечати[0]) = Тип("ДокументСсылка.СчетФактура") Тогда
			ИмяМенеджераПечати = "Документ.СчетФактура";
		Иначе
			ИмяМенеджераПечати = "Документ.СчетФактураПолученный";
		КонецЕсли;
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			ИмяМенеджераПечати,
			СписокМакетов,
			ПараметрКоманды.ОбъектыПечати,
			ПараметрКоманды.Форма,
			ПараметрыПечати);
			
	КонецЕсли;
	
КонецФункции

// Функция формирования УПД
//
Функция ПечатьУПД(ПараметрКоманды) Экспорт
	Перем Ошибки;
	
	МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
	УправлениеНебольшойФирмойСервер.ПроверитьВидОперации(МассивОбъектовПечати, Ошибки);
	
	Если МассивОбъектовПечати.Количество() > 0 Тогда
		
		УправлениеНебольшойФирмойКлиент.СформироватьПечатныеФормыУПД(МассивОбъектовПечати);
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // СформироватьПечатныеФормыУПД()

// Функция формирования УКД
//
Функция ПечатьУКД(ПараметрКоманды) Экспорт
	Перем Ошибки;
	
	МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
	УправлениеНебольшойФирмойСервер.ПроверитьВозможностьПечатиУКД(МассивОбъектовПечати, Ошибки);
	
	Если МассивОбъектовПечати.Количество() > 0 Тогда
		
		УправлениеНебольшойФирмойКлиент.СформироватьПечатныеФормыУКД(МассивОбъектовПечати);
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция формирования Приложения 4 (ТН)
//
Функция ПечатьТН(ПараметрКоманды) Экспорт
	
	МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
	
	Если МассивОбъектовПечати.Количество() > 0 Тогда
		
		ОткрытьФорму("Обработка.ПечатьТН.Форма", Новый Структура("Документ", МассивОбъектовПечати[0]));
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПечатьТН()

// Процедура обработки команды "ПечатьЭтикетки" или "ПечатьЦенника" из документов 
// - Перемещения товаров
// - Приходная накладная
//
Функция ПечатьЭтикетокИЦенниковИзДокументов(ПараметрКоманды) Экспорт
	
	Если ПараметрКоманды.Количество() > 0 Тогда
		
		МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
		ЭтоЦенники = СтрНайти(ПараметрКоманды.Идентификатор, "ПечатьЦенников") > 0;
		АдресВХранилище = УправлениеНебольшойФирмойСервер.ПодготовитьСтруктуруДанныхПечатиЭтикетокИЦенниковИзДокументов(МассивОбъектовПечати, ЭтоЦенники);
		СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
		ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.Форма", СтруктураПараметры, , Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПечатьЭтикетокИзПеремещенияТоваров()

Функция СформироватьБланкиДоговоров(ПараметрКоманды) Экспорт
	
	Для каждого ОбъектПечати Из ПараметрКоманды.ОбъектыПечати Цикл
		
		Параметры = Новый Структура;
		Параметры.Вставить("Ключ", УправлениеНебольшойФирмойСервер.ПолучитьДоговорДокумента(ОбъектПечати));
		Параметры.Вставить("Документ", ОбъектПечати);
		ФормаДоговора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", Параметры);
		ОткрытьФорму(ФормаДоговора);
		ФормаДоговора.Элементы.Страницы.ТекущаяСтраница = ФормаДоговора.Элементы.СтраницаТекстДоговора;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПечатьДоговорКонтрагента(ПараметрКоманды) Экспорт
	
	Если ПараметрКоманды.Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента" Тогда 
		ИсточникПечати = ПараметрКоманды.Форма;
	Иначе
		ПараметрыФормы = Новый Структура("Ключ", ПараметрКоманды.Форма.Элементы.Список.ТекущиеДанные.Ссылка);
		ФормаДоговора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы);
		ОткрытьФорму(ФормаДоговора);
		ИсточникПечати = ФормаДоговора;
	КонецЕсли;
	
	ИсточникПечати.Элементы.Страницы.ТекущаяСтраница = ИсточникПечати.Элементы.СтраницаТекстДоговора;
	
	Если ПараметрКоманды.Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента" Тогда
		
		Объект = ПараметрКоманды.Форма.Объект;
		Договор = ИсточникПечати.ДоговорHTMLДокумент;
		
		Если НЕ ЗначениеЗаполнено(Объект.БланкДоговора) Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СсылкаБланка", Объект.БланкДоговора);
		
		МассивРедактируемыхПараметров = Объект.РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора);
		ВсеРедактируемыеПараметрыЗаполнены = Истина;
		Для Каждого Строка Из МассивРедактируемыхПараметров Цикл 
			Если СтрНайти(Договор, Строка.Идентификатор) <> 0 Тогда
				Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда 
					ВсеРедактируемыеПараметрыЗаполнены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ВсеРедактируемыеПараметрыЗаполнены Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПечатьДоговорКонтрагентаВопрос", ЭтотОбъект,
			               Новый Структура("ИсточникПечати", ИсточникПечати)),
			               НСтр("ru='Не все редактируемые вручную поля заполнены, продолжить печать?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ПечатьДоговорКонтрагентаЗавершение(ИсточникПечати);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПечатьДоговорКонтрагентаВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	ИсточникПечати = ДополнительныеПараметры.ИсточникПечати;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПечатьДоговорКонтрагентаЗавершение(ИсточникПечати);
	КонецЕсли;
	
КонецФункции

Функция ПечатьДоговорКонтрагентаЗавершение(ИсточникПечати)
	
	document = ИсточникПечати.Элементы.ДоговорHTMLДокумент.Документ;
	Если document.execCommand("Print") = Ложь Тогда 
		document.defaultView.print();
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////// 
// ПЕРЕОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОТПРАВКИ ЭЛЕКТРОННОЙ ПОЧТЫ

// Интерфейсная клиентская процедура, поддерживающая вызов формы редактирования нового письма.
// При отправке письма через стандартную общую форму ОтправкаСообщения сообщения не сохраняются в информационной базе.
//
// Параметры см. в описании функции РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо.
//
Процедура ОткрытьФормуОтправкиПочтовогоСообщения(Отправитель, Получатель, Тема, Текст, СписокФайлов, ДокументыОснования, УдалятьФайлыПослеОтправки, ОписаниеОповещенияОЗакрытии) Экспорт
	
	ПараметрыПисьма = Новый Структура;
	
	ПараметрыПисьма.Вставить("ЗначенияЗаполнения", Новый Структура("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо")));
	
	ПараметрыПисьма.Вставить("УчетнаяЗапись", Отправитель);
	ПараметрыПисьма.Вставить("Кому", Получатель);
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", Текст);
	ПараметрыПисьма.Вставить("Вложения", СписокФайлов);
	ПараметрыПисьма.Вставить("ДокументыОснования", ДокументыОснования);
	ПараметрыПисьма.Вставить("УдалятьФайлыПослеОтправки", УдалятьФайлыПослеОтправки);
	
	ОткрытьФорму("Документ.Событие.Форма.ФормаЭлектронногоПисьма", ПараметрыПисьма, , , , , ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

// Создает письмо по контактной информации.
// При формировании письма стандартной процедурой в форму отправки не передается информация об объекте-контакте
//
// Параметры см. в описании функции УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо.
//
Процедура СоздатьЭлектронноеПисьмо(Знач ЗначенияПолей, Знач Представление = "", ОжидаемыйВид = Неопределено, ОбъектФормы) Экспорт
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.ПривестиКонтактнуюИнформациюXML(
		Новый Структура("ЗначенияПолей, Представление, ВидКонтактнойИнформации", ЗначенияПолей, Представление, ОжидаемыйВид));
		
	ТипИнформации = КонтактнаяИнформация.ТипКонтактнойИнформации;
	Если ТипИнформации <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru = 'Нельзя создать письмо по контактной информацию с типом ""%1""'"),
			"%1", ТипИнформации);
	КонецЕсли;
	
	XMLДанные = КонтактнаяИнформация.ДанныеXML;
	АдресПочты = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.СтрокаСоставаКонтактнойИнформации(XMLДанные);
	Если ТипЗнч(АдресПочты) <> Тип("Строка") Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка получения адреса электронной почты, неверный тип контактной информации'");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		// УНФ. Начало
		ОбъектКонтакт = Неопределено;
		ОбъектФормы.Свойство("Ссылка", ОбъектКонтакт);
		СтруктураПолучателя = Новый Структура("Представление, Адрес", ОбъектКонтакт, АдресПочты);
		АдресПочты = Новый Массив;
		АдресПочты.Добавить(СтруктураПолучателя);
		// УНФ. Конец
		
		ПараметрыОтправки = Новый Структура("Получатель", АдресПочты);
		МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
		Возврат; 
	КонецЕсли;
	
	// Нет подсистемы почты, запускаем системное
	Оповещение = Новый ОписаниеОповещения("СоздатьПисьмоПоКонтактнойИнформацииЗавершение", ЭтотОбъект, АдресПочты);
	ТекстПредложения = НСтр("ru = 'Для отправки письма необходимо установить расширение для работы с файлами.'");
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстПредложения);
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////// 
// Общий модуль ОбщегоНазначения больше не поддерживает "Вызов сервера".
// Исправления и поддержка нового поведения
//

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ТестНастроекСертификата() формы элемента справочника СертификатыЭП
//
Функция ПрочитатьЗначениеРеквизита_ПарольПользователя_ЗапомнитьПарольКСертификату_Отпечаток_Ссылка(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_ПарольПользователя_ЗапомнитьПарольКСертификату_Отпечаток_Ссылка(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_СправочникСертификатыЭПФормаЭлемента()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ОбработкаКоманды() команды ТестНастроекСоглашения справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_СправочникСоглашенияОбИспользованииЭД_КомандаТестНастроекСоглашения(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_СправочникСоглашенияОбИспользованииЭД_КомандаТестНастроекСоглашения(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_СправочникСертификатыЭПФормаЭлемента()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры Добавить() формы обработки Прайс-лист
//
Функция ПрочитатьЗначениеРеквизита_Владелец(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_Владелец(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_ОбработкаПрайсЛистФормаОбработки()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ДеревоПодчиненныеЭДВыбор() формы ДеревоЭД обработки ЭлектронныеДокументы
//
Функция ПрочитатьЗначениеРеквизита_Соглашение(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_Соглашение(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_СертификатАбонента(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_СертификатАбонента(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_ЗапомнитьПарольКСертификату(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_ЗапомнитьПарольКСертификату(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_ПарольПользователя(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_ПарольПользователя(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ОбработатьОтклонениеЭД() формы ФормаПросмотраЭД справочника ЭДПрисоединенныеФайлы
//
Функция ПрочитатьЗначениеРеквизита_СпособОбменаЭД(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_СпособОбменаЭД(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

///////////////////////////////////////////////////////////////////////////////// 
// ФУНКЦИИ ОБМЕНА С БАНКАМИ

// Начальная процедура работы с загрузкой данных из выписки
// 
// Праметры:
//		- ЗагруженныеДокументы - Массив - список загруженных документов
// 
// Возвращает:
// 		Булево - Истина - если загрузка произведена и ложь, если пользователь отказался
//			или произошла ошибка загрузки
Процедура ЗагрузитьДанныеИзФайлаВыписки(
		ИдентификаторФормы = Неопределено,
		ИмяФайла = "",
		Организация = Неопределено,
		БанковскийСчет = Неопределено,
		СтатьяДДСВходящий = Неопределено,
		СтатьяДДСИсходящий = Неопределено,
		ПроводитьЗагружаемые = Ложь,
		ЗаполнятьДолгиАвтоматически = Ложь,
		Программа = "",
		Кодировка = "Авто",
		ВерсияФормата = "1.02",
		АвтоматическиПодставлятьДокументы = Истина,
		АнализироватьИсториюВыбораЗначенийРеквизитов = Истина,
		НастройкиПолучены = Ложь,
		НеУдалятьДокументыКоторыхНетВВыписке = Ложь,
		КонтролироватьБезопасностьОбменаСБанком = Истина) Экспорт
		
	СтатьяДДСВходящий = ?(ЗначениеЗаполнено(СтатьяДДСВходящий), СтатьяДДСВходящий, ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей"));
	СтатьяДДСИсходящий = ?(ЗначениеЗаполнено(СтатьяДДСИсходящий), СтатьяДДСИсходящий, ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам"));
	
	ЗагруженныеДокументы = Новый Массив;
	АдресВХранилище = "";
	Результат = Ложь;
	ПутьДоФайла1 = "kl_to_1c.txt";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресВХранилище", АдресВХранилище);
	ДополнительныеПараметры.Вставить("ПутьДоФайла1", ПутьДоФайла1);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("БанковскийСчет", БанковскийСчет);
	ДополнительныеПараметры.Вставить("НастройкиПолучены", НастройкиПолучены);
	ДополнительныеПараметры.Вставить("_ИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	Если НЕ НастройкиПолучены Тогда
		КлиентБанкВызовСервера.ЗагрузитьНастройкиОбменаСБанкомЧерезФайлы(БанковскийСчет, ДополнительныеПараметры);
	Иначе
		ДополнительныеПараметры.Вставить("СтатьяДДСВходящий", СтатьяДДСВходящий);
		ДополнительныеПараметры.Вставить("СтатьяДДСИсходящий", СтатьяДДСИсходящий);
		ДополнительныеПараметры.Вставить("ПроводитьЗагружаемые", ПроводитьЗагружаемые);
		ДополнительныеПараметры.Вставить("ЗаполнятьДолгиАвтоматически", ЗаполнятьДолгиАвтоматически);
		ДополнительныеПараметры.Вставить("Программа", Программа);
		ДополнительныеПараметры.Вставить("Кодировка", Кодировка);
		ДополнительныеПараметры.Вставить("ВерсияФормата", ВерсияФормата);
		ДополнительныеПараметры.Вставить("АвтоматическиПодставлятьДокументы", АвтоматическиПодставлятьДокументы);
		ДополнительныеПараметры.Вставить("НеУдалятьДокументыКоторыхНетВВыписке", НеУдалятьДокументыКоторыхНетВВыписке);
		ДополнительныеПараметры.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", АнализироватьИсториюВыбораЗначенийРеквизитов);
		ДополнительныеПараметры.Вставить("КонтролироватьБезопасностьОбменаСБанком", КонтролироватьБезопасностьОбменаСБанком);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ДействияПоВыборуФайла(ДополнительныеПараметры)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = НСтр("ru='Выберите файл для загрузки...'");
	Диалог.Фильтр = НСтр("ru='Файлы обмена с 1С (*.txt)|*.txt|Все файлы (*.*)|*.*'");
	Диалог.ПолноеИмяФайла = ДополнительныеПараметры.ПутьДоФайла1;
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

Процедура ПодключитьРасширениеРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	
	#Если Не ВебКлиент Тогда
	Если Подключено Тогда
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры._ИмяФайла) Тогда // Если есть настройки, то чтение файла сразу.
			ДополнительныеПараметры.Вставить("ВыполнитьДействияЕслиФайлНеПрочитан", Истина);
			ДополнительныеПараметры.ПутьДоФайла1 = ДополнительныеПараметры._ИмяФайла;
			ПрочитатьТекстовыйДокумент(ДополнительныеПараметры, Истина);
		Иначе // Если настроек нет, то диалог открытия файла.
			ДействияПоВыборуФайла(ДополнительныеПараметры);
		КонецЕсли;
		
	Иначе
	#КонецЕсли
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеИзФайлаВыпискиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОписаниеОповещения, ДополнительныеПараметры.АдресВХранилище, ДополнительныеПараметры.ПутьДоФайла1, Истина, ДополнительныеПараметры.ИдентификаторФормы);
		Возврат
		
	#Если Не ВебКлиент Тогда
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено ИЛИ ВыбранныеФайлы.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры._ИмяФайла = ВыбранныеФайлы[0];
	ДополнительныеПараметры.ПутьДоФайла1 = ВыбранныеФайлы[0];
	
	ПрочитатьТекстовыйДокумент(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ВыполнитьДействияЕслиФайлНеПрочитан(ДополнительныеПараметры) Экспорт

	ДействияПоВыборуФайла(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПрочитатьТекстовыйДокумент(ДополнительныеПараметры, ИмяФайлаИзНастройки = Ложь)
	
	ТекстФайла = ПолучитьТекстФайла(ДополнительныеПараметры, ИмяФайлаИзНастройки);
	
	// Пользователь отказался от передачи файла
	Если СтрДлина(ТекстФайла) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ТекстФайла, ДополнительныеПараметры.ИдентификаторФормы);
	
	ДополнительныеПараметры.АдресВХранилище = АдресВХранилище;
	ЗагрузитьДанныеИзФайлаВыпискиФрагмент(ДополнительныеПараметры);
	
КонецПроцедуры

Функция ПолучитьТекстФайла(ДополнительныеПараметры, ИмяФайлаИзНастройки, ОдиночныйРазделительСтрок = Ложь)
	
	ИмяФайла = ДополнительныеПараметры.ПутьДоФайла1;
	Кодировка = ДополнительныеПараметры.Кодировка;
	
	Попытка
		
		// Тип файла передаем в виде строки, чтобы обеспечить корректное чтение файла в нелокализованных средах
		// (Linux, англоязычная Windows + англоязычный MS SQL и др.)
		Если Кодировка = Неопределено ИЛИ Кодировка = "Авто" Тогда
			ТипФайла = ТипФайла(ИмяФайла);
		ИначеЕсли (Кодировка = КодировкаТекста.OEM) ИЛИ (Кодировка = "DOS") Тогда
			ТипФайла = "cp866";
		ИначеЕсли ДополнительныеПараметры.Кодировка = "Windows" ИЛИ НЕ ЗначениеЗаполнено(ДополнительныеПараметры.Кодировка) Тогда
			ТипФайла = "windows-1251";
		Иначе
			ТипФайла = ДополнительныеПараметры.Кодировка;
		КонецЕсли;
		
		Если ТипФайла = "cp866" Тогда
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, ТипФайла,,,Ложь);
		Иначе
			// Если в файле строки разделены CR+LF, то одиночные LF не разделяют логические строки файла, а содержится в прикладных данных.
			// При этом в отдельных полях (многострочных) они разделяют подстроки,
			// а в остальных, как правило, содержатся по ошибке и должны быть проигнорированы.
			//
			// Чтобы отличить ошибочные одиночные LF от корректных разделителей CR+LF,
			// при чтении файла используем только двухсимвольный разделитель (CR+LF),
			// а если необходимо избавиться от ошибочных LF (Символы.ПС), то делаем это после чтения строк (перед помещением данных в Секция.Данные).
			//
			// Если же в файле строки разделены одиночным LF, то отличить ошибочные LF от корректных нельзя.
			// Поэтому при чтении файла используем обычный набор разделителей. При этом ошибочно отделенные элементы строк могут быть проигнорированы.
			ДвухсимвольныйРазделительСтрок = Символы.ВК + Символы.ПС;
			Если ОдиночныйРазделительСтрок Тогда
				// Значения по умолчанию. В конструктор их следует передать явно, так как значение пятого параметра указано явно.
				РазделительСтрок               = Символы.ПС;
				КонвертируемыйРазделительСтрок = ДвухсимвольныйРазделительСтрок;
			Иначе
				РазделительСтрок               = ДвухсимвольныйРазделительСтрок;
				КонвертируемыйРазделительСтрок = "";
			КонецЕсли;
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, ТипФайла, РазделительСтрок, КонвертируемыйРазделительСтрок, Ложь);
		КонецЕсли;
	
	Исключение
		
		Если ДополнительныеПараметры.Свойство("ВыполнитьДействияЕслиФайлНеПрочитан") И ДополнительныеПараметры.ВыполнитьДействияЕслиФайлНеПрочитан Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка чтения файла %Файл%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Файл%", ИмяФайла);
			Если ИмяФайлаИзНастройки Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Возможно файл, который указан в настройках обмена, не существует.'");
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Выберите другой файл.'");
			
			ПоказатьПредупреждение(
				Новый ОписаниеОповещения("ВыполнитьДействияЕслиФайлНеПрочитан", ЭтотОбъект, ДополнительныеПараметры),
				ТекстСообщения
			);
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Ошибка чтения файла %Файл%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Файл%", ИмяФайла);
			Если ИмяФайлаИзНастройки Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Возможно файл, который указан в настройках обмена, не существует. Выбрать другой файл можно в настройках (кнопка в правом верхнем углу).'");
			КонецЕсли;
			
			ПоказатьПредупреждение(, ТекстСообщения);
		КонецЕсли;
		
		Возврат "";
		
	КонецПопытки;
	
	ВремТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Пока Истина Цикл
		
		ТекстСтрокиФайла = ЧтениеТекста.ПрочитатьСтроку();
		
		Если ТекстСтрокиФайла = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		ВремТекстовыйДокумент.ДобавитьСтроку(ТекстСтрокиФайла);
		
	КонецЦикла;
	
	Возврат ВремТекстовыйДокумент.ПолучитьТекст();
	
КонецФункции

#Область КлиентБанк

// Проверяет строку на соответствие требованиям
//
// Параметры:
//  ПроверяемаяСтрока - Строка - проверяемый строка.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция ТолькоСимволыВСтроке(Знач ПроверяемаяСтрока) Экспорт
	
	Если ПустаяСтрока(ПроверяемаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// приводим строку к нижнему регистру
	ПроверяемаяСтрока = НРег(СокрЛП(ПроверяемаяСтрока));
	
	// допустимые символы
	СпецСимволы = ".,;:$№#@&_-+*=?'/|\""%()[]{} ";
	
	// проверяем наличие спецсимволов в начале или конце строке
	Если ЕстьСимволыВНачалеСтроки(Лев(ПроверяемаяСтрока, 1), СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем допустимые символы
	Если НЕ СтрокаСодержитТолькоДопустимыеСимволы(ПроверяемаяСтрока, СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьСимволыВНачалеСтроки(Строка, ПроверяемыеСимволы)
	
	Для Позиция = 1 По СтрДлина(ПроверяемыеСимволы) Цикл
		Символ = Сред(ПроверяемыеСимволы, Позиция, 1);
		СимволНайден = СтрНачинаетсяС(Строка, Символ) ИЛИ СтрЗаканчиваетсяНа(Строка, Символ);
		Если СимволНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(СтрокаПроверки, ДопустимыеСимволы)
	
	// Кириллица
	КодСимволаА = КодСимвола("а"); 
	КодСимволаЯ = КодСимвола("я");
	
	// Цифры
	КодСимвола0 = КодСимвола("0");
	КодСимвола9 = КодСимвола("9");
	
	// Латиница
	КодСимволаA = КодСимвола("a");
	КодСимволаZ = КодСимвола("z");
	
	// Спецсимволы
	КодыДопустимыхСимволов = Новый Массив;
	Для Индекс = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		Символ = Сред(ДопустимыеСимволы, Индекс, 1);
		КодыДопустимыхСимволов.Добавить(КодСимвола(Символ));
	КонецЦикла;
	
	КодыДопустимыхСимволов.Добавить(1105); // "ё"
	
	// Проверяем каждым символ в строке
	// допустим ли он.
	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодПроверяемогоСимвола = КодСимвола(Сред(СтрокаПроверки, Индекс, 1));
		ЭтоДопустимыйСимвол = 
			КодСимволаА <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимволаЯ     // Кириллица
			ИЛИ КодСимволаA <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимволаZ // Латиница
			ИЛИ КодСимвола0 <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимвола9 // Цифры
			ИЛИ КодыДопустимыхСимволов.Найти(КодПроверяемогоСимвола) <> Неопределено;         // Спецсимволы и ё
			
		Если НЕ ЭтоДопустимыйСимвол Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает тип файла после прочтения первых 5 строк
// Определяем кодировку
Функция ТипФайла(ИмяФайла)
	
	Текст              = Новый ЧтениеТекста(ИмяФайла, "windows-1251");
	СтрокаТекста       = Текст.ПрочитатьСтроку();
	НомерТекущейСтроки = 0;
	
	Пока СтрокаТекста <> Неопределено Цикл
		// Проверяем кодировку файла
		Если НомерТекущейСтроки = 0 И НЕ ТолькоСимволыВСтроке(СтрокаТекста) Тогда // UTF-8.
			Возврат "UTF-8";
			Прервать;
		ИначеЕсли НЕ ТолькоСимволыВСтроке(СтрокаТекста) Тогда
			Возврат "cp866";
			Прервать;
		КонецЕсли;
		// Читаем первые пять строк, этого должно быть достаточно,
		// чтобы определить кодировку
		Если НомерТекущейСтроки > 5 Тогда 
			Прервать;
		КонецЕсли;
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		СтрокаТекста       = Текст.ПрочитатьСтроку();
	КонецЦикла;
	
	Возврат "windows-1251";
	
КонецФункции

#КонецОбласти

Процедура ЗагрузитьДанныеИзФайлаВыпискиЗавершение(Успешно, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Успешно Тогда
		ДополнительныеПараметры.АдресВХранилище = Адрес;
		ДополнительныеПараметры.ПутьДоФайла1 = ВыбранноеИмяФайла;
		ЗагрузитьДанныеИзФайлаВыпискиФрагмент(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеИзФайлаВыпискиФрагмент(ДополнительныеПараметры)
	
	Состояние(
		НСтр("ru='Выполняется чтение файла выписки...'"),
		,
		НСтр("ru='Пожалуйста, подождите'"),
		БиблиотекаКартинок.ЗагрузкаДанных32
	);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресФайлаКОбработке", ДополнительныеПараметры.АдресВХранилище);
	ПараметрыОткрытия.Вставить("ПутьДоФайла", ДополнительныеПараметры.ПутьДоФайла1);
	ПараметрыОткрытия.Вставить("Организация", ДополнительныеПараметры.Организация);
	ПараметрыОткрытия.Вставить("БанковскийСчетОрганизации", ДополнительныеПараметры.БанковскийСчет);
	ПараметрыОткрытия.Вставить("СтатьяДДСВходящий", ДополнительныеПараметры.СтатьяДДСВходящий);
	ПараметрыОткрытия.Вставить("СтатьяДДСИсходящий", ДополнительныеПараметры.СтатьяДДСИсходящий);
	ПараметрыОткрытия.Вставить("ПроводитьЗагружаемые", ДополнительныеПараметры.ПроводитьЗагружаемые);
	ПараметрыОткрытия.Вставить("ЗаполнятьДолгиАвтоматически", ДополнительныеПараметры.ЗаполнятьДолгиАвтоматически);
	ПараметрыОткрытия.Вставить("Программа", ДополнительныеПараметры.Программа);
	ПараметрыОткрытия.Вставить("Кодировка", ДополнительныеПараметры.Кодировка);
	ПараметрыОткрытия.Вставить("ВерсияФормата", ДополнительныеПараметры.ВерсияФормата);
	ПараметрыОткрытия.Вставить("АвтоматическиПодставлятьДокументы", ДополнительныеПараметры.АвтоматическиПодставлятьДокументы);
	ПараметрыОткрытия.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", ДополнительныеПараметры.АнализироватьИсториюВыбораЗначенийРеквизитов);
	ПараметрыОткрытия.Вставить("НастройкиПолучены", ДополнительныеПараметры.НастройкиПолучены);
	ПараметрыОткрытия.Вставить("НеУдалятьДокументыКоторыхНетВВыписке", ДополнительныеПараметры.НеУдалятьДокументыКоторыхНетВВыписке);
	ПараметрыОткрытия.Вставить("КонтролироватьБезопасностьОбменаСБанком", ДополнительныеПараметры.КонтролироватьБезопасностьОбменаСБанком);
	
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.ФормаЗагрузка",
		ПараметрыОткрытия
	);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////// 
// ПЕЧАТЬ В КЛИЕНТСКОМ КОНТЕКСТЕ

Функция ПечатьКонтактнойИнформации(ПараметрыПечати) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтрагентыНачальноеЗначение", ПараметрыПечати.ОбъектыПечати);
	
	Если ПараметрыПечати.ОбъектыПечати.Количество() > 0 Тогда
		КлючУникальности = ПараметрыПечати.ОбъектыПечати[0];
	Иначе
		КлючУникальности = Ложь;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаКонтактнойИнформации", ПараметрыФормы, , КлючУникальности);
	
КонецФункции

Функция ПредложитьЗаполнитьРеквизитыОрганизации(ПараметрыПечати) Экспорт
	
	ОткрытьФормуЗаполненияРеквизитовДляПечати(ПараметрыПечати, "ИНН,КПП,БанковскийСчетПоУмолчанию,ФайлЛоготип,ЮрАдрес");
	
КонецФункции

Функция ПредложитьЗаполнитьРеквизитыОрганизацииСФаксимильнойПодписью(ПараметрыПечати) Экспорт
	
	ОткрытьФормуЗаполненияРеквизитовДляПечати(ПараметрыПечати, "ИНН,КПП,БанковскийСчетПоУмолчанию,ФайлЛоготип,ФайлФаксимильнаяПечать,ЮрАдрес");
	
КонецФункции

Процедура ОткрытьФормуЗаполненияРеквизитовДляПечати(ПараметрыПечати, ИменаРеквизитовДляЗаполнения)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяМенеджераПечати", ПараметрыПечати.МенеджерПечати);
	ПараметрыФормы.Вставить("ИменаМакетов", ПараметрыПечати.Идентификатор);
	ПараметрыФормы.Вставить("ПараметрКоманды", ПараметрыПечати.ОбъектыПечати);
	ПараметрыФормы.Вставить("ИменаРеквизитовДляЗаполнения", ИменаРеквизитовДляЗаполнения);
	ПараметрыФормы.Вставить("ПараметрыПечати", Новый Структура);
	Для Каждого КлючИЗначение Из ПараметрыПечати Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("УправляемаяФорма") Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыФормы.ПараметрыПечати.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ПараметрыФормы.Вставить(
	"Ключ",
	УправлениеНебольшойФирмойСервер.ОрганизацияИзПараметраКоманды(ПараметрыФормы.ПараметрКоманды));
	
	Если ЗначениеЗаполнено(ПараметрыФормы.Ключ) Тогда
		
		ФормаЗаполненияРеквизитовДляПечати = ОткрытьФорму(
		"Справочник.Организации.Форма.ФормаЗаполненияРеквизитовДляПечати",
		ПараметрыФормы,
		Строка(Новый УникальныйИдентификатор));
		
		Если ФормаЗаполненияРеквизитовДляПечати <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
	ПараметрыФормы.ИмяМенеджераПечати,
	ПараметрыФормы.ИменаМакетов,
	ПараметрыФормы.ПараметрКоманды,
	ПараметрыПечати.Форма,
	ПараметрыФормы);
	
КонецПроцедуры

// Процедура формирует данные для печати на принтер этикеток и передает их драйверу оборудования.
Процедура ОбработкаКомандыПечатиЦенниковИЭтикетокНаПринтереЭтикеток(ПараметрыПечати) Экспорт
	
	Обработка = ПараметрыПечати.ОбъектыПечати[0];
	
	Если Обработка.Запасы.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного товара'"));
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ИдентификаторФормы") Тогда
		ИдентификаторФормы = ПараметрыПечати.ИдентификаторФормы;
	Иначе
		ИдентификаторФормы = ПараметрыПечати.Форма.УникальныйИдентификатор;
	КонецЕсли;
	
	ДанныеДляПринтераЭтикеток = УправлениеНебольшойФирмойВызовСервера.ПодготовитьСтруктуруДанныхЦенниковИЭтикетокДляПринтераЭтикеток(Обработка, ПараметрыПечати.МенеджерПечати, ПараметрыПечати.ТекущийРазмер);
	
	Если ДанныеДляПринтераЭтикеток.Количество() > 0 Тогда
		
		Для Каждого ТекМакет Из ДанныеДляПринтераЭтикеток Цикл
			
			МенеджерОборудованияКлиент.НачатьПечатьЭтикеток(Неопределено, ИдентификаторФормы, ТекМакет.XML, ТекМакет.Этикетки);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////// 
// РАБОТА С ФОРМАМИ

// Процедура позволяет установить период через стандартный диалог выбора периода
//
// Параметры:
//  Объект                - Произвольный - Объект в котором устанавливается значения периода
//  ПараметрыПериода      - Структура - структура со свойствами "ДатаНачала", "ДатаОкончания" и в значениях имена полей
//                              объекта, для свойства "Вариант" - значение варианта стандартного периода.
//  ОповещениеПослеВыбора - ОписаниеОповещения - Описание оповещение которое выполняется после установки периода.
//                              Может быть установлена пост-обрабокта в месте вызова после выбора периода.
Процедура РедактироватьПериод(Объект, ПараметрыПериода = Неопределено, ОповещениеПослеВыбора = Неопределено) Экспорт
	
	Если ПараметрыПериода = Неопределено Тогда
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания");
	КонецЕсли;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
		Диалог.Период.ДатаНачала = Объект[ПараметрыПериода.ДатаНачала];
	КонецЕсли;
	Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
		Диалог.Период.ДатаОкончания = Объект[ПараметрыПериода.ДатаОкончания];
	КонецЕсли;
	Если ПараметрыПериода.Свойство("Вариант") Тогда
		Диалог.Период.Вариант = ПараметрыПериода.Вариант;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",           Объект);
	ДополнительныеПараметры.Вставить("ПараметрыПериода", ПараметрыПериода);
	Если ОповещениеПослеВыбора <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеПослеВыбора", ОповещениеПослеВыбора);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"РедактироватьПериодЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Диалог.Показать(Оповещение);

КонецПроцедуры

// Процедура завершения для РедактироватьПериод()
// см. подробней для процедуры РедактироватьПериод()
Процедура РедактироватьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт

	ПараметрыПериода = ДополнительныеПараметры.ПараметрыПериода;
	Объект           = ДополнительныеПараметры.Объект;
	Если Период <> Неопределено Тогда
		Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
			Объект[ПараметрыПериода.ДатаНачала]= Период.ДатаНачала;
		КонецЕсли;
		Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
			Объект[ПараметрыПериода.ДатаОкончания]= Период.ДатаОкончания;
		КонецЕсли;
		Если ПараметрыПериода.Свойство("Вариант") Тогда
			Объект[ПараметрыПериода.Вариант]= Период.Вариант;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПослеВыбора") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыбора, Период);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет параметры формы из параметров выбора элемента.
// Используется, например, когда следует заполнить реквизиты "Покупатель", "Поставщик"
// в открывшейся форме создания контрагенента из классификатора контактов.
//
// Параметры:
//  ПараметрыФормы	 - Структура - параметры формы, которые следует дополнить,
//  Элемент			 - ЭлементФормы - элемент формы, для которого вызвается процедура.
//
Процедура ДополнитьПараметрыФормыИзПараметровВыбораЭлемента(ПараметрыФормы, Знач Элемент) Экспорт
	
	Для Каждого ТекПараметрВыбора Из Элемент.ПараметрыВыбора Цикл
		
		КомпонентыИмени = СтрРазделить(ТекПараметрВыбора.Имя, ".", Ложь);
		
		Если КомпонентыИмени.Количество() = 1 Тогда
			ПараметрыФормы.Вставить(КомпонентыИмени[0], ТекПараметрВыбора.Значение);
			Продолжить;
		КонецЕсли;
		
		Если КомпонентыИмени[0] <> "Отбор" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПараметрыФормы.Свойство("ЗначенияЗаполнения") Тогда
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
		КонецЕсли;
		
		ПараметрыФормы.ЗначенияЗаполнения.Вставить(КомпонентыИмени[1], ТекПараметрВыбора.Значение);
		
	КонецЦикла;
	
КонецПроцедуры
