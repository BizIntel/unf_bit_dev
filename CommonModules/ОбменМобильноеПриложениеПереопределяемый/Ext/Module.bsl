////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЫГРУЗКИ

Функция ВерсияМобильногоПриложенияСновымОбменом()
	
	Возврат "1.2.33.1";

КонецФункции

Функция ВерсияМобильногоПриложенияСПроизводством()
	
	Возврат "1.2.60.1";

КонецФункции

Функция НужноНакладыватьФильтр(УзелОбмена)
	
	Если НЕ Значениезаполнено(УзелОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УзелОбмена.ПоОтветственному;
	
КонецФункции

Функция ЭтоВерсияСоСтарымОбменом(УзелОбмена) Экспорт
	
	Если НЕ Значениезаполнено(УзелОбмена.ВерсияМобильногоПриложения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелОбмена.ВерсияМобильногоПриложения) Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияМобильногоПриложенияСНовымОбменом(), УзелОбмена.ВерсияМобильногоПриложения) > 0;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

Функция ЭтоВерсияСПроизводством(УзелОбмена) Экспорт
	
	Если НЕ Значениезаполнено(УзелОбмена.ВерсияМобильногоПриложения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелОбмена.ВерсияМобильногоПриложения) Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(УзелОбмена.ВерсияМобильногоПриложения, ВерсияМобильногоПриложенияСПроизводством()) >= 0;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

Функция ПолучитьКоличествоОбъектовВПакете()
	
	Возврат 1000;
	
КонецФункции

// Функция выполняет проверку того, что данные нужно переностить в данный узел
//
// Параметры:
//  Данные	– Объект, набор записей,... который нужно проверить.
//			То, что переносится везде, не обрабатывается
//  УзелОбмена - узел плана обмена, куда осуществляется перенос
//
// Возвращаемое значение:
//  Перенос - булево, если Истина - необходимо выполнять перенос, 
//			  иначе - перенос выполнять не нужно
//
Функция НуженПереносДанных(Данные, УзелОбмена) Экспорт
	
	НужноНакладыватьФильтр = НужноНакладыватьФильтр(УзелОбмена);
	
	Перенос = Истина;
	
	Если ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаказПокупателя")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Пользователь = Пользователи.ТекущийПользователь();
		
		ОтборыДляВыгрузкиДокументов = ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение();
		
		Если НужноНакладыватьФильтр Тогда
			// Проверяем, что организация соответствует выгружаемой.
			Если Данные.Организация <> ОтборыДляВыгрузкиДокументов.ОсновнаяОрганизация
			 ИЛИ Данные.Дата < ОтборыДляВыгрузкиДокументов.ДатаНачалаВыгрузки Тогда
				Перенос = Ложь;
			КонецЕсли;
			
			// Если заполнены ответственный, то выгружаем по нему.
			Если ЗначениеЗаполнено(ОтборыДляВыгрузкиДокументов.ОсновнойОтветственный)
			   И ЗначениеЗаполнено(Данные.Ответственный) Тогда
				Если Данные.Ответственный <> ОтборыДляВыгрузкиДокументов.ОсновнойОтветственный Тогда
					Перенос = Ложь;
				КонецЕсли;
			Иначе
				// Проверяем, что автор документа - это текущий пользователь
				Если Данные.Автор <> Пользователь Тогда
					Перенос = Ложь;
				КонецЕсли;
			КонецЕсли;
		Конецесли;
		
		Если Данные.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
			Перенос = Ложь;
		КонецЕсли;
		
		Если НЕ Данные.Проведен Тогда
			Перенос = Ложь;
		КонецЕсли;
		
		Для каждого ТекСтрока Из Данные.Запасы Цикл
			Если ТекСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				Перенос = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ЗаписиКалендаряПодготовкиОтчетности")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности") Тогда
		
		Пользователь = Пользователи.ТекущийПользователь();
		ОтборыДляВыгрузкиДокументов = ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение();
		Если Данные.Организация <> ОтборыДляВыгрузкиДокументов.ОсновнаяОрганизация Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РасходнаяНакладная")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		Если ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПриходнаяНакладная")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		Если ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПоступлениеВКассу")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
		
		Если ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РасходИзКассы")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		
		Если ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Если НЕ Данные.ЭтоГруппа
		   И Данные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас
		   И Данные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
		
		Если Данные.Отбор.Номенклатура.Значение.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас
		   И Данные.Отбор.Номенклатура.Значение.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
			Перенос = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Данные.Отбор.Характеристика.Значение) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.СборкаЗапасов")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.СборкаЗапасов") Тогда
		
		Если ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
		Если НЕ ЭтоВерсияСПроизводством(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Перенос;
	
КонецФункции // НуженПереносДанных()

// Получает объект XDTO из переданного объекта конфигурации.
//
Функция ПолучитьОбъектXDTO(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = Неопределено;
	
	// Сериализация справочника Контрагенты.
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.Контрагенты")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("CatContractors");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Наименование;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		Если ЗначениеЗаполнено(Данные.Родитель) Тогда
			ПередаваемыйОбъект.Group = ПолучитьОбъектXDTO(Данные.Родитель, КоличествоОбъектов);
		КонецЕсли;
		Если Данные.ЭтоГруппа Тогда
			ПередаваемыйОбъект.ThisIsGroup = Истина;
			Возврат ПередаваемыйОбъект;
		Иначе
			ПередаваемыйОбъект.ThisIsGroup = Ложь;
		КонецЕсли;
		
		ПочтовыйАдресКонтрагента = "";
		ЮрАдресКонтрагента = "";
		ФактАдресКонтрагента = "";
		ПередаваемыйОбъект.Tel = "";
		ПередаваемыйОбъект.Fax = "";
		ПередаваемыйОбъект.Email = "";
		ПередаваемыйОбъект.Web = "";
		ПередаваемыйОбъект.Adress = "";
		
		Для каждого ТекСтрока Из Данные.КонтактнаяИнформация Цикл
			Если ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				ПередаваемыйОбъект.Tel = ТекСтрока.Представление;
			ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
				ПередаваемыйОбъект.Fax = ТекСтрока.Представление;
			ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
				И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента Тогда
				ПочтовыйАдресКонтрагента = ТекСтрока.Представление;
			ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
				И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
				ЮрАдресКонтрагента = ТекСтрока.Представление;
			ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
				И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
				ФактАдресКонтрагента = ТекСтрока.Представление;
			ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				ПередаваемыйОбъект.Email = ТекСтрока.Представление;
			ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
				ПередаваемыйОбъект.Web = ТекСтрока.Представление;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ФактАдресКонтрагента) Тогда
			ПередаваемыйОбъект.Adress = ФактАдресКонтрагента;
		ИначеЕсли НЕ ПустаяСтрока(ПочтовыйАдресКонтрагента) Тогда
			ПередаваемыйОбъект.Adress = ПочтовыйАдресКонтрагента;
		ИначеЕсли НЕ ПустаяСтрока(ЮрАдресКонтрагента) Тогда
			ПередаваемыйОбъект.Adress = ЮрАдресКонтрагента;
		КонецЕсли;
		
		ПередаваемыйОбъект.AdditionalInfo = Данные.Комментарий;
		ПередаваемыйОбъект.ContactName = Данные.КонтактноеЛицо.Наименование;
		
	// Сериализация справочника Номенклатура.
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("CatItems");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Наименование;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		Если ЗначениеЗаполнено(Данные.Родитель) Тогда
			ПередаваемыйОбъект.Group = ПолучитьОбъектXDTO(Данные.Родитель, КоличествоОбъектов);
		КонецЕсли;
		Если Данные.ЭтоГруппа Тогда
			ПередаваемыйОбъект.ThisIsGroup = Истина;
			Возврат ПередаваемыйОбъект;
		Иначе
			ПередаваемыйОбъект.ThisIsGroup = Ложь;
		КонецЕсли;
		ПередаваемыйОбъект.Article = Данные.Артикул;
		Если ЗначениеЗаполнено(Данные.Поставщик) Тогда
			ПередаваемыйОбъект.Supplier = ПолучитьОбъектXDTO(Данные.Поставщик, КоличествоОбъектов);
		Конецесли;
		ПередаваемыйОбъект.TypeItem = ПолучитьОбъектXDTO(Данные.ТипНоменклатуры, КоличествоОбъектов);
		ПередаваемыйОбъект.ImageAviable = ЗначениеЗаполнено(Данные.Ссылка.ФайлКартинки);
		
		ПередаваемыйОбъект.BarCode = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодПоНоменклатуре(Данные.Ссылка)
		
	// Сериализация справочника ЗаписиКалендаряПодготовкиОтчетности.
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ЗаписиКалендаряПодготовкиОтчетности")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("RecTaxCalendar");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		
		ПередаваемыйОбъект.Date = Данные.ДатаСменыСостояния;
		ПередаваемыйОбъект.Complete = Данные.Завершено;
		ПередаваемыйОбъект.EventTax = ПолучитьОбъектXDTO(Данные.СобытиеКалендаря, КоличествоОбъектов);
		ПередаваемыйОбъект.Condition = Строка(Данные.Состояние);
		
		// Сериализация справочника КалендарьПодготовкиОтчетности.
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.КалендарьПодготовкиОтчетности")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.КалендарьПодготовкиОтчетности") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("EventTaxCalendar");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		
		ПередаваемыйОбъект.Task = ?(ЗначениеЗаполнено(Данные.Задача), Данные.Задача.Наименование, "");
		ПередаваемыйОбъект.StartDateInfo = Данные.ДатаНачалаИнформирования;
		ПередаваемыйОбъект.StartDateEvent = Данные.ДатаНачалаСобытия;
		ПередаваемыйОбъект.EndDateEvent = Данные.ДатаОкончанияСобытия;
		ПередаваемыйОбъект.DocProcDateEvent = Данные.ДатаДокументаОбработкиСобытия;
		ПередаваемыйОбъект.StartDateDocs = Данные.ДатаНачалаДокументов;
		ПередаваемыйОбъект.EndDateDocs = Данные.ДатаОкончанияДокументов;
		
		ПередаваемыйОбъект.ForEntrepreneur = Данные.ПрименяетсяДляИП;
		ПередаваемыйОбъект.ForLLC = Данные.ПрименяетсяДляООО;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.СтатьиДвиженияДенежныхСредств")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("CashFlowItems");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Наименование;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Predefined = Данные.Предопределенный;
		
		Если ЗначениеЗаполнено(Данные.Родитель) Тогда
			ПередаваемыйОбъект.Group = ПолучитьОбъектXDTO(Данные.Родитель, КоличествоОбъектов);
		КонецЕсли;
		Если Данные.ЭтоГруппа Тогда
			ПередаваемыйОбъект.ThisIsGroup = Истина;
			Возврат ПередаваемыйОбъект;
		Иначе
			ПередаваемыйОбъект.ThisIsGroup = Ложь;
		КонецЕсли;
		
		Если Данные.Предопределенный Тогда
			Если Данные.Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей Тогда
				ПередаваемыйОбъект.PredefinedCode = "000000001";
			ИначеЕсли Данные.Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам Тогда
				ПередаваемыйОбъект.PredefinedCode = "000000002";
			ИначеЕсли Данные.Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.Прочее Тогда
				ПередаваемыйОбъект.PredefinedCode = "000000003";
			КонецЕсли;
		КонецЕсли;

		
	// Сериализация документа Заказ покупателя.
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаказПокупателя")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	
		ПередаваемыйОбъект = СоздатьОбъектXDTO("DocOrders");
		
		ТолькоДляЧтения = ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Данные, "Запасы");
		ПередаваемыйОбъект.ReadOnly = ТолькоДляЧтения;
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Posted = Данные.Проведен;
		ПередаваемыйОбъект.Name = Данные.Номер;
		ПередаваемыйОбъект.Date = Данные.Дата;
		ПередаваемыйОбъект.Comment = Данные.Комментарий;
		Если ЗначениеЗаполнено(Данные.Контрагент) Тогда
			ПередаваемыйОбъект.Buyer = ПолучитьОбъектXDTO(Данные.Контрагент, КоличествоОбъектов);
		Конецесли;
		ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Items").Тип;
		ДобавляемыеСтроки = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
		
		НужноПересчитыватьСуммы = Данные.ВалютаДокумента <> Константы.НациональнаяВалюта.Получить();
		
		Для каждого СтрокаТЧ Из Данные.Запасы Цикл
			ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
			ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
			Конецесли;
			Если НужноПересчитыватьСуммы Тогда
				ДобавляемаяСтрока.Price = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТЧ.Цена,
					Данные.Курс,
					1,
					Данные.Кратность,
					1
				);
				ДобавляемаяСтрока.Total = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТЧ.Сумма,
					Данные.Курс,
					1,
					Данные.Кратность,
					1
				);
			Иначе
				ДобавляемаяСтрока.Price = СтрокаТЧ.Цена;
				ДобавляемаяСтрока.Total = СтрокаТЧ.Сумма;
			КонецЕсли;
			ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
			ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
		КонецЦикла;
		
		ПередаваемыйОбъект.Items = ДобавляемыеСтроки;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход, 0) <> 0
			|				И ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоРасход, 0) <> 0
			|				И ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток, 0) = 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ОтгруженПолностью,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОборот, 0) <= ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0) + ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ОплаченПолностью,
			|	ДокументЗаказПокупателя.Ссылка
			|ИЗ
			|	Документ.ЗаказПокупателя КАК ДокументЗаказПокупателя
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(, , Авто, , ) КАК ЗаказыПокупателейОстаткиИОбороты
			|		ПО ДокументЗаказПокупателя.Ссылка = ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетовИЗаказов.Обороты КАК ОплатаСчетовИЗаказовОбороты
			|		ПО ДокументЗаказПокупателя.Ссылка = ОплатаСчетовИЗаказовОбороты.СчетНаОплату
			|ГДЕ
			|	ДокументЗаказПокупателя.Ссылка = &Ссылка"
		);
		Запрос.УстановитьПараметр("Ссылка", Данные.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ПередаваемыйОбъект.Shipped = Выборка.ОтгруженПолностью;
			ПередаваемыйОбъект.Paid = Выборка.ОплаченПолностью;
		КонецЕсли;
		
		Если НужноПересчитыватьСуммы Тогда
			ПередаваемыйОбъект.Total = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				Данные.СуммаДокумента,
				Данные.Курс,
				1,
				Данные.Кратность,
				1
			);
		Иначе
			ПередаваемыйОбъект.Total = Данные.СуммаДокумента;
		КонецЕсли;
		
	// Сериализация документа Расходная накладная.
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РасходнаяНакладная")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
	
		ПередаваемыйОбъект = СоздатьОбъектXDTO("DocInvoice");
		ТолькоДляЧтения = ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Данные, "Запасы");
		ПередаваемыйОбъект.ReadOnly = ТолькоДляЧтения;
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Posted = Данные.Проведен;
		ПередаваемыйОбъект.Name = Данные.Номер;
		ПередаваемыйОбъект.Date = Данные.Дата;
		ПередаваемыйОбъект.Comment = Данные.Комментарий;
		Попытка
			Если ЗначениеЗаполнено(Данные.Заказ) Тогда
					Если ТипЗнч(Данные.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
						ПередаваемыйОбъект.Order = ПолучитьОбъектXDTO(Данные.Заказ.ПолучитьОбъект(), КоличествоОбъектов);
					КонецЕсли;
			ИначеЕсли Данные.Запасы.Количество() > 0 
				И ТипЗнч(Данные.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") 
				И ЗначениеЗаполнено(Данные.Запасы[0].Заказ)
				И ЗначениеЗаполнено(Данные.Запасы[0].Всего) = Данные.СуммаДокумента Тогда
				ПередаваемыйОбъект.Order = ПолучитьОбъектXDTO(Данные.Запасы[0].Заказ.ПолучитьОбъект(), КоличествоОбъектов);
			КонецЕсли;
		Исключение
		КонецПопытки;
		Если ЗначениеЗаполнено(Данные.Контрагент) Тогда
			ПередаваемыйОбъект.Buyer = ПолучитьОбъектXDTO(Данные.Контрагент, КоличествоОбъектов);
		Конецесли;
		ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Items").Тип;
		ДобавляемыеСтроки = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
		
		НужноПересчитыватьСуммы = Данные.ВалютаДокумента <> Константы.НациональнаяВалюта.Получить();
		
		Для каждого СтрокаТЧ Из Данные.Запасы Цикл
			ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
			ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
			Конецесли;
			Если НужноПересчитыватьСуммы Тогда
				ДобавляемаяСтрока.Price = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТЧ.Цена,
					Данные.Курс,
					1,
					Данные.Кратность,
					1
				);
				ДобавляемаяСтрока.Total = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТЧ.Сумма,
					Данные.Курс,
					1,
					Данные.Кратность,
					1
				);
			Иначе
				ДобавляемаяСтрока.Price = СтрокаТЧ.Цена;
				ДобавляемаяСтрока.Total = СтрокаТЧ.Сумма;
			КонецЕсли;
			ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
			ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
		КонецЦикла;
		
		ПередаваемыйОбъект.Items = ДобавляемыеСтроки;
			
		Если НужноПересчитыватьСуммы Тогда
			ПередаваемыйОбъект.Total = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				Данные.СуммаДокумента,
				Данные.Курс,
				1,
				Данные.Кратность,
				1
			);
		Иначе
			ПередаваемыйОбъект.Total = Данные.СуммаДокумента;
		КонецЕсли;
		
	// Сериализация документа Расходная накладная.
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПриходнаяНакладная")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
	
		ПередаваемыйОбъект = СоздатьОбъектXDTO("DocPurshareInvoice");
		ТолькоДляЧтения = ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Данные, "Запасы");
		ПередаваемыйОбъект.ReadOnly = ТолькоДляЧтения;
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Posted = Данные.Проведен;
		ПередаваемыйОбъект.Name = Данные.Номер;
		ПередаваемыйОбъект.Date = Данные.Дата;
		ПередаваемыйОбъект.Comment = Данные.Комментарий;
		Если ЗначениеЗаполнено(Данные.Контрагент) Тогда
			ПередаваемыйОбъект.Supplier = ПолучитьОбъектXDTO(Данные.Контрагент, КоличествоОбъектов);
		Конецесли;
		ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Items").Тип;
		ДобавляемыеСтроки = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
		
		НужноПересчитыватьСуммы = Данные.ВалютаДокумента <> Константы.НациональнаяВалюта.Получить();
		
		Для каждого СтрокаТЧ Из Данные.Запасы Цикл
			ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
			ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
			Конецесли;
			Если НужноПересчитыватьСуммы Тогда
				ДобавляемаяСтрока.Price = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТЧ.Цена,
					Данные.Курс,
					1,
					Данные.Кратность,
					1
				);
				ДобавляемаяСтрока.Total = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТЧ.Сумма,
					Данные.Курс,
					1,
					Данные.Кратность,
					1
				);
			Иначе
				ДобавляемаяСтрока.Price = СтрокаТЧ.Цена;
				ДобавляемаяСтрока.Total = СтрокаТЧ.Сумма;
			КонецЕсли;
			ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
			ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из Данные.Расходы Цикл
			ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
			ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
			Конецесли;
			Если НужноПересчитыватьСуммы Тогда
				ДобавляемаяСтрока.Price = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТЧ.Цена,
					Данные.Курс,
					1,
					Данные.Кратность,
					1
				);
				ДобавляемаяСтрока.Total = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТЧ.Сумма,
					Данные.Курс,
					1,
					Данные.Кратность,
					1
				);
			Иначе
				ДобавляемаяСтрока.Price = СтрокаТЧ.Цена;
				ДобавляемаяСтрока.Total = СтрокаТЧ.Сумма;
			КонецЕсли;
			ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
			ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
		КонецЦикла;
		
		ПередаваемыйОбъект.Items = ДобавляемыеСтроки;
			
		Если НужноПересчитыватьСуммы Тогда
			ПередаваемыйОбъект.Total = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				Данные.СуммаДокумента,
				Данные.Курс,
				1,
				Данные.Кратность,
				1
			);
		Иначе
			ПередаваемыйОбъект.Total = Данные.СуммаДокумента;
		КонецЕсли;
		
	// Сериализация документа Производство.
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.СборкаЗапасов")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.СборкаЗапасов") Тогда
	
		ПередаваемыйОбъект = СоздатьОбъектXDTO("DocProduction");
		ТолькоДляЧтенияПродукция = ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Данные, "Продукция");
		ТолькоДляЧтенияЗапасы = ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Данные, "Запасы");
		ПередаваемыйОбъект.ReadOnly = ТолькоДляЧтенияПродукция ИЛИ ТолькоДляЧтенияЗапасы;
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Posted = Данные.Проведен;
		ПередаваемыйОбъект.Name = Данные.Номер;
		ПередаваемыйОбъект.Date = Данные.Дата;
		ПередаваемыйОбъект.Comment = Данные.Комментарий;
		
		ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Products").Тип;
		ДобавляемыеСтроки = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
		Для каждого СтрокаТЧ Из Данные.Продукция Цикл
			ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
			ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
			Конецесли;
			ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
			ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
		КонецЦикла;
		ПередаваемыйОбъект.Products = ДобавляемыеСтроки;

		ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Materials").Тип;
		ДобавляемыеСтроки = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
		Для каждого СтрокаТЧ Из Данные.Запасы Цикл
			ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
			ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
			Конецесли;
			ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
			ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
		КонецЦикла;
		ПередаваемыйОбъект.Materials = ДобавляемыеСтроки;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПоступлениеВКассу")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("DocIncomingPayment");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Posted = Данные.Проведен;
		ПередаваемыйОбъект.Name = Данные.Номер;
		ПередаваемыйОбъект.Date = Данные.Дата;
		Попытка
			Если ЗначениеЗаполнено(Данные.ДокументОснование) Тогда
				Если ТипЗнч(Данные.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
					ПередаваемыйОбъект.Invoice = ПолучитьОбъектXDTO(Данные.ДокументОснование.ПолучитьОбъект(), КоличествоОбъектов);
				ИначеЕсли ТипЗнч(Данные.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
					И Данные.ДокументОснование.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
					ПередаваемыйОбъект.Order = ПолучитьОбъектXDTO(Данные.ДокументОснование.ПолучитьОбъект(), КоличествоОбъектов);
				Иначе
					ПередаваемыйОбъект.ReadOnly = Истина;
				КонецЕсли;
			КонецЕсли;
			Если Данные.РасшифровкаПлатежа.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(Данные.РасшифровкаПлатежа[0].Заказ)
				И Данные.РасшифровкаПлатежа[0].Заказ = Тип("ДокументСсылка.ЗаказПокупателя")
				И Данные.РасшифровкаПлатежа[0].СуммаПлатежа = Данные.СуммаДокумента Тогда
					ПередаваемыйОбъект.Order = ПолучитьОбъектXDTO(Данные.РасшифровкаПлатежа[0].Заказ.ПолучитьОбъект(), КоличествоОбъектов);
				КонецЕсли;
				Если ЗначениеЗаполнено(Данные.РасшифровкаПлатежа[0].Документ)
				И Данные.РасшифровкаПлатежа[0].Документ = Тип("ДокументСсылка.РасходнаяНакладная")
				И Данные.РасшифровкаПлатежа[0].СуммаПлатежа = Данные.СуммаДокумента Тогда
					ПередаваемыйОбъект.Invoice = ПолучитьОбъектXDTO(Данные.РасшифровкаПлатежа[0].Документ.ПолучитьОбъект(), КоличествоОбъектов);
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		Если ЗначениеЗаполнено(Данные.Контрагент) Тогда
			ПередаваемыйОбъект.Contractor = ПолучитьОбъектXDTO(Данные.Контрагент.ПолучитьОбъект(), КоличествоОбъектов);
		Конецесли;
		Если ЗначениеЗаполнено(Данные.Статья) Тогда
			ПередаваемыйОбъект.CashFlowItem = ПолучитьОбъектXDTO(Данные.Статья.ПолучитьОбъект(), КоличествоОбъектов);
		Конецесли;
		ПередаваемыйОбъект.Comment = Данные.Комментарий;
		ПередаваемыйОбъект.Total = Данные.СуммаДокумента;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РасходИзКассы")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("DocOutgoingPayment");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Posted = Данные.Проведен;
		ПередаваемыйОбъект.Name = Данные.Номер;
		ПередаваемыйОбъект.Date = Данные.Дата;
		Попытка
			Если ЗначениеЗаполнено(Данные.ДокументОснование) Тогда
				Если ТипЗнч(Данные.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
					ПередаваемыйОбъект.PurshareInvoice = ПолучитьОбъектXDTO(Данные.ДокументОснование.ПолучитьОбъект(), КоличествоОбъектов);
				Иначе
					ПередаваемыйОбъект.ReadOnly = Истина;
				КонецЕсли;
			КонецЕсли;
			Если Данные.РасшифровкаПлатежа.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(Данные.РасшифровкаПлатежа[0].Документ)
				И Данные.РасшифровкаПлатежа[0].Документ = Тип("ДокументСсылка.ПриходнаяНакладная")
				И Данные.РасшифровкаПлатежа[0].СуммаПлатежа = Данные.СуммаДокумента Тогда
					ПередаваемыйОбъект.PurshareInvoice = ПолучитьОбъектXDTO(Данные.РасшифровкаПлатежа[0].Документ.ПолучитьОбъект(), КоличествоОбъектов);
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		Если ЗначениеЗаполнено(Данные.Контрагент) Тогда
			ПередаваемыйОбъект.Contractor = ПолучитьОбъектXDTO(Данные.Контрагент.ПолучитьОбъект(), КоличествоОбъектов);
		Конецесли;
		Если ЗначениеЗаполнено(Данные.Статья) Тогда
			ПередаваемыйОбъект.CashFlowItem = ПолучитьОбъектXDTO(Данные.Статья.ПолучитьОбъект(), КоличествоОбъектов);
		Конецесли;
		ПередаваемыйОбъект.Comment = Данные.Комментарий;
		ПередаваемыйОбъект.Total = Данные.СуммаДокумента;
		
	// Преобразование типа номенклатуры.
	ИначеЕсли ТипЗнч(Данные) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
		
		Если Данные = Перечисления.ТипыНоменклатуры.Запас Тогда
			ПередаваемыйОбъект = "Product";
		Иначе
			ПередаваемыйОбъект = "Service";
		КонецЕсли;
		
	// Сериализация цен номенклатуры.
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
		
		Если Данные.Количество() = 0 Тогда
			Возврат ПередаваемыйОбъект;
		КонецЕсли;
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("Prices");
		ВыгрузкаРегистра = Данные.Выгрузить();
		
		Если ЗначениеЗаполнено(ВыгрузкаРегистра[0].Номенклатура) Тогда
			ПередаваемыйОбъект.Nomenclature = ПолучитьОбъектXDTO(ВыгрузкаРегистра[0].Номенклатура, КоличествоОбъектов);
		Иначе
			Возврат Неопределено;
		Конецесли;
		ПередаваемыйОбъект.Date = ВыгрузкаРегистра[0].Период;
		ПередаваемыйОбъект.Price = ВыгрузкаРегистра[0].Цена;
		
	// Сериализация цен удаление объекта.
	ИначеЕсли ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ObjectDeletion");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		
		Если ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПередаваемыйОбъект.Type = "CatContractors";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
			ПередаваемыйОбъект.Type = "CatItems";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
			ПередаваемыйОбъект.Type = "CashFlowItems";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ПередаваемыйОбъект.Type = "DocOrders";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			ПередаваемыйОбъект.Type = "DocPurshareInvoice";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			ПередаваемыйОбъект.Type = "DocInvoice";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.РасходИзКассы") Тогда
			ПередаваемыйОбъект.Type = "DocOutgoingPayment";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
			ПередаваемыйОбъект.Type = "DocIncomingPayment";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.СборкаЗапасов") Тогда
			ПередаваемыйОбъект.Type = "DocProduction";
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоОбъектов = КоличествоОбъектов + 1;
	Возврат ПередаваемыйОбъект;
	
КонецФункции // ПолучитьОбъектXDTO()

// Процедура записывает данные в формат XML
// Процедура анализирует переданный объект данных и на основе этого анализа
// записывает его определенным образом в формат XML
//
// Параметры:
//  ЗаписьXML	- объект, записывающий XML данные
//  Данные 		- данные, подлежащие записи в формат XML
//
Процедура ЗаписатьДанные(ВозвращаемыйСписок, Данные, КоличествоОбъектов) Экспорт
	
	ОбъектXDTO = ПолучитьОбъектXDTO(Данные, КоличествоОбъектов);
	Если ОбъектXDTO <> Неопределено Тогда
		ВозвращаемыйСписок.objects.Добавить(ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДанные()

// Процедура записывает остатки по запасам.
//
Процедура ЗаписатьОстатки(ВозвращаемыйСписок, Данные) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗапасыОстатки.Номенклатура,
		|	ЗапасыОстатки.КоличествоОстаток,
		|	ЗапасыОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки КАК ЗапасыОстатки
		|ГДЕ
		|	ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|	И ЗапасыОстатки.КоличествоОстаток > 0"
	);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Remains");

	Пока Выборка.Следующий() Цикл
		ДобавляемаяСтрокаТип = ПередаваемыйОбъект.Свойства().Получить("Item").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			КоличествоОбъектов = 0;
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(Выборка.Номенклатура.ПолучитьОбъект(), КоличествоОбъектов);
		Конецесли;
		ДобавляемаяСтрока.Quantity = Выборка.КоличествоОстаток;
		ДобавляемаяСтрока.Total = Выборка.СуммаОстаток;
		ПередаваемыйОбъект.Item.Добавить(ДобавляемаяСтрока);
	КонецЦикла;
	
	ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
	
КонецПроцедуры // ЗаписатьОстатки()

// Процедура регистрирует изменения, для всех данных, входящих в состав плана обмена
// Параметры:
//  УзелОбмена - узел плана обмена, для которого регистрируются изменения
Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт
	
	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Для каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
			
			ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
			Если (ЭтоВерсияСоСтарымОбменом(УзелОбмена) И ПолноеИмяОбъекта = "Документ.ЗаказПокупателя")
				ИЛИ (НЕ ЭтоВерсияСоСтарымОбменом(УзелОбмена)) Тогда
				Выборка = ПолучитьВыборкуДокументовДляРегистрации(ПолноеИмяОбъекта, УзелОбмена);
				
				Пока Выборка.Следующий() Цикл
					
					Перенос = Истина;
					Если ПолноеИмяОбъекта = "Документ.ЗаказПокупателя" Тогда
						Данные = Выборка.Ссылка.ПолучитьОбъект();
						Для каждого ТекСтрока Из Данные.Запасы Цикл
							Если ТекСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
								Перенос = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если Перенос Тогда
						ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСоставаПланаОбмена.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗарегистрироватьИзмененияДанных()

// Функция получает отборы для выгрузки документов.
//
Функция ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение()
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ОсновнойОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователь,
		"ОсновнойОтветственный"
	);
	
	ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователь,
		"ОсновнаяОрганизация"
	);
	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
		ОсновнаяОрганизация = Справочники.Организации.ОсновнаяОрганизация;
	КонецЕсли;
	
	ПериодВыгрузкиВМобильноеПриложение = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователь,
		"ПериодВыгрузкиВМобильноеПриложение"
	);
	
	Если ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийКвартал Тогда
		ДатаНачалаВыгрузки = НачалоКвартала(ТекущаяДата());
	ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийМесяц Тогда
		ДатаНачалаВыгрузки = НачалоМесяца(ТекущаяДата());
	ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнююНеделю Тогда
		ДатаНачалаВыгрузки = НачалоНедели(ТекущаяДата());
	ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийДень Тогда
		ДатаНачалаВыгрузки = НачалоДня(ТекущаяДата());
	Иначе
		ДатаНачалаВыгрузки = '00010101';
	КонецЕсли;
	
	ОтборыДляВыгрузкиДокументов = Новый Структура;
	
	ОтборыДляВыгрузкиДокументов.Вставить("ОсновнойОтветственный", ОсновнойОтветственный);
	ОтборыДляВыгрузкиДокументов.Вставить("ОсновнаяОрганизация", ОсновнаяОрганизация);
	ОтборыДляВыгрузкиДокументов.Вставить("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	
	Возврат ОтборыДляВыгрузкиДокументов;
	
КонецФункции // ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение()

// Функция получает выборку документов, соответствующих условиям отбора.
//
Функция ПолучитьВыборкуДокументовДляРегистрации(ПолноеИмяОбъекта, УзелОбмена)
	
	НужноНакладыватьФильтр = НужноНакладыватьФильтр(УзелОбмена);
	
	ОтборыДляВыгрузкиДокументов = ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение();
	
	Запрос = Новый Запрос;
	Если ПолноеИмяОбъекта = "Документ.ЗаказПокупателя" Тогда
		Если НужноНакладыватьФильтр Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка
			|ИЗ
			|	[ПолноеИмяОбъекта] КАК Таблица
			|ГДЕ
			|	Таблица.Дата >= &ДатаНачалаВыгрузки
			|	И Таблица.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу)
			|	И Таблица.Организация = &Организация
			|	%ОтборПоОтветственным%
			|	И Таблица.Проведен
			|	И Таблица.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
			
			Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ОтборыДляВыгрузкиДокументов.ДатаНачалаВыгрузки);
			Запрос.УстановитьПараметр("Организация", ОтборыДляВыгрузкиДокументов.ОсновнаяОрганизация);
			Если ЗначениеЗаполнено(ОтборыДляВыгрузкиДокументов.ОсновнойОтветственный) Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоОтветственным%", "И Таблица.Ответственный = &Ответственный");
				Запрос.УстановитьПараметр("Ответственный", ОтборыДляВыгрузкиДокументов.ОсновнойОтветственный);
			Иначе
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоОтветственным%", "И Таблица.Автор = &Автор");
				Запрос.УстановитьПараметр("Автор", Пользователи.ТекущийПользователь());
			КонецЕсли;
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка
			|ИЗ
			|	[ПолноеИмяОбъекта] КАК Таблица
			|ГДЕ
			|	Таблица.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу)
			|	И Таблица.Проведен
			|	И Таблица.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
		КонецЕсли;
	ИначеЕсли ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда
		Возврат Неопределено;
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	[ПолноеИмяОбъекта] КАК Таблица";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуДокументовДляРегистрации()

// Процедура добавляет сообщение обмена в очередь сообщений для передачи мобильному клиенту.
//
// Параметры
//  СообщениеОбмена  - ХранилищеЗначений - сообщение обмена для помещения в очередь.
//
Процедура ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.МобильныйКлиент.Установить(УзелОбмена);
	НаборЗаписей.Отбор.НомерСообщения.Установить(НомерСообщенияОчереди);
	НаборЗаписей.Прочитать();
	
	// Если сообщение с таким номером уже есть в очереди, генерируем исключение.
	Если НаборЗаписей.Количество() > 0 Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен с мобильным клиентом.Добавление сообщения в очередь сообщений обмена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			УзелОбмена,
			НСтр("ru = 'Очередь сообщений обмена уже содержит сообщение с номером " + НомерСообщенияОчереди + ".'"));
			
		// Обнуляем счетчики принятых и отправленных сообщений для перерегистрации и отправки всех данных при следующем обмене.
		ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена);
		
		ВызватьИсключение(НСтр("ru='Не удалось выполнить отправку данных. Подробности см. в Журнале регистрации информационной базы.'"));
		
	КонецЕсли;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.МобильныйКлиент = УзелОбмена;
	НоваяЗапись.НомерСообщения = НомерСообщенияОчереди;
	НоваяЗапись.СообщениеОбмена = СообщениеОбмена;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры // ДобавитьСообщениеВОчередьСообщенийОбмена()

// Процедура на основании анализа типа данных заменяет их на данные, удаляющие
// информацию из узла в котором их не должно быть
//
// Параметры:
//  Данные	– Объект, набор записей,... который нужно преобразовать
//
Процедура УдалениеДанных(Данные) Экспорт
	
	// Получаем объект описания метаданного, соответствующий данным.
	ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Данные.Ссылка.Метаданные(), Данные.Метаданные());
	
	// Проверяем тип, интересуют только те типы, которые реализованы на мобильной платформе.
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		
		// Перенос удаления объекта для объектных.
		Данные = Новый УдалениеОбъекта(Данные.Ссылка);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		
		// Очищаем данные.
		Данные.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры // УдалениеДанных()

// Функция создает объект переданного типа.
//
Функция СоздатьОбъектXDTO(ТипОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.1c.ru/SB/MobileExchange", ТипОбъекта));
	
КонецФункции // СоздатьОбъектXDTO()

Функция ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения)
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	Возврат ЗаписьXML;
	
КонецФункции

// Процедура из зарегистрированных данных формирует сообщения обмена и добавляет в очередь сообщений для передачи мобильному клиенту.
//
Процедура ЗаписатьЗарегистрированныеДанныеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, ЭтоНовыйОбмен) Экспорт

	ЗаписьСообщения = Неопределено;
	ЗаписьXML = ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения);
	
	ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
	
	Сч = 0; // Счетчик объектов.
	
	// Запись справочников и документов
	ЗаписатьСправочникиИДокументыВОчередьСообщенийОбмена(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, Сч);
	
	// Запись остатков
	ЗаписатьОстаткиВОчередьСообщенийОбмена(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, Сч);
	
	Если ЭтоНовыйОбмен Тогда
		// Запись ролей.
		ЗаписатьРолиВОчередьСообщенийОбмена(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок,УзелОбмена, НомерСообщенияОчереди, Сч);
		// Запись сведений о компании.
		ЗаписатьСведенияОКомпанииВОчередьСообщенийОбмена(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, Сч);
		// НастройкиНалогооблажения
		ЗаписатьСведенияОНастрокахНалогооблаженияВОчередьСообщенийОбмена(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, Сч);
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	
	ЗаписьСообщения.ЗакончитьЗапись();
	СообщениеОбмена = Новый ХранилищеЗначения(ЗаписьXML.Закрыть());
	НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
	ОбменМобильноеПриложениеПереопределяемый.ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена);

КонецПроцедуры // ЗаписатьВОчередьСообщенийОбменаЗарегистрированныеДанные()

// Процедура получает остатки и добавляет в очередь сообщений для передачи мобильному клиенту.
//
Процедура ЗаписатьСправочникиИДокументыВОчередьСообщенийОбмена(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, Сч) Экспорт
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Сч = Сч + 1;
		Если Сч >= ПолучитьКоличествоОбъектовВПакете() Тогда
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
			ЗаписьСообщения.ЗакончитьЗапись();
			СообщениеОбмена = Новый ХранилищеЗначения(ЗаписьXML.Закрыть());
			НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
			ОбменМобильноеПриложениеПереопределяемый.ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена);
			
			ЗаписьXML = ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения);
			ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
			
			Сч = 0;
			
		КонецЕсли;
		
		Данные = ВыборкаИзменений.Получить();
		
		// Если перенос данных не нужен, то, возможно, необходимо записать удаление данных.
		Если НЕ ОбменМобильноеПриложениеПереопределяемый.НуженПереносДанных(Данные, УзелОбмена) Тогда
			
			// Получаем значение с возможным удалением данных.
			УдалениеДанных(Данные);
			
		КонецЕсли;
		
		ОбменМобильноеПриложениеПереопределяемый.ЗаписатьДанные(ВозвращаемыйСписок, Данные, Сч);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьОстаткиВОчередьСообщенийОбмена()

// Процедура получает остатки и добавляет в очередь сообщений для передачи мобильному клиенту.
//
Процедура ЗаписатьОстаткиВОчередьСообщенийОбмена(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, Сч) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗапасыОстатки.Номенклатура,
		|	ЗапасыОстатки.КоличествоОстаток,
		|	ЗапасыОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки КАК ЗапасыОстатки
		|ГДЕ
		|	ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|	И ЗапасыОстатки.КоличествоОстаток > 0"
	);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаОстатков = Результат.Выбрать();
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Remains");
	
	Пока ВыборкаОстатков.Следующий() Цикл
		
		Сч = Сч + 1;
		Если Сч >= ПолучитьКоличествоОбъектовВПакете() Тогда
			
			ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
			ЗаписьСообщения.ЗакончитьЗапись();
			
			СообщениеОбмена = Новый ХранилищеЗначения(ЗаписьXML.Закрыть());
			НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
			ОбменМобильноеПриложениеПереопределяемый.ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена);
			
			ЗаписьXML = ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения);
			ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
			ПередаваемыйОбъект = СоздатьОбъектXDTO("Remains");
			
			Сч = 0;
			
		КонецЕсли;
		
		ДобавляемаяСтрокаТип = ПередаваемыйОбъект.Свойства().Получить("Item").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		Если ЗначениеЗаполнено(ВыборкаОстатков.Номенклатура) Тогда
			КоличествоОбъектов = 0;
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(ВыборкаОстатков.Номенклатура.ПолучитьОбъект(), КоличествоОбъектов);
		Конецесли;
		ДобавляемаяСтрока.Quantity = ВыборкаОстатков.КоличествоОстаток;
		ДобавляемаяСтрока.Total = ВыборкаОстатков.СуммаОстаток;
		ПередаваемыйОбъект.Item.Добавить(ДобавляемаяСтрока);
		
	КонецЦикла;
	
	ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
	
КонецПроцедуры // ЗаписатьОстаткиВОчередьСообщенийОбмена()

// Записывает роли.
//
Процедура ЗаписатьРолиВОчередьСообщенийОбмена(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, Сч) Экспорт
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Roles");
	
	ЭтоВерсияСПроизводством = ЭтоВерсияСПроизводством(УзелОбмена);
	
	Для каждого ТекРоль Из УзелОбмена.Роли Цикл
		
		Если (ТекРоль.Роль = Перечисления.РолиМобильногоПриложения.ПроизводствоПросмотрИРедактирование
			ИЛИ ТекРоль.Роль = Перечисления.РолиМобильногоПриложения.ПроизводствоТолькоПросмотр)
			И НЕ ЭтоВерсияСПроизводством Тогда
			Продолжить;
		КонецЕсли;
		
		Сч = Сч + 1;
		Если Сч >= ПолучитьКоличествоОбъектовВПакете() Тогда
			
			ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
			ЗаписьСообщения.ЗакончитьЗапись();
			
			СообщениеОбмена = Новый ХранилищеЗначения(ЗаписьXML.Закрыть());
			НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
			ОбменМобильноеПриложениеПереопределяемый.ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена);
			
			ЗаписьXML = ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения);
			ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
			ПередаваемыйОбъект = СоздатьОбъектXDTO("Roles");
			
			Сч = 0;
			
		КонецЕсли;
		
		ДобавляемаяСтрокаТип = ПередаваемыйОбъект.Свойства().Получить("role").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		ДобавляемаяСтрока.name = Строка(ТекРоль.Роль);
		ПередаваемыйОбъект.Role.Добавить(ДобавляемаяСтрока);
		
	КонецЦикла;
	
	ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
	
КонецПроцедуры // ЗаписатьРолиВОчередьСообщенийОбмена()

// Сведения о компании.
//
Процедура ЗаписатьСведенияОКомпанииВОчередьСообщенийОбмена(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, Сч) Экспорт
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Company");
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Пользователь,
			"ОсновнаяОрганизация"
		);
	Организация = ?(ЗначениеЗаполнено(ОсновнаяОрганизация), ОсновнаяОрганизация, Справочники.Организации.ОсновнаяОрганизация);
	
	ПередаваемыйОбъект.name = Организация.Наименование;
	
	Сч = Сч + 1;
	ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
	
КонецПроцедуры // ЗаписатьСведенияОКомпанииВОчередьСообщенийОбмена()

Процедура ЗаписатьСведенияОНастрокахНалогооблаженияВОчередьСообщенийОбмена(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, Сч) Экспорт

	ПередаваемыйОбъект = СоздатьОбъектXDTO("TaxSettings");
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Пользователь,
			"ОсновнаяОрганизация"
		);
	Организация = ?(ЗначениеЗаполнено(ОсновнаяОрганизация), ОсновнаяОрганизация, Справочники.Организации.ОсновнаяОрганизация);
	
	ПередаваемыйОбъект.IsLLC = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
	
	Срез = РегистрыСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Новый Структура("Организация", Организация));
	Если Срез.Количество() = 0 Тогда
		ПередаваемыйОбъект.IsEmployer = ЛОЖЬ;
		ПередаваемыйОбъект.IsFilingTaxReporting = ЛОЖЬ;
		ПередаваемыйОбъект.IsPayerUSN = ЛОЖЬ;
		ПередаваемыйОбъект.IsPayerENVD = ЛОЖЬ;
		ПередаваемыйОбъект.IsPayerShoppingTax = ЛОЖЬ;
		ПередаваемыйОбъект.IsRetailSaleOfAlcohol = ЛОЖЬ;
	Иначе
		Срез = Срез[0];
		ПередаваемыйОбъект.IsEmployer = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников");
		ПередаваемыйОбъект.IsFilingTaxReporting = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИспользуетсяОтчетность");
		ПередаваемыйОбъект.IsPayerUSN = Срез.ПлательщикУСН;
		ПередаваемыйОбъект.IsPayerENVD = Срез.ПлательщикЕНВД;
		ПередаваемыйОбъект.IsPayerShoppingTax = Срез.ПлательщикТорговыйСбор;
		ПередаваемыйОбъект.IsRetailSaleOfAlcohol = Срез.РозничнаяПродажаАлкоголя;
	КонецЕсли;
	
	Сч = Сч + 1;
	ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
	
КонецПроцедуры // ЗаписатьСведенияОКомпанииВОчередьСообщенийОбмена()

// Процедура проверяет порядок следования сообщений в очереди, после номера последнего успешно принятого сообщения.
Процедура ПроверитьОчередьСообщенийОбмена(УзелОбмена, Знач НомерПринятого) Экспорт

	НомерСообщенияОчереди = НомерПринятого + 1;
	
	Отбор = Новый Структура("МобильныйКлиент", УзелОбмена);
	Порядок = "НомерСообщения Возр";
	ВыборкаСообщенийОбмена = РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.Выбрать(Отбор, Порядок);
	
	Пока ВыборкаСообщенийОбмена.Следующий() Цикл
		
		Если ВыборкаСообщенийОбмена.НомерСообщения < НомерСообщенияОчереди Тогда
			
			Продолжить;
			
		ИначеЕсли ВыборкаСообщенийОбмена.НомерСообщения > НомерСообщенияОчереди Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обмен с мобильным клиентом.Проверка очереди сообщений обмена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ВыборкаСообщенийОбмена.МобильныйКлиент,
				НСтр("ru = 'Нарушен порядок следования сообщений обмена.'"));
				
			// Обнуляем счетчики принятых и отправленных сообщений для перерегистрации и отправки всех данных при следующем обмене.
			ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена);
			
			ВызватьИсключение(НСтр("ru='Не удалось выполнить отправку данных. Подробности см. в Журнале регистрации информационной базы.'"));
			
		КонецЕсли;
		
		НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
	КонецЦикла;

КонецПроцедуры

// Процедура рассчитывает сумму в строке табличной части.
//
Процедура РассчитатьСуммыВСтрокеТабличнойЧасти(Объект, НоваяСтрока)
	
	Если Объект.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда
		НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
	Иначе
		НоваяСтрока.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
	НоваяСтрока.СуммаНДС = ?(
		Объект.СуммаВключаетНДС,
		НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
		НоваяСтрока.Сумма * СтавкаНДС / 100
	);
	НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАГРУЗКИ

// Функция получает статус задания формирования очереди сообщений для мобильного клиента.
//
Функция ОчередьСообщенийСформирована(ИдентификаторЗадания, ЕстьОшибки, СообщениеОбОшибке = "") Экспорт

	ЗаписьЖурналаРегистрации("Отладка", УровеньЖурналаРегистрации.Информация,,, "Идентификатор задания " + Строка(ИдентификаторЗадания));
	Попытка
		ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
		Возврат ЗаданиеВыполнено;
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЕстьОшибки = Истина;
		ЗаписьЖурналаРегистрации("Отладка", УровеньЖурналаРегистрации.Ошибка,,, "Идентификатор задания " + Строка(ИдентификаторЗадания));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ЗаданиеФормированияОчередиЗавершеноУспешно()

// Получает для мобильного клиента сообщение обмена по номеру сообщения.
//
Функция ПолучитьСообщениеОбменаПоНомеру(УзелОбмена, НомерСообщенияОбмена) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.СообщениеОбмена
	|ИЗ
	|	РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
	|ГДЕ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
	|	И ОчередиСообщенийОбменаСМобильнымиКлиентами.НомерСообщения = &НомерСообщения";
	
	Запрос.УстановитьПараметр("МобильныйКлиент", УзелОбмена);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщенияОбмена);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СообщениеОбмена;

КонецФункции // ПолучитьСообщениеОбменаПоНомеру()

// Процедура загружает объекты в информационную базу.
//
Процедура ЗагрузитьОбъекты(УзелОбмена, Объекты, ЭтоНовыйОбмен) Экспорт
	
	ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
	ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
	ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
	
	НачатьТранзакцию();
	
	Если Объекты <> Неопределено Тогда
		Для каждого ОбъектXDTO Из Объекты.objects Цикл
			Если ОбъектXDTO.Тип().Имя = "CatContractors" Тогда
				НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "CatItems" Тогда
				НайтиСоздатьНоменклатура(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "CashFlowItems" Тогда
				НайтиСоздатьСтатьяДДС(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocOrders" Тогда
				НайтиСоздатьЗаказПокупателя(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocInvoice" Тогда
				НайтиСоздатьРасходнаяНакладная(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocPurshareInvoice" Тогда
				НайтиСоздатьПриходнаяНакладная(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocIncomingPayment" Тогда
				НайтиСоздатьПоступлениеВКассу(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocOutgoingPayment" Тогда
				НайтиСоздатьРасходИзКассы(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocProduction" Тогда
				НайтиСоздатьСборкаЗапасов(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Prices" Тогда
				ЗагрузитьЦены(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "ObjectDeletion" Тогда
				ПометитьОбъектНаУдаление(УзелОбмена, ОбъектXDTO);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ВыполнитьОтложенноеПроведениеДокументов(УзелОбмена, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры // ЗагрузитьОбъекты()

// Функция находит/создает контрагента.
//
Функция НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.Контрагенты.ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Если ОбъектXDTO.ThisIsGroup Тогда
			Объект = Справочники.Контрагенты.СоздатьГруппу();
		Иначе
			Объект = Справочники.Контрагенты.СоздатьЭлемент();
			Объект.Покупатель = Истина;
			Объект.Поставщик = Истина;
			Объект.ПрочиеОтношения = Истина;
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйКод();
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйОбмен И НЕ ЭтоНовый Тогда
		Возврат Объект.Ссылка;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	Если Объект.Наименование <> ОбъектXDTO.Name Тогда
		Объект.Наименование = ОбъектXDTO.Name;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Родитель = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Group, ЭтоНовыйОбмен);
	Если Объект.Родитель <> Родитель Тогда
		Объект.Родитель = Родитель;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Объект.Комментарий <> ОбъектXDTO.AdditionalInfo
		И НЕ Объект.ЭтоГруппа Тогда
		Объект.Комментарий = ОбъектXDTO.AdditionalInfo;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ Объект.ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
			Объект.НаименованиеПолное = Объект.Наименование;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВидКонтрагента) Тогда
			Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			ОсновнойОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				Пользователи.ТекущийПользователь(),
				"ОсновнойОтветственный"
			);
			Объект.Ответственный = ОсновнойОтветственный;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСПокупателем) Тогда
			Объект.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаАвансовПокупателя) Тогда
			Объект.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСПоставщиком) Тогда
			Объект.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаАвансовПоставщику) Тогда
			Объект.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если ЭтоНовый Тогда
			Если ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда // это старый вариант
				Объект.ВестиРасчетыПоДоговорам = Ложь;
				Объект.ВестиРасчетыПоДокументам = Ложь;
				Объект.ВестиРасчетыПоЗаказам = Истина;
				Объект.ВестиУчетОплатыПоСчетам = Истина;
			Иначе
				Объект.ВестиРасчетыПоДоговорам = Истина;
				Объект.ВестиРасчетыПоДокументам = Истина;
				Объект.ВестиРасчетыПоЗаказам = Истина;
				Объект.ВестиУчетОплатыПоСчетам = Истина;
			КонецЕсли;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектXDTO.Adress) Тогда
			НайденаСтрокаАдреса = Ложь;
			Для каждого ТекСтрока Из Объект.КонтактнаяИнформация Цикл
				Если ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
				   И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
					НайденаСтрокаАдреса = Истина;
					Если ТекСтрока.Представление <> ОбъектXDTO.Adress Тогда
						ТекСтрока.Представление = ОбъектXDTO.Adress;
						НужноЗаписыватьОбъект = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НайденаСтрокаАдреса Тогда
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				НоваяСтрока.Представление = ОбъектXDTO.Adress;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектXDTO.Tel) Тогда
			НайденаСтрока = Ложь;
			Для каждого ТекСтрока Из Объект.КонтактнаяИнформация Цикл
				Если ТекСтрока.Тип =  Перечисления.ТипыКонтактнойИнформации.Телефон
				   И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
					НайденаСтрока = Истина;
					Если ТекСтрока.Представление <> ОбъектXDTO.Tel Тогда
						ТекСтрока.Представление = ОбъектXDTO.Tel;
						НужноЗаписыватьОбъект = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НайденаСтрока Тогда
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				НоваяСтрока.Представление = ОбъектXDTO.Tel;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектXDTO.Email) Тогда
			НайденаСтрока = Ложь;
			Для каждого ТекСтрока Из Объект.КонтактнаяИнформация Цикл
				Если ТекСтрока.Тип =  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
				   И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
					НайденаСтрока = Истина;
					Если ТекСтрока.Представление <> ОбъектXDTO.Email Тогда
						ТекСтрока.Представление = ОбъектXDTO.Email;
						НужноЗаписыватьОбъект = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НайденаСтрока Тогда
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
				НоваяСтрока.Представление = ОбъектXDTO.Email;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НужноЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark, Ложь);
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьКонтрагенты()

// Функция находит/создает номенклатуру.
//
Функция НайтиСоздатьНоменклатура(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Если ОбъектXDTO.ThisIsGroup Тогда
			Объект = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			Объект = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйКод();
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйОбмен И НЕ ЭтоНовый Тогда
		Возврат Объект.Ссылка;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	Если Объект.Наименование <> ОбъектXDTO.Name Тогда
		Объект.Наименование = ОбъектXDTO.Name;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Объект.Артикул <> ОбъектXDTO.Article
		И НЕ Объект.ЭтоГруппа Тогда
		Объект.Артикул = ОбъектXDTO.Article;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Родитель = НайтиСоздатьНоменклатура(УзелОбмена, ОбъектXDTO.Group, ЭтоНовыйОбмен);
	Если Объект.Родитель <> Родитель Тогда
		Объект.Родитель = Родитель;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Поставщик = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Supplier, ЭтоНовыйОбмен);
	Если Объект.Поставщик <> Поставщик
		И НЕ Объект.ЭтоГруппа Тогда
		Объект.Поставщик = Поставщик;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Объект.ТипНоменклатуры <> НайтиТипыНоменклатуры(ОбъектXDTO.TypeItem)
		И НЕ Объект.ЭтоГруппа Тогда
		Объект.ТипНоменклатуры = НайтиТипыНоменклатуры(ОбъектXDTO.TypeItem);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если ОбъектXDTO.Свойства().Получить("Image") <> Неопределено
		И ЗначениеЗаполнено(ОбъектXDTO.Image) Тогда
		Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
			ПрисоединенныеФайлыСлужебный.ОбновитьДвоичныеДанныеФайлаНаСервере(Объект.ФайлКартинки, ПоместитьВоВременноеХранилище(ОбъектXDTO.Image));
		Иначе
			АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ОбъектXDTO.Image);
			ПрисоединенныйФайл = ПрисоединенныеФайлыСлужебныйВызовСервера.ДобавитьФайл(
				Объект.Ссылка,
				"cover",
				"jpg",
				,
				,
				АдресВременногоХранилищаФайла,
			"");
			Объект.ФайлКартинки = ПрисоединенныйФайл;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если ОбъектXDTO.Свойства().Получить("BarCode") <> Неопределено Тогда
		НайтиСоздатьШтрихкодНоменклатуры(Объект.Ссылка, ОбъектXDTO.BarCode);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ Объект.ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СрокПополнения) Тогда
			Объект.СрокПополнения = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаЗапасов) Тогда
			Объект.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаЗатрат) Тогда
			Объект.СчетУчетаЗатрат = ПланыСчетов.Управленческий.КоммерческиеРасходы;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
			Объект.НаименованиеПолное = Объект.Наименование;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
			Объект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
			Объект.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.МетодОценки) Тогда
			Объект.МетодОценки = Перечисления.МетодОценкиЗапасов.ПоСредней;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СпособПополнения) Тогда
			Объект.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	СтавкиНДС.Ссылка
				|ИЗ
				|	Справочник.СтавкиНДС КАК СтавкиНДС
				|ГДЕ
				|	СтавкиНДС.Ставка = 18
				|	И НЕ СтавкиНДС.Расчетная"
			);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Объект.СтавкаНДС = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НужноЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark, Ложь);
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьНоменклатура()

// Функция находит/создает статьи ДДС.
//
Функция НайтиСоздатьСтатьяДДС(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
	Если ОбъектXDTO.Predefined Тогда
		Если ОбъектXDTO.PredefinedCode = "000000001" Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		ИначеЕсли ОбъектXDTO.PredefinedCode = "000000002" Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		ИначеЕсли ОбъектXDTO.PredefinedCode = "000000003" Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		КонецЕсли;
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Если ОбъектXDTO.ThisIsGroup Тогда
			Объект = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьГруппу();
		Иначе
			Объект = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйКод();
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Если (НЕ ЭтоНовыйОбмен И НЕ ЭтоНовый)
		ИЛИ Объект.Предопределенный Тогда
		Возврат Объект.Ссылка;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	Если Объект.Наименование <> ОбъектXDTO.Name Тогда
		Объект.Наименование = ОбъектXDTO.Name;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Родитель = НайтиСоздатьСтатьяДДС(УзелОбмена, ОбъектXDTO.Group, ЭтоНовыйОбмен);
	Если Объект.Родитель <> Родитель Тогда
		Объект.Родитель = Родитель;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
		
	Если НужноЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark, Ложь);
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьСтатьяДДС()

// Процедура находит/создает штрихкод номенклатуры.
//
Процедура НайтиСоздатьШтрихкодНоменклатуры(Номенклатура, Штрихкод)
	
	ШтрихкодНоменклатуры = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодПоНоменклатуре(Номенклатура);
	
	Если Штрихкод = ШтрихкодНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШтрихкодНоменклатуры) Тогда
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Штрихкод.Установить(ШтрихкодНоменклатуры);
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Штрихкод.Установить(Штрихкод);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Штрихкод = Штрихкод;
		НоваяЗапись.Номенклатура = Номенклатура;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры // НайтиСоздатьШтрихкодНоменклатуры()

// Процедура заполняет основные реквизиты документа.
//
Процедура ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект)
	
	Если Объект.Дата <> ОбъектXDTO.Date Тогда
		Объект.Дата = ОбъектXDTO.Date;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.СборкаЗапасов")
		И Объект.СуммаДокумента <> ОбъектXDTO.Total Тогда
		Объект.СуммаДокумента = ОбъектXDTO.Total;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		Объект.Автор = Пользователи.ТекущийПользователь();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнаяОрганизация"
		);
		Объект.Организация = ?(ЗначениеЗаполнено(ОсновнаяОрганизация), ОсновнаяОрганизация, Справочники.Организации.ОсновнаяОрганизация);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.СборкаЗапасов")
		И НЕ ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
		Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, , Объект.Дата);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОсновныеРеквизитыДокумента()

// Процедура записывает документ в информацилнную базу.
//
Процедура ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения)
	
	Если НужноЗаписыватьОбъект Тогда
		
		Объект.ПометкаУдаления = ОбъектXDTO.DeletionMark;
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если Не ОбъектXDTO.Posted Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
		
		Если Объект.ПометкаУдаления
			И (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
			
			Объект.ПометкаУдаления = Ложь;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
			
			Объект.УстановитьНовыйНомер();
			
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Попытка
			
			Если Не Объект.Проведен Тогда
				Объект.Записать();
			Иначе
				// отменяем проведение документа
				Объект.Проведен = Ложь;
				Объект.Записать();
				УдалитьДвиженияУДокумента(Объект);
			КонецЕсли;
			
		Исключение
			
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Если ДокументыДляОтложенногоПроведения.Найти(Объект.Ссылка, "ДокументСсылка") = Неопределено Тогда
				СтрокаТаблицы = ДокументыДляОтложенногоПроведения.Добавить();
				СтрокаТаблицы.ДокументСсылка = Объект.Ссылка;
				СтрокаТаблицы.ДокументТип = Объект.Метаданные().Имя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДокумент()

// Функция создает новый документ в информационной базе.
//
Функция СоздатьДокумент(ИмяДокумента, ОбъектXDTO)
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Документы[ИмяДокумента].ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы[ИмяДокумента].СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции // СоздатьДокумент()

Функция ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, ТабЧасть)
	
	ПрерватьЗаполнение = Ложь;
	КолонкиТабЧасти= Объект[ТабЧасть].ВыгрузитьКолонки().Колонки;
	
	Для каждого ТекСтрока Из Объект[ТабЧасть] Цикл
		Если ТекСтрока.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас
			И ТекСтрока.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("Характеристика") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.Характеристика)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("Партия") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.Партия)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("СерийныеНомера") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.СерийныеНомера)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("Резерв") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.Резерв)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("РезервОтгрузка") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.РезервОтгрузка)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("Спецификация") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.Спецификация)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("ПроцентАвтоматическойСкидки") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.ПроцентАвтоматическойСкидки)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("СуммаАвтоматическойСкидки") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.СуммаАвтоматическойСкидки)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("СправкаБ") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.СправкаБ)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("НомерГТД") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.НомерГТД)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("ЗаказПоставщику") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.ЗаказПоставщику)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("СтруктурнаяЕдиница") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.СтруктурнаяЕдиница)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("НаправлениеДеятельности") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.НаправлениеДеятельности)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ПрерватьЗаполнение;
	
КонецФункции

// Функция находит / создает заказ покупателя.
//
Функция НайтиСоздатьЗаказПокупателя(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("ЗаказПокупателя", ОбъектXDTO);
	
	Если НЕ Объект.ЭтоНовый() Тогда // Чтобы не испортить данные не перезаполняем документ.
		ПрерватьЗаполнение = ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Запасы");
		Если ПрерватьЗаполнение Тогда
			Возврат Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойОтветственный"
		);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Контрагент = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Buyer, ЭтоНовыйОбмен);
	Если Объект.Контрагент <> Контрагент Тогда
		Объект.Контрагент = Контрагент;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(
			Объект.Ссылка,
			Объект.Контрагент,
			Объект.Организация,
			Объект.ВидОперации
		);
		Если НЕ ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
			ДоговорПоУмолчанию = СоздатьДоговорПоУмолчанию(Объект.Контрагент, Объект.Организация, Перечисления.ВидыДоговоров.СПокупателем);
		КонецЕсли;
		Объект.Договор = ДоговорПоУмолчанию;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КурсыВалютСрезПоследних.Курс,
			|	КурсыВалютСрезПоследних.Кратность
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних"
		);
		Запрос.УстановитьПараметр("Период", Объект.Дата);
		Запрос.УстановитьПараметр("Валюта", Объект.Договор.ВалютаРасчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Курс = Выборка.Курс;
			Объект.Кратность = Выборка.Кратность;
		Иначе
			Объект.Курс = 1;
			Объект.Кратность = 1;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
		Объект.ДатаОтгрузки = Объект.Дата;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЗаказа) Тогда
		Объект.ВидЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьВидЗаказаПокупателя();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.СостояниеЗаказа <> НайтиСостоянияЗаказовПокупателей(ОбъектXDTO.OrderStatus, Объект.ВидЗаказа) Тогда
		Объект.СостояниеЗаказа = НайтиСостоянияЗаказовПокупателей(ОбъектXDTO.OrderStatus, Объект.ВидЗаказа);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродажи) Тогда
		Объект.СтруктурнаяЕдиницаПродажи = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновноеПодразделение"
		);
		Объект.СтруктурнаяЕдиницаПродажи = ?(ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродажи), Объект.СтруктурнаяЕдиницаПродажи, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		Объект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойВидЦенПродажи"
		);
		Объект.ВидЦен = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен, Объект.Договор.ВидЦен);
		Объект.ВидЦен = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен, Справочники.ВидыЦен.Оптовая);
		Объект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен.ЦенаВключаетНДС, Истина);
		
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ПоложениеДатыОтгрузкиВЗаказеПокупателя");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если Объект.ПоложениеДатыОтгрузки <> ЗначениеНастройки Тогда
				Объект.ПоложениеДатыОтгрузки = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Объект.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() > 0 Тогда
		Объект.Запасы.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Items <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Items.Item Цикл
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока.ТипНоменклатурыЗапас = НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Цена = ТекСтрока.Price;
			НоваяСтрока.Количество = ТекСтрока.Quantity;
			НоваяСтрока.Сумма = ТекСтрока.Total;
			НоваяСтрока.ДатаОтгрузки = Объект.Дата;
			РассчитатьСуммыВСтрокеТабличнойЧасти(Объект, НоваяСтрока);
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьЗаказПокупателя()

// Функция находит / создает заказ расход из кассы.
//
Функция НайтиСоздатьРасходИзКассы(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.РасходИзКассы.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("РасходИзКассы", ОбъектXDTO);
	
	НужноЗаписыватьОбъект = Ложь;
	
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Объект.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = Объект.Организация.КассаПоУмолчанию;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
		
	Контрагент = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Contractor, ЭтоНовыйОбмен);
	
	Если Объект.Контрагент <> Контрагент
	 ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
		Иначе
			Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы;
			Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
		
	Если Объект.Контрагент <> Контрагент Тогда
		Объект.Контрагент = Контрагент;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ПриходнаяНакладная = НайтиСоздатьПриходнаяНакладная(УзелОбмена, ОбъектXDTO.PurshareInvoice, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
	Если Объект.ДокументОснование <> ПриходнаяНакладная Тогда
		Объект.ДокументОснование = ПриходнаяНакладная;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	НужноЗаписыватьОбъект = Истина;
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(
		Объект.Ссылка,
		Объект.Контрагент,
		Объект.Организация,
		Объект.ВидОперации
	);
	Если НЕ ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
		ДоговорПоУмолчанию = СоздатьДоговорПоУмолчанию(Объект.Контрагент, Объект.Организация, Перечисления.ВидыДоговоров.СПоставщиком);
	КонецЕсли;
	НоваяСтрока.Договор = ДоговорПоУмолчанию;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта В (&Валюты)) КАК КурсыВалютСрезПоследних"
	);
	МасивВалют = Новый Массив();
	МасивВалют.Добавить(ДоговорПоУмолчанию.ВалютаРасчетов);
	МасивВалют.Добавить(Объект.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Валюты", МасивВалют);
	ТаблицаВалют = Запрос.Выполнить().Выгрузить();
	ВалютаРасчетов = ТаблицаВалют.Найти(ДоговорПоУмолчанию.ВалютаРасчетов, "Валюта");
	ВалютаДенежныхСредств = ТаблицаВалют.Найти(Объект.ВалютаДенежныхСредств, "Валюта");
	
	Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
		НоваяСтрока.Курс = ВалютаРасчетов.Курс;
		НоваяСтрока.Кратность = ВалютаРасчетов.Кратность;
	Иначе
		НоваяСтрока.Курс = 1;
		НоваяСтрока.Кратность = 1;
	КонецЕсли;
	
	НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
	Если ЗначениеЗаполнено(ПриходнаяНакладная) Тогда
		НоваяСтрока.Документ = ПриходнаяНакладная;
	Иначе
		НоваяСтрока.ПризнакАванса = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
		НоваяСтрока.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаПлатежа,
			ВалютаДенежныхСредств.Курс,
			НоваяСтрока.Курс,
			ВалютаДенежныхСредств.Кратность,
			НоваяСтрока.Кратность
		);
	Иначе
		НоваяСтрока.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаПлатежа,
			1,
			НоваяСтрока.Курс,
			1,
			НоваяСтрока.Кратность
		);
	КонецЕсли;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Объект.Организация.СтавкаНДСПоУмолчанию; 
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	
	НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
	НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((НоваяСтрока.СтавкаНДС.Ставка + 100) / 100);
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("CashFlowItem") <> Неопределено Тогда
		Статья = НайтиСоздатьСтатьяДДС(УзелОбмена, ОбъектXDTO.CashFlowItem, ЭтоНовыйОбмен);
		Если Объект.Статья <> Статья Тогда
			Объект.Статья = Статья;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Статья) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер заказа в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьРасходИзКассы()

// Функция находит / создает поступление в кассу.
//
Функция НайтиСоздатьПоступлениеВКассу(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ПоступлениеВКассу.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("ПоступлениеВКассу", ОбъектXDTO);
	
	НужноЗаписыватьОбъект = Ложь;
	
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Объект.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = Объект.Организация.КассаПоУмолчанию;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Контрагент = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Contractor, ЭтоНовыйОбмен);
	
	Если Объект.Контрагент <> Контрагент
	 ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
		Иначе
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее;
			Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеДоходы;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Контрагент <> Контрагент Тогда
		Объект.Контрагент = Контрагент;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПринятоОт) Тогда
		Объект.ПринятоОт = Объект.Контрагент.НаименованиеПолное;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	РасходнаяНакладная = НайтиСоздатьРасходнаяНакладная(УзелОбмена, ОбъектXDTO.Invoice, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
	ЗаказПокупателя = НайтиСоздатьЗаказПокупателя(УзелОбмена, ОбъектXDTO.Order, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
	
	ДокументОснование = Неопределено;
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		ДокументОснование = ЗаказПокупателя;
	ИначеЕсли ЗначениеЗаполнено(РасходнаяНакладная) Тогда
		ДокументОснование = РасходнаяНакладная;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		// В мобильном клиенте удалить или поменять заказ нельзя, по этому заполнение происходит только чистого документа основания.
		Объект.ДокументОснование = ДокументОснование;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	НужноЗаписыватьОбъект = Истина;
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(
		Объект.Ссылка,
		Объект.Контрагент,
		Объект.Организация,
		Объект.ВидОперации
	);
	Если НЕ ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
		ДоговорПоУмолчанию = СоздатьДоговорПоУмолчанию(Объект.Контрагент, Объект.Организация, Перечисления.ВидыДоговоров.СПокупателем);
	КонецЕсли;
	НоваяСтрока.Договор = ДоговорПоУмолчанию;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта В (&Валюты)) КАК КурсыВалютСрезПоследних"
	);
	МасивВалют = Новый Массив();
	МасивВалют.Добавить(ДоговорПоУмолчанию.ВалютаРасчетов);
	МасивВалют.Добавить(Объект.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Валюты", МасивВалют);
	ТаблицаВалют = Запрос.Выполнить().Выгрузить();
	ВалютаРасчетов = ТаблицаВалют.Найти(ДоговорПоУмолчанию.ВалютаРасчетов, "Валюта");
	ВалютаДенежныхСредств = ТаблицаВалют.Найти(Объект.ВалютаДенежныхСредств, "Валюта");
	
	Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
		НоваяСтрока.Курс = ВалютаРасчетов.Курс;
		НоваяСтрока.Кратность = ВалютаРасчетов.Кратность;
	Иначе
		НоваяСтрока.Курс = 1;
		НоваяСтрока.Кратность = 1;
	КонецЕсли;
	
	НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
	Если ЗначениеЗаполнено(РасходнаяНакладная) Тогда
		НоваяСтрока.Документ = РасходнаяНакладная;
	Иначе
		НоваяСтрока.ПризнакАванса = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		НоваяСтрока.Заказ = ЗаказПокупателя;
	Иначе
		НоваяСтрока.Заказ = Объект.ДокументОснование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
		НоваяСтрока.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаПлатежа,
			ВалютаДенежныхСредств.Курс,
			НоваяСтрока.Курс,
			ВалютаДенежныхСредств.Кратность,
			НоваяСтрока.Кратность
		);
	Иначе
		НоваяСтрока.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаПлатежа,
			1,
			НоваяСтрока.Курс,
			1,
			НоваяСтрока.Кратность
		);
	КонецЕсли;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Объект.Организация.СтавкаНДСПоУмолчанию; 
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	
	НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
	НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((НоваяСтрока.СтавкаНДС.Ставка + 100) / 100);
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("CashFlowItem") <> Неопределено Тогда
		Статья = НайтиСоздатьСтатьяДДС(УзелОбмена, ОбъектXDTO.CashFlowItem, ЭтоНовыйОбмен);
		Если Объект.Статья <> Статья Тогда
			Объект.Статья = Статья;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Статья) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьПоступлениеВКассу()

// Функция находит / создает расходную накладную.
//
Функция НайтиСоздатьРасходнаяНакладная(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.РасходнаяНакладная.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("РасходнаяНакладная", ОбъектXDTO);
	
	Если НЕ Объект.ЭтоНовый() Тогда // Чтобы не испортить данные не перезаполняем документ.
		ПрерватьЗаполнение = ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Запасы");
		Если ПрерватьЗаполнение Тогда
			Возврат Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойОтветственный"
		);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Контрагент = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Buyer, ЭтоНовыйОбмен);
	Если Объект.Контрагент <> Контрагент Тогда
		Объект.Контрагент = Контрагент;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(
			Объект.Ссылка,
			Объект.Контрагент,
			Объект.Организация,
			Объект.ВидОперации
		);
		Если НЕ ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
			ДоговорПоУмолчанию = СоздатьДоговорПоУмолчанию(Объект.Контрагент, Объект.Организация, Перечисления.ВидыДоговоров.СПокупателем);
		КонецЕсли;
		Объект.Договор = ДоговорПоУмолчанию;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КурсыВалютСрезПоследних.Курс,
			|	КурсыВалютСрезПоследних.Кратность
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних"
		);
		Запрос.УстановитьПараметр("Период", Объект.Дата);
		Запрос.УстановитьПараметр("Валюта", Объект.Договор.ВалютаРасчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Курс = Выборка.Курс;
			Объект.Кратность = Выборка.Кратность;
		Иначе
			Объект.Курс = 1;
			Объект.Кратность = 1;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновноеПодразделение"
		);
		Объект.Подразделение = ?(ЗначениеЗаполнено(Объект.Подразделение), Объект.Подразделение, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Объект.СтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойСклад"
		);
		Объект.СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница), Объект.СтруктурнаяЕдиница, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		Объект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойВидЦенПродажи"
		);
		Объект.ВидЦен = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен, Объект.Договор.ВидЦен);
		Объект.ВидЦен = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен, Справочники.ВидыЦен.Оптовая);
		Объект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен.ЦенаВключаетНДС, Истина);
		
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ПоложениеЗаказаПокупателяВДокументахОтгрузки");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если Объект.ПоложениеЗаказаПокупателя <> ЗначениеНастройки Тогда
				Объект.ПоложениеЗаказаПокупателя = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Объект.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаказПокупателя = НайтиСоздатьЗаказПокупателя(УзелОбмена, ОбъектXDTO.Order, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
	Если Объект.ДокументОснование <> ЗаказПокупателя Тогда
		Объект.ДокументОснование = ЗаказПокупателя;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Объект.Заказ <> ЗаказПокупателя Тогда
		Объект.Заказ = ЗаказПокупателя;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() > 0 Тогда
		Объект.Запасы.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Если ОбъектXDTO.Items <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Items.Item Цикл
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока.ТипНоменклатурыЗапас = НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Цена = ТекСтрока.Price;
			НоваяСтрока.Заказ = ЗаказПокупателя;
			НоваяСтрока.Количество = ТекСтрока.Quantity;
			НоваяСтрока.Сумма = ТекСтрока.Total;
			РассчитатьСуммыВСтрокеТабличнойЧасти(Объект, НоваяСтрока);
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьРасходнаяНакладная()

// Функция находит / создает приходную накладную.
//
Функция НайтиСоздатьПриходнаяНакладная(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("ПриходнаяНакладная", ОбъектXDTO);
	Если НЕ Объект.ЭтоНовый() Тогда // Чтобы не испортить данные не перезаполняем документ.
		ПрерватьЗаполнение = ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Запасы")
			ИЛИ ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Расходы");
		Если ПрерватьЗаполнение Тогда
			Возврат Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойОтветственный"
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Контрагент = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Supplier, ЭтоНовыйОбмен);
	Если Объект.Контрагент <> Контрагент Тогда
		Объект.Контрагент = Контрагент;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(
			Объект.Ссылка,
			Объект.Контрагент,
			Объект.Организация,
			Объект.ВидОперации
		);
		Если НЕ ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
			ДоговорПоУмолчанию = СоздатьДоговорПоУмолчанию(Объект.Контрагент, Объект.Организация, Перечисления.ВидыДоговоров.СПоставщиком);
		КонецЕсли;
		Объект.Договор = ДоговорПоУмолчанию;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КурсыВалютСрезПоследних.Курс,
			|	КурсыВалютСрезПоследних.Кратность
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних"
		);
		Запрос.УстановитьПараметр("Период", Объект.Дата);
		Запрос.УстановитьПараметр("Валюта", Объект.Договор.ВалютаРасчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Курс = Выборка.Курс;
			Объект.Кратность = Выборка.Кратность;
		Иначе
			Объект.Курс = 1;
			Объект.Кратность = 1;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Объект.СтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойСклад"
		);
		Объект.СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница), Объект.СтруктурнаяЕдиница, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		Объект.ВидЦенКонтрагента = Объект.Договор.ВидЦенКонтрагента;
		Объект.ВидЦенКонтрагента = ?(ЗначениеЗаполнено(Объект.ВидЦенКонтрагента), Объект.ВидЦенКонтрагента, Справочники.ВидыЦенКонтрагентов.ВидЦенКонтрагентаПоУмолчанию(Объект.Контрагент));
		Объект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ВидЦенКонтрагента), Объект.ВидЦенКонтрагента.ЦенаВключаетНДС, Истина);
		
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ПоложениеЗаказаПоставщикуВДокументахПоступления");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если Объект.ПоложениеЗаказаПоставщику <> ЗначениеНастройки Тогда
				Объект.ПоложениеЗаказаПоставщику = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Объект.ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() > 0 Тогда
		Объект.Запасы.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Расходы.Количество() > 0 Тогда
		Объект.Расходы.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Items <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Items.Item Цикл
			Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				НоваяСтрока = Объект.Расходы.Добавить();
			Иначе
				НоваяСтрока = Объект.Запасы.Добавить();
			КонецЕсли;
			НоваяСтрока.Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Цена = ТекСтрока.Price;
			НоваяСтрока.Количество = ТекСтрока.Quantity;
			НоваяСтрока.Сумма = ТекСтрока.Total;
			РассчитатьСуммыВСтрокеТабличнойЧасти(Объект, НоваяСтрока);
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьПриходнаяНакладная()

// Функция находит / создает сборку запасов.
//
Функция НайтиСоздатьСборкаЗапасов(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.СборкаЗапасов.ПустаяСсылка();
	КонецЕсли;

	Объект = СоздатьДокумент("СборкаЗапасов", ОбъектXDTO);
	Если НЕ Объект.ЭтоНовый() Тогда // Чтобы не испортить данные не перезаполняем документ.
		ПрерватьЗаполнение = ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Продукция")
			ИЛИ ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Запасы");
		Если ПрерватьЗаполнение Тогда
			Возврат Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	СтруктурнаяЕдиницаПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Объект.Автор,
		"ОсновнойСклад"
	);
	СтруктурнаяЕдиницаПоУмолчанию = ?(ЗначениеЗаполнено(СтруктурнаяЕдиницаПоУмолчанию), СтруктурнаяЕдиницаПоУмолчанию, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Объект.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоУмолчанию;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции) Тогда
		Объект.СтруктурнаяЕдиницаПродукции = СтруктурнаяЕдиницаПоУмолчанию;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов) Тогда
		Объект.СтруктурнаяЕдиницаЗапасов = СтруктурнаяЕдиницаПоУмолчанию;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаОтходов) Тогда
		Объект.СтруктурнаяЕдиницаОтходов = СтруктурнаяЕдиницаПоУмолчанию;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Продукция.Количество() > 0 Тогда
		Объект.Продукция.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
		
	Если Объект.Запасы.Количество() > 0 Тогда
		Объект.Запасы.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Products <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Products.Item Цикл
			Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока = Объект.Продукция.Добавить();
			НоваяСтрока.Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрока.Quantity;
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Materials <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Materials.Item Цикл
			Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрока.Quantity;
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьПриходнаяНакладная()

// Функция находит тип номенклатуры.
//
Функция НайтиТипыНоменклатуры(ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если ОбъектXDTO = "Product" Тогда
		Объект = Перечисления.ТипыНоменклатуры.Запас;
	Иначе
		Объект = Перечисления.ТипыНоменклатуры.Услуга;
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции // НайтиТипыНоменклатуры()

// Функция находит состояния заказов покупателей.
//
Функция НайтиСостоянияЗаказовПокупателей(ОбъектXDTO, ВидЗаказа)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.СостоянияЗаказовПокупателей.ПустаяСсылка();
	КонецЕсли;
	
	Если ОбъектXDTO = "Complete" Тогда
		Объект = Справочники.СостоянияЗаказовПокупателей.Завершен;
	Иначе
		Объект = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции // НайтиСостоянияЗаказовПокупателей()

// Функция загружает цены.
//
Функция ЗагрузитьЦены(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователь,
		"ОсновнойВидЦенПродажи"
	);
		
	Если Не ЗначениеЗаполнено(ВидЦен) Тогда
		ВидЦен = Справочники.ВидыЦен.Оптовая;
	КонецЕсли;
		
	Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ОбъектXDTO.Nomenclature, ЭтоНовыйОбмен);
	
	НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ОбъектXDTO.Date);
	НаборЗаписей.Отбор.ВидЦен.Установить(ВидЦен);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.Характеристика.Установить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = ОбъектXDTO.Date;
	НоваяЗапись.ВидЦен = ВидЦен;
	НоваяЗапись.Номенклатура = Номенклатура;
	НоваяЗапись.Цена = ОбъектXDTO.Price;
	НоваяЗапись.Актуальность = Истина;
	НоваяЗапись.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
	НоваяЗапись.Автор = Пользователь;
	
	НаборЗаписей.Записать();
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, НаборЗаписей);
	
КонецФункции // ЗагрузитьЦены()

// Функция помеяает объект на удаление.
//
Функция ПометитьОбъектНаУдаление(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	
	Если ОбъектXDTO.Type = "CatContractors" Тогда
		//Ссылка = Справочники.Контрагенты.ПолучитьСсылку(Идентификатор);
		Возврат Неопределено;
	ИначеЕсли ОбъектXDTO.Type = "CatItems" Тогда
		//Ссылка = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
		Возврат Неопределено;
	ИначеЕсли ОбъектXDTO.Type = "DocOrders" Тогда
		Ссылка = Документы.ЗаказПокупателя.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Type = "DocInvoice" Тогда
		Ссылка = Документы.РасходнаяНакладная.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Type = "DocPurshareInvoice" Тогда
		Ссылка = Документы.ПриходнаяНакладная.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Type = "DocIncomingPayment" Тогда
		Ссылка = Документы.ПоступлениеВКассу.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Type = "DocOutgoingPayment" Тогда
		Ссылка = Документы.РасходИзКассы.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Type = "DocProduction" Тогда
		Ссылка = Документы.СборкаЗапасов.ПолучитьСсылку(Идентификатор);
	КонецЕсли;
	
	Попытка
		Объект = Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(Истина);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	Исключение
	КонецПопытки;
	
КонецФункции // ПометитьОбъектНаУдаление()

// Процедура выполняет проведение документов.
//
Процедура ВыполнитьОтложенноеПроведениеДокументов(УзелОбмена, ДокументыДляОтложенногоПроведения)

	ДокументыДляОтложенногоПроведения.Сортировать("ДокументТип");
	
	Для Каждого СтрокаТаблицы Из ДокументыДляОтложенногоПроведения Цикл
		
		Если СтрокаТаблицы.ДокументСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = СтрокаТаблицы.ДокументСсылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УдалятьРегистрациюИзменений = Не ПланыОбмена.ИзменениеЗарегистрировано(УзелОбмена, Объект);
		Объект.ОбменДанными.Загрузка = Ложь;
		
		Попытка
			
			Объект.ПроверитьЗаполнение();
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
			Если УдалятьРегистрациюИзменений Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры // ВыполнитьОтложенноеПроведениеДокументов()

////////////////////////////////////////////////////////////////////////////////
// ПОДПИСКИ НА СОБЫТИЯ

// Процедура-обработчик события ПриЗаписи документа для механизма регистрации объектов на узлах.
//
Процедура ОбменМобильноеПриложениеПриЗаписиДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивУзловДляРегистрации = Новый Массив;
	
	Выборка = ПланыОбмена.МобильноеПриложение.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
			НужноВыгружать = Ложь;
			Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПокупателя")
			   И Источник.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу
			   И Источник.Проведен Тогда
				НужноВыгружать = Истина;
				Для каждого ТекСтрока Из Источник.Запасы Цикл
					Если ТекСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
						НужноВыгружать = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			Если НЕ ЭтоВерсияСоСтарымОбменом(Выборка.Ссылка) Тогда
				Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеВКассу")
					ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РасходИзКассы") 
					ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходнаяНакладная")
					ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
					НужноВыгружать = Истина;
				Конецесли;
			Конецесли;
			Если ЭтоВерсияСПроизводством(Выборка.Ссылка) Тогда
				Если ТипЗнч(Источник) = Тип("ДокументОбъект.СборкаЗапасов") Тогда
					НужноВыгружать = Истина;
				Конецесли;
			Конецесли;
			Если НужноВыгружать Тогда
				МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУзловДляРегистрации.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, Источник.Ссылка);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ОбменМобильноеПриложениеПриЗаписиДокумента()

// Процедура-обработчик события ПриЗаписи регистров для механизма регистрации объектов на узлах
//
// Параметры:
//  Источник       - НаборЗаписейРегистра - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//  Замещение      - Булево - признак замещения существующего набора записей
// 
Процедура ОбменМобильноеПриложениеПриЗаписиРегистра(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МобильноеПриложение.Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.Ссылка <> &ЭтотУзел";
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.МобильноеПриложение.ЭтотУзел());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ОплатаСчетовИЗаказов")
		ИЛИ ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей")) Тогда
		Если ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ОплатаСчетовИЗаказов") Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ОплатаСчетовИЗаказов.СчетНаОплату КАК Заказ,
				|	ИСТИНА КАК Регистрировать
				|ИЗ
				|	РегистрНакопления.ОплатаСчетовИЗаказов КАК ОплатаСчетовИЗаказов
				|ГДЕ
				|	ОплатаСчетовИЗаказов.Регистратор = &Регистратор
				|	И ОплатаСчетовИЗаказов.СчетНаОплату.ВидОперации = &ВидОперации
				|
				|СГРУППИРОВАТЬ ПО
				|	ОплатаСчетовИЗаказов.СчетНаОплату"
			);
		ИначеЕсли ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей") Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ЗаказыПокупателей.ЗаказПокупателя КАК Заказ,
				|	ИСТИНА КАК Регистрировать
				|ИЗ
				|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
				|ГДЕ
				|	ЗаказыПокупателей.Регистратор = &Регистратор
				|	И ЗаказыПокупателей.ЗаказПокупателя.ВидОперации = &ВидОперации
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗаказыПокупателей.ЗаказПокупателя"
			);
		КонецЕсли;
		Запрос.УстановитьПараметр("Регистратор", Источник.Отбор.Регистратор.Значение);
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу);
		ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
		Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
			ОбъектЗаказ = ТекСтрока.Заказ.ПолучитьОбъект();
			Для каждого СтрокаЗаказа Из ОбъектЗаказ.Запасы Цикл
				Если СтрокаЗаказа.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
					ТекСтрока.Регистрировать = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	МассивУзловДляРегистрации = Новый Массив;
	ВидЦенПродажиПоУмолчанию = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
			Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
				Если Источник.Отбор.ВидЦен.Значение = ВидЦенПродажиПоУмолчанию
					И НЕ ЗначениеЗаполнено(Источник.Отбор.Характеристика.Значение) Тогда
					МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ШтрихкодыНоменклатуры") Тогда
				МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
			Иначе
				Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
					Если ЗначениеЗаполнено(ТекСтрока.Заказ)
					   И ТекСтрока.Регистрировать Тогда
						МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУзловДляРегистрации.Количество() > 0 Тогда
		Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
			Если Источник.Отбор.ВидЦен.Значение = ВидЦенПродажиПоУмолчанию
				И НЕ ЗначениеЗаполнено(Источник.Отбор.Характеристика.Значение) Тогда
				Для каждого ТекЗапись Из Источник Цикл
					НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Период.Установить(ТекЗапись.Период);
					НаборЗаписей.Отбор.Номенклатура.Установить(ТекЗапись.Номенклатура);
					НаборЗаписей.Отбор.ВидЦен.Установить(ТекЗапись.ВидЦен);
					НаборЗаписей.Отбор.Характеристика.Установить(ТекЗапись.Характеристика);
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, НаборЗаписей);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ШтрихкодыНоменклатуры") Тогда
			ТаблицаНоменклатуры = Источник.Выгрузить();
			Для каждого ТекСтрока Из ТаблицаНоменклатуры Цикл
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура)
				   И ТекСтрока.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа
				   И НЕ ЗначениеЗаполнено(ТекСтрока.Характеристика)
				   И НЕ ЗначениеЗаполнено(ТекСтрока.Партия) Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, ТекСтрока.Номенклатура);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
				Если ЗначениеЗаполнено(ТекСтрока.Заказ)
				   И ТекСтрока.Регистрировать Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, ТекСтрока.Заказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ОбменМобильноеПриложениеПередЗаписьюРегистра()

// Процедура-обработчик события ПриЗаписи ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах
//
// Параметры:
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменМобильноеПриложениеПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивУзловДляРегистрации = Новый Массив;
	
	Выборка = ПланыОбмена.МобильноеПриложение.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
			Если ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура")
			   И (Источник.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			   ИЛИ Источник.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга) Тогда
				МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУзловДляРегистрации.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, Источник.Ссылка);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция получает договор по умолчанию.
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции // ПолучитьДоговорПоУмолчанию()

// Функция создает новый договор по умолчанию.
//
Функция СоздатьДоговорПоУмолчанию(Контрагент, Организация, ВидДоговора)
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	НовыйДоговор.Наименование = Нстр("ru='Основной договор (" + Строка(ВидДоговора) + ")'");
	НовыйДоговор.ВалютаРасчетов = Константы.НациональнаяВалюта.Получить();
	НовыйДоговор.Организация = Организация;
	НовыйДоговор.ВидДоговора = ВидДоговора;
	НовыйДоговор.ВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	НовыйДоговор.Владелец = Контрагент;
	НовыйДоговор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
	НовыйДоговор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
	
	// Заполним вид цен котрагента
	НовыйВидЦенКонтрагентов = Справочники.ВидыЦенКонтрагентов.ВидЦенКонтрагентаПоУмолчанию(Контрагент);
	
	Если НЕ ЗначениеЗаполнено(НовыйВидЦенКонтрагентов) Тогда 
		
		НовыйВидЦенКонтрагентов = Справочники.ВидыЦенКонтрагентов.НайтиЛюбойПервыйВидЦенКонтрагента(Контрагент);
		
		Если НЕ ЗначениеЗаполнено(НовыйВидЦенКонтрагентов) Тогда
			
			НовыйВидЦенКонтрагентов = Справочники.ВидыЦенКонтрагентов.СоздатьВидЦенКонтрагента(
				Контрагент,
				НовыйДоговор.ВалютаРасчетов
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйДоговор.ВидЦенКонтрагента = НовыйВидЦенКонтрагентов;
	
	НовыйДоговор.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НовыйДоговор.Ссылка;
	
КонецФункции // СоздатьДоговорПоУмолчанию()

// Процедура удаления существующих движений документа при перепроведении (отмене проведения).
//
Процедура УдалитьДвиженияУДокумента(ДокументОбъект)
	
	МассивОбрабатываемыхСтрокТаблицыДвижений = Новый Массив();
	
	// получение списка регистров, по которым существуют движения
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоДокументу(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		// имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра
		ПозицияТочки = СтрНайти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));

		МассивОбрабатываемыхСтрокТаблицыДвижений.Добавить(СтрокаДвижения);
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
			
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение", Набор.Метаданные()) Тогда
			// отсутствуют права на всю таблицу регистра
			ВызватьИсключение "Нарушение прав доступа: " + СтрокаДвижения.Имя;
			Возврат;
		КонецЕсли;

		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);

		// набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// выяснится, что на один из регистров не хватает прав.
		СтрокаДвижения.НаборЗаписей = Набор;
		
	КонецЦикла;	
	
	Для Каждого СтрокаДвижения Из МассивОбрабатываемыхСтрокТаблицыДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// возможно «сработал» RLS или подсистема даты запрета изменения
			ВызватьИсключение "Операция не выполнена: " + СтрокаДвижения.Имя + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
КонецПроцедуры // УдалитьДвиженияУДокумента()

// Функция определяет наличие движений документа.
//
Функция ОпределитьНаличиеДвиженийПоДокументу(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "";
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции // ОпределитьНаличиеДвиженийПоДокументу()

// Процедура очищает коллекцию движений документа.
//
Процедура ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект)
		
	Для каждого Движение Из ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчисткаКоллекцииДвиженийДокумента()

// Процедура удаляет пакеты данных из очереди сообщений для передачи мобильному клиенту.
//
Процедура ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(МобильныйКлиент, НомерСообщения = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.НомерСообщения
	|ИЗ
	|	РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
	|ГДЕ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
	|	И (&НомерСообщения = НЕОПРЕДЕЛЕНО
	|			ИЛИ ОчередиСообщенийОбменаСМобильнымиКлиентами.НомерСообщения <= &НомерСообщения)";
	
	Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	ВыборкаСообщений = Результат.Выбрать();
	Пока ВыборкаСообщений.Следующий() Цикл
		
		НаборЗаписей.Отбор.МобильныйКлиент.Установить(МобильныйКлиент);
		НаборЗаписей.Отбор.НомерСообщения.Установить(ВыборкаСообщений.НомерСообщения);
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом()

// Процедура обнуляет номер принятого и отправленного сообщений на узле плана обмена.
//
Процедура ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбменаОбъект = УзелОбмена.ПолучитьОбъект();
	УзелОбменаОбъект.НомерПринятого = 0;
	УзелОбменаОбъект.НомерОтправленного = 0;
	УзелОбменаОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена()

// Получает картинку.
Функция ПолучитьКартинку(СсылкаНаОбъект) Экспорт
	
	Файл = СсылкаНаОбъект.ФайлКартинки;
	ДвоичныеДанныеФайла = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Файл);
	СериализиаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	
	Попытка
		КартинкаXDTO = СериализиаторXDTO.ЗаписатьXDTO(ДвоичныеДанныеФайла);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Возврат КартинкаXDTO;
	
КонецФункции

Функция ПолучитьДанныеАутентификации()
	
	Возврат "AIzaSyB75SosZcatLAMPFw17Zgs5MnxoH3AtBcI";
	
КонецФункции

Процедура ПозвонитьКонтрагенту(Телефон, Устройство) Экспорт
	
	Уведомление = Новый ДоставляемоеУведомление;
	Уведомление.ЗвуковоеОповещение = ЗвуковоеОповещение.Нет;
	
	ИДПодписчика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Устройство, "ИДПодписчика");
	
	Если ЗначениеЗаполнено(ИДПодписчика) Тогда
		Получатель = ИДПодписчика.Получить();
	Иначе
		Получатель = Неопределено;
	КонецЕсли;

	Если Получатель <> Неопределено Тогда
		Уведомление.Получатели.Добавить(Получатель.Получить());
	КонецЕсли;
	
	Если Уведомление.Получатели.Количество() > 0 Тогда
		Уведомление.Данные = Телефон;
		Уведомление.Текст = "Звонок контрагенту";
		ДанныеАутентификации = ПолучитьДанныеАутентификации(); // пока только гугл
		Попытка
			ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, ДанныеАутентификации,, Ложь);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьPushУведомлениеУстройствамСНалоговымКалендарем(ЗаголовокСообщения, ТекстСообщения) Экспорт
	
	Уведомление = Новый ДоставляемоеУведомление;
	Уведомление.ЗвуковоеОповещение = ЗвуковоеОповещение.Нет;
	
	Выборка = ПланыОбмена.МобильноеПриложение.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел()
			И Выборка.Роли.Найти(Перечисления.РолиМобильногоПриложения.НалоговыйКалендарь, "Роль") <> Неопределено Тогда
			Получатель = Выборка.ИДПодписчика.Получить();
			Если Получатель <> Неопределено Тогда
				Уведомление.Получатели.Добавить(Получатель.Получить());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Уведомление.Получатели.Количество() > 0 Тогда
		Уведомление.Текст = ТекстСообщения;
		Уведомление.Заголовок = ЗаголовокСообщения;
		ДанныеАутентификации = ПолучитьДанныеАутентификации(); // пока только гугл
		Попытка
			ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, ДанныеАутентификации,, Ложь);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры