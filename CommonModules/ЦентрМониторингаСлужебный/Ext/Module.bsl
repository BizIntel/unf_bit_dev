////////////////////////////////////////////////////////////////////////////////
// Подсистема "Центр Мониторинга"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
//
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
	"ЦентрМониторингаСлужебный");
	
КонецПроцедуры

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ЦентрМониторингаСлужебный.ПервоначальноеЗаполнение";		
	
КонецПроцедуры

// Получает регламентное задание по имени.
//
// Параметры:
//  ИмяРегламентногоЗадания - Строка - имя регламентного задания.
//	СоздатьНовое - Булево - в случае отсутствия создается новое.
//
Функция ПолучитьРегламентноеЗаданиеВнешнийВызов(ИмяРегламентногоЗадания, СоздатьНовое = Истина) Экспорт
	Возврат ПолучитьРегламентноеЗадание(ИмяРегламентногоЗадания, СоздатьНовое);
КонецФункции

// Устанавливает расписание регламентного задания по умолчанию.
//
// Параметры:
//  ИмяРегламентногоЗадания - РегламентноеЗадание.
//
Процедура УстановитьРасписаниеПоУмолчаниюВнешнийВызов(Задание) Экспорт
	УстановитьРасписаниеПоУмолчанию(Задание);
КонецПроцедуры

// Удаляет регламентное задание по имени.
//
// Параметры:
//  ИмяРегламентногоЗадания - Строка - имя регламентного задания.
//
Процедура УдалитьРегламентноеЗаданиеВнешнийВызов(ИмяРегламентногоЗадания) Экспорт
	УдалитьРегламентноеЗадание(ИмяРегламентногоЗадания);
КонецПроцедуры

// Устанавливает значение параметра центра мониторинга.
//
// Параметры:
//  Параметр - Строка - Ключ параметра центра мониторинга, возможные значения ключа
//						см. в процедуре ПолучитьПараметрыПоУмолчанию в модуле ЦентрМониторингаСлужебный.
//	Значение - Произвольный тип - значение параметра центра мониторинга.
//
Функция УстановитьПараметрЦентраМониторингаВнешнийВызов(Параметр, Значение) Экспорт
	УстановитьПараметрЦентраМониторинга(Параметр, Значение);	
КонецФункции

// Получает параметры центра мониторинга по умолчанию.
// Возвращаемое значение
//	Структура
//
Функция ПолучитьПараметрыПоУмолчаниюВнешнийВызов() Экспорт
	Возврат ПолучитьПараметрыПоУмолчанию();
КонецФункции

// Получает параметры центра мониторинга.
// Параметры:
// 	Параметры - Структура - где ключи необходимые параметры, значения которых необходимо получить.
// Возвращаемое значение
//	Структура - значение константы ПараметрыЦентраМониторинга.
//
Функция ПолучитьПараметрыЦентраМониторингаВнешнийВызов(Параметры = Неопределено) Экспорт
	Возврат ПолучитьПараметрыЦентраМониторинга(Параметры);
КонецФункции

// Устанавливает параметры центра мониторинга.
// Параметры:
// 	Параметры - Структура - необходимые параметры, значения которых необходимо получить.
//
Функция УстановитьПараметрыЦентраМониторингаВнешнийВызов(НовыеПараметры) Экспорт
	УстановитьПараметрыЦентраМониторинга(НовыеПараметры);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов из других подсистем.

// См. описание одноименной процедуры в общем модуле РегламентныеЗаданияПереопределяемый.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СборИОтправкаСтатистики;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСРегламентнымиЗаданиями

Функция ПолучитьРегламентноеЗадание(ИмяРегламентногоЗадания, СоздатьНовое = Истина)
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", ИмяРегламентногоЗадания));
	Если Задания.Количество() = 0 Тогда
		Если СоздатьНовое Тогда
			Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные["РегламентныеЗадания"][ИмяРегламентногоЗадания]);
			Задание.Записать();
			Результат = Задание;
		КонецЕсли;
	Иначе
		Результат = Задания[0];
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура УстановитьРасписаниеПоУмолчанию(Задание)
	Задание.Расписание.ПериодПовтораДней = 1;
	Задание.Расписание.ПериодПовтораВТечениеДня = 600;
	Задание.Записать();
КонецПроцедуры

Процедура УдалитьРегламентноеЗадание(ИмяРегламентногоЗадания)
	РегЗадание = ПолучитьРегламентноеЗадание(ИмяРегламентногоЗадания, Ложь);
	Если РегЗадание <> Неопределено Тогда
		РегЗадание.Удалить();
	КонецЕсли;
КонецПроцедуры

Процедура ЦентрМониторингаРегламентноеЗадание() Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СборИОтправкаСтатистики);
	
	НеобходимаЗаписьОценкиПроизводительности = Ложь;
	
	ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
		ВремяНачала = МодульОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	ДатаЗапуска = ТекущаяУниверсальнаяДата();
	ПараметрыЦентраМониторинга = Новый Структура();
	
	ПараметрыЦентраМониторинга.Вставить("ВключитьЦентрМониторинга");
	ПараметрыЦентраМониторинга.Вставить("ЦентрОбработкиИнформацииОПрограмме");
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьДампы");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияДамповСледующееФормирование");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияДамповПериодФормирования");
	
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьБизнесСтатистику");
	ПараметрыЦентраМониторинга.Вставить("БизнесСтатистикаСледующееФормирование");
	ПараметрыЦентраМониторинга.Вставить("БизнесСтатистикаПериодФормирования");
	
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьСтатистикуКонфигурации");
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьНастройкуКонфигурации");
	ПараметрыЦентраМониторинга.Вставить("СтатистикаКонфигурацииСледующееФормирование");
	ПараметрыЦентраМониторинга.Вставить("СтатистикаКонфигурацииПериодФормирования");
	
	ПараметрыЦентраМониторинга.Вставить("ОтправкаДанныхСледующееФормирование");
	ПараметрыЦентраМониторинга.Вставить("ОтправкаДанныхПериодФормирования");
	
	ПараметрыЦентраМониторинга = ПолучитьПараметрыЦентраМониторинга(ПараметрыЦентраМониторинга);
	
	Если (ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга ИЛИ ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме) И ЭтоГлавныйУзел() Тогда 
		Если ПараметрыЦентраМониторинга.РегистрироватьДампы И ДатаЗапуска >= ПараметрыЦентраМониторинга.РегистрацияДамповСледующееФормирование Тогда
			Попытка
				РегистрацияДампов();
			Исключение
				Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Центр мониторинга - регистрация дампов'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					Комментарий);
				УстановитьПараметрЦентраМониторинга("РегистрироватьДампы", Ложь);
				ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики("ЦентрМониторинга.РегистрацияДампов.Ошибка", 1, Комментарий);
			КонецПопытки;
			
			ПараметрыЦентраМониторинга.РегистрацияДамповСледующееФормирование =
			ТекущаяУниверсальнаяДата()
			+ ПараметрыЦентраМониторинга.РегистрацияДамповПериодФормирования;
			
			НеобходимаЗаписьОценкиПроизводительности = Истина;
		КонецЕсли;
		
		Если ПараметрыЦентраМониторинга.РегистрироватьБизнесСтатистику И ДатаЗапуска >= ПараметрыЦентраМониторинга.БизнесСтатистикаСледующееФормирование Тогда
			Попытка
				РегистрацияОперацийСтатистики();
			Исключение
				Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Центр мониторинга - регистрация операций статистики'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					Комментарий);
				ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики("ЦентрМониторинга.РегистрацияОперацийСтатистики.Ошибка", 1, Комментарий);
			КонецПопытки;
						
			ПараметрыЦентраМониторинга.БизнесСтатистикаСледующееФормирование =
			ТекущаяУниверсальнаяДата()
			+ ПараметрыЦентраМониторинга.БизнесСтатистикаПериодФормирования;
			
			НеобходимаЗаписьОценкиПроизводительности = Истина;
		КонецЕсли;
		
		Если (ПараметрыЦентраМониторинга.РегистрироватьСтатистикуКонфигурации ИЛИ ПараметрыЦентраМониторинга.РегистрироватьНастройкуКонфигурации) И ДатаЗапуска >= ПараметрыЦентраМониторинга.СтатистикаКонфигурацииСледующееФормирование Тогда
			Попытка
				СобратьСтатистикуКонфигурации(Новый Структура("РегистрироватьСтатистикуКонфигурации, РегистрироватьНастройкуКонфигурации", ПараметрыЦентраМониторинга.РегистрироватьСтатистикуКонфигурации, ПараметрыЦентраМониторинга.РегистрироватьНастройкуКонфигурации));
			Исключение
				Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Центр мониторинга - собрать статистику конфигурации'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					Комментарий);
				ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики("ЦентрМониторинга.СобратьСтатистикуКонфигурации.Ошибка", 1, Комментарий);
			КонецПопытки;
				
			ПараметрыЦентраМониторинга.СтатистикаКонфигурацииСледующееФормирование =
			ТекущаяУниверсальнаяДата()
			+ ПараметрыЦентраМониторинга.СтатистикаКонфигурацииПериодФормирования;
			
			НеобходимаЗаписьОценкиПроизводительности = Истина;
		КонецЕсли;
		
		Если ДатаЗапуска >= ПараметрыЦентраМониторинга.ОтправкаДанныхСледующееФормирование Тогда
			Попытка
				СформироватьПакетДляОтправки();
			Исключение
				Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Центр мониторинга - сформировать пакет для отправки'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					Комментарий);
				ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики("ЦентрМониторинга.СформироватьПакетДляОтправки.Ошибка", 1, Комментарий);
			КонецПопытки;
			
			Попытка
				HTTPОтвет = ОтправитьДанныеМониторинга();
			Исключение
				Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Центр мониторинга - отправить данные мониторинга'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					Комментарий);
				ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики("ЦентрМониторинга.ОтправитьДанныеМониторинга.Ошибка", 1, Комментарий);
			КонецПопытки;
			
			ПараметрыЦентраМониторинга.ОтправкаДанныхСледующееФормирование = ТекущаяУниверсальнаяДата()
				+ ПолучитьПараметрыЦентраМониторинга("ОтправкаДанныхПериодФормирования");
				
			ПараметрыЦентраМониторинга.Удалить("РегистрацияДамповСледующееФормирование");
			ПараметрыЦентраМониторинга.Удалить("РегистрацияДамповПериодФормирования");
			
			ПараметрыЦентраМониторинга.Удалить("БизнесСтатистикаСледующееФормирование");
			ПараметрыЦентраМониторинга.Удалить("БизнесСтатистикаПериодФормирования");
			
			ПараметрыЦентраМониторинга.Удалить("СтатистикаКонфигурацииСледующееФормирование");
			ПараметрыЦентраМониторинга.Удалить("СтатистикаКонфигурацииПериодФормирования");
			
			НеобходимаЗаписьОценкиПроизводительности = Истина;
		КонецЕсли;
		
		// Что бы не было записи параметров, которые установились при обработке ответа от сервиса,
		// то удалим эти параметры.
		ПараметрыЦентраМониторинга.Удалить("РегистрироватьДампы");
		ПараметрыЦентраМониторинга.Удалить("РегистрироватьБизнесСтатистику");
		ПараметрыЦентраМониторинга.Удалить("РегистрироватьСтатистикуКонфигурации");
		ПараметрыЦентраМониторинга.Удалить("РегистрироватьНастройкуКонфигурации");
		ПараметрыЦентраМониторинга.Удалить("ОтправкаДанныхПериодФормирования");
		
		УстановитьПараметрыЦентраМониторинга(ПараметрыЦентраМониторинга);
	Иначе
		УдалитьРегламентноеЗадание("СборИОтправкаСтатистики");
	КонецЕсли;
	
	Если ОценкаПроизводительностиСуществует И НеобходимаЗаписьОценкиПроизводительности Тогда
		МодульОценкаПроизводительности.ЗакончитьЗамерВремени("ЦентрМониторингаСборИОтправкаСтатистики", ВремяНачала);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РаботаСБизнесСтатистикой

Процедура РазобратьБуферОперацийСтатистики(ТекущаяДата)
	ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
		ВремяНачала = МодульОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	ПериодАгрегации = ЦентрМониторингаВызовСервераПовтИсп.ПолучитьПараметрыЦентраМониторинга("ПериодАгрегацииМалый");
	ПериодУдаления = ЦентрМониторингаВызовСервераПовтИсп.ПолучитьПараметрыЦентраМониторинга("ПериодАгрегации");
				
	ОбработатьЗаписиДо = Дата(1, 1, 1) + Цел((ТекущаяДата - Дата(1, 1, 1))/ПериодАгрегации)*ПериодАгрегации;
			
	РезультатЗапросаОперации = РегистрыСведений.БуферОперацийСтатистики.ПолучитьАгрегированныеЗаписиОпераций(ОбработатьЗаписиДо, ПериодАгрегации, ПериодУдаления);
	РезультатЗапросаКомментарий = РегистрыСведений.БуферОперацийСтатистики.ПолучитьАгрегированныеЗаписиКомментарий(ОбработатьЗаписиДо, ПериодАгрегации, ПериодУдаления);
	РезультатЗапросаОбласти = РегистрыСведений.БуферОперацийСтатистики.ПолучитьАгрегированныеЗаписиОбластиСтатистики(ОбработатьЗаписиДо, ПериодАгрегации, ПериодУдаления);
	НачатьТранзакцию();
	Попытка
		РегистрыСведений.ЗамерыОперацииСтатистики.ЗаписатьЗамеры(РезультатЗапросаОперации);
		РегистрыСведений.ЗамерыКомментарииСтатистики.ЗаписатьЗамеры(РезультатЗапросаКомментарий);
		РегистрыСведений.ЗамерыОбластиСтатистики.ЗаписатьЗамеры(РезультатЗапросаОбласти);
		
		РегистрыСведений.БуферОперацийСтатистики.УдалитьЗаписи(ОбработатьЗаписиДо);	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЦентрМониторингаРазобратьБуферОперацийСтатистики(), УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ЦентрМониторингаСлужебный,,Ошибка);
		ВызватьИсключение Ошибка;
	КонецПопытки;
	
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности.ЗакончитьЗамерВремени("ЦентрМониторингаРазобратьБуферОперацийСтатистики", ВремяНачала);
	КонецЕсли;
КонецПроцедуры

Процедура АгрегироватьЗамерыОперацийСтатистики(ТекущаяДата)
	ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
		ВремяНачала = МодульОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	ПериодАгрегации = ЦентрМониторингаВызовСервераПовтИсп.ПолучитьПараметрыЦентраМониторинга("ПериодАгрегации");
	ПериодУдаления = ЦентрМониторингаВызовСервераПовтИсп.ПолучитьПараметрыЦентраМониторинга("ПериодУдаления");
	
	ГраницаАгрегирования = ЦентрМониторингаВызовСервераПовтИсп.ПолучитьПараметрыЦентраМониторинга("ГраницаАгрегирования");
	ОбработатьЗаписиДо = Дата(1, 1, 1) + Цел((ТекущаяДата - Дата(1, 1, 1))/ПериодАгрегации)*ПериодАгрегации;
	
	Если ОбработатьЗаписиДо > ГраницаАгрегирования Тогда
		НачатьТранзакцию();
		Попытка
			РезультатЗапросаОперацииАгрегированные = РегистрыСведений.ЗамерыОперацииСтатистики.ПолучитьАгрегированныеЗаписи(ГраницаАгрегирования, ОбработатьЗаписиДо, ПериодАгрегации, ПериодУдаления);
			РезультатЗапросаКомментарийАгрегированные = РегистрыСведений.ЗамерыКомментарииСтатистики.ПолучитьАгрегированныеЗаписи(ГраницаАгрегирования, ОбработатьЗаписиДо, ПериодАгрегации, ПериодУдаления);
			РезультатЗапросаОбластиАгрегированные = РегистрыСведений.ЗамерыОбластиСтатистики.ПолучитьАгрегированныеЗаписи(ГраницаАгрегирования, ОбработатьЗаписиДо, ПериодАгрегации, ПериодУдаления);
			
			РегистрыСведений.ЗамерыОперацииСтатистики.УдалитьЗаписи(ГраницаАгрегирования, ОбработатьЗаписиДо);
			РегистрыСведений.ЗамерыКомментарииСтатистики.УдалитьЗаписи(ГраницаАгрегирования, ОбработатьЗаписиДо);
			РегистрыСведений.ЗамерыОбластиСтатистики.УдалитьЗаписи(ГраницаАгрегирования, ОбработатьЗаписиДо);
			
			РегистрыСведений.ЗамерыОперацииСтатистики.ЗаписатьЗамеры(РезультатЗапросаОперацииАгрегированные);
			РегистрыСведений.ЗамерыКомментарииСтатистики.ЗаписатьЗамеры(РезультатЗапросаКомментарийАгрегированные);
			РегистрыСведений.ЗамерыОбластиСтатистики.ЗаписатьЗамеры(РезультатЗапросаОбластиАгрегированные);
			
			УстановитьПараметрЦентраМониторинга("ГраницаАгрегирования", ОбработатьЗаписиДо);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Центр мониторинга.Агрегировать замеры операций статистики'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ЦентрМониторингаСлужебный,,Ошибка);
			ВызватьИсключение Ошибка;
		КонецПопытки;
	КонецЕсли;
	
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности.ЗакончитьЗамерВремени("ЦентрМониторингаАгрегироватьЗамерыОперацийСтатистики", ВремяНачала);
	КонецЕсли;
КонецПроцедуры

Процедура РегистрацияОперацийСтатистики()
	ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
		ВремяНачала = МодульОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	ТекущаяДата = ТекущаяУниверсальнаяДата();
	
	РазобратьБуферОперацийСтатистики(ТекущаяДата);
	АгрегироватьЗамерыОперацийСтатистики(ТекущаяДата);
	УдалитьУстаревшиеДанныеОперацийСтатистики();
	
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности.ЗакончитьЗамерВремени("ЦентрМониторингаРегистрацияОперацийСтатистики", ВремяНачала);
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьУстаревшиеДанныеОперацийСтатистики()
	ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
		ВремяНачала = МодульОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	ПараметрыЦентраМониторинга = ЦентрМониторингаВызовСервераПовтИсп.ПолучитьПараметрыЦентраМониторинга();
	
	ДатаКрайнегоПакета = ПараметрыЦентраМониторинга.ДатаКрайнегоПакета;
	ПериодУдаления = ПараметрыЦентраМониторинга.ПериодУдаления;
	
	ГраницаУдаления = Дата(1,1,1) + Цел((ДатаКрайнегоПакета - Дата(1,1,1))/ПериодУдаления) * ПериодУдаления;
	
	НачатьТранзакцию();
	Попытка
		РегистрыСведений.ЗамерыОперацииСтатистики.УдалитьЗаписи(Дата(1,1,1), ГраницаУдаления);
		РегистрыСведений.ЗамерыКомментарииСтатистики.УдалитьЗаписи(Дата(1,1,1), ГраницаУдаления);
		РегистрыСведений.ЗамерыОбластиСтатистики.УдалитьЗаписи(Дата(1,1,1), ГраницаУдаления);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Центр мониторинга.Удалить устаревшие данные операций статистики'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ЦентрМониторингаСлужебный,,Ошибка);
		ВызватьИсключение Ошибка;
	КонецПопытки;
	
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности.ЗакончитьЗамерВремени("ЦентрМониторингаУдалитьУстаревшиеДанныеОперацийСтатистики", ВремяНачала);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РаботаСJSON

Функция СформироватьJSONСтруктуру(ИмяСекции, Данные, ДополнительныеПараметры = Неопределено)
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Соответствие;
	КонецЕсли;
	
	ДатаНачала = ДополнительныеПараметры["ДатаНачала"];
	ДатаОкончания = ДополнительныеПараметры["ДатаОкончания"];
	ДопПараметры = ДополнительныеПараметры["ДопПараметры"];
	КолонкиИндекса = ДополнительныеПараметры["КолонкиИндекса"];
	
	Если ТипЗнч(Данные) = Тип("РезультатЗапроса") Тогда
		JSONСтруктура = СформироватьJSONСтруктуруРезультатЗапроса(ИмяСекции, Данные, ДатаНачала, ДатаОкончания, ДопПараметры, КолонкиИндекса)
	КонецЕсли;
	
	Возврат JSONСтруктура;
КонецФункции

Функция СформироватьJSONСтруктуруРезультатЗапроса(ИмяСекции, Данные, ДатаНачала, ДатаОкончания, ДопПараметры, КолонкиИндекса)
	JSONСтруктура = Новый Соответствие;
	
	Секция = Новый Структура;
	
	
	Если ДатаНачала <> Неопределено Тогда
		Секция.Вставить("date_start", ДатаНачала);
	КонецЕсли;
	
	Если ДатаОкончания <> Неопределено Тогда
		Секция.Вставить("date_end", ДатаОкончания);
	КонецЕсли;
	
	Если ДопПараметры <> Неопределено Тогда
		Для Каждого Параметр Из ДопПараметры Цикл
			Секция.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
			
	Колонки = Новый Массив;
	Для Каждого ТекКолонка Из Данные.Колонки Цикл
		Колонки.Добавить(ТекКолонка.Имя);
	КонецЦикла;
	Секция.Вставить("columns", Колонки);
	
	Строки = Новый Массив;
	Выборка = Данные.Выбрать();
	Если КолонкиИндекса <> Неопределено Тогда
		ИндексыЗначений = Новый Соответствие;
		Для Каждого ТекКолонка Из КолонкиИндекса Цикл
			ИндексыЗначений.Вставить(ТекКолонка.Ключ, Новый Соответствие);
		КонецЦикла;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Строка = Новый Массив;
		Для Каждого ТекКолонка Из Колонки Цикл
			ЗначениеДляДобавления = Выборка[ТекКолонка];
			Если КолонкиИндекса <> Неопределено И КолонкиИндекса[ТекКолонка] <> Неопределено Тогда
				Если КолонкиИндекса[ТекКолонка][ЗначениеДляДобавления] = Неопределено Тогда
					ИндексЗначения = КолонкиИндекса[ТекКолонка].Количество() + 1;
					КолонкиИндекса[ТекКолонка].Вставить(ЗначениеДляДобавления, ИндексЗначения);
					ИндексыЗначений[ТекКолонка].Вставить(Формат(ИндексЗначения, "ЧГ=0"), ЗначениеДляДобавления);
				КонецЕсли;
				
				ЗначениеДляДобавления = КолонкиИндекса[ТекКолонка][ЗначениеДляДобавления];
			КонецЕсли;
			
			Строка.Добавить(ЗначениеДляДобавления);
		КонецЦикла;
		Строки.Добавить(Строка);
	КонецЦикла;
	Секция.Вставить("columnsValueIndex", ИндексыЗначений);
	Секция.Вставить("rows", Строки);		
	
	JSONСтруктура.Вставить(ИмяСекции, Секция);
	
	Возврат JSONСтруктура;
КонецФункции

Функция СформироватьСтруктуруJSONДляОтправки(Параметры)
	ДатаНачала = Параметры.ДатаНачала;
	ДатаОкончания = Параметры.ДатаОкончания;
	
	ТопДамповКоличество = Параметры.ТопДамповКоличество;
	ТопApdex = Параметры.TopApdex;
	ТопApdexTech = Параметры.TopApdexTech;
	ПериодУдаления = Параметры.ПериодУдаления;
	
	ПараметрыЦентраМониторинга = Новый Структура();
	ПараметрыЦентраМониторинга.Вставить("ИдентификаторИнформационнойБазы");
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьИнформациюОСистеме");
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьВерсииПодсистем");
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьДампы");
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьБизнесСтатистику");
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьСтатистикуКонфигурации");
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьНастройкуКонфигурации");
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьПроизводительность");
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьПроизводительностьТехнологическую");
	ПараметрыЦентраМониторинга = ЦентрМониторингаВызовСервераПовтИсп.ПолучитьПараметрыЦентраМониторинга(ПараметрыЦентраМониторинга);
	
	Если ПараметрыЦентраМониторинга.РегистрироватьИнформациюОСистеме Тогда
		Инфо = ПолучитьСистемнуюИнформацию();
	КонецЕсли;
	
	Если ПараметрыЦентраМониторинга.РегистрироватьВерсииПодсистем Тогда
		Подсистемы = ВерсииПодсистем();
	КонецЕсли;
	
	
	Если ПараметрыЦентраМониторинга.РегистрироватьДампы Тогда
		ТопДампов = РегистрыСведений.ДампыПлатформы.ПолучитьТопВариантов(ДатаНачала, ДатаОкончания, ТопДамповКоличество);
		
		ДополнительныеПараметры = Новый Соответствие;
		ДополнительныеПараметры.Вставить("ДатаНачала", ДатаНачала);
		ДополнительныеПараметры.Вставить("ДатаОкончания", ДатаОкончания);
		СекцияDUMPS = СформироватьJSONСтруктуру("dumps", ТопДампов, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ПараметрыЦентраМониторинга.РегистрироватьБизнесСтатистику Тогда
		РезультатЗапроса = РегистрыСведений.ЗамерыОперацииСтатистики.ПолучитьЗамеры(ДатаНачала, ДатаОкончания, ПериодУдаления);
		КолонкиИндекса = Новый Соответствие;
		КолонкиИндекса.Вставить("ОперацияСтатистики", Новый Соответствие);
		КолонкиИндекса.Вставить("Период", Новый Соответствие);
		
		ДополнительныеПараметры = Новый Соответствие;
		ДополнительныеПараметры.Вставить("ДатаНачала", ДатаНачала);
		ДополнительныеПараметры.Вставить("ДатаОкончания", ДатаОкончания);
		ДополнительныеПараметры.Вставить("КолонкиИндекса", КолонкиИндекса);
		СекцияОперацииСтатистики = СформироватьJSONСтруктуру("OperationStatistics", РезультатЗапроса, ДополнительныеПараметры);
		СекцияОперацииСтатистики["OperationStatistics"].Вставить("AggregationPeriod", ПериодУдаления);
		
		РезультатЗапроса = РегистрыСведений.ЗамерыКомментарииСтатистики.ПолучитьЗамеры(ДатаНачала, ДатаОкончания, ПериодУдаления);
		КолонкиИндекса = Новый Соответствие;
		КолонкиИндекса.Вставить("ОперацияСтатистики", Новый Соответствие);
		КолонкиИндекса.Вставить("Период", Новый Соответствие);
		КолонкиИндекса.Вставить("КомментарийСтатистики", Новый Соответствие);
		
		ДополнительныеПараметры = Новый Соответствие;
		ДополнительныеПараметры.Вставить("ДатаНачала", ДатаНачала);
		ДополнительныеПараметры.Вставить("ДатаОкончания", ДатаОкончания);
		ДополнительныеПараметры.Вставить("КолонкиИндекса", КолонкиИндекса);
		СекцияКомментарииСтатистики = СформироватьJSONСтруктуру("CommentsStatistics", РезультатЗапроса, ДополнительныеПараметры);
		
		СекцияКомментарииСтатистики["CommentsStatistics"]["columnsValueIndex"].Удалить("ОперацияСтатистики");
		СекцияКомментарииСтатистики["CommentsStatistics"]["columnsValueIndex"].Удалить("Период");
		СекцияКомментарииСтатистики["CommentsStatistics"].Вставить("AggregationPeriod", ПериодУдаления);
		
		РезультатЗапроса = РегистрыСведений.ЗамерыОбластиСтатистики.ПолучитьЗамеры(ДатаНачала, ДатаОкончания, ПериодУдаления);
		КолонкиИндекса = Новый Соответствие;
		КолонкиИндекса.Вставить("ОперацияСтатистики", Новый Соответствие);
		КолонкиИндекса.Вставить("Период", Новый Соответствие);
		КолонкиИндекса.Вставить("ОбластьСтатистики", Новый Соответствие);
		
		ДополнительныеПараметры = Новый Соответствие;
		ДополнительныеПараметры.Вставить("ДатаНачала", ДатаНачала);
		ДополнительныеПараметры.Вставить("ДатаОкончания", ДатаОкончания);
		ДополнительныеПараметры.Вставить("КолонкиИндекса", КолонкиИндекса);
		СекцияОбластиСтатистики = СформироватьJSONСтруктуру("StatisticalAreas", РезультатЗапроса, ДополнительныеПараметры);
		СекцияОбластиСтатистики["StatisticalAreas"]["columnsValueIndex"].Удалить("ОперацияСтатистики");
		СекцияОбластиСтатистики["StatisticalAreas"]["columnsValueIndex"].Удалить("Период");
		СекцияОбластиСтатистики["StatisticalAreas"].Вставить("AggregationPeriod", ПериодУдаления);
	КонецЕсли;
	
	РазделениеПоОбластямДанныхВключено = РазделениеПоОбластямДанныхВключено();
	
	#Область СекцияStatisticsConfiguration
	Если ПараметрыЦентраМониторинга.РегистрироватьСтатистикуКонфигурации Тогда
		Если РазделениеПоОбластямДанныхВключено Тогда
			РезультатЗапросаИмена = РегистрыСведений.СтатистикаКонфигурации.ПолучитьИменаСтатистики(0);
			ТаблицаЗначенийИмена = РезультатЗапросаИмена.Выгрузить();
			
			Массив = Новый Массив;
			КЧ_10_0 = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный);
			Массив.Добавить(Тип("Число"));
			ОписаниеТиповЧисло_10_0 = Новый ОписаниеТипов(Массив, КЧ_10_0,,,);
			ТаблицаЗначенийИмена.Колонки.Добавить("ИндексСтроки", ОписаниеТиповЧисло_10_0);
			СтруктураИменМетаданных = Новый Соответствие;
			Для Каждого ТекСтрока Из ТаблицаЗначенийИмена Цикл
				ИндексСтроки = ТаблицаЗначенийИмена.Индекс(ТекСтрока);
				ТекСтрока.ИндексСтроки = ИндексСтроки;
				СтруктураИменМетаданных.Вставить(ИндексСтроки, ТекСтрока.ОперацияСтатистикиНаименование); 
			КонецЦикла;
			
			СекцияСтатистикаКонфигурации = Новый Структура("StatisticsConfiguration", Новый Структура);
			СекцияСтатистикаКонфигурации.StatisticsConfiguration.Вставить("MetadataName", Метаданные.Имя);
			СекцияСтатистикаКонфигурации.StatisticsConfiguration.Вставить("WorkingMode", ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(), "F", "S"));
			СекцияСтатистикаКонфигурации.StatisticsConfiguration.Вставить("DivisionByRegions", РазделениеПоОбластямДанныхВключено);
			СекцияСтатистикаКонфигурации.StatisticsConfiguration.Вставить("MetadataIndexName", Новый Соответствие);
			Для Каждого ТекСтрока Из ТаблицаЗначенийИмена Цикл
				СекцияСтатистикаКонфигурации.StatisticsConfiguration.MetadataIndexName.Вставить(Строка(ТекСтрока.ИндексСтроки), ТекСтрока.ОперацияСтатистикиНаименование);
			КонецЦикла;
						
			СекцияСтатистикаКонфигурации.StatisticsConfiguration.Вставить("StatisticsConfigurationByRegions", Новый Соответствие);
			ОбластиДанныхРезультат = РегистрыСведений.СтатистикаКонфигурации.ПолучитьОбластиДанныхРезультатЗапроса();
			Выборка = ОбластиДанныхРезультат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбластьДанныхСтрока = Строка(Выборка.ОбластьДанных);
				ОбластьДанныхСсылка = РегистрыСведений.ОбластиСтатистики.ПолучитьСсылку(ОбластьДанныхСтрока);
				
				СтатистикаПоОбластям = Новый Массив;
				Если РегистрыСведений.ОбластиСтатистики.СобиратьСтатистикуКонфигурации(ОбластьДанныхСтрока) Тогда
					РезультатЗапроса = РегистрыСведений.СтатистикаКонфигурации.ПолучитьСтатистику(0, ТаблицаЗначенийИмена, ОбластьДанныхСсылка);
					СтатистикаКонфигурацииОбласти = СформироватьJSONСтруктуру(ОбластьДанныхСтрока, РезультатЗапроса);
					СекцияСтатистикаКонфигурации.StatisticsConfiguration.StatisticsConfigurationByRegions.Вставить(ОбластьДанныхСтрока, СтатистикаКонфигурацииОбласти[ОбластьДанныхСтрока]); 
				КонецЕсли;
			КонецЦикла;
		Иначе
			РезультатЗапроса = РегистрыСведений.СтатистикаКонфигурации.ПолучитьСтатистику(0);
			ДопПараметры = Новый Структура("MetadataName", Метаданные.Имя);
			ДопПараметры.Вставить("WorkingMode", ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(), "F", "S"));
			ДопПараметры.Вставить("DivisionByRegions", РазделениеПоОбластямДанныхВключено);
			
			ДополнительныеПараметры = Новый Соответствие;
			ДополнительныеПараметры.Вставить("ДатаНачала", ДатаНачала);
			ДополнительныеПараметры.Вставить("ДопПараметры", ДопПараметры);
			СекцияСтатистикаКонфигурации = СформироватьJSONСтруктуру("StatisticsConfiguration", РезультатЗапроса, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область СекцияOptions
	Если ПараметрыЦентраМониторинга.РегистрироватьНастройкуКонфигурации Тогда
		Если РазделениеПоОбластямДанныхВключено Тогда
			РезультатЗапросаИмена = РегистрыСведений.СтатистикаКонфигурации.ПолучитьИменаСтатистики(1);
			ТаблицаЗначенийИмена = РезультатЗапросаИмена.Выгрузить();
			
			Массив = Новый Массив;
			КЧ_10_0 = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный);
			Массив.Добавить(Тип("Число"));
			ОписаниеТиповЧисло_10_0 = Новый ОписаниеТипов(Массив, КЧ_10_0,,,);
			ТаблицаЗначенийИмена.Колонки.Добавить("ИндексСтроки", ОписаниеТиповЧисло_10_0);
			СтруктураИменМетаданных = Новый Соответствие;
			Для Каждого ТекСтрока Из ТаблицаЗначенийИмена Цикл
				ИндексСтроки = ТаблицаЗначенийИмена.Индекс(ТекСтрока);
				ТекСтрока.ИндексСтроки = ИндексСтроки;
				СтруктураИменМетаданных.Вставить(ИндексСтроки, ТекСтрока.ОперацияСтатистикиНаименование); 
			КонецЦикла;
			
			СекцияНастройкаКонфигурации = Новый Структура("Options", Новый Структура);
			СекцияНастройкаКонфигурации.Options.Вставить("MetadataName", Метаданные.Имя);
			СекцияНастройкаКонфигурации.Options.Вставить("WorkingMode", ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(), "F", "S"));
			СекцияНастройкаКонфигурации.Options.Вставить("DivisionByRegions", РазделениеПоОбластямДанныхВключено);
			СекцияНастройкаКонфигурации.Options.Вставить("MetadataIndexName", Новый Соответствие);
			Для Каждого ТекСтрока Из ТаблицаЗначенийИмена Цикл
				СекцияНастройкаКонфигурации.Options.MetadataIndexName.Вставить(Строка(ТекСтрока.ИндексСтроки), ТекСтрока.ОперацияСтатистикиНаименование);
			КонецЦикла;
			
			СекцияНастройкаКонфигурации.Options.Вставить("OptionsByRegions", Новый Соответствие);
			ОбластиДанныхРезультат = РегистрыСведений.СтатистикаКонфигурации.ПолучитьОбластиДанныхРезультатЗапроса();
			Выборка = ОбластиДанныхРезультат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбластьДанныхСтрока = Строка(Выборка.ОбластьДанных);
				ОбластьДанныхСсылка = РегистрыСведений.ОбластиСтатистики.ПолучитьСсылку(ОбластьДанныхСтрока);
				
				СтатистикаПоОбластям = Новый Массив;
				Если РегистрыСведений.ОбластиСтатистики.СобиратьСтатистикуКонфигурации(ОбластьДанныхСтрока) Тогда
					РезультатЗапроса = РегистрыСведений.СтатистикаКонфигурации.ПолучитьСтатистику(1, ТаблицаЗначенийИмена, ОбластьДанныхСсылка);
					СтатистикаКонфигурацииОбласти = СформироватьJSONСтруктуру(ОбластьДанныхСтрока, РезультатЗапроса);
					СекцияНастройкаКонфигурации.Options.OptionsByRegions.Вставить(ОбластьДанныхСтрока, СтатистикаКонфигурацииОбласти[ОбластьДанныхСтрока]); 
				КонецЕсли;
			КонецЦикла;
		Иначе
			РезультатЗапроса = РегистрыСведений.СтатистикаКонфигурации.ПолучитьСтатистику(1);
			ДопПараметры = Новый Структура("MetadataName", Метаданные.Имя);
			ДопПараметры.Вставить("WorkingMode", ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(), 0, 1));
			
			ДополнительныеПараметры = Новый Соответствие;
			ДополнительныеПараметры.Вставить("ДатаНачала", ДатаНачала);
			ДополнительныеПараметры.Вставить("ДопПараметры", ДопПараметры);
			СекцияНастройкаКонфигурации = СформироватьJSONСтруктуру("Options", РезультатЗапроса, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
		
	ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительностиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиСлужебный");
		
		Если ПараметрыЦентраМониторинга.РегистрироватьПроизводительность Тогда
			РезультатЗапроса = МодульОценкаПроизводительностиСлужебный.ПолучитьТопAPDEX(ДатаНачала, ДатаОкончания, ПериодУдаления, ТопApdex);
			КолонкиИндекса = Новый Соответствие;
			КолонкиИндекса.Вставить("Период", Новый Соответствие);
			КолонкиИндекса.Вставить("КлючеваяОперация", Новый Соответствие);
			
			ДополнительныеПараметры = Новый Соответствие;
			ДополнительныеПараметры.Вставить("ДатаНачала", ДатаНачала);
			ДополнительныеПараметры.Вставить("ДатаОкончания", ДопПараметры);
			ДополнительныеПараметры.Вставить("КолонкиИндекса", КолонкиИндекса);
			СекцияТопAPDEX = СформироватьJSONСтруктуру("TopApdex", РезультатЗапроса, ДополнительныеПараметры);	
			СекцияТопAPDEX["TopApdex"].Вставить("AggregationPeriod", ПериодУдаления);
		КонецЕсли;
		
		Если ПараметрыЦентраМониторинга.РегистрироватьПроизводительностьТехнологическую Тогда
			РезультатЗапроса = МодульОценкаПроизводительностиСлужебный.ПолучитьТопAPDEXТехнологический(ДатаНачала, ДатаОкончания, ПериодУдаления, ТопApdexTech);
			КолонкиИндекса = Новый Соответствие;
			КолонкиИндекса.Вставить("Период", Новый Соответствие);
			КолонкиИндекса.Вставить("КлючеваяОперация", Новый Соответствие);
			
			ДополнительныеПараметры = Новый Соответствие;
			ДополнительныеПараметры.Вставить("ДатаНачала", ДатаНачала);
			ДополнительныеПараметры.Вставить("ДатаОкончания", ДопПараметры);
			ДополнительныеПараметры.Вставить("КолонкиИндекса", КолонкиИндекса);
			СекцияТопAPDEXСлужебные = СформироватьJSONСтруктуру("TopApdexTechnology", РезультатЗапроса, ДополнительныеПараметры);
			СекцияТопAPDEXСлужебные["TopApdexTechnology"].Вставить("AggregationPeriod", ПериодУдаления);
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторИнформационнойБазы = Строка(ПараметрыЦентраМониторинга.ИдентификаторИнформационнойБазы);
	JSONСтруктура = Новый Структура;
	JSONСтруктура.Вставить("ib",  ИдентификаторИнформационнойБазы);
	JSONСтруктура.Вставить("versionPacket",  "1.0.1.0");
	JSONСтруктура.Вставить("datePacket",  ТекущаяУниверсальнаяДата());
	
	Если ПараметрыЦентраМониторинга.РегистрироватьИнформациюОСистеме Тогда
		JSONСтруктура.Вставить("info",  Инфо);
	КонецЕсли;
	
	Если ПараметрыЦентраМониторинга.РегистрироватьВерсииПодсистем Тогда
		JSONСтруктура.Вставить("versions",  Подсистемы);
	КонецЕсли;
		
	Если ПараметрыЦентраМониторинга.РегистрироватьДампы Тогда
		JSONСтруктура.Вставить("dumps", СекцияDUMPS["dumps"]);
	КонецЕсли;
	
	Если ПараметрыЦентраМониторинга.РегистрироватьБизнесСтатистику Тогда
		БизнесСтатистика = Новый Структура;
		БизнесСтатистика.Вставить("OperationStatistics", СекцияОперацииСтатистики["OperationStatistics"]);
		БизнесСтатистика.Вставить("CommentsStatistics", СекцияКомментарииСтатистики["CommentsStatistics"]);
		БизнесСтатистика.Вставить("StatisticalAreas", СекцияОбластиСтатистики["StatisticalAreas"]);
		JSONСтруктура.Вставить("business", БизнесСтатистика);
	КонецЕсли;
	
	Если ПараметрыЦентраМониторинга.РегистрироватьСтатистикуКонфигурации Тогда
		JSONСтруктура.Вставить("config", СекцияСтатистикаКонфигурации["StatisticsConfiguration"]);
	КонецЕсли;
	
	Если ПараметрыЦентраМониторинга.РегистрироватьНастройкуКонфигурации Тогда
		JSONСтруктура.Вставить("options", СекцияНастройкаКонфигурации["Options"]);
	КонецЕсли;
		
	Если ОценкаПроизводительностиСуществует Тогда
		Если ПараметрыЦентраМониторинга.РегистрироватьПроизводительность Тогда
			JSONСтруктура.Вставить("perf", СекцияТопAPDEX["TopApdex"]);
		КонецЕсли;
		
		Если ПараметрыЦентраМониторинга.РегистрироватьПроизводительностьТехнологическую Тогда
			JSONСтруктура.Вставить("internal_perf", СекцияТопAPDEXСлужебные["TopApdexTechnology"]);
		КонецЕсли;
	КонецЕсли;
			
	Возврат JSONСтруктура;
КонецФункции

Функция СтрокаJSONВСтруктуру(СтрокаJSON)
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
	
	Возврат СтруктураJSON;
КонецФункции

Функция СтруктураJSONВСтроку(JSONСтруктура) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, JSONСтруктура);
		
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

#КонецОбласти

#Область РаботаСHTTPСервисом

Функция HTTPСервисОтправитьКакТекст(Сервер, АдресРесурса, Данные, Порт = 80, ЗащищенноеСоединение = Ложь)
	Параметры = Новый Структура;
	Параметры.Вставить("Сервер", Сервер);
	Параметры.Вставить("Порт", Порт);
	Параметры.Вставить("АдресРесурса", АдресРесурса);
	Параметры.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	Параметры.Вставить("Данные", Данные);
	Параметры.Вставить("Метод", "POST");
	Параметры.Вставить("ТипДанных", "Текст");
	
	HTTPОтветСтруктура = HTTPСервисОтправитьДанныеСлужебный(Параметры);
	
	Возврат HTTPОтветСтруктура;
КонецФункции

Функция HTTPСервисОтправитьДанныеСлужебный(Параметры)
	Если Параметры.ЗащищенноеСоединение Тогда
		HTTPСоединение = Новый HTTPСоединение(Параметры.Сервер, Параметры.Порт,,,,20, Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено));
	Иначе
		HTTPСоединение = Новый HTTPСоединение(Параметры.Сервер, Параметры.Порт,,,,20);
	КонецЕсли;
		
	HTTPЗапрос = Новый HTTPЗапрос(Параметры.АдресРесурса);
	
	Если Параметры.ТипДанных = "Текст" Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(Параметры.Данные);
	ИначеЕсли Параметры.ТипДанных = "ZIP" Тогда
		ИмяФайлаАрхива = ЗаписатьДанныеВАрхив(Параметры.Данные);
		ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(ИмяФайлаАрхива);
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеАрхива);
	КонецЕсли;
	
	Попытка
		Если Параметры.Метод = "POST" Тогда
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли Параметры.Метод = "GET" Тогда
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		КонецЕсли;
		
		Если Параметры.ТипДанных = "ZIP" Тогда
			УдалитьФайлы(ИмяФайлаАрхива);
		КонецЕсли;
		
		HTTPОтветСтруктура = HTTPОтветВСтруктуру(HTTPОтвет);
	Исключение
		HTTPОтветСтруктура = Новый Структура("КодСостояния", 105);
	КонецПопытки;
	
	Возврат HTTPОтветСтруктура;
КонецФункции

Функция ЗаписатьДанныеВАрхив(Данные)
	ВременныйКаталог = КаталогВременныхФайлов();
	
	ИдентификаторФайла = Строка(Новый УникальныйИдентификатор());
	ИмяФайлаДанных = ВременныйКаталог + ИдентификаторФайла + ".txt";
	ИмяФайлаАрхива = ВременныйКаталог + ИдентификаторФайла + ".zip";
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаДанных);
	ЗаписьТекста.Записать(Данные);
	ЗаписьТекста.Закрыть();
	
	АрхивZip = Новый ЗаписьZipФайла(ИмяФайлаАрхива,,,МетодСжатияZIP.Сжатие,УровеньСжатияZIP.Максимальный);
	АрхивZip.Добавить(ИмяФайлаДанных, РежимСохраненияПутейZIP.НеСохранятьПути);
	АрхивZip.Записать();
	
	УдалитьФайлы(ИмяФайлаДанных);
	
	Возврат ИмяФайлаАрхива; 
КонецФункции

Функция HTTPОтветВСтруктуру(Ответ)
	Результат = Новый Структура;
	
	Результат.Вставить("КодСостояния", Ответ.КодСостояния);
	Результат.Вставить("Заголовки",  Новый Соответствие);
	Для каждого Параметр Из Ответ.Заголовки Цикл
		Результат.Заголовки.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Если Ответ.Заголовки["Content-Type"] <> Неопределено Тогда
		ContentType = Ответ.Заголовки["Content-Type"];
		Если СтрНайти(ContentType, "text/plain") > 0 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			Результат.Вставить("Тело", Тело);
		ИначеЕсли СтрНайти(ContentType, "text/html") > 0 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			Результат.Вставить("Тело", Тело);
		ИначеЕсли СтрНайти(ContentType, "application/json") Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			Результат.Вставить("Тело", Тело);
		Иначе
			Тело = "Не известный ContentType = " + ContentType + ". См. <Функция HTTPОтветВСтруктуру(Ответ) Экспорт>";
			Результат.Вставить("Тело", Тело);
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область РаботаСРегистрациейДампов

Процедура РегистрацияДампов()
	ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
		ВремяНачала = МодульОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	КаталогДампов = ПолучитьКаталогДампов();
	
	Если КаталогДампов.Путь <> Неопределено Тогда
		Если КаталогДампов.УдалятьДампы Тогда
			ДампыДляУдаления = РегистрыСведений.ДампыПлатформы.ПолучитьДампыДляУдаления();
			
			Для Каждого ДампДляУдаления Из ДампыДляУдаления Цикл
				Файл = Новый Файл(ДампДляУдаления.ИмяФайла);
				Если Файл.Существует() Тогда
					Попытка
						УдалитьФайлы(Файл.ПолноеИмя);
						ДампДляУдаления.ИмяФайла = "";
						РегистрыСведений.ДампыПлатформы.ИзменитьЗапись(ДампДляУдаления);
					Исключение
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЦентрМониторингаУдалениеДампа(), УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				Иначе
					ДампДляУдаления.ИмяФайла = "";
					РегистрыСведений.ДампыПлатформы.ИзменитьЗапись(ДампДляУдаления);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ФайлыДампов = НайтиФайлы(КаталогДампов.Путь, "*.mdmp");
		ИменаФайловДампов = Новый Массив;
		Для Каждого ФайлДампа Из ФайлыДампов Цикл
			ИменаФайловДампов.Добавить(ФайлДампа.ПолноеИмя);
		КонецЦикла;
		
		ФайлыДамповЗарегистрированные = РегистрыСведений.ДампыПлатформы.ПолучитьЗарегистрированныеДампы(ИменаФайловДампов);
		
		Для Каждого ФайлДампа Из ФайлыДампов Цикл
			Если ФайлыДамповЗарегистрированные[ФайлДампа.ПолноеИмя] = Неопределено Тогда 
				ДампНовый = Новый Структура;
				СтруктураДампа = ОписаниеДампа(ФайлДампа.Имя);
				
				ДампНовый.Вставить("ДатаРегистрации", ТекущаяУниверсальнаяДатаВМиллисекундах());
				ДампНовый.Вставить("ВариантДампа", СтруктураДампа.Процесс + "_" + СтруктураДампа.ВерсияПлатформы + "_" + СтруктураДампа.Смещение);
				ДампНовый.Вставить("ВерсияПлатформы", ВерсияПлатформыВЧисло(СтруктураДампа.ВерсияПлатформы));
				ДампНовый.Вставить("ИмяФайла", ФайлДампа.ПолноеИмя);
				
				РегистрыСведений.ДампыПлатформы.ИзменитьЗапись(ДампНовый);
			КонецЕсли;
		КонецЦикла;
	Иначе
		УстановитьПараметрЦентраМониторинга("РегистрироватьДампы", Ложь);
	КонецЕсли;
	
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности.ЗакончитьЗамерВремени("ЦентрМониторингаРегистрацияДампов", ВремяНачала);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСтатистикойКонфигурации

Процедура СобратьСтатистикуКонфигурации(ПараметрыЦентраМониторинга = Неопределено)
	Если ПараметрыЦентраМониторинга = Неопределено Тогда
		ПараметрыЦентраМониторинга.Вставить("РегистрироватьСтатистикуКонфигурации");
		ПараметрыЦентраМониторинга.Вставить("РегистрироватьНастройкуКонфигурации");
		ПараметрыЦентраМониторинга = ПолучитьПараметрыЦентраМониторинга(ПараметрыЦентраМониторинга);
	КонецЕсли;
	
	// Собирает базовую статистику по конфигурации
	// в случае существования подсистемы оценки производительности
	// замеряет длительность выполнения.
	//
	#Область СтатистикаКонфигурацииБазовая
	
	Если ПараметрыЦентраМониторинга.РегистрироватьСтатистикуКонфигурации ИЛИ  ПараметрыЦентраМониторинга.РегистрироватьНастройкуКонфигурации Тогда
		РегистрыСведений.СтатистикаКонфигурации.ОчиститьСтатистикуКонфигурации();
		
		ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
		Если ОценкаПроизводительностиСуществует Тогда
			МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
			ВремяНачала = МодульОценкаПроизводительности.НачатьЗамерВремени();
		КонецЕсли;
		
		СтатистикаКонфигурации = Неопределено;
		Если ПараметрыЦентраМониторинга.РегистрироватьСтатистикуКонфигурации Тогда
			РегистрыСведений.СтатистикаКонфигурации.ЗаписатьСтатистикуКонфигурации();
		КонецЕсли;
		
		Если ПараметрыЦентраМониторинга.РегистрироватьНастройкуКонфигурации Тогда
			СтатистикаКонфигурации = РегистрыСведений.СтатистикаКонфигурации.ЗаписатьНастройкиКонфигурации();			
		КонецЕсли;
				
		Если ОценкаПроизводительностиСуществует Тогда
			МодульОценкаПроизводительности.ЗакончитьЗамерВремени("ЦентрМониторингаСобратьСтатистикуКонфигурацииБазовая", ВремяНачала);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	// Собирает статистику по стандартным подсистемам конфигурации
	// в случае существования подсистемы оценки производительности
	// замеряет длительность выполнения.
	//
	#Область СтатистикаКонфигурацииСтандартныеПодсистемы
	
	Если ПараметрыЦентраМониторинга.РегистрироватьСтатистикуКонфигурации Тогда
		Если ОценкаПроизводительностиСуществует Тогда
			ВремяНачала = МодульОценкаПроизводительности.НачатьЗамерВремени();
		КонецЕсли;
		
		РазделениеПоОбластямДанныхВключено = РазделениеПоОбластямДанныхВключено();
		Если РазделениеПоОбластямДанныхВключено Тогда
			ОбластиДанныхРезультатЗапроса = РегистрыСведений.СтатистикаКонфигурации.ПолучитьОбластиДанныхРезультатЗапроса();
			Выборка = ОбластиДанныхРезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбластьДанныхСтрока = Строка(Выборка.ОбластьДанных);
				ОбластьДанныхСсылка = РегистрыСведений.ОбластиСтатистики.ПолучитьСсылку(ОбластьДанныхСтрока);
				Если РегистрыСведений.ОбластиСтатистики.СобиратьСтатистикуКонфигурации(ОбластьДанныхСтрока) Тогда
					Попытка
						ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Выборка.ОбластьДанных);
					Исключение
						Инфо = ИнформацияОбОшибке();
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Центр мониторинга.Статистика конфигурации переопределяемая'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						,,
						НСтр("ru = 'Не удалось установить разделение сеанса.Область данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + " = " + Формат(Выборка.ОбластьДанных, "ЧГ=0")
						+Символы.ПС + ПодробноеПредставлениеОшибки(Инфо));
						
						ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
						Продолжить;
					КонецПопытки;
					СтандартныеПодсистемыСервер.СобратьСтатистикуКонфигурации();
					ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтандартныеПодсистемыСервер.СобратьСтатистикуКонфигурации();
		КонецЕсли;
				
		Если ОценкаПроизводительностиСуществует Тогда
			МодульОценкаПроизводительности.ЗакончитьЗамерВремени("ЦентрМониторингаСобратьСтатистикуКонфигурацииСтандартныеПодсистемы", ВремяНачала);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	// Собирает переопределенную статистику по конфигурации
	// в случае существования подсистемы оценки производительности
	// замеряет длительность выполнения.
	//
	#Область СтатистикаКонфигурацииПереопределяемая
	
	Если ПараметрыЦентраМониторинга.РегистрироватьСтатистикуКонфигурации Тогда
		Если ОценкаПроизводительностиСуществует Тогда
			ВремяНачала = МодульОценкаПроизводительности.НачатьЗамерВремени();
		КонецЕсли;
		
		РазделениеПоОбластямДанныхВключено = РазделениеПоОбластямДанныхВключено();
		Если РазделениеПоОбластямДанныхВключено Тогда
			ОбластиДанныхРезультатЗапроса = РегистрыСведений.СтатистикаКонфигурации.ПолучитьОбластиДанныхРезультатЗапроса();
			Выборка = ОбластиДанныхРезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбластьДанныхСтрока = Строка(Выборка.ОбластьДанных);
				ОбластьДанныхСсылка = РегистрыСведений.ОбластиСтатистики.ПолучитьСсылку(ОбластьДанныхСтрока);
				Если РегистрыСведений.ОбластиСтатистики.СобиратьСтатистикуКонфигурации(ОбластьДанныхСтрока) Тогда
					Попытка
						ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Выборка.ОбластьДанных);
					Исключение
						Инфо = ИнформацияОбОшибке();
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Центр мониторинга.Статистика конфигурации переопределяемая'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						,,
						НСтр("ru = 'Не удалось установить разделение сеанса.Область данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + " = " + Формат(Выборка.ОбластьДанных, "ЧГ=0")
						+Символы.ПС + ПодробноеПредставлениеОшибки(Инфо));
						
						ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
						Продолжить;
					КонецПопытки;
					ЦентрМониторингаПереопределяемый.ПриСбореПоказателейСтатистикиКонфигурации();
					ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЦентрМониторингаПереопределяемый.ПриСбореПоказателейСтатистикиКонфигурации();
		КонецЕсли;
		
		Если ОценкаПроизводительностиСуществует Тогда
			МодульОценкаПроизводительности.ЗакончитьЗамерВремени("ЦентрМониторингаСобратьСтатистикуКонфигурацииПереопределяемая", ВремяНачала);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры

#КонецОбласти

#Область РаботаСПакетыДляОтправки

Процедура СформироватьПакетДляОтправки()
	ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
		ВремяНачала = МодульОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	ТекДата = ТекущаяУниверсальнаяДата();
	
	ПараметрыЦентраМониторинга = ПолучитьПараметрыЦентраМониторинга();
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДатаНачала", Дата(1,1,1) + Цел((ПараметрыЦентраМониторинга.ДатаКрайнегоПакета - Дата(1,1,1))/ПараметрыЦентраМониторинга.ПериодУдаления) * ПараметрыЦентраМониторинга.ПериодУдаления);
	Параметры.Вставить("ДатаОкончания", Дата(1,1,1) + Цел((ТекДата - Дата(1,1,1))/ПараметрыЦентраМониторинга.ПериодУдаления) * ПараметрыЦентраМониторинга.ПериодУдаления - 1);
	Параметры.Вставить("ТопДамповКоличество", 5);
	Параметры.Вставить("TopApdex", ПараметрыЦентраМониторинга.TopApdex);
	Параметры.Вставить("TopApdexTech", ПараметрыЦентраМониторинга.TopApdexTech);
	Параметры.Вставить("ПериодУдаления", ПараметрыЦентраМониторинга.ПериодУдаления);
		
	НачатьТранзакцию();
	Попытка
		JSONСтруктура = СформироватьСтруктуруJSONДляОтправки(Параметры);
		РегистрыСведений.ПакетыДляОтправки.ЗаписатьНовыйПакет(ТекДата, JSONСтруктура, ПараметрыЦентраМониторинга.НомерКрайнегоПакета + 1);
		
		ПараметрыЦентраМониторингаЗапись = Новый Структура("ДатаКрайнегоПакета, НомерКрайнегоПакета");
		ПараметрыЦентраМониторингаЗапись.ДатаКрайнегоПакета = ТекДата;
		ПараметрыЦентраМониторингаЗапись.НомерКрайнегоПакета = ПараметрыЦентраМониторинга.НомерКрайнегоПакета + 1;
		УстановитьПараметрыЦентраМониторинга(ПараметрыЦентраМониторингаЗапись);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Центр мониторинга.Формирование пакета для отправки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ЦентрМониторингаСлужебный,,Ошибка);
		ВызватьИсключение Ошибка;
	КонецПопытки;
	
	РегистрыСведений.ПакетыДляОтправки.УдалитьСтарыеПакеты();
	
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности.ЗакончитьЗамерВремени("ЦентрМониторингаСформироватьПакетДляОтправки", ВремяНачала);
	КонецЕсли;
КонецПроцедуры

Функция ОтправитьДанныеМониторинга()
	Параметры = ПолучитьПараметрыСервисаОтправки();
	
	ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
		ВремяНачала = МодульОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	НомераПакетовДляОтправки = РегистрыСведений.ПакетыДляОтправки.ПолучитьНомераПакетов();
	Для Каждого НомерПакета Из НомераПакетовДляОтправки Цикл
		Пакет = РегистрыСведений.ПакетыДляОтправки.ПолучитьПакет(НомерПакета);
		Если Пакет <> Неопределено Тогда
						
			HASH = Пакет.ХешПакета;
			PACKET_NUMBER = Формат(Пакет.НомерПакета, "ЧН=0; ЧГ=0");
			GUID = Строка(Параметры.ИдентификаторИнформационнойБазы);
			
			Если Параметры.ЗащищенноеСоединение Тогда
				ТипСоединения = "https";
			Иначе
				ТипСоединения = "http";
			КонецЕсли;
												
			АдресРесурса = Параметры.АдресРесурса;
			Если Прав(АдресРесурса, 1) <> "/" Тогда
				АдресРесурса = АдресРесурса + "/";
			КонецЕсли;
			АдресРесурса = АдресРесурса + GUID + "/" + PACKET_NUMBER + "/" + HASH;
			
			
			СтрокаСоединения = ТипСоединения + "://" + Параметры.Сервер + ":" + Параметры.Порт + АдресРесурса;
			
			HTTPОтвет = HTTPСервисОтправитьКакТекст(Параметры.Сервер, АдресРесурса, Пакет.ТелоПакета, Параметры.Порт, Параметры.ЗащищенноеСоединение);
			
			Если HTTPОтвет.КодСостояния = 200 Тогда
				УстановитьПараметрыОтправки(СтрокаJSONВСтруктуру(HTTPОтвет.Тело));
				РегистрыСведений.ПакетыДляОтправки.УдалитьПакет(НомерПакета);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности.ЗакончитьЗамерВремени("ЦентрМониторингаОтправитьДанныеМониторинга", ВремяНачала);
	КонецЕсли;
	
	Возврат HTTPОтвет;
КонецФункции

#КонецОбласти

#Область РаботаСПараметрамиЦентраМониторинга

Функция ВыполнятьЗамерыПроизводительности()
	ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительностиВызовСервераПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиВызовСервераПовтИсп");
		ВыполнятьЗамерыПроизводительности = МодульОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности();
	Иначе
		ВыполнятьЗамерыПроизводительности = Неопределено;
	КонецЕсли;
	
	Возврат ВыполнятьЗамерыПроизводительности;
КонецФункции

Функция ПолучитьПараметрыПоУмолчанию()
	ПараметрыКонстанты = Новый Структура;
	
	// Параметры сбора информации о системе.
	//
	ПараметрыКонстанты.Вставить("ВключитьЦентрМониторинга", Ложь);
	
	// Признак центра обработки
	// Истина	- сторонний разработчик.
	//
	ПараметрыКонстанты.Вставить("ЦентрОбработкиИнформацииОПрограмме", Ложь);
	
	// Идентификатор информационной базы.
	//
	ПараметрыКонстанты.Вставить("ИдентификаторИнформационнойБазы", Новый УникальныйИдентификатор());
	
	// Параметры сбора информации о системе.
	//
	ПараметрыКонстанты.Вставить("РегистрироватьИнформациюОСистеме", Ложь);
	
	// Параметры сбора информации о версиях подсистем.
	//
	ПараметрыКонстанты.Вставить("РегистрироватьВерсииПодсистем", Ложь);
	
	// Параметры сбора дампов
	//
	ПараметрыКонстанты.Вставить("РегистрацияДамповСледующееФормирование", Дата(1,1,1));
	ПараметрыКонстанты.Вставить("РегистрацияДамповПериодФормирования", 600);
	ПараметрыКонстанты.Вставить("РегистрироватьДампы", Ложь);
	
	// Параметры сбора бизнес статистики.
	//
	ПараметрыКонстанты.Вставить("ПериодАгрегацииМалый", 60);
	ПараметрыКонстанты.Вставить("ПериодАгрегации", 600);
	ПараметрыКонстанты.Вставить("ПериодУдаления", 3600);
	ПараметрыКонстанты.Вставить("ГраницаАгрегирования", Дата(1,1,1));
	ПараметрыКонстанты.Вставить("БизнесСтатистикаСледующееФормирование", Дата(1,1,1));
	ПараметрыКонстанты.Вставить("БизнесСтатистикаПериодФормирования", 600);
	ПараметрыКонстанты.Вставить("РегистрироватьБизнесСтатистику", Ложь);
	
	// Параметры сбора статистики конфигурации.
	//
	ПараметрыКонстанты.Вставить("СтатистикаКонфигурацииСледующееФормирование", Дата(1,1,1));
	ПараметрыКонстанты.Вставить("СтатистикаКонфигурацииПериодФормирования", 86400);
	ПараметрыКонстанты.Вставить("РегистрироватьСтатистикуКонфигурации", Ложь);
	ПараметрыКонстанты.Вставить("РегистрироватьНастройкуКонфигурации", Ложь);
	
	// Параметры сбора производительности.
	// 	Если параметр ОценкаПроизводительностиВключена равен нулю, тогда выключена.
	// 	Если параметр ОценкаПроизводительностиВключена равна единице, тогда включена центром мониторинга.
	// 	Если параметр ОценкаПроизводительностиВключена равна двум, тогда включена оценкой производительности.
	//
	ПараметрыКонстанты.Вставить("ОценкаПроизводительностиВключена", 0);
	
	ПараметрыКонстанты.Вставить("РегистрироватьПроизводительность", Ложь);
	ПараметрыКонстанты.Вставить("TopApdex", 10);
	ПараметрыКонстанты.Вставить("РегистрироватьПроизводительностьТехнологическую", Ложь);
	ПараметрыКонстанты.Вставить("TopApdexTech", 10);
	ПараметрыКонстанты.Вставить("ВыполнятьЗамерыПроизводительности", ВыполнятьЗамерыПроизводительности());
	
	// Параметры отправки данных
	//
	ПараметрыКонстанты.Вставить("ОтправкаДанныхСледующееФормирование", Дата(1,1,1));
	ПараметрыКонстанты.Вставить("ОтправкаДанныхПериодФормирования", 607800);
	ПараметрыКонстанты.Вставить("ДатаКрайнегоПакета", Дата(1,1,1));
	ПараметрыКонстанты.Вставить("НомерКрайнегоПакета", 0);
	ПараметрыКонстанты.Вставить("ПакетовДляОтправки", 3);
	ПараметрыКонстанты.Вставить("Сервер", "pult.1c.ru");
	ПараметрыКонстанты.Вставить("АдресРесурса", "pult/v1/packet/");
	ПараметрыКонстанты.Вставить("Порт", 443);
	ПараметрыКонстанты.Вставить("ЗащищенноеСоединение", Истина);
	
	Возврат ПараметрыКонстанты; 
КонецФункции

Функция ПолучитьПараметрыЦентраМониторинга(Параметры = Неопределено) Экспорт
	ПараметрыКонстанты = Константы.ПараметрыЦентраМониторинга.Получить().Получить();
	Если ПараметрыКонстанты = Неопределено Тогда
		ПараметрыКонстанты = Новый Структура;
	КонецЕсли;
	
	ПараметрыПоУмолчанию = ПолучитьПараметрыПоУмолчанию();
	
	Для Каждого ТекПараметр Из ПараметрыПоУмолчанию Цикл
		Если НЕ ПараметрыКонстанты.Свойство(ТекПараметр.Ключ) Тогда
			ПараметрыКонстанты.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыКонстанты = Неопределено Тогда
		ПараметрыКонстанты = ПараметрыПоУмолчанию;
	КонецЕсли;
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыКонстанты;
	Иначе
		Если ТипЗнч(Параметры) = Тип("Структура") Тогда
			Для Каждого ТекПараметр Из Параметры Цикл
				Параметры[ТекПараметр.Ключ] = ПараметрыКонстанты[ТекПараметр.Ключ];
			КонецЦикла;
		ИначеЕсли ТипЗнч(Параметры) = Тип("Строка") Тогда
			Параметры = ПараметрыКонстанты[Параметры];
		КонецЕсли;		
	КонецЕсли;
	
	ПараметрыКонстанты.Вставить("ВыполнятьЗамерыПроизводительности", ВыполнятьЗамерыПроизводительности());
			
	Возврат Параметры;
КонецФункции

Функция УстановитьПараметрыОтправки(Параметры)
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("ОценкаПроизводительностиВключена");
	ПараметрыОтправки.Вставить("ВыполнятьЗамерыПроизводительности");
	ПолучитьПараметрыЦентраМониторинга(ПараметрыОтправки);
	
	ПараметрыОтправки.Вставить("РегистрироватьИнформациюОСистеме", Ложь);
	ПараметрыОтправки.Вставить("РегистрироватьВерсииПодсистем", Ложь);
	ПараметрыОтправки.Вставить("РегистрироватьДампы", Ложь);
	ПараметрыОтправки.Вставить("РегистрироватьБизнесСтатистику", Ложь);
	ПараметрыОтправки.Вставить("РегистрироватьСтатистикуКонфигурации", Ложь);
	ПараметрыОтправки.Вставить("РегистрироватьНастройкуКонфигурации", Ложь);
	ПараметрыОтправки.Вставить("РегистрироватьПроизводительность", Ложь);
	ПараметрыОтправки.Вставить("РегистрироватьПроизводительностьТехнологическую", Ложь);
	
	СоответствиеПараметров = Новый Структура;
	СоответствиеПараметров.Вставить("info", "РегистрироватьИнформациюОСистеме");
	СоответствиеПараметров.Вставить("versions", "РегистрироватьВерсииПодсистем");
	СоответствиеПараметров.Вставить("dumps", "РегистрироватьДампы");
	СоответствиеПараметров.Вставить("business", "РегистрироватьБизнесСтатистику");
	СоответствиеПараметров.Вставить("config", "РегистрироватьСтатистикуКонфигурации");
	СоответствиеПараметров.Вставить("options", "РегистрироватьНастройкуКонфигурации");
	СоответствиеПараметров.Вставить("perf", "РегистрироватьПроизводительность");
	СоответствиеПараметров.Вставить("internal_perf", "РегистрироватьПроизводительностьТехнологическую");
	
	Настройки = Параметры.packetProperties;
	Для Каждого ТекНастройка Из Настройки Цикл
		Если СоответствиеПараметров.Свойство(ТекНастройка) Тогда
			Ключ = СоответствиеПараметров[ТекНастройка];
			
			Если ПараметрыОтправки.Свойство(Ключ) Тогда
				ПараметрыОтправки[Ключ] = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.Свойство("settings") Тогда
		НастройкиНовые = Параметры.settings;
		НастройкиНовые = СтрЗаменить(НастройкиНовые, ";", Символы.ПС);
		НастройкиПоУмолчанию = ПолучитьПараметрыПоУмолчанию();
		Для ТекСтрока = 1 По СтрЧислоСтрок(НастройкиНовые) Цикл
			ТекНастройка = СтрПолучитьСтроку(НастройкиНовые, ТекСтрока);
			ТекНастройка = СтрЗаменить(ТекНастройка, "=", Символы.ПС);
			
			Ключ = СтрПолучитьСтроку(ТекНастройка, 1);
			Значение = СтрПолучитьСтроку(ТекНастройка, 2);
			
			Если НастройкиПоУмолчанию.Свойство(Ключ) Тогда
				Если ТипЗнч(НастройкиПоУмолчанию[Ключ]) = Тип("Число") Тогда
					ПараметрыОтправки.Вставить(Ключ, Число(Значение));
				ИначеЕсли ТипЗнч(НастройкиПоУмолчанию[Ключ]) = Тип("Строка") Тогда
					ПараметрыОтправки.Вставить(Ключ, Значение);
				ИначеЕсли ТипЗнч(НастройкиПоУмолчанию[Ключ]) = Тип("Булево") Тогда
					ПараметрыОтправки.Вставить(Ключ, Булево(Значение));
				ИначеЕсли ТипЗнч(НастройкиПоУмолчанию[Ключ]) = Тип("Дата") Тогда
					ПараметрыОтправки.Вставить(Ключ, Дата(Значение));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("deliveryIntervalHours") Тогда
		ПараметрыОтправки.Вставить("ОтправкаДанныхПериодФормирования", Параметры.deliveryIntervalHours * 60 * 60);
	КонецЕсли;
		
	Если ПараметрыОтправки["РегистрироватьПроизводительность"] ИЛИ ПараметрыОтправки["РегистрироватьПроизводительностьТехнологическую"] Тогда
		// Подсистемы оценки производительности нет.
		Если ПараметрыОтправки.ВыполнятьЗамерыПроизводительности = Неопределено Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 0;
		// Выключена.
		ИначеЕсли ПараметрыОтправки.ОценкаПроизводительностиВключена = 0 И НЕ ПараметрыОтправки.ВыполнятьЗамерыПроизводительности Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 1;
		// Включена оценкой производительности.
		ИначеЕсли ПараметрыОтправки.ОценкаПроизводительностиВключена = 0 И ПараметрыОтправки.ВыполнятьЗамерыПроизводительности Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 2;
		// Включена центром мониторинга.
		ИначеЕсли ПараметрыОтправки.ОценкаПроизводительностиВключена = 1 И НЕ ПараметрыОтправки.ВыполнятьЗамерыПроизводительности Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 1;
		// Включена центром мониторинга.
		ИначеЕсли ПараметрыОтправки.ОценкаПроизводительностиВключена = 1 И ПараметрыОтправки.ВыполнятьЗамерыПроизводительности Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 1;
		// Включен был оценкой производительности, но потом выключен.
		ИначеЕсли ПараметрыОтправки.ОценкаПроизводительностиВключена = 2 И НЕ ПараметрыОтправки.ВыполнятьЗамерыПроизводительности Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 0;
		// Включен оценкой производительности.
		ИначеЕсли ПараметрыОтправки.ОценкаПроизводительностиВключена = 2 И ПараметрыОтправки.ВыполнятьЗамерыПроизводительности Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 2;
		КонецЕсли;	
	Иначе
		// Подсистемы оценки производительности нет.
		Если ПараметрыОтправки.ВыполнятьЗамерыПроизводительности = Неопределено Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 0;
		// Выключена.
		ИначеЕсли ПараметрыОтправки.ОценкаПроизводительностиВключена = 0 И НЕ ПараметрыОтправки.ВыполнятьЗамерыПроизводительности Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 0;
		// Включена оценкой производительности.
		ИначеЕсли ПараметрыОтправки.ОценкаПроизводительностиВключена = 0 И ПараметрыОтправки.ВыполнятьЗамерыПроизводительности Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 2;
		// Включена центром мониторинга.
		ИначеЕсли ПараметрыОтправки.ОценкаПроизводительностиВключена = 1 И НЕ ПараметрыОтправки.ВыполнятьЗамерыПроизводительности Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 0;
		// Включена центром мониторинга.
		ИначеЕсли ПараметрыОтправки.ОценкаПроизводительностиВключена = 1 И ПараметрыОтправки.ВыполнятьЗамерыПроизводительности Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 0;
		// Включен был оценкой производительности, но потом выключен.
		ИначеЕсли ПараметрыОтправки.ОценкаПроизводительностиВключена = 2 И НЕ ПараметрыОтправки.ВыполнятьЗамерыПроизводительности Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 0;
		// Включен оценкой производительности.
		ИначеЕсли ПараметрыОтправки.ОценкаПроизводительностиВключена = 2 И ПараметрыОтправки.ВыполнятьЗамерыПроизводительности Тогда
			ПараметрыОтправки.ОценкаПроизводительностиВключена = 2;
		КонецЕсли;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Если ПараметрыОтправки.ОценкаПроизводительностиВключена = 0 И НЕ ПараметрыОтправки.ВыполнятьЗамерыПроизводительности = Неопределено Тогда
			МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
			МодульОценкаПроизводительности.ВключитьЗамерыПроизводительности(Ложь);
		ИначеЕсли ПараметрыОтправки.ОценкаПроизводительностиВключена = 1 И НЕ ПараметрыОтправки.ВыполнятьЗамерыПроизводительности = Неопределено Тогда
			МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");	
			МодульОценкаПроизводительности.ВключитьЗамерыПроизводительности(Истина);
		КонецЕсли;
		
		УстановитьПараметрыЦентраМониторинга(ПараметрыОтправки);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Центр мониторинга.Установка параметров отправки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ЦентрМониторингаСлужебный,,Ошибка);
		ВызватьИсключение Ошибка;
	КонецПопытки;
	
	Возврат ПараметрыОтправки;
	
КонецФункции

Функция УстановитьПараметрыЦентраМониторинга(НовыеПараметры)
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.ПараметрыЦентраМониторинга");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка.Заблокировать();
		Параметры = ПолучитьПараметрыЦентраМониторинга();
		
		Если НовыеПараметры.Свойство("ВыполнятьЗамерыПроизводительности") Тогда
			НовыеПараметры.Удалить("ВыполнятьЗамерыПроизводительности");
		КонецЕсли;
				
		Для Каждого ТекПараметр Из НовыеПараметры Цикл
			Если НЕ Параметры.Свойство(ТекПараметр.Ключ) Тогда
				Параметры.Вставить(ТекПараметр.Ключ);
			КонецЕсли;
			
			Параметры[ТекПараметр.Ключ] = ТекПараметр.Значение;
		КонецЦикла;
		
		Хранилище = Новый ХранилищеЗначения(Параметры);
		
		Константы.ПараметрыЦентраМониторинга.Установить(Хранилище);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Центр мониторинга.Установка параметров центра мониторинга'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ЦентрМониторингаСлужебный,,Ошибка);
		ВызватьИсключение Ошибка;
	КонецПопытки;
КонецФункции

Функция УдалитьПараметрыЦентраМониторинга()
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.ПараметрыЦентраМониторинга");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка.Заблокировать();
		Параметры = Новый Структура;
		

		Хранилище = Новый ХранилищеЗначения(Параметры);
		
		Константы.ПараметрыЦентраМониторинга.Установить(Хранилище);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Центр мониторинга.Удалить параметры центра мониторинга'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ЦентрМониторингаСлужебный,,Ошибка);
		ВызватьИсключение Ошибка;
	КонецПопытки;
КонецФункции

Функция УстановитьПараметрЦентраМониторинга(Параметр, Значение)
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.ПараметрыЦентраМониторинга");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Параметры = ПолучитьПараметрыЦентраМониторинга();
		
		Если НЕ Параметры.Свойство(Параметр) Тогда
			Параметры.Вставить(Параметр);
		КонецЕсли;
		
		Параметры[Параметр] = Значение;
		
		Хранилище = Новый ХранилищеЗначения(Параметры);
		
		Константы.ПараметрыЦентраМониторинга.Установить(Хранилище);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Центр мониторинга.Установка параметров центра мониторинга'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ЦентрМониторингаСлужебный,,Ошибка);
		ВызватьИсключение Ошибка;
	КонецПопытки;
КонецФункции

Функция ПолучитьПараметрыСервисаОтправки()
	ПараметрыСервиса = Новый Структура;
	
	ПараметрыСервиса.Вставить("ВключитьЦентрМониторинга");
	ПараметрыСервиса.Вставить("ЦентрОбработкиИнформацииОПрограмме");
	ПараметрыСервиса.Вставить("ИдентификаторИнформационнойБазы");
	ПараметрыСервиса.Вставить("Сервер");
	ПараметрыСервиса.Вставить("АдресРесурса");
	ПараметрыСервиса.Вставить("Порт");
	ПараметрыСервиса.Вставить("ЗащищенноеСоединение");
	
	ПолучитьПараметрыЦентраМониторинга(ПараметрыСервиса);
	
	Если ПараметрыСервиса.ВключитьЦентрМониторинга И НЕ ПараметрыСервиса.ЦентрОбработкиИнформацииОПрограмме Тогда
		ПараметрыСервисаПоУмолчанию = ПолучитьПараметрыПоУмолчанию();
		
		ПараметрыСервиса.Вставить("Сервер", ПараметрыСервисаПоУмолчанию.Сервер);
		ПараметрыСервиса.Вставить("АдресРесурса", ПараметрыСервисаПоУмолчанию.АдресРесурса);
		ПараметрыСервиса.Вставить("Порт", ПараметрыСервисаПоУмолчанию.Порт);
		ПараметрыСервиса.Вставить("ЗащищенноеСоединение", ПараметрыСервисаПоУмолчанию.ЗащищенноеСоединение);
	КонецЕсли;
	
	ПараметрыСервиса.Удалить("ВключитьЦентрМониторинга");
	ПараметрыСервиса.Удалить("ЦентрОбработкиИнформацииОПрограмме");
	
	Возврат ПараметрыСервиса;
КонецФункции

#КонецОбласти

#Область РаботаСФайломНастроек

Функция ПолучитьКаталогДампов()
	КаталогНастроек = ПолучитьКаталогНастроекТехнологическогоЖурнала();
	КаталогДампов = НайтиКаталогДампов(КаталогНастроек);
			
	Возврат КаталогДампов;
КонецФункции

Функция СформироватьПутьСРазделителем(Путь)
	Если ЗначениеЗаполнено(Путь) Тогда
		РазделительПути = ПолучитьРазделительПутиСервера();
		Если Прав(Путь, 1) <> РазделительПути Тогда
			Путь = Путь + РазделительПути;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Путь;
КонецФункции

Функция НайтиКаталогДампов(КаталогНастроек) 
	КаталогДампов = Новый Структура("Путь, УдалятьДампы", "", Ложь);
	
	ИмяФайлаНастроек = "logcfg.xml";
	ПутьКаталога = СформироватьПутьСРазделителем(КаталогНастроек.Путь);
	
	Файл = Новый Файл(ПутьКаталога + ИмяФайлаНастроек);
	Если Файл.Существует() Тогда
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя, Новый ПараметрыЧтенияXML(,,,,,,,Истина, Истина));
			Префикс = ?(ЗначениеЗаполнено(ЧтениеXML.Префикс), ЧтениеXML.Префикс + ":", ЧтениеXML.Префикс);
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ИмеетИмя И ВРЕГ(ЧтениеXML.Имя) = "DUMP" Тогда
					ПараметрыДампов = Новый Структура;
					Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
						Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
							ПараметрыДампов.Вставить(ЧтениеXML.ЛокальноеИмя, ЧтениеXML.Значение);						
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Исключение
			Сообщение = НСтр("ru='Ошибка чтения файла настроек технологического журнала'");
			Сообщение = Сообщение + " """ +Файл.ПолноеИмя + """." + Символы.ПС;
			Сообщение = Сообщение + НСтр("ru='Скорее всего файл поврежден. Регистрация дампов не возможна. Удалите поврежденный файл или восстановите настройки.'");
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Центр мониторинга'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение,,,Сообщение);
			
			КаталогДампов.Путь = Неопределено;
			Возврат КаталогДампов;
		КонецПопытки;
		
		Если ПараметрыДампов <> Неопределено Тогда
			Если НЕ ПараметрыДампов.Свойство("location") ИЛИ НЕ ПараметрыДампов.Свойство("create") ИЛИ НЕ ПараметрыДампов.Свойство("type") Тогда
				Сообщение = НСтр("ru='Ошибка секции сбора дампов в файле настроек технологического журнала'");
				Сообщение = Сообщение + " """ +Файл.ПолноеИмя + """." + Символы.ПС;
				Сообщение = Сообщение + НСтр("ru='Регистрация дампов не возможна. Удалите файл или восстановите настройки.'");
				ЧтениеXML.Закрыть();
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Центр мониторинга'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение,,,Сообщение);
				
				КаталогДампов.Путь = Неопределено;
				Возврат КаталогДампов;
			КонецЕсли;
		КонецЕсли;
				
		Если ПараметрыДампов <> Неопределено Тогда
			КаталогДампов.Путь = СформироватьПутьСРазделителем(ПараметрыДампов.Location);
			Если ПараметрыДампов.type = "0" ИЛИ СтрНайти(КаталогДампов.Путь, "80af5716-b134-4b1c-a38d-4658d1ac4196") > 0 Тогда
				КаталогДампов.УдалятьДампы = Истина;
			КонецЕсли;
			ЧтениеXML.Закрыть();
			
			Если СтрНайти(КаталогДампов.Путь, "80af5716-b134-4b1c-a38d-4658d1ac4196") > 0 Тогда
				Если НЕ ПараметрыДампов.Свойство("externaldump") Тогда
					СоздатьСекциюСбораДампов(Файл, ЧтениеXML, КаталогДампов);
				ИначеЕсли ПараметрыДампов.externaldump <> "1" Тогда
					СоздатьСекциюСбораДампов(Файл, ЧтениеXML, КаталогДампов);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЧтениеXML.Закрыть();
			СоздатьСекциюСбораДампов(Файл, ЧтениеXML, КаталогДампов);
		КонецЕсли;
			
	Иначе
		КаталогДампов.Путь = СоздатьФайлНастроекСбораДампов(ПутьКаталога);
		КаталогДампов.УдалятьДампы = Истина;
	КонецЕсли;
	
	Возврат КаталогДампов;
КонецФункции

Функция СоздатьСекциюСбораДампов(Файл, ЧтениеXML, КаталогДампов)
	ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя, Новый ПараметрыЧтенияXML(,,,,,,,Ложь, Ложь));
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ДокументDOM.Нормализовать();
	ЧтениеXML.Закрыть();
		Если ДокументDOM.ЕстьДочерниеУзлы() Тогда
		ПервыйДочерний = ДокументDOM.ПервыйДочерний;
		Если ВРЕГ(ПервыйДочерний.ИмяУзла) = "CONFIG" Тогда
			КаталогДампов.Путь = СформироватьПутьСРазделителем(СформироватьПутьСРазделителем(КаталогВременныхФайлов() + "Dumps") + "80af5716-b134-4b1c-a38d-4658d1ac4196");
			КаталогДампов.УдалятьДампы = Истина;
			
			ЭлементыДампы = ДокументDOM.ПолучитьЭлементыПоИмени("dump");
			Если ЭлементыДампы.Количество() = 0 Тогда
				
				ЭлементДампы = ДокументDOM.СоздатьЭлемент("dump");
				ЭлементДампы.УстановитьАтрибут("location", КаталогДампов.Путь); 
				ЭлементДампы.УстановитьАтрибут("create", "1");
				ЭлементДампы.УстановитьАтрибут("type", "0");
				ЭлементДампы.УстановитьАтрибут("externaldump", "1");
				ПервыйДочерний.ДобавитьДочерний(ЭлементДампы);
			Иначе
				Для Каждого ТекЭлемент Из ЭлементыДампы Цикл
					ТекЭлемент.УстановитьАтрибут("externaldump", "1");
				КонецЦикла;
			КонецЕсли;
			
			Попытка
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьDOM = Новый ЗаписьDOM; 
				ЗаписьXML.ОткрытьФайл(Файл.ПолноеИмя, Новый ПараметрыЗаписиXML(,,Истина,Истина));
				ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
				ЗаписьXML.Закрыть();
			Исключение
				Сообщение = НСтр("ru='Ошибка записи файла настроек технологического журнала. Регистрация дампов не возможна.'");
				Сообщение = Сообщение + " """ +Файл.ПолноеИмя + """." + Символы.ПС;
				Сообщение = Сообщение + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Центр мониторинга - регистрация дампов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение,,,Сообщение);
				
				КаталогДампов.Путь = Неопределено;
				Возврат КаталогДампов;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция СоздатьФайлНастроекСбораДампов(ПутьКаталога)
	ИмяФайлаНастроек = "logcfg.xml";
	
	КаталогДампов = СформироватьПутьСРазделителем(СформироватьПутьСРазделителем(КаталогВременныхФайлов() + "Dumps") + "80af5716-b134-4b1c-a38d-4658d1ac4196");
	
	Попытка
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПутьКаталога + ИмяФайлаНастроек);
		СборДампов =
		"<config xmlns=""http://v8.1c.ru/v8/tech-log"">
		|	<dump location=""" + КаталогДампов + """ create=""1"" type=""0"" externaldump=""1""/>
		|</config>";
		ЗаписьXML.ЗаписатьБезОбработки(СборДампов);
		ЗаписьXML.Закрыть();
	Исключение
		Сообщение = НСтр("ru='Ошибка создания файла настроек технологического журнала. Регистрация дампов не возможна.'");
		Сообщение = Сообщение + " """ +ПутьКаталога + ИмяФайлаНастроек + """." + Символы.ПС;
		Сообщение = Сообщение + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Центр мониторинга'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение,,,Сообщение);
		
		КаталогДампов = Неопределено;
		
	КонецПопытки;
	
	Возврат КаталогДампов;
КонецФункции

Функция ПолучитьКаталогНастроекТехнологическогоЖурнала()
	КаталогНастроек = Новый Структура("Путь, Существует, ОписаниеОшибки", "", Ложь, "");
	
	// Каталоги в которых осуществляли поиск, необходим как защита от зацикливания.
	КаталогиНастроек = Новый Массив;
	
	ИмяФайлаНастроек = "logcfg.xml";
	ИмяФайлаКонфигурацииНастроек = "conf.cfg";
	
	КаталогПрограммы = СформироватьПутьСРазделителем(КаталогПрограммы());
		
	ПоискКаталога = Истина;
	Счетчик = 0;
	ПутьКаталога = СформироватьПутьСРазделителем(КаталогПрограммы + "conf");
	Пока ПоискКаталога = Истина Цикл
		// Проверяем, не искали ли в текущем каталоге (защита от зацикливания).
		Если КаталогиНастроек.Найти(ПутьКаталога) <> Неопределено Тогда
			КаталогНастроек.Путь = "";
			КаталогНастроек.Существует = Ложь;
			КаталогНастроек.ОписаниеОшибки = НСтр("ru = 'Обнаружена циклическая ссылка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
			ПоискКаталога = Ложь;
		Иначе
			ПолноеИмяФайлаНастроек = ПутьКаталога + ИмяФайлаНастроек;
			ФайлНастроек = Новый Файл(ПолноеИмяФайлаНастроек);
			Если ФайлНастроек.Существует() Тогда
				КаталогНастроек.Путь = ПутьКаталога;
				КаталогНастроек.Существует = Истина;
				КаталогНастроек.ОписаниеОшибки = "";
				
				ПоискКаталога = Ложь;
			Иначе
				КаталогиНастроек.Добавить(ПутьКаталога);
				
				ПолноеИмяФайлаКонфигурацииНастроек = ПутьКаталога + ИмяФайлаКонфигурацииНастроек;
				ФайлКонфигурацииНастроек = Новый Файл(ПолноеИмяФайлаКонфигурацииНастроек);
				Если ФайлКонфигурацииНастроек.Существует() Тогда
					ПутьКаталога = ПолучитьКаталогИзФайлаКонфигурацииНастроек(ФайлКонфигурацииНастроек);
					Если ПутьКаталога.Существует Тогда
						ПутьКаталога = СформироватьПутьСРазделителем(ПутьКаталога.Путь);
					Иначе
						КаталогНастроек.Путь = ПутьКаталога.Путь;
						КаталогНастроек.Существует = ПутьКаталога.Существует;
						КаталогНастроек.ОписаниеОшибки = ПутьКаталога.ОписаниеОшибки;
						
						ПоискКаталога = Ложь;
					КонецЕсли;
				Иначе
					КаталогНастроек.Путь = "";
					КаталогНастроек.Существует = Ложь;
					КаталогНастроек.ОписаниеОшибки = НСтр("ru = 'Не найден файл конфигурации настроек в каталоге'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + " " + ПутьКаталога;
					
					ПоискКаталога = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		Счетчик = Счетчик + 1;
		
		Если Счетчик >= 100 Тогда
			ПоискКаталога = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КаталогНастроек;
КонецФункции

Функция ПолучитьКаталогИзФайлаКонфигурацииНастроек(ФайлКонфигурацииНастроек)
	КаталогНастроек = Новый Структура("Путь, Существует, ОписаниеОшибки", "", Ложь, "");
	
	СтрокаПоиска = "ConfLocation=";
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);	
	
	Текст = Новый ЧтениеТекста(ФайлКонфигурацииНастроек.ПолноеИмя);
	Данные = Текст.Прочитать();
	
	ИндексПоиска = СтрНайти(Данные, СтрокаПоиска);
	Если ИндексПоиска > 0 Тогда
		ДанныеБуфер = Прав(Данные, СтрДлина(Данные) - (ИндексПоиска + ДлинаСтрокиПоиска - 1));
		ИндексПоиска = СтрНайти(ДанныеБуфер, Символы.ПС);
		Если ИндексПоиска > 0 Тогда
			КаталогНастроек.Путь = СформироватьПутьСРазделителем(Лев(ДанныеБуфер, ИндексПоиска - 1));
		Иначе
			КаталогНастроек.Путь = СформироватьПутьСРазделителем(ДанныеБуфер);
		КонецЕсли;
		КаталогНастроек.Существует = Истина;
		КаталогНастроек.ОписаниеОшибки = "";
	Иначе
		КаталогНастроек.Путь = СформироватьПутьСРазделителем(ФайлКонфигурацииНастроек.Путь);
		КаталогНастроек.Существует = Ложь;
		КаталогНастроек.ОписаниеОшибки = НСтр("ru = 'Не найдена секция ConfLocation в файле'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + " " + ФайлКонфигурацииНастроек.ПолноеИмя;
	КонецЕсли;
		
	Возврат КаталогНастроек;
КонецФункции

#КонецОбласти

#Область РаботаСДампами

Функция ОписаниеДампа(Знач ИмяФайла)
	ИмяФайла = СтрЗаменить(ИмяФайла, "_", Символы.ПС);
	
	СтруктураДампа = Новый Структура;
	Если СтрЧислоСтрок(ИмяФайла) = 3  Тогда
		СтруктураДампа.Вставить("Процесс", СтрПолучитьСтроку(ИмяФайла, 1));
		СтруктураДампа.Вставить("ВерсияПлатформы", СтрПолучитьСтроку(ИмяФайла, 2));
		СтруктураДампа.Вставить("Смещение", СтрПолучитьСтроку(ИмяФайла, 3));
	Иначе
		СисИнфо = Новый СистемнаяИнформация;
		СтруктураДампа.Вставить("Процесс", "userdump");
		СтруктураДампа.Вставить("ВерсияПлатформы", СисИнфо.ВерсияПриложения);
		СтруктураДампа.Вставить("Смещение", "ffffffff");
	КонецЕсли;
	
	Возврат СтруктураДампа;
КонецФункции

Функция ВерсияПлатформыВЧисло(Версия) Экспорт
	ВерсияПлатформы = СтрЗаменить(Версия, ".", Символы.ПС);
	ВерсияПлатформыЧисло = Число(Лев(СтрПолучитьСтроку(ВерсияПлатформы, 1) + "000000", 6)
		+ Лев(СтрПолучитьСтроку(ВерсияПлатформы, 2) + "000000", 6)
		+ Лев(СтрПолучитьСтроку(ВерсияПлатформы, 3) + "000000", 6)
		+ Лев(СтрПолучитьСтроку(ВерсияПлатформы, 4) + "000000", 6));
			
	Возврат ВерсияПлатформыЧисло;
КонецФункции

#КонецОбласти

#Область РаботаССистемнойИнформацией
Функция ПолучитьСистемнуюИнформацию()
	СисИнфо = Новый СистемнаяИнформация;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяКомпьютера", ХешMD5(ИмяКомпьютера()));
	Результат.Вставить("ВерсияОС", Строка(СисИнфо.ВерсияОС));
	Результат.Вставить("ВерсияПриложения", Строка(СисИнфо.ВерсияПриложения));
	Результат.Вставить("ИдентификаторКлиента", Строка(СисИнфо.ИдентификаторКлиента));
	Результат.Вставить("ОперативнаяПамять", Строка(СисИнфо.ОперативнаяПамять));
	Результат.Вставить("Процессор", Строка(СисИнфо.Процессор));
	Результат.Вставить("ТипПлатформы", Строка(СисИнфо.ТипПлатформы));
	Результат.Вставить("ТекущийЯзык", Строка(ТекущийЯзык()));
	Результат.Вставить("ТекущийКодЛокализации", Строка(ТекущийКодЛокализации()));
	Результат.Вставить("ТекущийЯзыкСистемы", Строка(ТекущийЯзыкСистемы()));
	Результат.Вставить("ТекущийРежимЗапуска", Строка(ТекущийРежимЗапуска()));
	Результат.Вставить("ЧасовойПоясСеанса", Строка(ЧасовойПоясСеанса()));
	
	Возврат Результат;
КонецФункции

Функция ВерсииПодсистем()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииПодсистем.ИмяПодсистемы КАК ИмяПодсистемы,
	|	ВерсииПодсистем.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем";
	
	Результат = Запрос.Выполнить();
	
	Подсистемы = Новый Структура;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Подсистемы.Вставить(Выборка.ИмяПодсистемы, Выборка.Версия);
	КонецЦикла;
	
	Возврат Подсистемы;
КонецФункции
	
#КонецОбласти

#Область РаботаВРежимеРазделенияПоОбластямДанных

Функция РазделениеПоОбластямДанныхВключено() Экспорт
	РазделениеПоОбластямДанныхВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	Возврат РазделениеПоОбластямДанныхВключено;
КонецФункции

#КонецОбласти

#Область РаботаВРежимеРИБ

Функция ЭтоГлавныйУзел()
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ ПланыОбмена.ГлавныйУзел() <> Неопределено;
КонецФункции

#КонецОбласти

#Область ОбщиеФункции

Функция ХешMD5(Данные)
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеш.Добавить(Данные);
	ХешСумма = СтрЗаменить(Строка(Хеш.ХешСумма), " ", "");
	
	Возврат ХешСумма;
КонецФункции

Функция СобытиеЖурналаРегистрацииЦентрМониторингаУдалениеДампа()
	Возврат НСтр("ru = 'Центр мониторинга.Удаление дампа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
КонецФункции

Функция СобытиеЖурналаРегистрацииЦентрМониторингаРазобратьБуферОперацийСтатистики()
	Возврат НСтр("ru = 'Центр мониторинга.Разобрать буфер операций статистики'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
КонецФункции
#КонецОбласти

Процедура ПервоначальноеЗаполнение() Экспорт
	
	Если РазделениеПоОбластямДанныхВключено() Тогда
		Возврат;
	КонецЕсли;

	ТекДата = ТекущаяУниверсальнаяДата();
	
	УдалитьПараметрыЦентраМониторинга();	
	ПараметрыЦентраМониторинга = ПолучитьПараметрыПоУмолчанию();
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ПараметрыЦентраМониторинга.БизнесСтатистикаПериодФормирования = 3600;	
	КонецЕсли;
	
	ПараметрыЦентраМониторинга.РегистрацияДамповСледующееФормирование = ТекДата + ПараметрыЦентраМониторинга.РегистрацияДамповПериодФормирования;
	ПараметрыЦентраМониторинга.БизнесСтатистикаСледующееФормирование = ТекДата + ПараметрыЦентраМониторинга.БизнесСтатистикаПериодФормирования;
	ПараметрыЦентраМониторинга.СтатистикаКонфигурацииСледующееФормирование = ТекДата + ПараметрыЦентраМониторинга.СтатистикаКонфигурацииПериодФормирования;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	ДельтаОтправки = ГСЧ.СлучайноеЧисло(0, 86400);
	ПараметрыЦентраМониторинга.ОтправкаДанныхСледующееФормирование = ТекДата + ДельтаОтправки;
	
	ПараметрыЦентраМониторинга.ПериодАгрегацииМалый = 600;
	ПараметрыЦентраМониторинга.ПериодАгрегации = 3600;
	ПараметрыЦентраМониторинга.ПериодУдаления = 86400;
		
	
	УстановитьПараметрыЦентраМониторинга(ПараметрыЦентраМониторинга);
КонецПроцедуры

#КонецОбласти
