////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность" (сервер).
// Обслуживает подключаемые команды.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Размещает в форме подключенные команды.
//
// Параметры:
//   Форма - УправляемаяФорма - форма, в которой необходимо разместить команды.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	ИмяФормы = Форма.ИмяФормы;
	ИспользуемыеПодменю = Новый Массив;
	ИнтеграцияСтандартныхПодсистем.ПриОпределенииИспользуемыхПодменю(Форма, ИспользуемыеПодменю);
	Если ИспользуемыеПодменю.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемыеПодменюЧерезЗапятую = СтрСоединить(ИспользуемыеПодменю, ",");
	НастройкиРазмещения = ПодключаемыеКомандыПовтИсп.НастройкиРазмещения(ИмяФормы, ИспользуемыеПодменюЧерезЗапятую);
	
	ВывестиКоманды(Форма, ИспользуемыеПодменю, НастройкиРазмещения.Команды.Скопировать());
КонецПроцедуры

// Обработчик команды формы, требующей контекстный вызов сервера.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, из которой выполняется команда.
//   ПараметрыКоманды - Структура - Параметры команды.
//   Результат - Структура - Результат выполнения команды.
//
Процедура ВыполнитьКоманду(Знач Форма, Знач ПараметрыВызова, Знач Источник, Результат) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Текст",    Неопределено);
	Результат.Вставить("Подробно", Неопределено);
	
	Если ТипЗнч(ПараметрыВызова) <> Тип("Структура")
		Или ПараметрыВызова.Количество() <> 2
		Или ТипЗнч(Форма) <> Тип("УправляемаяФорма") Тогда
		Возврат;
	КонецЕсли;
	
	АдресНастроек = Форма.Команды.Найти("АдресНастроекКомандВоВременномХранилище").Действие;
	ОписаниеКоманды = ОписаниеКоманды(ПараметрыВызова.ИмяКомандыВФорме, АдресНастроек);
	
	Контекст = ПараметрыВыполненияКоманды();
	Контекст.ОписаниеКоманды = Новый Структура(ОписаниеКоманды);
	Контекст.Форма = Форма;
	Если Не Контекст.ЭтоФормаОбъекта И ЗначениеЗаполнено(ОписаниеКоманды.ИмяСписка) Тогда
		Источник = Форма.Элементы.Найти(ОписаниеКоманды.ИмяСписка);
	КонецЕсли;
	Контекст.ЭтоФормаОбъекта = ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура");
	Контекст.Источник = Источник;
	Контекст.Вставить("Результат", Результат);
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыВызова.ПараметрКоманды);
	ПараметрыЭкспортнойПроцедуры.Добавить(Контекст);
	
	РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(ОписаниеКоманды.Обработчик, ПараметрыЭкспортнойПроцедуры);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов.

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	Событие = "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления";
	СерверныеОбработчики[Событие].Добавить("ПодключаемыеКоманды");
КонецПроцедуры

// Обработчик обновления кэшей, связанных с расширениями.
Функция ПриЗаполненииВсехПараметровРаботыРасширений() Экспорт
	Возврат ОперативноеОбновлениеОбщихДанных(Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений"));
КонецФункции

// Формирует таблицу общих настроек всех расширений, подключенных к объекту метаданных.
Функция НастройкиРасширенийПодключенныхКОбъектуМетаданных(СсылкаОбъектаМетаданных) Экспорт
	Результат = Новый ТаблицаЗначений;
	СтруктураКолонок = НастройкиПодключаемыхОтчетовИОбработок();
	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
		Результат.Колонки.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Результат.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Менеджер");
	
	Если СсылкаОбъектаМетаданных = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	ПодключенныеОбъекты = ПодключаемыеКомандыПовтИсп.Параметры().ПодключенныеОбъекты[СсылкаОбъектаМетаданных];
	Если ПодключенныеОбъекты = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	Для Каждого ПолноеИмя Из ПодключенныеОбъекты Цикл
		Настройки = НастройкиПоставщика(ПолноеИмя);
		Если Настройки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Настройки);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Получает настройки интеграции объекта метаданных (отчета или обработки).
//
// Параметры:
//   ПолноеИмя - Строка - Полное имя объекта метаданных.
//
// Возвращаемое значение:
//   Структура - Настройки интеграции этого объекта.
//       См. возвращаемое значение функции НастройкиПодключаемыхОтчетовИОбработок().
//       Дополнительно содержит следующие поля:
//       * ПолноеИмя - Строка - Полное имя объекта метаданных.
//       * Менеджер - ОбработкаМенеджер, ОтчетМенеджер - Менеджер объекта метаданных.
//
Функция НастройкиПоставщика(ПолноеИмя) Экспорт
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	Если ЧастиИмени.Количество() <> 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Вид = ВРег(ЧастиИмени[0]);
	Имя = ЧастиИмени[1];
	Если Вид = "ОТЧЕТ" Тогда
		Узел = Отчеты;
	ИначеЕсли Вид = "ОБРАБОТКА" Тогда
		Узел = Обработки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки = НастройкиПодключаемыхОтчетовИОбработок();
	Для Каждого КлючИЗначение Из Настройки Цикл
		Настройки.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Менеджер = Узел[Имя];
	Менеджер.ПриОпределенииНастроек(Настройки);
	
	Настройки.Вставить("ПолноеИмя", ПолноеИмя);
	Настройки.Вставить("Менеджер", Менеджер);
	Возврат Настройки;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий.

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - Обработчики обновления.
//       См. описание метода ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	Обработчик = Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных = Ложь;
	Обработчик.ОбщиеДанные                  = Истина;
	Обработчик.УправлениеОбработчиками      = Ложь;
	Обработчик.РежимВыполнения              = "Оперативно";
	Обработчик.Версия    = "*";
	Обработчик.Процедура = "ПодключаемыеКоманды.ОперативноеОбновлениеОбщихДанныхКонфигурации";
	Обработчик.Приоритет = 90;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Шаблоны.

// Шаблон первого параметра процедуры "ПриОпределенииНастроек" объектов,
//   включенных в состав подсистемы ПодключаемыеОтчетыИОбработки.
//
// Возвращаемое значение:
//   Структура - Настройки интеграции объекта (отчета или обработки),
//     включенного в состав подсистемы ПодключаемыеОтчетыИОбработки.
//       
//       * Размещение - Массив из ОбъектМетаданных - Массив объектов, к которым подключен этот объект.
//        
//       * ДобавитьКомандыПечати - Если Истина то в модуле менеджера следует определить процедуру по шаблону:
//           // Заполняет список команд печати.
//           //
//           // Параметры:
//           //   КомандыПечати - ТаблицаЗначений - Подробнее см. в УправлениеПечатью.СоздатьКоллекциюКомандПечати().
//           //
//           Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
//           	// Код по добавлению команд печати.
//           КонецПроцедуры
//        
//       * ДобавитьКомандыЗаполнения - Если Истина то в модуле менеджера следует определить процедуру по шаблону:
//           // Определяет список команд заполнения.
//           //
//           // Параметры:
//           //   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//           //       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//           //   Параметры - Структура - Вспомогательные параметры. Для чтения.
//           //       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//           //
//           Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
//           	// Код по добавлению команд заполнения.
//           КонецПроцедуры
//
Функция НастройкиПодключаемыхОтчетовИОбработок()
	Настройки = Новый Структура;
	Настройки.Вставить("Размещение", Новый ОписаниеТипов("Массив"));
	ИнтеграцияСтандартныхПодсистем.ПриОпределенииСтруктурыНастроекПодключаемыхОбъектов(Настройки);
	Возврат Настройки;
КонецФункции

// Шаблон таблицы подключаемых команд.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с подключаемыми командами.
//     Общие настройки:
//       * Идентификатор - Строка - Идентификатор команды.
//     Настройки внешнего вида:
//       * Представление - Строка - Представление команды в форме.
//       * Группа - Строка - Имя группы в командной панели, в которой будет выводиться эта команда.
//       * Порядок - Число - Порядок размещения команды в подменю. Используется для настройки под конкретное рабочее место.
//       * Картинка - Картинка - Картинка команды. Необязательный.
//       * СочетаниеКлавиш - СочетаниеКлавиш - Сочетание клавиш для быстрого вызова команды. Необязательный.
//     Настройки видимости:
//       * ТипПараметра - ОписаниеТипов - Типы объектов, для которых предназначена эта команда.
//       * ВидимостьВФормах - Строка - Имена форм через запятую, в которых должна отображаться команда.
//           Используется когда состав команд отличается для различных форм.
//       * ФункциональныеОпции - Строка - Имена функциональных опций через запятую, определяющих видимость команды.
//     Настройки процесса выполнения:
//       * ИмяСписка - Строка - Имя таблицы формы, связанной с динамическим списком, для которого выводится команда.
//           Используется когда в форме несколько списков и команда предназначена для второстепенного списка.
//       * МножественныйВыбор - Булево, Неопределено - Если Истина, то команда поддерживает множественный выбор.
//           В этом случае в параметре выполнения будет передан список ссылок.
//           Необязательный. Значение по умолчанию: Истина.
//       * РежимЗаписи - Строка - Действия, связанные с записью объекта, которые выполняются перед обработчиком команды.
//           ** "НеЗаписывать" - Объект не записывается, а в параметрах обработчика вместо ссылок передается вся форма.
//               В этом режиме рекомендуется работать напрямую с формой,
//               которая передается в структуре 2 параметра обработчика команды.
//           ** "ЗаписыватьТолькоНовые" - Записывать только новые объекты.
//           ** "Записывать" - Записывать новые и модифицированные объекты.
//           ** "Проводить" - Проводить документы.
//           Перед записью и проведением у пользователя запрашивается подтверждение.
//           Необязательный. Значение по умолчанию: "ЗаписыватьТолькоНовые".
//       * ТребуетсяРаботаСФайлами - Булево - Если Истина, то в веб-клиенте предлагается
//           установить расширение работы с файлами.
//           Необязательный. Значение по умолчанию: Ложь.
//     Настройки обработчика:
//       * Менеджер - Строка - Объект, отвечающий за выполнение команды.
//       * ИмяФормы - Строка - Имя формы, которую требуется получить для выполнения команды.
//           Если Обработчик не указан, то у формы вызывается метод "Открыть".
//       * ПараметрыФормы - Неопределено, ФиксированнаяСтруктура - Необязательный. Параметры формы, указанной в ИмяФормы.
//       * Обработчик - Строка - Описание процедуры, обрабатывающей основное действие команды.
//           Формат "<ИмяОбщегоМодуля>.<ИмяПроцедуры>" используется когда процедура размещена в общем модуле.
//           Формат "<ИмяПроцедуры>" используется в следующих случаях:
//             - Если ИмяФормы заполнено то в модуле указанной формы ожидается клиентская процедура.
//             - Если ИмяФормы не заполнено то в модуле менеджера этого объекта ожидается серверная процедура.
//       * ДополнительныеПараметры - Неопределено, ФиксированнаяСтруктура - Необязательный. Параметры обработчика, указанного в Обработчик.
//
Функция ТаблицаКоманд()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	// Настройки внешнего вида:
	Таблица.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Группа", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Картинка"); // Картинка.
	Таблица.Колонки.Добавить("СочетаниеКлавиш"); // СочетаниеКлавиш.
	// Настройки видимости:
	Таблица.Колонки.Добавить("ТипПараметра"); // ОписаниеТипов.
	Таблица.Колонки.Добавить("ВидимостьВФормах", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов("Строка"));
	// Настройки процесса выполнения:
	Таблица.Колонки.Добавить("ИмяСписка", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("МножественныйВыбор"); // Булево или Неопределено.
	Таблица.Колонки.Добавить("РежимЗаписи", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТребуетсяРаботаСФайлами", Новый ОписаниеТипов("Булево"));
	// Настройки обработчика:
	Таблица.Колонки.Добавить("Менеджер", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДополнительныеПараметры"); // Структура или Неопределено.
	Таблица.Колонки.Добавить("ИмяФормы", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ПараметрыФормы"); // Структура или Неопределено.
	// Служебные:
	Таблица.Колонки.Добавить("ИмяВФорме", Новый ОписаниеТипов("Строка"));
	Возврат Таблица;
КонецФункции

// Шаблон сведений об объекте метаданных, к которому принадлежит форма.
//
// Возвращаемое значение:
//   Структура - Вспомогательные параметры.
//       * Метаданные - ОбъектМетаданных - Метаданные объекта, к которому принадлежит форма.
//       * ПолноеИмя  - Строка           - Полное имя объекта. Например: "Документ.ИмяДокумента".
//       * Менеджер   - Произвольный     - Модуль менеджера объекта.
//       * Ссылка     - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка объекта.
//       * ЭтоЖурналДокументов - Булево - Истина если объект является журналом документов.
//
Функция НастройкиОбъекта()
	Структура = Новый Структура("Метаданные, ПолноеИмя, Менеджер, Ссылка");
	Структура.Вставить("ЭтоЖурналДокументов", Ложь);
	Возврат Структура;
КонецФункции

// Шаблон второго параметра обработчика команды.
//
// Возвращаемое значение:
//   Структура - Вспомогательные параметры.
//       * ОписаниеКоманды - Структура - Описание команды.
//           Структура аналогична таблице ПодключаемыеКоманды.ТаблицаКоманд().
//           ** Идентификатор - Строка - Идентификатор команды.
//           ** Представление - Строка - Представление команды в форме.
//           ** ДополнительныеПараметры - Неопределено, ФиксированнаяСтруктура - Дополнительные параметры команды.
//       * Форма - УправляемаяФорма - Форма, из которой вызвана команда.
//       * ЭтоФормаОбъекта - Булево - Истина, если команда вызвана из формы объекта.
//       * Источник - ТаблицаФормы, ДанныеФормыСтруктура - Объект или список формы с полем "Ссылка".
//
Функция ПараметрыВыполненияКоманды()
	Структура = Новый Структура("ОписаниеКоманды, Форма, Источник");
	Структура.Вставить("ЭтоФормаОбъекта", Ложь);
	Возврат Структура;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Вывод.

// Размещает подключенные команды в форме.
//
// Параметры:
//   Форма - УправляемаяФорма - форма, в которой необходимо разместить команды.
//
Процедура ВывестиКоманды(Форма, ИспользуемыеПодменю, Команды)
	Команды.Сортировать("Группа, Порядок Возр, Представление Возр");
	
	ИмяГруппы = Неопределено;
	ГруппаФормы = Неопределено;
	КомандаФормы = Неопределено;
	СчетчикКомандСАвтогенерируемымИменем = 0;
	ИнформацияОВсехПодменю = Новый Соответствие;
	
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		// При смене группы сбрасываются счетчики.
		Если ИмяГруппы <> Команда.Группа Тогда
			ИмяГруппы = Команда.Группа;
			ГруппаФормы = Форма.Элементы.Найти(ИмяГруппы);
			СчетчикКомандСАвтогенерируемымИменем = 0;
			ИнформацияОПодменю = СформироватьИнформациюОПодменю(ИнформацияОВсехПодменю, ГруппаФормы);
		КонецЕсли;
		// Группы нет - команда не выводится.
		Если ГруппаФормы = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
			Продолжить;
		КонецЕсли;
		
		// Уникальное имя добавляемого элемента.
		Команда.ИмяВФорме = ОпределитьИмяКоманды(Форма, ИмяГруппы, Команда.Идентификатор, СчетчикКомандСАвтогенерируемымИменем);
		
		КомандаФормы = Форма.Команды.Добавить(Команда.ИмяВФорме);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
		КомандаФормы.Заголовок = Команда.Представление;
		КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Если ТипЗнч(Команда.Картинка) = Тип("Картинка") Тогда
			КомандаФормы.Картинка = Команда.Картинка;
		КонецЕсли;
		Если ТипЗнч(Команда.СочетаниеКлавиш) = Тип("СочетаниеКлавиш") Тогда
			КомандаФормы.СочетаниеКлавиш = Команда.СочетаниеКлавиш;
		КонецЕсли;
		
		КнопкаФормы = Форма.Элементы.Добавить(Команда.ИмяВФорме, Тип("КнопкаФормы"), ГруппаФормы);
		КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаФормы.ИмяКоманды = Команда.ИмяВФорме;
		
		ИнформацияОПодменю.КоличествоКоманд = ИнформацияОПодменю.КоличествоКоманд + 1;
		ИнформацияОПодменю.ИмяПоследнейКнопки = Команда.ИмяВФорме;
	КонецЦикла;
	
	// Формирование информации о подменю с 0 динамических команд и 1 фиксированной командой.
	Для Каждого ИмяГруппы Из ИспользуемыеПодменю Цикл
		СформироватьИнформациюОПодменю(ИнформацияОВсехПодменю, Форма.Элементы.Найти(ИмяГруппы));
	КонецЦикла;
	
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
	
	// Смена вида групп, в которых всего 1 команда.
	Для Каждого КлючИЗначение Из ИнформацияОВсехПодменю Цикл
		ИнформацияОПодменю = КлючИЗначение.Значение;
		Если ИнформацияОПодменю.КоличествоКоманд <> 1 Тогда
			Продолжить;
		КонецЕсли;
		Подменю = Форма.Элементы.Найти(КлючИЗначение.Ключ);
		Если ТипЗнч(Подменю) <> Тип("ГруппаФормы") Или Подменю.Вид <> ВидГруппыФормы.Подменю Тогда
			Продолжить;
		КонецЕсли;
		КомандаФормы = Форма.Элементы.Найти(ИнформацияОПодменю.ИмяПоследнейКнопки);
		Если ТипЗнч(КомандаФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КомандаФормы.Картинка) Тогда
			КомандаФормы.Картинка = Подменю.Картинка;
		КонецЕсли;
		Подменю.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЦикла;
	
	КомандаФормы = Форма.Команды.Найти("АдресНастроекКомандВоВременномХранилище");
	Если КомандаФормы = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить("АдресНастроекКомандВоВременномХранилище");
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(Команды, Форма.УникальныйИдентификатор);
	Иначе
		ПоместитьВоВременноеХранилище(Команды, КомандаФормы.Действие);
	КонецЕсли;
КонецПроцедуры

Функция СформироватьИнформациюОПодменю(Соответствие, ГруппаФормы)
	Если ГруппаФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Подменю = ГруппаФормы;
	Если ГруппаФормы.Вид = ВидГруппыФормы.ГруппаКнопок
		И ТипЗнч(ГруппаФормы.Родитель) = Тип("ГруппаФормы")
		И ГруппаФормы.Родитель.Вид = ВидГруппыФормы.Подменю Тогда
		Подменю = ГруппаФормы.Родитель;
	КонецЕсли;
	ИнформацияОПодменю = Соответствие[НРег(Подменю.Имя)];
	Если ИнформацияОПодменю = Неопределено Тогда
		ИнформацияОПодменю = Новый Структура("КоличествоКоманд, ИмяПоследнейКнопки", 0, "");
		Соответствие.Вставить(НРег(Подменю.Имя), ИнформацияОПодменю);
		ЗарегистрироватьФиксированныеКомандыПодменю(Подменю, ИнформацияОПодменю);
	КонецЕсли;
	Возврат ИнформацияОПодменю;
КонецФункции

Процедура ЗарегистрироватьФиксированныеКомандыПодменю(ГруппаФормы, ИнформацияОПодменю)
	Для Каждого ЭлементФормы Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") И ЭлементФормы.Видимость Тогда
			ИнформацияОПодменю.КоличествоКоманд = ИнформацияОПодменю.КоличествоКоманд + 1;
			ИнформацияОПодменю.ИмяПоследнейКнопки = ЭлементФормы.Имя;
		ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
			ЗарегистрироватьФиксированныеКомандыПодменю(ЭлементФормы, ИнформацияОПодменю)
		КонецЕсли;
		Если ИнформацияОПодменю.КоличествоКоманд > 1 Тогда
			Возврат; // Оптимизация.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОпределитьИмяКоманды(Форма, ИмяГруппы, ИдентификаторКоманды, СчетчикКомандСАвтогенерируемымИменем)
	Если ИмяСоответствуетТребованиямИменованияСвойств(ИдентификаторКоманды) Тогда
		ИмяКоманды = ИмяГруппы + "_" + ИдентификаторКоманды;
	Иначе
		СчетчикКомандСАвтогенерируемымИменем = СчетчикКомандСАвтогенерируемымИменем + 1;
		ИмяКоманды = ИмяГруппы + "_" + Формат(СчетчикКомандСАвтогенерируемымИменем, "ЧН=; ЧГ=");
	КонецЕсли;
	Пока Форма.Элементы.Найти(ИмяКоманды) <> Неопределено
		Или Форма.Команды.Найти(ИмяКоманды) <> Неопределено Цикл
		СчетчикКомандСАвтогенерируемымИменем = СчетчикКомандСАвтогенерируемымИменем + 1;
		ИмяКоманды = ИмяГруппы + "_" + Формат(СчетчикКомандСАвтогенерируемымИменем, "ЧН=; ЧГ=");
	КонецЦикла;
	Возврат ИмяКоманды;
КонецФункции

Функция ИмяСоответствуетТребованиямИменованияСвойств(Имя)
	Если СтрНайти(Имя, " ") > 0 Или СтрНайти(Имя, ",") > 0 Или СтрНайти(Имя, "(") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Попытка
		Структура = Новый Структура(Имя, Неопределено);
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

Функция ОперативноеОбновлениеОбщихДанныхКонфигурации() Экспорт
	Возврат ОперативноеОбновлениеОбщихДанных(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
КонецФункции

// Обновляет кэш объектов метаданных указанного типа.
//
// Параметры:
//   ФильтрПоТипуИдентификаторов - * - Тип объектов метаданных.
//       - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Обновлять кэш конфигурации.
//           Структура с ключом "ПодключенныеОбъекты" записывается в константу ПараметрыПодключаемыхКоманд.
//       - СправочникСсылка.ИдентификаторыОбъектовРасширений - Обновлять кэш расширений.
//           Структура с ключом "ПодключенныеОбъекты" записывается в регистр ПараметрыРаботыВерсийРасширений.
//
// Возвращаемое значение:
//   Структура - описание
//       * ЕстьИзменения - Булево - Истина когда обновление прошло не "в холостую".
//       * ПодключенныеОбъекты - Соответствие - Кэш для быстрого определения списка объектов,
//           подключенных к объектам конфигурации.
//           Ключами и значениям являются ссылки объектов метаданных конфигурации и расширений.
//
Функция ОперативноеОбновлениеОбщихДанных(ФильтрПоТипуИдентификаторов)
	Результат = Новый Структура;
	Результат.Вставить("ЕстьИзменения", Ложь);
	
	Если ФильтрПоТипуИдентификаторов = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений")
		И Не ЗначениеЗаполнено(ПараметрыСеанса.ВерсияРасширений) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПодключенныеОбъекты = Новый Соответствие;
	
	ПодсистемаПодключаемыеОтчетыИОбработки = Метаданные.Подсистемы.Найти("ПодключаемыеОтчетыИОбработки");
	Если ПодсистемаПодключаемыеОтчетыИОбработки = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не внедрена обязательная подсистема ""Подключаемые отчеты и обработки"".
			|Подробнее см. документацию БСП.'");
	КонецЕсли;
	
	Состав = ПодсистемаПодключаемыеОтчетыИОбработки.Состав;
	Для Каждого ОбъектМетаданныхПоставщика Из Состав Цикл
		СсылкаПодключенногоОМ = СтандартныеПодсистемыСервер.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхПоставщика);
		Если ТипЗнч(СсылкаПодключенногоОМ) <> ФильтрПоТипуИдентификаторов Тогда
			Продолжить;
		КонецЕсли;
		ПолноеИмя = ОбъектМетаданныхПоставщика.ПолноеИмя();
		Настройки = НастройкиПоставщика(ПолноеИмя);
		Если Настройки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ОбъектМетаданных Из Настройки.Размещение Цикл
			СсылкаОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
			МассивПриемник = ПодключенныеОбъекты[СсылкаОМ];
			Если МассивПриемник = Неопределено Тогда
				МассивПриемник = Новый Массив;
				ПодключенныеОбъекты.Вставить(СсылкаОМ, МассивПриемник);
			КонецЕсли;
			Если МассивПриемник.Найти(ПолноеИмя) = Неопределено Тогда
				МассивПриемник.Добавить(ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ФильтрПоТипуИдентификаторов = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		СтароеХранилищеЗначения = Константы.ПараметрыПодключаемыхКоманд.Получить();
	ИначеЕсли ФильтрПоТипуИдентификаторов = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		СтароеХранилищеЗначения = СтандартныеПодсистемыСервер.ПараметрРаботыРасширения(ПолноеИмяПодсистемы());
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	НовоеХранилищеЗначения = Новый ХранилищеЗначения(Новый Структура("ПодключенныеОбъекты", ПодключенныеОбъекты));
	Если Не ОбщегоНазначения.ДанныеСовпадают(СтароеХранилищеЗначения, НовоеХранилищеЗначения) Тогда
		Результат.ЕстьИзменения = Истина;
		Если ФильтрПоТипуИдентификаторов = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			КонстантаОбъект = Константы.ПараметрыПодключаемыхКоманд.СоздатьМенеджерЗначения();
			КонстантаОбъект.Значение = НовоеХранилищеЗначения;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(КонстантаОбъект, Ложь, Ложь);
		ИначеЕсли ФильтрПоТипуИдентификаторов = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
			СтандартныеПодсистемыСервер.УстановитьПараметрРаботыРасширения(ПолноеИмяПодсистемы(), НовоеХранилищеЗначения);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("ПодключенныеОбъекты", ПодключенныеОбъекты);
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызовы из модулей ПовтИсп.

Функция НастройкиРазмещения(ИмяФормы, ИспользуемыеПодменю) Экспорт
	ИспользуемыеПодменю = СтрРазделить(ИспользуемыеПодменю, ",");
	
	Команды = ТаблицаКоманд();
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ИмяФормы", ИмяФормы);
	НастройкиФормы.Вставить("ИспользуемыеПодменю", ИспользуемыеПодменю);
	
	// Определение параметров объекта и заполнение списка команд.
	НастройкиОбъекта = НастройкиОбъекта();
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
	Если ОбъектМетаданных <> Неопределено Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
		Если ОбъектМетаданных <> Неопределено Тогда
			НастройкиОбъекта.Метаданные          = ОбъектМетаданных;
			НастройкиОбъекта.ПолноеИмя           = ОбъектМетаданных.ПолноеИмя();
			НастройкиОбъекта.Менеджер            = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НастройкиОбъекта.ПолноеИмя);
			НастройкиОбъекта.Ссылка              = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(НастройкиОбъекта.ПолноеИмя);
			НастройкиОбъекта.ЭтоЖурналДокументов = ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных);
		КонецЕсли;
	КонецЕсли;
	
	НастройкиРасширений = НастройкиРасширенийПодключенныхКОбъектуМетаданных(НастройкиОбъекта.Ссылка);
	
	Попытка
		ИнтеграцияСтандартныхПодсистем.ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, НастройкиОбъекта, НастройкиРасширений, Команды);
	Исключение
		Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
			ВызватьИсключение;
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При определении команд, подключенных к форме ""%1"", возникла ошибка:
				|%2'"),
				ИмяФормы,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Подключаемые команды'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				НастройкиОбъекта.Метаданные,
				ИмяФормы,
				ТекстОшибки);
			Команды.Очистить();
		КонецЕсли;
	КонецПопытки;
	
	// Фильтр команд по именам форм и функциональным опциям.
	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.ВГраница()];
	Количество = Команды.Количество();
	Для Номер = 1 По Количество Цикл
		Команда = Команды[Количество - Номер];
		// Фильтр по именам форм.
		ВидимостьВФормах = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРег(Команда.ВидимостьВФормах), ",", Истина, Истина);
		Если ВидимостьВФормах.Количество() > 0
			И ВидимостьВФормах.Найти(ВРег(КраткоеИмяФормы)) = Неопределено
			И ВидимостьВФормах.Найти(ВРег(ИмяФормы)) = Неопределено Тогда
			Команды.Удалить(Команда);
			Продолжить;
		КонецЕсли;
		// Фильтр по функциональным опциям.
		ФункциональныеОпции = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Команда.ФункциональныеОпции, ",", Истина, Истина);
		ВидимостьКоманды = ФункциональныеОпции.Количество() = 0;
		Для Каждого ИмяОпции Из ФункциональныеОпции Цикл
			Если ПолучитьФункциональнуюОпцию(СокрЛП(ИмяОпции)) Тогда
				ВидимостьКоманды = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ВидимостьКоманды Тогда
			Команды.Удалить(Команда);
		КонецЕсли;
	КонецЦикла;
	
	НастройкиОбъекта.Вставить("Команды", Команды);
	Возврат НастройкиОбъекта;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызовы из модулей ВызовСервера.

// Возвращает описание команды по имени элемента формы.
Функция ОписаниеКоманды(ИмяКомандыВФорме, АдресНастроек) Экспорт
	Команды = ПолучитьИзВременногоХранилища(АдресНастроек);
	Команда = Команды.Найти(ИмяКомандыВФорме, "ИмяВФорме");
	ОписаниеКоманды = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Команда);
	
	Если ЗначениеЗаполнено(ОписаниеКоманды.ИмяФормы) Тогда
		ОписаниеКоманды.Вставить("Серверная", Ложь);
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеКоманды.ИмяФормы, ".", Истина, Истина);
		КоличествоПодстрок = МассивПодстрок.Количество();
		Если КоличествоПодстрок = 1
			Или (КоличествоПодстрок = 2 И ВРег(МассивПодстрок[0]) <> "ОБЩАЯФОРМА") Тогда
			ОписаниеКоманды.ИмяФормы = ОписаниеКоманды.Менеджер + "." + ОписаниеКоманды.ИмяФормы;
		КонецЕсли;
	Иначе
		ОписаниеКоманды.Вставить("Серверная", Истина);
		Если ЗначениеЗаполнено(ОписаниеКоманды.Обработчик) Тогда
			Если Не ПустаяСтрока(ОписаниеКоманды.Менеджер) И СтрНайти(ОписаниеКоманды.Обработчик, ".") = 0 Тогда
				ОписаниеКоманды.Обработчик = ОписаниеКоманды.Менеджер + "." + ОписаниеКоманды.Обработчик;
			КонецЕсли;
			Если СтрНачинаетсяС(ВРег(ОписаниеКоманды.Обработчик), ВРег("ОбщийМодуль.")) Тогда
				ПозицияТочки = СтрНайти(ОписаниеКоманды.Обработчик, ".");
				ОписаниеКоманды.Обработчик = Сред(ОписаниеКоманды.Обработчик, ПозицияТочки + 1);
			КонецЕсли;
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеКоманды.Обработчик, ".", Истина, Истина);
			КоличествоПодстрок = МассивПодстрок.Количество();
			Если КоличествоПодстрок = 2 Тогда
				ИмяМодуля = МассивПодстрок[0];
				ОбъектМетаданныхОбщийМодуль = Метаданные.ОбщиеМодули.Найти(ИмяМодуля);
				Если ОбъектМетаданныхОбщийМодуль = Неопределено Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Общий модуль ""%1"" не найден.'"),
						ИмяМодуля);
				КонецЕсли;
				Если ОбъектМетаданныхОбщийМодуль.КлиентУправляемоеПриложение Тогда
					ОписаниеКоманды.Серверная = Ложь;
				КонецЕсли;
			Иначе
				Вид = ВРег(МассивПодстрок[0]);
				ВидВоМножественномЧисле = ВидОбъектаМетаданныхВоМножественномЧисле(Вид);
				Если ВидВоМножественномЧисле <> Неопределено Тогда
					МассивПодстрок.Установить(0, ВидВоМножественномЧисле);
					ОписаниеКоманды.Обработчик = СтрСоединить(МассивПодстрок, ".");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОписаниеКоманды.Удалить("Менеджер");
	
	Возврат Новый ФиксированнаяСтруктура(ОписаниеКоманды);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с объектами метаданных.

// Возвращает вид объекта во множественном числе.
Функция ВидОбъектаМетаданныхВоМножественномЧисле(Знач Вид)
	Вид = ВРег(СокрЛП(Вид));
	Если Вид = "ПЛАНОБМЕНА" Тогда
		Возврат "ПланыОбмена";
	ИначеЕсли Вид = "СПРАВОЧНИК" Тогда
		Возврат "Справочники";
	ИначеЕсли Вид = "ДОКУМЕНТ" Тогда
		Возврат "Документы";
	ИначеЕсли Вид = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Возврат "ЖурналыДокументов";
	ИначеЕсли Вид = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Возврат "Перечисления";
	ИначеЕсли Вид = "ОТЧЕТ" Тогда
		Возврат "Отчеты";
	ИначеЕсли Вид = "ОБРАБОТКА" Тогда
		Возврат "Обработки";
	ИначеЕсли Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Возврат "ПланыВидовХарактеристик";
	ИначеЕсли Вид = "ПЛАНСЧЕТОВ" Тогда
		Возврат "ПланыСчетов";
	ИначеЕсли Вид = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Возврат "ПланыВидовРасчета";
	ИначеЕсли Вид = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Возврат "РегистрыСведений";
	ИначеЕсли Вид = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Возврат "РегистрыНакопления";
	ИначеЕсли Вид = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Возврат "РегистрыБухгалтерии";
	ИначеЕсли Вид = "РЕГИСТРРАСЧЕТА" Тогда
		Возврат "РегистрыРасчета";
	ИначеЕсли Вид = "ПЕРЕРАСЧЕТ" Тогда
		Возврат "Перерасчеты";
	ИначеЕсли Вид = "БИЗНЕСПРОЦЕСС" Тогда
		Возврат "БизнесПроцессы";
	ИначеЕсли Вид = "ЗАДАЧА" Тогда
		Возврат "Задачи";
	ИначеЕсли Вид = "КОНСТАНТА" Тогда
		Возврат "Константы";
	ИначеЕсли Вид = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Возврат "Последовательности";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее.

// Возвращает полное имя подсистемы.
Функция ПолноеИмяПодсистемы() Экспорт
	Возврат "СтандартныеПодсистемы.ПодключаемыеКоманды";
КонецФункции

#КонецОбласти