
#Область ПрограммныйИнтерфейс

// Начинает подписание XML сообщения.
//
// Параметры:
//  ОповещенияПриЗавершении - ОписаниеОповещения - процедура, которая будет вызвана после подписания сообщения
//  КонвертSOAP - Строка - Шаблон подписываемого сообщения
//  СертификатКриптографии - СертификатКриптографии
//  МенеджерКриптографии - МенеджерКриптографии
//
Процедура НачатьПодписание(ОповещенияПриЗавершении, КонвертSOAP, ДанныеАлгоритмаПодписания, СертификатКриптографии, МенеджерКриптографии) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Режим",                   "РежимПодписание");
	Контекст.Вставить("ОповещенияПриЗавершении", ОповещенияПриЗавершении);
	Контекст.Вставить("УстанавливатьКомпоненту", Истина);
	
	Контекст.Вставить("КонвертSOAP", КонвертSOAP);
	
	Контекст.Вставить("ДанныеАлгоритмаПодписания",    ДанныеАлгоритмаПодписания);
	Контекст.Вставить("СертификатКриптографии",       СертификатКриптографии);
	Контекст.Вставить("СертификатКриптографииBase64", Неопределено);
	Контекст.Вставить("МенеджерКриптографии",         МенеджерКриптографии);
	
	Контекст.Вставить("ТипКриптопровайдера", Неопределено);
	Контекст.Вставить("ИмяКриптопровайдера", Неопределено);
	
	СертификатКриптографии.НачатьВыгрузку(
		Новый ОписаниеОповещения("НачатьПодписание_ПослеВыгрузкиСертификатаКриптографии", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Начинает подписание XML сообщения.
//
// Параметры:
//  ОповещенияПриЗавершении - ОписаниеОповещения - процедура, которая будет вызвана после подписания сообщения
//  КонвертSOAP - Строка - Шаблон подписываемого сообщения
//  ДанныеАлгоритмаПодписания - Структура со свойствами:
//  МенеджерКриптографии - МенеджерКриптографии
//
Процедура НачатьПроверкуПодписи(ОповещенияПриЗавершении, КонвертSOAP, ДанныеАлгоритмаПодписания, МенеджерКриптографии) Экспорт
	
	СертификатКриптографииBase64 = ИнтеграцияГИСМКлиентСервер.НайтиВXML(КонвертSOAP, "wsse:BinarySecurityToken");
	ДвоичныеДанные = Base64Значение(СертификатКриптографииBase64);
	
	Контекст = Новый Структура;
	Контекст.Вставить("Режим",                   "РежимПроверка");
	Контекст.Вставить("ОповещенияПриЗавершении", ОповещенияПриЗавершении);
	Контекст.Вставить("УстанавливатьКомпоненту", Истина);
	
	Контекст.Вставить("КонвертSOAP", КонвертSOAP);
	
	Контекст.Вставить("ДанныеАлгоритмаПодписания",    ДанныеАлгоритмаПодписания);
	Контекст.Вставить("СертификатКриптографии",       Новый СертификатКриптографии(ДвоичныеДанные));
	Контекст.Вставить("СертификатКриптографииBase64", СертификатКриптографииBase64);
	Контекст.Вставить("МенеджерКриптографии",         МенеджерКриптографии);
	
	Контекст.Вставить("ТипКриптопровайдера",  Неопределено);
	Контекст.Вставить("ИмяКриптопровайдера",  Неопределено);
	
	НачатьПодключениеВнешнейКомпоненты(
		Новый ОписаниеОповещения("ПослеПодключенияКомпоненты", ЭтотОбъект, Контекст),
		"ОбщийМакет.КомпонентаXMLDSIG",
		"ОбъектXMLDSIG",
		ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УстановкаИПодключение

// Начинает установку компоненты XMLDSIG.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, которая будет вызвана после установки компоненты.
//
Процедура НачатьУстановкуКомпоненты(ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	НачатьУстановкуВнешнейКомпоненты(
		Новый ОписаниеОповещения("УстановкаКомпоненты_Завершение", ЭтотОбъект, ДополнительныеПараметры),
		"ОбщийМакет.КомпонентаXMLDSIG");
	
КонецПроцедуры

Процедура УстановкаКомпоненты_Завершение(ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Неопределено);
	
КонецПроцедуры

Процедура ПослеУстановкиКомпоненты(Результат, Контекст) Экспорт
	
	Контекст.Вставить("УстанавливатьКомпоненту", Ложь);
	
	НачатьПодключениеВнешнейКомпоненты(
		Новый ОписаниеОповещения("ПослеПодключенияКомпоненты", ЭтотОбъект, Контекст),
		"ОбщийМакет.КомпонентаXMLDSIG",
		"ОбъектXMLDSIG",
		ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры

Процедура ПослеПодключенияКомпоненты(Подключено, Контекст) Экспорт
	
	Если Подключено Тогда
		
		Выполнено = Ложь;
		Попытка
			
			ОбъектКомпоненты = Новый("Addin.ОбъектXMLDSIG.XMLDSignAddIn");
			
			Выполнено = Истина;
			
		Исключение
			
			ЗавершитьОперациюСОшибкой(
				Контекст,
				НСтр("ru = 'Ошибка инициализации компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Выполнено = Ложь;
			
		КонецПопытки;
		
		Если Выполнено Тогда
			
			Контекст.Вставить("ОбъектКомпоненты", ОбъектКомпоненты);
			
			Если Контекст.Режим = "РежимПроверка" Тогда
				ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьПроверкуПодписиСообщенияSOAP", ЭтотОбъект, Контекст);
				Контекст.МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(ОповещениеПриЗавершении);
			ИначеЕсли Контекст.Режим = "РежимПодписание" Тогда
				ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьПодписаниеСообщенияSOAP", ЭтотОбъект, Контекст);
				Контекст.МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(ОповещениеПриЗавершении);
			Иначе
				ЗавершитьОперациюСОшибкой(
					Контекст,
					НСтр("ru = 'Не установлен режим работы компоненты XMLDSIG.'"));
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Контекст.УстанавливатьКомпоненту Тогда
		
		ТекстВопроса = НСтр("ru = 'Для подписания XML необходима установка компоненты XMLDSIG.
		                          |Перейти к установке данной компоненты?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередУстановкойКомпоненты", ЭтотОбъект, Контекст),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Операция невозможна. Требуется установка компоненты XMLDSIG.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУстановкойКомпоненты(РезультатВопроса, Контекст) Экспорт
	
	Если НЕ РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Операция невозможна. Требуется установка компоненты для HTTP-запросов.'"));
		
	Иначе
		
		НачатьУстановкуКомпоненты(Новый ОписаниеОповещения("ПослеУстановкиКомпоненты", ЭтотОбъект, Контекст));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подписание

Процедура НачатьПодписание_ПослеВыгрузкиСертификатаКриптографии(ДвоичныеДанныеСертификата, Контекст) Экспорт
	
	СертификатКриптографииBase64 = ОтформатироватьСтрокуBase64(Base64Строка(ДвоичныеДанныеСертификата));
	
	Контекст.КонвертSOAP = СтрЗаменить(
		Контекст.КонвертSOAP,
		"%BinarySecurityToken%",
		СертификатКриптографииBase64);
	
	Контекст.СертификатКриптографииBase64 = СертификатКриптографииBase64;
	
	НачатьПодключениеВнешнейКомпоненты(
		Новый ОписаниеОповещения("ПослеПодключенияКомпоненты", ЭтотОбъект, Контекст),
		"ОбщийМакет.КомпонентаXMLDSIG",
		"ОбъектXMLDSIG",
		ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры

Процедура НачатьПодписаниеСообщенияSOAP(ИнформацияМодуляКриптографии, Контекст) Экспорт
	
	ИмяКриптопровайдера = ИнформацияМодуляКриптографии.Имя;
	ТипКриптопровайдера = ЭлектроннаяПодписьXMLDSIGВызовСервераПовтИсп.ТипКриптопровайдераПоИмени(ИмяКриптопровайдера);
	
	Если ТипКриптопровайдера = Неопределено Тогда
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			СтрШаблон(
				НСтр("ru = 'Не удалось определить тип криптопровайдера %1'"), ИнформацияМодуляКриптографии.Имя)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
		
	КонецЕсли;
	
	Контекст.ТипКриптопровайдера = ТипКриптопровайдера;
	Контекст.ИмяКриптопровайдера = ИмяКриптопровайдера;
	
	Попытка
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Подписание_ПослеВыполненияGetSignOIDFromCert", ЭтотОбъект, Контекст,
			"Подписание_ПослеВыполненияGetSignOIDFromCert_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовGetSignOIDFromCert(
			ОписаниеОповещения,
			Контекст.СертификатКриптографииBase64);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода GetSignOIDFromCert компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияGetSignOIDFromCert_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода GetSignOIDFromCert компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияGetSignOIDFromCert(OIDАлгоритмаПодписи, Параметры, Контекст) Экспорт
	
	Если OIDАлгоритмаПодписи = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода GetSignOIDFromCert произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	Если OIDАлгоритмаПодписи <> Контекст.ДанныеАлгоритмаПодписания.OIDАлгоритмаПодписи Тогда
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			СтрШаблон(
				НСтр("ru = 'Алгоритм подписи сертификата криптографии отличается от алгоритма %1.'"),
				Контекст.ДанныеАлгоритмаПодписания.ИмяАлгоритмаПодписи));
		
	Иначе
		
		Попытка
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"Подписание_ПослеВыполненияC14N_ПодписываемыйТег", ЭтотОбъект, Контекст,
				"Подписание_ПослеВыполненияC14N_ПодписываемыйТег_Ошибка", ЭтотОбъект);
			
			Контекст.ОбъектКомпоненты.НачатьВызовC14N(
				ОписаниеОповещения,
				Контекст.КонвертSOAP,
				Контекст.ДанныеАлгоритмаПодписания.XPathПодписываемыйТег);
			
		Исключение
			
			ЗавершитьОперациюСОшибкой(
				Контекст,
				НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияC14N_ПодписываемыйТег_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияC14N_ПодписываемыйТег(КаноникализированныйТекстXML, Параметры, Контекст) Экспорт
	
	Если КаноникализированныйТекстXML = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода C14N произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Подписание_ПослеВыполненияHash_ПодписываемыйТег", ЭтотОбъект, Контекст,
			"Подписание_ПослеВыполненияHash_ПодписываемыйТег_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовHash(
			ОписаниеОповещения,
			КаноникализированныйТекстXML,
			Контекст.ДанныеАлгоритмаПодписания.OIDАлгоритмаХеширования,
			Контекст.ТипКриптопровайдера);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода Hash компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияHash_ПодписываемыйТег_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода Hash компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияHash_ПодписываемыйТег(DigestValue, Параметры, Контекст) Экспорт
	
	Если DigestValue = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода Hash произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.КонвертSOAP = СтрЗаменить(Контекст.КонвертSOAP, "%DigestValue%", DigestValue);
	
	Попытка
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Подписание_ПослеВыполненияC14N_SignedInfo", ЭтотОбъект, Контекст,
			"Подписание_ПослеВыполненияC14N_SignedInfo_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовC14N(
			ОписаниеОповещения,
			Контекст.КонвертSOAP,
			Контекст.ДанныеАлгоритмаПодписания.XPathSignedInfo);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияC14N_SignedInfo_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияC14N_SignedInfo(КаноникализированныйТекстXMLSignedInfo, Параметры, Контекст) Экспорт
	
	Если КаноникализированныйТекстXMLSignedInfo = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода C14N произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Контекст.ОбъектКомпоненты.НачатьВызовSign(
			Новый ОписаниеОповещения("Подписание_ПослеВыполненияSign", ЭтотОбъект, Контекст),
			КаноникализированныйТекстXMLSignedInfo,
			Контекст.СертификатКриптографииBase64,
			Контекст.МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода Sign компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияSign_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода Sign компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияSign(SignatureValue, Параметры, Контекст) Экспорт
	
	Если SignatureValue = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода Sign произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	КонвертSOAP = СтрЗаменить(Контекст.КонвертSOAP, "%SignatureValue%", SignatureValue);
	ВыполнитьОбработкуОповещения(Контекст.ОповещенияПриЗавершении.Успех, КонвертSOAP);
	
КонецПроцедуры


Процедура НачатьПроверкуПодписиСообщенияSOAP(ИнформацияМодуляКриптографии, Контекст) Экспорт
	
	ИмяКриптопровайдера = ИнформацияМодуляКриптографии.Имя;
	ТипКриптопровайдера = ЭлектроннаяПодписьXMLDSIGВызовСервераПовтИсп.ТипКриптопровайдераПоИмени(ИмяКриптопровайдера);
	
	Если ТипКриптопровайдера = Неопределено Тогда
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			СтрШаблон(
				НСтр("ru = 'Не удалось определить тип криптопровайдена %1'"), ИнформацияМодуляКриптографии.Имя)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
		
	КонецЕсли;
	
	Контекст.ТипКриптопровайдера = ТипКриптопровайдера;
	Контекст.ИмяКриптопровайдера = ИмяКриптопровайдера;
	
	Попытка
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Проверка_ПослеВыполненияGetSignOIDFromCert", ЭтотОбъект, Контекст,
			"Проверка_ПослеВыполненияGetSignOIDFromCert_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовGetSignOIDFromCert(
			ОписаниеОповещения,
			Контекст.СертификатКриптографииBase64);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода GetSignOIDFromCert компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияGetSignOIDFromCert_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода GetSignOIDFromCert компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияGetSignOIDFromCert(OIDАлгоритмаПодписи, Параметры, Контекст) Экспорт
	
	Если OIDАлгоритмаПодписи = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода GetSignOIDFromCert произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	Если OIDАлгоритмаПодписи <> Контекст.ДанныеАлгоритмаПодписания.OIDАлгоритмаПодписи Тогда
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода Hash компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	Иначе
		
		Попытка
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"Проверка_ПослеВыполненияC14N_SignedInfo", ЭтотОбъект, Контекст,
				"Проверка_ПослеВыполненияC14N_SignedInfo_Ошибка", ЭтотОбъект);
			
			Контекст.ОбъектКомпоненты.НачатьВызовC14N(
				ОписаниеОповещения,
				Контекст.КонвертSOAP,
				Контекст.ДанныеАлгоритмаПодписания.XPathSignedInfo);
			
		Исключение
			
			ЗавершитьОперациюСОшибкой(
				Контекст,
				НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияC14N_SignedInfo_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияC14N_SignedInfo(КаноникализированныйТекстXMLSignedInfo, Параметры, Контекст) Экспорт
	
	Если КаноникализированныйТекстXMLSignedInfo = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода C14N произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	SignatureValue               = ИнтеграцияГИСМКлиентСервер.НайтиВXML(Контекст.КонвертSOAP, "SignatureValue");
	СертификатКриптографииBase64 = ИнтеграцияГИСМКлиентСервер.НайтиВXML(Контекст.КонвертSOAP, "wsse:BinarySecurityToken");
	
	Попытка
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Проверка_ПослеВыполненияVerifySign", ЭтотОбъект, Контекст,
			"Проверка_ПослеВыполненияVerifySign_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовVerifySign(
			ОписаниеОповещения,
			КаноникализированныйТекстXMLSignedInfo,
			SignatureValue,
			СертификатКриптографииBase64,
			Контекст.ТипКриптопровайдера);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода VerifySign компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияVerifySign_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода VerifySign компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияVerifySign(ПодписьВерна, Параметры, Контекст) Экспорт
	
	Если ПодписьВерна = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода VerifySign произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	Если Не ПодписьВерна Тогда
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Подпись не верна (SignatureValue не корректно.'"));
		
	Иначе
		
		Попытка
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"Проверка_ПослеВыполненияC14N_ПодписываемыйТег", ЭтотОбъект, Контекст,
				"Проверка_ПослеВыполненияC14N_ПодписываемыйТег_Ошибка", ЭтотОбъект);
			
			Контекст.ОбъектКомпоненты.НачатьВызовC14N(
				ОписаниеОповещения,
				Контекст.КонвертSOAP,
				Контекст.ДанныеАлгоритмаПодписания.XPathПодписываемыйТег);
			
		Исключение
			
			ЗавершитьОперациюСОшибкой(
				Контекст,
				НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияC14N_ПодписываемыйТег_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияC14N_ПодписываемыйТег(КаноникализированныйТекстXMLПодписываемыйТег, Параметры, Контекст) Экспорт
	
	Если КаноникализированныйТекстXMLПодписываемыйТег = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода C14N произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Проверка_ПослеВыполненияHash_ПодписываемыйТег", ЭтотОбъект, Контекст,
			"Проверка_ПослеВыполненияHash_ПодписываемыйТег_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовHash(
			ОписаниеОповещения,
			КаноникализированныйТекстXMLПодписываемыйТег,
			Контекст.ДанныеАлгоритмаПодписания.OIDАлгоритмаХеширования,
			Контекст.ТипКриптопровайдера);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода Hash компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияHash_ПодписываемыйТег_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода Hash компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияHash_ПодписываемыйТег(HashValue, Параметры, Контекст) Экспорт
	
	Если HashValue = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода Hash произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	DigestValue = ИнтеграцияГИСМКлиентСервер.НайтиВXML(Контекст.КонвертSOAP, "DigestValue");
	
	ПодписьВерна = (DigestValue = HashValue);
	
	Если Не ПодписьВерна Тогда
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Подпись не верна (SignatureValue корректно, отличается DigestValue).'"));
		
	Иначе
		
		ДвоичныеДанные = Base64Значение(Контекст.СертификатКриптографииBase64);
		
		ДатаПодписания = ЭлектроннаяПодписьКлиент.ДатаПодписания(ДвоичныеДанные);
		Если Не ЗначениеЗаполнено(ДатаПодписания) Тогда
			ДатаПодписания = Неопределено;
		КонецЕсли;
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Сертификат", Контекст.СертификатКриптографии);
		ВозвращаемоеЗначение.Вставить("ДатаПодписания", ДатаПодписания);
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещенияПриЗавершении.Успех, ВозвращаемоеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура НачатьПолучениеТекстаОшибки(НачалоОписанияТекстаОшибки, Контекст)
	
	Попытка
		
		Контекст.Вставить("НачалоОписанияТекстаОшибки", НачалоОписанияТекстаОшибки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеВыполненияGetLastError", ЭтотОбъект, Контекст,
			"ПослеВыполненияGetLastError_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовGetLastError(ОписаниеОповещения);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода GetLastError компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПослеВыполненияGetLastError_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода GetLastError компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура ПослеВыполненияGetLastError(ТекстОшибки, Параметры, Контекст) Экспорт
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		Контекст.НачалоОписанияТекстаОшибки + Символы.ПС + ТекстОшибки);
	
КонецПроцедуры


#КонецОбласти

#Область Прочее

Процедура ЗавершитьОперациюСОшибкой(Контекст, ТекстОшибки) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещенияПриЗавершении.Ошибка, ТекстОшибки);
	
КонецПроцедуры

// Форматирует строку в формате base64, удаляя символы перевода строки и возврата каретки.
//
// Параметры:
//  СтрокаBase64 - Строка - строка, которая подлежит преобразования.
// 
// Возвращаемое значение:
//   Строка - строка, из которой удалены символы перевода строки и возврата каретки.
//
Функция ОтформатироватьСтрокуBase64(СтрокаBase64)
	
	Значение = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	Значение = СтрЗаменить(Значение, Символы.ПС, "");
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#КонецОбласти
