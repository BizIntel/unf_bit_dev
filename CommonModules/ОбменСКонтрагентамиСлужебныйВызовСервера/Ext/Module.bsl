////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиСлужебныйВызовСервера: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов.

// Изменяет реквизиты элемента справочника ЭДПрисоединенныеФайлы.
//
// Параметры:
//  ДобавленныйФайл - Ссылка - Ссылка на элемент справочника с электронным документом.
//  СтруктураЭД - Структура - Структура параметров, которые необходимо заполнить в справочнике.
//  ПоверятьОбязательныеРеквизиты - Булево - признак проверки обязательных реквизитов.
//
Процедура ИзменитьПоСсылкеПрисоединенныйФайл(
				ДобавленныйФайл,
				СтруктураЭД,
				ПоверятьОбязательныеРеквизиты = Истина) Экспорт
	
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл,
		СтруктураЭД, ПоверятьОбязательныеРеквизиты);
	
КонецПроцедуры

// Получение соответствия документов и электронных документов.
//
// Параметры:
//  СписокВладельцев - Массив - владельцы электронных документов.
//  СписокЭлектронныхДокументов - Массив - электронные документы.
// 
// Возвращаемое значение:
//  Соответствие - ссылки на владельцев и электронных документов.
//
Функция ВладельцыИЭлектронныеДокументы(СписокВладельцев = Неопределено, СписокЭлектронныхДокументов = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Если Не СписокВладельцев = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК СсылкаНаЭД
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&СписокВладельцев)";
		Запрос.УстановитьПараметр("СписокВладельцев", СписокВладельцев);
	ИначеЕсли Не СписокЭлектронныхДокументов = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК СсылкаНаЭД
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент В(&СписокЭлектронныхДокументов)";
		Запрос.УстановитьПараметр("СписокЭлектронныхДокументов", СписокЭлектронныхДокументов);
	Иначе
		Возврат СоответствиеВладельцевИЭД;
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		СоответствиеВладельцевИЭД.Вставить(Результат.ВладелецЭД, Результат.СсылкаНаЭД);
	КонецЦикла;
	
	Возврат СоответствиеВладельцевИЭД;
	
КонецФункции

// Изменяет состояние версии электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ВходящийЭлектронныйДокумент, ИсходящийЭлектронныйДокумент,
//                        Массив - электронные документы, версии которых надо обновить.
//  ПринудительнаяСменаСостоянияВерсии - Булево - признак смены версии, несмотря на условия.
//  ВерсияФорматаПакета - Строка - версия формата пакета.
//  ОтклонениеАннулирования - Булево - признак отклонения аннулирования документа.
//
Процедура ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостоянияВерсии = Ложь, ВерсияФорматаПакета = Неопределено, 
	ОтклонениеАннулирования = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ЭлектронныйДокумент Цикл
			ОбновитьВерсиюЭД(ЭлементМассива);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "НаправлениеЭД, ВладелецФайла, ТипЭлементаВерсииЭД, ЭлектронныйДокументВладелец");
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваЭД.ВладелецФайла,"ВидЭД,СостояниеЭДО");
	
	ТекущееСостояниеВерсииЭД = РеквизитыЭД.СостояниеЭДО;
	
	НовоеСостояниеВерсииЭД = Неопределено;
	СводнаяИнформацияПоСтатусу = Новый Структура;
	
	Если НЕ ЭтоСлужебныйДокумент(ЭлектронныйДокумент)
		Или ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(СвойстваЭД.ТипЭлементаВерсииЭД) Тогда
		
		СостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент,
			ВерсияФорматаПакета, ПринудительнаяСменаСостоянияВерсии, ОтклонениеАннулирования);
		
		Если ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
			// Для "Акта на передачу прав" и "с.ф." меняет состояние "Закрыт принудительно" на "Обмен завершен",
			// если для него пришла вторая подпись.
			Если Не ((РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
				И СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если (СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			Или СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)
			Или (СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий //новый каталог делает неактуальным старый
				И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров)
			Или ПринудительнаяСменаСостоянияВерсии Тогда
			
			НовоеСостояниеВерсииЭД = СостояниеВерсииЭД;
			СводнаяИнформацияПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
			
			Если (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
					Или СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
					Или СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД)
				И (СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
					Или СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением)
				И НЕ(СводнаяИнформацияПоСтатусу.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
					И СводнаяИнформацияПоСтатусу.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено) Тогда
				НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
			КонецЕсли;
			
			// Если утверждается входящий э.д. в формате "доп. УПД" без подписи, то состояние меняется
			// с ОбменЗавершен на ОжидаетсяПодтверждение.
			Если НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
				И СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД 
				И Не (СводнаяИнформацияПоСтатусу.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
					И СводнаяИнформацияПоСтатусу.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено) Тогда
				НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
			
			КонецЕсли;
			
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
			И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
			И НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
			
			НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
			
		ИначеЕсли (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец)
			
			Или (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель)
			
			Или (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель) Тогда
			
			НовоеСостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент,
			ВерсияФорматаПакета, ПринудительнаяСменаСостоянияВерсии, ОтклонениеАннулирования);
			
			СводнаяИнформацияПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
		КонецЕсли;
		
	ИначеЕсли ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(СвойстваЭД.ТипЭлементаВерсииЭД) Тогда
		
		Если ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
			Возврат;
		КонецЕсли;
		
		ПервичныйДокумент = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(СвойстваЭД.ВладелецФайла);
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			
			Если ОбменСКонтрагентамиСлужебный.ЭтоТитулФНС(СвойстваЭД.ВладелецФайла) Тогда
				ОтветныйТитул = ОбменСКонтрагентамиСлужебный.ВторойТитулДокумента(ПервичныйДокумент);
				Если ЗначениеЗаполнено(ОтветныйТитул) Тогда
					НовоеСостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ОтветныйТитул);
				Иначе
					НовоеСостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ПервичныйДокумент);
				КонецЕсли;
			Иначе
				НовоеСостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ПервичныйДокумент);
			КонецЕсли;
			
			СводнаяИнформацияПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ПервичныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовоеСостояниеВерсииЭД) Тогда
		
		Если НовоеСостояниеВерсииЭД <> ТекущееСостояниеВерсииЭД Тогда
			
			ДокументОбъект = СвойстваЭД.ВладелецФайла.ПолучитьОбъект();
			ДокументОбъект.СостояниеЭДО = НовоеСостояниеВерсииЭД;
			ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
			ДокументОбъект.Записать();
	
			Если НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
				Или НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
				
				ОснованияДокумента = СвойстваЭД.ВладелецФайла.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
				
				ОбменСКонтрагентамиПереопределяемый.УстановленоСостояниеОбменЗавершен(ОснованияДокумента);
				
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьВерсиюЭДВРегистре(СвойстваЭД.ВладелецФайла, НовоеСостояниеВерсииЭД, СводнаяИнформацияПоСтатусу);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает новую версию электронного документа для владельца.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ базы данных, номер версии электронного
//                                    документа которого надо изменить.
//  ЭлектронныйДокумент - ДокументСсылка.ИсходящийЭлектронныйДокумент, ВходящийЭлектронныйДокумент - ссылка на
//                                    электронный документ, который в данный момент является актуальным.
//  УдалятьСтаруюВерсию - Булево - если Истина, то старая версия ЭД будет удалена.
//
Процедура УстановитьНовуюВерсиюЭД(СсылкаНаОбъект, ЭлектронныйДокумент = Неопределено, УдалятьСтаруюВерсию = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		НоваяЗаписьНабора.СостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
			СсылкаНаОбъект, ЗначениеЗаполнено(ЭлектронныйДокумент));
		Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении Тогда
			НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		КонецЕсли;
	Иначе
		
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		
		Если УдалятьСтаруюВерсию Тогда
			УдалитьСтаруюВерсиюЭД(НоваяЗаписьНабора);
		КонецЕсли;
		НоваяЗаписьНабора.СостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
			СсылкаНаОбъект, ЗначениеЗаполнено(ЭлектронныйДокумент));
		Если ЭлектронныйДокумент = Неопределено 
			Или ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			Или ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
		НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
	ИначеЕсли НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен Тогда
		НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обновляет статусы подключений настроек ЭДО
//
// Параметры:
//  СоотвСоглашенийИСтруктурСертификатов - Соответствие - параметры для обновления статусов.
//
Процедура ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашенийИСтруктурСертификатов) Экспорт
	
	ТаблицаПриглашений = ОбменСКонтрагентамиВнутренний.ТаблицаДанныхУчастниковОбмена(СоотвСоглашенийИСтруктурСертификатов);
	ОбменСКонтрагентамиСлужебный.СохранитьПриглашения(ТаблицаПриглашений);
	
КонецПроцедуры

// Определение действующей настройки ЭДО.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка - электронный документ.
//  ПараметрыЭД - Структура - параметры поиска и заполнения данными.
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  СообщатьОбОшибке - Булево - признак вывода сообщения об ошибке.
// 
// Возвращаемое значение:
//  Булево - Истина, если настройка определена.
//
Функция ОпределитьДействующуюНастройкуЭДО(СсылкаНаВладельца, ПараметрыЭД = Неопределено, ВидЭД = Неопределено, СообщатьОбОшибке = Ложь) Экспорт
	
	Результат = Истина;
	
	ПараметрыЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	Если Не ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
		
		Если ЗначениеЗаполнено(ВидЭД) Тогда
			
			ПараметрыЭД.ВидЭД = ВидЭД;
		Иначе
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(СсылкаНаВладельца);
			
			СоответствиеВладельцевИЭД = ВладельцыИЭлектронныеДокументы(МассивСсылок);
			Для Каждого ТекЭл Из МассивСсылок Цикл
				
				СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
				Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбмена = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД, Неопределено);
	
	Если Не ЗначениеЗаполнено(ПараметрыОбмена) Тогда
		Результат = Ложь;
		
		Если ЗначениеЗаполнено(ПараметрыЭД.Контрагент) И ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СоглашенияОбИспользованииЭД.Ссылка,
			|	СоглашенияОбИспользованииЭД.СтатусПодключения
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
			|ГДЕ
			|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
			|	И СоглашенияОбИспользованииЭД.ДоговорКонтрагента = &ДоговорКонтрагента
			|	И СоглашенияОбИспользованииЭД.Организация = &Организация
			|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
			Запрос.УстановитьПараметр("Контрагент",         ПараметрыЭД.Контрагент);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыЭД.ДоговорКонтрагента);
			Запрос.УстановитьПараметр("Организация",        ПараметрыЭД.Организация);
			
			// Получаем настройки ЭДО безусловно
			УстановитьПривилегированныйРежим(Истина);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Не Выборка.Следующий() Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭД.Ссылка,
				|	СоглашенияОбИспользованииЭД.СтатусПодключения
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
				|ГДЕ
				|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
				|	И СоглашенияОбИспользованииЭД.Организация = &Организация
				|	И СоглашенияОбИспользованииЭД.ДоговорКонтрагента = &ДоговорКонтрагента
				|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
				Запрос.УстановитьПараметр("Контрагент",         ПараметрыЭД.Контрагент);
				Запрос.УстановитьПараметр("Организация",        ПараметрыЭД.Организация);
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов"));
				Запрос.Выполнить().Выбрать();
				Если НЕ Выборка.Следующий() И СообщатьОбОшибке Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось определить настройку ЭДО для параметров: 
						|организация %1, 
						|контрагент %2, 
						|договор %3.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
						ПараметрыЭД.Организация, ПараметрыЭД.Организация, ПараметрыЭД.ДоговорКонтрагента);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыЭД.Вставить("НастройкаЭДО", Выборка.Ссылка);
			ПараметрыЭД.Вставить("СтатусПодключения", Выборка.СтатусПодключения);
		КонецЕсли;
	Иначе
		ПараметрыЭД.Вставить("НастройкаЭДО", ПараметрыОбмена.СоглашениеЭД);
		ПараметрыЭД.Вставить("СтатусПодключения", ПараметрыОбмена.СоглашениеЭД.СтатусПодключения);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак существования настройки ЭДО между контрагентом и организацией.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка - ссылка на документ ИБ.
//  ПараметрыЭД - Структура - свойства электронного документа, соответствующие документу ИБ.
//
// Возвращаемое значение:
//  Булево - наличие настройки между организацией и контрагентом.
//
Функция НастройкаЭДСуществует(СсылкаНаВладельца, ПараметрыЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	
	Если ПараметрыЭД = Неопределено Тогда
		ПараметрыЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЭД.Контрагент) И ЗначениеЗаполнено(ПараметрыЭД.Организация)
		И ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
		
			ПараметрВидЭД = ПараметрыЭД.ВидЭД;
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
				ПараметрВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
				ПараметрВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
				ПараметрВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Т.Ссылка.СтатусПодключения КАК СтатусПодключения,
			|	Т.Ссылка.СостояниеСоглашения КАК СостояниеСоглашения,
			|	Т.Ссылка КАК НастройкаЭДО,
			|	ВЫБОР
			|		КОГДА Т.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Порядок
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК Т
			|ГДЕ
			|	Т.ИсходящийДокумент = &ВидЭД
			|	И Т.Формировать = ИСТИНА
			|	И Т.Ссылка.Контрагент = &Контрагент
			|	И Т.Ссылка.Организация = &Организация
			|	И НЕ Т.Ссылка.ПометкаУдаления
			|	И Т.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
			
			Запрос.УстановитьПараметр("Контрагент",         ПараметрыЭД.Контрагент);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыЭД.ДоговорКонтрагента);
			Запрос.УстановитьПараметр("Организация",        ПараметрыЭД.Организация);
			Запрос.УстановитьПараметр("ВидЭД",              ПараметрВидЭД);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				ПараметрыЭД.Вставить("НастройкаЭДО", Выборка.НастройкаЭДО);
				ПараметрыЭД.Вставить("СтатусПодключения", Выборка.СтатусПодключения);
				ПараметрыЭД.Вставить("СостояниеСоглашения", Выборка.СостояниеСоглашения);
				
				Результат = Истина;
				
			КонецЕсли;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверка открытия в форме дерева электронных документов.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - электронный документ.
//  ПроверятьДляСоглашения - Булево - проверять для соглашения.
//  ОткрытьФормуСоглашения - Булево - возвращает признак открытия соглашения.
//  ПараметрыЭД - Структура - параметры электронного документа.
// 
// Возвращаемое значение:
//  Булево - Истина, если можно открыть в дереве просмотра.
//
Функция МожноОткрытьВФормеДереваЭД(Знач СсылкаНаОбъект, ПроверятьДляСоглашения, ОткрытьФормуСоглашения, ПараметрыЭД) Экспорт
	
	ОткрытьВДереве = Ложь;
	Если ПроверятьДляСоглашения И Не ОпределитьДействующуюНастройкуЭДО(СсылкаНаОбъект, ПараметрыЭД) Тогда
		ОткрытьФормуСоглашения = Истина;
	Иначе
		ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
		ОткрытьВДереве = Истина;
	КонецЕсли;
	
	Возврат ОткрытьВДереве;
	
КонецФункции

// Устанавливает статус электронного документа.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭдПрисоединенныеФайлы - ссылка на электронный документ.
//  СтатусЭД - ПеречислениеСсылка.СтатусыЭД - новый статус электронного документа.
//
Процедура УстановитьСтатусЭД(ЭД, СтатусЭД) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", СтатусЭД);
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
КонецПроцедуры

// Устанавливает статус электронного документа.
//
// Параметры:
//  МассивЭД  - Массив - ссылки на электронные документы.
//  СтатусЭД  - ПеречислениеСсылка.СтатусыЭД - новый статус электронного документа.
//
Процедура УстановитьСтатусыЭД(МассивЭД, СтатусЭД) Экспорт
	
	Для Каждого ЭД Из МассивЭД Цикл
		УстановитьСтатусЭД(ЭД, СтатусЭД);
	КонецЦикла;
	
КонецПроцедуры

// Вызывается из асинхронной процедуры ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОчереднойПакетЭД(...), перед
// ее завершением. Выполняет запись ссылок на документы-основания в Произвольные ЭД, в которых по каким-либо
// причинам не удалось это сделать при распаковке ЭД документа основания.
//
Процедура НайтиЗаполнитьОснованияУВладельцевЭД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ДокументПотомок,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ИдентификаторДокументаОснования,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ЭлектронныйДокумент,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ДокументОснование
		|ИЗ
		|	РегистрСведений.ИдентификаторыДокументовОснованийВладельцевЭД КАК ИдентификаторыДокументовОснованийВладельцевЭД
		|ГДЕ
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ОснованиеПолучено";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ДокументПотомок) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			НачатьТранзакцию();
			Попытка
				ДокументОбъект = Выборка.ДокументПотомок.ПолучитьОбъект();
				НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = Выборка.ДокументОснование;
				ДокументОбъект.Записать();
				НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Выборка.ЭлектронныйДокумент);
				НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Выборка.ИдентификаторДокументаОснования);
				НаборЗаписей.Прочитать();
				Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
					НаборЗаписей.Удалить(ЗаписьРегистра);
				КонецЦикла;
				НаборЗаписей.Записать(Истина);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВидОперации = НСтр("ru = 'запись документа-основания ""%1"" в документ ""%2""'");
				ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВидОперации, Выборка.ДокументОснование, Выборка.ДокументПотомок);
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов.

#Область РаспаковкаПакетовЭД

// Распаковывает пакеты электронных документов.
//
// Параметры:
//  МассивПакетовЭД           - Массив - ссылки на распаковываемые пакеты;
//  КоличествоРаспакованныхЭД - Число - количество пакетов, которые удалось распаковать.
//
Процедура РаспаковатьПакетыЭДНаСервере(Знач МассивПакетовЭД, КоличествоРаспакованныхЭД) Экспорт
	
	// Подготовим данные по пакетам ЭД.
	ДанныеПакетовЭД = ДанныеПакетовЭД(МассивПакетовЭД);
	
	КоличествоЭлементовКоллекции = ДанныеПакетовЭД.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		Счетчик = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		СтруктураПакетаЭД = ДанныеПакетовЭД[Счетчик];
		
		ОписаниеОшибки = "";
		
		// Расшифруем электронные документы
		Для каждого ЭлектронныйДокумент Из СтруктураПакетаЭД.МассивЭД Цикл
			
			Если ЭлектронныйДокумент.Зашифрован Тогда
				
				МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("РасшифровкаЭД", Ложь, ОписаниеОшибки);
				Если МенеджерКриптографии = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				ПарольДоступаКЗакрытомуКлючу = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(
					ЭлектронныйДокумент.СсылкаНаСертификатРасшифровки);
				Если ПарольДоступаКЗакрытомуКлючу = Неопределено Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось получить пароль к сертификату: %1'");
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						ЭлектронныйДокумент.СсылкаНаСертификатРасшифровки);
					Прервать;
				КонецЕсли;
				МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольДоступаКЗакрытомуКлючу;
				
				ДвоичныеДанныеФайлаЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
				Попытка
					РасшифрованныеДвоичныеДанныеФайлаЭД = МенеджерКриптографии.Расшифровать(ДвоичныеДанныеФайлаЭД);
				Исключение
					ШаблонСообщения = НСтр("ru = 'Расшифровка пакета ЭД: %1'");
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Прервать;
				КонецПопытки;
				
				// Помещаем двоичные данные файла в тот же адрес хранилища.
				АдресЭД = ПоместитьВоВременноеХранилище(РасшифрованныеДвоичныеДанныеФайлаЭД, ЭлектронныйДокумент.АдресЭД);
			КонецЕсли;
		КонецЦикла;

		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ШаблонСообщения = НСтр("ru = 'При распаковке пакета %1 возникла ошибка:
			|%2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураПакетаЭД.ПакетЭДСсылка,
				ОписаниеОшибки);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстСообщения,
				ТекстСообщения);
			
			ДанныеПакетовЭД.Удалить(Счетчик);
			Продолжить;
		КонецЕсли;
		
		// Получим сертификаты и выполним проверку подписи
		Для каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
			
			МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПолучениеСертификатовИзПодписи", Ложь, ОписаниеОшибки);
			Если МенеджерКриптографии = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Подпись.АдресЭД) Тогда
				ОписаниеОшибки = НСтр("ru = 'Не удалось найти исходные данные для проверки ответной подписи.'");
				Прервать;
			КонецЕсли;
			
			ПодписьПроверена = ЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии, Подпись.АдресЭД, Подпись.АдресЭП, ОписаниеОшибки);
			Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
				Прервать;
			КонецЕсли;
			
			Подпись.Вставить("ДатаПроверкиПодписи", ТекущаяДатаСеанса());
			Подпись.Вставить("ПодписьВерна",        ПодписьПроверена);
			
			// Подпись не была прочитана при записи объекта.
			ДвоичныеДанныеФайлаЭП = ПолучитьИзВременногоХранилища(Подпись.АдресЭП);
			ДвоичныеДанныеФайлаЭД = ПолучитьИзВременногоХранилища(Подпись.АдресЭД);
			Попытка
				Сертификат = Неопределено;
				МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайлаЭД, ДвоичныеДанныеФайлаЭП, Сертификат);
			Исключение
				ШаблонСообщения = НСтр("ru = 'Получение сертификатов из подписи: %1'");
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Прервать;
			КонецПопытки;
			
			Если Сертификат <> Неопределено Тогда
				
				Подпись.Вставить("Отпечаток", Base64Строка(Сертификат.Отпечаток));
				Подпись.Вставить("КомуВыданСертификат", ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Сертификат));
				Подпись.Вставить("АдресСертификата", ПоместитьВоВременноеХранилище(Сертификат.Выгрузить(), Новый УникальныйИдентификатор));
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ШаблонСообщения = НСтр("ru = 'При распаковке пакета %1 возникла ошибка:
			|%2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтруктураПакетаЭД.ПакетЭДСсылка, ОписаниеОшибки);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстСообщения,
				ТекстСообщения, 0);
			
			ДанныеПакетовЭД.Удалить(Счетчик);
		КонецЕсли;
	КонецЦикла;
		
	// Занесем данные в базу.
	МассивСлужебныхЭД = Новый Массив;
	НовыеДокументы = Новый Массив;
	
	РаспакованныеДокументы = Новый Структура;
	РаспакованныеДокументы.Вставить("МассивСлужебныхЭД", МассивСлужебныхЭД);
	РаспакованныеДокументы.Вставить("НовыеДокументы", НовыеДокументы);
	
	ЗаписатьДанныеПакетовЭД(ДанныеПакетовЭД, РаспакованныеДокументы, КоличествоРаспакованныхЭД);
	
	МассивСлужебныхЭД = РаспакованныеДокументы.МассивСлужебныхЭД;
	ВыполнитьДействияПоЭД(Новый Массив, Новый Массив, "ПодписатьОтправить", Новый Структура,
		МассивСлужебныхЭД, Новый Соответствие);
		
КонецПроцедуры

// Получение данных пакетов ЭД.
//
// Параметры:
//  МассивПакетовЭД	 - Массив - список Пакетов ЭД.
// 
// Возвращаемое значение:
//  Структура - данные пакетов ЭД.
//
Функция ДанныеПакетовЭД(МассивПакетовЭД) Экспорт
	
	ДанныеПакетовЭД = Новый Массив;
	// Делаем перебор пакетов и распаковку их содержимого в папку
	Для каждого ПакетЭД Из МассивПакетовЭД Цикл
		СтруктураПакетаЭД = Новый Структура("ПакетЭДСсылка, МассивЭД, МассивЭП");
		
		// УстановитьПривилегированныйРежим(Истина);
		НастройкаЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "НастройкаЭДО");
		
		МассивЭД = Новый Массив;
		МассивЭП = Новый Массив;
		УникальныйИдентификатор = ПакетЭД.УникальныйИдентификатор();
		
		Попытка
			
			// Необходимо получить архив пакета из присоединенных файлов к документу.
			ВыборкаПрисоединенныхФайлов = ОбменСКонтрагентамиСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
			Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) 
				Или НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
				Продолжить;
			КонецЕсли;
			
			// Для каждого из пакетов необходимо определить файл с данными.
			ПараметрыДанных = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
			
			ФайлАрхива = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("zip");
			ДвоичныеДанныеФайла.Записать(ФайлАрхива);
			
			АрхивЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
			ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", УникальныйИдентификатор);
			
			Попытка
				АрхивЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(АрхивЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка архива пакета ЭД'"), ТекстОшибки,
					ТекстСообщения);
				
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлАрхива);
				Продолжить;
			КонецПопытки;
			
			АрхивЧтение.Закрыть();
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлАрхива);
			
			МассивФайловТранспортнойИнформации = НайтиФайлы(ПапкаДляРаспаковки, "meta*.xml", Истина);
			
			Если МассивФайловТранспортнойИнформации.Количество() > 0 Тогда
				ФайлТранспортнойИнформации = МассивФайловТранспортнойИнформации[0];
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				Продолжить;
			КонецЕсли;
			
			ОбъектXML = Новый ЧтениеXML;
			ОбъектXML.ОткрытьФайл(ФайлТранспортнойИнформации.ПолноеИмя);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML,
				ОбменСКонтрагентамиВнутренний.ПолучитьТипЗначенияCML("ContainerDescription", "http://api-invoice.taxcom.ru/meta"));
			ОбъектXML.Закрыть();
			
			Для Каждого ДокОборот Из ЭД.DocFlow Цикл
				НомерЭДО = ДокОборот.Id;
				
				Для Каждого Документ Из ДокОборот.Documents.Document Цикл
					
					СтруктураВложения = Новый Структура("ТипДанных, АдресЭД, АдресДополнительногоЭД,
					|УникальныйИД, НомерЭД, КодТранзакции, КодРегламента, ТипЭлементаВерсииЭД, МассивИдентификаторовДокументовОснований,
					|Зашифрован, СсылкаНаСертификатРасшифровки, ДополнительныеПараметры,
					|ПроизвольныйЭД, ТипДокумента, ТекстСопроводительнойЗаписки, ТребуетсяПодтверждение,
					|АдресЭП, АдресСертификата, Отпечаток, КомуВыданСертификат, ДатаПроверкиПодписи, ПодписьВерна");
					
					КодТранзакции = Документ.TransactionCode;
					КодРегламента = Документ.ReglamentCode;
					Зашифрован = Ложь;
					ТипКарточкиЭД = Перечисления.ТипыЭД.Прочее;
					ТипКарточкиЭДПолучен = Ложь;
					НомерЭДКарточки = "";
					ПроизвольныйЭД = Ложь;
					ТекстСопроводительнойЗаписки = "";
					МассивИдентификаторовДокументовОснований = Новый Массив;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
					
					// Получим карточку электронного документа
					Если Документ.Files.ExternalCard <> Неопределено Тогда
						ПолноеИмяФайлаКарточки = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки,
							Документ.Files.ExternalCard.Path);
						СтруктураФайлаКарточки = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаКарточки);
						
						Если Прав(ПапкаДляРаспаковки, 1) = "\" Тогда
							СтруктураФайлаКарточки.ПолноеИмя = СтрЗаменить(СтруктураФайлаКарточки.ПолноеИмя, "/", "\");
						КонецЕсли;
						
						ОбъектXMLКарточки = Новый ЧтениеXML;
						ОбъектXMLКарточки.ОткрытьФайл(СтруктураФайлаКарточки.ПолноеИмя);
						КарточкаЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXMLКарточки,
							ОбменСКонтрагентамиВнутренний.ПолучитьТипЗначенияCML("Card", "http://api-invoice.taxcom.ru/card"));
						ОбъектXMLКарточки.Закрыть();
						
						Если КарточкаЭД.Identifiers.ExternalIdentifier <> Неопределено Тогда
							НомерЭДКарточки = КарточкаЭД.Identifiers.ExternalIdentifier;
						КонецЕсли;
						
						Если КарточкаЭД.Description <> Неопределено Тогда
							Если КарточкаЭД.Description.AdditionalData <> Неопределено
								И КарточкаЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
								
								ДополнительныеПараметры = Новый Структура;
								Если ТипЗнч(КарточкаЭД.Description.AdditionalData.AdditionalParameter) = Тип("СписокXDTO") Тогда
									Для Каждого Свойство Из КарточкаЭД.Description.AdditionalData.AdditionalParameter Цикл
										Если Свойство.Name = "Зашифрован" Тогда
											Зашифрован = Булево(Свойство.Value);
											СтруктураВложения.Вставить("СсылкаНаСертификатРасшифровки",
												ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЭДО, "СертификатОрганизацииДляРасшифровки"));
										ИначеЕсли Свойство.Name = "DocumentType" Тогда
											// После расширения состава типов документов, типы передаются в доп.данных
											ТипКарточкиЭД = ОбменСКонтрагентамиВнутренний.ТипДокументаПоСтроке(Свойство.Value);
											ТипКарточкиЭДПолучен = Истина;
										ИначеЕсли Свойство.Name = "ParentDocument" Тогда
											МассивИдентификаторовДокументовОснований.Добавить(Свойство.Value);
										ИначеЕсли Свойство.Name = "Комментарий" Тогда
											ТекстСопроводительнойЗаписки = Свойство.Value;
										Иначе
											ДополнительныеПараметры.Вставить(Свойство.Name, Свойство.Value);
										КонецЕсли;
									КонецЦикла;
									
								ИначеЕсли ТипЗнч(КарточкаЭД.Description.AdditionalData.AdditionalParameter) = Тип("ОбъектXDTO") Тогда
									Если КарточкаЭД.Description.AdditionalData.AdditionalParameter.Name = "Зашифрован" Тогда
										Зашифрован = Булево(КарточкаЭД.Description.AdditionalData.AdditionalParameter.Value);
										СтруктураВложения.Вставить("СсылкаНаСертификатРасшифровки",
											ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЭДО, "СертификатОрганизацииДляРасшифровки"));
									ИначеЕсли Свойство.Name = "ParentDocument" Тогда
										МассивИдентификаторовДокументовОснований.Добавить(КарточкаЭД.Description.AdditionalData.AdditionalParameter.Value);
									Иначе
										ДополнительныеПараметры.Вставить(
											КарточкаЭД.Description.AdditionalData.AdditionalParameter.Name,
											КарточкаЭД.Description.AdditionalData.AdditionalParameter.Value);
									КонецЕсли;
								КонецЕсли;
								СтруктураВложения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
							КонецЕсли;
							
							// Определим заголовок произвольного ЭД.
							Если КарточкаЭД.Description.Свойства().Получить("Title") <> Неопределено Тогда
								Если КарточкаЭД.Description.Title <> Неопределено Тогда
									ПроизвольныйЭД = (КарточкаЭД.Description.Title = Строка(Перечисления.ВидыЭД.ПроизвольныйЭД));
								КонецЕсли;
							КонецЕсли;
							
							Если Не ЗначениеЗаполнено(ТекстСопроводительнойЗаписки) Тогда
								ТекстСопроводительнойЗаписки = КарточкаЭД.Description.Comment;
							КонецЕсли;
								
						КонецЕсли;
						
						Если КарточкаЭД.Type <> Неопределено Тогда
							Если НЕ ТипКарточкиЭДПолучен Тогда
								ТипКарточкиЭД = ОбменСКонтрагентамиВнутренний.ТипДокументаПоСтроке(КарточкаЭД.Type.Name);
							КонецЕсли;
							ИмяТипаЭлектронногоДокумента = НРег(СокрЛП(КарточкаЭД.Type.Name));
							Если ИмяТипаЭлектронногоДокумента = "invoice"
								Или ИмяТипаЭлектронногоДокумента = "correctiveinvoice" Тогда
								
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
							ИначеЕсли ИмяТипаЭлектронногоДокумента = "formalizedworkresultvendor"
								Или ИмяТипаЭлектронногоДокумента = "formalizedtradingvendor" Тогда
								
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП;
							ИначеЕсли ИмяТипаЭлектронногоДокумента = "formalizedworkresultcustomer"
								Или ИмяТипаЭлектронногоДокумента = "formalizedstatementcustomer" Тогда
								
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик;
							ИначеЕсли ИмяТипаЭлектронногоДокумента = "formalizedtradingcustomer"
								Или ИмяТипаЭлектронногоДокумента = "formalizedconsignmentcustomer" Тогда
								
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель;
								Если КарточкаЭД.Description.Свойства().Получить("Title") <> Неопределено Тогда
									Если КарточкаЭД.Description.Title <> Неопределено
										И ВРег(КарточкаЭД.Description.Title) = ВРег(Строка(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)) Тогда
										ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
									КонецЕсли;
								КонецЕсли;
								
							ИначеЕсли ИмяТипаЭлектронногоДокумента = "expinvoice" Тогда
								
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД;
							ИначеЕсли ИмяТипаЭлектронногоДокумента = "corexpinvoice" Тогда
								
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД;
							ИначеЕсли ИмяТипаЭлектронногоДокумента = "expinvoiceandprimaryaccountingdocumentvendor" Тогда
								
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД;
							ИначеЕсли ИмяТипаЭлектронногоДокумента = "expinvoiceandprimaryaccountingdocumentcustomer"
								Или ИмяТипаЭлектронногоДокумента = "primaryaccountingdocumentcustomer" Тогда
								
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД;
							ИначеЕсли ИмяТипаЭлектронногоДокумента = "corexpinvoiceandprimaryaccountingdocumentvendor" Тогда
								
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД;
							ИначеЕсли ИмяТипаЭлектронногоДокумента = "corexpinvoiceandprimaryaccountingdocumentcustomer"
								Или ИмяТипаЭлектронногоДокумента = "corprimaryaccountingdocumentcustomer" Тогда
								
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД;
							ИначеЕсли ИмяТипаЭлектронногоДокумента = "primaryaccountingdocumentvendor" Тогда
								
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД;
							ИначеЕсли ИмяТипаЭлектронногоДокумента = "corprimaryaccountingdocumentvendor" Тогда
								
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД;
							КонецЕсли;
							Если КарточкаЭД.Type.ResignRequired <> Неопределено Тогда
								ТребуетсяПодтверждение = Булево(КарточкаЭД.Type.ResignRequired);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					// Из ЭД
					СтруктураВложения.Вставить("УникальныйИД",                 НомерЭДО);
					СтруктураВложения.Вставить("НомерЭД",                      НомерЭДКарточки);
					СтруктураВложения.Вставить("КодТранзакции",                КодТранзакции);
					СтруктураВложения.Вставить("КодРегламента",                КодРегламента);
					СтруктураВложения.Вставить("ТипЭлементаВерсииЭД",          ТипЭлементаВерсииЭД);
					СтруктураВложения.Вставить("ПроизвольныйЭД",               ПроизвольныйЭД);
					СтруктураВложения.Вставить("ТипДокумента",                 ТипКарточкиЭД);
					СтруктураВложения.Вставить("ТекстСопроводительнойЗаписки", ТекстСопроводительнойЗаписки);
					СтруктураВложения.Вставить("ТребуетсяПодтверждение",       ТребуетсяПодтверждение);
					СтруктураВложения.Вставить("МассивИдентификаторовДокументовОснований", МассивИдентификаторовДокументовОснований);
					
					// Получим файл электронного документа
					СтруктураЭлектронногоДокумента = Новый Структура();
					Если Документ.Files.MainImage <> Неопределено Тогда
						ПолноеИмяФайлаЭД = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки,
							Документ.Files.MainImage.Path);
						СтруктураФайлаЭД = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаЭД);
						
						Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
							СтруктураФайлаЭД.ПолноеИмя = СтрЗаменить(СтруктураФайлаЭД.ПолноеИмя, "\", "/");
						КонецЕсли;
						
						ДвоичныеДанныеФайлаЭД = Новый ДвоичныеДанные(СтруктураФайлаЭД.ПолноеИмя);
						СтруктураВложения.Вставить("АдресЭД", ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаЭД, УникальныйИдентификатор));
						СтруктураВложения.Вставить("СсылкаНаЭДПрисоединенныйФайл", Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
						
						// Когда приходят пакеты от оператора ЭДО без явного признака "НеФормализованный".
						Если ВРег(СтруктураФайлаЭД.Расширение) <> ".ZIP" И ВРег(СтруктураФайлаЭД.Расширение) <> ".XML" Тогда
							СтруктураВложения.Вставить("ПроизвольныйЭД", Истина);
						КонецЕсли;
						
						ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектронногоДокумента, СтруктураВложения);
						
						СтруктураЭлектронногоДокумента.Вставить("ТипДанных",        ОпределитьТипДанныхПоКодуТранзакции(КодТранзакции));
						СтруктураЭлектронногоДокумента.Вставить("ИмяБезРасширения", СтруктураФайлаЭД.ИмяБезРасширения);
						СтруктураЭлектронногоДокумента.Вставить("Расширение",       СтруктураФайлаЭД.Расширение);
						СтруктураЭлектронногоДокумента.Вставить("Зашифрован",       Зашифрован);
						
						МассивЭД.Добавить(СтруктураЭлектронногоДокумента);
					КонецЕсли;
					
					Если Документ.Files.MainImageSignature <> Неопределено Тогда
						
						Для Каждого Подпись Из Документ.Files.MainImageSignature Цикл
							ПолноеИмяФайлаЭП = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки, Подпись.Path);
							СтруктураФайлаЭП = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаЭП);
						
							Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
								СтруктураФайлаЭП.ПолноеИмя = СтрЗаменить(СтруктураФайлаЭП.ПолноеИмя, "\", "/");
							КонецЕсли;
							
							СтруктураЭлектроннойПодписи = Новый Структура();
							ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектроннойПодписи, СтруктураВложения);
							
							ДвоичныеДанныеФайлаЭП = Новый ДвоичныеДанные(СтруктураФайлаЭП.ПолноеИмя);
							СтруктураЭлектроннойПодписи.Вставить("АдресЭП",
								ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаЭП, УникальныйИдентификатор));
								
							СтруктураЭлектроннойПодписи.Вставить("ТипДанных",        "ЭП");
							СтруктураЭлектроннойПодписи.Вставить("ИмяБезРасширения", СтруктураФайлаЭП.ИмяБезРасширения);
							СтруктураЭлектроннойПодписи.Вставить("Расширение",       СтруктураФайлаЭП.Расширение);
							
							// В случае ответной подписи найдем исходный ЭД.
							Если НЕ ЗначениеЗаполнено(СтруктураЭлектроннойПодписи.АдресЭД) Тогда
								
								СтруктураПараметровПоиска = Новый Структура;
								СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
								СтруктураПараметровПоиска.Вставить("УникальныйИД",  СтруктураЭлектроннойПодписи.УникальныйИД);
								Если КодТранзакции = "MainDocumentResign" Тогда
									ТипЭлементаВерсииЭД = Новый Массив;
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
									СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
								ИначеЕсли КодТранзакции = "CancellationOfferResign" Тогда
									СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПОА);
								КонецЕсли;
								
								ЭлектронныйДокумент = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
								Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
									
									ДопИнформацияПоЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ЭлектронныйДокумент, УникальныйИдентификатор);
									
									СтруктураЭлектроннойПодписи.Вставить("АдресЭД", ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
									СтруктураЭлектроннойПодписи.Вставить("СсылкаНаЭДПрисоединенныйФайл", ЭлектронныйДокумент);
								КонецЕсли;
							КонецЕсли;
							
							МассивЭП.Добавить(СтруктураЭлектроннойПодписи);
						КонецЦикла;
					КонецЕсли;
					
					Если Документ.Files.DataImage <> Неопределено Тогда
						ПолноеИмяФайлаДопДанныхЭД = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки,
							Документ.Files.DataImage.Path);
						СтруктураФайлаДопДанныхЭД = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаДопДанныхЭД);
						
						Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
							СтруктураФайлаДопДанныхЭД.ПолноеИмя = СтрЗаменить(СтруктураФайлаДопДанныхЭД.ПолноеИмя, "\", "/");
						КонецЕсли;
						
						ДвоичныеДанныеФайлаДопДанныхЭД = Новый ДвоичныеДанные(СтруктураФайлаДопДанныхЭД.ПолноеИмя);
						АдресДополнительногоЭД = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаДопДанныхЭД, УникальныйИдентификатор);
						СтруктураВложения.Вставить("АдресЭД", АдресДополнительногоЭД);
						СтруктураЭлектронногоДокумента.Вставить("АдресДополнительногоЭД", АдресДополнительногоЭД);
						
						СтруктураВложения.Вставить("СсылкаНаЭДПрисоединенныйФайл", Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
						
						СтруктураЭлектронногоДокумента = Новый Структура();
						ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектронногоДокумента, СтруктураВложения);
						
						СтруктураЭлектронногоДокумента.Вставить("ТипДанных",        "ДополнительныйЭД");
						СтруктураЭлектронногоДокумента.Вставить("ИмяБезРасширения", СтруктураФайлаДопДанныхЭД.ИмяБезРасширения);
						СтруктураЭлектронногоДокумента.Вставить("Расширение",       СтруктураФайлаДопДанныхЭД.Расширение);
						СтруктураЭлектронногоДокумента.Вставить("Зашифрован",       Ложь);
						
						МассивЭД.Добавить(СтруктураЭлектронногоДокумента);
					КонецЕсли;
					
					Если Документ.Files.DataImageSignature <> Неопределено Тогда
						
						Для Каждого Подпись Из Документ.Files.DataImageSignature Цикл
							ПолноеИмяФайлаДопДанныхЭП = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки, Подпись.Path);
							СтруктураФайлаДопДанныхЭП = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаДопДанныхЭП);
						
							Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
								СтруктураФайлаДопДанныхЭП.ПолноеИмя = СтрЗаменить(СтруктураФайлаДопДанныхЭП.ПолноеИмя, "\", "/");
							КонецЕсли;
							
							СтруктураЭлектроннойПодписи = Новый Структура();
							ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектроннойПодписи, СтруктураВложения);
							
							ДвоичныеДанныеФайлаДопДанныхЭП = Новый ДвоичныеДанные(СтруктураФайлаДопДанныхЭП.ПолноеИмя);
							СтруктураВложения.Вставить("АдресЭП", ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаДопДанныхЭП,
								УникальныйИдентификатор));
								
							СтруктураЭлектроннойПодписи.Вставить("ТипДанных",        "ПодписьДополнительногоЭД");
							СтруктураЭлектроннойПодписи.Вставить("ИмяБезРасширения", СтруктураФайлаДопДанныхЭП.ИмяБезРасширения);
							СтруктураЭлектроннойПодписи.Вставить("Расширение",       СтруктураФайлаДопДанныхЭП.Расширение);
							
							МассивЭП.Добавить(СтруктураЭлектроннойПодписи);
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			СтруктураПакетаЭД.Вставить("ПакетЭДСсылка", ПакетЭД);
			СтруктураПакетаЭД.Вставить("МассивЭД",      МассивЭД);
			СтруктураПакетаЭД.Вставить("МассивЭП",      МассивЭП);
			ДанныеПакетовЭД.Добавить(СтруктураПакетаЭД);
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки,
				ТекстСообщения);
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		КонецПопытки;
	КонецЦикла;
	
	Возврат ДанныеПакетовЭД;
	
КонецФункции

// Запись данных пакетов ЭД.
//
// Параметры:
//  ДанныеПакетовЭД	          - Массив - список пакетов ЭД.
//  РаспакованныеДокументы    - Структура - служебные данные:
//    * МассивСлужебныхЭД         - Массив - служебные электронные документы.
//    * НовыеДокументы            - Массив - добавляемые электронные документы.
//  КоличествоРаспакованныхЭД - Число - количество распакованных пакетов.
//
Процедура ЗаписатьДанныеПакетовЭД(ДанныеПакетовЭД, РаспакованныеДокументы, КоличествоРаспакованныхЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСлужебныхЭД = РаспакованныеДокументы.МассивСлужебныхЭД;
	НовыеДокументы = РаспакованныеДокументы.НовыеДокументы;
	
	Для каждого СтруктураПакетаЭД Из ДанныеПакетовЭД Цикл
		
		ПараметрыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПакетаЭД.ПакетЭДСсылка,
			"ПрофильНастроекЭДО, СпособОбменаЭД, НастройкаЭДО, Отправитель, Получатель, Организация, Контрагент, ВерсияФорматаПакета");
		
		Попытка
			
			НачатьТранзакцию();
			
			МассивДобавленныхФайлов = Новый Массив;
			МассивДобавленныхФайловДляИзвещений = Новый Массив;
			
			// Записываем в базу ЭД
			Для каждого ЭлектронныйДокумент Из СтруктураПакетаЭД.МассивЭД Цикл
				
				АдресЭД = Неопределено;
				ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("dec", Новый УникальныйИдентификатор);
				
				ТребуетсяИзвещение = Истина;
				Если ЗначениеЗаполнено(ЭлектронныйДокумент.ДополнительныеПараметры) Тогда
					Если ЭлектронныйДокумент.ДополнительныеПараметры.Свойство("НеТребуетсяИзвещение") Тогда
						ТребуетсяИзвещение = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				// Распакуем пакет если в качестве ЭД пришел архив
				Если ЭлектронныйДокумент.Расширение = ".xml" Или ЭлектронныйДокумент.ПроизвольныйЭД Тогда
					
					ДвоичныеДанныеФайлЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
					ФайлЭД = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(ЭлектронныйДокумент.Расширение);
					ДвоичныеДанныеФайлЭД.Записать(ФайлЭД);
					
					ФайлДанныхЭД = Новый Файл(ФайлЭД);
					АдресЭД = ЭлектронныйДокумент.АдресЭД;
					
				ИначеЕсли ЭлектронныйДокумент.Расширение = ".zip" Тогда
					
					ДвоичныеДанныеАрхиваЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
					ФайлЭД = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(ЭлектронныйДокумент.Расширение);
					ДвоичныеДанныеАрхиваЭД.Записать(ФайлЭД);
					
					ФайлДанныхАрхиваЭД = Новый Файл(ФайлЭД);
					ЧтениеЗИП = Новый ЧтениеZIPФайла(ФайлДанныхАрхиваЭД.ПолноеИмя);
					Попытка
						ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРаспаковки);
					Исключение
						ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРаспаковки) Тогда
							ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
						КонецЕсли;
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки,
						ТекстСообщения);
						
						ЧтениеЗИП.Закрыть();
						ФлагОшибки = Истина;
						Прервать;
					КонецПопытки;
					ЧтениеЗИП.Закрыть();
					
					ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
					Если ФайлыЭД.Количество() > 0 Тогда
						ФайлДанныхЭД = ФайлыЭД[0];
						
						ДвоичныеДанныеФайлЭД = Новый ДвоичныеДанные(ФайлДанныхЭД.ПолноеИмя);
						АдресЭД = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлЭД);
					Иначе // Будем считать, что пришел произвольный ЭД.
						ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
						
						ДвоичныеДанныеФайлЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
						ФайлЭД = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(ЭлектронныйДокумент.Расширение);
						ДвоичныеДанныеФайлЭД.Записать(ФайлЭД);
						
						ФайлДанныхЭД = Новый Файл(ФайлЭД);
						АдресЭД = ЭлектронныйДокумент.АдресЭД;
						
					КонецЕсли;
				КонецЕсли;
				
				Если ЭлектронныйДокумент.ТипДанных = "ЭД" Тогда
					
					ВладелецЭД = Неопределено;
					ДобавленныйФайл = Неопределено;
					
					Если ЭлектронныйДокумент.КодТранзакции = "CustomerTitle"
						Или ЭлектронныйДокумент.КодТранзакции = "CustomerInformation" Тогда
						ИмяДокумента = "ЭлектронныйДокументИсходящий";
					Иначе
						ИмяДокумента = "ЭлектронныйДокументВходящий"
					КонецЕсли;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	ЭлектронныйДокументИсходящий.Ссылка
					|ИЗ
					|	Документ." + ИмяДокумента + " КАК ЭлектронныйДокументИсходящий
					|ГДЕ
					|	ЭлектронныйДокументИсходящий.УникальныйИД = &УникальныйИД";
					
					Запрос.УстановитьПараметр("УникальныйИД",ЭлектронныйДокумент.УникальныйИД);
					
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						
						ВладелецЭД = Выборка.Ссылка;
						
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("НомерЭД",       ЭлектронныйДокумент.НомерЭД);
						СтруктураПараметровПоиска.Вставить("УникальныйИД",  ЭлектронныйДокумент.УникальныйИД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						СтруктураПараметровПоиска.Вставить("ВладелецФайла", ВладелецЭД);
						Если ЭлектронныйДокумент.КодТранзакции = "CustomerTitle"
							Или ЭлектронныйДокумент.КодТранзакции = "CustomerInformation" Тогда
							МассивТипов = Новый Массив;
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
							СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТипов);
						Иначе
							МассивТипов = Новый Массив;
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
							Если ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
								МассивТипов = Новый Массив;
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
							КонецЕсли;
							СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТипов);
						КонецЕсли;
						
						ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
					КонецЕсли;
					
					Если ДобавленныйФайл = Неопределено Тогда
						
						СтруктураЭД = Новый Структура; 
						ЭлектронныйДокументВладелец = "";
						
						СтруктураФайлаЭД = Новый Структура;
						СтруктураФайлаЭД.Вставить("ТипЭлементаВерсииЭД", ЭлектронныйДокумент.ТипЭлементаВерсииЭД);
						
						Если НЕ ЭлектронныйДокумент.ПроизвольныйЭД Тогда
							
							ОписаниеОшибки = "";
							
							ДанныеФайлаЭД = ОбменСКонтрагентамиВнутренний.ДанныеФайлаЭД(ФайлДанныхЭД.ПолноеИмя, ОписаниеОшибки);
							Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
								Если ЭлектронныйДокумент.КодРегламента = "Nonformalized" Тогда // неизвестный XML не удалось прочитать
									ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
								Иначе
									ВызватьИсключение ОписаниеОшибки;
								КонецЕсли;
							Иначе
								
								ОбменСКонтрагентамиВнутренний.ПрочитатьШапкуФайлаCMLПоXDTO(ДанныеФайлаЭД, СтруктураФайлаЭД, ОписаниеОшибки);
								Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
									Если Не ЗначениеЗаполнено(СтруктураФайлаЭД) Тогда // неизвестный XML не удалось определить видЭД
										ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
									Иначе
										ВызватьИсключение ОписаниеОшибки;
									КонецЕсли;
								ИначеЕсли ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено
									И ЭлектронныйДокумент.КодРегламента = "Nonformalized" Тогда // Отправили формализованный XML через ПроизвольныйЭД
										ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
								Иначе
									
									Если ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(СтруктураФайлаЭД.ТипЭлементаВерсииЭД) Тогда
										
										ВладелецЭД = ОпределитьОбъектПривязки(СтруктураФайлаЭД);
										
										Если ВладелецЭД = Неопределено Тогда
											// Получен ответный титул ЭД ФНС. Если владелец не найден, значит либо его удалили из ИБ,
											// либо ЭД попал сюда случайно.
											ТекстОшибки = НСтр("ru = 'Для полученного ответного титула (%1) не найден исходящий ЭД.
											|Возможные причины:
											|- первичный титул был удален из текущей базы;
											|- полученный пакет не предназначен для текущей ИБ (первичный титул был сформирован в другой базе/копии текущей базы).'");
											ОписаниеОшибки = СтрШаблон(ТекстОшибки, СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
											
											ВызватьИсключение ОписаниеОшибки;
										КонецЕсли;
									КонецЕсли;
									
									СтруктураПараметров = Новый Структура;
									СтруктураПараметров.Вставить("ФайлДанныхСсылка", АдресЭД);
									СтруктураПараметров.Вставить("ФайлДопДанных",    ЭлектронныйДокумент.АдресДополнительногоЭД);
									
									СтруктураЭД = ОбменСКонтрагентамиВнутренний.ПолучитьДанныеИзФайла(СтруктураПараметров);

									СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",             СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
									СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем",  СтруктураФайлаЭД.ДатаФормированияЭДОтправителем);
									СтруктураЭД.Вставить("НаправлениеЭД",                   ОпределитьНаправление(СтруктураФайлаЭД));
									
									Если СтруктураФайлаЭД.Свойство("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец) Тогда
										СтруктураЭД.Вставить("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец);
									КонецЕсли;
									
									// Xsd-схема Счета-фактуры не позволяет передавать НомерЭД,
									// в этом случае возьмем НомерЭД из карточки транспортной информации.
									Если ЭлектронныйДокумент.Свойство("КодРегламента") И ЗначениеЗаполнено(ЭлектронныйДокумент.КодРегламента) Тогда
										СтруктураЭД.Вставить("НомерЭД", ЭлектронныйДокумент.НомерЭД);
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если ВладелецЭД = Неопределено Тогда
							
							Ответственный = ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД(ПараметрыПакетаЭД.Контрагент,
								ПараметрыПакетаЭД.НастройкаЭДО);
							Если Не ЗначениеЗаполнено(Ответственный) Тогда 
								Ответственный = Пользователи.АвторизованныйПользователь();
							КонецЕсли;
							
							ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
							Если ЭлектронныйДокумент.КодРегламента = "Formalized" 
								Или ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
								ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
							КонецЕсли;
							
							СтруктураВладельцаЭД = Новый Структура;
							СтруктураВладельцаЭД.Вставить("Входящий",               Истина);
							СтруктураВладельцаЭД.Вставить("Организация",            ПараметрыПакетаЭД.Организация);
							СтруктураВладельцаЭД.Вставить("Контрагент",             ПараметрыПакетаЭД.Контрагент);		
							СтруктураВладельцаЭД.Вставить("ВерсияФорматаПакета",    ПараметрыПакетаЭД.ВерсияФорматаПакета);
							СтруктураВладельцаЭД.Вставить("Ответственный",          Ответственный);
							СтруктураВладельцаЭД.Вставить("ПрофильНастроекЭДО",     ПараметрыПакетаЭД.ПрофильНастроекЭДО);
							СтруктураВладельцаЭД.Вставить("НастройкаЭДО",           ПараметрыПакетаЭД.НастройкаЭДО);
							СтруктураВладельцаЭД.Вставить("УникальныйИД",           ЭлектронныйДокумент.УникальныйИД);
							СтруктураВладельцаЭД.Вставить("ВерсияРегламентаЭДО",    ВерсияРегламентаЭДО);
							СтруктураВладельцаЭД.Вставить("ТребуетсяИзвещение",     ТребуетсяИзвещение);
							СтруктураВладельцаЭД.Вставить("ТипЭлементаВерсииЭД",    СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
							СтруктураВладельцаЭД.Вставить("ТребуетсяПодтверждение",        ЭлектронныйДокумент.ТребуетсяПодтверждение);
							
							Если НЕ ЭлектронныйДокумент.ПроизвольныйЭД Тогда
								
								СтруктураВладельцаЭД.Вставить("ВидЭД",                          СтруктураЭД.ВидЭД);
								СтруктураВладельцаЭД.Вставить("НомерВерсииЭД",                  СтруктураЭД.НомерВерсииЭД);
								СтруктураВладельцаЭД.Вставить("НомерДокументаОтправителя",      СтруктураЭД.НомерДокументаОтправителя);
								СтруктураВладельцаЭД.Вставить("СуммаДокумента",                 СтруктураЭД.СуммаДокумента); 
								СтруктураВладельцаЭД.Вставить("ДатаДокументаОтправителя",       СтруктураЭД.ДатаДокументаОтправителя);
							Иначе
								СтруктураВладельцаЭД.Вставить("ВидЭД",                          Перечисления.ВидыЭД.ПроизвольныйЭД);
								СтруктураВладельцаЭД.Вставить("НомерВерсииЭД",                  0);
								СтруктураВладельцаЭД.Вставить("НомерДокументаОтправителя",      "");
								СтруктураВладельцаЭД.Вставить("ДатаДокументаОтправителя",       "");
								СтруктураВладельцаЭД.Вставить("ТипДокумента",                  ЭлектронныйДокумент.ТипДокумента);
								СтруктураВладельцаЭД.Вставить("Прочитан",                      Ложь);
								
								#Область ПоискДокументовОснований
								
								УникальныйИДОснования = Неопределено;
								ДокументОснование = Неопределено;
								Если ЗначениеЗаполнено(ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований)
									И ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований.Количество() > 0 Тогда
									
									// Актуальный алгоритм поиска документов-оснований на стороне получателя.
									СтруктураПараметровПоиска = Новый Структура;
									СтруктураПараметровПоиска.Вставить("Организация", ПараметрыПакетаЭД.Организация);
									СтруктураПараметровПоиска.Вставить("Контрагент",  ПараметрыПакетаЭД.Контрагент);
									СтруктураПараметровПоиска.Вставить("НаправлениеЭД",  Перечисления.НаправленияЭД.Входящий);
									
									ТЗПолученныхОснований = ОбменСКонтрагентамиВнутренний.ТаблицаЗначенийДокументовОснованийПоИдентификаторам(
											ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований, СтруктураПараметровПоиска);
									
									Для Каждого Идентификатор Из ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований Цикл
										СтрокаОснования = ТЗПолученныхОснований.Найти(Идентификатор, "УникальныйИД");
										Если СтрокаОснования <> Неопределено Тогда
											ДокументОснование = СтрокаОснования.Ссылка;
										КонецЕсли;
									КонецЦикла;
									
								ИначеЕсли ЭлектронныйДокумент.ТипДокумента = Перечисления.ТипыЭД.СоглашениеОбЭДО Тогда
									// Получено соглашение об обмене ЭД
									ДокументОснование = ПараметрыПакетаЭД.НастройкаЭДО;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(ДокументОснование) Тогда
									ДокументыОснования = Новый Массив;
									ДокументыОснования.Добавить(ДокументОснование);
									СтруктураВладельцаЭД.Вставить("ДокументыОснования", ДокументыОснования);
								КонецЕсли;
								#КонецОбласти
								
							КонецЕсли;
							
							ТаблицаИдентификаторовОснований = Новый ТаблицаЗначений;
							ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторДокументаОснования");
							ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторЭДДокументаОснования");
							Для Каждого Идентификатор Из ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований Цикл
								НоваяСтрока = ТаблицаИдентификаторовОснований.Добавить();
								НоваяСтрока.ИдентификаторДокументаОснования = Идентификатор;
							КонецЦикла;
							
							СтруктураВладельцаЭД.Вставить("ИдентификаторыДокументовИЭДОснований", ТаблицаИдентификаторовОснований);

							ВладелецЭД = ОбменСКонтрагентамиСлужебный.СоздатьЭлектронныйДокумент(СтруктураВладельцаЭД);
							
							Если ЭлектронныйДокумент.ПроизвольныйЭД 
								И НЕ ЗначениеЗаполнено(ДокументОснование) 
								И ЗначениеЗаполнено(ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований)
								И ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований.Количество() > 0 Тогда
																
								НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
								НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ВладелецЭД);
								Для Каждого Идентификатор Из ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований Цикл
									НоваяЗапись = НаборЗаписей.Добавить();
									НоваяЗапись.ИдентификаторДокументаОснования = Идентификатор;
									НоваяЗапись.ЭлектронныйДокумент = ВладелецЭД;
									НоваяЗапись.ОснованиеПолучено = Ложь;
									НоваяЗапись.ДокументПотомок = ВладелецЭД;
								КонецЦикла;
								НаборЗаписей.Записать(Истина);
							КонецЕсли;
						КонецЕсли;
						
						ПараметрыФайла = Новый Структура();
						ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
						ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
						ПараметрыФайла.Вставить("ИмяБезРасширения", ЭлектронныйДокумент.ИмяБезРасширения);
						ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЭлектронныйДокумент.Расширение));
						ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
						
						ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
							ПараметрыФайла, ЭлектронныйДокумент.АдресЭД, , , ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл);
						
						Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
							
							СтруктураЭД.Вставить("ВладелецЭД",                      ВладелецЭД);
							СтруктураЭД.Вставить("Отправитель",                     ПараметрыПакетаЭД.Отправитель);
							СтруктураЭД.Вставить("Получатель",                      ПараметрыПакетаЭД.Получатель);
							СтруктураЭД.Вставить("УникальныйИД",                    ЭлектронныйДокумент.УникальныйИД);
							СтруктураЭД.Вставить("НомерЭД",                         ЭлектронныйДокумент.НомерЭД);
							СтруктураЭД.Вставить("НаименованиеФайла",               ЭлектронныйДокумент.ИмяБезРасширения);
							СтруктураЭД.Вставить("ДополнительнаяИнформация",        ЭлектронныйДокумент.ТекстСопроводительнойЗаписки);
							
							СтатусЭД = Неопределено;
							Если НЕ (СтруктураЭД.Свойство("СтатусЭД", СтатусЭД) И ЗначениеЗаполнено(СтатусЭД)) Тогда
								СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
							КонецЕсли;
							
							Если ЭлектронныйДокумент.ПроизвольныйЭД Тогда
								
								СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",            Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
								СтруктураЭД.Вставить("НомерЭД",                        ЭлектронныйДокумент.НомерЭД);
								СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", "");
								СтруктураЭД.Вставить("НаправлениеЭД",   		       Перечисления.НаправленияЭД.Входящий);
								СтруктураЭД.Вставить("СтатусДокумента",				   Перечисления.СтатусыЭД.Получен);
								
							КонецЕсли;
							
							ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ЭлектронныйДокументВладелец)
							И ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(ДобавленныйФайл.ТипЭлементаВерсииЭД)
							И ЭлектронныйДокументВладелец.СтатусЭД <> Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
							
							СтруктураПараметровЭДВладельца = Новый Структура;
							
							ДопустимыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
								Перечисления.СтатусыЭД.ПолученоПодтверждение,
								ЭлектронныйДокументВладелец);
							
							СтруктураПараметровЭДВладельца.Вставить("СтатусЭД", ДопустимыйСтатусЭД);
							ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(
								ЭлектронныйДокументВладелец, СтруктураПараметровЭДВладельца, Ложь);
						КонецЕсли;
						
						Если Не ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(СтруктураЭД.ТипЭлементаВерсииЭД) Тогда
							
							Если ТребуетсяИзвещение Тогда
								МассивДобавленныхФайловДляИзвещений.Добавить(ДобавленныйФайл);
							КонецЕсли;
							
							ДокументыУчета = Неопределено;
							
							Если НЕ ЭлектронныйДокумент.ПроизвольныйЭД Тогда
								
								СпособОбработки = ОбменСКонтрагентамиСлужебный.СпособОбработкиВходящегоДокумента(ПараметрыПакетаЭД.НастройкаЭДО,СтруктураЭД.ВидЭД);
								
								Если НЕ ВРег(СпособОбработки) = ВРег("Вручную") Тогда
									
									Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
										ВладелецКаталога = Новый Массив;
										ВладелецКаталога.Добавить(ПараметрыПакетаЭД.НастройкаЭДО);
										СтруктураПараметров.Вставить("ДокументыУчета", ВладелецКаталога);
										СтруктураПараметров.Вставить("ЗаполнитьДокумент");
									Иначе
										СтруктураПараметров.Удалить("ВладелецЭД");
										ДокументыУчета = ОпределитьОбъектПривязки(СтруктураЭД);
									КонецЕсли;
									
									Если Не ЗначениеЗаполнено(ДокументыУчета) Тогда
										ДокументыУчета = ОбменСКонтрагентамиВнутренний.СохранитьДанныеОбъекта(СтруктураПараметров, СпособОбработки);
									КонецЕсли;
									
									Если ЗначениеЗаполнено(ДокументыУчета) Тогда
										Для каждого Строка Из ДокументыУчета Цикл
										
											ДокументОбъект = ВладелецЭД.ПолучитьОбъект();
											НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
											НоваяСтрока.ДокументОснование = Строка;
											НоваяСтрока.СпособОбработки  = СпособОбработки;
											ДокументОбъект.Записать();
											ОбменСКонтрагентамиСлужебный.УстановитьСсылкуДляВладельцаВРегистреСостояний(Строка, ВладелецЭД);
										КонецЦикла;
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЕсли;
							
							#Область ПоискДокументовПотомков
							
							Если ЭлектронныйДокумент.ПроизвольныйЭД Тогда
								ДокументОснование = ВладелецЭД;
							ИначеЕсли ЗначениеЗаполнено(ДокументыУчета) Тогда
								ДокументОснование = ДокументыУчета[0];
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ДокументОснование) Тогда
								
								НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
								НаборЗаписей.Отбор.ИдентификаторДокументаОснования.Установить(ЭлектронныйДокумент.НомерЭД);
								НаборЗаписей.Прочитать();
								
								МассивЗаписейКУдалению = Новый Массив;
								Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
									ДокументПотомок = ЗаписьРегистра.ДокументПотомок;
									Если ТипЗнч(ДокументПотомок) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
										И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПотомок, "ВидЭД") = Перечисления.ВидыЭД.ПроизвольныйЭД
										И ЗначениеЗаполнено(ДокументПотомок) Тогда
										
										Попытка
											ДокументОбъект = ДокументПотомок.ПолучитьОбъект();
											НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить(); 
											НоваяСтрока.ДокументОснование = ДокументОснование;
											ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
											МассивЗаписейКУдалению.Добавить(ЗаписьРегистра);
										Исключение
											ЗаписьРегистра.ОснованиеПолучено = Истина;
											ЗаписьРегистра.ДокументОснование = ДокументОснование;
										КонецПопытки;
									КонецЕсли;
								КонецЦикла;
								
								Для Каждого ЗаписьРегистра Из МассивЗаписейКУдалению Цикл
									НаборЗаписей.Удалить(ЗаписьРегистра);
								КонецЦикла;
								
								НаборЗаписей.Записать(Истина);
							КонецЕсли;
							
							#КонецОбласти
							
						КонецЕсли;
						
						// Занесем информацию в пакет ЭД.
						МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
						
					Иначе
						// Для случая перераспаковки пакета ЭД.
						Для каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
							Если Подпись.УникальныйИД = ЭлектронныйДокумент.УникальныйИД Тогда
								Подпись.СсылкаНаЭДПрисоединенныйФайл = ДобавленныйФайл;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЭлектронныйДокумент.ТипДанных = "ДополнительныйЭД" Тогда
					
					// Поищем владельца.
					СтруктураПараметровПоиска = Новый Структура;
					СтруктураПараметровПоиска.Вставить("НомерЭД",       ЭлектронныйДокумент.НомерЭД);
					СтруктураПараметровПоиска.Вставить("УникальныйИД",  ЭлектронныйДокумент.УникальныйИД);
					СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
					
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
					Если ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
					КонецЕсли;
					СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
					
					ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
					Если ДобавленныйФайл <> Неопределено Тогда
						
						// Поищем исходный файл доп. данных.
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("НомерЭД",       ЭлектронныйДокумент.НомерЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						СтруктураПараметровПоиска.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
						
						ДобавленныйДопФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						Если ДобавленныйДопФайл = Неопределено Тогда
							
							ПараметрыФайла = Новый Структура();
							ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
							ПараметрыФайла.Вставить("ВладелецФайлов", ДобавленныйФайл.ВладелецФайла);
							ПараметрыФайла.Вставить("ИмяБезРасширения", ЭлектронныйДокумент.ИмяБезРасширения);
							ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЭлектронныйДокумент.Расширение));
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
							ДобавленныйДопФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
								ПараметрыФайла, ЭлектронныйДокумент.АдресЭД, , , ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл);
							
							ВспомогательнаяСтруктура = Новый Структура;
							ВспомогательнаяСтруктура.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
							ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД",         Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
							ВспомогательнаяСтруктура.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
							ВспомогательнаяСтруктура.Вставить("УникальныйИД",                ЭлектронныйДокумент.УникальныйИД);
							ВспомогательнаяСтруктура.Вставить("НомерЭД",                     ЭлектронныйДокумент.НомерЭД);
							ВспомогательнаяСтруктура.Вставить("НаименованиеФайла",           ЭлектронныйДокумент.ИмяБезРасширения);
							ВспомогательнаяСтруктура.Вставить("ВладелецЭД",                  ДобавленныйФайл.ВладелецФайла);
							ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
							
							ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйДопФайл, ВспомогательнаяСтруктура);
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЭлектронныйДокумент.ТипДанных = "СлужебныйЭД" Тогда
					
					СтруктураФайлаЭД = СформироватьСтруктуруФайлаЭД();
					ОбменСКонтрагентамиВнутренний.ПрочитатьШапкуСлужебногоФайлаCMLпоXDTO(ФайлДанныхЭД.ПолноеИмя,
						ЭлектронныйДокумент.КодРегламента, ЭлектронныйДокумент.КодТранзакции, СтруктураФайлаЭД);
						
					СтруктураФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
					// УИД первичного ЭД в ИБ отправителя, он же УникальныйИД в ИБ получателя.
					ГУИДПервичногоЭД = ЭлектронныйДокумент.УникальныйИД;
					
					ЭлектронныйДокументВладелец = Неопределено;
					
					// Для не формализованного документооборота служебные документы поступают только в ИБ отправителя.
					Если ЭлектронныйДокумент.КодТранзакции = "CancellationOfferReject" Тогда
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",                ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД",         Перечисления.ТипыЭлементовВерсииЭД.ПОА);
						СтруктураПараметровПоиска.Вставить("НастройкаЭДО",  ПараметрыПакетаЭД.НастройкаЭДО);
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
						ЭлектронныйДокументВладелец = ПервичныйЭД;
					ИначеЕсли СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
						НаименованиеВладельца = СтруктураФайлаЭД.ДополнительныеДанные.НаименованиеВладельца;
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("Наименование",        		  НаименованиеВладельца);
						СтруктураПараметровПоиска.Вставить("НастройкаЭДО",  ПараметрыПакетаЭД.НастройкаЭДО);
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
						ЭлектронныйДокументВладелец = ПервичныйЭД;
					ИначеЕсли СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД Тогда
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       Перечисления.НаправленияЭД.Исходящий);
						ТипЭлементаВерсииЭД = Новый Массив;
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
						
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
						ЭлектронныйДокументВладелец = ПервичныйЭД;
					ИначеЕсли ЭлектронныйДокумент.КодРегламента = "Nonformalized" 
						Или ЭлектронныйДокумент.КодРегламента = "Formalized"
						Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка
						Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
						Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
						Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
						
						Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка Тогда
							
							ПараметрыПоиска = Новый Структура;
							ПараметрыПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
							ПараметрыПоиска.Вставить("НастройкаЭДО",  ПараметрыПакетаЭД.НастройкаЭДО);
							
							Если ВРег(ЭлектронныйДокумент.КодРегламента) = ВРег("Invoice") Тогда
								
								МассивТиповЭД = Новый Массив;
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
								ПараметрыПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТиповЭД);
								
							Иначе
								МассивТиповЭД = Новый Массив;
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИОП);
								ПараметрыПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТиповЭД);
								
							КонецЕсли;
							ПараметрыПоиска.Вставить("НаправлениеЭД",       Перечисления.НаправленияЭД.Исходящий);
							
							ПервичныйЭД = ОпределитьЭлектронныйДокумент(ПараметрыПоиска);
							
							ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
							
							Если ПервичныйЭДНайден Тогда
								Если ЗначениеЗаполнено(ПервичныйЭД.ЭлектронныйДокументВладелец) Тогда
									ПервичныйЭД = ПервичныйЭД.ЭлектронныйДокументВладелец;
								КонецЕсли;
							КонецЕсли;
						Иначе
							
							ПервичныйЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДПервичногоЭД));
							ПервичныйЭДНайден = (ПервичныйЭД.ПолучитьОбъект() <> Неопределено);
							
						КонецЕсли;
						
						ЭлектронныйДокументВладелец = ПервичныйЭД;
						
					Иначе
						
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       Перечисления.НаправленияЭД.Входящий);
						
						ТипЭлементаВерсииЭД = Новый Массив;
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
						
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						ПервичныйЭДНайден = ПервичныйЭД <> Неопределено;
						
						Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
							ЭлектронныйДокументВладелец = ПервичныйЭД;
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не ПервичныйЭДНайден Тогда
						ТекстСообщения = НСтр("ru = 'Не удалось найти владельца для служебного электронного документа.'");
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;
					
					Если ЭлектронныйДокументВладелец = Неопределено Тогда
						
						Параметры = Новый Структура;
						Параметры.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
						
						Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
							Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
						Иначе
							Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ);
						КонецЕсли;
						
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       Параметры.НаправлениеЭД);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Параметры.ТипЭлементаВерсииЭД);
						ЭлектронныйДокументВладелец = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
					КонецЕсли;
					
					Если ЭлектронныйДокументВладелец = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Не удалось найти владельца для служебного электронного документа.'");
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;
					
					ВладелецЭД = ПервичныйЭД.ВладелецФайла;
					
					Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка Тогда
						
						ШаблонСообщения = НСтр("ru = 'Возникла ошибка при передаче электронного документа %1, получатель %2.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПервичныйЭД,
							ВладелецЭД.Контрагент);
						
						ПодробныйШаблонОшибки = НСтр("ru = 'При передаче электронного документа %1, возникла ошибка: %2.
							|Документ информационной базы (владелец электронного документа) - %3;
							|Соглашение об обмене электронными документами - %4.'");
						ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодробныйШаблонОшибки, ПервичныйЭД,
						СтруктураФайлаЭД.ОписаниеОшибки, ВладелецЭД, ВладелецЭД.НастройкаЭДО);
						
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Передача электронного документа'"),
							ПодробныйТекстОшибки, ТекстСообщения);
						
						СтруктураОбновленияПараметров = Новый Структура;
						СтруктураОбновленияПараметров.Вставить("ВладелецЭД",     ВладелецЭД);
						СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",  ПервичныйЭД.НаправлениеЭД);
						СтруктураОбновленияПараметров.Вставить("ТекстУточнения", СтруктураФайлаЭД.ОписаниеОшибки);
						СтруктураОбновленияПараметров.Вставить("ТипЭлементаВерсииЭД", ПервичныйЭД.ТипЭлементаВерсииЭД);
						СтруктураОбновленияПараметров.Вставить("СтатусЭД", ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
							СтруктураФайлаЭД.СтатусЭДВладельца, ПервичныйЭД));
						
						ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ПервичныйЭД, СтруктураОбновленияПараметров);
						
					Иначе
						
						// Поместим файл данных в присоединенные файлы к документу БД.
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       СтруктураФайлаЭД.НаправлениеЭД);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
						
						ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						Если ДобавленныйФайл = Неопределено Тогда
							
							ПараметрыФайла = Новый Структура();
							ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
							ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
							ПараметрыФайла.Вставить("ИмяБезРасширения", ЭлектронныйДокумент.ИмяБезРасширения);
							ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЭлектронныйДокумент.Расширение));
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
							ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
								ПараметрыФайла, ЭлектронныйДокумент.АдресЭД, , , ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл);
							
							СтруктураОбновленияПараметров = Новый Структура;
							СтруктураОбновленияПараметров.Вставить("ВладелецЭД",                  ВладелецЭД);
							СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
							СтруктураОбновленияПараметров.Вставить("УникальныйИД",                ГУИДПервичногоЭД);
							СтруктураОбновленияПараметров.Вставить("НомерЭД",                     
								?(ЗначениеЗаполнено(ЭлектронныйДокумент.НомерЭД), ЭлектронныйДокумент.НомерЭД, ЭлектронныйДокументВладелец.НомерЭД));
							СтруктураОбновленияПараметров.Вставить("НомерВерсииЭД",               СтруктураФайлаЭД.НомерВерсииЭД);
							СтруктураОбновленияПараметров.Вставить("Отправитель",                 ПараметрыПакетаЭД.Отправитель);
							СтруктураОбновленияПараметров.Вставить("Получатель",                  ПараметрыПакетаЭД.Получатель);
							СтруктураОбновленияПараметров.Вставить("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец);
							СтруктураОбновленияПараметров.Вставить("ТипЭлементаВерсииЭД",         СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
							СтруктураОбновленияПараметров.Вставить("НаименованиеФайла",           ЭлектронныйДокумент.ИмяБезРасширения);
							СтруктураОбновленияПараметров.Вставить("СтатусЭД", ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
								Перечисления.СтатусыЭД.Получен, ДобавленныйФайл));
							
							ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбновленияПараметров, Ложь);
							
							СтруктураОбновленияПараметров = Новый Структура;
							СтруктураОбновленияПараметров.Вставить("СтатусЭД",
								ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(СтруктураФайлаЭД.СтатусЭДВладельца, ПервичныйЭД));
							
							Если ЗначениеЗаполнено(СтруктураФайлаЭД.ТекстУточнения) Тогда
								СтруктураОбновленияПараметров.Вставить("ТекстУточнения", СтруктураФайлаЭД.ТекстУточнения);
							КонецЕсли;
							
							СтатусЭДВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйЭД, "СтатусЭД");
							
							Если НЕ (ЭтоСчетФактура(ПервичныйЭД)
								И СтруктураОбновленияПараметров.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
								И СтатусЭДВладельца = Перечисления.СтатусыЭД.Утвержден) Тогда
								
								
								ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ПервичныйЭД, СтруктураОбновленияПараметров, Ложь);
							КонецЕсли;
							
							Если ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
								
								Если ЭлектронныйДокумент.КодТранзакции <> "ReceiveNotice" И ЭлектронныйДокумент.КодТранзакции <> "CorrectionNoticeReceiveNotice" Тогда
									
									МассивДобавленныхФайловДляИзвещений.Добавить(ДобавленныйФайл);
								КонецЕсли;
								
								Если ЭлектронныйДокумент.КодТранзакции = "PostDateConfirmation" 
									Или ЭлектронныйДокумент.КодТранзакции = "SendConfirmation"
									Или ЭлектронныйДокумент.КодТранзакции = "ReceiveNotice" 
									Или ЭлектронныйДокумент.КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
									
									Для Каждого Строка Из ВладелецЭД.ДокументыОснования Цикл
										
											Если ЗначениеЗаполнено(Строка.ДокументОснование) Тогда
												ИмяСчетаФактурыВыданного = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
													"СчетФактураВыданныйВМетаданных");
												ИмяСчетаФактурыПолученного = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
													"СчетФактураПолученныйВМетаданных");
												Если ИмяСчетаФактурыВыданного <> Неопределено
													И ТипЗнч(Строка.ДокументОснование) = Тип("ДокументСсылка." + ИмяСчетаФактурыВыданного)
													Или ИмяСчетаФактурыПолученного <> Неопределено
													И ТипЗнч(Строка.ДокументОснование) = Тип("ДокументСсылка." + ИмяСчетаФактурыПолученного) Тогда
										
													ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРеквизитыЭСФ(Строка.ДокументОснование, ДобавленныйФайл);
												КонецЕсли;
											КонецЕсли;
											
									КонецЦикла;
								КонецЕсли;
								
								Если ВРег(ЭлектронныйДокумент.КодТранзакции) = ВРег("ReceiveNotice") Тогда
									
									Если ЭтоДокументКорректировки(ДобавленныйФайл) Тогда
										ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеСФОснований(ПервичныйЭД, Перечисления.НаправленияЭД.Исходящий);
									КонецЕсли;
								КонецЕсли;
								
								Если ВРег(ЭлектронныйДокумент.КодТранзакции) = ВРег("PostDateConfirmation") Тогда
									ВладелецДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйЭД, "ВладелецФайла");
									Если ЗначениеЗаполнено(ВладелецДокумента) Тогда
										ТребуетсяИзвещение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецДокумента, "ТребуетсяИзвещение");
										Если Не ТребуетсяИзвещение Тогда
											ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеСФОснований(ПервичныйЭД, Перечисления.НаправленияЭД.Исходящий);
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
						Иначе
							
							// Для случая перераспаковки пакета ЭД.
							Для каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
								Если Подпись.УникальныйИД = ЭлектронныйДокумент.УникальныйИД Тогда
									Подпись.СсылкаНаЭДПрисоединенныйФайл = ДобавленныйФайл;
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
						
						// Занесем информацию в пакет ЭД.
						МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
						
						// Проверим актуальность версий форматов.
						ВходящаяВерсияФормата = Неопределено;
						Если ЭлектронныйДокумент.Свойство("ДополнительныеПараметры") И ЗначениеЗаполнено(ЭлектронныйДокумент.ДополнительныеПараметры)
							И ЭлектронныйДокумент.ДополнительныеПараметры.Свойство("ВерсияФормата", ВходящаяВерсияФормата)
							И ЗначениеЗаполнено(ВходящаяВерсияФормата)
							И ПараметрыПакетаЭД.НастройкаЭДО.АвтоПереходНаНовыеФорматы Тогда
							
							ТекущаяВерсияФормата = ПараметрыПакетаЭД.НастройкаЭДО.ИсходящиеДокументы.Найти(ВладелецЭД.ВидЭД, "ИсходящийДокумент").ВерсияФормата;
							АктуальнаяВерсияФормата = ОбменСКонтрагентамиСлужебный.АктуальнаяВерсияФорматаЭД(ВладелецЭД.ВидЭД);
							Если ВходящаяВерсияФормата <> ТекущаяВерсияФормата
								И ВходящаяВерсияФормата = АктуальнаяВерсияФормата Тогда
								
								ТекущаяНастройкаЭДО = ПараметрыПакетаЭД.НастройкаЭДО.ПолучитьОбъект();
								ИсходнаяСтрокаЭД = ТекущаяНастройкаЭДО.ИсходящиеДокументы.Найти(ВладелецЭД.ВидЭД, "ИсходящийДокумент");
								ИсходнаяСтрокаЭД.ВерсияФормата = АктуальнаяВерсияФормата;
								ТекущаяНастройкаЭДО.Записать();
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Записываем ЭП в ЭД.
			Для Каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
				
				Если НЕ ЗначениеЗаполнено(Подпись.СсылкаНаЭДПрисоединенныйФайл) Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось найти электронный документ для сохранения подписи.'");
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				
				ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(Подпись.АдресЭП);
				Если ОбменСКонтрагентамиСлужебный.ЕстьТакаяПодпись(ДвоичныеДанныеПодписи, Подпись.СсылкаНаЭДПрисоединенныйФайл) Тогда
					Продолжить;
				КонецЕсли;
				
				СвойстваПодписи = Новый Структура;
				СвойстваПодписи.Вставить("Подпись",             ДвоичныеДанныеПодписи);
				СвойстваПодписи.Вставить("Сертификат",          ПолучитьИзВременногоХранилища(Подпись.АдресСертификата));
				УдалитьИзВременногоХранилища(Подпись.АдресСертификата);
				СвойстваПодписи.Вставить("Отпечаток",           Подпись.Отпечаток);
				СвойстваПодписи.Вставить("КомуВыданСертификат", Подпись.КомуВыданСертификат);
				СвойстваПодписи.Вставить("ПодписьВерна",        Подпись.ПодписьВерна);
				СвойстваПодписи.Вставить("ДатаПроверкиПодписи", Подпись.ДатаПроверкиПодписи);
				
				ЭлектроннаяПодпись.ДобавитьПодпись(Подпись.СсылкаНаЭДПрисоединенныйФайл, СвойстваПодписи);
				
				Если Подпись.КодТранзакции = "MainDocumentResign" Или Подпись.КодТранзакции = "CancellationOfferResign" Тогда
					
					НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
						Перечисления.СтатусыЭД.ПолученоПодтверждение,
						Подпись.СсылкаНаЭДПрисоединенныйФайл);
						
					СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
					ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Подпись.СсылкаНаЭДПрисоединенныйФайл,
						СтруктураПараметров, Ложь);
					
					// Занесем информацию в пакет ЭД.
					МассивДобавленныхФайлов.Добавить(Подпись.СсылкаНаЭДПрисоединенныйФайл);
				КонецЕсли;
				
			КонецЦикла;
			
			// Отправим на формирование ИОП сразу на сервере.
			Если МассивДобавленныхФайловДляИзвещений.Количество() > 0 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСлужебныхЭД,
					СформироватьСлужебныеЭД(МассивДобавленныхФайловДляИзвещений, Перечисления.ВидыЭД.ИзвещениеОПолучении));
			КонецЕсли;
			
			// Обработаем пакет ЭД
			ПакетЭДОбъект = СтруктураПакетаЭД.ПакетЭДСсылка.ПолучитьОбъект();
			
			// Добавим информацию о присоединенном файле в документ пакета электронных документов.
			Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
				
				НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
				НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ДобавленныйФайл;
				НовыйЭлектронныйДокумент.ОбъектВладелец      = ДобавленныйФайл.ВладелецФайла;
				
				НовыеДокументы.Добавить(ДобавленныйФайл);
				
			КонецЦикла;
			
			ПакетЭДОбъект.СтатусПакета = Перечисления.СтатусыПакетовЭД.Распакован;
			ПакетЭДОбъект.Записать();
			
			КоличествоРаспакованныхЭД = КоличествоРаспакованныхЭД + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если ЗначениеЗаполнено(ФайлЭД) Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлЭД);
			КонецЕсли;
			Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'При распаковке пакетаЭД: %1 возникла ошибка:
			|%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,
				СтруктураПакетаЭД.ПакетЭДСсылка, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	// Обновим данные по основаниям у владельцев ЭД.
	ОбменСКонтрагентамиСлужебныйВызовСервера.НайтиЗаполнитьОснованияУВладельцевЭД();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Определение электронного документа.
//
// Параметры:
//  СтруктураПараметровПоиска - Структура - параметры поиска.
// 
// Возвращаемое значение:
//  ЭДПрисоединенныеФайлы.Ссылка - ссылка на электронный документ.
//
Функция ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	
	Шаблон = "
		|И ЭДПрисоединенныеФайлы.%1 %2 %3";
	Для Каждого Элемент Из СтруктураПараметровПоиска Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда

			Если Элемент.Ключ = "НастройкаЭДО" Тогда
				ШаблонИмяРеквизита = СтрЗаменить(Шаблон, "%1", "ВладелецФайла." + Элемент.Ключ);
			Иначе
				ШаблонИмяРеквизита = СтрЗаменить(Шаблон, "%1", Элемент.Ключ);
			КонецЕсли;
			
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				ЗнакСравнения = "В";
				ШаблонСравнение = СтрЗаменить(ШаблонИмяРеквизита, "%2", ЗнакСравнения);
				ШаблонИмяПараметра = СтрЗаменить(ШаблонСравнение, "%3", "("+"&" +Элемент.Ключ+ ")");
			Иначе
				ЗнакСравнения = "=";
				ШаблонСравнение = СтрЗаменить(ШаблонИмяРеквизита, "%2", ЗнакСравнения);
				ШаблонИмяПараметра = СтрЗаменить(ШаблонСравнение, "%3", "&"+Элемент.Ключ);
			КонецЕсли;
			Текст = Текст + ШаблонИмяПараметра;
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить().Выбрать();
	ВозвращаемыйПараметр = Неопределено;
	Если Результат.Следующий() Тогда
		ВозвращаемыйПараметр = Результат.Ссылка;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

// Перебирает отпечатки подписей полученных пакетов ЭД,
// получает из них открытую часть сертификата и проверяет ее корректность.
// 
// Параметры:
//  Контекст - Структура - данные полученных пакетов ЭД. 
//
Процедура ПроверитьСертификатыПодписей(Контекст) Экспорт
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПроверкаПодписи");
		
	ДанныеПакетовЭДО = Контекст.ДанныеПакетовЭД;
	Для Каждого СвойстваПакетаЭДО Из ДанныеПакетовЭДО Цикл
		ПодписиПакета = СвойстваПакетаЭДО.МассивЭП;	
		Для Каждого ДанныеПодписи Из ПодписиПакета Цикл
						
			ДвоичныеДанныеФайлаЭП = ПолучитьИзВременногоХранилища(ДанныеПодписи.АдресЭП);
			ДвоичныеДанныеФайлаЭД = ПолучитьИзВременногоХранилища(ДанныеПодписи.АдресЭД);
				
			ТекстОшибки = "";
			ПодписьВерна = ЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии,
				ДанныеПодписи.АдресЭД,
				ДанныеПодписи.АдресЭП,
				ТекстОшибки);
			ДанныеПодписи.Вставить("ДатаПроверкиПодписи", ТекущаяУниверсальнаяДата());
			ДанныеПодписи.Вставить("ПодписьВерна", ПодписьВерна);
			
			Попытка
				Сертификат = Неопределено;
				МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайлаЭД, ДвоичныеДанныеФайлаЭП, Сертификат);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецПопытки;
			
			Если Сертификат <> Неопределено Тогда
				ДанныеСертификата = Сертификат.Выгрузить();
				ДанныеПодписи.Вставить("Отпечаток", Base64Строка(Сертификат.Отпечаток));
				ДанныеПодписи.Вставить("АдресСертификата", ПоместитьВоВременноеХранилище(ДанныеСертификата));
				ДанныеПодписи.Вставить("КомуВыданСертификат", ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Сертификат));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Устанавливает статус документа ПакетЭДО.
//
// Параметры:
//  Пакет - Ссылка - ссылка на документ ПакетЭДО.
//  СтатусПакета - ПеречислениеСсылка.СтатусыПакетовЭД - ссылка на перечисление СтатусыПакетовЭД.
//
Процедура УстановитьСтатусПакета(Пакет, СтатусПакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЭДОбъект = Пакет.ПолучитьОбъект();
	ПакетЭДОбъект.СтатусПакета = СтатусПакета;
	ПакетЭДОбъект.Записать();
	
КонецПроцедуры

// Выполняет добавление электронной подписи в электронный документ.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка - ссылка на элемент справочника, содержащего в себе электронный документ.
//  ДанныеПодписи - Структура - структура параметров электронной подписи.
//
Процедура ДобавитьПодпись(ПрисоединенныйФайл, ДанныеПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл.ВладелецФайла, "ПрофильНастроекЭДО.СпособОбменаЭД");
	
	НачатьТранзакцию();
	Попытка
		ПрисоединенныеФайлы.ДобавитьПодписьКФайлу(ПрисоединенныйФайл, ДанныеПодписи);
		Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			ОпределитьСтатусыПодписей(ПрисоединенныйФайл);
		КонецЕсли;
		Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
			
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "НаправлениеЭД");
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.ПолностьюПодписан,
																		ПрисоединенныйФайл);
			Иначе
				НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.Подписан,
																		ПрисоединенныйФайл);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			ОбменСКонтрагентамиПереопределяемый.НазначенСтатусПодписан(ПрисоединенныйФайл);
		Иначе
			// В рамках интеркампани, документ должен иметь 2 подписи,
			// т.к. электронный документ подписан не полностью, то достаточно проверить,
			// что количество ЭП отлично от 0.
			ДокументИнтеркампаниЧастичноПодписан = (ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
													И ПрисоединенныйФайл.ЭлектронныеПодписи.Количество() > 0);
			
			Если ДокументИнтеркампаниЧастичноПодписан Тогда
				
				НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
					Перечисления.СтатусыЭД.ЧастичноПодписан, ПрисоединенныйФайл);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
				СтруктураПараметров.Вставить("Изменил", Пользователи.АвторизованныйПользователь());
				ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа %1'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
		ВидОперации = НСтр("ru = 'установка подписи ЭП'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ИнформацияОбОшибке, ТекстСообщения);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Выполняет действия с ЭД после установки электронной подписи.
//
// Параметры:
//  МассивЭДКОбновлениюСтатуса - Массив - элементы - СправочникСсылка.ЭДПрисоединенныеФайлы.
//
Процедура ДействияПослеПодписанияЭДНаСервере(МассивЭДКОбновлениюСтатуса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ПрисоединенныйФайл Из МассивЭДКОбновлениюСтатуса Цикл
		СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл.ВладелецФайла, "ПрофильНастроекЭДО.СпособОбменаЭД");
		
		НачатьТранзакцию();
		Попытка
			// Подпись установленная сейчас является валидной по-умолчанию
			УстановитьСтатусПоследнейПодписи(ПрисоединенныйФайл); 
			Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
				НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "НаправлениеЭД");
				Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
					НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
																			Перечисления.СтатусыЭД.ПолностьюПодписан,
																			ПрисоединенныйФайл);
				Иначе
					НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
																			Перечисления.СтатусыЭД.Подписан,
																			ПрисоединенныйФайл);
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
				ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
				ОбменСКонтрагентамиПереопределяемый.НазначенСтатусПодписан(ПрисоединенныйФайл);
			Иначе
				// В рамках интеркампани, документ должен иметь 2 подписи,
				// т.к. электронный документ подписан не полностью, то достаточно проверить,
				// что количество ЭП отлично от 0.
				ДокументИнтеркампаниЧастичноПодписан = (ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
														И ПрисоединенныйФайл.ЭлектронныеПодписи.Количество() > 0);
				Если ДокументИнтеркампаниЧастичноПодписан Тогда
					
					НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
						Перечисления.СтатусыЭД.ЧастичноПодписан, ПрисоединенныйФайл);
					
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
					СтруктураПараметров.Вставить("Изменил", Пользователи.АвторизованныйПользователь());
					ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
				КонецЕсли;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа %1'");
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
			Операция = НСтр("ru = 'установка подписи ЭП'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Создание и отправка пакетов электронных документов.
//
// Параметры:
//  ДобавленныеФайлы - Массив - список электронных документов.
//  ПризнакПодписи - Булево - признак подписи.
//  СоотвСоглашенийИПараметровСертификатов -Соответствие - соответствие соглашений и сертификатов.
// 
// Возвращаемое значение:
//  Структура - результат выполнения функции.
//
Функция СоздатьИОтправитьДокументыПЭД(Знач ДобавленныеФайлы,
									  Знач ПризнакПодписи,
									  Знач СоотвСоглашенийИПараметровСертификатов = Неопределено) Экспорт
	
	МассивСтруктурПакетовЭД = ОбменСКонтрагентамиСлужебный.СоздатьДокументыПакетовЭД(ДобавленныеФайлы, ПризнакПодписи);
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КолПодготовленных", МассивСтруктурПакетовЭД.Количество());
	КолОтправленных = 0;
	МассивПакетовДляОбработкиНаКлиенте = Новый Массив;
	МассивПакетовДляОтправкиСКлиента   = Новый Массив;
	Если МассивСтруктурПакетовЭД.Количество() > 0 Тогда
		Для Каждого СтруктураПЭД Из МассивСтруктурПакетовЭД Цикл
			Если СтруктураПЭД.Свойство("ОтправкаСКлиента") Тогда
				МассивПакетовДляОтправкиСКлиента.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			Если СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте Тогда
				МассивПакетовДляОбработкиНаКлиенте.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			Если НемедленнаяОтправкаЭД() Тогда
				МассивПЭД = Новый Массив;
				МассивПЭД.Добавить(СтруктураПЭД.ПЭД);
				КолОтправленных = КолОтправленных + ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИПараметровСертификатов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураРезультата.Вставить("КолОтправленных",                    КолОтправленных);
	СтруктураРезультата.Вставить("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте);
	Возврат СтруктураРезультата;
	
КонецФункции

// Отправка пакетов электронных документов.
//
// Параметры:
//  МассивПакетовЭД - Массив - отправляемые пакеты.
//  СоотвСоглашенийИПараметровСертификатов - Соответствие - Соответствие соглашений и сертификатов.
//  ОтправленныеДокументы - Массив - отправленные электронные документы.
// 
// Возвращаемое значение:
//  Число - количество отправленных пакетов.
//
Функция ОтправкаПакетовЭД(Знач МассивПакетовЭД, Знач СоотвСоглашенийИПараметровСертификатов,
	ОтправленныеДокументы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСообщения = "";
	
	РезультатОтправки = 0;
	Для Каждого ПакетЭД Из МассивПакетовЭД Цикл
		// Если электронный документ по каким-то причинам отправлен быть не может,
		// то не надо приостанавливать всю цепочку.
		
		НачатьТранзакцию();
		
		ОбменСКонтрагентамиСлужебный.ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД,
																		Перечисления.СтатусыПакетовЭД.Отправлен,
																		ТекущаяДатаСеанса());
		Если Не ПакетЭД.СтатусПакета = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			
			РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД,
				"ПрофильНастроекЭДО, НастройкаЭДО, СпособОбменаЭД, АдресРесурсаКонтрагента, ЭлектронныеДокументы");
			
			МассивПрофилейНастроекЭДО = Новый Массив;
			МассивПрофилейНастроекЭДО.Добавить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
			
			ТипОтправки = РеквизитыПакетаЭД.СпособОбменаЭД;
			АдресКаталогаОтправки = СформироватьФайлыДляОтправки(ПакетЭД);
			Если ПустаяСтрока(АдресКаталогаОтправки) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
				ОтправленТекущийПакет = ОтправитьЭлектронноеПисьмо(ПакетЭД, АдресКаталогаОтправки);
				РезультатОтправки = РезультатОтправки + ОтправленТекущийПакет;
				Если ОтправленТекущийПакет = 0 Тогда
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки =  Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				Или ТипОтправки =  Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				
				СоотвСоглашений = Неопределено;
				Если ТипЗнч(СоотвСоглашенийИПараметровСертификатов) = Тип("Соответствие")
					И СоотвСоглашенийИПараметровСертификатов.Количество() > 0 Тогда
					ПараметрыСертификата = СоотвСоглашенийИПараметровСертификатов.Получить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				ИначеЕсли ДоступныПараметрыДляАвторизацииНаСервереОператора(МассивПрофилейНастроекЭДО, СоотвСоглашений) Тогда
					ПараметрыСертификата = СоотвСоглашений.Получить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				Иначе
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				Маркер = Неопределено;
				Если Не (РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(ПараметрыСертификата)
					И ПараметрыСертификата.Свойство("МаркерРасшифрованный", Маркер) И ЗначениеЗаполнено(Маркер)) Тогда
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				КоличествоКОтправке = ФайлыОтправки.Количество();
				
				КоличествоОтправленных = ОбменСКонтрагентамиВнутренний.ОтправитьЧерезОператораЭДО(
																	Маркер,
																	АдресКаталогаОтправки,
																	"SendMessage",
																	РеквизитыПакетаЭД.ПрофильНастроекЭДО);
																	
				Если КоличествоОтправленных <> КоличествоКОтправке Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось отправить оператору ЭДО ""%1"".'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ОтменитьТранзакцию();
					Продолжить;
				Иначе
					РезультатОтправки = РезультатОтправки + КоличествоОтправленных;
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				
				АдресКаталога = РеквизитыПакетаЭД.АдресРесурсаКонтрагента
					+ ?(Прав(РеквизитыПакетаЭД.АдресРесурсаКонтрагента, 1) <> "\", "\", "");
				КаталогНаДиске = Новый Файл(АдресКаталога);
				Если НЕ КаталогНаДиске.Существует() Тогда
					СоздатьКаталог(АдресКаталога);
				КонецЕсли;
				
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					КопироватьФайл(Файл.ПолноеИмя, АдресКаталога + Файл.Имя);
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
				FTPСоединение = ОбменСКонтрагентамиСлужебный.ПолучитьFTPСоединение(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				Если FTPСоединение = Неопределено Тогда
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				КаталогОтправки = РеквизитыПакетаЭД.АдресРесурсаКонтрагента;
				ОбменСКонтрагентамиСлужебный.ПодготовитьПутьFTP(КаталогОтправки);
				ТекстОшибки = "";
				Попытка
					FTPСоединение.УстановитьТекущийКаталог(КаталогОтправки);
				Исключение
					ОбменСКонтрагентамиСлужебный.СоздатьКаталогиFTP(FTPСоединение, КаталогОтправки, , ТекстОшибки);
				КонецПопытки;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					ОбменСКонтрагентамиСлужебный.ЗаписатьФайлНаFTP(FTPСоединение, Файл.ПолноеИмя, Файл.Имя, , ТекстОшибки);
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
						Прервать;
					КонецЕсли;
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			КонецЕсли;
			
			ТранзакцияЗафиксирована = Истина;
			
			ЗафиксироватьТранзакцию();
			
			
		Исключение
			
			ШаблонСообщения = НСтр("ru = 'Ошибка отправки пакета по настройке: %1, способ обмена: %2
									|%3'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				РеквизитыПакетаЭД.НастройкаЭДО, РеквизитыПакетаЭД.СпособОбменаЭД, КраткоеПредставлениеОшибки);
			ШаблонВидаОперации = НСтр("ru = 'отправка пакета ЭД по настройке: %1, способ обмена %2'");
			ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонВидаОперации, РеквизитыПакетаЭД.НастройкаЭДО, РеквизитыПакетаЭД.СпособОбменаЭД);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
			
			ОтменитьТранзакцию();
			
			ТранзакцияЗафиксирована = Ложь;
		КонецПопытки;
		
		Если ТранзакцияЗафиксирована И ОтправленныеДокументы <> Неопределено Тогда
			
			ВыборкаДокументов = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
			Пока ВыборкаДокументов.Следующий() Цикл
				
				ОтправленныеДокументы.Добавить(ВыборкаДокументов.ЭлектронныйДокумент);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресКаталогаОтправки) Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат РезультатОтправки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Функция используется для проверки доступности каталога, указанного в настройках соглашения об обмене (через каталог):
// на клиенте в каталог записывается файл, на сервере выполняется попытка прочитать его по тому же пути. Связано это с тем,
// что данный каталог должен быть доступен как с клиента, так и с сервера.
//
// Параметры:
//  ПолноеИмяТестовогоФайла - строка - полный путь к тестовому файлу записанному из клиентского сеанса.
//
// Возвращаемое значение:
//  Булево - Истина - файл по указанному пути существует, иначе - Ложь.
//
Функция ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла) Экспорт
	
	ТестовыйФайл = Новый Файл(ПолноеИмяТестовогоФайла);
	
	Возврат ТестовыйФайл.Существует();
	
КонецФункции

// Определяет по параметрам, существует ли действующее соглашение.
// 
// Параметры:
//  ПараметрыЭД - Структура - структура содержащая параметры поиска соглашения.
//
// Возвращаемое значение:
//  Булево - если есть то Истина, иначе Ложь.
//
Функция ЕстьДействующееСоглашение(ПараметрыЭД) Экспорт
	
	НастройкиОбмена = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	
	Возврат ЗначениеЗаполнено(НастройкиОбмена);
	
КонецФункции

// Возвращает структуру для открытия формы сопоставления номенклатуры.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
// Возвращаемое значение:
//  Структура - содержит ИмяФормы и ПараметрыОткрытияФормы.
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
		
	СтруктураПараметров = ОбменСКонтрагентамиПереопределяемый.ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД);
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") И СтруктураПараметров.Свойство("ПараметрыОткрытияФормы") Тогда
		СтруктураПараметров.ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",
															РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	Возврат СтруктураПараметров;
	
КонецФункции

// По ссылке на документ определяет есть ли у него электронный документ счет-фактура
// или корректировочный счет-фактура.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка - ссылка на документ владельца.
//
// Возвращаемое значение:
//  Булево - факт существования документа.
//
Функция ЕстьРабочийЭСФ(СсылкаНаВладельца) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаВладельца
	|	И СостоянияЭД.ЭлектронныйДокумент <> ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
	|	И СостоянияЭД.ЭлектронныйДокумент.ВидЭД В (ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура), ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура))
	|	И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)";
	
	Запрос.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка - объект, состояние версии электронного документа которого необходимо получить.
//  Гиперссылка - Булево - Истина, если необходимо реквизит формы "СостояниеЭД" сделать гиперссылкой.
//
// Возвращаемое значение:
//  Строка - текстовое описание состояния электронного документа.
//
Функция ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка) Экспорт
	
	Результат = "";
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		
		ИмяСчетаФактурыВыданного = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"СчетФактураВыданныйВМетаданных");
		ИмяСчетаФактурыПолученного = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"СчетФактураПолученныйВМетаданных");
		Если ИмяСчетаФактурыВыданного <> Неопределено
			И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяСчетаФактурыВыданного)
			Или ИмяСчетаФактурыПолученного <> Неопределено
			И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяСчетаФактурыПолученного) Тогда
			Результат = ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца);
		Иначе
			ТекущееСостояниеЭДО = СостояниеВерсииЭД(СсылкаНаВладельца);
			Результат = Строка(ТекущееСостояниеЭДО);
		КонецЕсли;
		
		ПараметрыЭД = Неопределено;
		Если НастройкаЭДСуществует(СсылкаНаВладельца, ПараметрыЭД) Тогда
			Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоЧтенияЭД(Ложь) Тогда
				ШаблонСостоянияЭД = НСтр("ru = '%1 «Недостаточно прав для чтения ЭДО»'");
				Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостоянияЭД, Результат);
				Гиперссылка = Ложь;
			Иначе
				Гиперссылка = Истина;
				Если Не ЗначениеЗаполнено(Результат) Тогда
					Гиперссылка = Ложь;
					Результат = НСтр("ru = 'ЭДО не начат'");
				КонецЕсли;
				
				СостояниеСоглашения = Неопределено;
				ПараметрыЭД.Свойство("СостояниеСоглашения", СостояниеСоглашения);
				Если СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости Тогда
					ШаблонСостоянияЭД = НСтр("ru = '%1 (проверка технической совместимости)'");
					Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостоянияЭД, Результат);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Результат) Тогда
				ШаблонСостоянияЭД = НСтр("ru = '%1 (настройка ЭДО не подключена)'");
				Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостоянияЭД, Результат);
				Гиперссылка = Истина;
			Иначе
				
				ЗаполнитьТекстПриглашенияКЭДО(Результат, ПараметрыЭД, СсылкаНаВладельца, Гиперссылка);
				
			КонецЕсли;
			Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоНастройкиЭДО(Ложь) Тогда
				Результат = "";
				Гиперссылка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет текст приглашения контрагента к ЭДО.
//
// Параметры:
//  ТекстПриглашения - Строка- заполняемый текст надписи формы.
//  ПараметрыЭД - Структура - свойства электронного документа, соответствующего документу ИБ.
//  СсылкаНаВладельца - ДокументСсылка - ссылка на документ ИБ.
//  Гиперссылка - Булево - определяет отображать ли надпись на форме как гиперссылку.
//
Процедура ЗаполнитьТекстПриглашенияКЭДО(ТекстПриглашения, ПараметрыЭД, СсылкаНаВладельца, Гиперссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		
		ТекстПриглашения = НСтр("ru = 'Нет действующей настройки ЭДО с организацией-получателем'");
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЭД.Организация) И ЗначениеЗаполнено(ПараметрыЭД.Контрагент)
		И Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Гиперссылка = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|	И ПрофилиНастроекЭДО.Организация = &Организация
		|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|	И ПрофилиНастроекЭДО.Организация = &Организация
		|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
		Запрос.УстановитьПараметр("Организация", ПараметрыЭД.Организация);
		
		ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'Пригласить %1 к обмену электронными документами в 1С-ЭДО'");
		ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки, ПараметрыЭД.Контрагент);
		
		НаименованиеКонтрагентаДляСообщенияПользователю = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"НаименованиеКонтрагентаДляСообщенияПользователю");
		
		ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.Контрагент, НаименованиеКонтрагентаДляСообщенияПользователю));
		Результат = Запрос.ВыполнитьПакет();
		
		Если Результат[0].Пустой() Тогда
			Если Результат[1].Пустой() Тогда // нет профиля обмена через Такском
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СостоянияКонтрагентовБЭД.Состояние
				|ИЗ
				|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
				|ГДЕ
				|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент";
				
				Запрос.УстановитьПараметр("Контрагент", ПараметрыЭД.Контрагент);
				Выборка = Запрос.Выполнить().Выбрать();
				
				ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'Подключить ""%1"" к ЭДО'");
				
				НаименованиеОрганизацииСокращенное = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
					"СокращенноеНаименованиеОрганизации");
				
				ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки,
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.Организация, НаименованиеОрганизацииСокращенное));
				
				Если Выборка.Следующий()
					И (Выборка.Состояние <> Перечисления.СостоянияКонтрагентаБЭД.НеПодключен
					И Выборка.Состояние <> Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка()) Тогда
					
					ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'С ""%1"" возможен обмен электронными документами'");
					
					ИмяРеализацияТоваровУслуг = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
					"РеализацияТоваровУслугВМетаданных");
					ИмяПоступлениеТоваровУслуг = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
					"ПоступлениеТоваровУслугВМетаданных");
					Если ИмяРеализацияТоваровУслуг <> Неопределено
						И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяРеализацияТоваровУслуг) Тогда
						
						ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'Обмен электронными документами с ""%1"" можно начать прямо сейчас'");
					ИначеЕсли ИмяПоступлениеТоваровУслуг <> Неопределено
						И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяПоступлениеТоваровУслуг) Тогда
						
						ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'Получать электронные документы от ""%1"", а не вводить руками, можно прямо сейчас'");
					КонецЕсли;
					
					НаименованиеКонтрагентаДляСообщенияПользователю = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
					"НаименованиеКонтрагентаДляСообщенияПользователю");
					
					ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки,
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.Контрагент, НаименованиеКонтрагентаДляСообщенияПользователю));
				КонецЕсли;
			Иначе
				ТекстПриглашения = НСтр("ru = 'Настройте ЭДО с контрагентом %1'");
				ТекстПриглашения = СтрШаблон(ТекстПриглашения, ПараметрыЭД.Контрагент);
				Гиперссылка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, является ли переданный в параметре ЭД служебным или нет.
//
// Параметры:
//  ФайлЭД - Ссылка, ПеречислениеСсылка.ТипыЭлементовВерсииЭД - электронный документ или перечисление.
// 
// Возвращаемое значение:
//  Булево - Истина, если это служебный документ.
//
Функция ЭтоСлужебныйДокумент(ФайлЭД) Экспорт 
	
	Если ТипЗнч(ФайлЭД) = Тип("ПеречислениеСсылка.ТипыЭлементовВерсииЭД") Тогда
		ТипЭлементаВерсииЭД = ФайлЭД;
	Иначе
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлЭД, "ТипЭлементаВерсииЭД"); 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЭлементаВерсииЭД) Тогда
		
		ВозвращаемоеЗначение = НЕ (ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
			Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
			Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
			Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	Иначе
		ВозвращаемоеЗначение = Ложь;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет что эд счет-фактура имеет конечный статус в зависимости от направления.
//
// Параметры:
//  СсылкаСФ - ДокументСсылка - ссылка на документ счет-фактуры
//  НаправлениеЭД - Перечисления.НаправленияЭД - направление обмена.
// 
// Возвращаемое значение:
//  Булево - Истина, если обмен завершен.
//
Функция ДОСФЗавершен(СсылкаСФ, НаправлениеЭД) Экспорт
	
	ДОЗавершен = Ложь;
	СвойстваСчетФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаСФ, "СтатусЭД, ВладелецФайла");
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДОЗавершен = (СвойстваСчетФактуры.СтатусЭД = Перечисления.СтатусыЭД.Утвержден);
	Иначе
		СтатусСФ = СвойстваСчетФактуры.СтатусЭД;
		ТребуетсяИзвещение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваСчетФактуры.ВладелецФайла, "ТребуетсяИзвещение");
		ДОЗавершен = (СтатусСФ = Перечисления.СтатусыЭД.Доставлен)
			Или (Не ТребуетсяИзвещение И (СтатусСФ = Перечисления.СтатусыЭД.Отправлен));
	КонецЕсли;
	
	Возврат ДОЗавершен;
	
КонецФункции

// Проверка на тип счет-фактура.
//
// Параметры:
//  ЭлектронныйДокумент	- Ссылка - электронный документ.
// 
// Возвращаемое значение:
//  Булево - Истина, если это счет-фактура.
//
Функция ЭтоСчетФактура(ЭлектронныйДокумент) Экспорт
	
	Результат = Ложь;

	ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ТипЭлементаВерсииЭД");
	
	Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
		Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет валидность подписей электронного документа и заполняет реквизиты Статус и ДатаПроверкиПодписи
// в табличной части ЭлектронныеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  ВыводитьСообщения - Булево - требуется ли выводить сообщения.
//
Процедура ОпределитьСтатусыПодписей(ЭД, ВыводитьСообщения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	Попытка
		МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
	Исключение
		Отказ = Истина;
	КонецПопытки;
	Если Отказ Тогда
		Если ВыводитьСообщения Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДопИнформацияПоЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ЭД);
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища (ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
	ОбъектЭД = ЭД.ПолучитьОбъект();
	
	Для каждого СтрокаЭП Из ОбъектЭД.ЭлектронныеПодписи Цикл
		Попытка
			ДвоичныеДанныеЭП = СтрокаЭП.Подпись.Получить();
			ЭлектронноеВзаимодействиеСлужебный.ПроверитьПодпись(
				МенеджерКриптографии, ДвоичныеДанныеДокумента, ДвоичныеДанныеЭП);
			СтрокаЭП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаЭП.ПодписьВерна = Истина;
		Исключение
			СтрокаЭП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаЭП.ПодписьВерна = Ложь;
			
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("114");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'проверка электронной подписи'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	ОбъектЭД.Записать();
	
КонецПроцедуры

// Перезаполняет документ информационной базы данными электронного документа.
//
// Параметры:
//  ДокументИБ - ДокументСсылка - ссылка на перезаполняемый документ информационной базы;
//  ЭД - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на электронный документ;
//  ОбъектМетаданных - Строка - возвращает название объекта метаданных перезаполняемого документа;
//  ДокументЗагружен - Булево - если Истина, то документ успешно перезаполнен;
//  СпособОбработки - Строка - способ обработки электронного документа.
//
Процедура ПерезаполнитьДокументыИБПоЭД(ДокументИБ, Знач ЭД, ОбъектМетаданных = Неопределено, ДокументЗагружен = Ложь, СпособОбработки = "") Экспорт
	
	// Для однократной сделки в электронном документе будет Структура.
	
	Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		Или ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		Эд = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(ЭД);
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(ЭД.ТипЭлементаВерсииЭД) Тогда
		
		ЭД = ЭД.ЭлектронныйДокументВладелец;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособОбработки) Тогда
		ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Эд, "ВладелецФайла");
		СвойстваВладельцаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "НастройкаЭДО, ВидЭД");
		
		СпособОбработки = ОбменСКонтрагентамиСлужебный.СпособОбработкиВходящегоДокумента(
			СвойстваВладельцаЭД.НастройкаЭДО, СвойстваВладельцаЭД.ВидЭД);
	КонецЕсли;
	
	ЗаполнитьДокументИБПоЭД(ДокументИБ, ЭД, ДокументЗагружен, СпособОбработки);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ДокументИБ)).ПолноеИмя();
	
КонецПроцедуры

// Возвращает двоичные данные электронного документа.
//
// Параметры:
//  СсылкаНаФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  СертификатПодписи - Ссылка - ссылка на элемент справочника Сертификаты электронной подписи.
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные электронного документа.
//
Функция ПолучитьДвоичныеДанныеФайла(СсылкаНаФайлЭД, СертификатПодписи) Экспорт
	
	ДвоичныеДанныеЭД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(СсылкаНаФайлЭД);
	
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		
		ПараметрыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "НаправлениеЭД, Расширение, ТипЭлементаВерсииЭД, ВладелецФайла");
		ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыФайлаЭД.ВладелецФайла,"ВидЭД,Организация");
		
		ПараметрыФайлаЭД.Вставить("Организация", ПараметрыЭД.Организация);
		
		ПолучаемДанные = Ложь;
		
		Если ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			И ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			
			ПолучаемДанные = Ложь;
		
		ИначеЕсли ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД)
			Или ОбменСКонтрагентамиСлужебный.ЭтоУведомлениеОбУточнении(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД)
			Или (ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
				И ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий)
			Или ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД) Тогда
			
			ПолучаемДанные = Истина;
			ПараметрыФайлаЭД.Вставить("ВидЭД", Неопределено);
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				Или (ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
					И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав)) Тогда
			
			ПолучаемДанные = Истина;
			ПараметрыФайлаЭД.Вставить("ВидЭД", ПараметрыЭД.ВидЭД);
			
		КонецЕсли;
			
		Если ПолучаемДанные Тогда 
			
			Если СтрНайти(ПараметрыФайлаЭД.Расширение, "xml") > 0 Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла(ПараметрыФайлаЭД.Расширение);
				ДвоичныеДанныеЭД.Записать(ИмяФайла);
				
			ИначеЕсли СтрНайти(ПараметрыФайлаЭД.Расширение, "zip") > 0 Тогда
				
				ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
				ДвоичныеДанныеЭД.Записать(ИмяАрхива);
				
				АрхивЧтение = Новый ЧтениеZipФайла(ИмяАрхива);
				ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("signature", СсылкаНаФайлЭД.УникальныйИдентификатор());
				
				Попытка
					АрхивЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					Если Не ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(АрхивЧтение, ПапкаДляРаспаковки) Тогда
						ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
					КонецЕсли;
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
						НСтр("ru = 'Извлечение ЭД CML из архива при подписи'"), ТекстОшибки, ТекстСообщения);
				КонецПопытки;
				АрхивЧтение.Закрыть();
				
				ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				Если ФайлыЭД.Количество() > 0 Тогда
					ИмяФайла = ФайлыЭД[0].ПолноеИмя;
				КонецЕсли;
				
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяАрхива);
			КонецЕсли;
			
			// Прочитаем файл для последующего редактирования.
			ОписаниеОшибки = "";
			ДанныеФайлаЭД = ОбменСКонтрагентамиВнутренний.ДанныеФайлаЭД(ИмяФайла, ОписаниеОшибки);
			Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
				ВызватьИсключение ОписаниеОшибки;
			КонецЕсли;
			
			// Заполним тег Подписант в ЭД.
			ПространствоИменСхемы = ДанныеФайлаЭД.Тип().URIПространстваИмен;
			ЗаполнитьДанныеПодписантаЭД(ДанныеФайлаЭД, ПространствоИменСхемы, ПараметрыФайлаЭД, СертификатПодписи);
			
			ДанныеФайлаЭД.Проверить();
			
			// Записываем ЭД в файл и удаляем пространство имен только у ФНС документов.
			Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда
				
				ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДанныеФайлаЭД, ИмяФайла, Ложь);
				ОбменСКонтрагентамиВнутренний.УдалитьПространствоИмен(ИмяФайла, ПространствоИменСхемы);
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДанныеФайлаЭД, ИмяФайла);
			КонецЕсли;
			
			Если СтрНайти(ПараметрыФайлаЭД.Расширение, "zip") > 0 Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла("zip");
				АрхивКонтейнер = Новый ЗаписьZipФайла(ИмяФайла);
				
				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
				Для Каждого Файл Из ФайлыАрхива Цикл
					АрхивКонтейнер.Добавить(Файл.ПолноеИмя);
				КонецЦикла;
				
				Попытка
					АрхивКонтейнер.Записать();
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование архива ЭД при подписи'"),
					ТекстОшибки, ТекстСообщения);
				КонецПопытки;
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			
			ДвоичныеДанныеЭД = Новый ДвоичныеДанные(ИмяФайла);
			
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭД));
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(СсылкаНаФайлЭД, ИнформацияОФайле);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДвоичныеДанныеЭД;
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив - ссылки на электронные документы, для которых надо определить последовательность действий.
//  МассивОтпечатковСертификатов - Массив - содержит отпечатки доступных сертификатов.
//  Действия - Строка - строковое представление необходимых действий.
//  ДопПараметры - Структура - дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, Массив - ссылки на элемент справочника ЭДПрисоединенныеФайлы.
//  СоотвСертификатовИПаролей - Соответствие - ключ - СертификатЭП, значение - пароль к сертификату.
//
// Возвращаемое значение:
//  Структура, Неопределено - результат выполненных действий.
//
Функция ВыполнитьДействияПоЭД(Знач МассивСсылокНаОбъект,
							  Знач МассивОтпечатковСертификатов,
							  Знач Действия,
							  ДопПараметры,
							  Знач ЭД,
							  Знач СоотвСертификатовИПаролей) Экспорт
							  
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	НемедленнаяОтправкаЭД = НемедленнаяОтправкаЭД();
	
	МассивОтпечатковКлиент = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковКлиент, МассивОтпечатковСертификатов);
	
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Подписать")
		Или ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		Если ВыполнятьКриптооперацииНаСервере Тогда
			Попытка
				МассивОтпечатковСертификатовНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
			Исключение
				МассивОтпечатковСертификатовНаСервере = Новый Массив;
			КонецПопытки;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				МассивОтпечатковСертификатов, МассивОтпечатковСертификатовНаСервере, Истина);
		КонецЕсли;
		
		ТаблицаДоступныхСертификатов = ОбменСКонтрагентамиСлужебный.ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов);
		МассивОтпечатков = ТаблицаДоступныхСертификатов.ВыгрузитьКолонку("Отпечаток");

	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И НЕ (ЗначениеЗаполнено(ЭД) И (ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
										Или ЭтоСлужебныйДокумент(ЭД))) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПроверитьГотовностьИсточников(МассивСсылокНаОбъект);
	КонецЕсли;
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	СтруктураВозврата = Новый Структура;
	// Ключи структуры возврата:
	// ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД - тип Булево;
	// КоличествоНовыхЭД, КоличествоУтвержденныхЭД, КолПодписанных, КолПодготовленных, КолОтправленных - тип Число;
	// МассивНовыхЭД - тип Массив;
	// СоотвСертификатовИМассивовЭДКПодписи - тип Соответствие (ключ - СертификатЭП, значение - МассивЭД к подписи на клиенте)
	// СтруктураКОтправке - тип Структура с ключами:
	//                   БезПодписи, СПодписью - тип Массив, МассивЭД (к подготовке) к отправке, соответственно не подписываемые и подписываемые;
	//                   САвторизацией - тип Соответствие (ключ - СоглашениеЭД, значение - МассивЭД к отправке).
	СтруктураВозврата.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
	
	МассивНеОбрабатываемыхОбъектов = Новый Массив;
	
	// Формирование ЭД:
	
	КолНовыхЭД = 0;
	Если ЭД = Неопределено И ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Сформировать") Тогда
		Если Действия = "Сформировать" 
			Или Действия = "СформироватьПоказать" Тогда
			УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылокНаОбъект);
		КонецЕсли;
		
		НастройкиОбъектов = Новый Соответствие;
		Для Сч = -МассивСсылокНаОбъект.Количество() + 1 По 0 Цикл
			СсылкаНаОбъект = МассивСсылокНаОбъект[-Сч];
			
			// Для случая определения вида ЭД пользователем
			ВидЭД = "";
			Если ЗначениеЗаполнено(ДопПараметры) Тогда
				ДопПараметры.Свойство("ВидЭД", ВидЭД);
			КонецЕсли;
			
			НастройкиОбмена = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаОбъект,
																								   ,
																								   ,
																								   ,
																								   ВидЭД);
			Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
				МассивСсылокНаОбъект.Удалить(-Сч);
			Иначе
				НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
			КонецЕсли;
		КонецЦикла;
		Если МассивСсылокНаОбъект.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапросаСоздатьЭД =
		"ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка
		|ПОМЕСТИТЬ МассивСсылок
		|ИЗ
		|	&МассивСсылок КАК МассивСсылок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка КАК ВладелецЭД
		|ИЗ
		|	МассивСсылок КАК МассивСсылок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО МассивСсылок.ОбъектСсылка = СостоянияЭД.СсылкаНаОбъект";
		
		Если Действия = "СформироватьУтвердитьПодписатьОтправить" Тогда
			ОпределитьНеОбрабатываемыеОбъекты(НастройкиОбъектов, МассивНеОбрабатываемыхОбъектов);
			ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ
			|(СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
			|ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован))";
		Иначе
			ИмяСчетаФактурыВыданного = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СчетФактураВыданныйВМетаданных");
			Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
				
				ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ (ВЫБОР
				|КОГДА МассивСсылок.ОбъектСсылка ССЫЛКА Документ." + ИмяСчетаФактурыВыданного + "
				|	ТОГДА СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
				|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
				|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем)
				|		ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
				|	ИНАЧЕ ИСТИНА
				|КОНЕЦ)";
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = ТекстЗапросаСоздатьЭД;
		Измерение = Метаданные.РегистрыСведений.СостоянияЭД.Измерения.Найти("СсылкаНаОбъект");
		ТЗ_Ссылки = Новый ТаблицаЗначений;
		КолонкаТЗ = ТЗ_Ссылки.Колонки.Добавить("ОбъектСсылка", Измерение.Тип);
		Для Каждого Элемент Из МассивСсылокНаОбъект Цикл
			Строка = ТЗ_Ссылки.Добавить();
			Строка.ОбъектСсылка = Элемент;
		КонецЦикла;
		Запрос.УстановитьПараметр("МассивСсылок", ТЗ_Ссылки);
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		
		// Счета фактуры из ТЗ_ЭД переместим в новую таблицу значений, чтобы при формировании с.ф. были ссылки на ЭД документа основания.
		ТЗ_ЭД_СФ = Новый ТаблицаЗначений;
		ИмяСчетаФактурыВыданного = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"СчетФактураВыданныйВМетаданных");
		Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
			
			ТЗ_ЭД_СФ = ТЗ_ЭД.СкопироватьКолонки();
			Счетчик = 0;
			Пока Счетчик < ТЗ_ЭД.Количество() Цикл
				
				СтрокаТЗ = ТЗ_ЭД[Счетчик];
				Если ТипЗнч(СтрокаТЗ.ВладелецЭД) = Тип("ДокументСсылка." + ИмяСчетаФактурыВыданного) Тогда
					НоваяСтрока = ТЗ_ЭД_СФ.Добавить();
					НоваяСтрока.ВладелецЭД = СтрокаТЗ.ВладелецЭД;
					
					ТЗ_ЭД.Удалить(СтрокаТЗ);
				Иначе 
					Счетчик = Счетчик +1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		МассивНовыхЭД = Новый Массив;
		
		Если ТЗ_ЭД.Количество() > 0 Тогда
			МассивНовыхЭД = ОбменСКонтрагентамиСлужебный.СформироватьПрисоединенныеФайлы(ТЗ_ЭД.ВыгрузитьКолонку("ВладелецЭД"),
																						  НастройкиОбъектов,
																						  ДопПараметры);
			КолНовыхЭД = МассивНовыхЭД.Количество();
		КонецЕсли;
		
		// Если с.ф. формировались отдельно, занесем их в общий массив ЭД
		// для дальнейшей обработки.
		Если ТЗ_ЭД_СФ.Количество() > 0 Тогда
			МассивНовыхСФ = ОбменСКонтрагентамиСлужебный.СформироватьПрисоединенныеФайлы(ТЗ_ЭД_СФ.ВыгрузитьКолонку("ВладелецЭД"),
																						  НастройкиОбъектов,
																						  ДопПараметры);
			КолНовыхСФ = МассивНовыхСФ.Количество();
			
			КолНовыхЭД = КолНовыхЭД + КолНовыхСФ;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНовыхЭД, МассивНовыхСФ);
		КонецЕсли;
		
		СтруктураВозврата.Вставить("КоличествоНовыхЭД", КолНовыхЭД);
		Если Действия = "Сформировать" 
			Или Действия = "СформироватьПоказать" Тогда
			СтруктураВозврата.Вставить("МассивНовыхЭД", МассивНовыхЭД);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Формирование временных таблиц - обрабатываемых ЭД, сформированные ВТ используются далее на всех этапах:
	Если ЗначениеЗаполнено(ЭД) Тогда
		
		ТекстОсновногоЗапроса =
		"ВЫБРАТЬ
		|	ЭД.Ссылка,
		|	ЭД.ВладелецФайла,
		|	ЭД.НаправлениеЭД,
		|	ЭД.ЭлектронныйДокументВладелец,
		|	ЭД.ТипЭлементаВерсииЭД,
		|	ЭД.ПодписанЭП,
		|	ЭД.СтатусЭД
		|ПОМЕСТИТЬ ВТ_ПрисоединенныеФайлы
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭД
		|ГДЕ
		|	ЭД.Ссылка В(&МассивСсылокЭД)";
		
		ТекстОсновногоЗапросаПродолжение = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящий.ВидЭД КАК ВидЭД,
		|	ВТ_ПрисоединенныеФайлы.ВладелецФайла,
		|	ЭлектронныйДокументИсходящий.Контрагент КАК Контрагент,
		|	ВТ_ПрисоединенныеФайлы.НаправлениеЭД,
		|	ЭлектронныйДокументИсходящий.Организация КАК Организация,
		|	ЭлектронныйДокументИсходящий.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ЭлектронныйДокументИсходящий.НастройкаЭДО КАК СоглашениеЭД,
		|	ВТ_ПрисоединенныеФайлы.ЭлектронныйДокументВладелец,
		|	ВТ_ПрисоединенныеФайлы.ТипЭлементаВерсииЭД,
		|	ВТ_ПрисоединенныеФайлы.ПодписанЭП,
		|	ВТ_ПрисоединенныеФайлы.СтатусЭД,
		|	ВТ_ПрисоединенныеФайлы.Ссылка
		|ПОМЕСТИТЬ ВТ_ЭД
		|ИЗ
		|	ВТ_ПрисоединенныеФайлы КАК ВТ_ПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|		ПО ВТ_ПрисоединенныеФайлы.ВладелецФайла = ЭлектронныйДокументИсходящий.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящий.ВидЭД,
		|	ВТ_ПрисоединенныеФайлы.ВладелецФайла,
		|	ЭлектронныйДокументВходящий.Контрагент,
		|	ВТ_ПрисоединенныеФайлы.НаправлениеЭД,
		|	ЭлектронныйДокументВходящий.Организация,
		|	ЭлектронныйДокументВходящий.ПрофильНастроекЭДО,
		|	ЭлектронныйДокументВходящий.НастройкаЭДО,
		|	ВТ_ПрисоединенныеФайлы.ЭлектронныйДокументВладелец,
		|	ВТ_ПрисоединенныеФайлы.ТипЭлементаВерсииЭД,
		|	ВТ_ПрисоединенныеФайлы.ПодписанЭП,
		|	ВТ_ПрисоединенныеФайлы.СтатусЭД,
		|	ВТ_ПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	ВТ_ПрисоединенныеФайлы КАК ВТ_ПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|		ПО ВТ_ПрисоединенныеФайлы.ВладелецФайла = ЭлектронныйДокументВходящий.Ссылка";
		Если ТипЗнч(ЭД) <> Тип("Массив") Тогда
			МассивСсылокЭД = Новый Массив;
			МассивСсылокЭД.Добавить(ЭД);
		Иначе
			МассивСсылокЭД = ЭД;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
	Иначе

		ТекстОсновногоЗапроса =
		"ВЫБРАТЬ
		|	ЭД.Ссылка,
		|	ЭД.ВладелецФайла,
		|	ЭД.НаправлениеЭД,
		|	ЭД.ЭлектронныйДокументВладелец,
		|	ЭД.ПодписанЭП,
		|	ЭД.ТипЭлементаВерсииЭД,
		|	ЭД.СтатусЭД
		|ПОМЕСТИТЬ ВТ_ЭДВременная
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД
		|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭД.ВладелецФайла
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
		|	И СостоянияЭД.СостояниеВерсииЭД <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно)
		|	И ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)";
		
		ТекстОсновногоЗапросаПродолжение = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЭДВременная.Ссылка,
		|	ВТ_ЭДВременная.ВладелецФайла,
		|	ВТ_ЭДВременная.НаправлениеЭД,
		|	ВТ_ЭДВременная.ЭлектронныйДокументВладелец,
		|	ВТ_ЭДВременная.ПодписанЭП,
		|	ВТ_ЭДВременная.ТипЭлементаВерсииЭД,
		|	ВТ_ЭДВременная.СтатусЭД,
		|	ЭлектронныйДокументВходящий.НастройкаЭДО КАК СоглашениеЭД,
		|	ЭлектронныйДокументВходящий.ВидЭД,
		|	ЭлектронныйДокументВходящий.ПрофильНастроекЭДО,
		|	ЭлектронныйДокументВходящий.Организация,
		|	ЭлектронныйДокументВходящий.Контрагент
		|ПОМЕСТИТЬ ВТ_ЭД
		|ИЗ
		|	ВТ_ЭДВременная КАК ВТ_ЭДВременная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|		ПО ВТ_ЭДВременная.ВладелецФайла = ЭлектронныйДокументВходящий.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ЭДВременная.Ссылка,
		|	ВТ_ЭДВременная.ВладелецФайла,
		|	ВТ_ЭДВременная.НаправлениеЭД,
		|	ВТ_ЭДВременная.ЭлектронныйДокументВладелец,
		|	ВТ_ЭДВременная.ПодписанЭП,
		|	ВТ_ЭДВременная.ТипЭлементаВерсииЭД,
		|	ВТ_ЭДВременная.СтатусЭД,
		|	ЭлектронныйДокументИсходящий.НастройкаЭДО,
		|	ЭлектронныйДокументИсходящий.ВидЭД,
		|	ЭлектронныйДокументИсходящий.ПрофильНастроекЭДО,
		|	ЭлектронныйДокументИсходящий.Организация,
		|	ЭлектронныйДокументИсходящий.Контрагент
		|ИЗ
		|	ВТ_ЭДВременная КАК ВТ_ЭДВременная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|		ПО ВТ_ЭДВременная.ВладелецФайла = ЭлектронныйДокументИсходящий.Ссылка";
		Если МассивНеОбрабатываемыхОбъектов.Количество() > 0 Тогда
			ДопУсловие = " И НЕ(ЭД.Ссылка В (&МассивНеОбрабатываемыхОбъектов))";
			Запрос.УстановитьПараметр("МассивНеОбрабатываемыхОбъектов", МассивНеОбрабатываемыхОбъектов);
			ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + ДопУсловие;
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаОбъект);
	КонецЕсли;
		
	ТипыПервичныхЭД = Новый Массив;
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	Запрос.УстановитьПараметр("ТипыПервичныхЭД", ТипыПервичныхЭД);
	
	// Утверждение ЭД:
	
	КолУтвержденныхЭД = 0;
	
	// В этом массиве будут находиться вторичные титулы документов, сформированные после утверждения первичных титулов.
	МассивНовыхЭД = Новый Массив;
	
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Утвердить") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТ_ЭД.ВладелецФайла КАК ВладелецЭД,
		|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
		|	ВТ_ЭД.СтатусЭД,
		|	ВТ_ЭД.ВидЭД,
		|	ВТ_ЭД.НаправлениеЭД,
		|	ВТ_ЭД.ТипЭлементаВерсииЭД,
		|	ВТ_ЭД.СоглашениеЭД КАК СоглашениеЭД
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|ГДЕ
		|	ВТ_ЭД.СтатусЭД В(&МассивСтатусов)";
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
		Запрос.Текст = ТекстОсновногоЗапроса + ТекстОсновногоЗапросаПродолжение + ";" + ТекстЗапроса;
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		КолУтвержденныхРанее = 0;
		
		УтвержденныеСФ = Новый Массив;
		ДокументыРеализации= Новый Массив;
		ДокументыОтклонения = Новый Массив;
		ВерсииЭДОДляЗакрытия = Новый Массив;
		
		Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
			НовыйЭД = Неопределено;
			СсылкаНаЭД = ТекСтрока.СсылкаНаЭД;
			
			ЭтоСлужебныйДокумент = ЭтоСлужебныйДокумент(СсылкаНаЭД);
			
			Если ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Сформирован 
				Или ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
				
				СсылкаНаЭД = ТекСтрока.СсылкаНаЭД;
				НачатьТранзакцию();
				Попытка
					Отказ = Ложь;
					УстановитьПризнакУтвержден(СсылкаНаЭД, НовыйЭД, Отказ);
					Если Отказ Тогда
						ВызватьИсключение "";
					КонецЕсли;
					Если ЗначениеЗаполнено(НовыйЭД) Тогда
						МассивНовыхЭД.Добавить(НовыйЭД);
					КонецЕсли;
					ТекСтрока.СтатусЭД = СсылкаНаЭД.СтатусЭД;
					КолУтвержденныхЭД = КолУтвержденныхЭД + 1;
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					Если ЗначениеЗаполнено(ТекстСообщения) Тогда
						Операция = НСтр("ru = 'Утверждение ЭД'");
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
					КонецЕсли;
				КонецПопытки;
				
				Если НЕ ЭтоСлужебныйДокумент Тогда 
					
					Если ТекСтрока.ВидЭД = Перечисления.ВидыЭД.СчетФактура
						И ТекСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
						УтвержденныеСФ.Добавить(СсылкаНаЭД);
						
					Иначе
						// Для исходящих ЭД изменим состояние документов основания
						Если ЭтоИсходящийДокументРеализации(ТекСтрока) Тогда
							ДокументыРеализации.Добавить(СсылкаНаЭД);
						КонецЕсли;
					КонецЕсли;
					ДокументыОтклонения.Добавить(СсылкаНаЭД);
				КонецЕсли;
				
			Иначе
				КолУтвержденныхРанее = КолУтвержденныхРанее + 1;
			КонецЕсли;
			
			// В массив новых ЭД добавляем Ответный титул
			Если НЕ ЭтоСлужебныйДокумент Тогда
				Если ОбменСКонтрагентамиСлужебный.ЭтоТитулФНС(СсылкаНаЭД.ВладелецФайла) Тогда
					ОтветныйТитул = ОбменСКонтрагентамиСлужебный.ВторойТитулДокумента(СсылкаНаЭД);
					Если ЗначениеЗаполнено(ОтветныйТитул)
						И МассивНовыхЭД.Найти(ОтветныйТитул) = Неопределено Тогда
						МассивНовыхЭД.Добавить(ОтветныйТитул);
					КонецЕсли;
				Иначе
					МассивНовыхЭД.Добавить(СсылкаНаЭД);
				КонецЕсли;
			КонецЕсли;
			
			// В массив новых ЭД добавляем служебные ЭД
			Если ЭтоСлужебныйДокумент Тогда
				МассивНовыхЭД.Добавить(СсылкаНаЭД);
			КонецЕсли;
			
		КонецЦикла;
		
		// Меняем состояние предыдущих входящих с.ф.
		Если УтвержденныеСФ.Количество() > 0 Тогда
			ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеСФОснований(УтвержденныеСФ, Перечисления.НаправленияЭД.Входящий);
		КонецЕсли;
		
		// Для документов вида РТУ меняем состояние их документов основания, если они есть
		Если ДокументыРеализации.Количество() > 0 Тогда
			ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеОснованийРТУ(ДокументыРеализации);
		КонецЕсли;
		
		Если ДокументыОтклонения.Количество() > 0 Тогда
			УстановитьСостояниеЗавершенПоОтклонению(ДокументыОтклонения);
		КонецЕсли;
		
		СтруктураВозврата.Вставить("КоличествоУтвержденныхЭД", КолУтвержденныхЭД);
		
	КонецЕсли;
	
	// Входящие ЭД вида ТОРГ12Продавец и АктИсполнитель - никогда не подписываются и не отправляются,
	// исключим их из последующих выборок:
	ТекстОсновногоЗапроса = СтрЗаменить(ТекстОсновногоЗапроса, "ЭД.Ссылка В(&МассивСсылокЭД)",
	"ЭД.Ссылка В(&МассивСсылокЭД)
	|И (Выбор Когда ЭД.НаправлениеЭД = &НаправлениеВходящий
	|		И Выразить(ЭД.ВладелецФайла КАК Документ.ЭлектронныйДокументВходящий).ВидЭД В (&МассивИсключаемыхВидовЭД) 
	|		И ЭД.ТипЭлементаВерсииЭД = Значение(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
	|	Тогда Ложь
	|	Иначе Истина
	|	Конец)");
	МассивИсключаемыхВидовЭД = Новый Массив;
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Запрос.УстановитьПараметр("НаправлениеВходящий", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("МассивИсключаемыхВидовЭД", МассивИсключаемыхВидовЭД);
	
	// Получим из входящих параметров СоотвСертификатовИИхСтруктур.
	СоотвСертификатовИИхСтруктур = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	СертификатыСПаролями = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(,МассивОтпечатковСертификатов);
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Для Каждого Элемент Из СертификатыСПаролями Цикл
		Структура = Новый Структура("ПарольПользователя, ПарольПолучен, ЗапомнитьПарольКСертификату",
			Элемент.Значение, Истина, Ложь);
		СоотвСертификатовИИхСтруктур.Вставить(Элемент.Ключ, Структура);
	КонецЦикла;
	
	// Это соответствие вернется на сторону клиента и на клиенте будет выполнена попытка получить пароли к сертификатам
	// и подписать массивы ЭД.
	СоотвСертификатовИМассивовЭД = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСертификатовИМассивовЭД", СоотвСертификатовИМассивовЭД);
	
	СоотвСоглашенийИМассивовЭДКОтправке = Новый Соответствие;
	СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправке", СоотвСоглашенийИМассивовЭДКОтправке);
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией",
		СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией);
	
	// Подписание ЭД:
	
	// Каждый подписанный ЭД должен пройти процесс отправки, который состоит из подготовки к отправке (формирование ПЭД)
	// и непосредственно отправки ПЭД (если настроена НемедленнаяОтправка). Подготовка (отправка) подразделяется на
	// отправку не подписываемых ЭД, отправку подписываемых ЭД, отправку с авторизацией (на сервере ОЭДО).
	// В связи с вышеописанным, сформируем для передачи на клиента структуру с массивами ЭД к отправке:
	// Структура в первых 2-х элементах (БезПодписи, СПодписью) содержит массивы ЭД к отправке.
	// В 3-м элементе - соответствие: ключ - соглашение ЭД, значение - массив ЭД, отправляемый в рамках соглашения.
	// 3-й элемент заполняется только если в системе настроена немедленная отправка ЭД.
	СтруктураКОтправке = Новый Структура("БезПодписи, СПодписью", Новый Массив, Новый Массив);
	
	КолПодписанных = 0;
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Подписать") Тогда
		// Для подписания формируем выборку:
		// В виртуальную таблицу выбираем ЭД, которые НАДО и ЕСТЬ ВОЗМОЖНОСТЬ подписать, т.е. отвечающие следующим условиям:
		// - ЭД входит в список к обработке (либо передан как параметр "ЭД", либо получен из Регистра "СостоянияЭД" отобранного
		//     по массиву владельцев, параметр "МассивСсылокНаОбъект");
		// - статус ЭД либо "Утвержден", либо "Частично подписан";
		// - ЭД НАДО подписывать (определяется по соглашению, указанному в ЭД): либо способ обмена "Через ОЭДО", либо "Это
		//     интеркампани", либо если ЭД - входящий, то в соглашении, на вкладке "Входящие" отмечен для обмена вид ЭД,
		//     совпадающий с видом подписываемого ЭД и отмечена опция "Использовать ЭП", либо если ЭД - исходящий, то в
		//     соглашении, на вкладке "Исходящие" отмечен для обмена вид ЭД, совпадающий с видом подписываемого ЭД и отмечена
		//     опция "Использовать ЭП";
		// - существует сертификат для подписи ЭД:
		//     - Организация в сертификате совпадает с организацией в ЭД;
		//     - в сертификате отмечен вид ЭД, соответствующий виду подписываемого ЭД;
		//     - сертификат действует (не помечен на удаление, не отозван);
		//     - доступен для использования (не ограничен по пользователям, либо текущий пользователь совпадает с указанным в
		//         сертификате, а так же, отпечаток сертификата входит в массив отпечатков полученных из личного хранилища
		//         клиента либо сервера, в зависимости от настроек использования криптографии);
		//     - если способ обмена "Через ОЭДО", то сертификат должен быть зарегистрирован у ОЭДО (добавлен в таб.часть
		//         "СертификатыПодписейОрганизации" соглашения об обмене ЭД).
		//
		// Если все описанные условия выполняются, то ЭД попадает в виртуальную таблицу, туда же помещаются все необходимые для
		// подписания ЭД, данные: сертификат подписи, параметры сертификата, уже установленные в ЭД подписи, соглашение.
		// Затем из временной таблицы делается 3 выборки: ЭД на подпись, сертификаты для подписания ЭД, установленные подписи.
		// Из первой выборки берем подписываемый ЭД, из второй и третьей - выбираем сертификаты по условиям:
		// его отпечатка не должно быть среди уже установленных в ЭД подписей.
		
		
		// Основной запрос - выборка из временных таблиц:
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК СертификатПодписи,
		|	Сертификаты.Отпечаток,
		|	Сертификаты.Отозван,
		|	Сертификаты.ДанныеСертификата,
		|	Сертификаты.Организация КАК ОрганизацияВСертификате,
		|	ВидыЭДЭП.ВидЭД КАК ВидДокумента,
		|	Сертификаты.Наименование,
		|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|		ПО ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ПО (Сертификаты.Ссылка = ПрофилиЭДОСертификаты.Сертификат)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.Использовать)
		|			И (ВЫБОР
		|				КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП)
		|					ТОГДА ВидыЭДЭП.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|				ИНАЧЕ ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД
		|			КОНЕЦ)
		|			И (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
		|ГДЕ
		|	НЕ Сертификаты.Отозван
		|	И НЕ Сертификаты.ПометкаУдаления
		|	И Сертификаты.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)
		|	И Сертификаты.Отпечаток В(&МассивОтпечатков)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СертификатПодписи,
		|	ОрганизацияВСертификате
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭД_ЭП.Отпечаток КАК УстановленныеПодписи,
		|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
		|	СоглашенияЭД.Ссылка КАК СоглашениеЭД,
		|	ЕСТЬNULL(ВТ_ЭД.ПрофильНастроекЭДО.СпособОбменаЭД, СоглашенияЭД.Ссылка.СпособОбменаЭД) КАК СпособОбменаЭД,
		|	ВТ_ЭД.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ_Сертификаты.СертификатПодписи КАК СертификатПодписи,
		|	ВТ_Сертификаты.Отпечаток,
		|	ВТ_Сертификаты.Отозван,
		|	ВТ_ЭД.Организация,
		|	ВТ_ЭД.Контрагент,
		|	ВТ_Сертификаты.ОрганизацияВСертификате КАК ОрганизацияВСертификате,
		|	СоглашенияЭД.ЭтоИнтеркампани,
		|	ВЫБОР
		|		КОГДА ВТ_ЭД.ПрофильНастроекЭДО.СпособОбменаЭД В (&СпособыОбменаСАвторизацией)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАвторизация,
		|	ВЫБОР
		|		КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЕСТЬNULL(ВТ_ЭД.ЭлектронныйДокументВладелец.ПодписанЭП, ЛОЖЬ)
		|	КОНЕЦ КАК ЭДВладелецПодписан,
		|	ВТ_Сертификаты.Наименование КАК НаименованиеСертификата,
		|	ВТ_ЭД.ВидЭД,
		|	ВТ_Сертификаты.ДанныеСертификата
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
		|			ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭД.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияЭДИсходящие
		|			ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДИсходящие.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭД_ЭП
		|			ПО ВТ_ЭД.Ссылка = ЭД_ЭП.Ссылка
		|		ПО ВТ_Сертификаты.СсылкаНаЭД = ВТ_ЭД.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СоглашенияЭД.ЭтоИнтеркампани
		|				ТОГДА ИСТИНА
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
		|				ТОГДА ВТ_ЭД.ПодписанЭП
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|					И ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
		|				ТОГДА СоглашенияЭДИсходящие.Формировать
		|						И СоглашенияЭДИсходящие.ИспользоватьЭП
		|						И &ИспользоватьЭП
		|			КОГДА НЕ ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
		|				ТОГДА ВЫБОР
		|						КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП)
		|							ТОГДА ВТ_Сертификаты.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|						ИНАЧЕ ВТ_ЭД.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|					КОНЕЦ
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И НЕ СоглашенияЭД.ПометкаУдаления
		|	И СоглашенияЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|	И ВТ_ЭД.СтатусЭД В(&МассивСтатусов)
		|	И ВЫБОР
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
		|					И (ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ)
		|						ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД)
		|						ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД))
		|					И ВТ_ЭД.ВидЭД В (&ВидыЭДСчетаФактуры)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ.СсылкаНаЭД,
		|	ВТ.СпособОбменаЭД,
		|	ВТ.Организация,
		|	ВТ.Контрагент,
		|	ВТ.ЭтоИнтеркампани,
		|	ВТ.ТребуетсяАвторизация,
		|	ВТ.СоглашениеЭД,
		|	ВТ.ПрофильНастроекЭДО,
		|	ВТ.ЭДВладелецПодписан,
		|	ВТ.ВидЭД
		|ИЗ
		|	ВТ КАК ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СсылкаНаЭД,
		|	ВТ.СертификатПодписи,
		|	ВТ.Отпечаток,
		|	ВТ.Отозван,
		|	ВТ.ОрганизацияВСертификате КАК Организация,
		|	ВТ.ДанныеСертификата КАК ДанныеСертификата,
		|	ВТ.НаименованиеСертификата КАК НаименованиеСертификата,
		|	ВТ.ВидЭД,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя
		|ИЗ
		|	ВТ КАК ВТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеСертификата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СсылкаНаЭД,
		|	ВТ.УстановленныеПодписи,
		|	Сертификаты.Организация
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ПО ВТ.УстановленныеПодписи = Сертификаты.Отпечаток
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ";
		
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
		Запрос.УстановитьПараметр("МассивСтатусов",			МассивСтатусов);
		Запрос.УстановитьПараметр("НаправлениеИсходящий",	Перечисления.НаправленияЭД.Исходящий);
		Запрос.УстановитьПараметр("МассивОтпечатков",		МассивОтпечатков);
		Запрос.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь",		Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.УстановитьПараметр("ИспользоватьЭП",			ИспользоватьЭП);
		МассивВидовЭД = Новый Массив;
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
		Запрос.УстановитьПараметр("ВидыЭДСчетаФактуры", МассивВидовЭД);
		ОбменСАвторизацией = Новый Массив;
		ОбменСАвторизацией.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		ОбменСАвторизацией.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
		Запрос.УстановитьПараметр("СпособыОбменаСАвторизацией", ОбменСАвторизацией);
		Запрос.Текст = ТекстОсновногоЗапроса + ТекстОсновногоЗапросаПродолжение
			+ ";
			|////////////////
			|" + ТекстЗапроса;

		// После утверждения некоторых ЭД формируется в ответ новый ЭД,
		// поэтому на подпись отправляем новый ЭД.
		Если МассивНовыхЭД.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("МассивСсылокЭД", МассивНовыхЭД);
		КонецЕсли;
		
		Результат = Запрос.ВыполнитьПакет();
		ДоступныеСертификаты = Результат[3].Выгрузить();
		ТЗ_Сертификатов = Результат[5].Выгрузить();
		ТЗ_УстановленныхПодписей = Результат[6].Выгрузить();
		Выборка = Результат[4].Выбрать();
		ТЗ_ЭД = Новый ТаблицаЗначений;
		ТЗ_ЭД.Колонки.Добавить("СсылкаНаЭД");
		ТЗ_ЭД.Колонки.Добавить("ПрофильНастроекЭДО");
		ТЗ_ЭД.Колонки.Добавить("СертификатыПодписи");
		ТЗ_ЭД.Колонки.Добавить("ТребуетсяАвторизация");
		
		Если ТЗ_Сертификатов.Количество() = 0 И ЗначениеЗаполнено(ЭД) Тогда
			ОшибкаНастройкиКриптографии = Ложь;
			ОшибкаНастройкиСертификата = Ложь;
			Если ДоступныеСертификаты[0].Количество > 0 Тогда
				ПрофильНастроекЭДО   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД,           "ПрофильНастроекЭДО");
				СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "СпособОбменаЭД");
				Если Не ЭтоПрямойОбмен(СпособОбменаЭД) Тогда
					ШаблонСообщения = НСтр("ru = 'В профиле настроек ЭДО: %1
						|не найден ни один из доступных сертификатов ЭП.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПрофильНастроекЭДО);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			ИначеЕсли ДопПараметры.Свойство("ОшибкаНастройкиКриптографии", ОшибкаНастройкиКриптографии)
				И ОшибкаНастройкиКриптографии Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка подписания электронного документа.
											|Проверьте настройки криптографии.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			ИначеЕсли ДопПараметры.Свойство("ОшибкаНастройкиСертификата", ОшибкаНастройкиСертификата)
				И ОшибкаНастройкиСертификата Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка подписания электронного документа.
											|Проверьте настройки сертификатов.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
			КонецЕсли;
		КонецЕсли;
		
		// Для связки ЭД, Соглашения и Сертификата, в числе прочих нужно соответствие,
		// ключом которого является ссылка на ЭД, значение - Соглашение об обмене.
		// Например, 2 ЭД могут быть подписаны 2-я сертификатами (т.е пользователь должен выбрать,
		// каким сертификатом он будет подписывать эти ЭД), при этом ЭД относятся к разным соглашениям
		// (например один - прямой обмен, другой - через оператора), если пользователь отказался подписывать
		// эти ЭД, то тот ЭД, который относится к соглашению через оператора, надо удалить из массива на отправку,
		// для этого найдем его соглашение в соответствии (ЭД - Соглашения), по соглашению найдем этот ЭД в
		// соответствии Соглашения - Массивы ЭД к отправке и удалим из массива нужный ЭД.
		СоотвЭДИСоглашений = Новый Соответствие;
		
		// Ключ - Строка (сумма УИД сертификатов: Строка(Сертификат1.УникальныйИдентификатор())
		// + Строка(Сертификат2.УникальныйИдентификатор()) + ...), Значение - Структура массивов (МассивСертификатов
		// и МассивЭД).
		// Смысл данной структуры в том, что для подписания разных ЭД возможно будет доступен одинаковый
		// набор сертификатов. Например: накладная может быть подписана сертификатами Сертификат1 и Сертификат2,
		// счет-фактура так же может быть подписана сертификатами Сертификат1 и Сертификат2, при этом накладная сформировано
		// по соглашению1 (прямой обмен), а СФ - по соглашению2 (через ОЭДО). Не правильно 2 раза спрашивать
		// пользователя, каким из 2-х сертификатов он хочет подписывать документы, поэтому, надо для этой пары
		// сертификатов сформировать массив ЭД, для подписания которых доступна именно эта пара сертификатов.
		// Чтобы сделать запись в структуре уникальной и иметь возможность искать нужную запись по ключу,
		// ключ сделан составным (в результатах запроса сертификаты упорядочены по наименованию).
		СтруктСтруктурМассивовЭДИСертификатов = Новый Структура;
		
		// Если в системе настроена немедленная отправка и есть действие "Отправить", то из подписываемых ЭД
		// надо выделить те, которые для отправки требуют авторизации (обмен через ОЭДО) и будут подписываться на клиенте.
		// Для этого ТЗ_ЭД обработаем в 2 прохода (1- ЭД требующие авторизации, 2- не требующие).
		ВыделятьЭДКОтправкеСАвторизацией = (ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить")
											И НемедленнаяОтправкаЭД);
		
		МассивЭД = Новый Массив;
		Если Выборка.Количество() > 0 Тогда
			Пока Выборка.Следующий() Цикл
				СсылкаНаЭД = Выборка.СсылкаНаЭД;
				Отбор = Новый Структура("СсылкаНаЭД", СсылкаНаЭД);
				КопияТЗ = ТЗ_Сертификатов.Скопировать(Отбор);
				МассивОтпечатковИсключения = Новый Массив;
				МассивСертификатов = Новый Массив;
				Если Выборка.ЭтоИнтеркампани Тогда
					ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
					Если ТЗ_Отпечатков.Количество() = 0 Тогда
						Если КопияТЗ.Количество() > 0 Тогда
							Для Каждого СтрокаСертификата Из КопияТЗ Цикл
								СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольПользователя, Отпечаток,
									|Отозван, ДанныеСертификата, ЗапомнитьПарольКСертификату");
								ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
								МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
								ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
								Если ПараметрыВСоотв <> Неопределено И ПараметрыВСоотв.ПарольПолучен Тогда
									ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольПользователя");
								КонецЕсли;
								СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
							КонецЦикла;
							НоваяСтрока = ТЗ_ЭД.Добавить();
							НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
							НоваяСтрока.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
							НоваяСтрока.СертификатыПодписи = МассивСертификатов;
							НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
							Организация2Стороны = ?(СтрокаСертификата.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
							Отбор.Вставить("Организация", Организация2Стороны);
							КопияТЗ = КопияТЗ.Скопировать(Отбор);
						КонецЕсли;
					Иначе
						МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
						ТЗ_Отпечатков.Свернуть("Организация");
						СтрокаОтпечатка = ТЗ_Отпечатков[0];
						Если ЗначениеЗаполнено(СтрокаОтпечатка.Организация) Тогда
							Организация2Стороны = ?(СтрокаОтпечатка.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
							Отбор.Вставить("Организация", Организация2Стороны);
							КопияТЗ = КопияТЗ.Скопировать(Отбор);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ЭтоСлужебный = ЭтоСлужебныйДокумент(СсылкаНаЭД);
				ИДМассиваЭД = "й";
				ПарольПолучен = Ложь;
				Для Каждого СтрокаСертификата Из КопияТЗ Цикл
					Если МассивОтпечатковИсключения.Найти(СтрокаСертификата.Отпечаток) <> Неопределено
						Или МассивСертификатов.Найти(СтрокаСертификата.СертификатПодписи) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
					ИДМассиваЭД = ИДМассиваЭД + Строка(СтрокаСертификата.СертификатПодписи.УникальныйИдентификатор());
					
					СтруктураСертификата = Новый Структура("СертификатПодписи,
						|ПарольПолучен, ПарольПользователя, Отпечаток, Отозван, ДанныеСертификата, ЗапомнитьПарольКСертификату");
					ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
					ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
					Если ПараметрыВСоотв <> Неопределено И ПараметрыВСоотв.ПарольПолучен Тогда
						ПарольПолучен = Истина;
						ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольПользователя");
					КонецЕсли;
					СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
					// Если обрабатывается служебный документ, то его можно подписать любым сертификатом,
					// в котором сохранен пароль.
					Если ЭтоСлужебный И ПарольПолучен Тогда
						МассивСертификатов = Новый Массив;
						МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если МассивСертификатов.Количество() > 0 Тогда
					Подписан = 0;
					
					Если НЕ Выборка.ЭДВладелецПодписан Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПарольПолучен И ВыполнятьКриптооперацииНаСервере Тогда
						Подписан = ПодписатьЭДОпределеннымСертификатом(СсылкаНаЭД, МассивСертификатов[0], СтруктураСертификата);
						Если Подписан > 0 Тогда
							КолПодписанных = КолПодписанных + Подписан;
							// Если ЭД подписаны, то для определения сертификата авторизации и последующей отправки,
							// они будут получены запросом, на следующем этапе (Отправка ЭД).
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока = ТЗ_ЭД.Добавить();
					НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
					НоваяСтрока.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
					НоваяСтрока.СертификатыПодписи = МассивСертификатов;
					НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
					
					СоотвЭДИСоглашений.Вставить(СсылкаНаЭД, Выборка.ПрофильНастроекЭДО);
					СтруктураМассивов = "";
					ИДМассиваЭД = СтрЗаменить(ИДМассиваЭД, "-", "_");
					Если НЕ СтруктСтруктурМассивовЭДИСертификатов.Свойство(ИДМассиваЭД, СтруктураМассивов)
						Или ТипЗнч(СтруктураМассивов) <> Тип("Структура") Тогда
						СтруктСтруктурМассивовЭДИСертификатов.Вставить(ИДМассиваЭД,
							Новый Структура("МассивСертификатов", МассивСертификатов));
						СтруктураМассивов = СтруктСтруктурМассивовЭДИСертификатов[ИДМассиваЭД];
					КонецЕсли;
					
					СоответствиеЭДИДД = Неопределено;
					Если НЕ СтруктураМассивов.Свойство("СоответствиеЭДИДД", СоответствиеЭДИДД)
						Или ТипЗнч(СоответствиеЭДИДД) <> Тип("Соответствие") Тогда
						СтруктураМассивов.Вставить("СоответствиеЭДИДД", Новый Соответствие);
						СоответствиеЭДИДД = СтруктураМассивов.СоответствиеЭДИДД;
					КонецЕсли;
					Если МассивСертификатов.Количество() = 1 Тогда
						Значение = ПоместитьВоВременноеХранилище(ПолучитьДвоичныеДанныеФайла(СсылкаНаЭД, МассивСертификатов[0]),
							СсылкаНаЭД.УникальныйИдентификатор());
					Иначе
						Значение = Неопределено;
					КонецЕсли;
					СоответствиеЭДИДД.Вставить(СсылкаНаЭД, Значение);
					
					Если ВыделятьЭДКОтправкеСАвторизацией И Выборка.ТребуетсяАвторизация Тогда
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет попытаться их отправить, предварительно получив сертификат аутентификации по настройке ЭДО.
						МассивЭД = СоотвСоглашенийИМассивовЭДКОтправке.Получить(Выборка.ПрофильНастроекЭДО);
						Если МассивЭД = Неопределено Тогда
							МассивЭД = Новый Массив;
						КонецЕсли;
						Если МассивЭД.Найти(СсылкаНаЭД) = Неопределено Тогда
							МассивЭД.Добавить(СсылкаНаЭД);
						КонецЕсли;
						СоотвСоглашенийИМассивовЭДКОтправке.Вставить(Выборка.ПрофильНастроекЭДО, МассивЭД);
					Иначе
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет подготовить их к отправке и при необходимости отправить.
						Для Каждого Элемент Из СоответствиеЭДИДД Цикл
							Если СтруктураКОтправке.СПодписью.Найти(Элемент.Ключ) = Неопределено Тогда
								СтруктураКОтправке.СПодписью.Добавить(Элемент.Ключ);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КолПодписанных > 0 Тогда
			СтруктураВозврата.Вставить("КолПодписанных", КолПодписанных);
		КонецЕсли;
		Если СоотвЭДИСоглашений.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СоотвЭДИСоглашений", СоотвЭДИСоглашений);
		КонецЕсли;
		Если СтруктСтруктурМассивовЭДИСертификатов.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СтруктСтруктурМассивовЭДИСертификатов", СтруктСтруктурМассивовЭДИСертификатов);
		КонецЕсли;
	КонецЕсли;
	
	// Отправка ЭД:
	СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации);
	
	Отправлено = 0;
	Подготовлено = 0;
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		СтМассивовСтруктурСертификатов = Новый Структура("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		// Обработаем массивы ЭД (сформированные на этапе подписания ЭД), которые будут подписаны позже
		// и для отправки которых нужны сертификаты авторизации:
		Если СоотвСоглашенийИМассивовЭДКОтправке.Количество() > 0 Тогда
			МассивПрофилейНастроекЭДО = Новый Массив;
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				МассивПрофилейНастроекЭДО.Добавить(Элемент.Ключ);
			КонецЦикла;
			СоотвСоглашенийИСоответствийСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
				МассивПрофилейНастроекЭДО,
				СтМассивовСтруктурСертификатов,
				СоотвСертификатовИПаролей);
			// Если есть сертификат авторизации, то попытаемся, после подписания массива ЭД на клиенте,
			// сразу же отправить ЭД, иначе, после подписания, ЭД упакуем в ПЭД и поместим в очередь на отправку.
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				ПрофильНастроекЭДО = Элемент.Ключ;
				РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				
				СоотвСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметров.Получить(ПрофильНастроекЭДО);
				Если Не ЗначениеЗаполнено(СоотвСертификатовИПараметров) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого КлючИЗначение Из СоотвСертификатовИПараметров Цикл
					Сертификат           = КлючИЗначение.Ключ;
					СтруктураСертификата = КлючИЗначение.Значение;
					
					МаркерРасшифрованный = Неопределено;
					МаркерЗашифрованный = Неопределено;
					Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
						И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
							Или СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
						И (ЗначениеЗаполнено(МаркерРасшифрованный) 
							Или ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
						
						СоотвСертификатовИИхСтруктур.Вставить(Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации,
							СтруктураСертификата);
							
						МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
						Если МассивСертификатов = Неопределено Тогда
							МассивСертификатов = Новый Массив;
							СоотвСоглашенийИСертификатовАвторизации.Вставить(ПрофильНастроекЭДО, МассивСертификатов);
						КонецЕсли;
						МассивСертификатов.Добавить(Сертификат);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
		
		ТекстЗапроса =
				"ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ИсходящийДокумент,
				|	ВТ_ЭД.Ссылка КАК ЭД,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК СоглашениеЭД
				|ПОМЕСТИТЬ ВТ_НастройкиОбмена
				|ИЗ
				|	ВТ_ЭД КАК ВТ_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
				|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|			И ВТ_ЭД.ВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
				|			И (ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД))
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
				|	ВТ_ЭД.Ссылка,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|ИЗ
				|	ВТ_ЭД КАК ВТ_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
				|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|			И ВТ_ЭД.ВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
				|			И (НЕ ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД))
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД,
				|	ВТ_ЭД.ВидЭД,
				|	ВТ_ЭД.Ссылка,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|ИЗ
				|	ВТ_ЭД КАК ВТ_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
				|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|			И (ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик))
				|			И (СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель))
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД,
				|	ВТ_ЭД.ВидЭД,
				|	ВТ_ЭД.Ссылка,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|ИЗ
				|	ВТ_ЭД КАК ВТ_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
				|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|			И (СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец))
				|			И (ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12покупатель))
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД,
				|	ВТ_ЭД.ВидЭД,
				|	ВТ_ЭД.Ссылка,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|ИЗ
				|	ВТ_ЭД КАК ВТ_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
				|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|			И (ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
				|			И (СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель))
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
				|	ВТ_ЭД.СтатусЭД,
				|	ВТ_ЭД.ПрофильНастроекЭДО,
				|	ВТ_НастройкиОбмена.СоглашениеЭД КАК СоглашениеЭД,
				|	ВТ_НастройкиОбмена.СпособОбменаЭД,
				|	ВЫБОР
				|		КОГДА ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
				|				ИЛИ ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ТребуетсяАвторизация,
				|	ВЫБОР
				|		КОГДА ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
				|				ИЛИ ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
				|				ИЛИ СоглашенияЭД.ЭтоИнтеркампани
				|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
				|					И ВТ_ЭД.ПодписанЭП
				|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
				|					И ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
				|					И ВТ_НастройкиОбмена.ИспользоватьЭП
				|					И &ИспользоватьЭП
				|			ТОГДА ИСТИНА
				|		КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОЭСФ)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДПЭСФ)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИПУУЭСФ)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИПЭСФ)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УОУ)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УУЭСФ)
				|			ТОГДА ВЫБОР
				|					КОГДА ЕСТЬNULL(ЭДВладелецЭД.ПодписанЭП, ЛОЖЬ)
				|						ТОГДА НЕ ВТ_ЭД.ПодписанЭП
				|					ИНАЧЕ ЛОЖЬ
				|				КОНЕЦ
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ТребуетсяПодпись,
				|	ВЫБОР
				|		КОГДА ВТ_НастройкиОбмена.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
				|				И ВТ_НастройкиОбмена.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
				|				И НЕ СоглашенияЭД.ЭтоИнтеркампани
				|				И НЕ СоглашенияЭД.СертификатОрганизацииДляРасшифровки = &ПустаяСсылкаНаСертификат
				|				И &ИспользоватьЭП
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ТребуетсяШифрование
				|ИЗ
				|	ВТ_ЭД КАК ВТ_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
				|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭД.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
				|		ПО ВТ_ЭД.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиОбмена КАК ВТ_НастройкиОбмена
				|		ПО ВТ_ЭД.Ссылка = ВТ_НастройкиОбмена.ЭД
				|ГДЕ
				|	ВЫБОР
				|			КОГДА ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
				|					ИЛИ ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
				|					ИЛИ СоглашенияЭД.ЭтоИнтеркампани
				|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
				|						И ВТ_ЭД.ПодписанЭП
				|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
				|						И ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
				|						И ВТ_НастройкиОбмена.ИспользоватьЭП
				|						И &ИспользоватьЭП
				|				ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
				|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
				|					И ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
				|				ТОГДА ВЫБОР
				|						КОГДА НЕ ВТ_НастройкиОбмена.ИспользоватьЭП
				|								ИЛИ НЕ &ИспользоватьЭП
				|							ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеБезПодписи)
				|						ИНАЧЕ ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
				|					КОНЕЦ
				|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
				|					И НЕ ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
				|				ТОГДА ВЫБОР
				|						КОГДА ЭДВладелецЭД.ПодписанЭП
				|							ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
				|						ИНАЧЕ ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеБезПодписи)
				|					КОНЕЦ
				|			ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ";
		МассивСтатусовСПодписью = Новый Массив;
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Подписан);
		
		МассивСтатусовБезПодписи = Новый Массив;
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			
		Если Действия = "ОтправитьПовторно" Тогда
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Отправлен);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Отправлен);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Доставлен);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Доставлен);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
		КонецЕсли;
		
		ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
		
		Запрос.Текст = ТекстОсновногоЗапроса + ТекстОсновногоЗапросаПродолжение
						+ "
						|;
						|//////////
						|" + ТекстЗапроса;
		
		Запрос.УстановитьПараметр("НаправлениеИсходящий",       Перечисления.НаправленияЭД.Исходящий);
		Запрос.УстановитьПараметр("СтатусыКОтправкеБезПодписи", МассивСтатусовБезПодписи);
		Запрос.УстановитьПараметр("СтатусыКОтправкеСПодписью",  МассивСтатусовСПодписью);
		Запрос.УстановитьПараметр("ИспользоватьЭП",             ИспользоватьЭП);
		Запрос.УстановитьПараметр("ПустаяСсылкаНаСертификат",
			Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
			
		
		// После утверждения входящего ЭД, вида "Торг12Продавец", формируется новый ЭД,
		// который и должен отправиться на другую сторону.
		
		Если МассивНовыхЭД.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("МассивСсылокЭД", МассивНовыхЭД);
		КонецЕсли;
		
		ДокументыКОтправке = Запрос.Выполнить().Выгрузить();
		
		Отправлено = 0;
		Подготовлено = 0;
		Если ДокументыКОтправке.Количество() > 0 Тогда
			ДокументыСШифрованием = ДокументыКОтправке.СкопироватьКолонки();
			Если НЕ ВыполнятьКриптооперацииНаСервере Тогда
				// Скопируем в отдельную таблицу ЭД, которые надо шифровать на клиенте
				// и удалим эти строки из таблицы ЭД к отправке:
				Отбор = Новый Структура("ТребуетсяШифрование", Истина);
				ДокументыСШифрованием = ДокументыКОтправке.Скопировать(Отбор);
				Отбор = Новый Структура("ТребуетсяШифрование", Ложь);
				ДокументыКОтправке = ДокументыКОтправке.Скопировать(Отбор);
			КонецЕсли;
			Отбор = Новый Структура("ТребуетсяПодпись", Ложь);
			ВременнаяТаблица = ДокументыКОтправке.Скопировать(Отбор);
			СтруктураКОтправке.Вставить("БезПодписи", ВременнаяТаблица.ВыгрузитьКолонку("СсылкаНаЭД"));
			
			Если Не НемедленнаяОтправкаЭД Тогда
				// Если используется отложенная отправка, то авторизация на сервере ОЭДО, на текущем этапе, не нужна.
				// Следовательно, ЭД передаваемые через ОЭДО, передаются на формирование ПЭД без сертификатов авторизации.
				Отбор = Новый Структура("ТребуетсяПодпись", Истина);
				ВременнаяТаблица = ДокументыКОтправке.Скопировать(Отбор);
				МассивПодписанныхЭДКОтправке = ВременнаяТаблица.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
					СтруктураКОтправке.СПодписью.Добавить(Элемент);
				КонецЦикла;
				
			Иначе
				Отбор = Новый Структура("ТребуетсяАвторизация, ТребуетсяПодпись", Ложь, Истина);
				ВременнаяТаблица = ДокументыКОтправке.Скопировать(Отбор);
				МассивПодписанныхЭДКОтправке = ВременнаяТаблица.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
					Если СтруктураКОтправке.СПодписью.Найти(Элемент) = Неопределено Тогда
						СтруктураКОтправке.СПодписью.Добавить(Элемент);
					КонецЕсли;
				КонецЦикла;
				
				Отбор = Новый Структура("ТребуетсяАвторизация", Истина);
				ВременнаяТаблица = ДокументыКОтправке.Скопировать(Отбор);
				ТзПрофилейНастроекЭДО = ВременнаяТаблица.Скопировать();
				ТзПрофилейНастроекЭДО.Свернуть("ПрофильНастроекЭДО");
				МассивПрофилейНастроекЭДО = ТзПрофилейНастроекЭДО.ВыгрузитьКолонку("ПрофильНастроекЭДО");
				Если МассивПрофилейНастроекЭДО.Количество() > 0 Тогда
					СоотвСоглашенийИСоответствийСертификатов = СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
					                                                                 МассивПрофилейНастроекЭДО,
					                                                                 СтМассивовСтруктурСертификатов,
					                                                                 СоотвСертификатовИПаролей);
				КонецЕсли;
				// Если есть расшифрованные маркеры по сертификатам авторизации,
				// то здесь же отправим ЭД по данным сертификатам.
				МассивЭДКОтправкеССервера = Новый Массив;
				ЛокальноеСоотвСоглашенийИСтруктур = Новый Соответствие;
				
				Для Каждого ПрофильНастроекЭДО Из МассивПрофилейНастроекЭДО Цикл
					РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
					
					СоответствиеСертификатов = СоотвСоглашенийИСоответствийСертификатов.Получить(ПрофильНастроекЭДО);
					Отбор = Новый Структура("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
					ПрофилиНастроекЭДО = ВременнаяТаблица.Скопировать(Отбор);
					Если ПрофилиНастроекЭДО.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					МассивЭД = ПрофилиНастроекЭДО.ВыгрузитьКолонку("СсылкаНаЭД");
					Если Не ЗначениеЗаполнено(СоответствиеСертификатов)
						Или СоответствиеСертификатов.Количество() = 0 Тогда
						// Если нет сертификата авторизации, то передадим массив ЭД на формирование ПЭД,
						// далее, ПЭД встанет в очередь на отправку (отложенная отправка).
						Для Каждого СсылкаНаЭД Из МассивЭД Цикл
							СтруктураКОтправке.СПодписью.Добавить(СсылкаНаЭД);
						КонецЦикла;
						Продолжить;
					КонецЕсли;
					
					ОтправкаССервера = Ложь;
					Для Каждого КлючИЗначение Из СоответствиеСертификатов Цикл
						Сертификат           = КлючИЗначение.Ключ;
						СтруктураСертификата = КлючИЗначение.Значение;
						
						МаркерРасшифрованный = Неопределено;
						МаркерЗашифрованный = Неопределено;
						Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
							И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
								Или СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
							И (ЗначениеЗаполнено(МаркерРасшифрованный) Или ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
							
							Если ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
								Для Каждого СсылкаНаЭД Из МассивЭД Цикл
									МассивЭДКОтправкеССервера.Добавить(СсылкаНаЭД);
								КонецЦикла;
								ЛокальноеСоотвСоглашенийИСтруктур.Вставить(ПрофильНастроекЭДО, СтруктураСертификата);
								ОтправкаССервера = Истина;
								Прервать;
							Иначе
								СоотвСертификатовИИхСтруктур.Вставить(Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации,
									СтруктураСертификата);
									
								МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
								Если МассивСертификатов = Неопределено Тогда
									МассивСертификатов = Новый Массив;
									СоотвСоглашенийИСертификатовАвторизации.Вставить(ПрофильНастроекЭДО, МассивСертификатов);
								КонецЕсли;
								МассивСертификатов.Добавить(Сертификат);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если ОтправкаССервера Тогда
						Продолжить;
					Иначе
						// По данному соглашению может быть массив, ожидающих подписи на клиенте, ЭД.
						// Данная ситуация может получиться, когда в журнале документов выбрана группа документов ИБ
						// с разными статусами ЭД (утвержден и подписан), тогда с предыдущего этапа (Подписание ЭД)
						// в соответствии соглашений и массивов придет массив ЭД на подпись, а на текущем этапе
						// будет сформирован массив ЭД к отправке.
						// Чтобы не затереть массив ЭД на подпись, добавим ЭД к отправке в существующий массив:
						МассивЭДОжидающихПодписи = СоотвСоглашенийИМассивовЭДКОтправке.Получить(ПрофильНастроекЭДО);
						Если МассивЭДОжидающихПодписи = Неопределено Тогда
							МассивЭДОжидающихПодписи = Новый Массив;
						КонецЕсли;
						Для Каждого ЭлементКОтправке Из МассивЭД Цикл
							МассивЭДОжидающихПодписи.Добавить(ЭлементКОтправке);
						КонецЦикла;
						СоотвСоглашенийИМассивовЭДКОтправке.Вставить(ПрофильНастроекЭДО, МассивЭДОжидающихПодписи);
					КонецЕсли;
				КонецЦикла;
				
				Если МассивЭДКОтправкеССервера.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭДКОтправкеССервера, Истина, ЛокальноеСоотвСоглашенийИСтруктур);
					Отправлено = Отправлено + СтРезультата.КолОтправленных;
					Подготовлено = Подготовлено + СтРезультата.КолПодготовленных;
				КонецЕсли;
			КонецЕсли;
			Для Каждого Элемент Из СтруктураКОтправке Цикл
				Если ВРег(Элемент.Ключ) = ВРег("САвторизацией") Тогда
					Продолжить;
				КонецЕсли;
				
				МассивКОтправке = Новый Массив;
				СтруктураКОтправке.Свойство(Элемент.Ключ, МассивКОтправке);
				ПризнакПодписи = (Элемент.Ключ = "СПодписью");
				МассивЭД = Элемент.Значение;
				Если ТипЗнч(МассивЭД) = Тип("Массив") И МассивЭД.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭД, ПризнакПодписи);
					Отправлено = Отправлено + СтРезультата.КолОтправленных;
					Подготовлено = Подготовлено + СтРезультата.КолПодготовленных;
					МассивКОтправке = СтРезультата.МассивПакетовДляОбработкиНаКлиенте;
				КонецЕсли;
				МассивЭД = Новый Массив;
				// Добавим в структуру ЭД, которые надо шифровать на клиенте:
				Если ДокументыСШифрованием.Количество() > 0 Тогда
					Отбор = Новый Структура("ТребуетсяПодпись", ПризнакПодписи);
					ВременнаяТаблица = ДокументыСШифрованием.Скопировать(Отбор);
					МассивЭД = ВременнаяТаблица.ВыгрузитьКолонку("СсылкаНаЭД");
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКОтправке, МассивЭД, Истина);
				СтруктураКОтправке.Вставить(Элемент.Ключ, МассивКОтправке);
			КонецЦикла;
		КонецЕсли;
		СтруктураКОтправке.Вставить("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке);
		СтруктураВозврата.Вставить("КолОтправленных", Отправлено);
		СтруктураВозврата.Вставить("КолПодготовленных", Подготовлено);
		СтруктураВозврата.Вставить("СтруктураКОтправке", СтруктураКОтправке);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		
		Если ТипЗнч(ЭД) = Тип("Массив") И ЭД.Количество() > 0 Тогда
			Если ТипЗнч(ЭД[0]) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
				ВладельцыДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЭД,"ВладелецФайла");
				ДокументыУчета = Новый Массив;
				Для Каждого КлючЗначение Из ВладельцыДокументов Цикл
					
					ОснованияРезультат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КлючЗначение.Значение,"ДокументыОснования");
					Если ОснованияРезультат.Пустой() Тогда
						Продолжить;
					КонецЕсли;
					
					ОснованияВыборка = ОснованияРезультат.Выбрать();
					ОснованияВыборка.Следующий();
					
					ДокументыУчета.Добавить(ОснованияВыборка.ДокументОснование);
					
				КонецЦикла;
				
				СтруктураВозврата.Вставить("ДокументыУчета", ДокументыУчета);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ДопПараметры)= Тип("Структура") Тогда
			ДопПараметры.Вставить("ЕстьОбработанныеЭД",
				(КолНовыхЭД + КолУтвержденныхЭД + КолПодписанных + Подготовлено + Отправлено) > 0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции


// Отправка и получение электронных документов.
//
// Параметры:
//  СоответствиеПрофилейИПараметровСертификатов - Соответствие - данные профилей и параметров сертификатов.
//  ПовторноеПолучение - Булево - если Истина, то производится только получение данных.
// 
// Возвращаемое значение:
//  Структура - данные отправки и получения документов.
//
Функция ОтправитьИПолучитьДокументы(СоответствиеПрофилейИПараметровСертификатов, ПовторноеПолучение = Ложь) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КолОтправленныхПакетов", 0);
	Если НЕ ПовторноеПолучение Тогда
		КолОтправленныхПакетов = ОбменСКонтрагентамиСлужебный.ОтправкаСформированныхЭД(СоответствиеПрофилейИПараметровСертификатов);
		СтруктураВозврата.Вставить("КолОтправленныхПакетов", КолОтправленныхПакетов);
	КонецЕсли;
	
	НовыеДокументы = ОбменСКонтрагентамиСлужебный.ПолучитьНовыеЭД(СоответствиеПрофилейИПараметровСертификатов,
		ПовторноеПолучение);
	
	ДополнитьПакетамиКРаспаковке(НовыеДокументы.МассивПакетовЭД);
	СтруктураВозврата.Вставить("НовыеДокументы", НовыеДокументы);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам.
// 
// Параметры:
//  ТипОбъекта - Строка - идентификатор типа объекта, который необходимо найти.
//  ИДОбъекта - Строка - идентификатор объекта заданного типа.
//  ДополнительныеРеквизиты - Структура - набор дополнительных полей объекта для поиска.
//  ИДЭД - Строка - идентификатор электронного документа.
//
// Возвращаемое значение:
//  Ссылка - найденное значение.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта,
							ИдОбъекта = "",
							ДополнительныеРеквизиты = Неопределено,
							ИДЭД = Неопределено) Экспорт
	
	Результат = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ТипОбъекта,
																		 ИдОбъекта,
																		 ДополнительныеРеквизиты,
																		 ИДЭД);

КонецФункции

// Заполняет адрес хранилища с таблицей значений - каталога товаров.
//
// Параметры:
//  АдресВоВременномХранилище - Строка - адрес хранения каталога товаров.
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	ОбменСКонтрагентамиПереопределяемый.ПоместитьКаталогТоваровВоВременноеХранилище(
												АдресВоВременномХранилище,
												ИдентификаторФормы);
	
КонецПроцедуры

// Получает таблицу значений с данными по электронным документам.
//
// Параметры:
//  МассивСсылокНаВладельцев - Массив - ссылки на владельцев электронных документов, данные которых необходимо получить.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица электронных документов.
//
Функция ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|	СостоянияЭД.ДействияСНашейСтороны КАК ДействияСНашейСтороны,
	|	СостоянияЭД.ДействияСоСтороныДругогоУчастника КАК ДействияСоСтороныДругогоУчастника
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями.
//
// Параметры:
//  ДанныеФормы - УправляемаяФорма - данные управляемой формы.
//  ЗначениеВозврата - Строка - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата) Экспорт
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата);
	
КонецПроцедуры

// Возвращает проверку соответствия организаций в профиле, настройках ЭДО и сертификатах.
//
// Параметры:
//  Ссылка - СправочникСсылка.ПрофилиНастроекЭДО, СправочникСсылка.СоглашенияОбИспользованииЭД,
//           СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - проверяемый объект.
//  Организация - СправочникСсылка.Организации - организация для проверки
//                (используется для типа ссылки СертификатыКлючейЭлектроннойПодписиИШифрования).
//
// Возвращаемое значение:
//  Истина - Организации соответствуют;
//  Ложь - Не соответствуют.
//
Функция ПроверитьСоответствиеОрганизаций(Ссылка, Организация = Неопределено) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПрофилиНастроекЭДО") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Профили.Ссылка КАК Профиль,
		|	Профили.Организация КАК ПрофильОрганизация,
		|	Сертификаты.Сертификат КАК Сертификат,
		|	Сертификаты.Сертификат.Организация КАК СертификатОрганизация,
		|	Соглашения.Ссылка КАК Соглашение,
		|	Соглашения.Организация КАК СоглашениеОрганизация,
		|	Соглашения.СостояниеСоглашения КАК СостояниеСоглашения
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК Профили
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
		|		ПО (Сертификаты.Ссылка = Профили.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК Соглашения
		|		ПО (Соглашения.ПрофильНастроекЭДО = Профили.Ссылка)
		|			И (НЕ Соглашения.ПометкаУдаления)
		|			И (Соглашения.СостояниеСоглашения <> ЗНАЧЕНИЕ(Перечисление.СостоянияСоглашенийЭД.Закрыто))
		|ГДЕ
		|	Профили.Ссылка = &Ссылка
		|	И (НЕ Соглашения.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Соглашения.Организация
		|			ИЛИ НЕ Сертификаты.Сертификат.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Сертификаты.Сертификат.Организация)";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = (Запрос.Выполнить().Выбрать().Количество() = 0);
		
		Возврат Результат;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Профили.Ссылка КАК Профиль,
		|	Профили.Организация КАК ПрофильОрганизация,
		|	Сертификаты.Сертификат КАК Сертификат,
		|	Сертификаты.Сертификат.Организация КАК СертификатОрганизация,
		|	Соглашения.Ссылка КАК Соглашение,
		|	Соглашения.Организация КАК СоглашениеОрганизация
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК Профили
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
		|		ПО (Сертификаты.Ссылка = Профили.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК Соглашения
		|		ПО (Соглашения.ПрофильНастроекЭДО = Профили.Ссылка)
		|ГДЕ
		|	Соглашения.Ссылка = &Ссылка
		|	И (НЕ Соглашения.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Соглашения.Организация
		|			ИЛИ НЕ Сертификаты.Сертификат.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Сертификаты.Сертификат.Организация)";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = (Запрос.Выполнить().Выбрать().Количество() = 0);
		
		Возврат Результат;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка = &Ссылка
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Организация <> &Организация";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = (Запрос.Выполнить().Выбрать().Количество() = 0);
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// Возвращает строку Base64, содержащей данные строки в виде двоичных данных файла в формате UTF8 без BOM.
//
// Параметры:
//  СтрокаДанных  - Строка - строка для преобразования в BASE64.
//
// Возвращаемое значение:
//   Строка   - строка в BASE64.
//
Функция СтрокаBase64БезBOM(СтрокаДанных) Экспорт

	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(СтрокаДанных);
	ТекстовыйДокумент.Записать(ВремФайл, КодировкаТекста.UTF8, Символы.ПС);
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	СтрокаФорматBase64 = Сред(СтрокаФорматBase64, 5); // убираем BOM
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ВК, ""); // убираем ВК
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ПС, ""); // убираем ПС
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	Возврат СтрокаФорматBase64;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

// Функция получает данные по сертификатам, разрешенным для использования при подписании ЭД и авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части соглашения об обмене ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена массивом соглашений, по которым
// требуется определить параметры сертификатов.
//
// Параметры:
//  ПрофилиНастроекЭДО - Массив - ссылки на профили настроек ЭДО, по которым требуется определить сертификаты;
//  ЭлектронныеДокументы - Массив - содержит ссылки на электронные документы;
//  СтМассивовСтруктурСертификатов - Структура - может содержать 2 элемента: МассивСтруктурСертификатовСервер
//    и МассивСтруктурСертификатовКлиент, соответственно массив структур сертификатов личного хранилища с сервера и
//    то же самое с клиента;
//  ПараметрыАутентификации - Структура - параметры аутентификации на сервисе ЭДО.
//
// Возвращаемое значение:
//  Структура - пустая, либо содержит 3 элемента:
//    СоотвСоглашенийИСертификатовПодписи;
//    СоотвСоглашенийИСертификатовАвторизации;
//    СоотвСертификатовИИхСтруктур.
//
Функция НастройкиЭДОИСертификатыАвторизации(Знач ПрофилиНастроекЭДО, Знач ЭлектронныеДокументы = Неопределено,
	Знач СтМассивовСтруктурСертификатов = Неопределено,	ПараметрыАутентификации = Неопределено) Экспорт
	
	СтруктураСоответствий = Новый Структура;
	
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	// Если используется отложенная отправка, то искать сертификаты авторизации не надо.
	МассивОтпечатковКлиент = Новый Массив;
	МассивОтпечатковСервер = Новый Массив;
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	Если ТипЗнч(СтМассивовСтруктурСертификатов) = Тип("Структура") Тогда
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковСервер", МассивОтпечатковСервер);
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		Если ВыполнятьКриптооперацииНаСервере И НЕ ЗначениеЗаполнено(МассивОтпечатковСервер) И ИспользоватьЭП Тогда
			Попытка
				МассивОтпечатковСервер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
			Исключение
				ВидОперации = НСтр("ru = 'Получение данных сертификатов'");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, 2);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	МассивОтпечатковСервер = ?(ЗначениеЗаполнено(МассивОтпечатковСервер), МассивОтпечатковСервер, Новый Массив);
	МассивОтпечатковКлиент = ?(ЗначениеЗаполнено(МассивОтпечатковКлиент), МассивОтпечатковКлиент, Новый Массив);
	
	МассивОтпечатковДляАвторизации = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковКлиент);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковСервер);
	
	Если (МассивОтпечатковСервер <> Неопределено И МассивОтпечатковСервер.Количество())
		Или (МассивОтпечатковКлиент <> Неопределено И МассивОтпечатковКлиент.Количество()) Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСертификатов.Сертификат,
		|	ТаблицаСертификатов.ПарольПользователя
		|ПОМЕСТИТЬ ТаблицаСертификатов
		|ИЗ
		|	&ТаблицаСертификатов КАК ТаблицаСертификатов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
		|	ПрофилиНастроекЭДО.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ПрофилиНастроекЭДО.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	Сертификаты.Ссылка КАК СертификатПодписи,
		|	ТаблицаСертификатов.ПарольПользователя КАК ПарольПользователя,
		|	ВЫБОР
		|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗапомнитьПарольКСертификату,
		|	ВЫБОР
		|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПарольПолучен,
		|	Сертификаты.Отпечаток,
		|	Сертификаты.Отозван,
		|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
		|	Сертификаты.ПользовательОповещенОСрокеДействия КАК ОповещенОСрокеДействия,
		|	Сертификаты.ДействителенДо КАК ДатаОкончания
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификаты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК ТаблицаСертификатов
		|				ПО (ТаблицаСертификатов.Сертификат = Сертификаты.Ссылка)
		|			ПО ПрофилиНастроекЭДОСертификаты.Сертификат = Сертификаты.Ссылка
		|		ПО (ПрофилиНастроекЭДОСертификаты.Ссылка = ПрофилиНастроекЭДО.Ссылка)
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И Сертификаты.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)
		|	И Сертификаты.Отпечаток В(&МассивОтпечатковДляАвторизации)
		|	И ПрофилиНастроекЭДО.Ссылка.СпособОбменаЭД В (ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском), ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО))
		|	И &ИспользоватьЭП
		|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления
		|	И ПрофилиНастроекЭДО.Ссылка В(&МассивПрофилейНастроекЭДО)
		|	И ВЫБОР
		|			КОГДА Сертификаты.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Сертификаты.ДействителенДо, ДЕНЬ) > 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПарольПолучен УБЫВ";
		
		Запрос.УстановитьПараметр("МассивОтпечатковДляАвторизации", МассивОтпечатковДляАвторизации);
		Запрос.УстановитьПараметр("ПустойПользователь",		Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ИспользоватьЭП",			ИспользоватьЭП);
		Запрос.УстановитьПараметр("ТекущаяДата",			ТекущаяДатаСеанса());
		СертификатыСПаролями = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(,МассивОтпечатковДляАвторизации);
		ТЗ_Сертификатов = Новый ТаблицаЗначений;
		ТЗ_Сертификатов.Колонки.Добавить("Сертификат",
			Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
		ТЗ_Сертификатов.Колонки.Добавить("ПарольПользователя", Новый ОписаниеТипов("Строка"));
		Для Каждого Элемент Из СертификатыСПаролями Цикл
			НоваяСтрока = ТЗ_Сертификатов.Добавить();
			НоваяСтрока.Сертификат = Элемент.Ключ;
			НоваяСтрока.ПарольПользователя = Элемент.Значение;
		КонецЦикла;
		Запрос.УстановитьПараметр("ТаблицаСертификатов", ТЗ_Сертификатов);
		Если НЕ ЗначениеЗаполнено(ПрофилиНастроекЭДО) Тогда
			ПрофилиНастроекЭДО = Новый Массив;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлектронныеДокументы) И ПрофилиНастроекЭДО.Количество() = 0 Тогда
			ПрофилиНастроекЭДО = Новый Массив;
			Если ТипЗнч(ЭлектронныеДокументы) = Тип("Массив") И ЭлектронныеДокументы.Количество() > 0 Тогда

				СоотвЭДИСтруктурыВладельцев = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ЭлектронныеДокументы, "ВладелецФайла");
				МассивВладельцевЭД = Новый Массив;
				Для Каждого ЭлементСоответствия Из СоотвЭДИСтруктурыВладельцев Цикл
					МассивВладельцевЭД.Добавить(ЭлементСоответствия.Значение.ВладелецФайла);
				КонецЦикла;
				СоотвЭДИСтруктурыСоглашений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивВладельцевЭД, "ПрофильНастроекЭДО");
				Для Каждого ЭДВладелец Из СоотвЭДИСтруктурыСоглашений Цикл
					ПрофильНастроекЭДО = ЭДВладелец.Значение.ПрофильНастроекЭДО;
					Если ПрофилиНастроекЭДО.Найти(ПрофильНастроекЭДО) = Неопределено Тогда
						ПрофилиНастроекЭДО.Добавить(ПрофильНастроекЭДО);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если ПрофилиНастроекЭДО.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("МассивПрофилейНастроекЭДО", ПрофилиНастроекЭДО);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ПрофилиНастроекЭДО.Ссылка В(&МассивПрофилейНастроекЭДО)", "");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		СоотвСоглашенийИМассиваСертификатовАвторизации = Новый Соответствие;
		СоотвСертификатовИИхСтруктур = Новый Соответствие;
		
		// Для авторизации, помимо сертификатов, попытаемся получить маркеры, по возможности расшифрованные.
		
		МенеджерКриптографииДоступенНаСервере = Ложь;
		Если ВыполнятьКриптооперацииНаСервере Тогда
			Попытка
				МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Ложь);
				МенеджерКриптографииДоступенНаСервере = Истина;
			Исключение
				МенеджерКриптографииДоступенНаСервере = Ложь;
			КонецПопытки;
		КонецЕсли;
	
		ТекущийПрофильНастроекЭДО = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ТекущийПрофильНастроекЭДО <> Выборка.ПрофильНастроекЭДО Тогда
				МассивСертификатов = Новый Массив;
				ТекущийПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
			КонецЕсли;
			МассивСертификатов.Добавить(Выборка.СертификатПодписи);
			
			Если СоотвСоглашенийИМассиваСертификатовАвторизации.Получить(ТекущийПрофильНастроекЭДО) = Неопределено Тогда
				СоотвСоглашенийИМассиваСертификатовАвторизации.Вставить(ТекущийПрофильНастроекЭДО, МассивСертификатов);
			КонецЕсли;
			СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольПользователя, Отпечаток, Отозван,
													|ДанныеСертификата, ОповещенОСрокеДействия, ДатаОкончания, ЗапомнитьПарольКСертификату");
			ЗаполнитьЗначенияСвойств(СтруктураСертификата, Выборка);
		
			// Заполняем данные для авторизации.
			Если ТипЗнч(СтруктураСертификата.ДанныеСертификата) = Тип("ХранилищеЗначения") Тогда
				ПарольПолучен = Выборка.ПарольПолучен;
				СтруктураСертификата.Вставить("ПарольПользователя", Выборка.ПарольПользователя);
				СтруктураСертификата.Вставить("ПарольПолучен", ПарольПолучен);
				Расшифровывать = (ПарольПолучен И МенеджерКриптографииДоступенНаСервере);
				
				Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Выборка.СпособОбменаЭД);
				СтруктураПараметровЗапросаМаркера = СтруктураСертификата;
				СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", Выборка.СпособОбменаЭД);
				СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", Выборка.ИдентификаторОрганизации);
					
				Маркер = ОбменСКонтрагентамиВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, Расшифровывать, ПараметрыАутентификации);
				
				Если ТипЗнч(Маркер) = Тип("ДвоичныеДанные") Тогда
					Если Расшифровывать Тогда
						СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
					Иначе
						СтруктураСертификата.Вставить("МаркерЗашифрованный", Маркер);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СоотвСертификатовИИхСтруктур.Вставить(Строка(Выборка.СертификатПодписи.УникальныйИдентификатор()) + "_" + Выборка.ИдентификаторОрганизации,
				СтруктураСертификата);
			
		КонецЦикла;
		
		СтруктураСоответствий.Вставить("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации);
		СтруктураСоответствий.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	КонецЕсли;
	
	Возврат СтруктураСоответствий;
	
КонецФункции

// Функция проверяет наличие в структуре расшифрованного маркера, если его нет, то пытается расшифровать
// зашифрованный маркер, если расшифровка прошла успешно, то расшифрованный маркер помещается в структуру.
//
// Параметры:
//  СтруктураСертификата - структура - содержит сертификат ЭП и его параметры, включая расшифрованный
//    или зашифрованный маркер.
//
// Возвращаемое значение:
//  Булево - Истина - в структуре есть расшифрованный маркер, иначе - Ложь.
//
Функция РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(СтруктураСертификата) Экспорт
	
	Расшифрован = Ложь;
	
	Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный = Неопределено;
		МенеджерКриптографии = Неопределено;
		Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			Попытка
				МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Ложь);
			Исключение
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
			Расшифрован = Истина;
		ИначеЕсли СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный)
			И ЗначениеЗаполнено(МаркерЗашифрованный) И МенеджерКриптографии <> Неопределено Тогда
			Попытка
				СтруктураСертификата.Свойство("ПарольПользователя", МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
				Маркер = МенеджерКриптографии.Расшифровать(МаркерЗашифрованный);
				Если ЗначениеЗаполнено(Маркер) Тогда
					Расшифрован = Истина;
					СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
				КонецЕсли;
			Исключение
				Операция = НСтр("ru = 'Расшифровка маркера'");
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					Операция, ТекстОшибки, ТекстСообщения, 2);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Расшифрован;
	
КонецФункции

// Возвращает соответствие с данными о доступных сертификатах.
//
// Параметры:
//   МассивОтпечатковСертификатов - Массив - массив структур сертификатов, установленных в личном хранилище 
//                                           на компьютере пользователя.
//   НастройкаЭДО - СправочникСсылка.СоглашенияОбОбменеЭД - будут выбраны сертификаты,
//                  зарегистрированные в указанном соглашении и доступные текущему пользователю,
//                - СправочникСсылка.ПрофилиНастроекЭДО - будут выбраны сертификаты,
//                  зарегистрированные в указанном профиле и доступные текущему пользователю,
//                - Неопределено - будут выбраны сертификаты доступные текущему пользователю.
//
// Возвращаемое значение:
//  Соответствие - доступные сертификаты:
//    * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ключ соответствия.
//    * Значение - Структура - данные сертификата.
//
Функция СоответствиеДоступныхСертификатовИПараметров(Знач МассивОтпечатковСертификатов, Знач НастройкаЭДО = Неопределено) Экспорт
	
	Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		МассивОтпечатковСервера = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, МассивОтпечатковСервера);
	КонецЕсли;
	МассивСтруктур = ОбменСКонтрагентамиСлужебный.МассивСтруктурДоступныхДляПодписиСертификатов(
														МассивОтпечатковСертификатов, НастройкаЭДО);
	
	СоответствиеСертификатовИПаролей = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(,МассивОтпечатковСертификатов);
	ДанныеВозврата = Новый Соответствие;
	Если ТипЗнч(МассивСтруктур) = Тип("Массив") Тогда
		Для Каждого Элемент Из МассивСтруктур Цикл
			Если ЗначениеЗаполнено(СоответствиеСертификатовИПаролей) Тогда
				ПарольКСертификату = СоответствиеСертификатовИПаролей.Получить(Элемент.Сертификат);
				Если ПарольКСертификату <> Неопределено Тогда
					Элемент.ПарольПользователя = ПарольКСертификату;
					Элемент.ПарольПолучен = Истина;
				КонецЕсли;
			КонецЕсли;
			ДанныеВозврата.Вставить(Элемент.Сертификат, Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Возвращает свойства сертификата, необходимые для открытия формы сертификата.
//
// Параметры:
//  АдресДанныхСертификата - Строка - адрес во временном хранилище, где находятся двоичные данные сертификата.
//
// Возвращаемое значение:
//  Структура - описание полей см. ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат).
//
Функция СвойстваСертификата(АдресДанныхСертификата) Экспорт
	
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(АдресДанныхСертификата);
	
	ВыбранныйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Если ВыбранныйСертификат=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сертификат не найден'"));
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат);
	
	Возврат СтруктураСертификата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// _БСП_ПрисоединенныеФайлыСлужебныйВызовСервера

// Получает все подписи файла.
// Подробнее - см. описание ЭлектроннаяПодпись.ПолучитьВсеПодписи().
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на объект.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор.
//
// Возвращаемое значение:
//  Массив - массив структур подписей.
//
Функция ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор) Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебный.ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

// Метод проверяет наличие в регистре сведений записей о новых ЭД.
//
// Возвращаемое значение:
//  Булево - признак наличия в сервисе новых электронных документов.
//
Функция ЕстьСобытияЭДО() Экспорт
	
	ЕстьНовыеСобытия = Ложь;
	
	Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОповещатьОСобытияхЭДО() Тогда
		Возврат ЕстьНовыеСобытия;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК ЕстьНовыеЭД
	|ИЗ
	|	РегистрСведений.НовыеДокументыВСервисеЭДО КАК Т
	|ГДЕ
	|	Т.ЕстьНовыеЭД = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ЕстьНовыеСобытия = Истина;
	КонецЕсли;
	
	Возврат ЕстьНовыеСобытия;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Только для внутреннего использования
Функция РеквизитыНастройкиЭДО(Знач НастройкаЭДО) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаЭДО,
		"ИдентификаторОрганизации, ЭтоИнтеркампани, СпособОбменаЭД,
		|СтатусСоглашения, СертификатКонтрагентаДляШифрования, ПометкаУдаления");
	
КонецФункции

// Возвращает название и версию конфигурации.
// 
// Возвращаемое значение:
//  Строка - название и версия конфигурации.
//
Функция ПараметрыЕстьИдея() Экспорт

	ШаблонКонфигурации = НСтр("ru = '%1 (%2)'");
	Конфигурация = СтрШаблон(ШаблонКонфигурации, Метаданные.Синоним, Метаданные.Версия);
	
	СтрокаВозврата = "?conf=" + КодироватьСтроку(Конфигурация, СпособКодированияСтроки.КодировкаURL);
	
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	
	Если ДанныеАутентификации <> Неопределено Тогда
		СтрокаВозврата = СтрокаВозврата + "&login="
			+ КодироватьСтроку(ДанныеАутентификации.Логин, СпособКодированияСтроки.КодировкаURL);
	КонецЕсли;
	
	Возврат СтрокаВозврата;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов.

Функция ОпределитьТипДанныхПоКодуТранзакции(КодТранзакции)
	
	// Виды входящих ЭД и соответствующие коды транзакций:
	// ЭД       MainDocument
	// Подпись  MainDocumentResign
	// ЭД(ЭСФ)  Invoice
	// ПДПЭСФ   PostDateConfirmation
	// ИПЭСФ    ReceiveNotice
	// УУЭСФ    CorrectionNotice
	// ИПУУЭСФ  CorrectionNoticeReceiveNotice
	// ПДОЭСФ   SendConfirmation
	// ПДОИПЭСФ ReceiveNoticePostDateConfirmation
	// ПОА      CancellationOffer.
	
	ВозвращаемоеЗначение = "СлужебныйЭД";
	Если КодТранзакции = "MainDocument"
		Или КодТранзакции = "Invoice" 
		Или КодТранзакции = "CustomerInformation"
		Или КодТранзакции = "VendorTitle" 
		Или КодТранзакции = "CustomerTitle" Тогда
		
		ВозвращаемоеЗначение = "ЭД";
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СформироватьСтруктуруФайлаЭД()
	
	СтруктураФайлаЭД = Новый Структура();
	СтруктураФайлаЭД.Вставить("ВладелецЭД");
	СтруктураФайлаЭД.Вставить("Контрагент");
	СтруктураФайлаЭД.Вставить("НаправлениеЭД");
	
	СтруктураФайлаЭД.Вставить("СоглашениеЭД");
	СтруктураФайлаЭД.Вставить("НомерЭД");
	СтруктураФайлаЭД.Вставить("НомерВерсииЭД");
	СтруктураФайлаЭД.Вставить("ТипЭлементаВерсииЭД");
	
	СтруктураФайлаЭД.Вставить("СтатусЭДВладельца");
	СтруктураФайлаЭД.Вставить("ОписаниеОшибки");
	СтруктураФайлаЭД.Вставить("ТекстУточнения");
	СтруктураФайлаЭД.Вставить("ДополнительныеДанные");
	
	// Обязательные для заполнения параметры.
	СтруктураФайлаЭД.Вставить("ОбязательныеПараметры","ВладелецЭД, НаправлениеЭД, ТипЭлементаВерсииЭД");
	                                                                                                    
	Возврат СтруктураФайлаЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями

Процедура УдалитьСтаруюВерсиюЭД(ЗаписьНабора)
	
	СтруктураВерсии =  ОбменСКонтрагентамиСлужебный.ПараметрыВерсииЭлектронногоДокумента(ЗаписьНабора.СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДокумент)
		И ОбменСКонтрагентамиСлужебный.ВозможноУдалениеЭД(СтруктураВерсии.СостояниеВерсииЭД) Тогда
		
		ДокументОбъект = СтруктураВерсии.СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
		
		// Удалим подчиненные электронные доп. файлы.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
		Запрос.УстановитьПараметр("ВладелецФайла", СтруктураВерсии.СсылкаНаДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеВерсииЭД(СсылкаНаВладельца)
	
	ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	СтруктураВерсииЭД = ОбменСКонтрагентамиСлужебный.ДанныеСостоянияЭД(СсылкаНаВладельца);
	
	Если СтруктураВерсииЭД.Свойство("СостояниеВерсииЭД") Тогда
		
		Комментарий = Неопределено;
		ДобавитьПричинуЗакрытия = (СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
		
		Если СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен Тогда
			СостояниеВерсии = НСтр("ru='ЭДО завершен'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
			СостояниеВерсии = НСтр("ru='ЭДО завершен с исправлением'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Аннулирован Тогда
			СостояниеВерсии = НСтр("ru='ЭДО аннулирован'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
			СостояниеВерсии = НСтр("ru='ЭДО закрыт принудительно'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен Тогда
			СостояниеВерсии = НСтр("ru='ЭДО закрыт с отклонением'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован 
			Или СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен Тогда
			СостояниеВерсии = НСтр("ru='ЭДО не начат'");
		Иначе
			СостояниеВерсии = Строка(СтруктураВерсииЭД.СостояниеВерсииЭД);
		КонецЕсли;
		
		Если ДобавитьПричинуЗакрытия Тогда
			СтруктураВерсииЭД.Свойство("КомментарийРС", Комментарий);
			Причина = СтрЗаменить(НСтр("ru = ', причина: %1'"), "%1", ?(ЗначениеЗаполнено(Комментарий), Комментарий, НСтр("ru ='не указана'")));
			ВозвращаемоеЗначение = СостояниеВерсии + Причина;
		Иначе
			ВозвращаемоеЗначение = СостояниеВерсии;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСводногоСостояния = "";
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СсылкаНаВладельца);
	ТаблицаДанных = ПолучитьДанныеЭДПоВладельцам(МассивСсылок);

	Если ТаблицаДанных.Количество() > 0 Тогда
		Строка = ТаблицаДанных[0];
		
		ТекстСНашейСтороны = "";
		ТекстСоСтороныДругогоУчастника = "";
		
		Если Строка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
			ТекстСводногоСостояния = НСтр("ru = 'ЭДО закрыт принудительно'");
		Иначе
			Если ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
				И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
				
				ТекстСНашейСтороны = НСтр("ru = 'с нашей стороны'");
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
				И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
				
				ТекстСоСтороныДругогоУчастника = НСтр("ru = 'со стороны других участников'");
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстСНашейСтороны) 
				Или ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника) Тогда
				
				ТекстСводногоСостояния = НСтр("ru = 'Требуются действия'")+ " " + ТекстСНашейСтороны
					+ ?(ЗначениеЗаполнено(ТекстСНашейСтороны) И ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника), " и ", "")
					+ ТекстСоСтороныДругогоУчастника;
			ИначеЕсли ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
				И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
				И ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
				И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено Тогда
				
				Если Строка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен Тогда
					ТекстСводногоСостояния = НСтр("ru = 'ЭДО завершен'");
				ИначеЕсли Строка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
					ТекстСводногоСостояния = НСтр("ru = 'ЭДО завершен с исправлением'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСводногоСостояния;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов 

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
//
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументПолностьюПодписан(СсылкаНаФайлЭД)
	
	ФлагПодписанПолностью = Истина;
	
	Если СсылкаНаФайлЭД.ВладелецФайла.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда  
		Возврат ФлагПодписанПолностью;
	КонецЕсли;
	
	Если СсылкаНаФайлЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ТЗ = СсылкаНаФайлЭД.ЭлектронныеПодписи.Выгрузить(, "Отпечаток");
		ТЗ.Свернуть("Отпечаток");
		ФлагПодписанПолностью = ТЗ.Количество() > 1;
	Иначе
		// Массив отпечатков всех установленных ЭП на ЭД
		МассивОтпечатковСертификатов = СсылкаНаФайлЭД.ЭлектронныеПодписи.ВыгрузитьКолонку("Отпечаток");
		
		ЭлектронныйДокумент = СсылкаНаФайлЭД.ВладелецФайла;
		
		Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			ИмяДокумента = "ЭлектронныйДокументВходящий";	
		Иначе
			ИмяДокумента = "ЭлектронныйДокументИсходящий";
		КонецЕсли;
		
		// Выберем все действующие сертификаты по тек.организации и тек.виду ЭД,
		// совпадающие с сертификатами установленных ЭП.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК СертификатЭП
		|ИЗ
		|	РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
		|			ИЗ
		|				Документ." + ИмяДокумента + " КАК ЭДПрисоединенныеФайлы
		|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|					ПО ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|			ГДЕ
		|				ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				СоглашенияЭДСертификаты.Сертификат
		|			ИЗ
		|				Документ." + ИмяДокумента + " КАК ЭДПрисоединенныеФайлы
		|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|					ПО ЭДПрисоединенныеФайлы.НастройкаЭДО = СоглашенияЭДСертификаты.Ссылка
		|			ГДЕ
		|				ЭДПрисоединенныеФайлы.Ссылка = &Ссылка) КАК СертификатыИзНастроекИПрофилей
		|			ПО СертификатыИзНастроекИПрофилей.Сертификат = Сертификаты.Ссылка
		|		ПО ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
		|ГДЕ
		|	ВидыЭДЭП.ВидЭД = &ВидДокумента
		|	И Сертификаты.Отпечаток В(&МассивОтпечатковСертификатов)
		|	И НЕ Сертификаты.Отозван
		|	И НЕ Сертификаты.ПометкаУдаления";
		Запрос.УстановитьПараметр("МассивОтпечатковСертификатов", МассивОтпечатковСертификатов);
		Запрос.УстановитьПараметр("Ссылка",                       ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("ВидДокумента",                 ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,"ВидЭД"));
		
		ФлагПодписанПолностью = НЕ Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	ОбменСКонтрагентамиПереопределяемый.ЭлектронныйДокументПолностьюПодписан(СсылкаНаФайлЭД, ФлагПодписанПолностью);
	
	Возврат ФлагПодписанПолностью;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через электронную почту

Функция ОтправитьЭлектронноеПисьмо(ПодготовленныеДокументы, АдресКаталогаСВложениями)
	
	СоответствиеВложений = СформироватьСоответствиеВложений(АдресКаталогаСВложениями);
	Результат = ПередатьПисьмоСВложениями(ПодготовленныеДокументы, СоответствиеВложений);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаСВложениями);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСоответствиеВложений(КаталогВложений, ТолькоПодписи = Ложь)
	
	СписокДоступныхРасширений = СформироватьСписокРасширенийСертификатов();
	СоответствиеВозврата = Новый Соответствие;
	СписокВложений = НайтиФайлы(КаталогВложений, "*");
	Для Каждого ФайлВложений Из СписокВложений Цикл
		Если ТолькоПодписи И СтрНайти(ФайлВложений.Расширение, СписокДоступныхРасширений) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФайлВложений.ЭтоФайл() Тогда
			СоответствиеВозврата.Вставить(ФайлВложений.Имя, Новый ДвоичныеДанные(ФайлВложений.ПолноеИмя));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Отправляет письмо с вложениями по пакету ЭД.
//
// Параметры:
//  Конверт - Ссылка на документ "ПакетЭД" - подготовленный к отправке пакет электронных документов,
//  СоответствиеВложений - Соответствие, список вложенных файлов в пакет электронных документов.
//
Функция ПередатьПисьмоСВложениями(ПакетЭД, СоответствиеВложений)
	
	РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							ПакетЭД,
							"Отправитель, Получатель, АдресРесурсаКонтрагента, АдресРесурсаОрганизации, ПрофильНастроекЭДО");
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(РеквизитыПакетаЭД.АдресРесурсаОрганизации, "Пароль");
	
	Получатель  = РеквизитыПакетаЭД.Получатель;
	Отправитель = РеквизитыПакетаЭД.Отправитель;
	
	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить("Кому",     РеквизитыПакетаЭД.АдресРесурсаКонтрагента);
	ПараметрыОтправки.Вставить("Тема",     СформироватьТемуПисьма(Отправитель, Получатель));
	ПараметрыОтправки.Вставить("Тело",     );
	ПараметрыОтправки.Вставить("Вложения", СоответствиеВложений);
	ПараметрыОтправки.Вставить("Пароль",   Пароль);
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(РеквизитыПакетаЭД.АдресРесурсаОрганизации, ПараметрыОтправки);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Текст = НСтр("ru = 'Ошибка при отправке сообщения на сервер электронной почты по профилю настроек ЭДО %1.
						|%2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	Текст,
																	РеквизитыПакетаЭД.ПрофильНастроекЭДО,
																	ТекстОшибки);
		
		ШаблонСообщения = НСтр("ru = 'Ошибка при отправке эл.документов по профилю настроек ЭДО: %1, способ обмена: %2.'"); 
								

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								РеквизитыПакетаЭД.ПрофильНастроекЭДО,
								Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		ВидОперации = НСтр("ru = 'Отправка эл.документов'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
							ВидОперации,
							ТекстОшибки,
							ТекстСообщения);
 		Возврат 0;
	КонецПопытки;
	
	Возврат 1;
	
КонецФункции

Функция СформироватьТемуПисьма(Отправитель, Получатель)
	
	Возврат НСтр("ru = 'Обмен эл.документами:'")+ " " + Отправитель + ?(ЗначениеЗаполнено(Получатель), " -> " + Получатель, "");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Устанавливает признак того, что электронный документ был утвержден.
//
// Параметры:
//  ПрисоединенныйФайл - ссылка на электронный документ, который необходимо обработать.
//  НовыйЭД - ссылка на электронный документ, если при утверждении был создан новый электронный документ.
//
Процедура УстановитьПризнакУтвержден(ПрисоединенныйФайл, НовыйЭД, Отказ)
	
	// Проверим, все ли необходимые условия выполнены
	Если ОбменСКонтрагентамиПереопределяемый.ЭлектронныйДокументГотовКУтверждению(ПрисоединенныйФайл) Тогда
		
		НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
																Перечисления.СтатусыЭД.Утвержден,
																ПрисоединенныйФайл);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
		СтруктураПараметров.Вставить("Изменил",  Пользователи.АвторизованныйПользователь());
		
		ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
		
		ОбменСКонтрагентамиПереопределяемый.НазначенСтатусУтвержден(ПрисоединенныйФайл);
		
	КонецЕсли;
	
	Если ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий  
		И НЕ ЭтоСлужебныйДокумент(ПрисоединенныйФайл) Тогда
		
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл.ВладелецФайла,"ВидЭД, ТипЭлементаВерсииЭД, ТребуетсяПодтверждение");
		
		Если РеквизитыЭД.ТребуетсяПодтверждение Тогда
		
			Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				Или (РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД)
				Или (РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
					И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД) Тогда
				
				Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
					ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
				ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
					ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
				ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
					ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
				КонецЕсли;
				
				ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ВладелецФайла");
				Если ОпределитьДействующуюНастройкуЭДО(ВладелецФайла,, РеквизитыЭД.ВидЭД, Истина) Тогда
					
					Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
						И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
						
						НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателя(ПрисоединенныйФайл);
					ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
						И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
						
						НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателяУКД(ПрисоединенныйФайл);
					ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
						Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
							НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателя(ПрисоединенныйФайл);
						Иначе
							НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДТорг12Покупатель(ПрисоединенныйФайл);
						КонецЕсли;
					ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
						Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
							НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателя(ПрисоединенныйФайл);
						Иначе
							НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДАкт501Заказчик(ПрисоединенныйФайл);
						КонецЕсли;
					ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
						Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
							НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателяУКД(ПрисоединенныйФайл);
						Иначе
							НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДКорДокументаПолучатель(ПрисоединенныйФайл);
						КонецЕсли;
					КонецЕсли;
					
					Если НовыйЭД = Неопределено Тогда
						Отказ = Истина;
					КонецЕсли;
					
				Иначе
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит удаление из массива объектов для которых запрещено формирование новых ЭД.
//
// Параметры:
//  МассивСсылок  - Массив - массив ссылок.
//
Процедура УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И (СостоянияЭД.ЭлектронныйДокумент.СостояниеЭДО <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
	|			ИЛИ СостоянияЭД.ЭлектронныйДокумент.СостояниеЭДО <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОшибкаПередачи))";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Индекс = МассивСсылок.Найти(Результат.СсылкаНаОбъект);
		МассивСсылок.Удалить(Индекс);
		ШаблонСообщения = НСтр("ru='Для документа %1 уже есть актуальный электронный документ.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;

КонецПроцедуры

// Определяет необходимость выполнения какого-либо действия
// с электронным документом с нашей стороны, либо ожидание действия получателя,
// на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция ОпределитьСводнуюИнформациюПоСтатусуЭД(СсылкаНаФайлЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "СтатусЭД, НаправлениеЭД,
		|ЭлектронныйДокументВладелец, ВладелецФайла, ТипЭлементаВерсииЭД");
	
	СвойстваВладельца = "ВидЭД, ВерсияРегламентаЭДО, НастройкаЭДО, ПрофильНастроекЭДО, ТребуетсяИзвещение, ТребуетсяПодтверждение";
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыФайлаЭД.ВладелецФайла, СвойстваВладельца); 
	
	СтруктураДействий = Новый Структура("СНашейСтороны, СоСтороныДругогоУчастника",
		Перечисления.СводныеСостоянияЭД.ДействийНеТребуется, Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	Если СсылкаНаФайлЭД <> Неопределено Тогда
		
		Если ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
			
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(СсылкаНаФайлЭД);
			МассивПодчиненныхЭД = ПолучитьПодчиненныеЭД(МассивЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   ПараметрыФайлаЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        ПараметрыФайлаЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			СтруктураФлагов.Вставить("ИПОтправлен",      Ложь);
			СтруктураФлагов.Вставить("ИППолучен",        Ложь);
			СтруктураФлагов.Вставить("ИППДОПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
					Или Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
						Или Элемент.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
						СтруктураФлагов.ИПОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИППолучен = Истина;
					КонецЕсли;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИППДОПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					Или НЕ СтруктураФлагов.ЭСФОтправлен 
					Или (СтруктураФлагов.ПДППолучен 
						И НЕ СтруктураФлагов.ИППДПОтправлен) Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
							Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
						И (НЕ СтруктураФлагов.ПДППолучен 
							Или (НЕ СтруктураФлагов.ИПЭСФПолучен И ПараметрыЭД.ТребуетсяИзвещение)
							Или (НЕ СтруктураФлагов.ИППолучен И ПараметрыЭД.ТребуетсяПодтверждение)) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			Иначе
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (СтруктураФлагов.ПДОПолучен И НЕ СтруктураФлагов.ИППДООтправлен)
					Или ((ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
						Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) 
						И (НЕ СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение))
					Или (НЕ СтруктураФлагов.ИПОтправлен И ПараметрыЭД.ТребуетсяПодтверждение)
					Или (СтруктураФлагов.ИППДОПолучен И НЕ СтруктураФлагов.ИППДОИПОтправлен) Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен)
					Или НЕ СтруктураФлагов.ПДОПолучен
					Или (СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение И НЕ СтруктураФлагов.ПДОИППолучен)
					Или (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И НЕ СтруктураФлагов.ИПУУПолучен)
					Или (СтруктураФлагов.ИПОтправлен И ПараметрыЭД.ТребуетсяПодтверждение И НЕ СтруктураФлагов.ИППДОПолучен) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			ИЛИ ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
			ИЛИ ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(СсылкаНаФайлЭД);
			МассивПодчиненныхЭД = ПолучитьПодчиненныеЭД(МассивЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   ПараметрыФайлаЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        ПараметрыФайлаЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					Или НЕ СтруктураФлагов.ЭСФОтправлен 
					Или СтруктураФлагов.ПДППолучен И НЕ СтруктураФлагов.ИППДПОтправлен Тогда
		
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
							Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
					И (Не СтруктураФлагов.ПДППолучен 
						Или (Не СтруктураФлагов.ИПЭСФПолучен И ПараметрыЭД.ТребуетсяИзвещение)) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
			Иначе
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли СтруктураФлагов.ПДОПолучен И Не СтруктураФлагов.ИППДООтправлен
					Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					И (Не СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение)  Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен 
					Или НЕ СтруктураФлагов.ПДОПолучен
					Или СтруктураФлагов.ИПЭСФОтправлен И Не СтруктураФлагов.ПДОИППолучен
					Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И Не СтруктураФлагов.ИПУУПолучен Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
				
				// Для утвержденного входящего счета на оплату действий не требуется.
				Если Не (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					И ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату) Тогда
				
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			
				// Если обмен прямой, и получен ответный ЭД на отправленный ЭД, то больше не требуется действий с нашей стороны.
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					И ЗначениеЗаполнено(ПараметрыФайлаЭД.ЭлектронныйДокументВладелец) Тогда
					
					СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.ПрофильНастроекЭДО, "СпособОбменаЭД");
					Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
						Или СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
						
						СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если (ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И (ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
					Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
					Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
				Или (НЕ ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
					И ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД)) Тогда
				
				СостояниеЭД = Неопределено;
				Если ОбменСКонтрагентамиСлужебный.ЕстьНеОтправленноеПодтверждение(ПараметрыФайлаЭД.ВладелецФайла, СостояниеЭД) Тогда
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ОбменСКонтрагентамиСлужебный.ЕстьНепринятоеПодтверждение(ПараметрыФайлаЭД.ВладелецФайла, СостояниеЭД) Тогда
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				 И (ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
					Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
					Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
				И ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И НЕ ЭтоСлужебныйДокумент(СсылкаНаФайлЭД)
				И ПараметрыЭД.ТребуетсяПодтверждение
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			ИначеЕсли ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется
		И СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется Тогда
		
		СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

// Рекурсивная функция, получает все подчиненные электронные документы с любой глубиной вложенности.
//
// Параметры:
//  МассивЭДВладельцев - массив ссылок на электронные документы владельцы (для текущей итерации - владелец выбираемых ЭД).
//  МассивЭД - массив подчиненных электронных документов (с каждой итерацией увеличивается на количество найденных ЭД).
//             Электронный документ - владелец добавляется в этот массив отдельно (до или после вызова данной процедуры).
//
Функция ПолучитьПодчиненныеЭД(Знач МассивЭДВладельцев, Знач МассивЭД = Неопределено)

	Если МассивЭД = Неопределено Тогда
		МассивЭД = Новый Массив;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ПОМЕСТИТЬ Уровень1
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец В (&МассивЭДВладельцев)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Уровень1.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЭДПрисоединенныеФайлы.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПодчиненныеЭлементы
	|ИЗ
	|	Уровень1 КАК Уровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО Уровень1.Ссылка = ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец";
	
	Запрос.УстановитьПараметр("МассивЭДВладельцев", МассивЭДВладельцев);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПодчиненныхЭД = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивЭД.Добавить(Выборка.Ссылка);
		Если Выборка.ЕстьПодчиненныеЭлементы Тогда
			МассивПодчиненныхЭД.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПодчиненныхЭД.Количество() Тогда
		МассивЭД = ПолучитьПодчиненныеЭД(МассивПодчиненныхЭД, МассивЭД);	
	КонецЕсли;
	
	Возврат МассивЭД;
	
КонецФункции

Функция ОпределитьНаправление(СтруктураФайлаЭД)
	
	Если (СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара)
		И СтруктураФайлаЭД.ПризнакПродавца Тогда
			Возврат Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Возврат Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

Функция МожноОтклонитьЭтотЭД(СсылкаНаФайлЭД, ФормироватьУОУ = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "СтатусЭД, ТипЭлементаВерсииЭД, НаправлениеЭД");
	
	Если ЭДОтклонен(ПараметрыФайлаЭД.СтатусЭД) Тогда
		ВозвращаемоеЗначение = Ложь;
	ИначеЕсли ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
		ВозвращаемоеЗначение = Истина;
		Если ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ФормироватьУОУ = Истина;
		КонецЕсли;
	ИначеЕсли ЭтоСлужебныйДокумент(СсылкаНаФайлЭД) Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		ВозвращаемоеЗначение = Истина;
		
		Запрос = Новый Запрос;

		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
		|		ПО ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
		|			И (ЭД_ПОА.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
		|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
		|			И (ПодчиненныеЭД.ТипЭлементаВерсииЭД В (&ТипыЭДОтветныхТитулов))
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
		|	И ВЫБОР
		|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL 
		|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|				ТОГДА ВЫБОР
		|						КОГДА ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД В (&ВидыЭДПервичныхТитулов)
		|							ТОГДА ВЫБОР
		|									КОГДА ПодчиненныеЭД.Ссылка ЕСТЬ NULL 
		|											ИЛИ ПодчиненныеЭД.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
		|											ИЛИ ПодчиненныеЭД.СтатусЭД В (&СтатусыИсходящихЭДДопускающиеОтклонение)
		|										ТОГДА ИСТИНА
		|									ИНАЧЕ ЛОЖЬ
		|								КОНЕЦ
		|						ИНАЧЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыВходящихЭДДопускающиеОтклонение)
		|					КОНЕЦ
		|			ИНАЧЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыИсходящихЭДДопускающиеОтклонение)
		|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаФайлЭД);
		Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
		СтатусыИсходящихЭДДопускающиеОтклонение = Новый Массив;
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Сформирован);
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
		Запрос.УстановитьПараметр("СтатусыИсходящихЭДДопускающиеОтклонение", СтатусыИсходящихЭДДопускающиеОтклонение);
		СтатусыВходящихЭДДопускающиеОтклонение = Новый Массив;
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Получен);
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
		Запрос.УстановитьПараметр("СтатусыВходящихЭДДопускающиеОтклонение", СтатусыВходящихЭДДопускающиеОтклонение);
		ВидыЭДОтветныхТитулов = Новый Массив;
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
		Запрос.УстановитьПараметр("ТипыЭДОтветныхТитулов", ВидыЭДОтветныхТитулов);
		ВидыЭДПервичныхТитулов = Новый Массив;
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СчетФактура);
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
		Запрос.УстановитьПараметр("ВидыЭДПервичныхТитулов", ВидыЭДПервичныхТитулов);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ВозвращаемоеЗначение = Ложь;
		Иначе
			ФормироватьУОУ = (НЕ ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЭДОтклонен(СтатусЭД) Экспорт
	
	ЭДОтклонен = (СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					Или СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					Или СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи);
	Возврат ЭДОтклонен
	
КонецФункции

Функция ПолучитьСсылкиНаЭДДляПОА(Знач ПервичныйЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ПОА,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.Организация КАК Организация,
		|	ЭДВладелецЭД.ВладелецФайла
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
		|		ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА)
		|	И ЭДВладелецЭД.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПервичныйЭД);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ПОА", Выборка.ПОА);
		СтруктураВозврата.Вставить("Организация", Выборка.Организация);
		СтруктураВозврата.Вставить("ВладелецФайла", Выборка.ВладелецФайла);
	Иначе
		СтруктураВозврата = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция МожноАннулироватьЭтотЭД(Знач СсылкаНаЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВладелецФайла.ВидЭД, СтатусЭД, НаправлениеЭД, ВладелецФайла.ТребуетсяПодтверждение");
	
	МожноАннулировать = ДокументооборотЗавершен(СсылкаНаЭД);
	
	Возврат МожноАннулировать;
	
КонецФункции

// ЭД владелец - первичный ЭД к которому пришла вторая подпись
// для этого ЭД необходимо найти пакет ЭД, из него извлечь доп данные - наименование эл документа на основании которого он был введен
// по наименованию найти ЭДОснования, установить у его владельца статус "Обмен завершен с исправлением".
//
Процедура УстановитьСостояниеЗавершен(ДобавленныйФайл, НаправлениеЭД) Экспорт
	
	Если Не ЭтоДокументКорректировки(ДобавленныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавленныйФайл, "ВладелецФайла");
	
	НомераЭД = ЭД.ИдентификаторыОснованийВладельцаФайла.ВыгрузитьКолонку("ИдентификаторДокументаОснования");
	
	Если НомераЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.НомерЭД В(&НомерЭД)
	|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД))";
	Запрос.УстановитьПараметр("НомерЭД", НомераЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ДокументыОснования = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДокументыОснования.Добавить(Выборка.ДокументОснования);
		
	КонецЦикла;
	
	Если ДокументыОснования.Количество() > 0 Тогда
		
		ОбменСКонтрагентамиВнутренний.УстановитьСостояниеОбменЗавершенСИсправлением(ДокументыОснования);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОтветныйДокумент(СсылкаНаФайлЭД,ЭлектронныйДокумент) 
	
	Результат = Ложь;
	
	Если ЭтоСлужебныйДокумент(СсылкаНаФайлЭД) Тогда
		
		Результат = (СсылкаНаФайлЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			Или СсылкаНаФайлЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			Или СсылкаНаФайлЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
	Иначе
		
		Результат = ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			Или ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Процедура ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД)
	
	Выборка = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
	Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
		ЭлектронныйДокумент = Выборка.ОбъектВладелец;
		СсылкаНаФайлЭД = Выборка.ЭлектронныйДокумент; 
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Если ЭтоОтветныйДокумент(СсылкаНаФайлЭД,ЭлектронныйДокумент) Тогда
				
				Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав 
					И СсылкаНаФайлЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
					Возврат;
				КонецЕсли;
				
				УстановитьСостояниеЗавершен(СсылкаНаФайлЭД, Перечисления.НаправленияЭД.Входящий);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСостояниеЗавершенПоОтклонению(МассивФайловЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.НомерЭД,
	|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД
	|ПОМЕСТИТЬ вт_НомераЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В (&МассивФайловЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования
	|ИЗ
	|	вт_НомераЭД КАК вт_НомераЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО (ЭДПрисоединенныеФайлы.НомерЭД = вт_НомераЭД.НомерЭД)
	|			И (ЭДПрисоединенныеФайлы.НаправлениеЭД = вт_НомераЭД.НаправлениеЭД)
	|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = вт_НомераЭД.ТипЭлементаВерсииЭД)
	|ГДЕ
	|	НЕ ЭДПрисоединенныеФайлы.Ссылка В (&МассивФайловЭД)";
	Запрос.УстановитьПараметр("МассивФайловЭД", МассивФайловЭД);
	
	ВременнаяТаблицаОснований = Запрос.Выполнить().Выгрузить();
	ДокументыОснования = ВременнаяТаблицаОснований.ВыгрузитьКолонку("ДокументОснования");
	
	Если ДокументыОснования.Количество() > 0 Тогда
		
		ОбменСКонтрагентамиВнутренний.УстановитьСостояниеОбменЗавершенСИсправлением(ДокументыОснования);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Процедура определяет, по каким объектам ИБ не надо выполнять действия (утверждение,
// подписание, подготовка к отправке).
//
// Параметры:
//  НастройкиОбъектов - соответствие, содержит ссылки на документы ИБ,
//                     по которым предполагается выполнение каких-либо действий с ЭД.
//  МассивНеОбрабатываемыхОбъектов - массив, возвращает в вызывающую процедуру ссылки на объекты ИБ,
//                                  по которым не надо выполнять никаких действий.
//
Процедура ОпределитьНеОбрабатываемыеОбъекты(НастройкиОбъектов, МассивНеОбрабатываемыхОбъектов)
	
	МассивОтбора = Новый Массив;
	Для Каждого Элемент Из НастройкиОбъектов Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			МассивОтбора.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент.ПрофильНастроекЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД1,
	|	СостоянияЭД.ЭлектронныйДокумент.СтатусЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И СостоянияЭД.СостояниеВерсииЭД В(&СостоянияВерсийЭД)
	|	И ВЫБОР
	|			КОГДА СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка)
	|				ТОГДА СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПодготовленКОтправке)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И &УсловиеСчетФактуры";
	ИмяСчетаФактурыВыданного = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"СчетФактураВыданныйВМетаданных");
		
	СостоянияВерсийЭД = Новый Массив;
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении);
	Запрос.УстановитьПараметр("СостоянияВерсийЭД", СостоянияВерсийЭД);
		
	Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
		
		УсловиеСчетФактуры =
		" ВЫБОР
		|			КОГДА СостоянияЭД.СсылкаНаОбъект ССЫЛКА %1
		|				ТОГДА СостоянияЭД.СостояниеВерсииЭД В (&СостоянияВерсийЭДСФ)
		|		ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		
		СостоянияВерсийЭДСФ = Новый Массив;
		СостоянияВерсийЭДСФ.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении);
		СостоянияВерсийЭДСФ.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
		СостоянияВерсийЭДСФ.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
		СостоянияВерсийЭДСФ.Добавить(Перечисления.СостоянияВерсийЭД.Отклонен);
		Запрос.УстановитьПараметр("СостоянияВерсийЭДСФ", СостоянияВерсийЭДСФ);
		
		УсловиеСчетФактуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(УсловиеСчетФактуры,
			"Документ." + ИмяСчетаФактурыВыданного);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСчетФактуры", УсловиеСчетФактуры);
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСчетФактуры", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОтбора);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивНеОбрабатываемыхОбъектов.Добавить(Результат.ЭлектронныйДокумент);
		ТекстСообщения = НСтр("ru = 'Обработка %1.
				|Не требуется выполнения действий с электронным документом.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Результат.СсылкаНаОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Используется для получения представления ЭД с клиента.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ЭД для которого надо получить представление.
//
// Возвращаемое значение:
//  Строка - представление электронного документа.
//
Функция ПредставлениеЭД(СсылкаНаЭД) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Представление", ОбменСКонтрагентамиСлужебный.ПолучитьПредставлениеЭД(СсылкаНаЭД));
	Структура.Вставить("Значение", СсылкаНаЭД);
	
	Возврат Структура.Представление;
	
КонецФункции

// Используется для получения списка представлений ЭД с клиента.
//
// Параметры:
//  МассивЭД - Массив - СправочникСсылка.ЭДПрисоединенныеФайлы, для которых надо сформировать список представлений.
//
// Возвращаемое значение:
//  СписокЗначений:
//     Значение - СправочникСсылка.ЭДПрисоединенныеФайлы.
//     Представление - Строка - представление электронного документа.
//
Функция СписокПредставленийЭД(МассивЭД) Экспорт
	
	СписокПредставлений = Новый СписокЗначений;
	Для Каждого ЭД Из МассивЭД Цикл
		Представление = ОбменСКонтрагентамиСлужебный.ПолучитьПредставлениеЭД(ЭД);
		СписокПредставлений.Добавить(ЭД, Представление);
	КонецЦикла;
	
	Возврат СписокПредставлений;
	
КонецФункции

// Ищет документы основания ИБ по реквизиту документа ЭД"НомерЭД" документа и заполняет ОснованияИБ.
//
// Параметры:
//  НомераЭД - Массив ИД документов основания,
//             колонка "ИдентификаторДокументаОснования" табличной части "ИдентификаторыОснованийВладельцаФайла" ЭД;
//  НаправлениеЭД - определяет параметры поиска документа (входящий, исходящий);
//  ОснованияИБ - массив в который помещаются документы основания.
//
Процедура НайтиДокументыОснования(НомераЭД, НаправлениеЭД, ОснованияИБ) Экспорт
	
	Запрос = Новый Запрос;
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования
		|ПОМЕСТИТЬ втЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.НомерЭД В(&НомераЭД)
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ))
		|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования КАК ИДОснования
		|ИЗ
		|	втЭД КАК втЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ИдентификаторыОснованийВладельцаФайла КАК ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла
		|		ПО втЭД.ДокументОснования = ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЭД КАК втЭД
		|		ПО ЭлектронныйДокументВходящийДокументыОснования.Ссылка = втЭД.ДокументОснования";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования
		|ПОМЕСТИТЬ втЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.НомерЭД В(&НомераЭД)
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ))
		|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования КАК ИДОснования
		|ИЗ
		|	втЭД КАК втЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ИдентификаторыОснованийВладельцаФайла КАК ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла
		|		ПО втЭД.ДокументОснования = ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование
		|ИЗ
		|	втЭД КАК втЭД
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
		|		ПО втЭД.ДокументОснования = ЭлектронныйДокументИсходящийДокументыОснования.Ссылка";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомераЭД", НомераЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Выборка = МассивРезультатов[2].Выбрать();
		
	Пока Выборка.Следующий() Цикл
		ОснованияИБ.Добавить(Выборка.ДокументОснование);
	КонецЦикла;
	
	Выборка = МассивРезультатов[1].Выбрать();
		
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИДОснования) Тогда
			МассивИД = Новый Массив;
			МассивИД.Добавить(Выборка.ИДОснования);
			
			НайтиДокументыОснования(МассивИД, НаправлениеЭД, ОснованияИБ)
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция ЭтоДокументКорректировки(ДобавленныйФайл)
	
	// Документ, основания которых должны поменять свой статус должен быть вида:
	// ТОРГ12Продавец, ТОРГ12Покупатель или ИзвещениеОПолучении привязанный к с.ф.
	
	Результат = Ложь;
	
	Если ЭтоСлужебныйДокумент(ДобавленныйФайл) Тогда
		
		Если ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			Или ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			Или ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
			Или ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
			
			Результат = Истина;
		ИначеЕсли ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(ДобавленныйФайл.ТипЭлементаВерсииЭД) 
			И ЗначениеЗаполнено(ДобавленныйФайл.ЭлектронныйДокументВладелец) Тогда
			
			ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавленныйФайл.ВладелецФайла,"ВидЭД");
			Результат = (ВидЭД = Перечисления.ВидыЭД.СчетФактура
						Или ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
						Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
						Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
						Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);;
		КонецЕсли;			
	Иначе
		
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавленныйФайл.ВладелецФайла,"ВидЭД");
		Результат = ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец 
			Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			Или ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ДокументооборотЗавершен(СсылкаНаЭД)
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "НаправлениеЭД, ВладелецФайла.ТребуетсяПодтверждение");
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД)
		ИЛИ ЭтоСлужебныйДокумент(СсылкаНаЭД) Тогда
		ВозвращаемоеЗначение = Ложь;
		
	ИначеЕсли СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И Не СвойстваЭД.ВладелецФайлаТребуетсяПодтверждение Тогда
		
		ВозвращаемоеЗначение = Ложь;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
		|	ПодчиненныеЭД.Ссылка КАК ПодчиненныйЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.СтатусЭД,
		|	ПодчиненныеЭД.СтатусЭД КАК СтатусПодчиненногоЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
		|		ПО (ЭД_ПОА.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА))
		|			И ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
		|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
		|			И (ПодчиненныеЭД.ТипЭлементаВерсииЭД В (&ТипыЭДОтветныхТитулов))
		|ГДЕ
		|	НЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовИсключений)
		|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла.ТипЭлементаВерсииЭД В (&СписокТиповИсключений)
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
		|	И ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
		|	И ВЫБОР
		|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL 
		|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭД);
		Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
		
		СписокТиповИсключений = Новый Массив;
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
		Запрос.УстановитьПараметр("СписокТиповИсключений", СписокТиповИсключений);
		
		МассивСтатусовИсключений = Новый Массив;
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Аннулирован);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Отклонен);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ОтклоненПолучателем);
		Запрос.УстановитьПараметр("СписокСтатусовИсключений", МассивСтатусовИсключений);
		
		ВидыЭДОтветныхТитулов = Новый Массив;
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
		Запрос.УстановитьПараметр("ТипыЭДОтветныхТитулов", ВидыЭДОтветныхТитулов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ВозвращаемоеЗначение = Ложь;
		Если Выборка.Следующий() Тогда
			Если Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				Если ЗначениеЗаполнено(Выборка.ПодчиненныйЭД) Тогда
					ОбрабатываемыйЭД = Выборка.ПодчиненныйЭД;
					СтатусЭД = Выборка.СтатусПодчиненногоЭД;
				Иначе
					ОбрабатываемыйЭД = Выборка.ЭД;
					СтатусЭД = Выборка.СтатусЭД;
				КонецЕсли;
			Иначе
				ОбрабатываемыйЭД = Выборка.ЭД;
				СтатусЭД = Выборка.СтатусЭД;
			КонецЕсли;
			НастройкиОбмена = ОбменСКонтрагентамиСлужебный.НастройкиОбменаЭД(ОбрабатываемыйЭД);
			МассивСтатусов = ОбменСКонтрагентамиСлужебный.ВернутьМассивСтатусовЭД(НастройкиОбмена);
			Если МассивСтатусов.ВГраница() >= 0 И СтатусЭД = МассивСтатусов[МассивСтатусов.ВГраница()] Тогда
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

Функция СформироватьСписокРасширенийСертификатов()
	
	СписокРасширений = Новый СписокЗначений;
	СписокРасширений.Добавить(".p7s");
	
	Возврат СписокРасширений;
	
КонецФункции

Функция СформироватьФайлыДляОтправки(Конверт)
	
	ФайлыЭД = ОбменСКонтрагентамиСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	Если НЕ ФайлыЭД = Неопределено Тогда
		Пока ФайлыЭД.Следующий() Цикл
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлыЭД.Ссылка);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанные.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
		КонецЦикла;
	КонецЕсли;
	
	Возврат АдресКаталога;
	
КонецФункции

Процедура ЗаполнитьДокументИБПоЭД(СсылкаНаВладельца, СсылкаНаЭД, ДокЗаполнен =Ложь, СпособОбработки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(ФайлДанныхСсылка) Тогда
		Возврат;
	КонецЕсли;
	ВыборкаДопДанные = ОбменСКонтрагентамиСлужебный.ВыборкаДопДанныеЭД(СсылкаНаЭД);
	Если ВыборкаДопДанные.Следующий() Тогда
		СсылкаНаЭДДопДанных = ВыборкаДопДанные.Ссылка;
		ФайлДопДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭДДопДанных);
		Если НЕ ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	ДокументыУчета = Новый Массив;
	Если СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
		МассивСсылокНаЭД = Новый Массив;
		МассивСсылокНаЭД.Добавить(СсылкаНаЭД.ВладелецФайла);
		СоответствиеВладельцевИЭД = ВладельцыИЭлектронныеДокументы(Неопределено, МассивСсылокНаЭД);
		
		Если СоответствиеВладельцевИЭД.Количество() = 0 Тогда
			ДокументыУчета.Добавить(СсылкаНаВладельца);
		КонецЕсли;
		
		Для каждого ТекущаяСтрока Из СоответствиеВладельцевИЭД Цикл
		
			ДокументыУчета.Добавить(ТекущаяСтрока.Ключ);
		КонецЦикла;
	
	Иначе
		ДокументыУчета.Добавить(СсылкаНаВладельца);
	КонецЕсли;
	СтруктураПараметров.Вставить("ДокументыУчета", ДокументыУчета);
	
	СтруктураПараметров.Вставить("ФайлДанныхСсылка",  ФайлДанныхСсылка);
	СтруктураПараметров.Вставить("НаправлениеЭД",     СсылкаНаЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("ЗаполнитьДокумент", Истина);
	
	Если ФайлДопДанныхСсылка <> Неопределено Тогда
		СтруктураПараметров.Вставить("ФайлДопДанных", ФайлДопДанныхСсылка);
	КонецЕсли;
	
	СтруктураЭД = ОбменСКонтрагентамиВнутренний.ПолучитьДанныеИзФайла(СтруктураПараметров);
		
	Если СтруктураЭД.Загружен Тогда
		НачатьТранзакцию();
		Попытка
			
			РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД.ВладелецФайла, "ВидЭД, НастройкаЭДО");
			
			Если РеквизитыВладельца.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				СтруктураПараметров.Вставить("ВладелецЭД", РеквизитыВладельца.НастройкаЭДО);
			КонецЕсли;
			
			ДокументыУчета = ОбменСКонтрагентамиВнутренний.СохранитьДанныеОбъекта(СтруктураПараметров, СпособОбработки);
			
			Если ЗначениеЗаполнено(ДокументыУчета) Тогда
				Для каждого Строка Из ДокументыУчета Цикл
					ОбменСКонтрагентамиСлужебный.УстановитьСсылкуДляВладельцаВРегистреСостояний(Строка, СсылкаНаЭД.ВладелецФайла);	
				КонецЦикла;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ДокЗаполнен = СтруктураЭД.Загружен;
	
КонецПроцедуры

// Только для внутреннего использования
Функция СоответствиеДанныхПакетов(МассивПакетовЭД) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка КАК ПакетЭД,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.НаправлениеЭД КАК НаправлениеЭД
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.Ссылка В(&МассивПакетовЭД)
	|ИТОГИ ПО
	|	ПакетЭД";
	
	Запрос.УстановитьПараметр("МассивПакетовЭД", МассивПакетовЭД);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПакеты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПакеты.Следующий() Цикл
		ВыборкаЭД = ВыборкаПакеты.Выбрать();
		МассивЭД = Новый Массив;
		Пока ВыборкаЭД.Следующий() Цикл
			СтруктураДанныхФайла = Новый Структура;
			ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ЭлектронныйДокумент", ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ДанныеФайла",         ДанныеФайла);
			СтруктураДанныхФайла.Вставить(
					"ЭтоОтправкаПодтверждения",
					ВыборкаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий);
			ПараметрыШифрования = ОбменСКонтрагентамиСлужебный.АдресаСертификатовШифрования(
																			ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ПараметрыШифрования", ПараметрыШифрования);
			МассивЭД.Добавить(СтруктураДанныхФайла);
		КонецЦикла;
		СоответствиеВозврата.Вставить(ВыборкаПакеты.ПакетЭД, МассивЭД);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов

// Сохраняет результаты проверки ЭП, выполненные на клиенте.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//  МассивРезультатов - Массив - содержит данные установленных подписей.
//
Процедура СохранитьРезультатыПроверкиПодписей(ЭД, МассивРезультатов) Экспорт
	
	Если МассивРезультатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектСправочник = ЭД.ПолучитьОбъект();
	
	Попытка
		ОбъектСправочник.Заблокировать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось заблокировать объект %1
						|%2'");
		
		ВидОперации = НСтр("ru = 'Сохранение результатов проверки подписей'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки);
		Возврат;
	КонецПопытки;
	
	Для Каждого Элемент Из МассивРезультатов Цикл
		СтрокаТЧ = ОбъектСправочник.ЭлектронныеПодписи.Получить(Элемент.НомерСтроки-1);
		СтрокаТЧ.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		СтрокаТЧ.ПодписьВерна = Элемент.Результат;
	КонецЦикла;
	
	Попытка
		ОбъектСправочник.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки
	
КонецПроцедуры

// Подписывает электронные документы определенным сертификатом криптографии.
//
// Параметры:
//  ДобавленныеФайлы      - Массив ссылок на электронные документы, которые необходимо подписать,
//  СертификатПодписи     - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы,
//  ПараметрыСертификата  - Структура, содержит реквизиты сертификата,
//  МассивНеПодписанныхЭД - Массив либо Неопределено, в этой переменной в вызывающую процедуру возвращается массив ЭД,
//                          которые не были подписаны.
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы,
											СертификатПодписи,
											ПараметрыСертификата,
											МассивНеПодписанныхЭД = Неопределено)
											
	Если Не ТипЗнч(ДобавленныеФайлы) = Тип("Массив") Тогда
		ФайлыНаПодпись = Новый Массив;
		ФайлыНаПодпись.Добавить(ДобавленныеФайлы);
	Иначе
		ФайлыНаПодпись = ДобавленныеФайлы;
	КонецЕсли;
	
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
	Если Отказ Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецЕсли;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	КриптоСертификат = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПолучитьСертификатПоОтпечатку(
		ПараметрыСертификата.Отпечаток);
	
	КоличествоПодписанныхЭД = 0;
	
	Если КриптоСертификат <> Неопределено Тогда
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат,
													 РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		Исключение
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("112");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'проверка сертификата на корректность'"),
											  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
											  ТекстСообщения);
			Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
				МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
			КонецЦикла;
			Возврат 0;
		КонецПопытки;
		
		Для Каждого ТекДокумент Из ФайлыНаПодпись Цикл
			
			СтруктураДанныхПодписи = Новый Структура("Сертификат, ПарольПользователя, Комментарий", КриптоСертификат, ПараметрыСертификата.ПарольПользователя,
				НСтр("ru = 'Подписание электронного документа'"));
			Попытка
				ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(ТекДокумент, СертификатПодписи);
				ДанныеПодписи = ЭлектронноеВзаимодействиеСлужебный.СформироватьДанныеПодписи(
					МенеджерКриптографии, ТекДокумент, ДвоичныеДанныеФайла, СтруктураДанныхПодписи);
				
				ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
				КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
				ОпределитьСтатусыПодписей(ТекДокумент);
			Исключение
				ШаблонСообщения = НСтр("ru = 'Ошибка подписи на сервере. Необходимо провести тест сертификата криптографии для: %1.
				|%2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
						НСтр("ru = 'установка подписи ЭП'"),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						ТекстСообщения);
				МассивНеПодписанныхЭД.Добавить(ТекДокумент);
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Операции с зашифрованными данными

// Только для внутреннего использования
Функция ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера, ПараметрыАутентификации = Неопределено, ПоказыватьОшибки = Ложь) Экспорт
	
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(СтруктураПараметровЗапросаМаркера.СпособОбменаЭД);
	Возврат ОбменСКонтрагентамиВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, Ложь, ПараметрыАутентификации, ПоказыватьОшибки)
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Создает присоединенные файлы пакетов, зашифрованных на клиенте.
//
// Параметры:
//  СоответствиеДанных - соответствие - содержит данные по пакетам и зашифрованным файлам.
//  СоответствиеПаролейДляЭДО - Соответствие - данные о паролях.
//
Процедура СохранитьИОтправитьЗашифрованныеДанные(СоответствиеДанных, СоотвСоглашенийИСтруктурСертификатов, КолОтправленных) Экспорт
	
	МассивПЭД = Новый Массив;
	Для Каждого ЭлементПЭД Из СоответствиеДанных Цикл
		ПакетЭД = ЭлементПЭД.Ключ;
		Если ПакетЭД.ВерсияФорматаПакета <> Перечисления.ВерсииФорматаПакетаЭД.Версия10 Тогда
			
			ОбменСКонтрагентамиВнутренний.СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(
								ПакетЭД,
								ЭлементПЭД.Значение[0].ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Иначе
			ОбменСКонтрагентамиСлужебный.СформироватьЭДПрисоединенныйФайлПакета(ПакетЭД, ЭлементПЭД.Значение);
		КонецЕсли;
		МассивПЭД.Добавить(ПакетЭД);
	КонецЦикла;
		
	Если СоответствиеДанных.Количество() > 0 И НемедленнаяОтправкаЭД() Тогда
		КолОтправленных = ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИСтруктурСертификатов);
	КонецЕсли;
	
КонецПроцедуры

// Предназначен для возврата на клиента двоичных данных ЭД, установленных подписей и сертификатов для дальнейшей
// проверки валидности подписей на клиенте.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
// Возвращаемое значение:
//  Структура или неопределено - данные электронного документа, Неопределено - если нет подписей.
//
Функция СтруктураСодержимогоЭД(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ЭДПрисоединенныеФайлыЭлектронныеПодписи.НомерСтроки, НЕОПРЕДЕЛЕНО) КАК НомерСтроки,
	|	ЕСТЬNULL(ЭДПрисоединенныеФайлыЭлектронныеПодписи.Сертификат, НЕОПРЕДЕЛЕНО) КАК Сертификат,
	|	ЕСТЬNULL(ЭДПрисоединенныеФайлыЭлектронныеПодписи.Подпись, НЕОПРЕДЕЛЕНО) КАК Подпись,
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
	|		ПО (ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка = ЭДПрисоединенныеФайлы.Ссылка)
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &ЭД";
	
	Запрос.УстановитьПараметр("ЭД", ЭД);
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураВозврата = Новый Структура;
	МассивПодписей = Новый Массив;
	ВладелецФайла = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Сертификат) Тогда
			СтруктураПодписей = Новый Структура;
			СтруктураПодписей.Вставить("НомерСтроки", Выборка.НомерСтроки);
			СтруктураПодписей.Вставить("Сертификат",  Выборка.Сертификат.Получить());
			СтруктураПодписей.Вставить("Подпись",     Выборка.Подпись.Получить());
			МассивПодписей.Добавить(СтруктураПодписей);
		КонецЕсли;
		ВладелецФайла = Выборка.ВладелецФайла;
	КонецЦикла;
	СтруктураВозврата.Вставить("ВладелецФайла", ВладелецФайла);
	СтруктураВозврата.Вставить("ДанныеЭД",      ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД));
	СтруктураВозврата.Вставить("Подписи",       МассивПодписей);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция проверяет доступность каталога, указанного в настройках соглашения об обмене (через каталог),
// на доступность как с клиента (т.к. выбор каталога происходит с клиента), так и с сервера (т.к. работа с файлами
// выполняется на сервере).
//
// Параметры:
//  ПутьККаталогу - строка - полный путь к каталогу, доступность которого надо проверить (с клиента и с сервера).
//
Функция ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу) Экспорт
	
	КаталогиДоступны = Ложь;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = СокрЛП(ПутьККаталогу);
		УдалитьКаталогПослеТеста = Ложь;
		Каталог = Новый Файл(ПутьККаталогу);
		Если НЕ Каталог.Существует() Тогда
			УдалитьКаталогПослеТеста = Истина;
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
		Разделитель = ?(Прав(ПутьККаталогу, 1) = "\", "", "\");
		ТестовыйФайл = Новый ТекстовыйДокумент;
		ПолноеИмяТестовогоФайла = ПутьККаталогу + Разделитель + "EDI_" + Строка(Новый УникальныйИдентификатор) + ".tst";
		ТестовыйФайл.Записать(ПолноеИмяТестовогоФайла);
		КаталогиДоступны = ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла);
		Если НЕ КаталогиДоступны Тогда
			ТекстСообщения = НСтр("ru = 'Указанный каталог %1 не может использоваться для обмена, так как он не доступен с сервера.
				|Необходимо указать сетевой каталог для обмена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", """" + ПутьККаталогу + """");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если УдалитьКаталогПослеТеста Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Каталог.ПолноеИмя);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПолноеИмяТестовогоФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КаталогиДоступны;
	
КонецФункции

Функция ОпределитьОбъектПривязки(СтруктураПараметровДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Неопределено;
	
	Если ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(СтруктураПараметровДокумента.ТипЭлементаВерсииЭД) Тогда
		ЭДВладелецСсылка = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(
			Новый УникальныйИдентификатор(СтруктураПараметровДокумента.ИдЭДВладельца));
		Если ЭДВладелецСсылка.ПолучитьОбъект() <> Неопределено Тогда
			СтруктураПараметровДокумента.Вставить("ЭлектронныйДокументВладелец", ЭДВладелецСсылка);
			ВозвращаемоеЗначение = ЭДВладелецСсылка.ВладелецФайла;
		КонецЕсли;
	Иначе
		
		ПозПодстроки = СтрНайти(СтруктураПараметровДокумента.НомерЭД, "##") - 1;
		Если ПозПодстроки > 0 Тогда
			ЭлектронныйНомерДокумента = Лев(СтруктураПараметровДокумента.НомерЭД, ПозПодстроки);
		Иначе
			ЭлектронныйНомерДокумента = СтруктураПараметровДокумента.НомерЭД;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронныйНомерДокумента) Тогда
			
			Если СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
				ОбменСКонтрагентамиПереопределяемый.НайтиРанееПолученныйДокумент(ВозвращаемоеЗначение, ЭлектронныйНомерДокумента);
			КонецЕсли;
			
			Если ВозвращаемоеЗначение = Неопределено Тогда
				
				ЗапросДокументовОснований = Новый Запрос;
				ЗапросДокументовОснований.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ вт_ЭД
				|ИЗ
				|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
				|ГДЕ
				|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
				|	И ЭДПрисоединенныеФайлы.НомерЭД ПОДОБНО &Параметр
				|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД
				|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК Ссылка
				|ИЗ
				|	вт_ЭД КАК вт_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
				|		ПО вт_ЭД.Ссылка = ЭлектронныйДокументИсходящийДокументыОснования.Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование
				|ИЗ
				|	вт_ЭД КАК вт_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
				|		ПО вт_ЭД.Ссылка = ЭлектронныйДокументВходящийДокументыОснования.Ссылка";
				ЗапросДокументовОснований.УстановитьПараметр("НаправлениеЭД",       СтруктураПараметровДокумента.НаправлениеЭД);
				ЗапросДокументовОснований.УстановитьПараметр("Параметр",            ЭлектронныйНомерДокумента + "%");
				ЗапросДокументовОснований.УстановитьПараметр("ТипЭлементаВерсииЭД", СтруктураПараметровДокумента.ТипЭлементаВерсииЭД);
				
				НайденныеДокументы = ЗапросДокументовОснований.Выполнить().Выгрузить();
				Если ЗначениеЗаполнено(НайденныеДокументы) Тогда
					
					ВозвращаемоеЗначение = НайденныеДокументы.ВыгрузитьКолонку("Ссылка");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Процедура закрывает электронный документооборот для переданного массива ссылок на документы ИБ.
//
// Параметры:
//  МассивСсылокНаВладельцев - Массив - массив ссылок на документы ИБ, для которых требуется закрыть ЭДО.
//  ПричинаЗакрытия - Строка - описание причины закрытия ЭДО.
//  КоличествоОбработанныхЭД - Число - число документов ИБ, для которых ЭДО был закрыт.
//
Процедура ЗакрытьДокументыПринудительно(Знач МассивСсылокНаВладельцев, Знач ПричинаЗакрытия, КоличествоОбработанныхЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СводнаяИнформацияПоСтатусу = Новый Структура;
	СводнаяИнформацияПоСтатусу.Вставить("СНашейСтороны",Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	СводнаяИнформацияПоСтатусу.Вставить("СоСтороныДругогоУчастника",Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	
	МассивДляОчисткиРегистра = Новый Массив;
	Для Каждого Документ Из МассивСсылокНаВладельцев Цикл
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
			ДокументОбъект = Документ.ПолучитьОбъект();
			ДокументОбъект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
			ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
			ДокументОбъект.ПричинаОтклонения = ?(ПустаяСтрока(ДокументОбъект.ПричинаОтклонения), "", Символы.ПС) 
				+ ПричинаЗакрытия;
			ДокументОбъект.Записать();
			
			ОбновитьВерсиюЭДВРегистре(Документ, Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно, СводнаяИнформацияПоСтатусу);
			
			КоличествоОбработанныхЭД = КоличествоОбработанныхЭД + 1;
		Иначе
			МассивДляОчисткиРегистра.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДляОчисткиРегистра.Количество() > 0 Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект,
		|	СостоянияЭД.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)";
		Запрос.УстановитьПараметр("МассивСсылок", МассивДляОчисткиРегистра);
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		ТЗОбъектов = Новый ТаблицаЗначений;
		ТЗОбъектов.Колонки.Добавить("СсылкаНаОбъект");
		ТЗОбъектов.Колонки.Добавить("ЭлектронныйДокумент");
		
		Для Каждого Элемент Из МассивДляОчисткиРегистра Цикл
			НовСтрока = ТЗОбъектов.Добавить();
			СтрокаТЗ = ТЗ.Найти(Элемент, "СсылкаНаОбъект");
			ЭлектронныйДокумент = Неопределено;
			Если СтрокаТЗ <> Неопределено Тогда
				ЭлектронныйДокумент = СтрокаТЗ.ЭлектронныйДокумент;
				Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
					ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
					ДокументОбъект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
					ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
					ДокументОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			НовСтрока.СсылкаНаОбъект = Элемент;
			НовСтрока.ЭлектронныйДокумент = ЭлектронныйДокумент;
		КонецЦикла;
		
		Для Каждого Строка Из ТЗОбъектов Цикл
			ЗаписьРегистра = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.СсылкаНаОбъект = Строка.СсылкаНаОбъект;
			ЗаписьРегистра.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			ЗаписьРегистра.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			ЗаписьРегистра.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
			ЗаписьРегистра.ЭлектронныйДокумент = Строка.ЭлектронныйДокумент;
			ЗаписьРегистра.Комментарий = ПричинаЗакрытия;
			ЗаписьРегистра.Записать();
		КонецЦикла;
		
		КоличествоОбработанныхЭД = КоличествоОбработанныхЭД + ТЗОбъектов.Количество();
	КонецЕсли;
		
КонецПроцедуры

// Только для внутреннего использования
Функция ЕстьДоступныеСертификаты(МассивОтпечатковСертификатов, ЭД) Экспорт
	
	ИмяДокумента = "";
	Если ТипЗнч(ЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД,"ВладелецФайла");
	Иначе
		ЭлектронныйДокумент = ЭД;
	КонецЕсли;
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		ИмяДокумента = "ЭлектронныйДокументИсходящий";
	ИначеЕсли ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		ИмяДокумента = "ЭлектронныйДокументВходящий";
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.ВидЭД,
	|	ЭДПрисоединенныеФайлы.НастройкаЭДО КАК СоглашениеЭД,
	|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО
	|ПОМЕСТИТЬ ВТ_ЭД
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сертификаты.Ссылка
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
	|				ИЗ
	|					ВТ_ЭД КАК ВТ_ЭД
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
	|						ПО ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					СоглашенияЭДСертификаты.Сертификат
	|				ИЗ
	|					ВТ_ЭД КАК ВТ_ЭД
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
	|						ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
	|				ПО (СертификатыИзНастроекИПрофилей.Сертификат = Сертификаты.Ссылка)
	|			ПО ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
	|				И ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
	|		ПО ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД
	|ГДЕ
	|	НЕ Сертификаты.Отозван
	|	И Сертификаты.Пользователь В (&ТекущийПользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)
	|	И НЕ Сертификаты.ПометкаУдаления
	|	И ВидыЭДЭП.Использовать
	|	И Сертификаты.Отпечаток В(&МассивОтпечатков)";
	
	Запрос.УстановитьПараметр("МассивОтпечатков",		МассивОтпечатковСертификатов);
	Запрос.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
	Запрос.УстановитьПараметр("Ссылка",					ЭлектронныйДокумент);

	ЕстьСертификаты = НЕ Запрос.Выполнить().Пустой();
	
	Возврат ЕстьСертификаты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Соглашения

// Используется в случае отсутствия возможности предложить пользователю выбрать сертификат из списка доступных и/или
// ввести пароль для сертификата (например при выполнении регламентного задания).
// Возвращает Истина, если для входящих переменных найден хотя бы один сертификат с сохраненным в ИБ паролем.
//
// Параметры:
//  МассивПрофилейНастроекЭДО     - Массив - содержит ссылки на профили настроек ЭДО, по которым требуется определить сертификаты;
//  ПараметрыАвторизации - Соответствие - в этой переменной в вызывающий метод возвращается соответствие:
//    * Ключ     - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение, для которого определен сертификат авторизации.
//    * Значение - Соответствие - соответствие сертификата и его параметров:
//       ** Ключ     - СправочникСсылка.СертификатыЭП - сертификат авторизации.
//       ** Значение - Структура - структура параметров сертификата:
//           *** СертификатПодписи           - СправочникСсылка.СертификатыЭП.
//           *** ПарольПолучен               - Булево.
//           *** ПарольПользователя          - Строка.
//           *** Отпечаток                   - Строка.
//           *** Отозван                     - Булево.
//           *** ДвоичныеДанныеСертификата             - ХранилищеЗначений.
//           *** ОповещенОСрокеДействия      - Булево.
//           *** ДатаОкончания               - Дата.
//           *** ЗапомнитьПарольКСертификату - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если найдены сертификат(ы) с сохраненными в ИБ паролями, иначе Ложь.
//
Функция ДоступныПараметрыДляАвторизацииНаСервереОператора(Знач МассивПрофилейНастроекЭДО = Неопределено,
														ПараметрыАвторизации = Неопределено) Экспорт
	
	Попытка
		МассивОтпечатковСертификатов = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
	Исключение
		МассивОтпечатковСертификатов = Новый Массив;
	КонецПопытки;
	
	ДоступныПараметры = Ложь;
	Если МассивОтпечатковСертификатов.Количество() > 0 Тогда
		СтМассивовСтруктурСертификатов = Новый Структура("МассивОтпечатковСервер", МассивОтпечатковСертификатов);
		
		Результат = НастройкиЭДОИСертификатыАвторизации(МассивПрофилейНастроекЭДО,, СтМассивовСтруктурСертификатов);
		
		ПараметрыАвторизации = Новый Соответствие;
		СоотвСоглашенийИМассиваСертификатовАвторизации = Неопределено;
		СоотвСертификатовИИхСтруктур = Неопределено;
		Если Результат.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации)
			И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И ТипЗнч(СоотвСоглашенийИМассиваСертификатовАвторизации) = Тип("Соответствие")
			И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
			// В СоотвСоглашенийИМассиваСертификатовАвторизации - Ключ - Соглашение, Значение - Массив сертификатов
			// по данному соглашению. Функция должна вернуть (в ПараметрыАвторизации) Соответствие, в котором Ключ - Соглашение,
			// Значение - Соответствие сертификата и его параметров.
			Для Каждого Элемент Из СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
				
				ПрофильНастроекЭДО = Элемент.Ключ;
				РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				
				МассивСертификатов = Элемент.Значение;
				Для Каждого Сертификат Из МассивСертификатов Цикл
					КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
					ПараметрыСертификата = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
					
					Если ПараметрыСертификата.ПарольПолучен Тогда
						ПараметрыАвторизации.Вставить(Элемент.Ключ, ПараметрыСертификата);
						ДоступныПараметры = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступныПараметры;
	
КонецФункции

// Функция возвращает соответствие соглашению - структуры данных сертификата,
// содержащую ссылку на сертификат и его доп.реквизиты (запомнить пароль, пароль пользователя, маркер расшифрованный/зашифрованный).
// 
// Параметры:
//  МассивСоглашений               - Массив    - содержит ссылки на соглашения, по которым требуется определить сертификаты;
//  СтМассивовСтруктурСертификатов - Структура - содержит структуру со свойствами:
//    * МассивСтруктурСертификатовСервер - Массив - массив структур сертификатов личного хранилища с сервера.
//    * МассивСтруктурСертификатовКлиент - Массив - массив структур сертификатов личного хранилища с клиента.
//  СоотвСертификатовИПаролей      - Фиксированное соответствие:
//    * Ключ     - СправочникСсылка.СертификатыЭП - сертификат авторизации.
//    * Значение - Строка - пароль к сертификату.
//
// Возвращаемое значение:
//  Соответствие: ключ - соглашение об обмене ЭД, значение - структура параметров сертификата ЭП
//    ("СертификатДляАвторизации, ЗапомнитьПарольКСертификату, ПарольПользователя, МаркерРасшифрованный, МаркерЗашифрованный").
//
Функция СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
		Знач МассивПрофилейНастроекЭДО = Неопределено, Знач СтМассивовСтруктурСертификатов = Неопределено,
		Знач СоотвСертификатовИПаролей = Неопределено)
	
	Результат = НастройкиЭДОИСертификатыАвторизации(МассивПрофилейНастроекЭДО,, СтМассивовСтруктурСертификатов);
	
	СоотвСоглашений = Новый Соответствие;
	СоотвСоглашенийИМассиваСертификатовАвторизации = Неопределено;
	СоотвСертификатовИИхСтруктур = Неопределено;
	Если Результат.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации)
		И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
		И ТипЗнч(СоотвСоглашенийИМассиваСертификатовАвторизации) = Тип("Соответствие")
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
		// В СоотвСоглашенийИМассиваСертификатовАвторизации - Ключ - Соглашение, Значение - Массив сертификатов
		// по данному соглашению. Функция должна вернуть Соответствие, в котором Ключ - Соглашение,
		// Значение - Соответствие сертификатов и их параметров.
		Для Каждого Элемент Из СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
			
			ПрофильНастроекЭДО = Элемент.Ключ;
			РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
			
			Соответствие = Новый Соответствие;
			МассивСертификатов = Элемент.Значение;
			Для Каждого Сертификат Из МассивСертификатов Цикл
				КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
				
				Структура = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
				Если ЗначениеЗаполнено(Структура) И Структура.ПарольПолучен Тогда
					// Авторизоваться на сервере оператора можно любым зарегистрированным в соглашении сертификатом,
					// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
					// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
					// диалог выбора сертификата.
					Соответствие = Новый Соответствие;
					Соответствие.Вставить(Сертификат, Структура);
					Прервать;
				КонецЕсли;
				Соответствие.Вставить(Сертификат, Структура);
			КонецЦикла;
			СоотвСоглашений.Вставить(Элемент.Ключ, Соответствие);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоотвСоглашений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование электронных документов

// См. эту функцию в модуле ОбменСКонтрагентамиСлужебный.
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьИмяФормыЭД(СсылкаНаЭД) Экспорт
	
	ИмяФормы = "";
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД,"ВладелецФайла");
	Иначе
		ЭлектронныйДокумент = СсылкаНаЭД;
	КонецЕсли;
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		ИмяДокумента = "ЭлектронныйДокументВходящий";
	ИначеЕсли ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		ИмяДокумента = "ЭлектронныйДокументИсходящий";
	Иначе
		Возврат "";
	КонецЕсли;
	
	ИмяФормы = "Документ." + ИмяДокумента + ".Форма.ФормаПросмотраЭД";
	
	Возврат ИмяФормы;
	
КонецФункции

// Процедура используется для минимизации серверных вызовов, при необходимости
// получения на клиенте всех или нескольких значений, перечисленных в параметрах констант.
//
Процедура ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД = Неопределено) Экспорт
	
	НемедленнаяОтправкаЭД = НемедленнаяОтправкаЭД();
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();

КонецПроцедуры

// Возвращает массив проведенных документов.
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы.
//
// Возвращаемое значение:
//  Массив - массив ссылок на документы, которые проведены.
//
Функция МассивПроведенныхДокументов(Знач МассивДокументов) Экспорт
	
	МассивПроведенныхДокументов = Новый Массив;
	МассивПроводимыхДокументов = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивПроводимыхДокументов(
		МассивДокументов);
	
	Для Каждого Документ Из МассивПроводимыхДокументов Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен") Тогда
			МассивПроведенныхДокументов.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПроведенныхДокументов;
	
КонецФункции

Процедура ЗаполнитьДанныеПодписантаЭД(ДанныеФайлаЭД, ПространствоИменСхемы, ПараметрыЭД, СертификатПодписи)
	
	ТекстОшибки = "";
	
	// Получим данные для заполнения Тега Подписант
	ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(СертификатПодписи);
	ФамилияСертификата  = ПараметрыСертификата.Фамилия;
	ИмяСертификата      = ПараметрыСертификата.Имя;
	ОтчествоСертификата = ПараметрыСертификата.Отчество;
	Фирма               = ПараметрыСертификата.Фирма;
	
	ДолжностьПоСертификату = "---";
	Если ЗначениеЗаполнено(ПараметрыСертификата.Должность) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.Должность;
	КонецЕсли;
	
	ЭтоФизЛицо = ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(ПараметрыЭД.Организация);
	ДанныеЮрФизЛица = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыЭД.Организация);
	
	// Заполнение блока подписанта в ЭД.
	Если (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
		
		И (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД)
			
		Или (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
		
		И (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД) Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, ТекстОшибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, ТекстОшибки);
		Иначе
			ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			
			ДанныеСвидетельства = "";
			ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , ТекстОшибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
		КонецЕсли;
		
		ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
		Если Не ЭтоФизЛицо Тогда
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, ТекстОшибки);
		Иначе
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, ТекстОшибки);
		КонецЕсли;
		
		СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ",ТекстОшибки);
		
	ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
	
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ЮЛ", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, ТекстОшибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, ТекстОшибки);
		Иначе
			ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ИП", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			
			ДанныеСвидетельства = "";
			ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , ТекстОшибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
		КонецЕсли;
		ИндексПодписанта = ДанныеФайлаЭД.ИнфПок.Подписант.Количество() - 1;
		Если Не ЭтоФизЛицо Тогда
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, ТекстОшибки);
		Иначе
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ИП", ИП, Истина, ТекстОшибки);
		КонецЕсли;
		
		СброситьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ФЛ",ТекстОшибки);
		
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, ТекстОшибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, ТекстОшибки);
		Иначе
			ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			
			ДанныеСвидетельства = "";
			ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , ТекстОшибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
		КонецЕсли;
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, ТекстОшибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, ТекстОшибки);
		Иначе
			ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			
			ДанныеСвидетельства = "";
			ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , ТекстОшибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если ПространствоИменСхемы = "TORGPR" 
			Или ПространствоИменСхемы = "RUISP" Тогда // Передача товаров, акт результатов работ (Исполнитель).
			ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
			
			Если Не ЭтоФизЛицо Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", Фирма, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, ТекстОшибки);
			Иначе
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, ТекстОшибки);
			КонецЕсли;
			
			СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ",ТекстОшибки);
			
		ИначеЕсли ПространствоИменСхемы = "TORGPOK" 
			Или ПространствоИменСхемы = "RUZAK" Тогда // Передача товаров, акт результатов работ (Заказчик).
			
			ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
			Если Не ЭтоФизЛицо Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", Фирма, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, ТекстОшибки);
			Иначе
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, ТекстОшибки);
			КонецЕсли;
		Иначе
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Заполнение блока ответственного в ЭД
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			Если Не ПространствоИменСхемы = "TORGPR" Тогда // Передача товаров, акт результатов работ (Исполнитель).
				ОтпускРазреш = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз.ОтпускРазреш", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ОтпускРазреш, "ФИО", ФИО, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ОтпускРазреш, "Должность", ДолжностьПоСертификату, , ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвТНО.ОтпускГруз, "ОтпускРазреш", ОтпускРазреш, Истина, ТекстОшибки);
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			Если ПространствоИменСхемы = "TORGPOK" Тогда // Передача товаров, акт результатов работ (Исполнитель).
				ЛицоГрузПолучил = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ4.ГрузПолучил.СвЛицПолГруз", ПространствоИменСхемы);
				СведенияЛица = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ4.ГрузПолучил.СвЛицПолГруз.РабОргПок", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ФИО", ФИО, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЛицоГрузПолучил, "РабОргПок", СведенияЛица, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СодФХЖ4.ГрузПолучил, "СвЛицПолГруз", ЛицоГрузПолучил, Истина, ТекстОшибки);
			Иначе
				ГрузПолучил = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.ГрузПолучил", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ГрузПолучил, "ФИО", ФИО, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ГрузПолучил, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвТНП.ПолучилГруз, "ГрузПолучил", ГрузПолучил, Истина, ТекстОшибки);
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			Если Не ВРег(ПространствоИменСхемы) = ВРег("RUISP") Тогда
				
				ПодписьИсполн = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ПодписьИсполн", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьИсполн, "ФИО", ФИО, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьИсполн, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвАктИ.Сдал, "ПодписьИсполн", ПодписьИсполн, Истина, ТекстОшибки);
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик Тогда
			
			Если Не ВРег(ПространствоИменСхемы) = ВРег("RUZAK") Тогда
				
				ПодписьЗаказ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ПодписьЗаказ", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьЗаказ, "ФИО", ФИО, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьЗаказ, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвАктИ.Принял, "ПодписьЗаказ", ПодписьЗаказ, Истина, ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(ПараметрыЭД.ТипЭлементаВерсииЭД)
		Или ОбменСКонтрагентамиСлужебный.ЭтоУведомлениеОбУточнении(ПараметрыЭД.ТипЭлементаВерсииЭД)
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
		ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФИО", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
		КонецЕсли;
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
	ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав) Тогда
		
		Если ДанныеФайлаЭД.ВерсияСхемы = СокрЛП(СтрЗаменить(ОбменСКонтрагентамиСлужебный.ВерсияСхемыCML2(), "CML", "")) Тогда
			
			// Добавление шаблона подписанта для заполнения при подписи.
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				Подписанты = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Каталог.Подписанты", ПространствоИменСхемы);
				Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Каталог.Подписанты.Подписант", ПространствоИменСхемы);
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
				Подписанты = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты", ПространствоИменСхемы);
				Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты.Подписант", ПространствоИменСхемы);
			Иначе
				Подписанты = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
				Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
			КонецЕсли;
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			
			Если Не ЭтоФизЛицо Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
			КонецЕсли;
			
			Подписанты.Подписант.Добавить(Подписант);
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Каталог, "Подписанты", Подписанты, Ложь, ТекстОшибки);
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ПакетПредложений, "Подписанты", Подписанты, Ложь, ТекстОшибки);
			Иначе
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ[0], "Подписанты", Подписанты, Ложь, ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СброситьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ТекстОшибки)
	
	Попытка
		ОбъектXDTO.Сбросить(ИмяСвойства);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Выполнение операции: Очистка XDTO.
			|Ошибка сброса значения свойства ""%1"".'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 2);
	КонецПопытки

	
КонецПроцедуры


// Только для внутреннего использования
Процедура УстановитьОтветственногоЭД(Знач СписокОбъектов, Знач НовыйОтветственный, КоличествоОбработанныхЭД,
	ПричинаПеренаправления = "") Экспорт
	
	МассивЭД = Новый Массив;
	КоличествоОбработанныхЭД = 0;
	
	Для Каждого ЭлСписка Из СписокОбъектов Цикл
		Если ТипЗнч(ЭлСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		МассивЭД.Добавить(ЭлСписка.Ссылка);
	КонецЦикла;
	
	Если МассивЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла
	|ПОМЕСТИТЬ вт_Владельцы
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныйДокументВходящий.Ссылка,
	|	ЭлектронныйДокументВходящий.Ответственный,
	|	ЭлектронныйДокументВходящий.СостояниеЭДО
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|ГДЕ
	|	ЭлектронныйДокументВходящий.Ссылка В
	|			(ВЫБРАТЬ
	|				вт_Владельцы.ВладелецФайла
	|			ИЗ
	|				вт_Владельцы КАК вт_Владельцы)
	|	И (ЭлектронныйДокументВходящий.Ответственный <> &Ответственный
	|			ИЛИ &ЗаписьОписания)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящий.Ссылка,
	|	ЭлектронныйДокументИсходящий.Ответственный,
	|	ЭлектронныйДокументИсходящий.СостояниеЭДО
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|ГДЕ
	|	ЭлектронныйДокументИсходящий.Ссылка В
	|			(ВЫБРАТЬ
	|				вт_Владельцы.ВладелецФайла
	|			ИЗ
	|				вт_Владельцы КАК вт_Владельцы)
	|	И (ЭлектронныйДокументИсходящий.Ответственный <> &Ответственный
	|			ИЛИ &ЗаписьОписания)";
	
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Запрос.УстановитьПараметр("Ответственный", НовыйОтветственный);
	Запрос.УстановитьПараметр("ЗаписьОписания", ?(ЗначениеЗаполнено(ПричинаПеренаправления), Истина, Ложь));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		Пока Выборка.Следующий() Цикл
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Ответственный = НовыйОтветственный;
			ДокументОбъект.Текст = ?(ПустаяСтрока(ДокументОбъект.Текст), "", ДокументОбъект.Текст + Символы.ПС) + ПричинаПеренаправления;
			ДокументОбъект.Записать();
			КоличествоОбработанныхЭД = КоличествоОбработанныхЭД + 1;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось установить ответственного электронного документа (%1). %2'"), 
			Выборка.Ссылка,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
КонецПроцедуры

// Только для внутреннего использования
Функция СформироватьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУточнения = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	ДанныеЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "НаправлениеЭД, СтатусЭД,
	                      |УникальныйИД, ТипЭлементаВерсииЭД, ВладелецФайла, НомерЭД");
	Для Каждого СсылкаНаЭД Из МассивЭД Цикл
	
		ПараметрыЭД = ДанныеЭД.Получить(СсылкаНаЭД);
		
		ЭтоИзвещение = НЕ ЗначениеЗаполнено(ТекстУточнения);
		
		Если ЭтоИзвещение Тогда
			// Не формируем извещение о получении для версии регламента 20 в формализованных документах.
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.ВладелецФайла,"ВерсияРегламентаЭДО") 
					= Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(ПараметрыЭД.ТипЭлементаВерсииЭД) Тогда
				
				Возврат МассивВозврата;
			КонецЕсли;

			Если НЕ (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД) Тогда
				
				ШаблонСообщения = НСтр("ru = 'Для типа ЭД %1 не предусмотрено формирование Извещения о получении.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ПараметрыЭД.ТипЭлементаВерсииЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат МассивВозврата;
			КонецЕсли;
		КонецЕсли;
		
		АдресВоВременномХранилище = "";
		
		СтруктураЭД = ОбменСКонтрагентамиВнутренний.СформироватьФайлСлужебногоДокументаПоЭД(СсылкаНаЭД, ВидЭД, ТекстУточнения);
		Если НЕ ЗначениеЗаполнено(СтруктураЭД)
			Или НЕ СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
			
			Возврат МассивВозврата;
		КонецЕсли;
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		
		НачатьТранзакцию();
		Попытка
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ПараметрыЭД.ВладелецФайла);
			ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураЭД.ИдФайла);
			ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
			ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
				ПараметрыФайла, АдресВоВременномХранилище, , , НоваяСсылкаЭД);

			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Исходящий);
			СтруктураПараметров.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Утвержден);
			СтруктураПараметров.Вставить("Получатель",                  СтруктураЭД.ИдПолучателя);
			СтруктураПараметров.Вставить("Отправитель",                 СтруктураЭД.ИдОтправителя);
			СтруктураПараметров.Вставить("НомерЭД",                     ПараметрыЭД.НомерЭД);
			СтруктураПараметров.Вставить("ВладелецЭД",                  ПараметрыЭД.ВладелецФайла);
			СтруктураПараметров.Вставить("УникальныйИД",                ПараметрыЭД.УникальныйИД);
			СтруктураПараметров.Вставить("НаименованиеФайла",           СтруктураЭД.ИдФайла);
			Если ЭтоИзвещение Тогда
				ТипЭлементаВерсииЭД = ОбменСКонтрагентамиВнутренний.ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД);
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
			Иначе
				Если СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
				Иначе
					
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
				КонецЕсли;
			КонецЕсли;
			СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД",         ТипЭлементаВерсииЭД);
			СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);
			
			ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
			
			Если НЕ ЭтоИзвещение Тогда
				Если ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Отклонен;
					Запрос = Новый Запрос;
					Запрос.Текст =
						"ВЫБРАТЬ
						|	ПодчиненныеЭД.Ссылка,
						|	ПодчиненныеЭД.ВладелецФайла
						|ИЗ
						|	Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
						|		ПО (ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец)
						|ГДЕ
						|	ПодчиненныеЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
						|	И ПодчиненныеЭД.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
						|	И ЭДПрисоединенныеФайлы.Ссылка = &Ссылка";
					Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭД);
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЭДОФайл = Выборка.Ссылка.ПолучитьОбъект();
						ЭДОФайл.СтатусЭД = НовыйСтатусЭД;
						ЭДОФайл.Записать();
						
						ОбменСКонтрагентамиСлужебный.ЗаписатьПричинуОтклонения(Выборка.ВладелецФайла,ТекстУточнения);
					КонецЦикла;
				Иначе
					
					ВторойТитул = ОбменСКонтрагентамиСлужебный.ВторойТитулДокумента(СсылкаНаЭД);
					ТребуетсяПодтверждение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.ВладелецФайла, "ТребуетсяПодтверждение");
					
					Если ЗначениеЗаполнено(ВторойТитул) Или ТребуетсяПодтверждение Тогда
						НовыйСтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании;
					Иначе
						НовыйСтатусЭД = Перечисления.СтатусыЭД.Аннулирован;
					КонецЕсли;
					
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура("СтатусЭД, ПричинаОтклонения", НовыйСтатусЭД, ТекстУточнения);
				ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(СсылкаНаЭД, СтруктураПараметров, Ложь);
			КонецЕсли;
			МассивВозврата.Добавить(ДобавленныйФайл);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Процедура УстановитьСтатусПоследнейПодписи(ЭД)
	
	ОбъектЭД = ЭД.ПолучитьОбъект();
	
	СтрокаЭП = ОбъектЭД.ЭлектронныеПодписи[ОбъектЭД.ЭлектронныеПодписи.Количество()-1];
	СтрокаЭП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
	СтрокаЭП.ПодписьВерна = Истина;
		
	ОбъектЭД.Записать();

КонецПроцедуры

// Только для внутреннего использования
Функция ДОЗакрытПринудительно(ВладелецФайла) Экспорт
	
	СостояниеЭДО = СостояниеДокументооборота(ВладелецФайла);
	
	Результат = Ложь;
	Если СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьДанныеЭД(СсылкаНаЭД) Экспорт
	
	СсылкаНаДанные = "";
	
	ДопИнформацияПоЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(СсылкаНаЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
			ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
		Иначе
			ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		Если СтрНайти(ДопИнформацияПоЭД.Расширение, "zip") > 0
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД") = Перечисления.ВидыЭД.КаталогТоваров Тогда
			СсылкаНаДанные = ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла
		ИначеЕсли СтрНайти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
		
			АрхивЧтение = Новый ЧтениеZipФайла(ИмяФайла);
			ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки, "*.*");
			
			Попытка
				АрхивЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(АрхивЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				Возврат "";
			КонецПопытки;
			
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
				СсылкаНаДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
				Прервать;
			КонецЦикла;
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			
		ИначеЕсли СтрНайти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
			СсылкаНаДанные = ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаНаДанные;
	
КонецФункции

// Дополняет массив пакетов, которые будут распаковываться, не распакованными пакетами.
// 
// Параметры:
//  ПакетыСоСвойствами - массив, элементами которого являются структура, которая содержит
//                       ссылка на документ ПакетЭД и параметры, необходимые для его распаковки.
//
Процедура ДополнитьПакетамиКРаспаковке(МассивПакетовЭД) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильЭДО,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО
	|ПОМЕСТИТЬ втПрофилиОбмена
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК Пакет
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПрофилиОбмена КАК втПрофилиОбмена
	|		ПО ПакетЭД.НастройкаЭДО = втПрофилиОбмена.НастройкаЭДО
	|			И ПакетЭД.ПрофильНастроекЭДО = втПрофилиОбмена.ПрофильЭДО
	|ГДЕ
	|	ПакетЭД.СтатусПакета = &СтатусПакета
	|	И ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.ПрофильНастроекЭДО В
	|			(ВЫБРАТЬ
	|				втПрофилиОбмена.ПрофильЭДО
	|			ИЗ
	|				втПрофилиОбмена)
	|	И НЕ ПакетЭД.Ссылка В (&НовыеПакеты)";
	
	Запрос.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.КРаспаковке);
	Запрос.УстановитьПараметр("НовыеПакеты", МассивПакетовЭД);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПакетовЭДКРаспаковке = Результат.Выгрузить().ВыгрузитьКолонку("Пакет");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПакетовЭД, МассивПакетовЭДКРаспаковке);
	
КонецПроцедуры

// Только для внутреннего использования
Функция ЭтоПрямойОбмен(СпособОбменаЭД) Экспорт
	
	Результат = Ложь;
	Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
		Или СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту
		Или СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоИсходящийДокументРеализации(СвойстваЭД)
	
	Результат = Ложь;
	
	МассивРТУ = Новый Массив;
	МассивРТУ.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивРТУ.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивРТУ.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	
	Если Не МассивРТУ.Найти(СвойстваЭД.ВидЭД) = Неопределено
		И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования
Функция РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО, "СпособОбменаЭД, ИдентификаторОрганизации");
	
КонецФункции

// Только для внутреннего использования
Функция ЕстьДОПоДокументу(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Результат
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.ЭлектронныйДокумент = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	ЕстьДО = Истина;
	Если Результат.Пустой() Тогда
		ЕстьДО = Ложь;
	КонецЕсли;
	
	Возврат ЕстьДО;
	
КонецФункции

#КонецОбласти

#Область НовыеМетоды

// Возвращает правила редактирования регламента строки профиля (или настройки) ЭДО.
// Параметры:
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  ВерсияФормата - строка - версия формата электронного документа.
//  СпособОбмена - СправочникСсылка.ПрофилиНастроекЭДО - профиль ЭДО.
// Возвращаемое значение:
//  Настройки - Структура с полями РедактироватьПодпись, РедактироватьИзвещение, РедактироватьОтветнуюПодпись.
//
Функция РегламентПрофиляЭДО(ВидЭД, ВерсияФормата, СпособОбменаЭДО) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("РедактироватьПодпись", Ложь);
	Настройки.Вставить("РедактироватьИзвещение", Ложь);
	Настройки.Вставить("РедактироватьОтветнуюПодпись", Ложь);
	
	Если ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		И ВРег(ВерсияФормата) = ВРег("ФНС 5.01 (С 2016Г.)") Тогда
		
		Настройки.РедактироватьОтветнуюПодпись = Истина;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		Настройки.РедактироватьИзвещение = Истина;
		
	КонецЕсли;
	
	Если ЭтоПрямойОбмен(СпособОбменаЭДО) Тогда
		Настройки.РедактироватьПодпись = Истина;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область НовыеМетоды

Функция ПроверитьСостояниеЭДО(ДокументИБ, СостояниеЭДО) Экспорт
	
	Если ТипЗнч(СостояниеЭДО) = Тип("ПеречислениеСсылка.СостоянияВерсийЭД") Тогда
		Состояния = Новый Массив;
		Состояния.Добавить(СостояниеЭДО);
	Иначе
		Состояния = СостояниеЭДО;
	КонецЕсли;
	
	СостояниеДО = СостояниеДокументооборота(ДокументИБ);
	
	Результат = Истина;
	Если Состояния.Найти(СостояниеДО) = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СостояниеДокументооборота(ДокументИБ)
		
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИБ,"СостояниеЭДО");
	
КонецФункции

Функция ВходящийТитул(СсылкаНаЭД) Экспорт
	
	Если Не ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(СсылкаНаЭД) Тогда
		ПервыйТитул = Неопределено;
	Иначе
		ПервыйТитул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ЭлектронныйДокументВладелец");
	КонецЕсли;
	
	Возврат ПервыйТитул;
	
КонецФункции

Функция ПроверитьДоступностьКаталогаFTP(ПараметрыСоединения) Экспорт
	
	ИспользоватьПрокси = Ложь;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ПараметрИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		Если НЕ ПараметрИспользоватьПрокси=Неопределено Тогда
			ИспользоватьПрокси = ПараметрИспользоватьПрокси;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		Если НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки") Тогда
			// Системные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси(Истина);
		Иначе
			// Ручные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси;
			Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"],
				НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
			Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
			
		КонецЕсли;
	Иначе
		Прокси = Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	Таймаут = 30;
	Попытка
		FTPСоединение = Новый FTPСоединение(ПараметрыСоединения.АдресСервераFTP,
											ПараметрыСоединения.ПортFTP,
											ПараметрыСоединения.ПользовательFTP,
											ПараметрыСоединения.ПарольFTP,
											Прокси,
											ПараметрыСоединения.ПассивноеСоединениеFTP,
											Таймаут);
	Исключение
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("121");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		ОбменСКонтрагентамиСлужебный.ПодготовитьПутьFTP(ПараметрыСоединения.FTPКаталогВходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(ПараметрыСоединения.FTPКаталогВходящихДокументов);
	Исключение
		ОбменСКонтрагентамиСлужебный.СоздатьКаталогиFTP(FTPСоединение, ПараметрыСоединения.FTPКаталогВходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОбновитьВерсиюЭДВРегистре(СообщениеОбмена, СостояниеВерсииЭД, СводнаяИнформацияПоСтатусу)  Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);

	ДействияСНашейСтороны = "";
	СводнаяИнформацияПоСтатусу.Свойство("СНашейСтороны",ДействияСНашейСтороны);
	
	ДействияСоСтороныДругогоУчастника = "";
	СводнаяИнформацияПоСтатусу.Свойство("СоСтороныДругогоУчастника",ДействияСоСтороныДругогоУчастника);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК СсылкаНаОбъект,
	|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК СообщениеОбмена
	|ПОМЕСТИТЬ втДокументыУчета
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка = &СообщениеОбмена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование,
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &СообщениеОбмена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СсылкаНаОбъект,
	|	СообщениеОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыУчета КАК втДокументыУчета
	|		ПО СостоянияЭД.СсылкаНаОбъект = втДокументыУчета.СсылкаНаОбъект
	|			И СостоянияЭД.ЭлектронныйДокумент = втДокументыУчета.СообщениеОбмена
	|ГДЕ
	|	СостоянияЭД.СостояниеВерсииЭД <> &СостояниеВерсииЭД";
	
	Запрос.УстановитьПараметр("СообщениеОбмена",СообщениеОбмена);
	Запрос.УстановитьПараметр("СостояниеВерсииЭД",СостояниеВерсииЭД);
	
	Если ЗначениеЗаполнено(ДействияСНашейСтороны) Тогда
		ТекстЗапроса = ТекстЗапроса + "	ИЛИ СостоянияЭД.ДействияСНашейСтороны <> &ДействияСНашейСтороны ";
		Запрос.УстановитьПараметр("ДействияСНашейСтороны",ДействияСНашейСтороны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДействияСоСтороныДругогоУчастника) Тогда
		ТекстЗапроса = ТекстЗапроса + "ИЛИ СостоянияЭД.ДействияСоСтороныДругогоУчастника <> &ДействияСоСтороныДругогоУчастника";
		Запрос.УстановитьПараметр("ДействияСоСтороныДругогоУчастника",ДействияСоСтороныДругогоУчастника);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
				
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.СсылкаНаОбъект,Истина);
		НаборЗаписей.Прочитать();
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			
			ЗаписьНабора.СостояниеВерсииЭД = СостояниеВерсииЭД;
			
			Если ЗначениеЗаполнено(ДействияСНашейСтороны) Тогда
				ЗаписьНабора.ДействияСНашейСтороны = ДействияСНашейСтороны;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДействияСоСтороныДругогоУчастника) Тогда
				ЗаписьНабора.ДействияСоСтороныДругогоУчастника = ДействияСоСтороныДругогоУчастника;
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция МассивПрофилейПакетовЭД(МассивПЭД) Экспорт 
	
	МассивПрофилейНастроекЭДО = Новый Массив;
	
	СоотвЭДИСтруктурыСоглашений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивПЭД, "ПрофильНастроекЭДО");
	Для Каждого ЭДВладелец Из СоотвЭДИСтруктурыСоглашений Цикл
		ПрофильНастроекЭДО = ЭДВладелец.Значение.ПрофильНастроекЭДО;
		Если МассивПрофилейНастроекЭДО.Найти(ПрофильНастроекЭДО) = Неопределено Тогда
			МассивПрофилейНастроекЭДО.Добавить(ПрофильНастроекЭДО);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПрофилейНастроекЭДО;
	
КонецФункции

// Проверяет необходимость отправки документа сразу после утверждения или подписания.
// 
// Возвращаемое значение:
// Булево - признак необходимости немедленной отправки электронных документов.
//
Функция НемедленнаяОтправкаЭД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат НЕ Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Получить();
	
КонецФункции
#КонецОбласти

