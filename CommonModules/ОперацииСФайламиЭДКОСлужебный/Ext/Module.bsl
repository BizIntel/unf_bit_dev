////////////////////////////////////////////////////////////////////////////////
// Подсистема "Операции с файлами (служебный)".
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура СкачатьФайлНаСервере(Параметры, АдресХранилища, АдресХранилищаДополнительный) Экспорт
	
	ЭтоФоновоеЗадание = ЭтоФоновоеЗадание();
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Параметры.URL);
	
	ИмяФайла = Сред(СтруктураURI.ПутьНаСервере, СтрНайти(СтруктураURI.ПутьНаСервере, "/", НаправлениеПоиска.СКонца) + 1);
	ИмяФайла = ОбщегоНазначенияЭДКОКлиентСервер.ЗаменитьНечитаемыеСимволы(ИмяФайла);
	
	Соединение = ОбщегоНазначенияЭДКО.СоединениеССерверомИнтернета(Параметры.URL, Новый Структура("Таймаут", 30));
	
    РазмерФайла = ПолучитьРазмерФайла(Соединение, СтруктураURI.ПутьНаСервере);
	
	Если Не ЗначениеЗаполнено(РазмерФайла) Тогда
		// Размер файла не получен, пробуем скачать файл сразу целиком
		РезультатСкачивания = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(Параметры.URL);
		Если РезультатСкачивания.Статус Тогда
			Данные = ПолучитьИзВременногоХранилища(РезультатСкачивания.Путь);
		Иначе
			ВызватьИсключение(РезультатСкачивания.СообщениеОбОшибке);	
		КонецЕсли;
	Иначе
		ИзменитьПрогрессЗагрузки(0, РазмерФайла);
		
		
		КаталогЗагрузки = КаталогВременныхФайлов() + СтрЗаменить(Новый УникальныйИдентификатор, "-", "") + ПолучитьРазделительПути();
		СоздатьКаталог(КаталогЗагрузки);
			
		КоличествоЧастей = ПолучитьКоличествоЧастей(РазмерФайла);
		
		ЗагруженыВсеЧасти = Ложь;
		ЗагруженныеЧастиФайла = Новый Массив;
		Для ТекущаяЧасть = 1 По КоличествоЧастей Цикл
			Если ЗагруженыВсеЧасти Тогда
				Прервать;
			КонецЕсли;
			
			РезультатВыполнения = ПолучитьСледующуюЧастьФайла(Соединение, СтруктураURI.ПутьНаСервере, РазмерФайла, ТекущаяЧасть);
			Ответ = РезультатВыполнения.Ответ;
			Если Ответ.КодСостояния = 200 Тогда
				Если Число(Ответ.Заголовки["Content-Length"]) = РазмерФайла Тогда
					ИмяФайлаЧасти = СохранитьПолученнуюЧастьФайла(КаталогЗагрузки, Ответ.ПолучитьТелоКакДвоичныеДанные(), ТекущаяЧасть);
					ЗагруженныеЧастиФайла.Добавить(ИмяФайлаЧасти);	
				КонецЕсли;
				ЗагруженыВсеЧасти = Истина;
			ИначеЕсли Ответ.КодСостояния = 206 Тогда
				ИмяФайлаЧасти = СохранитьПолученнуюЧастьФайла(КаталогЗагрузки, Ответ.ПолучитьТелоКакДвоичныеДанные(), ТекущаяЧасть);
				ЗагруженныеЧастиФайла.Добавить(ИмяФайлаЧасти);

				ИзменитьПрогрессЗагрузки(РезультатВыполнения.Конец, РазмерФайла);
			Иначе
				УдалитьФайлы(КаталогЗагрузки);
				
				Результат = Новый Структура;
				Результат.Вставить("Выполнено", Ложь);
				Результат.Вставить("ОписаниеОшибки", "НеУдалосьСкачатьФайл");
				
				ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

			КонецЕсли;
		КонецЦикла;

		ЗагруженныйФайл = КаталогЗагрузки + "download_file.dat";
		ОбъединитьФайлы(ЗагруженныеЧастиФайла, ЗагруженныйФайл);
		
		Данные = Новый ДвоичныеДанные(ЗагруженныйФайл);
		УдалитьФайлы(КаталогЗагрузки);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Данные, АдресХранилищаДополнительный);
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("АдресФайла", АдресХранилищаДополнительный);
	Результат.Вставить("ИмяФайла", ИмяФайла);
	Результат.Вставить("Размер", Данные.Размер());
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКоличествоЧастей(РазмерФайла)
	
	РазмерЧасти = ПолучитьМаксимальныйРазмерЧастиВБайтах();	
	КоличествоЧастей = Цел(РазмерФайла / РазмерЧасти) + ?(РазмерФайла % РазмерЧасти = 0, 0, 1);
	
	Возврат КоличествоЧастей;
	
КонецФункции

Функция СохранитьПолученнуюЧастьФайла(Знач КаталогЗагрузки, Знач ДанныеФайла, Знач ТекущаяЧасть)
	
	ИмяФайлаТекущейЧасти = КаталогЗагрузки + СтрШаблон("file.part%1", Формат(ТекущаяЧасть, "ЧН=''; ЧГ="));
	ДанныеФайла.Записать(ИмяФайлаТекущейЧасти);
	
	Возврат ИмяФайлаТекущейЧасти;
	
КонецФункции

Функция ПолучитьРазмерФайла(Знач Соединение, Знач ПутьНаСервере)
	
	РазмерФайла = 0;
	
	Попытка
		СистемнаяИнформация = Новый СистемнаяИнформация;	
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии("8.3.6.2146", СистемнаяИнформация.ВерсияПриложения) > 0 Тогда
			
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Range", "bytes=0-1");
			
			Запрос = Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
			Ответ = Соединение.Получить(Запрос);
			РазмерФайла = Число(СтрРазделить(Ответ.Заголовки["Content-Range"], "/")[1]);
		Иначе
			Запрос = Новый HTTPЗапрос(ПутьНаСервере);
			Ответ = Соединение.ПолучитьЗаголовки(Запрос);
			
			Если Ответ.КодСостояния = 200 Тогда
				Если Ответ.Заголовки.Получить("Content-Length") <> Неопределено Тогда
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Ответ.Заголовки["Content-Length"]) Тогда
						РазмерФайла = Число(Ответ.Заголовки["Content-Length"]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Электронный документооборот с контролирующими органами. Скачивание файла'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;

	Возврат РазмерФайла;

КонецФункции

Функция ПолучитьСледующуюЧастьФайла(Знач Соединение, Знач ПутьНаСервере, Знач РазмерФайла, Знач ТекущаяЧасть) Экспорт
	
	РазмерЧасти = ПолучитьМаксимальныйРазмерЧастиВБайтах();	
	КоличествоЧастей = Цел(РазмерФайла / РазмерЧасти) + ?(РазмерФайла % РазмерЧасти = 0, 0, 1);
	
	Конец = ТекущаяЧасть * РазмерЧасти - 1;
	Начало = Конец + 1 - РазмерЧасти;
	Конец = ?(Конец > РазмерФайла - 1, РазмерФайла - 1, Конец);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Range", СтрШаблон("bytes=%1-%2", Формат(Начало, "ЧН=''; ЧГ="), Формат(Конец, "ЧН=''; ЧГ=")));
	
	Запрос = Новый HTTPЗапрос(ПутьНаСервере, Заголовки);

	Результат = Новый Структура;
	Результат.Вставить("Ответ", Соединение.Получить(Запрос));
	Результат.Вставить("Конец", Конец);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМаксимальныйРазмерЧастиВБайтах()
	
	Возврат 1048576; // 1 МБ
	
КонецФункции

Функция ЭтоФоновоеЗадание()
	
	Возврат ТекущийРежимЗапуска() = Неопределено;
	
КонецФункции

Процедура ИзменитьПрогрессЗагрузки(Загружено, ВсегоКЗагрузке)
	
	Если ЭтоФоновоеЗадание() Тогда
		Прогресс = Новый Структура;
		Прогресс.Вставить("ВсегоКЗагрузке", ВсегоКЗагрузке);
		Прогресс.Вставить("Загружено", Загружено);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, Прогресс);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("#JSON#:" + ЗаписьJSON.Закрыть());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
