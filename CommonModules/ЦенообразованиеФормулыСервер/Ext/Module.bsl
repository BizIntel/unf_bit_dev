
#Область СлужебныеПроцедурыИФункции

#Область КонстантныеЗначения

Функция СтрокаКонцаОперанда() Экспорт
	
	Возврат "]";
	
КонецФункции

Функция СтрокаНачалаОперанда() Экспорт
	
	Возврат "[";
	
КонецФункции

Функция МассивЗарезирвированныхСлов()
	
	МассивЗарезирвированныхОперандов = Новый Массив;
	
	МассивЗарезирвированныхОперандов.Добавить("ТекущееЗначение");
	МассивЗарезирвированныхОперандов.Добавить("ПоследняяЦенаВПриходе");
	МассивЗарезирвированныхОперандов.Добавить("ПоследняяЦенаВРасходе");
	МассивЗарезирвированныхОперандов.Добавить("КурсДоллара");
	МассивЗарезирвированныхОперандов.Добавить("КурсЕвро");
	МассивЗарезирвированныхОперандов.Добавить("Себестоимость");
	МассивЗарезирвированныхОперандов.Добавить("СебестоимостьНацВалюта");
	
	Возврат МассивЗарезирвированныхОперандов;
	
КонецФункции

Функция ЭтоЗарезервированныйОперанд(Операнд)
	
	ЭтоЗарезервированныйОперанд = Ложь;
	
	ЗарезервированныеСлова = МассивЗарезирвированныхСлов();
	
	Идентификатор = СтрЗаменить(Операнд, СтрокаНачалаОперанда(), "");
	Идентификатор = СтрЗаменить(Идентификатор, СтрокаКонцаОперанда(), "");
	
	ЭлементМассива = ЗарезервированныеСлова.Найти(Идентификатор);
	
	Возврат (Идентификатор <> Неопределено);
	
КонецФункции

#КонецОбласти

#Область Формулы

Функция ПолучитьТаблицуОперандовФормулы(Формула) Экспорт
	
	Операнды = Новый ТаблицаЗначений;
	Операнды.Колонки.Добавить("Операнд");
	Операнды.Колонки.Добавить("ВидЦен");
	Операнды.Колонки.Добавить("ЭтоЦеныНоменклатуры");
	
	ТекстФормулы = СокрЛП(Формула);
	
	СимволНачалоОперанда= СтрокаНачалаОперанда();
	СимволКонецОперанда	= СтрокаКонцаОперанда();
	
	КоличествоОперандов = СтрЧислоВхождений(ТекстФормулы, СимволНачалоОперанда);
	Пока КоличествоОперандов > 0 Цикл
		
		НачалоОперанда	= Найти(ТекстФормулы, СимволНачалоОперанда);
		КонецОперанда	= Найти(ТекстФормулы, СимволКонецОперанда);
		
		Операнд 		= Сред(ТекстФормулы, НачалоОперанда, КонецОперанда - НачалоОперанда + 1);
		Идентификатор	= СтрЗаменить(СтрЗаменить(Операнд, СимволНачалоОперанда, ""), СимволКонецОперанда, "");
		Результат		= НайтиВидЦенПоИдентификатору(Идентификатор);
		
		НовыйОперанд = Операнды.Добавить();
		НовыйОперанд.Операнд			= Операнд;
		НовыйОперанд.ВидЦен 			= Результат.ВидЦен;
		НовыйОперанд.ЭтоЦеныНоменклатуры= Результат.ЭтоЦеныНоменклатуры;
		
		КоличествоОперандов = КоличествоОперандов - СтрЧислоВхождений(ТекстФормулы, Операнд);
		ТекстФормулы 		= СтрЗаменить(ТекстФормулы, Операнд, "");
		
	КонецЦикла;
	
	Возврат Операнды;
	
КонецФункции

Функция НайтиВидЦенПоИдентификатору(Идентификатор, ИсключаяСсылку = Неопределено) Экспорт
	
	Результат = Новый Структура("ИдентификаторЗанят, ВидЦен, ЭтоЦеныНоменклатуры", Ложь, Неопределено, Неопределено);
	
	Запрос = Новый Запрос(
	"Выбрать Справочник.ВидыЦен.Ссылка КАК ВидЦен, Истина ЭтоЦеныНоменклатуры Где Справочник.ВидыЦен.ИдентификаторФормул = &Идентификатор
	|Объединить Все 
	|Выбрать Справочник.ВидыЦенКонтрагентов.Ссылка, Ложь Где Справочник.ВидыЦенКонтрагентов.ИдентификаторФормул = &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ИсключаяСсылку = Выборка.ВидЦен Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Результат.ИдентификаторЗанят	= Истина;
		Результат.ВидЦен 				= Выборка.ВидЦен;
		Результат.ЭтоЦеныНоменклатуры	= Выборка.ЭтоЦеныНоменклатуры;
		
	КонецЦикла;
	
	Если НЕ Результат.ИдентификаторЗанят Тогда
	
		ЗарезервированныеСлова = МассивЗарезирвированныхСлов();
		
		ЭлементМассива = ЗарезервированныеСлова.Найти(Идентификатор);
		
		Если ЭлементМассива <> Неопределено Тогда
			
			Результат.ИдентификаторЗанят	= Истина;
			Результат.ВидЦен 				= Неопределено;
			Результат.ЭтоЦеныНоменклатуры	= Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОкруглитьЧислоПоПравилу(Число, ОкруглятьВБольшуюСторону, ПравилоОкругления) Экспорт
	Перем Результат; // Возвращаемый результат.
	
	Если НЕ ЗначениеЗаполнено(Число) Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Если ОкруглятьВБольшуюСторону <> Истина
		И ОкруглятьВБольшуюСторону <> Ложь Тогда
		
		ОкруглятьВБольшуюСторону = Ложь;
		
	КонецЕсли;
	
	ПорядокОкругления0_01 = Перечисления.ПорядкиОкругления.Окр0_01;
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	ПорядокОкругления	= ?(ЗначениеЗаполнено(ПравилоОкругления), ПравилоОкругления, ПорядокОкругления0_01);
	Порядок 			= Число(Строка(ПорядокОкругления));
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону = Истина Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦенуПоПравилам()

Процедура СформироватьНовыйИдентификаторВидаЦен(Идентификатор, ВидЦенНаименование, ВидЦенВладелец = "") Экспорт
	
	Если ПустаяСтрока(ВидЦенНаименование) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Идентификатор = Строка(ВидЦенВладелец) + Строка(ВидЦенНаименование);
	
	ДлинаСтроки = СтрДлина(Идентификатор);
	Пока ДлинаСтроки > 0 Цикл
		
		КодСимвола = КодСимвола(Идентификатор, ДлинаСтроки);
		
		Если НЕ ((КодСимвола >= 48 И КодСимвола <= 57) // Числа 
			ИЛИ (КодСимвола >= 65 И КодСимвола <= 90) // Лат. заглавные
			ИЛИ (КодСимвола >= 97 И КодСимвола <= 122) // Лат. прописные
			ИЛИ (КодСимвола >= 1040 И КодСимвола <= 1103)) // Кирилица
			Тогда
			
			Идентификатор = Сред(Идентификатор, 1, ДлинаСтроки - 1) + Сред(Идентификатор, ДлинаСтроки + 1);
			
		КонецЕсли;
		
		ДлинаСтроки = ДлинаСтроки - 1;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Идентификатор) Тогда
		
		Идентификатор = НСтр("ru ='ИдентификаторВидаЦен'");
		
	КонецЕсли;
	
	// первым символом должна быть буква
	КодСимвола = КодСимвола(Идентификатор, 1);
	Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
		
		Идентификатор = "a" + Идентификатор;
		
	КонецЕсли;
	
	Постфикс = 0;
	ИдентификаторТело = Идентификатор;
	Пока НайтиВидЦенПоИдентификатору(Идентификатор).ИдентификаторЗанят Цикл
		
		Постфикс = Постфикс + 1;
		Идентификатор = ИдентификаторТело + Строка(Постфикс);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьФормулу(Ошибки, Формула) Экспорт
	Перем СоответствиеОперандов, РасчетныеДанные;
	
	ЗначениеВсехОперандов = 10; // При проверке формулы значения всех операндов принимаем равным 10
	
	ТекстФормулы = СокрЛП(Формула);
	Если СтрЧислоВхождений(ТекстФормулы, ЦенообразованиеФормулыСервер.СтрокаНачалаОперанда()) <> СтрЧислоВхождений(ТекстФормулы, ЦенообразованиеФормулыСервер.СтрокаКонцаОперанда()) Тогда
		
		ТекстОшибки = НСтр("ru ='Количество открытых операндов не равно количеству закрытых.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		
	КонецЕсли;
	
	Если СтрЧислоВхождений(ТекстФормулы, "(") <> СтрЧислоВхождений(ТекстФормулы, ")") Тогда
		
		ТекстОшибки = НСтр("ru ='Количество открытых скобок не равно количеству закрытых.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		
	КонецЕсли;
	
	ТаблицаОперандов = ЦенообразованиеФормулыСервер.ПолучитьТаблицуОперандовФормулы(Формула);
	Для каждого Строка Из ТаблицаОперандов Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.ВидЦен) Тогда
			
			Если НЕ ЭтоЗарезервированныйОперанд(Строка.Операнд) Тогда
			
				ТекстОшибки = НСтр("ru ='Не распознан операнд %1.
										|Проверьте правильность написания формулы.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Операнд);
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьОперандВСтруктуру(СоответствиеОперандов, Строка.Операнд, ЗначениеВсехОперандов);
		
	КонецЦикла;
	
	РасчетДанныхПоФормуле(ТекстФормулы, СоответствиеОперандов, РасчетныеДанные);
		
	Если РасчетныеДанные.ОшибкаРасчета Тогда
		
		ТекстОшибки = НСтр("ru ='При расчете возникли ошибки. Проверьте правильность написания формулы.
			|Подробное описание: '") + Символы.ПС + РасчетныеДанные.ТекстОшибки;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОперандВСтруктуру(СоответствиеОперандов, Операнд, Значение) Экспорт
	
	Если ТипЗнч(СоответствиеОперандов) <> Тип("Соответствие") Тогда
		
		СоответствиеОперандов = Новый Соответствие;
		
	КонецЕсли;
	
	СоответствиеОперандов.Вставить(Операнд, Значение);
	
КонецПроцедуры

Процедура РасчетДанныхПоФормуле(Знач ФормулаСтрокой, СтруктураОперандов, РасчетныеДанные = Неопределено, ОкруглятьВБольшуюСторону = Неопределено, ПравилоОкругления = Неопределено) Экспорт
	
	Если РасчетныеДанные = Неопределено Тогда
		
		РасчетныеДанные = Новый Структура("Цена, ЕдиницаИзмерения, ОшибкаРасчета, ТекстОшибки", 0, Неопределено, Ложь)
		
	КонецЕсли;
	
	Для каждого Операнд Из СтруктураОперандов Цикл
		
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, Операнд.Ключ, Операнд.Значение);
		
	КонецЦикла;
	
	Попытка
		
		РассчитанаяЦена = Вычислить(ФормулаСтрокой);
		
		Если ЗначениеЗаполнено(РассчитанаяЦена)
			И ЗначениеЗаполнено(ОкруглятьВБольшуюСторону)
			И ЗначениеЗаполнено(ПравилоОкругления) Тогда
			
			РасчетныеДанные.Цена = ОкруглитьЧислоПоПравилу(РассчитанаяЦена, ОкруглятьВБольшуюСторону, ПравилоОкругления);
			
		Иначе
			
			РасчетныеДанные.Цена = 0;
			
		КонецЕсли;
		
		ЗначениеЕдиницаИзмерения = СтруктураОперандов.Получить("ЕдиницаИзмерения");
		Если ЗначениеЗаполнено(ЗначениеЕдиницаИзмерения) Тогда
			
			РасчетныеДанные.ЕдиницаИзмерения = ЗначениеЕдиницаИзмерения;
			
		КонецЕсли;
		
	Исключение
		
		РасчетныеДанные.ОшибкаРасчета	= Истина;
		РасчетныеДанные.ТекстОшибки		= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПодготовитьДанныеСтрокиКоллекции(СоответствиеОперандов, СтрокаКоллекции, ТаблицаОперандов) Экспорт 
	
	Для каждого СтрокаОперанда Из ТаблицаОперандов Цикл
		
		Значение		= 0;
		
		Если СтрокаОперанда.ЭтоЦеныНоменклатуры <> Неопределено Тогда
			
			Значение 			= СтрокаКоллекции["Значение_" + СтрокаОперанда.ВидЦен.ИдентификаторФормул];
			ЕдиницаИзмерения	= СтрокаКоллекции["ЕдиницаИзмерения_" + СтрокаОперанда.ВидЦен.ИдентификаторФормул];
			
		ИначеЕсли СтрокаОперанда.Операнд = "[ПоследняяЦенаВПриходе]" Тогда
			
			Значение 			= СтрокаКоллекции["Значение_ПоследняяЦенаВПриходе"];
			ЕдиницаИзмерения	= СтрокаКоллекции["ЕдиницаИзмерения_ПоследняяЦенаВПриходе"];
			
		ИначеЕсли СтрокаОперанда.Операнд = "[ПоследняяЦенаВРасходе]" Тогда
			
			Значение 			= СтрокаКоллекции["Значение_ПоследняяЦенаВРасходе"];
			ЕдиницаИзмерения	= СтрокаКоллекции["ЕдиницаИзмерения_ПоследняяЦенаВРасходе"];
			
		ИначеЕсли СтрокаОперанда.Операнд = "[Себестоимость]" Тогда
			
			Значение 			= СтрокаКоллекции["Значение_Себестоимость"];
			ЕдиницаИзмерения	= СтрокаКоллекции["ЕдиницаИзмерения_Себестоимость"];
			
		ИначеЕсли СтрокаОперанда.Операнд = "[СебестоимостьНацВалюта]" Тогда
			
			Значение 			= СтрокаКоллекции["Значение_СебестоимостьНацВалюта"];
			ЕдиницаИзмерения	= СтрокаКоллекции["ЕдиницаИзмерения_СебестоимостьНацВалюта"];
			
		ИначеЕсли СтрокаОперанда.Операнд = "[ТекущееЗначение]" Тогда
			
			Значение 			= СтрокаКоллекции["ТекущееЗначение"];
			ЕдиницаИзмерения	= СтрокаКоллекции.Номенклатура.ЕдиницаИзмерения;
		Иначе
			
			Значение 			= СтрокаОперанда.Значение;
			ЕдиницаИзмерения	= СтрокаКоллекции.Номенклатура.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Значение) Тогда
			
			Значение = Формат(Число(Значение), "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
			
		Иначе
			
			Значение = 0;
			
		КонецЕсли;
		
		СоответствиеОперандов.Вставить(СтрокаОперанда.Операнд, Значение);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмерения)
			И СоответствиеОперандов.Получить("ЕдиницаИзмерения") = Неопределено Тогда
			
			СоответствиеОперандов.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТранспонироватьТаблицыКоллекцийИОперандов(КоллекцияНоменклатуры, ТаблицаОперандов, СоответствиеОперандов, ИспользуетсяТекущееЗначение, ЭтоКоллекцияСИндексами)
	
	ИменаПараметров				= "";
	Запрос						= Новый Запрос;
	
	Шаблон_ПараметрВидЦен = 
	"ВЫБРАТЬ 
	|	КоллекцияЗначенийПараметра.Номенклатура
	|	,КоллекцияЗначенийПараметра.Характеристика
	|	,КоллекцияЗначенийПараметра.Значение КАК Значение
	|	,КоллекцияЗначенийПараметра.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ КоллекцияЗначенийПараметра
	|ИЗ
	|	&КоллекцияЗначенийПараметра КАК КоллекцияЗначенийПараметра 
	|
	|ГДЕ
	|	КоллекцияЗначенийПараметра.ВидЦен = &ИмяПараметраВидЦен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КоллекцияЗначенийПараметра.Номенклатура, 
	|	КоллекцияЗначенийПараметра.Характеристика;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Шаблон_ПараметрЛевоеСоединение = "
	|	ЛЕВОЕ СОЕДИНЕНИЕ КоллекцияЗначенийПараметра КАК КоллекцияЗначенийПараметра
	|	ПО КоллекцияНоменклатуры.Номенклатура = КоллекцияЗначенийПараметра.Номенклатура
	|		И КоллекцияНоменклатуры.Характеристика = КоллекцияЗначенийПараметра.Характеристика
	|";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КоллекцияНоменклатуры.Период
	|	,КоллекцияНоменклатуры.ВидЦен
	|	,КоллекцияНоменклатуры.Номенклатура
	|	,КоллекцияНоменклатуры.Характеристика
	|	,КоллекцияНоменклатуры.Цена
	|	,КоллекцияНоменклатуры.ТекущееЗначение
	|	,КоллекцияНоменклатуры.КлючСвязиНоменклатура
	|	,КоллекцияНоменклатуры.КлючСвязиХарактеристика
	|	,КоллекцияНоменклатуры.Актуальность
	|	,КоллекцияНоменклатуры.ЕдиницаИзмерения
	|	,КоллекцияНоменклатуры.ВключаяХарактеристики
	|	,КоллекцияНоменклатуры.Автор
	|	,КоллекцияНоменклатуры.ПересчетВыполнен
	|ПОМЕСТИТЬ КоллекцияНоменклатуры
	|ИЗ
	|	&КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КоллекцияНоменклатуры.Номенклатура
	|	,КоллекцияНоменклатуры.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоллекцияНоменклатуры.Период
	|	,КоллекцияНоменклатуры.ВидЦен
	|	,КоллекцияНоменклатуры.Номенклатура
	|	,КоллекцияНоменклатуры.Характеристика
	|	,КоллекцияНоменклатуры.Цена
	|	,КоллекцияНоменклатуры.ТекущееЗначение
	|	,КоллекцияНоменклатуры.КлючСвязиНоменклатура
	|	,КоллекцияНоменклатуры.КлючСвязиХарактеристика
	|	,КоллекцияНоменклатуры.Актуальность
	|	,КоллекцияНоменклатуры.ЕдиницаИзмерения
	|	,КоллекцияНоменклатуры.ВключаяХарактеристики
	|	,КоллекцияНоменклатуры.Автор
	|	,КоллекцияНоменклатуры.ПересчетВыполнен
	|	,&ИменаПараметров
	|ИЗ
	|	КоллекцияНоменклатуры КАК КоллекцияНоменклатуры";
	
	Если НЕ ИспользуетсяТекущееЗначение Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",КоллекцияНоменклатуры.ТекущееЗначение", "");
		
	КонецЕсли;
	
	Если НЕ ЭтоКоллекцияСИндексами Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",КоллекцияНоменклатуры.КлючСвязиНоменклатура", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",КоллекцияНоменклатуры.КлючСвязиХарактеристика", "");
		
	КонецЕсли;
	
	Для каждого СтрокаОперанда Из ТаблицаОперандов Цикл
		
		СоответствиеОперандов.Вставить(СтрокаОперанда.Операнд, 0);
		
		Если ТипЗнч(СтрокаОперанда.Значение) = Тип("ТаблицаЗначений") Тогда
			
			Если СтрокаОперанда.ЭтоЦеныНоменклатуры <> Неопределено Тогда
				
				Идентификатор = СтрокаОперанда.ВидЦен.ИдентификаторФормул;
				Запрос.УстановитьПараметр("Параметр_" + Идентификатор, СтрокаОперанда.ВидЦен);
				
				ТекстЗапросаКоллекцияПараметров = СтрЗаменить(Шаблон_ПараметрВидЦен, "&ИмяПараметраВидЦен", "&Параметр_" + Идентификатор);
				
			ИначеЕсли СтрокаОперанда.Операнд = "[ПоследняяЦенаВПриходе]" Тогда
				
				Идентификатор = "ПоследняяЦенаВПриходе";
				
				УдаляемыйТекст = "ГДЕ
								|	КоллекцияЗначенийПараметра.ВидЦен = &ИмяПараметраВидЦен";
				ТекстЗапросаКоллекцияПараметров = СтрЗаменить(Шаблон_ПараметрВидЦен, УдаляемыйТекст, "");
				
			ИначеЕсли СтрокаОперанда.Операнд = "[ПоследняяЦенаВРасходе]" Тогда
				
				Идентификатор = "ПоследняяЦенаВРасходе";
				
				УдаляемыйТекст = "ГДЕ
								|	КоллекцияЗначенийПараметра.ВидЦен = &ИмяПараметраВидЦен";
				ТекстЗапросаКоллекцияПараметров = СтрЗаменить(Шаблон_ПараметрВидЦен, УдаляемыйТекст, "");
				
			ИначеЕсли СтрокаОперанда.Операнд = "[Себестоимость]" Тогда
				
				Идентификатор = "Себестоимость";
				
				УдаляемыйТекст = "ГДЕ
								|	КоллекцияЗначенийПараметра.ВидЦен = &ИмяПараметраВидЦен";
				ТекстЗапросаКоллекцияПараметров = СтрЗаменить(Шаблон_ПараметрВидЦен, УдаляемыйТекст, "");
				
			ИначеЕсли СтрокаОперанда.Операнд = "[СебестоимостьНацВалюта]" Тогда
				
				КурсВалютыУчета = ТаблицаОперандов.Найти("[КурсВалютыУчета]", "Операнд").Значение;
				
				Если НЕ ЗначениеЗаполнено(КурсВалютыУчета) Тогда
					
					КурсВалютыУчета = 1;
					
				КонецЕсли;
				
				Идентификатор = "СебестоимостьНацВалюта";
				
				УдаляемыйТекст = "ГДЕ
								|	КоллекцияЗначенийПараметра.ВидЦен = &ИмяПараметраВидЦен";
				ТекстЗапросаКоллекцияПараметров = СтрЗаменить(Шаблон_ПараметрВидЦен, УдаляемыйТекст, "");
				
				ЗаменяемаяСтрокаЗапроса = ",КоллекцияЗначенийПараметра.Значение КАК Значение";
				НоваяСтрокаЗапроса = ",КоллекцияЗначенийПараметра.Значение * &КурсВалютыУчета КАК Значение";
				ТекстЗапросаКоллекцияПараметров = СтрЗаменить(ТекстЗапросаКоллекцияПараметров, ЗаменяемаяСтрокаЗапроса, НоваяСтрокаЗапроса);
				Запрос.УстановитьПараметр("КурсВалютыУчета", КурсВалютыУчета);
				
			КонецЕсли;
			
			ТекстЗапросаКоллекцияПараметров = СтрЗаменить(ТекстЗапросаКоллекцияПараметров, "КоллекцияЗначенийПараметра", Идентификатор);
			Если СтрокаОперанда.ЭтоЦеныНоменклатуры = Ложь Тогда
				
				ПараметрТаблицаЗначения = СтрокаОперанда.Значение.Скопировать();
				ПараметрТаблицаЗначения.Колонки.ВидЦенКонтрагента.Имя = "ВидЦен";
				Запрос.УстановитьПараметр(Идентификатор, ПараметрТаблицаЗначения);
				
			Иначе
				
				Запрос.УстановитьПараметр(Идентификатор, СтрокаОперанда.Значение);
				
			КонецЕсли;
			
			ТекстЗапросаЛевоеСоединение = СтрЗаменить(Шаблон_ПараметрЛевоеСоединение, "КоллекцияЗначенийПараметра", Идентификатор);
			
			ИменаПараметров = ИменаПараметров + ?(ПустаяСтрока(ИменаПараметров), "", ",	") +
				Идентификатор + ".Значение КАК Значение_" + Идентификатор + "
				|	, " + Идентификатор + ".ЕдиницаИзмерения КАК ЕдиницаИзмерения_" + Идентификатор;
			
			Запрос.Текст = ТекстЗапросаКоллекцияПараметров + Запрос.Текст + ТекстЗапросаЛевоеСоединение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ИменаПараметров) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&ИменаПараметров", "");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИменаПараметров", ИменаПараметров);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
	
	КоллекцияНоменклатуры = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

Процедура РасчитатьДанныеКоллекции(Формула, КоллекцияНоменклатуры, ТаблицаОперандов, ВидЦен, ИспользуетсяТекущееЗначение = Ложь, ЭтоКоллекцияСИндексами = Ложь) Экспорт
	Перем ОкруглятьВБольшуюСторону, ПравилоОкругления;
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ОкруглятьВБольшуюСторону = ВидЦен.ОкруглятьВБольшуюСторону;
		ПравилоОкругления = ВидЦен.ПорядокОкругления;
		
	КонецЕсли;
	
	АвторизованныйПользователь	= Пользователи.АвторизованныйПользователь();
	
	СоответствиеОперандов		= Новый Соответствие;
	ТранспонироватьТаблицыКоллекцийИОперандов(КоллекцияНоменклатуры, ТаблицаОперандов, СоответствиеОперандов, ИспользуетсяТекущееЗначение, ЭтоКоллекцияСИндексами);
	
	КоличествоЗаписей = КоллекцияНоменклатуры.Количество();
	Пока КоличествоЗаписей > 0 Цикл
		
		СтрокаКоллекции = КоллекцияНоменклатуры.Получить(КоличествоЗаписей - 1);
		
		Если КоллекцияНоменклатуры.Колонки.Найти("Автор") <> Неопределено Тогда
			
			СтрокаКоллекции.Автор = АвторизованныйПользователь;
			
		КонецЕсли;
		
		Если СтрокаКоллекции.Цена = 0 Тогда
			
			СоответствиеОперандов.Очистить();
			
			ПодготовитьДанныеСтрокиКоллекции(СоответствиеОперандов, СтрокаКоллекции, ТаблицаОперандов);
			
			РасчетныеДанные = Неопределено;
			ЦенообразованиеФормулыСервер.РасчетДанныхПоФормуле(Формула, СоответствиеОперандов, РасчетныеДанные, ОкруглятьВБольшуюСторону, ПравилоОкругления);
			
			СтрокаКоллекции.Цена = РасчетныеДанные.Цена;
			Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.ЕдиницаИзмерения) Тогда
				
				СтрокаКоллекции.ЕдиницаИзмерения = РасчетныеДанные.ЕдиницаИзмерения;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЭтоКоллекцияСИндексами 
			И НЕ ЗначениеЗаполнено(СтрокаКоллекции.Цена) Тогда
			
			КоллекцияНоменклатуры.Удалить(СтрокаКоллекции);
			
		КонецЕсли;
		
		КоличествоЗаписей = КоличествоЗаписей - 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


