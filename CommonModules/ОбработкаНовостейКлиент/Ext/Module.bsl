////////////////////////////////////////////////////////////////////////////////
// Подсистема "Новости".
// ОбщийМодуль.ОбработкаНовостейКлиент.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСоСпискомНовостей

// Процедура показывает список значений новостей, из которого можно открыть новость или перейти к списку новостей.
//
// Параметры:
//  ФормаВладелец      - Управляемая форма, в которой нужно открыть список значений;
//  СписокЛентНовостей - Список значений, Массив или Неопределено - в каких лентах новостей искать новость;
//  ИмяМетаданных      - Строка - имя метаданных, обязательная часть идентификатора новости;
//  ИмяФормы           - Строка или Неопределено - имя формы, необязательная часть идентификатора новости;
//  ИмяСобытия         - Строка или Неопределено - имя события, необязательная часть идентификатора новости;
//  ПараметрыОткрытия  - Структура - структура, передаваемая форме контекстных новостей с ключами:
//    * ЗаголовокФормы                - Строка - заголовок формы контекстных новостей;
//    * СкрыватьКолонкуЛентаНовостей  - Булево - Истина, если надо скрыть колонку "ЛентаНовостей";
//    * СкрыватьКолонкуПодзаголовок   - Булево - Истина, если надо скрыть колонку "Подзаголовок";
//    * СкрыватьКолонкуДатаПубликации - Булево - Истина, если надо скрыть колонку "ДатаПубликации";
//    * ПоказыватьПанельНавигации     - Булево - Истина, если надо показать гиперссылку перехода к списку всех новостей;
//    * РежимОткрытияОкна             - Строка - режим открытия окна ("Независимый", "Блокировать окно владельца" (по-умолчанию), "Блокировать весь интерфейс").
//
Процедура ПоказатьКонтекстныеНовости(
			ФормаВладелец,
			СписокЛентНовостей = Неопределено,
			ЗНАЧ ИмяМетаданных,
			ЗНАЧ ИмяФормы = Неопределено,
			ЗНАЧ ИмяСобытия = Неопределено,
			ПараметрыОткрытияФормы = Неопределено) Экспорт

	НовыеПараметрыОткрытияФормы = Новый Структура("СписокЛентНовостей, ИмяМетаданных, ИмяФормы, ИмяСобытия",
		СписокЛентНовостей,
		?(ИмяМетаданных = Неопределено, "", ИмяМетаданных), // Если не преобразовать Неопределено в "", то форма откроется > 1 раза для одинаковых ключевых параметров и ключа уникальности.
		?(ИмяФормы = Неопределено, "", ИмяФормы), // Если не преобразовать Неопределено в "", то форма откроется > 1 раза для одинаковых ключевых параметров и ключа уникальности.
		?(ИмяСобытия = Неопределено, "", ИмяСобытия)); // Если не преобразовать Неопределено в "", то форма откроется > 1 раза для одинаковых ключевых параметров и ключа уникальности.

	ТипСтрока    = Тип("Строка");
	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(ПараметрыОткрытияФормы) = ТипСтруктура Тогда
		Если ПараметрыОткрытияФормы.Свойство("ЗаголовокФормы")
				И ТипЗнч(ПараметрыОткрытияФормы.ЗаголовокФормы) = ТипСтрока
				И НЕ ПустаяСтрока(ПараметрыОткрытияФормы.ЗаголовокФормы) Тогда
			НовыеПараметрыОткрытияФормы.Вставить("ЗаголовокФормы", ПараметрыОткрытияФормы.ЗаголовокФормы);
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("СкрыватьКолонкуДатаПубликации")
				И ПараметрыОткрытияФормы.СкрыватьКолонкуДатаПубликации = Истина Тогда
			НовыеПараметрыОткрытияФормы.Вставить("СкрыватьКолонкуДатаПубликации", ПараметрыОткрытияФормы.СкрыватьКолонкуДатаПубликации);
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("СкрыватьКолонкуПодзаголовок")
				И ПараметрыОткрытияФормы.СкрыватьКолонкуПодзаголовок = Истина Тогда
			НовыеПараметрыОткрытияФормы.Вставить("СкрыватьКолонкуПодзаголовок", ПараметрыОткрытияФормы.СкрыватьКолонкуПодзаголовок);
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("СкрыватьКолонкуЛентаНовостей")
				И ПараметрыОткрытияФормы.СкрыватьКолонкуЛентаНовостей = Истина Тогда
			НовыеПараметрыОткрытияФормы.Вставить("СкрыватьКолонкуЛентаНовостей", ПараметрыОткрытияФормы.СкрыватьКолонкуЛентаНовостей);
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("ПоказыватьПанельНавигации")
				И ПараметрыОткрытияФормы.ПоказыватьПанельНавигации = Истина Тогда
			НовыеПараметрыОткрытияФормы.Вставить("ПоказыватьПанельНавигации", ПараметрыОткрытияФормы.ПоказыватьПанельНавигации);
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("РежимОткрытияОкна") Тогда
			Если ТипЗнч(ПараметрыОткрытияФормы.РежимОткрытияОкна) = ТипСтрока Тогда
				НовыеПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", ПараметрыОткрытияФормы.РежимОткрытияОкна);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ИмяФормы = "Справочник.Новости.Форма.ФормаКонтекстныхНовостей"; // ИмяФормы
	ОбработкаНовостейКлиентПереопределяемый.ПереопределитьПараметрыОткрытияФормыСпискаКонтекстныхНовостей(ИмяФормы, НовыеПараметрыОткрытияФормы);

	ФормаКонтекстныхНовостей = ОткрытьФорму(
		ИмяФормы, // ИмяФормы
		НовыеПараметрыОткрытияФормы, // Параметры
		ФормаВладелец, // Владелец
		ИмяМетаданных); // Уникальность, если Ложь - то уникальность по-умолчанию

КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытий

// В процедуре прописываются вызовы процедур и функций, обязательные для чтения новостей.
// После обработки стандартных событий, управление передается в переопределяемый модуль.
//
// Параметры:
//  НовостьСсылка    - Ссылка на новость;
//  Форма            - Форма-владелец, откуда вызывается обработчик;
//  СписокПараметров - СписокЗначений - произвольный список параметров.
//
Процедура ОбработкаСобытия(НовостьСсылка, Форма, СписокПараметров) Экспорт

	ПропуститьПереопределение = Ложь;

	ТипСписокЗначений = Тип("СписокЗначений");

	Если ТипЗнч(СписокПараметров) = ТипСписокЗначений Тогда
		НайденноеДействие = ИнтернетПоддержкаПользователейКлиентСервер.НайтиЭлементСпискаЗначений(
			СписокПараметров,
			Новый Структура("ВариантПоиска, ЗначениеПоиска",
				"ПоПредставлениюБезУчетаРегистра",
				"Действие"));
		Если НайденноеДействие <> Неопределено Тогда
			Если НайденноеДействие.Значение = "ОткрытьОбработку" Тогда
				ОткрываемаяФорма = ИнтернетПоддержкаПользователейКлиентСервер.НайтиЭлементСпискаЗначений(
					СписокПараметров,
					Новый Структура("ВариантПоиска, ЗначениеПоиска",
						"ПоПредставлениюБезУчетаРегистра",
						"ИмяФормы"));
				Если ТипЗнч(ОткрываемаяФорма) = Тип("ЭлементСпискаЗначений") Тогда
					ОткрытьФорму(ОткрываемаяФорма.Значение);
				КонецЕсли;
				ПропуститьПереопределение = Истина;
			ИначеЕсли НайденноеДействие.Значение = "ОткрытьОбработкуОбновления" Тогда
				// ////? Реализовать запуск обработки обновления конфигурации
				ПропуститьПереопределение = Истина;
			ИначеЕсли НайденноеДействие.Значение = "Предупреждение" Тогда
				Текст = ИнтернетПоддержкаПользователейКлиентСервер.НайтиЭлементСпискаЗначений(
					СписокПараметров,
					Новый Структура("ВариантПоиска, ЗначениеПоиска",
						"ПоПредставлениюБезУчетаРегистра",
						"Текст"));
				Если ТипЗнч(Текст) = Тип("ЭлементСпискаЗначений") Тогда
					Текст = Текст.Значение;
					Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.НайтиЭлементСпискаЗначений(
						СписокПараметров,
						Новый Структура("ВариантПоиска, ЗначениеПоиска",
							"ПоПредставлениюБезУчетаРегистра",
							"Заголовок"));
					Если ТипЗнч(Заголовок) = Тип("ЭлементСпискаЗначений") Тогда
						Заголовок = Заголовок.Значение;
					Иначе
						Заголовок = НСтр("ru='Информация'");
					КонецЕсли;
					ПоказатьПредупреждение(
						,
						Текст,
						0,
						Заголовок);
				КонецЕсли;
				ПропуститьПереопределение = Истина;
			Иначе
				// Другие действия.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ОбработкаНовостейКлиентПереопределяемый.ОбработкаСобытия(НовостьСсылка, Форма, СписокПараметров);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойНовости

// Функция показывает новость в отдельном окне.
//
// Параметры:
//  НовостьСсылка            - СправочникСсылка.Новости - открываемая новость;
//  ПараметрыОткрытияФормы   - Структура - параметры открытия формы новости. Можно заполнять:
//                               - Ключ - Ссылка на новость;
//                               - РежимОткрытияОкна - или "БлокироватьОкноВладельца", или любое другое значение (которое будет воспринято как "Независимое").
//  ФормаВладелец            - Управляемая форма, из которой нужно открыть форму новости;
//  Уникальность             - Уникальность открываемой формы. Ложь для уникальности по-умолчанию.
//
// Возвращаемое значение:
//  Управляемая форма.
//
Функция ПоказатьНовость(
			НовостьСсылка,
			ПараметрыОткрытияФормы = Неопределено,
			ФормаВладелец = Неопределено,
			Уникальность = Ложь) Экспорт

	ТипСтруктура      = Тип("Структура");

	Если ТипЗнч(ПараметрыОткрытияФормы) <> ТипСтруктура Тогда
		ПараметрыОткрытияФормы = Новый Структура;
	КонецЕсли;

	Если НЕ ПараметрыОткрытияФормы.Свойство("Ключ") Тогда
		ПараметрыОткрытияФормы.Вставить("Ключ", НовостьСсылка);
	КонецЕсли;

	ИмяФормы = "Справочник.Новости.Форма.ФормаНовости"; // ИмяФормы
	ОбработкаНовостейКлиентПереопределяемый.ПереопределитьПараметрыОткрытияФормыНовости(ИмяФормы, ПараметрыОткрытияФормы);

	ФормаНовости = ОткрытьФорму(
		ИмяФормы, // ИмяФормы
		ПараметрыОткрытияФормы,
		ФормаВладелец, // Владелец
		Уникальность); // Уникальность, если Ложь - то уникальность по-умолчанию, Истина - нет проверки уникальности

	Возврат ФормаНовости;

КонецФункции

// Функция показывает несколько новостей в отдельном окне.
//
// Параметры:
//  ПараметрыОткрытияФормы   - Структура - параметры открытия формы новости. Можно заполнять:
//     * РежимОткрытияОкна    - или "БлокироватьОкноВладельца", или любое другое значение (которое будет воспринято как "Независимое");
//     * Заголовок            - Строка - Заголовок формы просмотра очень важных новостей;
//     * СписокНовостей       - Список значений - Список новостей (дополняет параметр "АдресМассиваНовостей").
//                              Если передан список новостей, то в нем не производится отбор по идентификатору формы или идентификатору события.
//     * АдресМассиваНовостей - Строка - Адрес временного хранилища с массивом структур новостей;
//     * ИдентификаторФормы   - Строка - идентификатор формы. Имеет смысл только вместе с параметром АдресМассиваНовостей;
//     * ИдентификаторСобытия - Строка - идентификатор события. Имеет смысл только вместе с параметром АдресМассиваНовостей.
//  ФормаВладелец            - Управляемая форма, из которой нужно открыть форму новости;
//  Уникальность             - Уникальность открываемой формы. Ложь для уникальности по-умолчанию.
//
// Возвращаемое значение:
//  Управляемая форма.
//
Функция ПоказатьНовости(
			ПараметрыОткрытияФормы = Неопределено,
			ФормаВладелец = Неопределено,
			Уникальность = Ложь) Экспорт

	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(ПараметрыОткрытияФормы) <> ТипСтруктура Тогда
		ПараметрыОткрытияФормы = Новый Структура;
	КонецЕсли;

	ИмяФормы = "Справочник.Новости.Форма.ФормаНовостейСоСписком"; //"Справочник.Новости.Форма.ФормаНовостей", // ИмяФормы
	ОбработкаНовостейКлиентПереопределяемый.ПереопределитьПараметрыОткрытияФормыСпискаОченьВажныхКонтекстныхНовостей(ИмяФормы, ПараметрыОткрытияФормы);

	ФормаНовостей = ОткрытьФорму(
		ИмяФормы, // ИмяФормы
		ПараметрыОткрытияФормы,
		ФормаВладелец, // Владелец
		Уникальность); // Уникальность, если Ложь - то уникальность по-умолчанию, Истина - нет проверки уникальности

	Возврат ФормаНовостей;

КонецФункции

// Функция показывает основную форму новостей с возможностью позиционирования на папке.
//
// Параметры:
//  ПараметрыОткрытияФормы   - Структура - параметры открытия формы новости. Можно заполнять:
//     * АктивироватьПапку_ВариантОтбора  - Число - 0 (позиционироваться на "Все новости") или 1 (позиционироваться на выбранной ленте новостей);
//     * АктивироватьПапку_ЗначениеОтбора - Неопределено, СправочникСсылка.ЛентыНовостей - значение ленты новостей (Если выбран вариант позиционирования 1).
//  ФормаВладелец            - Управляемая форма, из которой нужно открыть форму новости;
//  Уникальность             - Уникальность открываемой формы. Ложь для уникальности по-умолчанию.
//
// Возвращаемое значение:
//  Управляемая форма.
//
Функция ПоказатьОсновнуюФормуНовостей(
			ПараметрыОткрытияФормы = Неопределено,
			ФормаВладелец = Неопределено,
			Уникальность = Ложь) Экспорт

	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(ПараметрыОткрытияФормы) <> ТипСтруктура Тогда
		ПараметрыОткрытияФормы = Новый Структура;
	КонецЕсли;

	ИмяФормы = "Справочник.Новости.Форма.ФормаПросмотраНовостей"; // ИмяФормы

	ФормаНовостей = ОткрытьФорму(
		ИмяФормы, // ИмяФормы
		ПараметрыОткрытияФормы,
		ФормаВладелец, // Владелец
		Уникальность); // Уникальность, если Ложь - то уникальность по-умолчанию, Истина - нет проверки уникальности
	Если ФормаНовостей.ЭтоПовторноеОткрытие = Истина Тогда
		Если ПараметрыОткрытияФормы.Свойство("АктивироватьПапку_ВариантОтбора")
				И ПараметрыОткрытияФормы.Свойство("АктивироватьПапку_ЗначениеОтбора") Тогда
			ФормаНовостей.НайтиИАктивизироватьПапку(Новый Структура("ВариантОтбора, ЗначениеОтбора",
				ПараметрыОткрытияФормы.АктивироватьПапку_ВариантОтбора,
				ПараметрыОткрытияФормы.АктивироватьПапку_ЗначениеОтбора));
		КонецЕсли;
	КонецЕсли;

	Возврат ФормаНовостей;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПриНачалеРаботыСистемы

// Процедура вызывается из модуля управляемого приложения,
//  затем ОбработкаНовостейКлиент.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостейВызовСервера.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостей.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостейПереопределяемый.ПриНачалеРаботыСистемы.
//
// Параметры:
//  Нет.
//
Процедура ПриНачалеРаботыСистемы() Экспорт

	// Подключение обработчика проверки новостей на клиенте.
	// В процедуре проверяется установка функциональной опции "Новости_РазрешенаРаботаСНовостями".
	ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях_ПервыйЗапуск();

	// Подключение обработчика оптимизации контекстных новостей, которые хранятся в кеше на клиенте
	//  (в случае, если в формах используется получение новостей не на сервере, а на клиенте).
	// В процедуре проверяется установка функциональной опции "Новости_РазрешенаРаботаСНовостями".
	ПодключитьОбработчикОптимизацииКонтекстныхНовостей();

	// Все серверные проверки вынесены в отдельную процедуру.
	ОбработкаНовостейВызовСервера.ПриНачалеРаботыСистемы();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриНачалеРаботыСистемы

// Процедура переподключает обработчик проверки загруженных новостей (которые уже находятся в справочнике Новости).
// Эта процедура должна запускаться только при старте программы, потом она сама подключает
//  другой обработчик - ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях.
//
// Параметры:
//  Нет.
//
Процедура ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях_ПервыйЗапуск()

	ТипЧисло = Тип("Число");

	ОтключитьОбработчикОжидания("ПроверитьВажныеНовостиСВключеннымиНапоминаниями_ПервыйЗапуск");

	Если ОбработкаНовостейКлиентПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		ИнтервалСекунд = 2;
		ОбработкаНовостейКлиентПереопределяемый.ПереопределитьВремяПервогоПоказаВажныхИОченьВажныхНовостейПриСтартеПрограммы(ИнтервалСекунд);
		Если (ТипЗнч(ИнтервалСекунд) = ТипЧисло)
				И (ИнтервалСекунд > 0) Тогда
			ПодключитьОбработчикОжидания("ПроверитьВажныеНовостиСВключеннымиНапоминаниями_ПервыйЗапуск", ИнтервалСекунд, Истина);
		Иначе
			// Этот обработчик должен быть подключен в любом случае.
			ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура переподключает обработчик проверки загруженных новостей (которые уже находятся в справочнике Новости).
//
// Параметры:
//  Нет.
//
Процедура ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях() Экспорт

	ОтключитьОбработчикОжидания("ПроверитьВажныеНовостиСВключеннымиНапоминаниями");

	Если ОбработкаНовостейКлиентПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		СтруктураНастроекПоказаНовостей = ОбработкаНовостейВызовСервера.ПолучитьНастройкиПоказаНовостейНастроенныеАдминистратором();
		ИнтервалАвтообновленияСекунд = 60 * СтруктураНастроекПоказаНовостей.СписокНовостей_ИнтервалАвтообновления;
		ПодключитьОбработчикОжидания("ПроверитьВажныеНовостиСВключеннымиНапоминаниями", ИнтервалАвтообновленияСекунд, Ложь);
	КонецЕсли;

КонецПроцедуры

// Процедура переподключает обработчик оптимизации контекстных новостей
// (глобальная переменная ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей"]).
//
// Параметры:
//  Нет.
//
Процедура ПодключитьОбработчикОптимизацииКонтекстныхНовостей()

	ОтключитьОбработчикОжидания("ОптимизацияВременногоХранилищаКонтекстныхНовостей");

	Если ОбработкаНовостейКлиентПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		ИнтервалАвтообновленияСекунд = 15 * 60; // 15 минут
		ПодключитьОбработчикОжидания("ОптимизацияВременногоХранилищаКонтекстныхНовостей", ИнтервалАвтообновленияСекунд, Ложь);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПомеченнымиНовостями

// Процедура помечает несколько новостей пометкой (число 0..9, где 0 = нет пометки).
//
// Параметры:
//  МассивНовостей - Массив;
//  Пометка        - Число 0..9, где 0 - неотмеченная новость.
//
Процедура ИзменитьПометкуНовостей(МассивНовостей, Пометка = 1) Экспорт

	ОбработкаНовостейВызовСервера.ИзменитьПометкуНовостей(МассивНовостей, Пометка);

	Оповестить(
		"Новости. Изменена пометка списка новостей",
		Пометка,
		МассивНовостей);

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомПрочтенности

// Процедура изменяет признак прочтенности у новостей.
//
// Параметры:
//  МассивНовостей      - Массив;
//  ПризнакПрочтенности - Булево.
//
Процедура ИзменитьПризнакПрочтенностиНовостей(Знач МассивНовостей, ПризнакПрочтенности = Истина) Экспорт

	ОбработкаНовостейВызовСервера.ИзменитьПризнакПрочтенностиНовостей(МассивНовостей, ПризнакПрочтенности);

	Оповестить(
		"Новости. Изменена прочтенность списка новостей", // Идентификатор.
		ПризнакПрочтенности,
		МассивНовостей);

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомУдаленияИзСписка

// Процедура изменяет признак удаления из списка у новостей.
//
// Параметры:
//  МассивНовостей          - Массив;
//  ПризнакУдаленияИзСписка - Булево.
//
Процедура ИзменитьПризнакУдаленияИзСпискаНовостей(Знач МассивНовостей, Знач ПризнакУдаленияИзСписка = Истина) Экспорт

	ОбработкаНовостейВызовСервера.ИзменитьПризнакУдаленияИзСпискаНовостей(МассивНовостей, ПризнакУдаленияИзСписка);

	Оповестить(
		"Новости. Изменен признак удаления из списка новостей", // Идентификатор.
		ПризнакУдаленияИзСписка,
		МассивНовостей);

	// ////? Для помеченных на удаление новостей очистить кэш контекстных новостей.

КонецПроцедуры

#КонецОбласти

#Область ПоискНовостей

// Выполняет полнотекстовый поиск по новостям. Возможна передача дополнительных параметров (период поиска и т.п.).
//
// Параметры:
//  СтруктураПараметровПоиска - Структура с ключами:
//                               -  СтрокПоиска - Строка;
//                               -  ПоискДатаОТ - Дата;
//                               -  ПоискДатаДО - Дата.
//
// Возвращаемое значение:
//  Массив.
//
Функция НайтиНовости(СтруктураПараметровПоиска) Экспорт

	Результат = ОбработкаНовостейВызовСервера.НайтиНовости(СтруктураПараметровПоиска);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ИнтерактивнаяРаботаСНовостью

// Функция ищет вверх по иерархии элемент (узел) с id="NewsEntry" и возвращает атрибут news_id.
//
// Параметры:
//  Узел               - COMObject - описание текущего узла;
//  ТекущаяВложенность - Число - Текущий уровень вложенности, уменьшается с каждый вложенным вызовом функции.
//
// Возвращаемое значение:
//   Строка - Идентификатор новости или пустая строка, если идентификатор не найден.
//
Функция НайтиУИННовостиХТМЛ(Узел, ТекущаяВложенность)

	Если ТекущаяВложенность <= 0 Тогда
		// Достигли предела поиска верха иерархии, но так и не нашли идентификатор новости.
		УИННовости = "";
	Иначе
		Если (Узел.parentElement <> Неопределено) Тогда
			Если (ВРег(Узел.parentElement.id) = ВРег("newsEntry")) Тогда
				УИННовости = Узел.parentElement.news_id;
			Иначе
				УИННовости = НайтиУИННовостиХТМЛ(Узел.parentElement, ТекущаяВложенность - 1);
			КонецЕсли;
		Иначе
			// Достигли верха иерархии, но так и не нашли идентификатор новости.
			УИННовости = "";
		КонецЕсли;
	КонецЕсли;

	Возврат УИННовости;

КонецФункции

// Обработка нажатия на навигационную ссылку в форматированной строке - полном тексте новости.
//
// Параметры
//  НовостьСсылка    - Ссылка на новость;
//  Форма            - Форма-владелец, откуда вызывается обработчик;
//  Действие         - Строка;
//  СписокПараметров - СписокЗначений - произвольный список параметров.
//
// Возможные значения Действие и параметры:
// - Переход по навигационной ссылке:
//   - Необходим как минимум один параметр с именем "Навигационная ссылка";
//   - Остальные параметры будут проигнорированы.
// - Запуск процедуры с параметрами:
//   - Все параметры будут переданы как список значений в процедуру
//         ОбработкаНовостейКлиент.ОбработкаСобытияНовости(СписокПараметров).
// - Открытие раздела справки:
//   - Необходим только один параметр с именем "Раздел справки";
//   - Остальные параметры будут проигнорированы.
// - Оповещение:
//   - Необходим как минимум один параметр "ИмяСобытия";
//   - Остальные параметры ("Параметр", "Источник") могут быть переданы списком значений.
// - Переход по интернет ссылке:
//   - Необходим как минимум один параметр "URL", могут быть переданы списком значений;
//   - Гиперссылки на web-ресурсы можно передавать в новости как обычный href="", но сама ссылка должна начинаться с http или https.
// - Открытие новости:
//   - Необходим как минимум один параметр "УИННовости";
//   - Если передать параметр "ЛентаНовостей" строкового типа, то он будет являться доп.условием для поиска новости по УИН,
//     то есть новость будет искаться в этой ленте новостей. Параметр описывает Код ленты новостей (английские буквы без пробелов).
// - Показать картинку:
//   - Необходим как минимум один параметр "УИН" - идентификатор картинки из табличной части БинарныеДанные.
//
Процедура ОбработкаНавигационнойСсылки(НовостьСсылка, Форма, Действие, СписокПараметров) Экспорт

	Если Действие = "Переход по навигационной ссылке" Тогда // Идентификатор.
		// Возможно, передадут несколько ссылок - открыть их все.
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление))=ВРег("Навигационная ссылка") Тогда
				Попытка
					ПерейтиПоНавигационнойСсылке(ТекущийПараметр.Значение);
				Исключение
					ТекстСообщения = СтрШаблон(
						НСтр("ru='Произошла ошибка при обработке действия %1 с параметрами %2.
							|Подробная информация об ошибке:
							|%3'"),
						Действие,
						СписокПараметров,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Клиент'"), // ИмяСобытия
						НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ОбработкаНавигационнойСсылки'"), // ИдентификаторШага
						"Ошибка", // УровеньЖурналаРегистрации строкой
						"", // ОбъектМетаданных строкой
						"", // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Действие = "Запуск процедуры с параметрами" Тогда
		ОбработкаСобытия(НовостьСсылка, Форма, СписокПараметров);

	ИначеЕсли Действие = "Оповещение" Тогда
		ИмяСобытия = "";
		Параметры = Новый СписокЗначений;
		Источники = Новый СписокЗначений;
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("ИмяСобытия") Тогда
				// Имя события может быть только строковое. Если передали несколько значений, то взять последнее.
				ИмяСобытия = ТекущийПараметр.Значение;
			ИначеЕсли ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("Параметр") Тогда
				Параметры.Добавить(ТекущийПараметр.Значение);
			ИначеЕсли ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("Источник") Тогда
				Источники.Добавить(ТекущийПараметр.Значение);
			КонецЕсли;
		КонецЦикла;
		Оповестить(ИмяСобытия, Параметры, Источники);

	ИначеЕсли Действие = "Открытие раздела справки" Тогда
		// Возможно, передадут несколько ссылок - открыть их все.
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление))=ВРег("Раздел справки") Тогда
				Попытка
					ОткрытьСправку(ТекущийПараметр.Значение);
				Исключение
					ТекстСообщения = СтрШаблон(
						НСтр("ru='Произошла ошибка при обработке действия %1 с параметрами %2.
							|Подробная информация об ошибке:
							|%3'"),
						Действие,
						СписокПараметров,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Клиент'"), // ИмяСобытия
						НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ОбработкаНавигационнойСсылки'"), // ИдентификаторШага
						"Ошибка", // УровеньЖурналаРегистрации строкой
						"", // ОбъектМетаданных строкой
						"", // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Действие = "Переход по интернет ссылке" Тогда
		// Возможно, передадут несколько ссылок - открыть их все.
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление))=ВРег("URL") Тогда
				ПерейтиПоИнтернетСсылке(ТекущийПараметр.Значение);
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Действие = "Открытие новости" Тогда
		УИННовости = "";
		ЛентаНовостейКод = "";
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление))=ВРег("УИННовости") Тогда
				// УИН новости может быть только строковым. Если передали несколько значений, то взять последнее.
				УИННовости = ТекущийПараметр.Значение;
			ИначеЕсли ВРег(ТекущийПараметр.Представление) = ВРег("ЛентаНовостей") Тогда
				// Лента новостей может быть только строковой. Если передали несколько значений, то взять последнее.
				ЛентаНовостейКод = ТекущийПараметр.Значение;
			КонецЕсли;
		КонецЦикла;
		СписокНовостей = ОбработкаНовостейВызовСервера.ПолучитьНовостиПоУИН(УИННовости, ЛентаНовостейКод);
		Для каждого ТекущаяНовость Из СписокНовостей Цикл
			Если НЕ ТекущаяНовость.Значение.Пустая() Тогда
				ФормаНовости = ПоказатьНовость(
					ТекущаяНовость.Значение, // НовостьСсылка
					, // ПараметрыОткрытияФормы. БлокироватьОкноВладельца не нужно, т.к. неизвестно что будет за владелец
					       // и блокировать первое попавшееся окно неправильно.
					Форма, // ФормаВладелец
					Ложь); // Уникальность по-умолчанию (по ссылке)
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Действие = "Показать картинку" Тогда
		СписокУИНКартинок = Новый СписокЗначений;
		СписокКартинок = Новый СписокЗначений;
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("УИН") Тогда
				// УИН картинки может быть только строковым.
				// Если передали несколько значений, то обработать их все.
				// Таким образом, может быть передано несколько параметров "УИН",
				//  а для каждого УИН может быть несколько картинок с таким УИН в табличной части БинарныеДанные,
				//  и необходимо отобразить все эти комбинации.
				СписокУИНКартинок.Добавить(ТекущийПараметр.Значение);
			ИначеЕсли ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("Картинка") Тогда
				Если ТекущийПараметр.Картинка.Вид <> ВидКартинки.Пустая Тогда
					СписокКартинок.Добавить(ТекущийПараметр.Значение, , , ТекущийПараметр.Картинка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если (СписокУИНКартинок.Количество() > 0)
				ИЛИ (СписокКартинок.Количество() > 0) Тогда
			ФормаКартинки = ОткрытьФорму(
				"Справочник.Новости.Форма.ФормаКартинки", // ИмяФормы
				Новый Структура("Ключ, СписокУИН, СписокКартинок",
					НовостьСсылка,
					СписокУИНКартинок,
					СписокКартинок), // Параметры
				Форма, // Владелец
				Ложь); // Уникальность, если Ложь - то уникальность по-умолчанию // НовостьСсылка
		КонецЕсли;

	Иначе
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Действие %1 с параметрами %2 не обрабатывается.'"),
			Действие,
			СписокПараметров);
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Клиент'"), // ИмяСобытия
			НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ОбработкаНавигационнойСсылки'"), // ИдентификаторШага
			"Предупреждение", // УровеньЖурналаРегистрации строкой
			"", // ОбъектМетаданных строкой
			"", // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

КонецПроцедуры

// Обработчик нажатия мышкой в тексте новости.
//
// Параметры:
//  Новости              - ДанныеФормыСтруктура, СправочникСсылка.Новости, ДокументСсылка.Новости, СписокЗначений - Новость, в которой произошло нажатие.
//                         Если передано значение типа СписокЗначений (где Значение - СправочникСсылка.Новости,
//                           ДокументСсылка.Новости, а представление - УИННовости), то определить, к какой новости относится это нажатие.
//  ДанныеСобытия        - COMОбъект - описатель события нажатия;
//  СтандартнаяОбработка - Установить в Ложь, если необходимо запретить выполнение стандартных действий;
//  Форма                - УправляемаяФорма - форма, в которой произошло нажатие;
//  ЭлементФормы         - Элементы формы типа ПолеHTMLдокумента.
//
Процедура ОбработкаНажатияВТекстеНовости(лкНовости, ДанныеСобытия, СтандартнаяОбработка, Форма, ЭлементФормы) Экспорт

	Перем Действие, СписокПараметров;

	ТипСписокЗначений = Тип("СписокЗначений");
	ТипСтрока = Тип("Строка");

	Если ТипЗнч(лкНовости) = ТипСписокЗначений Тогда
		// Определить, в какой новости произошло нажатие на гиперссылку.
		УИННовости = "";
		// Допустим, что вложенность гиперссылки не более нескольких (допустим, 10) уровней.
		Если (ДанныеСобытия.Anchor <> Неопределено) Тогда
			УИННовости = НайтиУИННовостиХТМЛ(ДанныеСобытия.Anchor, 10);
		ИначеЕсли (ДанныеСобытия.Element <> Неопределено) Тогда
			УИННовости = НайтиУИННовостиХТМЛ(ДанныеСобытия.Element, 10);
		КонецЕсли;
		Если (ТипЗнч(УИННовости) = ТипСтрока)
				И (НЕ ПустаяСтрока(УИННовости)) Тогда
			Для Каждого ТекущийЭлементСписка Из лкНовости Цикл
				Если ВРег(ТекущийЭлементСписка.Представление) = ВРег(УИННовости) Тогда
					НовостьОбъект = ТекущийЭлементСписка.Значение;
				КонецЕсли;
			КонецЦикла;
			Если НовостьОбъект.Пустая() Тогда
				// Не удалось определить, к какой новости относится нажатие мышкой, поэтому нельзя корректно отработать это нажатие.
				// Прервать дальнейшую обработку.
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;
		Иначе
			// Не удалось определить, к какой новости относится нажатие мышкой, поэтому нельзя корректно отработать это нажатие.
			// Прервать дальнейшую обработку.
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	Иначе // ДокументСсылка, СправочникСсылка, ДанныеФормыСтруктура
		НовостьОбъект = лкНовости;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ПродолжитьОбработку = Ложь;

	Если (ДанныеСобытия.Anchor <> Неопределено) Тогда
		НавигационнаяСсылка = ДанныеСобытия.Href;
		// Если в href передать якорь вида "#ИмяЯкоря", то он автоматически дополнится до такого вида: "e1c://.../#ИмяЯкоря".
		// Попробуем определить, это ссылка на якорь или нет.
		ТолькоСсылка = "";
		Попытка
			ТолькоСсылка = ДанныеСобытия.Anchor.nameProp;
		Исключение
			ТолькоСсылка = "";
		КонецПопытки;
		Если НЕ ПустаяСтрока(ТолькоСсылка) И (Лев(ТолькоСсылка, 1) = "#") Тогда
			ПродолжитьОбработку = Ложь;
			Попытка
				ЭлементЯкорь = ЭлементФормы.Документ.getElementByID(Прав(ТолькоСсылка, СтрДлина(ТолькоСсылка) - 1));
				Если ЭлементЯкорь <> Неопределено Тогда
					// Отображать элемент снизу экрана.
					ЭлементЯкорь.ScrollIntoView(Ложь); // Не все браузеры поддерживают этот метод.
					Если ДанныеСобытия.Event.ctrlKey = Истина Тогда // Был нажат Ctrl.
						// Отображать элемент сверху экрана.
						ЭлементЯкорь.ScrollIntoView(Истина); // Не все браузеры поддерживают этот метод.
					КонецЕсли;
				КонецЕсли;
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
			КонецПопытки;
		Иначе
			Если (ТипЗнч(НавигационнаяСсылка) = ТипСтрока) Тогда

				// Некоторые браузеры (например, FF33 или Chrome37) добавляют полный адрес к параметру href и тогда вместо "1C:Act001"
				//  получается "http://ПутьКБазе/1C:Act001",
				//  а вместо "e1cib/list/Справочник.Организации" получается "http://ПутьКБазе/e1cib/list/Справочник.Организации".
				Если Найти(ВРег(НавигационнаяСсылка), ВРег("http")) = 1 Тогда
					Обработано = Ложь;
					// Возможно, есть 1C://
					ГдеРазделитель1С = Найти(ВРег(НавигационнаяСсылка), ВРег("/1C:"));
					Если (Обработано = Ложь) И (ГдеРазделитель1С > 0) Тогда // 1C - "С" - английская
						// Отрежем http(s):// с путем к базе с начала навигационной ссылки.
						// Лидирующий "/" из "/1С:" тоже не попадет и ссылка превратится в обычную "1С:".
						НавигационнаяСсылка = Прав(НавигационнаяСсылка, СтрДлина(НавигационнаяСсылка) - ГдеРазделитель1С);
						Обработано = Истина;
					КонецЕсли;
					// Возможно, есть e1cib/
					ГдеРазделитель1С = Найти(ВРег(НавигационнаяСсылка), ВРег("/e1cib/"));
					Если (Обработано = Ложь) И (ГдеРазделитель1С > 0) Тогда
						// Отрежем http(s):// с путем к базе с начала навигационной ссылки.
						// Лидирующий "/" из "/e1cib/" тоже не попадет и ссылка превратится в обычную "e1cib/".
						НавигационнаяСсылка = Прав(НавигационнаяСсылка, СтрДлина(НавигационнаяСсылка) - ГдеРазделитель1С);
						Обработано = Истина;
					КонецЕсли;
				КонецЕсли;

				Если (ПустаяСтрока(НавигационнаяСсылка)) Тогда
					// Для "якорей", например <a id="aa1"/> или <a name="aa2"/>.
					ПродолжитьОбработку  = Ложь;
					СтандартнаяОбработка = Истина;
				ИначеЕсли (Найти(ВРег(НавигационнаяСсылка), ВРег("mailto:")) = 1) Тогда // Специальная ссылка типа "mailto:"
					ПродолжитьОбработку  = Ложь;
					СтандартнаяОбработка = Истина;
				ИначеЕсли (Найти(ВРег(НавигационнаяСсылка), ВРег("javascript:")) = 1) Тогда // Специальная ссылка типа "javascript:"
					ПродолжитьОбработку  = Ложь;
					СтандартнаяОбработка = Истина;
				ИначеЕсли Найти(ВРег(НавигационнаяСсылка), ВРег("http")) = 1 Тогда // http:// или https://
					ПродолжитьОбработку  = Истина;
				ИначеЕсли Найти(ВРег(НавигационнаяСсылка), ВРег("e1c://")) = 1 Тогда
					ПродолжитьОбработку  = Истина;
				ИначеЕсли Найти(ВРег(НавигационнаяСсылка), ВРег("e1cib/")) = 1 Тогда
					ПродолжитьОбработку  = Истина;
				ИначеЕсли Найти(ВРег(НавигационнаяСсылка), ВРег("1C:")) = 1 Тогда // 1C - "С" - английская
					ПродолжитьОбработку  = Истина;
				Иначе
					// Ссылки вроде:
					//  <a href="#aa1">Перейти внутри новости...</a>
					// автоматически преобразуются к
					//  <a href="e1c://filev/e/Data/News1C/#aaa1">Перейти внутри новости...</a>.
					// Переходы внутри новости по якорям невозможны, поэтому не давать обрабатывать такие ссылки, чтобы не было ошибок.
					Если (ТипЗнч(ДанныеСобытия.Anchor.nodeName) = ТипСтрока)
							И (ВРег(ДанныеСобытия.Anchor.nodeName) = ВРег("a")) Тогда
						Если (ТипЗнч(ДанныеСобытия.Anchor.nameProp) = ТипСтрока)
								И (Найти(ВРег(ДанныеСобытия.Anchor.nameProp), "#") = 1) Тогда
							ПродолжитьОбработку = Ложь;
							СтандартнаяОбработка = Истина;
						Иначе
							ПродолжитьОбработку = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПродолжитьОбработку = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (ДанныеСобытия.Element <> Неопределено) Тогда
		Если (ВРег(ДанныеСобытия.Element.tagName) = ВРег("area")) Тогда
			НавигационнаяСсылка = ДанныеСобытия.Element.Href;
			ПродолжитьОбработку = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ПродолжитьОбработку = Истина Тогда
		Если Найти(ВРег(НавигационнаяСсылка), ВРег("http")) = 1 Тогда
			ПерейтиПоИнтернетСсылке(НавигационнаяСсылка);
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Найти(ВРег(НавигационнаяСсылка), ВРег("e1c://")) = 1 Тогда
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Найти(ВРег(НавигационнаяСсылка), ВРег("e1cib/")) = 1 Тогда
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Найти(ВРег(НавигационнаяСсылка), ВРег("1C:")) = 1 Тогда // 1C - "С" - английская
			// Запустить ОбработкаНавигационнойСсылки с параметрами.
			// При открытии из формы элемента справочника / документа.
			ОбработкаНовостейВызовСервера.ПодготовитьПараметрыНавигационнойСсылки(НовостьОбъект, НавигационнаяСсылка, Действие, СписокПараметров);
			Если ТипЗнч(НовостьОбъект) = Тип("СправочникСсылка.Новости") Тогда
				ОбработкаНавигационнойСсылки(НовостьОбъект, Форма, Действие, СписокПараметров);
			Иначе
				ОбработкаНавигационнойСсылки(НовостьОбъект.Ссылка, Форма, Действие, СписокПараметров);
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
		Иначе
			СтандартнаяОбработка = Ложь;
			ТекстСообщения = НСтр("ru='Неизвестная ссылка: %НавигационнаяСсылка%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НавигационнаяСсылка%", НавигационнаяСсылка);
			ПоказатьПредупреждение(
				, // ОписаниеОповещенияОЗавершении
				ТекстСообщения,
				0,
				НСтр("ru='Ошибка'")); 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РазныеПроцедурыИФункции

// Процедура выполняет переход по интернет ссылке (http, https).
// Если эта ссылка ведет на сайт с поддержкой авторизации ВебИТС,
//  то организовать переход таким образом. чтобы пользователю не пришлось повторно вводить логин / пароль.
//
// Параметры:
//  ИнтернетСсылка - Строка - URL, по которому необходимо перейти.
//
Процедура ПерейтиПоИнтернетСсылке(ИнтернетСсылка) Экспорт

	// ////? Определить, поддерживает ли сайт возможность авторизации (по логину/хэшу пароля или по идентификатору сессии).
	// Если сайт поддерживает пре-авторизацию (чтобы окно логина не выскакивало при переходе по ссылке),
	//  то пройти процедуру авторизации предварительно и передать сайту только служебную информацию.

	Попытка
		ПерейтиПоНавигационнойСсылке(ИнтернетСсылка);
	Исключение
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Произошла ошибка при переходе по ссылке %1.
				|Подробная информация об ошибке:
				|%2'"),
			ИнтернетСсылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Клиент'"), // ИмяСобытия
			НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ПерейтиПоИнтернетСсылке'"), // ИдентификаторШага
			"Ошибка", // УровеньЖурналаРегистрации строкой
			"", // ОбъектМетаданных строкой
			ИнтернетСсылка, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ИнтерактивныеДействия

// Процедура выполняет интерактивные действия, которые невозможно выполнить на сервере - оповещения и т.п.
//
// Параметры:
//  МассивДействий - Массив.
//
Процедура ВыполнитьИнтерактивныеДействия(МассивДействий) Экспорт

	Перем Действие, ПараметрыДействия;

	ТипМассив    = Тип("Массив");
	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(МассивДействий) = ТипМассив Тогда
		Для каждого ТекущееДействие Из МассивДействий Цикл

			ПропуститьПереопределение = Ложь;

			Если ТипЗнч(ТекущееДействие) = ТипСтруктура Тогда
				ТекущееДействие.Свойство("Действие", Действие);
				ТекущееДействие.Свойство("ПараметрыДействия", ПараметрыДействия);
				Если Действие = "Оповещение пользователю" Тогда
					Если ТипЗнч(ПараметрыДействия) = ТипСтруктура Тогда
						ТекстСообщения      = "";
						НавигационнаяСсылка = "";
						ТекстПояснения      = "";
						Картинка            = БиблиотекаКартинок.Новости;
						ПараметрыДействия.Свойство("Текст", ТекстСообщения);
						ПараметрыДействия.Свойство("НавигационнаяСсылка", НавигационнаяСсылка);
						ПараметрыДействия.Свойство("Пояснение", ТекстПояснения);
						ПараметрыДействия.Свойство("Картинка", Картинка);
						ПоказатьОповещениеПользователя(
							ТекстСообщения, // Текст,
							НавигационнаяСсылка, // НавигационнаяСсылка
							ТекстПояснения, // Пояснение,
							Картинка); // Картинка
						ПропуститьПереопределение = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// Переопределение.
			Если ПропуститьПереопределение <> Истина Тогда
				ОбработкаНовостейКлиентПереопределяемый.ВыполнитьИнтерактивноеДействие(ТекущееДействие);
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КонтекстныеНовости

// Процедура обрабатывает нажатие кнопки, принадлежащей механизму контекстных новостей.
// Должна вызываться из Подключаемый_ОбработкаНовости(Команда).
// После обработки стандартных событий, управление передается в переопределяемый модуль.
//
// Параметры:
//  Форма   - УправляемаяФорма - форма, в которой необходимо обработать нажатие на кнопку механизма контекстных новостей;
//  Команда - КомандаФормы, Структура - вызванная команда или Структура с ключом "Имя".
//
Процедура КонтекстныеНовости_ОбработкаКомандыНовости(Форма, Команда) Экспорт

	Если НЕ ОбработкаНовостейКлиентПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипМассив = Тип("Массив");
	ТипСтрока = Тип("Строка");

	ПропуститьПереопределение = Ложь;

	// По имени команды открыть новость.

	Если Команда.Имя = "Команда_Новость_Список" Тогда
		ПараметрыОткрытияФормыКонтекстныхНовостей = Новый Структура("ЗаголовокФормы, СкрыватьКолонкуЛентаНовостей, СкрыватьКолонкуПодзаголовок, СкрыватьКолонкуДатаПубликации, ПоказыватьПанельНавигации, РежимОткрытияОкна",
			Форма.Новости.ЗаголовокФормыКонтекстныхНовостей, // ЗаголовокФормы
			Истина, // СкрыватьКолонкуЛентаНовостей
			Ложь, // СкрыватьКолонкуПодзаголовок
			Ложь, // СкрыватьКолонкуДатаПубликации
			Ложь, // ПоказыватьПанельНавигации
			"Блокировать окно владельца"); // РежимОткрытияОкна ("Независимый", "Блокировать окно владельца" (по-умолчанию), "Блокировать весь интерфейс")
		ОбработкаНовостейКлиентПереопределяемый.ПереопределитьПараметрыОткрытияФормыКонтекстныхНовостей(ПараметрыОткрытияФормыКонтекстныхНовостей);
		ПоказатьКонтекстныеНовости(
			Форма, // ФормаВладелец
			, // СписокЛентНовостей = По всем. Форма контекстных новостей сама рассчитает список лент новостей, исходя из их видимости пользователю.
			Форма.Новости.Метаданные, // ИмяМетаданных
			Форма.Новости.Форма, // ИмяФормы
			, // ИмяСобытия = По всем
			ПараметрыОткрытияФормыКонтекстныхНовостей); // ПараметрыОткрытия
		ПропуститьПереопределение = Истина;

	ИначеЕсли Найти(ВРег(Команда.Имя), ВРег("Команда_Новость_")) = 1 Тогда
		Идентификатор = Число(Прав(Команда.Имя, СтрДлина(Команда.Имя)-16));
		Если ТипЗнч(Форма.Новости.Новости) = ТипМассив Тогда
			НайденнаяНовость = Неопределено;
			Для Каждого ТекущаяНовость Из Форма.Новости.Новости Цикл
				Если ТекущаяНовость.НомерСтрокиНовости = Идентификатор Тогда
					НайденнаяНовость = ТекущаяНовость;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Форма.Новости.Новости = Неопределено Тогда
			// Такое возможно, когда в форму передается не массив новостей, а адрес хранилища.
			НайденнаяНовость = Неопределено;
			Если (ТипЗнч(Форма.Новости.АдресМассиваНовостей) = ТипСтрока)
					И (НЕ ПустаяСтрока(Форма.Новости.АдресМассиваНовостей)) Тогда
				НайденнаяНовость = ОбработкаНовостейВызовСервера.НайтиКонтекстнуюНовостьВМассиве(Форма.Новости.АдресМассиваНовостей, Идентификатор);
			КонецЕсли;
		Иначе // Таблица значений
			НайденнаяНовость = Форма.Новости.Новости.НайтиПоИдентификатору(Идентификатор);
		КонецЕсли;
		Если НайденнаяНовость <> Неопределено Тогда
			Форма.Новости.ТекущаяНовость = НайденнаяНовость.Новость;
			// Одна и та же новость может относиться к разным формам одного объекта метаданных.
			// Чтобы определить, в каком окне открывать новость - надо найти все новости, связанные с этой формой.
			// Если хотя бы в одной строке для этой новости есть галочка "Показывать в форме объекта", Тогда вывести новость в форме объекта.
			ПоказыватьВФормеОбъекта = Ложь;
			// Если новостей > 20, то это может привести к неявному вызову сервера.
			Если ТипЗнч(Форма.Новости.Новости) = ТипМассив Тогда
				МассивНовостейДляЭтойФормы = Новый Массив;
				Для Каждого ТекущаяНовость Из Форма.Новости.Новости Цикл
					Если ТекущаяНовость.Форма = Форма.Новости.Форма Тогда
						МассивНовостейДляЭтойФормы.Добавить(ТекущаяНовость);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Форма.Новости.Новости = Неопределено Тогда
				// Такое возможно, когда в форму передается не массив новостей, а адрес хранилища.
				// ////? При показе новостей в форме, в которой хранится только адрес временного хранилища, а не массив новостей
				//  всегда открывать новость в отдельном окне.
				ПоказыватьВФормеОбъекта = Ложь;
			Иначе // Таблица значений
				МассивНовостейДляЭтойФормы = Форма.Новости.Новости.НайтиСтроки(
					Новый Структура("Форма", Форма.Новости.Форма));
			КонецЕсли;
			Для каждого ТекущаяНовостьДляЭтойФормы Из МассивНовостейДляЭтойФормы Цикл
				Если ТекущаяНовостьДляЭтойФормы.ПоказыватьВФормеОбъекта = Истина Тогда
					ПоказыватьВФормеОбъекта = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПоказыватьВФормеОбъекта = Истина Тогда
				Форма.ТекстНовостиХТМЛ = ОбработкаНовостейКлиентПовтИсп.ПолучитьХТМЛТекстНовостей(НайденнаяНовость.Новость);
				Если ПустаяСтрока(Форма.ТекстНовостиХТМЛ) Тогда
					Форма.Элементы.ГруппаТекстНовости.Видимость = Ложь;
				Иначе
					Форма.Элементы.ГруппаТекстНовости.Видимость = Истина;
				КонецЕсли;
			Иначе
				Если НЕ НайденнаяНовость.Новость.Пустая() Тогда
					ФормаНовости = ПоказатьНовость(
						НайденнаяНовость.Новость, // НовостьСсылка
						, // ПараметрыОткрытияФормы. БлокироватьОкноВладельца не нужно, т.к. неизвестно что будет за владелец
						       // и блокировать первое попавшееся окно неправильно.
						Форма, // ФормаВладелец
						Ложь); // Уникальность по-умолчанию (по ссылке)
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПропуститьПереопределение = Истина;

	КонецЕсли;

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ОбработкаКомандыНовости(Форма, Команда);
	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает нажатие кнопки, принадлежащей механизму контекстных новостей.
// Должна вызываться из Подключаемый_ОбработкаНовости(Команда).
//
// Параметры:
//  Форма                - УправляемаяФорма - форма, в которой необходимо обработать нажатие на кнопку механизма контекстных новостей;
//  ДанныеСобытия        - Структура или COMОбъект - данные при нажатии гиперссылки;
//  СтандартнаяОбработка - Булево - продолжать ли стандартную обработку.
//
Процедура КонтекстныеНовости_ТекстНовостиХТМЛПриНажатии(
			Форма,
			ДанныеСобытия,
			СтандартнаяОбработка) Экспорт

	Перем Действие, СписокПараметров;

	СтандартнаяОбработка = Ложь;
	Если ДанныеСобытия.Anchor <> Неопределено Тогда
		НавигационнаяСсылка = ДанныеСобытия.Href; // ДанныеСобытия.Anchor.nameProp
		Если ВРег(Лев(НавигационнаяСсылка, 4)) = ВРег("http") Тогда
			ПерейтиПоИнтернетСсылке(НавигационнаяСсылка);
			СтандартнаяОбработка = Ложь;
		ИначеЕсли ВРег(Лев(НавигационнаяСсылка, 5)) = ВРег("e1cib") Тогда
			СтандартнаяОбработка = Истина;
		ИначеЕсли ВРег(Лев(НавигационнаяСсылка, 3)) = ВРег("1C:") Тогда // 1C - "С" - английская
			// Запустить ОбработкаНавигационнойСсылки с параметрами.
			ОбработкаНовостейВызовСервера.ПодготовитьПараметрыНавигационнойСсылки(Форма.Новости.ТекущаяНовость, НавигационнаяСсылка, Действие, СписокПараметров);
			ОбработкаНавигационнойСсылки(Форма.Новости.ТекущаяНовость, Форма, Действие, СписокПараметров);
			СтандартнаяОбработка = Ложь;
		Иначе
			ТекстСообщения = НСтр("ru='Неизвестная ссылка: %НавигационнаяСсылка%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НавигационнаяСсылка%", НавигационнаяСсылка);
			ПоказатьПредупреждение(
				,
				ТекстСообщения,
				0,
				НСтр("ru='Ошибка'"));
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает оповещение, приходящее в форму через обработчик ОбработкаОповещения.
//
// Параметры:
//  Форма        - УправляемаяФорма - форма, в которой необходимо обработать оповещение;
//  ИмяСобытия   - Произвольный - данные обработчика оповещения;
//  Параметр     - Произвольный - данные обработчика оповещения;
//  Источник     - Произвольный - данные обработчика оповещения.
//
Процедура КонтекстныеНовости_ОбработкаОповещения(
			Форма,
			ИмяСобытия,
			Параметр,
			Источник) Экспорт

	Если НЕ ОбработкаНовостейКлиентПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСтруктура      = Тип("Структура");
	ТипМассив         = Тип("Массив");
	ТипСоответствие   = Тип("Соответствие");
	ТипСтрока         = Тип("Строка");
	ТипСписокЗначений = Тип("СписокЗначений");

	ПропуститьПереопределение = Ложь;

	Если ИмяСобытия = "Новости. Изменена пометка списка новостей" Тогда
		//
	ИначеЕсли ИмяСобытия = "Новости. Новость прочтена" Тогда
		// Параметр = новое значение "НовостьПрочтена".
		// Источник = Новость.
		Если (ТипЗнч(Форма.Новости) = ТипСтруктура) Тогда
			// Если новости хранятся на клиенте (Форма.Новости.Новости).
			Если (Форма.Новости.Свойство("Новости"))
					И (ТипЗнч(Форма.Новости.Новости) = ТипМассив) Тогда // Новости хранятся на клиенте
				Для Каждого ТекущаяНовость Из Форма.Новости.Новости Цикл
					Если ТекущаяНовость.Новость = Источник Тогда
						ТекущаяНовость.Прочтена = ?(Параметр = Истина, Истина, Ложь);
						// Прерывать цикл не нужно, т.к. одна новость может быть привязана к разным событиям.
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// Новости могут рассчитываться на клиенте (в ПриОткрытии), а не на сервере (в ПриСозданииНаСервере)
			//  и хранятся в кэше (в глобальной переменной ПараметрыПриложения),
			//  в таком случае необходимо найти новость в кэше и там исправить этот признак.
			Если (Форма.Новости.Свойство("Метаданные"))
					И (Форма.Новости.Свойство("Форма")) Тогда // Есть идентификаторы метаданных и формы
				ИдентификаторМетаданных = Форма.Новости.Метаданные;
				ИдентификаторФормы      = Форма.Новости.Форма;
				Если (Форма.Новости.Свойство("ПолучатьНовостиНаСервере"))
						И (Форма.Новости.ПолучатьНовостиНаСервере = Ложь) Тогда // Новости рассчитываются в ПриОткрытии
					// ПараметрыПриложения - глобальная переменная.
					Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
						ПараметрыПриложения = Новый Соответствие;
					КонецЕсли;
					ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
					лкКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];
					Если ТипЗнч(лкКэшКонтекстныхНовостей) = ТипСоответствие Тогда
						НайденноеЗначениеДляМетаданных = лкКэшКонтекстныхНовостей.Получить(ИдентификаторМетаданных);
						Если ТипЗнч(НайденноеЗначениеДляМетаданных) = ТипСоответствие Тогда
							НайденноеЗначениеДляФормы = НайденноеЗначениеДляМетаданных.Получить(ИдентификаторФормы);
							Если ТипЗнч(НайденноеЗначениеДляФормы) = ТипСтруктура Тогда
								// На срок заполнения данных и на другие реквизиты не обращаем внимания.
								Если НайденноеЗначениеДляФормы.Свойство("Новости") 
										И ТипЗнч(НайденноеЗначениеДляФормы.Новости) = ТипМассив Тогда
									Для Каждого ТекущаяНовость Из НайденноеЗначениеДляФормы.Новости Цикл
										Если ТипЗнч(ТекущаяНовость) = ТипСтруктура Тогда
											Если ТекущаяНовость.Свойство("Новость")
													И ТекущаяНовость.Новость = Источник Тогда
												Если ТекущаяНовость.Свойство("Прочтена") Тогда // Прочтена, ОповещениеВключено
													ТекущаяНовость.Прочтена = ?(Параметр = Истина, Истина, Ложь);
													// Прерывать цикл не нужно, т.к. одна новость может быть привязана к разным событиям.
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
									ПараметрыПриложения.Вставить(ИмяПараметраПриложения, лкКэшКонтекстныхНовостей);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Если новости хранятся на сервере (Форма.Новости.Новости - пусто,
			//  Форма.Новости.ХранитьМассивНовостейТолькоНаСервере = Истина и
			//  Форма.Новости.АдресМассиваНовостей - заполнено адресом),
			//  тогда необходимо заполнить специальные реквизиты "СписокНовостейИзменениеПризнака_Прочтена" и "СписокНовостейИзменениеПризнака_ОповещениеВключено",
			//  и в дальнейшем анализировать эти реквизиты вместе с массивом структур новостей, хранимой на сервере.
			Если (Форма.Новости.Свойство("ХранитьМассивНовостейТолькоНаСервере"))
					И (Форма.Новости.ХранитьМассивНовостейТолькоНаСервере = Истина) Тогда // Новости хранятся на сервере
				Если (Форма.Новости.Свойство("АдресМассиваНовостей"))
						И (ТипЗнч(Форма.Новости.АдресМассиваНовостей) = ТипСтрока)
						И (НЕ (ПустаяСтрока(Форма.Новости.АдресМассиваНовостей))) Тогда // Новости хранятся на сервере, заполнен адрес хранилища.
					Если (Форма.Новости.Свойство("СписокНовостейИзменениеПризнака_Прочтена"))
							И (ТипЗнч(Форма.Новости.СписокНовостейИзменениеПризнака_Прочтена) = ТипСписокЗначений) Тогда // Есть хранилище для списка изменения.
						НайденнаяНовость = Форма.Новости.СписокНовостейИзменениеПризнака_Прочтена.НайтиПоЗначению(Источник);
						Если НайденнаяНовость = Неопределено Тогда
							Форма.Новости.СписокНовостейИзменениеПризнака_Прочтена.Добавить(Источник, , ?(Параметр = Истина, Истина, Ложь));
						Иначе
							НайденнаяНовость.Пометка = ?(Параметр = Истина, Истина, Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Новости. Изменено состояние оповещения о новости" Тогда
		// Параметр = новое значение "ОповещениеВключено".
		// Источник = Новость.
		Если (ТипЗнч(Форма.Новости) = ТипСтруктура) Тогда
			// Если новости хранятся на клиенте (Форма.Новости.Новости).
			Если (Форма.Новости.Свойство("Новости"))
					И (ТипЗнч(Форма.Новости.Новости) = ТипМассив) Тогда // Новости хранятся на клиенте
				Для Каждого ТекущаяНовость Из Форма.Новости.Новости Цикл
					Если ТекущаяНовость.Новость = Источник Тогда
						ТекущаяНовость.ОповещениеВключено = ?(Параметр = Истина, Истина, Ложь);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// Новости могут рассчитываться на клиенте (в ПриОткрытии), а не на сервере (в ПриСозданииНаСервере)
			//  и хранятся в кэше (в глобальной переменной ПараметрыПриложения),
			//  в таком случае необходимо найти новость в кэше и там исправить этот признак.
			Если (Форма.Новости.Свойство("Метаданные"))
					И (Форма.Новости.Свойство("Форма")) Тогда // Есть идентификаторы метаданных и формы
				ИдентификаторМетаданных = Форма.Новости.Метаданные;
				ИдентификаторФормы      = Форма.Новости.Форма;
				Если (Форма.Новости.Свойство("ПолучатьНовостиНаСервере"))
						И (Форма.Новости.ПолучатьНовостиНаСервере = Ложь) Тогда // Новости рассчитываются в ПриОткрытии.
					// ПараметрыПриложения - глобальная переменная.
					Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
						ПараметрыПриложения = Новый Соответствие;
					КонецЕсли;
					ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
					лкКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];
					Если ТипЗнч(лкКэшКонтекстныхНовостей) = ТипСоответствие Тогда
						НайденноеЗначениеДляМетаданных = лкКэшКонтекстныхНовостей.Получить(ИдентификаторМетаданных);
						Если ТипЗнч(НайденноеЗначениеДляМетаданных) = ТипСоответствие Тогда
							НайденноеЗначениеДляФормы = НайденноеЗначениеДляМетаданных.Получить(ИдентификаторФормы);
							Если ТипЗнч(НайденноеЗначениеДляФормы) = ТипСтруктура Тогда
								// На срок заполнения данных и на другие реквизиты не обращаем внимания.
								Если НайденноеЗначениеДляФормы.Свойство("Новости") 
										И ТипЗнч(НайденноеЗначениеДляФормы.Новости) = ТипМассив Тогда
									Для Каждого ТекущаяНовость Из НайденноеЗначениеДляФормы.Новости Цикл
										Если ТипЗнч(ТекущаяНовость) = ТипСтруктура Тогда
											Если ТекущаяНовость.Свойство("Новость")
													И ТекущаяНовость.Новость = Источник Тогда
												Если ТекущаяНовость.Свойство("ОповещениеВключено") Тогда // Прочтена, ОповещениеВключено
													ТекущаяНовость.Прочтена = ?(Параметр = Истина, Истина, Ложь);
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
									ПараметрыПриложения.Вставить(ИмяПараметраПриложения, лкКэшКонтекстныхНовостей);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Если новости хранятся на сервере (Форма.Новости.Новости - пусто,
			//  Форма.Новости.ХранитьМассивНовостейТолькоНаСервере = Истина и
			//  Форма.Новости.АдресМассиваНовостей - заполнено адресом),
			//  тогда необходимо заполнить специальные реквизиты "СписокНовостейИзменениеПризнака_Прочтена" и "СписокНовостейИзменениеПризнака_ОповещениеВключено",
			//  и в дальнейшем анализировать эти реквизиты вместе с массивом структур новостей, хранимой на сервере.
			Если (Форма.Новости.Свойство("ХранитьМассивНовостейТолькоНаСервере"))
					И (Форма.Новости.ХранитьМассивНовостейТолькоНаСервере = Истина) Тогда // Новости хранятся на сервере
				Если (Форма.Новости.Свойство("АдресМассиваНовостей"))
						И (ТипЗнч(Форма.Новости.АдресМассиваНовостей) = ТипСтрока)
						И (НЕ (ПустаяСтрока(Форма.Новости.АдресМассиваНовостей))) Тогда // Новости хранятся на сервере, заполнен адрес хранилища.
					Если (Форма.Новости.Свойство("СписокНовостейИзменениеПризнака_ОповещениеВключено"))
							И (ТипЗнч(Форма.Новости.СписокНовостейИзменениеПризнака_ОповещениеВключено) = ТипСписокЗначений) Тогда // Есть хранилище для списка изменения.
						НайденнаяНовость = Форма.Новости.СписокНовостейИзменениеПризнака_ОповещениеВключено.НайтиПоЗначению(Источник);
						Если НайденнаяНовость = Неопределено Тогда
							Форма.Новости.СписокНовостейИзменениеПризнака_ОповещениеВключено.Добавить(Источник, , ?(Параметр = Истина, Истина, Ложь));
						Иначе
							НайденнаяНовость.Пометка = ?(Параметр = Истина, Истина, Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Новости. Собрать информацию об открытых окнах" Тогда
		// Для целей отладки форма обработки "УправлениеНовостями" рассылает такое оповещение.
		// Если в форму встроен механизм контекстных новостей, то в реквизит "ИнформацияОбОткрытыхОкнах" формы обработки
		//  надо добавить информацию об открытой форме, загруженных на текущий момент контекстных новостях, идентификаторах и т.п.
		// Так как мы знаем источник, и уверены, что в нем есть реквизит "ИнформацияОбОткрытыхОкнах" типа "СписокЗначений",
		//  то пишем в этот реквизит напрямую.
		Попытка
			Источник.ИнформацияОбОткрытыхОкнах.Добавить(Форма.Новости, Форма.ИмяФормы);
		Исключение
			Источник.ИнформацияОбОткрытыхОкнах.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Форма.ИмяФормы);
		КонецПопытки;
	КонецЕсли;

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ОбработкаОповещения(
			Форма,
			ИмяСобытия,
			Параметр,
			Источник);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при открытии формы с контекстными новостями.
//
// Параметры:
//  Форма        - УправляемаяФорма - форма, в которой необходимо обработать событие ПриОткрытии.
//
Процедура КонтекстныеНовости_ПриОткрытии(Форма) Экспорт

	Если НЕ ОбработкаНовостейКлиентПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Истина;
	ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ПриОткрытии_ПередСтандартнойОбработкой(Форма, СтандартнаяОбработка);
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	ПропуститьПереопределение = Ложь;

	Если (ТипЗнч(Форма.Новости) = ТипСтруктура)
			И (
				((Форма.Новости.Свойство("КоличествоОченьВажныхНовостейПриОткрытии"))
					И (Форма.Новости.КоличествоОченьВажныхНовостейПриОткрытии > 0))
				ИЛИ ((Форма.Новости.Свойство("КоличествоВажныхНовостейПриОткрытии"))
					И (Форма.Новости.КоличествоВажныхНовостейПриОткрытии > 0))
				ИЛИ ((Форма.Новости.Свойство("ПолучатьНовостиНаСервере"))
					И (Форма.Новости.ПолучатьНовостиНаСервере = Ложь))) Тогда
		ИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей = 0.5;
		ОбработкаНовостейКлиентСерверПереопределяемый.ПереопределитьИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей(ИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей);
		Форма.ПодключитьОбработчикОжидания(
			"Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии",
			ИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей,
			Истина); // Однократно
	КонецЕсли;

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ПриОткрытии_ПослеСтандартнойОбработки(Форма);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается из подключаемой процедуры показа контекстных новостей для отображения важных и очень важных новостей при открытии формы.
//
// Параметры:
//  Форма                            - УправляемаяФорма - форма, в которой необходимо обработать событие ПриОткрытии;
//  ИдентификаторыСобытийПриОткрытии - Строка, Массив - идентификаторы событий, по которым необходимо отбирать контекстные новости.
//
Процедура КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(
			Форма,
			ИдентификаторыСобытийПриОткрытии) Экспорт

	Если НЕ ОбработкаНовостейКлиентПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Истина;
	ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии_ПередСтандартнойОбработкой(
			Форма,
			ИдентификаторыСобытийПриОткрытии,
			СтандартнаяОбработка);
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;

	ПропуститьПереопределение = Ложь;

	// Если новости еще не получены, то получить их.
	Если (Форма.Новости.ПолучатьНовостиНаСервере = Ложь) Тогда
		лкМетаданные                        = Форма.Новости.Метаданные;
		лкФорма                             = Форма.Новости.Форма;
		лкЗаголовокФормыКонтекстныхНовостей = Форма.Новости.ЗаголовокФормыКонтекстныхНовостей;
		Форма_Новости_ИзКэша = ПолучитьКонтекстныеНовостиИзКэшаПриложения(
			лкМетаданные,
			лкФорма,
			лкЗаголовокФормыКонтекстныхНовостей,
			ИдентификаторыСобытийПриОткрытии);
		ЗаполнитьЗначенияСвойств(
			Форма.Новости,
			Форма_Новости_ИзКэша,
			"Новости, КоличествоНовостей, КоличествоВажныхНовостейПриОткрытии, КоличествоОченьВажныхНовостейПриОткрытии, "
				+ "МассивСтруктурВажныхНовостей");
		// Следующие свойства НЕ будут скопированы (весь список ключей - в ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере):
		//   ЗаголовокФормыКонтекстныхНовостей,
		//   Метаданные,
		//   Форма,
		//   ТекущаяНовость,
		//   КоличествоНепрочитанныхНовостей,
		//   КоличествоПостоянныхНовостей,
		//   ПолучатьНовостиНаСервере,
		//   ХранитьМассивНовостейТолькоНаСервере,
		//   АдресМассиваНовостей,
		//   МассивСтруктурПостоянныхНовостей,
		//   СписокНовостейИзменениеПризнака_Прочтена,
		//   СписокНовостейИзменениеПризнака_ОповещениеВключено.
	КонецЕсли;

	// Показать важные и очень важные новости.
	Если (Форма.Новости.КоличествоВажныхНовостейПриОткрытии > 0)
			ИЛИ (Форма.Новости.КоличествоОченьВажныхНовостейПриОткрытии > 0) Тогда
		КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриПроизвольномСобытии(
			Форма,
			ИдентификаторыСобытийПриОткрытии);
	КонецЕсли;

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии_ПослеСтандартнойОбработки(Форма, ИдентификаторыСобытийПриОткрытии);
	КонецЕсли;

КонецПроцедуры

// Процедура отбирает новости по имени формы и имени события и, в зависимости от важности, отображает их.
// Эту процедуру следует вызывать, если в форме на клиенте хранится массив всех контекстных новостей.
// Если же на клиенте хранится только адрес временного хранилища всех новостей, то будет
//  невозможно просмотреть список важных новостей.
//
// Параметры:
//  Форма         - Управляемая форма или Структура - форма-владелец, в которой должен быть определен реквизит Новости произвольного типа (со структурой) с ключами:
//   * Новости                                  - Массив - массив структур всех новостей (со всеми важностями);
//   * АдресМассиваНовостей                     - Строка - адрес во временном хранилище (если массив Новости пустой);
//   * Метаданные                               - Строка - Имя метаданных этой формы;
//   * Форма                                    - Строка - Имя формы, по которому надо отбирать новости;
//   * ПолучатьНовостиНаСервере                 - Булево - Признак того, что новости были рассчитаны на сервере (Истина) или хранятся в кэше на клиенте (Ложь);
//   * ЗаголовокФормыКонтекстныхНовостей        - Строка - ;
//   * МассивСтруктурВажныхНовостей             - Массив - Массив важных новостей для последовательного показа. Если он пустой, то перезаполняется заново;
//  ИдентификаторыСобытий - Строка, Массив строк - Имя события (имена событий), по которым надо отбирать новости.
//
Процедура КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриПроизвольномСобытии(
			Форма,
			ИдентификаторыСобытий) Экспорт

	Если НЕ ОбработкаНовостейКлиентПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСтрока = Тип("Строка");
	ТипМассив = Тип("Массив");

	лкИдентификаторыСобытий = Новый Массив;
	Если ТипЗнч(ИдентификаторыСобытий) = ТипСтрока Тогда
		лкИдентификаторыСобытий.Добавить(СокрЛП(Лев(ИдентификаторыСобытий, 50))); // Ограничение на длину события
	ИначеЕсли ТипЗнч(ИдентификаторыСобытий) = ТипМассив Тогда
		лкИдентификаторыСобытий = ИдентификаторыСобытий;
	Иначе
		Возврат;
	КонецЕсли;

	// Может быть три варианта хранения новостей в форме:
	// - массив структур новостей (больше данных передается с клиента на сервер и обратно, но можно вызывать просмотр новостей на клиентские события);
	// - адрес временного хранилища (меньше данных передается с клиента на сервер и обратно, но нельзя вызывать просмотр новостей на клиентские события);
	// - клиентский кэш (в глобальной переменной "ПараметрыПриложения").
	ИдентификаторМетаданных = Форма.Новости.Метаданные;
	ИдентификаторФормы      = Форма.Новости.Форма;

	// Из списка новостей вывести на экран важные и очень важные непрочтенные новости.
	МассивВажныхНовостейСВключеннымиНапоминаниями      = Форма.Новости.МассивСтруктурВажныхНовостей;
	СписокОченьВажныхНовостейСВключеннымиНапоминаниями = Новый СписокЗначений;

	Если Форма.Новости.ПолучатьНовостиНаСервере = Истина Тогда
		МассивСтруктурНовостей = Форма.Новости.Новости; // Массив структур всех новостей или Неопределено, если передан адрес временного хранилища.
		АдресМассиваНовостей   = Форма.Новости.АдресМассиваНовостей; // Адрес временного хранилища с массивом структур новостей.
	Иначе // Новости хранятся в кэше на клиенте.
		Форма_Новости_ИзКэша = ПолучитьКонтекстныеНовостиИзКэшаПриложения(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			Форма.Новости.ЗаголовокФормыКонтекстныхНовостей,
			Неопределено); // События "ПриОткрытии" - оставить пустым, т.е. брать по-умолчанию
		МассивСтруктурНовостей = Форма_Новости_ИзКэша.Новости;
		АдресМассиваНовостей   = ""; // Адрес временного хранилища оставим пустым
	КонецЕсли;

	Если ТипЗнч(МассивСтруктурНовостей) = ТипМассив Тогда
		Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
			Если СокрЛП(ВРег(ТекущаяНовость.Форма)) = СокрЛП(ВРег(ИдентификаторФормы)) Тогда
				Если ТекущаяНовость.Важность = 1 Тогда // Очень важная новость
					Если ТекущаяНовость.ОповещениеВключено = Истина Тогда
						Для Каждого ТекущийИдентификаторСобытия Из лкИдентификаторыСобытий Цикл
							Если СокрЛП(ВРег(ТекущаяНовость.Событие)) = СокрЛП(ВРег(ТекущийИдентификаторСобытия)) Тогда
								// В массиве новостей могут храниться новости с одинаковым идентификатором Метаданные / Форма,
								//  но для разных событий. Исключить задвоение новостей.
								НайденнаяНовость = СписокОченьВажныхНовостейСВключеннымиНапоминаниями.НайтиПоЗначению(ТекущаяНовость.Новость);
								Если НайденнаяНовость = Неопределено Тогда
									// При формировании списка новостей надо отмечать прочтенные галочкой (Пометка = Истина).
									СписокОченьВажныхНовостейСВключеннымиНапоминаниями.Добавить(ТекущаяНовость.Новость, , ТекущаяНовость.Прочтена);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Если есть массив структур новостей, то смотреть его, иначе - по адресу временного хранилища.
	Если ТипЗнч(МассивСтруктурНовостей) = ТипМассив Тогда // Массив структур новостей
		// При просмотре глобальных очень важных новостей, открывать каждую в отдельной форме.
		// Про просмотре контекстных очень важных новостей, их можно открывать в одной форме.
		Если СписокОченьВажныхНовостейСВключеннымиНапоминаниями.Количество() > 1 Тогда
			ФормаНовостей = ПоказатьНовости(
				Новый Структура("РежимОткрытияОкна, Заголовок, СписокНовостей, ВремяПереносаПоказатьПозжеМинут, СкрыватьСписокНовостейДляОднойНовости",
					"БлокироватьОкноВладельца",
					Форма.Новости.ЗаголовокФормыКонтекстныхНовостей,
					СписокОченьВажныхНовостейСВключеннымиНапоминаниями,
					15, // ВремяПереносаПоказатьПозжеМинут
					Ложь), // СкрыватьСписокНовостейДляОднойНовости
				Форма, // ФормаВладелец
				Истина); // Не проверять уникальность
		ИначеЕсли СписокОченьВажныхНовостейСВключеннымиНапоминаниями.Количество() = 1 Тогда
			// Контекстную новость, даже если она одна, все равно показывать в форме
			//  с кнопками (Показать позже, Не показывать), без возможности установки флажка.
			// Показ единственной новости осуществляется функцией ПоказатьНовость.
			ФормаНовостей = ПоказатьНовости(
				Новый Структура("РежимОткрытияОкна, Заголовок, СписокНовостей, ВремяПереносаПоказатьПозжеМинут, СкрыватьСписокНовостейДляОднойНовости",
					"БлокироватьОкноВладельца",
					Форма.Новости.ЗаголовокФормыКонтекстныхНовостей,
					СписокОченьВажныхНовостейСВключеннымиНапоминаниями,
					15, // ВремяПереносаПоказатьПозжеМинут
					Ложь), // СкрыватьСписокНовостейДляОднойНовости
				Форма, // ФормаВладелец
				Истина); // Не проверять уникальность
		Иначе // Нет очень важных новостей.
		КонецЕсли;
	ИначеЕсли ТипЗнч(АдресМассиваНовостей) = ТипСтрока Тогда // Адрес временного хранилища.
		// Проверка на наличие очень важных новостей ПриОткрытии осуществляется в КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии.
		// При других событиях форма будет открываться всегда и если новостей нет, то открытие формы будет отменяться.
		СписокИдентификаторыСобытий = Новый СписокЗначений;
		СписокИдентификаторыСобытий.ЗагрузитьЗначения(лкИдентификаторыСобытий);
		ФормаНовостей = ПоказатьНовости(
			Новый Структура("РежимОткрытияОкна, Заголовок, АдресМассиваНовостей, ИдентификаторФормы, ИдентификаторыСобытий, ВремяПереносаПоказатьПозжеМинут, СкрыватьСписокНовостейДляОднойНовости",
				"БлокироватьОкноВладельца", // РежимОткрытияОкна
				Форма.Новости.ЗаголовокФормыКонтекстныхНовостей, // Заголовок
				АдресМассиваНовостей, // АдресМассиваНовостей
				Форма.Новости.Форма, // ИдентификаторФормы
				СписокИдентификаторыСобытий, // ИдентификаторыСобытий
				15, // ВремяПереносаПоказатьПозжеМинут
				Ложь), // СкрыватьСписокНовостейДляОднойНовости
			Форма, // ФормаВладелец
			Истина); // Не проверять уникальность
	КонецЕсли;

	// Для ситуации, когда массив важных новостей заранее не рассчитан (это будет для всех событий, кроме ПриОткрытии),
	//  но новости уже хранятся на клиенте в памяти формы, то заполнить массив таких важных новостей заново.
	Если (ТипЗнч(МассивВажныхНовостейСВключеннымиНапоминаниями) <> ТипМассив)
			ИЛИ (лкИдентификаторыСобытий.Найти(ВРег("ПриОткрытии")) <> Неопределено) Тогда
		Если ТипЗнч(МассивСтруктурНовостей) = ТипМассив Тогда
			МассивВажныхНовостейСВключеннымиНапоминаниями = Новый Массив; // Пересчитывать заново
			Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
				Если СокрЛП(ВРег(ТекущаяНовость.Форма)) = СокрЛП(ВРег(ИдентификаторФормы)) Тогда
					Если ТекущаяНовость.Важность = 2 Тогда // Важная новость
						Если ТекущаяНовость.ОповещениеВключено = Истина Тогда
							Для Каждого ТекущийИдентификаторСобытия Из лкИдентификаторыСобытий Цикл
								Если СокрЛП(ВРег(ТекущаяНовость.Событие)) = СокрЛП(ВРег(ТекущийИдентификаторСобытия)) Тогда
									МассивВажныхНовостейСВключеннымиНапоминаниями.Добавить(ТекущаяНовость);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(МассивВажныхНовостейСВключеннымиНапоминаниями) = ТипМассив Тогда
		Если МассивВажныхНовостейСВключеннымиНапоминаниями.Количество() > 0 Тогда
			НачатьПоследовательныйПоказВажныхНовостей(МассивВажныхНовостейСВключеннымиНапоминаниями);
		КонецЕсли;
	КонецЕсли;
	Форма.Новости.Вставить("МассивСтруктурВажныхНовостей", Неопределено); // После однократного показа очистить ключ, чтобы не передавался между клиентом и сервером

КонецПроцедуры

// Функция получает контекстные новости из кэша. В случае необходимости кэш перезаполняется.
// Она используется в том случае, если выбрана стратегия отказа от расчета списка контекстных новостей в ПриСозданииНаСервере.
//
// Параметры:
//  ИдентификаторМетаданных           - Строка - Идентификатор метаданных, должен совпадать с таким же идентификатором в самой новости;
//  ИдентификаторФормы                - Строка - Идентификатор формы, должен совпадать с таким же идентификатором в самой новости;
//  ЗаголовокФормыКонтекстныхНовостей - Строка - ;
//  ИдентификаторыСобытийПриОткрытии  - Строка, Массив - строка или массив строк идентификаторов события "ПриОткрытии".
//                                        Если передано какое-то значение, то будет подсчитано количество очень важных контекстных
//                                        новостей. И если это количество > 0, то открывающая форма инициирует
//                                        открытие формы просмотра таких новостей.
//
// Возвращаемое значение:
//   Структура - структура контекстных новостей для указанной комбинации ИдентификаторМетаданных / ИдентификаторФормы.
//       Ключи см. в ОбработкаНовостей.ПолучитьКонтекстныеНовости.
//
Функция ПолучитьКонтекстныеНовостиИзКэшаПриложения(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			ЗаголовокФормыКонтекстныхНовостей = "",
			ИдентификаторыСобытийПриОткрытии = "ПриОткрытии") Экспорт

	// В памяти клиента в переменной ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей"])
	//  должно храниться соответствие следующей структуры:
	// Ключ: ИдентификаторМетаданных;
	// Значение: Соответствие:
	//   Ключ: ИдентификаторФормы;
	//   Значение: Структура:
	//     Ключ: ДатаЗаполнения, если прошло много времени, то обновить;
	//     Ключ: Новости (массив структур);
	//     Ключ: ЗаголовокФормыКонтекстныхНовостей;
	//     Ключ: КоличествоНовостей;
	//     Ключ: КоличествоНепрочитанныхНовостей;
	//     Ключ: КоличествоВажныхНовостейПриОткрытии;
	//     Ключ: КоличествоОченьВажныхНовостейПриОткрытии;
	//     Ключ: КоличествоПостоянныхНовостей;
	//     Ключ: МассивСтруктурВажныхНовостей;
	//     Ключ: МассивСтруктурПостоянныхНовостей.
	ТипСоответствие = Тип("Соответствие");
	ТипСтруктура    = Тип("Структура");
	ТипДата         = Тип("Дата");
	РассчитатьДляФормы = Ложь;

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
	лкКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];

	Если ТипЗнч(лкКэшКонтекстныхНовостей) = ТипСоответствие Тогда
		НайденноеЗначениеДляМетаданных = лкКэшКонтекстныхНовостей.Получить(ИдентификаторМетаданных);
		Если (НайденноеЗначениеДляМетаданных = Неопределено)
				ИЛИ (ТипЗнч(НайденноеЗначениеДляМетаданных) <> ТипСоответствие) Тогда // Заполнить
			лкКэшКонтекстныхНовостей.Вставить(ИдентификаторМетаданных, Новый Соответствие);
			РассчитатьДляФормы = Истина;
		Иначе
			НайденноеЗначениеДляФормы = НайденноеЗначениеДляМетаданных.Получить(ИдентификаторФормы);
			Если (НайденноеЗначениеДляФормы = Неопределено)
					ИЛИ (ТипЗнч(НайденноеЗначениеДляФормы) <> ТипСтруктура) Тогда // Заполнить
				РассчитатьДляФормы = Истина;
			Иначе
				// Когда последний раз обновлялось?
				Если НайденноеЗначениеДляФормы.Свойство("ДатаЗаполнения")
						И (ТипЗнч(НайденноеЗначениеДляФормы.ДатаЗаполнения) = ТипДата)
						И (НайденноеЗначениеДляФормы.ДатаЗаполнения >= (ТекущаяДата() - 1*60*60)) Тогда
					// Проверить остальные реквизиты.
					Если НайденноеЗначениеДляФормы.Свойство("Новости")
							И НайденноеЗначениеДляФормы.Свойство("ЗаголовокФормыКонтекстныхНовостей")
							И НайденноеЗначениеДляФормы.Свойство("КоличествоНовостей")
							И НайденноеЗначениеДляФормы.Свойство("КоличествоНепрочитанныхНовостей")
							И НайденноеЗначениеДляФормы.Свойство("КоличествоВажныхНовостейПриОткрытии")
							И НайденноеЗначениеДляФормы.Свойство("КоличествоОченьВажныхНовостейПриОткрытии")
							И НайденноеЗначениеДляФормы.Свойство("КоличествоПостоянныхНовостей")
							И НайденноеЗначениеДляФормы.Свойство("МассивСтруктурВажныхНовостей")
							И НайденноеЗначениеДляФормы.Свойство("МассивСтруктурПостоянныхНовостей") Тогда
						// Ничего не делать.
					Иначе
						РассчитатьДляФормы = Истина;
					КонецЕсли;
				Иначе
					РассчитатьДляФормы = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе // Неопределено или неправильный тип.
		лкКэшКонтекстныхНовостей = Новый Соответствие;
		лкКэшКонтекстныхНовостей.Вставить(ИдентификаторМетаданных, Новый Соответствие);
		РассчитатьДляФормы = Истина;
	КонецЕсли;

	Если РассчитатьДляФормы = Истина Тогда
		НайденноеЗначениеДляМетаданных = лкКэшКонтекстныхНовостей.Получить(ИдентификаторМетаданных);
		НайденноеЗначениеДляФормы = ОбработкаНовостейВызовСервера.ПолучитьКонтекстныеНовости(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			ЗаголовокФормыКонтекстныхНовостей,
			ИдентификаторыСобытийПриОткрытии);
		НайденноеЗначениеДляМетаданных.Вставить(ИдентификаторФормы, НайденноеЗначениеДляФормы);
		лкКэшКонтекстныхНовостей.Вставить(ИдентификаторМетаданных, НайденноеЗначениеДляМетаданных);
	КонецЕсли;

	ПараметрыПриложения.Вставить(ИмяПараметраПриложения, лкКэшКонтекстныхНовостей);

	Возврат НайденноеЗначениеДляФормы;

КонецФункции

// Процедура удаляет контекстные новости из кеша. Потом кеш перезаполняется.
// Ее надо запускать в том случае, когда у новостей изменился признак оповещения, чтобы кэш контекстных новостей перезаполнился.
// Она используется в том случае, если выбрана стратегия отказа от расчета списка контекстных новостей в ПриСозданииНаСервере.
//
// Параметры:
//  ИдентификаторМетаданных - Строка - Идентификатор метаданных, должен совпадать с таким же идентификатором в самой новости;
//  ИдентификаторФормы      - Строка - Идентификатор формы, должен совпадать с таким же идентификатором в самой новости.
//                                     Если Неопределено, то удаляются все контекстные новости для этого ИдентификаторМетаданных.
//
Процедура УдалитьКонтекстныеНовостиИзКэшаПриложения(
				ИдентификаторМетаданных,
				ИдентификаторФормы = Неопределено) Экспорт

	ТипСоответствие = Тип("Соответствие");

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
	лкКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];

	Если ТипЗнч(лкКэшКонтекстныхНовостей) = ТипСоответствие Тогда
		НайденноеЗначениеДляМетаданных = лкКэшКонтекстныхНовостей.Получить(ИдентификаторМетаданных);
		Если (НайденноеЗначениеДляМетаданных <> Неопределено)
				И (ТипЗнч(НайденноеЗначениеДляМетаданных) = ТипСоответствие) Тогда
			Если ИдентификаторФормы = Неопределено Тогда
				лкКэшКонтекстныхНовостей.Удалить(ИдентификаторМетаданных);
			Иначе
				НайденноеЗначениеДляФормы = НайденноеЗначениеДляМетаданных.Получить(ИдентификаторФормы);
				Если (НайденноеЗначениеДляФормы <> Неопределено) Тогда // Заполнить
					НайденноеЗначениеДляМетаданных.Удалить(ИдентификаторФормы);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, лкКэшКонтекстныхНовостей);
	Иначе
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, Новый Соответствие);
	КонецЕсли;

КонецПроцедуры

// Процедура запускает оптимизацию кеша контекстных новостей
//  (глобальной переменной ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей"])).
// Оптимизация заключается в:
// 1) Если есть структуры, полученные > 1 часа назад, то удалить их;
// 2) Если количество структур Метаданные / Форма >= 50, то удалить самые старые (по времени получения), чтобы осталось 40 структур.
//
// Параметры:
//  Нет.
//
Процедура ОптимизацияКонтекстныхНовостейВКешеПриложения() Экспорт

	ТипСоответствие = Тип("Соответствие");
	ТипСтруктура    = Тип("Структура");
	ТипДата         = Тип("Дата");

	СписокСтруктур = Новый СписокЗначений;

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
	лкКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];

	// 1. Удалить все устаревшие кэши контекстных новостей (полученные более часа назад).
	// Параллельно собрать данные для удаления кэша по времени или по количеству.
	Если ТипЗнч(лкКэшКонтекстныхНовостей) = ТипСоответствие Тогда
		Для Каждого лкИмяМетаданных Из лкКэшКонтекстныхНовостей Цикл
			Если ТипЗнч(лкИмяМетаданных.Значение) = ТипСоответствие Тогда
				Для Каждого лкИмяФормы Из лкИмяМетаданных.Значение Цикл
					Если ТипЗнч(лкИмяФормы.Значение) = ТипСтруктура Тогда
						Если лкИмяФормы.Значение.Свойство("ДатаЗаполнения")
								И ТипЗнч(лкИмяФормы.Значение.ДатаЗаполнения) = ТипДата
								И лкИмяФормы.Значение.ДатаЗаполнения >= (ТекущаяДата() - 1*60*60) Тогда
							// Данные актуальны, сохранить их для следующей проверки
							СписокСтруктур.Добавить(
								Новый Структура("ИдентификаторМетаданных, ИдентификаторФормы", 
									лкИмяМетаданных.Ключ,
									лкИмяФормы.Ключ),
								Формат(лкИмяФормы.Значение.ДатаЗаполнения, "ДФ=yyyyMMddhhmmss"));
						Иначе
							УдалитьКонтекстныеНовостиИзКэшаПриложения(лкИмяМетаданных.Ключ, лкИмяФормы.Ключ);
						КонецЕсли;
					Иначе
						УдалитьКонтекстныеНовостиИзКэшаПриложения(лкИмяМетаданных.Ключ, лкИмяФормы.Ключ);
					КонецЕсли;
				КонецЦикла;
			Иначе
				УдалитьКонтекстныеНовостиИзКэшаПриложения(лкИмяМетаданных.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;
	Иначе
		лкКэшКонтекстныхНовостей = Новый Соответствие;
	КонецЕсли;

	ПараметрыПриложения.Вставить(ИмяПараметраПриложения, лкКэшКонтекстныхНовостей);

	// 2. Удалить самые старые кэши контекстных новостей, если общее количество кэшей > 50, чтобы осталось 40 кэшей.
	Если СписокСтруктур.Количество() >= 50 Тогда
		СписокСтруктур.СортироватьПоПредставлению(НаправлениеСортировки.Убыв); // Самые старые - в конце
		СколькоУдалить = СписокСтруктур.Количество() - 40;
		Для С=0 По СколькоУдалить-1 Цикл
			УдалитьКонтекстныеНовостиИзКэшаПриложения(
				СписокСтруктур[40+С].Значение.ИдентификаторМетаданных,
				СписокСтруктур[40+С].Значение.ИдентификаторФормы);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегулярнаяПроверкаНовостейТребующихПрочтения

// Если запускать ПоказатьОповещениеПользователя в цикле, то все новости вывалятся в
//  информационную строку и будет незаметно, что новостей много.
// Эта процедура запускает последовательный показ важных новостей с интервалом 7 секунд (7 секунд - переопределяется).
// Примечание: В связи с изменениями в платформе (начиная с 8.3.11), этот механизм будет удален.
// Подробности: https://wonderland.v8.1c.ru/blog/mekhanizm-opoveshcheniy-polzovatelya-i-tsentr-opoveshcheniy/.
//
// Параметры:
//  ВажныеНовости      - Массив структур - новости с важностью "Важная", где:
//    * Новость                        - СправочникСсылка.Новости - ссылка на новость, обязательный ключ;
//    * НовостьУникальныйИдентификатор - УникальныйИдентификатор, Неопределено - УИН от ссылки на новость, НЕобязательный ключ;
//    * НавигационнаяСсылка            - Строка - навигационная ссылка на новость, обязательный ключ;
//    * НовостьНаименование            - Строка - заголовок новости, обязательный ключ;
//    * НовостьПодзаголовок            - Строка - подзаголовок новости, обязательный ключ;
//    * ОповещениеВключено             - Булево, Неопределено - Признак, что оповещение включено, НЕобязательный ключ.
//
Процедура НачатьПоследовательныйПоказВажныхНовостей(ВажныеНовостиСВключеннымиНапоминаниями) Экспорт

	// Массив структур новостей и номер последней показанной новости хранятся в глобальном параметре
	//  с именем "ИнтернетПоддержкаПользователей.Новости.ПоследовательныйПоказВажныхНовостей" типа Структура с ключами:
	// * ТекущаяПоказываемаяНовость - число от 0 до количество новостей минус 1;
	// * ВажныеНовостиСВключеннымиНапоминаниями - Массив структур, с обязательными ключами;
	//   ** Новость                        - СправочникСсылка.Новости - ссылка на новость;
	//   ** НавигационнаяСсылка            - Строка - навигационная ссылка на новость;
	//   ** НовостьНаименование            - Строка - заголовок новости;
	//   ** НовостьПодзаголовок            - Строка - подзаголовок новости.
	// Каждое обращение в обработчике ожидания будет увеличивать счетчик ТекущаяПоказываемаяНовость до тех пор, пока есть новости для показа.
	// При последнем обращении обработчик ожидания отключается, а глобальная переменная очищается.

	// Предварительно отключить обработчик последовательного показа - может прерваться текущий показ важных новостей.
	ОтключитьОбработчикОжидания("ПоследовательныйПоказВажныхНовостей");

	ТипСоответствие = Тип("Соответствие");
	ТипМассив       = Тип("Массив");
	ТипЧисло        = Тип("Число");

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.ПоследовательныйПоказВажныхНовостей";

	Если ТипЗнч(ВажныеНовостиСВключеннымиНапоминаниями) = ТипМассив Тогда
		Если ВажныеНовостиСВключеннымиНапоминаниями.Количество() > 0 Тогда

			// Первую новость показать сразу.
			// Показать важную новость.
			ТекущаяНовость = ВажныеНовостиСВключеннымиНапоминаниями[0];
			ПоказатьОповещениеПользователя(
				СокрЛП(ТекущаяНовость.НовостьНаименование), // Текст, Новость.Наименование
				ТекущаяНовость.НавигационнаяСсылка, // НавигационнаяСсылка
				СокрЛП(ТекущаяНовость.НовостьПодзаголовок), // Пояснение, Новость.Подзаголовок
				БиблиотекаКартинок.ВажностьНовостиВажная); // Картинка
			// Конец Показать важную новость

			// Последующие новости (если они есть) показывать каждые [ИнтервалСекунд] несколько секунд.
			Если ВажныеНовостиСВключеннымиНапоминаниями.Количество() > 1 Тогда
				СтруктураПоследовательногоПоказаВажныхНовостей = Новый Структура(
					"ТекущаяПоказываемаяНовость, ВажныеНовостиСВключеннымиНапоминаниями",
						1, // Начать показ со второй новости [0...х]
						ВажныеНовостиСВключеннымиНапоминаниями);
				ПараметрыПриложения.Вставить(ИмяПараметраПриложения, СтруктураПоследовательногоПоказаВажныхНовостей);

				ИнтервалСекунд = 7;
				ОбработкаНовостейКлиентПереопределяемый.ПереопределитьИнтервалПоказаВажныхНовостей(ИнтервалСекунд);
				Если (ТипЗнч(ИнтервалСекунд) <> ТипЧисло)
						ИЛИ (ИнтервалСекунд < 1)
						ИЛИ (ИнтервалСекунд > 30) Тогда
					ИнтервалСекунд = 7;
				КонецЕсли;

				ПодключитьОбработчикОжидания("ПоследовательныйПоказВажныхНовостей", ИнтервалСекунд, Ложь);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура регулярно смотрит в глобальную переменную
//  ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.ПоследовательныйПоказВажныхНовостей"] и в случае наличия
//  информации для показа (важные новости) - последовательно выводит их до последней новости.
//
// Параметры:
//  Нет.
//
Процедура ПродолжитьПоследовательныйПоказВажныхНовостей() Экспорт

	ТипСоответствие = Тип("Соответствие");
	ТипСтруктура    = Тип("Структура");
	ТипМассив       = Тип("Массив");
	ТипЧисло        = Тип("Число");

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.ПоследовательныйПоказВажныхНовостей";

	СтруктураПоследовательногоПоказаВажныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];

	Если ТипЗнч(СтруктураПоследовательногоПоказаВажныхНовостей) = ТипСтруктура Тогда
		ТекущаяПоказываемаяНовость = 0;
		ВажныеНовостиСВключеннымиНапоминаниями = Неопределено;
		СтруктураПоследовательногоПоказаВажныхНовостей.Свойство("ТекущаяПоказываемаяНовость", ТекущаяПоказываемаяНовость);
		СтруктураПоследовательногоПоказаВажныхНовостей.Свойство("ВажныеНовостиСВключеннымиНапоминаниями", ВажныеНовостиСВключеннымиНапоминаниями);
		Если (ТипЗнч(ТекущаяПоказываемаяНовость) = ТипЧисло)
				И (ТипЗнч(ВажныеНовостиСВключеннымиНапоминаниями) = ТипМассив)
				И (ВажныеНовостиСВключеннымиНапоминаниями.Количество() >= (ТекущаяПоказываемаяНовость+1)) Тогда

			// Показать важную новость.
			ТекущаяНовость = ВажныеНовостиСВключеннымиНапоминаниями[ТекущаяПоказываемаяНовость];
			ПоказатьОповещениеПользователя(
				СокрЛП(ТекущаяНовость.НовостьНаименование), // Текст, Новость.Наименование
				ТекущаяНовость.НавигационнаяСсылка, // НавигационнаяСсылка
				СокрЛП(ТекущаяНовость.НовостьПодзаголовок), // Пояснение, Новость.Подзаголовок
				БиблиотекаКартинок.ВажностьНовостиВажная); // Картинка
			// Конец Показать важную новость

			СтруктураПоследовательногоПоказаВажныхНовостей = Новый Структура(
				"ТекущаяПоказываемаяНовость, ВажныеНовостиСВключеннымиНапоминаниями",
					ТекущаяПоказываемаяНовость + 1,
					ВажныеНовостиСВключеннымиНапоминаниями);
			ПараметрыПриложения.Вставить(ИмяПараметраПриложения, СтруктураПоследовательногоПоказаВажныхНовостей);
		Иначе
			// Больше нет данных для показа - отключить обработчик ожидания.
			ОтключитьОбработчикОжидания("ПоследовательныйПоказВажныхНовостей");
		КонецЕсли;
	Иначе
		// Нет данных для показа - отключить обработчик ожидания.
		ОтключитьОбработчикОжидания("ПоследовательныйПоказВажныхНовостей");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

