
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Подключение 1С-Такском".
// ОбщийМодуль.Подключение1СТакскомКлиентСервер.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики бизнес-процессов

// Выполняет дополнительную проверку возможности запуска бизнес-процесса
// по точке входа и параметрам создания контекста взаимодействия.
// Вызывается из
// ИнтернетПоддержкаПользователейКлиентСервер.ОпределитьВозможностьЗапускаПоМестуИПараметрам().
//
// Параметры:
//	МестоЗапуска - Строка - точка входа бизнес-процесса.
//	ПараметрыИнтернетПоддержки - см. функцию
//		ИнтернетПоддержкаПользователей.ПараметрыСозданияКонтекста();
//	ОписаниеДействия - Структура - в структуре возвращается описание
//		выполняемого действия в случае запрета запуска бизнес-процесса.
//		см. ИнтернетПоддержкаПользователейКлиентСервер.ОпределитьВозможностьЗапускаПоМестуИПараметрам().
//
Процедура ОпределитьВозможностьЗапуска(МестоЗапуска, ПараметрыИнтернетПоддержки, ОписаниеДействия) Экспорт
	
	Если НЕ ПараметрыИнтернетПоддержки.ИспользоватьПодключение1СТакском Тогда
		
		ОписаниеДействия.Вставить("Действие", "ПоказатьСообщение");
		ОписаниеДействия.Вставить("Сообщение",
			НСтр("ru = 'Использование подключения 1С-Такском недоступно в текущем режиме работы.'"));
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет контекст выполнения команды сервиса Интернет-поддержки: клиент
// или сервер 1С:Предприятие.
// Вызывается из ИнтернетПоддержкаПользователейКлиентСервер.ТипКоманды().
//
// Параметры:
//	ИмяКоманды - Строка - имя выполняемой команды;
//	СоединениеНаСервере - Булево - Истина, если соединение с сервисом ИПП
//		устанавливается на сервере 1С:Предприятие.
//	КонтекстВыполнения - Число - в параметре возвращается контекст выполнения
//		команды: 0 - сервер 1С:Предприятия, 1 - клиент, -1 - неизвестная команда.
//
Процедура КонтекстВыполненияКоманды(ИмяКоманды, СоединениеНаСервере, КонтекстВыполнения) Экспорт
	
	Если ИмяКоманды = "setcodesregion" Тогда
		
		КонтекстВыполнения = ?(СоединениеНаСервере, 0, 1);
		
	ИначеЕсли ИмяКоманды = "performtheaction.findcertificatefingerprint"
		ИЛИ ИмяКоманды = "performtheaction.getinformationaboutorganization"
		ИЛИ ИмяКоманды = "performtheaction.getcertificate" Тогда
		
		КонтекстВыполнения = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при структурировании команды сервиса Интернет-поддержки на стороне
// сервера 1С:Предприятия.
// Подробнее см. функцию
// МониторИнтернетПоддержкиКлиентСервер.СтруктурироватьОтветСервера().
//
Процедура СтруктурироватьКомандуСервиса(ИмяКоманды, КомандаСервиса, СтруктураКоманды) Экспорт
	
	Если ИмяКоманды = "performtheaction" Тогда
		СтруктураКоманды = СтруктурированнаяКомандаВыполненияЗаданногоДействия(КомандаСервиса);
		
	ИначеЕсли ИмяКоманды = "setcodesregion" Тогда
		СтруктураКоманды = ИнтернетПоддержкаПользователейКлиентСервер.СтруктурироватьЗаписьПараметров(
			КомандаСервиса);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при необходимости определения параметров формы по ее индексу
// на стороне сервера 1С:Предприятия.
// Вызывается из ИнтернетПоддержкаПользователейКлиентСервер.ПараметрыВнутреннейФормы()
// Параметры:
//	ИндексФормы - Строка - индекс формы бизнес-процесса.
//	Параметры - Структура - параметры формы. В структуру добавляются поля:
//		* ИмяОткрываемойФормы - Строка - полное имя формы по ее индексу,
//			дополнительные параметры открытия формы.
//
Процедура ЗаполнитьПараметрыВнутреннейФормы(ИндексФормы, Параметры) Экспорт
	
	Если ИндексФормы = "ftx1" Тогда
		Параметры.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.УникальныйИдентификаторАбонента");
		
	ИначеЕсли ИндексФормы = "ftx2" Тогда
		Параметры.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.ЗаявкаНаРегистрациюАбонента");
		
	ИначеЕсли ИндексФормы = "ftx3" Тогда
		Параметры.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.ЛичныйКабинетАбонента");
		
	ИначеЕсли ИндексФормы = "ftx4" Тогда
		Параметры.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.ИзменениеТарифа");
		
	ИначеЕсли ИндексФормы = "ftx5" Тогда
		Параметры.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.РучнойВводУникальногоИдентификатора");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразование команды "performtheaction" во внутреннее представление.
//
Функция СтруктурированнаяКомандаВыполненияЗаданногоДействия(КомандаСервера)
	
	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл
		
		ИмяПараметра = НРег(СокрЛП(Параметр.name));
		Если ИмяПараметра = "action" Тогда
			
			Возврат Новый Структура("ИмяКоманды", "performtheaction." + НРег(СокрЛП(Параметр.value)));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Выполнение команды "Записать коды регионов в сессионные параметры".
//
Процедура СохранитьВПараметрахКодыРегионов(КСКонтекст, Знач СтруктураКоманды) Экспорт
	
	МассивПараметров = СтруктураКоманды.Параметры;
	СписокКодов      = Новый СписокЗначений;
	
	Для каждого Параметр Из МассивПараметров Цикл
		
		// Именем параметра служит код, Значением - наименование региона.
		// Выбирать удобнее по названию региона - поэтому замена.
		СписокКодов.Добавить(
			Параметр.Имя,
			Параметр.Имя + " - " + Параметр.Значение);
		
	КонецЦикла;
	
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(
		КСКонтекст,
		"codesRegionED",
		СписокКодов);
	
КонецПроцедуры

#КонецОбласти

