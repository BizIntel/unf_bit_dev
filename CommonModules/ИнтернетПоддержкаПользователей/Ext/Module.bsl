////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.ИнтернетПоддержкаПользователей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область АутентификацияВСервисахИнтернетПоддержки

// Возвращает логин и пароль пользователя Интернет-поддержки,
// сохраненные в информационной базе.
//
// Возвращаемое значение:
//	Структура - структура, содержащая логин и пароль пользователя
//		Интернет-поддержки:
//		* Логин - Строка - логин пользователя Интернет-поддержки;
//		* Пароль - Строка - пароль пользователя Интернет-поддержки.
//	Неопределено - при отсутствии сохраненных данных аутентификации.
//
Функция ДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИдентификаторПодсистемы(),
		"login,password");

	Если ДанныеВБезопасномХранилище.login <> Неопределено
		И ДанныеВБезопасномХранилище.password <> Неопределено Тогда
		Возврат Новый Структура(
			"Логин, Пароль",
			ДанныеВБезопасномХранилище.login,
			ДанныеВБезопасномХранилище.password);
	КонецЕсли;

КонецФункции

// Возвращает тикет аутентификации пользователя на портале поддержки.
// Возвращенный тикет может быть проверен вызовом операции checkTicket()
// сервиса https://login.1c.ru/api/public/ticket?wsdl или
// https://login.1c.eu/api/public/ticket?wsdl.
// Важно. Получение тикета выполняется в соответствии с настройками
// библиотеки:
//	- доменная зона серверов (1c.ru или 1c.eu);
//	- таймаут подключения к серверам.
//
// Параметры:
//	ВладелецТикета - Строка - произвольное имя сервиса, для которого
//		выполняется аутентификация пользователя. Это же имя должно
//		использоваться при вызове операции checkTicket();
//		Не допускается незаполненное значение параметра.
//
// Возвращаемое значение:
//	Структура - результат получения тикета. Поля структуры:
//		* Тикет - Строка - полученный тикет аутентификации. Если при получении
//			тикета произошла ошибка (неверный логин или пароль или другая ошибка),
//			значение поля - пустая строка.
//		* КодОшибки - Строка - строковый код возникшей ошибки, который
//			может быть обработан вызывающим функционалом:
//				- <Пустая строка> - получение тикета выполнено успешно;
//				- "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//				- "ПревышеноКоличествоПопыток" - превышено количество попыток
//					получения тикета с некорректным логином и паролем;
//				- "ОшибкаПодключения" - ошибка при подключении к сервису;
//				- "ОшибкаСервиса" - внутренняя ошибка сервиса;
//				- "НеизвестнаяОшибка" - при получении тикета возникла
//					неизвестная (необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое
//			может быть отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое
//			может быть записано в журнал регистрации.
//
Функция ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета) Экспорт

	Если Не ЗначениеЗаполнено(ВладелецТикета) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""ВладелецТикета""'");
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Работа в модели сервиса.
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		Возврат МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
			ВладелецТикета);
	КонецЕсли;
	
	НастройкиСоединения = ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	ДанныеАутентификации = ДанныеАутентификацииПользователяИнтернетПоддержки();
	Если ДанныеАутентификации = Неопределено Тогда
		
		РезультатПолученияТикета = Новый Структура;
		РезультатПолученияТикета.Вставить("КодОшибки"         , "НеверныйЛогинИлиПароль");
		РезультатПолученияТикета.Вставить("СообщениеОбОшибке" , НСтр("ru = 'Неверный логин или пароль.'"));
		РезультатПолученияТикета.Вставить("ИнформацияОбОшибке", РезультатПолученияТикета.СообщениеОбОшибке);
		РезультатПолученияТикета.Вставить("Тикет"             , "");
		Возврат РезультатПолученияТикета;
		
	Иначе
		
		РезультатПолученияТикета = ИнтернетПоддержкаПользователейКлиентСервер.СлужебнаяТикетАутентификации(
			ДанныеАутентификации.Логин,
			ДанныеАутентификации.Пароль,
			ВладелецТикета,
			ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами());
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатПолученияТикета.КодОшибки)
		И РезультатПолученияТикета.КодОшибки <> "НеверныйЛогинИлиПароль"
		И РезультатПолученияТикета.КодОшибки <> "ПревышеноКоличествоПопыток"
		И РезультатПолученияТикета.КодОшибки <> "ОшибкаСервиса"
		И РезультатПолученияТикета.КодОшибки <> "НеизвестнаяОшибка" Тогда

		Если РезультатПолученияТикета.КодОшибки = "ClientError" Или РезультатПолученияТикета.КодОшибки = "ConnectError" Тогда
			РезультатПолученияТикета.КодОшибки = "ОшибкаПодключения";
		ИначеЕсли РезультатПолученияТикета.КодОшибки = "ServerError" Или РезультатПолученияТикета.КодОшибки = "InternalError" Тогда
			РезультатПолученияТикета.КодОшибки = "ОшибкаСервиса";
		Иначе
			РезультатПолученияТикета.КодОшибки = "НеизвестнаяОшибка";
		КонецЕсли;

	КонецЕсли;

	Возврат РезультатПолученияТикета;

КонецФункции

#КонецОбласти

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область БСПБазоваяФункциональность

// См. процедуру
// ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиентаПриЗапуске().
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт

	ПараметрыИПП = Новый Структура;

	ОписаниеОбработчиков = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий();

	Для каждого ИмяМодуля Из ОписаниеОбработчиков.Сервер.ПараметрыРаботыКлиентаПриЗапуске Цикл
		МодульОбработчика = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
		Если МодульОбработчика <> Неопределено Тогда
			МодульОбработчика.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыИПП);
		КонецЕсли;
	КонецЦикла;

	ПараметрыИПП.Вставить("ПриНачалеРаботыСистемы", ОписаниеОбработчиков.Клиент.ПриНачалеРаботыСистемы);

	Параметры.Вставить("ИнтернетПоддержкаПользователей", ПараметрыИПП);

КонецПроцедуры

// См. процедуру
// ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиента().
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт

	ПараметрыИПП = Новый Структура;

	ПараметрыИПП.Вставить("ИмяКонфигурации"          , Метаданные.Имя);
	ПараметрыИПП.Вставить("ИмяПрограммы"             , ИмяПрограммы());
	ПараметрыИПП.Вставить("ВерсияКонфигурации"       , Метаданные.Версия);
	ПараметрыИПП.Вставить("КодЛокализации"           , ТекущийКодЛокализации());
	ПараметрыИПП.Вставить("ВерсияОбработкиОбновления", ВерсияОбработкиОбновления());

	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	ПараметрыИПП.Вставить("УстанавливатьПодключениеНаСервере", НастройкиСоединения.УстанавливатьПодключениеНаСервере);
	ПараметрыИПП.Вставить("ТаймаутПодключения"               , НастройкиСоединения.ТаймаутПодключения);
	ПараметрыИПП.Вставить("ДоменРасположенияСерверовИПП"     , НастройкиСоединения.ДоменРасположенияСерверовИПП);

	ПараметрыИПП.Вставить(
		"ДоступноПодключениеИнтернетПоддержки",
		ДоступноПодключениеИнтернетПоддержки());

	// Обработчики бизнес-процессов
	ПараметрыИПП.Вставить("КлиентскиеОбработчикиБизнесПроцессов",
		ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий().Клиент.БизнесПроцессы);

	Параметры.Вставить("ИнтернетПоддержкаПользователей", ПараметрыИПП);

КонецПроцедуры

// См. процедуру
// ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт

	// Базовая функциональность БИП
	// 2.1.2.1
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.1.2.1",
		"Роль.ИспользованиеИПП",
		"Роль.ПодключениеКСервисуИнтернетПоддержки",
		"ИнтернетПоддержкаПользователей");

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

// См. процедуру
// ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса().
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ПараметрыКлиентаНаСервереБИП", "ИнтернетПоддержкаПользователей.УстановкаПараметровСеанса");
	
	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	// Конец Новости
	
	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	// Конец ОблачныйАрхив
	
КонецПроцедуры

// См. процедуру
// РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда

		НовыеРазрешения = Новый Массив;

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"webits.1c.ru",
			443,
			НСтр("ru = 'Интернет-поддержка пользователей (зона ru)'"));
		НовыеРазрешения.Добавить(Разрешение);

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"login.1c.ru",
			443,
			НСтр("ru = 'Сервисы аутентификации (зона ru)'"));
		НовыеРазрешения.Добавить(Разрешение);

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"login.1c.eu",
			443,
			НСтр("ru = 'Сервисы аутентификации (зона eu)'"));
		НовыеРазрешения.Добавить(Разрешение);

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"portal-support.1c.ru",
			443,
			НСтр("ru = 'Сервисы службы технической поддержки (зона ru)'"));
		НовыеРазрешения.Добавить(Разрешение);

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"portal-support.1c.eu",
			443,
			НСтр("ru = 'Сервисы службы технической поддержки (зона eu)'"));
		НовыеРазрешения.Добавить(Разрешение);

		ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));

		// ПолучениеОбновленийПрограммы
		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
			МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
			МодульПолучениеОбновленийПрограммы.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
		КонецЕсли;
		// Конец ПолучениеОбновленийПрограммы

	КонецЕсли;
	
	// СПАРК
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	// Конец СПАРК
	
	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	// Конец Новости
	
КонецПроцедуры

#КонецОбласти

#Область БСППользователи

// См. процедуру
// ПользователиПереопределяемый.ПриОпределенииНазначенияРолей().
//
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриОпределенииНазначенияРолей(НазначениеРолей);
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

#КонецОбласти

#Область БСПТекущиеДела

// См. процедуру
// ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел().
//
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт

	// ПолучениеОбновленийПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		Обработчики.Добавить(МодульПолучениеОбновленийПрограммы);
	КонецЕсли;
	// Конец ПолучениеОбновленийПрограммы
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		Обработчики.Добавить(МодульСПАРКРиски);
	КонецЕсли;
	// Конец СПАРКРиски
	
	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		Обработчики.Добавить(МодульОблачныйАрхив);
	КонецЕсли;
	// Конец ОблачныйАрхив

КонецПроцедуры

// См. процедуру
// ТекущиеДелаПереопределяемый.ПриОпределенииПорядкаРазделовКомандногоИнтерфейса().
//
Процедура ПриОпределенииПорядкаРазделовКомандногоИнтерфейса(Разделы) Экспорт

	Разделы.Добавить(Метаданные.Подсистемы.ИнтернетПоддержкаПользователей);

КонецПроцедуры

#КонецОбласти

#Область БСПВариантыОтчетов

// Интеграция с подсистемой СтандартныеПодсистемы.ВариантыОтчетов.
//
// Содержит настройки размещения вариантов отчетов в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоПредопределенных().
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

#КонецОбласти

#Область БСПРаботаВМоделиСервиса

// См. описание этой же процедуры в общем модуле
// РаботаВМоделиСервисаПереопределяемый.
//
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обработка включения разделения по областям данных.'"));
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриПолученииСпискаШаблонов(Шаблоны) Экспорт
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриПолученииСпискаШаблонов(Шаблоны);
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ПоставляемыеДанныеПереопределяемый.
//
Процедура ПолучитьОбработчикиПоставляемыхДанных(Обработчики) Экспорт
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		СтрОбработчик = Обработчики.Добавить();
		СтрОбработчик.ВидДанных      = "ТипыСобытийМониторинга1СПАРКРиски";
		СтрОбработчик.КодОбработчика = "ТипыСобытийМониторинга1СПАРКРиски";
		СтрОбработчик.Обработчик     = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияСБиблиотекойТехнологияСервиса

// См. процедуру
// ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке().
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

// См. процедуру
// ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки().
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт

	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	// Конец СПАРКРиски

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	// Конец Новости

	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	// Конец ОблачныйАрхив

КонецПроцедуры

// См. процедуру
// ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиДанных().
//
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПослеЗагрузкиДанных(Контейнер);
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

// См. процедуру ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
//
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	Услуги = Новый Массив;
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриФормированииСпискаУслуг(Услуги);
	КонецЕсли;
	// Конец СПАРКРиски
	
	Если Услуги.Количество() > 0 Тогда
		// Поставщик добавляет только при наличии услуг.
		ПоставщикПортал1СИТС = ПостащикУслугПортал1СИТСПриФормированииСпискаУслуг(ПоставщикиУслуг);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоставщикПортал1СИТС.Услуги, Услуги);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание поставщика "Портал 1С:ИТС" для заполнения списка услуг
// в методе ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
// Поставщик добавляется в список поставщиков.
//
// Параметры:
//	ПоставщикиУслуг - см. процедуру ПриФормированииСпискаУслуг.
//
// Возвращаемое значение:
//	Структура - см. процедуру ПриФормированииСпискаУслуг,
//		описание параметра ПоставщикиУслуг.
//
// Пример:
//	// Использование в методе ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
//	ПоставщикПортал1СИТС =
//		ИнтернетПоддержкаПользователей.ПостащикУслугПортал1СИТСПриФормированииСпискаУслуг(ПоставщикиУслуг);
//	НоваяУслуга = Новый Структура;
//	НоваяУслуга.Вставить("Идентификатор", <Идентификатор услуги>);
//	НоваяУслуга.Вставить("Наименование" , <Наименование услуги>);
//	НоваяУслуга.Вставить("ТипУслуги"    , <Тип услуги>);
//	ПоставщикПортал1СИТС.Услуги.Добавить(НоваяУслуга);
//
Функция ПостащикУслугПортал1СИТСПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	ИдентификаторПоставщикаУслугПортал1СИТС =
		ИнтернетПоддержкаПользователейКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС();
	Для Каждого ТекущийПоставщик Из ПоставщикиУслуг Цикл
		Если ТекущийПоставщик.Идентификатор = ИдентификаторПоставщикаУслугПортал1СИТС Тогда
			Возврат ТекущийПоставщик;
		КонецЕсли;
	КонецЦикла;
	
	// Поставщика еще нет в списке - добавить нового поставщика.
	ПоставщикПортал1СИТС = Новый Структура;
	ПоставщикПортал1СИТС.Вставить("Идентификатор", ИдентификаторПоставщикаУслугПортал1СИТС);
	ПоставщикПортал1СИТС.Вставить("Наименование" , НСтр("ru = 'Портал 1С:ИТС'"));
	ПоставщикПортал1СИТС.Вставить("Услуги"       , Новый Массив);
	ПоставщикиУслуг.Добавить(ПоставщикПортал1СИТС);
	
	Возврат ПоставщикПортал1СИТС;
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Будет удалена в следующей редакции библиотеки.
// Необходимо использовать функции:
//		ИнтернетПоддержкаПользователейВызовСервера.ДоступноПодключениеИнтернетПоддержки();
//		МониторИнтернетПоддержки.ДоступноИспользованиеМонитораИнтернетПоддержки();
//		Подключение1СТакскомВызовСервера.ДоступноИспользованиеСервиса1СТакском();
// если в конфигурацию внедрены соответствующие подсистемы.
//
// Определяет, разрешено ли использование Интернет-поддержки в текущем режиме
// работы информационной базы.
// Определяет на основании значений: 1) Это локальный режим работы;
// 2) реализации процедуры
// ИнтернетПоддержкаПользователейПереопределяемый.ИспользоватьИнтернетПоддержку().
//
// Возвращаемое значение:
//	Булево - Истина - использование разрешено, Ложь - в противном случае.
//
Функция ИспользованиеИнтернетПоддержкиРазрешеноВТекущемРежимеРаботы() Экспорт

	// Запрет работы в модели сервиса
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;

	Отказ = Ложь;
	ИнтернетПоддержкаПользователейПереопределяемый.ИспользоватьИнтернетПоддержку(Отказ);

	Возврат (Отказ <> Истина);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// В вызывающем коде перед записью данных необходимо проверить права
// и установить привилегированный режим.
// Сохраняет логин и пароль пользователя в подсистеме Интернет-поддержки.
//
Функция СохранитьДанныеАутентификации(ДанныеАутентификации) Экспорт

	Если ДанныеАутентификации = Неопределено Тогда

		// Удалить все данные для логина из безопасного хранилища.
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы());
		ПриУдаленииЛогинаИПароляИзИБ();

	Иначе

		// Запись данных в безопасное хранилище
		ИДПодсистемы = ИдентификаторПодсистемы();
		НачатьТранзакцию();
		Попытка
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИДПодсистемы);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИДПодсистемы,
				ДанныеАутентификации.Логин,
				"login");

			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИДПодсистемы,
				ДанныеАутентификации.Пароль,
				"password");
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		ПриСохраненииЛогинаИПароляВИБ(ДанныеАутентификации.Логин, ДанныеАутентификации.Пароль);

	КонецЕсли;

КонецФункции

// Возвращает значение вспомогательного свойства БИП.
//
// Параметры:
//	Имя - Строка - имя получаемого свойства;
//	ЗначениеПоУмолчанию - Произвольный - значение свойства,
//		которое необходимо возвратить при отсутствии сохраненного свойства.
//
// Возвращаемое значение:
//	Произвольный - значение свойства.
//
Функция ЗначениеСвойстваБИП(Имя, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	СвойстваБИП = Константы.СвойстваБИП.Получить().Получить();
	Если ТипЗнч(СвойстваБИП) <> Тип("Соответствие") Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = СвойстваБИП.Получить(Имя);
	Если Результат = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает значение вспомогательного свойства БИП.
//
// Параметры:
//	Имя - Строка - имя устанавливаемого свойства;
//	Значение - - Произвольный - значение устанавливаемого свойства.
//
Процедура УстановитьЗначениеСвойстваБИП(Имя, Значение) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.СвойстваБИП");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Блокировка.Заблокировать();
	Попытка
		
		СвойстваБИП = Константы.СвойстваБИП.Получить().Получить();
		Если ТипЗнч(СвойстваБИП) <> Тип("Соответствие") Тогда
			СвойстваБИП = Новый Соответствие;
		КонецЕсли;
		
		СвойстваБИП.Вставить(Имя, Значение);
		Константы.СвойстваБИП.Установить(Новый ХранилищеЗначения(СвойстваБИП));
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Определяет, доступно ли текущему пользователю выполнение интерактивной
// авторизации в на портале 1С:ИТС в соответствии с текущим режимом работы
// и правами пользователя.
//
// Возвращаемое значение:
//	Булево - Истина - интерактивная авторизация доступна,
//		Ложь - в противном случае.
//
Функция ДоступноПодключениеИнтернетПоддержки() Экспорт

	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Пользователи.РолиДоступны("ПодключениеКСервисуИнтернетПоддержки", , Ложь) Тогда
		Возврат Истина;
	КонецЕсли;

	// Проверка функциональности, дающей возможность подключения ИПП
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки") Тогда
		МодульМониторИнтернетПоддержки = ОбщегоНазначения.ОбщийМодуль("МониторИнтернетПоддержки");
		Если МодульМониторИнтернетПоддержки.ДоступноИспользованиеМонитораИнтернетПоддержки() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском") Тогда
		МодульПодключение1СТакскомВызовСервера = ОбщегоНазначения.ОбщийМодуль("Подключение1СТакскомВызовСервера");
		Если МодульПодключение1СТакскомВызовСервера.ДоступноИспользованиеСервиса1СТакском() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Выполняет проверку, что переданный объект имеет тип СправочникОбъект.ИдентификаторыОбъектовМетаданных.
//
Функция ЭтоИдентификаторОбъектаМетаданных(Объект) Экспорт
	
	Возврат ТипЗнч(Объект) = Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных");
	
КонецФункции

// Записывает в журнал регистрации описание ошибки
// с именем события "Интернет-поддержка пользователей.Ошибка".
//
// Параметры:
//	СообщениеОбОшибке - Строка - строковое представление ошибки.
//	Данные - Произвольный - данные, к которым относится сообщение об ошибке.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке, Данные = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейОшибка(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		Данные,
		СообщениеОбОшибке);
	
КонецПроцедуры

// Записывает в журнал регистрации сообщение информации
// с именем события "Интернет-поддержка пользователей.Ошибка".
//
// Параметры:
//	Сообщение - Строка - строковое представление ошибки.
//	Данные - Произвольный - данные, к которым относится сообщение об ошибке.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(Сообщение, Данные = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейОшибка(),
		УровеньЖурналаРегистрации.Информация,
		,
		Данные,
		Сообщение);
	
КонецПроцедуры

#Область Тарификация

Функция УслугаПодключена(ИдентификаторУслуги, ЗначениеРазделителя = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// В локальном режиме нет функциональности
		// для проверки по данным ИБ.
		Возврат Истина;
	Иначе
		
		ТребуетсяРазделение = Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных();
		Если ТребуетсяРазделение Тогда
			Если ЗначениеРазделителя = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""ЗначениеРазделителя"".'");
			КонецЕсли;
			ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ЗначениеРазделителя);
		КонецЕсли;
		
		МодульТарификация = ОбщегоНазначения.ОбщийМодуль("Тарификация");
		Результат = МодульТарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(
			ИнтернетПоддержкаПользователейКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС(),
			ИдентификаторУслуги);
		
		Если ТребуетсяРазделение Тогда
			ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
		КонецЕсли;
		
		Если Не Результат Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Услуга с идентификатором %1 не подключена.'"),
					ИдентификаторУслуги));
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийСервисов

Функция ДополнительныеПараметрыВызоваОперацииСервиса() Экспорт
	
	Результат = Новый Соответствие;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И Не ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		
		СистИнфо = Новый СистемнаяИнформация;
		Результат.Вставить("ClientPlatformType",
			ИнтернетПоддержкаПользователейКлиентСервер.ИмяТипПлатформыСтр(
				СистИнфо.ТипПлатформы));
		Результат.Вставить("ClientOSVersion", СистИнфо.ВерсияОС);
		
	Иначе
		
		ПараметрыКлиента = ИнтернетПоддержкаПользователей.ПараметрыКлиента();
		Если ПараметрыКлиента <> Неопределено Тогда
			
			Если ПараметрыКлиента.Свойство("ТипПлатформы") Тогда
				Результат.Вставить("ClientPlatformType", ПараметрыКлиента.ТипПлатформы);
			КонецЕсли;
			
			Если ПараметрыКлиента.Свойство("ВерсияОС") Тогда
				Результат.Вставить("ClientOSVersion", ПараметрыКлиента.ВерсияОС);
			КонецЕсли;
			
		КонецЕсли;
		
		СистИнфо = Новый СистемнаяИнформация;
		Результат.Вставить("ServerPlatformType",
			ИнтернетПоддержкаПользователейКлиентСервер.ИмяТипПлатформыСтр(
				СистИнфо.ТипПлатформы));
		Результат.Вставить("ServerOSVersion", СистИнфо.ВерсияОС);
		
	КонецЕсли;
	
	Результат.Вставить("PlatformVersion", СистИнфо.ВерсияПриложения);
	
	Результат.Вставить("LibraryVersion",
		ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	Результат.Вставить("ConfigName",
		ИнтернетПоддержкаПользователейКлиентСервер.ИмяКонфигурации());
	Результат.Вставить("ConfigVersion",
		ИнтернетПоддержкаПользователейКлиентСервер.ВерсияКонфигурации());
	Результат.Вставить("Vendor", Метаданные.Поставщик);
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Результат.Вставить("IBID",
			СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы());
	КонецЕсли;
	Результат.Вставить("ConfigLanguage",
		ИнтернетПоддержкаПользователей.КодЯзыкаИнтерфейсаКонфигурации());
	Результат.Вставить("ConfigMainLanguage",
		ИнтернетПоддержкаПользователей.КодОсновногоЯзыкаИнтерфейсаКонфигурации());
	Результат.Вставить("CurLocalizationCode", ТекущийКодЛокализации());
	Результат.Вставить("SystemLanguage", ТекущийЯзыкСистемы());
	Результат.Вставить("ClientTimeOffsetGMT",
		Формат((ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата()), "ЧГ=0"));
	
	Результат.Вставить("countryId", "");
	
	Результат.Вставить(
		"IBIsSeparated",
		?(ОбщегоНазначенияПовтИсп.РазделениеВключено(), "true", "false"));
	Результат.Вставить("IBUserName", Строка(ИмяПользователя()));
	
	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	Если НастройкиСоединения.ДоменРасположенияСерверовИПП = 0 Тогда
		Результат.Вставить("DomainZone", "ru");
	ИначеЕсли НастройкиСоединения.ДоменРасположенияСерверовИПП = 1 Тогда
		Результат.Вставить("DomainZone", "eu");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры клиентского приложения.
// См. описание функции ПараметрыКлиента() в общем модуле
// ИнтернетПоддержкаПользователейКлиент.
//
Функция ПараметрыКлиента() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.ПараметрыКлиентаНаСервереБИП;
	
КонецФункции

#КонецОбласти

#Область Локализация

// Возвращается код текущего языка интерфейса конфигурации
// в формате ISO-639-1.
//
Функция КодЯзыкаИнтерфейсаКонфигурации() Экспорт

	Язык = ТекущийЯзык();
	Если Язык = Неопределено Тогда
		// Для пользователя информационной базы не указан язык.
		Возврат КодОсновногоЯзыкаИнтерфейсаКонфигурации();
	КонецЕсли;

	КодЯзыкаВМетаданных = ?(ТипЗнч(Язык) = Тип("Строка"), Язык, Язык.КодЯзыка);
	КодЯзыкаВФорматеISO639_1 = Неопределено;
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации(
		КодЯзыкаВМетаданных,
		КодЯзыкаВФорматеISO639_1);

	Возврат ?(КодЯзыкаВФорматеISO639_1 = Неопределено, КодЯзыкаВМетаданных, КодЯзыкаВФорматеISO639_1);

КонецФункции

// Возвращается код основного языка интерфейса конфигурации
// в формате ISO-639-1.
//
Функция КодОсновногоЯзыкаИнтерфейсаКонфигурации() Экспорт

	КодЯзыкаВМетаданных = Метаданные.ОсновнойЯзык.КодЯзыка;
	КодЯзыкаВФорматеISO639_1 = Неопределено;
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации(
		КодЯзыкаВМетаданных,
		КодЯзыкаВФорматеISO639_1);

	Возврат ?(КодЯзыкаВФорматеISO639_1 = Неопределено, КодЯзыкаВМетаданных, КодЯзыкаВФорматеISO639_1);

КонецФункции

#КонецОбласти

#Область ЛогИОтладка

// Процедура записывает сообщение в журнал регистрации.
//
// Параметры:
//  ИмяСобытия                      - строка;
//  ИдентификаторШага               - строка;
//  УровеньРегистрации              - строковое представление константы УровеньЖурналаРегистрации;
//  ОбъектМетаданных                - строковое представление объекта метаданных;
//  Данные                          - данные;
//  Комментарий                     - строка - произвольный комментарий;
//  ВестиПодробныйЖурналРегистрации - Булево - признак записи незначащих событий (Информации и Примечания).
//
Процедура ЗаписатьСообщениеВЖурналРегистрации(
			ИмяСобытия,
			ИдентификаторШага,
			УровеньРегистрации = "Ошибка",
			ОбъектМетаданных = "",
			Данные = Неопределено,
			Комментарий = "",
			ВестиПодробныйЖурналРегистрации = Ложь) Экспорт

	ОбъектМетаданныхЛокальный = Неопределено;
	Попытка
		Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
			Если ПустаяСтрока(ОбъектМетаданных) Тогда
				ОбъектМетаданныхЛокальный = Неопределено;
			Иначе
				ОбъектМетаданныхЛокальный = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОбъектМетаданных) = Тип("ОбъектМетаданных") Тогда
			ОбъектМетаданныхЛокальный = ОбъектМетаданных;
		Иначе
			ОбъектМетаданныхЛокальный = Неопределено;
		КонецЕсли;
	Исключение
		ОбъектМетаданныхЛокальный = Неопределено;
	КонецПопытки;

	Если ВРег(УровеньРегистрации) = ВРег("Информация") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Информация;
	ИначеЕсли ВРег(УровеньРегистрации) = ВРег("Предупреждение") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли ВРег(УровеньРегистрации) = ВРег("Примечание") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Примечание;
	ИначеЕсли ВРег(УровеньРегистрации) = ВРег("Ошибка") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли ТипЗнч(УровеньРегистрации) = Тип("УровеньЖурналаРегистрации") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньРегистрации;
	Иначе
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;

	// Сообщения Информация, Примечание писать только если включена настройка "ЖурналРегистрации_ПодробнаяЗапись",
	//  которую можно получить ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации() или другим способом (для других подсистем).

	ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Ложь;
	Если УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Предупреждение Тогда // Всегда писать
		ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина;
	ИначеЕсли УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Ошибка Тогда // Всегда писать
		ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина;
	ИначеЕсли ВестиПодробныйЖурналРегистрации = Истина Тогда
		ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина;
	КонецЕсли;

	Если ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина Тогда
		ИмяСобытияЛокальный = СтрЗаменить(ИмяСобытия, ". ", "."); // Точку с пробелом менять на точку
		КомментарийЛокальный = НСтр("ru='Идентификатор шага: %ИдентификаторШага%
			|%Комментарий%'");
		КомментарийЛокальный = СтрЗаменить(КомментарийЛокальный, "%ИдентификаторШага%", ИдентификаторШага);
		КомментарийЛокальный = СтрЗаменить(КомментарийЛокальный, "%Комментарий%", Комментарий);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЛокальный, // ИмяСобытия
			УровеньЖурналаРегистрацииЛокальный, // УровеньЖурналаРегистрации.*
			ОбъектМетаданныхЛокальный, // ОбъектМетаданных
			Данные, // Данные
			КомментарийЛокальный, // Комментарий
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	КонецЕсли;

КонецПроцедуры

// Выгружает журнал регистрации по событиям во временное хранилище.
//
// Параметры:
//  ПараметрыОтбора - Структура - структура с ключами:
//   * ДатаНачала    - Дата - начало периода журнала;
//   * ДатаОкончания - Дата - конец периода журнала;
//   * Событие       - Массив - массив событий (см. [МодульПодсистемыКлиентСервер].ПолучитьСписокВсехСобытийЖурналаРегистрации).
//  ПараметрыФайлаВыгрузки - Структура, Неопределено - структура с ключами:
//   * Архивировать - Булево - Истина, если необходимо архивировать выгрузку.
//
// Возвращаемое значение:
//   Структура с ключами:
//    * АдресВременногоХранилищаФайла - Строка - Адрес выгруженных данных в хранилище;
//    * ТекстОшибки - Строка - Текст ошибки или пустая строка.
//
Функция ВыгрузитьВсеСобытияЖурналаРегистрации(ПараметрыОтбора, ПараметрыФайлаВыгрузки = Неопределено) Экспорт

	Результат = Новый Структура("АдресВременногоХранилищаФайла, ТекстОшибки", "", "");

	ТипМассив = Тип("Массив");
	ТипСтруктура = Тип("Структура");

	// Если действие - длительное (журнал регистрации очень большой), то возможна ситуация,
	//  когда управление будет передано другому рабочему процессу,
	//  находящемуся на другом сервере и тогда временный каталог может стать недоступен.
	// В этом случае у пользователя выскочит ошибка и надо будет снова попробовать выгрузить данные.

	Попытка

		УстановитьПривилегированныйРежим(Истина);

			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");

			Если ТипЗнч(ПараметрыОтбора) = ТипСтруктура Тогда
				ПараметрыОтбораПравильный = Новый Структура("ДатаНачала, ДатаОкончания, Событие");
				ЗаполнитьЗначенияСвойств(ПараметрыОтбораПравильный, ПараметрыОтбора);
				Если ПараметрыОтбораПравильный.ДатаНачала = Неопределено Тогда
					ПараметрыОтбораПравильный.Вставить("ДатаНачала", НачалоДня(ТекущаяДатаСеанса()));
				КонецЕсли;
				Если ПараметрыОтбораПравильный.ДатаОкончания = Неопределено Тогда
					ПараметрыОтбораПравильный.Вставить("ДатаОкончания", КонецДня(ТекущаяДатаСеанса()));
				КонецЕсли;
			КонецЕсли;

			ВыгрузитьЖурналРегистрации(
				ИмяВременногоФайла,
				ПараметрыОтбораПравильный);

			ФайлВременный = Новый Файл(ИмяВременногоФайла);
			Если ФайлВременный.Существует() Тогда
				Архивировать = Ложь;
				Если ТипЗнч(ПараметрыФайлаВыгрузки) = ТипСтруктура Тогда
					Если (ПараметрыФайлаВыгрузки.Свойство("Архивировать"))
							И (ПараметрыФайлаВыгрузки.Архивировать = Истина) Тогда
						ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
						Архив = Новый ЗаписьZipФайла(
							ИмяФайлаАрхива,
							, // Без пароля
							СтрШаблон(
								НСтр("ru='Выгрузка журнала регистраций библиотеки БИП за период %1...%2'"),
								Формат(ПараметрыОтбораПравильный.ДатаНачала, "ДЛФ=DT"),
								Формат(ПараметрыОтбораПравильный.ДатаОкончания, "ДЛФ=DT")),
							МетодСжатияZIP.Сжатие,
							УровеньСжатияZIP.Максимальный);
						Архив.Добавить(ФайлВременный, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
						Архив.Записать();
						Результат.Вставить("АдресВременногоХранилищаФайла", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаАрхива)));
					Иначе
						Результат.Вставить("АдресВременногоХранилищаФайла", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла)));
					КонецЕсли;
				КонецЕсли;
			Иначе
				Результат.Вставить("ТекстОшибки",
					СтрШаблон(
						НСтр("ru='Файл с выгрузкой событий журнала регистрации не существует.
							|Возможно, отсутствуют события за указанный период (%1...%2).'"),
						Формат(ПараметрыОтбораПравильный.ДатаНачала, "ДЛФ=DT"),
						Формат(ПараметрыОтбораПравильный.ДатаОкончания, "ДЛФ=DT")));
			КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);

	Исключение

		ТекстСообщения = СтрШаблон(
			НСтр("ru='Не удалось экспортировать события журнала регистрации в файл по причине:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		Результат.Вставить("ТекстОшибки", ТекстСообщения);

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:БазовыйФункционал.Отладка'"), // ИмяСобытия
			НСтр("ru='БазовыйФункционал. Отладка. Экспорт журнала регистрации'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения); // Комментарий

	КонецПопытки;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Возвращает версию обработки обновления конфигурации.
Функция ВерсияОбработкиОбновления() Экспорт

	Возврат СтандартныеПодсистемыСервер.ВерсияБиблиотеки();

КонецФункции

// Возвращает имена модулей подсистем, реализующих обработку событий библиотеки.
//
// Возвращаемое значение:
//	Массив - массив элементов типа Строка - имена модулей подсистем,
//		реализующих заполнение описаний обработчиков событий.
//
// Описание модулей подсистем:
//
// Каждый модуль, имя которого возвращается функцией, должен реализовывать
// экспортную процедуру служебного программного интерфейса, реализующую
// заполнение описания обработчиков событий.
//
// Процедура ДобавитьОбработчикиСобытий(СерверныеОбработчики, КлиентскиеОбработчики) Экспорт
//
// КонецПроцедуры
//
// Подробную информацию по реализации процедур см. в описании функции
// ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий().
//
Функция МодулиПодсистем() Экспорт

	Результат = Новый Массив;

	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки") Тогда
		Результат.Добавить("МониторИнтернетПоддержки");
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском") Тогда
		Результат.Добавить("Подключение1СТакском");
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		Результат.Добавить("ПолучениеОбновленийПрограммы");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает имя программы в сервисах Интернет-поддержки.
//
Функция ИмяПрограммы() Экспорт

	Результат = "";
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииИмениПрограммы(Результат);
	Если ПустаяСтрока(Результат) Тогда
		Результат = "Unknown";
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция СинонимКонфигурации() Экспорт

	Возврат Метаданные.Синоним;

КонецФункции

// Возвращает серверный обработчик бизнес-процесса.
// Параметры:
//	МестоЗапуска - Строка - точка входа в бизнес-процесс;
//	ИмяСобытия - Строка - имя обрабатываемого события.
//
// Возвращаемое значение:
//	ОбщийМодуль - модуль, содержащий заданный обработчик бизнес-процесса;
//	Неопределено - если обработчик бизнес-процесса неопределен.
//
Функция СерверныйОбработчикБизнесПроцесса(МестоЗапуска, ИмяСобытия) Экспорт

	Если ИнтернетПоддержкаПользователейКлиентСервер.ЭтоБазовыйБизнесПроцесс(МестоЗапуска) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ОбработчикиСобытий = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий();
	МодулиОбработчиковБизнесПроцессов = ОбработчикиСобытий.Сервер.БизнесПроцессы;
	ИмяМодуля = МодулиОбработчиковБизнесПроцессов[МестоЗапуска + "\" + ИмяСобытия];

	Если ИмяМодуля = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);

КонецФункции

// Возвращает сохраненный регистрационный номер программного продукта.
//
Функция РегистрационныйНомерПрограммногоПродукта() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы(), "regnumber");

КонецФункции

// Возвращает Истина, если у текущего пользователя есть право записи параметров ИПП.
// Ложь - в противном случае.
//
Функция ПравоЗаписиПараметровИПП() Экспорт

	Возврат Пользователи.ЭтоПолноправныйПользователь(, , Ложь)
		Или Пользователи.РолиДоступны("ПодключениеКСервисуИнтернетПоддержки", , Ложь)
		Или ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки")
		И Пользователи.РолиДоступны("ИспользованиеМонитораИПП", , Ложь)
		Или ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском")
		И Пользователи.РолиДоступны("ИспользованиеСервиса1СТакском", , Ложь);

КонецФункции

// Возвращает идентификатор подсистемы в в справочнике объектов
// метаданных.
//
Функция ИдентификаторПодсистемы() Экспорт
	
	Возврат "ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП";
	
КонецФункции

// Установка параметров сеанса базовой функциональности БИП.
//
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ПараметрыКлиентаНаСервереБИП"
		И УстановленныеПараметры.Найти("ПараметрыКлиентаНаСервереБИП") = Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервереБИП = Новый ФиксированнаяСтруктура(Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

// Возвращается имя события журнала регистрации для записи ошибок
// Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события ошибки Интернет-поддержки.
//
Функция СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейОшибка()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей.Ошибка'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращается имя события журнала регистрации для записи информационных
// сообщений Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события информационного сообщения Интернет-поддержки.
//
Функция СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей.Информация'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ВестиПодробныйЖурналРегистрации()
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСобытийБиблиотеки

// Вызывается при сохранении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль)
	
	Если ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлиентЛицензирования.ПриИзмененииДанныхАутентификации(Логин, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль);
	КонецЕсли;
	// Конец СПАРКРиски
	
	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль);
	КонецЕсли;
	// Конец ОблачныйАрхив
	
	// Переопределяемая обработка события.
	ИнтернетПоддержкаПользователейПереопределяемый.ПриСохраненииДанныхАутентификацииПользователяИнтернетПоддержки(
		Новый Структура("Логин, Пароль", Логин, Пароль));

	// Вызов устаревшего метода для поддержки обратной совместимости в текущей редакции.
	ИнтернетПоддержкаПользователейПереопределяемый.ПриАвторизацииПользователяВИнтернетПоддержке(
		Новый Структура("Логин, Пароль", Логин, Пароль));

КонецПроцедуры

// Вызывается при удалении логина и пароля пользователя ИПП из
// информационной базы из всех контекстов использования библиотеки.
//
Процедура ПриУдаленииЛогинаИПароляИзИБ()

	Если ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлиентЛицензирования.ПриИзмененииДанныхАутентификации("", "");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриУдаленииЛогинаИПароляИзИБ();
	КонецЕсли;
	// Конец СПАРКРиски
	
	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПриУдаленииЛогинаИПароляИзИБ();
	КонецЕсли;
	// Конец ОблачныйАрхив
	
	// Переопределяемая обработка события
	ИнтернетПоддержкаПользователейПереопределяемый.ПриУдаленииДанныхАутентификацииПользователяИнтернетПоддержки();

	// Вызов устаревшего метода для поддержки обратной совместимости в текущей редакции.
	ИнтернетПоддержкаПользователейПереопределяемый.ПриВыходеПользователяИзИнтернетПоддержки();

КонецПроцедуры

// Вызывается при изменении настройки "Доменная зона расположения серверов ИПП".
//
Процедура ПриИзмененииДоменнойЗоныСерверовИПП(ДоменнаяЗона) Экспорт

	Если ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлиентЛицензирования.ПриИзмененииДоменнойЗоныСерверовИПП(ДоменнаяЗона);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБизнесПроцессов

// В вызывающем коде должны быть проверены права пользователя и установлен
// привилегированный режим.
// Выполняет запись общих стартовых параметров.
//
Процедура ЗаписатьОбщиеПараметрыИПП(Знач ОбщиеПараметры) Экспорт

	Логин  = Неопределено;
	Пароль = Неопределено;

	ИдентификаторПодсистемы = ИдентификаторПодсистемы();

	// Запись выполняется в транзакции, т.к. данные (например, пара Логин-Пароль)
	// должны зачитываться неделимо другими механизмами.
	НачатьТранзакцию();
	Попытка
		Для каждого КлючЗначение Из ОбщиеПараметры Цикл

			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИдентификаторПодсистемы,
				КлючЗначение.Значение,
				КлючЗначение.Ключ);

			Если КлючЗначение.Ключ = "login" Тогда
				Логин = КлючЗначение.Значение;
			ИначеЕсли КлючЗначение.Ключ = "password" Тогда
				Пароль = КлючЗначение.Значение;
			КонецЕсли;

		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

	Если Логин <> Неопределено И Пароль <> Неопределено Тогда
		ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль);
	КонецЕсли;

КонецПроцедуры

// В вызывающем коде должны быть проверены права пользователя и установлен
// привилегированный режим.
// Удаление общих стартовых параметров.
//
// Параметры:
//	УдаляемыеИзРС - Массив - массив строк - имена удаляемых параметров.
//
Процедура УдалитьОбщиеПараметрыИПП(Знач УдаляемыеИзРС) Экспорт

	УдаленыДанныеАутентификации = Ложь;
	ИДПодсистемы = ИдентификаторПодсистемы();
	НачатьТранзакцию();
	Попытка
		Для каждого КлючЗначение Из УдаляемыеИзРС Цикл

			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИДПодсистемы, КлючЗначение.Ключ);

			Если КлючЗначение.Ключ = "login" Или КлючЗначение.Ключ = "password" Тогда
				УдаленыДанныеАутентификации = Истина;
			КонецЕсли;

		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

	Если УдаленыДанныеАутентификации Тогда
		ПриУдаленииЛогинаИПароляИзИБ();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область НастройкиКлиентаЛицензирования

// Возвращает признак возможности работы с настройками клиента лицензирования
// в БИП.
//
// Версия платформы 1С:Предприятие 8.3.7 или выше и не работа в модели сервиса.
//
Функция ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Экспорт

	Возврат Не ОбщегоНазначенияПовтИсп.РазделениеВключено();

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ""; // Только для начального заполнения.
	Обработчик.Процедура           = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Запускается при первом запуске, в общих данных. Установка общих данных.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ""; // Только для начального заполнения.
	Обработчик.Процедура           = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Запускается при первом запуске, для каждой области данных. Установка разделенных данных.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	// Обработчики, выполняемые при переходе на новую версию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, в общих данных. Установка общих данных.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на любую новую версию, для каждой области данных. Установка разделенных данных.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.1.7.1";
	Обработчик.Процедура =
		"ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ПереместитьПараметрыИнтернетПоддержкиВБезопасноеХранилищеДанных_2_1_7_1";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.1.8.14";
	Обработчик.Процедура =
		"ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ЗаменитьИдентификаторПодсистемыВБезопасномХранилищеДанных_2_1_8_14";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	
КонецПроцедуры

// Процедура вызывается при первом запуске библиотеки БИП.
// Процедура - для общих данных.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск() Экспорт

	// Код для первоначального заполнения информационной базы.

	УстановитьПривилегированныйРежим(Истина);

	НаименованиеПроцедурыФункции = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультатаОбщий = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск'"));

		КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Переопределяемые действия.
	ИнтернетПоддержкаПользователейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск();

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультатаОбщий, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтрШаблон(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %6
			|  Разделение включено: %7
			|  Доступно использование разделенных данных: %8
			|  Сеанс запущен без разделителей: %9
			|'"),
		НаименованиеПроцедурыФункции,
		ШагВыполненияОбщий.ВремяНачала,
		ШагВыполненияОбщий.ВремяОкончания,
		ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначенияПовтИсп.РазделениеВключено(),
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных(),
		ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ЗаписатьСообщениеВЖурналРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(), // ИмяСобытия
		НСтр("ru='Сервис и регламент. ОбновлениеИнформационнойБазы. ОбщиеДанные. ПервыйЗапуск'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при первом запуске библиотеки БИП.
// Процедура - для каждой области данных.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск() Экспорт

	// Код для первоначального заполнения информационной базы.

	УстановитьПривилегированныйРежим(Истина);

	НаименованиеПроцедурыФункции = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультатаОбщий = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск'"));

		КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Переопределяемые действия.
	КодРезультатаПоШагам = 0;
	ОписаниеРезультатаПоШагам = "";
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияПоШагам,
		"ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск_Переопределение", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск, Переопределение'"));

	ИнтернетПоддержкаПользователейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск();

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияПоШагам,
		КодРезультатаПоШагам, // Код результата.
		ОписаниеРезультатаПоШагам, // Описание результата.
		Неопределено); // Вложенный контекст выполнения.

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультатаОбщий, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтрШаблон(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %6
			|  Разделение включено: %7
			|  Доступно использование разделенных данных: %8
			|  Сеанс запущен без разделителей: %9
			|'"),
		НаименованиеПроцедурыФункции,
		ШагВыполненияОбщий.ВремяНачала,
		ШагВыполненияОбщий.ВремяОкончания,
		ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначенияПовтИсп.РазделениеВключено(),
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных(),
		ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(), // ИмяСобытия
		НСтр("ru='Сервис и регламент. ОбновлениеИнформационнойБазы. ОбластьДанных. ПервыйЗапуск'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на любую новую версию.
// Процедура - для общих данных.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию() Экспорт

	// Код для заполнения информационной базы при переходе на новую версию.

	УстановитьПривилегированныйРежим(Истина);

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультатаОбщий = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию'"));

	КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Проверка внедрения
	КодРезультатаПоШагам      = 0;
	ОписаниеРезультатаПоШагам = "";
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияПоШагам,
		"ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск, Основные действия, Проверка внедрения", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск, Основные действия, Проверка внедрения'"));

	ОписаниеРезультатаПоШагам = ПроверитьПравильностьВнедрения();
	Если НЕ ПустаяСтрока(ОписаниеРезультатаПоШагам) Тогда
		КодРезультатаПоШагам = 1002;
		КодРезультатаОбщий = 1001;
	КонецЕсли;

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияПоШагам,
		КодРезультатаПоШагам, // Код результата.
		ОписаниеРезультатаПоШагам, // Описание результата.
		Неопределено); // Вложенный контекст выполнения.


	// Переопределяемые действия.
	ИнтернетПоддержкаПользователейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию();

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультатаОбщий, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтрШаблон(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %6
			|  Разделение включено: %7
			|  Доступно использование разделенных данных: %8
			|  Сеанс запущен без разделителей: %9
			|'"),
		НаименованиеПроцедурыФункции,
		ШагВыполненияОбщий.ВремяНачала,
		ШагВыполненияОбщий.ВремяОкончания,
		ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначенияПовтИсп.РазделениеВключено(),
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных(),
		ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(), // ИмяСобытия
		НСтр("ru='Сервис и регламент. ОбновлениеИнформационнойБазы. ОбластьДанных. ПерейтиНаВерсию'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на любую новую версию.
// Процедура - для каждой области данных.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию() Экспорт

	// Код для заполнения информационной базы при переходе на новую версию.

	УстановитьПривилегированныйРежим(Истина);

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультатаОбщий = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию'"));

	КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Переопределяемые действия.
	ИнтернетПоддержкаПользователейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию();

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультатаОбщий, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтрШаблон(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %6
			|  Разделение включено: %7
			|  Доступно использование разделенных данных: %8
			|  Сеанс запущен без разделителей: %9
			|'"),
		НаименованиеПроцедурыФункции,
		ШагВыполненияОбщий.ВремяНачала,
		ШагВыполненияОбщий.ВремяОкончания,
		ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначенияПовтИсп.РазделениеВключено(),
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных(),
		ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(), // ИмяСобытия
		НСтр("ru='Сервис и регламент. ОбновлениеИнформационнойБазы. ОбластьДанных. ПерейтиНаВерсию'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

Функция ПроверитьПравильностьВнедрения()
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияБСП, "2.3.3.69") < 0 Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка внедрения библиотеки Интернет-поддержки пользователей.
			|Необходима версия библиотеки стандартных подсистем не ниже версии 2.3.3.69'");
	КонецЕсли;
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		Сообщение = МодульСПАРКРиски.ПроверитьПравильностьВнедренияПодсистемы();
		Если Не ПустаяСтрока(Сообщение) Тогда
			Возврат Сообщение;
		КонецЕсли;
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецФункции

Процедура ОбновлениеИнформационнойБазы_ПереместитьПараметрыИнтернетПоддержкиВБезопасноеХранилищеДанных_2_1_7_1() Экспорт

	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Не используется при работе в модели сервиса
		Возврат;
	КонецЕсли;

	ЗапросПараметровИПП = Новый Запрос;
	ЗапросПараметровИПП.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя КАК ИмяПараметра,
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение КАК ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""login""
	|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя,
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""password""
	|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя,
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""regnumber""
	|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор";

	ЗапросПараметровИПП.УстановитьПараметр(
		"ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));

	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПараметров = ЗапросПараметровИПП.Выполнить().Выбрать();

	// Запись данных в безопасное хранилище
	ИдентификаторПодсистемыБИП = ИдентификаторПодсистемы();
	Пока ВыборкаПараметров.Следующий() Цикл
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИдентификаторПодсистемыБИП,
			ВыборкаПараметров.ЗначениеПараметра,
			ВыборкаПараметров.ИмяПараметра);
	КонецЦикла;

	// Очистка неиспользуемого регистра параметров ИПП
	НаборЗаписей = РегистрыСведений.УдалитьПараметрыИнтернетПоддержкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_ЗаменитьИдентификаторПодсистемыВБезопасномХранилищеДанных_2_1_8_14() Экспорт

	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Не используется при работе в модели сервиса.
		Возврат;
	КонецЕсли;
	
	ИдентификаторПодсистемыБИПУстаревший =
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			"Подсистема.ИнтернетПоддержкаПользователей.Подсистема.БазоваяФункциональностьБИП");
	ДанныеВБезопасномХранилищеУстаревшие =
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			ИдентификаторПодсистемыБИПУстаревший,
			"login,password,regnumber");
	
	ИдентификаторПодсистемы = ИдентификаторПодсистемы();
	Для Каждого КлючЗначение Из ДанныеВБезопасномХранилищеУстаревшие Цикл
		Если КлючЗначение.Значение <> Неопределено Тогда
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИдентификаторПодсистемы,
				КлючЗначение.Значение,
				КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	// Удалить устаревшие данные после переноса.
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемыБИПУстаревший);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
