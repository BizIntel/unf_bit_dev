////////////////////////////////////////////////////////////////////////////////
// Подсистема "Информационный центр".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями\ПриОпределенииОбработчиковКаналовСообщений"].Добавить(
			"ИнформационныйЦентрСлужебный");
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные\ПриОпределенииОбработчиковПоставляемыхДанных"].Добавить(
			"ИнформационныйЦентрСлужебный");
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса\ПриЗаполненииТаблицыПараметровИБ"].Добавить(
				"ИнформационныйЦентрСлужебный");
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса\ПриУстановкеЗначенийПараметровИБ"].Добавить(
				"ИнформационныйЦентрСлужебный");
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями\РегистрацияИнтерфейсовПринимаемыхСообщений"].Добавить(
			"ИнформационныйЦентрСлужебный");
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов"].Добавить(
			"ИнформационныйЦентрСлужебный");
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.ВыгрузкаЗагрузкаДанных") Тогда
		СерверныеОбработчики[
			"ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки"].Добавить(
				"ИнформационныйЦентрСлужебный");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданный массив общими модулями, которые являются обработчиками интерфейсов
//  принимаемых сообщений.
//
// Параметры:
//  МассивОбработчиков - массив
//
Процедура РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков) Экспорт
	
	МассивОбработчиков.Добавить(СообщенияИнформационногоЦентраИнтерфейс);
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.1.1");
	СтруктураПоддерживаемыхВерсий.Вставить("SupportServiceData", МассивВерсий);
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.1.1");
	СтруктураПоддерживаемыхВерсий.Вставить("InformationReferences", МассивВерсий);
	
КонецПроцедуры

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ().
//
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	МодульРаботаВМоделиСервиса = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("РаботаВМоделиСервиса");
    
    // Конференция
	МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресУправленияКонференцией");

	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ИмяПользователяКонференцииИнформационногоЦентра";
	СтрокаПараметра.Описание = "ИмяПользователяКонференцииИнформационногоЦентра";
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка");
	
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ПарольПользователяКонференцииИнформационногоЦентра";
	СтрокаПараметра.Описание = "ПарольПользователяКонференцииИнформационногоЦентра";
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка");
	
	
	// Служба поддержки
	МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресПрограммногоИнтерфейсаСлужбыПоддержки");
	
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ИмяПользователяПрограммногоИнтерфейсаСлужбыПоддержки";
	СтрокаПараметра.Описание = "ИмяПользователяПрограммногоИнтерфейсаСлужбыПоддержки";
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка");
	
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ПарольПользователяПрограммногоИнтерфейсаСлужбыПоддержки";
	СтрокаПараметра.Описание = "ПарольПользователяПрограммногоИнтерфейсаСлужбыПоддержки";
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка");
	
    // Центр идей
	МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресСервисаЦентраИдей");
	
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ИмяПользователяСервисаЦентраИдей";
	СтрокаПараметра.Описание = "Имя пользователя сервиса центра идей";
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка");
	
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ПарольПользователяСервисаЦентраИдей";
	СтрокаПараметра.Описание = "Пароль пользователя сервиса центра идей";
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка");
    
    // Сервис новостей
    МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресСервисаНовостей");
	МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ПрефиксСервисаДляНовостей");
    
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ИмяПользователяСервисаНовостей";
	СтрокаПараметра.Описание = "Имя пользователя сервиса новостей";
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка");
	
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ПарольПользователяСервисаНовостей";
	СтрокаПараметра.Описание = "Пароль пользователя сервиса новостей";
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка");
    
КонецПроцедуры

// Вызывается перед попыткой записи значений параметров ИБ в одноименные
// константы.
//
// Параметры:
// ЗначенияПараметров - Структура - значения параметров которые требуется установить.
// В случае если значение параметра устанавливается в данной процедуре из структуры
// необходимо удалить соответствующую пару КлючИЗначение.
//
Процедура ПриУстановкеЗначенийПараметровИБ(Знач ЗначенияПараметров) Экспорт
	
	// Для интеграции с конференцией
	Конференция = ТехнологияСервисаИнтеграцияСБСП.ИдентификаторОбъектаМетаданных("Константа.АдресУправленияКонференцией");
    ЗаписатьДанныеАутентификации(ЗначенияПараметров, Конференция, "ИмяПользователяКонференцииИнформационногоЦентра", "ПарольПользователяКонференцииИнформационногоЦентра");

    // Для интеграции со службой поддержки
	Поддержка = ТехнологияСервисаИнтеграцияСБСП.ИдентификаторОбъектаМетаданных("Константа.АдресПрограммногоИнтерфейсаСлужбыПоддержки");
    ЗаписатьДанныеАутентификации(ЗначенияПараметров, Поддержка, "ИмяПользователяПрограммногоИнтерфейсаСлужбыПоддержки", "ПарольПользователяПрограммногоИнтерфейсаСлужбыПоддержки");
    
    // Для интеграции с центром идей УСП
	ЦентрИдей = ТехнологияСервисаИнтеграцияСБСП.ИдентификаторОбъектаМетаданных("Константа.АдресСервисаЦентраИдей");
    ЗаписатьДанныеАутентификации(ЗначенияПараметров, ЦентрИдей, "ИмяПользователяСервисаЦентраИдей", "ПарольПользователяСервисаЦентраИдей");
    
    
    Новости = ТехнологияСервисаИнтеграцияСБСП.ИдентификаторОбъектаМетаданных("Константа.АдресСервисаНовостей");
    ЗаписатьДанныеАутентификации(ЗначенияПараметров, Новости, "ИмяПользователяСервисаНовостей", "ПарольПользователяСервисаНовостей");
	
КонецПроцедуры

// Получает список обработчиков сообщений, которые обрабатывают подсистемы библиотеки.
// 
// Параметры:
//  Обработчики - ТаблицаЗначений - состав полей см. в ОбменСообщениями.НоваяТаблицаОбработчиковСообщений.
// 
Процедура ПриОпределенииОбработчиковКаналовСообщений(Обработчики) Экспорт
	
	СообщенияИнформационногоЦентраОбработчикСообщения.ПолучитьОбработчикиКаналовСообщений(Обработчики);
	
КонецПроцедуры

// Зарегистрировать обработчики поставляемых данных
//
// При получении уведомления о доступности новых общих данных, вызывается процедуры
// ДоступныНовыеДанные модулей, зарегистрированных через ПолучитьОбработчикиПоставляемыхДанных.
// В процедуру передается Дескриптор - ОбъектXDTO Descriptor.
// 
// В случае, если ДоступныНовыеДанные устанавливает аргумент Загружать в значение Истина, 
// данные загружаются, дескриптор и путь к файлу с данными передаются в процедуру 
// ОбработатьНовыеДанные. Файл будет автоматически удален после завершения процедуры.
// Если в менеджере сервиса не был указан файл - значение аргумента равно Неопределено.
//
// Параметры: 
//   Обработчики, ТаблицаЗначений - таблица для добавления обработчиков. 
//       Колонки:
//        ВидДанных, строка - код вида данных, обрабатываемый обработчиком
//        КодОбработчика, строка(20) - будет использоваться при восстановлении обработки данных после сбоя
//        Обработчик,  ОбщийМодуль - модуль, содержащий следующие процедуры:
//          ДоступныНовыеДанные(Дескриптор, Загружать) Экспорт  
//          ОбработатьНовыеДанные(Дескриптор, ПутьКФайлу) Экспорт
//          ОбработкаДанныхОтменена(Дескриптор) Экспорт
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	
КонецПроцедуры

// Заполняет массив типов, исключаемых из выгрузки и загрузки данных.
//
// Параметры:
//  Типы - Массив(Типы).
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.РегистрыСведений.ПросмотренныеДанныеИнформационногоЦентра);
	
КонецПроцедуры

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
КонецПроцедуры

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик                     = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.МонопольныйРежим    = Ложь;
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "ИнформационныйЦентрСлужебный.СформироватьСловарьПолныхПутейКФормам";
	Обработчик.Комментарий          = НСтр("ru = 'Сформировать словарь полных путей к формам в справонике ""ПолныеПутиКФормам"".'");
	
	Обработчик                     = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.5.12";
	Обработчик.МонопольныйРежим    = Ложь;
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "ИнформационныйЦентрСлужебный.ЗаполнитьХешПолногоПутиКФорме";
	
	Обработчик                     = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.3.35";
	Обработчик.МонопольныйРежим    = Ложь;
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "ИнформационныйЦентрСлужебный.ЗаполнитьДатуОкончанияАктуальностиИнформационныхСсылок";
	
	Обработчик                     = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.7.2";
	Обработчик.МонопольныйРежим    = Ложь;
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "ИнформационныйЦентрСлужебный.ЗаполнитьИнформационнуюСсылкуИзКонфигурации";
	
	Обработчик                     = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.7.4";
	Обработчик.МонопольныйРежим    = Ложь;
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "ИнформационныйЦентрСлужебный.ПеренестиПаролиВБезопасноеХранилище";
	
	Если ТехнологияСервисаИнтеграцияСБСП.РазделениеВключено() Тогда
		Обработчик                  = Обработчики.Добавить();
		Обработчик.Версия           = "*";
		Обработчик.МонопольныйРежим = Ложь;
		Обработчик.ОбщиеДанные      = Истина;
		Обработчик.Процедура        = "ИнформационныйЦентрСлужебный.ОбновитьИнформационныеСсылкиДляФормВМоделиСервиса";
	Иначе
		Обработчик                  = Обработчики.Добавить();
		Обработчик.Версия           = "*";
		Обработчик.МонопольныйРежим = Ложь;
		Обработчик.Процедура        = "ИнформационныйЦентрСлужебный.ОбновитьИнформационныеСсылкиДляФормВЛокальномРежиме";
	КонецЕсли;
	
КонецПроцедуры

// Перенести пароли в безопасное хранилище
//
Процедура ПеренестиПаролиВБезопасноеХранилище() Экспорт
	
	// Для интеграции с конференцией
	ИмяПользователяКонференцииИнформационногоЦентра = Константы.УдалитьИмяПользователяКонференцииИнформационногоЦентра.Получить();
	ПарольПользователяКонференцииИнформационногоЦентра = Константы.УдалитьПарольПользователяКонференцииИнформационногоЦентра.Получить();
	Владелец = ТехнологияСервисаИнтеграцияСБСП.ИдентификаторОбъектаМетаданных("Константа.АдресУправленияКонференцией");
	УстановитьПривилегированныйРежим(Истина);
	ТехнологияСервисаИнтеграцияСБСП.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ИмяПользователяКонференцииИнформационногоЦентра, "Логин");
	ТехнологияСервисаИнтеграцияСБСП.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ПарольПользователяКонференцииИнформационногоЦентра, "Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	Константы.УдалитьИмяПользователяКонференцииИнформационногоЦентра.Установить("");
	Константы.УдалитьПарольПользователяКонференцииИнформационногоЦентра.Установить("");
	
	// Для интеграции со службой поддержки
	ИмяПользователяПрограммногоИнтерфейсаСлужбыПоддержки = Константы.УдалитьИмяПользователяПрограммногоИнтерфейсаСлужбыПоддержки.Получить();
	ПарольПользователяПрограммногоИнтерфейсаСлужбыПоддержки = Константы.УдалитьПарольПользователяПрограммногоИнтерфейсаСлужбыПоддержки.Получить();
	Владелец = ТехнологияСервисаИнтеграцияСБСП.ИдентификаторОбъектаМетаданных("Константа.АдресПрограммногоИнтерфейсаСлужбыПоддержки");
	УстановитьПривилегированныйРежим(Истина);
	ТехнологияСервисаИнтеграцияСБСП.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ИмяПользователяПрограммногоИнтерфейсаСлужбыПоддержки, "Логин");
	ТехнологияСервисаИнтеграцияСБСП.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ПарольПользователяПрограммногоИнтерфейсаСлужбыПоддержки, "Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	Константы.УдалитьИмяПользователяПрограммногоИнтерфейсаСлужбыПоддержки.Установить("");
	Константы.УдалитьПарольПользователяПрограммногоИнтерфейсаСлужбыПоддержки.Установить("");
	
КонецПроцедуры

// Заполняет справочник "ПолныеПутиКФормам" полными путями к формам.
//
Процедура СформироватьСловарьПолныхПутейКФормам(Параметры = Неопределено) Экспорт
	
	// Формирование таблицы со списком полных форм конфигурации
	ТаблицаФорм = Новый ТаблицаЗначений;
	ТаблицаФорм.Колонки.Добавить("ПолныйПутьКФорме", Новый ОписаниеТипов("Строка"));
	
	ДобавитьФормыВСправочник(ТаблицаФорм, "ОбщиеФормы");
	ДобавитьФормыВСправочник(ТаблицаФорм, "ПланыОбмена");
	ДобавитьФормыВСправочник(ТаблицаФорм, "Справочники");
	ДобавитьФормыВСправочник(ТаблицаФорм, "Документы");
	ДобавитьФормыВСправочник(ТаблицаФорм, "ЖурналыДокументов");
	ДобавитьФормыВСправочник(ТаблицаФорм, "Перечисления");
	ДобавитьФормыВСправочник(ТаблицаФорм, "Отчеты");
	ДобавитьФормыВСправочник(ТаблицаФорм, "Обработки");
	ДобавитьФормыВСправочник(ТаблицаФорм, "ПланыВидовХарактеристик");
	ДобавитьФормыВСправочник(ТаблицаФорм, "ПланыСчетов");
	ДобавитьФормыВСправочник(ТаблицаФорм, "ПланыВидовРасчета");
	ДобавитьФормыВСправочник(ТаблицаФорм, "РегистрыСведений");
	ДобавитьФормыВСправочник(ТаблицаФорм, "РегистрыНакопления");
	ДобавитьФормыВСправочник(ТаблицаФорм, "РегистрыБухгалтерии");
	ДобавитьФормыВСправочник(ТаблицаФорм, "РегистрыРасчета");
	ДобавитьФормыВСправочник(ТаблицаФорм, "БизнесПроцессы");
	ДобавитьФормыВСправочник(ТаблицаФорм, "Задачи");
	ДобавитьФормыВСправочник(ТаблицаФорм, "ХранилищаНастроек");
	ДобавитьФормыВСправочник(ТаблицаФорм, "КритерииОтбора");
	
	// Заполнение справочника "ПолныеПутиКФормам"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФорм", ТаблицаФорм);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПОДСТРОКА(ТаблицаФорм.ПолныйПутьКФорме, 1, 1000) КАК ПолныйПутьКФорме
	|ПОМЕСТИТЬ ТаблицаФорм
	|ИЗ
	|	&ТаблицаФорм КАК ТаблицаФорм
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПолныйПутьКФорме
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолныеПутиКФормам.Ссылка КАК Ссылка,
	|	ПОДСТРОКА(ПолныеПутиКФормам.ПолныйПутьКФорме, 1, 1000) КАК ПолныйПутьКФорме
	|ПОМЕСТИТЬ СуществующиеПолныеПутиКФормам
	|ИЗ
	|	Справочник.ПолныеПутиКФормам КАК ПолныеПутиКФормам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПолныйПутьКФорме
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФорм.ПолныйПутьКФорме КАК ПолныйПутьКФорме
	|ИЗ
	|	ТаблицаФорм КАК ТаблицаФорм
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуществующиеПолныеПутиКФормам КАК СуществующиеПолныеПутиКФормам
	|		ПО (ТаблицаФорм.ПолныйПутьКФорме = СуществующиеПолныеПутиКФормам.ПолныйПутьКФорме)
	|ГДЕ
	|	СуществующиеПолныеПутиКФормам.Ссылка ЕСТЬ NULL ";
	ВыборкаФорм = Запрос.Выполнить().Выбрать();
	Пока ВыборкаФорм.Следующий() Цикл 
		ДобавитьПолноеИмяВСправочник(ВыборкаФорм.ПолныйПутьКФорме);
	КонецЦикла;
	
КонецПроцедуры

// При обновлении конфигурации необходимо обновить список Информационных ссылок для форм.
// Это происходит через Менеджер сервиса.
//
Процедура ОбновитьИнформационныеСсылкиДляФормВМоделиСервиса() Экспорт
	
	Попытка
		
		ОбновитьИнформационныеСсылкиДляФормВЛокальномРежиме();
		
		УстановитьПривилегированныйРежим(Истина);
		ИмяКонфигурации = Метаданные.Имя;
		УстановитьПривилегированныйРежим(Ложь);
		ПроксиВебСервиса = ИнформационныйЦентрСервер.ПолучитьПроксиИнформационногоЦентра_1_0_1_1();
		Результат = ПроксиВебСервиса.UpdateInfoReference(ИмяКонфигурации);
		Если Результат Тогда 
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = НСтр("ru = 'Не удалось обновить Информационные ссылки'");
		ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	Исключение
		ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// При обновлении конфигурации необходимо обновить список Информационных ссылок для форм.
// Это происходит через Менеджер сервиса.
//
Процедура ОбновитьИнформационныеСсылкиДляФормВЛокальномРежиме() Экспорт
	
	ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
	
	ОбщиеМакеты = ИнформационныйЦентрСервер.ПолучитьОбщиеМакетыИнформационныхСсылок();
	Для Каждого ОбщийМакет Из ОбщиеМакеты Цикл
		
		ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
		ТекстовыйДокумент = ОбщийМакет;
		ТекстовыйДокумент.Записать(ПутьКФайлу);
		
		Попытка
			ЗагрузитьИнформационныеСсылки(ПутьКФайлу);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
		Попытка
			УдалитьФайлы(ПутьКФайлу);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет элементы справочника "ИнформационныеСсылкиДляФорм", у которых 
// дата окончания актуальности пустая датой "31.12.3999".
//
Процедура ЗаполнитьДатуОкончанияАктуальностиИнформационныхСсылок() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОкончанияАктуальности", '00010101000000');
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнформационныеСсылкиДляФорм.Ссылка КАК ИнформационнаяСсылка
	|ИЗ
	|	Справочник.ИнформационныеСсылкиДляФорм КАК ИнформационныеСсылкиДляФорм
	|ГДЕ
	|	ИнформационныеСсылкиДляФорм.ДатаОкончанияАктуальности = &ДатаОкончанияАктуальности
	|	И НЕ ИнформационныеСсылкиДляФорм.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		ИнформационнаяСсылка = Выборка.ИнформационнаяСсылка.ПолучитьОбъект();
		ИнформационнаяСсылка.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет хеш (по алгоритму MD5) полного пути к форме в справочнике "ПолныеПутиКФормам".
//
Процедура ЗаполнитьХешПолногоПутиКФорме() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПолныеПутиКФормам.Ссылка
		|ИЗ
		|	Справочник.ПолныеПутиКФормам КАК ПолныеПутиКФормам
		|ГДЕ
		|	ПолныеПутиКФормам.Хеш = &Хеш");
	Запрос.УстановитьПараметр("Хеш", "");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ОбъектЗаписи = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполняет признак "ИзКонфигурации" для информационных ссылок.
//
Процедура ЗаполнитьИнформационнуюСсылкуИзКонфигурации() Экспорт
	
	ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
	ОбщиеМакеты = ИнформационныйЦентрСервер.ПолучитьОбщиеМакетыИнформационныхСсылок();
	
	Для Каждого ОбщийМакет Из ОбщиеМакеты Цикл
		
		ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
		ТекстовыйДокумент = ОбщийМакет;
		ТекстовыйДокумент.Записать(ПутьКФайлу);
		
		ПространствоИмен = ОпределитьПространствоИменПоФайлу(ПутьКФайлу);
		Если ПространствоИмен = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ЧтениеИнформационныхСсылок = Новый ЧтениеXML; 
		ЧтениеИнформационныхСсылок.ОткрытьФайл(ПутьКФайлу); 
		ЧтениеИнформационныхСсылок.ПерейтиКСодержимому();
		ЧтениеИнформационныхСсылок.Прочитать();
		
		Пока ЧтениеИнформационныхСсылок.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
			
			ТипИнформационнойСсылки = ФабрикаXDTO.Тип(ПространствоИмен, "reference");
			ИнформационнаяСсылка = ФабрикаXDTO.ПрочитатьXML(ЧтениеИнформационныхСсылок, ТипИнформационнойСсылки);
			URL = ИнформационнаяСсылка.address;
			Если ПустаяСтрока(URL) Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ИнформационныеСсылкиДляФорм.Ссылка КАК ИнформационнаяСсылка
				|ИЗ
				|	Справочник.ИнформационныеСсылкиДляФорм КАК ИнформационныеСсылкиДляФорм
				|ГДЕ
				|	ИнформационныеСсылкиДляФорм.Адрес ПОДОБНО &URL");
			Запрос.УстановитьПараметр("URL", URL);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбъектСсылки = Выборка.ИнформационнаяСсылка.ПолучитьОбъект();
				ОбъектСсылки.ИзКонфигурации = Истина;
				ОбъектСсылки.ОбменДанными.Загрузка = Истина;
				ОбъектСсылки.Записать();
			КонецЦикла;
			
		КонецЦикла;
		
		ЧтениеИнформационныхСсылок.Закрыть();
		
		Попытка
			УдалитьФайлы(ПутьКФайлу);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Регистрирует обработчики поставляемых данных за день и за все время
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	Обработчик                = Обработчики.Добавить();
	Обработчик.ВидДанных      = "ИнформационныеСсылки";
	Обработчик.КодОбработчика = "ИнформационныеСсылки";
	Обработчик.Обработчик     = ИнформационныйЦентрСлужебный;
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению, 
// и если да - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = "ИнформационныеСсылки" Тогда
		
		ИмяКонфигурации = ПолучитьИмяКонфигурацииПоДескриптору(Дескриптор);
		Если ИмяКонфигурации = Неопределено Тогда 
			Загружать = Ложь;
			Возврат;
		КонецЕсли;
		
		Загружать = ?((ВРег(Метаданные.Имя)) = ВРег(ИмяКонфигурации), Истина, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - Строка или Неопределено. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры. Если в менеджере сервиса не был
//                  указан файл - значение аргумента равно Неопределено.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType = "ИнформационныеСсылки" Тогда
		ОбработатьИнформационныеСсылки(Дескриптор, ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обрабатывает информационные ссылки пришедшие через механизм "Поставляемые данные".
//
// Параметры:
//  Дескриптор - Структура, дескриптор.
//  ПутьКФайлу - Строка, путь к файлу.
//
Процедура ОбработатьИнформационныеСсылки(Дескриптор, ПутьКФайлу)
	
	ЗагрузитьИнформационныеСсылки(ПутьКФайлу);
	
КонецПроцедуры

// Имя конфигурации по дескриптору.
//
// Параметры:
//  Дескриптор - Структура, дескриптор.
//
// Возвращаемое значение:
//  Строка - имя конфигурации.
//
Функция ПолучитьИмяКонфигурацииПоДескриптору(Дескриптор)
	
	Для Каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "ОбъектРазмещения" Тогда
			Попытка
				Возврат Характеристика.Value;
			Исключение
				ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Неопределено;
			КонецПопытки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Загружает информационные ссылки в справочник.
//
// Параметры:
//  ПутьКФайлу - Строка, путь к файлу.
//  ЛокальныйРежим - Булево, Истина, если локальный режим, ложь - иначе.
//
Процедура ЗагрузитьИнформационныеСсылки(ПутьКФайлу, ЛокальныйРежим = Истина)
	
	// Формирование дерева тэгов
	ДеревоТэгов = ПолучитьДеревоТэгов();
	
	ДатаОбновления = ТекущаяДата(); // Проектное решение БСП
	
	ПространствоИмен = ОпределитьПространствоИменПоФайлу(ПутьКФайлу);
	Если ПространствоИмен = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТипИнформационнойСсылки = ФабрикаXDTO.Тип(ПространствоИмен, "reference"); 
	
	ЧтениеИнформационныхСсылок = Новый ЧтениеXML; 
	ЧтениеИнформационныхСсылок.ОткрытьФайл(ПутьКФайлу); 
	ЧтениеИнформационныхСсылок.ПерейтиКСодержимому();
	ЧтениеИнформационныхСсылок.Прочитать();
	
	Пока ЧтениеИнформационныхСсылок.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		ИнформационнаяСсылка = ФабрикаXDTO.ПрочитатьXML(ЧтениеИнформационныхСсылок, ТипИнформационнойСсылки);
		
		// Предопределенный элемент
		Если Не ПустаяСтрока(ИнформационнаяСсылка.namePredifined) Тогда 
			Попытка
				ЗаписатьПредопределеннуюИнформационнуюСсылку(ИнформационнаяСсылка, ЛокальныйРежим);
			Исключение
				ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			Продолжить;
		КонецЕсли;
		
		// Обыкновенный элемент
		Для Каждого Контекст из ИнформационнаяСсылка.context Цикл 
			Попытка
				ЗаписатьСсылкуПоКонтекстам(ДеревоТэгов, ИнформационнаяСсылка, Контекст, ДатаОбновления, ЛокальныйРежим);
			Исключение
				ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;
	
	ЧтениеИнформационныхСсылок.Закрыть();
	
	ОчиститьНеОбновленныеСсылки(ДатаОбновления, ЛокальныйРежим);
	
КонецПроцедуры

Процедура ЗаписатьПредопределеннуюИнформационнуюСсылку(ОбъектСсылки, ЛокальныйРежим)
	
	Попытка
		ЭлементСправочника = Справочники.ИнформационныеСсылкиДляФорм[ОбъектСсылки.namePredifined].ПолучитьОбъект();
	Исключение
		ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	ЭлементСправочника.Адрес                     = ОбъектСсылки.address;
	ЭлементСправочника.ДатаНачалаАктуальности    = ОбъектСсылки.dateFrom;
	ЭлементСправочника.ДатаОкончанияАктуальности = ОбъектСсылки.dateTo;
	ЭлементСправочника.Наименование              = ОбъектСсылки.name;
	ЭлементСправочника.Подсказка                 = ОбъектСсылки.helpText;
	ЭлементСправочника.ИзКонфигурации            = ЛокальныйРежим;
	ЭлементСправочника.Записать();
	
КонецПроцедуры

Процедура ОчиститьНеОбновленныеСсылки(ДатаОбновления, ОчиститьЛокальные)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИнформационныеСсылкиДляФорм.Ссылка КАК ИнформационнаяСсылка
		|ИЗ
		|	Справочник.ИнформационныеСсылкиДляФорм КАК ИнформационныеСсылкиДляФорм
		|ГДЕ
		|	ИнформационныеСсылкиДляФорм.ИзКонфигурации = &Локальная
		|	И ИнформационныеСсылкиДляФорм.ДатаОбновления <> &ДатаОбновления
		|	И НЕ ИнформационныеСсылкиДляФорм.Предопределенный");
	Запрос.УстановитьПараметр("Локальная", ОчиститьЛокальные);
	Запрос.УстановитьПараметр("ДатаОбновления", ДатаОбновления);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Объект = Выборка.ИнформационнаяСсылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСсылкуПоКонтекстам(ДеревоТэгов, ОбъектСсылки, Контекст, ДатаОбновления, ЛокальныйРежим)
	
	Результат = ПроверитьНаличиеИмениФормыПоТэгу(Контекст.tag);
	Если Результат.ЭтоПутьКФорме Тогда 
		ЗаписатьСсылкуПоКонтексту(ОбъектСсылки, Контекст, Результат.ПутьКФорме, ДатаОбновления, ЛокальныйРежим);
		Возврат;
	КонецЕсли;
	
	Тэг             = Контекст.tag;
	НайденнаяСтрока = ДеревоТэгов.Строки.Найти(Тэг, "Имя");
	Если НайденнаяСтрока = Неопределено Тогда 
		ЗаписатьСсылкуПоИдентификатору(ОбъектСсылки, Контекст, ДатаОбновления, ЛокальныйРежим);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева из НайденнаяСтрока.Строки Цикл 
		
		ИмяФормы = СтрокаДерева.Имя;
		СсылкаНаПутьКФорме = СсылкаПутиКФормеВСправочнике(ИмяФормы);
		Если СсылкаНаПутьКФорме.Пустая() Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗаписатьСсылкуПоКонтексту(ОбъектСсылки, Контекст, СсылкаНаПутьКФорме, ДатаОбновления, ЛокальныйРежим);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСсылкуПоИдентификатору(ОбъектСсылки, Контекст, ДатаОбновления, ЛокальныйРежим)
	
	ЭлементСправочника = Справочники.ИнформационныеСсылкиДляФорм.СоздатьЭлемент();
	ЭлементСправочника.Адрес                     = ОбъектСсылки.address;
	ЭлементСправочника.Идентификатор             = Контекст.tag;
	ЭлементСправочника.Вес                       = Контекст.weight;
	ЭлементСправочника.ДатаНачалаАктуальности    = ОбъектСсылки.dateFrom;
	ЭлементСправочника.ДатаОкончанияАктуальности = ОбъектСсылки.dateTo;
	ЭлементСправочника.Наименование              = ОбъектСсылки.name;
	ЭлементСправочника.Подсказка                 = ОбъектСсылки.helpText;
	ЭлементСправочника.ДатаОбновления            = ДатаОбновления;
	ЭлементСправочника.ИзКонфигурации            = ЛокальныйРежим;
	ЭлементСправочника.Записать();
	
КонецПроцедуры

Процедура ЗаписатьСсылкуПоКонтексту(ОбъектСсылки, Контекст, СсылкаНаПутьКФорме, ДатаОбновления, ЛокальныйРежим)
	
	Ссылка = ИмеетсяИнформационнаяСсылкаДляДаннойФормы(ОбъектСсылки.address, СсылкаНаПутьКФорме);
	
	Если Ссылка = Неопределено Тогда 
		ЭлементСправочника = Справочники.ИнформационныеСсылкиДляФорм.СоздатьЭлемент();
	Иначе
		ЭлементСправочника = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЭлементСправочника.Адрес                     = ОбъектСсылки.address;
	ЭлементСправочника.Вес                       = Контекст.weight;
	ЭлементСправочника.ДатаНачалаАктуальности    = ОбъектСсылки.dateFrom;
	ЭлементСправочника.ДатаОкончанияАктуальности = ОбъектСсылки.dateTo;
	ЭлементСправочника.Наименование              = ОбъектСсылки.name;
	ЭлементСправочника.Подсказка                 = ОбъектСсылки.helpText;
	ЭлементСправочника.ПолныйПутьКФорме          = СсылкаНаПутьКФорме;
	ЭлементСправочника.ДатаОбновления            = ДатаОбновления;
	ЭлементСправочника.Записать();
	
КонецПроцедуры

Функция ИмеетсяИнформационнаяСсылкаДляДаннойФормы(Адрес, СсылкаНаПутьКФорме)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПолныйПутьКФорме", СсылкаНаПутьКФорме);
	Запрос.УстановитьПараметр("Адрес",            Адрес);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформационныеСсылкиДляФорм.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ИнформационныеСсылкиДляФорм КАК ИнформационныеСсылкиДляФорм
	               |ГДЕ
	               |	ИнформационныеСсылкиДляФорм.ПолныйПутьКФорме = &ПолныйПутьКФорме
	               |	И ИнформационныеСсылкиДляФорм.Адрес ПОДОБНО &Адрес";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроверитьНаличиеИмениФормыПоТэгу(Тэг)
	
	Результат = Новый Структура("ЭтоПутьКФорме", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПолныйПутьКФорме", Тэг);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолныеПутиКФормам.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПолныеПутиКФормам КАК ПолныеПутиКФормам
	|ГДЕ
	|	ПолныеПутиКФормам.ПолныйПутьКФорме ПОДОБНО &ПолныйПутьКФорме";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Результат.ЭтоПутьКФорме = Истина;
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл 
		Результат.Вставить("ПутьКФорме", ВыборкаЗапроса.Ссылка);
		Возврат Результат;
	КонецЦикла;
	
КонецФункции

Функция ПолучитьДеревоТэгов()
	
	ДеревоТэгов = Новый ДеревоЗначений;
	ДеревоТэгов.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	
	// Чтение общего макета
	ИмяФайлаМакета = ПолучитьИмяВременногоФайла("xml");
	ПолучитьОбщийМакет("СоответствиеТэговОбщимФормам").Записать(ИмяФайлаМакета);
	
	ЗаписиСоответствияТэговИФорм = Новый ЧтениеXML;
	ЗаписиСоответствияТэговИФорм.ОткрытьФайл(ИмяФайлаМакета);
	
	ТекущийТэгВДереве = Неопределено;
	Пока ЗаписиСоответствияТэговИФорм.Прочитать() Цикл
		// Чтение текущего тэга
		ЭтоТэг = ЗаписиСоответствияТэговИФорм.ТипУзла = ТипУзлаXML.НачалоЭлемента и ВРег(СокрЛП(ЗаписиСоответствияТэговИФорм.Имя)) = ВРег("tag");
		Если ЭтоТэг Тогда 
			Пока ЗаписиСоответствияТэговИФорм.ПрочитатьАтрибут() Цикл 
				Если ВРег(ЗаписиСоответствияТэговИФорм.Имя) = ВРег("name") тогда
					ТекущийТэгВДереве     = ДеревоТэгов.Строки.Добавить();
					ТекущийТэгВДереве.Имя = ЗаписиСоответствияТэговИФорм.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Чтение формы
		ЭтоФорма = ЗаписиСоответствияТэговИФорм.ТипУзла = ТипУзлаXML.НачалоЭлемента и ВРег(СокрЛП(ЗаписиСоответствияТэговИФорм.Имя)) = ВРег("form");
		Если ЭтоФорма Тогда 
			Пока ЗаписиСоответствияТэговИФорм.ПрочитатьАтрибут() Цикл 
				Если ВРег(ЗаписиСоответствияТэговИФорм.Имя) = ВРег("path") тогда
					Если ТекущийТэгВДереве = Неопределено Тогда 
						Прервать;
					КонецЕсли;
					ТекущийЭлементДерева     = ТекущийТэгВДереве.Строки.Добавить();
					ТекущийЭлементДерева.Имя = ЗаписиСоответствияТэговИФорм.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоТэгов;
	
КонецФункции

Процедура ДобавитьФормыВСправочник(ТаблицаФорм, ИмяКлассаМетаданного)
	
	КлассМетаданных     = Метаданные[ИмяКлассаМетаданного];
	КоличествоЭлементов = КлассМетаданных.Количество();
	Если ИмяКлассаМетаданного = "ОбщиеФормы" Тогда 
		Для ИтерацияЭлементов = 0 По КоличествоЭлементов - 1 Цикл 
			
			ПолныйПутьКФорме = КлассМетаданных.Получить(ИтерацияЭлементов).ПолноеИмя();
			
			ЭлементТаблицы                  = ТаблицаФорм.Добавить();
			ЭлементТаблицы.ПолныйПутьКФорме = ПолныйПутьКФорме;
			
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для ИтерацияЭлементов = 0 По КоличествоЭлементов - 1 Цикл 
		ФормыКлассаМетаданных = КлассМетаданных.Получить(ИтерацияЭлементов).Формы;
		КоличествоФорм        = ФормыКлассаМетаданных.Количество();
		Для ИтерацияФорм = 0 По КоличествоФорм - 1 Цикл 
			
			ПолныйПутьКФорме = ФормыКлассаМетаданных.Получить(ИтерацияФорм).ПолноеИмя();
			
			ЭлементТаблицы                  = ТаблицаФорм.Добавить();
			ЭлементТаблицы.ПолныйПутьКФорме = ПолныйПутьКФорме;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПолноеИмяВСправочник(ПолноеИмяФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	ЭлементСправочника = Справочники.ПолныеПутиКФормам.СоздатьЭлемент();
	ЭлементСправочника.Наименование     = ПолноеИмяФормы;
	ЭлементСправочника.ПолныйПутьКФорме = ПолноеИмяФормы;
	ЭлементСправочника.Записать();
	
КонецПроцедуры

Функция СсылкаПутиКФормеВСправочнике(ПолноеИмяФормы)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПолныйПутьКФорме", ПолноеИмяФормы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолныеПутиКФормам.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПолныеПутиКФормам КАК ПолныеПутиКФормам
	|ГДЕ
	|	ПолныеПутиКФормам.ПолныйПутьКФорме ПОДОБНО &ПолныйПутьКФорме";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.ПолныеПутиКФормам.ПустаяСсылка();
	
КонецФункции

Функция ОпределитьПространствоИменПоФайлу(ПутьКФайлу)
	
	ЧтениеИнформационныхСсылок = Новый ЧтениеXML; 
	ЧтениеИнформационныхСсылок.ОткрытьФайл(ПутьКФайлу); 
	ЧтениеИнформационныхСсылок.ПерейтиКСодержимому();
	ЧтениеИнформационныхСсылок.Прочитать();
	
	Пока ЧтениеИнформационныхСсылок.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		ИнформационнаяСсылка = ФабрикаXDTO.ПрочитатьXML(ЧтениеИнформационныхСсылок);
		ЧтениеИнформационныхСсылок.Закрыть();
		
		Попытка
			Возврат ИнформационнаяСсылка.Тип().URIПространстваИмен;
		Исключение
			ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации() + "." + НСтр("ru = 'Информационные ссылки'");
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ИнформационнаяСсылка);
			ПредставлениеОбъекта = ЗаписьXML.Закрыть();
			ЗаписьЖурналаРегистрации(ИмяСобытия, 
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				НСтр("ru = 'Не удалось определить тип информационной ссылки: '") + Символы.ПС + Символы.ПС + ПредставлениеОбъекта);

			Возврат Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	
	
КонецФункции

Процедура ЗаписатьДанныеАутентификации(ЗначенияПараметров, Владелец, ПараметрЛогин, ПараметрПароль)
	
	УстановитьПривилегированныйРежим(Истина);
    
    Если ЗначенияПараметров.Свойство(ПараметрЛогин) Тогда
		ТехнологияСервисаИнтеграцияСБСП.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ЗначенияПараметров[ПараметрЛогин], "Логин");
		ЗначенияПараметров.Удалить(ПараметрЛогин);
	КонецЕсли;
	
	Если ЗначенияПараметров.Свойство(ПараметрПароль) Тогда
		ТехнологияСервисаИнтеграцияСБСП.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ЗначенияПараметров[ПараметрПароль], "Пароль");
		ЗначенияПараметров.Удалить(ПараметрПароль);
	КонецЕсли;
    
    УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти
