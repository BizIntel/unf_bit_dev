#Область ПроцедурыИФункцииБазовые 

// Функция, вызываемая перед началом работы системы.
//
Функция ПередНачаломРаботыСистемы() Экспорт
	
	Если глПодключаемоеОборудование = Неопределено Тогда
		глПодключаемоеОборудование = Новый Структура();
		глПодключаемоеОборудование.Вставить("ДрайвераПодключаемогоОборудования", Новый Соответствие());
		глПодключаемоеОборудование.Вставить("ПараметрыПодключенияПО"           , Новый Массив());
		глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек"                 , "");
		глПодключаемоеОборудование.Вставить("ЗавершениеРаботыСистемы"          , Ложь);
	КонецЕсли;
	
КонецФункции

// Функция, вызываемая при начале работы системы.
//
Функция ПриНачалеРаботыСистемы() Экспорт
	
#Если Не ВебКлиент Тогда
	ПереустановитьПомеченныеДрайверы();
#КонецЕсли
	
КонецФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма.
Функция ПередЗавершениемРаботыСистемы() Экспорт
	
	НачатьОтключениеВсегоОборудования();
	
КонецФункции

// Поиск по идентификатору подключенного ранее устройства. 
//
Функция ПолучитьПодключенноеУстройство(СписокПодключений, Идентификатор) Экспорт
	
	ПодключенноеУстройство = Неопределено;
	
	Для Каждого Подключение Из СписокПодключений Цикл
		Если Подключение.Ссылка = Идентификатор Тогда
			ПодключенноеУстройство = Подключение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенноеУстройство;
	
КонецФункции

// Поиск по типу подключенные ранее устройства.
//
Функция ПолучитьПодключенныеУстройства(СписокПодключений, ТипПО, Идентификатор = Неопределено) Экспорт
	
	ПодключенныеУстройства = Новый Массив();
	
	Для Каждого Подключение Из СписокПодключений Цикл
		Если Подключение.ТипОборудования = ТипПО Тогда
			Если (Идентификатор <> Неопределено) Тогда
				Если (Подключение.Ссылка = Идентификатор) Тогда
					ПодключенныеУстройства.Добавить(Подключение);
					Прервать;
				КонецЕсли;
			Иначе
				ПодключенныеУстройства.Добавить(Подключение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенныеУстройства;
	
КонецФункции

// Выполнить настройку оборудования.
// 
Процедура ВыполнитьНастройкуОборудования(Идентификатор, ОповещениеПриЗавершении = Неопределено) Экспорт

	Результат = Истина;
	
	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(Идентификатор);
	ПараметрыФормы = Новый Структура("ПараметрыОборудования", ДанныеУстройства.Параметры);
	ПараметрыФормы.Вставить("Идентификатор", Идентификатор);       
	ПараметрыФормы.Вставить("ДрайверОборудования", ДанныеУстройства.ДрайверОборудования);  
	ПараметрыФормы.Вставить("ВерсияФорматаОбмена", ДанныеУстройства.ВерсияФорматаОбмена);
	
	ФормаНастройки = "ФормаНастройкиУниверсальныйДрайвер";
	
	ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ДанныеУстройства.ОбработчикДрайвера, Не ДанныеУстройства.ВСоставеКонфигурации, ДанныеУстройства.ТипОборудованияИмя);
		
	Если Не ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент 
		И Не ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент  
		Тогда
			ФормаНастройки = СтрЗаменить(ДанныеУстройства.ОбработчикДрайвераИмя, "Обработчик", "ФормаНастройки");
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ФормаНастройки) Тогда
		ПараметрыКоманды = Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Обработчик = Новый ОписаниеОповещения("ВыполнитьНастройкуОборудования_Завершение", ЭтотОбъект, ПараметрыКоманды);
		ОткрытьФорму("ОбщаяФорма." + ФормаНастройки, ПараметрыФормы,,,  ,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Произошла ошибка инициализации формы настройки драйвера.'")); 
	КонецЕсли;
	
КонецПроцедуры

// Завершение настройки оборудования.
//
Процедура ВыполнитьНастройкуОборудования_Завершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		РезультатЗавершения = Ложь;
		Если Результат.Свойство("Идентификатор") И Результат.Свойство("ПараметрыОборудования") Тогда
			ВерсияФорматаОбмена = ?(Результат.Свойство("ВерсияФорматаОбмена"), Результат.ВерсияФорматаОбмена, МенеджерОборудованияКлиентПовтИсп.РевизияИнтерфейсаДрайверов());
			РезультатЗавершения = МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Результат.Идентификатор, Результат.ПараметрыОборудования, ВерсияФорматаОбмена);
		КонецЕсли;
		
		Если РезультатЗавершения Тогда 
			ОбновитьПовторноИспользуемыеЗначения();
		Иначе
			СообщениеОбОшибке = НСтр("ru='Не удалось сохранить параметры устройства.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатЗавершения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет пользовательские настройки подключаемого оборудования.
//
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт
	
	МенеджерОборудованияВызовСервера.СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Открытие формы списка рабочих мест.
//
Процедура ОткрытьРабочиеМеста(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбновитьРабочееМестоКлиента();
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.РабочиеМеста.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Процедура для выбора рабочего места текущего сеанса.
//
Процедура ВыбратьРМТекущегоСеанса(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПредложитьВыборРабочегоМестаЗавершение", ЭтотОбъект);
	ПредложитьВыборРабочегоМеста(Оповещение);
	
КонецПроцедуры

// Открытие формы подключаемого Оборудования.
//
Процедура ОткрытьПодключаемоеОборудование(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открытие формы драйверов оборудования.
//
Процедура ОткрытьДрайверыОборудования(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ДрайверыОборудования.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Функция предоставляет диалог выбора рабочего места.
// 
Процедура ПредложитьВыборРабочегоМеста(ОбработкаОповещения, ИдентификаторКлиента = "") Экспорт

	Результат = Ложь;
	РабочееМесто = "";
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораРабочегоМеста", ПараметрыФормы,,,  ,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

// Завершение выбора рабочего места.
//
Процедура ПредложитьВыборРабочегоМестаЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РабочееМесто") Тогда 
		УстановитьРабочееМесто(Результат.РабочееМесто);
	КонецЕсли;
		
КонецПроцедуры

// Функция устанавливает рабочее место.
// 
Процедура УстановитьРабочееМесто(РабочееМесто) Экспорт
	
	МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
	Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	
КонецПроцедуры

// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента".
//
Функция ОбновитьРабочееМестоКлиента() Экспорт
	
	Результат = Истина;
	
	РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		МассивРабочихМест = МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если МассивРабочихМест.Количество() = 0 Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("ИмяКомпьютера");
			Параметры.Вставить("ИдентификаторКлиента");
			
			#Если Не ВебКлиент Тогда
				Параметры.ИмяКомпьютера = ИмяКомпьютера();
			#КонецЕсли
			
			Параметры.ИдентификаторКлиента = ВРег(СистемнаяИнформация.ИдентификаторКлиента);
			РабочееМесто = МенеджерОборудованияВызовСервера.СоздатьРабочееМестоКлиента(Параметры);
		Иначе
			РабочееМесто = МассивРабочихМест[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат
		И РабочееМесто <> МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента() Тогда
		МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру выполнения операции на Оборудовании.
// 
Функция ПараметрыВыполненияОперацииНаОборудовании(Результат = Ложь, ОписаниеОшибки = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт; 
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("Результат"              , Результат);
	РезультатВыполнения.Вставить("ОписаниеОшибки"         , ОписаниеОшибки);
	РезультатВыполнения.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	РезультатВыполнения.Вставить("ВыходныеПараметры"      , Неопределено);
	Возврат РезультатВыполнения;
	
КонецФункции

// Процедура выбора устройства из доступных, привязанных к текущему рабочему месту.
//
Процедура ПредложитьВыбратьУстройство(ОповещениеВыбора, ТипОборудования, ТекстЗаголовкаВыбора, 
	СообщениеНеПодключен = "", СообщениеНеВыбран = "", БезСообщений = Ложь, ТекстСообщения = "") Экспорт
	
	Если Не ОбновитьРабочееМестоКлиента() Тогда
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		Если Не БезСообщений Тогда
		      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования(ТипОборудования);
	
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		Если Не ПустаяСтрока(СообщениеНеПодключен) Тогда
			Если БезСообщений Тогда
				ТекстСообщения = СообщениеНеПодключен;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеНеПодключен);
			КонецЕсли;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, Неопределено);
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для Каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;
		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
			ВыполнитьОбработкуОповещения(ОповещениеВыбора, Идентификатор); 
		Иначе
			Контекст = Новый Структура;
			Контекст.Вставить("СледующееОповещение", ОповещениеВыбора);
			Контекст.Вставить("СообщениеНеВыбран"  , ?(ПустаяСтрока(СообщениеНеВыбран), СообщениеНеПодключен, СообщениеНеВыбран));
			Контекст.Вставить("БезСообщений"       , БезСообщений);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
			СписокУстройств.ПоказатьВыборЭлемента(ОписаниеОповещения, ТекстЗаголовкаВыбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредложитьВыбратьУстройствоЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено И НЕ Параметры.БезСообщений И Не ПустаяСтрока(Параметры.СообщениеНеВыбран) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Параметры.СообщениеНеВыбран);
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		Идентификатор = ?(Результат = Неопределено, Неопределено, Результат.Значение);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Функция начинает выбор файла драйвера для последующей загрузки.
//
Процедура НачатьВыборФайлаДрайвера(ОповещениеПриВыборе) Экспорт 
	
	Результат = Ложь;
	ПолноеИмяФайла = "";
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите файл драйвера'");
	ДиалогОткрытияФайла.Фильтр = НСтр("ru='Файл драйвера'") + ?(МенеджерОборудованияКлиентПовтИсп.ЭтоLinuxКлиент(), "(*.zip)|*.zip", "(*.zip, *.exe)| *.zip; *.exe");  
	
	Параметры = Новый Структура("СледующееОповещение", ОповещениеПриВыборе);
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаДрайвераЗавершение", ЭтотОбъект, Параметры);
	
	ДиалогОткрытияФайла.Показать(Оповещение);
	
КонецПроцедуры

// Завершение выбора файла драйвера.
//
Процедура ВыборФайлаДрайвераЗавершение(ВыбранныеФайлы, Параметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0  Тогда
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, ВыбранныеФайлы[0]);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Завершение выбора файла
//
Процедура НачатьВыборФайлаРасширенияЗавершение(Установлено, ДополнительныеПараметры) Экспорт
	
	Если Установлено Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла[ДополнительныеПараметры.РежимДиалогаВыбораФайла]);
		Диалог.МножественныйВыбор = Ложь;
		Диалог.ПолноеИмяФайла = ДополнительныеПараметры.ИмяФайла;
		Диалог.Показать(ДополнительныеПараметры.ОповещениеПриВыборе);
	КонецЕсли;
	
КонецПроцедуры
 
// Функция начинает выбор файла.
//
Процедура НачатьВыборФайла(ОповещениеПриВыборе, Знач ИмяФайла, РежимДиалогаВыбораФайла = "Открытие") Экспорт
	
	ПараметрыКоманды = Новый Структура("ОповещениеПриВыборе, ИмяФайла, РежимДиалогаВыбораФайла", ОповещениеПриВыборе, ИмяФайла, РежимДиалогаВыбораФайла);
	Оповещение = Новый ОписаниеОповещения("НачатьВыборФайлаРасширенияЗавершение", ЭтотОбъект, ПараметрыКоманды);
	ПроверитьДоступностьРасширенияРаботыСФайлами(Оповещение);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура формирует задержку указанной длительности.
//
// Параметры:
//  Время - <Число>
//        - Длительность задержки в секундах.
//
Процедура Пауза(Время) Экспорт

	ВремяЗавершения = ТекущаяДата() + Время;
	Пока ТекущаяДата() < ВремяЗавершения Цикл
	КонецЦикла;

КонецПроцедуры

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ПостроитьПоле(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ДобавлятьСправа = Истина) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если ДобавлятьСправа Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		Иначе
			ТекстПолный = ДобСимвол + ТекстПолный;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

// Выстраивает строку по длине поля, если поле длинное - переносит на следующую строку.
//
Функция ПостроитьПолеПереносом(Знач Текст, Знач ДлинаПоля, ДобСимвол = "") Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	Если СтрДлина(Текст) > ДлинаПоля Тогда 
		ТекстПолный = "";
		Пока СтрДлина(Текст) > ДлинаПоля Цикл
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);
			Текст = Сред(Текст, ДлинаПоля + 1);
		КонецЦикла;
		ТекстПолный = ТекстПолный + ?(ПустаяСтрока(Текст), "", Символы.ПС + Текст);
	Иначе
		ТекстПолный = Текст;
	КонецЕсли;
		
	Возврат ТекстПолный;
	
КонецФункции

// Формирует строку из двух полей, если передается одно поле дополняет символами до нужного размера.
//
Функция ВыстроитьПоля(Знач Текст1, Знач Текст2 = "", Знач ДлинаПоля) Экспорт
	
	Если ПустаяСтрока(Текст2) Тогда
		ТекстПолный = ПостроитьПоле(Текст1, СтрДлина(Текст1) + Цел((ДлинаПоля - СтрДлина(Текст1))/2), , Ложь);
		ТекстПолный = ПостроитьПоле(ТекстПолный, ДлинаПоля);
	ИначеЕсли СтрДлина(Текст1) + СтрДлина(Текст2) < ДлинаПоля Тогда
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля - СтрДлина(Текст2)) + Текст2;
	Иначе
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля) + Символы.ПС + ПостроитьПоле(Текст2, ДлинаПоля, ,Ложь)
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции

// Преобразовать список строкой в массив.
//
Функция ПреобразоватьСписокСтрокойВМассив(Источник) Экспорт
	
	ПромежуточнаяСтруктура = Новый Структура(Источник);
	Приемник = Новый Массив;
	
	Для Каждого КлючИЗначение Из ПромежуточнаяСтруктура Цикл
		Приемник.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПодключениеОборудованияАсинхронно

// Производит подключение доступного оборудования по списку типов ПО
//
Процедура НачатьПодключениеОборудованиеПоТипу(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	СтруктураТиповПО = Новый Структура();
	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для Каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;
	
	НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, СтруктураТиповПО);
	 
 КонецПроцедуры

// Начать подключать одиночный экземпляр устройства определяемый идентификатором.
//
Процедура НачатьПодключениеОборудованиеПоИдентификатору(ОповещениеПриПодключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, , ИдентификаторУстройства);
	
КонецПроцедуры

// Начать подключения устройства.
// 
Процедура НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	   
	ОбъектДрайвера = Неопределено;
	
	Результат = ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		Если ОповещениеПриПодключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
			РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Результат, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СписокОборудования = МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипыПО, ИдентификаторУстройства);
	
	Если СписокОборудования.Количество() > 0 Тогда
		Для Каждого Устройство Из СписокОборудования Цикл
			
			// Проверим, не подключено ли устройство ранее.
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Устройство.Ссылка);
			
			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее.
				
				ОбработчикДрайвераМодуль = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(Устройство.ОбработчикДрайвера, Не Устройство.ВСоставеКонфигурации, Устройство.ТипОборудованияИмя);
				
				НовоеПодключение = Новый Структура();
				НовоеПодключение.Вставить("Клиенты"                 , Новый Массив());
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
				НовоеПодключение.Вставить("Ссылка"                  , Устройство.Ссылка);
				НовоеПодключение.Вставить("ИдентификаторУстройства" , Устройство.ИдентификаторУстройства);
				НовоеПодключение.Вставить("ОбработчикДрайвера"      , Устройство.ОбработчикДрайвера);
				НовоеПодключение.Вставить("Наименование"            , Устройство.Наименование);
				НовоеПодключение.Вставить("ТипОборудования"         , Устройство.ТипОборудования);
				НовоеПодключение.Вставить("ТипОборудованияИмя"      , Устройство.ТипОборудованияИмя);
				НовоеПодключение.Вставить("ДрайверОборудования"     , Устройство.ДрайверОборудования);
				НовоеПодключение.Вставить("ВСоставеКонфигурации"    , Устройство.ВСоставеКонфигурации);
				НовоеПодключение.Вставить("ИдентификаторОбъекта"    , Устройство.ИдентификаторОбъекта);
				НовоеПодключение.Вставить("ИмяМакетаДрайвера"       , Устройство.ИмяМакетаДрайвера);
				НовоеПодключение.Вставить("ИмяФайлаДрайвера"        , Устройство.ИмяФайлаДрайвера);
				НовоеПодключение.Вставить("ВерсияФорматаОбмена"     , Устройство.ВерсияФорматаОбмена);
				НовоеПодключение.Вставить("РабочееМесто"            , Устройство.РабочееМесто);
				НовоеПодключение.Вставить("ИмяКомпьютера"           , Устройство.ИмяКомпьютера);
				НовоеПодключение.Вставить("Параметры"               , Устройство.Параметры);
				НовоеПодключение.Вставить("ПараметрыРегистрации"    , Устройство.ПараметрыРегистрации);
				НовоеПодключение.Вставить("КоличествоПодключенных"  , 1);
				НовоеПодключение.Вставить("ПараметрыПодключения"    , Новый Структура());
				НовоеПодключение.Вставить("ОбъектДрайвера"          , Неопределено);
				НовоеПодключение.Вставить("ОбработчикДрайвераМодуль", ОбработчикДрайвераМодуль);
				НовоеПодключение.ПараметрыПодключения.Вставить("ТипОборудования"     , Устройство.ТипОборудованияИмя);
				НовоеПодключение.ПараметрыПодключения.Вставить("ВерсияФорматаОбмена" , Устройство.ВерсияФорматаОбмена);
				НовоеПодключение.ПараметрыПодключения.Вставить("ПараметрыРегистрации", Устройство.ПараметрыРегистрации);
				
				Если ОбработчикДрайвераМодуль = Неопределено Тогда
					// Сообщить об ошибке, что не удалось подключить обработчик.
					Если ОповещениеПриПодключении <> Неопределено Тогда
						ОписаниеОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.'");
						РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
						ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
					КонецЕсли;
					Продолжить;
				Иначе
					
					// Разделение на асинхронные и синхронные вызовы.
					Если ОбработчикДрайвераМодуль.ПоддержкаАсинхронногоРежима() Тогда
						// Асинхронные вызовы
						ПараметрыКоманды = Новый Структура("НовоеПодключение, ОповещениеПриПодключении, ОбработчикДрайвераМодуль", НовоеПодключение, ОповещениеПриПодключении, ОбработчикДрайвераМодуль);
						Оповещение = Новый ОписаниеОповещения("НачатьПодключениеОборудования_ПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, ПараметрыКоманды);
						НачатьПолучениеОбъектаДрайвера(Оповещение, Устройство);
					Иначе
						// Синхронные
						ОбъектДрайвера = ПолучитьОбъектДрайвера(Устройство);
						Если ОбъектДрайвера = Неопределено Тогда
							Если ОповещениеПриПодключении <> Неопределено Тогда
								// Сообщить об ошибке, что не удалось загрузить драйвер.
								ОписаниеОшибки = НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
													|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
								ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%",НовоеПодключение.Наименование);
								РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
								ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
							КонецЕсли;
							Продолжить;
						Иначе
							ВыходныеПараметры = Неопределено;
							Результат = ОбработчикДрайвераМодуль.ПодключитьУстройство(ОбъектДрайвера, НовоеПодключение.Параметры, НовоеПодключение.ПараметрыПодключения, ВыходныеПараметры);
							
							Если Результат Тогда
								
								Если ВыходныеПараметры.Количество() >= 2 Тогда
									НовоеПодключение.Вставить("ИсточникСобытия", ВыходныеПараметры[0]);
									НовоеПодключение.Вставить("ИменаСобытий",    ВыходныеПараметры[1]);
								Иначе
									НовоеПодключение.Вставить("ИсточникСобытия", "");
									НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
								КонецЕсли;
								НовоеПодключение.ОбъектДрайвера = ОбъектДрайвера;
								глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
								
								Если ОповещениеПриПодключении <> Неопределено Тогда
									ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
									РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ПараметрыПодключения", Истина, ОписаниеОшибки, НовоеПодключение.ПараметрыПодключения);
									ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
								КонецЕсли;
								
							Иначе
								// Сообщим пользователю о том, что не удалось подключить устройство.
								Если ОповещениеПриПодключении <> Неопределено Тогда
									ОписаниеОшибки = НСтр("ru='Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)'");
									ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , НовоеПодключение.Наименование);
									ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
									ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
									РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
									ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			
			Иначе // Устройство было подключено ранее.
				// Увеличим количество пользователей данного соединения.
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
				Если ОповещениеПриПодключении <> Неопределено Тогда
					ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
					РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ПараметрыПодключения", Истина, ОписаниеОшибки, ПодключенноеУстройство.ПараметрыПодключения);
					ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИдентификаторУстройства <> Неопределено И ОповещениеПриПодключении <> Неопределено Тогда
		ОписаниеОшибки =  НСтр("ru='Выбранное устройство не может использоваться для подключения. Укажите другое устройство.'");
		РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
	ИначеЕсли ТипыПО = Неопределено И ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки =  НСтр("ru='Нет доступного оборудования для подключения.'");
		РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

Процедура НачатьПодключениеОборудования_ПолучениеОбъектаДрайвераЗавершение(ОбъектДрайвера, Параметры) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ОписаниеОшибки = НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
										|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Параметры.НовоеПодключение.Наименование);
			РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
		
	Иначе
		Параметры.НовоеПодключение.ОбъектДрайвера = ОбъектДрайвера;
		Оповещение = Новый ОписаниеОповещения("НачатьПодключениеОборудования_Завершение", ЭтотОбъект, Параметры);
		Параметры.ОбработчикДрайвераМодуль.НачатьПодключениеУстройства(Оповещение, ОбъектДрайвера, 
			 Параметры.НовоеПодключение.Параметры,  Параметры.НовоеПодключение.ПараметрыПодключения, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключениеОборудования_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Если РезультатВыполнения.ВыходныеПараметры.Количество() >= 2 Тогда
			Параметры.НовоеПодключение.Вставить("ИсточникСобытия", Параметры.ВыходныеПараметры[0]);
			Параметры.НовоеПодключение.Вставить("ИменаСобытий",    Параметры.ВыходныеПараметры[1]);
		Иначе
			Параметры.НовоеПодключение.Вставить("ИсточникСобытия", "");
			Параметры.НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
		КонецЕсли;
		глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(Параметры.НовоеПодключение);
		Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ПараметрыПодключения", Истина, ОписаниеОшибки, Параметры.НовоеПодключение.ПараметрыПодключения);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		// Сообщим пользователю о том, что не удалось подключить устройство.
		Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Параметры.НовоеПодключение.Наименование);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
			РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Начать отключение устройств по типу оборудования.
//
Процедура НачатьОтключениеОборудованиеПоТипу(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	НачатьОтключениеОборудование(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО, );
	
КонецПроцедуры

// Начать отключать устройства определенное идентификатором.
//
Процедура НачатьОтключениеОборудованиеПоИдентификатору(ОповещениеПриОтключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	НачатьОтключениеОборудование(ОповещениеПриОтключении, ИдентификаторКлиента, , ИдентификаторУстройства);
	
КонецПроцедуры

// Функция подключает устройства по типу оборудования.
// 
Процедура НачатьОтключениеОборудование(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено)
	
	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			
			Если КлиентПодключения <> Неопределено  И (ТипыПО = Неопределено Или ТипыПО.Найти(ПодключенноеУстройство.ТипОборудованияИмя) <> Неопределено)
			   И (ИдентификаторУстройства = Неопределено  Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства) Тогда
				
				Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					
					ОбработчикДрайвераМодуль = ПодключенноеУстройство.ОбработчикДрайвераМодуль;
					ОбъектДрайвера = ПодключенноеУстройство.ОбъектДрайвера;
					
					Если ОбработчикДрайвераМодуль = Неопределено Тогда
						// Сообщить об ошибке, что не удалось подключить обработчик.
						Если ОповещениеПриОтключении <> Неопределено Тогда
							ОписаниеОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.'");
							РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
							ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
						КонецЕсли;
					Иначе
						
						Если ОбъектДрайвера = Неопределено Тогда
							Если ОповещениеПриОтключении <> Неопределено Тогда
								// Сообщить об ошибке, что не удалось загрузить драйвер.
								ОписаниеОшибки = НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
													|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
								ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
								РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
								ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
							КонецЕсли;
						Иначе
							
							ВыходныеПараметры = Неопределено;
							           
							// Разделение на асинхронные и синхронные вызовы.
							Если ОбработчикДрайвераМодуль.ПоддержкаАсинхронногоРежима() Тогда
								
								ПараметрыКоманды = Новый Структура("ПодключенноеУстройство, ОповещениеПриОтключении", ПодключенноеУстройство, ОповещениеПриОтключении);
								Оповещение = Новый ОписаниеОповещения("НачатьОтключениеОборудование_Завершение", ЭтотОбъект, ПараметрыКоманды);
								ОбработчикДрайвераМодуль.НачатьОтключениеУстройства(Оповещение, ОбъектДрайвера, 
									ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
							Иначе
								Результат = ОбработчикДрайвераМодуль.ОтключитьУстройство(ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
								Если НЕ Результат Тогда
									// Сообщим пользователю о том, что не удалось подключить устройство.
									Если ОповещениеПриОтключении <> Неопределено Тогда
										ОписаниеОшибки = НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки%'");
										ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , ПодключенноеУстройство.Наименование);
										ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
										РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
										ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
									КонецЕсли;
								Иначе
									ПодключенноеУстройство.КоличествоПодключенных = 0;
								КонецЕсли;
								
								НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ПодключенноеУстройство);
								Если НомерСтрокиМассива <> Неопределено Тогда
									глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
								КонецЕсли;
								
								Если ОповещениеПриОтключении <> Неопределено Тогда
									ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
									РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Истина, ОписаниеОшибки);
									ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры  

Процедура НачатьОтключениеОборудование_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Параметры.ПодключенноеУстройство.КоличествоПодключенных = 0;
		
		НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(Параметры.ПодключенноеУстройство);
		Если НомерСтрокиМассива <> Неопределено Тогда
			глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
		КонецЕсли;
		Если Параметры.ОповещениеПриОтключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
			РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Истина, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОтключении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		// Сообщим пользователю о том, что не удалось подключить устройство.
		Если Параметры.ОповещениеПриОтключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Параметры.ПодключенноеУстройство.Наименование);
			РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОтключении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Производит принудительное отключение всего подключенного оборудования,
// независимо от числа ссылок на подключение.
Процедура НачатьОтключениеВсегоОборудования(ОповещениеПриОтключении = Неопределено) Экспорт
	
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	Для Каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		
		Если ПодключенноеУстройство.ОбъектДрайвера = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыходныеПараметры = Неопределено;
		ОбработчикДрайвераМодуль = ПодключенноеУстройство.ОбработчикДрайвераМодуль;
		Если ОбработчикДрайвераМодуль.ПоддержкаАсинхронногоРежима() Тогда
			Оповещение = Новый ОписаниеОповещения("НачатьОтключениеВсегоОборудованияЗавершение", МенеджерОборудованияКлиент);
			ОбработчикДрайвераМодуль.НачатьОтключениеУстройства(Оповещение, ПодключенноеУстройство.ОбъектДрайвера, ПодключенноеУстройство.Параметры, 
				ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
			ПодключенноеУстройство.КоличествоПодключенных = 0;
			Результат = Истина;
		Иначе
			Результат = ОбработчикДрайвераМодуль.ОтключитьУстройство(ПодключенноеУстройство.ОбъектДрайвера, ПодключенноеУстройство.Параметры, 
				ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
			Если Результат Тогда
				ПодключенноеУстройство.КоличествоПодключенных = 0;
			КонецЕсли;
		КонецЕсли;
		КонечныйРезультат = КонечныйРезультат И Результат;
		
	КонецЦикла;
	
	КоличествоПодключенныхКлиентов = 0;
	Для Каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		КоличествоПодключенныхКлиентов = КоличествоПодключенныхКлиентов + ПодключенноеУстройство.КоличествоПодключенных;
	КонецЦикла;
	
	глПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();
	
КонецПроцедуры

Процедура НачатьОтключениеВсегоОборудованияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти  

#Область ПроцедурыИФункцииПодключениеОборудованияСинтронноУстарели

// Подключает одиночный экземпляр устройства определяемый идентификатором.
//
Функция ПодключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "")
	
	Возврат ПодключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);
	
КонецФункции

// Функция подключает устройства по типу оборудования.
// Возвращает результат выполнения функции.
//
Функция ПодключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "")
	   
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	ОбъектДрайвера    = Неопределено;
	ОписаниеОшибки    = "";
	ОписаниеОшибкиУстройства = "";

	Результат = ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		ОписаниеОшибки = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		Возврат Ложь;
	КонецЕсли;
	
	СписокОборудования = МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипыПО, ИдентификаторУстройства);
	
	Если СписокОборудования.Количество() > 0 Тогда
		Для Каждого Устройство Из СписокОборудования Цикл
			
			// Проверим, не подключено ли устройство ранее.
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Устройство.Ссылка);
			
			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее.
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Устройство);
				Если ОбъектДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
								   + НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
									 |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Устройство.Наименование);
					КонечныйРезультат = Ложь;
					Продолжить;
				КонецЕсли;
				
				НовоеПодключение = Новый Структура();
				НовоеПодключение.Вставить("Клиенты"               , Новый Массив());
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
				НовоеПодключение.Вставить("Ссылка"                  , Устройство.Ссылка);
				НовоеПодключение.Вставить("ИдентификаторУстройства" , Устройство.ИдентификаторУстройства);
				НовоеПодключение.Вставить("ОбработчикДрайвера"      , Устройство.ОбработчикДрайвера);
				НовоеПодключение.Вставить("Наименование"            , Устройство.Наименование);
				НовоеПодключение.Вставить("ТипОборудования"         , Устройство.ТипОборудования);
				НовоеПодключение.Вставить("ТипОборудованияИмя"      , Устройство.ТипОборудованияИмя);
				НовоеПодключение.Вставить("ДрайверОборудования"     , Устройство.ДрайверОборудования);
				НовоеПодключение.Вставить("ВСоставеКонфигурации"    , Устройство.ВСоставеКонфигурации);
				НовоеПодключение.Вставить("ИдентификаторОбъекта"    , Устройство.ИдентификаторОбъекта);
				НовоеПодключение.Вставить("ИмяМакетаДрайвера"       , Устройство.ИмяМакетаДрайвера);
				НовоеПодключение.Вставить("ИмяФайлаДрайвера"        , Устройство.ИмяФайлаДрайвера);
				НовоеПодключение.Вставить("ВерсияФорматаОбмена"     , Устройство.ВерсияФорматаОбмена);
				НовоеПодключение.Вставить("РабочееМесто"            , Устройство.РабочееМесто);
				НовоеПодключение.Вставить("ИмяКомпьютера"           , Устройство.ИмяКомпьютера);
				НовоеПодключение.Вставить("Параметры"               , Устройство.Параметры);
				НовоеПодключение.Вставить("КоличествоПодключенных"  , 1);
				НовоеПодключение.Вставить("ПараметрыПодключения"    , Новый Структура());
				НовоеПодключение.ПараметрыПодключения.Вставить("ТипОборудования", Устройство.ТипОборудованияИмя);
				НовоеПодключение.ПараметрыПодключения.Вставить("ВерсияФорматаОбмена", Устройство.ВерсияФорматаОбмена);
				
				ВыходныеПараметры = Неопределено;
				   
				ОбработчикДрайвераМодуль = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(НовоеПодключение.ОбработчикДрайвера, Не НовоеПодключение.ВСоставеКонфигурации, Устройство.ТипОборудованияИмя);
				
				Если ОбработчикДрайвераМодуль = Неопределено Тогда
					// Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = ОписаниеОшибки +  НСтр("ru='Не удалось подключить обработчик драйвера.'");
					КонечныйРезультат = Ложь;
					Продолжить;
				Иначе
					// Принудительно заменяем асинхронный обработчик на синхронный, так как работам в синхронном режиме.
					Если ОбработчикДрайвераМодуль = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
						ОбработчикДрайвераМодуль = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
					КонецЕсли;
					
					Результат = ОбработчикДрайвераМодуль.ПодключитьУстройство(ОбъектДрайвера, НовоеПодключение.Параметры, 
						НовоеПодключение.ПараметрыПодключения, ВыходныеПараметры);
				КонецЕсли;
				
				Если Результат Тогда
					Если ВыходныеПараметры.Количество() >= 2 Тогда
						НовоеПодключение.Вставить("ИсточникСобытия", ВыходныеПараметры[0]);
						НовоеПодключение.Вставить("ИменаСобытий",    ВыходныеПараметры[1]);
					Иначе
						НовоеПодключение.Вставить("ИсточникСобытия", "");
						НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
					КонецЕсли;
					НовоеПодключение.Вставить("ОбъектДрайвера"          , ОбъектДрайвера);
					НовоеПодключение.Вставить("ОбработчикДрайвераМодуль", ОбработчикДрайвераМодуль);
					глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
				Иначе
					// Сообщим пользователю о том, что не удалось подключить устройство.
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
								   + НСтр("ru='Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Устройство.Наименование);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
				КонецЕсли;
			Иначе // Устройство было подключено ранее.
				// Увеличим количество пользователей данного соединения.
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
			КонецЕсли;
			
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
		
	ИначеЕсли ИдентификаторУстройства <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Выбранное устройство не может использоваться для подключения.
		|Укажите другое устройство.'");
		КонечныйРезультат = Ложь;
	ИначеЕсли ТипыПО = Неопределено И ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Нет доступного оборудования для подключения.'");
		КонечныйРезультат = Ложь;
	КонецЕсли;
	
	Возврат КонечныйРезультат;
	
КонецФункции

// Отключает устройство, определенное идентификатором.
//
Функция ОтключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") 
	
	Возврат ОтключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);
	
КонецФункции

// Функция подключает устройства по типу оборудования.
// 
Функция ОтключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "")
	
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	ВыходноеОписаниеОшибки = "";
	
	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			
			Если КлиентПодключения <> Неопределено  И (ТипыПО = Неопределено Или ТипыПО.Найти(ПодключенноеУстройство.ТипОборудованияИмя) <> Неопределено)
			   И (ИдентификаторУстройства = Неопределено  Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства)Тогда
				 
				 Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					 
					Если ПодключенноеУстройство.ОбъектДрайвера = Неопределено Тогда
						// Сообщить об ошибке, что не удалось загрузить драйвер.
						ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
													|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						КонечныйРезультат = Ложь;
						Продолжить;
					КонецЕсли;
					
					ОбработчикДрайвераМодуль = ПодключенноеУстройство.ОбработчикДрайвераМодуль;
					// Принудительно заменяем асинхронный обработчик на синхронный, так как работам в синхронном режиме.
					Если ОбработчикДрайвераМодуль = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
						ОбработчикДрайвераМодуль = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
					КонецЕсли;
					
					ВыходныеПараметры = Неопределено;
					Результат = ОбработчикДрайвераМодуль.ОтключитьУстройство(ПодключенноеУстройство.ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
					Если НЕ Результат Тогда
						ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
									   + НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
					Иначе
						ПодключенноеУстройство.КоличествоПодключенных = 0;
					КонецЕсли;
					
					НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ПодключенноеУстройство);
					Если НомерСтрокиМассива <> Неопределено Тогда
						глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
					КонецЕсли;
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
			КонецЕсли;
			
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КонечныйРезультат;
	
КонецФункции  

Функция ВыполнитьКоманду(Идентификатор, Команда, ВходныеПараметры, ВыходныеПараметры, Таймаут = -1)
	
	Результат = Ложь;
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	
	Если ПодключенноеУстройство <> Неопределено Тогда
		
		ОбработчикДрайвераМодуль = ПодключенноеУстройство.ОбработчикДрайвераМодуль;
		ОбъектДрайвера = ПодключенноеУстройство.ОбъектДрайвера;
		
		Если ОбъектДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
										|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ВыходныеПараметры = Новый Массив();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОписаниеОшибки);
		Иначе
			Параметры            = ПодключенноеУстройство.Параметры;
			ПараметрыПодключения = ПодключенноеУстройство.ПараметрыПодключения;
			Если ОбработчикДрайвераМодуль = Неопределено Тогда
				ТекстСообщения = НСтр("ru='Не удалось подключить обработчик драйвера.'");
				ВыходныеПараметры = Новый Массив();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ТекстСообщения);
				ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
			Иначе
				// Принудительно заменяем асинхронный обработчик на синхронный, так как работам в синхронном режиме.
				Если ОбработчикДрайвераМодуль = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
					ОбработчикДрайвераМодуль = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
				КонецЕсли;
				// Вызов метода выполнения команды у обработчика.
				Результат = ОбработчикДрайвераМодуль.ВыполнитьКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, 
																ОбъектДрайвера, Параметры, ПараметрыПодключения); 
			КонецЕсли
		КонецЕсли;
	Иначе
		// Сообщить об ошибке, что устройство не подключено.
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = НСтр("ru='Устройство не подключено. Перед выполнением операции устройство должно быть подключено.'");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти  

#Область ПроцедурыИФункцииДляРаботыСПодключаемымОборудованием

// Выполняет дополнительную команду к драйверу, не требующую предварительного подключения устройства в системе.
//
Функция ВыполнитьДополнительнуюКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, Идентификатор, Параметры) Экспорт
	
	Результат = Ложь;
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	
	Если ПодключенноеУстройство = Неопределено Тогда
		
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
		
		времПараметрыПодключения = Новый Структура();
		времПараметрыПодключения.Вставить("ТипОборудования", ДанныеОборудования.ТипОборудованияИмя);
		
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования);
		Если ОбъектДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ТекстСообщения = НСтр("ru='Не удалось загрузить драйвер устройства.
										|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ВыходныеПараметры = Новый Массив();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстСообщения);
			ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
			
		Иначе
			ОбработчикДрайвераМодуль = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ДанныеОборудования.ОбработчикДрайвера, Не ДанныеОборудования.ВСоставеКонфигурации, ДанныеОборудования.ТипОборудованияИмя);
			Если ОбработчикДрайвераМодуль = Неопределено Тогда
				// Сообщить об ошибке, что не удалось загрузить драйвер.
				ТекстСообщения = НСтр("ru='Не удалось подключить обработчик драйвера.'");
				ВыходныеПараметры = Новый Массив();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ТекстСообщения);
				ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
			Иначе
				// Принудительно заменяем асинхронный обработчик на синхронный, так как работам в синхронном режиме.
				Если ОбработчикДрайвераМодуль = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
					ОбработчикДрайвераМодуль = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
				КонецЕсли;
				Результат = ОбработчикДрайвераМодуль.ВыполнитьКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, ОбъектДрайвера, Параметры, времПараметрыПодключения);
				Если Не Результат Тогда
					ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
				КонецЕсли;
			КонецЕсли
		КонецЕсли;
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ТекстСообщения = НСтр("ru='Устройство подключено. Перед выполнением операции устройство должно быть отключено.'");
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет команду обработчика драйвера, не требующую предварительного подключения устройства в системе.
//
Функция ВыполнитьКомандуОбработчикаДрайвера(Команда, ВходныеПараметры, ВыходныеПараметры, Идентификатор, Параметры, ПоддержкаАсинхронногоРежима) Экспорт
	
	Результат = Ложь;
	
	Если Идентификатор <> Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
		ОбработчикДрайвераМодуль = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ДанныеОборудования.ОбработчикДрайвера, Не ДанныеОборудования.ВСоставеКонфигурации, ДанныеОборудования.ТипОборудованияИмя);
		Если ОбработчикДрайвераМодуль <> Неопределено Тогда
			Результат = ОбработчикДрайвераМодуль.ВыполнитьКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, Неопределено, Параметры, Неопределено);
			ПоддержкаАсинхронногоРежима = ОбработчикДрайвераМодуль.ПоддержкаАсинхронногоРежима();
		КонецЕсли;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти  

#Область ПроцедурыИФункцииПодключенияОтключенияОборудованияВФорме

// Начать подключение необходимых типов оборудования при открытии формы.
//
// Параметры:
//	Форма - УправляемаяФорма
//	ПоддерживаемыеТипыПодключаемогоОборудования - Строка
//		Содержит перечень типов подключаемого оборудования, разделенных запятыми.
//
Процедура НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещениеПриПодключении, Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	Форма.ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования;
	
	Если Форма.ИспользоватьПодключаемоеОборудование Тогда
			
	Если ОповещениеПриПодключении = Неопределено Тогда
		ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершениеПоУмолчанию", МенеджерОборудованияКлиент);
	КонецЕсли;
		НачатьПодключениеОборудованиеПоТипу(ОповещениеПриПодключении, Форма.УникальныйИдентификатор,
											ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения по умолчанию
//
Процедура ПодключитьОборудованиеЗавершениеПоУмолчанию(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Начать отключать оборудование по типу при закрытии формы.
//
Процедура НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, Форма) Экспорт
	
	Если ОповещениеПриОтключении = Неопределено Тогда
		ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершениеПоУмолчанию", МенеджерОборудованияКлиент);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоТипу(ОповещениеПриОтключении, Форма.УникальныйИдентификатор, ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	
КонецПроцедуры

Процедура ОтключитьОборудованиеЗавершениеПоУмолчанию(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСДрайвером

// Проверяет установлен ли драйвер.
//
Функция ДрайверУстановлен(Идентификатор) Экспорт
	
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
	ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования);
	
	Возврат ОбъектДрайвера <> Неопределено;
	
КонецФункции

#Если Не ВебКлиент Тогда

// Установить или переустановить драйверы помеченные флагами.
//
Процедура ПереустановитьПомеченныеДрайверы() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	МассивРабочихМест = МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
	Если МассивРабочихМест.Количество() = 0 Тогда
		РабочееМесто = Неопределено
	Иначе
		РабочееМесто = МассивРабочихМест[0];
	КонецЕсли;
	
	// Переустановить драйверы помеченные флагом для переустановки.
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		СписокОборудования = МенеджерОборудованияВызовСервера.ПолучитьСписокДрайверовДляПереустановки(РабочееМесто);
		Для Каждого Оборудование Из СписокОборудования Цикл
			Если Оборудование.ДанныеДрайвера.ВСоставеКонфигурации И НЕ Оборудование.ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
				НачатьУстановкуВнешнейКомпоненты(, "ОбщийМакет." + Оборудование.ДанныеДрайвера.ИмяМакетаДрайвера);
			КонецЕсли;
			МенеджерОборудованияВызовСервера.УстановитьПризнакПереустановкиДрайвера(РабочееМесто, Оборудование.ДрайверОборудования, Ложь); 
		КонецЦикла;
	КонецЕсли;
	
	// Установить драйверы помеченные флагом для установки.
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		СписокОборудования = МенеджерОборудованияВызовСервера.ПолучитьСписокДрайверовДляУстановки(РабочееМесто);
		Для Каждого Оборудование Из СписокОборудования Цикл
			Если Оборудование.ДанныеДрайвера.ВСоставеКонфигурации И НЕ Оборудование.ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Оборудование.ДанныеДрайвера);
				Если ОбъектДрайвера = Неопределено Тогда
					НачатьУстановкуВнешнейКомпоненты(, "ОбщийМакет." + Оборудование.ДанныеДрайвера.ИмяМакетаДрайвера);
				Иначе
					ОтключитьОбъектДрайвера(Оборудование.ДанныеДрайвера);
				КонецЕсли;
			КонецЕсли;
			МенеджерОборудованияВызовСервера.УстановитьПризнакУстановкиДрайвера(РабочееМесто, Оборудование.ДрайверОборудования, Ложь); 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУстановкуДрайвераИзДистрибутиваЗавершение(Результат, Параметры) Экспорт
	
	Если Параметры.Свойство("ВременныйФайл") Тогда
		НачатьУдалениеФайлов(, Параметры.ВременныйФайл);
	КонецЕсли;
	Если Параметры.Свойство("КаталогИнсталляции") Тогда
		НачатьУдалениеФайлов(, Параметры.КаталогИнсталляции);
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Результат = 0);
	КонецЕсли;
	
КонецПроцедуры

// Начать установку драйвера из дистрибутива поставщика из макета.
//
Процедура НачатьУстановкуДрайвераИзДистрибутиваВМакете(ОповещениеПриЗавершении, ИмяМакета, ИмяФайла) Экспорт
	
	Результат = Ложь;
	// Получение макета с сервера
	СсылкаНаФайл = МенеджерОборудованияВызовСервера.ПолучитьМакетССервера(ИмяМакета);
	ИмяФайлаВрем = ?(ПустаяСтрока(ИмяФайла), "setup.exe", ИмяФайла);
	
	// НачатьПолучениеКаталогаВременныхФайлов 
	ВременныйКаталог   = КаталогВременныхФайлов();
	ВременныйФайл      = ВременныйКаталог + "Model.zip";
	КаталогИнсталляции = ВременныйКаталог + "Model\";
	
	// Распаковка архива дистрибутива во временный каталог.
	Результат = ПолучитьФайл(СсылкаНаФайл, ВременныйФайл, Ложь);
	
	ФайлАрхива = Новый ЧтениеZipФайла();
	ФайлАрхива.Открыть(ВременныйФайл);
	
	Если ФайлАрхива.Элементы.Найти(ИмяФайлаВрем) <> Неопределено Тогда
		// Распаковка дистрибутива
		ФайлАрхива.ИзвлечьВсе(КаталогИнсталляции);
		ФайлАрхива.Закрыть();
		// Запуск инсталлятора
		Параметры = Новый Структура("КаталогИнсталляции, ВременныйФайл, ОповещениеПриЗавершении", КаталогИнсталляции, ВременныйФайл, ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуДрайвераИзДистрибутиваЗавершение", ЭтотОбъект, Параметры);
		НачатьЗапускПриложения(Оповещение, КаталогИнсталляции + ИмяФайлаВрем, КаталогИнсталляции, Истина);
	Иначе
		ТекстОшибки = НСтр("ru='Ошибка установки драйвера из дистрибутива в макете.
							|Файл ""%Файл%"" в макете не найден.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Файл%", ИмяФайлаВрем);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
		НачатьУдалениеФайлов(, ВременныйФайл);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУстановкуДрайвераИзДистрибутиваИзБазыЗавершение(Результат, Параметры) Экспорт
	
	НачатьУдалениеФайлов(, Параметры.ВременныйКаталог + "Model\");
	НачатьУдалениеФайлов(, Параметры.ВременныйКаталог + "Model.zip");
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Результат = 0);
	КонецЕсли;
	
КонецПроцедуры

// Начать установку драйвера из дистрибутива поставщика из базы.
//
Процедура НачатьУстановкуДрайвераИзДистрибутиваИзБазы(ОповещениеПриЗавершении, ДанныеДрайвера) Экспорт
	
	Результат = Ложь;
	
	ВременныйКаталог   = КаталогВременныхФайлов();
	ИмяФайлаВрем       = ВременныйКаталог + ДанныеДрайвера.ИмяФайлаДрайвера;
	КаталогИнсталляции = ВременныйКаталог + "Model\";
	
	ПолучитьФайл(ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер"), ИмяФайлаВрем, Ложь);
	ВременныйФайл = Новый Файл(ИмяФайлаВрем);
	
	Если ВРег(ВременныйФайл.Расширение) = ".ZIP" Тогда
		// Распаковка дистрибутива
		ФайлАрхива = Новый ЧтениеZipФайла();
		ФайлАрхива.Открыть(ВременныйФайл.ПолноеИмя);
		
		ИмяФайлаУстанавливаемый = "";
		Если ФайлАрхива.Элементы.Найти(ВременныйФайл.ИмяБезРасширения  + ".EXE") <> Неопределено Тогда
			ИмяФайлаУстанавливаемый = ВременныйФайл.ИмяБезРасширения  + ".EXE";
		ИначеЕсли ФайлАрхива.Элементы.Найти("setup.exe") <> Неопределено Тогда
			ИмяФайлаУстанавливаемый = "setup.exe";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИмяФайлаУстанавливаемый) Тогда
			// Распаковка дистрибутива
			ФайлАрхива.ИзвлечьВсе(КаталогИнсталляции);
			ФайлАрхива.Закрыть();
			// Запуск инсталлятора
			Параметры = Новый Структура("КаталогИнсталляции, ВременныйФайл, ОповещениеПриЗавершении", КаталогИнсталляции, ИмяФайлаВрем, ОповещениеПриЗавершении);
			Оповещение = Новый ОписаниеОповещения("НачатьУстановкуДрайвераИзДистрибутиваЗавершение", ЭтотОбъект, Параметры);
			НачатьЗапускПриложения(Оповещение, КаталогИнсталляции + ИмяФайлаУстанавливаемый, КаталогИнсталляции, Истина);
		Иначе
			ФайлАрхива.Закрыть();
			ТекстОшибки = НСтр("ru='Ошибка установки драйвера из дистрибутива в архиве.
						|Необходимый файл в архиве не найден.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
			НачатьУдалениеФайлов(, ИмяФайлаВрем);
		КонецЕсли;
	Иначе
		// Запуск инсталлятора
		Параметры = Новый Структура("ВременныйФайл, ОповещениеПриЗавершении", ИмяФайлаВрем, ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуДрайвераИзДистрибутиваЗавершение", ЭтотОбъект, Параметры);
		НачатьЗапускПриложения(Оповещение, ВременныйКаталог + ИмяФайлаВрем, ВременныйКаталог, Истина);
	КонецЕсли;
	
КонецПроцедуры

#Иначе

Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено И ДополнительныеПараметры.ПредлагатьУстановку Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru='Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Подключено);
	КонецЕсли
	
КонецПроцедуры

#КонецЕсли

// Проверить доступность расширения работы с Файлами.
// 
Процедура ПроверитьДоступностьРасширенияРаботыСФайлами(ОповещениеПриЗавершении, ПредлагатьУстановку = Истина) Экспорт
	
#Если Не ВебКлиент Тогда
	// В тонком и толстом клиентах расширение подключено всегда.
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
	Возврат;
#Иначе
	ДополнительныеПараметры = Новый Структура("ОповещениеПриЗавершении, ПредлагатьУстановку", ОповещениеПриЗавершении, ПредлагатьУстановку);
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
#КонецЕсли
	
КонецПроцедуры

// Отключение объекта драйвера.
//
Процедура ОтключитьОбъектДрайвера(ДанныеДрайвера) Экспорт

	НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ДанныеДрайвера.ДрайверОборудования);
	Если НомерСтрокиМассива <> Неопределено Тогда
		глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
	КонецЕсли;
	
КонецПроцедуры

// Получение объекта драйвера
//
Функция ПолучитьОбъектДрайвера(ДанныеДрайвера, ТекстОшибки = Неопределено)
	
	ОбъектДрайвера = Неопределено;
	
	Для Каждого ДрайверПО Из глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования Цикл
		Если ДрайверПО.Ключ = ДанныеДрайвера.ДрайверОборудования  Тогда
			ОбъектДрайвера = ДрайверПО.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;   
	
	Если ОбъектДрайвера = Неопределено Тогда
		Попытка
			
			ProgID = ДанныеДрайвера.ИдентификаторОбъекта;
			Если ПустаяСтрока(ProgID) Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
			Иначе
				ProgID1 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, 1, Найти(ProgID, "|")-1), ProgID); 
				ProgID2 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, Найти(ProgID, "|")+1), ProgID); 
				Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
					ПодключитьВнешнююКомпоненту(ProgID1);
				Иначе
					ИмяОбъекта = Сред(ProgID1, Найти(ProgID1, ".") + 1); 
					Префикс = Сред(ProgID1, 1, Найти(ProgID1, ".")); 
					ProgID2 = Префикс + СтрЗаменить(ИмяОбъекта, ".", "_") + "." + ИмяОбъекта;
					Если ДанныеДрайвера.ВСоставеКонфигурации Тогда
						Результат = ПодключитьВнешнююКомпоненту("ОбщийМакет." + ДанныеДрайвера.ИмяМакетаДрайвера, СтрЗаменить(ИмяОбъекта, ".", "_"));
					Иначе
						СсылкаНаДрайвер = ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер");
						Результат = ПодключитьВнешнююКомпоненту(СсылкаНаДрайвер, СтрЗаменить(ИмяОбъекта, ".", "_"));
					КонецЕсли;
				КонецЕсли;
				ОбъектДрайвера = Новый (ProgID2);
			КонецЕсли;
				
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстОшибки = Инфо.Описание;
		КонецПопытки;
		
		Если ОбъектДрайвера <> Неопределено Тогда
			глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ДанныеДрайвера.ДрайверОборудования, ОбъектДрайвера);
			ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДанныеДрайвера.ДрайверОборудования];
		КонецЕсли;
		
	КонецЕсли;   
		
	Возврат ОбъектДрайвера;
	
КонецФункции

Процедура НачатьПолучениеОбъектаДрайвераЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	ОбъектДрайвера = Неопределено;
	
	Если Подключено Тогда 
		Попытка
			ОбъектДрайвера = Новый (ДополнительныеПараметры.ProgID);
			Если ОбъектДрайвера <> Неопределено Тогда
				глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ДополнительныеПараметры.ДрайверОборудования, ОбъектДрайвера);
				ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДополнительныеПараметры.ДрайверОборудования];
			КонецЕсли;
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, ОбъектДрайвера);
			Возврат;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Неопределено);
	
КонецПроцедуры

// Начать получение объекта драйвера.
//
Процедура НачатьПолучениеОбъектаДрайвера(ОповещениеПриЗавершении, ДанныеДрайвера) Экспорт
	
	ОбъектДрайвера = Неопределено;
	
	Для Каждого ДрайверПО Из глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования Цикл
		Если ДрайверПО.Ключ = ДанныеДрайвера.ДрайверОборудования  Тогда
			ОбъектДрайвера = ДрайверПО.Значение;
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ОбъектДрайвера);
			Возврат;
		КонецЕсли;
	КонецЦикла;   
	
	Если ОбъектДрайвера = Неопределено Тогда
			ProgID = ДанныеДрайвера.ИдентификаторОбъекта;
			Если ПустаяСтрока(ProgID) Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ОбъектДрайвера);
			Иначе
				ProgID1 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, 1, Найти(ProgID, "|")-1), ProgID); 
				ProgID2 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, Найти(ProgID, "|")+1), ProgID); 
				
				Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
					Параметры = Новый Структура("ProgID, ОповещениеПриЗавершении, ДрайверОборудования", ProgID2, ОповещениеПриЗавершении, ДанныеДрайвера.ДрайверОборудования);
					Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, Параметры);
					НачатьПодключениеВнешнейКомпоненты(Оповещение, ProgID1);
				Иначе
					ИмяОбъекта = Сред(ProgID1, Найти(ProgID1, ".") + 1); 
					Префикс = Сред(ProgID1, 1, Найти(ProgID1, ".")); 
					ProgID2 = Префикс + СтрЗаменить(ИмяОбъекта, ".", "_") + "." + ИмяОбъекта;
					
					Параметры = Новый Структура("ProgID, ОповещениеПриЗавершении, ДрайверОборудования", ProgID2, ОповещениеПриЗавершении, ДанныеДрайвера.ДрайверОборудования);
					Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, Параметры);
					Если ДанныеДрайвера.ВСоставеКонфигурации Тогда
						НачатьПодключениеВнешнейКомпоненты(Оповещение, "ОбщийМакет." + ДанныеДрайвера.ИмяМакетаДрайвера, СтрЗаменить(ИмяОбъекта, ".", "_"));
					Иначе
						СсылкаНаДрайвер = ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер");
						НачатьПодключениеВнешнейКомпоненты(Оповещение, СсылкаНаДрайвер, СтрЗаменить(ИмяОбъекта, ".", "_"));
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
	КонецЕсли;   
	
КонецПроцедуры

// Установить драйвер оборудования.
//
Процедура УстановитьДрайвер(Идентификатор, ОповещениеИзДистрибутиваПриЗавершении = Неопределено, ОповещениеИзАрхиваПриЗавершении = Неопределено) Экспорт
	
	ДанныеДрайвера = МенеджерОборудованияВызовСервера.ПолучитьДанныеДрайвера(Идентификатор);
	
	Попытка  
		Если ДанныеДрайвера.ВСоставеКонфигурации Тогда
			
			Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
			#Если ВебКлиент Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не поддерживает работу в веб-клиенте.'")); 
			#Иначе
				Если МенеджерОборудованияКлиентПовтИсп.ЭтоLinuxКлиент() Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не может быть установлен и использован в среде Linux.'")); 
					Возврат;
				КонецЕсли;
				НачатьУстановкуДрайвераИзДистрибутиваВМакете(ОповещениеИзДистрибутиваПриЗавершении, ДанныеДрайвера.ИмяМакетаДрайвера, ДанныеДрайвера.ИмяФайлаДрайвера);
			#КонецЕсли
			Иначе
				НачатьУстановкуВнешнейКомпоненты(ОповещениеИзАрхиваПриЗавершении, "ОбщийМакет." + ДанныеДрайвера.ИмяМакетаДрайвера);
			КонецЕсли;
			
		Иначе
			
			Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
			#Если ВебКлиент Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не поддерживает работу в веб-клиенте.'")); 
			#Иначе
				Если МенеджерОборудованияКлиентПовтИсп.ЭтоLinuxКлиент() Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не может быть установлен и использован в среде Linux.'")); 
					Возврат;
				КонецЕсли;
				НачатьУстановкуДрайвераИзДистрибутиваИзБазы(ОповещениеИзДистрибутиваПриЗавершении, ДанныеДрайвера);
			#КонецЕсли
			Иначе
				СсылкаНаДрайвер = ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер");
				НачатьУстановкуВнешнейКомпоненты(ОповещениеИзАрхиваПриЗавершении, СсылкаНаДрайвер);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Произошла ошибка при установке драйвера.'")); 
	КонецПопытки;  
		
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСПодключаемымОборудованием

// Начать выполнение команды ответственному обработчику драйвера
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Идентификатор, Команда, ВходныеПараметры)
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	
	Если ПодключенноеУстройство <> Неопределено Тогда
		
		ОбработчикДрайвераМодуль = ПодключенноеУстройство.ОбработчикДрайвераМодуль;
		ОбъектДрайвера = ПодключенноеУстройство.ОбъектДрайвера;
		
		Если ОбработчикДрайвераМодуль = Неопределено Или ОбъектДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ТекстОшибки = НСтр("ru='Не удалось подключить обработчик драйвера или загрузить драйвер.'");
			РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ТекстОшибки; 
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			Если ОбработчикДрайвераМодуль.ПоддержкаАсинхронногоРежима() Тогда
				ОбработчикДрайвераМодуль.НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры,
					 ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
			Иначе
				ТекстОшибки = "";
				ВыходныеПараметры = Неопределено;
				Результат = ОбработчикДрайвераМодуль.ВыполнитьКоманду(Команда, ВходныеПараметры,
					ВыходныеПараметры,  ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
				Если Не Результат Тогда
					Если ВыходныеПараметры.Количество() >= 2 Тогда
						ТекстОшибки = ВыходныеПараметры[1];
					КонецЕсли;
					ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
				КонецЕсли;
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ВыходныеПараметры", Результат, ТекстОшибки, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Сообщить об ошибке, что устройство не подключено.
		ТекстОшибки = НСтр("ru='Устройство не подключено. Перед выполнением операции устройство должно быть подключено.'");
		РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании();
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ТекстОшибки; 
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Начать выполнение дополнительной команды к драйверу, не требующую предварительного подключения устройства в системе.
//
Процедура НачатьВыполнениеДополнительнойКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры, Идентификатор, Параметры) Экспорт
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	                                                       
	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Команда"           , Команда);
		ПараметрыКоманды.Вставить("ВходныеПараметры"  , ВходныеПараметры);
		ПараметрыКоманды.Вставить("Параметры"         , Параметры);
		ПараметрыКоманды.Вставить("ДанныеОборудования", ДанныеОборудования);
		ПараметрыКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеДополнительнойКоманды_Завершение", ЭтотОбъект, ПараметрыКоманды);
		НачатьПолучениеОбъектаДрайвера(Оповещение, ДанныеОборудования);
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ТекстОшибки = НСтр("ru='Устройство подключено. Перед выполнением операции устройство должно быть отключено.'");
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
		РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстОшибки, Идентификатор); 
		РезультатВыполнения.ВыходныеПараметры = ВыходныеПараметры;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Завершение выполнение дополнительной команды к драйверу.
// Не требует предварительного подключения устройства в системе.
//
Процедура НачатьВыполнениеДополнительнойКоманды_Завершение(ОбъектДрайвера, ПараметрыКоманды) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		// Сообщить об ошибке, что не удалось загрузить драйвер.
		ТекстОшибки = НСтр("ru='Не удалось загрузить драйвер устройства.
								|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
		ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
		РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстОшибки); 
		РезультатВыполнения.ВыходныеПараметры = ВыходныеПараметры;
		ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		
		ДанныеОборудования = ПараметрыКоманды.ДанныеОборудования; 
		ОбработчикДрайвераМодуль = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ДанныеОборудования.ОбработчикДрайвера, Не ДанныеОборудования.ВСоставеКонфигурации, ДанныеОборудования.ТипОборудованияИмя);
		
		Если ОбработчикДрайвераМодуль = Неопределено Тогда
			// Сообщить об ошибке, что не удалось подключить обработчик драйвера.
			ТекстОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.'");
			ВыходныеПараметры = Новый Массив();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстОшибки);
			ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
			РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстОшибки); 
			РезультатВыполнения.ВыходныеПараметры = ВыходныеПараметры;
			ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			времПараметрыПодключения = Новый Структура();
			времПараметрыПодключения.Вставить("ТипОборудования", ПараметрыКоманды.ДанныеОборудования.ТипОборудованияИмя);
			
			Если ОбработчикДрайвераМодуль.ПоддержкаАсинхронногоРежима() Тогда
				ОбработчикДрайвераМодуль.НачатьВыполнениеКоманды(ПараметрыКоманды.ОповещениеПриЗавершении, ПараметрыКоманды.Команда, ПараметрыКоманды.ВходныеПараметры,
					ОбъектДрайвера, ПараметрыКоманды.Параметры, времПараметрыПодключения);
			Иначе
				ТекстОшибки = "";
				ВыходныеПараметры = Неопределено;
				Результат = ОбработчикДрайвераМодуль.ВыполнитьКоманду(ПараметрыКоманды.Команда, ПараметрыКоманды.ВходныеПараметры,
					ВыходныеПараметры, ОбъектДрайвера, ПараметрыКоманды.Параметры, времПараметрыПодключения);
				Если Не Результат Тогда
					Если ВыходныеПараметры.Количество() >= 2 Тогда
						ТекстОшибки = ВыходныеПараметры[1];
					КонецЕсли;
					ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
				КонецЕсли;
				РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Результат); 
				РезультатВыполнения.ВыходныеПараметры = ВыходныеПараметры;
				ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСУстройствамиВвода

// Производит получение события от устройства.
//
Функция ПолучитьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт
	
	Результат = Неопределено;
	
	// Поиск обработчика события
	Для Каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
						  
		Если Подключение.ИсточникСобытия = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИсточникСобытия) И Подключение.ИменаСобытий <> Неопределено) Тогда
		   
		   // Ищем среди подключенного оборудования устройство с полученным событием.
		    Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
		    Если Событие <> Неопределено Тогда
		    	
		    	Если Подключение.ОбъектДрайвера = Неопределено Тогда
		    		// Сообщить об ошибке, что не удалось загрузить драйвер.
		    		ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
		    									|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
		    		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Подключение.Наименование);
		    		Продолжить;
		    	КонецЕсли;
		    	
		    	ВходныеПараметры  = Новый Массив();
		    	ВходныеПараметры.Добавить(ОписаниеСобытия.Событие);
		    	ВходныеПараметры.Добавить(ОписаниеСобытия.Данные);
		    	ВыходныеПараметры = Неопределено;
		    	
		    	// Обрабатываем сообщение
		    	РезультатОбработки = ВыполнитьКоманду(Подключение.Ссылка, "ОбработатьСобытие", ВходныеПараметры, ВыходныеПараметры);
		    	Если РезультатОбработки Тогда
		    		// Оповещаем 
		    		Результат = Новый Структура();
		    		Результат.Вставить("ИмяСобытия", ВыходныеПараметры[0]);
		    		Результат.Вставить("Параметр",   ВыходныеПараметры[1]);
		    		Результат.Вставить("Источник",   "ПодключаемоеОборудование");
		    	КонецЕсли;
		    	
		    	// Оповещаем драйвер о завершении обработки события.
		    	ВходныеПараметры.Очистить();
		    	ВходныеПараметры.Добавить(РезультатОбработки);
		    	ВыполнитьКоманду(Подключение.Ссылка, "ЗавершитьОбработкуСобытия", ВходныеПараметры, ВыходныеПараметры);
		    КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Производит обработку данных события, полученных от клиента.
//
Функция ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт

	Результат = Истина;
	
	// Поиск обработчика события
	Для Каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
						  
		Если Подключение.ИсточникСобытия = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИсточникСобытия) И Подключение.ИменаСобытий <> Неопределено) Тогда
		   
		   // Ищем среди подключенного оборудования устройство с полученным событием.
		    Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
		    Если Событие <> Неопределено Тогда
				
				ОбработчикДрайвераМодуль = Подключение.ОбработчикДрайвераМодуль;
				ОбъектДрайвера = Подключение.ОбъектДрайвера;
				
				ВыходныеПараметры = Новый Массив();
				
				// Обрабатываем сообщение
				Результат = ОбработчикДрайвераМодуль.ОбработатьСобытие(ОбъектДрайвера, Подключение.Параметры, Подключение.ПараметрыПодключения, ОписаниеСобытия.Событие, ОписаниеСобытия.Данные, ВыходныеПараметры);
				// Обрабатываем сообщение
				Если Результат Тогда
					// Оповещаем 
					Оповестить(ВыходныеПараметры[0], ВыходныеПараметры[1], "ПодключаемоеОборудование");
				КонецЕсли;
				ОбработчикДрайвераМодуль.ЗавершитьОбработкуСобытия(ОбъектДрайвера, Подключение.Параметры, Подключение.ПараметрыПодключения, ВыходныеПараметры);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСФискальнымиУстройствами

Процедура НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Фискальное устройство не выбрано или не подключено.'");
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	Иначе
		Если Параметры.ВыполняемаяКоманда = "GetDataKKT" И 
				(Параметры.Свойство("ИспользоватьСохраненныеЗначения") И Параметры.ИспользоватьСохраненныеЗначения) Тогда
			ПараметрыРегистрации = МенеджерОборудованияВызовСервера.ПолучитьПараметрыРегистрацииУстройства(ИдентификаторУстройства);
			Если ПараметрыРегистрации.ЕстьДанные Тогда
				РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Истина);
				РезультатВыполнения.Вставить("ВыходныеПараметры", ПараметрыРегистрации);
				ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатВыполнения);
				Возврат;
			КонецЕсли
		КонецЕсли;
		
		Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
		
		ТребуетсяПроверкаАктивностиСмены = Параметры.ВыполняемаяКоманда = "CheckFiscalization" Или Параметры.ВыполняемаяКоманда = "PrintReceiptCorrection";
			
		Если ТребуетсяПроверкаАктивностиСмены И НЕ КассовыеСменыВызовСервера.ПоследняяСменаАктивна(ИдентификаторУстройства) Тогда
			ОписаниеОшибки = НСтр("ru='Кассовая смена не открыта или истекла.'");
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
			Возврат;
		КонецЕсли;
		
		Если Параметры.ВыполняемаяКоманда = "OpenShift"
			И КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ИдентификаторУстройства) = Неопределено
			И МенеджерОборудованияВызовСервера.ПолучитьТипПодключаемогоОборудования(ИдентификаторУстройства) = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПослеПроверкиСтатуса", ЭтотОбъект, Параметры);
			МенеджерОборудованияКлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОповещениеПриЗавершении, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
			Возврат;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПодключениеЗавершение", ЭтотОбъект, Параметры);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеКоманды_ПослеПроверкиСтатуса(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		
		СтатусСмены = Результат.ВыходныеПараметры[2];
		Если МенеджерОборудованияКлиентСервер.ТребуетсяЗакрытиеСмены(СтатусСмены) Тогда
			ТекстВопроса = НСтр("ru = 'На фискальном устройсте открыта кассовая смена, данные о которой отсутствуют в системе
										|Выполнить закрытие смены?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПослеПодтвержденияЗакрытияСмены", ЭтотОбъект, Параметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПодключениеЗавершение", ЭтотОбъект, Параметры);
			НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		КонецЕсли;
		
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПодключениеЗавершение", ЭтотОбъект, Параметры);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыполнениеКоманды_ПослеПодтвержденияЗакрытияСмены(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НоваяКассоваяСмена = КассовыеСменыВызовСервера.НоваяКассоваяСмена(Параметры.ИдентификаторУстройства);
		ОповещениеВыполнения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПослеЗакрытияСмены", ЭтотОбъект, Параметры);
		МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеВыполнения, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства,, НоваяКассоваяСмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыполнениеКоманды_ПослеЗакрытияСмены(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПодключениеЗавершение", ЭтотОбъект, Параметры);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеКоманды_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		ВходныеПараметры  = Неопределено;
		ВыполняемаяКоманда = Параметры.ВыполняемаяКоманда;
		Если (ВыполняемаяКоманда = "CheckFiscalization") И (Параметры.ОповещениеПослеОткрытииЧека <> Неопределено) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			НачатьВыполнениеКомандыПечатиЧека(ОписаниеОповещения, Параметры.ИдентификаторУстройства, ВыполняемаяКоманда, Параметры, Параметры.ВходныеПараметры);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, ВыполняемаяКоманда, Параметры.ВходныеПараметры);
		КонецЕсли;
	Иначе
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='При подключении оборудования произошла ошибка: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатПодключения.ОписаниеОшибки);
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
			РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеКоманды_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Ошибок нет.'");
		Если МенеджерОборудованияКлиентСервер.ТребуетсяВызовСобытияПослеВыполненияКомандыФискальнымУстройством(Параметры) Тогда
			СтруктураПараметров = Новый Структура();
			Если (РезультатВыполнения.ВыходныеПараметры.Количество() > 4) И РезультатВыполнения.ВыходныеПараметры[4] <> Неопределено Тогда
				СтруктураПараметров.Вставить("ФискальныеДанныеСтруктура", РезультатВыполнения.ВыходныеПараметры[4]);
			КонецЕсли;
			Если (РезультатВыполнения.ВыходныеПараметры.Количество() > 5) И РезультатВыполнения.ВыходныеПараметры[5] <> Неопределено Тогда
				СтруктураПараметров.Вставить("ФискальныеДанныеXMLСтрока", РезультатВыполнения.ВыходныеПараметры[5]);
			КонецЕсли;
			СтруктураПараметров.Вставить("ИдентификаторУстройства", Параметры.ИдентификаторУстройства);
			Если Параметры.Свойство("КассоваяСмена") Тогда
				СтруктураПараметров.Вставить("КассоваяСмена", Параметры.КассоваяСмена);
			КонецЕсли;
			СтруктураПараметров.Вставить("ВыполняемаяКоманда", Параметры.ВыполняемаяКоманда);
			Если Параметры.Свойство("ДополнительныеПараметры") Тогда
				СтруктураПараметров.Вставить("ДополнительныеПараметры", Параметры.ДополнительныеПараметры);
			КонецЕсли;
			КассовыеСменыВызовСервера.ПослеВыполненияКомандыФискальнымУстройством(СтруктураПараметров);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='При выполнении операции произошла ошибка: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		РезультатОперации.Вставить("ВыходныеПараметры", РезультатВыполнения.ВыходныеПараметры);
		Если Параметры.Свойство("ВходныеПараметры")
			И Параметры.ВходныеПараметры <> Неопределено Тогда
			Попытка
				РезультатОперации.Вставить("ДополнительныеПараметры", Параметры.ВходныеПараметры[3]);
			Исключение
				СтрокаОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать формирование отчета о текущем состоянии расчетов на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьФормированиеОтчетаОТекущемСостоянииРасчетов(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ТипОборудования = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"        , Неопределено);
	Контекст.Вставить("ВыполняемаяКоманда"      , "ReportCurrentStatusOfSettlements");
	
	Если ТипОборудования = Неопределено Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
		ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		ПоддерживаемыеТипыВО.Добавить("ККТ");
	Иначе
		ПоддерживаемыеТипыВО = ТипОборудования;
	КонецЕсли;
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство'"),
			НСтр("ru='Фискальное устройство не подключено.'"), 
			НСтр("ru='Фискальное устройство не выбрано.'"),
			Истина);
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Начать открытие смены на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ТипОборудования = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	///МенеджерОборудованияВызовСервера.ПолучитьПараметрыРегистрацииУстройства(УникальныйИдентификатор);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"        , Неопределено);
	Контекст.Вставить("ВыполняемаяКоманда"      , "OpenShift");
	Контекст.Вставить("ДополнительныеПараметры" , ДополнительныеПараметры);
	
	Если ТипОборудования = Неопределено Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
		ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		ПоддерживаемыеТипыВО.Добавить("ККТ");
	Иначе
		ПоддерживаемыеТипыВО = ТипОборудования;
	КонецЕсли;
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство'"), 
			НСтр("ru='Фискальное устройство не подключено.'"), 
			НСтр("ru='Фискальное устройство не выбрано.'"), 
			Истина);
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Начать закрытие смены на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ТипОборудования = Неопределено, КассоваяСмена = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"        , Неопределено);
	Контекст.Вставить("ВыполняемаяКоманда"      , "CloseShift");
	
	Если ТипОборудования = Неопределено Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
		ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		ПоддерживаемыеТипыВО.Добавить("ККТ");
	Иначе
		ПоддерживаемыеТипыВО = ТипОборудования;
	КонецЕсли;
	
	Если КассоваяСмена = Неопределено Тогда
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыКассовойСмены.Открыта"));
		Если НЕ ИдентификаторУстройства = Неопределено Тогда
			СтруктураОтбора.Вставить("ФискальноеУстройство", ИдентификаторУстройства);
		КонецЕсли;
		
		СтруктураРезультата = Новый Структура();
		СтруктураРезультата.Вставить("КассоваяСмена", "Ссылка");
		СтруктураРезультата.Вставить("ИдентификаторУстройства", "ФискальноеУстройство");
		
		ПараметрыВыбора = Новый Структура();
		ПараметрыВыбора.Вставить("СтруктураПараметрыОтбора", СтруктураОтбора);
		ПараметрыВыбора.Вставить("СтруктураРезультата", СтруктураРезультата);
		ПараметрыВыбора.Вставить("Заголовок", НСтр("ru = 'Выберите кассовую смену для закрытия'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьСменуЗавершение", ЭтотОбъект, Контекст);
		
		ОткрытьФорму("Документ.КассоваяСмена.ФормаВыбора", ПараметрыВыбора,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		Контекст.Вставить("КассоваяСмена", КассоваяСмена);
		СтруктураПараметровСмены = Новый Структура();
		СтруктураПараметровСмены.Вставить("КассоваяСмена", КассоваяСмена);
		СтруктураПараметровСмены.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
		НачатьВыполнениеКоманды_ВыбратьСменуЗавершение(СтруктураПараметровСмены, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Производить инкассацию на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства = Неопределено, ТипОборудования = Неопределено) Экспорт
	 
	ВходныеПараметры = Новый Массив();
	ВходныеПараметры.Добавить(?(ПараметрыОперации.Свойство("ТипИнкассации"), ПараметрыОперации.ТипИнкассации, 0));
	ВходныеПараметры.Добавить(?(ПараметрыОперации.Свойство("Сумма"), ПараметрыОперации.Сумма, 0));
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"        , ВходныеПараметры);
	Контекст.Вставить("ВыполняемаяКоманда"      , "Encash");
	
	Если ТипОборудования = Неопределено Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
		ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		ПоддерживаемыеТипыВО.Добавить("ККТ");
	Иначе
		ПоддерживаемыеТипыВО = ТипОборудования;
	КонецЕсли;
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство'"), 
			НСтр("ru='Фискальное устройство не подключено.'"), 
			НСтр("ru='Фискальное устройство не выбрано.'"),
			Истина);
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает ширину строки в символах.
//  
Процедура НачатьПолучениеШириныСтрокиПечатающегоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ТипОборудования = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"        , Неопределено);
	Контекст.Вставить("ВыполняемаяКоманда"      , "GetLineLength");
	
	Если ТипОборудования = Неопределено Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
		ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		ПоддерживаемыеТипыВО.Добавить("ККТ");
	Иначе
		ПоддерживаемыеТипыВО = ТипОборудования;
	КонецЕсли;
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство'"), 
			НСтр("ru='Фискальное устройство не подключено.'"), 
			НСтр("ru='Фискальное устройство не выбрано.'"),
			Истина);
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Производить печать чека на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьФискализациюЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства = Неопределено,
	ТипОборудования = Неопределено, ОповещениеПослеОткрытииЧека = Неопределено, ОповещениеПриОшибкеПечатиЧека = Неопределено) Экспорт
	
	ВходныеПараметры = Новый Массив();
	ВходныеПараметры.Добавить(ПараметрыОперации);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении"    , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор"    , УникальныйИдентификатор);
	Контекст.Вставить("УникальныйИдентификатор"    , УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"           , ВходныеПараметры);
	Контекст.Вставить("ВыполняемаяКоманда"         , "CheckFiscalization");
	Контекст.Вставить("ОповещениеПослеОткрытииЧека", ОповещениеПослеОткрытииЧека);
	Контекст.Вставить("ОповещениеПриОшибке"        , ОповещениеПриОшибкеПечатиЧека); 
	
	Если ИдентификаторУстройства = Неопределено Тогда
		
		Если ТипОборудования = Неопределено Тогда
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
			ПоддерживаемыеТипыВО.Добавить("ККТ");
		Иначе
			ПоддерживаемыеТипыВО = ТипОборудования;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство'"),
			НСтр("ru='Фискальное устройство не подключено.'"), 
			НСтр("ru='Фискальное устройство не выбрано.'"),
			Истина);
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Производить печать текста на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, Текст, ИдентификаторУстройства = Неопределено, ТипОборудования = Неопределено) Экспорт
	
	ВходныеПараметры = Новый Массив();
	ВходныеПараметры.Добавить(Текст);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"        , ВходныеПараметры);
	Контекст.Вставить("ВыполняемаяКоманда"      , "PrintText");
	
	Если ИдентификаторУстройства = Неопределено Тогда
		
		Если ТипОборудования = Неопределено Тогда
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
			ПоддерживаемыеТипыВО.Добавить("ККТ");
		Иначе
			ПоддерживаемыеТипыВО = ТипОборудования;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите печатающее устройство'"), 
			НСтр("ru='Печатающее устройство не подключено.'"), 
			НСтр("ru='Печатающее устройство не выбрано.'"), 
			Истина);
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Производить формирование чека коррекции на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыЧека, ИдентификаторУстройства = Неопределено, ТипОборудования = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"        , ПараметрыЧека);
	Контекст.Вставить("ВыполняемаяКоманда"      , "PrintReceiptCorrection");
	
	Если ИдентификаторУстройства = Неопределено Тогда
		
		Если ТипОборудования = Неопределено Тогда
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ККТ");
		Иначе
			ПоддерживаемыеТипыВО = ТипОборудования;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство'"),
			НСтр("ru='Фискальное устройство не подключено.'"), 
			НСтр("ru='Фискальное устройство не выбрано.'"),
			Истина);
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет открытие денежного ящика.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ТипОборудования         - тип оборудования.
//
Процедура НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ТипОборудования = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"        , Неопределено);
	Контекст.Вставить("ВыполняемаяКоманда"      , "OpenCashDrawer");
	
	Если ИдентификаторУстройства = Неопределено Тогда
		
		Если ТипОборудования = Неопределено Тогда
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
			ПоддерживаемыеТипыВО.Добавить("ККТ");
		Иначе
			ПоддерживаемыеТипыВО = ТипОборудования;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство'"), 
			НСтр("ru='Фискальное устройство не подключено.'"), 
			НСтр("ru='Фискальное устройство не выбрано.'"),
			Истина);
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Производить аннулирование чека на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьАннулированиеЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства = Неопределено, ТипОборудования = Неопределено) Экспорт
	
	ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ПараметрыОперации.ТипРасчета);
	ТипЧека =  ?(ТипРасчета = 1, Ложь, Истина);

	ВходныеПараметры = Новый Массив();
	ВходныеПараметры.Добавить(ТипЧека);
	ВходныеПараметры.Добавить(ПараметрыОперации.Фискальный);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"        , ВходныеПараметры);
	Контекст.Вставить("ВыполняемаяКоманда"      , "AnnulCheck");
	
	Если ИдентификаторУстройства = Неопределено Тогда
		
		Если ТипОборудования = Неопределено Тогда
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
			ПоддерживаемыеТипыВО.Добавить("ККТ");
		Иначе
			ПоддерживаемыеТипыВО = ТипОборудования;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство'"),
			НСтр("ru='Фискальное устройство не подключено.'"), 
			НСтр("ru='Фискальное устройство не выбрано.'"),
			Истина);
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Производить получение параметров фискального устройства.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
//
Процедура НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ИспользоватьСохраненныеЗначения = Истина) Экспорт
	
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("ИспользоватьСохраненныеЗначения", ИспользоватьСохраненныеЗначения);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"        , ВходныеПараметры);
	Контекст.Вставить("ВыполняемаяКоманда"      , "GetDataKKT");
	Контекст.Вставить("ИспользоватьСохраненныеЗначения", ИспользоватьСохраненныеЗначения); 
	
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("ККТ");
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство'"), 
			НСтр("ru='Фискальное устройство не подключено.'"), 
			НСтр("ru='Фискальное устройство не выбрано.'"),
			Истина);
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Получение текущего состояния фискального устройства.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
//
Процедура НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ТипОборудования = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"        , Неопределено);
	Контекст.Вставить("ВыполняемаяКоманда"      , "GetCurrentStatus");
	
	Если ТипОборудования = Неопределено Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
		ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		ПоддерживаемыеТипыВО.Добавить("ККТ");
	Иначе
		ПоддерживаемыеТипыВО = ТипОборудования;
	КонецЕсли;
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство'"), 
			НСтр("ru='Фискальное устройство не подключено.'"), 
			НСтр("ru='Фискальное устройство не выбрано.'"),
			Истина);
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОперациюФНДляФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства = Неопределено, ТипОборудования = Неопределено) Экспорт
	
	ВходныеПараметры = Новый Массив();
	ВходныеПараметры.Добавить(ПараметрыОперации);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"        , ВходныеПараметры);
	Контекст.Вставить("ВыполняемаяКоманда"      , "OperationFN");
	
	Если ТипОборудования = Неопределено Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
		ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		ПоддерживаемыеТипыВО.Добавить("ККТ");
	Иначе
		ПоддерживаемыеТипыВО = ТипОборудования;
	КонецЕсли;
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство'"), 
			НСтр("ru='Фискальное устройство не подключено.'"), 
			НСтр("ru='Фискальное устройство не выбрано.'"),
			Истина);
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
КонецПроцедуры

// Функция формирует текст нефискального чека по шаблону.
//
Функция СформироватьТексНефискальногоЧека(ШиринаСтроки, ТипДокумента, ВходныеПараметры, ДополнительныйТекст = Неопределено) Экспорт
	
	ОбщиеПараметры = Новый Структура("ТипЧека");
	ПозицииЧека    = Неопределено;
	ТаблицаОплат   = Неопределено;

	Если ВходныеПараметры <> Неопределено Тогда
		ОбщиеПараметры = ВходныеПараметры[0];
		ПозицииЧека  = ?(ОбщиеПараметры.Свойство("ПозицииЧека"), ОбщиеПараметры.ПозицииЧека, Неопределено);
		ТаблицаОплат = ?(ОбщиеПараметры.Свойство("ТаблицаОплат"), ОбщиеПараметры.ТаблицаОплат, Неопределено);
	КонецЕсли;
	
	Если ТипДокумента = 0 Тогда
		ТипыЧеков = Новый Соответствие();
		ТипыЧеков.Вставить(1, НСтр("ru='ПРОДАЖА'"));       
		ТипыЧеков.Вставить(2, НСтр("ru='ВОЗВРАТ'"));  
		ТипыЧеков.Вставить(3, НСтр("ru='ПОКУПКА'"));  
		ТипыЧеков.Вставить(4, НСтр("ru='ВОЗВРАТ ПОКУПКИ'"));  
		ТипЧека = ТипыЧеков.Получить(МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета))
	ИначеЕсли ТипДокумента = 1 Тогда
		ТипЧека = НСтр("ru='ОТКРЫТИЕ СМЕНЫ'");  
	ИначеЕсли ТипДокумента = 2 Тогда
		ТипЧека = НСтр("ru='ВНЕСЕНИЕ'");  
	ИначеЕсли ТипДокумента = 3 Тогда
		ТипЧека = НСтр("ru='ВЫЕМКА'");  
	ИначеЕсли ТипДокумента = 4 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ БЕЗ ГАШЕНИЯ'");  
	ИначеЕсли ТипДокумента = 5 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ С ГАШЕНИЕМ'");  
	КонецЕсли;
	
	ПечатьКлише = Истина;
	
	Разделитель = ПостроитьПоле("", ШиринаСтроки, "=") + Символы.ПС;
	РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
	
	Текст = Разделитель;
	
	Если ПечатьКлише Тогда
		// Сформировать шапку чека.
		Если ОбщиеПараметры.Свойство("ОрганизацияНазвание") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияНазвание) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ОрганизацияНазвание, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
	
		Если ОбщиеПараметры.Свойство("ТекстШапки") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстШапки) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстШапки, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
	
		НомерКассы = ?(ОбщиеПараметры.Свойство("НомерКассы") И НЕ ПустаяСтрока(ОбщиеПараметры.НомерКассы), 
			НСтр("ru='КАССА'") + Символы.НПП + ОбщиеПараметры.НомерКассы, "");
	
		ОрганизацияИНН = ?(ОбщиеПараметры.Свойство("ОрганизацияИНН") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияИНН), 
			НСтр("ru='ИНН'") + Символы.НПП + ОбщиеПараметры.ОрганизацияИНН, "");
	
		Если Не ПустаяСтрока(НомерКассы) Или НЕ ПустаяСтрока(ОрганизацияИНН) Тогда
			Текст = Текст + ВыстроитьПоля(НомерКассы, ОрганизацияИНН, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
	
		НомерЧека = ?(ОбщиеПараметры.Свойство("НомерЧека") И НЕ ПустаяСтрока(ОбщиеПараметры.НомерЧека),
			НСтр("ru='ЧЕК №'") + ОбщиеПараметры.НомерЧека, "");
		Если Не ПустаяСтрока(НомерЧека) Тогда
			Текст = Текст + ВыстроитьПоля(ТипЧека, НомерЧека, ШиринаСтроки) + Символы.ПС;
		Иначе
			Текст = Текст + ПостроитьПоле(ТипЧека, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ДатаВремя = ?(ОбщиеПараметры.Свойство("ДатаВремя") И НЕ ПустаяСтрока(ОбщиеПараметры.ДатаВремя), ОбщиеПараметры.ДатаВремя, ТекущаяДата());
		ДатаВремя = Формат(ДатаВремя, "ДФ=""дд.ММ.гггг ЧЧ:мм""");
		Если Не ПустаяСтрока(ДатаВремя) Тогда
			Текст = Текст + ПостроитьПоле(ДатаВремя, ШиринаСтроки, , Ложь) + Символы.ПС;
		КонецЕсли;
		
		Текст = Текст + РазделительВнут;
	КонецЕсли;
	
	ФорматЧисла = "ЧРД=,;ЧЦ=10;ЧДЦ=2;ЧН=0,00;ЧГ=0";
	СуммаЧека = 0;
	
	// Формируем строки чека.
	Если ПозицииЧека <> Неопределено Тогда
		
		Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
			
			ПозицияЧека = ПозицииЧека[ИндексМассива];
			
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				Наименование = ?(ПозицияЧека.Свойство("Наименование"), ПозицияЧека.Наименование, "");
				Количество   = ?(ПозицияЧека.Свойство("Количество")  , ПозицияЧека.Количество  , 1);
				Цена         = ?(ПозицияЧека.Свойство("Цена")        , ПозицияЧека.Цена        , 0);
				Сумма        = ?(ПозицияЧека.Свойство("Сумма")       , ПозицияЧека.Сумма       , 0);
				НомерСекции  = ?(ПозицияЧека.Свойство("НомерСекции") , ПозицияЧека.НомерСекции , 0);
				СтавкаНДС    = ?(ПозицияЧека.Свойство("СтавкаНДС")   , ПозицияЧека.СтавкаНДС   , 0);
				
				ТекстСтроки  = ПостроитьПолеПереносом(Наименование, ШиринаСтроки) + Символы.ПС;
				СтрокаТовара = Формат(Количество, "ЧРД=,;ЧЦ=10;ЧДЦ=3;ЧН=0,000;ЧГ=0") + " х " + Формат(Цена, ФорматЧисла) 
					+ " = " + Формат(Количество * Цена, ФорматЧисла) + Символы.ПС;
				ТекстСтроки = ТекстСтроки + ПостроитьПоле(СтрокаТовара, ШиринаСтроки, , Ложь);
				Если Окр(Количество * Цена, 2) > Сумма Тогда
					ТекстСтроки = ТекстСтроки + ПостроитьПоле(НСтр("ru='СКИДКА ='") + Символы.НПП
									+ Формат(Количество * Цена - Сумма, ФорматЧисла) + " ", ШиринаСтроки, , Ложь)  + Символы.ПС;
				ИначеЕсли Окр(Количество * Цена, 2) < Сумма Тогда
					ТекстСтроки = ТекстСтроки + ПостроитьПоле(НСтр("ru='НАДБАВКА ='") + Символы.НПП
									+ Формат(Сумма - Количество * Цена, ФорматЧисла) + " ", ШиринаСтроки, , Ложь) + Символы.ПС;
				КонецЕсли;
				Текст = Текст + ТекстСтроки;
				СуммаЧека = СуммаЧека + Сумма;
			ИначеЕсли ПозицияЧека.Свойство("ТекстоваяСтрока") Тогда
				ТекстСтроки = ?(ПозицияЧека.Свойство("Текст"), ПозицияЧека.Текст, "");
				Текст = Текст + ТекстСтроки + Символы.ПС;
			ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
				СтрокаШтрихкода = "|ШтрихКод|" + ПозицияЧека.ТипШтрихкода + "|" + ПозицияЧека.ШтрихКод; 
				Текст = Текст + СтрокаШтрихкода + Символы.ПС; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем подвал чека
	Если ТаблицаОплат <> Неопределено Тогда
		СуммаНаличнойОплаты     = 0;
		СуммаБезналичнойОплаты1 = 0;
		СуммаБезналичнойОплаты2 = 0;
		СуммаБезналичнойОплаты3 = 0;
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = 0 Тогда
				СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = 1 Тогда
				СуммаБезналичнойОплаты1 = СуммаБезналичнойОплаты1 + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = 2 Тогда
				СуммаБезналичнойОплаты2 = СуммаБезналичнойОплаты2 + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаБезналичнойОплаты3 = СуммаБезналичнойОплаты3 + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
		СуммаОплаты = СуммаНаличнойОплаты + СуммаБезналичнойОплаты1 + СуммаБезналичнойОплаты2 + СуммаБезналичнойОплаты3;
	
		Текст = Текст + РазделительВнут;
		Текст = Текст + ПостроитьПоле(НСтр("ru='ИТОГ ='"), 16, ,Ложь) + Символы.НПП + Формат(СуммаЧека, ФорматЧисла) + Символы.ПС;
		Текст = Текст + РазделительВнут;
		
		Если СуммаНаличнойОплаты > 0 Тогда
			Текст = Текст + ПостроитьПоле(НСтр("ru='НАЛИЧНЫМИ ='"), 16, ,Ложь) + Символы.НПП + Формат(СуммаНаличнойОплаты, ФорматЧисла) + Символы.ПС;
		КонецЕсли;
		Если СуммаБезналичнойОплаты1 > 0 Тогда
			Текст = Текст + ПостроитьПоле(НСтр("ru='ПЛАТ.КАРТОЙ ='"), 16, ,Ложь) + Символы.НПП + Формат(СуммаБезналичнойОплаты1, ФорматЧисла) + Символы.ПС;
		КонецЕсли;
		Если СуммаБезналичнойОплаты2 > 0 Тогда
			Текст = Текст + ПостроитьПоле(НСтр("ru='КРЕДИТОМ ='"), 16, ,Ложь) + Символы.НПП + Формат(СуммаБезналичнойОплаты2, ФорматЧисла) + Символы.ПС;
		КонецЕсли;
		Если СуммаБезналичнойОплаты3 > 0 Тогда
			Текст = Текст + ПостроитьПоле(НСтр("ru='СЕРТИФИКАТОМ ='"), 16, ,Ложь) + Символы.НПП + Формат(СуммаБезналичнойОплаты3, ФорматЧисла) + Символы.ПС;
		КонецЕсли;          
		
		Текст = Текст + РазделительВнут;
		Текст = Текст + ПостроитьПоле(НСтр("ru='СДАЧА ='"), 16, ,Ложь) + Символы.НПП + Формат(СуммаОплаты - СуммаЧека, ФорматЧисла) + Символы.ПС;
		Текст = Текст + РазделительВнут;
		
		Кассир = ?(ОбщиеПараметры.Свойство("Кассир"), ОбщиеПараметры.Кассир, "");
		Текст = Текст + ПостроитьПоле(Символы.НПП + НСтр("ru='КАССИР'") + ":" + Символы.НПП + Кассир, ШиринаСтроки) + Символы.ПС;                        
		Текст = Текст + ПостроитьПоле(НСтр("ru='ПОДПИСЬ'") + ":", ШиринаСтроки, "_") + Символы.ПС + Символы.ПС;
		
		Если ОбщиеПараметры.Свойство("ТекстПодвала") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстПодвала) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстПодвала, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда
		Текст = Текст + ДополнительныйТекст + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + Разделитель;
	
	Возврат Текст;
	
КонецФункции

// Начать выполнение команды печати чека ответственному обработчику драйвера
//
Процедура НачатьВыполнениеКомандыПечатиЧека(ОповещениеПриЗавершении, Идентификатор, Команда, Параметры, ВходныеПараметры) Экспорт
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	
	Если ПодключенноеУстройство <> Неопределено Тогда
		
		ОбработчикДрайвераМодуль = ПодключенноеУстройство.ОбработчикДрайвераМодуль;
		ОбъектДрайвера = ПодключенноеУстройство.ОбъектДрайвера;
		
		Если ОбработчикДрайвераМодуль = Неопределено Или ОбъектДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ТекстОшибки = НСтр("ru='Не удалось подключить обработчик драйвера или загрузить драйвер.'");
			ВыходныеПараметры = Новый Массив();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстОшибки);
			ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
			
			РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ТекстОшибки; 
			РезультатВыполнения.ВыходныеПараметры = ВыходныеПараметры;
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			
			ПоддержкаАсинхронногоРежима = ОбработчикДрайвераМодуль.ПоддержкаАсинхронногоРежима();
			
			ПараметрыВыполнения = Новый Структура();
			ПараметрыВыполнения.Вставить("ВходныеПараметры", ВходныеПараметры[0]);
			ПараметрыВыполнения.Вставить("Команда"         , Команда);
			ПараметрыВыполнения.Вставить("Параметры"       , Параметры);
			ПараметрыВыполнения.Вставить("ОписаниеОшибки"  , Неопределено); 
			ПараметрыВыполнения.Вставить("ПродолжитьПечать", Истина);
			ПараметрыВыполнения.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
			ПараметрыВыполнения.Вставить("ОповещениеПриОшибке"     , Параметры.ОповещениеПриОшибке);
			ПараметрыВыполнения.Вставить("ОбработчикДрайвераМодуль", ОбработчикДрайвераМодуль);
			ПараметрыВыполнения.Вставить("ОбъектДрайвера", ОбъектДрайвера);
			ПараметрыВыполнения.Вставить("ПодключенноеУстройство", ПодключенноеУстройство);
			ПараметрыВыполнения.Вставить("ПоддержкаАсинхронногоРежима", ПоддержкаАсинхронногоРежима);
			
			ВыходныеПараметры = Неопределено;
			ОбщиеПараметры = ВходныеПараметры[0];
			
			Если ПоддержкаАсинхронногоРежима Тогда
				Если ПодключенноеУстройство.ТипОборудованияИмя = "ПринтерЧеков" Тогда
					ВыходныеПараметры = Новый Массив();
					ВыходныеПараметры.Добавить(ОбщиеПараметры.НомерСмены);
					ВыходныеПараметры.Добавить(ОбщиеПараметры.НомерЧека);
					РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ВыходныеПараметры", Истина, , ВыходныеПараметры);
					НачатьВыполнениеКомандыПечатиЧека_ЗавершениеОткрытиеЧека(РезультатВыполнения, ПараметрыВыполнения);
				ИначеЕсли ПодключенноеУстройство.ТипОборудованияИмя = "ККТ" Тогда
					
					Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКомандыПечатиЧека_ЗавершениеОткрытиеЧека", ЭтотОбъект, ПараметрыВыполнения);
					ОбработчикДрайвераМодуль.НачатьВыполнениеКоманды(Оповещение, "GetCurrentStatus", ОбщиеПараметры,
						 ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
	
				Иначе
					Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКомандыПечатиЧека_ЗавершениеОткрытиеЧека", ЭтотОбъект, ПараметрыВыполнения);
					ОбработчикДрайвераМодуль.НачатьВыполнениеКоманды(Оповещение, "OpenCheck", ОбщиеПараметры,
						 ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
				КонецЕсли;
			Иначе
				Если ПодключенноеУстройство.ТипОборудованияИмя = "ПринтерЧеков" Тогда
					ВыходныеПараметры = Новый Массив();
					ВыходныеПараметры.Добавить(ОбщиеПараметры.НомерСмены);
					ВыходныеПараметры.Добавить(ОбщиеПараметры.НомерЧека);
					Результат = Истина;
				ИначеЕсли ПодключенноеУстройство.ТипОборудованияИмя = "ККТ" Тогда
					ВремВходныеПараметры = Новый Массив();
					Результат = ОбработчикДрайвераМодуль.ВыполнитьКоманду("GetCurrentStatus", ВходныеПараметры, ВыходныеПараметры,
						ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
					// Увеличиваем инкремент номера последнего чека.
					ВыходныеПараметры[1] = ВыходныеПараметры[1] + 1;
				Иначе
					ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
					ТипЧека = ?(ТипРасчета = 1, Ложь, Истина);
					ВремВходныеПараметры = Новый Массив();
					ВремВходныеПараметры.Добавить(ТипЧека);
					ВремВходныеПараметры.Добавить(Истина);
					
					Результат = ОбработчикДрайвераМодуль.ВыполнитьКоманду("OpenCheck", ВремВходныеПараметры, ВыходныеПараметры,
						ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
				КонецЕсли;
				
				Если Не Результат Тогда
					ТекстОшибки = ?(ВыходныеПараметры.Количество() >= 2, ВыходныеПараметры[1], "");
					ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
					РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ВыходныеПараметры", Результат, ТекстОшибки, ВыходныеПараметры);
					ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
				Иначе

					Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКомандыПечатиЧека_ЗавершениеПечати", ЭтотОбъект, Параметры);
					ЗаполнитьПараметрыОперацииПодписиЧека(ПараметрыВыполнения, ВыходныеПараметры[0], ВыходныеПараметры[1]); 
					ПараметрыВыполнения.Вставить("ОповещениеПродолжения", Оповещение);
					ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеОткрытииЧека, ПараметрыВыполнения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		// Сообщить об ошибке, что устройство не подключено.
		ТекстОшибки = НСтр("ru='Устройство не подключено. Перед выполнением операции устройство должно быть подключено.'");
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
		РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании();
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ТекстОшибки; 
		РезультатВыполнения.ВыходныеПараметры = ВыходныеПараметры;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеКомандыПечатиЧека_ЗавершениеОтмены(РезультатВыполнения, Параметры) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(Параметры.ОписаниеОшибки);
	
	РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ВыходныеПараметры", Ложь, Параметры.ОписаниеОшибки, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

Процедура НачатьВыполнениеКомандыПечатиЧека_ЗавершениеПроцессаПечатиСлипЧека(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		Если Параметры.ОповещениеПриОшибке <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОшибке, Параметры);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Параметры.РезультатВыполнения);
	
КонецПроцедуры

Процедура НачатьВыполнениеКомандыПечатиЧека_ЗавершениеПроцессаПечати(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Если НЕ ПустаяСтрока(Параметры.ПодписьЧека) Тогда 
			ПодключенноеУстройство = Параметры.ПодключенноеУстройство;
			ШиринаСтроки = ?(ПодключенноеУстройство.ПараметрыПодключения.Свойство("ШиринаСтроки"), ПодключенноеУстройство.ПараметрыПодключения.ШиринаСтроки, 32); 
			
			ВремВходныеПараметры = Новый Массив();
			ВремВходныеПараметры.Добавить(СформироватьШаблонИнфоКвитанции(Параметры, ШиринаСтроки));
			ВремВыходныеПараметры = Неопределено;  
			Параметры.Вставить("РезультатВыполнения", РезультатВыполнения);
			
			Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКомандыПечатиЧека_ЗавершениеПроцессаПечатиСлипЧека", ЭтотОбъект, Параметры);
			Параметры.ОбработчикДрайвераМодуль.НачатьВыполнениеКоманды(Оповещение, "PrintText", ВремВходныеПараметры, 
				Параметры.ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
		Иначе
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		Если Параметры.ОповещениеПриОшибке <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОшибке, Параметры);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеКомандыПечатиЧека_ЗавершениеПечати(ПараметрыВыполнения, Параметры) Экспорт
	
	ОбработчикДрайвераМодуль = ПараметрыВыполнения.ОбработчикДрайвераМодуль;
	ОбъектДрайвера           = ПараметрыВыполнения.ОбъектДрайвера;
	ПодключенноеУстройство   = ПараметрыВыполнения.ПодключенноеУстройство;
	ВыходныеПараметры = Неопределено;
	
	Если ПараметрыВыполнения.ПродолжитьПечать Тогда 
		
		ОбщиеПараметры = ПараметрыВыполнения.ВходныеПараметры;
		
		ДополнительныеПараметры = Новый Структура();
		ЗаполнитьПараметрыОперацииПодписиЧека(ДополнительныеПараметры);
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ПараметрыВыполнения);
		ДополнительныеПараметры.Вставить("АдресЧека"  , ?(ПараметрыВыполнения.Свойство("АдресЧека"), ПараметрыВыполнения.АдресЧека, Неопределено));
		ДополнительныеПараметры.Вставить("ПодписьЧека", ?(ПараметрыВыполнения.Свойство("ПодписьЧека"), ПараметрыВыполнения.ПодписьЧека, Неопределено));
		ДополнительныеПараметры.Вставить("НомерКассы" , ?(ОбщиеПараметры.Свойство("НомерКассы"), ОбщиеПараметры.НомерКассы, Неопределено));
		ОбщиеПараметры.Вставить("ПодписьЧека", ДополнительныеПараметры);
		
		Если ПараметрыВыполнения.ПоддержкаАсинхронногоРежима Тогда
			
			Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКомандыПечатиЧека_ЗавершениеПроцессаПечати", ЭтотОбъект, ПараметрыВыполнения);
			ОбработчикДрайвераМодуль.НачатьВыполнениеКоманды(Оповещение, ПараметрыВыполнения.Команда, ПараметрыВыполнения.ВходныеПараметры, 
				ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
				
		Иначе
			ВходныеПараметры = Новый Массив();
			ВходныеПараметры.Добавить(ПараметрыВыполнения.ВходныеПараметры);
			
			Результат = ОбработчикДрайвераМодуль.ВыполнитьКоманду(ПараметрыВыполнения.Команда, ВходныеПараметры,
					ВыходныеПараметры, ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
			Если Не Результат Тогда
				Если ВыходныеПараметры.Количество() >= 2 Тогда
					ТекстОшибки = ВыходныеПараметры[1];
				КонецЕсли;
				ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
				
				Если ПараметрыВыполнения.ОповещениеПриОшибке <> Неопределено Тогда
					ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриОшибке, ПараметрыВыполнения);
				КонецЕсли;
			КонецЕсли;
			
			Если Результат И НЕ ПустаяСтрока(ДополнительныеПараметры.ПодписьЧека) Тогда
				
				ШиринаСтроки = ?(ПодключенноеУстройство.ПараметрыПодключения.Свойство("ШиринаСтроки"), ПодключенноеУстройство.ПараметрыПодключения.ШиринаСтроки, 32); 
				ВремВходныеПараметры = Новый Массив();
				ВремВходныеПараметры.Добавить(СформироватьШаблонИнфоКвитанции(ДополнительныеПараметры, ШиринаСтроки));
				
				ВремВыходныеПараметры = Неопределено;
				Результат = ОбработчикДрайвераМодуль.ВыполнитьКоманду("PrintText", ВремВходныеПараметры,
					ВремВыходныеПараметры, ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
				Если Не Результат Тогда
					Если ВыходныеПараметры.Количество() >= 2 Тогда
						ТекстОшибки = ВыходныеПараметры[1];
					КонецЕсли;
					ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
					Если ПараметрыВыполнения.ОповещениеПриОшибке <> Неопределено Тогда
						ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриОшибке, ПараметрыВыполнения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ВыходныеПараметры", Результат, ТекстОшибки, ВыходныеПараметры);
			РезультатВыполнения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
		
	Иначе
		Если ПараметрыВыполнения.ПоддержкаАсинхронногоРежима Тогда
			Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКомандыПечатиЧека_ЗавершениеОтмены", ЭтотОбъект, ПараметрыВыполнения);
			ОбработчикДрайвераМодуль.НачатьВыполнениеКоманды(Оповещение, "CancelCheck", Неопределено,
				ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
		Иначе
			ОбработчикДрайвераМодуль.ВыполнитьКоманду("CancelCheck", Неопределено, Неопределено,
				ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
				
			ВыходныеПараметры = Новый Массив();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ПараметрыВыполнения.ОписаниеОшибки);
		
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ВыходныеПараметры", Ложь, ПараметрыВыполнения.ОписаниеОшибки, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеКомандыПечатиЧека_ЗавершениеОткрытиеЧека(РезультатОперации, ПараметрыВыполнения) Экспорт
	
	ВыходныеПараметры = РезультатОперации.ВыходныеПараметры;
	
	Если Не РезультатОперации.Результат Тогда
		Если ВыходныеПараметры.Количество() >= 2 Тогда
			ТекстОшибки = ВыходныеПараметры[1];
		КонецЕсли;
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ВыходныеПараметры", РезультатОперации.Результат, ТекстОшибки, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКомандыПечатиЧека_ЗавершениеПечати", ЭтотОбъект, ПараметрыВыполнения.Параметры);
		ЗаполнитьПараметрыОперацииПодписиЧека(ПараметрыВыполнения, ВыходныеПараметры[0], ВыходныеПараметры[1]);
		ПараметрыВыполнения.Вставить("ОповещениеПродолжения", Оповещение);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.Параметры.ОповещениеПослеОткрытииЧека, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательная функция - осуществляет печать чека по шаблону.
//
Функция ПечатьЧекаПоШаблону(ОбщийМодульОборудования, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;
	
	ОбщиеПараметры = ВходныеПараметры[0];
	
	ПозицииЧека  = ОбщиеПараметры.ПозицииЧека;
	ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат;
	
	Если ОбщиеПараметры.Свойство("ПодписьЧека")  Тогда
		// Печать чека производиться в 2 этапа. Чека был открыт ранее.
		РасширенныеПараметры = ОбщиеПараметры.ПодписьЧека; 
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(РасширенныеПараметры.НомерСмены);
		ВыходныеПараметры.Добавить(РасширенныеПараметры.НомерЧека);
		ВыходныеПараметры.Добавить(0); // Номер документа
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить(Неопределено);
		ВыходныеПараметры.Добавить(Неопределено);
		ВыходныеПараметры.Добавить(Неопределено);
	Иначе
		ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
		ТипЧека =  ?(ТипРасчета = 1, Ложь, Истина);
		// Открываем чек
		Результат = ОбщийМодульОборудования.ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, Истина, ВыходныеПараметры);
	КонецЕсли;
	
	// Печатаем строки чека   
	Если Результат Тогда
		
		ОшибкаПриПечати = Ложь;
		// Печатаем позиции чека
		Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
			
			ПозицияЧека = ПозицииЧека[ИндексМассива];
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				Наименование  = ?(ПозицияЧека.Свойство("Наименование") , ПозицияЧека.Наименование, "");
				Количество    = ?(ПозицияЧека.Свойство("Количество")   , ПозицияЧека.Количество  , 1);
				Цена          = ?(ПозицияЧека.Свойство("Цена")         , ПозицияЧека.Цена        , 0);
				Сумма         = ?(ПозицияЧека.Свойство("Сумма")        , ПозицияЧека.Сумма       , 0);
				НомерСекции   = ?(ПозицияЧека.Свойство("НомерСекции")  , ПозицияЧека.НомерСекции , 0);
				СтавкаНДС     = ?(ПозицияЧека.Свойство("СтавкаНДС")    , ПозицияЧека.СтавкаНДС   , 0);
				Если НЕ ОбщийМодульОборудования.НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
									Наименование, Количество, Цена, Сумма, НомерСекции, СтавкаНДС, ВыходныеПараметры) Тогда
					ОшибкаПриПечати = Истина;   
					Прервать;
				КонецЕсли;
			ИначеЕсли ПозицияЧека.Свойство("ТекстоваяСтрока") Тогда
				Текст = ?(ПозицияЧека.Свойство("Текст"), ПозицияЧека.Текст, "");
				Если НЕ ОбщийМодульОборудования.НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
											Текст, ВыходныеПараметры) Тогда
					ОшибкаПриПечати = Истина;   
					Прервать;
				КонецЕсли;
			ИначеЕсли ПозицияЧека.Свойство("Штрихкод") Тогда
				ВремВыходныеПараметры = Новый Массив();
				ТипШтрихКода = ?(ПозицияЧека.Свойство("ТипШтрихКода"), ПозицияЧека.ТипШтрихКода, "");
				ШтрихКод     = ?(ПозицияЧека.Свойство("ШтрихКод")    , ПозицияЧека.ШтрихКод    , "");
				Если НЕ ОбщийМодульОборудования.ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения,
											ТипШтрихКода, ШтрихКод, ВремВыходныеПараметры) Тогда
					Текст = НСтр("ru='<Штрихкод %ТипШтрихКода% не распечатан>'");
					Текст = СтрЗаменить(Текст, "%ТипШтрихКода%", ТипШтрихКода);
					Если НЕ ОбщийМодульОборудования.НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
						Текст, ВремВыходныеПараметры) Тогда
						ОшибкаПриПечати = Истина;   
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
			
		Если НЕ ОшибкаПриПечати Тогда
		  	// Закрываем чек
			ТаблицаОплатЧека = Новый Массив();
			Если ТаблицаОплат <> Неопределено Тогда
				Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
					СтрокаОплаты = Новый СписокЗначений();
					СтрокаОплаты.Добавить(ТаблицаОплат[ИндексОплаты].ТипОплаты);
					СтрокаОплаты.Добавить(ТаблицаОплат[ИндексОплаты].Сумма);
					СтрокаОплаты.Добавить(?(ТаблицаОплат[ИндексОплаты].Свойство("Наименование"), ТаблицаОплат[ИндексОплаты].Наименование, ""));
					СтрокаОплаты.Добавить("");
					ТаблицаОплатЧека.Добавить(СтрокаОплаты);
				КонецЦикла;
			КонецЕсли;
			Результат = ОбщийМодульОборудования.ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплатЧека, ВыходныеПараметры);
		Иначе
			Результат = Ложь;
		КонецЕсли;
			
		КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполнить параметры операции подписи чека.
// 
Процедура ЗаполнитьПараметрыОперацииПодписиЧека(ПараметрыОперации, НомерСмены = Неопределено, НомерЧека = Неопределено, НомерКассы = Неопределено) Экспорт; 
	
	ПараметрыОперации.Вставить("ИНН"       , Неопределено);
	ПараметрыОперации.Вставить("КПП"       , Неопределено);
	ПараметрыОперации.Вставить("НомерСмены", НомерСмены);
	ПараметрыОперации.Вставить("НомерЧека" , НомерЧека);
	ПараметрыОперации.Вставить("НомерКассы", НомерКассы);
	ПараметрыОперации.Вставить("НаименованиеОрганизации", Неопределено);
	
КонецПроцедуры

Функция СформироватьШаблонИнфоКвитанции(Параметры, ШиринаСтроки, ПечатьШтрихкода = Истина) Экспорт
	
	Текст = ВыстроитьПоля(Параметры.НаименованиеОрганизации, , ШиринаСтроки) + Символы.ПС;
	
	АдресЧека = ?(Параметры.Свойство("АдресЧека"), Параметры.АдресЧека, Неопределено);
	ПодписьЧека = ?(Параметры.Свойство("ПодписьЧека"), Параметры.ПодписьЧека, Неопределено);
	
	ОрганизацияИНН = ?(НЕ ПустаяСтрока(Параметры.ИНН), НСтр("ru='ИНН:'") + Параметры.ИНН, "");
	ОрганизацияКПП = ?(НЕ ПустаяСтрока(Параметры.КПП), НСтр("ru='КПП:'") + Параметры.КПП, "");
	Если Не ПустаяСтрока(ОрганизацияИНН) Или НЕ ПустаяСтрока(ОрганизацияКПП) Тогда
		Текст = Текст + ВыстроитьПоля(ОрганизацияИНН, ОрганизацияКПП, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;  
	
	НомерКассы = ?(НЕ ПустаяСтрока(Параметры.НомерКассы), НСтр("ru='КАССА:'") + Параметры.НомерКассы, "");
	НомерСмены = ?(НЕ ПустаяСтрока(Параметры.НомерСмены), НСтр("ru='СМЕНА:'") + Формат(Параметры.НомерСмены, "ЧГ=0"), 0);
	
	Если Не ПустаяСтрока(НомерКассы) Или НЕ ПустаяСтрока(НомерСмены) Тогда
		Текст = Текст + ВыстроитьПоля(НомерКассы, НомерСмены, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	НомерЧека = ?(НЕ ПустаяСтрока(Параметры.НомерЧека), НСтр("ru='ЧЕК:'") + Параметры.НомерЧека, "");
	ДатаВремя = НСтр("ru='ДАТА:'") + Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг ЧЧ:мм""");
	Если Не ПустаяСтрока(НомерЧека) Или НЕ ПустаяСтрока(ДатаВремя) Тогда
		Текст = Текст + ВыстроитьПоля(НомерЧека, ДатаВремя, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + " " + Символы.ПС;
	
	Если ПечатьШтрихкода Тогда
		Текст = Текст + "|ШтрихКод|QR|" + АдресЧека + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + " " + Символы.ПС;
	
	СтрокаТекста = ПостроитьПолеПереносом(АдресЧека, ШиринаСтроки);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
		Текст = Текст + СтрПолучитьСтроку(СтрокаТекста, НомерСтроки) + Символы.ПС;
	КонецЦикла;
	
	Текст = Текст + " " + Символы.ПС;
	
	СтрокаТекста = ПостроитьПолеПереносом(ПодписьЧека, ШиринаСтроки);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
		Текст = Текст + СтрПолучитьСтроку(СтрокаТекста, НомерСтроки) + Символы.ПС;
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСЭквайрингом

// Заполняет структуру результата подключения эквайрингового терминала.
// 
Функция ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Результат = Ложь, ОписаниеОшибки = Неопределено) Экспорт; 
	
	РезультатОперации = Новый Структура();
	РезультатОперации.Вставить("Результат", Результат);
	РезультатОперации.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	РезультатОперации.Вставить("ИдентификаторУстройстваЭТ" , Неопределено);
	РезультатОперации.Вставить("ИдентификаторУстройстваПУ" , Неопределено);
	РезультатОперации.Вставить("ПечатьКвитанцийНаТерминале", Ложь);
	Возврат РезультатОперации;
	
КонецФункции

// Начать подключение эквайрингово терминала.
// Возвращает структуру:
//   Результат - Результат операции.
//   ОписаниеОшибки - Описание ошибки (Для Результат = Ложь).
//   ИдентификаторПодключенногоЭТ - Идентификатор эквайринговогой терминала.
//   ИдентификаторПодключенногоПУ - Идентификатор фискального регистратора.
//   ПечатьКвитанцийНаТерминале   - Печать квитанций на терминале, если Истина то ИдентификаторПодключенногоПУ = Неопределено.
//
Процедура НачатьПодключенияЭквайринговогоТерминала(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройстваЭТ = Неопределено, ИдентификаторУстройстваПУ = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении"  , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор"  , УникальныйИдентификатор);
	Контекст.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
	Контекст.Вставить("ИдентификаторУстройстваПУ", ИдентификаторУстройстваПУ);
	
	Если Контекст.ИдентификаторУстройстваЭТ = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПодключенияЭквайринговогоТерминала_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ЭквайринговыйТерминал",
			НСтр("ru='Выберите эквайринговый терминал'"), 
			НСтр("ru='Эквайринговый терминал не подключен.'"),
			НСтр("ru='Эквайринговый терминал не выбран.'"), 
			Истина);
	Иначе
		НачатьПодключенияЭквайринговогоТерминала_ВыбратьУстройствоЗавершение(Контекст.ИдентификаторУстройстваЭТ, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключенияЭквайринговогоТерминала_ВыбратьУстройствоЗавершение(ИдентификаторУстройстваЭТ, Параметры) Экспорт
	
	Если ИдентификаторУстройстваЭТ = Неопределено Тогда
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Эквайринговый терминал не выбран.'");
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	Иначе
		Параметры.Вставить("ИдентификаторУстройстваЭТ" , ИдентификаторУстройстваЭТ);
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПодключенияЭквайринговогоТерминала_ПодключениеЗавершение", ЭтотОбъект, Параметры);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, ИдентификаторУстройстваЭТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключенияЭквайринговогоТерминала_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		ВходныеПараметры  = Неопределено;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПодключенияЭквайринговогоТерминала_ПечатьНаТерминалеЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройстваЭТ, "PrintSlipOnTerminal", ВходныеПараметры);
	Иначе
		// Ошибка подключения.
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='При подключении терминала произошла ошибка: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатПодключения.ОписаниеОшибки);
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Ложь, ТекстСообщения);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключенияЭквайринговогоТерминала_ПечатьНаТерминалеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ПечатьКвитанцийНаТерминале = РезультатВыполнения.ВыходныеПараметры[0]; 
		Параметры.Вставить("ПечатьКвитанцийНаТерминале", ПечатьКвитанцийНаТерминале);
		Если ПечатьКвитанцийНаТерминале Тогда
			Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
				РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Истина);
				РезультатОперации.ИдентификаторУстройстваЭТ  = Параметры.ИдентификаторУстройстваЭТ;
				РезультатОперации.ПечатьКвитанцийНаТерминале = ПечатьКвитанцийНаТерминале;
				ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
			КонецЕсли;
		Иначе
			Если Параметры.ИдентификаторУстройстваПУ = Неопределено Тогда
				ПоддерживаемыеТипыВО = Новый Массив();
				ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
				ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
				ПоддерживаемыеТипыВО.Добавить("ККТ");
				ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПодключенияЭквайринговогоТерминала_ВыбратьПечатающегоУстройстваЗавершение", ЭтотОбъект, Параметры);
				ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
					НСтр("ru='Выберите печатающее устройство'"), НСтр("ru='Печатающее устройство не подключено.'"), НСтр("ru='Печатающее устройство не выбрано.'"), Истина);
			Иначе
				НачатьПодключенияЭквайринговогоТерминала_ВыбратьПечатающегоУстройстваЗавершение(Параметры.ИдентификаторУстройстваПУ, Параметры);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройстваЭТ);
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='При использовании терминала произошла ошибка: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Ложь, ТекстСообщения);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключенияЭквайринговогоТерминала_ВыбратьПечатающегоУстройстваЗавершение(ИдентификаторУстройстваПУ, Параметры) Экспорт
	
	Если ИдентификаторУстройстваПУ = Неопределено Тогда
		НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройстваЭТ);
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Печатающее устройство не выбрано.'");
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	Иначе
		Параметры.ИдентификаторУстройстваПУ = ИдентификаторУстройстваПУ;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПодключенияЭквайринговогоТерминала_ПечатающееУстройствоПодключениеЗавершение", ЭтотОбъект, Параметры);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, ИдентификаторУстройстваПУ);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключенияЭквайринговогоТерминала_ПечатающееУстройствоПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Истина);
			РезультатОперации.ИдентификаторУстройстваЭТ  = Параметры.ИдентификаторУстройстваЭТ;
			РезультатОперации.ИдентификаторУстройстваПУ  = Параметры.ИдентификаторУстройстваПУ;
			РезультатОперации.ПечатьКвитанцийНаТерминале = Параметры.ПечатьКвитанцийНаТерминале;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	Иначе
		НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройстваЭТ);
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='При подключении печатающего устройство произошла ошибка: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатПодключения.ОписаниеОшибки);
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Ложь, ТекстСообщения);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отключение подключенного эквайрингово терминала. 
// Если эквайринговый терминал не поддерживает печать квитанций на терминале, для печати подключается печатающее устройство.
// Данной процедурой оно тоже будет отключено.
// Входящие параметры:  
//  ПараметрыОперации - Структура со следующими атрибутами.
//    ИдентификаторУстройстваЭТ - Идентификатор подключенного эквайринговогой терминала.
//    ИдентификаторУстройстваПУ - Идентификатор подключенного фискального регистратора.
//    ПечатьКвитанцийНаТерминале   - Печать квитанций на терминале, если True то ИдентификаторПодключенногоПУ = Неопределено.
//  УникальныйИдентификатор - идентификатор формы.
//
Процедура НачатьОтключениеЭквайринговогоТерминала(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации) Экспорт
	
	Если Не ПараметрыОперации.ПечатьКвитанцийНаТерминале И Не ПараметрыОперации.ИдентификаторУстройстваПУ = Неопределено Тогда
		НачатьОтключениеОборудованиеПоИдентификатору(, УникальныйИдентификатор, ПараметрыОперации.ИдентификаторУстройстваПУ);
	КонецЕсли;
	
	Если Не ПараметрыОперации.ИдентификаторУстройстваЭТ = Неопределено Тогда
		НачатьОтключениеОборудованиеПоИдентификатору(, УникальныйИдентификатор, ПараметрыОперации.ИдентификаторУстройстваЭТ);
	КонецЕсли;
	
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Истина);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Выполнить сверку итогов на эквайринговом терминале.
// Если эквайринговый терминал не поддерживает печать квитанций на терминале, для печати подключается печатающее устройство.
//
Процедура НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройстваЭТ = Неопределено, ИдентификаторУстройстваПУ = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	
	Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале_ПодключениеЗавершение", ЭтотОбъект, Контекст);
	НачатьПодключенияЭквайринговогоТерминала(Оповещение, УникальныйИдентификатор, ИдентификаторУстройстваЭТ, ИдентификаторУстройстваПУ);
	
КонецПроцедуры

Процедура НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		Параметры.Вставить("ПечатьКвитанцийНаТерминале", РезультатПодключения.ПечатьКвитанцийНаТерминале);
		Параметры.Вставить("ИдентификаторУстройстваЭТ" , РезультатПодключения.ИдентификаторУстройстваЭТ);
		Параметры.Вставить("ИдентификаторУстройстваПУ" , РезультатПодключения.ИдентификаторУстройстваПУ);
		
		ВходныеПараметры  = Неопределено;
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале_ВыполнениеКомандыЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(Оповещение, РезультатПодключения.ИдентификаторУстройстваЭТ, "Settlement", ВходныеПараметры);
	Иначе
		// Ошибка подключения.
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='При подключении терминала произошла ошибка: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатПодключения.ОписаниеОшибки);
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Ложь, ТекстСообщения);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале_ВыполнениеКомандыЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ТекстСлипЧека = РезультатВыполнения.ВыходныеПараметры[0][1];
		
		Если Не ПустаяСтрока(ТекстСлипЧека) Тогда
			глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ТекстСлипЧека);
		КонецЕсли;
		
		Если Не Параметры.ПечатьКвитанцийНаТерминале И Не Параметры.ИдентификаторУстройстваПУ = Неопределено И Не ПустаяСтрока(ТекстСлипЧека) Тогда
			Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале_ПечатьЗавершение", ЭтотОбъект, Параметры);
			НачатьПечатьТекста(Оповещение, Параметры.УникальныйИдентификатор, ТекстСлипЧека, Параметры.ИдентификаторУстройстваПУ);
		Иначе
			НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
			Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
				РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Истина);
				ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='При использовании терминала произошла ошибка: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Ложь, ТекстСообщения);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале_ПечатьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
	
	Если РезультатВыполнения.Результат Тогда  
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
			РезультатОперации.Результат = Истина;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	Иначе
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='При печати слип чека возникла ошибка: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Ложь, ТекстСообщения);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру параметров выполнения эквайринговой операции.
//
Функция ПараметрыВыполненияЭквайринговойОперации() Экспорт;
	
	Результат = Новый Структура();
	Результат.Вставить("ТипТранзакции"      , Неопределено);
	Результат.Вставить("СуммаОперации"      , 0);
	Результат.Вставить("НомерКарты"         , Неопределено);
	Результат.Вставить("НомерЧека"          , Неопределено);
	Результат.Вставить("НомерЧекаЭТ"        , Неопределено);
	Результат.Вставить("СсылочныйНомер"     , Неопределено);
	Результат.Вставить("ТекстСлипЧека"      , Неопределено);
	Результат.Вставить("КодАвторизации"     , Неопределено);
	Возврат Результат;
	
КонецФункции

// Выполнить операции на эквайринговом терминале.
// Если эквайринговый терминал не поддерживает печать квитанций на терминале, для печати подключается печатающее устройство.
//
Процедура НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройстваЭТ = Неопределено, ИдентификаторУстройстваПУ = Неопределено, ПараметрыОперации = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ПараметрыОперации"       , ПараметрыОперации);
	
	Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеОперацииНаЭквайринговомТерминале_ПодключениеЗавершение", ЭтотОбъект, Контекст);
	НачатьПодключенияЭквайринговогоТерминала(Оповещение, УникальныйИдентификатор, ИдентификаторУстройстваЭТ, ИдентификаторУстройстваПУ);
	
КонецПроцедуры

Процедура НачатьВыполнениеОперацииНаЭквайринговомТерминале_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		Параметры.Вставить("ПечатьКвитанцийНаТерминале", РезультатПодключения.ПечатьКвитанцийНаТерминале);
		Параметры.Вставить("ИдентификаторУстройстваЭТ" , РезультатПодключения.ИдентификаторУстройстваЭТ);
		Параметры.Вставить("ИдентификаторУстройстваПУ" , РезультатПодключения.ИдентификаторУстройстваПУ);
		
		ПараметрыОперации = Параметры.ПараметрыОперации;
		
		ТипТранзакции  = Параметры.ПараметрыОперации.ТипТранзакции;
		СуммаОперации  = Параметры.ПараметрыОперации.СуммаОперации;
		НомерКарты     = ?(ПараметрыОперации.Свойство("НомерКарты")    , ПараметрыОперации.НомерКарты, "");
		НомерЧека      = ?(ПараметрыОперации.Свойство("НомерЧека")     , ПараметрыОперации.НомерЧека, "");
		НомерЧекаЭТ    = ?(ПараметрыОперации.Свойство("НомерЧекаЭТ")   , ПараметрыОперации.НомерЧекаЭТ, "");
		СсылочныйНомер = ?(ПараметрыОперации.Свойство("СсылочныйНомер"), ПараметрыОперации.СсылочныйНомер, "");   
		
		Если ТипТранзакции = "AuthorizeCompletion" Или ТипТранзакции = "AuthorizeVoidPreSales" Тогда
			Параметры.Вставить("БезВозвращаемыхПараметров", Истина);
		КонецЕсли;
		
		ВходныеПараметры  = Новый Массив();
		ВходныеПараметры.Добавить(СуммаОперации);
		
		Если ТипТранзакции = "AuthorizeSales" Тогда
			ВходныеПараметры.Добавить(НомерКарты);
			ВходныеПараметры.Добавить(НомерЧека);
			ВходныеПараметры.Добавить(СсылочныйНомер);
		ИначеЕсли ТипТранзакции = "AuthorizeVoid" Или ТипТранзакции = "EmergencyVoid" Тогда
			ВходныеПараметры.Добавить(СсылочныйНомер);
			ВходныеПараметры.Добавить(НомерЧекаЭТ);
			ВходныеПараметры.Добавить(НомерКарты);
		ИначеЕсли ТипТранзакции = "AuthorizeRefund" Тогда
			ВходныеПараметры.Добавить(НомерКарты);
			ВходныеПараметры.Добавить(СсылочныйНомер);
			ВходныеПараметры.Добавить(НомерЧекаЭТ);
		ИначеЕсли ТипТранзакции = "AuthorizePreSales" Тогда
			ВходныеПараметры.Добавить(НомерКарты);
			ВходныеПараметры.Добавить(НомерЧека);
			ВходныеПараметры.Добавить(СсылочныйНомер);
		Иначе
			ВходныеПараметры.Добавить(НомерКарты);
			ВходныеПараметры.Добавить(СсылочныйНомер);
			ВходныеПараметры.Добавить(НомерЧекаЭТ);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеОперацииНаЭквайринговомТерминале_ВыполнениеКомандыЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(Оповещение, РезультатПодключения.ИдентификаторУстройстваЭТ, ТипТранзакции, ВходныеПараметры);
		
	Иначе
		// Ошибка подключения.
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='При подключении терминала произошла ошибка: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатПодключения.ОписаниеОшибки);
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Ложь, ТекстСообщения);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеОперацииНаЭквайринговомТерминале_ВыполнениеКомандыЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ПараметрыОперации = Параметры.ПараметрыОперации;
		Если Параметры.Свойство("БезВозвращаемыхПараметров") Или РезультатВыполнения.ВыходныеПараметры.Количество()= 1 Тогда
			ПараметрыОперации.НомерКарты     = "";
			ПараметрыОперации.СсылочныйНомер = "";
			ПараметрыОперации.НомерЧекаЭТ    = "";
			ПараметрыОперации.ТекстСлипЧека  = РезультатВыполнения.ВыходныеПараметры[0][1];
		Иначе
			ПараметрыОперации.НомерКарты     = РезультатВыполнения.ВыходныеПараметры[0];
			ПараметрыОперации.СсылочныйНомер = РезультатВыполнения.ВыходныеПараметры[1];
			ПараметрыОперации.НомерЧекаЭТ    = РезультатВыполнения.ВыходныеПараметры[2];
			ПараметрыОперации.ТекстСлипЧека  = РезультатВыполнения.ВыходныеПараметры[3][1];
			Если РезультатВыполнения.ВыходныеПараметры.Количество() > 4 Тогда
				ПараметрыОперации.КодАвторизации = РезультатВыполнения.ВыходныеПараметры[4];
			КонецЕсли;
		КонецЕсли;
	
		Если Не ПустаяСтрока(ПараметрыОперации.ТекстСлипЧека) Тогда
			глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ПараметрыОперации.ТекстСлипЧека);
		КонецЕсли;
		
		Если Не Параметры.ПечатьКвитанцийНаТерминале И Не Параметры.ИдентификаторУстройстваПУ = Неопределено И Не ПустаяСтрока(ПараметрыОперации.ТекстСлипЧека) Тогда
			Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеОперацииНаЭквайринговомТерминале_ПечатьЗавершение", ЭтотОбъект, Параметры);
			НачатьПечатьТекста(Оповещение, Параметры.УникальныйИдентификатор, ПараметрыОперации.ТекстСлипЧека, Параметры.ИдентификаторУстройстваПУ);
		Иначе
			НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
			Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
				РезультатОперации = Параметры.ПараметрыОперации;
				РезультатОперации.Вставить("Результат", Истина);
				РезультатОперации.Вставить("ОписаниеОшибки");
				ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='При использовании терминала произошла ошибка: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Ложь, ТекстСообщения);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеОперацииНаЭквайринговомТерминале_ПечатьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда  
		НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = Параметры.ПараметрыОперации;
			РезультатОперации.Вставить("Результат", Истина);
			РезультатОперации.Вставить("ОписаниеОшибки");
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	Иначе
		Параметры.Вставить("ОписаниеОшибки", РезультатВыполнения.ОписаниеОшибки);
		РезультатОперации = Параметры.ПараметрыОперации;
		ВходныеПараметры = Новый Массив();
		ВходныеПараметры.Добавить(РезультатОперации.СуммаОперации);
		ВходныеПараметры.Добавить(РезультатОперации.СсылочныйНомер);
		ВходныеПараметры.Добавить(РезультатОперации.НомерЧека);
		
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеОперацииНаЭквайринговомТерминале_ОшибкаПечатиЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(Оповещение, Параметры.ИдентификаторУстройстваЭТ, "EmergencyVoid", ВходныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеОперацииНаЭквайринговомТерминале_ОшибкаПечатиЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ТекстСообщения = НСтр("ru='При печати слип чека возникла ошибка: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", Параметры.ОписаниеОшибки);
		РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала(Ложь, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСДисплеямиПокупателя

// Начать вывод тестовых строк на подключенные дисплеи покупателя.
//
Процедура НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, СтрокиТекста = Неопределено) Экспорт
	
	ПодключенныеУстройства = ПолучитьПодключенныеУстройства(глПодключаемоеОборудование.ПараметрыПодключенияПО, 
		ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя"), ИдентификаторУстройства);
	
	Если ПодключенныеУстройства.Количество() > 0 Тогда
		Для Каждого Устройство Из ПодключенныеУстройства Цикл
			Контекст = Новый Структура;
			Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
			Контекст.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			Контекст.Вставить("ИдентификаторУстройства", Устройство.Ссылка);
			Оповещение = Новый ОписаниеОповещения("НачатьОперациюНаДисплейПокупателя_ВыполнитьКомандуЗавершение", ЭтотОбъект, Контекст);
			
			ВходныеПараметры  = Новый Массив();
			ВходныеПараметры.Добавить(СтрокиТекста);
			НачатьВыполнениеКоманды(Оповещение, Устройство.Ссылка, "DisplayText", ВходныеПараметры);
		КонецЦикла
	ИначеЕсли ИдентификаторУстройства <> Неопределено И ОповещениеПриЗавершении <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Нет подключенных дисплеев покупателя.'");
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Начать очистку подключенных дисплеев покупателя.
//
Процедура НачатьОчисткуДисплеяПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено) Экспорт
	
	ПодключенныеУстройства = ПолучитьПодключенныеУстройства(глПодключаемоеОборудование.ПараметрыПодключенияПО, 
		ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя"), ИдентификаторУстройства);
	
	Если ПодключенныеУстройства.Количество() > 0 Тогда
		Для Каждого Устройство Из ПодключенныеУстройства Цикл
			Контекст = Новый Структура;
			Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
			Контекст.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			Контекст.Вставить("ИдентификаторУстройства", Устройство.Ссылка);
			Оповещение = Новый ОписаниеОповещения("НачатьОперациюНаДисплейПокупателя_ВыполнитьКомандуЗавершение", ЭтотОбъект, Контекст);
			ВходныеПараметры  = Неопределено;
			НачатьВыполнениеКоманды(Оповещение, Устройство.Ссылка, "ClearText", ВходныеПараметры);
		КонецЦикла
	ИначеЕсли ИдентификаторУстройства <> Неопределено И ОповещениеПриЗавершении <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Нет подключенных дисплеев покупателя.'");
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, ИдентификаторУстройства); 
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОперациюНаДисплейПокупателя_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = "";
	Иначе
		ОписаниеОшибки = НСтр("ru='При использовании дисплея покупателя произошла ошибка: %ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСТСД

// Начать загрузку данных из терминала сбора данных.
//
Процедура НачатьЗагрузкуДанныеИзТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, СворачиватьДанные = Ложь) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("СворачиватьДанные"       , СворачиватьДанные);
	
	Оповещение = Новый ОписаниеОповещения("НачатьЗагрузкуДанныеИзТСД_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
	ПредложитьВыбратьУстройство(Оповещение, "ТерминалСбораДанных", НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен.'"), ,Истина);
		
КонецПроцедуры

Процедура НачатьЗагрузкуДанныеИзТСД_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Терминал сбора данных не подключен.'");
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	Оповещение = Новый ОписаниеОповещения("НачатьЗагрузкуДанныеИзТСД_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(Оповещение, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьЗагрузкуДанныеИзТСД_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда
		ВходныеПараметры  = Неопределено;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуДанныеИзТСД_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "DownloadDocument", ВходныеПараметры);
	Иначе
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗагрузкуДанныеИзТСД_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВыходныеПараметры = РезультатВыполнения.ВыходныеПараметры;
		ТаблицаШтрихкодов = ВыходныеПараметры[0];
		АлкогольнаяПродукция = (ВыходныеПараметры.Количество() > 1) И ВыходныеПараметры[1];
		МассивЗагрузкиИзТСД = Новый Массив;       
		
		Если Параметры.СворачиватьДанные И НЕ АлкогольнаяПродукция Тогда
			
			СоответствиеДанных = Новый Соответствие;
			Для Индекс = 0 По ТаблицаШтрихкодов.Количество() - 1 Цикл
				Штрихкод   = ТаблицаШтрихкодов[Индекс].Штрихкод;
				Количество = Число(?(ПустаяСтрока(ТаблицаШтрихкодов[Индекс].Количество), 0, ТаблицаШтрихкодов[Индекс].Количество));
				ЭлементСоответствия = СоответствиеДанных.Получить(Штрихкод);
				Если ЭлементСоответствия = Неопределено Тогда
					СтруктураШтрихкода = Новый Структура("Штрихкод, Количество", Штрихкод, Количество);
					ИндексЗагрузки = МассивЗагрузкиИзТСД.Количество(); // Вычитать 1 не нужно, т.к. добавление идет после.
					МассивЗагрузкиИзТСД.Добавить(СтруктураШтрихкода);
					СоответствиеДанных.Вставить(Штрихкод, ИндексЗагрузки);
				Иначе
					СтруктураШтрихкода = МассивЗагрузкиИзТСД[ЭлементСоответствия];
					СтруктураШтрихкода.Количество = СтруктураШтрихкода.Количество + Количество;
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивЗагрузкиИзТСД = ТаблицаШтрихкодов; 
		КонецЕсли;
		
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Истина, ,Параметры.ИдентификаторУстройства);
			РезультатОперации.Вставить("ТаблицаТоваров"      , МассивЗагрузкиИзТСД);
			РезультатОперации.Вставить("АлкогольнаяПродукция", АлкогольнаяПродукция);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		
	Иначе
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='При загрузке данных из терминала сбора данных произошла ошибка.
								  |%ОписаниеОшибки%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ОписаниеОшибки, Параметры.ИдентификаторУстройства);  
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры
// Начать выгрузку данных в терминал сбора данных.
//
Процедура НачатьВыгрузкуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, ТаблицаВыгрузкиТоваров, ПолнаяВыгрузка = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ТаблицаВыгрузкиТоваров"  , ТаблицаВыгрузкиТоваров);
	Контекст.Вставить("ПолнаяВыгрузка"          , ПолнаяВыгрузка);
	
	Оповещение = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВТСД_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
	ПредложитьВыбратьУстройство(Оповещение, "ТерминалСбораДанных", НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен.'"), ,Истина);
	
КонецПроцедуры                          

Процедура НачатьВыгрузкуДанныеВТСД_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Терминал сбора данных не подключен.'");
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	Оповещение = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВТСД_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(Оповещение, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВТСД_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда
		
		ВходныеПараметры  = Новый Массив();
		МассивТСД = Новый Массив;
		Для Каждого текСтрока Из Параметры.ТаблицаВыгрузкиТоваров Цикл
			Если текСтрока.Свойство("Номенклатура") Тогда
				НаименованиеНоменклатуры = Строка(текСтрока.Номенклатура);
			ИначеЕсли текСтрока.Свойство("Наименование") Тогда
				НаименованиеНоменклатуры = текСтрока.Наименование;
			Иначе
				НаименованиеНоменклатуры = "";
			КонецЕсли;
			СтрокаМассиваТСД = Новый СписокЗначений; // Не массив для сохранения совместимости с обработками обслуживания.
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Штрихкод")                   , текСтрока.Штрихкод, ""));
			СтрокаМассиваТСД.Добавить(НаименованиеНоменклатуры);
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ЕдиницаИзмерения")           , текСтрока.ЕдиницаИзмерения, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ХарактеристикаНоменклатуры") , текСтрока.ХарактеристикаНоменклатуры, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("СерияНоменклатуры")          , текСтрока.СерияНоменклатуры, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Качество")                   , текСтрока.Качество, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Цена")                       , текСтрока.Цена, 0));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Количество")                 , текСтрока.Количество, 0));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Артикул ")                   , текСтрока.Артикул, ""));
			// Данные ЕГАИС.
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Алкоголь")                 , текСтрока.Алкоголь, Ложь));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Маркируемый")              , текСтрока.Маркируемый, Ложь));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("КодВидаАлкогольнойПродукции"), текСтрока.КодВидаАлкогольнойПродукции, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("КодАлкогольнойПродукции")    , текСтрока.КодАлкогольнойПродукции, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ЕмкостьТары")                , текСтрока.ЕмкостьТары, Неопределено));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Крепость")                   , текСтрока.Крепость, Неопределено));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ИННПроизводителя")           , текСтрока.ИННПроизводителя, Неопределено));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("КПППроизводителя")           , текСтрока.КПППроизводителя, Неопределено));
			МассивТСД.Добавить(СтрокаМассиваТСД);
		КонецЦикла;
				
		ВходныеПараметры.Добавить("Items");
		ВходныеПараметры.Добавить(МассивТСД);
		ВходныеПараметры.Добавить(Параметры.ПолнаяВыгрузка);
		
		Оповещение = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВТСД_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(Оповещение, Параметры.ИдентификаторУстройства, "UploadDirectory", ВходныеПараметры);
		
	Иначе
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВТСД_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
		
	Если РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = ""; 
	Иначе
		ОписаниеОшибки = НСтр("ru='При выгрузке данных в терминал сбора данных произошла ошибка: %ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ОписаниеОшибки, Параметры.ИдентификаторУстройства); 
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать очистку данных в терминале сбора данных.
//
Процедура НачатьОчисткуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьОчисткуДанныеВТСД_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(Оповещение, "ТерминалСбораДанных",
			НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен.'"), ,Истина);
	Иначе
		НачатьОчисткуДанныеВТСД_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуДанныеВТСД_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Терминал сбора данных не подключен.'");
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуДанныеВТСД_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьОчисткуДанныеВТСД_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда
		ВходныеПараметры  = Неопределено;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуДанныеВТСД_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ClearTable", ВходныеПараметры);
	Иначе
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуДанныеВТСД_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
		
	Если РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = ""; 
	Иначе
		ОписаниеОшибки = НСтр("ru='При очистке данных в терминале сбора данных произошла ошибка: %ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ОписаниеОшибки, Параметры.ИдентификаторУстройства); 
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСЭлектроннымиВесами

// Получает вес с электронных весов.
// УникальныйИдентификатор - идентификатор формы.
// ОповещениеПриЗавершении - оповещение при завершении взвешивании и передачи веса.
//
Процедура НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Ложь) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьПолученияВесаСЭлектронныхВесов_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(Оповещение, "ЭлектронныеВесы",
			НСтр("ru='Выберите электронные весы'"), 
			НСтр("ru='Электронные весы не подключены.'"), 
			НСтр("ru='Электронные весы не выбраны.'"),
			Истина);
	Иначе
		НачатьПолученияВесаСЭлектронныхВесов_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолученияВесаСЭлектронныхВесов_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Электронные весы не выбраны.'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства" , ИдентификаторУстройства);
	Оповещение = Новый ОписаниеОповещения("НачатьПолученияВесаСЭлектронныхВесов_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(Оповещение, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьПолученияВесаСЭлектронныхВесов_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		ВходныеПараметры  = Неопределено;
		Оповещение = Новый ОписаниеОповещения("НачатьПолученияВесаСЭлектронныхВесов_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(Оповещение, Параметры.ИдентификаторУстройства, "ПолучитьВес", ВходныеПараметры);
	Иначе
		// Ошибка подключения весов
		ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолученияВесаСЭлектронныхВесов_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Вес = РезультатВыполнения.ВыходныеПараметры[0]; // Вес получен
		ОписаниеОшибки = "";
	Иначе
		Вес = Неопределено;
		ОписаниеОшибки = НСтр("ru='При использовании электронных весов произошла ошибка: %ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
		РезультатОперации.Вставить("Вес", Вес);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать установку веса тары на электронных весах.
// УникальныйИдентификатор - идентификатор формы.
// ОповещениеПриЗавершении - оповещение при завершении взвешивании и передачи веса.
//
Процедура НачатьУстановкуВесаТары(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, Вес = Неопределено) Экспорт
	
	ВходныеПараметры = Новый Массив();
	ВходныеПараметры.Добавить(Вес);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Контекст.Вставить("ВходныеПараметры"       , ВходныеПараметры);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуВесаТары_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(Оповещение, "ЭлектронныеВесы",
			НСтр("ru='Выберите электронные весы'"), 
			НСтр("ru='Электронные весы не подключены.'"), 
			НСтр("ru='Электронные весы не выбраны.'"),
			Истина);
	Иначе
		НачатьУстановкуВесаТары_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУстановкуВесаТары_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Электронные весы не выбраны.'");
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства" , ИдентификаторУстройства);
	Оповещение = Новый ОписаниеОповещения("НачатьУстановкуВесаТары_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(Оповещение, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьУстановкуВесаТары_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		ВходныеПараметры  = Параметры.ВходныеПараметры;
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуВесаТары_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(Оповещение, Параметры.ИдентификаторУстройства, "Тарировать", ВходныеПараметры);
	Иначе
		// Ошибка подключения весов
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУстановкуВесаТары_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = НСтр("ru='При использовании электронных весов произошла ошибка: %ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСОборудованиемПринтеромЭтикеток

// Начать печать этикеток.
//
Процедура НачатьПечатьЭтикеток(ОповещениеПриЗавершенииПечати, УникальныйИдентификатор, ОписаниеЭтикеткиВXML, ДанныеДляПечати, ИдентификаторУстройства = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершенииПечати);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОписаниеЭтикеткиВXML"    , ОписаниеЭтикеткиВXML);
	Контекст.Вставить("ДанныеДляПечати"         , ДанныеДляПечати);
	
	Если ИдентификаторУстройства = Неопределено Тогда	
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПечатьЭтикеток_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ПринтерЭтикеток",
			НСтр("ru='Выберите принтер этикеток'"), 
			НСтр("ru='Принтер этикеток не подключен.'"), 
			НСтр("ru='Принтер этикеток не выбран.'"), 
			Истина);
	Иначе
		НачатьПечатьЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПечатьЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Принтер этикеток не выбран.'");
			Результат = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПечатьЭтикеток_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьПечатьЭтикеток_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда
		
		СообщениеОбОшибке = "";
		ОписаниеЭтикеткиВСтруктуре = Неопределено;
		Результат = МенеджерОборудованияВызовСервера.ПолучитьОписаниеМакета(Параметры.ОписаниеЭтикеткиВXML, СообщениеОбОшибке, ОписаниеЭтикеткиВСтруктуре);
		
		Если Не Результат Тогда
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				ОписаниеОшибки = НСтр("ru='При обработке макета этикетки произошла ошибка.
									  |%ОписаниеОшибки%
									  |Печать прервана.'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", СообщениеОбОшибке);
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
			КонецЕсли;
		Иначе
			ВходныеПараметры = Новый Массив();
			ВходныеПараметры.Добавить(ОписаниеЭтикеткиВСтруктуре);
			ВходныеПараметры.Добавить(Параметры.ДанныеДляПечати);
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПечатьЭтикеток_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ПечатьЭтикеток", ВходныеПараметры);
		КонецЕсли;
		
	ИначеЕсли Параметры.СледующееОповещение <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='При подключении устройства произошла ошибка.
							  |%ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатПодключения.ОписаниеОшибки);
		РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства); 
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПечатьЭтикеток_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
	Иначе
		ОписаниеОшибки = НСтр("ru='При работе с принтером этикеток произошла ошибка.
								  |%ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
	КонецЕсли;
		
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		Результат = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ОписаниеОшибки, Параметры.ИдентификаторУстройства); 
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Результат);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать инициализацию принтера этикеток.
//
Процедура НачатьИнициализацияПринтераЭтикеток(ОповещениеПриЗавершенииПечати, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершенииПечати);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	
	Если ИдентификаторУстройства = Неопределено Тогда	
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьИнициализацияПринтераЭтикеток_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ПринтерЭтикеток",
			НСтр("ru='Выберите принтер этикеток'"), 
			НСтр("ru='Принтер этикеток не подключен.'"), 
			НСтр("ru='Принтер этикеток не выбран.'"), 
			Истина);
	Иначе
		НачатьИнициализацияПринтераЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьИнициализацияПринтераЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Принтер этикеток не выбран.'");
			Результат = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьИнициализацияПринтераЭтикеток_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьИнициализацияПринтераЭтикеток_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда
		СообщениеОбОшибке = "";
		ВходныеПараметры = Новый Массив();
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьИнициализацияПринтераЭтикеток_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ИнициализацияПринтера", ВходныеПараметры);
	ИначеЕсли Параметры.СледующееОповещение <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='При подключении устройства произошла ошибка.
							  |%ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатПодключения.ОписаниеОшибки);
		РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства); 
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьИнициализацияПринтераЭтикеток_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
	Иначе
		ОписаниеОшибки = НСтр("ru='При работе с принтером этикеток произошла ошибка.
								  |%ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
	КонецЕсли;
		
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		Результат = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ОписаниеОшибки, Параметры.ИдентификаторУстройства); 
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Результат);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать редактирование макета.
//
Процедура НачатьРедактированиеМакета(ОповещениеПриЗавершенииРедактирования, ОписаниеЭтикеткиВXML, АдресХранилищаСКД) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение", ОповещениеПриЗавершенииРедактирования);
	Контекст.Вставить("XMLОписаниеМакета"  , ОписаниеЭтикеткиВXML);
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьРедактированиеМакета_Завершение", ЭтотОбъект, Контекст);
	
	ИмяФормы = "ОбщаяФорма.РедакторЭтикетокФормаРедактированияМакета";
	Попытка
		ОткрытьФорму(ИмяФормы, Новый Структура("АдресХранилищаСКД", АдресХранилищаСКД),,,,, ОповещениеПриЗавершении);
	Исключение
		ТекстСообщения = НСтр("ru='Использование редактора этикеток невозможно! Функциональность не поддерживается.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьРедактированиеМакета_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("РазмерМакета",      ?(Результат <> Неопределено, ДополнительныеПараметры.РазмерМакета, Неопределено));
	ДопПараметры.Вставить("XMLОписаниеМакета", ?(Результат <> Неопределено, ДополнительныеПараметры.XMLОписаниеМакета, Неопределено));
	ДопПараметры.Вставить("Поля",              ?(Результат <> Неопределено, ДополнительныеПараметры.Поля, Неопределено));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ДополнительныеПараметры.СледующееОповещение.ИмяПроцедуры, ДополнительныеПараметры.СледующееОповещение.Модуль, ДопПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ?(Результат <> Неопределено, Результат, КодВозвратаДиалога.Отмена));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыCВесамиСПечатьюЭтикеток

// Начать выгрузку данных в терминал сбора данных.
//
Процедура НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток(ОповещениеПриЗавершении, УникальныйИдентификатор, ТаблицаВыгрузкиТоваров, ИдентификаторУстройства = Неопределено, ЧастичнаяВыгрузка = Ложь, ОтображатьСообщения = Ложь) Экспорт
	
	Если ТаблицаВыгрузкиТоваров.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Нет данных для выгрузки!'");
		Если ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ТекстСообщения;
			РезультатОперации.ИдентификаторУстройства = ИдентификаторУстройства;
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Контекст = Новый Структура; 
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ТаблицаВыгрузкиТоваров"  , ТаблицаВыгрузкиТоваров);
	Контекст.Вставить("ЧастичнаяВыгрузка"       , ЧастичнаяВыгрузка);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ВесыСПечатьюЭтикеток",
			НСтр("ru='Выберите весы с печатью этикеток'"),
			НСтр("ru='Весы с печатью этикеток не подключены.'"), 
			НСтр("ru='Весы с печатью этикеток не выбраны.'"), 
			Истина);
	Иначе
		НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='Весы с печатью этикеток не выбраны.'");
			Результат = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Неопределено);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
#Иначе
	// В тонком и толстом клиентах расширение подключено всегда.
	НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ФайловоеРасширениеЗавершение(Истина, Параметры);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Подключено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ПодключениеЗавершение", ЭтотОбъект, Параметры);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	Иначе
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда
		
		ВходныеПараметры  = Новый Массив;
		ВходныеПараметры.Добавить(Параметры.ТаблицаВыгрузкиТоваров);
		ВходныеПараметры.Добавить(Параметры.ЧастичнаяВыгрузка); // Частичная выгрузка.
		ВыходныеПараметры = Неопределено;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ВыгрузитьТовары", ВходныеПараметры);
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
								  |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатПодключения.ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатОперации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ТекстСообщения = НСтр("ru='Ошибок нет.'");
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
								  |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
		
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатОперации);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать очистку товаров в весах с печатью этикеток.
//
Процедура НачатьОчисткуТоваровВВесахСПечатьюЭтикеток(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Ложь) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ВесыСПечатьюЭтикеток",
			НСтр("ru='Выберите весы с печатью этикеток'"), 
			НСтр("ru='Весы с печатью этикеток не подключены.'"),
			НСтр("ru='Весы с печатью этикеток не выбраны.'"), 
			Истина);
	Иначе
		НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
		
КонецПроцедуры

Процедура НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Весы с печатью этикеток не выбраны.'");
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, Неопределено);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	ТекстСообщения = НСтр("ru='Ошибок нет.'");
	
	Если РезультатПодключения.Результат Тогда
		ВходныеПараметры  = Неопределено;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ОчиститьБазу", ВходныеПараметры);
	Иначе
		ОписаниеОшибки = НСтр("ru='При подключении устройства произошла ошибка. |%ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатПодключения.ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
	Иначе
		ОписаниеОшибки = НСтр("ru='При очистке данных в оборудование произошла ошибка. |%ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
	КонецЕсли;
	
	Если Параметры.ОтображатьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатОперации);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСОборудованиемККМOffline

// Выгружает настройки на ККМ оффлайн
//
Процедура НачатьВыгрузкуНастроекВККМOffline(ОповещениеПриВыгрузкеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено,
	СтруктураНастроек = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриВыгрузкеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("СтруктураНастроек"       , СтруктураНастроек);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуНастроекВККМOfflineЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ККМOffline",
			НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены.'"));
	Иначе
		НачатьВыгрузкуНастроекВККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуНастроекВККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	#Если ВебКлиент Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуНастроекВККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
		ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
	#Иначе
		// В тонком и толстом клиентах расширение подключено всегда.
		НачатьВыгрузкуНастроекВККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
	#КонецЕсли
	
КонецПроцедуры

Процедура НачатьВыгрузкуНастроекВККМOfflineФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	 
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Параметры.ИдентификаторУстройства);
	ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ДанныеОборудования.ОбработчикДрайвера, Не ДанныеОборудования.ВСоставеКонфигурации, ДанныеОборудования.ТипОборудованияИмя);
	ПоддержкаАсинхронногоРежима = ОбработчикДрайвера.ПоддержкаАсинхронногоРежима();
	
	Результат = ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		Состояние(НСтр("ru='Выполняется выгрузка настроек в ККМ Offline...'")); 
		
		ВходныеПараметры  = Параметры.СтруктураНастроек;
		ВыходныеПараметры = Неопределено;
		
		Если ПоддержкаАсинхронногоРежима Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуНастроекВККМOfflineВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ВыгрузитьНастройки", ВходныеПараметры);
		Иначе
			Результат = ВыполнитьКоманду(Параметры.ИдентификаторУстройства, "ВыгрузитьНастройки", ВходныеПараметры, ВыходныеПараметры);
			
			Если НЕ Результат Тогда
				ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
										  |%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			Иначе
				ТекстСообщения = НСтр("ru='Данные выгружены успешно.'");
			КонецЕсли;
			
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		КонецЕсли;
		
		ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
									|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуНастроекВККМOfflineВыполнитьКомандуЗавершение(РезультатКоманды, Параметры) Экспорт
	
	Если НЕ РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
								  |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатКоманды.ВыходныеПараметры[1]);
	Иначе
		ТекстСообщения = НСтр("ru='Данные выгружены успешно.'");
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", РезультатКоманды.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);

КонецПроцедуры

// Очищает товары в ККМ Offline.
//
Процедура НачатьОчисткуТоваровВККМOffline(ОповещениеПриОчисткеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриОчисткеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВККМOfflineЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ККМOffline",
			НСтр("ru='Выберите ККМ Offline'"), 
			НСтр("ru='ККМ Offline не подключены.'"),
			НСтр("ru='ККМ Offline не не выбрано.'"), 
			НЕ ОтображатьСообщения);
	Иначе
		НачатьОчисткуТоваровВККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Неопределено);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
#Иначе
	// В тонком и толстом клиентах расширение подключено всегда.
	НачатьОчисткуТоваровВККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВККМOfflineФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ВремРасширеннаяВыгрузка = Ложь;
	ПоддержкаАсинхронногоРежима = Ложь;
	
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	ВремРасширеннаяВыгрузка = ВыполнитьКомандуОбработчикаДрайвера("РасширеннаяВыгрузка", ВходныеПараметры, ВыходныеПараметры, Параметры.ИдентификаторУстройства, Неопределено, ПоддержкаАсинхронногоРежима);
	
	Результат = ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		Состояние(НСтр("ru='Выполняется очистка товаров в ККМ Offline...'"));
		
		ВходныеПараметры  = Неопределено;
		ВыходныеПараметры = Неопределено;
		
		Если ПоддержкаАсинхронногоРежима Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВККМOfflineВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ОчиститьБазу", ВходныеПараметры);
		Иначе
			Результат = ВыполнитьКоманду(Параметры.ИдентификаторУстройства, "ОчиститьБазу", ВходныеПараметры, ВыходныеПараметры);
			Если НЕ Результат Тогда
				ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
										  |%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			Иначе
				ТекстСообщения = НСтр("ru='Очистка данных успешно завершена.'");
			КонецЕсли;
			
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
									|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВККМOfflineВыполнитьКомандуЗавершение(РезультатКоманды, Параметры) Экспорт
	
	Если НЕ РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
								|%ОписаниеОшибки%'");
		ОписаниеОшибки = ?(РезультатКоманды.ВыходныеПараметры.Количество() > 1, РезультатКоманды.ВыходныеПараметры[1], "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
	Иначе
		ТекстСообщения = НСтр("ru='Очистка данных успешно завершена.'");
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", РезультатКоманды.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);

КонецПроцедуры

Процедура НачатьОчисткуНастроекВККМOffline(ОповещениеПриОчисткеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриОчисткеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуНастроекВККМOfflineЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ККМOffline",
			НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены.'"));
	Иначе
		НачатьОчисткуНастроекВККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуНастроекВККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Неопределено);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
#Иначе
	// В тонком и толстом клиентах расширение подключено всегда.
	НачатьОчисткуНастроекВККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьОчисткуНастроекВККМOfflineФайловоеРасширениеЗавершение(Подключено, Параметры)
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	
	Результат = ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		Состояние(НСтр("ru='Выполняется очистка товаров в ККМ Offline...'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуНастроекВККМOfflineВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ОчиститьНастройки", ВходныеПараметры);
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
									|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуНастроекВККМOfflineВыполнитьКомандуЗавершение(РезультатКоманды, Параметры) Экспорт
	
	Если НЕ РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
								|%ОписаниеОшибки%'");
		ОписаниеОшибки = ?(РезультатКоманды.ВыходныеПараметры.Количество() > 1, РезультатКоманды.ВыходныеПараметры[1], "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
	Иначе
		ТекстСообщения = НСтр("ru='Очистка данных успешно завершена.'");
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", РезультатКоманды.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);

КонецПроцедуры

// Выгружает таблицу с данными в ККМ Offline.
// 
Процедура НачатьВыгрузкуДанныеВККМOffline(ОповещениеПриВыгрузкеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено,
	ТаблицаВыгрузкиТоваров, ЧастичнаяВыгрузка = Ложь, ОтображатьСообщения = Истина, РасширеннаяВыгрузка = Ложь) Экспорт
	
	Если ТаблицаВыгрузкиТоваров.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Нет данных для выгрузки!'");
		Если ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если ОповещениеПриВыгрузкеДанные <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(ОповещениеПриВыгрузкеДанные, РезультатВыполнения);
		КонецЕсли;
		Возврат;
		
	Иначе
		
		ДублирующиесяКоды = "";
		
		Если РасширеннаяВыгрузка Тогда
			ГруппыТоваров = ТаблицаВыгрузкиТоваров.ГруппыТоваров;
			Товары = ТаблицаВыгрузкиТоваров.Товары;
		Иначе
			ГруппыТоваров = Неопределено;
			Товары = ТаблицаВыгрузкиТоваров;
		КонецЕсли;
		
		Если МенеджерОборудованияВызовСервера.ПроверитьДублированиеКодов(РасширеннаяВыгрузка, ГруппыТоваров, Товары, ДублирующиесяКоды) Тогда
			
			ТекстСообщения = НСтр("ru='Выгрузка невозможна! Дублируются следующие коды товаров: %1'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ДублирующиесяКоды);
			
			Если ОтображатьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если ОповещениеПриВыгрузкеДанные <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, ИдентификаторУстройства);
				ВыполнитьОбработкуОповещения(ОповещениеПриВыгрузкеДанные, РезультатВыполнения);
			КонецЕсли;
		
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриВыгрузкеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ТаблицаВыгрузкиТоваров"  , ТаблицаВыгрузкиТоваров);
	Контекст.Вставить("ЧастичнаяВыгрузка"       , ЧастичнаяВыгрузка);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("РасширеннаяВыгрузка"     , РасширеннаяВыгрузка);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВККМOfflineЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ККМOffline",
			НСтр("ru='Выберите ККМ Offline'"),
			НСтр("ru='ККМ Offline не подключены.'")	,
			НСтр("ru='ККМ Offline не не выбрано.'"), 
			НЕ ОтображатьСообщения);
	Иначе
		НачатьВыгрузкуДанныеВККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Неопределено);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
#Иначе
	// В тонком и толстом клиентах расширение подключено всегда.
	НачатьВыгрузкуДанныеВККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВККМOfflineФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ВремРасширеннаяВыгрузка = Ложь;
	ПоддержкаАсинхронногоРежима = Ложь;
	
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	ВремРасширеннаяВыгрузка = ВыполнитьКомандуОбработчикаДрайвера("РасширеннаяВыгрузка", ВходныеПараметры, ВыходныеПараметры, Параметры.ИдентификаторУстройства, Неопределено, ПоддержкаАсинхронногоРежима);
	
	Если Параметры.РасширеннаяВыгрузка И НЕ ВремРасширеннаяВыгрузка Тогда
		ТекстСообщения = НСтр("ru='Операция расширенной выгрузки не доступна для выбранного драйвера.'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Результат = ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		Состояние(НСтр("ru='Выполняется выгрузка товаров в ККМ Offline...'"));
		
		ВходныеПараметры  = Новый Массив;
		Если ВремРасширеннаяВыгрузка И НЕ Параметры.РасширеннаяВыгрузка Тогда
			МассивВыгрузкиТоваров = МенеджерОборудованияКлиентСервер.ПолучитьСтруктуруПрайсЛиста();
			МассивВыгрузкиТоваров.ПолнаяЗагрузка = НЕ Параметры.ЧастичнаяВыгрузка;
			
			Для Каждого СтрокаТЧ Из Параметры.ТаблицаВыгрузкиТоваров Цикл
				ЭлементМассива = МенеджерОборудованияКлиентСервер.ПолучитьСтруктуруЗаписиМассиваТовары();
				ЭлементМассива.Код                 = СтрокаТЧ.Код;
				ЭлементМассива.Артикул             = ?(СтрокаТЧ.Свойство("Артикул"), СтрокаТЧ.Артикул, "");
				
				ЭлементМассива.УникальныйИдентификатор = ?(СтрокаТЧ.Свойство("УникальныйИдентификатор") И ЗначениеЗаполнено(СтрокаТЧ.УникальныйИдентификатор), 
					СтрокаТЧ.УникальныйИдентификатор, Строка(Новый УникальныйИдентификатор));
				
				Если ТипЗнч(СтрокаТЧ.Штрихкод) = Тип("Массив") Тогда
					
					Для Каждого Штрихкод Из СтрокаТЧ.Штрихкод Цикл
						Если НЕ ЗначениеЗаполнено(ЭлементМассива.Штрихкод) Тогда
							ЭлементМассива.Штрихкод = Штрихкод;
						Иначе
							ЭлементМассива.Штрихкод = ЭлементМассива.Штрихкод + "," + Штрихкод;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЭлементМассива.Штрихкод            = Строка(СтрокаТЧ.Штрихкод);
				КонецЕсли;
				
				ЭлементМассива.Наименование        = СтрокаТЧ.Наименование;
				ЭлементМассива.ЕдиницаИзмерения    = СтрокаТЧ.ЕдиницаИзмерения;
				ЭлементМассива.Цена                = СтрокаТЧ.Цена;
				ЭлементМассива.Остаток             = ?(СтрокаТЧ.Свойство("Остаток"), СтрокаТЧ.Остаток, 0);
				ЭлементМассива.Весовой             = ?(СтрокаТЧ.Свойство("ВесовойТовар"), СтрокаТЧ.ВесовойТовар, Ложь);
				ЭлементМассива.СтавкаНДС           = ?(СтрокаТЧ.Свойство("СтавкаНДС"), СтрокаТЧ.СтавкаНДС, ?(СтрокаТЧ.Свойство("НДС"), СтрокаТЧ.НДС, 0));
				ЭлементМассива.ИмеетХарактеристики = Ложь;
				ЭлементМассива.ИмеетУпаковки       = Ложь;
				ЭлементМассива.УникальныйИдентификатор = ?(СтрокаТЧ.Свойство("УникальныйИдентификатор"), СтрокаТЧ.УникальныйИдентификатор, Неопределено);
				ЭлементМассива.Алкоголь           = ?(СтрокаТЧ.Свойство("Алкоголь"), СтрокаТЧ.Алкоголь, Ложь);
				Если ЭлементМассива.Алкоголь Тогда
					ЭлементМассива.Маркируемый = СтрокаТЧ.Маркируемый;
					ЭлементМассива.КодВидаАлкогольнойПродукции = СтрокаТЧ.КодВидаАлкогольнойПродукции;
					ЭлементМассива.ЕмкостьТары = СтрокаТЧ.ЕмкостьТары;
					ЭлементМассива.Крепость = СтрокаТЧ.Крепость;
					ЭлементМассива.ИННПроизводителя = СтрокаТЧ.ИННПроизводителя;
					ЭлементМассива.КПППроизводителя = СтрокаТЧ.КПППроизводителя;
				КонецЕсли;
				МассивВыгрузкиТоваров.Товары.Добавить(ЭлементМассива);
			КонецЦикла;
			ВходныеПараметры.Добавить(МассивВыгрузкиТоваров);
		Иначе
			ВходныеПараметры.Добавить(Параметры.ТаблицаВыгрузкиТоваров);
		КонецЕсли;
		
		ВходныеПараметры.Добавить(Параметры.ЧастичнаяВыгрузка); // Частичная выгрузка.
		ВходныеПараметры.Добавить(Параметры.РасширеннаяВыгрузка); // Расширенная выгрузка.
		ВыходныеПараметры = Неопределено;
		
		Если ПоддержкаАсинхронногоРежима Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВККМOfflineВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ВыгрузитьТовары", ВходныеПараметры);
		Иначе
			Результат = ВыполнитьКоманду(Параметры.ИдентификаторУстройства, "ВыгрузитьТовары", ВходныеПараметры, ВыходныеПараметры);
			Если НЕ Результат Тогда
				ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
										  |%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			Иначе
				ТекстСообщения = НСтр("ru='Данные выгружены успешно.'");
			КонецЕсли;
			
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
									|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВККМOfflineВыполнитьКомандуЗавершение(РезультатКоманды, Параметры) Экспорт
	
	Если НЕ РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
								  |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатКоманды.ВыходныеПараметры[1]);
	Иначе
		ТекстСообщения = НСтр("ru='Данные выгружены успешно.'");
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", РезультатКоманды.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);

КонецПроцедуры

// Начать загрузку данных из ККМ Offline.
// УникальныйИдентификатор - идентификатор формы.
// ОповещениеПриЗагрузкеДанные - оповещение при завершении выгрузки данных.
//
Процедура НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOffline(ОповещениеПриЗагрузкеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина, РасширеннаяЗагрузка = Ложь) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗагрузкеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("РасширеннаяЗагрузка"     , РасширеннаяЗагрузка);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ККМOffline",
			НСтр("ru='Выберите ККМ Offline'"), 
			НСтр("ru='ККМ Offline не подключены.'"),
			НСтр("ru='ККМ Offline не не выбрано.'"), 
			НЕ ОтображатьСообщения);
	Иначе
		НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
		
КонецПроцедуры

Процедура НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Неопределено);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
#Иначе
	// В тонком и толстом клиентах расширение подключено всегда.
	НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ВремРасширеннаяЗагрузка = Ложь;
	ПоддержкаАсинхронногоРежима = Ложь;
	
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	ВремРасширеннаяЗагрузка = ВыполнитьКомандуОбработчикаДрайвера("РасширеннаяЗагрузка", ВходныеПараметры, ВыходныеПараметры, Параметры.ИдентификаторУстройства, Неопределено, ПоддержкаАсинхронногоРежима);
	
	Если Параметры.РасширеннаяЗагрузка И НЕ ВремРасширеннаяЗагрузка Тогда
		ТекстСообщения = НСтр("ru='Операция расширенной загрузки не доступна для выбранного драйвера.'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Результат = ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		Состояние(НСтр("ru='Выполняется загрузка товаров из ККМ Offline...'"));
		
		ВходныеПараметры  = Новый Массив;
		ВыходныеПараметры = Неопределено;
		
		ИмяКоманды = ?(ВремРасширеннаяЗагрузка И Параметры.РасширеннаяЗагрузка, "ЗагрузитьРасширенныйОтчет", "ЗагрузитьОтчет");
		
		Если ПоддержкаАсинхронногоРежима Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, ИмяКоманды, ВходныеПараметры);
		Иначе
			Результат = ВыполнитьКоманду(Параметры.ИдентификаторУстройства, ИмяКоманды, ВходныеПараметры, ВыходныеПараметры);
			Если НЕ Результат Тогда
				ТекстСообщения = НСтр("ru='При загрузке данных из ККМ Offline произошла ошибка.
										  |%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
				ТаблицаТоваров = Неопределено;
			Иначе
				ТаблицаТоваров = ВыходныеПараметры[0];
				ТекстСообщения = НСтр("ru='Данные загружены успешно.'");
			КонецЕсли;
			
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				
				РезультатВыполнения = Новый Структура;
				
				РезультатВыполнения.Вставить("Результат", Результат);
				РезультатВыполнения.Вставить("ОписаниеОшибки", ТекстСообщения);
				РезультатВыполнения.Вставить("ТаблицаТоваров", ТаблицаТоваров);
				РезультатВыполнения.Вставить("ИдентификаторУстройства", Параметры.ИдентификаторУстройства);
				РезультатВыполнения.Вставить("РасширеннаяЗагрузка", Параметры.РасширеннаяЗагрузка);
				
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
				
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
									|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineВыполнитьКомандуЗавершение(РезультатКоманды, Параметры) Экспорт
	
	Если НЕ РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='При загрузке данных из ККМ Offline произошла ошибка. %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатКоманды.ВыходныеПараметры[1]);
		ТаблицаТоваров = Неопределено;
	Иначе
		ТаблицаТоваров = РезультатКоманды.ВыходныеПараметры[0];
		ТекстСообщения = НСтр("ru='Данные загружены успешно.'");
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(РезультатКоманды.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);;
		РезультатВыполнения.Вставить("ТаблицаТоваров", ТаблицаТоваров);
		РезультатВыполнения.Вставить("РасширеннаяЗагрузка", Параметры.РасширеннаяЗагрузка);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать выставление флага о загрузке отчета.
//
Процедура НачатьВыставитьФлагОтчетЗагруженККМOffline(УникальныйИдентификатор, ИдентификаторУстройства, ОтображатьСообщения = Истина) Экспорт;
	
	ОписаниеОшибки = "";
	
	Результат = ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
	Если Результат Тогда
		ВходныеПараметры  = Неопределено;
		ВыходныеПараметры = Неопределено;
		
		Параметры = Новый Структура("УникальныйИдентификатор, ИдентификаторУстройства", УникальныйИдентификатор, ИдентификаторУстройства);
		ПоддержкаАсинхронногоРежима = Ложь;
		ВыполнитьКомандуОбработчикаДрайвера("РасширеннаяЗагрузка", ВходныеПараметры, Неопределено, ИдентификаторУстройства, Неопределено, ПоддержкаАсинхронногоРежима);
		
		Если ПоддержкаАсинхронногоРежима Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыставитьФлагОтчетЗагруженККМOfflineЗавершение", ЭтотОбъект, Параметры);
			НачатьВыполнениеКоманды(ОписаниеОповещения, ИдентификаторУстройства, "ОтчетЗагружен", ВходныеПараметры);
		Иначе
			ВыполнитьКоманду(ИдентификаторУстройства, "ОтчетЗагружен", ВходныеПараметры, ВыходныеПараметры);
			ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
		КонецЕсли;
	Иначе
		Если ОтображатьСообщения Тогда
			ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
								  |%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыставитьФлагОтчетЗагруженККМOfflineЗавершение(РезультатКоманды, Параметры) Экспорт
	
	ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСОборудованиемRFID

// Заполняет структуру параметров записи метки RFID.
// 
Функция ПараметрыЗаписиМеткиRFID() Экспорт; 
	
	Результат = Новый Структура();
	Результат.Вставить("TID"       , Неопределено);
	Результат.Вставить("EPC"       , Неопределено);
	Результат.Вставить("Данные"    , Неопределено);
	Результат.Вставить("БанкПамяти", "EPC");
	Возврат Результат;
	
КонецФункции

// Начать открытие сессии считывателя RFID.
//
Процедура НачатьОткрытиеСессииСчитывателяRFID(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено) Экспорт
	
	ПодключенныеУстройства = ПолучитьПодключенныеУстройства(глПодключаемоеОборудование.ПараметрыПодключенияПО, 
		ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.СчитывательRFID"), ИдентификаторУстройства);
	
	Если ПодключенныеУстройства.Количество() > 0 Тогда
		Для Каждого Устройство Из ПодключенныеУстройства Цикл
			Контекст = Новый Структура;
			Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
			Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
			Контекст.Вставить("ИдентификаторУстройства" , Устройство.Ссылка);
			Оповещение = Новый ОписаниеОповещения("НачатьОткрытиеСессииСчитывателяRFID_ВыполнитьКомандуЗавершение", ЭтотОбъект, Контекст);
			ВходныеПараметры  = Новый Массив();
			НачатьВыполнениеКоманды(Оповещение, Устройство.Ссылка, "OpenSessionRFID", ВходныеПараметры);
		КонецЦикла
	ИначеЕсли  ОповещениеПриЗавершении <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Нет подключенных RFID считывателей.'");
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
		
КонецПроцедуры

Процедура НачатьОткрытиеСессииСчитывателяRFID_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = "";
	Иначе
		ОписаниеОшибки = НСтр("ru='При работе со считывателем RFID произошла ошибка: %ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Начать закрытие сессии считывателя RFID.
//
Процедура НачатьЗакрытиеСессииСчитывателяRFID(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено) Экспорт
	
	ПодключенныеУстройства = ПолучитьПодключенныеУстройства(глПодключаемоеОборудование.ПараметрыПодключенияПО, 
		ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.СчитывательRFID"), ИдентификаторУстройства);
	
	Если ПодключенныеУстройства.Количество() > 0 Тогда
		Для Каждого Устройство Из ПодключенныеУстройства Цикл
			Контекст = Новый Структура;
			Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
			Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
			Контекст.Вставить("ИдентификаторУстройства" , Устройство.Ссылка);
			Оповещение = Новый ОписаниеОповещения("НачатьЗакрытиеСессииСчитывателяRFID_ВыполнитьКомандуЗавершение", ЭтотОбъект, Контекст);
			
			ВходныеПараметры  = Новый Массив();
			НачатьВыполнениеКоманды(Оповещение, Устройство.Ссылка, "CloseSessionRFID", ВходныеПараметры);
		КонецЦикла
	ИначеЕсли  ОповещениеПриЗавершении <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Нет подключенных RFID считывателей.'");
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
		
КонецПроцедуры

Процедура НачатьЗакрытиеСессииСчитывателяRFID_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = "";
	Иначе
		ОписаниеОшибки = НСтр("ru='При работе со считывателем RFID произошла ошибка: %ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗаписьДанныхВМеткуRFID(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, ПараметрыЗаписи, Таймаут = 0) Экспорт 
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ПараметрыЗаписи"         , ПараметрыЗаписи);
	Контекст.Вставить("Таймаут"                 , Таймаут);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗаписьДанныхВМеткуRFID_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "СчитывательRFID",
			НСтр("ru='Выберите RFID считыватель'"), НСтр("ru='Нет подключенных RFID считывателей.'"));
	Иначе
		НачатьЗаписьДанныхВМеткуRFID_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗаписьДанныхВМеткуRFID_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='RFID считыватель  не подключен.'");
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	ВходныеПараметры  = Новый Массив();
	ВходныеПараметры.Добавить(Параметры.ПараметрыЗаписи);
	ВходныеПараметры.Добавить(Параметры.Таймаут);
	
	Оповещение = Новый ОписаниеОповещения("НачатьЗаписьДанныхВМеткуRFID_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
	НачатьВыполнениеКоманды(Оповещение, ИдентификаторУстройства, "SaveDataTagRFID", ВходныеПараметры);
	
КонецПроцедуры

Процедура НачатьЗаписьДанныхВМеткуRFID_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОписаниеОшибки = ""; 
	Если НЕ РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = НСтр("ru='При работе со считывателем RFID произошла ошибка: %ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения.Результат, ОписаниеОшибки, Параметры.ИдентификаторУстройства); 
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыСФайлами

// Процедура получения содержания текстовых файлов
// Параметры:
//  ИменаФайлов  - Строка или Массив - имя файла или массив с именами файлов.
//  ОписаниеОповещенияПриЗавершении  - ОписаниеОповещения - вызывается после завершения чтения файлов.
//  Кодировка - КодировкаТекста - кодировка при чтении текстового файла, по умолчанию КодировкаТекста.UTF8.
//
Процедура ПолучитьСодержаниеТекстовыхФайлов(ИменаФайлов, ОписаниеОповещенияПриЗавершении, Кодировка = Неопределено) Экспорт
	
	ПомещаемыеФайлы = Новый Массив;
	
	Если Кодировка = Неопределено Тогда
		Кодировка = КодировкаТекста.UTF8;
	КонецЕсли;
	
	Если ТипЗнч(ИменаФайлов) = Тип("Строка") Тогда
		
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ИменаФайлов);
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
		
	ИначеЕсли ТипЗнч(ИменаФайлов) = Тип("Массив") Тогда
		
		Если ИменаФайлов.Количество() = 0 Тогда
			
			РезультатЧтенияФайлов = Новый Структура;
			РезультатЧтенияФайлов.Вставить("СодержаниеФайлов", Новый Массив);
			РезультатЧтенияФайлов.Вставить("Успешно", Истина);
			РезультатЧтенияФайлов.Вставить("ТекстОшибки","");
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, РезультатЧтенияФайлов);
			
			Возврат;
			
		Иначе
			Для Каждого ИмяФайла Из ИменаФайлов Цикл
				ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияПриЗавершении", ОписаниеОповещенияПриЗавершении);
		ДополнительныеПараметры.Вставить("Кодировка", Кодировка);
		
		ОповещениеНачатьПомещениеФайла = Новый ОписаниеОповещения("ПолучитьСодержаниеТекстовыхФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайлов(ОповещениеНачатьПомещениеФайла, ПомещаемыеФайлы,, Ложь);
		
	#Иначе
		
		Содержание = Новый Массив;
		РезультатЧтенияФайлов = Новый Структура;
		РезультатЧтенияФайлов.Вставить("СодержаниеФайлов", Неопределено);
		РезультатЧтенияФайлов.Вставить("Успешно", Ложь);
		РезультатЧтенияФайлов.Вставить("ТекстОшибки", "");
		
		Для Каждого Файл Из ПомещаемыеФайлы Цикл
			
			СтруктураСодержанияФайла = Новый Структура;
			
			Попытка
				
				ЧтениеТекста = Новый ЧтениеТекста(Файл.Имя, Кодировка);
				ТекстСодержания = ЧтениеТекста.Прочитать();
				
			Исключение
				
				ТекстСообщения =  НСтр("ru = 'При чтении файла %ИмяФайла% произошла ошибка'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
				
				РезультатЧтенияФайлов.ТекстОшибки = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
				ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, РезультатЧтенияФайлов);
				Возврат;
				
			КонецПопытки;
			
			СтруктураСодержанияФайла.Вставить("ОписаниеПереданногоФайла", Файл);
			СтруктураСодержанияФайла.Вставить("ТекстСодержания",          ТекстСодержания);
			
			Содержание.Добавить(СтруктураСодержанияФайла);
			ЧтениеТекста.Закрыть();
			
		КонецЦикла;
		
		РезультатЧтенияФайлов.Успешно = Истина;
		РезультатЧтенияФайлов.СодержаниеФайлов = Содержание;
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, РезультатЧтенияФайлов);
		
	#КонецЕсли
	
КонецПроцедуры

// Процедура оповещения получения содержания текстовых файлов
// Вызывается из процедуры ПолучитьСодержаниеТекстовыхФайлов
//
Процедура ПолучитьСодержаниеТекстовыхФайловЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	РезультатЧтенияФайлов = Новый Структура;
	РезультатЧтенияФайлов.Вставить("СодержаниеФайлов", Неопределено);
	РезультатЧтенияФайлов.Вставить("Успешно", Ложь);
	РезультатЧтенияФайлов.Вставить("ТекстОшибки", "");
	
	Если ПомещенныеФайлы = Неопределено Тогда
		
		РезультатЧтенияФайлов.ТекстОшибки = НСтр("ru = 'Неизвестная ошибка при передаче файлов на сервер.'");
	
	Иначе
		
		Если Не ПомещенныеФайлы.Количество() = 0 Тогда
		
			РезультатИзвлеченияТекста = МенеджерОборудованияВызовСервера.ПолучитьСодержаниеТекстовыхФайловИзХранилища(
				ПомещенныеФайлы, ДополнительныеПараметры.Кодировка);
				
				
			ЗаполнитьЗначенияСвойств(РезультатЧтенияФайлов, РезультатИзвлеченияТекста);
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении, РезультатЧтенияФайлов);
	
КонецПроцедуры

Процедура ПредложитьВыбратьСмену(ОповещениеВыбора, ТекстЗаголовкаВыбора,
	СообщениеНеПодключен = "", СообщениеНеВыбран = "", БезСообщений = Ложь, ТекстСообщения = "") Экспорт
	
	Если Не ОбновитьРабочееМестоКлиента() Тогда
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		Если Не БезСообщений Тогда
		      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СтруктураПараметрыОтбора = Новый Структура();
	СтруктураПараметрыОтбора.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыКассовойСмены.Открыта"));
	
	СтруктураРезультата = Новый Структура();
	СтруктураРезультата.Вставить("КассоваяСмена", "Ссылка");
	СтруктураРезультата.Вставить("ИдентификаторУстройства", "ФискальноеУстройство");
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение" , ОповещениеВыбора);
	Контекст.Вставить("СообщениеНеВыбран"   , ?(ПустаяСтрока(СообщениеНеВыбран), СообщениеНеПодключен, СообщениеНеВыбран));
	Контекст.Вставить("БезСообщений"        , БезСообщений);
	Контекст.Вставить("ТекстЗаголовкаВыбора", ТекстЗаголовкаВыбора);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("БезСообщений"        , БезСообщений);
	ПараметрыОткрытия.Вставить("ТекстЗаголовкаВыбора", ТекстЗаголовкаВыбора);
	ПараметрыОткрытия.Вставить("СтруктураПараметрыОтбора", СтруктураПараметрыОтбора);
	ПараметрыОткрытия.Вставить("СтруктураРезультата", СтруктураРезультата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьВыбратьСменуЗавершение", ЭтотОбъект, Контекст);
	ОткрытьФорму("Документ.КассоваяСмена.ФормаВыбора", ПараметрыОткрытия,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПредложитьВыбратьСменуЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено И НЕ Параметры.БезСообщений И Не ПустаяСтрока(Параметры.СообщениеНеВыбран) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Параметры.СообщениеНеВыбран);
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеКоманды_ВыбратьСменуЗавершение(СтруктураПараметровСмены, Параметры) Экспорт
	
	Если СтруктураПараметровСмены = Неопределено Тогда
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Кассовая смена не выбрана'");
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	Иначе
		Параметры.Вставить("КассоваяСмена", СтруктураПараметровСмены.КассоваяСмена);
		Параметры.Вставить("ИдентификаторУстройства", СтруктураПараметровСмены.ИдентификаторУстройства);
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПодключениеЗавершение", ЭтотОбъект, Параметры);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, СтруктураПараметровСмены.ИдентификаторУстройства);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти