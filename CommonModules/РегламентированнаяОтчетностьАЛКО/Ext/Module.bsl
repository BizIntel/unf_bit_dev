
////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции регламентированных отчетов ФСРАР общего назначения:
// - для работы с регистрами сведений АЛКО;
// - для проверки, выгрузки, печати отчетов АЛКО
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПрограммныйИнтерфейсОбщие

// Определяет значение, отображаемое элементом формы, по имени элемента.
//
// Параметры:
//			Форма			- Управляемая форма.
//			ИмяЭлемента		- Строка - имя элемента формы.
//
// Возвращаемое значение:
//		Произвольное.
//
Функция ПолучитьЗначениеЭлементаФормы(Форма, ИмяЭлемента) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
	    Возврат Неопределено;	
	КонецЕсли; 
	
	ПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	Если НЕ ЗначениеЗаполнено(ПутьКДанным) Тогда
	    Возврат Неопределено;	
	КонецЕсли;
	
	ПозицияТочки = СтрНайти(ПутьКДанным, ".");
	Если ПозицияТочки > 0 Тогда
		
		ИмяАгрегатногоРеквизита = Лев(ПутьКДанным, ПозицияТочки - 1);
		ПутьКДанным = Сред(ПутьКДанным, ПозицияТочки + 1);
		
		// Например, Запись для формы записи регистра сведений.
		ЗначениеЭлемента = Форма[ИмяАгрегатногоРеквизита][ПутьКДанным];
		
	Иначе
		ЗначениеЭлемента = Форма[ПутьКДанным];
	КонецЕсли; 
		
	Возврат ЗначениеЭлемента;

КонецФункции

// Определяет неполное имя объекта метаданных по имени любой формы, относящейся к этому объекту.
//
// Параметры:
//
//			ИмяФормыОбъектаМетаданных	- Строка - имя любой формы объекта метаданных.
//
// Возвращаемое значение:
//		Строка.
//
// Пример:
//
// ИмяОбъекта = ПолучитьИмяОбъектаМетаданныхПоИмениФормы(ИмяФормы);
//
// Если имя формы например РегистрыСведений.СведенияРеглОтчетАлкоПрил11Раздел1.Форма.ФормаЗаписи
// то ИмяОбъекта = "СведенияРеглОтчетАлкоПрил11Раздел1"
//
Функция ПолучитьИмяОбъектаМетаданныхПоИмениФормы(ИмяФормыОбъектаМетаданных) Экспорт
	
	ИмяОбъектаСВидомОбъекта = Лев(ИмяФормыОбъектаМетаданных, СтрНайти(ИмяФормыОбъектаМетаданных, ".Форма.") -1);
	ПозТочкиПередИменемОбъекта = СтрНайти(ИмяОбъектаСВидомОбъекта, ".", НаправлениеПоиска.СКонца);
	Результат = Сред(ИмяОбъектаСВидомОбъекта, ПозТочкиПередИменемОбъекта + 1);
	
	Возврат Результат;
	
КонецФункции

// Определяет имя формы объекта по переданной ссылке.
//
// Параметры:
// 		Ссылка		- Любая ссылка - ссылка на объект метаданных.
//
// Возвращаемое значение:
// 		Строка - имя формы объекта ссылки.
//
Функция ПолучитьИмяФормыОбъекта(Ссылка) Экспорт
	
	ИмяОбъектаМетаданных = Ссылка.Метаданные().ПолноеИмя();
	
	ИмяФормыОбъекта = ИмяОбъектаМетаданных + ".ФормаОбъекта";
	
	Возврат ИмяФормыОбъекта;
	
КонецФункции

// Возращает строквое представления числа без разделения на группы, 0 представляется как "0".
//
// Параметры:
// 		ИсходноеЧисло		- Число.
//
// Возвращаемое значение:
// 		Строка - представление числа без разделения на группы, 0 представляется как "0".
//
Функция СтрокаЧГ0(ИсходноеЧисло) Экспорт
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

// Опеределяет все ли символы в переданной строке - цифры.
// Не используется посимвольный перебор, благодаря чему работает очень быстро,
// что важно при большом объеме проверок.
//
// Параметры:
// 		ПроверяемаяСтрока		- Строка.
//
// Возвращаемое значение:
// 		Булево - Истина если в строке все символы являются цифрами.
//
Функция ВСтрокеВсеЦифры(ПроверяемаяСтрока) Экспорт
	
	Если ПустаяСтрока(ПроверяемаяСтрока) = 1 Тогда
		// пустая строка не является строкой цифр
		Возврат Ложь;
	КонецЕсли;
	
	//Добавим цифру "1" для обработки ситуаций:
	// - наличие лидирующих нулей;
	// - введен один единственный символ не цифра. 
	Попытка
		ДлинаПроверяемойСтроки = СтрДлина(Формат(Цел(Число("1" + СокрЛП(ПроверяемаяСтрока))), "ЧГ=0;ЧВН"));
	Исключение
		// Если возникло исключение - значит не смогли преобразовать к числу "1" + СокрЛП(ПроверяемаяСтрока).
		Возврат Ложь;
	КонецПопытки;
	
	Возврат  ДлинаПроверяемойСтроки = (СтрДлина(ПроверяемаяСтрока) + 1);
	
КонецФункции

// Создает поток XML в необходимой кодировке, в виде строки или в виде файла.
//
// Параметры:
// 		Кодировка		- Строка. - Необязательный. Название кодировки.
//		ИмяФайлаXML		- Строка. - Необязательный. Имя файла, в который нужно начать писать поток XML.
//
// Возвращаемое значение:
// 		ЗаписьXML  	- с установленной строкой кодировки и в случае переданного имени файла, 
//					с открытым файлом для записи информации XML.
//
Функция СоздатьНовыйПотокXML(Кодировка = "windows-1251", ИмяФайлаXML = Неопределено) Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	
	
	ПотокXML.Отступ = Истина;
	
	Если ЗначениеЗаполнено(ИмяФайлаXML) Тогда
	    ПотокXML.ОткрытьФайл(ИмяФайлаXML, Кодировка);
	Иначе
		ПотокXML.УстановитьСтроку(Кодировка);
	КонецЕсли;
	
	ПотокXML.ЗаписатьОбъявлениеXML();
	
	Возврат ПотокXML;
	
КонецФункции

// Заменяет в строке буквы русского алфавита на буквы латинского, в соответсвии с правилами транслитерации.
//
// Параметры:
// 		Стр				- Строка.
//
// Возвращаемое значение:
// 		Строка	
//
Функция Транслит(Стр) Экспорт

	СоответствиеСимволов = Новый Соответствие;
	СоответствиеСимволов.Вставить("А", "A");
	СоответствиеСимволов.Вставить("Б", "B");
	СоответствиеСимволов.Вставить("В", "V");
	СоответствиеСимволов.Вставить("Г", "G");
	СоответствиеСимволов.Вставить("Д", "D");
	СоответствиеСимволов.Вставить("Е", "E");
	СоответствиеСимволов.Вставить("Ё", "E");
	СоответствиеСимволов.Вставить("Ж", "ZH");
	СоответствиеСимволов.Вставить("З", "Z");
	СоответствиеСимволов.Вставить("И", "I");
	СоответствиеСимволов.Вставить("Й", "Y");
	СоответствиеСимволов.Вставить("К", "K");
	СоответствиеСимволов.Вставить("Л", "L");
	СоответствиеСимволов.Вставить("М", "M");
	СоответствиеСимволов.Вставить("Н", "N");
	СоответствиеСимволов.Вставить("О", "O");
	СоответствиеСимволов.Вставить("П", "P");
	СоответствиеСимволов.Вставить("Р", "R");
	СоответствиеСимволов.Вставить("С", "S");
	СоответствиеСимволов.Вставить("Т", "T");
	СоответствиеСимволов.Вставить("У", "U");
	СоответствиеСимволов.Вставить("Ф", "F");
	СоответствиеСимволов.Вставить("Х", "KH");
	СоответствиеСимволов.Вставить("Ц", "TS");
	СоответствиеСимволов.Вставить("Ч", "CH");
	СоответствиеСимволов.Вставить("Ш", "SH");
	СоответствиеСимволов.Вставить("Щ", "SHCH");
	СоответствиеСимволов.Вставить("Ъ", "");
	СоответствиеСимволов.Вставить("Ы", "Y");
	СоответствиеСимволов.Вставить("Ь", "");
	СоответствиеСимволов.Вставить("Э", "E");
	СоответствиеСимволов.Вставить("Ю", "YU");
	СоответствиеСимволов.Вставить("Я", "YA");

	Результат = "";
			
	Для Инд = 1 по СтрДлина(Стр) Цикл
		
		СимволРус = Сред(Стр, Инд, 1);
		СимволАнг = СоответствиеСимволов.Получить( ВРег(СимволРус) );
		
		Если СимволАнг = Неопределено Тогда
			// это английский символ
			Результат = Результат + СимволРус;
		Иначе
			Если ВРег(СимволРус) = СимволРус Тогда
			    // Верхний регистр
				Результат = Результат + СимволАнг;
			Иначе
				Результат = Результат + НРег(СимволАнг);
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
		 
	Возврат Результат;

КонецФункции

// Формирует Хеш сумму CRC32.
//
// Параметры:
// 		Стр				- Строка.
//
// Возвращаемое значение:
// 		Число.	
//
Функция ПолучитьХешCRC32(Стр) Экспорт

	Хеширование = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеширование.Добавить(Стр);	

	Возврат Хеширование.ХешСумма;
	
КонецФункции

// Формирует Хеш сумму SHA256.
//
// Параметры:
// 		Стр				- Строка.
//
// Возвращаемое значение:
// 		Строка.	
//
Функция ПолучитьХешSHA256(Стр) Экспорт

	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеширование.Добавить(Стр);	

	СтрокаХеша = Строка(Хеширование.ХешСумма); // хеш SHA256 - двоичные данные
	СтрокаХеша = СтрЗаменить(СтрокаХеша, " ", ""); // длина 64 символа
		
	Возврат СтрокаХеша;
		
КонецФункции

// Формирует строку Хеш суммы SHA256 с символом "X" впереди.
// В таком виде строка хеш суммы может использоваться в качестве ключа структуры.
//
// Параметры:
// 		Стр				- Строка.
//
// Возвращаемое значение:
// 		Строка.	
//
Функция ХешСтрокойПригоднойДляКлючаСтруктуры(Стр) Экспорт
	
	Результат = "Х" + ПолучитьХешSHA256(Строка(Стр));
		
	Возврат Результат;

КонецФункции

// Формирует идентификатор страницы табличных данных отчета при отражении в регистре сведений.
//
// Параметры:
// 		ДокументСсылкаАлкоОтчет				- ДокументСсылка.
//		ИндексСтраницы						- Число.
// Возвращаемое значение:
// 		Строка.	
//
Функция ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницы) Экспорт

	ИдДокАлкоОтчет = ДокументСсылкаАлкоОтчет.УникальныйИдентификатор();
	ИдДокАлкоОтчет = СтрЗаменить(Строка(ИдДокАлкоОтчет), "-", "");
	
	Результат =  ИдДокАлкоОтчет + "_" + Строка(ИндексСтраницы);
	
	ДолжноБытьСимволов = 40;
	
	Результат = ВернутьСтрокуНужнойДлины(Результат, ДолжноБытьСимволов);
		
	Возврат Результат;
	
КонецФункции

// Формирует из строки параметра строку нужной длины, обрезая справа или добавляя справа пробелы.
//
// Параметры:
// 		Стр						- Строка.
//		ДолжноБытьСимволов		- Число.
// Возвращаемое значение:
// 		Строка.	
//
Функция ВернутьСтрокуНужнойДлины(Стр, ДолжноБытьСимволов) Экспорт

	Результат = Стр;
	
	Если СтрДлина(Результат) > ДолжноБытьСимволов Тогда
	
		Результат = Лев(Результат, ДолжноБытьСимволов);
		
	Иначе
		
		Пока СтрДлина(Результат) < ДолжноБытьСимволов Цикл		
			Результат = Результат + " ";		
		КонецЦикла; 
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает ОтчетОбъект отчета, в том числе внешнего, пригодного для обращения к процедурам и функциям
// модуля объекта отчета, получению макетов.
// Если в параметре ОбъектЭтогоОтч передано значение, возвращается именно оно.
//
// Параметры:
// 		ИмяФормы			- Строка. Имя формы отчета.
//		ОбъектЭтогоОтч		- ОтчетОбъект.<Имяотчета> или Неопределено.
// Возвращаемое значение:
// 		ОтчетОбъект.<Имяотчета>	
//
Функция ОбъектОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч = Неопределено) Экспорт
	
	Если ОбъектЭтогоОтч = Неопределено Тогда
		ОбъектЭтогоОтч = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы);				
	КонецЕсли;
	
	Возврат ОбъектЭтогоОтч;
	
КонецФункции

// Возвращает макет опеределенный в конфигурации отчета, в том числе внешнего.
//
// Параметры:
// 		ИмяМакета			- Строка. Имя макета, как оно определено в конфигураторе.
// 		ИмяФормы			- Строка. Имя формы отчета.
//		ОбъектЭтогоОтч		- ОтчетОбъект.<Имяотчета> или Неопределено.
// Возвращаемое значение:
// 		ТабличныйДокумент; ТекстовыйДокумент; другой объект, который может быть макетом.	
//
Функция ПолучитьМакетИзОбъектаАЛКО(ИмяМакета, ИмяФормы, ОбъектЭтогоОтч = Неопределено) Экспорт
	
	Возврат ОбъектОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч).ПолучитьМакет(Строка(ИмяМакета));
	
КонецФункции

Функция ПолучитьНазваниеОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч = Неопределено) Экспорт
	
	НазваниеОтчета = ОбъектОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч).Метаданные().ОсновнаяФорма.Синоним;
	
	Возврат НазваниеОтчета;
	
КонецФункции

#КонецОбласти


#Область ПрограммныйИнтерфейсАдреснаяИнформация

// Формирует пустую структуру сведений по обособленному подразделению, 
// состоящей из Наименования, КПП и адресной информации.
//
// Параметры:
// 		Нет.
// Возвращаемое значение:
// 		Структура, со свойствами:
//			* Наименование 			- Наимкенование ОП.
//			* КПП					- КПП ОП.
//			Адресные поля
//			* УникальныйНомерФИАС 	- Уникальный идентификатор адреса в системе ФИАС.
//			* ДополнительныеКоды	- пустая структура
//			* КодСтраны
//			* Страна
//			* Индекс
//			* КодРегиона
//			* Регион
//			* Район
//			* Город
//			* НаселенныйПункт
//			* Улица
//			* Дом
//			* Корпус
//			* Литера
//			* Квартира
//			* ПредставлениеАдреса
//			* АдресXML				- XML представление адреса подсистемы УправлениеКонтактнойИнформацией
//
Функция ПолучитьПустуюСтруктуруСведенийОбОП() Экспорт

	СтруктураСведенияОбОП = Новый Структура;
	
    СтруктураСведенияОбОП.Вставить("Наименование", "");
		
	СтруктураСведенияОбОП.Вставить("КПП",          "");
	
	СтруктураСведенияОбОП.Вставить("УникальныйНомерФИАС",      "");
	СтруктураСведенияОбОП.Вставить("ДополнительныеКоды",       Новый Структура);
	
	СтруктураСведенияОбОП.Вставить("КодСтраны",       "643");
	СтруктураСведенияОбОП.Вставить("Страна",       	  "РОССИЯ");
	СтруктураСведенияОбОП.Вставить("Индекс",          "");
	СтруктураСведенияОбОП.Вставить("КодРегиона",      "00");
	СтруктураСведенияОбОП.Вставить("Регион",		  "");
	СтруктураСведенияОбОП.Вставить("Район",           "");
	СтруктураСведенияОбОП.Вставить("Город",           "");
	СтруктураСведенияОбОП.Вставить("НаселенныйПункт", "");
	СтруктураСведенияОбОП.Вставить("Улица",           "");
	СтруктураСведенияОбОП.Вставить("Дом",             "");
	СтруктураСведенияОбОП.Вставить("Корпус",          "");
	СтруктураСведенияОбОП.Вставить("Литера",          "");
	СтруктураСведенияОбОП.Вставить("Квартира",        "");
		
	СтруктураСведенияОбОП.Вставить("ПредставлениеАдреса", "");
	СтруктураСведенияОбОП.Вставить("АдресXML", "");
	
	Представление = "";
	
	ПустойАдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
			СтруктураСведенияОбОП, Представление, Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ПустойАдресXML) Тогда
		
		СтруктураСведенияОбОП.Вставить("АдресXML", ПустойАдресXML);
		ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ПустойАдресXML);
		СтруктураСведенияОбОП.ПредставлениеАдреса = ПредставлениеАдреса;
			
	КонецЕсли;
		
	Возврат СтруктураСведенияОбОП;

КонецФункции

// Формирует структуру адресных сведений отчета из XML представления или
// стандартного представления адресной информации. 
//
// Параметры:
// 		Адрес						- Строка. XML представление или стандартное представление адресной информации.
// Возвращаемое значение:
// 		Структура, со свойствами:
//			* УникальныйНомерФИАС 	- Уникальный идентификатор адреса в системе ФИАС.
//			* ДополнительныеКоды	- структура дополнительных кодов
//				** 
//			* КодСтраны
//			* Страна
//			* Индекс
//			* КодРегиона
//			* Регион
//			* Район
//			* Город
//			* НаселенныйПункт
//			* Улица
//			* Дом
//			* Корпус
//			* Литера
//			* Квартира
//			* ПредставлениеАдреса
//			* АдресXML				- XML представление адреса подсистемы УправлениеКонтактнойИнформацией
//
Функция ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXML(знач Адрес) Экспорт

	АдресВФорматеОтчета = ПолучитьПустуюСтруктуруСведенийОбОП();
	АдресВФорматеОтчета.Удалить("Наименование");
	АдресВФорматеОтчета.Удалить("КПП");
		
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес) Тогда
	    АдресXML = Адрес;
		Адрес =  УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(АдресXML);
	Иначе
		// Если адрес пуст - возвращаем пустую структуру.
		Если ПустаяСтрока(СтрЗаменить(Адрес, ",","")) Тогда
		    Возврат АдресВФорматеОтчета;		
		КонецЕсли;
		
		Если СтрНайти(Адрес, "Страна=") > 0 Тогда
		    // Старый формат хранения полей адреса.
			АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Адрес,, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			Адрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(АдресXML, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		Иначе
			Адрес = СтрЗаменить(Адрес, ".", "");		
	    	АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		КонецЕсли; 
				
	КонецЕсли; 	

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КодыКЛАДР", Истина);
	СтруктураАдресаСМассивами = УправлениеКонтактнойИнформацией.СведенияОбАдресе(АдресXML, ДополнительныеПараметры);
		
	СтрокаДома = "";
	Если СтруктураАдресаСМассивами.Свойство("Здание") Тогда
	
		Если СтруктураАдресаСМассивами.Здание.Количество() > 0 Тогда
			СтрокаДома = СтрокаДома + СтруктураАдресаСМассивами.Здание.ТипЗдания 
									+ " " + СтруктураАдресаСМассивами.Здание.Номер;
		КонецЕсли;	
	
	КонецЕсли; 
	
	СтруктураАдресаСМассивами.Вставить("Дом", СтрокаДома);
		
	СтрокаКорпуса = "";
	СтрокаЛитера  = "";
	Если СтруктураАдресаСМассивами.Свойство("Корпуса") Тогда
		
		МассивКорпусов = СтруктураАдресаСМассивами.Корпуса;
		КолвоЭлементовКорпусов = 0;
		
		Для Каждого ЭлМассива Из МассивКорпусов Цикл
			
			Если СокрЛП(ЭлМассива.ТипКорпуса) <> "Литера"  Тогда
				
			    КолвоЭлементовКорпусов = КолвоЭлементовКорпусов + 1;
				ТекКорпус = ЭлМассива.ТипКорпуса + " " + ЭлМассива.Номер;				
				СтрокаКорпуса = СтрокаКорпуса + ?(СтрокаКорпуса = "", "", ", ") + ТекКорпус;	
				
			Иначе
				СтрокаЛитера  = "" + ЭлМассива.Номер;
			КонецЕсли;		 
		    	
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаЛитера) Тогда
		    СтрокаЛитера = "Литера " + СтрокаЛитера;		
		КонецЕсли; 
		
	КонецЕсли;
	
	СтруктураАдресаСМассивами.Вставить("Корпус", СтрокаКорпуса);
	СтруктураАдресаСМассивами.Вставить("Литера", СтрокаЛитера);

	СтрокаКвартира = "";
	КолвоЭлементовПомещений = 0;
	
	Если СтруктураАдресаСМассивами.Свойство("Помещения") Тогда
		
		МассивПомещений = СтруктураАдресаСМассивами.Помещения;
		
		Для Каждого ЭлМассива Из МассивПомещений Цикл
			
			КолвоЭлементовПомещений = КолвоЭлементовПомещений + 1;
			ТекПомещение = ЭлМассива.ТипПомещения + " " + ЭлМассива.Номер;			
			СтрокаКвартира = СтрокаКвартира + ?(СтрокаКвартира = "", "", ", ") + ТекПомещение; 
		    	
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураАдресаСМассивами.Вставить("Квартира", СтрокаКвартира);
				
	ЗаполнитьЗначенияСвойств(АдресВФорматеОтчета, СтруктураАдресаСМассивами);
	
	АдресВФорматеОтчета.Вставить("АдресXML", 			АдресXML);
	АдресВФорматеОтчета.Вставить("ПредставлениеАдреса", Адрес);
	АдресВФорматеОтчета.Вставить("Адрес", Адрес);
	
	Если НЕ ЗначениеЗаполнено(АдресВФорматеОтчета.КодРегиона) Тогда
	    АдресВФорматеОтчета.КодРегиона = "00";		
	КонецЕсли;
	Если СтрДлина(АдресВФорматеОтчета.КодРегиона) = 1 Тогда
	    АдресВФорматеОтчета.КодРегиона = "0" + АдресВФорматеОтчета.КодРегиона;
	КонецЕсли;
	
	// Добавим сокращения.
	Если НЕ АдресВФорматеОтчета.Район = Неопределено Тогда
		
		Если СтруктураАдресаСМассивами.Свойство("РайонСокращение") Тогда
		
			АдресВФорматеОтчета.Район = ?(СтруктураАдресаСМассивами.РайонСокращение = Неопределено,
											АдресВФорматеОтчета.Район,
											АдресВФорматеОтчета.Район + " " +СтруктураАдресаСМассивами.РайонСокращение);	
		
		КонецЕсли; 
			
	КонецЕсли; 
	
	Если НЕ АдресВФорматеОтчета.Город = Неопределено Тогда
		
		Если СтруктураАдресаСМассивами.Свойство("ГородСокращение") Тогда
			
			АдресВФорматеОтчета.Город = ?(СтруктураАдресаСМассивами.ГородСокращение = Неопределено,
										"г " + АдресВФорматеОтчета.Город,
										СтруктураАдресаСМассивами.ГородСокращение + " " +АдресВФорматеОтчета.Город);
		КонецЕсли;
									
	КонецЕсли;
									
	Если НЕ АдресВФорматеОтчета.НаселенныйПункт = Неопределено Тогда
		
		Если СтруктураАдресаСМассивами.Свойство("НаселенныйПунктСокращение") Тогда
			
			АдресВФорматеОтчета.НаселенныйПункт = ?(СтруктураАдресаСМассивами.НаселенныйПунктСокращение = Неопределено,
										АдресВФорматеОтчета.НаселенныйПункт,
										АдресВФорматеОтчета.НаселенныйПункт + " " + СтруктураАдресаСМассивами.НаселенныйПунктСокращение);
		КонецЕсли;								
		
	КонецЕсли;
	
	Если НЕ АдресВФорматеОтчета.Улица = Неопределено Тогда
		
		Если СтруктураАдресаСМассивами.Свойство("УлицаСокращение") Тогда
			
			АдресВФорматеОтчета.Улица = ?(СтруктураАдресаСМассивами.УлицаСокращение = Неопределено,
										АдресВФорматеОтчета.Улица + " ул",
										АдресВФорматеОтчета.Улица + " " + СтруктураАдресаСМассивами.УлицаСокращение);
		КонецЕсли;
										
	КонецЕсли;
	
	Если СтруктураАдресаСМассивами.Свойство("ДополнительныеКоды") Тогда
		
		Если СтруктураАдресаСМассивами.ДополнительныеКоды.Свойство("Идентификатор") Тогда			
			АдресВФорматеОтчета.Вставить("УникальныйНомерФИАС", СтруктураАдресаСМассивами.ДополнительныеКоды.Идентификатор);
		КонецЕсли;
		
		АдресВФорматеОтчета.Вставить("ДополнительныеКоды", СтруктураАдресаСМассивами.ДополнительныеКоды);
		
	КонецЕсли; 
	
	Возврат АдресВФорматеОтчета;
	
КонецФункции

// Вносит новые данные адреса местонахождения организации в данные титульного листа отчета ФСРАР.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		Результат			- Структура - результат, возвращаемый 
//							УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации()
//
Процедура ОбновитьМестоОсуществленияДеятельности(Форма, Результат) Экспорт
	
	Если Результат = Неопределено Тогда
	    Возврат;	
	КонецЕсли;
	
	Если НЕ (ТипЗнч(Результат) = Тип("Структура")) Тогда
		Возврат;	
	КонецЕсли;
		
	СтруктураАдреса = Неопределено;
	ОбрабатываемыеДанные = Форма.ДополнительныеДанные.Титульный.АдресМестаДеятельности;
	
	СтароеМестоДеятельности = СокрЛП(Форма.СтруктураДанныхТитульный.МестоДеятельности);
			
	АдресXML 				=  Результат.КонтактнаяИнформация; // формат XML
	ПредставлениеАдреса    =  Результат.Представление;
							
	СтруктураАдреса = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXML(АдресXML);
	
	ЗаполнитьЗначенияСвойств(ОбрабатываемыеДанные, СтруктураАдреса);
	
	Форма.СтруктураДанныхТитульный.МестоДеятельности = ПредставлениеАдреса;
	Форма.ОрганизацияМестоОсуществленияДеятельности = ПредставлениеАдреса;
			
	ЗаполнитьТитульныйАЛКО(Форма);
	
	Форма.Модифицированность = Форма.Модифицированность 
			или (СтароеМестоДеятельности <> СокрЛП(Форма.СтруктураДанныхТитульный.МестоДеятельности));
		
КонецПроцедуры

#КонецОбласти


#Область ПрограммныйИнтерфейсПроверка

// Передает из фоновой задачи процент выполнения процесса и сообщение пользователю.
// В дальнейшем переданную информацию можно прочесть с помощью 
// РегламентированнаяОтчетностьАЛКОВызовСервера.ПолучитьИнформациюИзФоновойЗадачи(ИдентификаторФоновогоЗадания)
// или ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторФоновогоЗадания)
//
// Параметры:
//
//	 	СообщениеПользователю 				- Строка - Необязательный. Основное сообщение, выводимое в форме 
//											длительной операции.
// 		Обработано 							- Число - Необязательный. По умолчанию 0. Отражает количество отработанных
//											операций.
// 		НужноОбработать						- Число - Необязательный. По умолчанию 100. Отражает общее количество
//											операций, которые нужно отработать.
// 		СтоПроцентов						- Число - Необязательный. По умолчанию 100. Отражает сколько процентов
//											соответствует параметру НужноОбработать.
//
// Пример:
//
// 	НужноОбработатьСтрок = 2*(ВсегоСтрокПоРазделу1 + ВсегоСтрокПоРазделу2);
//	// При выгрузке проверка заполнения строк и заполнение дерева выгрузки составляет примерно 84%,
//	// при проверке выгрузки - примерно 90% от общего времени выполнения.
//	ПроцентБезЗавершающейПроверкиДанных = ?(ЭтоВыгрузка, 84, 90);
//	. . . .
//	РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
//										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
//
Процедура СообщитьПроцентВыполнения(СообщениеПользователю = Неопределено, Обработано = 0, НужноОбработать = 100, 
									СтоПроцентов = 100) Экспорт

	СтруктураИнформации = Новый Структура;
	
	Если НЕ СообщениеПользователю = Неопределено Тогда
	    СтруктураИнформации.Вставить("СообщениеПользователю", СообщениеПользователю);	
	КонецЕсли; 
	
	ПроцентВыполненияОперации = 0;
	Если НужноОбработать > 0 Тогда
	    ПроцентВыполненияОперации = (Обработано/НужноОбработать) * СтоПроцентов;
	КонецЕсли; 	
	
	СтруктураИнформации.Вставить("ВидимостьПроцентаВыполненияОперации", ?(ПроцентВыполненияОперации > 0, Истина, Ложь) );
	
	
	СтруктураИнформации.Вставить("ПроцентВыполненияОперации", ПроцентВыполненияОперации);
				
	ДлительныеОперации.СообщитьПрогресс( , , СтруктураИнформации);

КонецПроцедуры

// Вычисляет контрольное число ИНН для физических и юридических лиц.
//
// Параметры:
//
//	 	ИНН 				- Строка. ИНН российского юридического или физического лица. 
//
// Возвращаемое значение:
//		Неопределено или Строка - для юридических лиц длиной 1 символ-цифру, для физических - 2 символа-цифры.
//
Функция КонтрольноеЧислоИНН(ИНН) Экспорт
	
	ВесаЮЛ   = ВесаЮЛ();
	ВесаФЛ11 = ВесаФЛ11();
	ВесаФЛ12 = ВесаФЛ12();
		
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	КонтрольноеЧисло = Неопределено;
	
	Если СтрДлина(СокрЛП(ИНН)) = 10 Тогда
		КонтрольнаяСумма = 0;
		
		Для Инд = 1 По 9 Цикл
			ЧисловоеПредставлениеРазряда = ТипЧисло.ПривестиЗначение(Сред(ИНН, Инд, 1));
			КонтрольнаяСумма = КонтрольнаяСумма + ЧисловоеПредставлениеРазряда * ВесаЮЛ[Инд];
		КонецЦикла;
		
		КонтрольнаяСумма = КонтрольнаяСумма % 11 % 10;
		
		КонтрольноеЧисло = СтрокаЧГ0(КонтрольнаяСумма);
		
	ИначеЕсли СтрДлина(СокрЛП(ИНН)) = 12 Тогда
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;
		
		Для Инд = 1 По 10 Цикл
			ЧисловоеПредставлениеРазряда = ТипЧисло.ПривестиЗначение(Сред(ИНН, Инд, 1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + ЧисловоеПредставлениеРазряда * ВесаФЛ11[Инд];
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + ЧисловоеПредставлениеРазряда * ВесаФЛ12[Инд];
		КонецЦикла;
		
		КонтрольнаяСумма11 = КонтрольнаяСумма11 % 11 % 10;
		
		КонтрольнаяСумма12 = КонтрольнаяСумма12 + КонтрольнаяСумма11 * ВесаФЛ12[11];
		КонтрольнаяСумма12 = КонтрольнаяСумма12 % 11 % 10;
		
		КонтрольноеЧисло = СтрокаЧГ0(КонтрольнаяСумма11)
		                 + СтрокаЧГ0(КонтрольнаяСумма12);
		
	КонецЕсли;
	
	Возврат КонтрольноеЧисло;
	
КонецФункции

// Создает пустую таблицу сообщений об ошибках.
//
// Параметры:
//
//	 	Нет.
//
// Возвращаемое значение:
//		Таблица значений
//
Функция СоздатьТаблицуСообщенийОбОшибках() Экспорт

	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("ОтчетДок");	
	ТаблицаСообщений.Колонки.Добавить("Раздел");
	ТаблицаСообщений.Колонки.Добавить("Страница");	
	ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");	
	ТаблицаСообщений.Колонки.Добавить("Описание");
	ТаблицаСообщений.Колонки.Добавить("ТипОшибки");

	Возврат ТаблицаСообщений;
	
КонецФункции

// Добавляет строку в таблицу сообщений об ошибках, заполняя ее данными о ошибке.
//
// Параметры:
//
//	 	ДокументСсылка				- Документ.РегламентированныйОтчет.Ссылка - документ отчета.
//		ТаблицаСообщенийОбОшибках	- Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках().
//		СтатусПроверки				- Булево - Флаг наличия ошибок при проверке выгрузки отчета.
//		СтруктураОшибки				- Структура - структура информации об ошибке.
//			* ТекстОписанияОшибки		- Строка - описание сути ошибки.
//			* Раздел					- Строка - раздел отчета, к которому относится ошибка.
//			* Показатель				- Строка - имя поля формы отчета или имя колонки таблицы с указанием номера строки,
//										например: 
//										"Организация", "П000000000102" - имена полей
//										"П000020000304_5" - имя колонки таблицы "П000020000304", строка 5
//			* ЛистРаздела			- Число - Необязательный. Номер листа многостраничного раздела.
//			* ТипОшибки				- Строка - Необязательный. Тип ошибки, описанный в макете "ШаблоныСообщенийОбОшибках" отчета
//
//
Процедура СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
									СтатусПроверки, СтруктураОшибки) Экспорт  
									 
	
	// Струкутра таблицы сообщений
	//
	//"ОтчетДок"
	//"Раздел"
	//"Страница"
	//"ИмяЯчейки"
	//"Описание"
	//"ТипОшибки"
	
	Перем ТекстОписанияОшибки, Раздел, Показатель, ЛистРаздела, ТипОшибки;
	
	СтруктураОшибки.Свойство("ТекстОписанияОшибки", ТекстОписанияОшибки);
	СтруктураОшибки.Свойство("Раздел", 				Раздел);
	СтруктураОшибки.Свойство("Показатель", 			Показатель);
	СтруктураОшибки.Свойство("ЛистРаздела", 		ЛистРаздела);
	СтруктураОшибки.Свойство("ТипОшибки", 			ТипОшибки);
	
	СтатусПроверки = Ложь;
	
	
	НоваяСтрокаСообщений = ТаблицаСообщенийОбОшибках.Добавить();
	
	НоваяСтрокаСообщений.ОтчетДок 	= ДокументСсылка;
					
	НоваяСтрокаСообщений.Описание 	= ТекстОписанияОшибки;
	НоваяСтрокаСообщений.Раздел 	= Раздел;
	НоваяСтрокаСообщений.ИмяЯчейки 	= Показатель;
	
	Если НЕ ЛистРаздела = Неопределено Тогда
		НоваяСтрокаСообщений.Страница	= ЛистРаздела;
	КонецЕсли;
	
	Если НЕ ТипОшибки = Неопределено Тогда
		НоваяСтрокаСообщений.ТипОшибки	= ТипОшибки;
	КонецЕсли;
			
КонецПроцедуры

// Проверяет поля ИНН и КПП в строках таблиц отчетов сдаваемых в ФСРАР, при обнаружении
// ошибки - формируется сообщение об ошибке процедурой СообщитьОбОшибкеЗаполнения().
// Владельцем ИНН (идентификационного номера) может быть как российский, так 
// и иностранный резидент из стран таможенного союза ЕАЭС.
//
// Параметры:
//
//	 	ДокументСсылка				- Документ.РегламентированныйОтчет.Ссылка - документ отчета.
//		ТаблицаСообщенийОбОшибках	- Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках().
//		СтатусПроверки				- Булево - Флаг наличия ошибок при проверке выгрузки отчета.
//		СтруктураСведенийИННКПП		- Структура - структура информации о ИНН-КПП.
//			* ИмяРаздела				- Строка - имя раздела отчета.
//			* СтрВКакомРазделе			- Строка - строка вида "В разделе Лицензии"
//			* НомерЛиста                - Число  - номер листа многостраничного раздела.
//			* НомерСтрокиСтроковый		- Строка - Номерстроки таблицы.
//			* ИмяТаблицы				- Строка - пользовательское наименование проверяемой таблицы.
//			* ИмяПоказателяИНН			- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей ИНН, например: 
//										"П000020000304_5" - имя колонки таблицы "П000020000304", строка 5
//			* ИмяПоказателяКПП			- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей КПП, например: 
//										"П000020000305_6" - имя колонки таблицы "П000020000305", строка 6
//			* ИНН						- Строка - строка значения ИНН.
//			* КПП						- Строка - строка значения КПП.
//			* РодПадежЧейИННКПП			- Строка - строка содержащая обозначение владельца ИНН-КПП в родительском падеже,
//										например: "производителя/импортера" или "поставщика".
//			* РоссийскийКонтрагент		- Булево - Необязательный. Флаг, если Истина - ИНН принадлежит российскому резиденту.
//			* МожетБытьПустойИНН		- Булево - Необязательный. Флаг, если Истина - ИНН может быть не заполнен.
//			* МожетБытьПустойКПП		- Булево - Необязательный. Флаг, если Истина - КПП может быть не заполнен.
//			* РоссийскийТолькоЮЛ		- Булево - Необязательный. Флаг, если Истина - если ИНН российский, то должен
//										принадлежать юридическому лицу.
//			* РоссийскийТолькоФЛ		- Булево - Необязательный. Флаг, если Истина - если ИНН российский, то должен
//										принадлежать физическому лицу.
//
// Возвращаемое значение:
//		Булево						Истина, если ошибки не найдены.
//
Функция ПроверкаИННКППвСтрокахТаблицАЛКО(ДокументСсылка, ТаблицаСообщенийОбОшибках,
									СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент) Экспорт
									
	Перем ИмяРаздела, СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, 
		ИмяТаблицы, ИмяПоказателяИНН, ИНН, ИмяПоказателяКПП, КПП, 
		РодПадежЧейИННКПП, МожетБытьПустойИНН, 
		МожетБытьПустойКПП, РоссийскийТолькоЮЛ, РоссийскийТолькоФЛ;
		
	СтруктураСведенийИННКПП.Свойство("ИмяРаздела", 				ИмяРаздела);
	СтруктураСведенийИННКПП.Свойство("СтрВКакомРазделе", 		СтрВКакомРазделе);
	СтруктураСведенийИННКПП.Свойство("НомерЛиста", 				НомерЛиста);
	СтруктураСведенийИННКПП.Свойство("НомерСтрокиСтроковый", 	НомерСтрокиСтроковый);
	СтруктураСведенийИННКПП.Свойство("ИмяТаблицы", 				ИмяТаблицы);
	СтруктураСведенийИННКПП.Свойство("ИмяПоказателяИНН", 		ИмяПоказателяИНН);
	СтруктураСведенийИННКПП.Свойство("ИНН", 					ИНН);
	СтруктураСведенийИННКПП.Свойство("ИмяПоказателяКПП", 		ИмяПоказателяКПП);
	СтруктураСведенийИННКПП.Свойство("КПП", 					КПП);
	СтруктураСведенийИННКПП.Свойство("РодПадежЧейИННКПП", 		РодПадежЧейИННКПП);
	
	СтруктураСведенийИННКПП.Свойство("МожетБытьПустойИНН", 		МожетБытьПустойИНН);
	МожетБытьПустойИНН = ?(МожетБытьПустойИНН = Неопределено, Ложь, МожетБытьПустойИНН);
	
	СтруктураСведенийИННКПП.Свойство("МожетБытьПустойКПП", 		МожетБытьПустойКПП);
	МожетБытьПустойКПП = ?(МожетБытьПустойКПП = Неопределено, Ложь, МожетБытьПустойКПП);
	
	СтруктураСведенийИННКПП.Свойство("РоссийскийТолькоЮЛ", 		РоссийскийТолькоЮЛ);
	РоссийскийТолькоЮЛ = ?(РоссийскийТолькоЮЛ = Неопределено, Ложь, РоссийскийТолькоЮЛ);
	
	СтруктураСведенийИННКПП.Свойство("РоссийскийТолькоФЛ", 		РоссийскийТолькоФЛ);
	РоссийскийТолькоФЛ = ?(РоссийскийТолькоФЛ = Неопределено, Ложь, РоссийскийТолькоФЛ);
	
	ИмяРаздела = СтруктураСведенийИННКПП.ИмяРаздела;								
									
	ДлинаИНН = СтрДлина(ИНН);
	ДлинаКПП = СтрДлина(КПП);
	НомерЛистаСтроковый = СтрокаЧГ0(НомерЛиста);
	ТекстОписанияОшибки = "";
	
	// В графе ИНН помимо собственно ИНН РФ (10 или 12 цифр) может указываться
	// Белоруссия - УНП - 9 цифр
	// Казахстан  - РНН или БИН или ИИН - все коды 12 цифр
	// Кыргызстан - ИНН - 14 цифр
	// Армения    - УНН - 8 цифр.
	ДлиныИНН_РФ 				= Новый Массив(2);
	ДлиныИНН_РФ.Добавить(10);
	ДлиныИНН_РФ.Добавить(12);
	
	ДлиныИНН_ТС 				= Новый Массив(5);
	ДлиныИНН_ТС.Добавить(8);
	ДлиныИНН_ТС.Добавить(9);
	ДлиныИНН_ТС.Добавить(10);
	ДлиныИНН_ТС.Добавить(12);
	ДлиныИНН_ТС.Добавить(14);
	
	ДлиныИНН_ТС_БезРФ 			= Новый Массив(4);
	ДлиныИНН_ТС_БезРФ.Добавить(8);
	ДлиныИНН_ТС_БезРФ.Добавить(9);
	ДлиныИНН_ТС_БезРФ.Добавить(12);
	ДлиныИНН_ТС_БезРФ.Добавить(14);
	// Если МожетБытьПустойИНН - добавляется длина 0.
	ДлиныИНН_Возможные 			= Новый Массив(6);
	ДлиныИНН_Возможные.Добавить(0);
	ДлиныИНН_Возможные.Добавить(8);
	ДлиныИНН_Возможные.Добавить(9);
	ДлиныИНН_Возможные.Добавить(10);
	ДлиныИНН_Возможные.Добавить(12);
	ДлиныИНН_Возможные.Добавить(14);
	
	ДлиныИНН_Возможные_БезРФ 	= Новый Массив(5);
	ДлиныИНН_Возможные_БезРФ.Добавить(0);
	ДлиныИНН_Возможные_БезРФ.Добавить(8);
	ДлиныИНН_Возможные_БезРФ.Добавить(9);
	ДлиныИНН_Возможные_БезРФ.Добавить(12);
	ДлиныИНН_Возможные_БезРФ.Добавить(14);
	
	// Если КПП точно непуст - это точно российский резидент.
	Если НЕ МожетБытьПустойКПП Тогда
	    РоссийскийКонтрагент = Истина;	
		РоссийскийТолькоЮЛ = Истина;
	КонецЕсли;
	
	Если ДлинаИНН = 10 Тогда
		// Считаем российским, если только четко не сказано что Не Российский.
	    Если РоссийскийКонтрагент = Неопределено Тогда
		
			РоссийскийКонтрагент = Истина;
		    МожетБытьПустойКПП = Ложь;
			РоссийскийТолькоЮЛ = Истина;	
		
		КонецЕсли;
		
	ИначеЕсли ДлинаИНН = 12 Тогда
		
		// Или российский или казахстанский. 
		Если РоссийскийКонтрагент = Неопределено Тогда
			
			Если ВСтрокеВсеЦифры(ИНН) Тогда
			
				КонтрольноеЧислоИНН = КонтрольноеЧислоИНН(ИНН);
				// Контрольное число совпадает с российским.
				Если КонтрольноеЧислоИНН = Прав(ИНН, 2) Тогда
					
					РоссийскийКонтрагент = Истина;
				    МожетБытьПустойКПП = Истина;
					РоссийскийТолькоФЛ = Истина;
					
				Иначе
					
					РоссийскийКонтрагент = Ложь;
					МожетБытьПустойКПП = Истина;
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если РоссийскийКонтрагент = Неопределено Тогда
		
		РоссийскийКонтрагент = Ложь;
		МожетБытьПустойКПП = Истина;
		
	КонецЕсли;
	
	// Если российский резидент	то ИНН точно не пуст.
	ЭтоТочноРоссийскийКонтрагент = (Не РоссийскийКонтрагент = Неопределено) и РоссийскийКонтрагент;
	
	Если ЭтоТочноРоссийскийКонтрагент Тогда
	    МожетБытьПустойИНН = Ложь;	
	КонецЕсли;
	
	МожетБытьРоссийский = (РоссийскийКонтрагент = Неопределено) или ЭтоТочноРоссийскийКонтрагент;
	
	СтрИностранного = "";
	
	ВТаблице = ?(ИмяТаблицы = Неопределено, "", ", в таблице "+ ИмяТаблицы);
		
	// Если известно резидент или нет.								
	Если РоссийскийКонтрагент = Неопределено Тогда
		
		// Если сюда попали - КПП может быть пуст.
		Если Не МожетБытьПустойИНН Тогда
		    // Из стран ТС (Россия, Белорусь, Казахстан, Армения, Кыргызстан).
			Если ДлинаИНН = 0 Тогда				
				ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", не указан ИНН (идентификационный номер) " + РодПадежЧейИННКПП + "!";
										
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеУказанИННТаблица");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
											СтатусПроверки, СтруктураОшибки);
			Иначе				
				Если ДлиныИНН_ТС.Найти(ДлинаИНН) = Неопределено Тогда
					
				    // Длина не соответствует ни одной стране ТС.
					ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", неверно указан ИНН " + РодПадежЧейИННКПП + " " + ИНН 
										+ "! Длина ИНН (идентификационного номера) не соответствует ни одной из стран таможенного союза ЕАЭС.";
										
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ДлинаИНННеТСТаблица");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
												СтатусПроверки, СтруктураОшибки);
											
					 				
				КонецЕсли; 
			КонецЕсли; 			 
			
		Иначе
			// Откуда угодно.
			Если ДлиныИНН_Возможные.Найти(ДлинаИНН) = Неопределено Тогда
					
			    // Длина не соответствует ни одной стране ТС и не пуста.
				ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", неверно указан ИНН " + РодПадежЧейИННКПП + " " + ИНН 
										+ "! ИНН (идентификационный номер) не пуст, и его длина не соответствует ни одной из стран таможенного союза ЕАЭС.";
										
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ДлинаИНННеТСНеПустТаблица");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
											СтатусПроверки, СтруктураОшибки);
											
				 				
			КонецЕсли;
		КонецЕсли; 
		
	Иначе
		
		Если РоссийскийКонтрагент Тогда
		    // Точно резидент РФ.
			СтрИностранного = " российского ";
			Если НЕ МожетБытьПустойКПП Тогда
			    // ЮрЛицо.
				Если ДлинаИНН = 0 Тогда
					
				    ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", не указан ИНН" +  СтрИностранного + РодПадежЧейИННКПП + "!";
										
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеУказанИННТаблица");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
												СтатусПроверки, СтруктураОшибки);
				
					
				ИначеЕсли НЕ ДлинаИНН = 10 Тогда	
					
					ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", неверно указан ИНН" +  СтрИностранного + РодПадежЧейИННКПП + " " + ИНН 
										+ "! ИНН должен быть 10-значный.";
										
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "РосИННне10Таблица");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
												СтатусПроверки, СтруктураОшибки);
				
					
				КонецЕсли; 
			Иначе
				// ЮрЛицо или ФизЛицо.				
				Если ДлинаИНН = 0 Тогда
					
				    ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", не указан ИНН" +  СтрИностранного + РодПадежЧейИННКПП + "!";
										
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеУказанИННТаблица");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
												СтатусПроверки, СтруктураОшибки);
				
					
				ИначеЕсли ДлиныИНН_РФ.Найти(ДлинаИНН) = Неопределено Тогда
					// длина не 10 и не 12
					ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", неверно указан ИНН" +  СтрИностранного + РодПадежЧейИННКПП + " " + ИНН 
										+ "! ИНН должен быть 10 или 12-значный.";
										
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "РосИННне10иНе12Таблица");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
												СтатусПроверки, СтруктураОшибки);
				
										
				Иначе
					
					Если РоссийскийТолькоЮЛ и (ДлинаИНН <> 10) Тогда
					
						ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", неверно указан ИНН" +  СтрИностранного + РодПадежЧейИННКПП + " " + ИНН 
										+ "! ИНН должен быть 10-значный.";
										
						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "РосИННне10Таблица");
						
						СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
													СтатусПроверки, СтруктураОшибки);
				
				        						
					ИначеЕсли РоссийскийТолькоФЛ и (ДлинаИНН <> 12) Тогда
						
						ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", неверно указан ИНН" +  СтрИностранного + РодПадежЧейИННКПП + " " + ИНН 
										+ "! ИНН должен быть 12-значный!";
										
						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "РосИННне12Таблица");
						
						СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
													СтатусПроверки, СтруктураОшибки);
				
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
		Иначе
			// Точно иностранец.
			СтрИностранного = " иностранного ";
			
			Если Не МожетБытьПустойИНН Тогда
			    // Из стран ТС (Белорусь, Казахстан, Армения, Кыргызстан).
				Если ДлинаИНН = 0 Тогда
					
				    ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", не указан Идентификационный Номер" +  СтрИностранного + РодПадежЧейИННКПП + "!";
										
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеУказанИдНомерТаблица");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
												СтатусПроверки, СтруктураОшибки);
				
				ИначеЕсли ДлиныИНН_ТС_БезРФ.Найти(ДлинаИНН) = Неопределено Тогда
					// Длина не соответствует странам ТС.
					ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", неверно указан Идентификационный Номер" + СтрИностранного + РодПадежЧейИННКПП + " " + ИНН 
										+ "! Длина идентификационного номера не соответствует ни одной из стран таможенного союза ЕАЭС, исключая Россию.";
										
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ДлинаИдНомераНеТСТаблица");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
												СтатусПроверки, СтруктураОшибки);
				    					
				КонецЕсли;
				
			Иначе	
			    // Откуда угодно, кроме России.  
				Если ДлиныИНН_Возможные_БезРФ.Найти(ДлинаИНН) = Неопределено Тогда
					
				    // Длина не соответствует ни одной стране ТС (кроме России) и не пуста.
					ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", неверно указан Идентификационный Номер" + СтрИностранного + РодПадежЧейИННКПП + " " + ИНН 
										+ "! Идентификационный номер не пуст, и его длина не соответствует ни одной из стран таможенного союза ЕАЭС, исключая Россию.";
										
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ДлинаИдНомераНеТСНеПустТаблица");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
												СтатусПроверки, СтруктураОшибки);
				     				
				КонецЕсли;
				
			КонецЕсли; 
			
			// Для правильной отработки контроля КПП в случае если Длина ИНН равна 10,
			// КПП для иностранцев должен быть пуст.
			ДлинаИНН = ?(ДлинаИНН = 10, 9, ДлинаИНН);
		КонецЕсли; 
	
	КонецЕсли; 
	
	// Контроль КПП.
	Если (ДлинаИНН = 10) и МожетБытьРоссийский Тогда
		
		Если НЕ РоссийскийТолькоФЛ Тогда
			
			// Это вероятно резидент РФ - ЮрЛицо и должно быть КПП.
			Если ДлинаКПП = 0 Тогда
			    // КПП пуст.
				ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
											+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
											+ ", не указан КПП " + РодПадежЧейИННКПП + "!";
											
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКПП);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеУказанКПП_Таблица");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
											СтатусПроверки, СтруктураОшибки);
				    
				
			ИначеЕсли НЕ ДлинаКПП = 9 Тогда
				// КПП неверный.
				ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
											+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
											+ ", неверно указан КПП " + РодПадежЧейИННКПП + " " + КПП 
											+ "! КПП должен быть 9-значный.";
										
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКПП);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеКПП9_Таблица");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
											СтатусПроверки, СтруктураОшибки);
										
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		// КПП должен быть пуст. 
		Если НЕ ДлинаКПП = 0 Тогда
			ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", КПП " + РодПадежЧейИННКПП + " " + КПП + " должен быть пуст!";
										
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКПП);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "КПП_НеПуст_Таблица");
			
			СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
										СтатусПроверки, СтруктураОшибки);
						
		КонецЕсли;	
	КонецЕсли;
	
    // Контроль на цифры.	
	Если ДлинаИНН > 0 Тогда
	
		Если НЕ ВСтрокеВсеЦифры(ИНН) Тогда
		
			ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
									+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
									+ ", строка ИНН (идентификационного номера) " + РодПадежЧейИННКПП + " " + ИНН + " должна состоять только из цифр!";
									
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НедопустимыеСимволыИННТаблица");
			
			СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
										СтатусПроверки, СтруктураОшибки);
		
		КонецЕсли; 
					
	КонецЕсли;
	
	Если ТекстОписанияОшибки = "" Тогда
	
		// Т.е ошибок по длинам ИНН-КПП не было.		
		Если ДлинаКПП > 0 Тогда
			
		    // В КПП 5 и 6 символы могут быть не цифрами, их не проверяем.
			КПП_цифры = Лев(КПП, 4) + Сред(КПП, 7);
			Если НЕ ВСтрокеВсеЦифры(КПП_цифры) Тогда
			
				ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", строка КПП " + РодПадежЧейИННКПП + " " + КПП + " должна состоять только из цифр (за исключением 5 и 6 символов)!";
										
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКПП);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НедопустимыеСимволыКППТаблица");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
											СтатусПроверки, СтруктураОшибки);
			
			КонецЕсли; 
			
			КПП_Цифры_Буквы = ВРег(Сред(КПП, 5, 2)); // 5-6 символы КПП
			СтрокаБуквЦифр = "0123456789ABCDEFGHIJKLMNOPRSTQUVXYZW";
			
			КПП_Цифры_Буквы_Первый = Лев(КПП_Цифры_Буквы, 1);
			КПП_Цифры_Буквы_Второй = Прав(КПП_Цифры_Буквы, 1);
			
			Если    (СтрНайти(СтрокаБуквЦифр, КПП_Цифры_Буквы_Первый) = 0) 
				или (СтрНайти(СтрокаБуквЦифр, КПП_Цифры_Буквы_Второй) = 0) Тогда
			
				ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", 5 и 6 символы строки КПП " + РодПадежЧейИННКПП + " " + КПП + " должны состоять только из цифр или латинских букв!";
										
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКПП);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НедопустимыеСимволыКППТаблица");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
											СтатусПроверки, СтруктураОшибки);			
			
			КонецЕсли; 
			
		КонецЕсли;
		
		// Контроль на первые 00 для РФ.
		Если ЭтоТочноРоссийскийКонтрагент Тогда
			
		    // Поскольку ошибок по длине ИНН нет, можно смело брать 2 символа слева.
			Если Лев(ИНН, 2) = "00" Тогда
			
				ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", строка ИНН " + РодПадежЧейИННКПП + " " + ИНН + " не должна начинаться с 00!";
										
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ИНН00Таблица");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
											СтатусПроверки, СтруктураОшибки);
			
			КонецЕсли;
			
			Если (ДлинаКПП > 2) и (Лев(КПП, 2) = "00") Тогда
				
				ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
										+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
										+ ", строка КПП " + РодПадежЧейИННКПП + " " + КПП + " не должна начинаться с 00!";
										
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКПП);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "КПП00Таблица");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
											СтатусПроверки, СтруктураОшибки);
			
				
			КонецЕсли;
										
			// Проверка на контрольные суммы.
			КонтрольноеЧислоИНН = КонтрольноеЧислоИНН(ИНН);
			
			Если ДлинаКПП = 9 Тогда
				
				// ЮрЛицо.			
				Если КонтрольноеЧислоИНН <> Прав(ИНН, 1) Тогда
					ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
											+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
											+ ", неверно указан ИНН российского " + РодПадежЧейИННКПП + " " + ИНН 
											+ "! Неверное контрольное число ИНН";
											
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеверноеКонтрольноеЧислоИННТаблица");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
												СтатусПроверки, СтруктураОшибки);
				

				КонецЕсли;
								
			Иначе
				
				// ФизЛицо.			
				Если КонтрольноеЧислоИНН <> Прав(ИНН, 2) Тогда
					ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
											+ ", в строке " + НомерСтрокиСтроковый + ВТаблице 
											+ ", неверно указан ИНН российского " + РодПадежЧейИННКПП + " " + ИНН 
											+ "! Неверное контрольное число ИНН";
											
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеверноеКонтрольноеЧислоИННТаблица");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
												СтатусПроверки, СтруктураОшибки);
				
													
				КонецЕсли;
								
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЕсли;
	
	Возврат (ТекстОписанияОшибки = "");
	    
КонецФункции

// Проверяет заполнение Обособленных Подразделений на страницах отчетов сдаваемых в ФСРАР, при обнаружении
// ошибки - формируется сообщение об ошибке процедурой СообщитьОбОшибкеЗаполнения().
//
// Параметры:
//
//	 	ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - документ отчета.
//		ТаблицаСообщений			- Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках().
//		СтатусПроверки				- Булево - Флаг наличия ошибок при проверке выгрузки отчета.
//		СтруктураСведенийПроверки	- Структура - структура содержащая настройки проверки.
//			* ПараметрыВыгрузки			- Структура содержащая параметры выгрузки отчета.
//			* ИмяРаздела				- Строка - имя раздела отчета.
//			* СтрВКакомРазделе			- Строка - строка вида "В разделе Раздел 1"
//			* НомерЛиста                - Число  - номер листа многостраничного раздела.
//			* ЛистРаздела				- СписокЗначений - Содержит данные по листу раздела, получаемые из 
//										реквизита формы таблицы Форма["ТаблицаСтраницы" + <ИмяРаздела>].
//			* КПП_НеОбязателен			- Булево - Необязательный. Флаг, если Истина - КПП может быть не заполнен.
//			* ПроверятьНаПустоту		- Булево - Необязательный. Флаг, если Истина - незаполненные данные по ОП
//										считаются ошибкой. 
//		СведенияОбОП				- Необязательный. Передаваться в процедуру может любое значение,
//									но при возврате из процедуры в этом параметре будет содержаться структура,
//									поля которой совпадают со структурой, получаемой из функции ПолучитьПустуюСтруктуруСведенийОбОП().
// Возвращаемое значение:
//		Булево						Истина, если ошибки не найдены.
//
Функция ПроверитьЗаполнениеОП_АЛКО(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
							СтруктураСведенийПроверки, СведенияОбОП = Неопределено) Экспорт
		
	Перем ИмяРаздела, ЛистРаздела, СтрВКакомРазделе, НомерЛиста, 
		КПП_НеОбязателен, ПроверятьНаПустоту, ПараметрыВыгрузки; 
		
	СтруктураСведенийПроверки.Свойство("ПараметрыВыгрузки", 	ПараметрыВыгрузки);
	СтруктураСведенийПроверки.Свойство("ИмяРаздела", 			ИмяРаздела);
	СтруктураСведенийПроверки.Свойство("СтрВКакомРазделе", 		СтрВКакомРазделе);
	СтруктураСведенийПроверки.Свойство("НомерЛиста", 			НомерЛиста);
	СтруктураСведенийПроверки.Свойство("ЛистРаздела", 			ЛистРаздела);
	
	СтруктураСведенийПроверки.Свойство("КПП_НеОбязателен", 		КПП_НеОбязателен);
	КПП_НеОбязателен = ?(КПП_НеОбязателен = Неопределено, Ложь, КПП_НеОбязателен);
	
	СтруктураСведенийПроверки.Свойство("ПроверятьНаПустоту", 	ПроверятьНаПустоту);
	ПроверятьНаПустоту = ?(ПроверятьНаПустоту = Неопределено, Истина, ПроверятьНаПустоту);						
							
	ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
	НомерЛистаСтроковый = СтрокаЧГ0(НомерЛиста);
	ДанныеОП = ДанныеЛиста.ОбособленноеПодразделение;
	ТекстОписанияОшибки = "";
		
	Если (ПустаяСтрока(ДанныеОП) или (СокрЛП(ДанныеОП) = "Заполнить")) и ПроверятьНаПустоту Тогда
		ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
							+ ", не указаны реквизиты обособленного подразделения!";
				
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "НетДанныхОП");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
        		
	ИначеЕсли (НЕ ПустаяСтрока(ДанныеОП)) и (НЕ СокрЛП(ДанныеОП) = "Заполнить") Тогда
		
		СведенияОбОП = Неопределено;
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") 
			И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда
			
			Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
				ИНН = СокрЛП(ПараметрыВыгрузки.ИННФЛ);
			Иначе
				ИНН = СокрЛП(ПараметрыВыгрузки.ИННЮЛ);
			КонецЕсли;
			
			КПП = СокрЛП(СведенияОбОП.КПП);
			
			ДлинаИНН = СтрДлина(ИНН);
			ДлинаКПП = СтрДлина(КПП);
			
			Если ДлинаИНН = 10 Тогда
				
				Если ДлинаКПП = 0 Тогда
					ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
							+ ", не указан КПП обособленного подразделения!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеУказанКПП_ОП");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
         
				ИначеЕсли ДлинаКПП <> 9 Тогда
					ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
							+ ", неверно указан КПП обособленного подразделения! КПП должен состоять из 9 символов.";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеКПП9_ОП");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
          
				КонецЕсли;
					
				// Контроль на цифры КПП.
				Если ДлинаКПП > 2 Тогда
						
					Если НЕ РегламентированнаяОтчетностьАЛКО.ВСтрокеВсеЦифры(КПП) Тогда
					
						ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
								+ ", строка КПП обособленного подразделения должна состоять только из цифр!";
								
						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "НедопустимыеСимволыКПП_ОП");
						
						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                        		 
					КонецЕсли;
					
					// Первые 2 цифры КПП не могут быть "00", КПП может быть только Российским.
					Если Лев(СокрЛП(КПП), 2) = "00" Тогда
						
						ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
								+ ", строка КПП обособленного подразделения не должна начинаться с 00!";
								
						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "КПП00_ОП");
						
						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                        
					КонецЕсли;
				
				КонецЕсли;	
					
			ИначеЕсли ДлинаИНН = 12 Тогда
				Если НЕ ДлинаКПП = 0 Тогда
					ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
							+ ", КПП объекта торговли должен быть пуст!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "КПП_НеПуст_ОП");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                    
				КонецЕсли;	
			КонецЕсли;
			
			Если ПустаяСтрока(СведенияОбОП.Наименование) Тогда
				ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
							+ ", не указано наименование обособленного подразделения!";	
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетНаименованияОП");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                
			КонецЕсли;
			
			Если ПустаяСтрока(СведенияОбОП.ПредставлениеАдреса) Тогда
				ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
							+ ", не указан адрес обособленного подразделения!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетАдресаОП");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                
			ИначеЕсли ПустаяСтрока(СведенияОбОП.КодРегиона) Тогда
				ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
							+ ", в адресе обособленного подразделения не указан регион!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетРегионаАдресаОП");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                
			КонецЕсли;
		Иначе
			
			Если ПроверятьНаПустоту Тогда			
				ТекстОписанияОшибки = СтрВКакомРазделе + " декларации, на листе " + НомерЛистаСтроковый 
								+ ", нарушена внутренняя структура реквизитов обособленного подразделения, требуется повторный ввод данных!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НарушенаСтруктураРеквизитовОП");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат (ТекстОписанияОшибки = "");

КонецФункции

// Формирует уникальную для параметров организации строку, пригодную для использования
// в качестве ключа структуры.
//
// Параметры:
//
//	 	Наименование				- Строка - Необязательный. Наименование организации.
//		ИНН							- Строка - Необязательный. Строка ИНН организации. 
//		КПП							- Строка - Необязательный. Строка КПП организации.
//		ПредставлениеАдреса			- Строка - Необязательный. Строка представления адреса организации.
//
// Возвращаемое значение:
//		Строка.
//
Функция ПолучитьХешИдОрганизацииСтрокойПригоднойДляКлючаСтруктуры(Наименование = Неопределено, ИНН = Неопределено, КПП = Неопределено, 
																	ПредставлениеАдреса = Неопределено) Экспорт
							
	ИдОрганизации = ПолучитьИдОрганизации(Наименование, ИНН, КПП, ПредставлениеАдреса);
	
	Результат = ХешСтрокойПригоднойДляКлючаСтруктуры(ИдОрганизации);
	
	Возврат Результат;

КонецФункции

// Проверяет содержимое результата проверки выгрузки отчета, сохраненного во временном хранилище.
// Если проверка прошла без ошибок, возвращается Неопределено,
// в противном случае - возвращается Адрес временного хранилища, 
// в котором находится табличный документ с описанием ошибок.
//
// Параметры:
//
//	 	АдресВоВременномХранилище	- Строка. Адрес во временном хранилище.
//
// Возвращаемое значение:
//		Строка. Адрес во временном хранилище.
//      Неопределено.
//
Функция ПолучитьРезультатПроверкиАЛКО(АдресВоВременномХранилище) Экспорт
		
	Результат = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		
	Если ТипЗнч(Результат) = Тип("Строка") и Результат = "ОК" Тогда
		УдалитьИзВременногоХранилища(АдресВоВременномХранилище);
	    Возврат Неопределено;
	Иначе
		Возврат АдресВоВременномХранилище;
	КонецЕсли; 
	
КонецФункции

// Проверяет содержимое результата выгрузки отчета, сохраненного во временном хранилище.
// Если проверка прошла без ошибок, возвращается Неопределено, но в параметре АдресФайлаВыгрузки
// возвращается адрес временного хранилища с XML содержимым выгрузки.
// В противном случае - возвращается Адрес временного хранилища, 
// в котором находится табличный документ с описанием ошибок.
//
// Параметры:
//
//	 	АдресВоВременномХранилище	- Строка. Адрес во временном хранилище.
//		АдресФайлаВыгрузки			- Возвращается Строка. Адрес во временном хранилище или пустая строка.
//
// Возвращаемое значение:
//		Строка. Адрес во временном хранилище.
//      Неопределено.
//
Функция ПолучитьАдресПредставленияОшибокИлиСохранитьАдресФайлаВыгрузкиАЛКО(АдресВоВременномХранилище, АдресФайлаВыгрузки) Экспорт
	
	АдресФайлаВыгрузки = "";
	
	Результат = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ТипЗначенияРезультата = ТипЗнч(Результат);	
	Если (ТипЗначенияРезультата = Тип("Строка")) или (ТипЗначенияРезультата = Тип("ДвоичныеДанные")) Тогда
		// Сохраним адрес файлаВыгрузки.
		АдресФайлаВыгрузки = АдресВоВременномХранилище;
		Возврат Неопределено;
	    
	Иначе		
		// Это представление ошибок.
		Возврат АдресВоВременномХранилище;
	КонецЕсли;
		
КонецФункции

#КонецОбласти


#Область ПрограммныйИнтерфейсЗаполнение

// Формирует структуру, содержащую уникальные для поставщика строки, идентифицирующие
// поставщика и лицензию поставщика.
//
// Параметры:
//
//		СтруктураСведений			- Структура
//	 		* Наименование					- Строка - Необязательный. Наименование организации поставщика.
//			* ИНН							- Строка - Необязательный. Строка ИНН организации поставщика. 
//			* КПП							- Строка - Необязательный. Строка КПП организации поставщика.
//			* ПредставлениеАдреса			- Строка - Необязательный. Строка представления адреса организации поставщика.
//			* Номер							- Строка - Необязательный. Номер лицензии поставщика.
//			* Серия							- Строка - Необязательный. Серия лицензии поставщика.
//			* ДатаВыдачи					- Дата   - Необязательный. Дата выдачи (начала действия) лицензии поставщика.
//			* ДатаВыдачи					- Дата   - Необязательный. Дата окончания лицензии поставщика.
//			* КемВыдана 					- Строка - Необязательный. Наименование органа, выдавшего лицензию.
//
// Возвращаемое значение:
//		Структура.
//			* ХешИдПоставщика	- Строка - Хеш SHA256 сведений поставщика.
//			* ХешИдЛицензии		- Строка - Хеш SHA256 сведений лицензии поставщика.
//
Функция ПолучитьВсеИдПоставщика(СтруктураСведений) Экспорт
								
	Перем Наименование, ИНН, КПП, ПредставлениеАдреса, Номер, Серия,	
		ДатаВыдачи, ДатаОкончания, КемВыдана;
		
	СтруктураСведений.Свойство("Наименование", 			Наименование);
	СтруктураСведений.Свойство("ИНН", 					ИНН);
	СтруктураСведений.Свойство("КПП", 					КПП);
	СтруктураСведений.Свойство("ПредставлениеАдреса", 	ПредставлениеАдреса);
	СтруктураСведений.Свойство("Номер", 				Номер);
	СтруктураСведений.Свойство("Серия", 				Серия);
	СтруктураСведений.Свойство("ДатаВыдачи", 			ДатаВыдачи);
	СтруктураСведений.Свойство("ДатаОкончания", 		ДатаОкончания);
	СтруктураСведений.Свойство("КемВыдана", 			КемВыдана);
								
	ХешИдПоставщика = ПолучитьХешИдОрганизации(Наименование, ИНН, КПП, ПредставлениеАдреса);
	ХешИдЛицензии   = ПолучитьХешИдЛицензии(ХешИдПоставщика, Номер, Серия, ДатаВыдачи, ДатаОкончания, КемВыдана);
	
	Результат = Новый Структура;
	Результат.Вставить("ХешИдПоставщика", ХешИдПоставщика);
	Результат.Вставить("ХешИдЛицензии", ХешИдЛицензии);
		
	Возврат Результат;
									
КонецФункции

// Формирует структуру, содержащую уникальные для производителя и пары производитель-код продукции
// строки, идентифицирующие производителя и пару производитель-код продукции.
//
// Параметры:
//
//			КодПродукции                - Строка - Необязательный. Код продукции.
//	 		Наименование				- Строка - Необязательный. Наименование организации производителя.
//			ИНН							- Строка - Необязательный. Строка ИНН организации производителя. 
//			КПП							- Строка - Необязательный. Строка КПП организации производителя.
//			ПредставлениеАдреса			- Строка - Необязательный. Строка представления адреса организации производителя.
//
// Возвращаемое значение:
//		Структура.
//			* ХешИдПроизводителя	- Строка - Хеш SHA256 сведений производителя.
//			* ХешИдКодПродПроизв	- Строка - Хеш SHA256 сведений пары производитель - код продукции.
//
Функция ПолучитьВсеИдПроизводителя(КодПродукции = Неопределено, Наименование = Неопределено, 
									ИНН = Неопределено, КПП = Неопределено, ПредставлениеАдреса = Неопределено) Экспорт

	ПреобразованнаяСтрокаКодПр = КодПродукции;
	ПреобразованнаяСтрокаКодПр = ?(ПреобразованнаяСтрокаКодПр = Неопределено, "", 
																ПреобразованнаяСтрокаКодПр);

	ИдПроизводителя = ПолучитьИдОрганизации(Наименование, ИНН, КПП, ПредставлениеАдреса);
	
	ИдКодПродуктаПроизводителя = ПреобразованнаяСтрокаКодПр + "\" + ИдПроизводителя;
	
	ХешИдПроизводителя = ПолучитьХешSHA256(ИдПроизводителя);
	ХешИдКодПродПроизв = ПолучитьХешSHA256(ИдКодПродуктаПроизводителя);
	
	Результат = Новый Структура;
	Результат.Вставить("ХешИдПроизводителя", ХешИдПроизводителя);
	Результат.Вставить("ХешИдКодПродПроизв", ХешИдКодПродПроизв);
		
	Возврат Результат;
	
КонецФункции

// Дополняет таблицу значений недостающими колонками, которые соответствуют
// стандартным реквизитам, измерениям, ресурсам и реквизитам регистра.
//
// Параметры:
//
//	 	ИмяРегистра					- Строка - имя регистра сведений.
//		ТаблЗнач					- Таблица значений.
//
Процедура ОбработкаТаблицыПередЗаписьюВРегистр(ИмяРегистра, ТаблЗнач) Экспорт
	
	СтруктураРегистра = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистра);
	
	Для каждого ЭлементСтруктуры Из СтруктураРегистра Цикл
	
		ИмяКолонки = ЭлементСтруктуры.Ключ;
		
		Если ТаблЗнач.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		    ТаблЗнач.Колонки.Добавить(ИмяКолонки);		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Вносит изменения в реквизиты формы отчета после заполнения регистров сведений данными на основании данных ИБ.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма заполняемого отчета ФСРАР.
//
Процедура ЗагрузитьПодготовленныеДанныеАвтоЗаполненияАЛКО(Форма) Экспорт
		
	Контейнер = ПолучитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	Если ТипЗнч(Контейнер) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ИдГруппы				= Форма.СтруктураРеквизитовФормы.мИдГруппы12;
	ФормаСервисРегистровП0000100003 		 = Форма["СервисРегистров" + ИдГруппы];
	ФормаСервисРегистровП0000100003Удаленные = Форма["СервисРегистров" + ИдГруппы + "Удаленные"];
	
	ЗначениеВДанныеФормы(Контейнер.Раздел1_СервисРегистров, ФормаСервисРегистровП0000100003);
	Контейнер.Раздел1_СервисРегистров = Неопределено;
	ЗначениеВДанныеФормы(Контейнер.Раздел1_СервисРегистровУдаленные, ФормаСервисРегистровП0000100003Удаленные);
	Контейнер.Раздел1_СервисРегистровУдаленные = Неопределено;
	
	Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(
													ИдГруппы, Форма.СтруктураРеквизитовФормы);
													
	// Нужно обнулить номер страницы с установленным флагом головного ОП.		
	Форма["НомерСтраницыФлагГоловногоОП" + Раздел] = 0;
													
	ФормаТаблицаСтраницыРаздел1 = Форма["ТаблицаСтраницы" + Раздел];
	ЗначениеВДанныеФормы(Контейнер.Раздел1, ФормаТаблицаСтраницыРаздел1);
	Контейнер.Раздел1 = Неопределено;
	
	ИдГруппы				= Форма.СтруктураРеквизитовФормы.мИдГруппы22;
	ФормаСервисРегистровП0000200003 		 = Форма["СервисРегистров" + ИдГруппы];
	ФормаСервисРегистровП0000200003Удаленные = Форма["СервисРегистров" + ИдГруппы + "Удаленные"];
	
	ЗначениеВДанныеФормы(Контейнер.Раздел2_СервисРегистров, ФормаСервисРегистровП0000200003);
	Контейнер.Раздел2_СервисРегистров = Неопределено;
	ЗначениеВДанныеФормы(Контейнер.Раздел2_СервисРегистровУдаленные, ФормаСервисРегистровП0000200003Удаленные);
	Контейнер.Раздел2_СервисРегистровУдаленные = Неопределено;
		
	Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(
													ИдГруппы, Форма.СтруктураРеквизитовФормы);
													
	// Нужно обнулить номер страницы с установленным флагом головного ОП.		
	Форма["НомерСтраницыФлагГоловногоОП" + Раздел] = 0;
													
	ФормаТаблицаСтраницыРаздел2 = Форма["ТаблицаСтраницы" + Раздел];	
	ЗначениеВДанныеФормы(Контейнер.Раздел2, ФормаТаблицаСтраницыРаздел2);
    Контейнер.Раздел2 = Неопределено;	
	
	
	Форма.МаксИндексСтраницы	= Контейнер.МаксИндексСтраницы;
		
	// Нужно пробежаться по ДопДанным и Заполнить Данные.
	// Раздел 1.
	ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы12;
	ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
														ИдГруппы, Форма.СтруктураРеквизитовФормы);
	
	Если ФормаТаблицаСтраницыРаздел1.Количество() = 0 Тогда
		
	    СтрПерваяСтраница = ФормаТаблицаСтраницыРаздел1.Добавить();
		СтрПерваяСтраница.Представление               = "Новая страница";
		СтрПерваяСтраница.АктивнаяСтраница            = Истина;
		СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
		
		Если СтрПерваяСтраница.Данные.Количество() > 0 Тогда
			СтрПерваяСтраница.Данные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтрПерваяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");
		СтрПерваяСтраница.Данные[0].Пометка = Ложь;
		
		СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
						
		Если СтрПерваяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
			СтрПерваяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
		КонецЕсли;
		СтрПерваяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
		СтрПерваяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
		
		// Очистка многострочных разделов.
		ФормаСервисРегистровП0000100003.Очистить();
		
		// Добавим по одной страничке.
		НоваяСтраница = ФормаСервисРегистровП0000100003.Добавить();
		
		НоваяСтраница.КоличествоСтрок = 0;
		
		// Нужно определить текущий максимальный индекс страницы в регистре по Группе
		// до очистки, физически регистр не очищаем - это может
		// потребовать много времени.				
		Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;
		
		НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
		Ресурсы.Вставить("КоличествоСтрок", 0);
		
		ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра,
									Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);
		
	КонецЕсли;
			
	Инд = -1;
	Для Каждого ТекЛист Из ФормаТаблицаСтраницыРаздел1 Цикл
		
		Инд = Инд + 1;
		
		СтруктураСведенияОбОП = ТекЛист.ДополнительныеДанные[0].Значение.СведенияОбОП;
		СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(
													СтруктураСведенияОбОП, Форма.ЭтоПБОЮЛ, Форма.ОрганизацияИНН);
		
		Если ТипЗнч(ТекЛист.Данные[0].Значение) <> Тип("Структура") Тогда 	
			ТекЛист.Данные[0].Значение = Новый Структура;			
			ТекЛист.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");		
		КонецЕсли;
		ТекЛист.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);

		// При выходе из процедуры ЗаполнитьАвтоНаСервере() и возврат исполнения НаКлиенте ЗаполнитьАвтоЗавершение()
		// почему то очищаются ДопДанные 0-х строк ТаблицаСтраницыРаздел1 и ТаблицаСтраницыРаздел2
		// а именно структура СведенияОбОП.
		// Поэтому нужна имитация что список точно изменился.
		ТекЛист.Данные[0].Пометка 				= Ложь;
		ТекЛист.ДополнительныеДанные[0].Пометка = Ложь;
			
	КонецЦикла; 
		
	
	// Раздел 2.
	ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы22;
	ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
														ИдГруппы, Форма.СтруктураРеквизитовФормы);
	
	Если ФормаТаблицаСтраницыРаздел2.Количество() = 0 Тогда
		
		СтрПерваяСтраница = ФормаТаблицаСтраницыРаздел2.Добавить();
		СтрПерваяСтраница.Представление               = "Новая страница";
		СтрПерваяСтраница.АктивнаяСтраница            = Истина;
		СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
		
		Если СтрПерваяСтраница.Данные.Количество() > 0 Тогда
			СтрПерваяСтраница.Данные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтрПерваяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");	
		СтрПерваяСтраница.Данные[0].Пометка = Ложь;
		
		СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
				
		Если СтрПерваяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
			СтрПерваяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
		КонецЕсли;
		СтрПерваяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
		СтрПерваяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
		
		// Очистка многострочных разделов.
		ФормаСервисРегистровП0000200003.Очистить();
		
		// Добавим по одной страничке.
		НоваяСтраница = ФормаСервисРегистровП0000200003.Добавить();
		
		НоваяСтраница.КоличествоСтрок = 0;
		
		// Нужно определить текущий максимальный индекс страницы в регистре по Группе
		// до очистки, физически регистр не очищаем - это может
		// потребовать много времени.
				
		Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;
		
		НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
		Ресурсы.Вставить("КоличествоСтрок", 0);
		
		ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра,
									Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);
				
	КонецЕсли;	
	
	Инд = -1;
	Для Каждого ТекЛист Из ФормаТаблицаСтраницыРаздел2 Цикл
		
		Инд = Инд + 1;
		
		СтруктураСведенияОбОП = ТекЛист.ДополнительныеДанные[0].Значение.СведенияОбОП;
		СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(
													СтруктураСведенияОбОП, Форма.ЭтоПБОЮЛ, Форма.ОрганизацияИНН);
		
		Если ТипЗнч(ТекЛист.Данные[0].Значение) <> Тип("Структура") Тогда 	
			ТекЛист.Данные[0].Значение = Новый Структура;			
			ТекЛист.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");		
		КонецЕсли;
		ТекЛист.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);

		// При выходе из процедуры ЗаполнитьАвтоНаСервере() и возврат исполнения НаКлиенте ЗаполнитьАвтоЗавершение()
		// почему то очищаются ДопДанные 0-х строк ТаблицаСтраницыРаздел1 и ТаблицаСтраницыРаздел2
		// а именно структура СведенияОбОП.
		// Поэтому нужна имитация что список точно изменился.
		ТекЛист.Данные[0].Пометка 				= Ложь;
		ТекЛист.ДополнительныеДанные[0].Пометка = Ложь;
				
	КонецЦикла;
	
	
	// Занесем итоги.
	СтруктураИтогов = Контейнер.СтруктураИтогов;
	// Нужно загрузить результаты пересчета ИТОГОВ в Доп.данные.
	Для Каждого Результат Из СтруктураИтогов Цикл
	
		ИдГруппы = Результат.Ключ;
		МассивРезультата = Результат.Значение;
		
		Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(
													ИдГруппы, Форма.СтруктураРеквизитовФормы);
		Если Раздел = Неопределено Тогда
			// На всякий случай. Эта ситуация не должна воспроизводиться.
			Продолжить;		
		КонецЕсли; 
		
		ТаблицаСтраницРаздела = Форма["ТаблицаСтраницы" + Раздел];
		
		ТекущийИндекс = -1;
		Для Каждого СписокРезультата Из МассивРезультата Цикл
			
			ТекущийИндекс = ТекущийИндекс + 1;
			СтраницаРаздела = ТаблицаСтраницРаздела[ТекущийИндекс];
			
			Для Каждого ЭлементСпискаИтогов Из СписокРезультата Цикл
			
				ИмяКонтролируемогоПоля = ЭлементСпискаИтогов.Представление;
				ЗначениеИтога = ЭлементСпискаИтогов.Значение;
				СтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяКонтролируемогоПоля, ЗначениеИтога);
				
			КонецЦикла; 
		    СтраницаРаздела.ДополнительныеДанные[0].Пометка = Ложь;
			
		КонецЦикла;	
	
	КонецЦикла;
			
КонецПроцедуры

#КонецОбласти


#Область ПрограммныйИнтерфейсВыводСтраницы

// Выводит титульный лист отчета ФСРАР.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ЗаполнитьТитульныйАЛКО(Форма) Экспорт
	
	Форма.Элементы.ГруппаПанельОтправки.Видимость = Истина;
	
	Форма.ОрганизацияОтчета 		= Форма.СтруктураРеквизитовФормы.Организация;
	
	НужноВыставитьПБОЮЛ = Ложь;
	Если НЕ Форма.СтруктураДанныхТитульный.Свойство("ЭтоПБОЮЛ") Тогда
	    НужноВыставитьПБОЮЛ = Истина;
	ИначеЕсли Форма.СтруктураДанныхТитульный.ЭтоПБОЮЛ = Неопределено Тогда
		НужноВыставитьПБОЮЛ = Истина;
	КонецЕсли;
	
	Если НужноВыставитьПБОЮЛ Тогда	    
		Форма.СтруктураДанныхТитульный.Вставить("ЭтоПБОЮЛ", Форма.ЭтоПБОЮЛ);	
	КонецЕсли;	
	
	// Сразу отключим ненужные поля.
	Форма.Элементы.ГлавныйБухгалтер.Видимость = НЕ Форма.ЭтоПБОЮЛ;
	Форма.Элементы.КПП.Видимость = НЕ Форма.ЭтоПБОЮЛ;
	
	Если НЕ Форма.Элементы.Найти("ГражданинПодсобноеХозяйство") = Неопределено Тогда
		
	    Форма.Элементы.ГражданинПодсобноеХозяйство.Видимость = Форма.ЭтоПБОЮЛ;
		Форма.ЭтоЛичноеХозяйство = Ложь;
		
		Если Форма.ЭтоПБОЮЛ Тогда
		    
			ЭтоЛичноеХозяйство = Неопределено;
			Форма.СтруктураДанныхТитульный.Свойство("ЭтоЛичноеХозяйство", ЭтоЛичноеХозяйство);
			
		    Если ЭтоЛичноеХозяйство = Неопределено Тогда
			    ЭтоЛичноеХозяйство = Ложь;			
			КонецЕсли;
			
			Форма.ЭтоЛичноеХозяйство = ЭтоЛичноеХозяйство;
			
		КонецЕсли; 
		
		Форма.СтруктураДанныхТитульный.Вставить("ЭтоЛичноеХозяйство", Форма.ЭтоЛичноеХозяйство);
		
	КонецЕсли; 
	
	Форма.ОрганизацияНаименованиеПолное = "";
	Форма.СтруктураДанныхТитульный.Свойство("ОргНазв", Форма.ОрганизацияНаименованиеПолное);
	
	Форма.ОрганизацияНаименованиеСокращенное = "";
	Форма.СтруктураДанныхТитульный.Свойство("ОргНазвСокращ", Форма.ОрганизацияНаименованиеСокращенное);

	
	
	Форма.ОрганизацияИНН = "";
	Форма.СтруктураДанныхТитульный.Свойство("ИНН1", Форма.ОрганизацияИНН);
	Если НЕ ЗначениеЗаполнено(Форма.ОрганизацияИНН) Тогда
	    Форма.ОрганизацияИНН = "Заполнить";	
	КонецЕсли; 
	
	Форма.ОрганизацияКПП = "";
	Форма.СтруктураДанныхТитульный.Свойство("КПП1", Форма.ОрганизацияКПП);
	Если НЕ ЗначениеЗаполнено(Форма.ОрганизацияКПП) Тогда
	    Форма.ОрганизацияКПП = "Заполнить";	
	КонецЕсли;
	
	Форма.КудаПредставляется = "";
	Форма.СтруктураДанныхТитульный.Свойство("ОргИМНС", Форма.КудаПредставляется);

	КолСтраницПрилОтчета = Неопределено;
	Форма.СтруктураДанныхТитульный.Свойство("Прил", КолСтраницПрилОтчета);
	Форма.КоличествоСтраницПодтверждающихДокументов = ?(КолСтраницПрилОтчета = Неопределено, 0, КолСтраницПрилОтчета);
		
	ЗаполнитьОтчетныйПериодСГодомАЛКО(Форма);
	
	Форма.НомерКорректировки = "";
	Форма.СтруктураДанныхТитульный.Свойство("НомКорр", Форма.НомерКорректировки);
	
	ОргПочтовыйИндекс = Неопределено;
	Форма.СтруктураДанныхТитульный.Свойство("ПочтовыйИндекс", ОргПочтовыйИндекс);
	
	Если ОргПочтовыйИндекс = Неопределено Тогда
	    ОргПочтовыйИндекс = 0;
	ИначеЕсли ОргПочтовыйИндекс = "" Тогда
		ОргПочтовыйИндекс = 0;	
	КонецЕсли; 
		
	Форма.ОрганизацияПочтовыйИндекс = Формат(Число(ОргПочтовыйИндекс), "ЧЦ=6; ЧГ=; ЧВН=");
	
	ОргКодРегиона = Неопределено;
	Форма.СтруктураДанныхТитульный.Свойство("КодРегиона", ОргКодРегиона);
	Если ОргКодРегиона = Неопределено Тогда
	    ОргКодРегиона = 0;
	ИначеЕсли ОргКодРегиона = "" Тогда
		ОргКодРегиона = 0;	
	КонецЕсли;
	
	Форма.ОрганизацияКодРегиона	  = Формат(Число(ОргКодРегиона), "ЧЦ=2; ЧВН=");
	
	ОргТелОрганизации = "";
	Форма.СтруктураДанныхТитульный.Свойство("ТелОрганизации", ОргТелОрганизации);
	// Заполним общую строку адреса.
	Форма.ОрганизацияПолныйАдресТелефон = "";
	Форма.ОрганизацияПолныйАдресТелефон = Форма.ДополнительныеДанные.Титульный.АдресОрганизации.ПредставлениеАдреса + ", тел.: " 
					+ ?(ЗначениеЗаполнено(ОргТелОрганизации), ОргТелОрганизации, "");
					
	АдресБезЗапятых = СтрЗаменить(Форма.ДополнительныеДанные.Титульный.АдресОрганизации.ПредставлениеАдреса, ",", "");
	Если НЕ ЗначениеЗаполнено(АдресБезЗапятых) Тогда
	    Форма.ОрганизацияПолныйАдресТелефон = "Заполнить";	
	КонецЕсли;
	
	ПредставлениеАдресаОрганизации = СокрЛП(Форма.ДополнительныеДанные.Титульный.АдресОрганизации.ПредставлениеАдреса);	
	Форма.СтруктураДанныхТитульный.Вставить("ПредставлениеАдресаОрганизации", ПредставлениеАдресаОрганизации);
	
	
	Если НЕ Форма.Элементы.Найти("МестоОсуществленияДеятельности") = Неопределено Тогда
		
		Форма.ОрганизацияМестоОсуществленияДеятельности = "";
		Если НЕ Форма.СтруктураДанныхТитульный.Свойство("МестоДеятельности", Форма.ОрганизацияМестоОсуществленияДеятельности) Тогда
		
			Форма.Модифицированность = Истина;
			
			// Если был импорт из старого формата, данные по месту очуществления деятельности могут быть
			// в полях МестоДеятельностиОрганизации или МестоДеятельностиИП.
			// В этом случае извлечем данные, запишем в поле МестоДеятельности и после этого удалим старые поля.
			Если Форма.ЭтоПБОЮЛ Тогда
			    Форма.СтруктураДанныхТитульный.Свойство("МестоДеятельностиИП", Форма.ОрганизацияМестоОсуществленияДеятельности);
			Иначе	
			    Форма.СтруктураДанныхТитульный.Свойство("МестоДеятельностиОрганизации", Форма.ОрганизацияМестоОсуществленияДеятельности);
			КонецЕсли;	
			
			Если Форма.СтруктураДанныхТитульный.Свойство("МестоДеятельностиОрганизации") Тогда
			    Форма.СтруктураДанныхТитульный.Удалить("МестоДеятельностиОрганизации");		
			КонецЕсли;
			
			Если Форма.СтруктураДанныхТитульный.Свойство("МестоДеятельностиИП") Тогда
			    Форма.СтруктураДанныхТитульный.Удалить("МестоДеятельностиИП");		
			КонецЕсли;	
		
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Форма.ОрганизацияМестоОсуществленияДеятельности) Тогда
			
			Форма.Модифицированность = Истина;
			
			Если НЕ ЗначениеЗаполнено(АдресБезЗапятых) Тогда
				// Адрес так же не заполнен.
		    	Форма.ОрганизацияМестоОсуществленияДеятельности = "Заполнить";
				Форма.СтруктураДанныхТитульный.Вставить("МестоДеятельности", "");
				АдресМестаДеятельности = ПолучитьПустуюСтруктуруСведенийОбОП();
				
			Иначе
				// По умолчанию заполняем как обычный адрес.
				Форма.ОрганизацияМестоОсуществленияДеятельности = Форма.ДополнительныеДанные.Титульный.АдресОрганизации.ПредставлениеАдреса;
				Форма.СтруктураДанныхТитульный.Вставить("МестоДеятельности", Форма.ОрганизацияМестоОсуществленияДеятельности);
				АдресМестаДеятельности = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Форма.ДополнительныеДанные.Титульный.АдресОрганизации);
				
			КонецЕсли;
			
			Форма.ДополнительныеДанные.Титульный.Вставить("АдресМестаДеятельности", АдресМестаДеятельности);

		Иначе			
			Форма.СтруктураДанныхТитульный.Вставить("МестоДеятельности", Форма.ОрганизацияМестоОсуществленияДеятельности);
		КонецЕсли;
		
		Если НЕ Форма.ДополнительныеДанные.Титульный.Свойство("АдресМестаДеятельности") Тогда
			
			Форма.Модифицированность = Истина;
			АдресМестаДеятельности = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXML(Форма.СтруктураДанныхТитульный.МестоДеятельности);
		    Форма.ДополнительныеДанные.Титульный.Вставить("АдресМестаДеятельности", АдресМестаДеятельности);
			
		КонецЕсли; 
		
	КонецЕсли; 
		
	Форма.ОрганизацияЭлектронныйАдрес = "";
	Форма.СтруктураДанныхТитульный.Свойство("ЭлектроннаяПочта", Форма.ОрганизацияЭлектронныйАдрес);				
		
	// Руководители.
	Форма.ОрганизацияРуководитель = "";
	Форма.СтруктураДанныхТитульный.Свойство("ОргДиректор", Форма.ОрганизацияРуководитель);
	
	Если НЕ ЗначениеЗаполнено(Форма.ОрганизацияРуководитель) Тогда
		Форма.СтруктураДанныхТитульный.Свойство("ОргИндивидуальныйПредприниматель", Форма.ОрганизацияРуководитель);		
	КонецЕсли;
	
	// В поле ОргДиректор всегда сохраняем ФИО руководителя, даже если ИП.
	Форма.СтруктураДанныхТитульный.Вставить("ОргДиректор", Форма.ОрганизацияРуководитель);
	
	Если НЕ ЗначениеЗаполнено(Форма.ОрганизацияРуководитель) Тогда
	    Форма.ОрганизацияРуководитель = "Заполнить";	
	КонецЕсли;
	
	Форма.ОрганизацияГлавБух = "";
	Форма.СтруктураДанныхТитульный.Свойство("ОргБухгалтер", Форма.ОрганизацияГлавБух);
	Если НЕ ЗначениеЗаполнено(Форма.ОрганизацияГлавБух) Тогда
	    Форма.ОрганизацияГлавБух = "Заполнить";	
	КонецЕсли;
	
	// ДатаПодписи.
	ДатаПодписиСтруктураДанных = Неопределено;
	Форма.СтруктураДанныхТитульный.Свойство("ДатаПодписи", ДатаПодписиСтруктураДанных);
	
	Если НЕ Форма.НужноСкопировать Тогда
	    Форма.ДатаПодписи = ?(ДатаПодписиСтруктураДанных = Неопределено, Форма.ДатаПодписи, ДатаПодписиСтруктураДанных);	
	КонецЕсли; 
	
	Если Форма.ДатаПодписи <> ДатаПодписиСтруктураДанных Тогда
	    Форма.СтруктураДанныхТитульный.Вставить("ДатаПодписи", Форма.ДатаПодписи); 	
	КонецЕсли; 
	
	ОбновитьЦветаСсылокТитульногоАЛКО(Форма);
	
КонецПроцедуры

// Выводит в форме отчета ФСРАР нужную страницу многостраничного многострочного раздела.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		Шаг					- Число - смысл зависит от параметра ПоказатьПоИндексу,
//							если ПоказатьПоИндексу Истина, то Шаг - это индекс страницы, которую необходимо вывести.
//							Если ПоказатьПоИндексу Ложь, то Шаг - это разница между индексом текущей страницы, и той,
//							которую необходимо вывести на форму.
//		Раздел				- Строка - имя многострочного раздела отчета, страницу которого необходимо вывести.
//		ПоказатьПоИндексу	- Булево - Необязательный. Флаг, поясняющий смысл параметра Шаг.
//
Процедура ПоказатьСтраницуМногострочногоРазделаАЛКО(Форма, Шаг, Раздел, ПоказатьПоИндексу = Истина) Экспорт

	ИмяТаблицыСтраницРаздела = Неопределено;
	Если НЕ Форма.мСтруктураМногостраничныхРазделов.Свойство(Раздел, ИмяТаблицыСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ИмяТаблицыСтраницРаздела];
	
	СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	НомерТекущейСтраницы = 0;
	Если СтрТаблицыСтраниц.Количество() > 0 Тогда 			
		АктивнаяСтраницаРаздела = СтрТаблицыСтраниц[0];
		НомерТекущейСтраницы   	 = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);
	КонецЕсли;
	
	Если Не ПоказатьПоИндексу Тогда
		НомерСледующейСтраницы = НомерТекущейСтраницы + Шаг;
	Иначе
		НомерСледующейСтраницы = Шаг;
	КонецЕсли;
	
	КоличествоСтраниц = ТаблицаСтраницРаздела.Количество();
			
	Если ((НомерСледующейСтраницы + 1) > КоличествоСтраниц) ИЛИ (НомерСледующейСтраницы < 0) Тогда
		Возврат;
	КонецЕсли;
			
	// Сохраняем текущие данные.
	СохранитьДанныеРазделаАЛКО(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = Раздел;
	Форма.ТекущийРаздел  = Раздел;
	
	Если АктивнаяСтраницаРаздела <> Неопределено Тогда			
		АктивнаяСтраницаРаздела.АктивнаяСтраница = Ложь;
	КонецЕсли; 
	
	// ДопСтроки сохранятся автоматически - Табличное поле изменяет источник данных при изменении.
	// ДополнительныеДанные сохранятся автоматически, поскольку 
	// ДополнительныеДанныеРаздел1 и 2 привязаны по ссылке к АктивнаяСтраница.ДополнительныеДанные.
	
	// Сменим признак активной страницы.
	СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСледующейСтраницы];
	
	СтрСледующаяСтраница.АктивнаяСтраница = Истина; // ставим новую активность
	АктивнаяСтраницаРаздела = СтрСледующаяСтраница;
	
	//////////////////////////////////////////////
	// Выведем новую активную страницу на форму.
	//////////////////////////////////////////////
    Если ТипЗнч(АктивнаяСтраницаРаздела.Данные[0].Значение) <> Тип("Структура") Тогда 	
		АктивнаяСтраницаРаздела.Данные[0].Значение = Новый Структура;
	КонецЕсли;
	
	ЭтоВиноградная = Ложь;
	
	// Подготовим данные для вывода таблицы формы.	
	ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(
													Раздел, Форма.СтруктураРеквизитовФормы);
													
	// Заполним поля, не относящиеся к строкам таблицы формы.
	Если Раздел <> "Лицензии" Тогда
		
		СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(
				АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.СведенияОбОП, Форма.ЭтоПБОЮЛ, Форма.ОрганизацияИНН);
		АктивнаяСтраницаРаздела.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);
		Форма.ОбособленноеПодразделениеРаздела =  СтрОбособленноеПодразделение;
		
		Форма.ФлагГоловногоОП = АктивнаяСтраницаРаздела.ФлагГоловногоОП;
		
		ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
		Если НЕ ГруппаВиноградныхДанных = Неопределено Тогда
			
			ЭтоВиноградная = Истина;
			
			// Видимость будет определена позже в ВидимостьДоступностьКнопокПолейРазделаАЛКО().
			Форма.Элементы.ДобавитьВиноградник.Видимость = Ложь;
			
			ПодчиненныеЭлементы = ГруппаВиноградныхДанных.ПодчиненныеЭлементы;
			СтруктураДанных = АктивнаяСтраницаРаздела.Данные[0].Значение;
						
			ВывестиДанныеПодчиненныхЭлементовФормы(Форма, СтруктураДанных, ПодчиненныеЭлементы, ИдГруппы);
				
		КонецЕсли;
		 
		
	Иначе
							
		СтруктураДанных = АктивнаяСтраницаРаздела.Данные[0].Значение;
		
		// Используем то обстоятельство, что поля, которые надо вывести из Данных Лицензии, 
		// имеют реквизиты с П000000000101 по П000000000105.
		
		Для Инд = 1 По 5 Цикл
		
			ИмяРеквизита = "П00000000010" + Инд;
			
			ЗначениеРеквизита = Неопределено;
			СтруктураДанных.Свойство(ИмяРеквизита, ЗначениеРеквизита);
			
			Форма[ИмяРеквизита] = ЗначениеРеквизита;
			
		КонецЦикла;
		
	КонецЕсли;
	
	АктивнаяСтраницаРаздела.Данные[0].Пометка = Ложь;
	
							
	Форма.НомерАктивнойСтраницыМногострочногоРаздела = НомерСледующейСтраницы;
			
	КоличествоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеГруппы(
											Форма, ИдГруппы, Форма.НомерАктивнойСтраницыМногострочногоРаздела);
		
	ЕстьДопСтроки = (КоличествоСтрок > 0);
	
	// Текущий номер строки по умолчанию.
	Форма.ТекущийНомерСтрокиТаблицыФормы = ?(ЕстьДопСтроки, 1, 0);
	
	СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(
														Раздел, Форма.СтруктураРеквизитовФормы);
									
															
	Для каждого ЭлементСписка Из СписокИдГрупп Цикл
	
		ИдГруппыТаблицы = ЭлементСписка.Значение;
		ВывестиТаблицуФормыРазделаАЛКО(Форма, ИдГруппыТаблицы, НомерСледующейСтраницы);
	
	КонецЦикла; 
	
	Если ЭтоВиноградная Тогда
	    УстановитьВидимостьРазделовАЛКО(Форма, Раздел, Форма.НомерАктивнойСтраницыМногострочногоРаздела, 
										"Сведения по месту 
										|нахождения виноградника");
	Иначе
		УстановитьВидимостьРазделовАЛКО(Форма, Раздел, Форма.НомерАктивнойСтраницыМногострочногоРаздела);	
	КонецЕсли; 
			
КонецПроцедуры

// Выводит в форме отчета ФСРАР итоги по данным в подвале таблицы формы, ранее сформированной 
// функцией ВывестиТаблицуФормыРазделаАЛКО().
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		ИдГруппы			- Строка - идентификатор многострочной группы.
//		СтруктураИтогов		- Структура - Необязательный. Структура, ключи которой соответствуют именам
//							полей таблицы формы, по которым считается Итог, значения - значения Итога.
//
Процедура ВывестиИтогиТаблицыФормыРазделаАЛКО(Форма, ИдГруппы, СтруктураИтогов = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ИдГруппы) Тогда	
		Возврат; 	
	КонецЕсли;
	
	ФорматИтогов = Форма["ФорматИтогов" + ИдГруппы];
	
	Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(
													ИдГруппы, Форма.СтруктураРеквизитовФормы);	
	
	ТаблицаФормы = Форма.Элементы["ТаблицаФормыРаздела" + ИдГруппы];
	ТаблицаСтраницРаздела = Форма["ТаблицаСтраницы" + Раздел];
	АктивнаяСтраница = ТаблицаСтраницРаздела[Форма.НомерАктивнойСтраницыМногострочногоРаздела];
	
	Если СтруктураИтогов = Неопределено Тогда	
		СтруктураИтогов = АктивнаяСтраница.ДополнительныеДанные[0].Значение;	
	КонецЕсли; 
	
	// ФорматИтогов имеет те же представления в виде имен колонок по которым считается Итог, что и БуферИтогов.
	Для Каждого ФорматКонтролируемогоПоля Из ФорматИтогов Цикл
		
	    ИмяКонтролируемогоПоля = ФорматКонтролируемогоПоля.Представление;
		
		Поле = ТаблицаФормы.ПодчиненныеЭлементы[ИмяКонтролируемогоПоля];
		
		ЗначениеИтога = 0;
		Если НЕ СтруктураИтогов.Свойство(ИмяКонтролируемогоПоля, ЗначениеИтога)  Тогда		    
			ЗначениеИтога = 0;			
		КонецЕсли;
		
		// Если пришла структура с данными итогов - запишем.
		АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить(ИмяКонтролируемогоПоля, ЗначениеИтога);
		
		// Нужно привести Итог к типу значения колонки табличного поля,
		// чтобы все смотрелось органично.		
	    ФорматнаяСтрокаИтога = ФорматКонтролируемогоПоля.Значение;
				
		СтрИтога = Формат(ЗначениеИтога, ФорматнаяСтрокаИтога);		
				
		// Выводим в подвал.
		Поле.ТекстПодвала = СтрИтога;
			
	КонецЦикла;

	// Обычно все работает и без обновления, но для раздела Лицензий, 
	// в которых нет подвала у таблицы, эта строчка необходима - иначе не обновляется
	// строка после пометки на удаление, и пометка визуально не выставляется/снимается.
	ТаблицаФормы.Обновить();
	
КонецПроцедуры

// Модифицирует меню таблицы формы многострочного раздела.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		Раздел				- Строка - имя многострочного раздела отчета, страница которого выводится.
//
Процедура УправлениеМенюТаблицыФормыАЛКО(Форма, Раздел) Экспорт

	СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(
														Раздел, Форма.СтруктураРеквизитовФормы);
														
	Для каждого ЭлементСписка Из СписокИдГрупп Цикл
	
		ИдГруппы = ЭлементСписка.Значение;
		
		УправлениеМенюТаблицыФормыПоГруппеАЛКО(Форма, ИдГруппы);
	
	КонецЦикла; 
	
КонецПроцедуры

// Устанавливает видимость групп страниц разделов, заголовок ОП 
// и положение переключателя ФлагГоловногоОППереключатель.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		НаименованиеРаздела	- Строка - имя многострочного раздела отчета, страница которого выводится.
//		ИндексСтраницы		- Число - индекс страницы, которая выводится.
//		ЗаголовокОП_ИП		- Строка - Необязательный. Заголовок ОП для ИП.
//		ЗаголовокОП_ЮЛ		- Строка - Необязательный. Заголовок ОП для ЮрЛица.
//
Процедура УстановитьВидимостьРазделовАЛКО(Форма, НаименованиеРаздела, ИндексСтраницы, 
										ЗаголовокОП_ИП = Неопределено, ЗаголовокОП_ЮЛ = Неопределено) Экспорт
	
	// Выставим признаки.
	ЭтоТитульный = (НаименованиеРаздела = "Титульный");	
	ЭтоРазделЛицензии = (НаименованиеРаздела = "Лицензии");
	ЭтоВиноградная = НЕ (Форма.Элементы.Найти("ГруппаВиноградныхДанных") = Неопределено);
	
	ЗаголовокОП_ИП = ?(ЗаголовокОП_ИП = Неопределено, "Объект торговли ИП", ЗаголовокОП_ИП);
	ЗаголовокОП_ЮЛ = ?(ЗаголовокОП_ЮЛ = Неопределено, "Обособленное 
													  |подразделение", ЗаголовокОП_ЮЛ);
	
	// Доступность и заголовки ОП и Флаг ОП головной офис.
	Если НЕ (ЭтоТитульный или ЭтоРазделЛицензии) Тогда
				
		Форма.ФлагГоловногоОПЗначенияПереключателя = ?(Форма.ФлагГоловногоОП, 0, 1);
				
		Форма.Элементы.ОбособленноеПодразделение.Заголовок = ?(Форма.ЭтоПБОЮЛ, ЗаголовокОП_ИП, ЗаголовокОП_ЮЛ);
														
		ИмяНомерСтраницыФлагГоловногоОП = "НомерСтраницыФлагГоловногоОП" + НаименованиеРаздела;	
		НомерСтраницыФлагГоловногоОП = Форма[ИмяНомерСтраницыФлагГоловногоОП];										
		
		Если НЕ ЭтоВиноградная Тогда
		
			Форма.Элементы.ФлагГоловногоОППереключатель.Доступность = (НомерСтраницыФлагГоловногоОП = 0) 
												или (НомерСтраницыФлагГоловногоОП = ИндексСтраницы + 1);
		
		КонецЕсли; 
											
		Форма.Элементы.ОбособленноеПодразделение.Доступность = НЕ Форма.ФлагГоловногоОП;							
		
		ОбновитьЦветСсылкиОП_АЛКО(Форма);
		
	КонецЕсли; 
	
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	мСтруктураИдГрупп = СтруктураРеквизитовФормы.мСтруктураИдГрупп;
	
	// Видимость разделов.
	Форма.Элементы.СтраницаОтчетаТитульный.Видимость = ЭтоТитульный;
	// Группу таблиц показываем для разделов, для которых зарегистрированы многострочные группы.
	Форма.Элементы.ГруппаТаблицы.Видимость = мСтруктураИдГрупп.Свойство(НаименованиеРаздела);
		
	Если Форма.Элементы.Найти("СтраницаОтчетаЛицензии") <> Неопределено Тогда
	    Форма.Элементы.СтраницаОтчетаЛицензии.Видимость = ЭтоРазделЛицензии;	
	КонецЕсли; 
	
	Форма.Элементы.СтраницаОтчетаМногострочная.Видимость = НЕ (ЭтоТитульный или ЭтоРазделЛицензии);
	
	// Установим видимость только для нужной таблицы раздела.
	Для каждого Элемент Из мСтруктураИдГрупп Цикл
	
		Раздел = Элемент.Ключ;
		Форма.Элементы["ГруппаТаблицы" + Раздел].Видимость = (Раздел = НаименованиеРаздела);
		
	КонецЦикла;	
	
	ВидимостьДоступностьКнопокПолейРазделаАЛКО(Форма, НаименованиеРаздела, Форма.ЭтоРазделОтчета, Форма.ЭтоЛицензируемаяДеятельность);
	
КонецПроцедуры

// Устанавливает доступность и цвет фона полей раздела Лицензии.
//
// Параметры:
//
//	 	Форма							- Управляемая форма - Форма отчета ФСРАР.
//		ЭтоЛицензируемаяДеятельность	- Булево - Флаг, Если Истина - необходимо наличие лицензии.
//
Процедура ОбработкаПолейСтраницыЛицензийАЛКО(Форма, ЭтоЛицензируемаяДеятельность) Экспорт
	
	Если НЕ Форма.УказываютсяНомераЛицензии Тогда
	    Возврат;	
	КонецЕсли;
	
	Если (НЕ ЭтоЛицензируемаяДеятельность) и (Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20131101') Тогда	
	
	    // Нужно запретить ввод и сделать фон белым.
		Форма.Элементы.П000000000101.ЦветФона = Форма.мСтруктураЦветовРаскраски._5;
		Форма.Элементы.П000000000101.Доступность = Ложь;
		Форма.Элементы.П000000000102.ЦветФона = Форма.мСтруктураЦветовРаскраски._5;
		Форма.Элементы.П000000000102.Доступность = Ложь;
		Форма.Элементы.П000000000103.ЦветФона = Форма.мСтруктураЦветовРаскраски._5;
		Форма.Элементы.П000000000103.Доступность = Ложь;
		Форма.Элементы.П000000000104.ЦветФона = Форма.мСтруктураЦветовРаскраски._5;
		Форма.Элементы.П000000000104.Доступность = Ложь;
		
		// И очистить значения.
		АктивнаяСтрРаздела = Форма.ТаблицаСтраницыЛицензии[Форма.НомерАктивнойСтраницыМногострочногоРаздела];
		
		// Используем то обстоятельство, что поля Данных Лицензии, 
		// имеют реквизиты с П000000000101 по П000000000105.
		// Но П000000000105 очищать не будем.
		Для Инд = 1 По 4 Цикл
		
			ИмяРеквизита = "П00000000010" + Инд;
			
			Форма[ИмяРеквизита] = Неопределено;
			
			АктивнаяСтрРаздела.Данные[0].Значение.Вставить(ИмяРеквизита, Неопределено);
						
		КонецЦикла;
		
		АктивнаяСтрРаздела.Данные[0].Пометка = Ложь;		

	Иначе
		
		// Разрешаем.
		Форма.Элементы.П000000000101.ЦветФона = Форма.мСтруктураЦветовРаскраски._0;
		Форма.Элементы.П000000000101.Доступность = Истина;
		Форма.Элементы.П000000000102.ЦветФона = Форма.мСтруктураЦветовРаскраски._0;
		Форма.Элементы.П000000000102.Доступность = Истина;
		Форма.Элементы.П000000000103.ЦветФона = Форма.мСтруктураЦветовРаскраски._0;
		Форма.Элементы.П000000000103.Доступность = Истина;
		Форма.Элементы.П000000000104.ЦветФона = Форма.мСтруктураЦветовРаскраски._0;
		Форма.Элементы.П000000000104.Доступность = Истина;
										
	КонецЕсли;
	
	// Поле выбора вида деятельности всегда желтым.
	Форма.Элементы.П000000000105.ЦветФона = Форма.мСтруктураЦветовРаскраски._0;
	Форма.Элементы.П000000000105.Доступность = Истина;
	
КонецПроцедуры

// Устанавливает обработчик действия для таблицы РазделыОтчета формы отчета ФСРАР.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
//		Действие				- Строка - определяет Действие, обработчик которого назначается.
//		ИмяПроцедурыДействия    - Строка - имя процедуры-обработчика действия.
//
Процедура УстановитьДействиеТаблицыРазделыОтчетаАЛКО(Форма, Действие, ИмяПроцедурыДействия) Экспорт

	Элемент	= Форма.Элементы.РазделыОтчета;
	
	ТекущееИмяПроцедурыДействия = Элемент.ПолучитьДействие(Действие);
	
	Если ТекущееИмяПроцедурыДействия <> ИмяПроцедурыДействия Тогда
	    Элемент.УстановитьДействие(Действие, ИмяПроцедурыДействия);		
	КонецЕсли; 
		
КонецПроцедуры

#КонецОбласти 


#Область ПрограммныйИнтерфейсИнициализация

// Первоначальная инициализация многостраничных разделов отчета ФСРАР.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ИнициализацияМногостраничныхРазделовАЛКО(Форма) Экспорт
		
	// Перед инициализацией нужно определить  МаксИндексСтраницы.
	Если Форма.МаксИндексСтраницы = Неопределено Тогда
	    Форма.МаксИндексСтраницы = 0;	
	КонецЕсли; 
		
	Для каждого Раздел Из Форма.мСтруктураМногостраничныхРазделов Цикл
			
		НазваниеРаздела = Раздел.Ключ;
		ИмяТаблицыРаздела = Раздел.Значение;
		ТаблицаРаздела = Форма[ИмяТаблицыРаздела];
		
		СтрПерваяСтраница = ТаблицаРаздела.Добавить();
	
		СтрПерваяСтраница.Представление               = "Новая страница";
		СтрПерваяСтраница.АктивнаяСтраница            = Истина;
		СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
		
		Если СтрПерваяСтраница.Данные.Количество() > 0 Тогда
			СтрПерваяСтраница.Данные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.Данные.Добавить(Новый Структура);
		КонецЕсли;
		
		// Обособленное подразделение не нужно для раздела Лицензии, но мешать не будет.
		СтрПерваяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");
		
		ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
		Если НЕ ГруппаВиноградныхДанных = Неопределено Тогда
			
			ПодчиненныеЭлементы = ГруппаВиноградныхДанных.ПодчиненныеЭлементы;
						
			Для каждого Элемент Из ПодчиненныеЭлементы Цикл
				
				ИмяРеквизита = Элемент.Имя;
				Если СтрНайти(ИмяРеквизита, "П0000100003") = 0  Тогда
				    Продолжить;					
				КонецЕсли;
				
				СтрПерваяСтраница.Данные[0].Значение.Вставить(ИмяРеквизита, Неопределено);
			
			КонецЦикла; 
				
		КонецЕсли;
		
		СтрПерваяСтраница.Данные[0].Пометка = Ложь;
		
		СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
		
		Если СтрПерваяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
			СтрПерваяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
		КонецЕсли;
		
		// Структура СведенияОбОП не нужна для раздела Лицензии, но мешать не будет.
		СтрПерваяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
		СтрПерваяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
				
		СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(
														НазваниеРаздела, Форма.СтруктураРеквизитовФормы);
														
		Для каждого ЭлементСписка Из СписокИдГрупп Цикл
		
			ИдГруппы = ЭлементСписка.Значение;
						
			Если НЕ ИдГруппы = Неопределено Тогда
				
			    // Очистка многострочных разделов.
				ОчиститьСервисРегистровОтчетаАЛКО(Форма, ИдГруппы);
				
				СервисРегистров = Форма["СервисРегистров" + ИдГруппы];
					
				// Добавим по одной страничке.
				НоваяСтраница = СервисРегистров.Добавить();	
				НоваяСтраница.КоличествоСтрок = 0;
				
				// Нужно определить текущий максимальный индекс страницы в регистре по Группе
				// до очистки, физически регистр не очищаем - это может
				// потребовать много времени.
				Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;
				НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
				
				// При создании на сервере этот блок не работает.
				Если НЕ Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				
					ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
																ИдГруппы, Форма.СтруктураРеквизитовФормы);
					
					Ресурсы = Новый Структура;
					Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
					
					ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра,
								Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);	
				
				КонецЕсли;
			    		
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла; 
				
КонецПроцедуры

// Первоначальная инициализация буферов итогов отчета ФСРАР.
// Инициализация происходит на основании данных макета СоставПоказателей,
// считанных в мТаблицаНастроекТабличныхПолей.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
// 
Процедура ИнициализироватьБуферыИтоговАЛКО(Форма) Экспорт
	
	Для каждого ЭлементРаздела Из Форма.мСтруктураМногострочныхРазделов Цикл
	
		ИдГруппы = ЭлементРаздела.Ключ;
		ИнициализироватьБуферИтоговГруппыАЛКО(Форма, ИдГруппы);
		
	КонецЦикла;
		
КонецПроцедуры

// Первоначальная инициализация дополнительных данных отчета ФСРАР.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ИнициализироватьДополнительныеДанныеАЛКО(Форма) Экспорт
	
	Если ТипЗнч(Форма.ДополнительныеДанные) <> Тип("Структура") Тогда
		Форма.ДополнительныеДанные = Новый Структура;
	КонецЕсли;
	
	Если НЕ Форма.ДополнительныеДанные.Свойство("Титульный")
	 ИЛИ ТипЗнч(Форма.ДополнительныеДанные.Титульный) <> Тип("Структура") Тогда
		Форма.ДополнительныеДанные.Вставить("Титульный", Новый Структура);
	КонецЕсли;
	
	АдресОрганизации = ПолучитьПустуюСтруктуруСведенийОбОП();
	АдресОрганизации.Вставить("Адрес");
	АдресОрганизации.Удалить("Наименование");
	АдресОрганизации.Удалить("КПП");
		
	Если Форма.ДополнительныеДанные.Титульный.Свойство("АдресОрганизации") Тогда
		ЗаполнитьЗначенияСвойств(АдресОрганизации, Форма.ДополнительныеДанные.Титульный.АдресОрганизации);
	Иначе
		
		ЗаполнитьСведенияОбОрганизацииАЛКО(Форма, Истина);
		ЗаполнитьЗначенияСвойств(АдресОрганизации, Форма.ДополнительныеДанные.Титульный.АдресОрганизации);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресОрганизации.АдресXML) Тогда
		
	    // Сохранено в старом варианте отчета.		
		ЗаполнитьСведенияОбОрганизацииАЛКО(Форма, Истина);
		ЗаполнитьЗначенияСвойств(АдресОрганизации, Форма.ДополнительныеДанные.Титульный.АдресОрганизации);
		
	КонецЕсли;
		
	// В данных сохраненных старой версией, КодРегиона мог представляться одним символом,
	// что приводит к ошибке выгрузки.
	Если НЕ ЗначениеЗаполнено(АдресОрганизации.КодРегиона) Тогда
	    АдресОрганизации.КодРегиона = "00";		
	КонецЕсли;
	Если СтрДлина(АдресОрганизации.КодРегиона) = 1 Тогда
	    АдресОрганизации.КодРегиона = "0" + АдресОрганизации.КодРегиона;
	КонецЕсли;
	
	Форма.ДополнительныеДанные.Титульный.Вставить("АдресОрганизации", АдресОрганизации);
		
КонецПроцедуры

// Окончание инициализации отчета ФСРАР перед открытием.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ОкончаниеИнициализацииАЛКО(Форма) Экспорт

	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(Форма);
	
	Если НЕ Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Форма.Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		
		Форма.Элементы.Расшифровать.Видимость = Ложь;
		Форма.СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
		
	КонецЕсли;

	РегламентированнаяОтчетностьАЛКОКлиентСервер.ПоказатьПериодАЛКО(
			Форма.СтруктураРеквизитовФормы, Форма.СтруктураДанныхТитульный);
		
	Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 Или Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ Форма.СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
				
		ЗаполнитьСведенияОбОрганизацииАЛКО(Форма, Истина);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьДеревоРазделовОтчетаАЛКО(Форма);	
	
	Форма.СтруктураРеквизитовФормы.НаимОрганизации = Форма.СтруктураРеквизитовФормы.Организация.Наименование;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(Форма);
	
	// Чтобы предотвратить мерцание панели отправки при открытии, при копировании, при миграции,
	// сделана группа - оболочка панели отправки. 
	// Видимость включается после завершения открытия отчета на Клиенте, в процессе сохранения,
	// которое происходит всегда после открытия, в процедуре РегламентированнаяОтчетностьКлиент.ПослеСохраненияАЛКО().	
	Форма.Элементы.ГруппаУправлениеЭДО.Видимость = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, "ФСРАР");
		
	РегламентированнаяОтчетностьАЛКОКлиентСервер.ИнициализацияЗаголовкаАЛКО(
								Форма.Заголовок, Форма.ИмяФормы, Форма.СтруктураРеквизитовФормы);
								
	ЗаполнитьТитульныйАЛКО(Форма);
	
КонецПроцедуры

// Считывает настройки из макета СоставПоказателей в реквизиты формы мТаблицаНастроекТабличныхПолей,
// мТаблицаСоставПоказателей и Форма["ТаблицаВариантыЗаполнения" + <ИмяСтраницы>]
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//      ОбъектЭтогоОтч		- ОтчетОбъект.<Имяотчета> или Неопределено.
//
Процедура СчитатьНастройкиИзМакетаСоставПоказателейАЛКО(Форма, ОбъектЭтогоОтч = Неопределено) Экспорт
	
	ИмяМакета = Форма.СтруктураРеквизитовФормы.мСоставПоказателей;
	МакетСоставаПоказателей = ПолучитьМакетИзОбъектаАЛКО(ИмяМакета, Форма.ИмяФормы, ОбъектЭтогоОтч);
			
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
				
		Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		
		// Здесь же читается информация для заполнения шапки и подвала Табличного поля
		// для разделов с многострочной частью.
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			            					
			// Код показателя (по составу показателей) определяется по первой колонке макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если (НЕ ЗначениеЗаполнено(КодПоказателя)) 
				или (Лев(КодПоказателя, 2) = "//") Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// Код показателя по форме отчете (имя ячейки в полях табличного документа формы).
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// Признак многострочности определяется по третьей колонке макета.
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			
			// По четвертой колонке определяется тип данных реквизита.
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			
			// По колонке 5 определяется исходное количество строк многострочного раздела.
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			
			// Вариант заполнения ячейки определяется по колонке 6 макета.
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
						
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			
			// Признак обязательности заполнения показателя.
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			// Код показателя по структуре, берется из колонки 9.
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			//////////////////////////////////////////////////////////////
			// Информация для заполнения шапки и подвала Табличного поля.
			//////////////////////////////////////////////////////////////
			
			// ИДТабличногоПоля - Идентификатор табличного поля в разделе, на случай если 
			// табличных полей несколько.
			ИДТабличногоПоля   			= СокрЛП(МакетСоставаПоказателей.Область(Ном, 10).Текст);
			
			// Полное наименование колонки - подсказка по колонке.
			ПолноеНаименованиеКолонки 	= СокрЛП(МакетСоставаПоказателей.Область(Ном, 11).Текст);
			
			// Краткое наименование Колонки - текст шапки по колонке.
			КраткоеНаименованиеКолонки 	= СокрЛП(МакетСоставаПоказателей.Область(Ном, 12).Текст);
			
			// Считать итоги по колонке - признак необходимости считать итоги.
			СчитатьИтогиПоКолонке 		= СокрЛП(МакетСоставаПоказателей.Область(Ном, 13).Текст);
			СчитатьИтогиПоКолонке    = ? (ПустаяСтрока(СчитатьИтогиПоКолонке),  0, Число(СчитатьИтогиПоКолонке));
			
			// Текст подвала - текст подвала колонки.
            ТекстПодвала 				= СокрЛП(МакетСоставаПоказателей.Область(Ном, 14).Текст);
			
			// Квалификатор типа - Длина, Точность.
			КвалификаторТипа 			= СокрЛП(МакетСоставаПоказателей.Область(Ном, 15).Текст);
			
			// Ширина колонки табличного поля.
			ШиринаКолонки				= СокрЛП(МакетСоставаПоказателей.Область(Ном, 16).Текст);
			ШиринаКолонки    = ? (ПустаяСтрока(ШиринаКолонки),  0, Число(ШиринаКолонки));
			
			// При выборе ячейки колонки - выбор из списка.
			// При выводе таблицы учитывается состояние флажка ФлОтклВыборЗначений.
			// Если редактирование строки целиком во внешней форме, значения не имеет. Например в форме записи регистра.
			ВыборИзСписка               = СокрЛП(МакетСоставаПоказателей.Область(Ном, 17).Текст);
			ВыборИзСписка    = ? (ПустаяСтрока(ВыборИзСписка),  0, Число(ВыборИзСписка));
			
			// При выборе ячейки колонки - вызов внешней формы.
			// Запрещено редактирование в ячейке при любых настройках,
			// например ввод адреса в форме ввода адреса.
			// Если редактирование строки целиком во внешней форме, значения не имеет. Например в форме записи регистра.
			ВызовФормЗаполнения 		= СокрЛП(МакетСоставаПоказателей.Область(Ном, 18).Текст);
			ВызовФормЗаполнения    = ? (ПустаяСтрока(ВызовФормЗаполнения),  0, Число(ВызовФормЗаполнения));
			
			// Признак фиксации колонки таблицы слева.			
			ФиксироватьВТаблицеСлева	= СокрЛП(МакетСоставаПоказателей.Область(Ном, 19).Текст); 
			ФиксироватьВТаблицеСлева  = ? (ПустаяСтрока(ФиксироватьВТаблицеСлева),  0, Число(ФиксироватьВТаблицеСлева));
			
			// Признак фиксации колонки таблицы справа.
			ФиксироватьВТаблицеСправа	= СокрЛП(МакетСоставаПоказателей.Область(Ном, 20).Текст); 
			ФиксироватьВТаблицеСправа  = ? (ПустаяСтрока(ФиксироватьВТаблицеСправа),  0, Число(ФиксироватьВТаблицеСправа));
			
			// Признак видимости колонки.
			ВидимостьКолонки			= СокрЛП(МакетСоставаПоказателей.Область(Ном, 21).Текст);
			ВидимостьКолонки  	 = ? (ПустаяСтрока(ВидимостьКолонки),  0, Число(ВидимостьКолонки));
			
			// Растягивать по горизонтали.
			Растягивать			= СокрЛП(МакетСоставаПоказателей.Область(Ном, 22).Текст);
			Растягивать  	 = ? (ПустаяСтрока(Растягивать),  0, Число(Растягивать));
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// Формируем таблицу значений, содержащей состав показателей отчета.
			НоваяСтрока = Форма.мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента     = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу   = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме     = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности     = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя      = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения.
				НоваяСтрока = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
			///////////////////////////////////////////////////////////////////////////////
			// Заполним таблицу настроек табличных полей.
			Если ИДТабличногоПоля <> "" Тогда
				
				НоваяСтрокаНастроек = Форма.мТаблицаНастроекТабличныхПолей.Добавить();
				НоваяСтрокаНастроек.КодПоказателя      			= ? (Не ПустаяСтрока(КодПоказателяПоФорме), 
																		КодПоказателяПоФорме, КодПоказателя);
				// Информация для заполнения шапки и подвала Табличного поля.
				
				НоваяСтрокаНастроек.ИДТабличногоПоля   			= ИДТабличногоПоля;
				НоваяСтрокаНастроек.ПолноеНаименованиеКолонки   = ПолноеНаименованиеКолонки;
				НоваяСтрокаНастроек.КраткоеНаименованиеКолонки  = КраткоеНаименованиеКолонки;
				НоваяСтрокаНастроек.СчитатьИтогиПоКолонке   	= (СчитатьИтогиПоКолонке > 0);
				НоваяСтрокаНастроек.ТекстПодвала  				= ТекстПодвала;
				НоваяСтрокаНастроек.ТипДанныхРеквизита  		= ТипДанныхРеквизита;
				НоваяСтрокаНастроек.КвалификаторТипа  			= КвалификаторТипа;
				НоваяСтрокаНастроек.ШиринаКолонки  				= ШиринаКолонки;
				НоваяСтрокаНастроек.ВыборИзСписка 				= (ВыборИзСписка > 0);
				НоваяСтрокаНастроек.ВызовФормЗаполнения 		= (ВызовФормЗаполнения > 0);
				НоваяСтрокаНастроек.ФиксироватьВТаблицеСлева 	= (ФиксироватьВТаблицеСлева > 0);
				НоваяСтрокаНастроек.ФиксироватьВТаблицеСправа 	= (ФиксироватьВТаблицеСправа > 0);
			    НоваяСтрокаНастроек.ВидимостьКолонки 			= (ВидимостьКолонки > 0);
				НоваяСтрокаНастроек.Растягивать		 			= (Растягивать > 0);
				
			КонецЕсли;
						
		КонецЦикла;

		Если Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа и значения используется имя страницы основной панели формы, содержащей
			// табличный документ с автоматически заполняемыми показателями.
			Форма.мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
									
		Конецесли;
		
	КонецЦикла;
	
КонецПроцедуры

// Считывает списки выбора из макета Списки и возвращает в виде таблицы значений.
//
// Параметры:
// 		ИмяМакета			- Строка. Имя макета, как оно определено в конфигураторе.
// 		ИмяФормы			- Строка. Имя формы отчета.
//		ОбъектЭтогоОтч		- ОтчетОбъект.<Имяотчета> или Неопределено.
//
// Возвращаемое значение:
// 		ТаблицаЗначений, колонки
//			*Код
//			*Название
//			Ширина колонок соответствует ширине в макете.
//
Функция СчитатьКоллекциюСписковВыбораАЛКО(ИмяМакета, ИмяФормы, ОбъектЭтогоОтч = Неопределено) Экспорт
		
	МакетСписков = ПолучитьМакетИзОбъектаАЛКО(ИмяМакета, ИмяФормы, ОбъектЭтогоОтч);
	
	КоллекцияСписковВыбора = Новый Соответствие;
	
	Для Каждого Область Из МакетСписков.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код", , , МакетСписков.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название", , , МакетСписков.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			                                        
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				
				КодПоказателя = СокрП(МакетСписков.Область(НомСтр, 1).Текст);
				
				Если (НЕ ЗначениеЗаполнено(КодПоказателя)) 
					или (Лев(КодПоказателя, 2) = "//") Тогда  // пропускаем комментарии
					Продолжить;
				КонецЕсли;
			    					
				НовСтрока = ТаблСписка.Добавить();
				НовСтрока.Код = КодПоказателя;
				НовСтрока.Название = СокрП(МакетСписков.Область(НомСтр, 2).Текст);
				
			КонецЦикла;
			
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцияСписковВыбора;
	
КонецФункции

// Формирует стандартную для всех отчетов ФСРАР структуру реквизитов формы
//
// Параметры:
//      СтруктураРеквизитовФормы - Любой тип - в этом параметре возвращается сформированная структура.
//
Процедура СформироватьСтруктуруРеквизитовФормыАЛКО(СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мДокументИсточник");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВидДеят");
	
	СтруктураРеквизитовФормы.Вставить("мИдГруппы01"); // Лицензии Таблица 1.	
	СтруктураРеквизитовФормы.Вставить("мИдГруппы12"); // Раздел 1 Таблица 2.	
	СтруктураРеквизитовФормы.Вставить("мИдГруппы22"); // Раздел 2 Таблица 2.
	
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мСтараяВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мИННЮЛ");
	СтруктураРеквизитовФормы.Вставить("мКППЮЛ");
	СтруктураРеквизитовФормы.Вставить("мТелОрганизации");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчетаДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КодНО");
	СтруктураРеквизитовФормы.Вставить("КППТек");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ФИОИсп");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("Руководитель");
	СтруктураРеквизитовФормы.Вставить("Бухгалтер");
	СтруктураРеквизитовФормы.Вставить("Исполнитель");
	СтруктураРеквизитовФормы.Вставить("ТелОрганизации");
	
	СтруктураРеквизитовФормы.Вставить("мСоответствиеИдГруппыРаздел");
	СтруктураРеквизитовФормы.Вставить("мСоответствиеРазделИдГруппы");
	СтруктураРеквизитовФормы.Вставить("мСоответствиеИдГруппыРегистр");	
	СтруктураРеквизитовФормы.Вставить("мСоответствиеРегистрИдГруппы");
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ВспомогательныйАдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаТаблицы");
																	                                  
КонецПроцедуры

Процедура ИнициализацияЭлементовТаблицыФормыАЛКО(Форма) Экспорт
	
	// Ищем Группу ГруппаТаблицы.
	Элементы = Форма.Элементы;
	
	ГруппаТаблицы = Элементы.Найти("ГруппаТаблицы");
	Если ГруппаТаблицы = Неопределено Тогда
	    // Нет группы - нечего делать.
		Возврат;	
	КонецЕсли;
	
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	мСтруктураИдГрупп = СтруктураРеквизитовФормы.мСтруктураИдГрупп;
	
	Для каждого Элемент Из мСтруктураИдГрупп Цикл
	
		Раздел = Элемент.Ключ;
		// Создаем Группу под раздел.
		// Нужна для включения видимости только для таблиц конкретного раздела.
		ГруппаТаблицыРаздела = Форма.Элементы.Добавить("ГруппаТаблицы" + Раздел, Тип("ГруппаФормы"), ГруппаТаблицы);
	    ГруппаТаблицыРаздела.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаТаблицыРаздела.Видимость = Истина;
		ГруппаТаблицыРаздела.Доступность = Истина;
		ГруппаТаблицыРаздела.Заголовок = Неопределено;
		ГруппаТаблицыРаздела.ОтображатьЗаголовок = Ложь;
		
	    СписокИдГруппРаздела = Элемент.Значение;
		КоличествоГрупп = СписокИдГруппРаздела.Количество();
		
		Если КоличествоГрупп = 1 Тогда
			
		    // Одна таблица в разделе, создаем группу таблицы формы
			ИмяТаблицыФормы = СписокИдГруппРаздела[0].Представление;
			
			ГруппаТаблицыФормыРаздела = Форма.Элементы.Добавить("ГруппаТаблицыФормы" + ИмяТаблицыФормы, Тип("ГруппаФормы"), ГруппаТаблицыРаздела);
			
			ГруппаТаблицыФормыРаздела.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТаблицыФормыРаздела.Видимость = Истина;
			ГруппаТаблицыФормыРаздела.Доступность = Истина;
			ГруппаТаблицыФормыРаздела.Заголовок = Неопределено;
			ГруппаТаблицыФормыРаздела.ОтображатьЗаголовок = Ложь;
			
		ИначеЕсли КоличествоГрупп > 1 Тогда
			
			// Групп несколько, надо создать группу страниц, разместив группы таблиц форм по разным страницам.
			СтраницыТаблицРаздела = Форма.Элементы.Добавить("СтраницыТаблиц" + Раздел, Тип("ГруппаФормы"), ГруппаТаблицыРаздела);
			
			СтраницыТаблицРаздела.Вид = ВидГруппыФормы.Страницы;
			СтраницыТаблицРаздела.Видимость = Истина;
			СтраницыТаблицРаздела.Доступность = Истина;
			СтраницыТаблицРаздела.Заголовок = Неопределено;
			СтраницыТаблицРаздела.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
			
			// Теперь для каждой группы делаем страницу, и в ней - группу таблицы формы.
			Для каждого ЭлементИдГруппы Из СписокИдГруппРаздела Цикл
			
				ИмяТаблицыФормы = ЭлементИдГруппы.Представление;
				
				СтраницаТаблицыРаздела = Форма.Элементы.Добавить("СтраницаТаблицы" + ИмяТаблицыФормы, Тип("ГруппаФормы"), СтраницыТаблицРаздела);
				
				СтраницаТаблицыРаздела.Вид = ВидГруппыФормы.Страница;
				СтраницаТаблицыРаздела.Видимость = Истина;
				СтраницаТаблицыРаздела.Доступность = Истина;
				СтраницаТаблицыРаздела.Заголовок = ИмяТаблицыФормы;
				
				ГруппаТаблицыФормыРаздела = Форма.Элементы.Добавить("ГруппаТаблицыФормы" + ИмяТаблицыФормы, Тип("ГруппаФормы"), СтраницаТаблицыРаздела);
				
				ГруппаТаблицыФормыРаздела.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаТаблицыФормыРаздела.Видимость = Истина;
				ГруппаТаблицыФормыРаздела.Доступность = Истина;
				ГруппаТаблицыФормыРаздела.Заголовок = Неопределено;
				ГруппаТаблицыФормыРаздела.ОтображатьЗаголовок = Ложь;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Для виноградных деклараций фиксируем высоту, у них большая шапка.
	Если Форма.НомерАлкоОтчета >= 13 Тогда
		
		ВысотаЭкрана = Неопределено;
		
		МассивИнформацииЭкранов = ПолучитьИнформациюЭкрановКлиента();
		Если (НЕ МассивИнформацииЭкранов = Неопределено) и (МассивИнформацииЭкранов.Количество() > 0) Тогда
			
		    ИнформацияЭкранаКлиента = МассивИнформацииЭкранов[0];
			ВысотаЭкрана = ИнформацияЭкранаКлиента.Высота;
			
			Если (НЕ ВысотаЭкрана = Неопределено) и (ВысотаЭкрана <= 1024) Тогда
				
				// Чтобы таблица не сливалась с комментарием.
				РегулировочнаяНадпись = Форма.Элементы.Добавить("РегулировочнаяНадпись", Тип("ДекорацияФормы"), ГруппаТаблицы);
				РегулировочнаяНадпись.Вид = ВидДекорацииФормы.Надпись;
				РегулировочнаяНадпись.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
				РегулировочнаяНадпись.Высота = 1;
				
			КонецЕсли;
			
		КонецЕсли; 
	  
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 


#Область ПрограммныйИнтерфейсОбработчикиТаблицыФормы

// Пересчитывает итоги таблицы формы отчета ФСРАР, и выводит подвал таблицы при необходимости.
//
// Параметры:
//
//	 	Форма							- Управляемая форма - Форма отчета ФСРАР.
//		ИнформацияДляПересчетаИтогов    - Структура.
//			*ИмяРегистра				- Строка - имя регистра сведений.
//			*ИдГруппы					- Строка - идентификатор многострочной группы.
//										Должно быть определено либо значение ИмяРегистра либо ИдГруппы.
//			*ИндексСтраницы				- Число - индекс страницы отчета (номер страницы - 1).
//			*НачальноеЗначение			- Структура или массив - значения строки таблицы до изменения.
//			*КонечноеЗначение			- Структура или массив - значения строки таблицы после изменения.
//
Процедура ПересчитатьТекущиеИтогиТаблицыФормыАЛКО(Форма, ИнформацияДляПересчетаИтогов) Экспорт
	
	Перем ИмяРегистра, ИдГруппы, ИндексСтраницы, ИндексСтроки, 
		НачальноеЗначениеСтруктураДанных, КонечноеЗначениеСтруктураДанных;
		
	ИнформацияДляПересчетаИтогов.Свойство("ИмяРегистра", 		ИмяРегистра);
	ИнформацияДляПересчетаИтогов.Свойство("ИдГруппы", 			ИдГруппы);
	ИнформацияДляПересчетаИтогов.Свойство("ИндексСтраницы", 	ИндексСтраницы);
	
	ИнформацияДляПересчетаИтогов.Свойство("НачальноеЗначение", 	НачальноеЗначениеСтруктураДанных);
	ИнформацияДляПересчетаИтогов.Свойство("КонечноеЗначение", 	КонечноеЗначениеСтруктураДанных);
	
	Если ИдГруппы = Неопределено Тогда
		
		Если НЕ ИмяРегистра = Неопределено Тогда
			
			ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоИмениРегистраАЛКО(
																ИмяРегистра, Форма.СтруктураРеквизитовФормы);
		Иначе
			Возврат;													
	    КонецЕсли;
		
	КонецЕсли; 
	
	Если (ИндексСтраницы = Неопределено) или (НЕ ТипЗнч(ИндексСтраницы) = Тип("Число")) Тогда
	    Возврат;
	КонецЕсли;
	
	Если (НЕ ТипЗнч(НачальноеЗначениеСтруктураДанных) = Тип("Структура")) 
		и (НЕ ТипЗнч(НачальноеЗначениеСтруктураДанных) = Тип("Массив")) Тогда
	    Возврат;
	КонецЕсли;
	Если (НЕ ТипЗнч(КонечноеЗначениеСтруктураДанных) = Тип("Структура")) 
		и (НЕ ТипЗнч(КонечноеЗначениеСтруктураДанных) = Тип("Массив")) Тогда
	    Возврат;
	КонецЕсли;
	
	Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(
															ИдГруппы, Форма.СтруктураРеквизитовФормы);
															
	ТаблицаРаздела = Форма["ТаблицаСтраницы" + Раздел];
	СтраницаРаздела = ТаблицаРаздела[ИндексСтраницы];
	
	// Расчет Итогов.
	БуферИтогов = Форма["БуферИтогов" + ИдГруппы];
	
	Для Каждого БуферКонтролируемогоПоля Из БуферИтогов Цикл
		
	    ИмяКонтролируемогоПоля 		= БуферКонтролируемогоПоля.Представление;
		ЗначениеДоРедактирования 	= НачальноеЗначениеСтруктураДанных[ИмяКонтролируемогоПоля];
	    ЗначениеПослеРедактирования = КонечноеЗначениеСтруктураДанных[ИмяКонтролируемогоПоля];
		
		РазницаЗначений = ЗначениеПослеРедактирования - ЗначениеДоРедактирования;
		
		// Нужно прибавить разницу к итогу.
		ЗначениеИтога = 0;
		Если НЕ СтраницаРаздела.ДополнительныеДанные[0].Значение.Свойство(ИмяКонтролируемогоПоля, ЗначениеИтога)  Тогда
		    СтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяКонтролируемогоПоля, РазницаЗначений);
		Иначе	
		    СтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяКонтролируемогоПоля, ЗначениеИтога + РазницаЗначений);
		КонецЕсли;
		
	КонецЦикла;
	
	СтраницаРаздела.ДополнительныеДанные[0].Пометка = Ложь;
	
	// Если текущая страница в отчете та, по которой пересчитали итог, 
	// нужно перерисовать подвал таблицы формы с итогами.
	Если (Форма.ТекущийИдГруппы = ИдГруппы) и (Форма.НомерАктивнойСтраницыМногострочногоРаздела = ИндексСтраницы) Тогда
	
		ВывестиИтогиТаблицыФормыРазделаАЛКО(
						Форма, Форма.ТекущийИдГруппы, СтраницаРаздела.ДополнительныеДанные[0].Значение);
	
	КонецЕсли; 
		
КонецПроцедуры


// Устанавливает или снимает "пометку удаления" на строку таблицы формы отчета ФСРАР,
// в зависимости от текущего состояния на обратное.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		ТекущиеДанные       - ДанныеФормыСтруктура - текущие данные таблицы формы.
//		Раздел				- Строка - имя многострочного раздела отчета, страница которого выводится.
//		КоличествоСтрок		- Число - количество строк в таблице формы на странице.
//
Процедура АктивацияДеактивацияАЛКО(Форма, ТекущиеДанные, Раздел, КоличествоСтрок) Экспорт 
	
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;	
	КонецЕсли;
	
	ИмяПоля = "Активно";
						
	НовоеЗначениеПоля = НЕ ТекущиеДанные[ИмяПоля];
	
	НужноДобавитьИтоги = НовоеЗначениеПоля; //Если Активно - прибавляем, иначе убавляем.
	
	// Уменьшаем КоличествоПомеченныхНаУдаление если снята пометка удаления,
	// увеличиваем если установлена.
	Дельта = ?(НужноДобавитьИтоги, -1, 1);
	
	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
	ИндексСтроки = ТекущиеДанные.ИндексСтроки;
		
	ИзменитьЗаписьРегистраСведенийАЛКО(Форма, Форма.ТекущийИдГруппы, ИндексСтраницы, ИндексСтроки, 
									ИмяПоля, НовоеЗначениеПоля, КоличествоСтрок);
	
	// Изменим КолвоСтрокПомНаУдаление.	
	РегламентированнаяОтчетностьАЛКОКлиентСервер.ИзменитьКоличествоПомеченныхНаУдалениеСтрокПоТекущейСтранице(
													Форма, Форма.ТекущийИдГруппы, ИндексСтраницы, Дельта);
													
	ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
														Форма.ТекущийИдГруппы, Форма.СтруктураРеквизитовФормы);												
													
	ИнформацияДляПересчетаИтогов = Новый Структура;
	ИнформацияДляПересчетаИтогов.Вставить("ИмяРегистра", 		ИмяРегистра);
	ИнформацияДляПересчетаИтогов.Вставить("ИдГруппы", 			Форма.ТекущийИдГруппы);
	ИнформацияДляПересчетаИтогов.Вставить("ИндексСтраницы", 	ИндексСтраницы);
	
	
	ПустоеЗначениеСтруктураДанных = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистра);
	ТекущиеДанныеСтруктураДанных = Неопределено;
	ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(ТекущиеДанные, ИмяРегистра, ТекущиеДанныеСтруктураДанных);
	
	Если НужноДобавитьИтоги Тогда
	
		ИнформацияДляПересчетаИтогов.Вставить("НачальноеЗначение", 	ПустоеЗначениеСтруктураДанных);
		ИнформацияДляПересчетаИтогов.Вставить("КонечноеЗначение", 	ТекущиеДанныеСтруктураДанных);
		
	Иначе
		
		ИнформацияДляПересчетаИтогов.Вставить("НачальноеЗначение", 	ТекущиеДанныеСтруктураДанных);
		ИнформацияДляПересчетаИтогов.Вставить("КонечноеЗначение", 	ПустоеЗначениеСтруктураДанных);
		
	КонецЕсли; 
	
	ПересчитатьТекущиеИтогиТаблицыФормыАЛКО(Форма, ИнформацияДляПересчетаИтогов);
	
	// Обновляем данные.
	Форма.Модифицированность = Истина;
		
КонецПроцедуры
	
#КонецОбласти 


#Область ПрограммныйИнтерфейсОчистка

// Серверная часть очистки всех разделов формы отчета ФСРАР.
// При этом физической очистки регистров сведений не происходит - просто очищаются сервисные данные
// в реквизитах формы, удаляются все страницы с добавлением информации о удаленных страницах
// в СервисРегистров<ИдГруппы>Удаленные и добавляется по одной новой странице.
// Поскольку МаксИндексСтраницы отчета при этом не очищается, добавленные страницы имеют ИндексСтраницыРегистра
// всегда больше, чем все существующие - и в отчете табличные данные "очищаются".
// Для физического удаления информации из регистров сведений отчета необходимо использовать
// ОчиститьРегистрыОтМусора из меню Сервис отчета.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ОчиститьНаСервереАЛКО(Форма) Экспорт
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лицензии" Тогда
		// Очистим реквизиты.
		
		// Используем то обстоятельство, что поля Данных Лицензии, 
		// имеют реквизиты с П000000000101 по П000000000105.
		
		Для Инд = 1 По 5 Цикл
		
			ИмяРеквизита = "П00000000010" + Инд;
			
			Форма[ИмяРеквизита] = Неопределено;
			
		КонецЦикла;
		
	КонецЕсли;
	
		
	Для Каждого Раздел Из Форма.мСтруктураМногостраничныхРазделов Цикл
					
		НазваниеРаздела = Раздел.Ключ;
		ИмяТаблицыРаздела = Раздел.Значение;
		
		Форма[ИмяТаблицыРаздела].Очистить();
		
		ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
		Если НЕ ГруппаВиноградныхДанных = Неопределено Тогда
			
			ПодчиненныеЭлементы = ГруппаВиноградныхДанных.ПодчиненныеЭлементы;
						
			Для каждого Элемент Из ПодчиненныеЭлементы Цикл
				
				ИмяРеквизита = Элемент.Имя;
				Если СтрНайти(ИмяРеквизита, "П0000100003") = 0  Тогда
				    Продолжить;					
				КонецЕсли;
				
				Форма[ИмяРеквизита] = Неопределено;
			
			КонецЦикла; 
				
		КонецЕсли;
				
		СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(
													НазваниеРаздела, Форма.СтруктураРеквизитовФормы);

		Для каждого ЭлементСписка Из СписокИдГрупп Цикл
		
			ИдГруппы = ЭлементСписка.Значение;
			ОчиститьСервисРегистровОтчетаАЛКО(Форма, ИдГруппы);
		
		КонецЦикла; 
						
	КонецЦикла;
		
	ИнициализацияМногостраничныхРазделовАЛКО(Форма);
	
	// Индекс единственной страницы всегда 0.
	Форма.НомерАктивнойСтраницыМногострочногоРаздела = 0;
				
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(Форма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(Форма);
	
	Форма.ТекущийЭлемент = Форма.Элементы.РазделыОтчета.ТекущийЭлемент;
		
КонецПроцедуры

// Серверная часть очистки текущей страницы раздела формы отчета ФСРАР.
// При этом физической очистки регистров сведений не происходит - просто очищаются сервисные данные
// в реквизитах формы, очищаются реквизиты страницы с добавлением информации о удаленных страницах
// в СервисРегистров<ИдГруппы>Удаленные и назначается новый ИндексСтраницыРегистра.
// Для физического удаления информации из регистров сведений отчета необходимо использовать
// ОчиститьРегистрыОтМусора из меню Сервис отчета.
//
// Параметры:
//
//	 	Форма											- Управляемая форма - Форма отчета ФСРАР.
//		Раздел                                     		- Строка - имя многострочного раздела отчета, 
//														страница которого выводится.
//		ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста	- Наследуемый из 
//									РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов()
//									параметр.
//		РежимОчистки									- Наследуемый из 
//									РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов()
//									параметр.
//
Процедура ОчисткаРегламентированногоОтчетаАЛКО(Форма, Раздел, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, 
											РежимОчистки) Экспорт
			
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
			
		Если НЕ (Раздел = "Титульный") Тогда
		    
			СтраницыРаздела = Неопределено;
			Форма.мСтруктураМногостраничныхРазделов.Свойство(Раздел, СтраницыРаздела);
			СтраницыРаздела = Форма[СтраницыРаздела];
			АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

			Если АктивнаяСтраница.Количество() > 0 Тогда
				АктивнаяСтраница = АктивнаяСтраница[0];
		        ИндексСтраницы = СтраницыРаздела.Индекс(АктивнаяСтраница);
			Иначе
				Возврат;
			КонецЕсли;
			
			// Очищаем Данные и ДополнительныеДанные.
			Если АктивнаяСтраница.Данные.Количество() > 0 Тогда
				АктивнаяСтраница.Данные[0].Значение = Новый Структура;
			Иначе
				АктивнаяСтраница.Данные.Добавить(Новый Структура);
			КонецЕсли;
			
			Если АктивнаяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
				АктивнаяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
			Иначе
				АктивнаяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
			КонецЕсли;
			
			Если НЕ Раздел = "Лицензии" Тогда
			
				АктивнаяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");
				
				СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
								
				АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
				// Очищаем данныеОбОП на форме.
				ОбособленноеПодразделениеРаздела = "";
				
				АктивнаяСтраница.ФлагГоловногоОП = Ложь;
				
				ИмяНомерСтраницыФлагГоловногоОП = "НомерСтраницыФлагГоловногоОП" + Раздел;
				Если Форма[ИмяНомерСтраницыФлагГоловногоОП] = ИндексСтраницы + 1 Тогда
				    Форма[ИмяНомерСтраницыФлагГоловногоОП] = 0;				
				КонецЕсли;
				
				Если НЕ Форма.Элементы.Найти("ГруппаВиноградныхДанных") = Неопределено Тогда
		
					АктивныеДанные = АктивнаяСтраница.Данные[0].Значение;
					
					Если ТипЗнч(АктивныеДанные) = Тип("Структура") Тогда
					
						Для каждого ЭлементСтруктуры Из АктивныеДанные Цикл
							
							ИмяРеквизита = ЭлементСтруктуры.Ключ;
							Если СтрНайти(ИмяРеквизита, "П0000100003") = 0  Тогда
							    Продолжить;					
							КонецЕсли;
							
							Форма[ИмяРеквизита] = Неопределено;
							АктивныеДанные.Вставить(ИмяРеквизита, Неопределено);
						
						КонецЦикла; 
					
					КонецЕсли; 
				
				КонецЕсли;
				
			Иначе
				// Раздел Лицензии,
				// очистим реквизиты.
		
				// Используем то обстоятельство, что поля Данных Лицензии, 
				// имеют реквизиты с П000000000101 по П000000000105.
				
				Для Инд = 1 По 5 Цикл
				
					ИмяРеквизита = "П00000000010" + Инд;
					
					Форма[ИмяРеквизита] = Неопределено;
					
				КонецЦикла;
				
				АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить("П000000000105", Неопределено);
				
			КонецЕсли; 
			
			// Принудительно заставим платформу обновить значения СпискаЗначений.
			АктивнаяСтраница.Данные[0].Пометка = НЕ АктивнаяСтраница.Данные[0].Пометка;			
			АктивнаяСтраница.ДополнительныеДанные[0].Пометка = НЕ АктивнаяСтраница.ДополнительныеДанные[0].Пометка;
						
			// Очищаем СервисРегистров.			
			СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(
													Раздел, Форма.СтруктураРеквизитовФормы);

			Для каждого ЭлементСписка Из СписокИдГрупп Цикл
			
				ИдГруппы = ЭлементСписка.Значение;
				
				Если ЗначениеЗаполнено(ИдГруппы) Тогда
																	
					СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];
					
					// Сначала запишем в удаленные.
					СервисРегистровГруппыУдаленные = Форма["СервисРегистров" + ИдГруппы + "Удаленные"];
					СтрокаТЗУдаленные = СервисРегистровГруппыУдаленные.Добавить();
					СтрокаТЗУдаленные.КоличествоСтрок			= СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок;
					СтрокаТЗУдаленные.ИндексСтраницыРегистра	= СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра;
					
					// Фиксируем удаление в журнале.
					ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
																			ИдГруппы, Форма.СтруктураРеквизитовФормы);
					
					Ресурсы = Новый Структура;
					Ресурсы.Вставить("КоличествоСтрок", СтрокаТЗУдаленные.КоличествоСтрок);		
					// Индекс строки 0 используем для обозначения операций над страницами в целом.
					// В норме индекс строки не меньше 1.
					ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра,
											СтрокаТЗУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
											
					// Обнуляем поля текущей строки.
					СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок = 0;
					СервисРегистровГруппы[ИндексСтраницы].КолвоСтрокПомНаУдаление = 0;
													
					Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;
					СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
					
					// Фиксируем добавление новой страницы.
					Ресурсы = Новый Структура;
					Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
					
					ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра,
								Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);
						 	
				КонецЕсли;
							
			КонецЦикла;
		 
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Раздел = "Титульный" Тогда
		
		Форма.НомерКорректировки                = 0;
		Форма.СтруктураДанныхТитульный.Вставить("НомКорр", Форма.НомерКорректировки);
		Форма.СтруктураРеквизитовФормы.ВидДокумента      = 0;
		
		Форма.КоличествоСтраницПодтверждающихДокументов = 0;
		Форма.СтруктураДанныхТитульный.Вставить("Прил", Форма.КоличествоСтраницПодтверждающихДокументов);
		
		Форма.КудаПредставляется = "";
		Форма.СтруктураДанныхТитульный.Вставить("ОргИМНС", Форма.КудаПредставляется);
		
		Форма.ОрганизацияЭлектронныйАдрес = "";
		Форма.СтруктураДанныхТитульный.Вставить("ЭлектроннаяПочта", Форма.ОрганизацияЭлектронныйАдрес);
		
		Форма.ДатаПодписи = Неопределено;
		Форма.СтруктураДанныхТитульный.Вставить("ДатаПодписи", Форма.ДатаПодписи);
		
		// Обновляем Титульный в соответствии с датой.
		ОбновитьНаСервереАЛКО(Форма, Истина);
				
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(Форма, Раздел, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(Форма);
	
КонецПроцедуры
	
#КонецОбласти 


#Область ПрограммныйИнтерфейсДобавитьУдалитьСтраницу

// Серверная часть механизма удаления текущей страницы многостраничного раздела формы отчета ФСРАР.
// При этом физической очистки регистров сведений не происходит - просто очищаются сервисные данные
// в реквизитах формы, очищаются реквизиты страницы с добавлением информации о удаленных страницах
// в СервисРегистров<ИдГруппы>Удаленные и назначается новый ИндексСтраницыРегистра.
// Для физического удаления информации из регистров сведений отчета необходимо использовать
// ОчиститьРегистрыОтМусора из меню Сервис отчета.
//
// Параметры:
//
//	 	Форма			- Управляемая форма - Форма отчета ФСРАР.
//		Раздел			- Строка - Необязательный. Имя многострочного раздела отчета, 
//						страница которого выводится.
//
Процедура УдалитьСтраницуОтчетаАЛКО(Форма, Раздел = Неопределено) Экспорт
	
	Перем ТаблицаСтраницРаздела;

	Если Раздел = Неопределено Тогда
		Раздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(Раздел, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		// Одна страница всегда должна быть.
		Возврат;
	КонецЕсли;

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);
		
		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();
		НомерСтраницыЗамена = Мин(ИндексТекСтрока, КолвоДопСтраниц - 1);
						
		// Удаляем строку таблицы СервисРегистров.
		СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(
													Раздел, Форма.СтруктураРеквизитовФормы);

		Для каждого ЭлементСписка Из СписокИдГрупп Цикл
		
			ИдГруппы = ЭлементСписка.Значение;
			
			Если НЕ ИдГруппы = Неопределено Тогда
				
				// На случай если был выставлен признак Головного ОП.
				Если НЕ Раздел = "Лицензии" Тогда
				
					ИмяНомерСтраницыФлагГоловногоОП = "НомерСтраницыФлагГоловногоОП" + Раздел;
					Если Форма[ИмяНомерСтраницыФлагГоловногоОП] = ИндексТекСтрока + 1 Тогда
					    Форма[ИмяНомерСтраницыФлагГоловногоОП] = 0;				
					КонецЕсли;	
				
				КонецЕсли;
			
				СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];
				
				СервисРегистровГруппыУдаленные = Форма["СервисРегистров" + ИдГруппы + "Удаленные"];
				СтрокаТЗУдаленные = СервисРегистровГруппыУдаленные.Добавить();
				СтрокаТЗУдаленные.КоличествоСтрок			= СервисРегистровГруппы[ИндексТекСтрока].КоличествоСтрок;
				СтрокаТЗУдаленные.ИндексСтраницыРегистра	= СервисРегистровГруппы[ИндексТекСтрока].ИндексСтраницыРегистра;
				
				
				ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
																		ИдГруппы, Форма.СтруктураРеквизитовФормы);
				
				Ресурсы = Новый Структура;
				Ресурсы.Вставить("КоличествоСтрок", СтрокаТЗУдаленные.КоличествоСтрок);		
				// Индекс строки 0 используем для обозначения операций над страницами в целом.
				// В норме индекс строки не меньше 1.	
				ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра,
											СтрокаТЗУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);			
				
						
				СервисРегистровГруппы.Удалить(ИндексТекСтрока);	
			
			КонецЕсли;
			
		КонецЦикла;
				
		Форма.Модифицированность = Истина;
				
	КонецЕсли;
				
КонецПроцедуры

// Серверная часть механизма добавления текущей страницы многостраничного раздела формы отчета ФСРАР.
//
// Параметры:
//
//	 	Форма			- Управляемая форма - Форма отчета ФСРАР.
//		Раздел			- Строка - Необязательный. Имя многострочного раздела отчета, 
//						страница которого выводится.
//
Процедура ВставитьСтраницуОтчетаАЛКО(Форма, Раздел = Неопределено) Экспорт

	Перем ТаблицаСтраницРаздела;

	Если Раздел = Неопределено Тогда
		Раздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(Раздел, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(
								Раздел, Форма.СтруктураРеквизитовФормы);

	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Раздел, "МаксКолвоЭкз", 0);
	Если МаксКолвоЭкз <> 0 И ТаблицаСтраницРаздела.Количество() >= МаксКолвоЭкз Тогда
		
		ЗаголовокСтраницы = Раздел;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Нужно сохранить данные текущей страницы. 
	СохранитьДанныеРазделаАЛКО(Форма, Раздел);
		
	// Добавляем новую страницу.
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию.
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
			
	// Инициируем Данные.
    Если СтрНоваяСтраница.Данные.Количество() > 0 Тогда
		СтрНоваяСтраница.Данные[0].Значение = Новый Структура;
	Иначе
		СтрНоваяСтраница.Данные.Добавить(Новый Структура);
	КонецЕсли;
	
	// Инициируем ДопДанные.
    Если СтрНоваяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
		СтрНоваяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
	Иначе
		СтрНоваяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
	
				
	СтрНоваяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");
	
	ЭтоВиноградная = Ложь;
	ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
	Если НЕ ГруппаВиноградныхДанных = Неопределено Тогда
		
		ЭтоВиноградная = Истина;
		ПодчиненныеЭлементыВиноградныхДанных = ГруппаВиноградныхДанных.ПодчиненныеЭлементы;
		
		СтруктураДанныхИсточник = Новый Структура; // Источник пустой.
		СтруктураДанныхПриемник = СтрНоваяСтраница.Данные[0].Значение;
		
		ВосстановитьДанныеПодчиненныхЭлементовФормы(
				СтруктураДанныхПриемник, СтруктураДанныхИсточник, ПодчиненныеЭлементыВиноградныхДанных, ИдГруппы);
					
	КонецЕсли;
	
	СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
	
	ТекущийФлагГоловногоОП = Неопределено;
	Если ЭтоВиноградная и (Форма.ТекущееСостояние = "ДобавлениеВиноградника") Тогда
	
		Если ТипЗнч(Форма.ОбщийПараметрПроцедур) = Тип("Структура") Тогда
			
			ТекущиеСведенияОбОП = Неопределено;
			Если Форма.ОбщийПараметрПроцедур.Свойство("ТекущиеСведенияОбОП", ТекущиеСведенияОбОП) Тогда
			
				СтруктураСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ТекущиеСведенияОбОП);				 
			    Форма.ОбщийПараметрПроцедур.Удалить("ТекущиеСведенияОбОП");
				
			КонецЕсли;
					
			Если Форма.ОбщийПараметрПроцедур.Свойство("ТекущийФлагГоловногоОП", ТекущийФлагГоловногоОП) Тогда								 
			    Форма.ОбщийПараметрПроцедур.Удалить("ТекущийФлагГоловногоОП");				
			КонецЕсли;
			
		
		КонецЕсли;
		
	    Форма.ТекущееСостояние = "";
		
	КонецЕсли; 
	
				
	СтрНоваяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
	
	// Актуально для виноградных.
	Если НЕ ТекущийФлагГоловногоОП = Неопределено Тогда
	    СтрНоваяСтраница.ФлагГоловногоОП = ТекущийФлагГоловногоОП;	
	КонецЕсли; 
	
	// Заставляем принудительно платформу обновить СписокЗначений.
	СтрНоваяСтраница.Данные[0].Пометка = НЕ СтрНоваяСтраница.Данные[0].Пометка;
	СтрНоваяСтраница.ДополнительныеДанные[0].Пометка = НЕ СтрНоваяСтраница.ДополнительныеДанные[0].Пометка;
	
	// Нужно добавить таблицу в СервисРегистров.
	СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(
													Раздел, Форма.СтруктураРеквизитовФормы);

	Для каждого ЭлементСписка Из СписокИдГрупп Цикл
		
		ИдГруппы = ЭлементСписка.Значение;
		
		СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];
		
		// Нужно определить текущий максимальный индекс страницы в регистре по Группе.
		Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;
		
		НоваяСтраница = СервисРегистровГруппы.Добавить();
		НоваяСтраница.КоличествоСтрок = 0;	
		НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
			
		Форма.Модифицированность = Истина;
		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.
		ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
														ИдГруппы, Форма.СтруктураРеквизитовФормы);
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
		
		ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра,
					НоваяСтраница.ИндексСтраницыРегистра, 0, "ДобавлениеСтраницы", Ресурсы);
					
	КонецЦикла;
				
	// Вносим новую строку в Разделы Отчета.
	ПослеДобавленияДопСтрМногострочногоРазделаАЛКО(Форма, Раздел);
	
КонецПроцедуры

#КонецОбласти


#Область ПрограммныйИнтерфейсСохранение

// Определяет возможность сохранения формы отчета ФСРАР без дополнительных вопросов или необходимость дополнительных вопросов.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
//		СтруктураПараметров		- Структура.
//			*КодИФНС					- Строка. Код ИФНС.
//			*КПП						- Строка. Код КПП.
//			*ПодобныйОтчетСуществует 	- Булево. Возвращается признак наличия подобного отчета.
//			*Вариант					- Число.
//			*ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки - Булево. 
//										Возвращается признак необходимости задать вопрос при изменении
//										номера корректировки отчета.
//			*МожноСохранять				- Булево. Возвращается признак возможности сохранения без вопросов.
//			*Автосохранение				- Булево. Необязательный. Признак автосохранения отчета.
//			*НаимТекРаздела				- Строка. Текущий активный раздел отчета.
//
Процедура ПередСохранениемАЛКО(Форма, СтруктураПараметров) Экспорт
	
	Перем КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, 
		  ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, 
		  МожноСохранять, Автосохранение, НаимТекРаздела;
		  
	// Извлекаем параметры.
	СтруктураПараметров.Свойство("КодИФНС", КодИФНС);
	СтруктураПараметров.Свойство("КПП", КПП);
	СтруктураПараметров.Свойство("ПодобныйОтчетСуществует", ПодобныйОтчетСуществует);
	СтруктураПараметров.Свойство("Вариант", Вариант);
	СтруктураПараметров.Свойство("ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", 
								ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	СтруктураПараметров.Свойство("МожноСохранять", МожноСохранять);
	
	СтруктураПараметров.Свойство("Автосохранение", Автосохранение);
	Автосохранение = ?(Автосохранение = Неопределено, Ложь, Автосохранение);
	
	СтруктураПараметров.Свойство("НаимТекРаздела", НаимТекРаздела);
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	МожноСохранять = Ложь;
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(Форма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(Форма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	Форма.СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = 
				(Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено 
				ИЛИ Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если (Вариант <> Неопределено) 
		 И ((Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) 
			ИЛИ (Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) 
			ИЛИ (Вариант <> Форма.СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если (Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
			ИЛИ (Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) Тогда
						
		ИначеЕсли Вариант <> Форма.СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
			
	МожноСохранять = НЕ (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	// Сохраняем измененные параметры.
	СтруктураПараметров.Вставить("КодИФНС", КодИФНС);
	СтруктураПараметров.Вставить("КПП", КПП);
	СтруктураПараметров.Вставить("ПодобныйОтчетСуществует", ПодобныйОтчетСуществует);
	СтруктураПараметров.Вставить("Вариант", Вариант);
	СтруктураПараметров.Вставить("ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", 
								ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	СтруктураПараметров.Вставить("МожноСохранять", МожноСохранять);
	СтруктураПараметров.Вставить("Автосохранение", Автосохранение);
	СтруктураПараметров.Вставить("НаимТекРаздела", НаимТекРаздела);
			
КонецПроцедуры

// Сохраняет форму отчета ФСРАР, за исключением регистров сведений.
// Как таковые регистры сведений не сохраняются - после отработки СохранитьДанныеОтчетаАЛКО()
// вызывается длительная операция СохранитьРегистрыСведений() в модуле формы отчета,
// которая очищает Журнал от записей редактирования отчета.
//
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
//		СтруктураПараметров		- Структура.
//			*КодИФНС					- Строка. Код ИФНС.
//			*КПП						- Строка. Код КПП.
//			*Вариант					- Число.
//			*ВидДокументаНомерКорректировкиИзменен - Булево. 
//										Признак  изменения номера корректировки отчета.
//			*Автосохранение				- Булево. Необязательный. Признак автосохранения отчета.
//			*НаимТекРаздела				- Строка. Текущий активный раздел отчета.
//
Функция СохранитьДанныеОтчетаАЛКО(Форма, СтруктураПараметров) Экспорт
	
	Перем Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, НаимТекРаздела;
	
	СтруктураПараметров.Свойство("КодИФНС", КодИФНС);
	СтруктураПараметров.Свойство("КПП", КПП);
	СтруктураПараметров.Свойство("Вариант", Вариант);
	СтруктураПараметров.Свойство("ВидДокументаНомерКорректировкиИзменен", ВидДокументаНомерКорректировкиИзменен);
	СтруктураПараметров.Свойство("Автосохранение", Автосохранение);
	СтруктураПараметров.Свойство("НаимТекРаздела", НаимТекРаздела);
	
	Автосохранение = ?(Автосохранение = Неопределено, Ложь, Автосохранение);
	
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;	
	
	Если (НЕ ВидДокументаНомерКорректировкиИзменен = Неопределено) и ВидДокументаНомерКорректировкиИзменен Тогда
		
		// Будет запись нового документа с новым номером корректировки.		
		РазблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, Форма.УникальныйИдентификатор);
				
		// Выставляем как источник текущий документ, позже мСохраненныйДок изменится на новый документ.
		СтруктураРеквизитовФормы.мДокументИсточник = СтруктураРеквизитовФормы.мСохраненныйДок;
		
	КонецЕсли; 
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();			
	КонецЕсли;
	
	// В процессе работы ПриЗаписиРегламентированногоОтчетаНаСервере 
	// если передано СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено,
	// создается новый документ.	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
				Форма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, 
				СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
				
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Форма.СтруктураРеквизитовФормы = СтруктураРеквизитовФормы;
		
		Возврат Ложь;
		
	КонецЕсли;

	Если (НЕ ВидДокументаНомерКорректировкиИзменен = Неопределено) и ВидДокументаНомерКорректировкиИзменен Тогда
				
		// Это будет другой отчет.
		Форма.УникальностьФормы = Новый УникальныйИдентификатор;
		// Необходимо, чтобы в новом отчете с другим номером корректировки
		// при Очистке от мусора не стерли случайно страницы, 
		// имевшие отношение к исходному отчету.
		// Кроме того, в новом отчете не было удаления страниц - логично их почистить.
		ОчиститьВсеСервисРегистровУдаленныеОтчетаАЛКО(Форма);
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВидДокумента = ?(Форма.НомерКорректировки = 0, 0, 1);
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	
	// Установим текущие значения реквизитов документа.	
	// Для внешнего отчета ничего делать не надо.
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Форма.ИмяОбъектаФормы].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Форма.ИмяОбъектаФормы].ОсновнаяФорма.Синоним;
	
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Форма.Комментарий;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = Форма.ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант 								  = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРазделаАЛКО(Форма, НаимТекРаздела, Ложь, Ложь);
			
	// Формируем данные редактируемых ячеек таблицы.
	ПоказателиОтчета = ЗаполнитьПоказателиОтчетаАЛКО(Форма);
	
	// Формируем список сохранения.
	СписокСохранения = Новый Структура();
	
	// Вставляем данные редактируемых ячеек таблицы.
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
    		
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив;
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
		
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(Форма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = Форма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("ДополнительныеДанные");
				ТаблЗнач.Колонки.Добавить("ДополнительныеДанные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.ДополнительныеДанные = Форма[ЭлементСтруктуры.Значение][Ном].ДополнительныеДанные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
												
		КонецЕсли;
				
	КонецЦикла;
			
	// Вставляем данные многостраничных разделов.
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
		                    	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из Форма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// Вставляем данные вариантов автозаполнения ячеек.
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// Вствляем версию формы.
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;

	// Вствляем флажок пересчета страниц.
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
    	
	// Вствляем флажок отключения.
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			
	СписокСохранения.Вставить("ДополнительныеДанные", Форма.ДополнительныеДанные);
		
	ВсегоСтрокСохранено = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьОбщееКоличествоСтрок(Форма);
	// Количество строк которые будут сохранены в регистрах сведений.
	СписокСохранения.Вставить("ВсегоСтрокСохранено", ВсегоСтрокСохранено);
	
	Для Каждого Раздел Из Форма.мСтруктураМногостраничныхРазделов Цикл
					
		ИмяРаздела = Раздел.Ключ;
		
		Если ИмяРаздела = "Лицензии" Тогда
		    Продолжить;		
		КонецЕсли; 
		
		ИмяНомерСтраницыФлагГоловногоОП = "НомерСтраницыФлагГоловногоОП" + ИмяРаздела;
		
		СписокСохранения.Вставить(ИмяНомерСтраницыФлагГоловногоОП, Форма[ИмяНомерСтраницыФлагГоловногоОП]);
		
	КонецЦикла;
		
	СписокСохранения.Вставить("ЭтоПБОЮЛ", Форма.ЭтоПБОЮЛ);
	
	СтруктураСервисРегистров = ПолучитьСтруктуруСервисРегистровАЛКО(Форма);;	 
	СписокСохранения.Вставить("СтруктураСервисРегистров",	СтруктураСервисРегистров);
	
	СтруктураСервисРегистровУдаленные = ПолучитьСтруктуруСервисРегистровАЛКО(Форма, Истина);
	СписокСохранения.Вставить("СтруктураСервисРегистровУдаленные",	СтруктураСервисРегистровУдаленные);
	
	СписокСохранения.Вставить("МаксИндексСтраницы",	Форма.МаксИндексСтраницы);	
		
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
			
	// Записываем документ, хранящий данные отчета.
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Форма.СтруктураРеквизитовФормы = СтруктураРеквизитовФормы;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчетаАЛКО(Форма, СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	Форма.СтруктураРеквизитовФормы = СтруктураРеквизитовФормы;
				
	Возврат Истина;

КонецФункции
	
#КонецОбласти


#Область ПрограммныйИнтерфейсВосстановление

// Данная процедура после восстановления регистров сведений определяет необходимость загрузки основных данных отчета,
// и загружает основные данные либо из результатов восстановления данных регистров сведений, либо из данных отчета.
// Позже эти данные используются при восстановлении всех данных отчета в процедуре
// ВосстановитьДанныеОтчетаАЛКО(), вызываемой из этой процедуры.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//		АдресВоВременномХранилище	- Строка - Адрес во временном хранилище, по которому лежит результат 
//									восстановления данных регистров сведений.
//
Процедура ПродолжениеВосстановленияДанныхАЛКО(Форма, АдресВоВременномХранилище) Экспорт
			
	НужноЗагрузитьДанные = Ложь;	
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
	    НужноЗагрузитьДанные = Истина;	
	КонецЕсли;
	
	Если НЕ НужноЗагрузитьДанные Тогда
	
		СтруктураРезультата = ПолучитьИзвременногоХранилища(АдресВоВременномХранилище);
		УдалитьИзВременногоХранилища(АдресВоВременномХранилище);
		
		Если НЕ ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
		    НужноЗагрузитьДанные = Истина;	
		КонецЕсли;	
	
	КонецЕсли; 
					
	Форма.БылИмпорт = Ложь;	
	
	Если НужноЗагрузитьДанные Тогда
		
	    СписокСохранения 					= Форма.СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		СтруктураСервисРегистров 			= СписокСохранения.СтруктураСервисРегистров;
		СтруктураСервисРегистровУдаленные 	= СписокСохранения.СтруктураСервисРегистровУдаленные;
		Форма.МаксИндексСтраницы 			= СписокСохранения.МаксИндексСтраницы;
		
	Иначе
					
	    СписокСохранения 		= СтруктураРезультата.СписокСохранения;			
		Форма.БылИмпорт 		= СтруктураРезультата.БылИмпорт;
		ВозвращаемаяСтруктура 	= СтруктураРезультата.ВозвращаемаяСтруктура;
		
		СтруктураСервисРегистров 			= ВозвращаемаяСтруктура.СервисРегистров;
		СтруктураСервисРегистровУдаленные 	= ВозвращаемаяСтруктура.СервисРегистровУдаленные;
		Форма.МаксИндексСтраницы 			= ВозвращаемаяСтруктура.МаксИндексСтраницы;
		
	КонецЕсли;
			
	БылоКопирование = ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.мСкопированаФорма);
	
	// Необходимо сохранить данные в новом формате, если был импорт или копирование.
	Форма.Модифицированность = Форма.БылИмпорт или БылоКопирование;
		
	ВосстановитьСервисРегистровАЛКО(Форма, СтруктураСервисРегистров);
	ВосстановитьСервисРегистровАЛКО(Форма, СтруктураСервисРегистровУдаленные, Истина);
	
	ВосстановитьДанныеОтчетаАЛКО(Форма, СписокСохранения);
		
КонецПроцедуры

// Пост обработка на сервере после восстановления данных отчета ФСРАР.
// Проверяет при копировании отчетов, не отличаются ли виды деятельности по лицензиям
// для отчетов за разные периоды и блокируются данные для редактирования во всех случаях.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ОбработкаПослеВосстановленияАЛКО(Форма) Экспорт

	Если ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		// Из-за смены формата выгрузки изменились коды видов деятельности.
		ДатаКопируемогоОтчета = Форма.СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания;
		ДатаЭтогоОтчета = Форма.СтруктураРеквизитовФормы.мДатаКонцапериодаОтчета;
		РазныеСпискиВидовДеятельности = (ДатаКопируемогоОтчета >= '20131101' И ДатаЭтогоОтчета < '20131101')
		                            Или (ДатаКопируемогоОтчета < '20131101' И ДатаЭтогоОтчета >= '20131101');
									
		Если РазныеСпискиВидовДеятельности Тогда
										
			Если Форма.мСтруктураМногостраничныхРазделов.Свойство("Лицензии") Тогда
				
				Для Каждого Страница Из Форма[Форма.мСтруктураМногостраничныхРазделов.Лицензии] Цикл
					
					Если Страница.Данные[0].Значение.Свойство("П000000000105") Тогда
					
						Страница.Данные[0].Значение.П000000000105 = "";
						Страница.Данные[0].Пометка = Ложь;	
					
					КонецЕсли; 
					
					Если Страница.ДополнительныеДанные[0].Значение.Свойство("П000000000105") Тогда
					
						Страница.ДополнительныеДанные[0].Значение.П000000000105 = "";
						Страница.ДополнительныеДанные[0].Пометка = Ложь;	
					
					КонецЕсли;
										
				КонецЦикла;
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='При копировании были очищены виды деятельности в разделе лицензий.'");
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЕсли;
		
		// После восстановления при копировании данные таблиц новые.
		Форма.Модифицированность = Истина;
		
	КонецЕсли;
	
	Если НЕ Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			   
    	ЗаблокироватьДанныеДляРедактирования(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, , Форма.УникальныйИдентификатор);

    КонецЕсли;

КонецПроцедуры

// Восстанавливает все необходимые данные отчета ФСРАР в режиме работы формы отчета без открытия на Клиенте.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ВосстановитьДанныеБезОткрытияФормыАЛКО(Форма) Экспорт
	
	ДлОперВосстановление = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление;
	
	// Восстановление работает в режиме длительной операции только при копировании
	// или при открытии отчета с данными, сохраненными в старом формате.
	// Поскольку при открытии без открытия формы эти случаи исключены - длительная 
	// операция отработает как обычная процедура.
	ПараметрыДлОперации = ПолучитьПараметрыДлительнойОперацииАЛКО(Форма, ДлОперВосстановление);
	РегламентированнаяОтчетностьАЛКОВызовСервера.ВыполнитьДлительнуюОперацию(ДлОперВосстановление, ПараметрыДлОперации);
		 					
	ПродолжениеВосстановленияДанныхАЛКО(Форма, ПараметрыДлОперации.АдресВоВременномХранилище);
	
	ЗаполнитьТитульныйАЛКО(Форма);
		
КонецПроцедуры

#КонецОбласти 


#Область ПрограммныйИнтерфейсДлительныеОперации

// Выполняет любую длительную операцию отчета ФСРАР, предварительно собрав для нее необходимые для выполнения
// данные.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//		ВидДлОперации				- Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.
//		ВидПечати 					- Строка - Необязательный. Задает вид печати отчета при длительных
//									операцях печати.
// Возвращаемое значение:
//		Булево.						- Истина, если длительная операция выполнена.
//
Функция ВыполнитьДлительнуюОперациюАЛКО(Форма, ВидДлОперации, ВидПечати = Неопределено) Экспорт

	ПараметрыДлительнойОперации = ПолучитьПараметрыДлительнойОперацииАЛКО(Форма, ВидДлОперации, ВидПечати);
	Результат = РегламентированнаяОтчетностьАЛКОВызовСервера.ВыполнитьДлительнуюОперацию(ВидДлОперации, ПараметрыДлительнойОперации);
	
	// нужно внести изменения в СтруктураРеквизитовФормы	
	Форма.СтруктураРеквизитовФормы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыДлительнойОперации.СтруктураРеквизитовФормы);
	
	Возврат Результат;
	
КонецФункции
	
#КонецОбласти


#Область ПрограммныйИнтерфейсРедактированиеОП

// Заполняет обособленное подразделение реквизитами организации - декларанта, т.е реквизитами головного офиса.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//		Раздел                      - Строка - имя многострочного раздела отчета, 
//									ОП которого нужно заполнить.
//		ИндексСтраницы				- Число - индекс страницы раздела, которую нужно заполнить.
//
Процедура ЗаполнитьОПРеквизитамиОрганизацииАЛКО(Форма, Раздел, ИндексСтраницы) Экспорт
	
	БылоСтрОбособленноеПодразделение = Форма.ОбособленноеПодразделениеРаздела;
	
	ТаблицаСтраницы = Форма["ТаблицаСтраницы" + Раздел];
	НужнаяСтраница = ТаблицаСтраницы[ИндексСтраницы];
	
	АдресXMLОрг = Форма.ДополнительныеДанные.Титульный.АдресОрганизации.АдресXML;
	СведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
	СведенияОбОП_Орг = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXML(АдресXMLОрг);
	ЗаполнитьЗначенияСвойств(СведенияОбОП, СведенияОбОП_Орг);
	
	СведенияОбОП.Наименование = Форма.СтруктураДанныхТитульный.ОргНазвСокращ;
	СведенияОбОП.КПП = Форма.СтруктураДанныхТитульный.КПП1;
		
	НужнаяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СведенияОбОП);
	
	СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(
															СведенияОбОП, Форма.ЭтоПБОЮЛ, Форма.ОрганизацияИНН);
	НужнаяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);
	
	Форма.Модифицированность = Истина;
	
	Если (Форма.ТекущийРаздел = Раздел) и (ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела) Тогда
	    
		Форма.ОбособленноеПодразделениеРаздела = СтрОбособленноеПодразделение;
	    Форма.Элементы.ОбособленноеПодразделение.Доступность = Ложь;
		ОбновитьЦветСсылкиОП_АЛКО(Форма);
		
	КонецЕсли;
	
	НужнаяСтраница.Данные[0].Пометка = Ложь;
	НужнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
	
КонецПроцедуры

// Вносит результаты ввода формы редактирования реквизитов обособленого подразделения в данные отчета ФСРАР.
// Форма ввода ОбщаяФорма.АЛКОВводРеквизитовОП.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//		РезультатВвода              - Структура - совпадает со структурой, возвращаемой 
//									функцией ПолучитьПустуюСтруктуруСведенийОбОП().
//		ДополнительныеПараметры		- Структура.
//			*ИмяЭлементаСтруктуры	- Строка - имя Ключа сведений об ОП в дополнительных данных.
//			*СведенияОбОП			- Структура - совпадает со структурой, возвращаемой 
//									функцией ПолучитьПустуюСтруктуруСведенийОбОП(), заполнена 
//									данными до редактирования.
//
Процедура ВводРеквизитовОПЗавершениеАЛКО(Форма, РезультатВвода, ДополнительныеПараметры) Экспорт
	
	ТекущийРаздел = Форма.ТекущийРаздел;
	НомерАктивнойСтраницыМногострочногоРаздела = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
	ТаблицаРаздела = Форма["ТаблицаСтраницы" + ТекущийРаздел];
	АктивнаяСтраницаРаздела = ТаблицаРаздела[НомерАктивнойСтраницыМногострочногоРаздела];
	
	БылоСтрОбособленноеПодразделение = Форма.ОбособленноеПодразделениеРаздела;
	
	ИмяЭлементаСтруктуры = ДополнительныеПараметры.ИмяЭлементаСтруктуры;
	СведенияОбОП = ДополнительныеПараметры.СведенияОбОП;
	
	Если РезультатВвода <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СведенияОбОП, РезультатВвода);
		
		АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяЭлементаСтруктуры, СведенияОбОП);
		
		СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(
															СведенияОбОП, Форма.ЭтоПБОЮЛ, Форма.ОрганизацияИНН);
		
		АктивнаяСтраницаРаздела.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);
				
		Форма.ОбособленноеПодразделениеРаздела = СтрОбособленноеПодразделение;
		Форма.Модифицированность = (БылоСтрОбособленноеПодразделение <> Форма.ОбособленноеПодразделениеРаздела) 
							 или Форма.Модифицированность;
							 
		ОбновитьЦветСсылкиОП_АЛКО(Форма);
		
	КонецЕсли;

	АктивнаяСтраницаРаздела.Данные[0].Пометка = Ложь;
	АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Пометка = Ложь;
	
	ВидимостьДоступностьКнопокПолейРазделаАЛКО(Форма, ТекущийРаздел, Форма.ЭтоРазделОтчета, Форма.ЭтоЛицензируемаяДеятельность);
	
КонецПроцедуры
	
#КонецОбласти


#Область ПрограммныйИнтерфейсВосстановитьУдаленныеСтраницы

Процедура ВосстановитьУдаленныеСтраницыАЛКО(Форма) Экспорт
	
	// Сохраняем данные текущего раздела.
	ТекущийРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Если ТекущийРаздел = Неопределено Тогда
	    ТекущийРаздел = "Титульный";	
	КонецЕсли;
	
	// Нужно сохранить данные текущей страницы. 
	СохранитьДанныеРазделаАЛКО(Форма, ТекущийРаздел);
	
	Для каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
			
		ИдГруппы = ЭлементСтруктуры.Ключ;
		
	    Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(
													ИдГруппы, Форма.СтруктураРеквизитовФормы);
													
		Если Раздел = "Лицензии" Тогда		
			Продолжить;		
		КонецЕсли;
		
		СервисРегистровУдаленные = Форма["СервисРегистров" + ИдГруппы + "Удаленные"];
		СервисРегистров			 = Форма["СервисРегистров" + ИдГруппы];
		
		ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
																	ИдГруппы, Форма.СтруктураРеквизитовФормы);
		
		ТаблицаСтраницРаздела = Форма["ТаблицаСтраницы" + Раздел];
		
		Для каждого Удаленнаястраница Из СервисРегистровУдаленные Цикл
			
			// Убираем из удаленных и добавляем в действующие.
			СтрокаСервисРегистров = СервисРегистров.Добавить();
			СтрокаСервисРегистров.КоличествоСтрок			= Удаленнаястраница.КоличествоСтрок;
			СтрокаСервисРегистров.ИндексСтраницыРегистра	= Удаленнаястраница.ИндексСтраницыРегистра;
			
			КоличествоСтраницПоСервисРегистров = СервисРегистров.Количество();
			
			Ресурсы = Новый Структура;
			Ресурсы.Вставить("КоличествоСтрок", СтрокаСервисРегистров.КоличествоСтрок);		
			// Индекс строки 0 используем для обозначения операций над страницами в целом.
			// В норме индекс строки не меньше 1.	
			ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра,
										СтрокаСервисРегистров.ИндексСтраницыРегистра, 0, "ДобавлениеСтраницы", Ресурсы);			
								
			/////////////////////////////////////////
			// Добавляем страницу в таблицу раздела.
			/////////////////////////////////////////
			
			// Если ИдГрупп на странице несколько, возможно добавление лишних страниц,
			// поэтому сначала смотрим по количеству, возможно уже добавлена страница раздела.
			КоличествоСтраницТаблицеРаздела = ТаблицаСтраницРаздела.Количество();
			
			Если КоличествоСтраницТаблицеРаздела < КоличествоСтраницПоСервисРегистров Тогда
			
				СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
				
				// Присваиваем представление по умолчанию.
				СтрНоваяСтраница.Представление      = "Новая страница";
				СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
						
				// Инициируем Данные.
			    Если СтрНоваяСтраница.Данные.Количество() > 0 Тогда
					СтрНоваяСтраница.Данные[0].Значение = Новый Структура;
				Иначе
					СтрНоваяСтраница.Данные.Добавить(Новый Структура);
				КонецЕсли;
				
				// Инициируем ДопДанные.
			    Если СтрНоваяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
					СтрНоваяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
				Иначе
					СтрНоваяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
				КонецЕсли;
				
							
				СтрНоваяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");
				
				ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
				Если НЕ ГруппаВиноградныхДанных = Неопределено Тогда
					
					ПодчиненныеЭлементы = ГруппаВиноградныхДанных.ПодчиненныеЭлементы;
								
					Для каждого Элемент Из ПодчиненныеЭлементы Цикл
						
						ИмяРеквизита = Элемент.Имя;
						Если СтрНайти(ИмяРеквизита, "П0000100003") = 0  Тогда
						    Продолжить;					
						КонецЕсли;
						
						СтрНоваяСтраница.Данные[0].Значение.Вставить(ИмяРеквизита, Неопределено);
					
					КонецЦикла; 
						
				КонецЕсли;
		        					
				СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
							
				СтрНоваяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
				
				// Заставляем принудительно платформу обновить СписокЗначений.
				СтрНоваяСтраница.Данные[0].Пометка = Ложь;
				СтрНоваяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
		        			
			КонецЕсли; 
						
		КонецЦикла;		
		
		СервисРегистровУдаленные.Очистить();
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти


#Область ПрограммныйИнтерфейсПослеВыполненияЗадания

// Пост обработка на сервере после выполнения длительной операции печати отчета ФСРАР.
// Проверяет успешность операции печати и проставляет номера листов в готовых табличных документах печати.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//		ВидПечати 					- Строка. Задает вид печати отчета при длительных
//									операцях печати.
// Возвращаемое значение:
//		Булево.						- Истина, если длительная печать успешна.
//
Функция ПослеВыполненияЗадания_ПечатьАЛКО(Форма, ВидПечати) Экспорт
	
	АдресВоВременномХранилище = Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище;
	РезультатПечати = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	УдалитьИзВременногоХранилища(АдресВоВременномХранилище);
		
	ПечатьУспешна = Истина;
	
	Если НЕ ТипЗнч(РезультатПечати) = Тип("Структура") Тогда
	    ПечатьУспешна = Ложь;		
	Иначе
		Если НЕ РезультатПечати.Свойство("мПечатныеФормы") Тогда
		    ПечатьУспешна = Ложь;
		ИначеЕсли НЕ ТипЗнч(РезультатПечати.мПечатныеФормы) = Тип("СписокЗначений") Тогда
	        ПечатьУспешна = Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	
	Если ПечатьУспешна Тогда
		
		Если ВидПечати = "ПечатьФайлZIP" Тогда
			// Все уже сделано в РегламентированнаяОтчетностьАЛКО.ПослеВыполненияЗадания_ПечатьФайлZIP().							
		    Возврат Истина;
			
		КонецЕсли; 
		
	    Форма.СтруктураРеквизитовФормы = РезультатПечати;
		
		РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(Форма, , Форма.СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		
		КопироватьДанныеФормы(Форма.мДеревоВыбранныхСтраниц, Форма.мДеревоСтраницОтчета);
		
		Возврат Истина;	
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Пост обработка на сервере после выполнения длительной операции очистки от мусора регистров сведений отчета ФСРАР.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//		ВидПечати 					- Строка. Задает вид печати отчета при длительных
//									операцях печати.
//
Процедура ПослеВыполненияЗадания_ОчисткаОтМусораАЛКО(Форма) Экспорт
	
	АдресВоВременномХранилище = Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище;
	// Содержимое для данного случая значения не имеет.
	УдалитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	// После очистки необходимо обнулить количество строк помеченных на удаление.
	УдалятьПомеченныеНаУдаление = Форма.ОбщийПараметрПроцедур.УдалятьПомеченныеНаУдаление;
	
	Если УдалятьПомеченныеНаУдаление Тогда
	
		ОбнулитьКоличествоСтрокПомНаУдалениеПослеОчисткиАЛКО(Форма);
	
	КонецЕсли; 
	
	// После очистки нет в регистре удаленных страниц, поэтому СервисРегистровГруппыУдаленные надо очистить.
	ОчиститьВсеСервисРегистровУдаленныеОтчетаАЛКО(Форма);
		
	Форма.Модифицированность = Истина;
	
КонецПроцедуры
	
#КонецОбласти 


#Область ПрограммныйИнтерфейсОбновить

// Обновляет Титульный лист отчета ФСРАР в соответствии с установленной в отчете датой подписи.
//
// Параметры:
//
//	 	Форма							- Управляемая форма - Форма отчета ФСРАР.
//		ВПрограммеИзмененаДатаПодписи	- Булево - Необязательный. Флаг изменения даты подписи.
//										Параметр оставлен для совместимости с общими механизмами 
//										регламентированной отчетности, информация обновляется всегда
//										на установленную в отчете дату подписи.
//
Процедура ОбновитьНаСервереАЛКО(Форма, ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт
	
	Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	// Всегда заполняются данные на дату в поле ДатаПодписи.
	ЗаполнитьСведенияОбОрганизацииАЛКО(Форма);
				
	Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
		
	Форма.СтруктураДанныхТитульный.Вставить("ДатаПодписи", Форма.ДатаПодписи);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры
	
#КонецОбласти


#Область ПрограммныйИнтерфейсРегистры

// Определяет, было ли уже редактирование записи регистра в сеансе работы с отчетом.
//
// Параметры:
//
//			ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - документ отчета
//										(измерение Документ регистра сведений СведенияРеглОтчетАлкоЖурнал).
//	 		ИмяРегистра					- Строка - имя регистра сведений, запись которого проверяется
//										(измерение ИмяРегистра регистра сведений СведенияРеглОтчетАлкоЖурнал).
//			ИндексСтраницыРегистра		- Число - индекс страницы регистра (измерение ИндексСтраницыРегистра). 
//			ИндексСтроки				- Число - индекс строки (измерение ИндексСтроки).
//
// Возвращаемое значение:
//		Булево.							- Истина, если редактирования еще не было.
//
Функция ЭтоПервоеРедактированиеЗаписиРегистра(ДокументСсылкаАлкоОтчет, ИмяРегистра, 
												ИндексСтраницыРегистра,	ИндексСтроки) Экспорт
	
	НабЗаписейЖурРедактирование = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра, 
												ИндексСтраницыРегистра, ИндексСтроки, "Редактирование");
												
	
	Возврат (НабЗаписейЖурРедактирование.Количество() = 0);

КонецФункции

// Формирует строку, представляющую структуру данных определенной записи регистра сведений 
// в виде внутреннего представления.
//
// Параметры:
//
//			Запись						- запись регистра сведений.
//	 		ИмяРегистра					- Строка - имя регистра сведений.
//			СтруктураДанныхЗаписи		- Необязательный. В этом параметре возвращается структура записи
//										регистра сведений, ключи структуры - имена измерений, ресурсов и реквизитов
//										регистра сведений, значения - значения записи по этим измерениям, ресурсам
//										и реквизитам.
//
// Возвращаемое значение:
//		Строка.							- внутреннее представление структуры СтруктураДанныхЗаписи.
//
Функция ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(Запись, ИмяРегистра, СтруктураДанныхЗаписи = Неопределено) Экспорт
	
	СтруктураДанныхЗаписи = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистра);
	ЗаполнитьЗначенияСвойств(СтруктураДанныхЗаписи, Запись);
	
	Возврат ЗначениеВСтрокуВнутр(СтруктураДанныхЗаписи);
	
КонецФункции

// Формирует структуру данных регистра сведений, с ключами, соответствующими стандартным реквизитам,
// измерениям, ресурсам и реквизитам регистра, значения пустые.
//
// Параметры:
//
//	 		ИмяРегистра					- Строка - имя регистра сведений.
//			СтруктураДанныхЗаписи		- Необязательный. В этом параметре возвращается структура записи
//										регистра сведений, ключи структуры - имена измерений, ресурсов и реквизитов
//										регистра сведений, значения - значения записи по этим измерениям, ресурсам
//										и реквизитам.
//			СписокСоставаРегистра		- СписокЗначений - Список, содержащий состав сведений - 
//										"СтандартныеРеквизиты"
//										"Измерения"
//										"Ресурсы"
//										"Реквизиты"
//										В случае передачи этого параметра, в структуру попадают только данные,
//										перечисленные в составе сведений.
//
// Возвращаемое значение:
//			Структура					Ключи структуры - имена измерений, ресурсов и реквизитов
//										регистра сведений, значения - Неопределено.
//
Функция ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистра, СписокСоставаРегистра = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// Выставляем флаги сбора необходимой информации.
	ПроверятьПоСписку =  ( ТипЗнч(СписокСоставаРегистра) = Тип("СписокЗначений") );	
	 
	ФлагСтандартныеРеквизиты = (НЕ ПроверятьПоСписку) или  ( ПроверятьПоСписку 
							и ( НЕ (СписокСоставаРегистра.НайтиПоЗначению("СтандартныеРеквизиты") = Неопределено) ) );
							
	ФлагИзмерения 			= (НЕ ПроверятьПоСписку) или  ( ПроверятьПоСписку 
							и ( НЕ (СписокСоставаРегистра.НайтиПоЗначению("Измерения") = Неопределено) ) );
							
	ФлагРесурсы 			= (НЕ ПроверятьПоСписку) или  ( ПроверятьПоСписку 
							и ( НЕ (СписокСоставаРегистра.НайтиПоЗначению("Ресурсы") = Неопределено) ) );
							
	ФлагРеквизиты 			= (НЕ ПроверятьПоСписку) или  ( ПроверятьПоСписку 
							и ( НЕ (СписокСоставаРегистра.НайтиПоЗначению("Реквизиты") = Неопределено) ) );
							
		
	Если ФлагСтандартныеРеквизиты Тогда
	
		СтандартныеРеквизиты = МетаданныеРегистра.СтандартныеРеквизиты;
		Для Каждого СтдРеквизит Из СтандартныеРеквизиты Цикл
			
		    Результат.Вставить(СтдРеквизит.Имя);
			
			// Для числовых данных вставляем 0.
			ПроверяемыйТип = Тип("Число");
			Если СтдРеквизит.Тип.СодержитТип(ПроверяемыйТип) Тогда
			    Результат.Вставить(СтдРеквизит.Имя, 0);			
			КонецЕсли;
			
			// Для строковых данных вставляем пустую строку.
			ПроверяемыйТип = Тип("Строка");
			Если СтдРеквизит.Тип.СодержитТип(ПроверяемыйТип) Тогда
			    Результат.Вставить(СтдРеквизит.Имя, "");			
			КонецЕсли;
			
		КонецЦикла;	
	
	КонецЕсли; 
	 
	Если ФлагИзмерения Тогда
	
		ИзмеренияРегистра = МетаданныеРегистра.Измерения;
		Для Каждого Измерение Из ИзмеренияРегистра Цикл
			
			Результат.Вставить(Измерение.Имя);
			
			// Для числовых данных вставляем 0.
			ПроверяемыйТип = Тип("Число");
			Если Измерение.Тип.СодержитТип(ПроверяемыйТип) Тогда
			    Результат.Вставить(Измерение.Имя, 0);			
			КонецЕсли;
			
			// Для строковых данных вставляем пустую строку.
			ПроверяемыйТип = Тип("Строка");
			Если Измерение.Тип.СодержитТип(ПроверяемыйТип) Тогда
			    Результат.Вставить(Измерение.Имя, "");			
			КонецЕсли;
			
		КонецЦикла;	
	
	КонецЕсли; 
	
	Если ФлагРесурсы Тогда
	
		РесурсыРегистра = МетаданныеРегистра.Ресурсы;
		Для Каждого Ресурс Из РесурсыРегистра Цикл
			
			Результат.Вставить(Ресурс.Имя);
			
			// Для числовых данных вставляем 0.
			ПроверяемыйТип = Тип("Число");
			Если Ресурс.Тип.СодержитТип(ПроверяемыйТип) Тогда
			    Результат.Вставить(Ресурс.Имя, 0);			
			КонецЕсли;
			
			// Для строковых данных вставляем пустую строку.
			ПроверяемыйТип = Тип("Строка");
			Если Ресурс.Тип.СодержитТип(ПроверяемыйТип) Тогда
			    Результат.Вставить(Ресурс.Имя, "");			
			КонецЕсли;
			
		КонецЦикла;	
	
	КонецЕсли; 
	
	Если ФлагРеквизиты Тогда
	
		РеквизитыРегистра = МетаданныеРегистра.Реквизиты;
		Для Каждого Реквизит Из РеквизитыРегистра Цикл
		    
			Результат.Вставить(Реквизит.Имя);
			
			// Для числовых данных вставляем 0.
			ПроверяемыйТип = Тип("Число");
			Если Реквизит.Тип.СодержитТип(ПроверяемыйТип) Тогда
			    Результат.Вставить(Реквизит.Имя, 0);			
			КонецЕсли;
			
			// Для строковых данных вставляем пустую строку.
			ПроверяемыйТип = Тип("Строка");
			Если Реквизит.Тип.СодержитТип(ПроверяемыйТип) Тогда
			    Результат.Вставить(Реквизит.Имя, "");			
			КонецЕсли;
			
		КонецЦикла;	
	
	КонецЕсли; 
	
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру модифицированности записи регистра сведений по сравнению с первоначальными
// значениями измерений, ресурсов и реквизитов, возвращая общий признак модифицированности записи.
//
// Параметры:
//
//	 		Запись								- Запись регистра сведений
//			НачальноеЗначениеСтруктураДанных	- Структура - Структура первоначальных значений записи до
//												начала изменений.
//			ДоПервого							- Булево - Истина, если проверять надо до нахождения первого
//												отличия от первоначальных значений.
//			СтруктураМодифицированности			- в этом параметре возвращается структура, ключи которой
//												совпадают с именами измерений, ресурсов и реквизитов регистра,
//												а значения имеют тип Булево и соответствуют модифицированности
//												записи по ключу. Имеет смысл только если ДоПервого = Ложь.
//
// Возвращаемое значение:
//			Булево					Истина, если запись модифицированна.
//
Функция ЗаписьИзменилась(Запись, НачальноеЗначениеСтруктураДанных, ДоПервого = Истина, СтруктураМодифицированности = Неопределено) Экспорт
	
	Результат = Ложь;
	
	СтруктураМодифицированности = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из НачальноеЗначениеСтруктураДанных Цикл
	
		ИмяПоля = ЭлементСтруктуры.Ключ;
		
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Строка") Тогда
		
			Если СокрЛП(Запись[ИмяПоля]) <> СокрЛП(ЭлементСтруктуры.Значение) Тогда
				Результат = Истина;
				СтруктураМодифицированности.Вставить(ИмяПоля, Истина);
			КонецЕсли;
			
		Иначе
			
			Если Запись[ИмяПоля] <> ЭлементСтруктуры.Значение Тогда
				Результат = Истина;
				СтруктураМодифицированности.Вставить(ИмяПоля, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СтруктураМодифицированности.Свойство(ИмяПоля) Тогда
		    СтруктураМодифицированности.Вставить(ИмяПоля, Ложь);		
		КонецЕсли; 
		
		Если ДоПервого и Результат Тогда		
			Возврат Результат;		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Производит запись в регистр сведений СведенияРеглОтчетАлкоЖурнал.
//
// Параметры:
//
//			ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - документ отчета
//										(измерение Документ регистра сведений СведенияРеглОтчетАлкоЖурнал).
//	 		ИмяРегистра					- Строка - имя регистра сведений, к которому имеет отношение запись Журнала.
//										(измерение ИмяРегистра регистра сведений СведенияРеглОтчетАлкоЖурнал).
//			ИндексСтраницыРегистра		- Число - индекс страницы регистра (измерение ИндексСтраницыРегистра). 
//			ИндексСтроки				- Число - индекс строки (измерение ИндексСтроки).
//			Действие					- Число или Строка - 
//										Если Число - должно соответствовать одному из значений, возвращаемых
//										ПолучитьСоответствиеДействийЖуранала(Ложь)
//                                       										
// 										10 - удаление страницы
// 										11 - добавление страницы
// 										15 - сервис (внесение сервисных данных по ресурсам)
// 										16 - автозаполнение.
//	 
// 										3 - при добавлении строки, 
// 										4 - при редактировании (изменении).
//
//										Если Строка - должно соответствовать одному из значений, возвращаемых
//										ПолучитьСоответствиеДействийЖуранала(Истина)
//
//										"УдалениеСтраницы"
//										"ДобавлениеСтраницы"
//										"Сервис"
//										"Автозаполнение"
//
//										"ДобавлениеСтроки"
//										"Редактирование"
//
//			Ресурсы						- Структура - Необязательный. Возможные свойства:
//				* МаксИндексСтраницы	- Число - максимальный когда либо использованный индекс регистра в отчете.
//				* НачальноеЗначение		- Строка - содержит структуру начальных значений записи 
//										во внутреннем представлении .
//				* КоличествоСтрок 		- Число - количество строк (включая помеченные на удаление) 
//										на странице по регистру.
//
//			Переданные в Ресурсах значения записываются каждое по отдельности.
//			Если передаются Ресурсы, для значений МаксИндексСтраницы и КоличествоСтрок при записи принудительно
//			выставляется индекс строки 0.
//
// Возвращаемое значение:
//			Булево					Истина, если запись добавлена в журнал.
//
Функция ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексСтраницыРегистра, 
									ИндексСтроки, Действие, Ресурсы = Неопределено) Экспорт
									
	ЧислоИндексСтраницыРегистра 	= Число(ИндексСтраницыРегистра);
	ЧислоИндексСтроки			 	= Число(ИндексСтроки);
	
	СоответствиеДействий = ПолучитьСоответствиеДействийЖуранала();
	
	Если ТипЗнч(Действие) = Тип("Число") Тогда
		
		ЧислоДействие = Действие;
	    				
	ИначеЕсли ТипЗнч(Действие) = Тип("Строка") Тогда
		
		ЧислоДействие = СоответствиеДействий.Получить(Действие);
			
		Если НЕ ЧислоДействие = Неопределено Тогда
			
		Иначе
			Возврат Ложь; 
		КонецЕсли;
			
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбратноеСоответствиеДействий = ПолучитьСоответствиеДействийЖуранала(Ложь);
	
	Если ОбратноеСоответствиеДействий.Получить(ЧислоДействие) = Неопределено Тогда
	    // Передано неверное число Действия.
		Возврат Ложь;	
	КонецЕсли; 
	
	Результат = Истина;
	
	// Для действий кроме Сервис и Редактирование ресурсы необязательны.
	Если НЕ (ЧислоДействие = СоответствиеДействий.Получить("Сервис")
		или ЧислоДействие = СоответствиеДействий.Получить("Редактирование")) Тогда
		
		// Для остальных действий в любом случае фиксируем само действие.
		Результат = Результат и ДобавитьВРегистрЖурналаНапрямую(ДокументСсылкаАлкоОтчет, ИмяРегистра, ЧислоИндексСтраницыРегистра, 
									ЧислоИндексСтроки, ЧислоДействие);
	КонецЕсли;
		
	Если НЕ Результат Тогда
	    Возврат Результат;	
	КонецЕсли;
	
	// Анализируем Ресурсы.	
	Если НЕ Ресурсы = Неопределено Тогда
		
		Если НЕ ( ТипЗнч(Ресурсы) = Тип("Структура") или ТипЗнч(Ресурсы) = Тип("ФиксированнаяСтруктура") ) Тогда
	        Возврат Результат;
		КонецЕсли;
		
		// Если есть поле МаксИндексСтраницы, нужно записать имя регистра "ОбщиеСведения" и действие "Сервис",
		// остальные ресурсы и измерения нулевые, исключая  измерение Документ.
		Если Ресурсы.Свойство("МаксИндексСтраницы") Тогда
			
			РесурсыОбщиеСведения = Новый Структура;
			РесурсыОбщиеСведения.Вставить("МаксИндексСтраницы", Ресурсы.МаксИндексСтраницы);
			Результат = Результат и ДобавитьВРегистрЖурналаНапрямую(ДокументСсылкаАлкоОтчет, "ОбщиеСведения", 0, 
									0, СоответствиеДействий.Получить("Сервис"), РесурсыОбщиеСведения);
			
		КонецЕсли;
		
		Если НЕ Результат Тогда
		    Возврат Результат;	
		КонецЕсли;
	
		// Если есть поле НачальноеЗначение, нужно записать действие "Редактирование",
		// ИндексСтроки при этом не может быть нулевым.
		Если Ресурсы.Свойство("НачальноеЗначение") Тогда
			
		    Если (ЧислоИндексСтроки = 0) или (ЧислоИндексСтроки = -1) Тогда
			    Результат = Ложь;
			Иначе
								
				РесурсыНачальноеЗначение = Новый Структура;
				РесурсыНачальноеЗначение.Вставить("НачальноеЗначение", Ресурсы.НачальноеЗначение);
				Результат = Результат и ДобавитьВРегистрЖурналаНапрямую(ДокументСсылкаАлкоОтчет, ИмяРегистра, 
														ЧислоИндексСтраницыРегистра, ЧислоИндексСтроки, 
														СоответствиеДействий.Получить("Редактирование"), 
														РесурсыНачальноеЗначение);	
			 					
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Результат Тогда
		    Возврат Результат;	
		КонецЕсли;
		
		// Если есть поле КоличествоСтрок, нужно записать действие "Сервис",
		// ИндексСтроки при этом должен быть нулевым.
		Если Ресурсы.Свойство("КоличествоСтрок") Тогда
			
			РесурсыСервис = Новый Структура;
			
			Если Ресурсы.Свойство("КоличествоСтрок") Тогда
				РесурсыСервис.Вставить("КоличествоСтрок", Ресурсы.КоличествоСтрок);
			КонецЕсли;
			
			Результат = Результат и ДобавитьВРегистрЖурналаНапрямую(ДокументСсылкаАлкоОтчет, ИмяРегистра, ЧислоИндексСтраницыРегистра, 
									0, СоответствиеДействий.Получить("Сервис"), РесурсыСервис);
									
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Производит запись в регистр сведений данных из таблицы значений, с привязкой к конкретному отчету.
// При этом данные дописываются, начиная с номера строки, переданного как номер последней записанной
// строки.
//
// Параметры:
//
//			ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - документ отчета
//										(измерение Документ регистра сведений).
//			ИмяФормыОбъекта				- Строка - имя формы отчета.
//	 		ИмяРегистраСведений			- Строка - имя регистра сведений, в который производится запись данных.
//										
//			ИндексСтраницы				- Число - индекс страницы регистра (измерение ИндексСтраницы). 
//			ТЗ							- ТаблицаЗначений - таблица значений, данные которой заносятся в регистр.
//			КоличествоТекСтрок			- Число - последний использованный индекс строки для данной страницы регистра.
//
//
Процедура ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, ИмяРегистраСведений, 
														ИндексСтраницы, ТЗ, КоличествоТекСтрок) Экспорт

	КолВБлокеЗаписей = 1000;
		
	РегистрСведенийГруппы 	= РегистрыСведений[ИмяРегистраСведений];
	
	// Определим состав ресурсов по регистру.
	СписокСоставаРегистра = Новый СписокЗначений;
	СписокСоставаРегистра.Добавить("Ресурсы");
	СтруктураРесурсов = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистраСведений, СписокСоставаРегистра);
					
	НаборЗаписей 			= РегистрСведенийГруппы.СоздатьНаборЗаписей();
		
	ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницы);
	
	// Если количество уже записанных строк 0 - перед началом записи в регистр на всякий случай
	// есть смысл удалить записи по индексу страницы.
	// В нормальном варианте работы - там и так будет пусто и удалять нечего.
	// Но при ошибках - возможно наличие записанных записей при предыдущей попытке.
	Если КоличествоТекСтрок = 0 Тогда
	
		НаборЗаписей.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчет);
		НаборЗаписей.Отбор.ИндексСтраницы.Установить(Число(ИндексСтраницы));	
		// Удаляем записывая пустой набор в режиме замещения.
	    НаборЗаписей.Записать(Истина);
		
		// Очистим от отбора, просто создав новый набор.
		НаборЗаписей 			= РегистрСведенийГруппы.СоздатьНаборЗаписей();	
	
	КонецЕсли; 
		
	// Определим объект Отчета.
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	// Блок обработки таблиц в зависимости от отчета.
	ОбработкаТаблицыПередЗаписьюВРегистр(ИмяРегистраСведений, ТЗ);
	
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		
		// Сначала проверяем - заполнена ли строка.
		СтрокаЗаполнена = Ложь;
		Для каждого ЭлементСтруктуры Из СтруктураРесурсов Цикл
		
			Если ЗначениеЗаполнено(СтрокаТЗ[ЭлементСтруктуры.Ключ]) Тогда
			
				СтрокаЗаполнена = Истина;
			    Прервать;
				
			КонецЕсли; 
		
		КонецЦикла; 
		
		Если НЕ СтрокаЗаполнена Тогда
			
			// Не заполненные строки игнорируем.
			Продолжить;
		
		КонецЕсли; 
		
	    // Добавление новой записи.
		КоличествоТекСтрок  = КоличествоТекСтрок + 1;
		
		НоваяЗапись 		= НаборЗаписей.Добавить();
		
		// Обработка заключается в вычислении хэш сумм по необходимым полям,
		// и удалении ведущих и оконечных пробелов из строковых полей.
		ОбъектОтчета.ОбработкаСтрокиТаблицыСтарогоФормата(ИмяРегистраСведений, СтрокаТЗ);
		
	    ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТЗ);
		
		НоваяЗапись.Документ = ДокументСсылкаАлкоОтчет;
		НоваяЗапись.ИндексСтраницы = ИндексСтраницы;
		
		НоваяЗапись.ИндексСтроки = КоличествоТекСтрок;
		
		НоваяЗапись.ИДДокИндСтраницы = ИДДокИндСтраницы;
		
		НоваяЗапись.Активно = Истина;
				
		// Пишем, чтобы не раздувать использование оперативной памяти сервера.
		Если КоличествоТекСтрок % КолВБлокеЗаписей = 0 Тогда
			
		    // В режиме дописывания.
			НаборЗаписей.Записать(Ложь);
			НаборЗаписей.Очистить();
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если НаборЗаписей.Количество() > 0 Тогда
	    НаборЗаписей.Записать(Ложь);		
	КонецЕсли;
	
КонецПроцедуры

// Определяет регистр сведений по идентификатору многострочной группы и возвращает его.
//
// Параметры:
//
//	 		ИдГруппы						- Строка.  Идентификатор многострочной группы отчета.
//			СтруктураРеквизитовФормы		- Структура - стандартный реквизит формы регламентированной отчетности.
//
// Возвращаемое значение:
//			РегистрыСведений.<Имя регистра> или Неопределено.
//
Функция ПолучитьРегистрСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы) Экспорт
	
	ИмяРегистраСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
														ИдГруппы, СтруктураРеквизитовФормы);
	Если НЕ ИмяРегистраСведений = Неопределено Тогда
	
		Возврат РегистрыСведений[ИмяРегистраСведений];
	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Активизирует нужную строку нужной многострочной группы текущей страницы отчета ФСРАР.
// Предполагается что переход на нужную страницу многострочного раздела уже произведен.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//	 	ИдГруппы					- Строка - Идентификатор многострочной группы отчета.
//		НомерСтроки					- Число - Номер активизируемой строки.
//		ИмяПоля						- Строка - Необязательный. Имя поля таблицы, столбец которой нужно сделать активным.
//
// Возвращаемое значение:
//		Булево					Истина, если переход на строку прошел без ошибок.
//
Функция ПереходНаСтрокуТаблицыФормыАЛКО(Форма, ИдГруппы, НомерСтроки, ИмяПоля = Неопределено) Экспорт
			
	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
	КоличествоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеГруппы(
																			Форма, ИдГруппы, ИндексСтраницы);
	
	Если КоличествоСтрок = 0 Тогда
		//Ничего не делаем.	    
		Возврат Ложь;
	КонецЕсли; 
			
	ТаблицаФормыРаздела = Форма.Элементы["ТаблицаФормыРаздела"+ИдГруппы];
	
	ПодчиненныеЭлементыТаблицы = ТаблицаФормыРаздела.ПодчиненныеЭлементы;
	
	ИмяТекущегоЭлементаДоПерехода = Неопределено;
	Если ТаблицаФормыРаздела.ТекущийЭлемент <> Неопределено Тогда
		
		Поле = ТаблицаФормыРаздела.ПодчиненныеЭлементы.Найти(ТаблицаФормыРаздела.ТекущийЭлемент.Имя);
		Если Поле <> Неопределено Тогда
		    ИмяТекущегоЭлементаДоПерехода = ТаблицаФормыРаздела.ТекущийЭлемент.Имя;		
		КонецЕсли;
		
	КонецЕсли; 
			
	НомерСтроки = Число(НомерСтроки);
	
	Если НомерСтроки < 1 Тогда
	    НомерСтроки = 1;			
	КонецЕсли;
	
	Если НомерСтроки > КоличествоСтрок Тогда
		
		// Ситуация возможна только при ручном вводе
		// в окошке быстрого перехода на строку.
		Сообщить(НСтр("ru = 'Номер строки оказался больше максимально возможного.
				|будет произведена попытка перехода на последнюю строку'"), СтатусСообщения.Информация);
		НомерСтроки = КоличествоСтрок;
		
	КонецЕсли;
	
	СтараяТекущаяСтрока = ТаблицаФормыРаздела.ТекущаяСтрока;
		
	// Номер строки не превышает количества записей.
	// Нужно получить ключ нужной записи.
	ИмяРегистраСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
														ИдГруппы, Форма.СтруктураРеквизитовФормы);
	КлючНужнойЗаписи = ПолучитьКлючЗаписиРегистраСведенийАлко(
						Форма, ИмяРегистраСведений, ИдГруппы, ИндексСтраницы, НомерСтроки);
	
	ТаблицаФормыРаздела.ТекущаяСтрока = КлючНужнойЗаписи;
			
	// Нужно убедится что переход прошел успешно.
	Если ТаблицаФормыРаздела.ТекущаяСтрока = Неопределено Тогда
		
	    // Никуда не перешли - текущая строка вне ограничений вывода.
		Сообщить( НСтр("ru = 'Строка № " + НомерСтроки + " вне диапазона вывода. Возможно включен отбор по поиску.'"), 
					СтатусСообщения.Информация);
				
		ТаблицаФормыРаздела.ТекущаяСтрока = СтараяТекущаяСтрока;
		
		Возврат Ложь;
		
	КонецЕсли;
			
	Если ИмяПоля <> Неопределено Тогда
	
		Поле = ТаблицаФормыРаздела.ПодчиненныеЭлементы.Найти(ИмяПоля);
		
		Если Поле <> Неопределено Тогда
			
			ТаблицаФормыРаздела.ТекущийЭлемент = Поле;
			Форма.ТекущийЭлемент = Поле;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоЭлементаДоПерехода <> Неопределено Тогда
		
		Поле = ТаблицаФормыРаздела.ПодчиненныеЭлементы.Найти(ИмяТекущегоЭлементаДоПерехода);
		
		Если Поле <> Неопределено Тогда
			
			ТаблицаФормыРаздела.ТекущийЭлемент = Поле;
			Форма.ТекущийЭлемент = Поле;
			
		КонецЕсли;
		
	КонецЕсли;	
		 
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура УправлениеМенюТаблицыФормыПоГруппеАЛКО(Форма, ИдГруппы)
	 
	ТаблицаФормы = Форма.Элементы["ТаблицаФормыРаздела" + ИдГруппы];
		
	КоманднаяПанельМеню = ТаблицаФормы.КоманднаяПанель.ПодчиненныеЭлементы;
	Для Каждого ЭлМеню Из КоманднаяПанельМеню Цикл
	
		Имя = ЭлМеню.Имя;
		Имя = СтрЗаменить(Имя, "ТаблицаФормыРаздела" + ИдГруппы, "");
		
		Если (Имя = "ВывестиСписок") или (Имя = "Настройки") Тогда
			
			
			
		ИначеЕсли (Имя = "Найти") или (Имя = "Обновить") или (Имя = "ОтменитьПоиск") Тогда
			
			// Устанавливаем картинки.
			ЭлМеню.Отображение = ОтображениеКнопки.Картинка;
			ЭлМеню.ТолькоВоВсехДействиях = (СтрНайти(Имя, "Обновить") > 0);	
									
		Иначе
			
			// Устанавливаем картинки.
			ЭлМеню.Отображение = ОтображениеКнопки.КартинкаИТекст;
			
		    ЭлМеню.ТолькоВоВсехДействиях = (Имя = "Изменить") или (Имя = "ПоискПоТекущемуЗначению");
						
			Если Имя = "Удалить" Тогда				
				ЭлМеню.Заголовок = "Установить/снять пометку удаления";
				ЭлМеню.ТолькоВоВсехДействиях = Истина;
			ИначеЕсли Имя = "Создать" Тогда
				ЭлМеню.Заголовок = "Добавить";
			ИначеЕсли Имя = "ПоискПоТекущемуЗначению" Тогда
				
			КонецЕсли;

		КонецЕсли;						
		
	КонецЦикла;
	
		
	КонтекстноеМеню = ТаблицаФормы.КонтекстноеМеню.ПодчиненныеЭлементы;
	Для Каждого ЭлМеню Из КонтекстноеМеню Цикл
	
		Имя = ЭлМеню.Имя;
		
		Имя = СтрЗаменить(Имя, "ТаблицаФормыРаздела" + ИдГруппы, "");
		Имя = СтрЗаменить(Имя, "КонтекстноеМеню", "");
		
		Если (Имя = "ВывестиСписок") или (Имя = "Настройки") Тогда			
			    
			
				
		ИначеЕсли НЕ ( (Имя = "Найти") или (Имя = "Обновить") 
			или (Имя = "ОтменитьПоиск") или (Имя = "ПоискПоТекущемуЗначению") ) Тогда
			
			Если Имя = "Удалить" Тогда				
				ЭлМеню.Заголовок = "Установить/снять пометку удаления";
				ЭлМеню.ТолькоВоВсехДействиях = Истина;
			ИначеЕсли Имя = "Создать" Тогда
				ЭлМеню.Заголовок = "Добавить";			
			Иначе
				
			КонецЕсли;	
			
		КонецЕсли;		
			
	КонецЦикла;
	
	// Таблица создается в режиме невидимости.
	// Это необходимо для предотвращения "моргания" элементов меню при их изменении.
	// После внесения правок меню - включаем все сразу.
	ТаблицаФормы.Видимость = Истина;

КонецПроцедуры

Процедура ОбнулитьКоличествоСтрокПомНаУдалениеПослеОчисткиАЛКО(Форма, ИдГруппы = Неопределено)

	Если ИдГруппы = Неопределено Тогда
		
		Для каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		
			ИдГруппы = ЭлементСтруктуры.Ключ;
			ОбнулитьКоличествоСтрокПомНаУдалениеПослеОчисткиАЛКО(Форма, ИдГруппы);
		
		КонецЦикла; 
				
	Иначе
		
		СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];
		
		Для Каждого СтрокаСервиса Из СервисРегистровГруппы Цикл
		
			СтрокаСервиса.КоличествоСтрок = СтрокаСервиса.КоличествоСтрок - СтрокаСервиса.КолвоСтрокПомНаУдаление;
		    СтрокаСервиса.КолвоСтрокПомНаУдаление = 0;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьПараметрыДлительнойОперацииАЛКО(Форма, ВидДлОперации, ВидПечати = Неопределено)
	
	ВидыДлитОперацийРеглОтчетов = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов;
		
	Результат = Новый Структура;
	// Общие данные для всех операций.
	Результат.Вставить("СтруктураРеквизитовФормы", Форма.СтруктураРеквизитовФормы);
	Результат.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
	Результат.Вставить("НомерАлкоОтчета", Форма.НомерАлкоОтчета);
	Результат.Вставить("ИмяФормы", Форма.ИмяФормы);
	
	ВсегоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьОбщееКоличествоСтрок(Форма);
	РежимДлительнойОперации = (ВсегоСтрок > 1000);
	Результат.Вставить("РежимДлительнойОперации", РежимДлительнойОперации); 
	
	Если ВидДлОперации = ВидыДлитОперацийРеглОтчетов.Восстановление Тогда
	
		СписокИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИменРегистровАЛКО(
																					Форма.СтруктураРеквизитовФормы);
		Результат.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);
		
		СтруктураИдГруппИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСтруктуруИдГруппИменРегистровАЛКО(
																					Форма.СтруктураРеквизитовФормы);
		Результат.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
		
		СтруктураСервисРегистров = ПолучитьСтруктуруСервисРегистровАЛКО(Форма);	 
		Результат.Вставить("СтруктураСервисРегистров",	СтруктураСервисРегистров);
		
		СтруктураСервисРегистровУдаленные = ПолучитьСтруктуруСервисРегистровАЛКО(Форма, Истина);
		Результат.Вставить("СтруктураСервисРегистровУдаленные",	СтруктураСервисРегистровУдаленные);
		
	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.СкопироватьТекущиеРегистры Тогда
		
		// Это не операция копирования отчета - копирование отчета реализовано
		// через операцию Восстановления.
		// Это копирование содержимого регистров в случае, если отчет записывается
		// с новым номером корректировки в режиме "создать новый".
		
		СписокИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИменРегистровАЛКО(
																					Форма.СтруктураРеквизитовФормы);
		Результат.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);
		
		СтруктураИдГруппИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСтруктуруИдГруппИменРегистровАЛКО(
																					Форма.СтруктураРеквизитовФормы);
		Результат.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
				
	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.Выгрузка
		или ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ПроверкаВыгрузки
		или ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ПроверкаВыгрузкиВИнтернете
		или ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ВыгрузкаПакета
		или ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ОтправкаВКонтролирующийОрган Тогда
	
		ПараметрыВыгрузки = СформироватьСтруктуруПоказателейИСтруктуруПараметровАЛКО(Форма);
		Результат.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
		
		ПараметрыФормы = ПолучитьСтруктуруРеквизитовФормыАЛКО(Форма);
		Результат.Вставить("ПараметрыФормы", ПараметрыФормы);
				
	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ПересчетИтогов Тогда
		
		СтруктураРесурсов = ПолучитьСтруктуруРесурсовАЛКО(
							Форма.СтруктураРеквизитовФормы, Форма.мСтруктураМногострочныхРазделов);
		Результат.Вставить("СтруктураРесурсов", СтруктураРесурсов);
		
		СтруктураСервисРегистров = ПолучитьСтруктуруСервисРегистровАЛКО(Форма);	 
		Результат.Вставить("СтруктураСервисРегистров",	СтруктураСервисРегистров);
		
		СтруктураИдГруппБуферИтогов = ПолучитьСтруктуруИдГруппБуферИтоговАЛКО(Форма);
		Результат.Вставить("СтруктураИдГруппБуферИтогов",	СтруктураИдГруппБуферИтогов);
		
		СтруктураИдГруппИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСтруктуруИдГруппИменРегистровАЛКО(
															Форма.СтруктураРеквизитовФормы);
		Результат.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
		
	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.Печать
		или ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ПечатьВАрхив Тогда
		
		ПараметрыФормы = ПолучитьСтруктуруРеквизитовФормыАЛКО(Форма);
		Результат.Вставить("ПараметрыФормы", ПараметрыФормы);
	    		
		Результат.Вставить("Заголовок", Форма.Заголовок);		
		Результат.Вставить("ОтчетныйПериодСГодом", Форма.ОтчетныйПериодСГодом);
		Результат.Вставить("ВидПечати", ВидПечати);
		
	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ОчисткаРегистровСведенийОтМусора Тогда
		
		СтруктураИдГруппИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСтруктуруИдГруппИменРегистровАЛКО(
															Форма.СтруктураРеквизитовФормы);
		Результат.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
		
		СтруктураСервисРегистров = ПолучитьСтруктуруСервисРегистровАЛКО(Форма);	 
		Результат.Вставить("СтруктураСервисРегистров",	СтруктураСервисРегистров);
		
		СтруктураСервисРегистровУдаленные = ПолучитьСтруктуруСервисРегистровАЛКО(Форма, Истина);
		Результат.Вставить("СтруктураСервисРегистровУдаленные",	СтруктураСервисРегистровУдаленные);
		
		УдалятьПомеченныеНаУдаление = Форма.ОбщийПараметрПроцедур.УдалятьПомеченныеНаУдаление;
	    Результат.Вставить("УдалятьПомеченныеНаУдаление",	УдалятьПомеченныеНаУдаление);
		
	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.Сохранение Тогда	
	    // Используются только общие параметры.
	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ЗаполнениеПоданнымИБ Тогда
		
		// Заполняются только 11 и 12 алкоприложения - поэтому напрямую обращаемся
		// к данным Раздел 1 и Раздел 2 - они есть в обоих приложениях.
		// ИдГрупп в этих приложениях так же одинаковые.
		
		СтруктураИдГруппБуферИтогов = ПолучитьСтруктуруИдГруппБуферИтоговАЛКО(Форма);
		Результат.Вставить("СтруктураИдГруппБуферИтогов",	СтруктураИдГруппБуферИтогов);
		
		СтруктураИдГруппИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСтруктуруИдГруппИменРегистровАЛКО(
															Форма.СтруктураРеквизитовФормы);
		Результат.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
		
		Результат.Вставить("ИмяОбъектаФормы", Форма.ИмяОбъектаФормы);
		
		Контейнер = Новый Структура();
	    		
		// Должна быть без строк, но на всякий случай очистим.		
		ИдГруппы				= Форма.СтруктураРеквизитовФормы.мИдГруппы12;
		ТЗ_ХранилищеП0000100003	= ПолучитьТаблицуЗначенийРегистраГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
		ФормаСервисРегистровП0000100003 		 = Форма["СервисРегистров" + ИдГруппы];
		ФормаСервисРегистровП0000100003Удаленные = Форма["СервисРегистров" + ИдГруппы + "Удаленные"];
		
		Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(
													ИдГруппы, Форма.СтруктураРеквизитовФормы);
		ФормаТаблицаСтраницыРаздел1 = Форма["ТаблицаСтраницы" + Раздел];
		ТЗ_ТаблицаСтраницыРаздел1 = ДанныеФормыВЗначение(ФормаТаблицаСтраницыРаздел1, Тип("ТаблицаЗначений"));
		ТЗ_ТаблицаСтраницыРаздел1.Очистить(); //Оставляем только колонки.
		
		// Должна быть без строк, но на всякий случай очистим.
		ИдГруппы				= Форма.СтруктураРеквизитовФормы.мИдГруппы22;
		ТЗ_ХранилищеП0000200003	= ПолучитьТаблицуЗначенийРегистраГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
		ФормаСервисРегистровП0000200003 		 = Форма["СервисРегистров" + ИдГруппы];
		ФормаСервисРегистровП0000200003Удаленные = Форма["СервисРегистров" + ИдГруппы + "Удаленные"];
		
		Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(
													ИдГруппы, Форма.СтруктураРеквизитовФормы);
		ФормаТаблицаСтраницыРаздел2 = Форма["ТаблицаСтраницы" + Раздел];
		ТЗ_ТаблицаСтраницыРаздел2 = ДанныеФормыВЗначение(ФормаТаблицаСтраницыРаздел2, Тип("ТаблицаЗначений"));
		ТЗ_ТаблицаСтраницыРаздел2.Очистить(); //Оставляем только колонки.
		
		Раздел1_СервисРегистров 			= ДанныеФормыВЗначение(ФормаСервисРегистровП0000100003, Тип("ТаблицаЗначений"));	
		Раздел2_СервисРегистров 			= ДанныеФормыВЗначение(ФормаСервисРегистровП0000200003, Тип("ТаблицаЗначений"));	
		Раздел1_СервисРегистровУдаленные 	= ДанныеФормыВЗначение(ФормаСервисРегистровП0000100003Удаленные, Тип("ТаблицаЗначений"));	
		Раздел2_СервисРегистровУдаленные 	= ДанныеФормыВЗначение(ФормаСервисРегистровП0000200003Удаленные, Тип("ТаблицаЗначений"));
		
		Контейнер.Вставить("Раздел1", ТЗ_ТаблицаСтраницыРаздел1);
		Контейнер.Вставить("Раздел2", ТЗ_ТаблицаСтраницыРаздел2);
		
		Контейнер.Вставить("Раздел1_ТЗ_Хранилище", ТЗ_ХранилищеП0000100003);	
		Контейнер.Вставить("Раздел2_ТЗ_Хранилище", ТЗ_ХранилищеП0000200003);
		
		Контейнер.Вставить("Раздел1_СервисРегистров", Раздел1_СервисРегистров);	
		Контейнер.Вставить("Раздел2_СервисРегистров", Раздел2_СервисРегистров);
		Контейнер.Вставить("Раздел1_СервисРегистровУдаленные", Раздел1_СервисРегистровУдаленные);	
		Контейнер.Вставить("Раздел2_СервисРегистровУдаленные", Раздел2_СервисРегистровУдаленные);
		
		Контейнер.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
		
		Результат.Вставить("Контейнер",	Контейнер);
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Процедура ВосстановитьДанныеОтчетаАЛКО(Форма, СписокСохранения)
	
	Перем ДанныеВариановАвтоЗаполнения, Автозаполнение, ДанныеМногостраничныхРазделов;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Форма.СтруктураРеквизитовФормы.Организация <> Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И Форма.СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Форма.СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
	   
		Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
		
	Иначе		
		Форма.СтруктураРеквизитовФормы.Организация = Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
		
	ДокументСсылкаИсточник = ?(Форма.НужноСкопировать,  Форма.СтруктураРеквизитовФормы.мДокументИсточник,
												Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
												
	Форма.ДатаПодписи = ДокументСсылкаИсточник.ДатаПодписи;
	
	Форма.Комментарий = ДокументСсылкаИсточник.Комментарий;
	
	Если СписокСохранения.Свойство("ЭтоПБОЮЛ") Тогда
		Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			
		    Форма.ЭтоПБОЮЛ = СписокСохранения.ЭтоПБОЮЛ;
			Форма.СтруктураРеквизитовФормы.Вставить("ЭтоПБОЮЛ", Форма.ЭтоПБОЮЛ);
			// В противном случае ЭтоПБОЮЛ будет определено в ИнициализацияНаСервере().
			
		КонецЕсли;	
	КонецЕсли;

	// Список листов, выводимых на печать.
	ДеревоНастройкиСтраниц = ДокументСсылкаИсточник.ДеревоНастройкиСтраниц.Получить();
	
	// Установим актуальные представления разделов.
	Счетчик = -1;	
	Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
		
		Счетчик = Счетчик + 1;
		
		ЭлементмДеревоСтраницОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
		
		Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
			Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
				СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			Форма.мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				Форма.мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				Форма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = Форма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
			
	// Восстановим сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство( "ПоказателиОтчета", Форма.ПоказателиОтчета );
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", Форма.СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ДополнительныеДанные", Форма.ДополнительныеДанные);
	ИнициализироватьДополнительныеДанныеАЛКО(Форма);
	
	РегламентированнаяОтчетностьАЛКОКлиентСервер.ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаАЛКО(
			Форма.ПоказателиОтчета, Форма.СтруктураДанныхТитульный, Форма.СтруктураРеквизитовФормы, Форма.ЭтоПБОЮЛ);
	
	ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
	ЭтоВиноградная =  (НЕ ГруппаВиноградныхДанных = Неопределено);
		
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			ИмяНайденноеЗначение = Неопределено;
			
			Форма.мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ИмяНайденноеЗначение);
			
			Если НЕ ИмяНайденноеЗначение = Неопределено Тогда
								
				Если СтрНайти(ИмяНайденноеЗначение, "ТаблицаСтраницы") > 0 Тогда
				
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
						
						КолонкиТаблицы = ЭлементСтруктуры.Значение.Колонки;
						
						Если КолонкиТаблицы.Найти("ФлагГоловногоОП") = Неопределено Тогда
						
							ЭлементСтруктуры.Значение.Колонки.Добавить("ФлагГоловногоОП");
						
						КонецЕсли; 
					
					КонецЕсли; 
				
				КонецЕсли; 
				
				НайденноеЗначение = Форма[ИмяНайденноеЗначение];
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение.Количество() = 0 Тогда
					НайденноеЗначение.Добавить();
					Продолжить;				
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					ИндСтрокаТаблЗнач = 0;
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							
							Если ИмяНайденноеЗначение = "ТаблицаСтраницыЛицензии" Тогда
								// Лицензии обработаем позже.
							    СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[ИндСтрокаТаблЗнач].Данные);
								
							ИначеЕсли ЭтоВиноградная Тогда
								
								СтрокаТаблЗнач.Данные.Добавить(Новый Структура);
								СтруктураДанныхИсточник = ЭлементСтруктуры.Значение[ИндСтрокаТаблЗнач].Данные;
								
								ПодчиненныеЭлементыВиноградныхДанных = ГруппаВиноградныхДанных.ПодчиненныеЭлементы;
								
								СтруктураДанныхПриемник = СтрокаТаблЗнач.Данные[0].Значение;
								
								ВосстановитьДанныеПодчиненныхЭлементовФормы(
									СтруктураДанныхПриемник, СтруктураДанныхИсточник, ПодчиненныеЭлементыВиноградныхДанных);
																
							Иначе
								// Информация из данных других разделов не нужна.
								Если ЭлементСтруктуры.Значение[ИндСтрокаТаблЗнач].Данные.Количество() > 1 Тогда
								    // Нужно сохранить изменения. 
									// Больше 1 - потому что Обособленное Подразделение должно быть.
									Форма.Модифицированность   = Истина;								
								КонецЕсли; 
								СтрокаТаблЗнач.Данные.Добавить(Новый Структура);
								
							КонецЕсли; 
														
						КонецЕсли;
						
						ИндСтрокаТаблЗнач = ИндСтрокаТаблЗнач + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДополнительныеДанные") Тогда
					
					ИндСтрокаТаблЗнач = 0;
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДополнительныеДанные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.ДополнительныеДанные.Очистить();
							
							// В данных сохраненных старой версией КодРегиона в СведенияОбОП мог представляться 
							// одним символом, что приводит к ошибке выгрузки.							
							Если ТипЗнч(ЭлементСтруктуры.Значение[ИндСтрокаТаблЗнач].ДополнительныеДанные) = Тип("Структура") Тогда
								
								СведенияОбОП = Неопределено;
							    Если ЭлементСтруктуры.Значение[ИндСтрокаТаблЗнач].ДополнительныеДанные.Свойство("СведенияОбОП", СведенияОбОП) Тогда
									Если ТипЗнч(СведенияОбОП) = Тип("Структура") Тогда
																			    
										// ИНН более не используем.
										Если СведенияОбОП.Свойство("ИНН") Тогда
										    СведенияОбОП.Удалить("ИНН");
											Форма.Модифицированность   = Истина;
										КонецЕсли; 
										
										Если НЕ СведенияОбОП.Свойство("КПП") Тогда
										    СведенияОбОП.Вставить("КПП", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										
										Если Форма.СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда										
											Если НЕ ПустаяСтрока(СведенияОбОП.КПП) Тогда
											    СведенияОбОП.КПП = "";
												Форма.Модифицированность   = Истина;																							
											КонецЕсли;										
										КонецЕсли; 
																				
										Если НЕ СведенияОбОП.Свойство("Наименование") Тогда
										    СведенияОбОП.Вставить("Наименование", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
	
										// Контроль по полям адреса.
										
										Если НЕ СведенияОбОП.Свойство("КодРегиона") Тогда
										    СведенияОбОП.Вставить("КодРегиона", "00");
											Форма.Модифицированность   = Истина;
										КонецЕсли;										
										Если НЕ ЗначениеЗаполнено(СведенияОбОП.КодРегиона) Тогда
										    СведенияОбОП.КодРегиона = "00";
											Форма.Модифицированность   = Истина;										
										КонецЕсли;
										Если СтрДлина(СокрЛП(СведенияОбОП.КодРегиона)) = 1 Тогда										
											СведенияОбОП.КодРегиона = "0" + СведенияОбОП.КодРегиона;
											Форма.Модифицированность   = Истина;
										КонецЕсли; 
										
										Если НЕ СведенияОбОП.Свойство("КодСтраны") Тогда
										    СведенияОбОП.Вставить("КодСтраны", "643"); //Россия
											Форма.Модифицированность   = Истина;
										КонецЕсли;										
										Если НЕ ЗначениеЗаполнено(СведенияОбОП.КодСтраны) Тогда
										    СведенияОбОП.КодСтраны = "643";
											Форма.Модифицированность   = Истина;										
										КонецЕсли;
										
										Если НЕ СведенияОбОП.Свойство("Страна") Тогда
										    СведенияОбОП.Вставить("Страна", "РОССИЯ");
											Форма.Модифицированность   = Истина;
										КонецЕсли;										
										Если НЕ ЗначениеЗаполнено(СведенияОбОП.Страна) Тогда
										    СведенияОбОП.Страна = "РОССИЯ";
											Форма.Модифицированность   = Истина;										
										КонецЕсли;
										
										Если НЕ СведенияОбОП.Свойство("Индекс") Тогда
										    СведенияОбОП.Вставить("Индекс", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										Если НЕ СведенияОбОП.Свойство("Регион") Тогда
										    СведенияОбОП.Вставить("Регион", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										Если НЕ СведенияОбОП.Свойство("Район") Тогда
										    СведенияОбОП.Вставить("Район", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										Если НЕ СведенияОбОП.Свойство("Город") Тогда
										    СведенияОбОП.Вставить("Город", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										Если НЕ СведенияОбОП.Свойство("НаселенныйПункт") Тогда
										    СведенияОбОП.Вставить("НаселенныйПункт", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										Если НЕ СведенияОбОП.Свойство("Улица") Тогда
										    СведенияОбОП.Вставить("Улица", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										Если НЕ СведенияОбОП.Свойство("Дом") Тогда
										    СведенияОбОП.Вставить("Дом", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										Если НЕ СведенияОбОП.Свойство("Корпус") Тогда
										    СведенияОбОП.Вставить("Корпус", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										Если НЕ СведенияОбОП.Свойство("Литера") Тогда
										    СведенияОбОП.Вставить("Литера", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										Если НЕ СведенияОбОП.Свойство("Квартира") Тогда
										    СведенияОбОП.Вставить("Квартира", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										
										Если НЕ СведенияОбОП.Свойство("ПредставлениеАдреса") Тогда
										    СведенияОбОП.Вставить("ПредставлениеАдреса", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										
										Если НЕ СведенияОбОП.Свойство("АдресXML") Тогда
										    СведенияОбОП.Вставить("АдресXML", "");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										
										Если ПустаяСтрока(СведенияОбОП.АдресXML) Тогда
											
											Представление = СведенияОбОП.ПредставлениеАдреса;
											
											Попытка
											АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
													СведенияОбОП, Представление, Перечисления.ТипыКонтактнойИнформации.Адрес);
											Исключение
											АдресXML = "";		
											КонецПопытки;
										
											Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресXML) Тогда
												
												СведенияОбОП.Вставить("АдресXML", АдресXML);
												ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(АдресXML);
												СведенияОбОП.ПредставлениеАдреса = ПредставлениеАдреса;
												Форма.Модифицированность   = Истина;
											
											КонецЕсли;
											
										ИначеЕсли ПустаяСтрока(СведенияОбОП.ПредставлениеАдреса) Тогда
											// АдресXML не пуст.
											АдресXML = СведенияОбОП.АдресXML;
											Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресXML) Тогда
											    
												ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(АдресXML);
												
												Если НЕ ПустаяСтрока(ПредставлениеАдреса) Тогда												
													СведенияОбОП.ПредставлениеАдреса = ПредставлениеАдреса;
													Форма.Модифицированность   = Истина;													
												КонецЕсли; 												
											
											КонецЕсли;
											
										КонецЕсли;
										
										// ТипДома более не используем.
										Если СведенияОбОП.Свойство("ТипДома") Тогда
										    СведенияОбОП.Удалить("ТипДома");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										// ТипКорпуса более не используем.
										Если СведенияОбОП.Свойство("ТипКорпуса") Тогда
										    СведенияОбОП.Удалить("ТипКорпуса");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										// ТипКвартиры более не используем.
										Если СведенияОбОП.Свойство("ТипКвартиры") Тогда
										    СведенияОбОП.Удалить("ТипКвартиры");
											Форма.Модифицированность   = Истина;
										КонецЕсли;
										
									КонецЕсли;
								
								КонецЕсли;								
							
							КонецЕсли; 
														
							СтрокаТаблЗнач.ДополнительныеДанные.Добавить(ЭлементСтруктуры.Значение[ИндСтрокаТаблЗнач].ДополнительныеДанные);
							
						КонецЕсли;
						
						ИндСтрокаТаблЗнач = ИндСтрокаТаблЗнач + 1;
						
					КонецЦикла;
					
				КонецЕсли;
											   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Номера страниц, на которых установлены флаги головных ОП.
	Для Каждого Раздел Из Форма.мСтруктураМногостраничныхРазделов Цикл
					
		ИмяРаздела = Раздел.Ключ;
		
		Если ИмяРаздела = "Лицензии" Тогда
		    Продолжить;		
		КонецЕсли; 
		
		ИмяНомерСтраницыФлагГоловногоОП = "НомерСтраницыФлагГоловногоОП" + ИмяРаздела;
		
		Форма[ИмяНомерСтраницыФлагГоловногоОП] = 0;
		
		Если СписокСохранения.Свойство(ИмяНомерСтраницыФлагГоловногоОП) Тогда
		    Форма[ИмяНомерСтраницыФлагГоловногоОП] = СписокСохранения[ИмяНомерСтраницыФлагГоловногоОП];
		КонецЕсли;
		
	КонецЦикла;
		
	// Если был импорт из старого формата - нужно восстановить раздел Лицензий.
	Если Форма.БылИмпорт Тогда
		
		Если Форма.мСтруктураМногостраничныхРазделов.Свойство("Лицензии") Тогда
		
			ВосстановитьСведенияОЛицензияхИзЛистаЛицензииСтарогоОбразцаАЛКО(Форма);
			
			ОбработкаСтраницЛицензийПослеЗагрузкиАЛКО(Форма);
					
		КонецЕсли; 
						
	КонецЕсли; 
		
	РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьДеревоРазделовОтчетаАЛКО(Форма);
	
	Префикс = "ПолеТабличногоДокумента";
	
    Для Каждого Раздел Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			Форма["СтруктураДанных" + Раздел.ИмяСтраницы] = Форма.ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	ОргИНН = "";
	Если НЕ Форма.СтруктураДанныхТитульный.Свойство("ИНН1", ОргИНН) Тогда
	    ОргИНН = "";	
	КонецЕсли; 
	
	Для Каждого Раздел Из Форма.мСтруктураМногостраничныхРазделов Цикл
				
		НазваниеРаздела = Раздел.Ключ;
		ИмяТаблицыРаздела = Раздел.Значение;
				
		Для Каждого Страница Из Форма[ИмяТаблицыРаздела] Цикл
			
			// Уберем все активные страницы.
			Страница.АктивнаяСтраница = Ложь;
			
			Если СтрНайти(ИмяТаблицыРаздела, "Лицензии") = 0 Тогда
				
				Если НЕ ТипЗнч(Страница.ДополнительныеДанные[0].Значение) = Тип("Структура") Тогда
					
					Страница.ДополнительныеДанные[0].Значение = Новый Структура;
					Форма.Модифицированность   = Истина;
					
				КонецЕсли;
				
				Если НЕ Страница.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП") Тогда
					
				    СведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
					Страница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СведенияОбОП);				
				    Форма.Модифицированность   = Истина;
					
				КонецЕсли;
				
				СтруктураСведенияОбОП = Страница.ДополнительныеДанные[0].Значение.СведенияОбОП;
				СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(
															СтруктураСведенияОбОП, Форма.ЭтоПБОЮЛ, ОргИНН);
					
			    Страница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Форма.СтруктураДанныхТитульный.Вставить("ДатаПодписи", Форма.ДатаПодписи); 
	Форма.ТекущийРаздел = "Титульный";
				
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(Форма);

	// Управляем видимостью страниц основной панели формы.
	КопироватьДанныеФормы(Форма.мДеревоСтраницОтчета, Форма.мДеревоВыбранныхСтраниц);
	
	Форма.СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
	
	Если Форма.НужноСкопировать или Форма.БылИмпорт Тогда
	
		ЗаполнитьСведенияОбОрганизацииАЛКО(Форма);
	
	КонецЕсли; 
				
КонецПроцедуры

Процедура СохранитьДеревоСтраницОтчетаАЛКО(Форма, Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(Форма.РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
				Сообщение.Сообщить();
			
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьПоказателиОтчетаАЛКО(Форма)
	
	ПоказателиОтчета = Новый Структура();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, Форма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ПоказателиОтчета;
	
КонецФункции

Процедура ВидимостьДоступностьКнопокПолейРазделаАЛКО(Форма, НаименованиеРаздела, ЭтоРазделОтчета, ЭтоЛицензируемаяДеятельность)

	ЭтоТитульный = (НаименованиеРаздела = "Титульный");	
	ЭтоРазделЛицензии = (НаименованиеРаздела = "Лицензии");
			
	Форма.Элементы.Обновить.Доступность = ЭтоТитульный;
	Форма.Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	Форма.Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;

	// Для многостраничных разделов.
	Если НЕ ЭтоТитульный Тогда
		
		Форма.Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
						
		Форма.Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		Форма.Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Истина;
		
		// В случае если выделена не страница в РазделыОтчета,
		// а выделен сам Раздел - и показывается первая страница (с 0-м индексом),
		// кнопку Удалить в этом случае не показываем.		
		Если ЭтоРазделОтчета Тогда
			
			Форма.Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			Форма.Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
			
		ИначеЕсли Форма.ОднаСтраницаВРазделе Тогда
			// Нельзя удалить единственную страницу.
			Форма.Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
			
		КонецЕсли;
		
		ЭтоВиноградная = НЕ (Форма.Элементы.Найти("ГруппаВиноградныхДанных") = Неопределено);
		Если ЭтоВиноградная Тогда
			
			СтрокаОП = Форма.ОбособленноеПодразделениеРаздела;
		    ЗаполненоОП = НЕ ( (НЕ ЗначениеЗаполнено(СтрокаОП)) или (СтрокаОП = "Заполнить") );
			Форма.Элементы.ДобавитьВиноградник.Заголовок = ?(Форма.ЭтоПБОЮЛ,
									"Добавить еще один виноградник по этому же месту нахождения",
									"Добавить еще один виноградник по этому же обособленному подразделению");
			Форма.Элементы.ДобавитьВиноградник.Видимость = ЗаполненоОП;
		
		КонецЕсли; 
		
		Если ЭтоРазделЛицензии Тогда
			
			ОбработкаПолейСтраницыЛицензийАЛКО(Форма, ЭтоЛицензируемаяДеятельность);
		    Форма.Элементы.КнопкаУдалитьСтраницуЛицензии.Видимость = (НЕ Форма.ОднаСтраницаВРазделе) и (НЕ ЭтоРазделОтчета);
			
			Если (Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20131101')				    
				И (Не ЭтоЛицензируемаяДеятельность) Тогда
			
				// Для НЕ лицензируемой деятельности нет смысла добавлять страницы
				// т.к. Лицензия может быть только одна, с кодом 12.
				Форма.Элементы.КнопкаДобавитьСтраницуЛицензии.Видимость = Ложь;
				Форма.Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
				
			Иначе
				Форма.Элементы.КнопкаДобавитьСтраницуЛицензии.Видимость = Истина;
			КонецЕсли; 
			
		Иначе	
			
			Форма.Элементы.КнопкаУдалитьСтраницу.Видимость = (НЕ Форма.ОднаСтраницаВРазделе) и (НЕ ЭтоРазделОтчета);
			
		КонецЕсли;
		
	Иначе
		
		Форма.Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
		Форма.Элементы.Обновить.Доступность = Истина;
		
		Форма.Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		Форма.Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
		
	КонецЕсли; 	
	
КонецПроцедуры

Функция ОбновитьЦветСсылкиАЛКО(СтрЗначение, ЦветСтиляНезаполненныйРеквизит, ЦветСтиляЦветГиперссылкиБРО)

	ЦветТекста = ?(СтрЗначение = "Заполнить", 	
								ЦветСтиляНезаполненныйРеквизит,
								ЦветСтиляЦветГиперссылкиБРО);
								
	Возврат ЦветТекста;

КонецФункции

Процедура ОбновитьЦветСсылкиОП_АЛКО(Форма)
		
	Форма.Элементы.ОбособленноеПодразделение.ЦветТекста =  ОбновитьЦветСсылкиАЛКО(Форма.ОбособленноеПодразделениеРаздела, 
			Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);
	
КонецПроцедуры

Процедура ВывестиДанныеПодчиненныхЭлементовФормы(Форма, СтруктураДанных, ПодчиненныеЭлементы, ИдГруппы)
	
	Для каждого Элемент Из ПодчиненныеЭлементы Цикл
		
		ИмяРеквизита = Элемент.Имя;
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
		
			ТекПодчиненныеЭлементы = Элемент.ПодчиненныеЭлементы;
			ВывестиДанныеПодчиненныхЭлементовФормы(Форма, СтруктураДанных, ТекПодчиненныеЭлементы, ИдГруппы);
		
		КонецЕсли;
		
		Если СтрНайти(ИмяРеквизита, ИдГруппы) = 0  Тогда
		    Продолжить;					
		КонецЕсли;
		
		СтруктураДанных.Свойство(ИмяРеквизита, Форма[ИмяРеквизита]);
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ВосстановитьДанныеПодчиненныхЭлементовФормы(
					СтруктураДанныхПриемник, СтруктураДанныхИсточник, ПодчиненныеЭлементы, ИдГруппы = "")
	
	Для каждого Элемент Из ПодчиненныеЭлементы Цикл
		
		ИмяРеквизита = Элемент.Имя;
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
		
			ТекПодчиненныеЭлементы = Элемент.ПодчиненныеЭлементы;
			ВосстановитьДанныеПодчиненныхЭлементовФормы(
					СтруктураДанныхПриемник, СтруктураДанныхИсточник, ТекПодчиненныеЭлементы, ИдГруппы);
		
		КонецЕсли;
		
		// Если ИдГруппы не указано, всегда 1.
		Если СтрНайти(ИмяРеквизита, ИдГруппы) = 0  Тогда
		    Продолжить;					
		КонецЕсли;
		
		ЗначениеПоля = Неопределено;
		СтруктураДанныхИсточник.Свойство(ИмяРеквизита, ЗначениеПоля);
		СтруктураДанныхПриемник.Вставить(ИмяРеквизита, ЗначениеПоля);
	
	КонецЦикла; 
		
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииАЛКО(Форма, ТолькоАдрес = Ложь)

	РабочаяОрганизация = Форма.СтруктураРеквизитовФормы.Организация;
	Если (РабочаяОрганизация = Неопределено) Или (РабочаяОрганизация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию.
	Сведения = Новый СписокЗначений;
	
	Сведения.Добавить("", "ИННЮЛ");
	Сведения.Добавить("", "КППЮЛ");
	Сведения.Добавить("", "НаимЮЛПол");
	Сведения.Добавить("", "НаимЮЛСокр"); 
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "АдресЭлектроннойПочтыОрганизации");
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ПолныйАдрЮР");
	Сведения.Добавить("", "АдрЮР");	
	Сведения.Добавить("", "АдрЮР_XML");
	Сведения.Добавить("", "АдрПрописки_XML");
	Сведения.Добавить("", "АдрПрописки");

	Результат = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(РабочаяОрганизация, Форма.ДатаПодписи, Сведения);
	
	// Сначала пробуем юр. адрес, даже если ИП.
	
	ОрганизацияНаименованиеПолное		= Результат.НаимЮЛПол;
	ОрганизацияНаименованиеСокращенное 	= Результат.НаимЮЛСокр;
	
	СтрокаXML = ?(Форма.ЭтоПБОЮЛ, Результат.АдрПрописки_XML, Результат.АдрЮР_XML);
	
	Если (НЕ ЗначениеЗаполнено(СтрокаXML) ) и Форма.ЭтоПБОЮЛ Тогда
	    Если ЗначениеЗаполнено(Результат.АдрЮР_XML) Тогда
		    СтрокаXML = Результат.АдрЮР_XML;
	    КонецЕсли;
	КонецЕсли;
		
	// Если ничего не получили (возможно не реализовано в переопределяемом модуле возврат XML строк адресной информации)
	// - пытаемся получить альтернативным вариантом.
	ПредставлениеАдреса = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(СтрокаXML) Тогда
	
		МассивОбъектов = Новый Массив;
		ОбъектОрганизации = РабочаяОрганизация;
		МассивОбъектов.Добавить(ОбъектОрганизации);
		
		ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов);
			
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;	
											  
		Если ТаблицаКонтактнойИнформации.Количество() > 1 Тогда
												  
			СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации.Найти(ВидКонтактнойИнформации);
			Если СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда
				СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации[0];
			КонецЕсли;
			
		ИначеЕсли ТаблицаКонтактнойИнформации.Количество() = 1 Тогда
			СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации[0];
		Иначе
			СтрокаТаблицаКонтактнойИнформации = Неопределено;
		КонецЕсли;
		
		Если СтрокаТаблицаКонтактнойИнформации = Неопределено и Форма.ЭтоПБОЮЛ Тогда
			
			// Пробуем адрес прописки.
			МассивОбъектов = Новый Массив;
			
			МетаданныеОбъекта = РабочаяОрганизация.Метаданные();
			ЕстьРеквизитИндивидуальныйПредприниматель = ОбщегоНазначения.ЕстьРеквизитОбъекта("ФизическоеЛицо", МетаданныеОбъекта);
			Если ЕстьРеквизитИндивидуальныйПредприниматель Тогда
			    ОбъектОрганизации = РабочаяОрганизация.ФизическоеЛицо;
			Иначе	
			    ОбъектОрганизации = РабочаяОрганизация;
			КонецЕсли; 
			
			МассивОбъектов.Добавить(ОбъектОрганизации);
			
			ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов);
				
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке;	
												  
			Если ТаблицаКонтактнойИнформации.Количество() > 1 Тогда
													  
				СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации.Найти(ВидКонтактнойИнформации);
				Если СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда
					СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации[0];
				КонецЕсли;
				
			ИначеЕсли ТаблицаКонтактнойИнформации.Количество() = 1 Тогда
				СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации[0];
			Иначе
				СтрокаТаблицаКонтактнойИнформации = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
			
		Если НЕ СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда	
			Если Не ЗначениеЗаполнено(СтрокаТаблицаКонтактнойИнформации.ЗначенияПолей) Тогда
			    СтрокаТаблицаКонтактнойИнформации = Неопределено;		
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда
			
			Если НЕ ПустаяСтрока(СтрЗаменить(Результат.АдрЮР, ",", "")) Тогда
			    ПредставлениеАдреса = Результат.АдрЮР;
			Иначе	
			    Если Форма.ЭтоПБОЮЛ Тогда
				    ПредставлениеАдреса = Результат.АдрПрописки;
				Иначе	
				    ПредставлениеАдреса = Результат.ПолныйАдрЮР;
				КонецЕсли; 
			КонецЕсли;
			
		Иначе
			 
			СтрокаXML = СтрокаТаблицаКонтактнойИнформации.ЗначенияПолей;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим структуру адреса из XML или представления, если не смогли получить XML.
	Если НЕ ЗначениеЗаполнено(СтрокаXML) Тогда		
	    АдресОрганизации = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXML(ПредставлениеАдреса);		
	Иначе		
		АдресОрганизации = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXML(СтрокаXML);		
	КонецЕсли; 
	
	// Стандартное представление адреса.
	ЮридическийАдрес = Результат.ПолныйАдрЮР;
				
	Если Не АдресОрганизации = Неопределено Тогда				
		ЗаполнитьПоляАдресаОрганизацииАЛКО(Форма, АдресОрганизации);
		Форма.ДополнительныеДанные.Титульный.Вставить("АдресОрганизации", АдресОрганизации);		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
		
	// Заполнение реквизитов титульного листа.
	
	ИНН = СокрЛП(Результат.ИННЮЛ);
	КПП = ?(Форма.ЭтоПБОЮЛ, "", СокрЛП(Результат.КППЮЛ));
	
	Форма.СтруктураРеквизитовФормы.мИННЮЛ = ИНН;
	Форма.СтруктураДанныхТитульный.Вставить("ИНН1", ИНН);
	
	Форма.СтруктураРеквизитовФормы.мКППЮЛ = КПП;
	Форма.СтруктураДанныхТитульный.Вставить("КПП1", КПП);
	
	Форма.СтруктураРеквизитовФормы.ТелОрганизации = Результат.ТелОрганизации;
	Форма.СтруктураДанныхТитульный.Вставить("ТелОрганизации", Результат.ТелОрганизации);	
	
	ТекущийEmail = "";
	Форма.СтруктураДанныхТитульный.Свойство("ЭлектроннаяПочта", ТекущийEmail);
	Если НЕ ЗначениеЗаполнено(ТекущийEmail) Тогда
		Форма.СтруктураДанныхТитульный.Вставить("ЭлектроннаяПочта", Результат.АдресЭлектроннойПочтыОрганизации);		
	КонецЕсли; 
			
	Если Результат <> Неопределено Тогда
		
		Форма.СтруктураРеквизитовФормы.Руководитель   = Результат.ФИОРук;
		Форма.СтруктураРеквизитовФормы.Бухгалтер      = Результат.ФИОБух;
		
		Форма.СтруктураДанныхТитульный.Вставить("ОргДиректор", Результат.ФИОРук);
		Форма.СтруктураДанныхТитульный.Вставить("ОргБухгалтер", Результат.ФИОБух);
		
		Форма.СтруктураДанныхТитульный.Вставить("ОргНазв", СокрЛП(Результат.НаимЮЛПол));
		Форма.СтруктураДанныхТитульный.Вставить("ОргНазвСокращ", СокрЛП(Результат.НаимЮЛСокр));
				
	КонецЕсли;
	
	Форма.СтруктураДанныхТитульный.Вставить("ЭтоПБОЮЛ", Форма.ЭтоПБОЮЛ);
	
	Если ТолькоАдрес Тогда
	    Возврат;	
	КонецЕсли;
	
	ОбновитьОППоМестуНахожденияАЛКО(Форма);
	
	ЗаполнитьТитульныйАЛКО(Форма);
		
КонецПроцедуры

Процедура ОпределитьПредставлениеДопСтраницАЛКО(Форма, ИмяСтраницы = Неопределено, ТолькоУАктивнойСтраницы = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	ТолькоАктивная = ?(ТолькоУАктивнойСтраницы = Неопределено, Ложь, ТолькоУАктивнойСтраницы);
	
	Для Каждого Страница Из Форма.мСтруктураМногостраничныхРазделов Цикл
		
		ИмяТекСтраницы        = Страница.Ключ;
		ТаблицаСтраницРаздела = Форма[Страница.Значение];

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяТекСтраницы <> ИмяСтраницы Тогда
				Продолжить; // Пропускаем не нужные страницы.
			КонецЕсли;
		КонецЕсли;

		// Если есть хоть одна страница - определим ее представление.
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			НомерСтраницы = 0;

			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				НомерСтраницы = НомерСтраницы + 1;

				СохрПредставлениеСтраницы = СтрокаТаблицы.Представление;

				// Если колонки нет, тогда автоматическое представление включено по умолчанию.
				Если ТаблицаСтраницРаздела[0].Свойство("АвтоматическоеПредставление") Тогда
					АвтоматическоеПредставление = СтрокаТаблицы.АвтоматическоеПредставление;
				Иначе
					АвтоматическоеПредставление = Истина;
				КонецЕсли;

				Если НЕ АвтоматическоеПредставление Тогда
					Продолжить;
				КонецЕсли;

				Если (НЕ ТолькоАктивная) Или ((ТолькоАктивная) И (СтрокаТаблицы.АктивнаяСтраница))Тогда

					ТекущееПредставлениеСтраницы = "Лист N " + Строка(НомерСтраницы);
					Если Не ПустаяСтрока(ТекущееПредставлениеСтраницы) Тогда
						СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;
					Иначе
						СтрокаТаблицы.Представление = "Новая страница";
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СохранитьДанныеРазделаАЛКО(Форма, НаимРаздела, УдалятьТаблицуФормы = Истина, ИзменятьАктивнуюСтраницу = Истина)	
	
	Если НЕ ЗначениеЗаполнено(НаимРаздела) Тогда
	    Возврат;	
	КонецЕсли;
	
	// Многостраничные и многострочные разделы.
	ТаблицаСтраницРаздела = Неопределено;
	Если Форма.мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела) Тогда
				
		ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			ОпределитьПредставлениеДопСтраницАЛКО(Форма, НаимРаздела);
						
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
			ИндексСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
			
			// Принудительно заставляем платформу обновить данные списков значений.
			СтрТаблицаСтраницы.ДополнительныеДанные[0].Пометка = НЕ СтрТаблицаСтраницы.ДополнительныеДанные[0].Пометка;
			СтрТаблицаСтраницы.Данные[0].Пометка = НЕ СтрТаблицаСтраницы.Данные[0].Пометка;
			
			ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(
													НаимРаздела, Форма.СтруктураРеквизитовФормы);
									
			Если НЕ ИдГруппы = Неопределено Тогда
			    							
				// Сохраним данные Лицензии .
				Если НаимРаздела = "Лицензии" Тогда
					
					СтруктураДанных = Новый Структура;
					
					// Используем то обстоятельство, что поля, которые надо сохранять в Данные, 
					// имеют реквизиты с П000000000101 по П000000000105.
					
					Для Инд = 1 По 5 Цикл
					
						ИмяРеквизита = "П00000000010" + Инд;
						ЗначениеРеквизита = Форма[ИмяРеквизита];
						
						СтруктураДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);
					
					КонецЦикла; 
					
					Если СтрТаблицаСтраницы.Данные.Количество() = 0 Тогда				
						СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанных);
					Иначе
						СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанных;				
					КонецЕсли;
					СтрТаблицаСтраницы.Данные[0].Пометка = НЕ СтрТаблицаСтраницы.Данные[0].Пометка;
				
				КонецЕсли;	
			
			КонецЕсли; 
	         
			
		КонецЕсли;
		
		// Все сохранено, удалим таблицу формы.
		Если УдалятьТаблицуФормы Тогда			
			УдалитьТаблицыФормыАЛКО(Форма);								
		КонецЕсли; 			
					
	КонецЕсли;
				
КонецПроцедуры

Процедура ОбновитьОППоМестуНахожденияАЛКО(Форма)
	
	Для Каждого Раздел Из Форма.мСтруктураМногостраничныхРазделов Цикл
			
		НазваниеРаздела = Раздел.Ключ;
		ИмяТаблицыРаздела = Раздел.Значение;
		
		// В разделе Лицензии нет флага головного ОП.
		Если НазваниеРаздела = "Лицензии" Тогда		
			Продолжить;		
		КонецЕсли; 				
				
		ИндексСтраницы = -1;
		Для Каждого Страница Из Форма[ИмяТаблицыРаздела] Цикл
			
			ИндексСтраницы = ИндексСтраницы + 1;
			
			Если Страница.ФлагГоловногоОП Тогда
				
			    // Нужно обновить.
				ЗаполнитьОПРеквизитамиОрганизацииАЛКО(Форма, НазваниеРаздела, ИндексСтраницы);
							
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьВсеСервисРегистровУдаленныеОтчетаАЛКО(Форма)
	
	// Используется при записи отчета как нового при изменении номера корректировки.
	Для каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
	
		ИдГруппы = ЭлементСтруктуры.Ключ;
	    ТаблицаСервисРегистровУдаленные = Форма["СервисРегистров" + ИдГруппы + "Удаленные"];
		ТаблицаСервисРегистровУдаленные.Очистить();
		
	КонецЦикла;
	
	// В Журнал ничего не пишем - для нового отчета истории удаленных страниц нет.
	
КонецПроцедуры

Процедура ОчиститьСервисРегистровОтчетаАЛКО(Форма, ИдГруппы)
		
	ДокументСсылкаАлкоОтчет 			= Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	ТаблицаСервисРегистров  			= Форма["СервисРегистров" + ИдГруппы];
	ТаблицаСервисРегистровУдаленные  	= Форма["СервисРегистров" + ИдГруппы + "Удаленные"];
	
	ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
															ИдГруппы, Форма.СтруктураРеквизитовФормы);
	
	Для Каждого СтрокаСервисРегистровГруппы Из ТаблицаСервисРегистров Цикл
		
		НоваяСтрокаСервисРегистровГруппыУдаленные = ТаблицаСервисРегистровУдаленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.	
		ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра,
					НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
									
	КонецЦикла;
	
	ТаблицаСервисРегистров.Очистить();
	
КонецПроцедуры

Функция ПолучитьСтруктуруСервисРегистровАЛКО(Форма, Удаленные = Ложь)
	
	Результат = Новый Структура;
	
	Для каждого Элемент Из Форма.СтруктураРеквизитовФормы.мСоответствиеИдГруппыРегистр Цикл
		
		ИдГруппы = Элемент.Ключ;
		ИмяРегистра = Элемент.Значение;
		ТаблицаСервисРегистров = ПолучитьСервисРегистровКакТаблицуЗначений(Форма, ИдГруппы, Удаленные);
		
		Результат.Вставить(ИмяРегистра, ТаблицаСервисРегистров);
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Процедура ВосстановитьСервисРегистровАЛКО(Форма, СтруктураСервисРегистров, Удаленные = Ложь)
	
	Для Каждого ЭлСервисРегистров Из СтруктураСервисРегистров Цикл
	
		ИмяРегистра = ЭлСервисРегистров.Ключ;
		ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоИмениРегистраАЛКО(
															ИмяРегистра, Форма.СтруктураРеквизитовФормы);
		
		ТабСервисРегистров = ЭлСервисРегистров.Значение;		
		
		ЗначениеВДанныеФормы(ТабСервисРегистров, Форма["СервисРегистров" + ИдГруппы+ ?(Удаленные, "Удаленные", "")]);
	
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьСтруктуруИдГруппБуферИтоговАЛКО(Форма)

	Результат = Новый Структура;
	
	Для каждого Элемент Из Форма.мСтруктураМногострочныхРазделов Цикл
	
		ИдГруппы = Элемент.Ключ;
		Результат.Вставить(ИдГруппы, Форма["БуферИтогов" + ИдГруппы]);
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуЗначенийРегистраГруппыАЛКО(ИдГруппы, СтруктураРеквизитовФормы) 
	
	Таб	= Новый ТаблицаЗначений;
	
	ИмяРегистраСведений		= РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
																ИдГруппы, СтруктураРеквизитовФормы);
		
	// Добавляем в таблицу значений все необходимые колонки.
	ОбработкаТаблицыПередЗаписьюВРегистр(ИмяРегистраСведений, Таб);
	
	Возврат Таб;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовФормыАЛКО(Форма)

	ПараметрыФормы = Новый Структура;
	
	Для каждого ЭлементРаздела Из Форма.мСтруктураМногостраничныхРазделов Цикл
	
		ИмяТаблицыРаздела 	= ЭлементРаздела.Значение;
		ТаблицаРаздела		= Форма[ИмяТаблицыРаздела];
		ПараметрыФормы.Вставить(ИмяТаблицыРаздела, ТаблицаРаздела.Выгрузить());
	
	КонецЦикла;
	
	Для каждого ЭлементРаздела Из Форма.мСтруктураМногострочныхРазделов Цикл
	
		ИдГруппы = ЭлементРаздела.Ключ;
		ТабГруппы = ПолучитьТаблицуЗначенийРегистраГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
		ПараметрыФормы.Вставить("Таб" + ИдГруппы,  ТабГруппы);
	
	КонецЦикла; 
	
	СтруктураСервисРегистров = ПолучитьСтруктуруСервисРегистровАЛКО(Форма);
	
	ПараметрыФормы.Вставить("СтруктураСервисРегистров",	СтруктураСервисРегистров);

	ПараметрыФормы.Вставить("СтруктураРеквизитовФормы",  Форма.СтруктураРеквизитовФормы);
	
	ПараметрыФормы.Вставить("СтруктураДанныхТитульный",  Форма.СтруктураДанныхТитульный);
	
	ПараметрыФормы.Вставить("мДеревоВыбранныхСтраниц",   Форма.РеквизитФормыВЗначение("мДеревоВыбранныхСтраниц"));
	
	ПараметрыФормы.Вставить("НомерКорректировки",   Форма.НомерКорректировки);
	ПараметрыФормы.Вставить("ДополнительныеДанные",   Форма.ДополнительныеДанные);
	ПараметрыФормы.Вставить("ДатаПодписи",   Форма.ДатаПодписи);
	
	Возврат ПараметрыФормы;

КонецФункции 

Процедура СоздатьТаблицуФормыРазделаБезПодвалаАЛКО(Форма, ИдГруппы, 
												ИндексСтраницы, ИмяИсточникаДанныхТаблицы)
														
	Если НЕ ЗначениеЗаполнено(ИдГруппы) Тогда	
		Возврат; 	
	КонецЕсли;
	
	Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(
												ИдГруппы, Форма.СтруктураРеквизитовФормы);
	
	СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(
												Раздел, Форма.СтруктураРеквизитовФормы);
	ЭлементСпискаГрупп = СписокИдГрупп.НайтиПоЗначению(ИдГруппы);
	Если ЭлементСпискаГрупп = Неопределено Тогда
	    Возврат;	
	КонецЕсли;
	
	НазваниеТаблицыФормы = ЭлементСпискаГрупп.Представление;
	
	// Определим таблицу настроек для текущей страницы раздела.
	// Используем всегда настройку 0-й страницы - в этом отчете вараинт заполнения для всех страниц один.
	ТаблицаВариантовЗаполнения = Форма["ТаблицаВариантыЗаполнения" + НазваниеТаблицыФормы][0].ТаблицаВариантовЗаполнения.Выгрузить();
	
	ГруппаТаблицыФормы = Форма.Элементы.Найти("ГруппаТаблицыФормы" + НазваниеТаблицыФормы);
	Если ГруппаТаблицыФормы = Неопределено Тогда
	    Возврат;	
	КонецЕсли;
	
	// Удаляем ранее созданную таблицу.
	// Менять источник данных можно только при создании таблицы формы.
	УдалитьТаблицыФормыАЛКО(Форма, ИдГруппы);
	
	// Создаем новую таблицу формы.
	ТаблицаФормы = Форма.Элементы.Добавить("ТаблицаФормыРаздела" + ИдГруппы, Тип("ТаблицаФормы"), ГруппаТаблицыФормы);
	
	ИсточникДанныхТаблицы = Форма[ИмяИсточникаДанныхТаблицы];
	
	// Инициализация динамического списка.
	ЭтоДинамическийСписок = (ТипЗнч(ИсточникДанныхТаблицы) = Тип("ДинамическийСписок")); 	
	Если ЭтоДинамическийСписок Тогда
	 	ИнициализироватьСпискиАЛКО(Форма, ИмяИсточникаДанныхТаблицы, ИдГруппы, ИндексСтраницы);	
	КонецЕсли; 
	
	// Устанавливаем источник данных.
	ТаблицаФормы.ПутьКДанным = ИмяИсточникаДанныхТаблицы;
	
	// Обход ошибки платформы - программное присвоение пустого значения к ПутьКДаннымКартинкиСтроки выдает ошибку.
	// Хотя при очищении этого поля в конфигураторе в отладчике это пуле пустое и все работает.
	// Поэтому в запросе динамического списка добавлено поле ПустаяКартинка, в которое всегда помещается
	// пустая строка.
	ТаблицаФормы.ПутьКДаннымКартинкиСтроки = ТаблицаФормы.ПутьКДанным + ".ПустаяКартинка";
	
	ТаблицаФормы.АктивизироватьПоУмолчанию = Истина;	
	ТаблицаФормы.Видимость = Ложь;
	
	// Общие настройки таблицы.
	ТаблицаФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ТаблицаФормы.ПоискПриВводе = ПоискВТаблицеПриВводе.НеИспользовать;
	ТаблицаФормы.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Авто;
	ТаблицаФормы.ПоложениеУправленияПоиском = ПоложениеУправленияПоиском.Нет;
	ТаблицаФормы.ПоложениеСостоянияПросмотра = ПоложениеСостоянияПросмотра.Верх;
		
	// Командная панель.
	ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Верх;
	
		
	// С данными регистров привязанными к данному отчету никто больше не работает, нет смысла обновлять.
	ТаблицаФормы.АвтоОбновление = Ложь;
	ТаблицаФормы.ОбновлениеПриИзмененииДанных = ОбновлениеПриИзмененииДанных.Авто;
			
	ТаблицаФормы.РастягиватьПоВертикали = Истина;
	ТаблицаФормы.РастягиватьПоГоризонтали = Истина;
	
	// Для виноградных деклараций фиксируем высоту, у них большая шапка.
	Если Форма.НомерАлкоОтчета >= 13 Тогда
		
		ВысотаЭкрана = Неопределено;
		
		МассивИнформацииЭкранов = ПолучитьИнформациюЭкрановКлиента();
		Если (НЕ МассивИнформацииЭкранов = Неопределено) и (МассивИнформацииЭкранов.Количество() > 0) Тогда
			
		    ИнформацияЭкранаКлиента = МассивИнформацииЭкранов[0];
			ВысотаЭкрана = ИнформацияЭкранаКлиента.Высота;
			
			Если (НЕ ВысотаЭкрана = Неопределено) и (ВысотаЭкрана <= 1024) Тогда
				
				// Для виноградных, там большие группы над таблицей.
				ТаблицаФормы.РастягиватьПоВертикали = Ложь;
				
				Если Форма.НомерАлкоОтчета = 15 Тогда
			    	ТаблицаФормы.ВысотаВСтрокахТаблицы = 3;
				Иначе
					ТаблицаФормы.ВысотаВСтрокахТаблицы = 4;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
	  
	КонецЕсли; 
	
	ТаблицаФормы.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьАвтоматически;
	ТаблицаФормы.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьАвтоматически;
	
	ТаблицаФормы.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Ячейка;
	ТаблицаФормы.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
	ТаблицаФормы.МножественныйВыбор = Ложь;	
	
	ТаблицаФормы.АвтоВводНовойСтроки = Ложь;
	ТаблицаФормы.ИзменятьПорядокСтрок = Истина;
	
	// Линии таблицы.
	ТаблицаФормы.ГоризонтальныеЛинии = Истина;
	ТаблицаФормы.ВертикальныеЛинии = Истина;
	
	// Добавление строк "нормальное", в конец.
	ТаблицаФормы.РежимВводаСтрок = РежимВводаСтрокТаблицы.ВКонецСписка;
	ТаблицаФормы.Отображение = ОтображениеТаблицы.Список;
	
	ЦветРамкиЧерный        = Новый Цвет(0, 0, 0);
	ЦветФонаБелый          = Новый Цвет(255, 255, 255);
		
	// Шапка всегда есть.
	ТаблицаФормы.Шапка = Истина;
	
	// Подвал есть не всегда.
	Если Раздел <> "Лицензии" Тогда
		
		ТаблицаФормы.Подвал = Истина;
		ТаблицаФормы.ВысотаПодвала = 1;
		
	Иначе	
	    ТаблицаФормы.Подвал = Ложь;
	КонецЕсли; 
		
	// Отберем нужные настройки.
	ТаблицаНастроекТабличныхПолей = Форма.мТаблицаНастроекТабличныхПолей.Выгрузить();
	
	ТипЗначенияИДТабличногоПоля = ТаблицаНастроекТабличныхПолей.Колонки["ИДТабличногоПоля"].ТипЗначения;
	ПриведенныйИДТабличногоПоля = ТипЗначенияИДТабличногоПоля.ПривестиЗначение(ИдГруппы);
	Отбор = Новый Структура("ИДТабличногоПоля", ПриведенныйИДТабличногоПоля);
	
	СтрокиНужныхНастроек = ТаблицаНастроекТабличныхПолей.НайтиСтроки(Отбор);
	
	КолонкаТекстШапки = "КраткоеНаименованиеКолонки";
							
	// Определим высоту шапки таблицы.
	МаксКолСтрокШапки = 0;
	Для Каждого СтрокаНастройки  Из СтрокиНужныхНастроек Цикл
	    ТекстШапки = СтрокаНастройки[КолонкаТекстШапки];
		МаксКолСтрокШапки = Макс(СтрЧислоСтрок(ТекстШапки), МаксКолСтрокШапки);			
	КонецЦикла;
		
	ТаблицаФормы.ВысотаШапки = МаксКолСтрокШапки;
			
	ФорматИтогов = Форма["ФорматИтогов" + ИдГруппы];
	ФорматИтогов.Очистить();
	
	// Теперь надо создать колонки.
	ТипЗначенияКодПоказателя = ТаблицаВариантовЗаполнения.Колонки["КодПоказателя"].ТипЗначения;
	
	// Первая колонка "Активно" - всегда признак активности строки - аналог пометки на удаление,
	// сделаем ее отдельно.
	ИмяКолонки = "Активно";
	Поле = Форма.Элементы.Добавить(ИмяКолонки + ИдГруппы, Тип("ПолеФормы"), ТаблицаФормы);
	Поле.Вид = ВидПоляФормы.ПолеКартинки;
	
	// Отражаем в таблице как картинку - "крестик" если не активно, т.е помечено на удаление,
	// "пусто" - если активно, рабочая строка.
	Поле.КартинкаЗначений = БиблиотекаКартинок.ПустоИКрестик;
		
	Поле.АктивизироватьПоУмолчанию = Истина;
			
	Поле.ПутьКДанным = ТаблицаФормы.ПутьКДанным + "." + ИмяКолонки;
	Поле.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	Поле.Видимость = Истина;
	
	Поле.Заголовок = "DEL";
	// Показываем только картинку, заголовок не нужен.
	Поле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	Поле.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;	
	
	// В заголовке показываем интуитивно понятную картинку.
	Поле.КартинкаШапки = БиблиотекаКартинок.Удалить;
	
	Поле.Ширина = 2;
	Поле.АвтоМаксимальнаяШирина = Ложь;
	Поле.РастягиватьПоГоризонтали = Ложь;
	
	Поле.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	Поле.Подсказка = НСтр("ru = 'Помеченные крестиком не выгружаются, не печатаются и не учавствуют в итогах,
								|изменяется двойным щелчком, клавишей DEL или действием ""Удалить"".'");
		
	Поле.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	Поле.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	
	Поле.АвтоВысотаЯчейки = Истина;
	
	// Вторая колонка № строки - тоже сделаем отдельно.
	ИмяКолонки = "ИндексСтроки";
	Поле = Форма.Элементы.Добавить(ИмяКолонки + ИдГруппы, Тип("ПолеФормы"), ТаблицаФормы);
	Поле.Вид = ВидПоляФормы.ПолеНадписи;
	
	Поле.ПутьКДанным = ТаблицаФормы.ПутьКДанным + "." + ИмяКолонки;
		
	Поле.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	Поле.Видимость = Истина;
	Поле.Заголовок = "№";
			
	Поле.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	Поле.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	
	Поле.АвтоВысотаЯчейки = Истина;
	Поле.Ширина = 3;
	Поле.АвтоМаксимальнаяШирина = Ложь;
	Поле.РастягиватьПоГоризонтали = Ложь;
	
	Поле.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	Поле.Подсказка = НСтр("ru = 'Номер строки.'");
		
	Поле.ТолькоПросмотр = Истина;
	
	// Остальные колонки формируем автоматически.
	Для Каждого СтрокаНастройки Из СтрокиНужныхНастроек Цикл
		
	    ИмяКолонки = СтрокаНастройки.КодПоказателя;
		
		// Спозиционируем ТаблицаВариантовЗаполнения.
		ПриведенныйКодПоказателя = ТипЗначенияИДТабличногоПоля.ПривестиЗначение(ИмяКолонки);
		СтрокаВариантовЗаполнения = ТаблицаВариантовЗаполнения.Найти(ПриведенныйКодПоказателя, "КодПоказателя");
				
		Поле = Форма.Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТаблицаФормы);
		
		Если ЭтоДинамическийСписок Тогда
		    Поле.Вид = ВидПоляФормы.ПолеНадписи; // редактировать в таблице все равно не получится
		Иначе	
		    Поле.Вид = ВидПоляФормы.ПолеВвода;
		КонецЕсли;		
		
		Поле.РастягиватьПоГоризонтали = СтрокаНастройки["Растягивать"];
		Поле.АвтоМаксимальнаяШирина = Ложь;
		
		Поле.ПутьКДанным = ТаблицаФормы.ПутьКДанным + "." + ИмяКолонки;
		
		//////////////////////////////////////////////////////////////////////
		// Фиксация колонок.
		ФиксироватьВТаблицеСлева = СтрокаНастройки["ФиксироватьВТаблицеСлева"];
		Если ФиксироватьВТаблицеСлева Тогда
		    Поле.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Иначе
			ФиксироватьВТаблицеСправа = СтрокаНастройки["ФиксироватьВТаблицеСправа"];
			Если ФиксироватьВТаблицеСправа Тогда
			    Поле.ФиксацияВТаблице = ФиксацияВТаблице.Право;
			КонецЕсли;	
		КонецЕсли;
				
		//////////////////////////////////////////////////////////////////////
		// Видимость колонки.
		Поле.Видимость = СтрокаНастройки["ВидимостьКолонки"]; 
		 
		//////////////////////////////////////////////////////////////////////
		// Шапка колонки.
		ТекстШапки = СокрЛП(СтрокаНастройки[КолонкаТекстШапки]);
		
		Пока СтрЧислоСтрок(ТекстШапки) <= МаксКолСтрокШапки - 1 Цикл
		    ТекстШапки = ТекстШапки + Символы.ПС;		
		КонецЦикла;
		
		Поле.Заголовок = НСтр("ru = '" + ТекстШапки + "'");
		
		Поле.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Поле.Подсказка = НСтр("ru = '" + СокрЛП(СтрокаНастройки["ПолноеНаименованиеКолонки"]) + "'");
		
		Поле.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
				  		
		//////////////////////////////////////////////////////////////////////
		// Ширина колонки.		
		Поле.Ширина = СтрокаНастройки.ШиринаКолонки;
		
		//////////////////////////////////////////////////////////////////////
		// Высота колонки.		
		Поле.АвтоВысотаЯчейки = Истина;
		
		//////////////////////////////////////////////////////////////////////
		// Цвет и доступность колонки.
		// Информацию по варианту заполнения берем из ТаблицаВариантовЗаполнения.
		// Для таблиц формы, в отличие от Табличного поля, решено строки не раскрашивать,
		// поэтому КодВариантаЗаполнения определяем только ради понимания - будет 
		// доступно для редактирования или нет.
		Если СтрокаВариантовЗаполнения = Неопределено Тогда
		    КодВариантаЗаполнения = 0;
		Иначе	
		    КодВариантаЗаполнения = СтрокаВариантовЗаполнения.ВариантЗаполнения;
		КонецЕсли;	
		
		//////////////////////////////////////////////////////////////////////
		// Определяем Доступность ячеек колонки для редактирования непосредственно в таблице.
		
		// Если мАвтоВыборКодов - Ложь то ВыборИзСписка включен, если Истина - отключен.
		ВыборИзСпискаИзНастроек = СтрокаНастройки["ВыборИзСписка"];
		
		ВыборИзСписка = ВыборИзСпискаИзНастроек и (НЕ Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов);
		ВызовФормЗаполнения     = СтрокаНастройки["ВызовФормЗаполнения"];
		// 4- авторасчет поля, 5 - недоступность поля.
		ПолеНедоступноПоЗаполнению = (КодВариантаЗаполнения = 4 или КодВариантаЗаполнения = 5);
		
		// Для источника данных в виде динамического списка редактирование всегда во внешней форме.		 
		ТолькоПросмотрПоля = ВыборИзСписка или ВызовФормЗаполнения
							или ПолеНедоступноПоЗаполнению или ЭтоДинамическийСписок;
							
		Если Поле.Вид = ВидПоляФормы.ПолеВвода Тогда
			
		    Поле.АвтоПереносСтрок = Истина;
			//////////////////////////////////////////////////////////////////////
			// Подсказка ввода.
			Поле.ПодсказкаВвода = НСтр("ru = '" + СокрЛП(СтрокаНастройки["ПолноеНаименованиеКолонки"]) + "'");
			
			Поле.РедактированиеТекста = НЕ ТолькоПросмотрПоля;		
			Поле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
			
			Поле.ТолькоПросмотр = НЕ Поле.РедактированиеТекста;
			
		КонецЕсли;
				
		//////////////////////////////////////////////////////////////////////
		// Подвал.
		Если Раздел <> "Лицензии" Тогда
			
			Поле.ТекстПодвала = СтрокаНастройки.ТекстПодвала;
					
			СчитатьИтогПоПолю 	 = СтрокаНастройки.СчитатьИтогиПоКолонке;
			
			Если СчитатьИтогПоПолю Тогда
			    
				Поле.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
				Поле.ОтображатьВПодвале = Истина;
				
			Иначе
				
				Если Не ЗначениеЗаполнено(Поле.ТекстПодвала) Тогда
				    Поле.ОтображатьВПодвале = Ложь;			
				КонецЕсли; 
			КонецЕсли;	
			
		КонецЕсли; 
				
		//////////////////////////////////////////////////////////////////////
		// Выравнивание.
		// Числа справа, все остальное слева.
		
		// Определяем тип поля.
		ТипЗначенияГрубо	= СтрокаНастройки.ТипДанныхРеквизита;
		КвалификаторТипа	= СокрЛП(СтрокаНастройки.КвалификаторТипа);
		
		ПозЗапятой = СтрНайти(КвалификаторТипа, ",");
		ДлинаТипа = 0;
		ТочностьТипа = 0;
		Если ПозЗапятой > 1 Тогда
		    ДлинаТипа 		= Число( СокрЛП( Лев(КвалификаторТипа, ПозЗапятой - 1) ) );
			ТочностьТипа 	= Число( СокрЛП( Сред(КвалификаторТипа, ПозЗапятой + 1) ) );
		Иначе
			ДлинаТипа 		= ?(ПустаяСтрока(КвалификаторТипа),  0, Число(КвалификаторТипа));
		КонецЕсли;
		
		Если ТипЗначенияГрубо = "Ч" Тогда
			
		    Поле.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
			Поле.Формат = "ЧЦ=" + ДлинаТипа + "; ЧДЦ=" + ТочностьТипа;
			Если Поле.Вид = ВидПоляФормы.ПолеВвода Тогда
				Поле.ФорматРедактирования = "ЧЦ=" + ДлинаТипа + "; ЧДЦ=" + ТочностьТипа;
			КонецЕсли;
			
			Если СчитатьИтогПоПолю = 1 Тогда
			
				// Формируем формат итогов.
				ДлинаТипаИтога = ДлинаТипа + 6;
				ФорматнаяСтрокаИтога = "ЧЦ=" + ДлинаТипаИтога + "; ЧДЦ=" + ТочностьТипа;
				ФорматИтогов.Добавить(ФорматнаяСтрокаИтога, ИмяКолонки);	
			
			КонецЕсли; 
			
		Иначе
			 
		    Поле.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
			
		КонецЕсли; 
						
	КонецЦикла;
	
		
	////////////////////////////////////////////////////////////////////
	// ОБРАБОТЧИКИ.
		
	ТаблицаФормы.УстановитьДействие("Выбор", 					"Подключаемый_ТаблицаФормыРазделаВыборНаКлиенте");		
	ТаблицаФормы.УстановитьДействие("ПередУдалением", 			"Подключаемый_ТаблицаФормыРазделаПередУдалениемНаКлиенте");	
	ТаблицаФормы.УстановитьДействие("ПередНачаломДобавления", 	"Подключаемый_ТаблицаФормыРазделаПередНачаломДобавления");	
	ТаблицаФормы.УстановитьДействие("ПриИзменении",				"Подключаемый_ТаблицаФормыРазделаПриИзмененииНаКлиенте");			
	ТаблицаФормы.УстановитьДействие("ПриАктивизацииСтроки",		"Подключаемый_ТаблицаФормыРазделаПриАктивизацииСтрокиНаКлиенте");
	
КонецПроцедуры

Процедура ИзменитьЗаписьРегистраСведенийАЛКО(Форма, ИдГруппы, ИндексСтраницы, ИндексСтроки, 
										ИмяПоля, НовоеЗначениеПоля, КоличествоСтрок)
			
	ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
														ИдГруппы, Форма.СтруктураРеквизитовФормы);									
	РегистрСведенийГруппы = РегистрыСведений[ИмяРегистра];
	
	НаборЗаписей = РегистрСведенийГруппы.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Документ.Установить(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ИндексСтраницыРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(Форма, ИдГруппы, ИндексСтраницы);
	
	НаборЗаписей.Отбор.ИндексСтраницы.Установить(ИндексСтраницыРегистра);
	
	НаборЗаписей.Отбор.ИндексСтроки.Установить(ИндексСтроки);
	
	// Запись будет только одна.
	НаборЗаписей.Прочитать();
	
	НайденнаяЗапись = НаборЗаписей[0];
	
	// Нужно записать первоначальные данные Записи регистра в журнал.
	// Но сделать это надо только для случая первого изменения Записи после последнего сохранения отчета,
	// чтобы была информация о данных до изменения в случае отката внесенных изменений, если
	// отказался пользователь от сохранения отчета.
	ЭтоПервоеРедактирование = Ложь;	
	ЭтоПервоеРедактирование = ЭтоПервоеРедактированиеЗаписиРегистра(
			Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, ИндексСтраницыРегистра, ИндексСтроки);
	
	Ресурсы = Новый Структура;													
	
	Если ЭтоПервоеРедактирование Тогда
		
		НачальноеЗначение = ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(НайденнаяЗапись, ИмяРегистра);
		
		// Будет занесено действие "Редактирование" в Журнал помимо переданного действия.
		Ресурсы.Вставить("НачальноеЗначение", НачальноеЗначение);
			
	КонецЕсли;
	
	НайденнаяЗапись[ИмяПоля] = НовоеЗначениеПоля;
		
	НаборЗаписей.Записать();
	
	// Пишем количество строк по странице,
	// будет занесено действие "Сервис" в Журнал помимо переданного действия.
	Ресурсы.Вставить("КоличествоСтрок", КоличествоСтрок);
	Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
		
	ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра,
							ИндексСтраницыРегистра, ИндексСтроки, "Редактирование", Ресурсы);
	
КонецПроцедуры

Функция ПолучитьСтруктуруРесурсовАЛКО(СтруктураРеквизитовФормы, СтруктураМногострочныхРазделов)

	СтруктураРесурсов = Новый Структура;
	
	Для каждого Элемент Из СтруктураМногострочныхРазделов Цикл
	
		ИдГруппы = Элемент.Ключ;
		СтруктураРесурсовПоГруппе = ПолучитьСтруктуруРесурсовПоГруппеАЛКО(ИдГруппы, СтруктураРеквизитовФормы);
	    СтруктураРесурсов.Вставить(ИдГруппы, СтруктураРесурсовПоГруппе);
		
	КонецЦикла; 
	
	Возврат  СтруктураРесурсов;
	
КонецФункции

Функция ПолучитьКлючЗаписиРегистраСведенийАлко(Форма, ИмяРегистраСведений, ИдГруппы, ИндексСтраницы, НомерСтроки)
	
	РегистрСведенийАЛКО = РегистрыСведений[ИмяРегистраСведений];
	
	Отбор = Новый Структура;
	
	ДокументСсылкаАлкоОтчет = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	Отбор.Вставить("Документ", ДокументСсылкаАлкоОтчет);
	
	ИндексСтраницыРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(Форма, ИдГруппы, ИндексСтраницы);
	
	Отбор.Вставить("ИндексСтраницы", ИндексСтраницыРегистра);	
	Отбор.Вставить("ИндексСтроки", НомерСтроки);
	
	ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);
	Отбор.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);
		
	КлючЗаписи = РегистрСведенийАЛКО.СоздатьКлючЗаписи(Отбор);
		
	Возврат КлючЗаписи;
	
КонецФункции

Функция СформироватьСтруктуруПоказателейИСтруктуруПараметровАЛКО(Форма)
				
	Орг = Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
		
	ПоказателиТитульный = Форма.СтруктураДанныхТитульный;
	
	НомерГода     = Формат(Форма.СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг");
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("НомерАлкоОтчета", Форма.НомерАлкоОтчета);
	ПараметрыВыгрузки.Вставить("НаимПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	
	КодКвартала = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКодКвартала(ПоказателиТитульный);
	ПараметрыВыгрузки.Вставить("ПризПериодОтч", КодКвартала);
	
	Вариант = Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	ЭтоПервичнаяОтчетность = (Вариант = 0);
	
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", НомерГода);
	
	ПараметрыВыгрузки.Вставить("Первичная",      ЭтоПервичнаяОтчетность);
	ПараметрыВыгрузки.Вставить("Корректирующая", НЕ ЭтоПервичнаяОтчетность);
	ПараметрыВыгрузки.Вставить("НомерКорр", Вариант);
	
	НазваниеОрганизации = СокрЛП(ПоказателиТитульный.ОргНазв);
	ИНН = СокрЛП(ПоказателиТитульный.ИНН1);
	Если Лев(ИНН, 2) = "00" Тогда
		ИНН = Сред (ИНН, 3); // Удаление нулей, добавленных в соответствии с порядком заполнения.
	КонецЕсли;
	КПП = СокрЛП(ПоказателиТитульный.КПП1);
	
	ТелефонОрганизации  = СокрЛП(ПоказателиТитульный.ТелОрганизации);
	ЭлектроннаяПочтаОрганизации = СокрЛП(ПоказателиТитульный.ЭлектроннаяПочта);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", Форма.ЭтоПБОЮЛ);
	ПараметрыВыгрузки.Вставить("НаимЮЛ",    НазваниеОрганизации);
	
	Если Форма.ЭтоПБОЮЛ Тогда
		ПараметрыВыгрузки.Вставить("ИННФЛ",     ИНН);
	Иначе
		ПараметрыВыгрузки.Вставить("ИННЮЛ",     ИНН);
		ПараметрыВыгрузки.Вставить("КППЮЛ",     КПП);
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ТелОрг",    ТелефонОрганизации);
	ПараметрыВыгрузки.Вставить("EmailОтпр", ЭлектроннаяПочтаОрганизации);
	
	СтруктураАдреса = Форма.ДополнительныеДанные.Титульный.АдресОрганизации;
	
	ПараметрыВыгрузки.Вставить("КодСтраны",  СтруктураАдреса.КодСтраны);
	
	Если СтруктураАдреса.Свойство("УникальныйНомерФИАС")
		и (СтрДлина(СтруктураАдреса.УникальныйНомерФИАС) = 36) Тогда
		
	    ПараметрыВыгрузки.Вставить("КодОбъект",  СтруктураАдреса.УникальныйНомерФИАС);
	
	КонецЕсли; 
	
	ПараметрыВыгрузки.Вставить("Индекс",     СтруктураАдреса.Индекс);
	ПараметрыВыгрузки.Вставить("КодРегион",  СтруктураАдреса.КодРегиона);
	ПараметрыВыгрузки.Вставить("Район",      СтруктураАдреса.Район);
	ПараметрыВыгрузки.Вставить("Город",      СтруктураАдреса.Город);
	ПараметрыВыгрузки.Вставить("НаселПункт", СтруктураАдреса.НаселенныйПункт);
	ПараметрыВыгрузки.Вставить("Улица",      СтруктураАдреса.Улица);
	ПараметрыВыгрузки.Вставить("Дом",        СтруктураАдреса.Дом);
	ПараметрыВыгрузки.Вставить("Корпус",     СтруктураАдреса.Корпус);
	ПараметрыВыгрузки.Вставить("Литера",     СтруктураАдреса.Литера);
	ПараметрыВыгрузки.Вставить("Кварт",      СтруктураАдреса.Квартира);
	
	Если Форма.ДополнительныеДанные.Титульный.Свойство("АдресМестаДеятельности") Тогда
	
		АдресМестаДеятельности = Форма.ДополнительныеДанные.Титульный.АдресМестаДеятельности;
		
		ПараметрыВыгрузки.Вставить("КодСтраныМестаОсуществления",  АдресМестаДеятельности.КодСтраны);
	
		Если АдресМестаДеятельности.Свойство("УникальныйНомерФИАС")
			и (СтрДлина(АдресМестаДеятельности.УникальныйНомерФИАС) = 36) Тогда
			
		    ПараметрыВыгрузки.Вставить("КодОбъектМестаОсуществления",  АдресМестаДеятельности.УникальныйНомерФИАС);
		
		КонецЕсли; 
		
		ПараметрыВыгрузки.Вставить("ИндексМестаОсуществления",     АдресМестаДеятельности.Индекс);
		ПараметрыВыгрузки.Вставить("КодРегионМестаОсуществления",  АдресМестаДеятельности.КодРегиона);
		ПараметрыВыгрузки.Вставить("РайонМестаОсуществления",      АдресМестаДеятельности.Район);
		ПараметрыВыгрузки.Вставить("ГородМестаОсуществления",      АдресМестаДеятельности.Город);
		ПараметрыВыгрузки.Вставить("НаселПунктМестаОсуществления", АдресМестаДеятельности.НаселенныйПункт);
		ПараметрыВыгрузки.Вставить("УлицаМестаОсуществления",      АдресМестаДеятельности.Улица);
		ПараметрыВыгрузки.Вставить("ДомМестаОсуществления",        АдресМестаДеятельности.Дом);
		ПараметрыВыгрузки.Вставить("КорпусМестаОсуществления",     АдресМестаДеятельности.Корпус);
		ПараметрыВыгрузки.Вставить("ЛитераМестаОсуществления",     АдресМестаДеятельности.Литера);
		ПараметрыВыгрузки.Вставить("КвартМестаОсуществления",      АдресМестаДеятельности.Квартира);
	    	
	КонецЕсли; 
	
	ФИОРуководителя = РегламентированнаяОтчетность.РазложитьФИО(ПоказателиТитульный.ОргДиректор);		
	ФИОГлавбуха = РегламентированнаяОтчетность.РазложитьФИО(ПоказателиТитульный.ОргБухгалтер);
		
    ПараметрыВыгрузки.Вставить("РуководительФамилия",  ФИОРуководителя.Фамилия);
	ПараметрыВыгрузки.Вставить("РуководительИмя",      ФИОРуководителя.Имя);
	ПараметрыВыгрузки.Вставить("РуководительОтчество", ФИОРуководителя.Отчество);
	
	ПараметрыВыгрузки.Вставить("ГлавбухФамилия",  ФИОГлавбуха.Фамилия);
	ПараметрыВыгрузки.Вставить("ГлавбухИмя",      ФИОГлавбуха.Имя);
	ПараметрыВыгрузки.Вставить("ГлавбухОтчество", ФИОГлавбуха.Отчество);	

	Если Форма.ЭтоПБОЮЛ Тогда
	
		Если Форма.СтруктураДанныхТитульный.Свойство("ЭтоЛичноеХозяйство") 
			и Форма.СтруктураДанныхТитульный.ЭтоЛичноеХозяйство Тогда
		    			
			ПараметрыВыгрузки.Вставить("ГражданинФамилия",  ФИОРуководителя.Фамилия);
			ПараметрыВыгрузки.Вставить("ГражданинИмя",      ФИОРуководителя.Имя);
			ПараметрыВыгрузки.Вставить("ГражданинОтчество", ФИОРуководителя.Отчество);
			
		КонецЕсли; 
	
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Документ");
	
	Форма.ФайлВыгрузкиИмя = СформироватьИдФайлАЛКО(ПараметрыВыгрузки);
	ПараметрыВыгрузки.Вставить("ИдФайл", Форма.ФайлВыгрузкиИмя);
	
	
	Возврат ПараметрыВыгрузки;
		
КонецФункции

Функция СформироватьИдФайлАЛКО(ПараметрыВыгрузки)
	
	Если ПараметрыВыгрузки.НомерАлкоОтчета = 11 Тогда
	    ПрефиксИмениФайлаВыгрузки = "R1";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 12 Тогда
	    ПрефиксИмениФайлаВыгрузки = "R2";	
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 13 Тогда
	    ПрефиксИмениФайлаВыгрузки = "V1";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 14 Тогда
	    ПрефиксИмениФайлаВыгрузки = "V2";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 15 Тогда
	    ПрефиксИмениФайлаВыгрузки = "V3";	
	КонецЕсли; 
		
	ИдентификаторОтправителя = ?(ПараметрыВыгрузки.Свойство("ИННФЛ"), ПараметрыВыгрузки.ИННФЛ, ПараметрыВыгрузки.ИННЮЛ);
	
	Если (ПараметрыВыгрузки.НомерАлкоОтчета = 13) 
		или (ПараметрыВыгрузки.НомерАлкоОтчета = 14)
		или (ПараметрыВыгрузки.НомерАлкоОтчета = 15) Тогда
	    ПериодДекларации = Формат(ПараметрыВыгрузки.ГодПериодОтч, "ДФ=гггг");
	Иначе
		// Не виноградные.
	    ПериодДекларации = "0" + ПараметрыВыгрузки.ПризПериодОтч + Прав(ПараметрыВыгрузки.ГодПериодОтч, 1);
	КонецЕсли; 
	
	ДеньФормированияДекларации = Формат(ТекущаяДатаСеанса(), "ДФ=ддММгггг");
	УникальныйИдентификаторФайла = Врег(Строка(Новый УникальныйИдентификатор));
	
	Возврат ПрефиксИмениФайлаВыгрузки
	        + "_" + ИдентификаторОтправителя
	        + "_" + ПериодДекларации
	        + "_" + ДеньФормированияДекларации
	        + "_" + УникальныйИдентификаторФайла;
	
КонецФункции
		
Процедура ОбработкаСтраницЛицензийПослеЗагрузкиАЛКО(Форма)

	// Процедура приводит структуру данных Раздела Лицензии в соответствие
	// с новым механизмом работы раздела Лицензии (обычные формы с таблицей формы) в случае,
	// если данные были загружены из старого варианта на базе Табличного документа.
	
	Если НЕ Форма.мСтруктураМногостраничныхРазделов.Свойство("Лицензии") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылкаАлкоОтчет = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	ИмяФормыОбъекта			= Форма.ИмяФормы;
	ИмяРаздела 				= "Лицензии";
	ИдГруппы				= РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(
											ИмяРаздела, Форма.СтруктураРеквизитовФормы);
	
	ИмяРегистраСведений		= РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
											ИдГруппы, Форма.СтруктураРеквизитовФормы);
											
	СервисРегистровГруппы   		= Форма["СервисРегистров" + ИдГруппы];
	СервисРегистровГруппыУдаленные 	= Форма["СервисРегистров" + ИдГруппы + "Удаленные"];
	
	ТабП0000000002ТЗ		= Новый ТаблицаЗначений;
	// Добавляем в таблицу значений все необходимые колонки.
	ОбработкаТаблицыПередЗаписьюВРегистр(ИмяРегистраСведений, ТабП0000000002ТЗ);
	
	ТаблицаУникальныхЛицензий = Новый ТаблицаЗначений;
	ТаблицаУникальныхЛицензий.Колонки.Добавить("ИдЛицензии");
	ТаблицаУникальныхЛицензий.Колонки.Добавить("ИндексСтраницы");
	
	УдаляемыеСтраницы = Новый СписокЗначений;

	// Загружаем из Данных в СервисРегистров для раздела Лицензий.
	БылиЗагруженыВДанныеСтрокиЛицензии = Ложь;
	
	ИндексСтраницы = -1;
	
	ТаблСтраницыЛицензии = Форма[Форма.мСтруктураМногостраничныхРазделов.Лицензии];
			
	Для Каждого Страница Из ТаблСтраницыЛицензии Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		ТабП0000000002ТЗ.Очистить();
	    
		// Надо убедится, что есть куда писать результат.						
		Пока СервисРегистровГруппы.Количество() - 1 < ИндексСтраницы Цикл
			
		    НоваяСтрокаСервисРегистров = СервисРегистровГруппы.Добавить();
			НоваяСтрокаСервисРегистров.КоличествоСтрок = 0;
			НоваяСтрокаСервисРегистров.КолвоСтрокПомНаУдаление = 0;
			
			Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;
		    НоваяСтрокаСервисРегистров.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
			
			Ресурсы = Новый Структура;
			Ресурсы.Вставить("МаксИндексСтраницы", 	Форма.МаксИндексСтраницы);
				
			ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистраСведений,
							Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);
			
		КонецЦикла;
		
		ДанныеСтраницы = Страница.Данные; // Это список значений.
		ДополнительныеДанныеСтраницы = Страница.ДополнительныеДанные; // Это список значений.
				
		Если ДанныеСтраницы.Количество()  > 0 Тогда
			
			СтруктураДанных = ДанныеСтраницы[0].Значение; // Должна быть структура.
			СтруктураДополнительныхДанных = ДополнительныеДанныеСтраницы[0].Значение; // Должна быть структура.
			
			ОбщаяСтрокаЛицензии = "Л"; // Непустая, чтобы строка не была пустой даже для незаполненной лицензии.
			НомерСтроки = 0;
			
			Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
			
				Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
				
					ПозицияПодчеркивания = СтрНайти(ЭлСтруктуры.Ключ, "_");
					
					// Пропускаем значения не относящиеся к ДопСтрокам.
					Если ПозицияПодчеркивания = 0 Тогда
					    Продолжить;					
					КонецЕсли;
					
					ИмяКолонки = Лев(ЭлСтруктуры.Ключ, ПозицияПодчеркивания - 1);
					НомерСтроки = Число(Сред(ЭлСтруктуры.Ключ, ПозицияПодчеркивания + 1));

				    Если ТабП0000000002ТЗ.Количество() < НомерСтроки Тогда					
						СтрокаТаблицы = ТабП0000000002ТЗ.Вставить(НомерСтроки - 1);
					Иначе
						СтрокаТаблицы = ТабП0000000002ТЗ.Получить(НомерСтроки - 1);					
					КонецЕсли; 
					
					СтрокаТаблицы[ИмяКолонки] =  ЭлСтруктуры.Значение;
					
					// Удалим из структуры данных загруженные значения
					// для предотвращения сохранения из данных.
					СтруктураДанных.Удалить(ЭлСтруктуры.Ключ);
					
				КонецЦикла;
								
				Если ТипЗнч(СтруктураДополнительныхДанных) = Тип("Структура") Тогда
					
					Для Каждого ЭлСтруктуры Из СтруктураДополнительныхДанных Цикл
						
						ПозицияАдресМестаДеятельности = СтрНайти(ЭлСтруктуры.Ключ, "АдресМестаДеятельности");
						
						Если ПозицияАдресМестаДеятельности = 1 Тогда
						
							НомерСтроки = Число(СтрЗаменить(ЭлСтруктуры.Ключ, "АдресМестаДеятельности", ""));
							
							Если ТабП0000000002ТЗ.Количество() < НомерСтроки Тогда					
								СтрокаТаблицы = ТабП0000000002ТЗ.Вставить(НомерСтроки - 1);
							Иначе
								СтрокаТаблицы = ТабП0000000002ТЗ.Получить(НомерСтроки - 1);					
							КонецЕсли;
							
							АдресСтруктура =  ЭлСтруктуры.Значение;
																		
							Попытка
							АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
											АдресСтруктура, , Перечисления.ТипыКонтактнойИнформации.Адрес);
							Исключение
							АдресXML = "";		
							КонецПопытки;
						
							Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресXML) Тогда
								
								СтрокаТаблицы.П0000000VNUTR = АдресXML;
								ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(АдресXML);
								СтрокаТаблицы.П0000000Адрес = ПредставлениеАдреса;
								
							Иначе
								
								АдресСтрVnutr = ЗначениеВСтрокуВнутр(АдресСтруктура);
								СтрокаТаблицы.П0000000VNUTR =  АдресСтрVnutr;
								
								Представление = "";
		
								РегламентированнаяОтчетностьАЛКОКлиентСервер.ДополнитьПредставлениеАдресаАЛКО(
									СокрЛП(РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("Индекс", АдресСтруктура)), "", Представление);
								РегламентированнаяОтчетностьАЛКОКлиентСервер.ДополнитьПредставлениеАдресаАЛКО(
									СокрЛП(РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("Регион", АдресСтруктура)), ", ", Представление);
								РегламентированнаяОтчетностьАЛКОКлиентСервер.ДополнитьПредставлениеАдресаАЛКО(
									СокрЛП(РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("Район", АдресСтруктура)),  ", ", Представление);
								РегламентированнаяОтчетностьАЛКОКлиентСервер.ДополнитьПредставлениеАдресаАЛКО(
									СокрЛП(РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("Город", АдресСтруктура)),  ", ", Представление);
								РегламентированнаяОтчетностьАЛКОКлиентСервер.ДополнитьПредставлениеАдресаАЛКО(
									СокрЛП(РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("НаселенныйПункт", АдресСтруктура)),
										", ", Представление);
								РегламентированнаяОтчетностьАЛКОКлиентСервер.ДополнитьПредставлениеАдресаАЛКО(
									СокрЛП(РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("Улица", АдресСтруктура)),
										", ", Представление);
								РегламентированнаяОтчетностьАЛКОКлиентСервер.ДополнитьПредставлениеАдресаАЛКО(
									СокрЛП(РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("Дом", АдресСтруктура)), 
									", " + РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ТипДома", АдресСтруктура)    
									+ " № ", Представление);
								РегламентированнаяОтчетностьАЛКОКлиентСервер.ДополнитьПредставлениеАдресаАЛКО(
									СокрЛП(РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("Корпус", АдресСтруктура)),
									", " + РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ТипКорпуса ", АдресСтруктура)
									+ " ",	Представление);
								РегламентированнаяОтчетностьАЛКОКлиентСервер.ДополнитьПредставлениеАдресаАЛКО(
									СокрЛП(РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("Квартира", АдресСтруктура)), 
									", " + РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ТипКвартиры", АдресСтруктура) 
									+ " ",	Представление);
								
								Если СтрДлина(Представление) > 2 и СтрНайти(Представление, ", ") = 1  Тогда
									Представление = Сред(Представление, 3);
								КонецЕсли;	
								
								СтрокаТаблицы.П0000000Адрес = Представление;

							КонецЕсли;
							
							// Удалим из структуры ДополнительныхДанных загруженные в СервисРегистров ДопСтрок значения
							// для предотвращения сохранения из ДополнительныхДанных.
							СтруктураДополнительныхДанных.Удалить(ЭлСтруктуры.Ключ);
						
						КонецЕсли; 
				
					КонецЦикла;
					
				КонецЕсли;
				
				// Вычислим общую строку - идентификатор лицензии, понадобится для предотвращения задваивания
				// страниц лицензий с одинаковой лицензией.
				// Используем то обстоятельство, что поля Лицензии, которые надо вывести из Данных, 
				// имеют реквизиты с П000000000101 по П000000000105.
								
				Для Инд = 1 По 5 Цикл
				
					ИмяРеквизита = "П00000000010" + Инд;
					
					ЗначениеРеквизита = Неопределено;
					СтруктураДанных.Свойство(ИмяРеквизита, ЗначениеРеквизита);
					
					ОбщаяСтрокаЛицензии = ОбщаяСтрокаЛицензии + СокрЛП(Строка(ЗначениеРеквизита));
					
				КонецЦикла;
				
			КонецЕсли;			
		
		КонецЕсли; 
		
		// Пробуем найти по лицензии наличие в ТаблицаСтраницыЛицензии в предыдущих страницах.
		ИндексНайденойСтраницы = -1;
		НайденнаяСтрока = ТаблицаУникальныхЛицензий.Найти(ОбщаяСтрокаЛицензии, "ИдЛицензии");
		
		Если НайденнаяСтрока = Неопределено Тогда
		    НоваяСтрока = ТаблицаУникальныхЛицензий.Добавить();
			НоваяСтрока.ИдЛицензии = ОбщаяСтрокаЛицензии;
			НоваяСтрока.ИндексСтраницы = ИндексСтраницы;
			ИндексНайденойСтраницы = ИндексСтраницы;
		Иначе
			ИндексНайденойСтраницы = НайденнаяСтрока.ИндексСтраницы;
			// Добавляем в удаляемые из ТаблицаСтраницыЛицензии страницы.
			УдаляемыеСтраницы.Добавить(ИндексСтраницы);
		КонецЕсли;
		
		
		// Загрузим в регистр.
		Если ТабП0000000002ТЗ.Количество() > 0 Тогда
			
			// Надо удалить пустые строки, если есть.			
			СписокУдаляемыхСтрок = Новый СписокЗначений;
			
			ИндексСтрокиТЗ = -1;
			
			Для каждого СтрокаТаблицы Из ТабП0000000002ТЗ Цикл
				
				ИндексСтрокиТЗ = ИндексСтрокиТЗ + 1;
				СтрокаЗаполнена = Ложь;
				
				Для каждого Колонка Из ТабП0000000002ТЗ.Колонки Цикл
				
					ИмяКолонки = Колонка.Имя;
					
					Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонки]) Тогда						
						СтрокаЗаполнена = Истина;
						Прервать;					
					КонецЕсли; 
				
				КонецЦикла;
				
				Если НЕ СтрокаЗаполнена Тогда				
					СписокУдаляемыхСтрок.Добавить(ИндексСтрокиТЗ);				
				КонецЕсли; 
			
			КонецЦикла; 
			
			Если СписокУдаляемыхСтрок.Количество() > 0 Тогда
				
				// Удалять будем в порядке убывания индекса, чтобы не сбивалась индексация строк таблиц.
				СписокУдаляемыхСтрок.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
				
				Для Каждого Элемент Из СписокУдаляемыхСтрок Цикл
					
					УдаляемыйИндекс = Элемент.Значение;			
					ТабП0000000002ТЗ.Удалить(УдаляемыйИндекс);
					
				КонецЦикла;
			
			КонецЕсли; 
						
			// Если есть что загружать - загрузим.
			Если ТабП0000000002ТЗ.Количество() > 0 Тогда
			
				КоличествоТекСтрокНаСтранице = СервисРегистровГруппы[ИндексНайденойСтраницы].КоличествоСтрок;
				ИндексСтраницыРегистра = СервисРегистровГруппы[ИндексНайденойСтраницы].ИндексСтраницыРегистра;
				
				ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, ИмяРегистраСведений, 
													ИндексСтраницыРегистра, ТабП0000000002ТЗ, КоличествоТекСтрокНаСтранице);
			    
				// Обновим количество строк.									
				СервисРегистровГруппы[ИндексНайденойСтраницы].КоличествоСтрок = КоличествоТекСтрокНаСтранице;
				
				// Зафиксируем в Журнале добавление страницы.
				Ресурсы = Новый Структура;
				Ресурсы.Вставить("МаксИндексСтраницы", 	Форма.МаксИндексСтраницы);
				Ресурсы.Вставить("КоличествоСтрок", 	КоличествоТекСтрокНаСтранице);
				
				ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистраСведений,
							ИндексСтраницыРегистра, 0, "ДобавлениеСтраницы", Ресурсы);
							
			КонецЕсли; 
						
				
		КонецЕсли; 
					
		ТабП0000000002ТЗ.Очистить();			
		
	КонецЦикла;
	
	// Теперь надо удалить строки ТаблицаСтраницыЛицензии и СервисРегистровГруппы,
	// по которым было задваивание лицензии.
	Если УдаляемыеСтраницы.Количество() > 0 Тогда
		
		// Удалять будем в порядке убывания индекса, чтобы не сбивалась индексация строк таблиц.
		УдаляемыеСтраницы.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		Для Каждого Элемент Из УдаляемыеСтраницы Цикл
		
			УдаляемыйИндекс = Элемент.Значение;
			
			ТаблСтраницыЛицензии.Удалить(УдаляемыйИндекс);
			
			ИндексСтраницыРегистра = СервисРегистровГруппы[УдаляемыйИндекс].ИндексСтраницыРегистра;
			
			Ресурсы = Новый Структура;
			Ресурсы.Вставить("МаксИндексСтраницы", 	Форма.МаксИндексСтраницы);
			
			ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистраСведений,
							ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
						
			СтрокаТЗУдаленные = СервисРегистровГруппыУдаленные.Добавить();
			СтрокаТЗУдаленные.КоличествоСтрок			= СервисРегистровГруппы[УдаляемыйИндекс].КоличествоСтрок;
			СтрокаТЗУдаленные.ИндексСтраницыРегистра	= СервисРегистровГруппы[УдаляемыйИндекс].ИндексСтраницыРегистра;
			
			СервисРегистровГруппы.Удалить(УдаляемыйИндекс);
			
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВосстановитьСведенияОЛицензияхИзЛистаЛицензииСтарогоОбразцаАЛКО(Форма)
	
	Для Каждого ЭлементТабл Из Форма[Форма.мСтруктураМногостраничныхРазделов.Лицензии] Цикл
		
		ЭлементТабл.АктивнаяСтраница = Ложь;
		
		ПоказателиТаблПоле = ЭлементТабл.Данные[0].Значение;
		
		СтруктураДанныхЛицензии = ЭлементТабл.Данные[0].Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			
			ИмяПоказателя = Показатель.Ключ;
			
			Для Инд = 1 По 6 Цикл
			
				Если ИмяПоказателя = "П000000000201_1_" + Инд Тогда
					СтруктураДанныхЛицензии.Вставить("П000000000201_" + Инд);
					Для Ном = 1 По 9 Цикл
						СтруктураДанныхЛицензии["П000000000201_" + Инд] = СокрЛП(СтруктураДанныхЛицензии["П000000000201_" + Инд]) + ПоказателиТаблПоле["П000000000201_" + Ном + "_" + Инд];
						СтруктураДанныхЛицензии.Удалить("П000000000201_" + Ном + "_" + Инд);
					КонецЦикла;
					
				ИначеЕсли ИмяПоказателя = "П000000000202_1_" + Инд Тогда
					СтруктураДанныхЛицензии.Вставить("П000000000202_" + Инд);
					Для Ном = 1 По 6 Цикл
						СтруктураДанныхЛицензии["П000000000202_" + Инд] = СокрЛП(СтруктураДанныхЛицензии["П000000000202_" + Инд]) + ПоказателиТаблПоле["П000000000202_" + Ном + "_" + Инд];
						СтруктураДанныхЛицензии.Удалить("П000000000202_" + Ном + "_" + Инд);
					КонецЦикла;
					
     			ИначеЕсли ИмяПоказателя = "П000000000203_1_" + Инд Тогда
					СтруктураДанныхЛицензии.Вставить("П000000000203_" + Инд);
					Для Ном = 1 По 2 Цикл
						СтруктураДанныхЛицензии["П000000000203_" + Инд] = СокрЛП(СтруктураДанныхЛицензии["П000000000203_" + Инд]) + ПоказателиТаблПоле["П000000000203_" + Ном + "_" + Инд];
						СтруктураДанныхЛицензии.Удалить("П000000000203_" + Ном + "_" + Инд);
					КонецЦикла;	
		
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиТаблицуФормыРазделаАЛКО(Форма, ИдГруппы, НомерСтраницы)

	Если ИдГруппы = Неопределено Тогда
	    Возврат;
	КонецЕсли; 
		
	ИмяИсточникаДанныхТаблицы = "ДинСписок" + ИдГруппы;
	СоздатьТаблицуФормыРазделаБезПодвалаАЛКО(Форма, ИдГруппы, НомерСтраницы, ИмяИсточникаДанныхТаблицы);
		
	// Выводим ИТОГИ в подвале.
	ВывестиИтогиТаблицыФормыРазделаАЛКО(Форма, ИдГруппы);
				
КонецПроцедуры

Процедура ЗаполнитьОтчетныйПериодСГодомАЛКО(Форма)
	
	Форма.ОтчетныйПериодСГодом = "";
		
	РегламентированнаяОтчетностьАЛКОКлиентСервер.ПоказатьПериодАЛКО(
			Форма.СтруктураРеквизитовФормы, Форма.СтруктураДанныхТитульный, Истина);
			
	// В алкодекларациях либо квартальная, либо годовая отчетность в виноградных.
	ЭтоВиноградная = НЕ (Форма.Элементы.Найти("ГруппаВиноградныхДанных") = Неопределено); 
	Если ЭтоВиноградная Тогда
		Форма.ОтчетныйПериодСГодом = Форма.СтруктураДанныхТитульный.ОтчетныйГод + " год";
	Иначе
		Для Инд = 1 По 4 Цикл
			
			ТекОтчетныйПериод = Неопределено;
		    Если Форма.СтруктураДанныхТитульный.Свойство("ОтчетныйПериод" + Инд + "Кв", ТекОтчетныйПериод)  Тогда
			    Если ТекОтчетныйПериод = "V" Тогда
					
					Форма.ОтчетныйПериодСГодом = Строка(Инд) + " квартал " + Форма.СтруктураДанныхТитульный.ОтчетныйГод + " года";
				    Прервать;
					
				КонецЕсли;		
			КонецЕсли;	
		
		КонецЦикла;	 		
	КонецЕсли; 
		
КонецПроцедуры

Процедура ОбновитьЦветаСсылокТитульногоАЛКО(Форма)
	
	Форма.Элементы.ИНН.ЦветТекста = ОбновитьЦветСсылкиАЛКО(
			Форма.ОрганизацияИНН, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);
	
																
	Форма.Элементы.КПП.ЦветТекста = ОбновитьЦветСсылкиАЛКО(
			Форма.ОрганизацияКПП, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);
	
																
	Форма.Элементы.ПолныйАдресТелефон.ЦветТекста = ОбновитьЦветСсылкиАЛКО(
			Форма.ОрганизацияПолныйАдресТелефон, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);
	
																
	Форма.Элементы.Руководитель.ЦветТекста = ОбновитьЦветСсылкиАЛКО(
			Форма.ОрганизацияРуководитель, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);
	
																
	Форма.Элементы.ГлавныйБухгалтер.ЦветТекста = ОбновитьЦветСсылкиАЛКО(
			Форма.ОрганизацияГлавБух, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);
			
	Если НЕ Форма.Элементы.Найти("МестоОсуществленияДеятельности") = Неопределено Тогда
		
		Форма.Элементы.МестоОсуществленияДеятельности.ЦветТекста = ОбновитьЦветСсылкиАЛКО(
			Форма.ОрганизацияМестоОсуществленияДеятельности, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);

	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьПоляАдресаОрганизацииАЛКО(Форма, Адрес)
	
	Форма.СтруктураДанныхТитульный.Вставить("ПочтовыйИндекс", Адрес.Индекс);
	
	Форма.СтруктураДанныхТитульный.Вставить("КодРегиона", Адрес.КодРегиона);      
	Форма.СтруктураДанныхТитульный.Вставить("АдресРайон", Адрес.Район);
	Форма.СтруктураДанныхТитульный.Вставить("АдресГород", ?(ПустаяСтрока(Адрес.Город), 
													Адрес.НаселенныйПункт, 
													Адрес.Город + ?(ПустаяСтрока(Адрес.НаселенныйПункт), 
																	"", " / " + Адрес.НаселенныйПункт)));
	Форма.СтруктураДанныхТитульный.Вставить("АдресУлица", Адрес.Улица);
	
	СтрокаДома = Адрес.Дом;
	СтрокаДома = СтрокаДома + ?(ПустаяСтрока(Адрес.Корпус), "", ", " + Адрес.Корпус);
	СтрокаДома = СтрокаДома + ?(ПустаяСтрока(Адрес.Квартира), "", ", " + Адрес.Квартира);
	Форма.СтруктураДанныхТитульный.Вставить("АдресДом", СтрокаДома);
		
КонецПроцедуры

Процедура ПослеДобавленияДопСтрМногострочногоРазделаАЛКО(Форма, ИмяТекущейСтраницыПанели)
	
	ТекущийИдентификатор = Форма.Элементы.РазделыОтчета.ТекущаяСтрока;
	ТекущийЭлементРазделыОтчета = Форма.РазделыОтчета.НайтиПоИдентификатору(ТекущийИдентификатор);
	
	Родитель = ТекущийЭлементРазделыОтчета.ПолучитьРодителя();

	Если НЕ Родитель = Неопределено Тогда
		ТекущийЭлементРазделыОтчета = Родитель;
	КонецЕсли;
    	
	НомерДобавляемойСтраницы = ТекущийЭлементРазделыОтчета.ПолучитьЭлементы().Количество() + 1;
    	
	ДобавляемаяСтраница = ТекущийЭлементРазделыОтчета.ПолучитьЭлементы().Добавить();
	ДобавляемаяСтраница.КолонкаРазделыОтчета              = "Стр. " + НомерДобавляемойСтраницы;
	ДобавляемаяСтраница.КолонкаРазделыОтчетаСокрНаим      = ТекущийЭлементРазделыОтчета.КолонкаРазделыОтчетаСокрНаим;
	ДобавляемаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомерДобавляемойСтраницы;
	ДобавляемаяСтраница.ИндексКартинки                    = 1;
	ДобавляемаяСтраница.РазделМногостраничный             = ТекущийЭлементРазделыОтчета.РазделМногостраничный;
	ДобавляемаяСтраница.РазделМногострочный               = ТекущийЭлементРазделыОтчета.РазделМногострочный;
		
	Форма.Элементы.РазделыОтчета.ТекущаяСтрока = ДобавляемаяСтраница.ПолучитьИдентификатор();
			
КонецПроцедуры

Процедура УдалитьТаблицыФормыАЛКО(Форма, ИдГруппы = "")
	
	Если ИдГруппы = "" Тогда
		
		// Удаляем все таблицы формы.
		Для каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
			
			ИдГруппы = ЭлементСтруктуры.Ключ;
			
		    ТаблицаФормы = Форма.Элементы.Найти("ТаблицаФормыРаздела" + ИдГруппы);
			
			Если ТаблицаФормы <> Неопределено Тогда		    
				Форма.Элементы.Удалить(ТаблицаФормы);	
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// Удаляем только конкретную таблицу формы.
		ТаблицаФормы = Форма.Элементы.Найти("ТаблицаФормыРаздела" + ИдГруппы);
		Если ТаблицаФормы <> Неопределено Тогда		    
			Форма.Элементы.Удалить(ТаблицаФормы);	
		КонецЕсли;
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура ИнициализироватьСпискиАЛКО(Форма, ИмяИсточникаДанныхТаблицы, ИдГруппы, ИндексСтраницы)
	
	// Пропишем отборы в динамических списках.
	ДинСписок = Форма[ИмяИсточникаДанныхТаблицы];
	ИндексСтраницыРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(Форма, ИдГруппы, ИндексСтраницы);
	
	ДинСписок.Параметры.УстановитьЗначениеПараметра("Документ", Форма.СтруктураРеквизитовФормы.мСохраненныйДок);	
	ДинСписок.Параметры.УстановитьЗначениеПараметра("ИндексСтраницы", ИндексСтраницыРегистра);
	ДинСписок.Параметры.УстановитьЗначениеПараметра("ПустаяКартинкаСтрок", "");
		
КонецПроцедуры	

Процедура ИнициализироватьБуферИтоговГруппыАЛКО(Форма, ИдГруппы)
	
	БуферИтогов = Форма["БуферИтогов" + ИдГруппы];
	БуферИтогов.Очистить();
	
	// Отберем нужные настройки.	
	ТаблицаНастроекТабличныхПолей = Форма.мТаблицаНастроекТабличныхПолей.Выгрузить();	
	ТипЗначенияИДТабличногоПоля = ТаблицаНастроекТабличныхПолей.Колонки["ИДТабличногоПоля"].ТипЗначения;
	ПриведенныйИДТабличногоПоля = ТипЗначенияИДТабличногоПоля.ПривестиЗначение(ИдГруппы);
	Отбор = Новый Структура("ИДТабличногоПоля", ПриведенныйИДТабличногоПоля);
	
	СтрокиНужныхНастроек = ТаблицаНастроекТабличныхПолей.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаНастройки Из СтрокиНужныхНастроек Цикл
		
	    ИмяКолонки 			= СтрокаНастройки.КодПоказателя;
		СчитатьИтогПоПолю 	= СтрокаНастройки.СчитатьИтогиПоКолонке;
			
		Если СчитатьИтогПоПолю Тогда
			// Формируем буфер итогов.
			БуферИтогов.Добавить(0, ИмяКолонки);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьСервисРегистровКакТаблицуЗначений(Форма, ИдГруппы, Удаленные = Ложь)
	
	Результат = ДанныеФормыВЗначение( Форма["СервисРегистров" + ИдГруппы + ?(Удаленные, "Удаленные", "")], 
									Тип("ТаблицаЗначений") );
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруРесурсовПоГруппеАЛКО(ИдГруппы, СтруктураРеквизитовФормы)

	ИмяРегистраСведений		= РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(
														ИдГруппы, СтруктураРеквизитовФормы);
	СтруктураРесурсовПоГруппе = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистраСведений);
	
	Возврат СтруктураРесурсовПоГруппе;
	
КонецФункции

Функция ВесаЮЛ()
	
	ВесаЮЛ = Новый Массив(10);
	ВесаЮЛ[0] = Неопределено;
	ВесаЮЛ[1] = 2;
	ВесаЮЛ[2] = 4;
	ВесаЮЛ[3] = 10;
	ВесаЮЛ[4] = 3;
	ВесаЮЛ[5] = 5;
	ВесаЮЛ[6] = 9;
	ВесаЮЛ[7] = 4;
	ВесаЮЛ[8] = 6;
	ВесаЮЛ[9] = 8;
	
	Возврат ВесаЮЛ;
	
КонецФункции

Функция ВесаФЛ11()
	
	ВесаФЛ11 = Новый Массив(12);
	ВесаФЛ11[0] = Неопределено;
	ВесаФЛ11[1] = 7;
	ВесаФЛ11[2] = 2;
	ВесаФЛ11[3] = 4;
	ВесаФЛ11[4] = 10;
	ВесаФЛ11[5] = 3;
	ВесаФЛ11[6] = 5;
	ВесаФЛ11[7] = 9;
	ВесаФЛ11[8] = 4;
	ВесаФЛ11[9] = 6;
	ВесаФЛ11[10] = 8;
	ВесаФЛ11[11] = 0;
	
	Возврат ВесаФЛ11;
	
КонецФункции

Функция ВесаФЛ12()
	
	ВесаФЛ12 = Новый Массив(12);
	ВесаФЛ12[0] = Неопределено;
	ВесаФЛ12[1] = 3;
	ВесаФЛ12[2] = 7;
	ВесаФЛ12[3] = 2;
	ВесаФЛ12[4] = 4;
	ВесаФЛ12[5] = 10;
	ВесаФЛ12[6] = 3;
	ВесаФЛ12[7] = 5;
	ВесаФЛ12[8] = 9;
	ВесаФЛ12[9] = 4;
	ВесаФЛ12[10] = 6;
	ВесаФЛ12[11] = 8;
	
	Возврат ВесаФЛ12;
	
КонецФункции

Функция ПолучитьДопустимуюСтроку(Стр)

	Результат = Строка(Стр);
	
	Результат = Врег(Результат);
	Результат = СокрЛП(Результат);
	Результат = СтрЗаменить(Результат, ",", "");
	Результат = СтрЗаменить(Результат, ".", "");
	Результат = СтрЗаменить(Результат, """", "");
	Результат = СтрЗаменить(Результат, "'", "");
	Результат = СтрЗаменить(Результат, "«", "");
	Результат = СтрЗаменить(Результат, "»", "");
	
	// Убираем пробелы так чтобы из нескольких подряд остался только один.
	ВспомСтрока = Результат;
	ПозПробела = СтрНайти(ВспомСтрока, " ");
	Результат = "";
	Пока ПозПробела > 0 Цикл
		
		// Копируем вместе с пробелом.
		Результат = Результат + Лев(ВспомСтрока, ПозПробела);
		// Поскольку до этого удаляли пробелы вначале и в конце,
		// пробел не может быть в конце строки.
		ВспомСтрока = Сред(ВспомСтрока, ПозПробела + 1);
		// Ищем следующий символ НЕ пробел.		
		Инд = 1;
		Пока Сред(ВспомСтрока, Инд, 1) = " " Цикл
			Инд = Инд + 1;
		КонецЦикла;
		ВспомСтрока = Сред(ВспомСтрока, Инд);
		
		ПозПробела = СтрНайти(ВспомСтрока, " ");
	
	КонецЦикла;
	Результат = Результат + ВспомСтрока;
		
	Возврат Результат;

КонецФункции

Функция ПолучитьИдОрганизации(Наименование = Неопределено, ИНН = Неопределено, КПП = Неопределено, 
							ПредставлениеАдреса = Неопределено)

							
	ПреобразованнаяСтрокаНаименование = Наименование;
	ПреобразованнаяСтрокаНаименование = ?(ПреобразованнаяСтрокаНаименование = Неопределено, "", 
																ПреобразованнаяСтрокаНаименование);	
	ПреобразованнаяСтрокаНаименование = ПолучитьДопустимуюСтроку(ПреобразованнаяСтрокаНаименование);
		
	ПреобразованнаяСтрокаАдреса = ПредставлениеАдреса;
	ПреобразованнаяСтрокаАдреса = ?(ПреобразованнаяСтрокаАдреса = Неопределено, "", ПреобразованнаяСтрокаАдреса);
	ПреобразованнаяСтрокаАдреса = ПолучитьДопустимуюСтроку(ПреобразованнаяСтрокаАдреса);
		
	ПреобразованнаяСтрокаИНН = ИНН;
	ПреобразованнаяСтрокаИНН = ?(ПреобразованнаяСтрокаИНН = Неопределено, "", ПреобразованнаяСтрокаИНН);
	ПреобразованнаяСтрокаКПП = КПП;
	ПреобразованнаяСтрокаКПП = ?(ПреобразованнаяСтрокаКПП = Неопределено, "", ПреобразованнаяСтрокаКПП); 
	
	Результат = ПреобразованнаяСтрокаИНН + "_" + ПреобразованнаяСтрокаКПП + "_" 
				+ ПреобразованнаяСтрокаАдреса + "_" + ПреобразованнаяСтрокаНаименование;
		
	Возврат Результат;

КонецФункции

Функция ПолучитьХешИдОрганизации(Наименование = Неопределено, ИНН = Неопределено, КПП = Неопределено, 
							ПредставлениеАдреса = Неопределено)
							
	ИдОрганизации = ПолучитьИдОрганизации(Наименование, ИНН, КПП, ПредставлениеАдреса);
	Возврат ПолучитьХешSHA256(ИдОрганизации);

КонецФункции

Функция ПолучитьИдЛицензии(ХешИдПоставщика = Неопределено, Номер = Неопределено, Серия = Неопределено, 
							ДатаВыдачи = Неопределено, ДатаОкончания = Неопределено, КемВыдана = Неопределено)

	ПреобразованнаяСтрокаХешИдПоставщика = ХешИдПоставщика;
	ПреобразованнаяСтрокаХешИдПоставщика = ?(ПреобразованнаяСтрокаХешИдПоставщика = Неопределено, "", 
											ПреобразованнаяСтрокаХешИдПоставщика);
	ПреобразованнаяСтрокаНомер = Номер;
	ПреобразованнаяСтрокаНомер = ?(ПреобразованнаяСтрокаНомер = Неопределено, "", ПреобразованнаяСтрокаНомер);
	ПреобразованнаяСтрокаСерия = Серия;
	ПреобразованнаяСтрокаСерия = ?(ПреобразованнаяСтрокаСерия = Неопределено, "", ПреобразованнаяСтрокаСерия);
	ПреобразованнаяСтрокаСерияНомер = ПреобразованнаяСтрокаНомер + ПреобразованнаяСтрокаСерия;
	
	ПреобразованнаяСтрокаДатаВыдачи = ?(ДатаВыдачи = Неопределено, "", Строка(ДатаВыдачи));
	ПреобразованнаяСтрокаДатаОкончания = ?(ДатаОкончания = Неопределено, "", Строка(ДатаОкончания));
	
	ПреобразованнаяСтрокаКемВыдана = КемВыдана;
	ПреобразованнаяСтрокаКемВыдана = ?(ПреобразованнаяСтрокаКемВыдана = Неопределено, "", 
																ПреобразованнаяСтрокаКемВыдана);	
	ПреобразованнаяСтрокаКемВыдана = ПолучитьДопустимуюСтроку(ПреобразованнаяСтрокаКемВыдана);
	

	Результат = ПреобразованнаяСтрокаХешИдПоставщика + "_" + ПреобразованнаяСтрокаСерияНомер 
				+ "_" + ПреобразованнаяСтрокаДатаВыдачи + "_" + ПреобразованнаяСтрокаДатаОкончания
				+ "_" + ПреобразованнаяСтрокаКемВыдана;
				
	Возврат  Результат;
	
КонецФункции

Функция ПолучитьХешИдЛицензии(ХешИдПоставщика = Неопределено, Номер = Неопределено, Серия = Неопределено, 
			ДатаВыдачи = Неопределено, ДатаОкончания = Неопределено, КемВыдана = Неопределено)
							
	ИдЛицензии = ПолучитьИдЛицензии(ХешИдПоставщика, Номер, Серия, ДатаВыдачи, ДатаОкончания, КемВыдана);
	Возврат ПолучитьХешSHA256(ИдЛицензии);
	
КонецФункции

Функция ПолучитьСоответствиеДействийЖуранала(КлючЭтоСтрока = Истина)

	// Заполнение измерения "Действие"
	// для индекса строки 0:
	// 10 - удаление страницы,
	// 11 - добавление страницы,
	// 15 - сервис (внесение сервисных данных по ресурсам),
	// 16 - автозаполнение.
	 
	// Для других индексов строк, 
	// 1 - удаление строки,
	// 2 - отмена удаления,
	// 3 - при добавлении строки, 
	// 4 - при редактировании (изменении).
	
	СоответствиеДействий = Новый Соответствие;
	
	Если КлючЭтоСтрока Тогда
	
		СоответствиеДействий.Вставить("ДобавлениеСтроки", 	3);
		СоответствиеДействий.Вставить("Редактирование", 	4);

		СоответствиеДействий.Вставить("УдалениеСтраницы", 	10);
		СоответствиеДействий.Вставить("ДобавлениеСтраницы", 11);
		СоответствиеДействий.Вставить("Сервис", 			15);
		СоответствиеДействий.Вставить("Автозаполнение", 	16);	
		
	Иначе
		
		СоответствиеДействий.Вставить(3, "ДобавлениеСтроки");
		СоответствиеДействий.Вставить(4, "Редактирование");

		СоответствиеДействий.Вставить(10, "УдалениеСтраницы");
		СоответствиеДействий.Вставить(11, "ДобавлениеСтраницы");
		СоответствиеДействий.Вставить(15, "Сервис");
		СоответствиеДействий.Вставить(16, "Автозаполнение");
		
	КонецЕсли; 
	

	Возврат СоответствиеДействий;

КонецФункции 
		
Функция ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра = Неопределено, ИндексСтраницыРегистра = Неопределено, 
								ИндексСтроки = Неопределено, Действие = Неопределено)

	РегистрЖурнала = РегистрыСведений.СведенияРеглОтчетАлкоЖурнал;
	
	НаборЗаписей 		= РегистрЖурнала.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчет);
	
	Если НЕ ИмяРегистра = Неопределено Тогда
	    НаборЗаписей.Отбор.ИмяРегистра.Установить(ИмяРегистра);	
	КонецЕсли;
	
	Если НЕ ИндексСтраницыРегистра = Неопределено Тогда
		// Поскольку измерение не может быть пустым - нулевые значения заменяем на -1.								
		ЧислоИндексСтраницыРегистра = ?(Число(ИндексСтраницыРегистра) = 0, -1, Число(ИндексСтраницыРегистра));
	    НаборЗаписей.Отбор.ИндексСтраницыРегистра.Установить(ЧислоИндексСтраницыРегистра);	
	КонецЕсли;
			
	СоответствиеДействий = ПолучитьСоответствиеДействийЖуранала();
		
	Если НЕ Действие = Неопределено Тогда
		
		Если ТипЗнч(Действие) = Тип("Число") Тогда
			
	    	ДействиеЧисло = Действие;
			
		ИначеЕсли ТипЗнч(Действие) = Тип("Строка") Тогда
			
			ДействиеЧисло = СоответствиеДействий.Получить(Действие);			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ДействиеЧисло = Неопределено Тогда
		
		ОбратноеСоответствиеДействий = ПолучитьСоответствиеДействийЖуранала(Ложь);
		Если ОбратноеСоответствиеДействий.Получить(ДействиеЧисло) = Неопределено Тогда
			
			Возврат Ложь;			
		
		КонецЕсли; 
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	НаборЗаписей.Отбор.Действие.Установить(ДействиеЧисло);
	
	ЧислоИндексСтроки = Неопределено;
	Если ДействиеЧисло >= 10 Тогда
		ЧислоИндексСтроки = -1;		
	КонецЕсли;
	
	Если ЧислоИндексСтроки = Неопределено Тогда
		Если НЕ ИндексСтроки = Неопределено Тогда
			// Поскольку измерение не может быть пустым - нулевые значения заменяем на -1.								
			ЧислоИндексСтроки = ?(Число(ИндексСтроки) = 0, -1, Число(ИндексСтроки));		    		
		КонецЕсли; 	    	
	КонецЕсли;
	
	Если НЕ ЧислоИндексСтроки = Неопределено Тогда
		НаборЗаписей.Отбор.ИндексСтроки.Установить(ЧислоИндексСтроки);
	КонецЕсли;
	
	НаборЗаписей.Прочитать();
	
	Возврат НаборЗаписей;

КонецФункции

Функция ПолучитьМаксИндексСтраницыПоЖурналу(ДокументСсылкаАлкоОтчет)

	СоответствиеДействий = ПолучитьСоответствиеДействийЖуранала();
	
	НаборЗаписей = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, "ОбщиеСведения", 0, 
								0, СоответствиеДействий.Получить("Сервис"));
								
	МаксИндексСтраницыПоЖурналу = 0;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
	    // Запись в наборе может быть только одна.
		МаксИндексСтраницыПоЖурналу = НаборЗаписей[0].МаксИндексСтраницы;
		
	    Если МаксИндексСтраницыПоЖурналу = Неопределено Тогда
		    МаксИндексСтраницыПоЖурналу = 0;		
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат МаксИндексСтраницыПоЖурналу;

КонецФункции

Функция ПолучитьКоличествоСтрокСтраницыПоЖурналу(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексСтраницыРегистра)

	СоответствиеДействий = ПолучитьСоответствиеДействийЖуранала();
	
	НаборЗаписей = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексСтраницыРегистра, 
								0, СоответствиеДействий.Получить("Сервис"));
								
	КоличествоСтрокСтраницыПоЖурналу = 0;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
	    // Запись в наборе может быть только одна.
		КоличествоСтрокСтраницыПоЖурналу = НаборЗаписей[0].КоличествоСтрок;
		
	    Если КоличествоСтрокСтраницыПоЖурналу = Неопределено Тогда
		    КоличествоСтрокСтраницыПоЖурналу = 0;		
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат КоличествоСтрокСтраницыПоЖурналу;

КонецФункции

Функция ЖурналНеПуст(ДокументСсылкаАлкоОтчет) Экспорт
	
	РегистрЖурнала = РегистрыСведений.СведенияРеглОтчетАлкоЖурнал;
	
	ОтборПоДокументу = Новый Структура("Документ");
	ОтборПоДокументу.Документ = ДокументСсылкаАлкоОтчет;	
		
	ВыборкаЖурнал 		  = РегистрЖурнала.Выбрать(ОтборПоДокументу);
	
	Возврат ВыборкаЖурнал.Следующий();
	
КонецФункции

Процедура ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра = Неопределено, 
								ИндексСтраницыРегистра = Неопределено, 
								ИндексСтроки = Неопределено, Действие = Неопределено)
	
	РегистрЖурнала = РегистрыСведений.СведенияРеглОтчетАлкоЖурнал;
	
	НаборЗаписей 		= РегистрЖурнала.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчет);
	
	Если НЕ ИмяРегистра = Неопределено Тогда
	    НаборЗаписей.Отбор.ИмяРегистра.Установить(ИмяРегистра);	
	КонецЕсли;
	
	Если НЕ ИндексСтраницыРегистра = Неопределено Тогда
		// Поскольку измерение не может быть пустым - нулевые значения заменяем на -1.								
		ЧислоИндексСтраницыРегистра = ?(Число(ИндексСтраницыРегистра) = 0, -1, Число(ИндексСтраницыРегистра));
	    НаборЗаписей.Отбор.ИндексСтраницыРегистра.Установить(ЧислоИндексСтраницыРегистра);	
	КонецЕсли;
			
	СоответствиеДействий = ПолучитьСоответствиеДействийЖуранала();
		
	Если НЕ Действие = Неопределено Тогда
		
		Если ТипЗнч(Действие) = Тип("Число") Тогда
			
	    	ДействиеЧисло = Действие;
			
		ИначеЕсли ТипЗнч(Действие) = Тип("Строка") Тогда
			
			ДействиеЧисло = СоответствиеДействий.Получить(Действие);			
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЧислоИндексСтроки = Неопределено;
	
	Если НЕ ДействиеЧисло = Неопределено Тогда
		
		ОбратноеСоответствиеДействий = ПолучитьСоответствиеДействийЖуранала(Ложь);
		Если ОбратноеСоответствиеДействий.Получить(ДействиеЧисло) = Неопределено Тогда
			
			Возврат;			
		
		КонецЕсли;
		НаборЗаписей.Отбор.Действие.Установить(ДействиеЧисло);
		
		Если ДействиеЧисло >= 10 Тогда
			ЧислоИндексСтроки = -1;		
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЧислоИндексСтроки = Неопределено Тогда
		Если НЕ ИндексСтроки = Неопределено Тогда
			// Поскольку измерение не может быть пустым - нулевые значения заменяем на -1.								
			ЧислоИндексСтроки = ?(Число(ИндексСтроки) = 0, -1, Число(ИндексСтроки));		    		
		КонецЕсли; 	    	
	КонецЕсли;
	
	Если НЕ ЧислоИндексСтроки = Неопределено Тогда
		НаборЗаписей.Отбор.ИндексСтроки.Установить(ЧислоИндексСтроки);
	КонецЕсли;
	
	// Пишем пустой набор в режиме замещения - очищаем.
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Функция ДобавитьВРегистрЖурналаНапрямую(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексСтраницыРегистра, 
									ИндексСтроки, ЧислоДействие, Ресурсы = Неопределено)
	
	// Поскольку измерение не может быть пустым - нулевые значения заменяем на -1.								
	ИндексСтраницыРегистра = ?(ИндексСтраницыРегистра = 0, -1, ИндексСтраницыРегистра);								
	ИндексСтроки = ?(ИндексСтроки = 0, -1, ИндексСтроки);
	ЧислоИндексСтроки = ИндексСтроки;
	// Для действий над страницами в целом индекс строки всегда 0.
	Если ЧислоДействие >= 10 Тогда
	    ЧислоИндексСтроки = -1;		
	КонецЕсли;
	
	РегистрЖурнала = РегистрыСведений.СведенияРеглОтчетАлкоЖурнал;
	
	НаборЗаписей 		= РегистрЖурнала.СоздатьНаборЗаписей();
	НаборЗаписейНовый	= РегистрЖурнала.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчет);
	НаборЗаписей.Отбор.ИмяРегистра.Установить(ИмяРегистра);
	
	НаборЗаписей.Отбор.ИндексСтраницыРегистра.Установить(ИндексСтраницыРегистра);		
	НаборЗаписей.Отбор.ИндексСтроки.Установить(ЧислоИндексСтроки);
	НаборЗаписей.Отбор.Действие.Установить(ЧислоДействие);
	
	НаборЗаписей.Прочитать();
	
	СтараяЗаписьЖурналаДействие = Неопределено;
	Если НаборЗаписей.Количество() > 0 Тогда
		СтараяЗаписьЖурналаДействие = НаборЗаписей[0];
	КонецЕсли;
	
	НоваяЗаписьЖурналаДействие = НаборЗаписейНовый.Добавить();
	
	Если НЕ СтараяЗаписьЖурналаДействие = Неопределено Тогда
	    ЗаполнитьЗначенияСвойств(НоваяЗаписьЖурналаДействие, СтараяЗаписьЖурналаДействие);
		// Удалим то что нашли.
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	Иначе	
	    НоваяЗаписьЖурналаДействие.Документ = ДокументСсылкаАлкоОтчет;
		НоваяЗаписьЖурналаДействие.ИмяРегистра = ИмяРегистра;
		НоваяЗаписьЖурналаДействие.ИндексСтраницыРегистра = ИндексСтраницыРегистра;
		НоваяЗаписьЖурналаДействие.ИндексСтроки = ЧислоИндексСтроки;
		НоваяЗаписьЖурналаДействие.Действие = ЧислоДействие;
	КонецЕсли; 
		
	// Если ресурсы определены - сначала читаем имеющуюся запись и дописываем переданные значения ресурсов,
	// чтобы не затереть ранее записанные значения ресурсов.
	Если НЕ Ресурсы = Неопределено Тогда
		
		Если ТипЗнч(Ресурсы) = Тип("Структура") или ТипЗнч(Ресурсы) = Тип("ФиксированнаяСтруктура") Тогда
				    	
			Если Ресурсы.Свойство("КоличествоСтрок") Тогда
			    НоваяЗаписьЖурналаДействие.КоличествоСтрок = Ресурсы.КоличествоСтрок;				
			КонецЕсли; 
			
			Если Ресурсы.Свойство("КоличествоСтрокПомеченных") Тогда
			    НоваяЗаписьЖурналаДействие.КоличествоСтрокПомеченных = Ресурсы.КоличествоСтрокПомеченных;				
			КонецЕсли; 
			
			Если Ресурсы.Свойство("НачальноеЗначение") Тогда
				ЭтоПервоеРедактирование = ЭтоПервоеРедактированиеЗаписиРегистра(ДокументСсылкаАлкоОтчет, ИмяРегистра, 
														ИндексСтраницыРегистра, ЧислоИндексСтроки);
				Если ЭтоПервоеРедактирование Тогда
			    	НоваяЗаписьЖурналаДействие.НачальноеЗначение = Ресурсы.НачальноеЗначение;
				КонецЕсли;	
			КонецЕсли; 
			
			Если Ресурсы.Свойство("МаксИндексСтраницы") Тогда
			    НоваяЗаписьЖурналаДействие.МаксИндексСтраницы = Ресурсы.МаксИндексСтраницы;
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли; 	
		
	НаборЗаписейНовый.Записать(Ложь);
	
	Возврат Истина;
	
КонецФункции

Процедура ИмпортИзДанныхСтарогоФормата(ДокументСсылкаАлкоОтчетПриемник, СтруктураСведенийОтчета)

	Перем ИмяФормыОбъекта, СписокСохранения, СписокИменРегистровСведений, СтруктураИдГруппИменРегистровСведений, 
		СервисРегистров, СервисРегистровУдаленные, МаксИндексСтраницы;
		
	СтруктураСведенийОтчета.Свойство("ИмяФормыОбъекта", 						ИмяФормыОбъекта);
	СтруктураСведенийОтчета.Свойство("СписокСохранения", 						СписокСохранения);
	СтруктураСведенийОтчета.Свойство("СписокИменРегистровСведений", 			СписокИменРегистровСведений);
	СтруктураСведенийОтчета.Свойство("СтруктураИдГруппИменРегистровСведений", 	СтруктураИдГруппИменРегистровСведений);
	СтруктураСведенийОтчета.Свойство("СервисРегистров", 						СервисРегистров);
	СтруктураСведенийОтчета.Свойство("СервисРегистровУдаленные", 				СервисРегистровУдаленные);
	СтруктураСведенийОтчета.Свойство("МаксИндексСтраницы", 						МаксИндексСтраницы);
	
							
	Если МаксИндексСтраницы < 5 Тогда	
		МаксИндексСтраницы = 5;	
	КонецЕсли;
		
	// На всякий случай удалим все из СервисРегистров в СервисРегистровУдаленные.
	Для Каждого ИмяРегистраСведений Из СписокИменРегистровСведений Цикл
		
		ИмяРегистра 	= ИмяРегистраСведений.Значение;
		
		СервисРегистровГруппы 			= СервисРегистров[ИмяРегистра];
		СервисРегистровГруппыУдаленные 	= СервисРегистровУдаленные[ИмяРегистра];
		
		Для Каждого СтрокаСервисРегистровГруппы Из СервисРегистровГруппы Цикл
		
			НоваяСтрокаСервисРегистровГруппыУдаленные = СервисРегистровГруппыУдаленные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
			
			Ресурсы = Новый Структура;
			Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);		
			// Индекс строки 0 используем для обозначения операций над страницами в целом.
			// В норме индекс строки не меньше 1.	
			ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчетПриемник, ИмяРегистра,
						НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
										
		КонецЦикла; 
		
		СервисРегистровГруппы.Очистить();
		
	КонецЦикла;
	
	// Вначале проверяем предыдущий вариант формата.
	ХранилищаДопСтрок = Неопределено;
	Если СписокСохранения.Свойство("ХранилищаДопСтрок", ХранилищаДопСтрок) Тогда
		
		Для Каждого Хранилище Из ХранилищаДопСтрок Цикл
			
			ИмяХранилищаКлюч = Хранилище.Ключ;
			ТаблЗнач = Хранилище.Значение;
			
			Если ТипЗнч(ТаблЗнач) = Тип("ТаблицаЗначений") Тогда
			    			
				
				ПозицияПодчеркивания = СтрНайти(ИмяХранилищаКлюч, "_");				
				
				Если ПозицияПодчеркивания > 0 Тогда
						
					ИмяХранилища = Лев(ИмяХранилищаКлюч, ПозицияПодчеркивания - 1);
					ИдГруппы = СтрЗаменить(ИмяХранилища, "Хранилище", "");
					
					Если СтрДлина(ИмяХранилищаКлюч) > ПозицияПодчеркивания Тогда
					    ИндексСтраницы = Число(Сред(ИмяХранилищаКлюч, ПозицияПодчеркивания + 1));
					Иначе	
					    ИндексСтраницы = 0;
					КонецЕсли;	
					
					// Пишем в регистр.
					ИмяРегистра 			= СтруктураИдГруппИменРегистровСведений[ИдГруппы];
					СервисРегистровГруппы 	= СервисРегистров[ИмяРегистра];
					
					Пока СервисРегистровГруппы.Количество() < ИндексСтраницы + 1 Цикл
						
					    НоваяСтрока = СервисРегистровГруппы.Добавить();
						НоваяСтрока.ИндексСтраницыРегистра	= 0;
						НоваяСтрока.КоличествоСтрок 		= 0;
						НоваяСтрока.КолвоСтрокПомНаУдаление = 0;
						
					КонецЦикла; 
					
					ИндексСтраницыРегистра = СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра;
					
					Если  ИндексСтраницыРегистра = 0 Тогда
						
					    МаксИндексСтраницы 		= МаксИндексСтраницы + 1;
						ИндексСтраницыРегистра 	= МаксИндексСтраницы;
						СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра = МаксИндексСтраницы;
					
					КонецЕсли; 
					
					КоличествоТекСтрок = СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок;
										
					ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчетПриемник, ИмяФормыОбъекта, ИмяРегистра,
																ИндексСтраницыРегистра, ТаблЗнач, КоличествоТекСтрок);
																
					СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок = КоличествоТекСтрок;											
					
					// Выставляем автозаполнение, поскольку не пишем информацию по каждой строке в журнал.
					Ресурсы = Новый Структура;
					Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);
					Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
					// Индекс строки 0 используем для обозначения операций над страницами в целом.
					// В норме индекс строки не меньше 1.
					ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчетПриемник, ИмяРегистра,
											ИндексСтраницыРегистра, 0, "Автозаполнение", Ресурсы);
											 					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ТаблЗнач) = Тип("СписокЗначений") Тогда
				
				
				ПозицияПодчеркивания = СтрНайти(ИмяХранилищаКлюч, "_");
				
				СписЗнач = ТаблЗнач;
				
				Если ПозицияПодчеркивания > 0 Тогда
						
					ИмяХранилища = Лев(ИмяХранилищаКлюч, ПозицияПодчеркивания - 1);
					ИдГруппы = СтрЗаменить(ИмяХранилища, "Хранилище", "");
					
					Если СтрДлина(ИмяХранилищаКлюч) > ПозицияПодчеркивания Тогда
					    ИндексСтраницы = Число(Сред(ИмяХранилищаКлюч, ПозицияПодчеркивания + 1));
					Иначе	
					    ИндексСтраницы = 0;
					КонецЕсли;
										
					// Пишем в регистр.
					ИмяРегистра 			= СтруктураИдГруппИменРегистровСведений[ИдГруппы];
					СервисРегистровГруппы 	= СервисРегистров[ИмяРегистра];
					
					Пока СервисРегистровГруппы.Количество() < ИндексСтраницы + 1 Цикл
						
					    НоваяСтрока = СервисРегистровГруппы.Добавить();
						НоваяСтрока.ИндексСтраницыРегистра	= 0;
						НоваяСтрока.КоличествоСтрок 		= 0;
						НоваяСтрока.КолвоСтрокПомНаУдаление = 0;
						
					КонецЦикла; 
					
					ИндексСтраницыРегистра = СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра;
					
					Если  ИндексСтраницыРегистра = 0 Тогда
						
					    МаксИндексСтраницы 		= МаксИндексСтраницы + 1;
						ИндексСтраницыРегистра 	= МаксИндексСтраницы;
						СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра = МаксИндексСтраницы;
					
					КонецЕсли;
					
					КоличествоТекСтрок = СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок;
					 
					Для Каждого ДиапозонСтрокХранилища Из СписЗнач Цикл
					
						ТЗДиапозонСтрокХранилища = ДиапозонСтрокХранилища.Значение;
												
						ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчетПриемник, ИмяФормыОбъекта, ИмяРегистра,
																	ИндексСтраницыРегистра, ТЗДиапозонСтрокХранилища, КоличествоТекСтрок);
						
						
					КонецЦикла; 
																
					СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок = КоличествоТекСтрок;											
					
					// Выставляем автозаполнение, поскольку не пишем информацию по каждой строке в журнал.
					Ресурсы = Новый Структура;
					Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);
					Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
					// Индекс строки 0 используем для обозначения операций над страницами в целом.
					// В норме индекс строки не меньше 1.
					ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчетПриемник, ИмяРегистра,
											ИндексСтраницыРегистра, 0, "Автозаполнение", Ресурсы);											
																
																			
				КонецЕсли;
			
			КонецЕсли;		     
			
		КонецЦикла;	 
		
		СписокСохранения.Удалить("ХранилищаДопСтрок");
		
		СтруктураСведенийОтчета.Вставить("СписокСохранения", 						СписокСохранения);
		СтруктураСведенийОтчета.Вставить("СервисРегистров", 						СервисРегистров);
		СтруктураСведенийОтчета.Вставить("СервисРегистровУдаленные", 				СервисРегистровУдаленные);
		СтруктураСведенийОтчета.Вставить("МаксИндексСтраницы", 						МаксИндексСтраницы);
				
		Возврат;
		
	КонецЕсли;
	
	ДанныеМногостраничныхРазделов = Неопределено;
	// Остается вариант самой старой реализации сохранения из поддерживаемых.
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		ИндексыСтраницОтчета = Новый Структура;
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			ИмяРегистра = Неопределено;
			// ЭлементСтруктуры.Ключ - Лицензии, Раздел1, Раздел2.
			СтруктураИдГруппИменРегистровСведений.Свойство(ЭлементСтруктуры.Ключ, ИмяРегистра);
						
			Если НЕ ИмяРегистра = Неопределено Тогда
				
				Если ЭлементСтруктуры.Значение.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
					Продолжить;					
				КонецЕсли;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
															
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						// Загрузка Хранилищ Допстрок разделов из старого формата хранения.
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							// ЭлСтруктуры.Ключ - содержат ИД групп.
							
							// Группы в целом по организации не восстанвливаем,
							// смотрим только по ОП - они есть в СтруктураИдГруппИменРегистровСведений.
							ИмяРегистра = Неопределено;
							СтруктураИдГруппИменРегистровСведений.Свойство(ЭлСтруктуры.Ключ, ИмяРегистра);
							
							Если ИмяРегистра = Неопределено Тогда
							    Продолжить;								
							КонецЕсли; 
							
							Если НЕ ИндексыСтраницОтчета.Свойство(ИмяРегистра) Тогда
							    ИндексыСтраницОтчета.Вставить(ИмяРегистра, Новый Массив);							
							КонецЕсли;
			                ИндексыСтраницОтчета[ИмяРегистра].Добавить(0);
							
							ТаблЗнач = ЭлСтруктуры.Значение;
														
							// Определим Индекс страницы.
							ИндексСтраницы = ИндексыСтраницОтчета[ИмяРегистра].ВГраница();
							
							СервисРегистровГруппы 	= СервисРегистров[ИмяРегистра];
					
							Пока СервисРегистровГруппы.Количество() < ИндексСтраницы + 1 Цикл
								
							    НоваяСтрока = СервисРегистровГруппы.Добавить();
								НоваяСтрока.ИндексСтраницыРегистра	= 0;
								НоваяСтрока.КоличествоСтрок 		= 0;
								НоваяСтрока.КолвоСтрокПомНаУдаление = 0;
								
							КонецЦикла; 
							
							ИндексСтраницыРегистра = СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра;
							
							Если  ИндексСтраницыРегистра = 0 Тогда
								
							    МаксИндексСтраницы 		= МаксИндексСтраницы + 1;
								ИндексСтраницыРегистра 	= МаксИндексСтраницы;
								СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра = МаксИндексСтраницы;
							
							КонецЕсли;
							
							КоличествоТекСтрок = СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок;
														
							ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчетПриемник, ИмяФормыОбъекта, ИмяРегистра,
																		ИндексСтраницыРегистра, ТаблЗнач, КоличествоТекСтрок);
																		
							СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок = КоличествоТекСтрок;											
							
							// Выставляем автозаполнение, поскольку не пишем информацию по каждой строке в журнал.
							Ресурсы = Новый Структура;
							Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);
							Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
							// Индекс строки 0 используем для обозначения операций над страницами в целом.
							// В норме индекс строки не меньше 1.
							ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчетПриемник, ИмяРегистра,
													ИндексСтраницыРегистра, 0, "Автозаполнение", Ресурсы);
															
						КонецЦикла;
						
					КонецЕсли;					
					
				КонецЦикла;
				// Удаляем допстроки.
				ЭлементСтруктуры.Значение.Колонки.Удалить("ДанныеДопСтрок");				   				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураСведенийОтчета.Вставить("СписокСохранения", 						СписокСохранения);
		СтруктураСведенийОтчета.Вставить("СервисРегистров", 						СервисРегистров);
		СтруктураСведенийОтчета.Вставить("СервисРегистровУдаленные", 				СервисРегистровУдаленные);
		СтруктураСведенийОтчета.Вставить("МаксИндексСтраницы", 						МаксИндексСтраницы);
		
		Возврат;
		
	КонецЕсли;

	СтруктураСведенийОтчета.Вставить("СписокСохранения", 						СписокСохранения);
	СтруктураСведенийОтчета.Вставить("СервисРегистров", 						СервисРегистров);
	СтруктураСведенийОтчета.Вставить("СервисРегистровУдаленные", 				СервисРегистровУдаленные);
	СтруктураСведенийОтчета.Вставить("МаксИндексСтраницы", 						МаксИндексСтраницы);
		
КонецПроцедуры

Процедура СохранитьВосстановитьКопироватьРегистрыСведенийАЛКО(ПараметрыДокумента, АдресХранилища = Неопределено, 
															 ВозвращаемаяСтруктура = Неопределено) Экспорт

	ДокументСсылкаАлкоОтчетПриемник		= ПараметрыДокумента.ДокументСсылкаПриемник;
	ДокументСсылкаАлкоОтчетИсточник		= ПараметрыДокумента.ДокументСсылкаИсточник;
		
	ЭтоСохранение = Ложь;	
	Если ПараметрыДокумента.Свойство("ЭтоСохранение") Тогда	
		ЭтоСохранение = ПараметрыДокумента.ЭтоСохранение;	
	КонецЕсли;
	
	ЭтоОтменаИзменений = Ложь;	
	Если ПараметрыДокумента.Свойство("ЭтоОтменаИзменений") Тогда	
		ЭтоОтменаИзменений					= ПараметрыДокумента.ЭтоОтменаИзменений;	
	КонецЕсли;
	
	ЭтоКопирование = НЕ (ЭтоСохранение или ЭтоОтменаИзменений);
	
	СписокИменРегистровСведений = Неопределено;	
	Если ПараметрыДокумента.Свойство("СписокИменРегистровСведений") Тогда	
		СписокИменРегистровСведений			= ПараметрыДокумента.СписокИменРегистровСведений;	
	КонецЕсли;
			
	СтруктураСервисРегистров = Неопределено;
	Если ПараметрыДокумента.Свойство("СтруктураСервисРегистров") Тогда
	    СтруктураСервисРегистров = ПараметрыДокумента.СтруктураСервисРегистров;	
	КонецЕсли;
	
	СтруктураСервисРегистровУдаленные = Неопределено;
	Если ПараметрыДокумента.Свойство("СтруктураСервисРегистровУдаленные") Тогда
	    СтруктураСервисРегистровУдаленные = ПараметрыДокумента.СтруктураСервисРегистровУдаленные;	
	КонецЕсли;
	
	МаксИндексСтраницы = 0;
	Если ПараметрыДокумента.Свойство("МаксИндексСтраницы") Тогда
	    МаксИндексСтраницы = ПараметрыДокумента.МаксИндексСтраницы;	
	КонецЕсли;
		
	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;
	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения( , 0, 100);
	
	Если НЕ ЭтоКопирование  Тогда
		// При сохранении отличий быть не может. Только при восстановлении, если отчет скопирован.
		ДокументСсылкаАлкоОтчетИсточник = ДокументСсылкаАлкоОтчетПриемник;
	КонецЕсли; 
				
	КолОтработанных = 0;
	
	Если ЭтоСохранение Тогда
			
		ДокументСсылкаАлкоОтчет = ДокументСсылкаАлкоОтчетПриемник;
		
		// При сохранении требуется просто очистить журнал.
		ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчет);
						
	ИначеЕсли ЭтоОтменаИзменений Тогда
		
		ДокументСсылкаАлкоОтчет = ДокументСсылкаАлкоОтчетПриемник;
		
	    ВосстановитьРегистрыСведенийАЛКО(ДокументСсылкаАлкоОтчет, МаксИндексСтраницы, СтруктураСервисРегистров, СтруктураСервисРегистровУдаленные);
						
	Иначе
		// В режиме копирования из одного отчета в другой.
		СтруктураСведенийОтчета = Новый Структура;
		
		СтруктураСведенийОтчета.Вставить("СписокИменРегистровСведений", 		СписокИменРегистровСведений);
		СтруктураСведенийОтчета.Вставить("СтруктураСервисРегистров", 			СтруктураСервисРегистров);
		СтруктураСведенийОтчета.Вставить("СтруктураСервисРегистровУдаленные", 	СтруктураСервисРегистровУдаленные);
		СтруктураСведенийОтчета.Вставить("МаксИндексСтраницы", 					МаксИндексСтраницы);
		СтруктураСведенийОтчета.Вставить("КолОтработанных", 					КолОтработанных);
		СтруктураСведенийОтчета.Вставить("ВспомогательныйАдрес", 				ВспомогательныйАдрес);
	
		СкопироватьРегистрыСведенийАЛКО(ДокументСсылкаАлкоОтчетИсточник, 
										ДокументСсылкаАлкоОтчетПриемник, СтруктураСведенийОтчета);
										
		КолОтработанных 					= СтруктураСведенийОтчета.КолОтработанных;
		МаксИндексСтраницы 					= СтруктураСведенийОтчета.МаксИндексСтраницы;
		СтруктураСервисРегистров 			= СтруктураСведенийОтчета.СтруктураСервисРегистров;
		СтруктураСервисРегистровУдаленные 	= СтруктураСведенийОтчета.СтруктураСервисРегистровУдаленные;
		
	КонецЕсли;	
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
	ВозвращаемаяСтруктура.Вставить("СервисРегистров", СтруктураСервисРегистров);
	ВозвращаемаяСтруктура.Вставить("СервисРегистровУдаленные", СтруктураСервисРегистровУдаленные);
	
	
	
	Если НЕ АдресХранилища = Неопределено Тогда
		
		СтруктураРезультата = Новый Структура;			
		СтруктураРезультата.Вставить("ВозвращаемаяСтруктура", ВозвращаемаяСтруктура);
		
	    АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);	
		
	КонецЕсли;	

КонецПроцедуры

Процедура ВосстановитьРегистрыСведенийАЛКО(ДокументСсылкаАлкоОтчет, МаксИндексСтраницы, СтруктураСервисРегистров, СтруктураСервисРегистровУдаленные)
							
	// При восстановлении данных после редактирования или автозаполнения важно восстановить значение МаксИндексСтраницы.
	МаксИндексСтраницы =  ПолучитьМаксИндексСтраницыПоЖурналу(ДокументСсылкаАлкоОтчет);
	
	// СтруктураСервисРегистров, СтруктураСервисРегистровУдаленные - соответствуют сохраненным.
	// тут ничего делать не надо.
	
	// Удаленные страницы восстановятся, добавленные страницы "исчезнут" благодаря восстановленным 
	// СтруктураСервисРегистров, СтруктураСервисРегистровУдаленные.
	
	// Остается удалить добавленные строки и восстановить начальные значения отредактированных.
	
	// Сначала нужно убрать из журнала всю информацию по добавленным или автозаполненным страницам - редактирование строк
	// этих страниц полезной информации не несет, поскольку эти страницы "исчезнут".
	
	// Но нужно добавить эти страницы в "удаленные" Сервис регистров - чтобы эти страницы потом можно было почистить при
	// очистке от мусора.
		
	НаборЗаписейЖурналаАвтозаполнение = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, , , ,"Автозаполнение");
	
	Для Каждого ЗаписьЖурналаАвтозаполнение Из НаборЗаписейЖурналаАвтозаполнение Цикл
		
	    ИндексРегистра 	= ЗаписьЖурналаАвтозаполнение.ИндексСтраницыРегистра;
		ИмяРегистра 	= ЗаписьЖурналаАвтозаполнение.ИмяРегистра;
		
		КоличествоСтрокПоСтранице = ПолучитьКоличествоСтрокСтраницыПоЖурналу(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексРегистра);
		
		СервисРегистровУдаленные = СтруктураСервисРегистровУдаленные[ИмяРегистра];
		
		НоваяСтрокаУдаленных 						= СервисРегистровУдаленные.Добавить();
		НоваяСтрокаУдаленных.КоличествоСтрок 		= КоличествоСтрокПоСтранице;
		НоваяСтрокаУдаленных.ИндексСтраницыРегистра = ИндексРегистра;
		
		ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексРегистра);
				
	КонецЦикла;
	НаборЗаписейЖурналаАвтозаполнение = Неопределено;	
		
	НаборЗаписейЖурналаДобавление = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, , , , "ДобавлениеСтраницы");

	Для Каждого ЗаписьЖурналаДобавление Из НаборЗаписейЖурналаДобавление Цикл
			
	    ИндексРегистра 	= ЗаписьЖурналаДобавление.ИндексСтраницыРегистра;
		ИмяРегистра 	= ЗаписьЖурналаДобавление.ИмяРегистра;
		
		КоличествоСтрокПоСтранице = ПолучитьКоличествоСтрокСтраницыПоЖурналу(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексРегистра);
		
		СервисРегистровУдаленные = СтруктураСервисРегистровУдаленные[ИмяРегистра];
		
		НоваяСтрокаУдаленных 						= СервисРегистровУдаленные.Добавить();
		НоваяСтрокаУдаленных.КоличествоСтрок 		= КоличествоСтрокПоСтранице;
		НоваяСтрокаУдаленных.ИндексСтраницыРегистра = ИндексРегистра;
		
		ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексРегистра);
			
	КонецЦикла;
	НаборЗаписейЖурналаДобавление = Неопределено;
	
	СтруктураНаборовЗаписей = Новый Структура;
	
	// Теперь надо удалить все добавленные в последнем сеансе строки.
	НаборЗаписейЖурналаДобавленыхСтрок = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, , , , "ДобавлениеСтроки");
	Для Каждого ЗаписьЖурналаДобавлениеСтроки Из НаборЗаписейЖурналаДобавленыхСтрок Цикл
			
	    ИндексРегистра 	= ЗаписьЖурналаДобавлениеСтроки.ИндексСтраницыРегистра;
		ИмяРегистра 	= ЗаписьЖурналаДобавлениеСтроки.ИмяРегистра;
		ИндексСтроки	= ЗаписьЖурналаДобавлениеСтроки.ИндексСтроки;
		
		// Удаляем из регистров эти строки.
		Если СтруктураНаборовЗаписей.Свойство(ИмяРегистра) Тогда
		    НаборЗаписейРегистраУдаления = СтруктураНаборовЗаписей[ИмяРегистра];
		Иначе	
		    РегистрУдаления = РегистрыСведений[ИмяРегистра];
			НаборЗаписейРегистраУдаления = РегистрУдаления.СоздатьНаборЗаписей();
			СтруктураНаборовЗаписей.Вставить(ИмяРегистра, НаборЗаписейРегистраУдаления); 
		КонецЕсли;
					
		НаборЗаписейРегистраУдаления.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчет);
		НаборЗаписейРегистраУдаления.Отбор.ИндексСтраницы.Установить(Число(ИндексРегистра));
		НаборЗаписейРегистраУдаления.Отбор.ИндексСтроки.Установить(Число(ИндексСтроки));
		// Удаляем записывая пустой набор в режиме замещения.
	    НаборЗаписейРегистраУдаления.Записать(Истина);
		
		// Удаляем из Журнала всю информацию по этим строкам.
		ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексРегистра, ИндексСтроки);
		
	КонецЦикла;
	НаборЗаписейЖурналаДобавленыхСтрок = Неопределено;
	
	// Осталось восстановить строки, которые редактировали.	
	НаборЗаписейЖурналаРедактирование = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, , , , "Редактирование");
	Для Каждого ЗаписьЖурналаРедактирование Из НаборЗаписейЖурналаРедактирование Цикл
			
	    ИндексРегистра 		= ЗаписьЖурналаРедактирование.ИндексСтраницыРегистра;
		ИмяРегистра 		= ЗаписьЖурналаРедактирование.ИмяРегистра;
		ИндексСтроки		= ЗаписьЖурналаРедактирование.ИндексСтроки;
		НачальноеЗначение 	= ЗаписьЖурналаРедактирование.НачальноеЗначение;
		 
		СтруктураНачальногоЗначения = Неопределено;
	
		Если НЕ НачальноеЗначение = Неопределено Тогда
		
			СтруктураНачальногоЗначения = ЗначениеИзСтрокиВнутр(НачальноеЗначение);
		
		КонецЕсли;
		
		Если НЕ СтруктураНачальногоЗначения = Неопределено Тогда
			
			// Позиционируемся на отредактированной строке.
			Если СтруктураНаборовЗаписей.Свойство(ИмяРегистра) Тогда
			    НаборЗаписейРегистраРедактирование = СтруктураНаборовЗаписей[ИмяРегистра];
			Иначе	
			    РегистрРедактирование = РегистрыСведений[ИмяРегистра];
				НаборЗаписейРегистраРедактирование = РегистрРедактирование.СоздатьНаборЗаписей();
				СтруктураНаборовЗаписей.Вставить(ИмяРегистра, НаборЗаписейРегистраРедактирование); 
			КонецЕсли; 
				
			НаборЗаписейРегистраРедактирование.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчет);
			НаборЗаписейРегистраРедактирование.Отбор.ИндексСтраницы.Установить(Число(ИндексРегистра));
			НаборЗаписейРегистраРедактирование.Отбор.ИндексСтроки.Установить(Число(ИндексСтроки));
						
			НаборЗаписейРегистраРедактирование.Прочитать();
			// В наборе может быть только одна запись.
			ЗаписьОтредактированная = НаборЗаписейРегистраРедактирование[0];
			// Возвращаем исходные значения.
			ЗаполнитьЗначенияСвойств(ЗаписьОтредактированная, СтруктураНачальногоЗначения);			
			// Записываем в режиме замещения.
		    НаборЗаписейРегистраРедактирование.Записать(Истина);
			// Очищаем для следующей итерации.
			НаборЗаписейРегистраРедактирование.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	НаборЗаписейЖурналаРедактирование = Неопределено;
	
	// Очищаем Журнал.
	ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчет);
	
	// На случай если восстановленный отчет закроют без сохранения - зафиксируем МаксИндексСтраницы.
	Ресурсы = Новый Структура;
	Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
	ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, "ОбщиеСведения", 0, 0, "Сервис", Ресурсы);
				
КонецПроцедуры

Процедура СкопироватьРегистрыСведенийАЛКО(ДокументСсылкаАлкоОтчетИсточник, 
										ДокументСсылкаАлкоОтчетПриемник, СтруктураСведенийОтчета)
										 
	Перем СписокИменРегистровСведений, СтруктураСервисРегистров, СтруктураСервисРегистровУдаленные, 
		МаксИндексСтраницы, КолОтработанных, ВспомогательныйАдрес;
	
	СтруктураСведенийОтчета.Свойство("СписокИменРегистровСведений", 		СписокИменРегистровСведений);
	СтруктураСведенийОтчета.Свойство("СтруктураСервисРегистров", 			СтруктураСервисРегистров);
	СтруктураСведенийОтчета.Свойство("СтруктураСервисРегистровУдаленные", 	СтруктураСервисРегистровУдаленные);
	СтруктураСведенийОтчета.Свойство("МаксИндексСтраницы", 					МаксИндексСтраницы);
	СтруктураСведенийОтчета.Свойство("КолОтработанных", 					КолОтработанных);
	СтруктураСведенийОтчета.Свойство("ВспомогательныйАдрес", 				ВспомогательныйАдрес);
	
	
	// Нужно очистить регистр - Журнал  по документу приемнику.
	ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчетПриемник);
										 
	// Пробуем вычислить количество строк которое надо обработать,
	// независимо от переданного.
		
	ВсегоСтрокКопируем = 0;
	
	Если НЕ СтруктураСервисРегистров = Неопределено Тогда
	
		Для Каждого ИмяРегистраСведений Из СписокИменРегистровСведений Цикл
			
			ИмяРегистра 	= ИмяРегистраСведений.Значение;
						
			СервисРегистров = СтруктураСервисРегистров[ИмяРегистра];
			
			Для Каждого СтрокаСервиса Из СервисРегистров Цикл
			    ВсегоСтрокКопируем = ВсегоСтрокКопируем + СтрокаСервиса.КоличествоСтрок - СтрокаСервиса.КолвоСтрокПомНаУдаление;			
			КонецЦикла; 
			
		КонецЦикла;	
		
	КонецЕсли;
				
	// Сначала удаляем все строки в приемнике,
	// он в нормальной ситуации должен быть пуст - на всякий случай.		
	Для Каждого ИмяРегистраСведений Из СписокИменРегистровСведений Цикл
				
		ИмяРегистра 	= ИмяРегистраСведений.Значение;
	    РегистрПриемник = РегистрыСведений[ИмяРегистра];
		
		НаборЗаписейПриемника 	= РегистрПриемник.СоздатьНаборЗаписей();		
		НаборЗаписейПриемника.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчетПриемник);		
		// Удаляем записывая пустой набор.
		НаборЗаписейПриемника.Записать(Истина);	
		
	КонецЦикла;	
		
	Для Каждого ИмяРегистраСведений Из СписокИменРегистровСведений Цикл
		
		ИмяРегистра 	= ИмяРегистраСведений.Значение;
		
		СтруктураСведенийРегистраОтчета = Новый Структура;
		
		СтруктураСведенийРегистраОтчета.Вставить("ИмяРегистра", 						ИмяРегистра);
		СтруктураСведенийРегистраОтчета.Вставить("СтруктураСервисРегистров", 			СтруктураСервисРегистров);
		СтруктураСведенийРегистраОтчета.Вставить("ВсегоСтрокКопируем", 					ВсегоСтрокКопируем);
		СтруктураСведенийРегистраОтчета.Вставить("МаксИндексСтраницы", 					МаксИндексСтраницы);
		СтруктураСведенийРегистраОтчета.Вставить("КолОтработанных", 					КолОтработанных);
		СтруктураСведенийРегистраОтчета.Вставить("ВспомогательныйАдрес", 				ВспомогательныйАдрес);
	
		СкопироватьРегистрСведенийАЛКО(ДокументСсылкаАлкоОтчетИсточник, ДокументСсылкаАлкоОтчетПриемник,
										СтруктураСведенийРегистраОтчета);
										
		СтруктураСведенийРегистраОтчета.Свойство("СтруктураСервисРегистров", 			СтруктураСервисРегистров);
		СтруктураСведенийРегистраОтчета.Свойство("ВсегоСтрокКопируем", 					ВсегоСтрокКопируем);
		СтруктураСведенийРегистраОтчета.Свойство("МаксИндексСтраницы", 					МаксИндексСтраницы);
		СтруктураСведенийРегистраОтчета.Свойство("КолОтработанных", 					КолОтработанных);
				
	КонецЦикла;
	
	// Блок информирования о проценте выполнения.
	Если ВсегоСтрокКопируем > 0 Тогда
		
		СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоСтрокКопируем); 
								
	КонецЕсли;
	
	СтруктураСведенийОтчета.Вставить("СтруктураСервисРегистров", 			СтруктураСервисРегистров);
	СтруктураСведенийОтчета.Вставить("СтруктураСервисРегистровУдаленные", 	СтруктураСервисРегистровУдаленные);
	СтруктураСведенийОтчета.Вставить("МаксИндексСтраницы", 					МаксИндексСтраницы);
	СтруктураСведенийОтчета.Вставить("КолОтработанных", 					КолОтработанных);
	
КонецПроцедуры
													
Процедура СкопироватьРегистрСведенийАЛКО(ДокументСсылкаАлкоОтчетИсточник, 
										ДокументСсылкаАлкоОтчетПриемник, СтруктураСведенийОтчета)
										
	Перем ИмяРегистра, СтруктураСервисРегистров, МаксИндексСтраницы, ВсегоСтрокКопируем, 
		КолОтработанных, ВспомогательныйАдрес;
	
	СтруктураСведенийОтчета.Свойство("ИмяРегистра", 						ИмяРегистра);
	СтруктураСведенийОтчета.Свойство("СтруктураСервисРегистров", 			СтруктураСервисРегистров);
	СтруктураСведенийОтчета.Свойство("ВсегоСтрокКопируем", 					ВсегоСтрокКопируем);
	СтруктураСведенийОтчета.Свойство("МаксИндексСтраницы", 					МаксИндексСтраницы);
	СтруктураСведенийОтчета.Свойство("КолОтработанных", 					КолОтработанных);
	СтруктураСведенийОтчета.Свойство("ВспомогательныйАдрес", 				ВспомогательныйАдрес);
	
	// Количество записей в наборе записей при записи.
	// Писать по одной записи тоже можно, но медленнее, хотя оперативная память используется минимально.
	// поэтому количество записей в блоке не должно быть большим - ради скорости можно немного увеличить расход памяти.								
	КолВБлокеЗаписей = 1000;
	
	// Получаем менеджеры нужных регистров	
	РегистрПриемник = РегистрыСведений[ИмяРегистра];
	РегистрИсточник = РегистрыСведений[ИмяРегистра];
		 
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистра];
										
	НаборЗаписейПриемника 	= РегистрПриемник.СоздатьНаборЗаписей();
	
	ТекстЗапросаДанныхСтрок = "
	|ВЫБРАТЬ ПЕРВЫЕ " + Формат(КолВБлокеЗаписей, "ЧГ=") + "
	|	РегистрСведенийАлкоОтчет.*
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК РегистрСведенийАлкоОтчет
	|ГДЕ
	|	РегистрСведенийАлкоОтчет.ИДДокИндСтраницы = &ИДДокИндСтраницы
	|   И РегистрСведенийАлкоОтчет.Активно = Истина
	|	И РегистрСведенийАлкоОтчет.ИндексСтроки > &ТекущийИндексСтроки";
	
	ЗапросДанныхСтрок = Новый Запрос;
	ЗапросДанныхСтрок.Текст = ТекстЗапросаДанныхСтрок;
			
	// Имеем СервисРегистров, т.е точно знаем какие индексы страниц используются в отчете, а какие нет. 
	
	Для Каждого СтрокаСервиса Из СервисРегистров Цикл
	
		ИспользуемыйИндексСтраницыИсточника = СтрокаСервиса.ИндексСтраницыРегистра;
		ИспользуемыйИндексСтраницыПриемника = ИспользуемыйИндексСтраницыИсточника;
		
		// Копируем только данные по этому индексу.
		ИДДокИндСтраницыИсточника = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчетИсточник, ИспользуемыйИндексСтраницыИсточника);
		ТекущийИндексСтроки = 0;
		
		Пока Истина Цикл
	
			ЗапросДанныхСтрок.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницыИсточника);
			ЗапросДанныхСтрок.Параметры.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
							
			РезЗапросаДанных = ЗапросДанныхСтрок.Выполнить();
			
			Если РезЗапросаДанных.Пустой() Тогда		
				Прервать;			
			Иначе			
				ВыборкаИсточник = РезЗапросаДанных.Выбрать();		
			КонецЕсли;
		
			СтруктураСведенийРегистраОтчета = Новый Структура;
			
			СтруктураСведенийРегистраОтчета.Вставить("ДокументСсылкаАлкоОтчетИсточник", ДокументСсылкаАлкоОтчетИсточник);
			СтруктураСведенийРегистраОтчета.Вставить("ДокументСсылкаАлкоОтчетПриемник", ДокументСсылкаАлкоОтчетПриемник);
			СтруктураСведенийРегистраОтчета.Вставить("ВсегоСтрок", ВсегоСтрокКопируем);
			СтруктураСведенийРегистраОтчета.Вставить("КолОтработанных", КолОтработанных);
			СтруктураСведенийРегистраОтчета.Вставить("КолВБлокеЗаписей", КолВБлокеЗаписей);
			СтруктураСведенийРегистраОтчета.Вставить("ИспользуемыйИндексСтраницыПриемника", ИспользуемыйИндексСтраницыПриемника);
			СтруктураСведенийРегистраОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);
			СтруктураСведенийРегистраОтчета.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);	
		
			СкопироватьВыборкуРегистраСведенийАЛКО(ВыборкаИсточник, НаборЗаписейПриемника, СтруктураСведенийРегистраОтчета);
						
			СтруктураСведенийРегистраОтчета.Свойство("ВсегоСтрок", ВсегоСтрокКопируем);
			СтруктураСведенийРегистраОтчета.Свойство("КолОтработанных", КолОтработанных);
			СтруктураСведенийРегистраОтчета.Свойство("ТекущийИндексСтроки", ТекущийИндексСтроки);
			
		КонецЦикла;
											
		// Выставляем как Автозаполнение, поскольку не вносится информация по каждой строке.
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", СтрокаСервиса.КоличествоСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчетПриемник, ИмяРегистра, ИспользуемыйИндексСтраницыПриемника, 0, "Автозаполнение", Ресурсы);
		
	КонецЦикла; 
	
	СтруктураСведенийОтчета.Вставить("СтруктураСервисРегистров", 			СтруктураСервисРегистров);
	СтруктураСведенийОтчета.Вставить("ВсегоСтрокКопируем", 					ВсегоСтрокКопируем);
	СтруктураСведенийОтчета.Вставить("МаксИндексСтраницы", 					МаксИндексСтраницы);
	СтруктураСведенийОтчета.Вставить("КолОтработанных", 					КолОтработанных);
	
КонецПроцедуры

Процедура СкопироватьВыборкуРегистраСведенийАЛКО(ВыборкаИсточник, НаборЗаписейПриемника, СтруктураСведенийОтчета)

	Перем ДокументСсылкаАлкоОтчетИсточник, ДокументСсылкаАлкоОтчетПриемник, ВсегоСтрок, КолОтработанных, 
		КолВБлокеЗаписей, ИспользуемыйИндексСтраницыПриемника, ВспомогательныйАдрес, ТекущийИндексСтроки;
	
	СтруктураСведенийОтчета.Свойство("ДокументСсылкаАлкоОтчетИсточник", ДокументСсылкаАлкоОтчетИсточник);
	СтруктураСведенийОтчета.Свойство("ДокументСсылкаАлкоОтчетПриемник", ДокументСсылкаАлкоОтчетПриемник);
	СтруктураСведенийОтчета.Свойство("ВсегоСтрок", ВсегоСтрок);
	СтруктураСведенийОтчета.Свойство("КолОтработанных", КолОтработанных);
	СтруктураСведенийОтчета.Свойство("КолВБлокеЗаписей", КолВБлокеЗаписей);
	СтруктураСведенийОтчета.Свойство("ИспользуемыйИндексСтраницыПриемника", ИспользуемыйИндексСтраницыПриемника);
	СтруктураСведенийОтчета.Свойство("ВспомогательныйАдрес", ВспомогательныйАдрес);
	СтруктураСведенийОтчета.Свойство("ТекущийИндексСтроки", ТекущийИндексСтроки);
		
	НаборЗаписейПриемника.Очистить();
	ИДДокИндСтраницыПриемника = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчетПриемник, ИспользуемыйИндексСтраницыПриемника);
	
	Пока ВыборкаИсточник.Следующий() Цикл
		
		КолОтработанных = КолОтработанных + 1;
		
		ТекущийИндексСтроки = ВыборкаИсточник.ИндексСтроки;
		
		НоваяЗаписьПриемника = НаборЗаписейПриемника.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗаписьПриемника, ВыборкаИсточник);
		
		НоваяЗаписьПриемника.Документ	= ДокументСсылкаАлкоОтчетПриемник;
		НоваяЗаписьПриемника.ИндексСтраницы = ИспользуемыйИндексСтраницыПриемника;
		
		НоваяЗаписьПриемника.ИДДокИндСтраницы = ИДДокИндСтраницыПриемника;
				
		// Пишем блок информирования о проценте выполнения и запись набора.
		Если КолОтработанных % КолВБлокеЗаписей = 0 Тогда
			
			// В режиме дописывания.
			НаборЗаписейПриемника.Записать(Ложь);			
			НаборЗаписейПриемника.Очистить();
						
			Если ВсегоСтрок > 0 Тогда
								
				СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоСтрок);
		 		
			КонецЕсли;
			
		КонецЕсли;		
				
	КонецЦикла;
	
	// Дописываем остаток, если есть.
	Если НаборЗаписейПриемника.Количество() > 0 Тогда
	    НаборЗаписейПриемника.Записать(Ложь);
		НаборЗаписейПриемника.Очистить();
	КонецЕсли;
	
	СтруктураСведенийОтчета.Вставить("ВсегоСтрок", ВсегоСтрок);
	СтруктураСведенийОтчета.Вставить("КолОтработанных", КолОтработанных);	
	СтруктураСведенийОтчета.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
			
КонецПроцедуры

Процедура ОчиститьРегистрСведенийАЛКООтМусора(ДокументСсылкаАлкоОтчет, СтруктураСведенийОтчета)
												
	Перем ИмяРегистраСведений, СервисРегистров, СервисРегистровУдаленные, УдалятьПомеченныеНаУдаление, 
		ВсегоНадоОбработать, КолОтработанных, ВспомогательныйАдрес;
		
	СтруктураСведенийОтчета.Свойство("ИмяРегистраСведений", ИмяРегистраСведений);
	СтруктураСведенийОтчета.Свойство("СервисРегистров", СервисРегистров);
	СтруктураСведенийОтчета.Свойство("СервисРегистровУдаленные", СервисРегистровУдаленные);
	СтруктураСведенийОтчета.Свойство("УдалятьПомеченныеНаУдаление", УдалятьПомеченныеНаУдаление);
	СтруктураСведенийОтчета.Свойство("ВсегоНадоОбработать", ВсегоНадоОбработать);
	СтруктураСведенийОтчета.Свойство("КолОтработанных", КолОтработанных);
	СтруктураСведенийОтчета.Свойство("ВспомогательныйАдрес", ВспомогательныйАдрес);
												
	КолВБлокеЗаписей = 1000;
	
	// Сначала удаляем строки, относящиеся к удаленным-неактивным страницам.	
	РегистрСведенийАЛКО = РегистрыСведений[ИмяРегистраСведений];
	НаборЗаписей 		= РегистрСведенийАЛКО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчет);
	
	Для Каждого СтрокаСервиса Из СервисРегистровУдаленные Цикл
		
		ИндексРегистраНеактивнойСтраницы = СтрокаСервиса.ИндексСтраницыРегистра;
		ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексРегистраНеактивнойСтраницы);
		
		НаборЗаписей.Отбор.ИДДокИндСтраницы.Установить(ИДДокИндСтраницы);
		
		// Пишем пустой набор в режиме замещения, таким образом удаляя записи.
		НаборЗаписей.Записать(Истина);
		
		КолОтработанных = КолОтработанных + СтрокаСервиса.КоличествоСтрок;
		
		// Сообщаем ход процесса.
		СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоНадоОбработать);
		
	КонецЦикла;
	
	СервисРегистровУдаленные.Очистить();
	
	Если УдалятьПомеченныеНаУдаление Тогда		
		
		ТекстЗапросаПервойУдаленнойСтроки = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрСведенийАлкоОтчет.*
		|ИЗ
		|	РегистрСведений." + ИмяРегистраСведений + " КАК РегистрСведенийАлкоОтчет
		|ГДЕ
		|	РегистрСведенийАлкоОтчет.ИДДокИндСтраницы = &ИДДокИндСтраницы
		|   И РегистрСведенийАлкоОтчет.Активно = Ложь";
		
		ЗапросПервойУдаленнойСтроки = Новый Запрос;
		ЗапросПервойУдаленнойСтроки.Текст = ТекстЗапросаПервойУдаленнойСтроки;
		
		Для Каждого СтрокаСервиса Из СервисРегистров Цикл
			
			НаборЗаписей 		= РегистрСведенийАЛКО.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчет);
	
			ИндексРегистраСтраницы = СтрокаСервиса.ИндексСтраницыРегистра;
			ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексРегистраСтраницы);
			
			// Перед удалением помеченных на удаление записей, установим номер первой строки, помеченной на удаление.
			ЗапросПервойУдаленнойСтроки.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);
			РезЗапросаДанных = ЗапросПервойУдаленнойСтроки.Выполнить();
			
			НомерПервойУдаленнойСтроки = 0;
			Если РезЗапросаДанных.Пустой() Тогда
				// Нет помеченных.
				Продолжить;			
			Иначе			
				ПерваяУдаленнаяСтрока = РезЗапросаДанных.Выгрузить()[0];
				НомерПервойУдаленнойСтроки = ПерваяУдаленнаяСтрока.ИндексСтроки;
			КонецЕсли;
						
			// Теперь нужно удалить и перенумеровать.
			ОтборПоИДДокИндСтраницы = Новый Структура("ИДДокИндСтраницы");
			ОтборПоИДДокИндСтраницы.ИДДокИндСтраницы = ИДДокИндСтраницы;
			
			НаборЗаписей 		= РегистрСведенийАЛКО.СоздатьНаборЗаписей();
							
			ВыборкаРегистра  = РегистрСведенийАЛКО.Выбрать(ОтборПоИДДокИндСтраницы);
			
			ТекНомерСтроки = 0;
			Пока ВыборкаРегистра.Следующий() Цикл
			    				
				КолОтработанных = КолОтработанных + 1;
				
				ТекСтарыйНомер = ВыборкаРегистра.ИндексСтроки;
				
				Если ТекСтарыйНомер < НомерПервойУдаленнойСтроки Тогда
					
				    // Делать пока нечего.
					ТекНомерСтроки = ТекНомерСтроки + 1;
					Продолжить;
				
				КонецЕсли; 
				
				Если ВыборкаРегистра.Активно Тогда
					// Копируем активные записи.
					ТекНомерСтроки = ТекНомерСтроки + 1;
					
					ТекЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ТекЗапись, ВыборкаРегистра);
					
					ТекЗапись.ИндексСтроки = ТекНомерСтроки;
					
				КонецЕсли; 
				
				// Удаляем все записи подряд, активные будут перезаписаны.
				ВыборкаРегистра.ПолучитьМенеджерЗаписи().Удалить();
																
				Если НаборЗаписей.Количество() >= КолВБлокеЗаписей Тогда
					
					// Пишем в режиме дописывания блоками.
					НаборЗаписей.Записать(Ложь);
					НаборЗаписей.Очистить();
					
				    СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоНадоОбработать);				
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если НаборЗаписей.Количество() > 0 Тогда
				
				// Пишем в режиме дописывания оставшиеся записи.
				НаборЗаписей.Записать(Ложь);
				НаборЗаписей.Очистить();
				
				СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоНадоОбработать);
				
			КонецЕсли; 
												
		КонецЦикла;
	
	КонецЕсли; 
	
	
	СтруктураСведенийОтчета.Вставить("СервисРегистров", СервисРегистров);
	СтруктураСведенийОтчета.Вставить("СервисРегистровУдаленные", СервисРегистровУдаленные);	
	СтруктураСведенийОтчета.Вставить("ВсегоНадоОбработать", ВсегоНадоОбработать);
	СтруктураСведенийОтчета.Вставить("КолОтработанных", КолОтработанных);
	
		
КонецПроцедуры

Процедура ПересчетИтоговПоГруппеАЛКО(ДокументСсылкаАлкоОтчет, СтруктураСведенийОтчета)
								
	Перем ИдГруппы, СтруктураИдГруппИменРегистровСведений, СписокБуфферИтоговГруппы, СтруктураСервисРегистров, 
		МассивРезультатов, ИмяФормыОбъекта, СтруктураРесурсовПоГруппе, ВсегоСтрок, КолОтработанных, 
		КолВБлокеЗаписей, ВспомогательныйАдрес;
	
	СтруктураСведенийОтчета.Свойство("ИдГруппы", ИдГруппы);
	СтруктураСведенийОтчета.Свойство("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
	СтруктураСведенийОтчета.Свойство("СписокБуфферИтоговГруппы", СписокБуфферИтоговГруппы);
	СтруктураСведенийОтчета.Свойство("СтруктураСервисРегистров", СтруктураСервисРегистров);
	СтруктураСведенийОтчета.Свойство("МассивРезультатов", МассивРезультатов);
	СтруктураСведенийОтчета.Свойство("ИмяФормыОбъекта", ИмяФормыОбъекта);
	СтруктураСведенийОтчета.Свойство("СтруктураРесурсовПоГруппе", СтруктураРесурсовПоГруппе);
	СтруктураСведенийОтчета.Свойство("ВсегоСтрок", ВсегоСтрок);
	СтруктураСведенийОтчета.Свойство("КолОтработанных", КолОтработанных);
	СтруктураСведенийОтчета.Свойство("КолВБлокеЗаписей", КолВБлокеЗаписей);
	СтруктураСведенийОтчета.Свойство("ВспомогательныйАдрес", ВспомогательныйАдрес);
	
	// Определим объект Отчета.
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	
	// Получим имя регистра.
	ИмяРабочегоРегистра 	= СтруктураИдГруппИменРегистровСведений[ИдГруппы];
	СервисРегистров = СтруктураСервисРегистров[ИмяРабочегоРегистра];	
	
	// Создадим копию структуры ресурсов по группе,
	// в структуре ресурсов - только числовые значения.
	ЗначениеРесурсовДо = Новый Структура;
	ЗначениеРесурсовПосле = Новый Структура;
	Для Каждого ЭлементСтруктуры Из СтруктураРесурсовПоГруппе Цикл	
		ЗначениеРесурсовДо.Вставить(ЭлементСтруктуры.Ключ, 0);
		ЗначениеРесурсовПосле.Вставить(ЭлементСтруктуры.Ключ, 0);
	КонецЦикла; 
	
	КоличествоСтраницГруппы = СервисРегистров.Количество();
	
	// Для каждой страницы создаем элемент массива.
	Для Инд = 1 По КоличествоСтраницГруппы Цикл
		
	   	МассивРезультатов.Добавить(Новый СписокЗначений);
	   
	   	Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // В массиве будут храниться итоги по страницам по данному полю - представлению.
			МассивРезультатов[Инд - 1].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
		
	КонецЦикла; 
	
	// Получаем менеджер нужного регистра.
	РабочийРегистр = РегистрыСведений[ИмяРабочегоРегистра];
	ИндексСтраницы = -1;	
	Для Каждого СтрокаСервиса Из СервисРегистров Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		ИспользуемыйИндексСтраницы = СтрокаСервиса.ИндексСтраницыРегистра;
		
		// Копируем только данные по этому индексу.
		ИДДокИндСтраницыИсточника = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИспользуемыйИндексСтраницы);
		
		ОтборПоИДДокИндСтраницы = Новый Структура("ИДДокИндСтраницы");
		ОтборПоИДДокИндСтраницы.ИДДокИндСтраницы = ИДДокИндСтраницыИсточника;
		
		Выборка = РабочийРегистр.Выбрать(ОтборПоИДДокИндСтраницы);
		
		Пока Выборка.Следующий() Цикл
		
			// Не активные записи игнорируем - они "удаленные".
			Если НЕ Выборка.Активно Тогда						
			    Продолжить;		
			КонецЕсли;
			
			ИндексСтроки   = Выборка.ИндексСтроки;
			
			// Расчет по строке.
			ЗаполнитьЗначенияСвойств(ЗначениеРесурсовДо, Выборка);
			ЗаполнитьЗначенияСвойств(ЗначениеРесурсовПосле, Выборка);
		
			ОбъектОтчета.Расчет(ИдГруппы, ЗначениеРесурсовПосле);
			
			// Сравним - чтобы не записывать лишний раз, ибо запись регистра требует времени.
			НужноЗаписать = Ложь;
			Для Каждого ЭлементСтруктуры Из ЗначениеРесурсовДо Цикл
			
				Если ЗначениеРесурсовПосле[ЭлементСтруктуры.Ключ] <> ЭлементСтруктуры.Значение Тогда
				    НужноЗаписать = Истина;
					Прервать;			
				КонецЕсли; 
			
			КонецЦикла; 
			
			Если НужноЗаписать Тогда
				
				Запись = Выборка.ПолучитьМенеджерЗаписи();
				ЭтоПервоеРедактирование = ЭтоПервоеРедактированиеЗаписиРегистра(ДокументСсылкаАлкоОтчет, ИмяРабочегоРегистра, 
														ИспользуемыйИндексСтраницы, ИндексСтроки);
				Если ЭтоПервоеРедактирование Тогда
				
					НачальноеЗначение = ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(Запись, ИмяРабочегоРегистра);
					// Пишем в журнал как "Редактирование".
					Ресурсы = Новый Структура;
					Ресурсы.Вставить("НачальноеЗначение", НачальноеЗначение);	
				    ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРабочегоРегистра, ИспользуемыйИндексСтраницы, ИндексСтроки, "Редактирование", Ресурсы);
					
				КонецЕсли; 
								
			    ЗаполнитьЗначенияСвойств(Запись, ЗначениеРесурсовПосле);
				Запись.Записать();
								
			КонецЕсли; 
			
			// Собственно суммируем итоги.
			Если МассивРезультатов[ИндексСтраницы].Количество() > 0 Тогда
				Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
				
					ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
					
					КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + ЗначениеРесурсовПосле[ИмяКонтролируемогоПоля];
					
				КонецЦикла;
			КонецЕсли;
			
			КолОтработанных = КолОтработанных + 1;
						 		
			// Пишем блок информирования о проценте выполнения и запись набора.
			Если КолОтработанных % КолВБлокеЗаписей = 0 Тогда
							
				Если ВсегоСтрок > 0 Тогда
					
					СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоСтрок);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Если ВсегоСтрок > 0 Тогда
					
			СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоСтрок);
					
		КонецЕсли;
		
	КонецЦикла;
		
	СтруктураСведенийОтчета.Вставить("МассивРезультатов", МассивРезультатов);	
	СтруктураСведенийОтчета.Вставить("ВсегоСтрок", ВсегоСтрок);
	СтруктураСведенийОтчета.Вставить("КолОтработанных", КолОтработанных);
			
КонецПроцедуры

Функция ПослеВыполненияЗадания_ПечатьФайлZIP(РезультатПечати)
	
	ПечатьУспешна = Истина;
	
	Если НЕ ТипЗнч(РезультатПечати) = Тип("Структура") Тогда
	    ПечатьУспешна = Ложь;		
	Иначе
		Если НЕ РезультатПечати.Свойство("мПечатныеФормы") Тогда
		    ПечатьУспешна = Ложь;
		ИначеЕсли НЕ ТипЗнч(РезультатПечати.мПечатныеФормы) = Тип("СписокЗначений") Тогда
	        ПечатьУспешна = Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	
	Если ПечатьУспешна Тогда
		
		ТипЭкспорта = РезультатПечати.ТипЭкспорта;
				
		АдресВоВременномХранилищеZIP = РезультатПечати.АдресВоВременномХранилищеZIP;
		ОтчетныйПериодСГодом = РезультатПечати.ОтчетныйПериодСГодом;
		
		// Пронумеруем и подготовим.
		// Имитация формы для процедуры.
		Форма = Новый Структура;
		Форма.Вставить("Заголовок", РезультатПечати.Заголовок);
		Форма.Вставить("УникальныйИдентификатор", РезультатПечати.УникальныйИдентификатор);
		Форма.Вставить("СтруктураРеквизитовФормы", РезультатПечати);			
		
		РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(Форма, , РезультатПечати.СписокПечатаемыхЛистов);
		
		РезультатПечати = Форма.СтруктураРеквизитовФормы;
		// После проставления номеров листы сохранены во временных хранилищах, 
		// а мПечатныеФормы очищены.
		
		СоответсвиеРасширений = Новый Соответствие;
		
		СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.PDF, ".pdf");
		СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.XLS, ".xls");
		СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.XLSX, ".xlsx");
		СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.MXL, ".mxl");			
		СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.HTML, ".html");
		
		Расширение = СоответсвиеРасширений.Получить( ТипЭкспорта );
		
		// Нужно выгрузить готовые страницы в формат.
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапки);
		РазделительПути = ПолучитьРазделительПути();
		
		Файлы_ZIP = Новый ЗаписьZipФайла();
		СтрОтчПериод = Стрзаменить(ОтчетныйПериодСГодом, " ", "");
		ИмяКонечногоФайла = "ALKO11_" + СтрОтчПериод + "(" + Сред(Расширение, 2) + ").zip";
		ИмяФайлаZIP = ИмяВременнойПапки + РазделительПути + ИмяКонечногоФайла;
		Файлы_ZIP.Открыть(ИмяФайлаZIP);
		
		НомерЛиста = 0;
		Для Каждого Элемент Из РезультатПечати.СписокПечатаемыхЛистов Цикл
			
			НомерЛиста = НомерЛиста + 1;
			// Читаем табличный документ.
			ТабДок = ПолучитьИзВременногоХранилища(Элемент.Значение[0]);
			
			// Генерируем уникальное имя.
			ПредставлениеЛиста = "List_" + НомерЛиста;
							
			ИмяФайла = ИмяВременнойПапки + РазделительПути + ПредставлениеЛиста + Расширение;
			// Записываем в формате ТипЭкспорта.
			ТабДок.Записать(ИмяФайла, ТипЭкспорта);
			// Добавляем в архив.
			Файлы_ZIP.Добавить(ИмяФайла, РежимСохраненияПутейZIP.СохранятьОтносительныеПути);
															
		КонецЦикла;					
		
		Файлы_ZIP.Записать();
								
		ФайлZIP = Новый ДвоичныеДанные(ИмяФайлаZIP);
	    // Помещаем его во временное хранилище.
		ПоместитьВоВременноеХранилище(ФайлZIP, АдресВоВременномХранилищеZIP);
		
		// Удаляем временную папку.
		УдалитьФайлы(ИмяВременнойПапки);
						
	    Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура СкопироватьДанныеТаблицАЛКО(ПараметрыДокумента, АдресХранилища) Экспорт
	
	ДокументСсылкаАлкоОтчетПриемник		= ПараметрыДокумента.ДокументСсылкаПриемник;
	ДокументСсылкаАлкоОтчетИсточник		= ПараметрыДокумента.ДокументСсылкаИсточник;
	ИмяФормыОбъекта						= ПараметрыДокумента.ИмяФормыОбъекта;
	
	СписокИменРегистровСведений = ПараметрыДокумента.СписокИменРегистровСведений;	
	СтруктураИдГруппИменРегистровСведений = ПараметрыДокумента.СтруктураИдГруппИменРегистровСведений;
	
	СписокСохранения = ПараметрыДокумента.СписокСохранения;
	
	СервисРегистров 			= Неопределено;
	СервисРегистровУдаленные 	= Неопределено;
	МаксИндексСтраницы = 0;
	
	
    СервисРегистров 			= СписокСохранения.СтруктураСервисРегистров;
	СервисРегистровУдаленные 	= СписокСохранения.СтруктураСервисРегистровУдаленные;
	
	// При копировании информация о удаленных страницах не нужна.	
	Для каждого ЭлементСервисРегистровУдаленные Из СервисРегистровУдаленные Цикл
	
		ТекСервисРегистровУдаленные = ЭлементСервисРегистровУдаленные.Значение;
		ТекСервисРегистровУдаленные.Очистить();
	
	КонецЦикла;			
	
	МаксИндексСтраницы			= СписокСохранения.МаксИндексСтраницы;
	
	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;
	
	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения( , 0, 100);
	
	ПараметрыВосстановления = Новый Структура;
	ПараметрыВосстановления.Вставить("ДокументСсылкаПриемник", ДокументСсылкаАлкоОтчетПриемник);
	ПараметрыВосстановления.Вставить("ДокументСсылкаИсточник", ДокументСсылкаАлкоОтчетИсточник);
	
	ПараметрыВосстановления.Вставить("ЭтоСохранение", Ложь);
	ПараметрыВосстановления.Вставить("ЭтоОтменаИзменений", Ложь);
	
	ПараметрыВосстановления.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);
	
	ПараметрыВосстановления.Вставить("СтруктураСервисРегистров", СервисРегистров);
	ПараметрыВосстановления.Вставить("СтруктураСервисРегистровУдаленные", СервисРегистровУдаленные);
	
	ПараметрыВосстановления.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
	
	ПараметрыВосстановления.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);
	
	ВозвращаемаяСтруктура = Неопределено;
	
	СохранитьВосстановитьКопироватьРегистрыСведенийАЛКО(ПараметрыВосстановления, , ВозвращаемаяСтруктура);
	
	СтруктураРезультата = Новый Структура;	
	
	СтруктураРезультата.Вставить("ВозвращаемаяСтруктура", ВозвращаемаяСтруктура);
	СтруктураРезультата.Вставить("СписокСохранения", СписокСохранения); 	    
	СтруктураРезультата.Вставить("БылИмпорт", Ложь);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура ВосстановитьДанныеТаблицАЛКО(ПараметрыДокумента, АдресХранилища) Экспорт
	
	ДокументСсылкаАлкоОтчетПриемник		= ПараметрыДокумента.ДокументСсылкаПриемник;
	ДокументСсылкаАлкоОтчетИсточник		= ПараметрыДокумента.ДокументСсылкаИсточник;
	ИмяФормыОбъекта						= ПараметрыДокумента.ИмяФормыОбъекта;
	
	СписокИменРегистровСведений = ПараметрыДокумента.СписокИменРегистровСведений;	
	СтруктураИдГруппИменРегистровСведений = ПараметрыДокумента.СтруктураИдГруппИменРегистровСведений;
	
	СписокСохранения = ПараметрыДокумента.СписокСохранения;
	
	ЭтоСтарыйФормат 	= ПараметрыДокумента.ЭтоСтарыйФормат;	
	ЭтоКопирование  	= ПараметрыДокумента.ЭтоКопирование;	
	ЭтоОтменаИзменений 	= ПараметрыДокумента.ЭтоОтменаИзменений;
	
	СервисРегистров 			= Неопределено;
	СервисРегистровУдаленные 	= Неопределено;
	МаксИндексСтраницы = 0;
	
	Если НЕ ЭтоСтарыйФормат Тогда
	    СервисРегистров 			= СписокСохранения.СтруктураСервисРегистров;
		СервисРегистровУдаленные 	= СписокСохранения.СтруктураСервисРегистровУдаленные;
		
		МаксИндексСтраницы			= СписокСохранения.МаксИндексСтраницы;
	Иначе	
	    
		// Сервис регистров - пустые структуры, 
		// поскольку при открытии не могут быть заполненны до восстановления данных.
		СервисРегистров 			= ПараметрыДокумента.СтруктураСервисРегистров;
		СервисРегистровУдаленные 	= ПараметрыДокумента.СтруктураСервисРегистровУдаленные;
	КонецЕсли; 
	
	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;
	
	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения( , 0, 100);
	
		
	Если НЕ (ЭтоКопирование или ЭтоОтменаИзменений или ЭтоСтарыйФормат) Тогда
	    // Делать нечего.
		СтруктураРезультата = Новый Структура;
		
		ВозвращаемаяСтруктура = Новый Структура;
		ВозвращаемаяСтруктура.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		ВозвращаемаяСтруктура.Вставить("СервисРегистров", СервисРегистров);
		ВозвращаемаяСтруктура.Вставить("СервисРегистровУдаленные", СервисРегистровУдаленные);
		
		СтруктураРезультата.Вставить("ВозвращаемаяСтруктура", ВозвращаемаяСтруктура);
		СтруктураРезультата.Вставить("СписокСохранения", СписокСохранения);
		СтруктураРезультата.Вставить("БылИмпорт", Ложь);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
		
		Возврат;
	
	КонецЕсли; 
	
	Если ЭтоКопирование Тогда
		
	    // На всякий случай надо проверить - возможно отчет-источник был закрыт без сохранения изменений.
		// В этом случае сначала надо восстановить регистры отчета источника.
		Если ЖурналНеПуст(ДокументСсылкаАлкоОтчетИсточник) Тогда
			
			ПараметрыДокИсточника = Новый Структура;
			
			ПараметрыДокИсточника.Вставить("ДокументСсылкаИсточник", ДокументСсылкаАлкоОтчетИсточник);
			ПараметрыДокИсточника.Вставить("ДокументСсылкаПриемник", ДокументСсылкаАлкоОтчетИсточник);
			
			ПараметрыДокИсточника.Вставить("ИмяФормыОбъекта", ИмяФормыОбъекта);
			
			ПараметрыДокИсточника.Вставить("СписокСохранения", СписокСохранения);
			
			ПараметрыДокИсточника.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);
			ПараметрыДокИсточника.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
			
			// Сервис регистров - пустые структуры, 
			// поскольку при открытии не могут быть заполненны до восстановления данных.
			ПараметрыДокИсточника.Вставить("СтруктураСервисРегистров", ПараметрыДокумента.СтруктураСервисРегистров);
			ПараметрыДокИсточника.Вставить("СтруктураСервисРегистровУдаленные", ПараметрыДокумента.СтруктураСервисРегистровУдаленные);
			
		    ПараметрыДокИсточника.Вставить("ЭтоКопирование", Ложь);
			ПараметрыДокИсточника.Вставить("ЭтоСтарыйФормат", Ложь);
			ПараметрыДокИсточника.Вставить("ЭтоОтменаИзменений", Истина);
			
			ПараметрыДокИсточника.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);
			
			ВосстановитьДанныеТаблицАЛКО(ПараметрыДокИсточника, АдресХранилища);
			
			// После восстановления в журнале зафиксирован МаксИндексСтраницы,
			// записывать данные отчета источника не надо.
			
			// Очищаем хранимые данные в хранилище. 
			АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, АдресХранилища);
			// Нужно очистить ПараметрыДокумента.СтруктураСервисРегистров - они могли быть изменены
			// На всякий случай удалим все из СервисРегистров в СервисРегистровУдаленные.
			Для Каждого ИмяРегистраСведений Из СписокИменРегистровСведений Цикл
				
				ИмяРегистра 	= ИмяРегистраСведений.Значение;
				
				СервисРегистровГруппы 			= ПараметрыДокумента.СтруктураСервисРегистров[ИмяРегистра];
				СервисРегистровГруппыУдаленные 	= ПараметрыДокумента.СтруктураСервисРегистровУдаленные[ИмяРегистра];
								
				СервисРегистровГруппы.Очистить();
				СервисРегистровГруппыУдаленные.Очистить();
				
			КонецЦикла;
			
		КонецЕсли;		
	
	КонецЕсли; 
		
	Если (ЭтоОтменаИзменений или ЭтоКопирование) и (НЕ ЭтоСтарыйФормат) Тогда
	
		ПараметрыВосстановления = Новый Структура;
		ПараметрыВосстановления.Вставить("ДокументСсылкаПриемник", ДокументСсылкаАлкоОтчетПриемник);
		ПараметрыВосстановления.Вставить("ДокументСсылкаИсточник", ДокументСсылкаАлкоОтчетИсточник);
		
		ПараметрыВосстановления.Вставить("ЭтоСохранение", Ложь);
		ПараметрыВосстановления.Вставить("ЭтоОтменаИзменений", ЭтоОтменаИзменений);
		
		ПараметрыВосстановления.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);
		
		// При копировании информация о удаленных страницах не нужна.
		Если ЭтоКопирование Тогда
			Для каждого ЭлементСервисРегистровУдаленные Из СервисРегистровУдаленные Цикл
			
				ТекСервисРегистровУдаленные = ЭлементСервисРегистровУдаленные.Значение;
				ТекСервисРегистровУдаленные.Очистить();
			
			КонецЦикла;			
		КонецЕсли; 
		
		ПараметрыВосстановления.Вставить("СтруктураСервисРегистров", СервисРегистров);
		ПараметрыВосстановления.Вставить("СтруктураСервисРегистровУдаленные", СервисРегистровУдаленные);
		
		ПараметрыВосстановления.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		ПараметрыВосстановления.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);
		
		ВозвращаемаяСтруктура = Неопределено;
		
		СохранитьВосстановитьКопироватьРегистрыСведенийАЛКО(ПараметрыВосстановления, , ВозвращаемаяСтруктура);
		
		СтруктураРезультата = Новый Структура;	
		
		СтруктураРезультата.Вставить("ВозвращаемаяСтруктура", ВозвращаемаяСтруктура);
		СтруктураРезультата.Вставить("СписокСохранения", СписокСохранения); 	    
		СтруктураРезультата.Вставить("БылИмпорт", Ложь);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
		
		Возврат;
		
	КонецЕсли; 
	
	Если ЭтоОтменаИзменений Тогда
	    // Поскольку отчет остался в старом формате - логично предположение о некорректном завершении.
		// Нужно обновить МаксИндексСтраницы из Журнала.
		МаксИндексСтраницы =  ПолучитьМаксИндексСтраницыПоЖурналу(ДокументСсылкаАлкоОтчетПриемник);
	    МаксИндексСтраницы = МаксИндексСтраницы + 1;
	КонецЕсли; 
	
	// Нужно импортировать из данных старого формата.
	СтруктураСведенийОтчета = Новый Структура;
	
	СтруктураСведенийОтчета.Вставить("ИмяФормыОбъекта", 						ИмяФормыОбъекта);
	СтруктураСведенийОтчета.Вставить("СписокСохранения", 						СписокСохранения);
	СтруктураСведенийОтчета.Вставить("СписокИменРегистровСведений", 			СписокИменРегистровСведений);
	СтруктураСведенийОтчета.Вставить("СтруктураИдГруппИменРегистровСведений", 	СтруктураИдГруппИменРегистровСведений);
	СтруктураСведенийОтчета.Вставить("СервисРегистров", 						СервисРегистров);
	СтруктураСведенийОтчета.Вставить("СервисРегистровУдаленные", 				СервисРегистровУдаленные);
	СтруктураСведенийОтчета.Вставить("МаксИндексСтраницы", 						МаксИндексСтраницы);
	
	ИмпортИзДанныхСтарогоФормата(ДокументСсылкаАлкоОтчетПриемник, СтруктураСведенийОтчета);
	
	СтруктураСведенийОтчета.Вставить("СписокСохранения", 						СписокСохранения);
	СтруктураСведенийОтчета.Вставить("СервисРегистров", 						СервисРегистров);
	СтруктураСведенийОтчета.Вставить("СервисРегистровУдаленные", 				СервисРегистровУдаленные);
	СтруктураСведенийОтчета.Вставить("МаксИндексСтраницы", 						МаксИндексСтраницы);
	
		
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
	ВозвращаемаяСтруктура.Вставить("СервисРегистров", СервисРегистров);
	ВозвращаемаяСтруктура.Вставить("СервисРегистровУдаленные", СервисРегистровУдаленные);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ВозвращаемаяСтруктура", ВозвращаемаяСтруктура);
	СтруктураРезультата.Вставить("СписокСохранения", СписокСохранения);
	СтруктураРезультата.Вставить("БылИмпорт", Истина);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);	

КонецПроцедуры

Процедура ОчиститьРегистрыСведенийАЛКООтМусора(ПараметрыДокумента, АдресХранилища) Экспорт

	ДокументСсылкаАлкоОтчет					= ПараметрыДокумента.ДокументСсылка;
	
	ИмяФормыОбъекта							= ПараметрыДокумента.ИмяФормыОбъекта;
		
	СтруктураИдГруппИменРегистровСведений 	= ПараметрыДокумента.СтруктураИдГруппИменРегистровСведений;
		
	СтруктураСервисРегистров				= ПараметрыДокумента.СтруктураСервисРегистров;
	СтруктураСервисРегистровУдаленные		= ПараметрыДокумента.СтруктураСервисРегистровУдаленные;
	
	ВспомогательныйАдрес					= ПараметрыДокумента.ВспомогательныйАдрес;
	
	УдалятьПомеченныеНаУдаление				= ПараметрыДокумента.УдалятьПомеченныеНаУдаление;
	
	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения( , 0, 100);
		
	// Определим общий объем удаляемых строк.
	ВсегоНадоОбработать = 0;
	Для Каждого ЭлементСтруктуры Из СтруктураИдГруппИменРегистровСведений Цикл
	
		ИдГруппы = ЭлементСтруктуры.Ключ;
		ИмяРегистраСведений = ЭлементСтруктуры.Значение;
		
	    СервисРегистров 			= СтруктураСервисРегистров[ИмяРегистраСведений];
		СервисРегистровУдаленные 	= СтруктураСервисРегистровУдаленные[ИмяРегистраСведений];
		
		// Помеченные на удаление строки в действующих страницах.
		Если УдалятьПомеченныеНаУдаление Тогда
		
			Для Каждого СтрокаСервиса Из СервисРегистров Цикл		
				ВсегоНадоОбработать = ВсегоНадоОбработать + СтрокаСервиса.КолвоСтрокПомНаУдаление;
				
				Если СтрокаСервиса.КолвоСтрокПомНаУдаление > 0 Тогда
				    // Нужно переписать изза перенумерации,
					// для упрощения считаем что будем переписывать все оставшиеся после удаления строки.
					ВсегоНадоОбработать = ВсегоНадоОбработать + (СтрокаСервиса.КоличествоСтрок - СтрокаСервиса.КолвоСтрокПомНаУдаление); 
				
				КонецЕсли; 
				
			КонецЦикла;	
		
		КонецЕсли; 
				
		// Строки удаленных страниц.
		Для Каждого СтрокаСервиса Из СервисРегистровУдаленные Цикл		
			ВсегоНадоОбработать = ВсегоНадоОбработать + СтрокаСервиса.КоличествоСтрок;		
		КонецЦикла;
				
	КонецЦикла;
	
	КолОтработанных = 0;
	Для Каждого ЭлементСтруктуры Из СтруктураИдГруппИменРегистровСведений Цикл
	
		ИдГруппы = ЭлементСтруктуры.Ключ;
		ИмяРегистраСведений = ЭлементСтруктуры.Значение;
		
	    СервисРегистров 			= СтруктураСервисРегистров[ИмяРегистраСведений];
		СервисРегистровУдаленные 	= СтруктураСервисРегистровУдаленные[ИмяРегистраСведений];
		
		СтруктураСведенийОтчета = Новый Структура;
		
		СтруктураСведенийОтчета.Вставить("ИмяРегистраСведений", ИмяРегистраСведений);
		СтруктураСведенийОтчета.Вставить("СервисРегистров", СервисРегистров);
		СтруктураСведенийОтчета.Вставить("СервисРегистровУдаленные", СервисРегистровУдаленные);
		СтруктураСведенийОтчета.Вставить("УдалятьПомеченныеНаУдаление", УдалятьПомеченныеНаУдаление);
		СтруктураСведенийОтчета.Вставить("ВсегоНадоОбработать", ВсегоНадоОбработать);
		СтруктураСведенийОтчета.Вставить("КолОтработанных", КолОтработанных);
		СтруктураСведенийОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);
	
		ОчиститьРегистрСведенийАЛКООтМусора(ДокументСсылкаАлкоОтчет, СтруктураСведенийОтчета);
											 
		СтруктураСведенийОтчета.Свойство("СервисРегистров", СервисРегистров);
		СтруктураСведенийОтчета.Свойство("СервисРегистровУдаленные", СервисРегистровУдаленные);		
		СтруктураСведенийОтчета.Свойство("ВсегоНадоОбработать", ВсегоНадоОбработать);
		СтруктураСведенийОтчета.Свойство("КолОтработанных", КолОтработанных);
		
		
	КонецЦикла;
	
	// Поместим в хранилище признак того, что процедура успешно отработала.
	Если НЕ АдресХранилища = Неопределено Тогда
	    АдресХранилища = ПоместитьВоВременноеХранилище(Истина, АдресХранилища);	
	КонецЕсли;

КонецПроцедуры

Процедура ПересчетИтоговАЛКО(ПараметрыДокумента, АдресХранилища) Экспорт

	ДокументСсылкаАлкоОтчет					= ПараметрыДокумента.ДокументСсылка;
	
	ИмяФормыОбъекта							= ПараметрыДокумента.ИмяФормыОбъекта;
	СтруктураРесурсов						= ПараметрыДокумента.СтруктураРесурсов;
	
	СтруктураИдГруппИменРегистровСведений 	= ПараметрыДокумента.СтруктураИдГруппИменРегистровСведений;
	
	СтруктураИдГруппБуферИтогов 			= ПараметрыДокумента.СтруктураИдГруппБуферИтогов;
		
	СервисРегистров 						= ПараметрыДокумента.СтруктураСервисРегистров;
	ВспомогательныйАдрес					= ПараметрыДокумента.ВспомогательныйАдрес;
	
	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения( , 0, 100);
	
	// Посчитаем общее количество обрабатываемых записей.
	ВсегоЗаписей = 0;
	Для Каждого ЭлементСервисРегистров Из СервисРегистров Цикл
	
		СервисРегистровГруппы = ЭлементСервисРегистров.Значение;
		Для Каждого СтрокаСервисРегистровГруппы Из СервисРегистровГруппы Цикл
			
			ЗаписейНаСтранице 		= СтрокаСервисРегистровГруппы.КоличествоСтрок;
			ЗаписейПомНаУдаление 	= СтрокаСервисРегистровГруппы.КолвоСтрокПомНаУдаление;
			ОбрабатываемыхЗаписей = ЗаписейНаСтранице - ЗаписейПомНаУдаление;
			
			ВсегоЗаписей = ВсегоЗаписей + ОбрабатываемыхЗаписей;
			
		КонецЦикла; 
	
	КонецЦикла; 
	
	СтруктураРезультатов = Новый Структура;

	КолОтработанных = 0;
	КолВБлокеЗаписей = 1000;
	Для Каждого ЭлементСтруктуры Из СтруктураИдГруппБуферИтогов Цикл
	
		ИдГруппы = ЭлементСтруктуры.Ключ;
		СписокБуфферИтоговГруппы = ЭлементСтруктуры.Значение; 
		
		МассивРезультатов = Новый Массив; // массив результатов по страницам
		
		// Считать будем в один проход сразу по всем полям Итога.
				    
		СтруктураРесурсовПоГруппе = СтруктураРесурсов[ИдГруппы];
		
		СтруктураСведенийОтчета = Новый Структура;
		
		СтруктураСведенийОтчета.Вставить("ИдГруппы", ИдГруппы);
		СтруктураСведенийОтчета.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
		СтруктураСведенийОтчета.Вставить("СписокБуфферИтоговГруппы", СписокБуфферИтоговГруппы);
		СтруктураСведенийОтчета.Вставить("СтруктураСервисРегистров", СервисРегистров);
		СтруктураСведенийОтчета.Вставить("МассивРезультатов", МассивРезультатов);
		СтруктураСведенийОтчета.Вставить("ИмяФормыОбъекта", ИмяФормыОбъекта);
		СтруктураСведенийОтчета.Вставить("СтруктураРесурсовПоГруппе", СтруктураРесурсовПоГруппе);
		СтруктураСведенийОтчета.Вставить("ВсегоСтрок", ВсегоЗаписей);
		СтруктураСведенийОтчета.Вставить("КолОтработанных", КолОтработанных);
		СтруктураСведенийОтчета.Вставить("КолВБлокеЗаписей", КолВБлокеЗаписей);
		СтруктураСведенийОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);

		ПересчетИтоговПоГруппеАЛКО(ДокументСсылкаАлкоОтчет, СтруктураСведенийОтчета); 
							
		СтруктураСведенийОтчета.Свойство("МассивРезультатов", МассивРезультатов);				
		СтруктураСведенийОтчета.Свойство("КолОтработанных", КолОтработанных);					
							
	    СтруктураРезультатов.Вставить(ИдГруппы, МассивРезультатов);
		
	КонецЦикла;
	
	Если ВсегоЗаписей > 0 Тогда	
		
		СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоЗаписей);
								
	КонецЕсли;
				
	// Поместим в хранилище результат.
	Если НЕ АдресХранилища = Неопределено Тогда
	    АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультатов, АдресХранилища);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВыгрузкуОтчетаАЛКО(ПараметрыДокумента, АдресХранилища) Экспорт

	ИмяФормыОбъекта		 = ПараметрыДокумента.ИмяФормыОбъекта;
	
	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;
	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения( , 0, 100);
		
	// Определим объект Отчета.
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	ДокументСсылкаАлкоОтчет	= ПараметрыДокумента.ДокументСсылка;
	
	ТаблицаСообщений = ОбъектОтчета.ПроверитьВыгрузку(ПараметрыДокумента);
					
	ПредставлениеОшибок = "ОК";
	Если ТаблицаСообщений.Количество() > 0  Тогда
	
		ПредставлениеОшибок = ОбъектОтчета.СформироватьПредставлениеОшибок(ТаблицаСообщений, ИмяФормыОбъекта);
			
	КонецЕсли; 
		
	АдресХранилища = ПоместитьВоВременноеХранилище(ПредставлениеОшибок, АдресХранилища);	
	
КонецПроцедуры

Процедура ВыгрузитьОтчетАЛКО(ПараметрыДокумента, АдресХранилища) Экспорт
	
	ИмяФормыОбъекта		 = ПараметрыДокумента.ИмяФормыОбъекта;
	
	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;
	
	УникальныйИдентификаторФормы = ПараметрыДокумента.УникальныйИдентификаторФормы;
	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения( , 0, 100);
	
	// Определим объект Отчета.
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	
	ДокументСсылкаАлкоОтчет	= ПараметрыДокумента.ДокументСсылка;
		
	ПараметрыВыгрузки = ПараметрыДокумента.ПараметрыВыгрузки;
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИдФайл;
			
	Результат = ОбъектОтчета.ВыгрузитьОтчет(ПараметрыДокумента);
	
	// В Результате либо ТаблицаСообщений если есть ошибки при проверки до выгрузки,
	// либо строка XML выгрузки выгрузки либо имя файла xml.
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
		// В случае имени файла нужно поместить файл в хранилище.
		Если Прав(Результат, 4) = ".tmp" Тогда
			
		    // Результат имя файла.
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Результат);
			АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, АдресХранилища);
			
			ДвоичныеДанныеФайла = Неопределено;
			
			// Считаем текст из файла для формирования документа выгрузки.
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(Результат, "windows-1251");
			
			ТекстВыгрузки = Текст.ПолучитьТекст();
			
			ДокОбъект = ДокументСсылкаАлкоОтчет.ПолучитьОбъект();
	
			КодНалоговогоОргана = ДокОбъект.КодНалоговогоОргана;
			ПериодПо  	        = КонецДня(ДокОбъект.ДатаОкончания);
			Организация         = ДокОбъект.Организация;
			
			
			НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	
			НовыйДок.Дата = ТекущаяДатаСеанса();
			
			НовыйДок.ПериодПо    = ПериодПо;
			НовыйДок.ПредставлениеПериода = РегламентированнаяОтчетность.ПредставлениеПериодаДокументаВыгрузкаРегламентированныхОтчетов(НовыйДок);
			НовыйДок.Организация = Организация;
			НовыйДок.КодНалоговогоОргана = КодНалоговогоОргана;
			
			СтрокаОсновная = НовыйДок.Основная.Добавить();
			СтрокаОсновная.Основание = ДокументСсылкаАлкоОтчет;
			СтрокаОсновная.НомерСтрокиТекстаВыгрузки = 1;
			
			СтрокаВыгрузки = НовыйДок.Выгрузки.Добавить();
			СтрокаВыгрузки.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия401алко;
			СтрокаВыгрузки.ИмяФайла = ИмяФайлаВыгрузки;
			СтрокаВыгрузки.Текст = ТекстВыгрузки;
			
			Если НЕ НовыйДок.ЭтоНовый() Тогда
				НовыйДок.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
			КонецЕсли;
			
			Попытка
				НовыйДок.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
				// Запись события в журнал регистрации для системного администратора.
			    ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись документа Выгрузка регламентированного отчета.'"),
		        						УровеньЖурналаРегистрации.Ошибка,,,
		        						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			КонецПопытки;
		
			СчетчикФайловАлко = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайлов(
													ДокументСсылкаАлкоОтчет.Организация, "СчетчикФайловАлко", ПериодПо);	
	        РегламентированнаяОтчетностьВызовСервера.УстановитьСчетчикВыгруженныхФайлов(
								ДокументСсылкаАлкоОтчет.Организация, СчетчикФайловАлко, "СчетчикФайловАлко", ПериодПо);
			
			УдалитьФайлы(Результат);
		    			
		Иначе
			// Это строка XML выгрузки.
			АдресХранилища = ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ОбработатьСобытие1СОтчетности(
					НСтр("ru = 'Регламентированный отчет. Выгрузка'"), ДокументСсылкаАлкоОтчет);
		Возврат;
			
	КонецЕсли;
	
	// Результат - не имя файла, значит ТаблицаСообщений.
	ПредставлениеОшибок = ОбъектОтчета.СформироватьПредставлениеОшибок(Результат, ИмяФормыОбъекта);
	АдресХранилища = ПоместитьВоВременноеХранилище(ПредставлениеОшибок, АдресХранилища);
	
КонецПроцедуры

Процедура ПечатьОтчетаАЛКО(ПараметрыДокумента, АдресХранилища) Экспорт
	
	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	
	ВидПечати 					= ПараметрыДокумента.ВидПечати;
	
	ВспомогательныйАдрес 		= ПараметрыДокумента.ВспомогательныйАдрес;
	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения( , 0, 100);
	
	// Определим объект Отчета.
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	
	Результат = ОбъектОтчета.ПечатьОтчета(ПараметрыДокумента);
	
	Если ВидПечати = "ПечатьФайлZIP" Тогда
		ПослеВыполненияЗадания_ПечатьФайлZIP(Результат);		
	Конецесли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти
