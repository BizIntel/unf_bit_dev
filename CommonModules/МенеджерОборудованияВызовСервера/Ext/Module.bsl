
#Область ПрограммныйИнтерфейс     

// Возвращает номер версии библиотеки подключаемого оборудования.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.0.1.10";
	
КонецФункции

// Получает ревизию требований для драйверов подключаемого оборудования.
//
Функция РевизияИнтерфейсаДрайверов() Экспорт
	
	РевизияИнтерфейса = 2000;
	Возврат РевизияИнтерфейса;
	
КонецФункции

// Возвращает доступные версии форматов обмена.
//
Функция ДоступныеВерсииФорматовОбмена() Экспорт
	
	ВерсииФорматовОбмена = Новый СписокЗначений();
	ВерсииФорматовОбмена.Добавить(1005, "1.5");
	ВерсииФорматовОбмена.Добавить(1006, "1.6");
	ВерсииФорматовОбмена.Добавить(1007, "1.7");
	Возврат ВерсииФорматовОбмена;
	
КонецФункции

// Функция возвращает список подключенного в справочнике ПО
//
Функция ПолучитьСписокОборудования(ТипыПО = Неопределено, Идентификатор = Неопределено, РабочееМесто = Неопределено) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьСписокОборудования(ТипыПО, Идентификатор, РабочееМесто);
	
КонецФункции

// Функция возвращает по идентификатору устройства его параметры.
//
Функция ПолучитьПараметрыУстройства(Идентификатор) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(Идентификатор);
	
КонецФункции

// Функция возвращает по идентификатору устройства параметры регистрации.
//
Функция ПолучитьПараметрыРегистрацииУстройства(Идентификатор) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьПараметрыРегистрацииУстройства(Идентификатор);
	
КонецФункции

// Процедура предназначена для сохранения параметров устройства
// в реквизит Параметры типа хранилище значения в элементе справочника.
//
Функция СохранитьПараметрыУстройства(Идентификатор, Параметры, ВерсияФорматаОбмена) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыУстройства(Идентификатор, Параметры, ВерсияФорматаОбмена);
	
КонецФункции

// Процедура предназначена для сохранения параметров регистрации устройства
//
Функция СохранитьПараметрыРегистрацииУстройства(Идентификатор, ПараметрыРегистрации) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыРегистрацииУстройства(Идентификатор, ПараметрыРегистрации); 
	
КонецФункции

// Функция возвращает структуру с данными устройства.
//
Функция ПолучитьДанныеУстройства(Идентификатор) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.ПолучитьДанныеУстройства(Идентификатор);

КонецФункции

// Функция возвращает структуру с данными драйвера.
// 
Функция ПолучитьДанныеДрайвера(Идентификатор) Экспорт

	Возврат Справочники.ДрайверыОборудования.ПолучитьДанныеДрайвера(Идентификатор);
 
КонецФункции

// Функция возвращает параметры драйвера по наименованию обработчика.
//
Функция ПолучитьПараметрыДрайвераПоОбработчику(НаименованиеОбработчикаДрайвера) Экспорт

	Результат = Новый Структура;
	
	Для каждого ИмяПеречисления Из Метаданные.Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ЗначенияПеречисления Цикл
		Если НаименованиеОбработчикаДрайвера = ИмяПеречисления.Синоним Тогда
			Результат.Вставить("Имя"            , ИмяПеречисления.Имя);
			Результат.Вставить("Наименование"   , ИмяПеречисления.Синоним);
			Результат.Вставить("ТипОборудования", Перечисления["ТипыПодключаемогоОборудования"][ИмяПеречисления.Комментарий]);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция возвращает из переменной сеанса имя компьютера клиента.
//
Функция ПолучитьРабочееМестоКлиента() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.РабочееМестоКлиента;

КонецФункции

// Функция возвращает список рабочих мест, соответствующих указанному имени компьютера.
//
Функция НайтиРабочиеМестаПоИД(ИдентификаторКлиента) Экспорт
	
	Если Не МенеджерОборудованияВызовСервераПереопределяемый.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РабочиеМеста.Ссылка
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.Код = &Код
	|	И РабочиеМеста.ПометкаУдаления = ЛОЖЬ
	|");
	
	Запрос.УстановитьПараметр("Код", ИдентификаторКлиента);
	СписокКомпьютеров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат СписокКомпьютеров;
	
КонецФункции

// Функция устанавливает в переменную сеанса имя компьютера клиента.
//
Процедура УстановитьРабочееМестоКлиента(РабочееМестоКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.РабочееМестоКлиента = РабочееМестоКлиента;
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Функция получает макет драйвера и сохраняет его во временное хранилище,
// возвращая ссылку на временное хранилище.
Функция ПолучитьМакетССервера(ИмяМакета) Экспорт

	Ссылка = ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет(ИмяМакета));
	Возврат Ссылка;

КонецФункции

// Получает ссылку предопределенного элемента по его полному имени.
//
Функция ПредопределенныйЭлемент(Знач ПолноеИмяПредопределенного) Экспорт
	
	ИмяПредопределенного = ВРег(ПолноеИмяПредопределенного);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяКоллекции = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяТаблицы = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка ИЗ &ПолноеИмяТаблицы ГДЕ ИмяПредопределенныхДанных = &ИмяПредопределенного";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяТаблицы", ИмяКоллекции + "." + ИмяТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяПредопределенного", ИмяПредопределенного);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецФункции

// Функция возвращает доступность сохранение данных пользователя.
//
Функция ПравоДоступаСохранениеДанныхПользователя() Экспорт
	
	Возврат ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
КонецФункции

// Функция возвращает имя перечисления из его метаданных.
//
Функция ПолучитьИмяТипаОборудования(ТипОборудования) Экспорт

	Результат = Неопределено;
	
	МетаОбъект = ТипОборудования.Метаданные();
	Индекс = Перечисления.ТипыПодключаемогоОборудования.Индекс(ТипОборудования);
	Результат = МетаОбъект.ЗначенияПеречисления[Индекс].Имя;

	Возврат Результат;

КонецФункции

// Функция возвращает перечисление по имени.
//
Функция ПолучитьТипОборудования(ТипОборудованияИмя) Экспорт
	
	Попытка
		Результат = Перечисления["ТипыПодключаемогоОборудования"][ТипОборудованияИмя]; 
	Исключение
		Результат = Перечисления.ТипыПодключаемогоОборудования.ПустаяСсылка();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает Тип подключаемого оборудования по ссылке.
//
Функция ПолучитьТипПодключаемогоОборудования(ПодключаемоеОборудование) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодключаемоеОборудование, "ТипОборудования");
	
КонецФункции

// Функция возвращает созданное рабочее место клиента.
//
Функция СоздатьРабочееМестоКлиента(Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	РабочееМесто = Справочники.РабочиеМеста.СоздатьЭлемент();

	РабочееМесто.Код           = Параметры.ИдентификаторКлиента;
	РабочееМесто.ИмяКомпьютера = Параметры.ИмяКомпьютера;


	МенеджерОборудованияКлиентСервер.ЗаполнитьНаименованиеРабочегоМеста(РабочееМесто, ПользователиИнформационнойБазы.ТекущийПользователь());

	РабочееМесто.Записать();

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РабочееМесто.Ссылка;

КонецФункции // СоздатьРабочееМестоКлиентаПоИД()

// Процедура устанавливает значения параметров сеанса, относящихся к подключаемому оборудованию.
//
Процедура УстановитьПараметрыСеансаПодключаемогоОборудования(ИмяПараметра, УстановленныеПараметры) Экспорт

	Если ИмяПараметра = "РабочееМестоКлиента" Тогда
		
		// Если с идентификатором клиента текущего сеанса связано одно рабочее место,
		// то его сразу и запишем в параметры сеанса.
		ТекущееРМ           = Справочники.РабочиеМеста.ПустаяСсылка();
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		СписокРМ = НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если СписокРМ.Количество() = 0 Тогда
			// Будет создано с клиента.
		Иначе
			ТекущееРМ = СписокРМ[0];
		КонецЕсли;
		
		УстановитьРабочееМестоКлиента(ТекущееРМ);
		
		Если ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить("РабочееМестоКлиента");
		Иначе
			УстановленныеПараметры.Добавить("РабочееМестоКлиента");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список оборудования для которого необходима переустановка компоненты.
//
Функция ПолучитьСписокДрайверовДляПереустановки(РабочееМесто) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Список = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПодключаемоеОборудование.ДрайверОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто 
	|	И ПодключаемоеОборудование.ТребуетсяПереустановка");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура("ДрайверОборудования, ДанныеДрайвера", Выборка.ДрайверОборудования, ПолучитьДанныеДрайвера(Выборка.ДрайверОборудования)); 
		Список.Добавить(Строка);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Возвращает список оборудования для которого необходима установка компоненты.
//
Функция ПолучитьСписокДрайверовДляУстановки(РабочееМесто) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Список = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПодключаемоеОборудование.ДрайверОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто 
	|	И ПодключаемоеОборудование.ТребуетсяУстановка");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура("ДрайверОборудования, ДанныеДрайвера", Выборка.ДрайверОборудования, ПолучитьДанныеДрайвера(Выборка.ДрайверОборудования)); 
		Список.Добавить(Строка);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
КонецПроцедуры

// Устанавливает признак необходимости переустановки оборудования для подключаемого оборудования на рабочем месте.
//
Процедура УстановитьПризнакПереустановкиДрайвера(РабочееМесто, ДрайверОборудования, Признак) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ  
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И ПодключаемоеОборудование.ДрайверОборудования = &ДрайверОборудования
	|	И НЕ ПодключаемоеОборудование.ТребуетсяПереустановка = &ТребуетсяПереустановка"); 
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ДрайверОборудования", ДрайверОборудования);
	Запрос.УстановитьПараметр("ТребуетсяПереустановка", Признак);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяПереустановка = Признак;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак необходимости переустановки оборудования для подключаемого оборудования.
//
Процедура УстановитьПризнакПереустановкиДрайвераДляОборудования(ПодключаемоеОборудование, Признак) Экспорт
	
	УстановитьПризнакПереустановкиДрайвера(ПодключаемоеОборудование.РабочееМесто, ПодключаемоеОборудование.ДрайверОборудования, Признак);
	
КонецПроцедуры

// Устанавливает признак необходимости установки оборудования для подключаемого оборудования на рабочем месте.
//
Процедура УстановитьПризнакУстановкиДрайвера(РабочееМесто, ДрайверОборудования, Признак) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ  
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И ПодключаемоеОборудование.ДрайверОборудования = &ДрайверОборудования
	|	И НЕ ПодключаемоеОборудование.ТребуетсяУстановка = &ТребуетсяУстановка"); 
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ДрайверОборудования", ДрайверОборудования);
	Запрос.УстановитьПараметр("ТребуетсяУстановка", Признак);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяУстановка = Признак;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет пользовательские настройки подключаемого оборудования.
//
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт
		
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Элемент Из СписокНастроек Цикл
		ХранилищеОбщихНастроек.Сохранить("ПользовательскиеНастройкиПодключаемогоОборудования", Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
		
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Производит разложение данных дорожек магнитной карты по шаблонам.
// На входе:
// ДанныеДорожек - массив строк. Значения полученные из дорожек.
// ПараметрыДорожек - массив структур содержащих параметры настройки устройства.
//  * Использовать, булево - признак использования дорожки.
//  * НомерДорожки, число - порядковый номер дорожки 1-3.
//
// На выходе:
// Массив структур содержащих расшифрованные данные по всем подходящим шаблонам со ссылкой на них.
// * Массив - шаблоны
//   * Структура - данные шаблона.
//     - Шаблон, СправочникСсылка.ШаблоныМагнитныхКарт
//     - ДанныеДорожек, массив полей всех дорожек.
//       * Структура - данные поля.
//         - Поле
//         - ЗначениеПоля
Функция РасшифроватьКодМагнитнойКарты(ДанныеДорожек, ПараметрыДорожек) Экспорт
	
	Возврат Справочники.ШаблоныМагнитныхКарт.РасшифроватьКодМагнитнойКарты(ДанныеДорожек, ПараметрыДорожек);
	
КонецФункции

// Получить таблицу товаров из XML структуры для ТСД.
//
Функция ПолучитьТаблицуТоваровТСД(ДанныеЗагрузки, АлкогольнаяПродукция) Экспорт
	
	Результат = Новый Массив();
	
	АлкогольнаяПродукция = Ложь;
	
	Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеЗагрузки);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "Table" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "Record" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					ПозицияДанных = Новый Структура();
					ПозицияДанных.Вставить("Штрихкод"  , ЧтениеXML.ЗначениеАтрибута("BarCode"));
					ПозицияДанных.Вставить("Количество", ЧтениеXML.ЗначениеАтрибута("Quantity"));
					// Атрибуты для поддержки интеграции с ЕГАИС.
					ШтрихкодМаркиАлкогольнойПродукции = ЧтениеXML.ЗначениеАтрибута("AlcoholExciseStamp");
					Если Не ПустаяСтрока(ШтрихкодМаркиАлкогольнойПродукции) Тогда
						АлкогольнаяПродукция = Истина;
					КонецЕсли;
					ПозицияДанных.Вставить("ШтрихкодМаркиАлкогольнойПродукции", ШтрихкодМаркиАлкогольнойПродукции);
					ПозицияДанных.Вставить("НаименованиеАлкогольнойПродукции" , ЧтениеXML.ЗначениеАтрибута("AlcoholName"));
					ПозицияДанных.Вставить("СерийныйНомерАлкогольнойПродукции", ЧтениеXML.ЗначениеАтрибута("AlcoholSerialNumber"));
					ПозицияДанных.Вставить("КодВидаАлкогольнойПродукции", ЧтениеXML.ЗначениеАтрибута("AlcoholKindCode"));
					ПозицияДанных.Вставить("КодАлкогольнойПродукции"    , ЧтениеXML.ЗначениеАтрибута("AlcoholCode"));
					ПозицияДанных.Вставить("ЕмкостьТары"                , ЧтениеXML.ЗначениеАтрибута("AlcoholContainerSize"));
					ПозицияДанных.Вставить("Крепость"                   , ЧтениеXML.ЗначениеАтрибута("AlcoholStrength"));
					ПозицияДанных.Вставить("ИННПроизводителя"           , ЧтениеXML.ЗначениеАтрибута("VendorINNCode"));
					ПозицияДанных.Вставить("КПППроизводителя"           , ЧтениеXML.ЗначениеАтрибута("VendorKPPCode"));
					Результат.Добавить(ПозицияДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сформировать таблицу товаров в XML структуре для ТСД.
//
Функция СформироватьТаблицуТоваровТСД(ДанныеЗагрузки, ПолнаяВыгрузка) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	ЗаписьXML.ЗаписатьАтрибут("FullLoad", XMLСтрока(ПолнаяВыгрузка));
	
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("BarCode"                      , XMLСтрока(Позиция[0].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Name"                         , XMLСтрока(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("UnitOfMeasurement"            , XMLСтрока(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("CharacteristicOfNomenclature" , XMLСтрока(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("SeriesOfNomenclature"         , XMLСтрока(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quality"                      , XMLСтрока(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price"                        , XMLСтрока(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quantity"                     , XMLСтрока(Позиция[7].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Article"                     , XMLСтрока(Позиция[8].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Alcohol"                     , XMLСтрока(Позиция[9].Значение));
		Если Позиция[9].Значение = Истина Тогда
			ЗаписьXML.ЗаписатьАтрибут("AlcoholExcisable"     , XMLСтрока(Позиция[10].Значение));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholKindCode"      , XMLСтрока(Позиция[11].Значение));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholCode"          , XMLСтрока(Позиция[12].Значение));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholContainerSize" , XMLСтрока(Позиция[13].Значение));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholStrength"      , XMLСтрока(Позиция[14].Значение));
			ЗаписьXML.ЗаписатьАтрибут("VendorINNCode"        , XMLСтрока(Позиция[15].Значение));
			ЗаписьXML.ЗаписатьАтрибут("VendorKPPCode"        , XMLСтрока(Позиция[16].Значение));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//
Функция ПодготовитьПакетыДляЗагрузкиТСД(ТаблицаВыгрузки, РазмерПакета, ПолнаяВыгрузка) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();
	МассивТоваров = Новый Массив;
	
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		МассивТоваров.Добавить(Позиция);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьТаблицуТоваровТСД(МассивТоваров, ПолнаяВыгрузка);
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

// Сформировать таблицу товаров в XML структуре для весов с печатью этикеток.
//
Функция СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(ДанныеЗагрузки) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("PLU"          , XMLСтрока(Позиция[0].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Code"         , XMLСтрока(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Name"         , XMLСтрока(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price"        , XMLСтрока(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Description"  , XMLСтрока(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("ShelfLife"    , XMLСтрока(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("IsWeightGoods", XMLСтрока(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//      
Функция ПодготовитьПакетыДляЗагрузкиВВесыСПечатьюЭтикеток(ТаблицаВыгрузки, РазмерПакета) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();
	МассивТоваров = Новый Массив;
	
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		ВремНаименование = ?(Позиция.Свойство("Номенклатура"), Позиция.Номенклатура, "");
		ВремНаименование = ?(Позиция.Свойство("Наименование"), Позиция.Наименование, ВремНаименование);
		Если Позиция.Свойство("НаименованиеПолное") И Не ПустаяСтрока(Позиция.НаименованиеПолное) Тогда
			ВремНаименование = Позиция.НаименованиеПолное;
		КонецЕсли;
		
		СтрокаМассиваТоваров = Новый СписокЗначений; 
		СтрокаМассиваТоваров.Добавить(Число(Позиция.PLU));
		СтрокаМассиваТоваров.Добавить(Число(Позиция.Код));
		СтрокаМассиваТоваров.Добавить(ВремНаименование);
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("Цена"), Позиция.Цена, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ОписаниеТовара"), Позиция.ОписаниеТовара, ""));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("СрокХранения"), Позиция.СрокХранения, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ВесовойТовар"), Позиция.ВесовойТовар, Истина));
		МассивТоваров.Добавить(СтрокаМассиваТоваров);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(МассивТоваров);
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

// Сформировать таблицу параметров в XML для операции с ФН.
//
Функция СформироватьТаблицуПараметровДляОперацииФН(СтруктураПараметров) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ЗаписьXML.ЗаписатьАтрибут("KKTNumber"          , XMLСтрока(СтруктураПараметров.РегистрационныйНомерККТ));
	ЗаписьXML.ЗаписатьАтрибут("OFDVATIN"           , XMLСтрока(СтруктураПараметров.ОрганизацияОФДИНН));
	ЗаписьXML.ЗаписатьАтрибут("OFDOrganizationName", XMLСтрока(СтруктураПараметров.ОрганизацияОФДНазвание));
	ЗаписьXML.ЗаписатьАтрибут("OrganizationName"   , XMLСтрока(СтруктураПараметров.ОрганизацияНазвание));
	ЗаписьXML.ЗаписатьАтрибут("VATIN"              , XMLСтрока(СтруктураПараметров.ОрганизацияИНН));
	ЗаписьXML.ЗаписатьАтрибут("AddressSettle"      , XMLСтрока(СтруктураПараметров.АдресУстановкиККТ));
	ЗаписьXML.ЗаписатьАтрибут("TaxVariant"         , XMLСтрока(СтруктураПараметров.КодыСистемыНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("TaxVarinat"         , XMLСтрока(СтруктураПараметров.КодыСистемыНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("OfflineMode"        , XMLСтрока(СтруктураПараметров.ПризнакАвтономногоРежима));
	ЗаписьXML.ЗаписатьАтрибут("DataEncryption"     , XMLСтрока(СтруктураПараметров.ПризнакШифрованиеДанных));
	ЗаписьXML.ЗаписатьАтрибут("ServiceSign"        , XMLСтрока(СтруктураПараметров.ПризнакРасчетовЗаУслуги));
	ЗаписьXML.ЗаписатьАтрибут("BSOSing"            , XMLСтрока(СтруктураПараметров.ПризнакФормированияТолькоБСО));
	ЗаписьXML.ЗаписатьАтрибут("CalcOnlineSign"     , XMLСтрока(СтруктураПараметров.ПризнакРасчетовТолькоВИнтернет));
	ЗаписьXML.ЗаписатьАтрибут("AutomaticMode"      , XMLСтрока(СтруктураПараметров.ПризнакАвтоматическогоРежима));
	ЗаписьXML.ЗаписатьАтрибут("AutomaticNumber"    , XMLСтрока(СтруктураПараметров.НомерАвтоматаДляАвтоматическогоРежима));
	ЗаписьXML.ЗаписатьАтрибут("ReasonCode"         , XMLСтрока(СтруктураПараметров.КодПричиныПеререгистрации));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Получить таблицу меток RFID.
//
Функция ПолучитьТаблицуМетокRFID(ДанныеМеток) Экспорт
	
	Результат = Новый Массив();
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(ДанныеМеток);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.Имя = "Table" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Пока ЧтениеXML.Прочитать() Цикл  
			Если ЧтениеXML.Имя = "Tag" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				
				// Получение банков памяти считанной метки.
				TID = ЧтениеXML.ЗначениеАтрибута("TID");
				EPC = ЧтениеXML.ЗначениеАтрибута("EPC");
				USER = ЧтениеXML.ЗначениеАтрибута("USER");
				// Декодирование банка EPC по формату SGTIN.  
				ПозицияДанных = МенеджерОборудованияКлиентСервер.ДекодированиеДанныхSGTIN(EPC);
				ПозицияДанных.Вставить("TID" , TID);  // Добавляем в структура значения TID чипа метки.
				ПозицияДанных.Вставить("USER", USER); // Добавляем в структура значения банка USER.
				ПозицияДанных.Вставить("UserMemory", МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВСтроку(USER));
				
				Результат.Добавить(ПозицияДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция получает значение атрибута текущего элемента.
//
Функция ПрочитатьАтрибут(ЧтениеXML, ИмяАтрибута, ЗначениеАтрибута)
	
	Значение = ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута);
	
	Если Значение = Неопределено Тогда
		ЗначениеАтрибута = Неопределено;
		Возврат Ложь;
	Иначе
		ЗначениеАтрибута = XMLЗначение(Тип("Строка"), Значение);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке)
	
	Попытка
		Результат = ЧтениеXML.Прочитать();
	Исключение
		ТекстСообщенияОбОшибке = НСтр("ru='При чтении XML-описания макета произошла ошибка.'");
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Процедура записывает значение атрибута текущего элемента.
//
Процедура ЗаписатьАтрибутЭлемента(ЗаписьXML, ИмяАтрибута, ЗначениеАтрибута, ФорматнаяСтрока="ЧРД=.; ЧН=0; ЧГ=0; БЛ=false; БИ=true")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) ИЛИ ТипЗнч(ЗначениеАтрибута)=Тип("Число") ИЛИ ИмяАтрибута="Value" Тогда
		ЗаписьXML.ЗаписатьАтрибут(ИмяАтрибута, XMLСтрока(Формат(ЗначениеАтрибута, ФорматнаяСтрока)));
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует структуру с описанием макета.
//
Функция ПолучитьОписаниеМакета(Источник, СообщениеОбОшибке, Результат) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Поля", Новый Массив);

	ЧтениеXML = Новый ЧтениеXML();
	ПараметрыЧтения = Новый ПараметрыЧтенияXML("1.0");
	ЧтениеXML.УстановитьСтроку(Источник, ПараметрыЧтения);

	ТекстСообщенияОбОшибке = "";
	
	Пока ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке) Цикл

		ЗначениеАтрибута = Неопределено;

		Если ЧтениеXML.Имя="Formatting" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда			

			Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда				
				Результат.Вставить("Ширина", Число(ЗначениеАтрибута));				
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Width элемента Formatting произошла ошибка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда				
				Результат.Вставить("Высота", Число(ЗначениеАтрибута));				
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Height элемента Formatting произошла ошибка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда				
				Результат.Вставить("Ориентация", Число(ЗначениеАтрибута));				
			Иначе				
				Результат.Вставить("Ориентация", 0);				
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Scale", ЗначениеАтрибута) Тогда
				Результат.Вставить("Масштаб", Число(ЗначениеАтрибута));
			Иначе
				Результат.Вставить("Масштаб", 1);
			КонецЕсли;
			
		ИначеЕсли (ЧтениеXML.Имя="Text" ИЛИ ЧтениеXML.Имя="Barcode" ИЛИ ЧтениеXML.Имя="Image" ИЛИ ЧтениеXML.Имя="UserData") И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда

			НовоеПоле = Новый Структура;			
			НовоеПоле.Вставить("Тип", ЧтениеXML.Имя);			

			Если ПрочитатьАтрибут(ЧтениеXML, "FieldName", ЗначениеАтрибута) Тогда				
				НовоеПоле.Вставить("Наименование", ЗначениеАтрибута);				
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FieldName элемента UserData произошла ошибка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если ПрочитатьАтрибут(ЧтениеXML, "TypeFill", ЗначениеАтрибута) Тогда

				Если ЗначениеАтрибута=Неопределено Тогда					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута TypeFill элемента UserData произошла ошибка.'");
					Возврат Ложь;					
				КонецЕсли;

				НовоеПоле.Вставить("ТипЗаполнения", ЗначениеАтрибута);

				Если ЗначениеАтрибута="Parameter" Тогда					
					Если ПрочитатьАтрибут(ЧтениеXML, "ValueDefault", ЗначениеАтрибута) Тогда						
						НовоеПоле.Вставить("ЗначениеПоУмолчанию", ЗначениеАтрибута);						
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда

						Если ЗначениеАтрибута=Неопределено Тогда							
							СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Value элемента UserData произошла ошибка.'");
							Возврат Ложь;							
						Иначе							
							НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
						КонецЕсли;

					Иначе						
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Value элемента UserData произошла ошибка.'");
						Возврат Ложь;						
					КонецЕсли;

				Иначе

					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
					КонецЕсли;

				КонецЕсли;
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута TypeFill элемента UserData произошла ошибка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если НовоеПоле.Тип<>"UserData" Тогда				

				Если ПрочитатьАтрибут(ЧтениеXML, "Left", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Лево", Число(ЗначениеАтрибута));					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Left элемента Text произошла ошибка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Top", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Верх", Число(ЗначениеАтрибута));					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Top элемента Text произошла ошибка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Право", НовоеПоле.Лево + Число(ЗначениеАтрибута) - 1);					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Width элемента Text произошла ошибка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Низ", НовоеПоле.Верх + Число(ЗначениеАтрибута) - 1);					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Height элемента Text произошла ошибка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Ориентация", Число(ЗначениеАтрибута));					
				КонецЕсли;				

				Если НовоеПоле.Тип="Text" Тогда

					Если ПрочитатьАтрибут(ЧтениеXML, "FontName", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ИмяШрифта", ЗначениеАтрибута);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("РазмерШрифта", Число(ЗначениеАтрибута));
					Иначе
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FontSize элемента Text произошла ошибка.'");
						Возврат Ложь;
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "FontStyle", ЗначениеАтрибута) Тогда
						ЗначениеСтильШрифта = ЗначениеАтрибута;
						НовоеПоле.Вставить("Жирный", Найти(ЗначениеСтильШрифта, "Bold")>0);
						НовоеПоле.Вставить("Наклонный", Найти(ЗначениеСтильШрифта, "Italic")>0);
						НовоеПоле.Вставить("Подчеркивание",  Найти(ЗначениеСтильШрифта, "Underline")>0);
						НовоеПоле.Вставить("Зачеркивание", Найти(ЗначениеСтильШрифта, "Strikeout")>0);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "Align", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоГоризонтали", ЗначениеАтрибута);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "VAlign", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоВертикали", ЗначениеАтрибута);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "Multiline", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Многострочность", ЗначениеАтрибута);
					КонецЕсли;

				ИначеЕсли НовоеПоле.Тип="Barcode" Тогда

					Если ПрочитатьАтрибут(ЧтениеXML, "Type", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ТипШтрихкода", ЗначениеАтрибута);
					Иначе
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Type элемента Barcode произошла ошибка.'");
						Возврат Ложь;
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "PrintHRI", ЗначениеАтрибута) Тогда						
						НовоеПоле.Вставить("ПодписьШтрихкода", ЗначениеАтрибута);
						ПодписьШтрихкода = ЗначениеАтрибута;						
					Иначе						
						ПодписьШтрихкода = Истина;						
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда

						Если ПодписьШтрихкода И ЗначениеАтрибута=Неопределено Тогда							
							СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FontSize элемента Barcode произошла ошибка. При значении атрибута PrintHRI = True указание значения атрибута FontSize обязательно!'");
							Возврат Ложь;							
						КонецЕсли;

						НовоеПоле.Вставить("РазмерШрифтаПодписи", Число(ЗначениеАтрибута));

					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "CheckSymbol", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("КонтрольныйСимвол", ЗначениеАтрибута);
					КонецЕсли;

				КонецЕсли;

				Если НовоеПоле.Тип = "Text" ИЛИ НовоеПоле.Тип = "Image" Тогда

					Если ПрочитатьАтрибут(ЧтениеXML, "Border", ЗначениеАтрибута) Тогда
						ЗначениеBorder = ЗначениеАтрибута;
						НовоеПоле.Вставить("РамкаСлева", Найти(ЗначениеBorder, "Left")>0);
						НовоеПоле.Вставить("РамкаСверху", Найти(ЗначениеBorder, "Top")>0);
						НовоеПоле.Вставить("РамкаСправа",  Найти(ЗначениеBorder, "Right")>0);
						НовоеПоле.Вставить("РамкаСнизу", Найти(ЗначениеBorder, "Bottom")>0);

						Если ЗначениеЗаполнено(ЗначениеBorder) Тогда							

							Если ПрочитатьАтрибут(ЧтениеXML, "BorderStyle", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТипРамки", ЗначениеАтрибута);
							КонецЕсли;

							Если ПрочитатьАтрибут(ЧтениеXML, "BorderWidth", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТолщинаРамки", Число(ЗначениеАтрибута));
							КонецЕсли;

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			Если НовоеПоле.Тип="UserData" ИЛИ НовоеПоле.Тип="Text" Тогда
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Format", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Формат", ЗначениеАтрибута);
				КонецЕсли;
				
			КонецЕсли;
			
			Результат.Поля.Добавить(НовоеПоле);

		КонецЕсли;

	КонецЦикла;

	Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
		СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция формирует текст XML для передачи его принтеру этикеток.
//
Функция СформироватьДанныеДляПринтераЭтикеток(МассивЭтикеток, МакетЭтикетки) Экспорт
	
	ФорматыПолей = Новый Структура;
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");

	Если ЗначениеЗаполнено(МакетЭтикетки) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");

		Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Ширина);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Высота);
		Иначе
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Высота);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Ширина);
		КонецЕсли;

		Для Каждого ТекЭлемент Из МакетЭтикетки.Поля Цикл

			ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);

			Если ТекЭлемент.Тип <> "UserData" Тогда
				
				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Верх-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Ширина - ТекЭлемент.Право);
				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Высота - ТекЭлемент.Низ);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Ширина - ТекЭлемент.Право);
				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Высота - ТекЭлемент.Низ);
				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Лево-1);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево+1);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Право - ТекЭлемент.Лево+1);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация <> 0 Тогда

					Если ТекЭлемент.Свойство("Ориентация") Тогда

						Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
							ОриентацияПоля = Число(ТекЭлемент.Ориентация);
						Иначе
							ОриентацияПоля = 0;
						КонецЕсли;

					Иначе
						ОриентацияПоля = 0;
					КонецЕсли;

					НовоеЗначениеОриентации = ОриентацияПоля + Число(МакетЭтикетки.Ориентация);
					НовоеЗначениеОриентации = Формат(?(НовоеЗначениеОриентации>270, НовоеЗначениеОриентации-360, НовоеЗначениеОриентации), "ЧГ=0");
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", НовоеЗначениеОриентации);

				Иначе

					Если ТекЭлемент.Свойство("Ориентация") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекЭлемент.ТипЗаполнения = "Parameter" Тогда

				Если ТекЭлемент.Свойство("ЗначениеПоУмолчанию") Тогда
					
					Если ТекЭлемент.Тип = "Text" И ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.ЗначениеПоУмолчанию, ТекЭлемент.Формат);
					Иначе
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.ЗначениеПоУмолчанию);
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Static", Истина);
				Если ТекЭлемент.Тип = "Text" И ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение, ТекЭлемент.Формат);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);
				КонецЕсли;
			КонецЕсли;
			
			Если ТекЭлемент.Тип = "Text" Тогда
				
				Если ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
					ФорматыПолей.Вставить("Формат" + СтрЗаменить(ТекЭлемент.Наименование, "-", ""), ТекЭлемент.Формат);
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("ИмяШрифта") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
				КонецЕсли;

				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);

				СтильШрифта = "";
				
				Если ТекЭлемент.Свойство("Жирный") Тогда
					Если ТекЭлемент.Жирный Тогда
						СтильШрифта = "Bold";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Наклонный") Тогда
					Если ТекЭлемент.Наклонный Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Italic";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Подчеркивание") Тогда
					Если ТекЭлемент.Подчеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Underline";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Зачеркивание") Тогда
					Если ТекЭлемент.Зачеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "StrikeOut";
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);

				ВыравниваниеГоризонтальное = "Left";

				Если ТекЭлемент.Свойство("ПоложениеПоГоризонтали") Тогда

					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоГоризонтали) Тогда
						ВыравниваниеГоризонтальное = ТекЭлемент.ПоложениеПоГоризонтали;
					КонецЕсли;

				КонецЕсли;

				ВыравниваниеВертикальное = "Top";

				Если ТекЭлемент.Свойство("ПоложениеПоВертикали") Тогда

					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоВертикали) Тогда
						ВыравниваниеВертикальное = ТекЭлемент.ПоложениеПоВертикали;
					КонецЕсли;

				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ВыравниваниеГоризонтальное);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ВыравниваниеВертикальное);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					КонецЕсли;

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;

				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;

				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					КонецЕсли;

				КонецЕсли;

				Если ТекЭлемент.Свойство("Многострочность") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
				КонецЕсли;

			ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда

				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);

				Если ТекЭлемент.Свойство("ПодписьШтрихкода") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);

					Если ТекЭлемент.ПодписьШтрихкода Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
					КонецЕсли;

				КонецЕсли;

				Если ТекЭлемент.Свойство("КонтрольныйСимвол") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
				КонецЕсли;	

			КонецЕсли;

			Если ТекЭлемент.Тип = "Text" ИЛИ ТекЭлемент.Тип = "Image" Тогда

				Рамка = "";
				
				Если ТекЭлемент.Свойство("РамкаСлева") Тогда
					Если ТекЭлемент.РамкаСлева Тогда
						Рамка = "Left";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСверху") Тогда
					Если ТекЭлемент.РамкаСверху Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Top";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСправа") Тогда
					Если ТекЭлемент.РамкаСправа Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Right";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСнизу") Тогда
					Если ТекЭлемент.РамкаСнизу Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Bottom";
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Рамка) Тогда
					
					Если МакетЭтикетки.Ориентация = 0 Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Top", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Right", "T1op");
						Рамка=СтрЗаменить(Рамка, "Bottom", "R1ight");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Top", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Right", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Bottom", "T1op");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "T1op");
						Рамка=СтрЗаменить(Рамка, "Top", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Right", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Bottom", "L1eft");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТипРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТолщинаРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
					КонецЕсли;
					
				КонецЕсли;

			КонецЕсли;

			ЗаписьXML.ЗаписатьКонецЭлемента();		

		КонецЦикла;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента("Labels");

	Для Каждого ТекЭтикетка Из МассивЭтикеток Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента("Label");

		Если ТекЭтикетка.Свойство("Количество") Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Quantity", ТекЭтикетка.Количество);
		КонецЕсли;

		Для Каждого ТекПоле Из ТекЭтикетка.Поля Цикл
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекПоле.ИмяПоля);
			Если ФорматыПолей.Свойство("Формат" + СтрЗаменить(ТекПоле.ИмяПоля, "-", "")) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекПоле.Значение, ФорматыПолей["Формат" + СтрЗаменить(ТекПоле.ИмяПоля, "-", "")]);
			Иначе
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекПоле.Значение);
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();

		КонецЦикла;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//
Функция ПодготовитьПакетыДляПринтераЭтикеток(МассивЭтикеток, РазмерПакета, МакетЭтикетки = Неопределено) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();  
	МассивТоваров = Новый Массив;
	
	ПервыйПакет      = Истина;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = МассивЭтикеток.Количество();
	
	Для Каждого Позиция Из МассивЭтикеток Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		МассивТоваров.Добавить(Позиция);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьДанныеДляПринтераЭтикеток(МассивТоваров, ?(ПервыйПакет, МакетЭтикетки, Неопределено));
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
			ПервыйПакет   = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

// Функция формирует XML-описание макета.
//
Функция СохранитьXMLФайл(ШиринаЭтикетки, ВысотаЭтикетки, Ориентация, Поля) Экспорт

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");

	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ШиринаЭтикетки);
	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ВысотаЭтикетки);

	Если ЗначениеЗаполнено(Ориентация) Тогда
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", Ориентация);
	КонецЕсли;

	Для Каждого ТекЭлемент Из Поля Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);

		Если ТекЭлемент.Тип <> "UserData" Тогда
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево + 1);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх + 1);

			Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
			КонецЕсли;
			
		Иначе
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);

		КонецЕсли;

		Если ТекЭлемент.Тип = "Text" Тогда

			Если ЗначениеЗаполнено(ТекЭлемент.ИмяШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);
			СтильШрифта = "";

			Если ТекЭлемент.Жирный Тогда
				СтильШрифта = "Bold";
			КонецЕсли;

			Если ТекЭлемент.Наклонный Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Italic";
			КонецЕсли;

			Если ТекЭлемент.Подчеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Underline";
			КонецЕсли;

			Если ТекЭлемент.Зачеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Strikeout";
			КонецЕсли;

			Если ЗначениеЗаполнено(СтильШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ТекЭлемент.ПоложениеПоГоризонтали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ТекЭлемент.ПоложениеПоВертикали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);

		ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда

			Если ТекЭлемент.Тип = "Barcode" Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);

			Если ТекЭлемент.ПодписьШтрихкода Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
			КонецЕсли;

		КонецЕсли;

		Если ТекЭлемент.Тип = "Text" ИЛИ ТекЭлемент.Тип = "Image" Тогда

			Рамка = "";

			Если ТекЭлемент.РамкаСверху Тогда
				Рамка = "Top";
			КонецЕсли;

			Если ТекЭлемент.РамкаСлева Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Left";
			КонецЕсли;

			Если ТекЭлемент.РамкаСправа Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Right";
			КонецЕсли;

			Если ТекЭлемент.РамкаСнизу Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Bottom";
			КонецЕсли;

			Если ЗначениеЗаполнено(Рамка) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
			КонецЕсли;

		КонецЕсли;

		ЗаписатьАтрибутЭлемента(ЗаписьXML, "TypeFill", ТекЭлемент.ТипЗаполнения);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);

		Если ТекЭлемент.ТипЗаполнения<>"Constant" И ЗначениеЗаполнено(ТекЭлемент.ЗначениеПоУмолчанию) Тогда			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "ValueDefault", ТекЭлемент.ЗначениеПоУмолчанию);
		КонецЕсли;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Функция определяет тип штрихкода по значение кода.
// 
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкода = "";	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	
	Если ДлинаШтрихкода = 0 Тогда
		Возврат ТипШтрихкода;
	КонецЕсли;
	
	Сумма = 0;
	
	Если ДлинаШтрихкода = 14 Тогда // ITF14
		
		Коэффициент = 1; 
		Для Сч = 1 По 13 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если КодСимвола(Штрихкод, 14) = Сумма + 48 Тогда
			ТипШтрихкода = "ITF14";
 		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 13 Тогда // EAN13
		
		EAN13 = Истина;
		Коэффициент = 1;
		Для Сч = 1 По 12 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN13 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		ПроверочныйСимвол = Символ(Сумма + 48);
		Если EAN13 И ПроверочныйСимвол = Прав(Штрихкод, 1) Тогда
			ТипШтрихкода = "EAN13";
		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 8 Тогда // EAN8
		
		EAN8 = Истина;
		Коэффициент = 3;
		Для Сч = 1 По 7 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN8 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если EAN8 И (КодСимвола(Штрихкод, 8) = Сумма + 48) Тогда
			ТипШтрихкода = "EAN8";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипШтрихкода= "" Тогда // CODE39
		
		CODE39 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола <> 32)
				И (ВремКодСимвола < 36 Или ВремКодСимвола > 37)
				И (ВремКодСимвола <> 43)
				И (ВремКодСимвола < 45 Или ВремКодСимвола > 57)
				И (ВремКодСимвола < 65 Или ВремКодСимвола > 90) Тогда
				CODE39 = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE39 Тогда
			ТипШтрихкода = "CODE39";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихкода= ""  Тогда // CODE128
		// CODE128 символы ASCII от 0 до 127 (цифры от «0» до «9», буквы от «A» до «Z» и от «a» до «z») и специальные символы;
		CODE128 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола > 127) Тогда
				CODE128 = Ложь;
			Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE128 Тогда
			ТипШтрихкода = "CODE128";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихкода= "CODE128"  Тогда // EAN128
		// В коде EAN128 регламентирован словарь CODE128 но регламентированы группы кодов.
		Если КодСимвола(Штрихкод, 1) = 40 Тогда
			ТипШтрихкода = "EAN128";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипШтрихкода;
	
КонецФункции

// Функция выполняет формирование изображения штрихкода.
// Параметры: 
//   ПараметрыШтрихкода 
// Возвращаемое значение: 
//   Картинка - Картинка со сформированным штрихкодом или НЕОПРЕДЕЛЕНО.
Функция ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода) Экспорт
	
	ВнешняяКомпонента = МенеджерОборудованияСерверПовтИсп.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	
	Если ВнешняяКомпонента = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка подключения внешней компоненты печати штрихкода!'");
	КонецЕсли;
	
	// Зададим размер формируемой картинки.
	ВнешняяКомпонента.Ширина = Окр(ПараметрыШтрихкода.Ширина);
	ВнешняяКомпонента.Высота = Окр(ПараметрыШтрихкода.Высота);
	
	ВнешняяКомпонента.АвтоТип = Ложь;
	
	Если ПараметрыШтрихкода.ТипКода = 99 Тогда
		ТипШтрихкодаВрем = ОпределитьТипШтрихкода(ПараметрыШтрихкода.Штрихкод);
		Если ТипШтрихкодаВрем = "EAN8" Тогда
			ВнешняяКомпонента.ТипКода = 0;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
			ВнешняяКомпонента.ТипКода = 1;
			// Если код содержит контрольный символ, обязательно указываем.
			ВнешняяКомпонента.СодержитКС = СтрДлина(ПараметрыШтрихкода.Штрихкод) = 13;
		ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
			ВнешняяКомпонента.ТипКода = 2;
		ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
			ВнешняяКомпонента.ТипКода = 3;
		ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
			ВнешняяКомпонента.ТипКода = 4;
		ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
			ВнешняяКомпонента.ТипКода = 11;
		ИначеЕсли ТипШтрихкодаВрем = "QR" Тогда
			ВнешняяКомпонента.ТипКода = 16;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13Addon2" Тогда
			ВнешняяКомпонента.ТипКода = 14;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13Addon5" Тогда
			ВнешняяКомпонента.ТипКода = 15;
		Иначе
			ВнешняяКомпонента.АвтоТип = Истина;
		КонецЕсли;
	Иначе
		ВнешняяКомпонента.АвтоТип = Ложь;
		ВнешняяКомпонента.ТипКода = ПараметрыШтрихкода.ТипКода;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ПрозрачныйФон") Тогда
		ВнешняяКомпонента.ПрозрачныйФон = ПараметрыШтрихкода.ПрозрачныйФон;
	КонецЕсли;
	
	ВнешняяКомпонента.ОтображатьТекст = ПараметрыШтрихкода.ОтображатьТекст;
	
	// Формируем картинку штрихкода.
	ВнешняяКомпонента.ЗначениеКода = ПараметрыШтрихкода.Штрихкод;
	// Угол поворота штрихкода.
	ВнешняяКомпонента.УголПоворота = ?(ПараметрыШтрихкода.Свойство("УголПоворота"), ПараметрыШтрихкода.УголПоворота, 0);
	// Уровень коррекции QR кода (L=0, M=1, Q=2, H=3).
	ВнешняяКомпонента.УровеньКоррекцииQR = ?(ПараметрыШтрихкода.Свойство("УровеньКоррекцииQR"), ПараметрыШтрихкода.УровеньКоррекцииQR, 1);
	
	// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
	Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
		ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
	КонецЕсли;
	
	// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
	Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
		ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
	КонецЕсли;

	Если ПараметрыШтрихкода.Свойство("РазмерШрифта") И (ПараметрыШтрихкода.РазмерШрифта > 0) 
		И (ПараметрыШтрихкода.ОтображатьТекст) И (ВнешняяКомпонента.РазмерШрифта <> ПараметрыШтрихкода.РазмерШрифта) Тогда
		ВнешняяКомпонента.РазмерШрифта = ПараметрыШтрихкода.РазмерШрифта;
	КонецЕсли;
	
	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
	
	// Если картинка сформировалась.
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда
		// Формируем из двоичных данных.
		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

// Функция получает содержание текстовых файлов из временного хранилища.
// Параметры: 
//   ПомещенныеФайлы - массив содержащий элементы типа ОписаниеПередаваемогоФайла, из которых читается содержание.
// Возвращаемое значение: 
//   РезультатЧтения - структура с ключами:
//    - Успешно - булево.
//    - СодержаниеФайлов - массив структур, с ключами ОписаниеПереданногоФайла и ТекстСодержания.
//      или Неопределено, в случае Успешно = Ложь.
//    - ТекстОшибки - строка.
//
Функция ПолучитьСодержаниеТекстовыхФайловИзХранилища(ПомещенныеФайлы, Кодировка) Экспорт
	
	РезультатЧтения = Новый Структура;
	
	РезультатЧтения.Вставить("Успешно", Ложь);
	РезультатЧтения.Вставить("СодержаниеФайлов", Неопределено);
	РезультатЧтения.Вставить("ТекстОшибки", "");
	
	СодержаниеФайлов = Новый Массив;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Для Каждого Файл Из ПомещенныеФайлы Цикл
		
		СтруктураСодержанияФайла = Новый Структура;
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Файл.Хранение);
		
		Попытка
			
			ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
			
			ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, Кодировка);
			ТекстСодержания = ЧтениеТекста.Прочитать();
			
			ЧтениеТекста.Закрыть();
			
			СтруктураСодержанияФайла.Вставить("ОписаниеПереданногоФайла", Файл);
			СтруктураСодержанияФайла.Вставить("ТекстСодержания",          ТекстСодержания);
			
			СодержаниеФайлов.Добавить(СтруктураСодержанияФайла);
			
		Исключение
			
			РезультатЧтения.ТекстОшибки = ОписаниеОшибки();
			Возврат РезультатЧтения;
			
		КонецПопытки;
		
	КонецЦикла;
	
	РезультатЧтения.Успешно = Истина;
	РезультатЧтения.СодержаниеФайлов = СодержаниеФайлов;
	
	Возврат РезультатЧтения;
	
КонецФункции

// Функция выполняет проверку дублирования кодов в массивах групп товаров и товаров подготавливаемых для ККМ-Offline.
// Параметры: 
//   РасширеннаяВыгрузка  - булево, признак расширенной выгрузки.
//   ГруппыТоваров  - массив, список групп товаров.
//   Товары  - массив, список товаров.
//   Коды  - строка, строка в которую через ", " будут перечислены дублирующиеся коды.
// Возвращаемое значение: 
//   Булево - если есть дублирование, возвращает Истина, иначе Ложь.
Функция ПроверитьДублированиеКодов(РасширеннаяВыгрузка, ГруппыТоваров, Товары, Коды) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Количество");
	
	Если РасширеннаяВыгрузка Тогда
		
		Для Каждого ТекГруппа Из ГруппыТоваров Цикл
			ДобавитьЭлементВКоллекцию(ТекГруппа, ТЗ);
		КонецЦикла;
		
		Для Каждого ТекТовар Из Товары Цикл
			ДобавитьКодыТоваров(ТЗ, ТекТовар, "Товар");
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекТовар Из Товары Цикл
			ДобавитьЭлементВКоллекцию(ТекТовар, ТЗ);
		КонецЦикла;
		
	КонецЕсли;
	
	ТЗ.Свернуть("Код", "Количество");
	
	ЕстьДублированиеКодов = Ложь;
	
	ДублирующиесяКоды = "";
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		
		Если ТекСтрока.Количество > 1 Тогда
			
			Если НЕ ЕстьДублированиеКодов Тогда
				ЕстьДублированиеКодов = Истина;
				Коды = Формат(ТекСтрока.Код, "ЧН=0; ЧГ=0");
			Иначе
				Коды = Коды + ", " + Формат(ТекСтрока.Код, "ЧН=0; ЧГ=0");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьДублированиеКодов Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ВыходныеПараметры, СуммаЧека) Экспорт
	
	ПозицииЧека  = ОбщиеПараметры.ПозицииЧека;
	ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат;
	СуммаЧека = 0;
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckPackage");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	ЗаписьXML.ЗаписатьАтрибут("PaymentType"       , XMLСтрока(ТипРасчета));
	
	Если ОбщиеПараметры.Свойство("КодСистемыНалогообложения") И ОбщиеПараметры.КодСистемыНалогообложения <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("TaxVariant"        , XMLСтрока(ОбщиеПараметры.КодСистемыНалогообложения));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ОтправительEmail"), ОбщиеПараметры.ОтправительEmail, "")));
	// Email отправляет средствами 1C
	Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
		ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
	КонецЕсли;
	// SMS отправляет средствами 1C
	Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
		ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "")));
	КонецЕсли;
	
	Если ОбщиеПараметры.Свойство("ВознагражденияАгента") И ОбщиеПараметры.ВознагражденияАгента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("AgentCompensation" , XMLСтрока(ОбщиеПараметры.ВознагражденияАгента));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ТелефонПлатежногоАгента") И ОбщиеПараметры.ТелефонПлатежногоАгента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("AgentPhone" , XMLСтрока(ОбщиеПараметры.ТелефонПлатежногоАгента));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ТелефонОператораПоПриемуПлатежей") И ОбщиеПараметры.ТелефонОператораПоПриемуПлатежей <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("ReceivePaymentsOperatorPhone" , XMLСтрока(ОбщиеПараметры.ТелефонОператораПоПриемуПлатежей));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ТелефонОператораПеревода") И ОбщиеПараметры.ТелефонОператораПеревода <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorPhone" , XMLСтрока(ОбщиеПараметры.ТелефонОператораПеревода));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("АдресОператораПеревода") И ОбщиеПараметры.АдресОператораПеревода <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorAddress" , XMLСтрока(ОбщиеПараметры.АдресОператораПеревода));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ИННОператораПеревода") И ОбщиеПараметры.ИННОператораПеревода <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorVATIN" , XMLСтрока(ОбщиеПараметры.ИННОператораПеревода));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("НаименованиеОператораПеревода") И ОбщиеПараметры.НаименованиеОператораПеревода <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorName" , XMLСтрока(ОбщиеПараметры.НаименованиеОператораПеревода));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ТелефонБанковскогоАгента") И ОбщиеПараметры.ТелефонБанковскогоАгента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("BankAgentPhone" , XMLСтрока(ОбщиеПараметры.ТелефонБанковскогоАгента));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ТелефонБанковскогоСубагента") И ОбщиеПараметры.ТелефонБанковскогоСубагента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("BankSubagentPhone" , XMLСтрока(ОбщиеПараметры.ТелефонБанковскогоСубагента));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ОперацияБанковскогоАгента") И ОбщиеПараметры.ОперацияБанковскогоАгента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("BankAgentOperation" , XMLСтрока(ОбщиеПараметры.ОперацияБанковскогоАгента));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ОперацияБанковскогоСубагента") И ОбщиеПараметры.ОперацияБанковскогоСубагента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("BankSubagentOperation" , XMLСтрока(ОбщиеПараметры.ОперацияБанковскогоСубагента));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ВознагражденияБанковскогоАгента") И ОбщиеПараметры.ВознагражденияБанковскогоАгента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("BankAgentCompensation" , XMLСтрока(ОбщиеПараметры.ВознагражденияБанковскогоАгента));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Табличная часть
	Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
		Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
			ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
			Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
					ЗаписьXML.ЗаписатьАтрибут("Name"      , XMLСтрока(ТекущаяПозиция.Наименование));
					ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
					ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
					ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
					ЗаписьXML.ЗаписатьАтрибут("Tax"       , XMLСтрока(ТекущаяПозиция.СтавкаНДС));
					ЗаписьXML.ЗаписатьКонецЭлемента();
					СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
				ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
					ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ТекущаяПозиция.Текст));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				Иначе
					ТекстОшибки = НСтр("ru='Не определен тип позиции чека.'"); 
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
					Результат = Ложь;  
					Возврат Результат;
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	// Таблица оплат
	Если ТаблицаОплат <> Неопределено Тогда
		СуммаНаличнойОплаты     = 0;
		СуммаЭлектроннойОплаты1 = 0;
		СуммаЭлектроннойОплаты2 = 0;
		СуммаЭлектроннойОплаты3 = 0;
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = 0 Тогда
				СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = 1 Тогда
				СуммаЭлектроннойОплаты1 = СуммаЭлектроннойОплаты1 + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = 2 Тогда
				СуммаЭлектроннойОплаты2 = СуммаЭлектроннойОплаты2 + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаЭлектроннойОплаты3 = СуммаЭлектроннойОплаты3 + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммаНаличнойОплаты));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType1", XMLСтрока(СуммаЭлектроннойОплаты1));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType2", XMLСтрока(СуммаЭлектроннойОплаты2));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType3", XMLСтрока(СуммаЭлектроннойОплаты3));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

Функция ПолучитьXMLПакетДляЧекаКоррекции(ОбщиеПараметры, ВыходныеПараметры) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckCorrectionPackage");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	ЗаписьXML.ЗаписатьАтрибут("PaymentType", XMLСтрока(ТипРасчета));
	Если ОбщиеПараметры.Свойство("КодСистемыНалогообложения") И ОбщиеПараметры.КодСистемыНалогообложения <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("TaxVariant",  XMLСтрока(ОбщиеПараметры.КодСистемыНалогообложения));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
	Если ОбщиеПараметры.ТипОплаты = 0 Тогда
		ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(ОбщиеПараметры.Сумма));
	ИначеЕсли ОбщиеПараметры.ТипОплаты = 1 Тогда
		ЗаписьXML.ЗаписатьАтрибут("CashLessType1", XMLСтрока(ОбщиеПараметры.Сумма));
	ИначеЕсли ОбщиеПараметры.ТипОплаты = 2 Тогда
		ЗаписьXML.ЗаписатьАтрибут("CashLessType2", XMLСтрока(ОбщиеПараметры.Сумма));
	ИначеЕсли ОбщиеПараметры.ТипОплаты = 3 Тогда
		ЗаписьXML.ЗаписатьАтрибут("CashLessType3", XMLСтрока(ОбщиеПараметры.Сумма));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

Функция ПолучитьXMLПакетДляТекстовогоДокумента(СтрокаТекста) Экспорт
	
	Результат = Новый Массив();
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
	                              
	Если НЕ ПустаяСтрока(СтрокаТекста) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
		
		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
			
			ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
			
			Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
				 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
				 
				// Завершаем запись текущего пакета. 
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				Текст = ЗаписьXML.Закрыть();
				Результат.Добавить(Текст);
				
				// Новый пакет.
				ЗаписьXML = Новый ЗаписьXML();
				ЗаписьXML.УстановитьСтроку("UTF-8");
				ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
				ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
				
			ИначеЕсли (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
				ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
				ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
	 			ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ВремТипШтрихкода));
				ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ВремШтрихКод));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
				ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Текст = ЗаписьXML.Закрыть();
	
	Результат.Добавить(Текст);
	
	Возврат Результат;

КонецФункции   

// Получить таблицу параметров из ККТ.
//
Функция ПолучитьТаблицуПараметрыИзXMLПакетаККТ(Данные, ИдентификаторУстройства = Неопределено) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыРегистрацииККТ();
	
	Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Параметры.РегистрационныйНомерККТ        = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTNumber"));
		Параметры.ОрганизацияНазвание            = ЧтениеXML.ЗначениеАтрибута("OrganizationName");
		Параметры.ОрганизацияИНН                 = СокрЛП(ЧтениеXML.ЗначениеАтрибута("VATIN"));
		Параметры.АдресУстановкиККТ              = ЧтениеXML.ЗначениеАтрибута("AddressSettle");
		Параметры.КодыСистемыНалогообложения     = ЧтениеXML.ЗначениеАтрибута("TaxVariant");
		Если ПустаяСтрока(Параметры.КодыСистемыНалогообложения) Тогда
			Параметры.КодыСистемыНалогообложения = ЧтениеXML.ЗначениеАтрибута("TaxVarinat");
		КонецЕсли;
		Параметры.ПризнакАвтономногоРежима       = ВРег(ЧтениеXML.ЗначениеАтрибута("OfflineMode")) = "TRUE";
		Параметры.ПризнакАвтоматическогоРежима   = ВРег(ЧтениеXML.ЗначениеАтрибута("AutomaticMode")) = "TRUE";
		Параметры.НомерАвтоматаДляАвтоматическогоРежима = ЧтениеXML.ЗначениеАтрибута("AutomaticNumber");
		Параметры.ПризнакРасчетовЗаУслуги        = ВРег(ЧтениеXML.ЗначениеАтрибута("ServiceSign")) = "TRUE";
		Параметры.ПризнакФормированияТолькоБСО   = ВРег(ЧтениеXML.ЗначениеАтрибута("BSOSing")) = "TRUE";
		Параметры.ПризнакРасчетовТолькоВИнтернет = ВРег(ЧтениеXML.ЗначениеАтрибута("CalcOnlineSign")) = "TRUE";
		Параметры.ОрганизацияОФДИНН          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("OFDVATIN"));
		Параметры.ОрганизацияОФДНазвание     = ЧтениеXML.ЗначениеАтрибута("OFDOrganizationName");
		Параметры.ЗаводскойНомерККТ          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTSerialNumber"));
		Параметры.ПризнакФискализации        = ВРег(ЧтениеXML.ЗначениеАтрибута("Fiscal")) = "TRUE";
		Параметры.ЗаводскойНомерФН           = СокрЛП(ЧтениеXML.ЗначениеАтрибута("FNSerialNumber"));
		Параметры.НомерДокументаФискализации = ЧтениеXML.ЗначениеАтрибута("DocumentNumber");
		Параметры.ДатаВремяФискализации      = ЧтениеXML.ЗначениеАтрибута("DateTime");
		Параметры.ВерсияФФДФН   = ЧтениеXML.ЗначениеАтрибута("FFDVersionFN");
		Параметры.ВерсияФФДККТ  = ЧтениеXML.ЗначениеАтрибута("FFDVersionKKT");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИдентификаторУстройства) Тогда
		СохранитьПараметрыРегистрацииУстройства(ИдентификаторУстройства, Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Получить таблицу параметров состояния из ККТ.
//
Функция ПолучитьПараметрыСостоянияИзXMLПакета(Данные) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыСостоянияККТ();
	
	Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.КоличествоНепереданныхФД    = Число(ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter"));
			Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
			ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
			Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
				Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Получить таблицу параметров состояния из ККТ.
//
Функция ПолучитьПараметрыСостоянияСменыИзXMLПакета(Данные, НомерСмены) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	Параметры.НомерСменыККТ = НомерСмены;
	
	Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.КоличествоНепереданныхФД    = Число(ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter"));
			Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
			Параметры.ДатаПервогоНепереданногоФД  = XMLЗначение(Тип("Дата"), ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКодыТоваров(ТЗ, Элемент, Уровень = "Товар")
	
	Если Уровень = "Товар" Тогда
		
		Если Элемент.ИмеетХарактеристики Тогда
			
			Для Каждого ТекХарактеристика Из Элемент.Характеристики Цикл
				ДобавитьКодыТоваров(ТЗ, ТекХарактеристика, "Характеристика");
			КонецЦикла;
			
		ИначеЕсли Элемент.ИмеетУпаковки Тогда
			
			Для Каждого ТекУпаковка Из Элемент.Упаковки Цикл
				ДобавитьКодыТоваров(ТЗ, ТекУпаковка, "Упаковка");
			КонецЦикла;
			
		Иначе
			
			ДобавитьЭлементВКоллекцию(Элемент, ТЗ);
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Характеристика" Тогда
		
		Если Элемент.ИмеетУпаковки Тогда
			
			Для Каждого ТекУпаковка Из Элемент.Упаковки Цикл
				ДобавитьКодыТоваров(ТЗ, ТекУпаковка, "Упаковка");
			КонецЦикла;
			
		Иначе
			
			ДобавитьЭлементВКоллекцию(Элемент, ТЗ);
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Упаковка" Тогда
		
		ДобавитьЭлементВКоллекцию(Элемент, ТЗ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЭлементВКоллекцию(Элемент, Коллекция)
	
	НоваяСтрока = Коллекция.Добавить();
	
	Попытка
		НоваяСтрока.Код = Число(Элемент.Код);
	Исключение
		НоваяСтрока.Код = 0;
	КонецПопытки;;
	
	НоваяСтрока.Количество = 1;
	
КонецПроцедуры

#КонецОбласти