////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентами: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработкаЭлектронныхДокументов

// Получает представление (текст либо структура) состояний электронных документов по владельцам.
//
// Параметры:
//  МассивСсылокНаВладельцев - Массив - Массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//  ПомещатьВСтруктуру - Булево - если истина, то представления состояний электронных документов
//                      (СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника),
//                      будут помещены в структуру, для возможности последующего разбора на клиенте.
//
// Возвращаемое значение:
//  Соответствие - соответствие ссылок на документы ИБ состояниям ЭД. Ключ - ссылка на документ ИБ,
//                Значение - текст (состояние ЭД), либо структура - в зависимости от параметра ПомещатьВСтруктуру.
//
Функция ПолучитьТекстСостоянияЭДПоВладельцам(МассивСсылокНаВладельцев, ПомещатьВСтруктуру = Ложь) Экспорт
		
	ТаблицаДанных = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев);
	Соответствие = Новый Соответствие;
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		
		Если ПомещатьВСтруктуру Тогда
			СостояниеВерсииЭД = Новый Структура("СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника");
			ЗаполнитьЗначенияСвойств(СостояниеВерсииЭД, ТекСтрока);
		Иначе
			СостояниеВерсииЭД = Строка(ТекСтрока.СостояниеВерсииЭД);
		КонецЕсли;
		Соответствие.Вставить(ТекСтрока.ВладелецЭД, СостояниеВерсииЭД);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// Получает дату выставления счет-фактуры в электронном виде.
//
// Параметры:
//  СчетФактура - ДокументСсылка - ссылка на счет-фактуру исходящую в прикладном решении.
// 
// Возвращаемое значение:
//  Дата - дата выставления электронной счет-фактуры.
//
Функция ДатаВыставленияСчетФактуры(СчетФактура) Экспорт
	
	ДатаВыставления = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СчетФактура);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Если ЗначениеЗаполнено(Результат.ЭлектронныйДокумент) Тогда
		
		Если ТипЗнч(Результат.ЭлектронныйДокумент) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.ВладелецФайла.ДатаДокументаОтправителя
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
			|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПДПЭСФ)";
			Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", Результат.ЭлектронныйДокумент);
			
			Результат = Запрос.Выполнить().Выбрать();
			Результат.Следующий();
			ДатаВыставления = Результат.ДатаДокументаОтправителя;
		Иначе
			ДатаВыставления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ЭлектронныйДокумент, "ДатаДокументаОтправителя");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаВыставления
	
КонецФункции

// Возвращает текст запроса для электронных документов на подписи.
// Варианты - для рабочего места документов на подпись, или для показателя на рабочем столе (УТ 11).
//
// Параметры:
//  ДляРабочегоСтола - Булево - признак того, что текст запроса формируется для показателя на рабочем столе (УТ 11).
//  СтруктураДопОтборов - Структура - дополнительные отборы. 
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ПолучитьТекстЗапросаЭлектронныхДокументовНаПодписи(ДляРабочегоСтола = Истина, СтруктураДопОтборов = Неопределено) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныйДокументВходящий.ВидЭД КАК ВидЭД,
	|	ЭлектронныйДокументВходящий.СуммаДокумента КАК СуммаДокумента,
	|	ЭлектронныйДокументВходящий.НомерДокументаОтправителя КАК НомерДокументаОтправителя,
	|	ЭлектронныйДокументВходящий.ДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
	|	ЭлектронныйДокументВходящий.Организация КАК Организация,
	|	ЭлектронныйДокументВходящий.Контрагент КАК Контрагент,
	|	ЭлектронныйДокументВходящий.НастройкаЭДО КАК НастройкаЭДО,
	|	ЭлектронныйДокументВходящий.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	ЭлектронныйДокументВходящий.Ссылка КАК Ссылка,
	|	ЭлектронныйДокументВходящий.НомерВерсииЭД КАК НомерВерсииЭД
	|ПОМЕСТИТЬ втДокументыНаПодписи
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|ГДЕ
	|	ЭлектронныйДокументВходящий.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
	|	И НЕ ЭлектронныйДокументВходящий.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящий.ВидЭД,
	|	ЭлектронныйДокументИсходящий.СуммаДокумента,
	|	ЭлектронныйДокументИсходящий.НомерДокументаОтправителя,
	|	ЭлектронныйДокументИсходящий.ДатаДокументаОтправителя,
	|	ЭлектронныйДокументИсходящий.Организация,
	|	ЭлектронныйДокументИсходящий.Контрагент,
	|	ЭлектронныйДокументИсходящий.НастройкаЭДО,
	|	ЭлектронныйДокументИсходящий.ПрофильНастроекЭДО,
	|	ЭлектронныйДокументИсходящий.Ссылка,
	|	ЭлектронныйДокументИсходящий.НомерВерсииЭД
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|ГДЕ
	|	ЭлектронныйДокументИсходящий.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
	|	И НЕ ЭлектронныйДокументИсходящий.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументыНаПодписи.ВидЭД КАК ВидЭД,
	|	втДокументыНаПодписи.СуммаДокумента КАК СуммаДокумента,
	|	втДокументыНаПодписи.НомерДокументаОтправителя КАК НомерДокументаОтправителя,
	|	втДокументыНаПодписи.ДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
	|	втДокументыНаПодписи.Организация КАК Организация,
	|	втДокументыНаПодписи.Контрагент КАК Контрагент,
	|	втДокументыНаПодписи.НастройкаЭДО КАК СоглашениеЭД,
	|	втДокументыНаПодписи.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
	|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
	|	втДокументыНаПодписи.НомерВерсииЭД КАК Версия,
	|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
	|	ЭДПрисоединенныеФайлы.Изменил КАК Изменил
	|ПОМЕСТИТЬ ЭДНаПодпись
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыНаПодписи КАК втДокументыНаПодписи
	|		ПО (ЭДПрисоединенныеФайлы.ВладелецФайла = втДокументыНаПодписи.Ссылка)
	|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП)))
	|ИНДЕКСИРОВАТЬ ПО
	|	втДокументыНаПодписи.НастройкаЭДО,
	|	втДокументыНаПодписи.Организация,
	|	втДокументыНаПодписи.ВидЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Сертификат,
	|	ВложенныйЗапрос.ЭД
	|ПОМЕСТИТЬ ВТ_СертификатыИзНастроекИПрофилей
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПрофилиЭДОСертификаты.Сертификат КАК Сертификат,
	|		ЭДНаПодпись.ЭД КАК ЭД,
	|		ЭДНаПодпись.ВидЭД КАК ВидЭД
	|	ИЗ
	|		ЭДНаПодпись КАК ЭДНаПодпись
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
	|			ПО ЭДНаПодпись.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СоглашенияЭДСертификаты.Сертификат,
	|		ЭДНаПодпись.ЭД,
	|		ЭДНаПодпись.ВидЭД
	|	ИЗ
	|		ЭДНаПодпись КАК ЭДНаПодпись
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
	|			ПО ЭДНаПодпись.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыЭП
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
	|			ПО СертификатыЭП.Ссылка = ПодписываемыеВидыЭД.СертификатЭП
	|		ПО ВложенныйЗапрос.Сертификат = СертификатыЭП.Ссылка
	|ГДЕ
	|	СертификатыЭП.Пользователь В (&ТекущийПользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)
	|	И НЕ СертификатыЭП.Отозван
	|	И НЕ СертификатыЭП.ПометкаУдаления
	|	И ПодписываемыеВидыЭД.Использовать
	|	И ПодписываемыеВидыЭД.ВидЭД = ВложенныйЗапрос.ВидЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ПоляВыбора
	|ИЗ
	|	ЭДНаПодпись КАК ЭДНаПодпись
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
	|		ПО ЭДНаПодпись.СоглашениеЭД = СоглашенияЭД.Ссылка
	|			И (СоглашенияЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СертификатыИзНастроекИПрофилей КАК СертификатыЭП
	|		ПО ЭДНаПодпись.ЭД = СертификатыЭП.ЭД
	|ГДЕ
	|	НЕ СоглашенияЭД.ПометкаУдаления
	|	И НЕ СертификатыЭП.Сертификат.Отпечаток В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЭД_ЭП.Отпечаток
	|				ИЗ
	|					Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭД_ЭП
	|				ГДЕ
	|					ЭД_ЭП.Ссылка = ЭДНаПодпись.ЭД)";
		
	Если ДляРабочегоСтола Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыбора", "
			|	СертификатыЭП.Сертификат.Отпечаток КАК Отпечаток,
			|	СертификатыЭП.Сертификат.Представление КАК Сертификат,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификатыЭП.Сертификат) КАК ЗначениеПоказателя
			|");
		
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 И СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
			ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Изменил В (&СоставИсполнителей)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|СГРУППИРОВАТЬ ПО
			|	СертификатыЭП.Сертификат.Отпечаток,
			|	СертификатыЭП.Сертификат.Представление";
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыбора", "
			|	ЭДНаПодпись.ЭД КАК ЭлектронныйДокумент,
			|	ЭДНаПодпись.СуммаДокумента,
			|	ЭДНаПодпись.Версия,
			|	ЭДНаПодпись.ДатаДокументаОтправителя КАК ДатаДокумента,
			|	ЭДНаПодпись.ВидЭД КАК ВидЭД,
			|	ЭДНаПодпись.НомерДокументаОтправителя КАК НомерДокумента,
			|	СертификатыЭП.Сертификат КАК Сертификат
			|");
		
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 Тогда
			
			Если СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Изменил В (&СоставИсполнителей)";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("Контрагент") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Контрагент = &Контрагент";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("ВидЭД") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.ВидЭД = &ВидЭД";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("НаправлениеЭД") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.НаправлениеЭД = &НаправлениеЭД";
			КонецЕсли;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО ДатаДокумента";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет, существует ли актуальный электронный документ Счет-фактура для переданного владельца.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка,- владелец электронного документа.
//
// Возвращаемое значение:
//  Булево - Истина - существует актуальный электронный документ, в противном случае Ложь.
//
Функция ЕстьРабочийЭСФ(СсылкаНаВладельца) Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьРабочийЭСФ(СсылкаНаВладельца);
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеОбъектов

// В процедуре происходит добавление данных из СтруктурыДанных в Таблицу значений "ТаблицаДопДанных".
//
// Параметры:
//  СтруктураПараметров - Структура - параметры добавления дополнительных данных.
//  СтруктураДанных - Структура - параметры добавляемых данных.
//  ИмяЭлементаВладельца - Строка - название реквизита.
//  ЮридическиЗначимый - Булево - если Истина - то текущие данные необходимо по возможности поместить в основной ЭД.
//  НомерСтроки - Строка/Неопределено - если заполнен, то указывает на принадлежность текущих данных табличной части.
//    Значение параметра указывает к какой строке табличной части относятся данные. Может иметь вид "1" или "1.1".
//    Если значение вида "1.1", то это значит, что текущие данные относятся к первой строке табличной части, 
//    расположенной в первой строке таблицы-владельца. (подробнее см. схему ХДТО "АктТитулИсполнителя",
//    список "ОписьРабот", вложенный список "Работа").
//
Процедура ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДанных, ИмяЭлементаВладельца, ЮридическиЗначимый = Ложь, НомерСтроки = Неопределено) Экспорт
	
	ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЭлементТЧ = (НомерСтроки <> Неопределено);
		СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", ИмяЭлементаВладельца, ЭлементТЧ);
		СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
		
		Если СтрокиДерева.Количество() = 0 Тогда
			СтрокаДерева = ДеревоДопДанных.Строки.Добавить();
			СтрокаДерева.ИмяРеквизита = ?(ЭлементТЧ, "Список", "Набор");
			СтрокаДерева.ЗначениеРеквизита = ИмяЭлементаВладельца;
			СтрокаДерева.ТЧ = ЭлементТЧ;
		Иначе
			СтрокаДерева = СтрокиДерева[0];
		КонецЕсли;
		
		Если ЭлементТЧ Тогда
			СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));
			СтрокиСписка = СтрокаДерева.Строки.НайтиСтроки(СтОтбора);
			Если СтрокиСписка.Количество() = 0 Тогда
				СтрокаДерева = СтрокаДерева.Строки.Добавить();
				СтрокаДерева.ИмяРеквизита = "Нпп";
				СтрокаДерева.ТЧ = ЭлементТЧ;
				СтрокаДерева.ЗначениеРеквизита = Строка(НомерСтроки);
			Иначе
				СтрокаДерева = СтрокиСписка[0];
			КонецЕсли;
		КонецЕсли;
		
		ДоступноСимволов = 0;
		Если ЮридическиЗначимый Тогда
			Если НомерСтроки = Неопределено Тогда
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхШапки;
			Иначе
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхСтроки;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьДанныеРекурсивно(СтрокаДерева,
								 СтруктураДанных,
								 ДоступноСимволов,
								 ЮридическиЗначимый,
								 ЭлементТЧ,
								 НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФорм

// Функция - Параметры "ПриСозданииНаСервере" формы документа.
// 
// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод "ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента".
//    * Форма - УправляемаяФорма - форма документа.
//    * ДокументСсылка - ДокументСсылка - Ссылка на документ.
//    * ДекорацияСостояниеЭДО - ЭлементФормы - элемент формы "декорация", в заголовке которого будет отображаться состояние ЭДО.
//    * ГруппаСостояниеЭДО - ЭлементФормы - элемент формы "группа", которому может принадлежать ДекорацияСостояниеЭДО, необязательный параметр.
//    * МестоРазмещенияКоманд - ЭлементФормы - элемент формы "группа", в котором должны отображаться команды ЭДО, необязательный параметр.
//    * Направление - ПеречислениеСсылка.НаправленияЭД - указывает направление электронного документа для документа ИБ.
//
Функция ПараметрыПриСозданииНаСервере_ФормаДокумента() Экспорт
	
	ПараметрыПриСоздании = Новый Структура("Форма, ДокументСсылка, ДекорацияСостояниеЭДО, ГруппаСостояниеЭДО, МестоРазмещенияКоманд, Направление");
	
	Возврат ПараметрыПриСоздании;
	
КонецФункции

// Обработчик события "ПриСозданииНаСервере" формы документа.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//  ПараметрыПриСозданииНаСервере - Структура - см."ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента".
//   
Процедура ПриСозданииНаСервере_ФормаДокумента(Отказ, СтандартнаяОбработка, ПараметрыПриСозданииНаСервере) Экспорт
	
	ЗаполнитьСостояниеЭДО(ПараметрыПриСозданииНаСервере);
	
	РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

// Функция - Параметры "ПриСозданииНаСервере" форма списка документов.
// 
// Возвращаемое значение:
//  Структура - параметры, которые необходимо передать в метод "ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка".
//    * Форма - УправляемаяФорма - форма списка документа.
//    * МестоРазмещенияКоманд - ЭлементФормы - элемент формы "группа", в котором должны отображаться команды ЭДО, необязательный параметр.
//    * Направление - ПеречислениеСсылка.НаправленияЭД - указывает направление электронного документа для документа ИБ.
//
Функция ПараметрыПриСозданииНаСервере_ФормаСписка() Экспорт
	
	ПараметрыПриСоздании = Новый Структура("Форма, МестоРазмещенияКоманд, Направление");
	
	Возврат ПараметрыПриСоздании;
	
КонецФункции

// Обработчик события "ПриСозданииНаСервере" формы списка документов
//
// Параметры:
//  Отказ - булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - булево - Признак выполнения стандартной (системной) обработки события.
//  ПараметрыПриСозданииНаСервере - структура - см."ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка".
//
Процедура ПриСозданииНаСервере_ФормаСписка(Отказ, СтандартнаяОбработка, ПараметрыПриСозданииНаСервере) Экспорт
	
	РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

// Функция - Параметры "ПослеЗаписиНаСервере" формы документа.
// 
// Возвращаемое значение:
//  Структура - Параметры, которые нужно передавать в метод "ОбменСКонтрагентами.ПослеЗаписиНаСервере".
//    * Форма - УправляемаяФорма - форма документа.
//    * ДокументСсылка - ДокументСсылка - ссылка на документ.
//    * ДекорацияСостояниеЭДО - ЭлементФормы - элемент формы "декорация", в заголовке которого будет отображаться состояние ЭДО, необязательный параметр.
//    * ГруппаСостояниеЭДО - ЭлементФормы - элемент формы "группа", которому может принадлежать ДекорацияСостояниеЭДО, необязательный параметр.
//
Функция ПараметрыПослеЗаписиНаСервере() Экспорт
	
	ПараметрыПослеЗаписи = Новый Структура("Форма, ДокументСсылка, ДекорацияСостояниеЭДО, ГруппаСостояниеЭДО");
	Возврат ПараметрыПослеЗаписи;
	
КонецФункции

// Обработчик события "ПослеЗаписиНаСервере" формы документа
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - Записываемый объект.
//  СтандартнаяОбработка - Структура - Структура, содержащая параметры записи.
//  ПараметрыПослеЗаписи - Структура - см."ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере".
//
Процедура ПослеЗаписиНаСервере(ДокументОбъект, СтандартнаяОбработка, ПараметрыПослеЗаписи) Экспорт
	
	ЗаполнитьСостояниеЭДО(ПараметрыПослеЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ПодменюКомандЭДО

// Формирование команд ЭДО.
//
// Параметры:
//  ПолноеИмя - Строка - имя объекта, например "Документ.РеализацияТоваровУслуг".
//  КомандыЭДО - ТаблицаЗначений - подготавливаемый список команд ЭДО.
//  НаправлениеЭД - Перечисление.НаправлениеЭД - параметр отбора входящих или исходящих документов.
//  ТолькоВМенюЕще - Булево - признак размещения команд в меню "Еще".
//
Процедура СформироватьКомандыЭДО(ПолноеИмя, КомандыЭДО, НаправлениеЭД = Неопределено, ТолькоВМенюЕще = Ложь) Экспорт
	
	СоставКоманд = КомандыЭДО();
	
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКоманд);
	
	ЗначениеФОИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	ЗначениеФОИспользоватьИнтеркампани = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭДМеждуОрганизациями");
	
	ЕстьПодсистемаБизнесСеть = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть");
	Если ЕстьПодсистемаБизнесСеть Тогда
		МодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
		ЗначениеФОИспользоватьОбменБизнесСеть = МодульБизнесСеть.ИспользоватьОбменБизнесСеть();
	Иначе 
		ЗначениеФОИспользоватьОбменБизнесСеть = Ложь;
	КонецЕсли;
	
	ЕстьПравоПросмотраЭД = Пользователи.ЭтоПолноправныйПользователь()
		ИЛИ Пользователи.РолиДоступны("ЧтениеЭД");
		
	ЕстьПравоВывода = ПравоДоступа("Вывод", Метаданные);
		
	ЕстьПравоОбменаЭД = Пользователи.ЭтоПолноправныйПользователь()
		ИЛИ Пользователи.РолиДоступны("ВыполнениеОбменаЭД");
		
	ЕстьПравоОбменаБизнесСеть = Пользователи.ЭтоПолноправныйПользователь()
		ИЛИ Пользователи.РолиДоступны("ВыполнениеОбменаБизнесСеть");
			
	Если СоставКоманд.Исходящие.Найти(ПолноеИмя) <> Неопределено 
			И НаправлениеЭД <> Перечисления.НаправленияЭД.Входящий Тогда
		
		Если ЗначениеФОИспользоватьОбменЭД Тогда
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.СформироватьЭД";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "СформироватьЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Создать электронный документ'");
			КомандаЭДО.Порядок       = 15;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.СоздатьЭлементСписка;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.СформироватьПодписатьОтправитьЭД";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Отправить электронный документ'");
			КомандаЭДО.Порядок       = 20;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
				
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ДеревоЭД";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ДеревоЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Открыть электронные документы'");
			КомандаЭДО.Порядок       = 25;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;

			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.СоздатьПроизвольныйЭДНаОсновании";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "СоздатьПроизвольныйДокумент";
			КомандаЭДО.Представление = НСтр("ru = 'Создать произвольный документ'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Скрепка;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
			
		КонецЕсли;
		
		Если ЕстьПравоВывода И СоставКоманд.БезПодписи.Найти(ПолноеИмя) <> Неопределено Тогда
			// Команды из механизма однократных сделок не завязаны на ФО и роли БЭД.
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ВыгрузитьДанныеВФайл";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ВыгрузитьДанныеВФайл";
			КомандаЭДО.Представление = НСтр("ru = 'Выгрузить документ в файл'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ВыгрузитьДанныеИзИнформационнойБазыВXMLФайл;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Ложь;
		КонецЕсли;
		
		Если ЕстьПравоВывода И ЕстьПодсистемаБизнесСеть И СоставКоманд.БезПодписи.Найти(ПолноеИмя) <> Неопределено Тогда
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "БизнесСетьКлиент.ОтправитьЧерезБизнесСеть";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОтправитьЧерезБизнесСеть";
			КомандаЭДО.Представление = НСтр("ru = 'Отправить документ без электронной подписи'");
			КомандаЭДО.Порядок       = 61;
			КомандаЭДО.Картинка      = БиблиотекаКартинок["БизнесСетьОтправка"];
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОСервис";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаБизнесСеть;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СоставКоманд.Входящие.Найти(ПолноеИмя) <> Неопределено 
		И НаправлениеЭД <> Перечисления.НаправленияЭД.Исходящий Тогда
		
		Если ЗначениеФОИспользоватьОбменЭД Тогда
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ДеревоЭД";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ДеревоЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Открыть электронные документы'");
			КомандаЭДО.Порядок       = 20;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;

			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
			КомандаЭДО.Порядок       = 25;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;

			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ПерезаполнитьДокумент";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ПерезаполнитьДокумент";
			КомандаЭДО.Представление = НСтр("ru = 'Перезаполнить по электронному документу'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьДопСвойствоВНабор;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.СоздатьПроизвольныйЭДНаОсновании";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "СоздатьПроизвольныйДокумент";
			КомандаЭДО.Представление = НСтр("ru = 'Создать произвольный документ'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Скрепка;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
			
		КонецЕсли;
		
		Если ЕстьПравоОбменаЭД Тогда
			
			// Команды из механизма однократных сделок не завязаны на ФО и роли БЭД.
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ЗагрузитьДанныеИзФайла";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ЗагрузитьДанныеИзФайла";
			КомандаЭДО.Представление = НСтр("ru = 'Загрузить документ из файла'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗагрузитьXMLФайлВИнформационнуюБазу;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Ложь;
			
			Если ЗначениеФОИспользоватьОбменБизнесСеть И СоставКоманд.БезПодписи.Найти(ПолноеИмя) <> Неопределено Тогда
				КомандаЭДО = КомандыЭДО.Добавить();
				КомандаЭДО.Обработчик    = "БизнесСетьКлиент.ЗагрузитьЧерезБизнесСеть";
				КомандаЭДО.СписокФорм    = "";
				КомандаЭДО.Идентификатор = "ЗагрузитьЧерезБизнесСеть";
				КомандаЭДО.Представление = НСтр("ru = 'Загрузить документ без электронной подписи'");
				КомандаЭДО.Порядок       = 62;
				КомандаЭДО.Картинка      = БиблиотекаКартинок["БизнесСетьЗагрузка"];
				КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
				КомандаЭДО.МестоРазмещения = "КомандыЭДОСервис";
				КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаБизнесСеть;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеФОИспользоватьИнтеркампани И СоставКоманд.Интеркампани.Найти(ПолноеИмя) <> Неопределено Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.СформироватьЭД";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "СформироватьЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Создать электронный документ'");
		КомандаЭДО.Порядок       = 11;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.СоздатьЭлементСписка;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Подписать электронный документ'");
		КомандаЭДО.Порядок       = 12;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;	
			
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, используемых в БЭД команд.
//
// Возвращаемое значение:
//  Структура - пустая структура массивов.
//
Функция КомандыЭДО() Экспорт
	
	Команды = Новый Структура;
	Команды.Вставить("Исходящие", Новый Массив);
	Команды.Вставить("Входящие", Новый Массив);
	Команды.Вставить("БезПодписи", Новый Массив);
	Команды.Вставить("Интеркампани", Новый Массив);
	
	Возврат Команды;
	
КонецФункции

#КонецОбласти

#Область Интеграция1СЭДОИ1СОтчетности

// В процедуре заполняются данные по организации для мастера 1С-Отчетности.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, по которой необходимо заполнить данные.
//  ДополнительныеПараметры - Структура - может иметь следующий набор свойств:
//    ЕстьПодключениеЭДО - Булево - признак подключения переданной организации к сервису 1С-ЭДО;
//    МассивОператоровЭДО - Массив - перечень актуальных операторов ЭДО в сервисе 1С-ЭДО;
//    СсылкаОписаниеСервиса - Строка - ссылка на актуальную информацию о сервисе 1С-ЭДО.
//
Процедура ЗаполнитьДанныеПо1СЭДОДляМастера1СОтчетности(Организация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
	|	И ПрофилиНастроекЭДО.Организация = &Организация
	|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если Запрос.Выполнить().Пустой() Тогда
		ДополнительныеПараметры.Вставить("ЕстьПодключениеЭДО", Ложь);
		
		ИмяФайлаОтвета = ОбменСКонтрагентамиСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetOperators");
		Если ИмяФайлаОтвета <> Неопределено Тогда
			ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
			
			// ОператорыЭДОПодключенныеК1СЭДО
			МассивОператоровЭДО = Новый Массив;
			Если НЕ ПустаяСтрока(ДанныеФайла) Тогда
				
				ДеревоXML = ОбменСКонтрагентамиСлужебный.ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
				Если ДеревоXML <> Неопределено Тогда
					
					УзелОператорыЭДО = ДеревоXML.Строки.Найти("Operators", "Имя");
					Если УзелОператорыЭДО <> Неопределено Тогда
						Для Каждого УзелОператорЭДО Из УзелОператорыЭДО.Строки Цикл
							
							УзелОператорЭДОНаимОрг = УзелОператорЭДО.Строки.Найти("НаимОрг", "Имя");
							Если СтрНайти(УзелОператорЭДОНаимОрг.Значение, "тест") = 0 Тогда
								МассивОператоровЭДО.Добавить(УзелОператорЭДОНаимОрг.Значение);
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(МассивОператоровЭДО) Тогда
				ДополнительныеПараметры.Вставить("МассивОператоровЭДО", МассивОператоровЭДО);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СсылкаОписаниеСервиса", "https://portal.1c.ru/applications/30/#conditions");
	
КонецПроцедуры

// Статус подключения организации.
//
// Параметры:
//  Организация - Справочник.Организации - ссылка на справочник Организация.
//
// Возвращаемое значение:
//   Булево - признак подключения организации.
//
Функция ОрганизацияПодключена(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
	|	И ПрофилиНастроекЭДО.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область ПроверкаСостоянияКонтрагентовВ1СЭДО

// Метод запускает проверку состояния контрагента в сервисе 1С-ЭДО.
//
// Параметры:
//  СсылкаНаКонтрагента - СправочникСсылка - ссылка на справочник контрагента,
//   которого необходимо проверить по подключению к 1С-ЭДО.
//
Процедура ПроверитьКонтрагентаВ1СЭДОПриСозданииНаСервере(СсылкаНаКонтрагента) Экспорт
	
	// Проверим необходимость запуска фонового задания
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияКонтрагентовБЭД.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент
	|	И СостоянияКонтрагентовБЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.НеПодключен)";
	
	Запрос.УстановитьПараметр("Контрагент", СсылкаНаКонтрагента);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Запуск фонового задания для проверки контрагента
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Контрагент",     СсылкаНаКонтрагента);
	ПараметрыЗапуска.Вставить("СохранятьРезультатСразуПослеПроверки", Истина);
	ПараметрыЗапуска.Вставить("АдресХранилища", Неопределено);
	
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаКонтрагента,
		ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
		
	ПараметрыЗапуска.Вставить("ИНН", ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента]);
	ПараметрыЗапуска.Вставить("КПП", ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
	
	Попытка
	
		Параметры = Новый Массив;
		Параметры.Добавить(ПараметрыЗапуска);
		
		ФоновыеЗадания.Выполнить("ОбменСКонтрагентамиСлужебный.ПроверитьКонтрагентаФоновоеЗадание", 
			Параметры, ПараметрыЗапуска.ИНН + " " + ПараметрыЗапуска.КПП, НСтр("ru = 'Проверка подключения'"));
	
	Исключение
		
		// Исключение возникнет в случае запуска фонового задания с таким же ключем
		// Специальной обработки не требуется.
			
		Операция = НСтр("ru = 'Проверка подключения контрагента к 1С-ЭДО в фоновом задании.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаЭДВФНС

// Получает соответствие документам информационной базы и актуальных электронных документов.
// Функция предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  ДокументыИБ - Массив - массив ссылок на документы информационной базы.
//  УникальныйИдентификатор - УникальныйИдентификатор - признак уникальности для формы выбора документов.
//
// Возвращаемое значение:
//  Соответствие - соответствие документов ИБ:
//    * Ключ     - ДокументСсылка - ссылка на документ-Владелец ЭД.
//    * Значение - Массив         - массив структур параметров ЭД, с ключами:
//                 ТипФайла - Строка - возможные значения: ФайлВыгрузки, ЭЦП, ФайлПодтверждения, ЭЦППодтверждения.
//                 КНД      - Строка - КНД выгружаемого ЭД, заполняется только для файла выгрузки и файла подтверждения.
//                 ИмяФайла - Строка - Имя выгружаемого файла.
//                 АдресВременногоХранилища - Строка.
//
Функция ПолучитьСоответствиеДокументамИБКомплектыЭлектронныхДокументов(ДокументыИБ, УникальныйИдентификатор) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ДокументИБ,
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл,
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК поле3,
	|	СостоянияЭД.ЭлектронныйДокумент.ВидЭД КАК ВидЭД,
	|	СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
	|	ЭДПрисоединенныеФайлы.УникальныйИД КАК УникальныйИД,
	|	ОтветныеТитулы.Ссылка КАК ПодтверждениеСсылка,
	|	ОтветныеТитулы.ТипЭлементаВерсииЭД КАК ВидЭДПодтверждения,
	|	ОтветныеТитулы.УникальныйИД КАК УникальныйИДПодтверждения
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ОтветныеТитулы
	|			ПО ЭДПрисоединенныеФайлы.Ссылка = ОтветныеТитулы.ЭлектронныйДокументВладелец
	|				И (ОтветныеТитулы.ТипЭлементаВерсииЭД В (&ТипыЭлементовОтветныхТитулов))
	|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла
	|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТипыЭлементовЭД))
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&ВладелецФайла)
	|	И СостоянияЭД.ЭлектронныйДокумент.ВидЭД В(&ВидыПервичныхТитулов)
	|	И СостоянияЭД.СостояниеВерсииЭД В(&ОбменЗавершен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументИБ,
	|	ПрисоединенныйФайл";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ДокументыИБ);
	
	ОбменЗавершен = Новый Массив;
	ОбменЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	ОбменЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	Запрос.УстановитьПараметр("ОбменЗавершен", ОбменЗавершен);
	
	ВидыПервичныхТитулов = Новый Массив;
	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СчетФактура);
	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Запрос.УстановитьПараметр("ВидыПервичныхТитулов", ВидыПервичныхТитулов);
	
	ТипыЭлементовЭД = Новый Массив;
	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	
	Запрос.УстановитьПараметр("ТипыЭлементовЭД", ТипыЭлементовЭД);
	
	ТипыЭлементовОтветныхТитулов = Новый Массив;
	ТипыЭлементовОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	ТипыЭлементовОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ТипыЭлементовОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	ТипыЭлементовОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	Запрос.УстановитьПараметр("ТипыЭлементовОтветныхТитулов", ТипыЭлементовОтветныхТитулов);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.СледующийПоЗначениюПоля("ДокументИБ") Цикл
		МассивФайловЭД = Новый Массив;
		Пока Результат.СледующийПоЗначениюПоля("ПрисоединенныйФайл") Цикл
			
			СвойстваДокумента = Новый Структура;
			СвойстваДокумента.Вставить("ВидЭД", Результат.ВидЭД);
			СвойстваДокумента.Вставить("ТипЭлементаВерсииЭД", Результат.ТипЭлементаВерсииЭД);
			
			ЗаполнитьДанныеЭД(МассивФайловЭД, Результат.ПрисоединенныйФайл,
				СвойстваДокумента, Результат.УникальныйИД, "ФайлВыгрузки", УникальныйИдентификатор);
			Если ЗначениеЗаполнено(Результат.ПодтверждениеСсылка) Тогда
				
				СвойстваДокумента.Вставить("Подтверждение", Истина);
				
				ЗаполнитьДанныеЭД(МассивФайловЭД, Результат.ПодтверждениеСсылка,
					СвойстваДокумента, Результат.УникальныйИДПодтверждения, "ФайлПодтверждения", УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
		Соответствие.Вставить(Результат.ДокументИБ, МассивФайловЭД);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// Формирует сведения об ЭД, которые будут отражаться в едином списке документов,
// представляемых по требованию ФНС. Электронные документы должны быть по завершенным обменам,
// не помечены на удаление и принадлежать следующим видам ЭД: СчетФактура,  КорректировочныйСчетФактура,
// ТОРГ12Продавец, АктИсполнитель.
//
// Параметры:
//  СвойстваЭД - Соответствие - содержит следующие поля:
//     * Ключ     - СправочникСсылка.ЭДПрисоединенныеФайлы.
//     * Значение - Структура - Поля структуры:
//        ** ЭД              - СправочникСсылка.ЭДПрисоединенныеФайлы
//        ** ВладелецЭД      - ДокументСсылка - ссылка на объект метаданных - владельца файла.
//        ** ВидДокументаФНС - Строка, вид электронного документа следует преобразовать
//                             к строковому представлению определенного формата. 
//                             Возможные значения: АктПриемкиСдачиРабот, СчетФактура,
//                             КорректировочныйСчетФактура, ТоварнаяНакладнаяТОРГ12.
//  МассивЭД - Массив - массив ссылок на электронные документы.
//             Если массив заполнен, требуется заполнить свойства ЭД из массива.
//             Если массив пустой, тогда требуется заполнить свойства для всех ЭД,
//             удовлетворяющих свойствам, указанным выше.
//
Процедура ОпределитьСвойстваЭДДляЖурналаДокументовПредставляемыхПоТребованиюФНС(СвойстваЭД, МассивЭД) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	ВЫБОР
	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
	|			ТОГДА ""АктПриемкиСдачиРабот""
	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
	|			ТОГДА ""КорректировочныйСчетФактура""
	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	|			ТОГДА ""СчетФактура""
	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
	|			ТОГДА ""ТоварнаяНакладнаяТОРГ12""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВидДокументаФНС,
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла
	|			И (СостоянияЭД.ЭлектронныйДокумент В (&ТипыЭД))
	|ГДЕ
	|	СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
	|	И СостоянияЭД.ЭлектронныйДокумент.ВидЭД В(&ВидыЭД)
	|	И НЕ СостоянияЭД.ЭлектронныйДокумент.ПометкаУдаления
	|	И ЭДПрисоединенныеФайлы.ПодписанЭП";
	
	Если ЗначениеЗаполнено(МассивЭД) Тогда
		ТекстЗапроса = ТекстЗапроса + " И СостоянияЭД.СсылкаНаОбъект В(&МассивЭД) ";
		Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	КонецЕсли;
	
	МассивВидовЭД = Новый Массив;
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Запрос.УстановитьПараметр("ВидыЭД", МассивВидовЭД);
	
	МассивТиповЭД = Новый Массив;
	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	Запрос.УстановитьПараметр("ТипыЭД", МассивТиповЭД);
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураСвойств = Новый Структура;
		СтруктураСвойств.Вставить("ВидДокументаФНС", Выборка.ВидДокументаФНС);
		СтруктураСвойств.Вставить("ВладелецЭД", Выборка.ВладелецЭД);
		СтруктураСвойств.Вставить("ЭД", Выборка.ЭД);
		
		СвойстваЭД.Вставить(Выборка.ЭД, СтруктураСвойств);
	КонецЦикла;
	
КонецПроцедуры

// Определяет владельца электронного документа.
//
// Параметры:
//   ЭлектронныйДокумент - СправочникСсылка - ссылка на  электронный документ.
//   ВладелецЭД - ДокументСсылка - ссылка на владельца электронного документа.
//
Процедура ОпределитьВладельцаЭлектронногоДокумента(ЭлектронныйДокумент, ВладелецЭД) Экспорт
	
	ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ВладелецФайла");
	
КонецПроцедуры

// Заполнение вида документа ФНС для владельцев электронных документов,
// которые будут отражаться в едином списке документов, представляемых по требованию ФНС.
// Для владельца ЭД должны существовать электронные документы по завершенным обменам,
// не помеченные на удаление и принадлежащие следующим видам ЭД: СчетФактура, КорректировочныйСчетФактура,
// ТОРГ12Продавец, ТОРГ12Покупатель, АктИсполнитель, АктЗаказчик.
//
// Параметры:
//  СвойстваВладельцевЭД - Соответствие - Соответствие документов владельцев ЭД и видов ЭД:
//    * Ключ     - ДокументСсылка - ссылка на владельца электронного документа.
//    * Значение - Строка - вид электронного документа, который следует преобразовать
//                 к строковому представлению определенного формата.
//                 Возможные значения: АктПриемкиСдачиРабот, СчетФактура, КорректировочныйСчетФактура,
//                 ТоварнаяНакладнаяТОРГ12.
//  МассивВладельцевЭД - Массив - (необязательный) массив ссылок на владельцев электронные документы.
//                       Если параметр указан, требуется заполнить свойства владельцев ЭД из массива.
//                       Если параметр не указан или массив пустой, тогда требуется заполнить свойства
//                       для всех владельцев ЭД, по которым ЭДО завершен.
//
Процедура ОпределитьСвойстваВладельцевЭлектронныхДокументов(СвойстваВладельцевЭД, МассивВладельцевЭД = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	               |	ВЫБОР
	               |		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
	               |			ТОГДА ВЫБОР
	               |					КОГДА СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
	               |						ТОГДА ""АктПриемкиСдачиРабот""
	               |					ИНАЧЕ ""ПередачаУслуг""
	               |				КОНЕЦ
	               |		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
	               |			ТОГДА ВЫБОР
	               |					КОГДА СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ)
	               |						ТОГДА ""КорректировочныйСчетФактура""
	               |					ИНАЧЕ ""УКД""
	               |				КОНЕЦ
	               |		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	               |			ТОГДА ВЫБОР
	               |					КОГДА СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ)
	               |						ТОГДА ""СчетФактура""
	               |					ИНАЧЕ ""УПД""
	               |				КОНЕЦ
	               |		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
	               |			ТОГДА ВЫБОР
	               |					КОГДА СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
	               |						ТОГДА ""ТоварнаяНакладнаяТОРГ12""
	               |					ИНАЧЕ ""ПередачаТоваров""
	               |				КОНЕЦ
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ПредставлениеЭД
	               |ИЗ
	               |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла
	               |			И (СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД В (&ТипыЭД))
	               |ГДЕ
	               |	СостоянияЭД.СостояниеВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершенСИсправлением))
	               |	И СостоянияЭД.ЭлектронныйДокумент.ВидЭД В(&ВидыЭД)
	               |	И НЕ СостоянияЭД.ЭлектронныйДокумент.ПометкаУдаления
	               |	И ЭДПрисоединенныеФайлы.ПодписанЭП";
		
	Если ЗначениеЗаполнено(МассивВладельцевЭД) Тогда
		ТекстЗапроса = ТекстЗапроса + " И СостоянияЭД.СсылкаНаОбъект В(&МассивВладельцевЭД) ";
		Запрос.УстановитьПараметр("МассивВладельцевЭД", МассивВладельцевЭД);
	КонецЕсли;
	
	МассивВидовЭД = Новый Массив;
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Запрос.УстановитьПараметр("ВидыЭД", МассивВидовЭД);
	
	МассивТиповЭД = Новый Массив;
	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	
	Запрос.УстановитьПараметр("ТипыЭД", МассивТиповЭД);
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СвойстваВладельцевЭД.Вставить(Выборка.ВладелецЭД, Выборка.ПредставлениеЭД);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИспользованияУниверсальныхДокументов

// Получает признак использования универсального передаточного документа между участниками ЭДО.
//
// Параметры:
//   Организация - Ссылка - элемент справочника Организации.
//   Контрагент - Ссылка - элемент справочника Контрагенты;
//   ДоговорКонтрагента - Ссылка - элемент справочника ДоговораКонтрагентов.
//
// Возвращаемое значение:
//   Результат - Булево - признак использования универсального передаточного документа.
//
Функция ИспользованиеУниверсальногоПередаточногоДокумента(Организация, Контрагент, ДоговорКонтрагента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкаЭДО.ИспользоватьУПД КАК ИспользоватьУПД,
		|	ВЫБОР
		|		КОГДА НастройкаЭДО.ДоговорКонтрагента = &ДоговорКонтрагента
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкаЭДО
		|ГДЕ
		|	НастройкаЭДО.Контрагент = &Контрагент
		|	И НастройкаЭДО.Организация = &Организация
		|	И НЕ НастройкаЭДО.ПометкаУдаления
		|	И НастройкаЭДО.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.УстановитьПараметр("Контрагент",         Контрагент);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Организация",        Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Результат = Выборка.ИспользоватьУПД;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает признак использования универсального корректировочного документа между участниками ЭДО.
//
// Параметры:
//   Организация - Ссылка - элемент справочника Организации.
//   Контрагент - Ссылка - элемент справочника Контрагенты;
//   ДоговорКонтрагента - Ссылка - элемент справочника ДоговораКонтрагентов.
//
// Возвращаемое значение:
//   Результат - Булево - признак использования универсального корректировочного документа.
//
Функция ИспользованиеУниверсальногоКорректировочногоДокумента(Организация, Контрагент, ДоговорКонтрагента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкаЭДО.ИспользоватьУКД КАК ИспользоватьУКД,
		|	ВЫБОР
		|		КОГДА НастройкаЭДО.ДоговорКонтрагента = &ДоговорКонтрагента
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкаЭДО
		|ГДЕ
		|	НастройкаЭДО.Контрагент = &Контрагент
		|	И НастройкаЭДО.Организация = &Организация
		|	И НЕ НастройкаЭДО.ПометкаУдаления
		|	И НастройкаЭДО.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.УстановитьПараметр("Контрагент",         Контрагент);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Организация",        Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Результат = Выборка.ИспользоватьУКД;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Включает/выключает функционал ЭДО с контрагентами.
//
// Параметры:
// Включить - Булево - выключить или выключить функционал ЭДО.
//
Процедура УстановитьЗначенияКонстантЭДО(Включить = Истина) Экспорт
	
	ИспользуютсяОбменЭД = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьОбменЭД");
	Если Не ИспользуютсяОбменЭД Тогда
		Константы.ИспользоватьОбменЭД.Установить(Включить);
	КонецЕсли;
	
	ИспользуютсяЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	Если Не ИспользуютсяЭП Тогда
		Константы.ИспользоватьЭлектронныеПодписи.Установить(Включить);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// Обработчик обновления БЭД 1.2.4.4
// Переносит настройки контекста криптографии в объект БСП СоздаватьЭлектронныеПодписиНаСервере.
//
Процедура ПеренестиНастройкиКонтекстаКриптографии() Экспорт
	
	НачатьТранзакцию();
	Попытка
		Если Константы.ИспользоватьЭлектронныеПодписи.Получить() Тогда
			РаботатьСЭПНаСервере = НЕ (ОбщегоНазначения.ИнформационнаяБазаФайловая()
					ИЛИ ОбщегоНазначенияПовтИсп.РазделениеВключено())
				И (Константы.УдалитьКонтекстКриптографии.Получить() = Перечисления.УдалитьКонтекстыРаботыСЭД.НаСервере
					ИЛИ Константы.УдалитьКонтекстАвторизации.Получить() = Перечисления.УдалитьКонтекстыРаботыСЭД.НаСервере);
			МенеджерЗначения = Константы.СоздаватьЭлектронныеПодписиНаСервере.СоздатьМенеджерЗначения();
			МенеджерЗначения.Значение = РаботатьСЭПНаСервере;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			МенеджерЗначения = Константы.ПроверятьЭлектронныеПодписиНаСервере.СоздатьМенеджерЗначения();
			МенеджерЗначения.Значение = РаботатьСЭПНаСервере;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаление устаревших отложенных разделенных обработчиков обновления.
Процедура УдалитьУстаревшиеОбработчики() Экспорт
	
	ОбновлениеИнформационнойБазы.УдалитьОтложенныйОбработчикИзОчереди(
		"ЭлектронныеДокументыСлужебный.ПроверитьНепроверенныхКонтрагентов");
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.2.20
// Переносит настройки контекста криптографии в объект БСП СоздаватьЭлектронныеПодписиНаСервере.
//
Процедура НастроитьАвтоПереходНаНовыеВерсииФорматовЭД() Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка КАК НастройкаЭДО
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НастройкаЭДО = Выборка.НастройкаЭДО.ПолучитьОбъект();
			НастройкаЭДО.АвтоПереходНаНовыеФорматы = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы обмена с контрагентами'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы обмена с контрагентами произошла ошибка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.4.8
// Добавляет новые виды ЭД в справочники БЭД.
//
Процедура ДобавитьНовыеВидыЭДУПД_УКД() Экспорт
	
	ОбновитьНастройкиЭДО(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца);
	ОбновитьНастройкиЭДО(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПокупателя);
	
	ОбновитьНастройкиЭДО(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца);
	ОбновитьНастройкиЭДО(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПокупателя);
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.2
Процедура ПеренестиПаролиВБезопасноеХранилище() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		СоответствиеСертификатов = Константы.УдалитьКонтекстРаботыЭД.Получить().Получить();
		
		Если ТипЗнч(СоответствиеСертификатов) = Тип("Соответствие") Тогда
			
			Для Каждого КлючЗначение Из СоответствиеСертификатов Цикл
				
				Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура") Тогда
					СоответствиеПользовательПароль = Новый Соответствие;
					СоответствиеПользовательПароль.Вставить(КлючЗначение.Значение.Пользователь,КлючЗначение.Значение.Пароль);
					
					ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(КлючЗначение.Ключ,СоответствиеПользовательПароль,"ПаролиСертификатов");
				КонецЕсли;
				
			КонецЦикла;
			
			Константы.УдалитьКонтекстРаботыЭД.Установить(Неопределено);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.4
// Заполняет в справочнике СоглашенияОбИспользованииЭД табличную часть ВходящиеДокументы
// способами по умолчанию.
//
Процедура ЗаполнитьВходящиеДокументыНастроек() Экспорт 
	
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Настройка = Выборка.Ссылка.ПолучитьОбъект();
			Настройка.ВходящиеДокументы.Очистить();
			Настройка.ВходящиеДокументы.Загрузить(ОбменСКонтрагентамиСлужебный.ТаблицаПредопределенногоПрофиля("Автоматически"));
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Настройка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы обмена с контрагентами'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы обмена с контрагентами произошла ошибка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.4.
// Создает входящие и исходящие электронные документы и привязывает к ним существующие в базе присоединенные файлы.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ПеревестиНаНовуюАрхитектуруЭДО(Параметры) Экспорт 
	
	НачатьТранзакцию();
	Попытка
	
		ТипыЭлементовВерсийЭД = Новый Массив;
		ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
		ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
		ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
		ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
		ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
		
		ВидыИсключаемыхЭД = Новый Массив;
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПокупателя);
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПокупателя);
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ПустаяСсылка());
		
		Если НЕ Параметры.Свойство("ВсегоДокументовЭДО") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭДПрисоединенныеФайлы.Ссылка) КАК КоличествоДокументов
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипыЭлементовВерсийЭД)
			|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
			|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий
			|	И НЕ ЭДПрисоединенныеФайлы.УдалитьВидЭД В (&ВидыИсключаемыхЭД)";
			Запрос.УстановитьПараметр("ТипыЭлементовВерсийЭД",ТипыЭлементовВерсийЭД);
			Запрос.УстановитьПараметр("ВидыИсключаемыхЭД",ВидыИсключаемыхЭД);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Параметры.Вставить("ВсегоДокументовЭДО", Выборка.КоличествоДокументов);
			Иначе
				Параметры.Вставить("ВсегоДокументовЭДО", 0);
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1000
		               |	ЭДПрисоединенныеФайлы.УдалитьВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
		               |	ЭДПрисоединенныеФайлы.УдалитьВидЭД КАК ВидЭД,
		               |	ЭДПрисоединенныеФайлы.УдалитьДатаВыпискиБанка КАК ДатаВыпискиБанка,
		               |	ЭДПрисоединенныеФайлы.УдалитьДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
		               |	ЭДПрисоединенныеФайлы.УдалитьДатаИзмененияВнешнегоСтатусаЭД КАК ДатаИзмененияВнешнегоСтатусаЭД,
		               |	ЭДПрисоединенныеФайлы.УдалитьКонтрагент КАК Контрагент,
		               |	ЭДПрисоединенныеФайлы.УдалитьНомерВерсииЭД КАК НомерВерсииЭД,
		               |	ЭДПрисоединенныеФайлы.УдалитьНомерДокументаОтправителя КАК НомерДокументаОтправителя,
		               |	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
		               |	ЭДПрисоединенныеФайлы.УдалитьОрганизация КАК Организация,
		               |	ЭДПрисоединенныеФайлы.УдалитьОтветственный КАК Ответственный,
		               |	ЭДПрисоединенныеФайлы.УдалитьПричинаОтклонения КАК ПричинаОтклонения,
		               |	ЭДПрисоединенныеФайлы.УдалитьПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		               |	ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД КАК НастройкаЭДО,
		               |	ЭДПрисоединенныеФайлы.УдалитьСуммаДокумента КАК СуммаДокумента,
		               |	ЭДПрисоединенныеФайлы.УникальныйИД КАК УникальныйИД,
		               |	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
		               |	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		               |	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
		               |	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД,
		               |	ЭДПрисоединенныеФайлы.ДатаСоздания,
		               |	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, НЕОПРЕДЕЛЕНО) КАК СостояниеВерсииЭД,
		               |	ЕСТЬNULL(СостоянияЭД.Комментарий, """") КАК Комментарий,
		               |	ЭДПрисоединенныеФайлы.ПометкаУдаления,
		               |	ЭДПрисоединенныеФайлы.ИдентификаторыОснованийВладельцаФайла.(
		               |		ИдентификаторДокументаОснования,
		               |		ИдентификаторЭДДокументаОснования
		               |	) КАК Основания,
		               |	ЕСТЬNULL(СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП, ЛОЖЬ) КАК ИспользоватьЭП
		               |ИЗ
		               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		               |		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка)
		               |			И (СостоянияЭД.СсылкаНаОбъект = ЭДПрисоединенныеФайлы.ВладелецФайла)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		               |		ПО ЭДПрисоединенныеФайлы.УдалитьВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
		               |			И ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
		               |ГДЕ
		               |	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипыЭлементовВерсийЭД)
		               |	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
		               |	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий
		               |	И НЕ ЭДПрисоединенныеФайлы.УдалитьВидЭД В (&ВидыИсключаемыхЭД)";
		Запрос.УстановитьПараметр("ТипыЭлементовВерсийЭД",ТипыЭлементовВерсийЭД);
		Запрос.УстановитьПараметр("ВидыИсключаемыхЭД",ВидыИсключаемыхЭД);
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Если Параметры.Свойство("ОбработаноДокументовЭДО") Тогда
				Параметры.ОбработаноДокументовЭДО = Параметры.ОбработаноДокументовЭДО + Выборка.Количество();
			Иначе
				Параметры.Вставить("ОбработаноДокументовЭДО", Выборка.Количество());
			КонецЕсли;
			
			Параметры.ОбработкаЗавершена = Ложь;
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ВсегоДокументовЭДО;
			Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ОбработаноДокументовЭДО;
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					ДокументОбъект = Документы.ЭлектронныйДокументВходящий.СоздатьДокумент();
					НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = Выборка.ВладелецФайла;
				Иначе
					ДокументОбъект = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
					НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = Выборка.ВладелецФайла;
				КонецЕсли;
				
				ВыборкаОснований = Выборка.Основания.Выбрать();
				
				Пока ВыборкаОснований.Следующий() Цикл
					НоваяСтрока = ДокументОбъект.ИдентификаторыОснованийВладельцаФайла.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаОснований);
				КонецЦикла;
				
				ТребуетсяИзвещение = Истина;
				
				Если Выборка.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					Или Выборка.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
					ТребуетсяПодтверждение = Ложь;
					
				Иначе
					Если Выборка.ИспользоватьЭП Тогда
						
						ТребуетсяПодтверждение = Истина;
						Если Выборка.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
							ТребуетсяПодтверждение = Ложь;
						КонецЕсли;
						
					Иначе
						ТребуетсяПодтверждение = Ложь;
						
					КонецЕсли;
				КонецЕсли;
				
				ДокументОбъект.ТребуетсяИзвещение = ТребуетсяИзвещение;
				ДокументОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
				
				ДокументОбъект.Дата = Выборка.ДатаСоздания;
				ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
				
				ДокументОбъект.УстановитьНовыйНомер();
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
				
				ВыборкаЭД = ПолучитьВыборкуЭД(Выборка.УникальныйИД, Выборка.ВладелецФайла);
				
				ВторойТитул = Неопределено;
				
				Пока ВыборкаЭД.Следующий() Цикл
					
					СправочникОбъект = ВыборкаЭД.Ссылка.ПолучитьОбъект();
					СправочникОбъект.ВладелецФайла = ДокументОбъект.Ссылка;
					
					Если СправочникОбъект.УдалитьВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
						СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель;
						ВторойТитул = ВыборкаЭД.Ссылка;
					ИначеЕсли СправочникОбъект.УдалитьВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
						СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик;
						ВторойТитул = ВыборкаЭД.Ссылка;
					ИначеЕсли СправочникОбъект.УдалитьВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
						СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
						ВторойТитул = ВыборкаЭД.Ссылка;
					КонецЕсли;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
					
				КонецЦикла;
				
				Если Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Аннулирован
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно 
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи Тогда
					
					ДокументОбъект.СостояниеЭДО = Выборка.СостояниеВерсииЭД;
					
					Если ПустаяСтрока(ДокументОбъект.ПричинаОтклонения) 
						И НЕ ПустаяСтрока(Выборка.Комментарий) Тогда
						
						ДокументОбъект.ПричинаОтклонения = Выборка.Комментарий;
					КонецЕсли;
					
				Иначе
					ДокументОбъект.СостояниеЭДО = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Выборка.Ссылка);
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
				
				НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.ВладелецФайла,Истина);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() > 0 Тогда
					Если (НаборЗаписей[0].ЭлектронныйДокумент = Выборка.Ссылка 
						ИЛИ НаборЗаписей[0].ЭлектронныйДокумент = ВторойТитул)Тогда
						
						НаборЗаписей[0].ЭлектронныйДокумент = ДокументОбъект.Ссылка;
						НаборЗаписей.Записать();
					Иначе
						ДокументОбъект.ПометкаУдаления = Истина;
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Параметры.ОбработкаЗавершена = Истина;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.4.
// Переводит на новую архитектуру произвольные документы.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ПеревестиНаНовуюАрхитектуруПроизвольныхЭД(Параметры) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Если НЕ Параметры.Свойство("ВсегоПроизвольныхЭД") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПроизвольныйЭД.Ссылка) КАК КоличествоДокументов
			|ИЗ
			|	Документ.УдалитьПроизвольныйЭД КАК ПроизвольныйЭД
			|ГДЕ
			|	НЕ ПроизвольныйЭД.ПометкаУдаления";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Параметры.Вставить("ВсегоПроизвольныхЭД", Выборка.КоличествоДокументов);
			Иначе
				Параметры.Вставить("ВсегоПроизвольныхЭД", 0);
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПроизвольныйЭД.Направление,
		|	ПроизвольныйЭД.Прочитан,
		|	ПроизвольныйЭД.СтатусДокумента,
		|	ВЫРАЗИТЬ(ПроизвольныйЭД.Текст КАК СТРОКА(1000)) КАК Текст,
		|	ПроизвольныйЭД.ТребуетсяПодтверждение,
		|	ПроизвольныйЭД.ТипДокумента,
		|	ПроизвольныйЭД.ДокументОснование,
		|	ПроизвольныйЭД.ДоговорКонтрагента,
		|	ЭДПрисоединенныеФайлы.УдалитьВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
		|	Значение(Перечисление.ВидыЭД.ПроизвольныйЭД) КАК ВидЭД,
		|	Значение(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД) КАК ТипЭлементаВерсииЭД,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаВыпискиБанка КАК ДатаВыпискиБанка,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаИзмененияВнешнегоСтатусаЭД КАК ДатаИзмененияВнешнегоСтатусаЭД,
		|	ЭДПрисоединенныеФайлы.УдалитьНомерВерсииЭД КАК НомерВерсииЭД,
		|	ЭДПрисоединенныеФайлы.УдалитьНомерДокументаОтправителя КАК НомерДокументаОтправителя,
		|	ЭДПрисоединенныеФайлы.УдалитьОтветственный КАК Ответственный,
		|	ЭДПрисоединенныеФайлы.УдалитьПричинаОтклонения КАК ПричинаОтклонения,
		|	ЭДПрисоединенныеФайлы.УдалитьПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД КАК НастройкаЭДО,
		|	ЭДПрисоединенныеФайлы.УдалитьСуммаДокумента КАК СуммаДокумента,
		|	ЭДПрисоединенныеФайлы.УникальныйИД КАК УникальныйИД,
		|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний КАК УникальныйИДВнешний,
		|	ПроизвольныйЭД.Организация,
		|	ПроизвольныйЭД.Контрагент,
		|	ПроизвольныйЭД.Дата,
		|	ПроизвольныйЭД.Ссылка,
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
		|	ПроизвольныйЭД.Номер КАК НомерПЭД,
		|	СостоянияЭД.СостояниеВерсииЭД,
		|	ЭДПрисоединенныеФайлы.ИдентификаторыОснованийВладельцаФайла.(
		|		ИдентификаторДокументаОснования,
		|		ИдентификаторЭДДокументаОснования
		|	) КАК Основания,
		|	ЕСТЬNULL(СостоянияЭД.Комментарий, """") КАК Комментарий
		|ИЗ
		|	Документ.УдалитьПроизвольныйЭД КАК ПроизвольныйЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО ПроизвольныйЭД.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла
		|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО (СостоянияЭД.СсылкаНаОбъект = ПроизвольныйЭД.Ссылка)
		|ГДЕ
		|	НЕ ПроизвольныйЭД.ПометкаУдаления";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Если Параметры.Свойство("ОбработаноПроизвольныхЭД") Тогда
				Параметры.ОбработаноПроизвольныхЭД = Параметры.ОбработаноПроизвольныхЭД + Выборка.Количество();
			Иначе
				Параметры.Вставить("ОбработаноПроизвольныхЭД", Выборка.Количество());
			КонецЕсли;
			
			Параметры.ОбработкаЗавершена = Ложь;
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ВсегоПроизвольныхЭД;
			Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ОбработаноПроизвольныхЭД;
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					ДокументОбъект = Документы.ЭлектронныйДокументВходящий.СоздатьДокумент();
					Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
						НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
						НоваяСтрока.ДокументОснование = Выборка.ДокументОснование;
					КонецЕсли;
				Иначе
					ДокументОбъект = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
					Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
						НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
						НоваяСтрока.ДокументОснование = Выборка.ДокументОснование;
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
				
				Если Выборка.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					ДокументОбъект.НомерДокументаОтправителя = Выборка.НомерПЭД;
				КонецЕсли;
				
				Если ДокументОбъект.ПрофильНастроекЭДО.Пустая() Тогда
					НастройкиЭД = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ДокументОбъект, ,,,ДокументОбъект.ВидЭД); 
					Если ЗначениеЗаполнено(НастройкиЭД) Тогда
						ДокументОбъект.НастройкаЭДО = НастройкиЭД.СоглашениеЭД;
						ДокументОбъект.ПрофильНастроекЭДО = НастройкиЭД.ПрофильНастроекЭДО;
					КонецЕсли;
				КонецЕсли;
				
				Если ДокументОбъект.ВерсияРегламентаЭДО.Пустая() Тогда
					ДокументОбъект.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
				КонецЕсли;
				
				Если ПустаяСтрока(ДокументОбъект.УникальныйИД) Тогда
					ДокументОбъект.УникальныйИД = Новый УникальныйИдентификатор;
				КонецЕсли;
				
				ВыборкаОснований = Выборка.Основания.Выбрать();
				
				Пока ВыборкаОснований.Следующий() Цикл
					НоваяСтрока = ДокументОбъект.ИдентификаторыОснованийВладельцаФайла.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаОснований);
				КонецЦикла;
				
				ДокументОбъект.УстановитьНовыйНомер();
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
				
				ВыборкаЭД = ПолучитьВыборкуЭД(Выборка.УникальныйИД, Выборка.Ссылка);
				
				Пока ВыборкаЭД.Следующий() Цикл
					СправочникОбъект = ВыборкаЭД.Ссылка.ПолучитьОбъект();
					СправочникОбъект.ВладелецФайла = ДокументОбъект.Ссылка;
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				КонецЦикла;
				
				Если Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Аннулирован
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно 
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи Тогда
					
					ДокументОбъект.СостояниеЭДО = Выборка.СостояниеВерсииЭД;
					
					Если ПустаяСтрока(ДокументОбъект.ПричинаОтклонения) 
						И НЕ ПустаяСтрока(Выборка.Комментарий) Тогда
						
						ДокументОбъект.ПричинаОтклонения = Выборка.Комментарий;
					КонецЕсли;
					
					НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.Ссылка,Истина);
					НаборЗаписей.Записать();
				Иначе
					
					Если ЗначениеЗаполнено(Выборка.ЭД) Тогда
						ДокументОбъект.СостояниеЭДО = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Выборка.ЭД);
					Иначе
						ДокументОбъект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НеСформирован;
					КонецЕсли;
					
				КонецЕсли;
				
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
				
				ПроизвольныйДокумент = Выборка.Ссылка.ПолучитьОбъект();
				ПроизвольныйДокумент.ПометкаУдаления = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПроизвольныйДокумент);
			КонецЦикла;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК Ссылка,
			|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК ДокументОснование,
			|	ВЫРАЗИТЬ(ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК Документ.УдалитьПроизвольныйЭД).Направление КАК НаправлениеЭД,
			|	ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования КАК ИдентификаторДокументаОснования,
			|	ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторЭДДокументаОснования КАК ИдентификаторЭДДокументаОснования
			|ПОМЕСТИТЬ вт_Документы
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ИдентификаторыОснованийВладельцаФайла КАК ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла
			|		ПО ЭлектронныйДокументИсходящийДокументыОснования.Ссылка = ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.Ссылка
			|ГДЕ
			|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.ВидЭД = Значение(Перечисление.ВидыЭД.ПроизвольныйЭД)
			|	И ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование ССЫЛКА Документ.УдалитьПроизвольныйЭД
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка,
			|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование,
			|	ВЫРАЗИТЬ(ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование КАК Документ.УдалитьПроизвольныйЭД).Направление,
			|	ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования,
			|	ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторЭДДокументаОснования
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ИдентификаторыОснованийВладельцаФайла КАК ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла
			|		ПО (ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.Ссылка = ЭлектронныйДокументВходящийДокументыОснования.Ссылка)
			|ГДЕ
			|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка.ВидЭД = Значение(Перечисление.ВидыЭД.ПроизвольныйЭД)
			|	И ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование ССЫЛКА Документ.УдалитьПроизвольныйЭД
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	вт_Документы.Ссылка КАК Ссылка,
			|	вт_Документы.ДокументОснование КАК ДокументОснование,
			|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
			|ИЗ
			|	вт_Документы КАК вт_Документы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|		ПО вт_Документы.ИдентификаторДокументаОснования = ЭДПрисоединенныеФайлы.НомерЭД
			|			И (ЭДПрисоединенныеФайлы.НаправлениеЭД = вт_Документы.НаправлениеЭД)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.ВладелецФайла) Тогда
					
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					
					СтрокаОснования = ДокументОбъект.ДокументыОснования.Найти(Выборка.ДокументОснование, "ДокументОснование");
					
					Если СтрокаОснования = Неопределено Тогда
						НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
						НоваяСтрока.ДокументОснование = Выборка.ВладелецФайла;
					Иначе
						СтрокаОснования.ДокументОснование = Выборка.ВладелецФайла;
					КонецЕсли;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Параметры.ОбработкаЗавершена = Истина;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.4
// Удаляет распакованные пакеты ЭД и переводит на новую архитектуру нераспакованные.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ПеревестиНаНовуюАрхитектуруПакетыЭД(Параметры) Экспорт 
	
	НачатьТранзакцию();
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПакетЭД.Ссылка,
		|	ПакетЭД.СтатусПакета,
		|	ПакетЭД.ПометкаУдаления
		|ПОМЕСТИТЬ вт_Пакеты
		|ИЗ
		|	Документ.ПакетЭД КАК ПакетЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Пакеты.Ссылка
		|ИЗ
		|	вт_Пакеты КАК вт_Пакеты
		|ГДЕ
		|	вт_Пакеты.СтатусПакета В(&УдаляемыеСтатусы)
		|	И НЕ вт_Пакеты.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Пакеты.Ссылка
		|ИЗ
		|	вт_Пакеты КАК вт_Пакеты
		|ГДЕ
		|	НЕ вт_Пакеты.СтатусПакета В (&УдаляемыеСтатусы)";
		УдаляемыеСтатусы = Новый Массив;
		УдаляемыеСтатусы.Добавить(Перечисления.СтатусыПакетовЭД.Отправлен);
		УдаляемыеСтатусы.Добавить(Перечисления.СтатусыПакетовЭД.Распакован);
		УдаляемыеСтатусы.Добавить(Перечисления.СтатусыПакетовЭД.Отменен);
		УдаляемыеСтатусы.Добавить(Перечисления.СтатусыПакетовЭД.Неизвестный);
		Запрос.УстановитьПараметр("УдаляемыеСтатусы",УдаляемыеСтатусы);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Выборка = МассивРезультатов[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			ПакетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПакетОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
		Выборка = МассивРезультатов[2].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.Ссылка
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
			Запрос.УстановитьПараметр("ВладелецФайла", Выборка.Ссылка);

			ВыборкаЭД = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаЭД.Следующий() Цикл	
				
				ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаЭД.Ссылка,, Истина);
				
				ПараметрыФайла = Новый Структура();
				ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", Выборка.Ссылка);
				ПараметрыФайла.Вставить("ИмяБезРасширения", ДанныеФайла.ИмяФайла);
				ПараметрыФайла.Вставить("РасширениеБезТочки", ДанныеФайла.Расширение);
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
				
				ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				
				ФайлОбъект = ВыборкаЭД.Ссылка.ПолучитьОбъект();
				ФайлОбъект.ПометкаУдаления = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ФайлОбъект);
				
			КонецЦикла;
			
			ПакетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Для Каждого СтрокаВладельца Из ПакетОбъект.ЭлектронныеДокументы Цикл
				СтрокаВладельца.ОбъектВладелец = СтрокаВладельца.ЭлектронныйДокумент.ВладелецФайла;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПакетОбъект);
			
		КонецЦикла;

		Параметры.ОбработкаЗавершена = Истина;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.7
// Добавляет новые виды ЭД в справочники БЭД.
//
Процедура УдалитьНовыеВидыЭДУПД_УКД() Экспорт
	
	НачатьТранзакцию();

	// Обновим элементы справочника Профили настроек ЭДО.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		ИскомыйПрофильНастроек = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Истина;
		
		СтрокаВидЭД = ИскомыйПрофильНастроек.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца, "ИсходящийДокумент");
		Если СтрокаВидЭД <> Неопределено Тогда
			ИскомыйПрофильНастроек.ИспользоватьУПД = СтрокаВидЭД.Формировать;
			ИскомыйПрофильНастроек.ИсходящиеДокументы.Удалить(СтрокаВидЭД);
		КонецЕсли;
		
		СтрокаВидЭД = ИскомыйПрофильНастроек.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца, "ИсходящийДокумент");
		Если СтрокаВидЭД <> Неопределено Тогда
			ИскомыйПрофильНастроек.ИспользоватьУКД = СтрокаВидЭД.Формировать;
			ИскомыйПрофильНастроек.ИсходящиеДокументы.Удалить(СтрокаВидЭД);
		КонецЕсли;
		
		Для каждого Строка Из ИскомыйПрофильНастроек.ИсходящиеДокументы Цикл
			
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
				Строка.Формировать = Не ИскомыйПрофильНастроек.ИспользоватьУПД;
				Строка.Приоритет = 1;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель Тогда
				Строка.Формировать = Не ИскомыйПрофильНастроек.ИспользоватьУПД;
				Строка.Приоритет = 2;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
				Строка.Формировать = Не ИскомыйПрофильНастроек.ИспользоватьУПД;
				Строка.Приоритет = 3;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура Тогда
				Строка.ВерсияФормата = ?(ИскомыйПрофильНастроек.ИспользоватьУПД, НСтр("ru = 'ФНС 5.01 (УПД:Счет-фактура и первичный документ)'"), НСтр("ru = 'ФНС 5.02'"));
				Строка.Приоритет = 4;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				Строка.Формировать = Не ИскомыйПрофильНастроек.ИспользоватьУКД;
				Строка.Приоритет = 5;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				Строка.ВерсияФормата = ?(ИскомыйПрофильНастроек.ИспользоватьУКД, НСтр("ru = 'ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)'"), НСтр("ru = 'ФНС 5.02'"));
				Строка.Приоритет = 6;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				Строка.Приоритет = 7;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.КаталогТоваров Тогда
				Строка.Приоритет = 10;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СчетНаОплату Тогда
				Строка.Приоритет = 11;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ПрайсЛист Тогда
				Строка.Приоритет = 12;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ЗаказТовара Тогда
				Строка.Приоритет = 13;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
				Строка.Приоритет = 14;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
				Строка.Приоритет = 15;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
				Строка.Приоритет = 16;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.ДокументУчета) Тогда
				Строка.ДокументУчета = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(Строка.ИсходящийДокумент);
			КонецЕсли;
			
		КонецЦикла;
		
		ИскомыйПрофильНастроек.ИсходящиеДокументы.Сортировать("Приоритет Возр");
		
		Если ЗаписатьОбъект Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомыйПрофильНастроек);
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновим элементы справочника Настройки ЭДО.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)";
	
	СпособыОбменаЭД = Новый Массив;
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
	Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		ИскомаяНастройка = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Истина;
		
		СтрокаВидЭД = ИскомаяНастройка.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца, "ИсходящийДокумент");
		Если СтрокаВидЭД <> Неопределено Тогда
			ИскомаяНастройка.ИспользоватьУПД = СтрокаВидЭД.Формировать;
			ИскомаяНастройка.ИсходящиеДокументы.Удалить(СтрокаВидЭД);
		КонецЕсли;
		
		СтрокаВидЭД = ИскомаяНастройка.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца, "ИсходящийДокумент");
		Если СтрокаВидЭД <> Неопределено Тогда
			ИскомаяНастройка.ИспользоватьУКД = СтрокаВидЭД.Формировать;
			ИскомаяНастройка.ИсходящиеДокументы.Удалить(СтрокаВидЭД);
		КонецЕсли;
		
		Для каждого Строка Из ИскомаяНастройка.ИсходящиеДокументы Цикл
			
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
				Строка.Формировать = Не ИскомаяНастройка.ИспользоватьУПД;
				Строка.Приоритет = 1;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель Тогда
				Строка.Формировать = Не ИскомаяНастройка.ИспользоватьУПД;
				Строка.Приоритет = 2;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
				Строка.Формировать = Не ИскомаяНастройка.ИспользоватьУПД;
				Строка.Приоритет = 3;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура Тогда
				Строка.ВерсияФормата = ?(ИскомаяНастройка.ИспользоватьУПД, НСтр("ru = 'ФНС 5.01 (УПД:Счет-фактура и первичный документ)'"), НСтр("ru = 'ФНС 5.02'"));
				Строка.Приоритет = 4;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				Строка.Формировать = Не ИскомаяНастройка.ИспользоватьУКД;
				Строка.Приоритет = 5;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				Строка.ВерсияФормата = ?(ИскомаяНастройка.ИспользоватьУКД, НСтр("ru = 'ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)'"), НСтр("ru = 'ФНС 5.02'"));
				Строка.Приоритет = 6;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				Строка.Приоритет = 7;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.КаталогТоваров Тогда
				Строка.Приоритет = 10;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СчетНаОплату Тогда
				Строка.Приоритет = 11;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ПрайсЛист Тогда
				Строка.Приоритет = 12;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ЗаказТовара Тогда
				Строка.Приоритет = 13;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
				Строка.Приоритет = 14;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
				Строка.Приоритет = 15;
			КонецЕсли;
			Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
				Строка.Приоритет = 16;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.ДокументУчета) Тогда
				Строка.ДокументУчета = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(Строка.ИсходящийДокумент);
			КонецЕсли;
			
		КонецЦикла;
		
		ИскомаяНастройка.ИсходящиеДокументы.Сортировать("Приоритет Возр");
		
		Если ЗаписатьОбъект Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомаяНастройка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновим элементы справочника Сертификаты ЭП.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат КАК Сертификат
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификатыПодписейОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ПО (СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО = ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Ссылка)
	|ГДЕ
	|	НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.ПометкаУдаления
	|	И НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.Отозван
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Сертификат КАК СертификатЭП,
	|	ПодписываемыеВидыЭД.ВидЭД,
	|	ПодписываемыеВидыЭД.Использовать
	|ИЗ
	|	Сертификаты КАК Сертификаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
	|		ПО Сертификаты.Сертификат.Ссылка = ПодписываемыеВидыЭД.СертификатЭП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Сертификат КАК СертификатЭП
	|ИЗ
	|	Сертификаты КАК Сертификаты";
	
	СпособыОбменаЭД = Новый Массив;
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
	Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[2].Выбрать();
	ТЗ = Результат[1].Выгрузить();
	Попытка
		Пока Выборка.Следующий() Цикл
			Отбор = Новый Структура("СертификатЭП", Выборка.СертификатЭП);
			КопияТЗ = ТЗ.Скопировать(Отбор);
			ЗаписатьОбъект = Ложь;
			
			СтрокаВидЭД = КопияТЗ.Найти(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца, "ВидЭД");
			Если СтрокаВидЭД <> Неопределено Тогда
				КопияТЗ.Удалить(СтрокаВидЭД);
				ЗаписатьОбъект = Истина;
			КонецЕсли;
			
			СтрокаВидЭД = КопияТЗ.Найти(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца, "ВидЭД");
			Если СтрокаВидЭД <> Неопределено Тогда
				КопияТЗ.Удалить(СтрокаВидЭД);
				ЗаписатьОбъект = Истина;
			КонецЕсли;
			
			Если ЗаписатьОбъект Тогда
				СохранитьПодписываемыеВидыЭД(Выборка.СертификатЭП, КопияТЗ);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ВидОперации = НСтр("ru = 'Обновление информационной базы'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки);
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.25
// Устанавливает актуальные состояния для ЭД.
//
Процедура УстановитьАктуальныеСостоянияЭД() Экспорт
	
	// Во входящих и исходящих документах изменяется состояние если есть расхождения с р.с. СостоянияЭД.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящий.Ссылка КАК ЭД,
	|	ЭлектронныйДокументИсходящий.ВидЭД КАК ВидЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеДокументаИБ,
	|	ЭлектронныйДокументИсходящий.СостояниеЭДО КАК СостояниеДокументаЭД,
	|	ЕСТЬNULL(СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП, ЛОЖЬ) КАК ИспользоватьЭП
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|			ПО ЭлектронныйДокументИсходящий.ВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
	|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭлектронныйДокументИсходящий.Ссылка
	|ГДЕ
	|	НЕ СостоянияЭД.СостояниеВерсииЭД = ЭлектронныйДокументИсходящий.СостояниеЭДО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящий.Ссылка,
	|	ЭлектронныйДокументВходящий.ВидЭД,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	ЭлектронныйДокументВходящий.СостояниеЭДО,
	|	ЕСТЬNULL(СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП, ЛОЖЬ)
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|			ПО ЭлектронныйДокументВходящий.ВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
	|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭлектронныйДокументВходящий.Ссылка
	|ГДЕ
	|	НЕ СостоянияЭД.СостояниеВерсииЭД = ЭлектронныйДокументВходящий.СостояниеЭДО";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТребуетсяИзвещение = Истина;
		
		Если Выборка.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			Или Выборка.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			ТребуетсяПодтверждение = Ложь;
			
		Иначе
			Если Выборка.ИспользоватьЭП Тогда
				
				ТребуетсяПодтверждение = Истина;
				
				Если Выборка.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
					ТребуетсяПодтверждение = Ложь;
				КонецЕсли;
				
			Иначе
				
				ТребуетсяПодтверждение = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект = Выборка.ЭД.ПолучитьОбъект();
		ДокументОбъект.ТребуетсяИзвещение = ТребуетсяИзвещение;
		ДокументОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
		ДокументОбъект.СостояниеЭДО = Выборка.СостояниеДокументаИБ;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.31
// Добавляет новые виды ЭД в справочники БЭД на основании "УПДУКД" документов.
//
Процедура ПеревестиНаНовуюАрхитектуруСтарыеУПДУКД() Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка КАК ВладелецЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.СостояниеЭДО,
		|	СостоянияЭД.СсылкаНаОбъект,
		|	ЭДПрисоединенныеФайлыВладельцы.Ссылка КАК ВторойТитул
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлыВладельцы
		|		ПО (ЭДПрисоединенныеФайлыВладельцы.ЭлектронныйДокументВладелец = ЭДПрисоединенныеФайлы.Ссылка)
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД В (&ВидЭД)
		|	И ЭДПрисоединенныеФайлы.УдалитьВидЭД В (&ВидЭД)
		|	И ЭДПрисоединенныеФайлыВладельцы.УдалитьВидЭД В (&ВидЭДВторыхТитулов)";
		
		ВидЭДДляПоиска = Новый Массив;
		ВидЭДДляПоиска.Добавить(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца);
		ВидЭДДляПоиска.Добавить(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца);
		
		ВидЭДДляПоискаВторыхТитулов = Новый Массив;
		ВидЭДДляПоискаВторыхТитулов.Добавить(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПокупателя);
		ВидЭДДляПоискаВторыхТитулов.Добавить(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПокупателя);
		
		Запрос.УстановитьПараметр("ВидЭД", ВидЭДДляПоиска);
		Запрос.УстановитьПараметр("ВидЭДВторыхТитулов", ВидЭДДляПоискаВторыхТитулов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИсходныйОбъект = Выборка.ВторойТитул.ПолучитьОбъект();
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД;
			Если ИсходныйОбъект.ТипЭлементаВерсииЭД = Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца Тогда
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД;
			КонецЕсли;
			ИсходныйОбъект.ТипЭлементаВерсииЭД = ТипЭлементаВерсииЭД;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИсходныйОбъект);
			
			ИсходныйОбъект = Выборка.ВладелецЭД.ПолучитьОбъект();
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
			Если Выборка.ВладелецФайлаВидЭД = Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца Тогда
				ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
			КонецЕсли;
			ИсходныйОбъект.ВидЭД = ВидЭД;
			
			НоваяСтрока = ИсходныйОбъект.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Выборка.СсылкаНаОбъект;
			
			
			Если ЗначениеЗаполнено(Выборка.СсылкаНаОбъект) Тогда
				
				НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.СсылкаНаОбъект, Истина);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() > 0 Тогда
					
					НаборЗаписей[0].ЭлектронныйДокумент = Выборка.ВладелецЭД;
					НаборЗаписей[0].СостояниеВерсииЭД = Выборка.ВладелецФайлаСостояниеЭДО;
					НаборЗаписей.Записать();
					
				КонецЕсли;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИсходныйОбъект);
			
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.31
// Добавляет новые виды ЭД в справочники БЭД на основании "старых" CML документов.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ПеревестиНаНовуюАрхитектуруЭДОСтарыеCML(Параметры) Экспорт
	
	НачатьТранзакцию();
	Попытка
	
		ТипыЭлементовВерсийЭД = Новый Массив;
		ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПустаяСсылка());
		
		ВидыИсключаемыхЭД = Новый Массив;
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПокупателя);
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПокупателя);
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ПустаяСсылка());
		
		Если НЕ Параметры.Свойство("ВсегоДокументовЭДО") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭДПрисоединенныеФайлы.Ссылка) КАК КоличествоДокументов
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипыЭлементовВерсийЭД)
			|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
			|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий
			|	И НЕ ЭДПрисоединенныеФайлы.УдалитьВидЭД В (&ВидыИсключаемыхЭД)";
			Запрос.УстановитьПараметр("ТипыЭлементовВерсийЭД",ТипыЭлементовВерсийЭД);
			Запрос.УстановитьПараметр("ВидыИсключаемыхЭД",ВидыИсключаемыхЭД);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Параметры.Вставить("ВсегоДокументовЭДО", Выборка.КоличествоДокументов);
			Иначе
				Параметры.Вставить("ВсегоДокументовЭДО", 0);
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ЭДПрисоединенныеФайлы.УдалитьВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
		|	ЭДПрисоединенныеФайлы.УдалитьВидЭД КАК ВидЭД,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаВыпискиБанка КАК ДатаВыпискиБанка,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаИзмененияВнешнегоСтатусаЭД КАК ДатаИзмененияВнешнегоСтатусаЭД,
		|	ЭДПрисоединенныеФайлы.УдалитьКонтрагент КАК Контрагент,
		|	ЭДПрисоединенныеФайлы.УдалитьНомерВерсииЭД КАК НомерВерсииЭД,
		|	ЭДПрисоединенныеФайлы.УдалитьНомерДокументаОтправителя КАК НомерДокументаОтправителя,
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
		|	ЭДПрисоединенныеФайлы.УдалитьОрганизация КАК Организация,
		|	ЭДПрисоединенныеФайлы.УдалитьОтветственный КАК Ответственный,
		|	ЭДПрисоединенныеФайлы.УдалитьПричинаОтклонения КАК ПричинаОтклонения,
		|	ЭДПрисоединенныеФайлы.УдалитьПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД КАК НастройкаЭДО,
		|	ЭДПрисоединенныеФайлы.УдалитьСуммаДокумента КАК СуммаДокумента,
		|	ЭДПрисоединенныеФайлы.УникальныйИД КАК УникальныйИД,
		|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД,
		|	ЭДПрисоединенныеФайлы.ДатаСоздания,
		|	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, НЕОПРЕДЕЛЕНО) КАК СостояниеВерсииЭД,
		|	ЕСТЬNULL(СостоянияЭД.Комментарий, """") КАК Комментарий,
		|	ЭДПрисоединенныеФайлы.ПометкаУдаления,
		|	ЭДПрисоединенныеФайлы.ИдентификаторыОснованийВладельцаФайла.(
		|		ИдентификаторДокументаОснования,
		|		ИдентификаторЭДДокументаОснования
		|	) КАК Основания,
		|	ЕСТЬNULL(СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП, ЛОЖЬ) КАК ИспользоватьЭП
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка)
		|			И (СостоянияЭД.СсылкаНаОбъект = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|		ПО ЭДПрисоединенныеФайлы.УдалитьВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
		|			И ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипыЭлементовВерсийЭД)
		|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
		|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий
		|	И НЕ ЭДПрисоединенныеФайлы.УдалитьВидЭД В (&ВидыИсключаемыхЭД)";
		
		Запрос.УстановитьПараметр("ТипыЭлементовВерсийЭД", ТипыЭлементовВерсийЭД);
		Запрос.УстановитьПараметр("ВидыИсключаемыхЭД",     ВидыИсключаемыхЭД);
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Если Параметры.Свойство("ОбработаноДокументовЭДО") Тогда
				Параметры.ОбработаноДокументовЭДО = Параметры.ОбработаноДокументовЭДО + Выборка.Количество();
			Иначе
				Параметры.Вставить("ОбработаноДокументовЭДО", Выборка.Количество());
			КонецЕсли;
			
			Параметры.ОбработкаЗавершена = Ложь;
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ВсегоДокументовЭДО;
			Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ОбработаноДокументовЭДО;
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					ДокументОбъект = Документы.ЭлектронныйДокументВходящий.СоздатьДокумент();
					НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = Выборка.ВладелецФайла;
				Иначе
					ДокументОбъект = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
					НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = Выборка.ВладелецФайла;
				КонецЕсли;
				
				ВыборкаОснований = Выборка.Основания.Выбрать();
				
				Пока ВыборкаОснований.Следующий() Цикл
					НоваяСтрока = ДокументОбъект.ИдентификаторыОснованийВладельцаФайла.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаОснований);
				КонецЦикла;
				
				ТребуетсяИзвещение = Истина;
				
				Если Выборка.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					Или Выборка.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
					ТребуетсяПодтверждение = Ложь;
					
				Иначе
					Если Выборка.ИспользоватьЭП Тогда
						
						ТребуетсяПодтверждение = Истина;
						Если Выборка.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
							ТребуетсяПодтверждение = Ложь;
						КонецЕсли;
					Иначе
						ТребуетсяПодтверждение = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ДокументОбъект.ТребуетсяИзвещение = ТребуетсяИзвещение;
				ДокументОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
				
				ДокументОбъект.Дата = Выборка.ДатаСоздания;
				ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
				Если Не ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
					ДокументОбъект.Дата = ТекущаяДатаСеанса();
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ДокументОбъект.ТипЭлементаВерсииЭД) Тогда
					ДокументОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
				КонецЕсли;
				
				ДокументОбъект.УстановитьНовыйНомер();
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
				
				
				ВторойТитул = Неопределено;
				
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СправочникОбъект.ВладелецФайла = ДокументОбъект.Ссылка;
				Если Не ЗначениеЗаполнено(СправочникОбъект.ТипЭлементаВерсииЭД) Тогда
					СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
				КонецЕсли;
				
				Если СправочникОбъект.УдалитьВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
					СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель;
					ВторойТитул = Выборка.Ссылка;
				ИначеЕсли СправочникОбъект.УдалитьВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
					СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик;
					ВторойТитул = Выборка.Ссылка;
				ИначеЕсли СправочникОбъект.УдалитьВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
					СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
					ВторойТитул = Выборка.Ссылка;
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				
				Если Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Аннулирован
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно 
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи Тогда
					
					ДокументОбъект.СостояниеЭДО = Выборка.СостояниеВерсииЭД;
					
					Если ПустаяСтрока(ДокументОбъект.ПричинаОтклонения)
						И НЕ ПустаяСтрока(Выборка.Комментарий) Тогда
						
						ДокументОбъект.ПричинаОтклонения = Выборка.Комментарий;
					КонецЕсли;
					
				Иначе
					ДокументОбъект.СостояниеЭДО = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Выборка.Ссылка);
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
				
				НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.ВладелецФайла,Истина);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() > 0 Тогда
					Если (НаборЗаписей[0].ЭлектронныйДокумент = Выборка.Ссылка 
						ИЛИ НаборЗаписей[0].ЭлектронныйДокумент = ВторойТитул) Тогда
						
						НаборЗаписей[0].ЭлектронныйДокумент = ДокументОбъект.Ссылка;
						НаборЗаписей.Записать();
					Иначе
						ДокументОбъект.ПометкаУдаления = Истина;
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Параметры.ОбработкаЗавершена = Истина;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.34
// Заполняет дату последнего изменения состояния в рамках ЭДО.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьДатуПоследнегоИзмененияСостоянияЭДО(Параметры) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Если НЕ Параметры.Свойство("ВсегоДокументовЭДО") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ЭДПрисоединенныеФайлы.ВладелецФайла) КАК КоличествоДокументов
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|ГДЕ
			|	(ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
			|			ИЛИ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Параметры.Вставить("ВсегоДокументовЭДО", Выборка.КоличествоДокументов);
			Иначе
				Параметры.Вставить("ВсегоДокументовЭДО", 0);
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|	МАКСИМУМ(ЭДПрисоединенныеФайлы.ДатаИзмененияСтатусаЭД) КАК ДатаИзмененияСтатусаЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	(ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
		|			ИЛИ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий)
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
		|	И ЭДПрисоединенныеФайлы.ВладелецФайла.ДатаИзмененияСостоянияЭДО = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭДПрисоединенныеФайлы.ВладелецФайла
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИзмененияСтатусаЭД";

		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Если Параметры.Свойство("ОбработаноДокументовЭДО") Тогда
				Параметры.ОбработаноДокументовЭДО = Параметры.ОбработаноДокументовЭДО + Выборка.Количество();
			Иначе
				Параметры.Вставить("ОбработаноДокументовЭДО", Выборка.Количество());
			КонецЕсли;
			
			Параметры.ОбработкаЗавершена = Ложь;
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ВсегоДокументовЭДО;
			Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ОбработаноДокументовЭДО;
			
			Пока Выборка.Следующий() Цикл
				
				ДокументОбъект = Выборка.ВладелецФайла.ПолучитьОбъект();
				
				ДатаИзмененияСостоянияЭДО = Выборка.ДатаИзмененияСтатусаЭД;
				Если Не ЗначениеЗаполнено(ДатаИзмененияСостоянияЭДО) Тогда
					ДатаИзмененияСостоянияЭДО = Выборка.ВладелецФайла.Дата;
				КонецЕсли;
				ДокументОбъект.ДатаИзмененияСостоянияЭДО = ДатаИзмененияСостоянияЭДО;
				
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
				
			КонецЦикла;
		Иначе
			Параметры.ОбработкаЗавершена = Истина;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.38
// Заменяет виды ЭД помеченные префиксом Удалить на используемые.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаменитьУстаревшиеВидыЭД(Параметры) Экспорт
	
	Если НЕ Параметры.Свойство("ВсегоДокументов") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(1) КАК Количество
		|ПОМЕСТИТЬ втДокументы
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|ГДЕ
		|	ЭлектронныйДокументИсходящий.ВидЭД В (ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУПД_ИнформацияПродавца), ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУКД_ИнформацияПродавца))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(1)
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|ГДЕ
		|	ЭлектронныйДокументВходящий.ВидЭД В (ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУПД_ИнформацияПродавца), ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУКД_ИнформацияПродавца))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(втДокументы.Количество) КАК Количество
		|ИЗ
		|	втДокументы КАК втДокументы";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.Вставить("ВсегоДокументов", Выборка.Количество);
		Иначе
			Параметры.Вставить("ВсегоДокументов", 0);
		КонецЕсли;
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящий.Ссылка КАК Ссылка,
	|	ЭлектронныйДокументИсходящий.ВидЭД КАК ВидЭД
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|ГДЕ
	|	ЭлектронныйДокументИсходящий.ВидЭД В (ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУПД_ИнформацияПродавца), ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУКД_ИнформацияПродавца))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящий.Ссылка,
	|	ЭлектронныйДокументВходящий.ВидЭД
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|ГДЕ
	|	ЭлектронныйДокументВходящий.ВидЭД В (ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУПД_ИнформацияПродавца), ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУКД_ИнформацияПродавца))";
	Результат = Запрос.Выполнить();
	
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Если Параметры.Свойство("ОбработаноДокументов") Тогда
			Параметры.ОбработаноДокументов = Параметры.ОбработаноДокументов + Выборка.Количество();
		Иначе
			Параметры.Вставить("ОбработаноДокументов", Выборка.Количество());
		КонецЕсли;
		
		Параметры.ОбработкаЗавершена = Ложь;
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ВсегоДокументов;
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ОбработаноДокументов;
		
		Пока Выборка.Следующий() Цикл
			
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
			Если Выборка.ВидЭД = Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца Тогда
				ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
			КонецЕсли;
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ВидЭД = ВидЭД;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
		КонецЦикла;
		
	Иначе
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.38
// Заменяет виды ЭД помеченные префиксом Удалить на используемые.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьСостоянияСтарыхУПДУКД(Параметры) Экспорт
	
	Если НЕ Параметры.Свойство("ВсегоЗаписей") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК Основание,
		|	СУММА(1) КАК Количество
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент ССЫЛКА Справочник.ЭДПрисоединенныеФайлы
		|	И СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)
		|	И (СостоянияЭД.ЭлектронныйДокумент.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
		|			ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий)
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияЭД.СсылкаНаОбъект";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.Вставить("ВсегоЗаписей", Выборка.Количество);
		Иначе
			Параметры.Вставить("ВсегоЗаписей", 0);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК Основание,
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент.ВладелецФайла, НЕОПРЕДЕЛЕНО) КАК ВладелецФайла
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.ЭлектронныйДокумент ССЫЛКА Справочник.ЭДПрисоединенныеФайлы
	|	И СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)
	|	И (СостоянияЭД.ЭлектронныйДокумент.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
	|			ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий)";
	
	Результат = Запрос.Выполнить();
		
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Если Параметры.Свойство("ОбработаноЗаписей") Тогда
			Параметры.ОбработаноЗаписей = Параметры.ОбработаноЗаписей + Выборка.Количество();
		Иначе
			Параметры.Вставить("ОбработаноЗаписей", Выборка.Количество());
		КонецЕсли;
		
		Параметры.ОбработкаЗавершена = Ложь;
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ВсегоЗаписей;
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ОбработаноЗаписей;
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.Основание);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество()>0 Тогда
				
				СостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ВладелецФайла, "СостояниеЭДО");
				НаборЗаписей[0].СостояниеВерсииЭД = СостояниеЭДО;
				НаборЗаписей[0].ЭлектронныйДокумент = Выборка.ВладелецФайла;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				
				ЭлектронныйДокументОбъект = Выборка.ВладелецФайла.ПолучитьОбъект();
				ДокументыОснования = ЭлектронныйДокументОбъект.ДокументыОснования;
				Если ДокументыОснования.Найти(Выборка.Основание, "ДокументОснование") = Неопределено Тогда
					НоваяСтрока = ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = Выборка.Основание;
					ЭлектронныйДокументОбъект.Записать();
				КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСБиблиотекойТехнологияСервиса

// См. процедуру
// ТарификацияПереопределяемый.ПриФормированииСпискаУслуг().
//
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	ПоставщикПортал1СИТС = Неопределено;
	ИдентификаторПоставщикаУслугПортал1СИТС =
		ОбменСКонтрагентамиКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС();
	Для Каждого ТекПоставщик Из ПоставщикиУслуг Цикл
		Если ТекПоставщик.Идентификатор = ИдентификаторПоставщикаУслугПортал1СИТС Тогда
			ПоставщикПортал1СИТС = ТекПоставщик;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоставщикПортал1СИТС = Неопределено Тогда
		ПоставщикПортал1СИТС = Новый Структура;
		ПоставщикПортал1СИТС.Вставить("Идентификатор", ИдентификаторПоставщикаУслугПортал1СИТС);
		ПоставщикПортал1СИТС.Вставить("Наименование" , НСтр("ru = 'Портал 1С:ИТС'"));
		ПоставщикПортал1СИТС.Вставить("Услуги"       , Новый Массив);
		ПоставщикиУслуг.Добавить(ПоставщикПортал1СИТС);
	КонецЕсли;
	
	Услуги = ПоставщикПортал1СИТС.Услуги;
	
	// Оператор [] используется для исключения ошибки компиляции,
	// если не внедрена Библиотека "Технология сервиса".
	ТипУслугиБезлимитная = Перечисления["ТипыУслуг"]["Безлимитная"];
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ОбменСКонтрагентамиКлиентСервер.ИдентификаторУслугиОбменаЭлектроннымиДокументами());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Обмен электронными документами'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере)
	
	Форма = ПараметрыПриСозданииНаСервере.Форма;
	МестоРазмещенияКомандПоУмолчанию = ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд;
	НаправлениеЭД = ПараметрыПриСозданииНаСервере.Направление;
	
	ЭлектронноеВзаимодействиеСлужебный.РазместитьНаФормеКомандыЭДО(Форма, МестоРазмещенияКомандПоУмолчанию, "ОбменСКонтрагентами", НаправлениеЭД);
	
КонецПроцедуры

Процедура ЗаполнитьСостояниеЭДО(ПараметрыПриСозданииНаСервере)
	
	Форма = ПараметрыПриСозданииНаСервере.Форма;
	ДокументСсылка = ПараметрыПриСозданииНаСервере.ДокументСсылка;
	ДекорацияСостояниеЭДО = ПараметрыПриСозданииНаСервере.ДекорацияСостояниеЭДО;
	ГруппаСостояниеЭДО = ПараметрыПриСозданииНаСервере.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиентСервер.ЗаполнитьСостояниеЭДО(Форма, ДокументСсылка, ДекорацияСостояниеЭДО, ГруппаСостояниеЭДО);
	
КонецПроцедуры

// Процедура используется для формирования дерева доп.данных.
// Данные из полученной структуры, рекурсивно добавляет в дерево доп.данных.
//
// Параметры:
//  СтрокаДереваДопДанных - Строка дерева значений - строка дерева, в которую добавляются данные.
//  СтруктураДанных - Структура - структура с добавляемыми в дерево данными. Элементами структуры могут быть: данные с
//    простым типом, массивы значений, вложенные структуры данных.
//  ДоступноСимволов - Число - количество символов, доступных для размещения данных внутри основного файла ЭД.
//  ЮридическиЗначимый - Булево - Истина - пометка данных, которые в последствии из дерева доп.данных надо будет
//    разместить в основном файле ЭД. Ложь - данные будут помещены в файл доп.данных.
//  ЭлементТЧ - Булево - данные принадлежат строке табличной части документа ИБ.
//  НомерСтроки - Строка - номер строки табличной части документа ИБ.
//
Процедура ДобавитьДанныеРекурсивно(СтрокаДереваДопДанных,
								   СтруктураДанных,
								   ДоступноСимволов,
								   ЮридическиЗначимый,
								   ЭлементТЧ,
								   НомерСтроки)
	
	Для Каждого Элемент Из СтруктураДанных Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, ЭлементТЧ);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Набор";
					
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = ЭлементТЧ;
					
					
					
				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ДобавитьДанныеРекурсивно(СтрокаДерева, Элемент.Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ,
					НомерСтроки);
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") И Элемент.Значение.Количество() > 0 Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, Истина);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Список";
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = Истина;
					
					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Список", Элемент.Ключ, ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;

					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ, "", ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый ;
					
				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ТЗ = Элемент.Значение;
				ПоляСтруктурыТЗ = "";
				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
					ПоляСтруктурыТЗ = ПоляСтруктурыТЗ + ?(ЗначениеЗаполнено(ПоляСтруктурыТЗ), ", ", "") + КолонкаТЗ.Имя;
				КонецЦикла;
				ЮридическийДо = ЮридическиЗначимый;
				Для Каждого СтрокаТЗ Из ТЗ Цикл
					СтрокаДереваНпп = СтрокаДерева.Строки.Добавить();
					
					СтрокаДереваНпп.ИмяРеквизита = "Нпп";
					СтрокаДереваНпп.ТЧ = Истина;
					СтрокаДереваНпп.ЗначениеРеквизита = Строка(ТЗ.Индекс(СтрокаТЗ));
					
					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Нпп", "", ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДереваНпп.ЮридическиЗначимый = ЮридическиЗначимый;
					
					СтруктураДанныхТЗ = Новый Структура(ПоляСтруктурыТЗ);
					ЗаполнитьЗначенияСвойств(СтруктураДанныхТЗ, СтрокаТЗ);
					ДобавитьДанныеРекурсивно(СтрокаДереваНпп, СтруктураДанныхТЗ, ДоступноСимволов, ЮридическиЗначимый,
						ЭлементТЧ, ТЗ.Индекс(СтрокаТЗ));
					
				КонецЦикла;
				Если Не ЮридическийДо = ЮридическиЗначимый Тогда
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;
					ОбновитьСтрокиДерева(СтрокаДерева,ЮридическиЗначимый);
				КонецЕсли;
				
			Иначе
				НоваяСтрока = СтрокаДереваДопДанных.Строки.Добавить();
				ВозможноРазмещениеВОсновномФайле = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ,
																					Элемент.Значение,
																					ДоступноСимволов);
				Если ЮридическиЗначимый И НЕ ВозможноРазмещениеВОсновномФайле Тогда
					ЮридическиЗначимый = Ложь;
				КонецЕсли;
				НоваяСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					НоваяСтрока.ИмяРеквизита = "Массив";
					НоваяСтрока.ЗначениеРеквизита = Элемент.Ключ;
					НоваяСтрока.ТЧ = ЭлементТЧ;
					Для Каждого Значение Из Элемент.Значение Цикл
						СтрокаЗн = НоваяСтрока.Строки.Добавить();
						СтрокаЗн.ИмяРеквизита = "Эл" + Элемент.Значение.Найти(Значение);
						СтрокаЗн.ТЧ = ЭлементТЧ;
						СтрокаЗн.ЮридическиЗначимый = НоваяСтрока.ЮридическиЗначимый;
						Если ТипЗнч(Значение) = Тип("Структура") Тогда
							СтрокаЗн.ЗначениеРеквизита = "Структура";
							ДобавитьДанныеРекурсивно(СтрокаЗн, Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
						Иначе
							
							СтрокаЗн.ЗначениеРеквизита = Значение;
						КонецЕсли
					КонецЦикла;
				Иначе
					НоваяСтрока.ИмяРеквизита = Элемент.Ключ;
					НоваяСтрока.ЗначениеРеквизита = Элемент.Значение;
					НоваяСтрока.ТЧ = ЭлементТЧ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// В функции выполняется проверка: длина строки, полученной после преобразования данных из структуры (с учетом служебных
// символов), не должна превышать количества доступных символов.
//
// Параметры:
//  СтруктураДанных - Структура - заполняемая структура.
//  Ключ - Строка - ключ добавляемого элемента.
//  Значение - Структура, примитивный тип или массив (элементы массива имеют примитивный тип) - значение добавляемого элемента.
//  ДоступноСимволов - Число - количество доступных символов результирующей строки.
//
// Возвращаемое значение:
//  Булево - Истина - элемент добавлен в структуру, Ложь - элемент не добавлен.
//
Функция ВозможноРазмещениеВОсновномФайле(Ключ, Значение, ДоступноСимволов)
	
	РазмещениеВозможно = Ложь;
	
	СлужебныеСимволы = 0;
	ДлинаСтрЗначения = 0;
	
	// Числа 41 и 31 обозначают количество служебных символов и рассчитываются следующим образом:
	// 1) если в ДеревоЗначений добавляется строка, которая будет иметь подчиненные строки, то данная строка в xml будет
	// выглядеть как элемент, имеющий вложенные (подчиненные) элементы, поэтому количество служебных символов = 41
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""></Реквизит>") + 1;
	// 2) если в ДеревоЗначений добавляется строка без подчиненных строк, то количество служебных символов = 31
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""/>") + 1;
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого Элемент Из Значение Цикл
			СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Эл" + Значение.Найти(Элемент)) + СтрДлина(Элемент) + 31;
		КонецЦикла;
		
		СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Массив") + СтрДлина(Ключ) + 41;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		Для Каждого Элемент Из Значение Цикл
			РазмещениеВозможно = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ, Элемент.Значение, ДоступноСимволов);
			Если НЕ РазмещениеВозможно Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		СлужебныеСимволы = СтрДлина("Набор") + СтрДлина(Ключ) + 41;
	Иначе // простой тип.
		СлужебныеСимволы = СтрДлина(Ключ) + СтрДлина(Значение) + 31;
	КонецЕсли;
	
	Если ДоступноСимволов >= СлужебныеСимволы Тогда
		ДоступноСимволов = ДоступноСимволов - СлужебныеСимволы;
		РазмещениеВозможно = Истина;
	КонецЕсли;
	
	Возврат РазмещениеВозможно;
	
КонецФункции

Процедура ЗаполнитьДанныеЭД(МассивФайловЭД, ЭД, СвойстваДокумента, СтрокаУИД, ТипФайла, УникальныйИдентификатор)
	
	ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ЭД, УникальныйИдентификатор);
	
	ВидЭД = СвойстваДокумента.ВидЭД;
	
	// Правка имени файла для КОРЭСФ - убрать после правки размерности в наименовании 150.
	Если ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		Наименование = ДанныеФайла.Наименование;
		ПозицияУИД = СтрНайти(Наименование, "_" + Лев(СтрокаУИД, 35));
		Если ПозицияУИД > 0 Тогда
			ДанныеФайла.Наименование = Лев(Наименование, ПозицияУИД) + СтрокаУИД;
			ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметровЭД = Новый Структура;
	СтруктураПараметровЭД.Вставить("ТипФайла", ТипФайла);
	СтруктураПараметровЭД.Вставить("ИмяФайла", ДанныеФайла.ИмяФайла);
	СтруктураПараметровЭД.Вставить("КНД", ОбменСКонтрагентамиПовтИсп.КНДПоВидуЭД(СвойстваДокумента));
	СтруктураПараметровЭД.Вставить("АдресВременногоХранилища", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	МассивФайловЭД.Добавить(СтруктураПараметровЭД);
	
	МассивСтруктурПодписей = ОбменСКонтрагентамиСлужебный.ПолучитьВсеПодписи(ЭД, УникальныйИдентификатор);
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
			ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
			Если НЕ ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
				ИмяФайлаПодписи = ДанныеФайла.Наименование + ".p7s";
			КонецЕсли;
			
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("ТипФайла", ?(ТипФайла = "ФайлВыгрузки", "ЭЦП", "ЭЦППодтверждения"));
			СтруктураПараметровЭД.Вставить("ИмяФайла", ИмяФайлаПодписи);
			СтруктураПараметровЭД.Вставить("КНД", "");
			СтруктураПараметровЭД.Вставить("АдресВременногоХранилища", СтруктураПодписи.АдресПодписи);
			
			МассивФайловЭД.Добавить(СтруктураПараметровЭД);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтрокиДерева(СтрокаДерева, ЮридическиЗначимый)
	
	Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
		
		ТекСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
		Если ТекСтрока.Строки.Количество()> 0 Тогда
			ОбновитьСтрокиДерева(ТекСтрока, ЮридическиЗначимый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Появился новый справочник ПрофилиНастроекЭДО.
Процедура ЗаполнитьДанныеОПрофиляхНастроекЭДО() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		// Пометим на удаление не действующие настройки ЭДО
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|	И СоглашенияОбИспользованииЭД.СтатусСоглашения <> ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И СоглашенияОбИспользованииЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.ПустаяСсылка)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
			НастройкаЭДО.УстановитьПометкуУдаления(Истина);
			НастройкаЭДО.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
		КонецЦикла;
		
		// Создаем элементы справочника ПрофилиНастроекЭДО.
		// Проверим не было ли обновления.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			ИспользуютсяЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
				"ИспользоватьЭлектронныеПодписи");
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СоглашенияОбИспользованииЭД.Организация,
			|	ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторОрганизации КАК СТРОКА(100)) КАК ИдентификаторОрганизации,
			|	СоглашенияОбИспользованииЭД.СпособОбменаЭД,
			|	ВЫБОР
			|		КОГДА СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
			|			ТОГДА СоглашенияОбИспользованииЭД.Ссылка
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Ссылка,
			|	СоглашенияОбИспользованииЭД.РесурсВходящихДокументов,
			|	СоглашенияОбИспользованииЭД.УдалитьАдресСервера КАК АдресСервера,
			|	СоглашенияОбИспользованииЭД.УдалитьПользователь КАК Пользователь,
			|	СоглашенияОбИспользованииЭД.УдалитьПароль КАК Пароль,
			|	СоглашенияОбИспользованииЭД.УдалитьПортFTP КАК Порт,
			|	СоглашенияОбИспользованииЭД.УдалитьПассивноеСоединениеFTP КАК ПассивноеСоединение
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
			|ГДЕ
			|	СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
			|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
			|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
			|	И НЕ СоглашенияОбИспользованииЭД.ЭтоИнтеркампани";
			
		СпособыОбменаЭД = Новый Массив;
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
		Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НовыйПрофильНастроек = Справочники.ПрофилиНастроекЭДО.СоздатьЭлемент();
				
				ШаблонНаименование = НСтр("ru = '%1, %2'");
				НовыйПрофильНастроек.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименование,
					Выборка.Организация, Выборка.СпособОбменаЭД);
				
				НовыйПрофильНастроек.Организация = Выборка.Организация;
				НовыйПрофильНастроек.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
				НовыйПрофильНастроек.СпособОбменаЭД = Выборка.СпособОбменаЭД;
				
				АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
				
				Для Каждого ЗначениеПеречисления Из АктуальныеВидыЭД Цикл
					Если ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
						И ЗначениеПеречисления <> Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
						И ЗначениеПеречисления <> Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
						И ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
						И ЗначениеПеречисления <> Перечисления.ВидыЭД.УведомлениеОбУточнении
						И ЗначениеПеречисления <> Перечисления.ВидыЭД.Ошибка
						И ЗначениеПеречисления <> Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
						
						НоваяСтрока = НовыйПрофильНастроек.ИсходящиеДокументы.Добавить();
						НоваяСтрока.Формировать = Истина;
						НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
						
						Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
							"ИспользоватьЭлектронныеПодписи") Тогда
							НоваяСтрока.ИспользоватьЭП = Истина;
						КонецЕсли;
						
						Если (ЗначениеПеречисления = Перечисления.ВидыЭД.СчетФактура
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
							И Выборка.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
							
							НоваяСтрока.Формировать = Ложь;
							НоваяСтрока.ИспользоватьЭП = Ложь;
							
						КонецЕсли;
						// Проставим в новые соглашения прямого обмена версию формата обмена.
						ВерсияФормата = "CML 4.02";
						Если ЗначениеПеречисления = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
							ВерсияФормата = "";
						ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.АктЗаказчик
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.АктИсполнитель
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ТОРГ12Покупатель
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ТОРГ12Продавец
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.СчетФактура
							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
							ВерсияФормата = НСтр("ru = 'ФНС 5.01'");
						ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
							ВерсияФормата = "CML 2.08";
						КонецЕсли;
						НоваяСтрока.ВерсияФормата = ВерсияФормата;
					КонецЕсли;
				КонецЦикла;
				
				НовыйПрофильНастроек.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
				
				Если Выборка.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
					И ИспользуютсяЭП Тогда
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	СертификатыЭП.Ссылка
					|ИЗ
					|	Справочник.УдалитьСертификатыЭП КАК СертификатыЭП
					|ГДЕ
					|	НЕ СертификатыЭП.ПометкаУдаления
					|	И НЕ СертификатыЭП.Отозван
					|	И СертификатыЭП.Организация = &Организация";
					Запрос.УстановитьПараметр("Организация", Выборка.Организация);
					ВыборкаСертификатов = Запрос.Выполнить().Выбрать();
					Пока ВыборкаСертификатов.Следующий() Цикл
						НоваяСтрока = НовыйПрофильНастроек.СертификатыПодписейОрганизации.Добавить();
						НоваяСтрока.Сертификат = ВыборкаСертификатов.Ссылка;
					КонецЦикла;
				КонецЕсли;
				
				// Настройки обмена ЭД
				Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
					ПутьКаталога = Выборка.РесурсВходящихДокументов;
					СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьКаталога);
					
					Если СтрокиПути.Количество() >= 1 Тогда
						НовоеИмя = СтрокиПути[СтрокиПути.Количество() - 1];
					КонецЕсли;
					ПутьКаталога = СтрЗаменить(ПутьКаталога, НовоеИмя, "");
					НовыйПрофильНастроек.РесурсВходящихДокументов = ПутьКаталога;
				ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
					НовыйПрофильНастроек.РесурсВходящихДокументов = Выборка.РесурсВходящихДокументов;
				ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
					НовыйПрофильНастроек.АдресСервера             = Выборка.АдресСервера;
					НовыйПрофильНастроек.Порт                     = Выборка.Порт;
					НовыйПрофильНастроек.ПассивноеСоединение      = Выборка.ПассивноеСоединение;
					НовыйПрофильНастроек.Логин                    = Выборка.Пользователь;
					НовыйПрофильНастроек.Пароль                   = Выборка.Пароль;
					ПутьКаталога = Выборка.РесурсВходящихДокументов;
					СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьКаталога);
					Если СтрокиПути.Количество() >= 1 Тогда
						НовоеИмя = СтрокиПути[СтрокиПути.Количество() - 1];
					КонецЕсли;
					ПутьКаталога = СтрЗаменить(ПутьКаталога, НовоеИмя, "");
					НовыйПрофильНастроек.РесурсВходящихДокументов = ПутьКаталога;
				ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
					// Настройки сертификатов - переносим в профиль.
					Для каждого Строка Из Выборка.Ссылка.СертификатыПодписейОрганизации Цикл
						НоваяСтрока = НовыйПрофильНастроек.СертификатыПодписейОрганизации.Добавить();
						НоваяСтрока.Сертификат = Строка.Сертификат;
					КонецЦикла;
				КонецЕсли;
				
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйПрофильНастроек);

			КонецЦикла;
		КонецЕсли;
		
		// Обновляем р/с СостоянияОбменовЭДЧерезОператоровЭДО
		НаборЗаписей = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		
		Для каждого Запись Из НаборЗаписей Цикл
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрофилиНастроекЭДО.Ссылка
			|ИЗ
			|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
			|ГДЕ
			|	ПрофилиНастроекЭДО.СпособОбменаЭД = &СпособОбменаЭД
			|	И ПрофилиНастроекЭДО.Организация = &Организация";
			Запрос.УстановитьПараметр("Организация", Запись.УдалитьСоглашениеОбИспользованииЭД.Организация);
			Запрос.УстановитьПараметр("СпособОбменаЭД", Запись.УдалитьСоглашениеОбИспользованииЭД.СпособОбменаЭД);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Запись.ПрофильНастроекЭДО = Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
		// Обновляем соглашения прямого обмена.
		// Проверим на уникальность настроек прямого обмена.
		// Лишние настройки пометим на удаление.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(СоглашенияОбИспользованииЭД.Ссылка) КАК Ссылка,
		|	СоглашенияОбИспользованииЭД.Контрагент
		|ПОМЕСТИТЬ КонтрагентыДубли
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
		|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	СоглашенияОбИспользованииЭД.Контрагент
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(СоглашенияОбИспользованииЭД.Ссылка) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка,
		|	СоглашенияОбИспользованииЭД.Контрагент КАК Контрагент
		|ИЗ
		|	КонтрагентыДубли КАК КонтрагентыДубли
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|		ПО КонтрагентыДубли.Контрагент = СоглашенияОбИспользованииЭД.Контрагент
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
		|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент";
		
		СпособыОбменаЭД = Новый Массив;
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
		Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ИскомыйКонтрагент = "";
		Пока Выборка.Следующий() Цикл
			Если ИскомыйКонтрагент = Выборка.Контрагент Тогда
				НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
				НастройкаЭДО.УстановитьПометкуУдаления(Истина);
				НастройкаЭДО.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
			Иначе
				ИскомыйКонтрагент = Выборка.Контрагент;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним недостающую информацию в настройках ЭДО.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоглашенияОбИспользованииЭД.Ссылка,
		|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
		|	ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК СТРОКА(100)) КАК ИдентификаторКонтрагента,
		|	ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторОрганизации КАК СТРОКА(100)) КАК ИдентификаторОрганизации,
		|	СоглашенияОбИспользованииЭД.Контрагент,
		|	СоглашенияОбИспользованииЭД.СпособОбменаЭД,
		|	СоглашенияОбИспользованииЭД.РесурсВходящихДокументов,
		|	СоглашенияОбИспользованииЭД.РесурсИсходящихДокументов
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|		ПО СоглашенияОбИспользованииЭД.СпособОбменаЭД = ПрофилиНастроекЭДО.СпособОбменаЭД
		|			И СоглашенияОбИспользованииЭД.Организация = ПрофилиНастроекЭДО.Организация
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
		|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|	И НЕ СоглашенияОбИспользованииЭД.ЭтоИнтеркампани";
		
		СпособыОбменаЭД = Новый Массив;
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
		Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
			
			НастройкаЭДО.Наименование       = Строка(Выборка.Контрагент);
			НастройкаЭДО.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;

			ИсходнаяТаблицаЭД = НастройкаЭДО.ИсходящиеДокументы.Выгрузить();
			
			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ПрофильНастроекЭДО,       "ПрофильНастроекЭДО");
			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.СпособОбменаЭД,           "СпособОбменаЭД");
			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ИдентификаторОрганизации, "ИдентификаторОрганизации");
			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ИдентификаторКонтрагента, "ИдентификаторКонтрагента");
			
			НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
			
			// Добавим недостающие документы в ТЧ исходящие документы для прямого обмена.
			Отбор = Новый Структура;
			Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.СчетФактура);
			НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Строка = НастройкаЭДО.ИсходящиеДокументы.Добавить();
				Строка.ИсходящийДокумент        = Перечисления.ВидыЭД.СчетФактура;
				Строка.Формировать              = Ложь;
				Строка.ИспользоватьЭП           = Ложь;
				Строка.ВерсияФормата            = НСтр("ru = 'ФНС 5.01'");
				Строка.ПрофильНастроекЭДО       = Выборка.ПрофильНастроекЭДО;
				Строка.СпособОбменаЭД           = Выборка.СпособОбменаЭД;
				Строка.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
				Строка.ИдентификаторКонтрагента = Выборка.ИдентификаторКонтрагента;
			КонецЕсли;
			Отбор = Новый Структура;
			Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.КорректировочныйСчетФактура);
			НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Строка = НастройкаЭДО.ИсходящиеДокументы.Добавить();
				Строка.ИсходящийДокумент        = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
				Строка.Формировать              = Ложь;
				Строка.ИспользоватьЭП           = Ложь;
				Строка.ВерсияФормата            = НСтр("ru = 'ФНС 5.01'");
				Строка.ПрофильНастроекЭДО       = Выборка.ПрофильНастроекЭДО;
				Строка.СпособОбменаЭД           = Выборка.СпособОбменаЭД;
				Строка.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
				Строка.ИдентификаторКонтрагента = Выборка.ИдентификаторКонтрагента;
			КонецЕсли;
			
			НастройкаЭДО.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
			
			НастройкаЭДО.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
			НастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Действует;
			
			Если ЗначениеЗаполнено(НастройкаЭДО.СертификатОрганизацииДляРасшифровки) Тогда
				ШифроватьДанныеПакетаЭД = Истина;
			КонецЕсли;
			Если НастройкаЭДО.СертификатыПодписейКонтрагента.Количество() > 0 Тогда
				ПроверятьСертификатыПодписей = Истина;
			КонецЕсли;
			
			// Настройки обмена ЭД
			Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				ПутьВходящегоКаталога = Выборка.Ссылка.РесурсВходящихДокументов;
				ПутьИсходящегоКаталога = Выборка.Ссылка.РесурсИсходящихДокументов;
				СтрокиПутиВходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьВходящегоКаталога);
				СтрокиПутиИсходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьИсходящегоКаталога);
				
				Если СтрокиПутиВходящегоКаталога.Количество() >= 1 Тогда
					НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[СтрокиПутиВходящегоКаталога.Количество() - 1];
				КонецЕсли;
				Если СтрокиПутиИсходящегоКаталога.Количество() >= 1 Тогда
					НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[СтрокиПутиИсходящегоКаталога.Количество() - 1];
				КонецЕсли;
				НастройкаЭДО.КаталогВходящихДокументов = НовоеИмяВходящегоКаталога;
				НастройкаЭДО.КаталогИсходящихДокументов = НовоеИмяИсходящегоКаталога;
				
			ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
				НастройкаЭДО.ЭлектроннаяПочтаКонтрагента = Выборка.РесурсИсходящихДокументов;
			
			ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
				ПутьВходящегоКаталога = Выборка.Ссылка.РесурсВходящихДокументов;
				ПутьИсходящегоКаталога = Выборка.Ссылка.РесурсИсходящихДокументов;
				СтрокиПутиВходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьВходящегоКаталога);
				СтрокиПутиИсходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьИсходящегоКаталога);
				
				Если СтрокиПутиВходящегоКаталога.Количество() >= 1 Тогда
					НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[СтрокиПутиВходящегоКаталога.Количество()-1];
					
				ИначеЕсли СтрокиПутиВходящегоКаталога.Количество() = 1 Тогда
					НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[0];
				КонецЕсли;
				Если СтрокиПутиИсходящегоКаталога.Количество() >= 1 Тогда
					НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[СтрокиПутиИсходящегоКаталога.Количество()-1];
					
				ИначеЕсли СтрокиПутиИсходящегоКаталога.Количество() = 1 Тогда
					НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[0];
				КонецЕсли;
				НастройкаЭДО.КаталогВходящихДокументовFTP = НовоеИмяВходящегоКаталога;
				НастройкаЭДО.КаталогИсходящихДокументовFTP = НовоеИмяИсходящегоКаталога;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);

		КонецЦикла;
		
		// Обновляем соглашения обмена через оператора.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Участник,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.АдресЭП,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ВерсияРегламентаЭДО,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ДатаИзмененияСтатуса,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Статус,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ФорматФайловОбменаЭД,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ОписаниеОшибки,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.УдалитьУчастникиОбменовЭДЧерезОператоровЭДО КАК УдалитьУчастникиОбменовЭДЧерезОператоровЭДО
		|ГДЕ
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И НЕ УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.ПометкаУдаления";
		
		ВыборкаУчастников = Запрос.Выполнить().Выбрать();
		Пока ВыборкаУчастников.Следующий() Цикл
			
			Если Не ВыборкаУчастников.СоглашениеОбИспользованииЭД.ПометкаУдаления Тогда
				НастройкаЭДО = ВыборкаУчастников.СоглашениеОбИспользованииЭД.ПолучитьОбъект();
				НастройкаЭДО.УстановитьПометкуУдаления(Истина);
				НастройкаЭДО.Наименование = НСтр("ru = 'Не использовать'") + " - " + НастройкаЭДО.Наименование;
				НастройкаЭДО.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрофилиНастроекЭДО.Ссылка
			|ИЗ
			|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
			|ГДЕ
			|	ПрофилиНастроекЭДО.СпособОбменаЭД = Значение(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
			|	И ПрофилиНастроекЭДО.Организация = &Организация";
			Запрос.УстановитьПараметр("Организация", ВыборкаУчастников.Организация);
			ВыборкаПрофилейНастроекЭДО = Запрос.Выполнить().Выбрать();
			ВыборкаПрофилейНастроекЭДО.Следующий();
			ПрофильНастроекЭДО = ВыборкаПрофилейНастроекЭДО.Ссылка;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СоглашенияОбИспользованииЭД.Ссылка КАК НастройкаЭДО,
			|	СоглашенияОбИспользованииЭД.РасширенныйРежимНастройкиСоглашения КАК РасширенныйРежимНастройки,
			|	СоглашенияОбИспользованииЭД.СпособОбменаЭД КАК СпособОбменаЭД,
			|	СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК Идентификатор,
			|	СоглашенияОбИспользованииЭД.СтатусПодключения
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
			|ГДЕ
			|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
			|	И СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
			|	И СоглашенияОбИспользованииЭД.Организация = &Организация";
			
			Запрос.УстановитьПараметр("Контрагент",  ВыборкаУчастников.Участник);
			Запрос.УстановитьПараметр("Организация", ВыборкаУчастников.Организация);
			ВыборкаНастроек = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаНастроек.Следующий() Тогда
				НастройкаЭДО = ВыборкаНастроек.НастройкаЭДО.ПолучитьОбъект();

				Если Не ВыборкаНастроек.РасширенныйРежимНастройки
					И ВыборкаНастроек.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
					
					НастройкаЭДО.РасширенныйРежимНастройкиСоглашения = Истина;
					
					ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
						"ИдентификаторОрганизации, СпособОбменаЭД");
					
					Отбор = Новый Структура;
					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.СчетФактура);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.Формировать              = Истина;
						Строка.ИспользоватьЭП           = Истина;
						Строка.ПрофильНастроекЭДО       = ПрофильНастроекЭДО;
						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
						Строка.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
					КонецЦикла;
					
					Отбор = Новый Структура;
					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.КорректировочныйСчетФактура);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.Формировать              = Истина;
						Строка.ИспользоватьЭП           = Истина;
						Строка.ПрофильНастроекЭДО       = ПрофильНастроекЭДО;
						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
						Строка.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
					КонецЦикла;
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
					КонецЦикла;
				КонецЕсли;
			Иначе
				НастройкаЭДО = Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
				НастройкаЭДО.Контрагент = ВыборкаУчастников.Участник;
				НастройкаЭДО.Наименование = Строка(ВыборкаУчастников.Участник);
				
				НастройкаЭДО.ПрофильНастроекЭДО = ПрофильНастроекЭДО;
				ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
				"Организация, ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений, ИсходящиеДокументы");
				
				НастройкаЭДО.Организация              = ПараметрыПрофиляНастроек.Организация;
				НастройкаЭДО.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
				НастройкаЭДО.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
				НастройкаЭДО.ВерсияФорматаПакета      = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
				
				// Загружаем ТЧ из профиля настроек ЭДО.
				ИсходнаяТаблицаЭД = ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить();
				ИсходнаяТаблицаЭД.Колонки.Добавить("ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.Колонки.Добавить("СпособОбменаЭД");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторКонтрагента");
				
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПрофильНастроекЭДО,                                "ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.СпособОбменаЭД,           "СпособОбменаЭД");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.ИдентификаторОрганизации, "ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ВыборкаУчастников.Идентификатор,                   "ИдентификаторКонтрагента");
				
				НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
			КонецЕсли;
			
			НастройкаЭДО.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
			НастройкаЭДО.СтатусПодключения = ВыборкаУчастников.Статус;
			СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			Если ВыборкаУчастников.Статус = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен Тогда
				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Действует;
			ИначеЕсли ВыборкаУчастников.Статус = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен Тогда
				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Закрыто;
			КонецЕсли;
			НастройкаЭДО.СостояниеСоглашения = СостояниеСоглашения;
			
			НастройкаЭДО.ОписаниеОшибки = ВыборкаУчастников.ОписаниеОшибки;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);

		КонецЦикла;
		
		// Определим и заполним в электронных документах реквизиты "ПрофильНастроекЭДО" и "НастройкаЭДО".
		
		СправочникКонтрагенты = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭлектронныйДокумент,
		|	ЭДПрисоединенныеФайлы.УдалитьКонтрагент,
		|	ЭДПрисоединенныеФайлы.УдалитьОрганизация,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|		ПО ЭДПрисоединенныеФайлы.УдалитьКонтрагент = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент
		|			И ЭДПрисоединенныеФайлы.УдалитьОрганизация = СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО.Организация
		|ГДЕ
		|	НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
		|	И НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|	И ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД <> ЗНАЧЕНИЕ(Справочник.СоглашенияОбИспользованииЭД.ПустаяСсылка)
		|	И &ПроверкаТипаКонтрагенты
		|
		|СГРУППИРОВАТЬ ПО
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО,
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка,
		|	ЭДПрисоединенныеФайлы.УдалитьКонтрагент,
		|	ЭДПрисоединенныеФайлы.УдалитьОрганизация";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаТипаКонтрагенты",
			"ЭДПрисоединенныеФайлы.УдалитьКонтрагент ССЫЛКА Справочник." + СправочникКонтрагенты);
		
		Выборка = Запрос.Выполнить().Выбрать();
			
		Пока Выборка.Следующий() Цикл
			ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент.ПолучитьОбъект();
			ЭлектронныйДокумент.УдалитьПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
			ЭлектронныйДокумент.УдалитьСоглашениеЭД       = Выборка.НастройкаЭДО;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлектронныйДокумент);
		КонецЦикла;
		
		// Определим и заполним в незавершенных пакетахЭД реквизиты "ПрофильНастроекЭДО" и "НастройкаЭДО".
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПакетЭД.Ссылка КАК ПакетЭД,
		|	ПакетЭД.Отправитель,
		|	ПакетЭД.Получатель,
		|	ПакетЭД.ПрофильНастроекЭДО,
		|	ПакетЭД.Направление
		|ИЗ
		|	Документ.ПакетЭД КАК ПакетЭД
		|ГДЕ
		|	ПакетЭД.СтатусПакета В(&СтатусыПакетаЭД)
		|	И НЕ ПакетЭД.ПометкаУдаления";
		
		СтатусыПакетаЭД = Новый Массив;
		СтатусыПакетаЭД.Добавить(Перечисления.СтатусыПакетовЭД.КРаспаковке);
		СтатусыПакетаЭД.Добавить(Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
		Запрос.УстановитьПараметр("СтатусыПакетаЭД", СтатусыПакетаЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Отправитель) И ЗначениеЗаполнено(Выборка.Получатель)
				И Не ЗначениеЗаполнено(Выборка.ПрофильНастроекЭДО) Тогда
				Если Выборка.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					ПараметрыНастройкиЭДО = ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиОбменаЭДПоИД(Выборка.Получатель, Выборка.Отправитель);
				ИначеЕсли Выборка.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					ПараметрыНастройкиЭДО = ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиОбменаЭДПоИД(Выборка.Отправитель, Выборка.Получатель);
				КонецЕсли;
				Если ПараметрыНастройкиЭДО <> Неопределено Тогда
					ПакетЭД = Выборка.ПакетЭД.ПолучитьОбъект();
					ПакетЭД.ПрофильНастроекЭДО = ПараметрыНастройкиЭДО.ПрофильНастроекЭДО;
					ПакетЭД.НастройкаЭДО       = ПараметрыНастройкиЭДО.НастройкаЭДО;
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПакетЭД);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Добавился новый вид ЭД - корректировочный счет фактура
Процедура ОбработатьКорректировочныеСчетаФактуры() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭДПрисоединенныеФайлы.Ссылка
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.Наименование ПОДОБНО ""ON_KORSFAKT%""
	               |	И ЭДПрисоединенныеФайлы.УдалитьВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.УдалитьВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СертификатыЭПВидыДокументов.Ссылка
	               |ПОМЕСТИТЬ СертификатыИсключения
	               |ИЗ
	               |	Справочник.УдалитьСертификатыЭП.ВидыДокументов КАК СертификатыЭПВидыДокументов
	               |ГДЕ
	               |	СертификатыЭПВидыДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
	               |	И СертификатыЭПВидыДокументов.ИспользоватьДляПодписи
	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка.ПометкаУдаления
	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка.Отозван
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СертификатыЭПВидыДокументов.Ссылка
	               |ИЗ
	               |	Справочник.УдалитьСертификатыЭП.ВидыДокументов КАК СертификатыЭПВидыДокументов
	               |ГДЕ
	               |	СертификатыЭПВидыДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	               |	И СертификатыЭПВидыДокументов.ИспользоватьДляПодписи
	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка.ПометкаУдаления
	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка.Отозван
	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка В
	               |				(ВЫБРАТЬ
	               |					СертификатыИсключения.Ссылка
	               |				ИЗ
	               |					СертификатыИсключения)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сертификат = Выборка.Ссылка.ПолучитьОбъект();
		СтрокаКорСчФ = Сертификат.ВидыДокументов.Найти(Перечисления.ВидыЭД.КорректировочныйСчетФактура, "ВидДокумента");
		Если СтрокаКорСчФ = Неопределено Тогда
			СтрокаКорСчФ = Сертификат.ВидыДокументов.Добавить();
			СтрокаКорСчФ.ВидДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		КонецЕсли;
		СтрокаКорСчФ.ИспользоватьДляПодписи = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Сертификат);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Выполняет первоначальное заполнение регистра на основе справочника контрагентов.
// 		Заполнение выполняется:
// 		1. После ручного включения проверки фоновым заданием.
// 		2. В режиме сервисов - обновлением ИБ в каждой области отдельно.
//
// Параметры:
//  Параметры	 - Структура,Неопределено - Параметры очереди заданий в модели сервиса.
//		В локальной версии - Неопределено.
Процедура ПроверитьКонтрагентовБЭД(Параметры = Неопределено) Экспорт
	
	ЭтоОбновлениеИБВМоделиСервиса = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме,
	// либо в модели сервисов в отложенном обновлении из областей данных.
	Если НЕ ЭтоОбновлениеИБВМоделиСервиса
		ИЛИ ЭтоОбновлениеИБВМоделиСервиса И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ОбменСКонтрагентамиСлужебный.ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления видов ЭД актуальными.
// Используется при необходимости добавить новый вид ЭД в справочники БЭД в сторонних прикладных решениях.
//
// Параметры:
//  ВидЭД - ЗначениеПеречисления - значение перечисления ВидыЭД.
//
Процедура ОбновитьНастройкиЭДО(ВидЭД)
	
	НачатьТранзакцию();
	
	// В справочниках показываем только главные титулы электронных документов.
	Если ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
		И ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
		И ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		И ВидЭД <> Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПокупателя
		И ВидЭД <> Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПокупателя Тогда
		
		// Обновим элементы справочника Профили настроек ЭДО.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
		
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			
			ИскомыйПрофильНастроек = Результат.Ссылка.ПолучитьОбъект();
			ЗаписатьОбъект = Ложь;
			
			СтрокаВидЭД = ИскомыйПрофильНастроек.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
			Если СтрокаВидЭД = Неопределено Тогда
				
				НоваяСтрока = ИскомыйПрофильНастроек.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = ВидЭД;
				Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
					"ИспользоватьЭлектронныеПодписи") Тогда
					НоваяСтрока.ИспользоватьЭП = Истина;
				КонецЕсли;
				
				ВерсияФормата = "CML 2.08";
				Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					
					ВерсияФормата = "";
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
					
					ВерсияФормата = НСтр("ru = 'ФНС 5.01'");
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца Тогда
					
					ВерсияФормата = НСтр("ru = 'ФНС 5.01 (СЧФ+ДОП)'");
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца Тогда
					
					ВерсияФормата = НСтр("ru = 'ФНС 5.01 (КСЧФ+ДИС)'");
				КонецЕсли;
				НоваяСтрока.ВерсияФормата = ВерсияФормата;
				
				ЗаписатьОбъект = Истина;
			КонецЕсли;
			
			Если ЗаписатьОбъект Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомыйПрофильНастроек);
			КонецЕсли;
			
		КонецЦикла;
		
		// Обновим элементы справочника Настройки ЭДО.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)";
		
		СпособыОбменаЭД = Новый Массив;
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
		Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
		
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			
			ИскомаяНастройка = Результат.Ссылка.ПолучитьОбъект();
			ЗаписатьОбъект = Ложь;
			
			СтрокаВидЭД = ИскомаяНастройка.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
			
			Если СтрокаВидЭД = Неопределено Тогда
				НоваяСтрока = ИскомаяНастройка.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = ВидЭД;
				Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
					"ИспользоватьЭлектронныеПодписи") Тогда
					НоваяСтрока.ИспользоватьЭП = Истина;
				КонецЕсли;
				
				ВерсияФормата = "CML 2.08";
				Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					
					ВерсияФормата = "";
				ИначеЕсли  ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
					
					ВерсияФормата = НСтр("ru = 'ФНС 5.01'");
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца Тогда
					
					ВерсияФормата = НСтр("ru = 'ФНС 5.01 (СЧФ+ДОП)'");
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца Тогда
					
					ВерсияФормата = НСтр("ru = 'ФНС 5.01 (КСЧФ+ДИС)'");
				КонецЕсли;
				НоваяСтрока.ВерсияФормата = ВерсияФормата;
				
				Если ИскомаяНастройка.РасширенныйРежимНастройкиСоглашения Тогда
					НоваяСтрока.ПрофильНастроекЭДО = ИскомаяНастройка.ИсходящиеДокументы[0].ПрофильНастроекЭДО;
					НоваяСтрока.СпособОбменаЭД = ИскомаяНастройка.ИсходящиеДокументы[0].СпособОбменаЭД;
					НоваяСтрока.ИдентификаторОрганизации = ИскомаяНастройка.ИсходящиеДокументы[0].ИдентификаторОрганизации;
					НоваяСтрока.ИдентификаторКонтрагента = ИскомаяНастройка.ИсходящиеДокументы[0].ИдентификаторКонтрагента;
				Иначе
					НоваяСтрока.ПрофильНастроекЭДО = ИскомаяНастройка.ПрофильНастроекЭДО;
					НоваяСтрока.СпособОбменаЭД = ИскомаяНастройка.СпособОбменаЭД;
					НоваяСтрока.ИдентификаторОрганизации = ИскомаяНастройка.ИдентификаторОрганизации;
					НоваяСтрока.ИдентификаторКонтрагента = ИскомаяНастройка.ИдентификаторКонтрагента;
				КонецЕсли;
				
				ЗаписатьОбъект = Истина;
			КонецЕсли;
			
			Если ЗаписатьОбъект Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомаяНастройка);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Обновим элементы справочника Сертификаты ЭП.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат КАК Сертификат
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификатыПодписейОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ПО (СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО = ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Ссылка)
	|ГДЕ
	|	НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.ПометкаУдаления
	|	И НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.Отозван
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Сертификат КАК СертификатЭП,
	|	ПодписываемыеВидыЭД.ВидЭД,
	|	ПодписываемыеВидыЭД.Использовать
	|ИЗ
	|	Сертификаты КАК Сертификаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
	|		ПО Сертификаты.Сертификат.Ссылка = ПодписываемыеВидыЭД.СертификатЭП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Сертификат КАК СертификатЭП
	|ИЗ
	|	Сертификаты КАК Сертификаты";
	
	СпособыОбменаЭД = Новый Массив;
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
	Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[2].Выбрать();
	ТЗ = Результат[1].Выгрузить();
	Попытка
		Пока Выборка.Следующий() Цикл
			Отбор = Новый Структура("СертификатЭП", Выборка.СертификатЭП);
			КопияТЗ = ТЗ.Скопировать(Отбор);
			ЗаписатьОбъект = Ложь;
			
			СтрокаВидЭД = КопияТЗ.Найти(ВидЭД, "ВидЭД");
			Если СтрокаВидЭД = Неопределено Тогда
				НоваяСтрока = КопияТЗ.Добавить();
				НоваяСтрока.ВидЭД        = ВидЭД;
				НоваяСтрока.Использовать = Истина;
				НоваяСтрока.СертификатЭП = Выборка.СертификатЭП;
				ЗаписатьОбъект = Истина;
			ИначеЕсли НЕ СтрокаВидЭД.Использовать Тогда
				СтрокаВидЭД.Использовать = Истина;
				ЗаписатьОбъект = Истина;
			КонецЕсли;
			
			Если ЗаписатьОбъект Тогда
				СохранитьПодписываемыеВидыЭД(Выборка.СертификатЭП, КопияТЗ);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ВидОперации = НСтр("ru = 'Обновление информационной базы'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки);
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Процедура СохранитьПодписываемыеВидыЭД(СертификатСсылка, ПодписываемыеЭД)
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.ПодписываемыеВидыЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СертификатЭП.Установить(СертификатСсылка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Загрузить(ПодписываемыеЭД);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьВыборкуЭД(УникальныйИД, ВладелецФайла);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.УникальныйИД = &УникальныйИД
	|	И ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("УникальныйИД",УникальныйИД);
	Запрос.УстановитьПараметр("ВладелецФайла",ВладелецФайла);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

#КонецОбласти
