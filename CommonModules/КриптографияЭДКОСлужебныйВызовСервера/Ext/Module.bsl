////////////////////////////////////////////////////////////////////////////////
// Подсистема "Криптография".
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Функция ЭкспортироватьСертификатВBase64(Сертификат) Экспорт
	
	ДвоичныеДанныеСертификата = ХранилищеСертификатовВМоделиСервиса.ПолучитьСертификат(Сертификат);
	
	Возврат Base64Строка(ДвоичныеДанныеСертификата);
	
КонецФункции

Функция ПроверитьСертификат(Сертификат) Экспорт
	
	Возврат КриптосервисВМоделиСервиса.ПроверитьСертификат(Сертификат);
	
КонецФункции

Процедура СохранитьНайденныеСертификаты(Сертификаты) Экспорт
	
	СертификатыДляСохранения = ПолучитьСохраненныеСертификаты();
	
	Для Каждого Сертификат Из Сертификаты Цикл
		СертификатыДляСохранения.Вставить(
			"Отпечаток_" + Сертификат.Отпечаток,
			Новый Структура("СерийныйНомер, Поставщик", Сертификат.СерийныйНомер, Сертификат.Поставщик));
	КонецЦикла;	
	
	ХранилищеОбщихНастроек.Сохранить("ДокументооборотСКО/Криптография", "Сертификаты", СертификатыДляСохранения);
	
КонецПроцедуры

Функция ПолучитьСохраненныеСертификаты() Экспорт
	
	Сертификаты =  ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКО/Криптография", "Сертификаты");
	Если Не ЗначениеЗаполнено(Сертификаты) Тогда
		Сертификаты = Новый Структура;
	КонецЕсли;
	
	Возврат Сертификаты;
	
КонецФункции

Функция НайтиСертификатыВЗащищенномХранилищеНаСервере(Сертификаты, ВыполнятьПроверку) Экспорт
	
	Возврат ХранилищеСертификатовВМоделиСервиса.НайтиСертификаты(Сертификаты, ВыполнятьПроверку);
	
КонецФункции

Функция ЗашифроватьPKCS7(Идентификатор, СертификатыПолучателей, АдресИсходныхДанных, АдресРезультата = Неопределено) Экспорт
	
	ЗашифрованныеДанные = КриптосервисВМоделиСервиса.Зашифровать(
		Идентификатор, СертификатыПолучателей, ПолучитьИзВременногоХранилища(АдресИсходныхДанных));
	
	Возврат ПоместитьВоВременноеХранилище(ЗашифрованныеДанные, АдресРезультата);
	
КонецФункции

Функция РасшифроватьPKCS7(Сертификат, АдресЗашифрованныхДанных, АдресРезультата = Неопределено, Идентификаторы = Неопределено) Экспорт
	
	РасшифрованныеДанные = КриптосервисВМоделиСервиса.Расшифровать(
		Сертификат.КлючевойКонтейнер, ПолучитьИзВременногоХранилища(АдресЗашифрованныхДанных), Идентификаторы);
		
	Если ЗначениеЗаполнено(РасшифрованныеДанные) Тогда
		Возврат ПоместитьВоВременноеХранилище(РасшифрованныеДанные, АдресРезультата);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСертификаты(Хранилище) Экспорт
	
	Возврат ХранилищеСертификатовВМоделиСервиса.ПолучитьСертификаты(Хранилище);
	
КонецФункции

Функция ПодписатьPKCS7(Сертификат, ПодписываемыеДанные, ВключатьИсходныеДанные, АдресРезультата = Неопределено) Экспорт
	
	Подпись = КриптосервисВМоделиСервиса.Подписать(
		Сертификат.КлючевойКонтейнер, ПолучитьИзВременногоХранилища(ПодписываемыеДанные), ВключатьИсходныеДанные); 
		
	Возврат ПоместитьВоВременноеХранилище(Подпись, АдресРезультата);
	
КонецФункции

Функция Подписать(Сертификат, ПодписываемыеДанные) Экспорт
	
	ДанныеПодписи = КриптосервисВМоделиСервиса.ПодписатьДанные(
		Сертификат.КлючевойКонтейнер, ПолучитьИзВременногоХранилища(ПодписываемыеДанные));
	
	Возврат Base64Строка(ДанныеПодписи);
	
КонецФункции

Функция ХешироватьДанные(ХешируемыеДанные) Экспорт
	
	ДанныеХеша = КриптосервисВМоделиСервиса.ХешироватьДанные(
		ПолучитьИзВременногоХранилища(ХешируемыеДанные));
	
	Возврат Base64Строка(ДанныеХеша);
	
КонецФункции

Функция ИзвлечьИнформациюОКриптопровайдереПоСертификату(Знач Сертификаты) Экспорт
	
	Для Каждого Сертификат Из Сертификаты Цикл
		Сертификат.Вставить("Криптопровайдер", ИзвлечьКриптопровайдер(Сертификат.Сертификат));
		Сертификат.Удалить("Сертификат");
	КонецЦикла;
	
	Возврат Сертификаты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИзвлечьКриптопровайдер(Сертификат)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("cer");
	Сертификат.Записать(ИмяВременногоФайла);
	
	Байты = ПрочитатьФайлВМассив(ИмяВременногоФайла);
	
	БайтыСигнатурыПоиска = Новый Массив; // Ищем OID 1.2.643.100.111
	БайтыСигнатурыПоиска.Добавить(6);
	БайтыСигнатурыПоиска.Добавить(5);
	БайтыСигнатурыПоиска.Добавить(42);
	БайтыСигнатурыПоиска.Добавить(133);
	БайтыСигнатурыПоиска.Добавить(3);
	БайтыСигнатурыПоиска.Добавить(100);
	БайтыСигнатурыПоиска.Добавить(111);
	
	Индекс = 0;
	ИндексНачалаСигнатуры = 0;
	СигнатураНайдена = Ложь;
	Для Каждого Байт Из Байты Цикл
		Если Байт = БайтыСигнатурыПоиска[0] Тогда
			СигнатураНайдена = Истина;
			Для Индекс2 = 1 По 6 Цикл
				Если Байты[Индекс2 + Индекс] <> БайтыСигнатурыПоиска[Индекс2] Тогда
					СигнатураНайдена = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СигнатураНайдена Тогда
				ИндексНачалаСигнатуры = Индекс;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Криптопровайдер = "";
	Если СигнатураНайдена Тогда
		КоличествоБайтПодТекст = Байты[ИндексНачалаСигнатуры + БайтыСигнатурыПоиска.Количество() + 1];
		НачалоТекста = ИндексНачалаСигнатуры + БайтыСигнатурыПоиска.Количество() + 4;
		
		БайтыДляЗаписи = Новый Массив;
		Для Индекс = НачалоТекста По НачалоТекста + КоличествоБайтПодТекст - 3 Цикл
			БайтыДляЗаписи.Добавить(Байты[Индекс]);
		КонецЦикла;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("txt");
		ЗаписатьФайлИзМассива(ИмяФайла, БайтыДляЗаписи);
		
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, "utf-8");
		Криптопровайдер = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайла);
	КонецЕсли;
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Если СтрНайти(НРег(Криптопровайдер), "cryptopro") ИЛИ СтрНайти(НРег(Криптопровайдер), "криптопро") Тогда
		Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro();
	ИначеЕсли СтрНайти(НРег(Криптопровайдер), "vipnet") ИЛИ СтрНайти(НРег(Криптопровайдер), "випнет") Тогда
		Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet();
	Иначе
		Криптопровайдер = Неопределено;
	КонецЕсли;
			
	Возврат Криптопровайдер;
	
КонецФункции

Функция ПрочитатьФайлВМассив(ИмяФайла)
	
	Результат = Новый Массив;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, "ISO-8859-1", Символы.ПС, Символы.ПС);
	
	Пока Истина Цикл
		СимволТекста = ЧтениеТекста.Прочитать(1);
		Если СимволТекста = Неопределено Тогда
			Прервать;
		КонецЕсли;
		КодСимволаТекста = КодСимвола(СимволТекста);
		
		Результат.Добавить(КодСимволаТекста);
	КонецЦикла;
	ЧтениеТекста.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьФайлИзМассива(ИмяФайла, Массив)
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "ISO-8859-1", Символы.ПС,, Символы.ПС);
	
	Для ИндексВМассиве = 0 По Массив.ВГраница() Цикл
		СимволИзМассива = Символ(Массив[ИндексВМассиве]);
		ЗаписьТекста.Записать(СимволИзМассива);
	КонецЦикла;
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

#КонецОбласти