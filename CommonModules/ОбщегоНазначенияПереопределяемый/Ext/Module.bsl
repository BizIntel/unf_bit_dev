////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
// Для задания обработчиков параметров сеанса следует использовать шаблон:
// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
//
// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
//             что один обработчик будет вызван для инициализации всех параметров сеанса
//             с именем, начинающимся на слово НачалоИмениПараметраСеанса.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	// УНФ
	Обработчики.Вставить("ЭтоПервыйЗапуск", 			"УправлениеНебольшойФирмойСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("ОбменДаннымиССайтомВключен",	"ОбменССайтом.УстановитьПараметрыСеанса");
	// Конец УНФ
	
	// ПодключаемоеОборудование
	Обработчики.Вставить("РабочееМестоКлиента",			"МенеджерОборудованияВызовСервера.УстановитьПараметрыСеансаПодключаемогоОборудования");
	// Конец ПодключаемоеОборудование
	
	// Электронный документооборот с контролирующими органами
	Обработчики.Вставить("ТекущиеУчетныеЗаписиНалогоплательщика", "ДокументооборотСКО.УстановитьПараметрСеансаТекущиеУчетныеЗаписиНалогоплательщика");
	// Конец  Электронный документооборот с контролирующими органами
	
	// ИнтернетПоддержкаПользователей
	ИнтернетПоддержкаПользователей.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	// Конец ИнтернетПоддержкаПользователей
	
	//РегламентированнаяОтчетность
	ОбщегоНазначенияБРО.ОбработчикиИнициализацииПараметровСеанса(Обработчики);
	//Конец РегламентированнаяОтчетность
	
	// ЕГАИС
	Обработчики.Вставить("ИдентификаторСеансаЕГАИС" , "ИнтеграцияЕГАИС.УстановитьПараметрыСеанса");
	// Конец ЕГАИС
	
КонецПроцедуры

// Объекты метаданных, содержимое которых не должно учитывается в бизнес-логике приложения.
//
// Описание:
//   Для документа "Реализация товаров и услуг" настроены подсистемы "Версионирование объектов" и "Свойства".
//   При этом документ может быть указан в других объектах метаданных - документах или регистрах.
//   Часть ссылок имеют значение для бизнес-логики (например движения по регистрам) и должны выводиться пользователю.
//   Другая часть ссылок - "техногенные" ссылки на документ из данных подсистем "Версионирование объектов" и "Свойства",
//     должны скрываться от пользователя при поиске ссылок на объект. 
//     Например, при анализе мест использования или в подсистеме запрета редактирования ключевых реквизитов.
//   Список таких "техногенных" объектов нужно перечислить в этой процедуре.
//
// Важно:
//   Для избежания появления пустых "битых" ссылок рекомендуется предусмотреть процедуру очистки указанных объектов
//   метаданных.
//   Для измерений регистров сведений - с помощью установки флажка "Ведущее",
//     тогда запись регистра сведений будет удалена вместе с удалением ссылки, указанной в измерении.
//   Для других реквизитов указанных объектов - с помощью подписки на событие ПередУдалением всех типов объектов
//   метаданных, которые могут быть записаны в реквизиты указанных объектов метаданных.
//     В обработчике необходимо найти "техногенные" объекты, в реквизитах которых указана ссылка удаляемого объекта,
//     и выбрать как именно очищать ссылку: очищать значение реквизита, удалять строку таблицы или удалять весь объект.
//
// Параметры:
//  ИсключенияПоискаСсылок - Массив - Объекты метаданных или их реквизиты, содержимое которых не должно учитывается в
//                                    бизнес-логике приложения.
//   * ОбъектМетаданных - Объект метаданных или его реквизит.
//   * Строка - Полное имя объекта метаданных или его реквизита.
//
// Примеры:
//	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов);
//	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.Реквизиты.АвторВерсии);
//	ИсключенияПоискаСсылок.Добавить("РегистрСведений.ВерсииОбъектов");
// 
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	
	// "Техногенный" регистр НаличиеДублейУКонтрагентов, очищается в обработчике ПередУдалением модуля объекта справочника Контрагенты
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.НаличиеДублейУКонтрагентов);
	
	// Реквизит очищается в обработчике ПередУдалением модуля объекта справочника БанковскиеСчета
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.Контрагенты.Реквизиты.БанковскийСчетПоУмолчанию);
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.Организации.Реквизиты.БанковскийСчетПоУмолчанию);
	
	// Реквизит очищается в обработчике ПередУдалением модуля объекта справочника КонтактныеЛица
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.Контрагенты.Реквизиты.КонтактноеЛицо);
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.Номенклатура.Реквизиты.ФайлКартинки);
	
	// Реквизит очищается в подписке ПередУдалением состояний "ОчиститьИсториюСостоянияЗаказов"
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ИсторияСостоянийЗаказов.Ресурсы.Состояние);
	ИсключенияПоискаСсылок.Добавить(Метаданные.Константы.УдалитьСостояниеВРаботеЗаказовНаПроизводство);
	ИсключенияПоискаСсылок.Добавить(Метаданные.Константы.УдалитьСостояниеВРаботеЗаказовПокупателей);
	ИсключенияПоискаСсылок.Добавить(Метаданные.Константы.УдалитьСостояниеВРаботеЗаказовПоставщикам);
	ИсключенияПоискаСсылок.Добавить(Метаданные.Константы.УдалитьСостояниеВыполненЗаказовНаПроизводство);
	ИсключенияПоискаСсылок.Добавить(Метаданные.Константы.УдалитьСостояниеВыполненЗаказовПокупателей);
	ИсключенияПоискаСсылок.Добавить(Метаданные.Константы.УдалитьСостояниеВыполненЗаказовПоставщикам);
	
	// Реквизит очищается в подписке ПередУдалением контрагентов и контактных лиц
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ТекущиеВходящиеЗвонки.Ресурсы.АбонентОтКого);
	
КонецПроцедуры

// Доопределяет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Параметры:
//  Итог - ТаблицаЗначений - таблица, которую нужно передавать, как параметр
//         в процедуру ДобавитьПереименование общего модуля ОбщегоНазначения.
//
// Пример:
//	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.2.1.7",
//		"Роль.ИспользованиеЭЦП", "Роль.ИспользованиеЭП", "СтандартныеПодсистемы");
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = "УправлениеНебольшойФирмой";
	ОбщегоНазначения.ДобавитьПереименование(Итог, "1.4.9.2", "Подсистема.Анализ", "Подсистема.АналитическиеОтчеты", Библиотека);
	ОбщегоНазначения.ДобавитьПереименование(Итог, "1.6.1.26", "Подсистема.НастройкаИАдминистрирование", "Подсистема.Администрирование", "СтандартныеПодсистемы");
	ОбщегоНазначения.ДобавитьПереименование(Итог, "1.6.7.15",
		"Подсистема.Компания.Подсистема.СайтКомпании",
		"Подсистема.CRM.Подсистема.СайтКомпании");
	
	// ИнтернетПоддержкаПользователей
	ИнтернетПоддержкаПользователей.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	// Конец ИнтернетПоддержкаПользователей

КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий.
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам.
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	// НачалоРаботыСПрограммой
	НачалоРаботыСПрограммойСервер.ПараметрыРаботыКлиентаПриЗапуске(Параметры);
	// Конец НачалоРаботыСПрограммой
	
	// ИнтернетПоддержкаПользователей
	ИнтернетПоддержкаПользователей.ПараметрыРаботыКлиентаПриЗапуске(Параметры);
	// Конец ИнтернетПоддержкаПользователей
	
	// Регламентированная отчетность
	ОбщегоНазначенияБРО.ПараметрыРаботыКлиентаПриЗапуске(Параметры);
	// Конец Регламентированная отчетность
	
	// Рабочее место кассира
	РабочееМестоКассира.ПараметрыРаботыКлиентаПриЗапуске(Параметры);
	// Конец Рабочее место кассира
	
	ТарификацияПереопределяемый.ПараметрыРаботыКлиентаПриЗапуске(Параметры);
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт
	
	// ИнтернетПоддержкаПользователей
	ИнтернетПоддержкаПользователей.ПараметрыРаботыКлиента(Параметры);
	// Конец ИнтернетПоддержкаПользователей
	
	// ЕГАИС
	ИнтеграцияЕГАИС.ПараметрыРаботыКлиента(Параметры);
	// Конец ЕГАИС
	
КонецПроцедуры

// Позволяет настроить общие параметры подсистемы.
//
// Параметры:
//  ОбщиеПараметры - Структура - структура со свойствами:
//      * ИмяФормыПерсональныхНастроек            - Строка - имя формы для редактирования персональных настроек.
//                                                           Ранее определялись в
//                                                           ОбщегоНазначенияПереопределяемый.ИмяФормыПерсональныхНастроек.
//      * МинимальноНеобходимаяВерсияПлатформы    - Строка - полный номер версии платформы для запуска программы.
//                                                           Например, "8.3.4.365".
//                                                           Ранее определялись в
//                                                           ОбщегоНазначенияПереопределяемый.ПолучитьМинимальноНеобходимуюВерсиюПлатформы.
//      * РаботаВПрограммеЗапрещена               - Булево - Начальное значение Ложь.
//      * ЗапрашиватьПодтверждениеПриЗавершенииПрограммы - Булево - по умолчанию Истина. Если установить Ложь, то 
//                                                                  подтверждение при завершении работы программы не
//                                                                  будет запрашиваться,  если явно не разрешить в
//                                                                  персональных настройках программы.
//      * ОтключитьИдентификаторыОбъектовМетаданных - Булево - отключает заполнение справочников ИдентификаторыОбъектовМетаданных
//              и ИдентификаторыОбъектовРасширений, процедуру выгрузки и загрузки в узлах РИБ.
//              Для частичного встраивания отдельных функций библиотеки в конфигурации без постановки на поддержку.
//      * РекомендуемыйОбъемОперативнойПамяти - Число - объем памяти в гигабайтах, рекомендуемый для комфортной работы в программе.
//
Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт
	
	// УНФ
	ОбщиеПараметры.Вставить("МинимальноНеобходимаяВерсияПлатформы","8.3.8.2027");
	ОбщиеПараметры.Вставить("ИмяФормыПерсональныхНастроек", "Обработка.НастройкаПрограммы.Форма.НастройкаПрограммы");
	// Конец УНФ
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию программных интерфейсов,
// используя в качестве ключей имена программных интерфейсов.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура:
//  Ключ - Имя программного интерфейса,
//  Значение - Массив(Строка) - поддерживаемые версии программного интерфейса.
//
// Пример реализации:
//
//  // СервисПередачиФайлов
//  МассивВерсий = Новый Массив;
//  МассивВерсий.Добавить("1.0.1.1");
//  МассивВерсий.Добавить("1.0.2.1"); 
//  СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//  // Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий) Экспорт
	ОбщегоНазначенияБРО.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
КонецПроцедуры

// Параметры функциональных опций, действие которых распространяется на командный интерфейс и рабочий стол.
//   Например, если значения функциональной опции хранятся в ресурсах регистра сведений,
//   то параметры функциональных опций могут определять условия отборов по измерениям регистра,
//   которые будут применяться при чтении значения этой функциональной опции.
//
// Параметры:
//   ОпцииИнтерфейса - Структура - Значения параметров функциональных опций, установленных для командного интерфейса.
//       Ключ элемента структуры определяет имя параметра, а значение элемента - текущее значение параметра.
//
// См. также:
//   Методы глобального контекста ПолучитьФункциональнуюОпциюИнтерфейса(),
//   УстановитьПараметрыФункциональныхОпцийИнтерфейса() и ПолучитьПараметрыФункциональныхОпцийИнтерфейса().
//
Процедура ПриОпределенииПараметровФункциональныхОпцийИнтерфейса(ОпцииИнтерфейса) Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЕГАИС.ПриОпределенииПараметровФункциональныхОпцийИнтерфейса(ОпцииИнтерфейса);
	
КонецПроцедуры

// Обработчик события "Перед загрузкой приоритетных данных в подчиненном РИБ узле".
// Выполняет заполнение настроек размещения сообщения обмена данными или
// нестандартную загрузку приоритетных данных из главного узла.
//
// К приоритетным данным относятся предопределенные элементы, а также
// элементы справочника Идентификаторы объектов метаданных.
//
// Параметры:
//  СтандартнаяОбработка - Булево, начальное значение Истина, если установить Ложь, 
//                тогда стандартная загрузка приоритетных данных с помощью подсистемы
//                ОбменДанными будет пропущена (тоже будет и в случае,
//                если подсистемы ОбменДанными нет).
//
Процедура ПередЗагрузкойПриоритетныхДанныхВПодчиненномРИБУзле(СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Получает строку, содержащую ключи структуры, разделенные символом разделителя.
//
// Параметры:
//	СтруктураДляПреобразования - Структура - Структура, ключи которой преобразуются в строку.
//	Разделитель - Строка - Разделитель, который вставляется в строку между ключами структуры.
//
// Возвращаемое значение:
//	Результат - Строка, содержащая ключи структуры разделенные разделителем.
//
Функция СтруктураВСтроку(СтруктураДляПреобразования, Разделитель = ",") Экспорт
	
	Результат = "";
	
	Для Каждого Элемент Из СтруктураДляПреобразования Цикл
		
		СимволРазделителя = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + СимволРазделителя + Элемент.Ключ;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает структуру, содержащую пустые ключи структуры, из строки, разделенной символом разделителя.
//
// Параметры:
//	СтрокаДляПреобразования - Строка - СтрокаДляПреобразования, из которой формируются ключи структуры.
//	Разделитель - Строка - Разделитель, который вставляется в строку между ключами структуры.
//
// Возвращаемое значение:
//	Результат - Строка, содержащая ключи структуры разделенные разделителем.
//
Функция СтрокаВСтруктуру(СтрокаДляПреобразования, Разделитель = ",") Экспорт
	
	Результат = Новый Структура;
	СтрокаПоискаСвойств = СтрокаДляПреобразования;
	
	ПозицияРазделителя = СтрНайти(СтрокаПоискаСвойств,Разделитель);
	Пока ПозицияРазделителя <> 0 Цикл
		Результат.Вставить(СокрЛП(Лев(СтрокаПоискаСвойств, ПозицияРазделителя-1)));
		СтрокаПоискаСвойств = Сред(СтрокаПоискаСвойств, ПозицияРазделителя+1);
		ПозицияРазделителя = СтрНайти(СтрокаПоискаСвойств,Разделитель);
	КонецЦикла;
	Результат.Вставить(СокрЛП(СтрокаПоискаСвойств));
	
	Возврат Результат;
	
КонецФункции

// Позволяет виртуально отключать подсистемы для целей тестирования.
// В процедуре нельзя использовать метод ОбщегоНазначения.ПодсистемСуществует т.к. это приводит к рекурсии.
//
// Параметры:
//   ОтключенныеПодсистемы - Соответствие - Если подсистема отключена, то метод ОбщегоНазначения.ПодсистемаСуществует вернет Ложь.
//                                          В соответствии ключ - имя отключенной подсистемы, значение необходимо установить в Истина.
//
Процедура ПриОпределенииОтключенныхПодсистем(ОтключенныеПодсистемы) Экспорт
	
	
	
КонецПроцедуры

// Удаляет повторяющиеся элементы массива.
//
// Параметры:
//  ОбрабатываемыйМассив - Массив - элементы произвольных типов, из которых удаляются неуникальные.
//  НеИспользоватьНеопределено - Булево - если Истина, то все значения Неопределено удаляются из массива.
//  АнализироватьСсылкиКакИдентификаторы - Булево - если Истина, то для ссылок вызывается функция УникальныйИдентификатор()
//                                                  и уникальность определяется по строкам-идентификаторам.
//
// Возвращаемое значение:
//   Массив      - элементы ОбрабатываемыйМассив после удаления лишних.
//
Функция УдалитьПовторяющиесяЭлементыМассива(ОбрабатываемыйМассив, НеИспользоватьНеопределено = Ложь, АнализироватьСсылкиКакИдентификаторы = Ложь) Экспорт

	Если ТипЗнч(ОбрабатываемыйМассив) <> Тип("Массив") Тогда
		Возврат ОбрабатываемыйМассив;
	КонецЕсли;
	
	УжеВМассиве = Новый Соответствие;
	Если АнализироватьСсылкиКакИдентификаторы Тогда   // сравниваем ссылки как строки-уникальные идентификаторы
		
		ОписаниеСсылочныхТипов = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
		
	 	БылоНеопределено = Ложь;
		КолвоЭлементовВМассиве = ОбрабатываемыйМассив.Количество();

		Для ОбратныйИндекс = 1 По КолвоЭлементовВМассиве Цикл
			
			ЭлементМассива = ОбрабатываемыйМассив[КолвоЭлементовВМассиве - ОбратныйИндекс];
			ТипЭлемента = ТипЗнч(ЭлементМассива);
			Если ЭлементМассива = Неопределено Тогда
				Если БылоНеопределено или НеИспользоватьНеопределено Тогда
					ОбрабатываемыйМассив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				Продолжить;
			ИначеЕсли ОписаниеСсылочныхТипов.СодержитТип(ТипЭлемента) Тогда

				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор());

			Иначе

				ИДЭлемента = ЭлементМассива;

			КонецЕсли;

			Если УжеВМассиве[ИДЭлемента] = Истина Тогда
				ОбрабатываемыйМассив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
			Иначе
				УжеВМассиве[ИДЭлемента] = Истина;
			КонецЕсли;
			
		КонецЦикла;

	Иначе
		
		ИндексЭлемента = 0;
		КоличествоЭлементов = ОбрабатываемыйМассив.Количество();
		Пока ИндексЭлемента < КоличествоЭлементов Цикл
			
			ЭлементМассива = ОбрабатываемыйМассив[ИндексЭлемента];
			Если НеИспользоватьНеопределено И ЭлементМассива = Неопределено
			 Или УжеВМассиве[ЭлементМассива] = Истина Тогда      // удаляем, переходя к следующему
			 
				ОбрабатываемыйМассив.Удалить(ИндексЭлемента);
				КоличествоЭлементов = КоличествоЭлементов - 1;
				
			Иначе   // запоминаем, переходя к следующему
				
				УжеВМассиве.Вставить(ЭлементМассива, Истина);
				ИндексЭлемента = ИндексЭлемента + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат ОбрабатываемыйМассив;

КонецФункции

#КонецОбласти
