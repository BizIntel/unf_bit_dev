////////////////////////////////////////////////////////////////////////////////
// Модуль содержит общие процедуры и функции для форм регламентированной
// отчетности.
//
////////////////////////////////////////////////////////////////////////////////

#Область ИнтерфейсРаботыСДаннымиРеестровПоНДС

Процедура Автозаполнение_РеестрПоНДС_Приложение5(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
	
	ДеревоДанныхРеестр = Контейнер.Реестр;
	
	СтруктураРеквизитовФормы = ПараметрыОтчета.СтруктураРеквизитовФормы;
	
	Графы_П10000 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей["П10000"].ИменаГраф;
	Графы_П11000 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей["П11000"].ИменаГраф;
	Графы_П11100 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей["П11100"].ИменаГраф;
	
	СуммыПоКодамОперПостранично = Новый ТаблицаЗначений;
	ОписаниеТиповСтрока7   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(7));
	ОписаниеТиповЧисло16_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));
	СуммыПоКодамОперПостранично.Колонки.Добавить("Код",   ОписаниеТиповСтрока7);
	СуммыПоКодамОперПостранично.Колонки.Добавить("Сумма", ОписаниеТиповЧисло16_2);
	
	ИмяРаздела = "Реестр";
	
	НумераторыПоКодамОпер = Новый Структура;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИсходныйМакет = РегламентированнаяОтчетность.РеглОтчеты(ИДОтчета).ПолучитьМакет(ИДРедакцииОтчета + "_" + ИмяРаздела);
	
	Для Инд = 0 По ДеревоДанныхРеестр.Строки.Количество() - 1 Цикл
		
		ТекВетка = ДеревоДанныхРеестр.Строки[Инд];
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ИсходныйМакет.ПолучитьОбласть());
		
		Обл = ТабличныйДокумент.Область("УдалитьСтрокуП10000_1");
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Область("УдалитьСтрокуП11000_1_1");
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Область("УдалитьСтрокуП11100_1_1_1");
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		
		КодОперации = СокрЛП(ТекВетка.Данные["КодОперации"]);
		ТабличныйДокумент.Области.Найти("КодОперации").Значение = КодОперации;
		
		Дерево_П10000 = ТекВетка.ДанныеМногострочныхЧастей.П10000;
		
		СуммаПоКодуОперации = 0;
		
		НумераторПоКодуОпер = 0;
		Если ЗначениеЗаполнено(КодОперации)
			И НумераторыПоКодамОпер.Свойство("_" + КодОперации) Тогда
			НумераторПоКодуОпер = НумераторыПоКодамОпер["_" + КодОперации];
		КонецЕсли;
		
		Для Инд_П10000 = 0 По Дерево_П10000.Строки.Количество() - 1 Цикл
			
			Инд_П10000_Стр   = Формат(Инд_П10000, "ЧГ=");
			Инд_П10000_Стр_1 = Формат(Инд_П10000 + 1, "ЧГ=");
			
			Если Инд_П10000 > 0 Тогда
				ИмяОблПреемника_П10000 = "ДобавлениеСтрокиП10000_" + Инд_П10000_Стр;
				ВставитьДопСтроку(ИсходныйМакет, ТабличныйДокумент,
				СтруктураРеквизитовФормы, ИмяРаздела, "П10000", ИмяОблПреемника_П10000);
			КонецЕсли;
			ТекВетка_П10000 = Дерево_П10000.Строки[Инд_П10000];
			
			НумераторПоКодуОпер = НумераторПоКодуОпер + 1;
			ТекВетка_П10000.Данные["П1000001"] = Формат(НумераторПоКодуОпер, "ЧГ=");
			
			Для каждого Графа Из Графы_П10000 Цикл
				Обл = ТабличныйДокумент.Области.Найти(Графа + "_" + Инд_П10000_Стр_1);
				Обл.Значение = ТекВетка_П10000.Данные[Графа];
			КонецЦикла;
			
			СуммаПоКодуОперации = СуммаПоКодуОперации + ТекВетка_П10000.Данные["П1000003"];
			
			Дерево_П11000 = ТекВетка_П10000.ДанныеМногострочныхЧастей.П11000;
			
			Для Инд_П11000 = 0 По Дерево_П11000.Строки.Количество() - 1 Цикл
				
				Инд_П11000_Стр   = Формат(Инд_П11000, "ЧГ=");
				Инд_П11000_Стр_1 = Формат(Инд_П11000 + 1, "ЧГ=");
				
				Если Инд_П11000 > 0 Тогда
					ИмяОблПреемника_П11000 = "ДобавлениеСтрокиП11000_"
					+ Инд_П10000_Стр_1 + "_" + Инд_П11000_Стр;
					ВставитьДопСтроку(ИсходныйМакет, ТабличныйДокумент,
					СтруктураРеквизитовФормы, ИмяРаздела, "П11000", ИмяОблПреемника_П11000);
				КонецЕсли;
				ТекВетка_П11000 = Дерево_П11000.Строки[Инд_П11000];
				Для каждого Графа Из Графы_П11000 Цикл
					Обл = ТабличныйДокумент.Области.Найти(Графа + "_"
					+ Инд_П10000_Стр_1 + "_" + Инд_П11000_Стр_1);
					Обл.Значение = ТекВетка_П11000.Данные[Графа];
				КонецЦикла;
				
				Дерево_П11100 = ТекВетка_П11000.ДанныеМногострочныхЧастей.П11100;
				
				Для Инд_П11100 = 0 По Дерево_П11100.Строки.Количество() - 1 Цикл
					
					Инд_П11100_Стр   = Формат(Инд_П11100, "ЧГ=");
					Инд_П11100_Стр_1 = Формат(Инд_П11100 + 1, "ЧГ=");
					
					Если Инд_П11100 > 0 Тогда
						ИмяОблПреемника_П11100 = "ДобавлениеСтрокиП11100_" + Инд_П10000_Стр_1
						+ "_" + Инд_П11000_Стр_1 + "_" + Инд_П11100_Стр;
						ВставитьДопСтроку(ИсходныйМакет, ТабличныйДокумент,
						СтруктураРеквизитовФормы, ИмяРаздела, "П11100", ИмяОблПреемника_П11100);
					КонецЕсли;
					ТекВетка_П11100 = Дерево_П11100.Строки[Инд_П11100];
					Для каждого Графа Из Графы_П11100 Цикл
						Обл = ТабличныйДокумент.Области.Найти(Графа + "_" + Инд_П10000_Стр_1
						+ "_" + Инд_П11000_Стр_1 + "_" + Инд_П11100_Стр_1);
						Обл.Значение = ТекВетка_П11100.Данные[Графа];
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		НовСтр = СуммыПоКодамОперПостранично.Добавить();
		НовСтр.Код   = КодОперации;
		НовСтр.Сумма = СуммаПоКодуОперации;
		
		ТекВетка.АдресТабличногоДокумента = ТабличныйДокумент.ПолучитьОбласть();
		
		Если ЗначениеЗаполнено(КодОперации) Тогда
			НумераторыПоКодамОпер.Вставить("_" + КодОперации, НумераторПоКодуОпер);
		КонецЕсли;
		
	КонецЦикла;
	
	СуммыПоКодамОперИтого = СуммыПоКодамОперПостранично.Скопировать();
	СуммыПоКодамОперИтого.Свернуть("Код", "Сумма");
	
	ИтоговыеСуммыПоКодамОпераций = Новый Массив;
	
	Для каждого Стр Из СуммыПоКодамОперПостранично Цикл
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ИтоговыеСуммыПоКодамОпераций.Добавить(
				Новый Структура("КодОперации,НалБазаИтого", Стр.Код, 0));
			ИтогоСуммаПоКодуОпер = 0;
		Иначе
			ИтоговыеСуммыПоКодамОпераций.Добавить(
				Новый Структура("КодОперации,НалБазаИтого", Стр.Код, Стр.Сумма));
			ИтогоСуммаПоКодуОпер = СуммыПоКодамОперИтого.Найти(Стр.Код, "Код").Сумма;
		КонецЕсли;
		
		Инд = СуммыПоКодамОперПостранично.Индекс(Стр);
		
		ТекВетка = ДеревоДанныхРеестр.Строки[Инд];
		
		ТекВетка.Данные["НалБазаИтого"] = ИтогоСуммаПоКодуОпер;
		ТекВетка.АдресТабличногоДокумента.Область("НалБазаИтого").Значение = ИтогоСуммаПоКодуОпер;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций = ИтоговыеСуммыПоКодамОпераций;
	
	ПоместитьВоВременноеХранилище(
		ДеревоДанныхРеестр, СтруктураРеквизитовФормы.АдресВоВрХранилищеДеревоДанныхРеестр);
	
	ПоместитьВоВременноеХранилище(
		СтруктураРеквизитовФормы, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

Процедура ВставитьДопСтроку(ИсходныйМакет, ТабличныйДокумент, СтруктураРеквизитовФормы, Знач ИмяРаздела, Знач ИмяГруппы, Знач ИмяОбластиПреемника)
	
	Модифицированность = Истина;
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		
		ВремТаблДок = ИсходныйМакет.ПолучитьОбласть();
		
		ИскомаяОбластьМнЧ = ВремТаблДок.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ВремТаблДок.ПолучитьОбласть(ИскомаяОбластьМнЧ.Верх, , ИскомаяОбластьМнЧ.Верх
		+ ВысотаМногострочнойЧасти(ИсходныйМакет, СтруктураРеквизитовФормы, ИмяГруппы, ВремТаблДок) - 1, );
		
		ВремТаблДок.Область("МногострочнаяЧасть" + ИмяГруппы).Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		
		НовИндекс_Число = ПреИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ВремТаблДок.Область("УдалитьСтроку" + НачПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		Обл = ВремТаблДок.Область("УдалитьСтроку" + НовПостфикс);
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Если НовИндекс_Число = 2 Тогда
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Обновление координат в именах областей подчиненных многострочных частей.
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, НачКоординаты + НачИндекс, НовКоординаты + НовИндекс);
			РеиндексироватьПодчиненныеДопСтрокиПриДобавлении(ВремТаблДок, СтруктураРеквизитовФормы, ПарамРеинд);
		КонецЦикла;
		
		ВставляемаяОбласть = ВремТаблДок.Область(1, , ВремТаблДок.ВысотаТаблицы, );
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Обл = ТабличныйДокумент.Область(
					ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РеиндексироватьПодчиненныеДопСтрокиПриДобавлении(ТаблДок, СтруктураРеквизитовФормы, ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	НачИндекс = "_1";
	
	Для каждого ИмяГрафы Из МассивИменГраф Цикл
		ПреИмяОбл = ИмяГрафы + ПреКоординаты + НачИндекс;
		НовИмяОбл = ИмяГрафы + НовКоординаты + НачИндекс;
		
		ОбластьЯчейки = ТаблДок.Области[ПреИмяОбл];
		ОбластьЯчейки.Имя = НовИмяОбл;
	КонецЦикла;
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + НачИндекс;
	НовПостфикс = ИмяГруппы + НовКоординаты + НачИндекс;
	
	Обл = ТаблДок.Области.Найти("УдалитьСтроку" + ПреПостфикс);
	Обл.Имя = "УдалитьСтроку" + НовПостфикс;
	Обл.Гиперссылка = Ложь;
	Обл.Текст = "";
	
	Обл = ТаблДок.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТаблДок.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТаблДок.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
	ТаблДок.Область("МногострочнаяЧасть" + ИмяГруппы).Имя = "";
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
			ИмяПодчГруппы, ПреКоординаты + НачИндекс, НовКоординаты + НачИндекс);
		РеиндексироватьПодчиненныеДопСтрокиПриДобавлении(ТаблДок, СтруктураРеквизитовФормы, ПарамРеинд);
	КонецЦикла;
	
КонецПроцедуры

Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

Функция ВысотаМногострочнойЧасти(ИсходныйМакет, СтруктураРеквизитовФормы, ИмяГруппы, ТаблДок = Неопределено)
	
	Если ТаблДок = Неопределено Тогда
		ТаблДок = ИсходныйМакет.ПолучитьОбласть();
	КонецЕсли;
	
	ИскомаяОбласть1 = ТаблДок.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
	ИмяОблДобавлСтроки = "ДобавлениеСтроки" + ИмяГруппы;
	
	Для каждого ИскомаяОбласть2 Из ТаблДок.Области Цикл
		Если СтрНачинаетсяС(ИскомаяОбласть2.Имя, ИмяОблДобавлСтроки) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИскомаяОбласть2.Верх - ИскомаяОбласть1.Верх;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает таблицу с показателями регламентированных отчетов,
// необходимыми для оценки риска выездной налоговой проверки.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, по которой отбираются регламентированные отчеты.
//   ДатаНачала - Дата - начало периода, за который отбираются регламентированные отчеты.
//   ДатаОкончания - Дата - конец периода, за который отбираются регламентированные отчеты.
//
// Возвращаемое значение:
//   ТаблицЗначений - показатели регламентированных отчетов, необходимые
//					  для оценки риска выездной налоговой проверки.
//
Функция ПоказателиОценкиРискаВыезднойНалоговойПроверки(Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	ТаблицаОтчетов = ОтчетыОценкиРисков(Организация, ДатаНачала, ДатаОкончания);
	
	ТаблицаПоказателей = НоваяТаблицаПоказателейОценкиРисков();
	
	Для Каждого СтрокаОтчета Из ТаблицаОтчетов Цикл
		ВставитьПоказательВТаблицуОценкиРисков(ТаблицаПоказателей, СтрокаОтчета);
	КонецЦикла;
	
	Возврат ТаблицаПоказателей
	
КонецФункции

// Формирует шаблон таблицы для получения данных из переопределяемого метода.
//
// Возвращаемое значение:
//   ТаблицаЗначений - шаблон таблицы для получения данных из переопределяемого метода.
//
Функция ПустаяТаблицаОписанияОбъектовРегламентированнойОтчетности() Экспорт
	
	ТаблицаОписания = Новый ТаблицаЗначений;
	ТаблицаОписания.Колонки.Добавить("Наименование");
	ТаблицаОписания.Колонки.Добавить("ТипОбъекта");
	ТаблицаОписания.Колонки.Добавить("ВидКонтролирующегоОргана");
	ТаблицаОписания.Колонки.Добавить("ГруппаВДереве");
	ТаблицаОписания.Колонки.Добавить("ВидДокумента");
	ТаблицаОписания.Колонки.Добавить("НеОтправляетсяВКонтролирующийОрган");
	ТаблицаОписания.Колонки.Добавить("ЯвляетсяАктуальным");
	ТаблицаОписания.Колонки.Добавить("ИмяОсновногоМакетаДляПечати");
	ТаблицаОписания.Колонки.Добавить("ВидЭлектронногоПредставления");
	
	Возврат ТаблицаОписания;
	
КонецФункции

// Заполняет наименование таблицы для получения данных из переопределяемого метода.
//
// Параметры:
//   ТаблицаОписания - ТаблицаЗначений - таблица описания.
//
Процедура ЗаполнитьНаименованиеВТаблицеОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	// Заполняем колонку Наименование из метаданных.
	Для каждого СтрокаТаблицыОписания Из ТаблицаОписания Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыОписания.Наименование) Тогда
			СтрокаТаблицыОписания.Наименование = Метаданные.НайтиПоТипу(СтрокаТаблицыОписания.ТипОбъекта).Представление();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Дополняет дерево видов отчетов данными из таблицы.
//
// Параметры:
//   ДеревоОтчетов - ДеревоЗначений - дерево регл. отчетов.
//   ТаблицаОписанияОтчетов - ТаблицаЗначений - таблица регл. отчетов.
//
Процедура ДобавитьВДеревоРегламентированныхОтчетовОтчетыИзТаблицы(ДеревоОтчетов, ТаблицаОписанияОтчетов) Экспорт
	
	ЗначенияКолонок = Новый Структура;
	
	Для каждого СтрокаТаблицыОписанияОтчетов Из ТаблицаОписанияОтчетов Цикл
		
		МетаОбъект = Метаданные.НайтиПоТипу(СтрокаТаблицыОписанияОтчетов.ТипОбъекта);
		Если МетаОбъект <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицыОписанияОтчетов.ГруппаВДереве) Тогда
			
			ЗначенияКолонок.Вставить("Наименование",  ?(ЗначениеЗаполнено(СтрокаТаблицыОписанияОтчетов.Наименование),
				СтрокаТаблицыОписанияОтчетов.Наименование, МетаОбъект.Синоним));
			ЗначенияКолонок.Вставить("ПолноеИмя",     МетаОбъект.ПолноеИмя());
			ЗначенияКолонок.Вставить("ТипПолучателя", СтрокаТаблицыОписанияОтчетов.ВидКонтролирующегоОргана);
			ЗначенияКолонок.Вставить("Категория",     СтрокаТаблицыОписанияОтчетов.ГруппаВДереве);
			ЗначенияКолонок.Вставить("ЭтоГруппа",     Ложь);
			
			ДобавитьОтчетВДеревоРегламентированныхОтчетов(ДеревоОтчетов, ЗначенияКолонок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу ранее созданных отчетов.
//
// Параметры:
//   Организации - Массив - массив значений типа СправочникСсылка.Организации,
//                          по которым отбираются регламентированные отчеты.
//
// Возвращаемое значение:
//   ТаблицаЗначений - ранее созданные отчеты.
//
Функция ТаблицаСозданныхВидовОтчетов(Организации = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РегламентированныйОтчет.Ссылка КАК Ссылка,
	                      |	РегламентированныйОтчет.ИсточникОтчета КАК ИсточникОтчета
	                      |ПОМЕСТИТЬ ТаблицаИсточникиОтчета
	                      |ИЗ
	                      |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	                      |ГДЕ
	                      |	&УсловиеДокументов
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	РегламентированныеОтчеты.Ссылка,
	                      |	РегламентированныеОтчеты.ИсточникОтчета
	                      |ИЗ
	                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	ТИПЗНАЧЕНИЯ(ЖурналОтчетовСтатусы.Ссылка) КАК ТипСсылки,
	                      |	ЖурналОтчетовСтатусы.НаименованиеОтчета КАК Наименование,
	                      |	ТаблицаИсточникиОтчета.ИсточникОтчета КАК ИсточникОтчета
	                      |ПОМЕСТИТЬ ТаблицаЖурналОтчетовСтатусы
	                      |ИЗ
	                      |	РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИсточникиОтчета КАК ТаблицаИсточникиОтчета
	                      |		ПО ЖурналОтчетовСтатусы.Ссылка = ТаблицаИсточникиОтчета.Ссылка
	                      |ГДЕ
	                      |	НЕ ЖурналОтчетовСтатусы.Ссылка ЕСТЬ NULL 
	                      |	И &УсловиеОтбора
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТаблицаЖурналОтчетовСтатусы.ТипСсылки,
	                      |	ТаблицаЖурналОтчетовСтатусы.Наименование,
	                      |	ТаблицаЖурналОтчетовСтатусы.ИсточникОтчета
	                      |ИЗ
	                      |	ТаблицаЖурналОтчетовСтатусы КАК ТаблицаЖурналОтчетовСтатусы");
	
	Если Организации = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора","Истина");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДокументов","Истина");
	Иначе
		Запрос.УстановитьПараметр("Организации", Организации);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора","ЖурналОтчетовСтатусы.Организация В(&Организации)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДокументов","РегламентированныйОтчет.Организация В(&Организации)");
	КонецЕсли;
	
	ТаблицаСозданных = Запрос.Выполнить().Выгрузить();
	ТаблицаСозданных.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	КоличествоСтрок = ТаблицаСозданных.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ОбрИндекс = КоличествоСтрок - Инд;
		СтрокаТаблицы = ТаблицаСозданных[ОбрИндекс];
		Если СтрокаТаблицы.ТипСсылки = Null ИЛИ СтрокаТаблицы.ТипСсылки = Неопределено Тогда
			ТаблицаСозданных.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		МетаОтчет = Метаданные.НайтиПоТипу(СтрокаТаблицы.ТипСсылки);
		Если МетаОтчет <> Неопределено Тогда
			СтрокаТаблицы.ПолноеИмя = МетаОтчет.ПолноеИмя();
		Иначе
			ТаблицаСозданных.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСозданных;	
	
КонецФункции

// Возвращает таблицу, содержащую доступные регламентированные отчеты, ограниченные переданным отбором.
//
// Параметры:
//   Отбор - Массив - массив имен отчетов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - доступные регламентированные отчеты, ограниченные переданным отбором.
//
Функция ТаблицаДоступныеРегламентированныеОтчеты(Отбор) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентированныеОтчеты.Наименование КАК НаименованиеОтчета,
	|	РегламентированныеОтчеты.Ссылка КАК СсылкаВидОтчета,
	|	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкрытыеРегламентированныеОтчеты КАК СкрытыеРегламентированныеОтчеты
	|		ПО (СкрытыеРегламентированныеОтчеты.РегламентированныйОтчет = РегламентированныеОтчеты.Ссылка)
	|ГДЕ
	|	СкрытыеРегламентированныеОтчеты.РегламентированныйОтчет ЕСТЬ NULL
	|	И РегламентированныеОтчеты.ИсточникОтчета В(&Отбор)
	|	И НЕ РегламентированныеОтчеты.ЭтоГруппа");
	
	Запрос.УстановитьПараметр("Отбор", Отбор);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает соответствие с показателями автозаполнения бухгалтерской отчетности.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, по которой рассчитываются сведения.
//   ДатаНачала - Дата - начало периода, за который расчитываются сведения. Приводится к началу года.
//   ДатаОкончания - Дата - конец периода, за который расчитываются сведения. Приводится к концу месяца,
//                          или к концу года от ДатаНачала, если годы не совпадают.
//   ЗаполнятьБаланс - Булево - признак заполнения баланса.
//
// Возвращаемое значение:
//   Соответствие - показатели автозаполнения бухгалтерской отчетности.
//
Функция ПоказателиАвтозаполненияБухгалтерскойОтчетности(Организация, ДатаНачала, ДатаОкончания, ЗаполнятьБаланс = Истина) Экспорт
	
	РезультатАвтозаполнения = Новый Соответствие;
	
	// Бухгалтерский баланс.
	СтрокиОтчета = "1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190,
	               |1210, 1220, 1230, 1240, 1250, 1260,
	               |1310, 1320, 1340, 1350, 1360, 1370,
	               |1410, 1420,
	               |1510, 1520, 1530, 1540, 1550";
	ИнициализироватьПоказателиПоВекторам(РезультатАвтозаполнения, СтрокиОтчета, "3, 4, 5");
	
	// Отчет о финансовых результатах.
	СтрокиОтчета = "2110, 2120, 2210, 2220, 2310, 2320, 2330, 2340, 2350,
	               |2410, 2421, 2430, 2450, 2460, 2510";
	ИнициализироватьПоказателиПоВекторам(РезультатАвтозаполнения, СтрокиОтчета, "3, 4");
	
	НачалоПериодаОтчета = НачалоГода(ДатаНачала);
	КонецПериодаОтчета = КонецМесяца(Макс(ДатаНачала, ДатаОкончания));
	КонецПериодаОтчета = Мин(КонецГода(НачалоПериодаОтчета), КонецПериодаОтчета);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("Организация", Организация);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций", Новый Массив);
	
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", НачалоПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета", КонецПериодаОтчета);
	
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "Баланс_2012Кв4_3");
	
	ПараметрыОтчета.Вставить("СтруктураОтчета", Новый Структура("Баланс", СтруктураОтчета));
	
	ОрганизацияПрименяетЕНВД = РегламентированнаяОтчетностьПереопределяемый.ПлательщикЕНВД(Организация, КонецПериодаОтчета);
	ПараметрыОтчета.Вставить("ПрименениеЕНВД", ОрганизацияПрименяетЕНВД);
	
	ДеревоНастроекСтрокРасшифровки = Новый ДеревоЗначений;
	ДеревоНастроекСтрокРасшифровки.Колонки.Добавить("ИмяОбластиДопСтроки");
	
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокБаланс", ДеревоНастроекСтрокРасшифровки.Скопировать());
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокОПУ", ДеревоНастроекСтрокРасшифровки.Скопировать());
	
	ПараметрыОтчета.Вставить("СтруктураМногострочныхЧастей", Неопределено);
	
	ПараметрыОтчета.Вставить("ЗаполнятьБаланс",     ЗаполнятьБаланс);
	ПараметрыОтчета.Вставить("ЗаполнятьОФР",        Истина);
	ПараметрыОтчета.Вставить("ЗаполнятьОИК",        Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОДДС",       Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения1", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения2", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения4", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения5", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения6", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения7", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения8", Ложь);
	
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Баланс",        Новый Структура());
	Контейнер.Вставить("ФормаОтчета",   Новый Структура());
	Контейнер.Вставить("ОИК",           Новый Структура());
	Контейнер.Вставить("ОДДС",          Новый Структура());
	Контейнер.Вставить("ОЦИПС",         Новый Структура());
	Контейнер.Вставить("РасчетАктивов", Новый Структура());
	Контейнер.Вставить("Пояснения1",    Новый Структура());
	Контейнер.Вставить("Пояснения2",    Новый Структура());
	Контейнер.Вставить("Пояснения3",    Новый Структура());
	Контейнер.Вставить("Пояснения4",    Новый Структура());
	Контейнер.Вставить("Пояснения5",    Новый Структура());
	Контейнер.Вставить("Пояснения6",    Новый Структура());
	Контейнер.Вставить("Пояснения7",    Новый Структура());
	Контейнер.Вставить("Пояснения8",    Новый Структура());
	Контейнер.Вставить("Пояснения9",    Новый Структура());
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПоказателиАвтозаполненияБухгалтерскойОтчетности(ПараметрыОтчета, Контейнер);
	
	ДанныеАвтозаполнения = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеАвтозаполнения <> Неопределено Тогда
		Для Каждого ЭлементРезультата Из РезультатАвтозаполнения Цикл
			ИмяЭлемента = ЭлементРезультата.Ключ;
			
			Префикс = "П000100";
			КодСтроки = Лев(ИмяЭлемента, 4);
			КодПериода = Прав(ИмяЭлемента, 1);
			Постфикс = Формат(Число(КодПериода) + 1, "ЧЦ=2; ЧВН=");
			
			ИмяПоказателя = Префикс + КодСтроки + Постфикс;
			
			Если Лев(ИмяЭлемента, 1) = "1" Тогда
				ИмяРаздела = "Баланс";
			Иначе
				ИмяРаздела = "ФормаОтчета";
			КонецЕсли;
			
			Если ДанныеАвтозаполнения.Контейнер[ИмяРаздела].Свойство(ИмяПоказателя) Тогда
				РезультатАвтозаполнения.Вставить(ИмяЭлемента, ДанныеАвтозаполнения.Контейнер[ИмяРаздела][ИмяПоказателя]);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатАвтозаполнения;
	
КонецФункции

// Возвращает признак доступности для просмотра формы регламентированной отчетности
// текущему пользователю.
//
// Возвращаемое значение:
//   Булево - признак доступности для просмотра формы регламентированной отчетности
//            текущему пользователю.
//
Функция ДоступнаФормаРегламентированнаяОтчетностьТекущемуПользователю() Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.РегламентированнаяОтчетность) Тогда

    	Возврат Истина;

   	КонецЕсли;

   	Возврат Ложь;

КонецФункции

// Добавляет в форме регламентированного отчета кнопку ("скрепку")
// для открытия формы с присоединенными файлами.
//
// Параметры:
//  Форма - УправляемаяФорма - форма регламентированного отчета.
//
Процедура ДобавитьКнопкуПрисоединенныеФайлы(Форма) Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		
		Если СтрНачинаетсяС(Форма.ИмяФормы, "Отчет.РегламентированныйОтчет")
		 ИЛИ СтрНачинаетсяС(Форма.ИмяФормы, "Отчет.РегламентированноеУведомление") Тогда
			
			ИмяКоманды = "ПрисоединенныеФайлы";
			
			КомандаПрисоединенныеФайлы = Форма.Команды.Найти(ИмяКоманды);
			
			Если ТипЗнч(КомандаПрисоединенныеФайлы) = Тип("КомандаФормы") Тогда
				Возврат;
			КонецЕсли;
			
			КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
			КомандаФормы.Действие = "Подключаемый_ОткрытьПрисоединенныеФайлы";
			КомандаФормы.Заголовок = "Присоединенные файлы";
			КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
			КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
			КомандаФормы.Картинка = БиблиотекаКартинок.Скрепка;
			
			// Кнопка "со скрепкой" добавляется в конец командной панели формы.
			Группа = Форма.Элементы.Вставить("ГруппаПрисоединенныеФайлы",
			Тип("ГруппаФормы"), Форма.Элементы.ФормаКоманднаяПанель);
			Группа.Вид = ВидГруппыФормы.ГруппаКнопок;
			
			Кнопка = Форма.Элементы.Добавить("ПрисоединенныеФайлы",
				Тип("КнопкаФормы"), Форма.Элементы.ГруппаПрисоединенныеФайлы);
			Кнопка.ИмяКоманды = ИмяКоманды;
			Кнопка.Заголовок = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак наличия файлов, присоединенных к объекту.
//
// Параметры:
//   ВладелецФайлов - ДокументСсылка, СправочникСсылка - ссылка на объект в регистре сведений "Журнал
//                    отчетов статусы" или регистре сведений "Журнал отправок в контролирующие органы".
//
Функция ЕстьФайлыПрисоединенныеКОбъекту(ВладелецФайлов) Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяРегистраСведенийНПФ = "НаличиеПрисоединенныхФайлов";
	
	Если Метаданные.РегистрыСведений.Найти(ИмяРегистраСведенийНПФ) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборНПФ = Новый Структура("ОбъектСФайлами", ВладелецФайлов);
	
	ВыборкаНПФ = РегистрыСведений[ИмяРегистраСведенийНПФ].Выбрать(ОтборНПФ);
	
	Если ВыборкаНПФ.Следующий() Тогда
		Если ВыборкаНПФ.ОбъектСФайлами <> Неопределено Тогда // обход ошибки платформы
			Возврат ВыборкаНПФ.ЕстьФайлы;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСоСтатистическимиОтчетами

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы со статистическими отчетами.

// Функция возвращает значение формата выгрузки статотчетности
// для пользователя текущего сеанса, в разрезе организаций.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//
// Возвращаемое значение: Число 1 или 2, либо "Неопределено".
//  2 - "новый"
//      (формат ПО Росстата «Заполнение форм статистической отчетности», версии 2.4.4);
//  1 - "старый"
//      (формат ПО Росстата «Формы статотчетности (предприятие)», версии 1.21).
//
Функция ФорматВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация) Экспорт
	
	СтруктураФорматовВыгрузки = ХранилищеНастроекДанныхФорм.Загрузить(
		"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.НастройкиФорматаВыгрузкиОтчетовСтатистики",
		"ФорматыВыгрузкиСтатистическойОтчетностиВЭлектронномВиде");
	
	Если Не (ТипЗнч(СтруктураФорматовВыгрузки) = Тип("Структура"))
		Или Организация = Справочники.Организации.ПустаяСсылка()Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для НомерФормата = 1 По 2 Цикл
		МассивОрганизаций = СтруктураФорматовВыгрузки["Формат" + Формат(НомерФормата, "ЧГ=")];
		Если МассивОрганизаций.Найти(Организация) <> Неопределено Тогда
			Возврат НомерФормата;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Функция преобразует значения, из которых формируется имя файла,
// в соответствии с форматом выгрузки статотчетности.
//
Функция КодыДляИмениФайлаВФорматеВыгрузки(Параметры) Экспорт
	
	Если ФорматВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Параметры["Документ"]["Организация"]) = 2 Тогда // "новый" формат выгрузки
		
		Пока СтрДлина(Параметры["КодФормы"]) < 3 Цикл
			Параметры["КодФормы"] = "0" + Параметры["КодФормы"];
		КонецЦикла;
		
		Пока СтрДлина(Параметры["Периодичность"]) < 3 Цикл
			Параметры["Периодичность"] = "0" + Параметры["Периодичность"];
		КонецЦикла;
		
		ТекДата = ТекущаяДатаСеанса();
		ТекГод  = Формат(Год(ТекДата),   "ЧГ=");
		ТекМес  = Формат(Месяц(ТекДата), "ЧЦ=2; ЧВН=");
		ТекДен  = Формат(День(ТекДата),  "ЧЦ=2; ЧВН=");
		Параметры["ДатаВыгрузки"] = ТекГод + ТекМес + ТекДен;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Функция преобразует выгружаемые атрибуты,
// в соответствии с форматом выгрузки статотчетности.
//
Функция АтрибутыВФорматеВыгрузки(Параметры) Экспорт
	
	Если ФорматВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Параметры["Документ"]["Организация"]) = 2 Тогда // "новый" формат выгрузки
		
		КодНомера = Формат(ПорядковыйНомерПериодаВГоду(Параметры["Документ"]["ДатаОкончания"], Параметры["КодПериодичности"]), "ЧЦ=2; ЧН=; ЧВН=");
		КодПериод = Формат(Параметры["КодПериодичности"], "ЧН=");
		Параметры["ОтчПериод"] = КодПериод + КодНомера;
		Пока СтрДлина(Параметры["ОтчПериод"]) < 4 Цикл
			Параметры["ОтчПериод"] = "0" + Параметры["ОтчПериод"];
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПорядковыйНомерПериодаВГоду(ДатаВПериоде, Периодичность)
	
	Перем НомерПериода;
	
	ДатаМесяц = Месяц(ДатаВПериоде);
	ДатаГод   = Год(ДатаВПериоде);
	
	Если Периодичность = 1 Тогда       // годовая
		
		НомерПериода = 1;
		
	ИначеЕсли Периодичность = 2 Тогда  // полугодовая
		
		НомерПериода = 1;
		
		Если ДатаВПериоде > КонецМесяца(Дата(ДатаГод, 6, 1)) Тогда
			НомерПериода = 2;
		КонецЕсли;
		
	ИначеЕсли Периодичность = 4 Тогда  // квартальная
		
		НомерПериода = Число(Формат(ДатаВПериоде, "ДФ=к"));
		
	ИначеЕсли Периодичность = 12 Тогда // месячная
		
		НомерПериода = ДатаМесяц;
		
	ИначеЕсли Периодичность = 36 Тогда // декадная
		
		// Дата обязательно должна указывать на конец декады.
		НомерПериода = Окр((ДеньГода(ДатаВПериоде) - 2) / 10, 0);
		
	ИначеЕсли Периодичность = 52 Тогда // недельная
		
		НомерПериода = НеделяГода(ДатаВПериоде);
		
	Иначе // месячная по умолчанию
		
		НомерПериода = ДатаМесяц;
		
	КонецЕсли;
	
	Возврат НомерПериода;
	
КонецФункции

Процедура НачальныеОперацииСМногострочнымиБлоками(Форма) Экспорт 
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		СтруктураГруппы.Очистить();

		Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			СтруктураГруппы.Добавить();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ДопСведенияОПоказателе(Форма, ИмяПоказателя, ИмяПараметра)
	
	КодПоказателяДляПоиска = ИмяПоказателя;
	
	СмысловаяЧастьПоказателя = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяПоказателя);
	
	Если Прав(СмысловаяЧастьПоказателя, 1) = "_" Тогда
		КодПоказателяДляПоиска = Лев(СмысловаяЧастьПоказателя, СтрДлина(СмысловаяЧастьПоказателя) - 1);
	КонецЕсли;
	
	НайденноеЗначение = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("КодПоказателяПоСоставу", КодПоказателяДляПоиска));
	
	Если НайденноеЗначение.Количество() > 0 Тогда
		
		ЗначениеПараметра = Неопределено;
		НайденноеЗначение[0].Свойство(ИмяПараметра, ЗначениеПараметра);
		
		Возврат ЗначениеПараметра;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя) Экспорт
	
	Если НЕ РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мСтруктураМногострочныхРазделов") Тогда
		Возврат 0;
	КонецЕсли;
	
	ДлиннаИмениГруппы = 11;
	Для Каждого КЗ Из Форма.мСтруктураМногострочныхРазделов Цикл
		ДлиннаИмениГруппы = СтрДлина(КЗ.Ключ);
		Прервать;
	КонецЦикла;
	
	ИмяГруппы = Лев(ИмяПоказателя, ДлиннаИмениГруппы);
	
	СтруктураГруппы = Неопределено;
	
	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

Функция КонвертированныеЗначенияПоказателейСтатистическойОтчетности(Форма, КонвертируемыеПоказатели, НаправлениеИзКонтейнера = Истина) Экспорт 
	
	Если ТипЗнч(КонвертируемыеПоказатели) = Тип("Структура") Тогда
		
		КонвертированныеПоказатели = Новый Структура;
		
		Для каждого КлючИЗначение Из КонвертируемыеПоказатели Цикл
			
			ИмяПоказателя      = КлючИЗначение.Ключ;
			ЗначениеПоказателя = КлючИЗначение.Значение;
			
			Если РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя) <> 0 Тогда
				Продолжить;
			КонецЕсли;
			Если Лев(ИмяПоказателя, 2) = "ЧН" И РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, Сред(ИмяПоказателя, 3)) <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
				Делитель = ДопСведенияОПоказателе(Форма, ИмяПоказателя, "ДелительДанныхИБ");
				Если Делитель = Неопределено ИЛИ Делитель = 0 Тогда
					НовоеЗначениеПоказателя = ЗначениеПоказателя;
				Иначе
					НовоеЗначениеПоказателя = ЗначениеПоказателя * ?(НаправлениеИзКонтейнера, 1 / Делитель, Делитель);
				КонецЕсли;
				
				СтрТипДанных = ДопСведенияОПоказателе(Форма, ИмяПоказателя, "ТипДанныхПоказателя");
				Если НаправлениеИзКонтейнера И Лев(СтрТипДанных, 1) = "N" Тогда
					СтрФормат = СокрЛП(СтрЗаменить(СтрЗаменить(СтрЗаменить(Сред(СтрТипДанных, 2), "(", ""), ")", ""), " ", ""));
					ПозицияРазделителя = Макс(СтрНайти(СтрФормат, ","), СтрНайти(СтрФормат, "."));
					ТочностьОкругления = Число("0" + ?(ПозицияРазделителя > 0, Сред(СтрФормат, ПозицияРазделителя + 1), "0"));
					НовоеЗначениеПоказателя = Окр(НовоеЗначениеПоказателя, ТочностьОкругления);
				КонецЕсли;
			Иначе
				НовоеЗначениеПоказателя = ЗначениеПоказателя;
			КонецЕсли;
			
			КонвертированныеПоказатели.Вставить(ИмяПоказателя, НовоеЗначениеПоказателя);
			
		КонецЦикла;
		
		Возврат КонвертированныеПоказатели;
		
	Иначе
		
		КонвертированныеПоказатели = Новый ТаблицаЗначений;
		
		Если ТипЗнч(КонвертируемыеПоказатели) = Тип("ТаблицаЗначений") Тогда
			КонвертированныеПоказатели = КонвертируемыеПоказатели.Скопировать();
		Иначе
			КонвертированныеПоказатели = ДанныеФормыВЗначение(КонвертируемыеПоказатели, Тип("ТаблицаЗначений"));
		КонецЕсли;
		
		Для каждого КолонкаТаблицы Из КонвертированныеПоказатели.Колонки Цикл
			Если КолонкаТаблицы.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				
				Делитель = ДопСведенияОПоказателе(Форма, КолонкаТаблицы.Имя, "ДелительДанныхИБ");
				
				Если Делитель = Неопределено ИЛИ Делитель = 0 Тогда
					Коэффициент = 1;
				Иначе
					Коэффициент = ?(НаправлениеИзКонтейнера, 1 / Делитель, Делитель);
				КонецЕсли;
				
				Для каждого СтрокаТаблицы Из КонвертированныеПоказатели Цикл
					
					СтрокаТаблицы[КолонкаТаблицы.Имя] = СтрокаТаблицы[КолонкаТаблицы.Имя] * Коэффициент;
					
					СтрТипДанных = ДопСведенияОПоказателе(Форма, КолонкаТаблицы.Имя, "ТипДанныхПоказателя");
					Если НаправлениеИзКонтейнера И Лев(СтрТипДанных, 1) = "N" Тогда
						СтрФормат = СокрЛП(СтрЗаменить(СтрЗаменить(СтрЗаменить(Сред(СтрТипДанных, 2), "(", ""), ")", ""), " ", ""));
						ПозицияРазделителя = Макс(СтрНайти(СтрФормат, ","), СтрНайти(СтрФормат, "."));
						ТочностьОкругления = Число("0" + ?(ПозицияРазделителя > 0, Сред(СтрФормат, ПозицияРазделителя + 1), "0"));
						СтрокаТаблицы[КолонкаТаблицы.Имя] = Окр(СтрокаТаблицы[КолонкаТаблицы.Имя], ТочностьОкругления);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Если НаправлениеИзКонтейнера Тогда
			
			ДлиннаИмениГруппы = 11;
			Для Каждого КЗ Из Форма.мСтруктураИсхКолвоСтрокРазделов Цикл
				ДлиннаИмениГруппы = СтрДлина(КЗ.Ключ);
				Прервать;
			КонецЦикла;
			
			ИмяГруппы = Лев(КонвертированныеПоказатели.Колонки[0].Имя, ДлиннаИмениГруппы);
			
			ИсходноеКоличествоСтрокГруппы = 0;
			Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
			
			ТекущееКоличествоСтрокГруппы = КонвертированныеПоказатели.Количество();
			
			Для НСтр = ТекущееКоличествоСтрокГруппы По ИсходноеКоличествоСтрокГруппы - 1 Цикл
				КонвертированныеПоказатели.Добавить();
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат КонвертированныеПоказатели;
		
	КонецЕсли;
	
	Возврат КонвертируемыеПоказатели;
	
КонецФункции

Функция НоваяСтраница() Экспорт 
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	Возврат ПечатнаяФорма;
КонецФункции

Процедура СформироватьСтруктуруЦветовРаскраски(Форма) Экспорт 
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	ЦветАвто                         = Новый Цвет(0, 0, 0);        // Белый, Ввод запрещен
	
	Форма.мСтруктураЦветовРаскраски = Новый Структура;
	Форма.мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	Форма.мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	Форма.мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	Форма.мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	Форма.мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	Форма.мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	Форма.мСтруктураЦветовРаскраски.Вставить("_6", ЦветАвто);
КонецПроцедуры

Функция СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета() Экспорт 
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мАдресвФорматеДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");	
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мСоответствияМнгЧ");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет",          Ложь);
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить",     Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать",  Ложь);
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку",         Истина);
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417", Ложь);
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", Истина);
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически", Ложь);
	СтруктураРеквизитовФормы.Вставить("РеализованоАвтозаполнениеДаннымиПредидущегоПериода", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВерсияБСП", СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Процедура ЗаполнитьПоказателиОтчетаНаСервере(Форма, ПоказателиОтчета) Экспорт 
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, Форма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел) Экспорт 
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

Функция ПоказательЗаполнен(Показатель, Значение) Экспорт 
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки, НепроверяемыеПараметры, РодМногостр)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	Если НепроверяемыеПараметры = Неопределено Тогда 
		ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	Иначе 
		ПоказателиНеанализируемыеНаЗаполненность = НепроверяемыеПараметры;
	КонецЕсли;
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Или (РодМногостр И Пок.Родитель.Многострочность) Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			ЗначениеПоказателя = Неопределено;
			ДанныеСтраницы.Свойство(СтрЗаменить(Пок.Ключ,"_Ч",""), ЗначениеПоказателя);
			Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция РазделПуст(Форма, ДеревоВыгрузки, Раздел, НепроверяемыеПараметры, РодМногостр)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел);
	
	мДанныеОтчета = Форма.мДанныеОтчета;
	ДанныеРаздела = мДанныеОтчета[Раздел];
	РазделПуст = Истина;
	
	Если ТипЗнч(ДанныеРаздела) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Стр Из ДанныеРаздела Цикл
			Если НЕ СтраницаПуста(Стр.Данные, ПоказателиРаздела, ДеревоВыгрузки, НепроверяемыеПараметры, РодМногостр) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеРаздела) = Тип("Структура") Тогда
		Если НЕ СтраницаПуста(ДанныеРаздела, ПоказателиРаздела, ДеревоВыгрузки, НепроверяемыеПараметры, РодМногостр) Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеРаздела) = Тип("ДанныеФормыКоллекция") Тогда
		Попытка
			Данные = ДанныеФормыВЗначение(ДанныеРаздела, Тип("ТаблицаЗначений"));
			Для Каждого Стр Из Данные Цикл
				Если НЕ СтраницаПуста(Стр.Данные, ПоказателиРаздела, ДеревоВыгрузки, НепроверяемыеПараметры, РодМногостр) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		Попытка
			Данные = ДанныеФормыВЗначение(ДанныеРаздела, Тип("Структура"));
			Если НЕ СтраницаПуста(Данные, ПоказателиРаздела, ДеревоВыгрузки, НепроверяемыеПараметры, РодМногостр) Тогда
				Возврат Ложь;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьРазделыНаНаличиеИнформации(Форма, ДеревоВыгрузки, парамРазделы, НепроверяемыеПараметры = Неопределено, РодМногостр = Ложь) Экспорт 
	
	Разделы = Новый Массив;
	Если ТипЗнч(парамРазделы) = Тип("Строка") Тогда
		Если СтрНайти(парамРазделы, ",") <> 0 Тогда
			СтрРазделы = Новый Структура(парамРазделы);
			Для Каждого Эл Из СтрРазделы Цикл
				Разделы.Добавить(Эл.Ключ);
			КонецЦикла;
		Иначе
			Разделы.Добавить(парамРазделы);
		КонецЕсли;
	КонецЕсли;
	
	РазделыПусты = Истина;
	Для Каждого Раздел Из Разделы Цикл
		Если НЕ РазделПуст(Форма, ДеревоВыгрузки, Раздел, НепроверяемыеПараметры, РодМногостр) Тогда
			РазделыПусты = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ РазделыПусты;
	
КонецФункции

Функция ЧислоПоФормату(Значение, СтрокаФормата, УдалитьНезначащиеНулиПослеРазделителя = Ложь) Экспорт 
	
	ЗначениеПоФормату = СокрЛП(Формат(Значение, СтрокаФормата));
	
	Если  УдалитьНезначащиеНулиПослеРазделителя Тогда
		
		Разд = ".";
		
		ПозРазд = СтрНайти(ЗначениеПоФормату, Разд);
		Если ПозРазд > 0 Тогда
			
			ЦелаяЧасть = Лев(ЗначениеПоФормату, ПозРазд - 1);
			ДробнаяЧасть = Сред(ЗначениеПоФормату, ПозРазд + 1);
			Для Сч = 1 По СтрДлина(ДробнаяЧасть) Цикл
				Если Прав(ДробнаяЧасть, 1) <> "0" Тогда
					Прервать;
				КонецЕсли;
				ДробнаяЧасть = Лев(ДробнаяЧасть, СтрДлина(ДробнаяЧасть) - 1);
			КонецЦикла;
			
			ЗначениеПоФормату = ЦелаяЧасть + ?(ПустаяСтрока(ДробнаяЧасть), "", Разд + ДробнаяЧасть);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеПоФормату;
	
КонецФункции

Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено) Экспорт 
	
	Если НовыйВариант = 4 И Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		НовыйВариант = 0;
	КонецЕсли;
	
	ИмяТекущейСтраницыПанели = "ПолеТабличногоДокументаФормаОтчета";
	
	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть  = Форма.Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;
	
	Форма.УстановитьЦветФонаЯчейкиНаСервере(ИмяПоказателя, НовыйВариант, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

Процедура УстановитьЦветФорматДоступностьЯчеек(Форма) Экспорт 
	
	Форма.УстановитьФорматВыводаВПоляхВвода(Форма);
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	
	МакетСоставаПоказателей = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(Форма.ИмяФормы).ПолучитьМакет(Форма.СтруктураРеквизитовФормы.мСоставПоказателей);
	ИмяТекРазделаНаЛисте = МакетСоставаПоказателей.Области[0].Имя;
	Форма.УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРазделаНаЛисте);
	
	НезаполняемыеПоля = ИнтерфейсыВзаимодействияБРО.ПоляКоторыеНеВсегдаТребуетсяЗаполнять(
		Сред(Лев(Форма.ИмяФормы, СтрНайти(Форма.ИмяФормы, ".Форма.") - 1), 7),
		СтруктураРеквизитовФормы.мВыбраннаяФорма, 
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
	Для Каждого ИмяПоля Из НезаполняемыеПоля Цикл
		ИзменитьВариантЗаполненияЯчейки(Форма, 0, ИмяПоля);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка, Комментарий = "") Экспорт 
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Описание);
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстФормулы + ". " + ОписаниеКС);
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Нарушение);
	СтруктураОшибок.Вставить("Комментарий" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Комментарий);
	
КонецПроцедуры

Процедура ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено) Экспорт 
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	Если ТипЗнч(Значения) = Тип("ТаблицаЗначений") Тогда
		НовСтр.ТаблицаЗначений.Загрузить(Значения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки(Форма, Таблица = "ТаблицаВариантыЗаполненияПолеТабличногоДокументаФормаОтчета") Экспорт 
	
	МакетСоставаПоказателей = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(Форма.ИмяФормы).ПолучитьМакет(Форма.СтруктураРеквизитовФормы.мСоставПоказателей);
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		Форма[Таблица].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			// делитель данных заполнения из ИБ для конвертации в данные отчета
			стрДелительДанныхИБ  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ?(ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ?(ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			чДелительДанныхИБ    = ?(ПустаяСтрока(стрДелительДанныхИБ),  1, Число(стрДелительДанныхИБ));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = Форма.мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента     = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу   = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме     = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности     = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя      = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			НоваяСтрока.ДелительДанныхИБ         = чДелительДанныхИБ;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = Форма[Таблица][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя            = ?(НЕ ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения        = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Форма[Таблица][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			Форма.мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНомерКорректировки(ТитульнаяСтраница) Экспорт 
	Если ТипЗнч(ТитульнаяСтраница) <> Тип("ТабличныйДокумент") Тогда 
		Возврат;
	КонецЕсли;
	НК = ТитульнаяСтраница.Области.Найти("ПолеНомерКорректировки");
	Если НК <> Неопределено Тогда
		ТитульнаяСтраница.УдалитьОбласть(НК, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	НК = ТитульнаяСтраница.Области.Найти("ШапкаОбособленныеПодразделения");
	Если НК <> Неопределено Тогда
		ТитульнаяСтраница.УдалитьОбласть(НК, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьСлужебныеОбластиОтчетаСтатистики(СтруктураРеквизитовФормы, ИменаЭлементовУправленияСтроками) Экспорт 
	ТекИндекс = 0;
	
	Пока ТекИндекс < СтруктураРеквизитовФормы.мПечатныеФормы.Количество() Цикл
		
		ТабДокЛиста = СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение;
		
		Для каждого ЭлементИмена Из ИменаЭлементовУправленияСтроками Цикл
		
			Если ТабДокЛиста.Области.Найти(ЭлементИмена.Ключ) <> Неопределено Тогда
				
				ТабДокЛиста.УдалитьОбласть(ТабДокЛиста.Область(ЭлементИмена.Ключ), ТипСмещенияТабличногоДокумента.ПоВертикали);
				
				ИмяОбластиЯчейкиУдалитьСтрокуБезИндекса = ЭлементИмена.Значение + "_";
				
				ТекНомерСтроки = 1;
				ОбластьЯчейкиУдалитьСтроку = ТабДокЛиста.Области.Найти(ИмяОбластиЯчейкиУдалитьСтрокуБезИндекса + Формат(ТекНомерСтроки, "ЧГ="));
				Пока ОбластьЯчейкиУдалитьСтроку <> Неопределено Цикл
					ОбластьЯчейкиУдалитьСтроку.Текст = "";
					ТекНомерСтроки = ТекНомерСтроки + 1;
					ОбластьЯчейкиУдалитьСтроку = ТабДокЛиста.Области.Найти(ИмяОбластиЯчейкиУдалитьСтрокуБезИндекса + Формат(ТекНомерСтроки, "ЧГ="));
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Удалим пустые печатные формы
		Если ТабДокЛиста.ВысотаТаблицы = 0 Тогда
			СтруктураРеквизитовФормы.мПечатныеФормы.Удалить(ТекИндекс);
		Иначе
			ТекИндекс = ТекИндекс + 1;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьСпискиВыбораВФоне(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ИмяОтчета = ПараметрыОтчета.ПараметрыЗаполнения.Отчет;
	Макет = ПараметрыОтчета.ПараметрыЗаполнения.Макет;
	МакетСоставаПоказателей = Отчеты[ИмяОтчета].ПолучитьМакет(Макет);
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(КоллекцияСписковВыбора, АдресХранилища);
	
КонецПроцедуры

Процедура УстановитьЗначениеИФорматВПоле(ТекТабличноеПоле, ИмяПоказателя, ЗначениеПоказателя) Экспорт 
	Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
		Область = ТекТабличноеПоле.Области.Найти(Сред(ИмяПоказателя, 3));
		Если Область <> Неопределено Тогда
			Область.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, ЗначениеПоказателя);
		КонецЕсли;
	Иначе
		Область = ТекТабличноеПоле.Области.Найти(ИмяПоказателя);
		Если Область <> Неопределено Тогда
			Область.Значение = ЗначениеПоказателя;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ПроцедурыИФункцииВыгрузки

Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено) Экспорт 
	
	Если (СтрНайти(Узел.Тип, "A") <> 0 ИЛИ СтрНайти(Узел.Тип, "А") <> 0)
	   И (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) Тогда // учтем оба варианта: кириллицу и латиницу
		Возврат Истина;
	КонецЕсли;
	
	Если Узел.Формат = "N" Тогда
		ОбязательноеНулевоеЗначение = Ложь;
		Если ТипЗнч(Узел.Показатели) = Тип("Структура") Тогда
			ФорматПредставленияНуля = Неопределено;
			Если Узел.Показатели.Свойство("ЧН" + Узел.Ключ, ФорматПредставленияНуля) Тогда
				ОбязательноеНулевоеЗначение = НЕ ПустаяСтрока(Формат(0, ФорматПредставленияНуля));
			КонецЕсли; 
		КонецЕсли;
		ПустойУзел = (Узел.Значение = "0" ИЛИ НЕ ЗначениеЗаполнено(Узел.Значение)) И НЕ ОбязательноеНулевоеЗначение;
	Иначе
		ПустойУзел = НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел) Экспорт 
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр Из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель) Экспорт 
	
	Для Каждого Стр Из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Процедура УдалитьУзел(Узел) Экспорт 
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML(ИмяФормы, ИмяМакета) Экспорт 
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если ТипЗнч(ИмяФормы) = Тип("Строка") Тогда 
		Если Метаданные.Отчеты.Найти(ИмяФормы) = Неопределено Тогда 
			Макет = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакета);
		Иначе
			Макет = Отчеты[ИмяФормы].ПолучитьМакет(ИмяМакета);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИмяФормы) = Тип("УправляемаяФорма") Тогда 
		Макет = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы.ИмяФормы).ПолучитьМакет(ИмяМакета);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Видимость = Макет.Область(НомСтр, 0, НомСтр, 0).Видимость;
			Если Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ПолучитьДеревоВыгрузки(Форма, ИмяМакета) Экспорт 
	СтруктураВыгрузки = Неопределено;
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда 
		Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
			Если Нрег(Реквизит.Имя) = Нрег("СтруктураВыгрузки") Тогда 
				СтруктураВыгрузки = Форма.СтруктураВыгрузки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураВыгрузки) = Тип("ДанныеФормыДерево") Тогда 
		Если СтруктураВыгрузки.ПолучитьЭлементы().Количество() > 0 Тогда 
			ДеревоВыгрузки = ДанныеФормыВЗначение(СтруктураВыгрузки, Тип("ДеревоЗначений"));
		Иначе 
			Если ТипЗнч(Форма) = Тип("Структура") И Форма.Свойство("ИмяФормы") Тогда 
				ДеревоВыгрузки = ИзвлечьСтруктуруXML(Форма.ИмяФормы, ИмяМакета);
			Иначе
				ДеревоВыгрузки = ИзвлечьСтруктуруXML(Форма, ИмяМакета);
			КонецЕсли;
			ЗначениеВДанныеФормы(ДеревоВыгрузки, СтруктураВыгрузки);
		КонецЕсли;
		Возврат ДеревоВыгрузки;
	Иначе
		Если ТипЗнч(Форма) = Тип("Структура") И Форма.Свойство("ИмяФормы") Тогда 
			Возврат ИзвлечьСтруктуруXML(Форма.ИмяФормы, ИмяМакета)
		Иначе 
			Возврат ИзвлечьСтруктуруXML(Форма, ИмяМакета)
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ИмеютсяАналогичныеСоседниеУзлыКлючРаздел(Стр) Экспорт 
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ, Раздел", Стр.Ключ, Стр.Раздел), Ложь).Количество() > 1);
	
КонецФункции

Функция ИмеютсяАналогичныеСоседниеУзлыКлюч(Стр) Экспорт 
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Функция СоздатьНовыйПотокXML(Кодировка = "utf-8") Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку(Кодировка);
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

Функция УсловиеВыполнено(Форма, ПараметрыВыгрузки, Условие, ИмяРаздела = "Титульный", Узел = Неопределено) Экспорт 
	
	Попытка
		
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "ПараметрыВыгрузки."));
		
		Если РезультатВычисленияВыражения <> Неопределено Тогда
			Если РезультатВычисленияВыражения = 1 ИЛИ РезультатВычисленияВыражения = 0
			 ИЛИ РезультатВычисленияВыражения = Истина ИЛИ РезультатВычисленияВыражения = Ложь Тогда
				Возврат НЕ (Булево(РезультатВычисленияВыражения) = Ложь);
			Иначе
				СообщитьВТаблицуСообщений(Форма, "Не удалось вычислить выражение-условие: """ + Условие + """!", ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		СообщитьВТаблицуСообщений(Форма, "Не удалось вычислить выражение-условие: """ + Условие + """!", ИмяРаздела, "");
		Возврат Истина;
		
	КонецПопытки;
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел) Экспорт 
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(мДанныеОтчета, Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Если ТипЗнч(ПоказателиРаздела) = Тип("Структура") Тогда
				Для Каждого Эл Из ПоказателиРаздела Цикл
					ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
				КонецЦикла;
			КонецЕсли;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПараметровПрочиеОтчеты(мДанныеОтчета, ПараметрыВыгрузки, Узел) Экспорт 
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист Из СтрокаДерева.Строки Цикл
				Если Лист.Тип = "А" ИЛИ Лист.Тип = "A" Тогда 
					ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
				КонецЕсли;
			КонецЦикла;
			Для каждого Лист Из СтрокаДерева.Строки Цикл
				Если Не (Лист.Тип = "А" ИЛИ Лист.Тип = "A") Тогда 
					ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
				КонецЕсли;
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ЗначениеСоответствуетФормату(Форма, Стр) Экспорт
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТаблицуСообщений(Форма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТаблицуСообщений(Форма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции 

Функция ПредставлениеПоказателя(Стр) Экспорт 
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ВывестиПоказательСтатистикиВXML(Узел, ЗначениеПоказателя, ФорматПредставленияНуля = "") Экспорт 
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда      // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "B" ИЛИ Узел.Формат = "В" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(ТипЗнч(ЗначениеПоказателя) = Тип("Строка"), СокрЛП(ЗначениеПоказателя), ?(Булево(0 + ЗначениеПоказателя), "true", "false"));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = ЧислоПоФормату(ЗначениеПоказателя, СтрокаФормата, Истина);
		Если СтрНайти(ФорматПредставленияНуля, "ЧН=") > 0 Тогда
			Узел.Показатели = Новый Структура("ЧН" + СокрЛП(Узел.Ключ), ФорматПредставленияНуля);
		КонецЕсли;
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлыСтатистики(Узел) Экспорт 
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлыСтатистики(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Тип, "A") <> 0 ИЛИ СтрНайти(Узел.Тип, "А") <> 0) // Необязательные атрибуты пропускаем (они удаляются только вместе с узлом)
			И (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) Тогда // учтем оба варианта: кириллицу и латиницу
			Возврат;
		КонецЕсли;
		
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлыКлючРаздел(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьДанные(Форма, Узел) Экспорт 
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Форма, Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр Из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Форма, Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

Функция СформироватьСтруктуруДопАтрибутов(ИмяФормы, ИмяМакета) Экспорт 
	
	ДопАтрибуты = Новый Структура;
	
	Если ТипЗнч(ИмяФормы) = Тип("УправляемаяФорма") Тогда 
		Макет = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы.ИмяФормы).ПолучитьМакет(ИмяМакета);
	Иначе 
		Макет = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	
	Для НомСтр = 1 По Макет.ВысотаТаблицы Цикл
		АтрКлюч = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
		Если НЕ ПустаяСтрока(АтрКлюч) Тогда
			АтрКлюч = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(".- ", АтрКлюч, "___");
			ДопАтрибуты.Вставить(АтрКлюч, СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДопАтрибуты;
	
КонецФункции

// Функция возвращеат формат выгрузки стат. отчета в формате **-**-****, например, 16-09-2013
// ИсточникОтчета - Строка, имя отчета, например, РегламентированныйОтчетСтатистикаФормаП1
// ИмяФормы - Строка, имя формы, например, ФормаОтчета2016Кв1
// ДопПараметры - Неопределено или структура с доп. параметрами
Функция ПолучитьВерсиюВыгрузкиСтатОтчета(ИсточникОтчета, ИмяФормы, ДопПараметры = Неопределено) Экспорт
	ИмяМакетаАттр = СтрЗаменить(ИмяФормы, "ФормаОтчета", "АтрибВыгрузкиXML");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	0 КАК Ссылка
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|ГДЕ
	|	РегламентированныеОтчеты.ИсточникОтчета = &ИсточникОтчета
	|	И НЕ РегламентированныеОтчеты.ПометкаУдаления
	|	И РегламентированныеОтчеты.ВнешнийОтчетИспользовать";
	
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОтчетИмя = "ВнешнийОтчет."+ИсточникОтчета+".Форма."+ИмяФормы;
	Иначе
		ОтчетИмя = "Отчет."+ИсточникОтчета+".Форма."+ИмяФормы;
	КонецЕсли;
	
	ВерсияРезультат = "";
	Для Каждого Макет Из Метаданные.Отчеты[ИсточникОтчета].Макеты Цикл 
		Если СтрНачинаетсяС(Макет.Имя, ИмяМакетаАттр) Тогда
			ДопАтрибуты = СформироватьСтруктуруДопАтрибутов(ОтчетИмя, Макет.Имя);
			ДопАтрибуты.Свойство("version", ВерсияРезультат);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВерсияРезультат;
КонецФункции

Процедура ОбработатьУсловныеЭлементы(Форма, Знач ПараметрыВыгрузки, Узел) Экспорт 
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Форма.мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Форма, ПараметрыВыгрузки, ТекСтр.Условие, , Узел) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Форма,ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, Кодировка = "utf-8") Экспорт 
	
	ПотокXML = СоздатьНовыйПотокXML(Кодировка); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

#КонецОбласти

#Область НоваяФормаРегламентированнойОтчетности

#Область ЗаписьОбъектовВРегистрЖурналОтчетовСтатусы

Процедура ЗаписатьРегламентированныйОтчетВРегистрЖурналОтчетовСтатусы(Ссылка)
	
	ПараметрыОтчета = СвойстваРегламентированногоОтчета(Ссылка);
	РегламентированнаяОтчетностьВызовСервера.ОтразитьВЖурналеОтчетов(ПараметрыОтчета);
	
КонецПроцедуры

Функция ПолучитьКодОрганаФСГСПоОрганизации(ОрганизацияОтчета)
	КодОрганаФСГС = ?(НЕ ЗначениеЗаполнено(ОрганизацияОтчета), "",
		СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ОрганизацияОтчета, , "КодОрганаФСГС").КодОрганаФСГС));
	Возврат КодОрганаФСГС;
КонецФункции

Функция ПолучитьКодПодразделенияСтатотчета(СсылкаНаОтчет)
	КодФСГС = "";
	
	ДанныеОтчета = СсылкаНаОтчет.ДанныеОтчета.Получить();
	Если ТипЗнч(ДанныеОтчета) = Тип("Структура") Тогда 
		ОбособленноеПодразделение = Неопределено;
		ДанныеОтчета.Свойство("ОбособленноеПодразделение", ОбособленноеПодразделение);
		Если Не ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
			Возврат ПолучитьКодОрганаФСГСПоОрганизации(СсылкаНаОтчет.Организация);
		КонецЕсли;
	КонецЕсли;
	
	ОбособленноеПодразделение = ДанныеОтчета.ОбособленноеПодразделение;
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьКодОрганаФСГСПодразделения(ОбособленноеПодразделение, КодФСГС);
	Если Не ЗначениеЗаполнено(СокрЛП(КодФСГС)) Тогда
		КодФСГС = ПолучитьКодОрганаФСГСПоОрганизации(СсылкаНаОтчет.Организация)
	КонецЕсли;
	Возврат КодФСГС;
КонецФункции

Функция СвойстваРегламентированногоОтчета(Ссылка) Экспорт
	
	ИсточникОтчета = Ссылка.ИсточникОтчета;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыОтправляемыхДокументов.ТипПолучателя
		|ИЗ
		|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
		|ГДЕ
		|	ВидыОтправляемыхДокументов.Источник = &ИсточникОтчета";
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ТипПолучателя) Тогда
		
		ВидКонтролирующегоОргана = Выборка.ТипПолучателя;
		
	Иначе
		Если СтрНайти(ИсточникОтчета, "СтатистикаФормаУчетаПеремещенияТоваровТС") > 0 Тогда
			ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФТС;
		ИначеЕсли СтрНайти(ИсточникОтчета, "Статистика") > 0 Тогда
			ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
		ИначеЕсли СтрНайти(ИсточникОтчета, "Алко") > 0 Тогда
			ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСРАР;
		ИначеЕсли СтрНайти(ИсточникОтчета, "ОкрСреда") > 0
		ИЛИ СтрНайти(ИсточникОтчета, "ОтходыСубъектовМСП") > 0 
		ИЛИ СтрНайти(ИсточникОтчета, "Форма2ТПОтходы") > 0 
		ИЛИ СтрНайти(ИсточникОтчета, "РасчетЭкологическийСбор") > 0 
		Тогда
			ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.РПН;
		ИначеЕсли СтрНайти(ИсточникОтчета, "ОперацииСДенежнымиСредствамиНФО") > 0 Тогда
			ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.БанкРоссии;
		ИначеЕсли СтрНайти(ИсточникОтчета, "4ФСС") > 0 Тогда
			ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСС;
		ИначеЕсли СтрНайти(ИсточникОтчета, "РВ3") > 0 ИЛИ СтрНайти(ИсточникОтчета, "РСВ") > 0 Тогда
			ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
		Иначе
			ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияОтчета = Ссылка.Организация;
	
	Если ВидКонтролирующегоОргана      = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
		КодОрганаПФР = ?(НЕ ЗначениеЗаполнено(ОрганизацияОтчета), "",
			СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ОрганизацияОтчета, , "КодОрганаПФР").КодОрганаПФР));
		КодКонтролирующегоОргана = КодОрганаПФР;
	ИначеЕсли ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
		КодНалоговогоОргана = ?(НЕ ЗначениеЗаполнено(ОрганизацияОтчета), "",
			СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ОрганизацияОтчета, , "КодНО").КодНО));
		КодКонтролирующегоОргана = ?(ПустаяСтрока(Ссылка.КодНалоговогоОргана), КодНалоговогоОргана, Ссылка.КодНалоговогоОргана);
	ИначеЕсли ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
		Попытка
			Признак = Ложь;
			РегламентированнаяОтчетностьПереопределяемый.ИспользуетсяОтправкаВРосстатПоРазнымНаправлениям(Признак);
			Если Признак Тогда
				КодКонтролирующегоОргана = ПолучитьКодПодразделенияСтатотчета(Ссылка);
			Иначе
				КодКонтролирующегоОргана = ПолучитьКодОрганаФСГСПоОрганизации(ОрганизацияОтчета);
			КонецЕсли;
		Исключение
			КодКонтролирующегоОргана = ПолучитьКодОрганаФСГСПоОрганизации(ОрганизацияОтчета);
		КонецПопытки;
	ИначеЕсли ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
		КодКонтролирующегоОргана = "";
	ИначеЕсли ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
		КодКонтролирующегоОргана = "";
	ИначеЕсли ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФТС Тогда
		КодКонтролирующегоОргана = "";
	ИначеЕсли ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.БанкРоссии Тогда
		КодКонтролирующегоОргана = "";
	ИначеЕсли ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
		КодОрганаФСС = КодОрганаФССИзДанныхОтчета(Ссылка.ДанныеОтчета);
		КодКонтролирующегоОргана =  КодОрганаФСС;
	КонецЕсли;
	
	ПараметрыОтчета = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПараметрыОтображенияВЖурналеОтчетов();
	
	ПараметрыОтчета.Вставить("ДокСсылка",                Ссылка);
	ПараметрыОтчета.Вставить("НаименованиеОтчета",       Ссылка.НаименованиеОтчета);
	ПараметрыОтчета.Вставить("ВидКонтролирующегоОргана", ВидКонтролирующегоОргана);
	ПараметрыОтчета.Вставить("КодКонтролирующегоОргана", КодКонтролирующегоОргана);
	ПараметрыОтчета.Вставить("ДатаНачалаОП",             НачалоДня(Ссылка.ДатаНачала));
	ПараметрыОтчета.Вставить("ДатаОкончанияОП",          КонецДня(Ссылка.ДатаОкончания));
	ПараметрыОтчета.Вставить("Организация",              ОрганизацияОтчета);
	ПараметрыОтчета.Вставить("СтатусОтправки",           "Не отправлялся");
	ПараметрыОтчета.Вставить("ПредставлениеВида",        Ссылка.ПредставлениеВида);
	ПараметрыОтчета.Вставить("ДатаСоздания",             Ссылка.ДатаПодписи);
	ПараметрыОтчета.Вставить("Комментарий",              Ссылка.Комментарий);
	ПараметрыОтчета.Вставить("Банк",                     Ссылка.Банк);
	
	Если Ссылка.ИсточникОтчета = "РегламентированныйОтчетНДС" Тогда
		
		Если Ссылка.СтатусОтчета = "Сдано" Тогда
			
			ПараметрыОтчета.Вставить("СтатусОтправки", "Сдано");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Процедура ЗаписатьПрочиеОтчетыВЖурналОтчетовСтатусы(Ссылка)
	
	Свойства = СвойстваПрочихОтчетов(Ссылка); 
	РегламентированнаяОтчетностьВызовСервера.ОтразитьВЖурналеОтчетов(Свойства);
	
КонецПроцедуры

Функция СвойстваПрочихОтчетов(Ссылка) Экспорт
	
	ТаблицаОписанияОбъектовНеВходящихВБРО = ТаблицаОписанияОбъектовРегламентированнойОтчетности();
	СтрокаТаблицыОписания = ТаблицаОписанияОбъектовНеВходящихВБРО.Найти(ТипЗнч(Ссылка), "ТипОбъекта");
	
	ПараметрыОтчета = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПараметрыОтображенияВЖурналеОтчетов();
	
	ПараметрыОтчета.Вставить("ДокСсылка",                Ссылка);
	ПараметрыОтчета.Вставить("НаименованиеОтчета",       СтрокаТаблицыОписания.Наименование);
	ПараметрыОтчета.Вставить("ВидКонтролирующегоОргана", СтрокаТаблицыОписания.ВидКонтролирующегоОргана);
	
	ОпределениеСвойстваОбъектаДляОтображенииВФормеОтчетность(Ссылка, ПараметрыОтчета);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция ОпределитьСвойстваОбъектовДляОтображенияВФормеОтчетность(Ссылки) Экспорт
	
	// Формируем массив ссылок, для которых будем определять свойства
	Если ТипЗнч(Ссылки) = Тип("Массив") Тогда
		МассивСсылок = Ссылки;
	Иначе
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Ссылки);
	КонецЕсли;
	
	ТаблицаСвойств = Новый ТаблицаЗначений;
	ТаблицаСвойств.Колонки.Добавить("Ссылка");
	ТаблицаСвойств.Колонки.Добавить("ДатаСоздания", 			Новый ОписаниеТипов("Дата"));
	ТаблицаСвойств.Колонки.Добавить("Наименование", 			Новый ОписаниеТипов("Строка"));
	ТаблицаСвойств.Колонки.Добавить("КодКонтролирующегоОргана", Новый ОписаниеТипов("Строка"));
	ТаблицаСвойств.Колонки.Добавить("ДатаНачала",				Новый ОписаниеТипов("Дата"));
	ТаблицаСвойств.Колонки.Добавить("ДатаОкончания", 			Новый ОписаниеТипов("Дата"));
	ТаблицаСвойств.Колонки.Добавить("ВариантОтчета", 			Новый ОписаниеТипов("Строка"));
	ТаблицаСвойств.Колонки.Добавить("ПометкаУдаления", 			Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("Комментарий", 				Новый ОписаниеТипов("Строка"));
	ТаблицаСвойств.Колонки.Добавить("Организация");
	
	// Заполняем колонку ссылок
	Для каждого ЭлементМассив Из МассивСсылок Цикл
		НоваяСтрока = ТаблицаСвойств.Добавить();
		НоваяСтрока.Ссылка = ЭлементМассив;
	КонецЦикла;
	
	// Определяем свойства для ссылок
	РегламентированнаяОтчетностьПереопределяемый.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(ТаблицаСвойств);
	
	Возврат ТаблицаСвойств;
	
КонецФункции

Процедура ОпределениеСвойстваОбъектаДляОтображенииВФормеОтчетность(Ссылка, ЗначенияЗаполнения)
	
	ТаблицаСвойств = ОпределитьСвойстваОбъектовДляОтображенияВФормеОтчетность(Ссылка);
	СвойстваСсылки = ТаблицаСвойств.Найти(Ссылка, "Ссылка");
	
	Если СвойстваСсылки <> Неопределено Тогда
		
		ЗначенияЗаполнения.ДатаСоздания = СвойстваСсылки.ДатаСоздания;
		Если ЗначениеЗаполнено(СвойстваСсылки.Наименование) Тогда
			ЗначенияЗаполнения.НаименованиеОтчета = СвойстваСсылки.Наименование;
		КонецЕсли;
		ЗначенияЗаполнения.ДатаНачалаОП 			= СвойстваСсылки.ДатаНачала;
		ЗначенияЗаполнения.ДатаОкончанияОП 			= СвойстваСсылки.ДатаОкончания;
		ЗначенияЗаполнения.ПредставлениеВида		= СвойстваСсылки.ВариантОтчета;
		ЗначенияЗаполнения.ДатаСоздания 			= СвойстваСсылки.ДатаСоздания;
		ЗначенияЗаполнения.Организация 				= СвойстваСсылки.Организация;
		ЗначенияЗаполнения.КодКонтролирующегоОргана = СвойстваСсылки.КодКонтролирующегоОргана;
		ЗначенияЗаполнения.Комментарий              = СвойстваСсылки.Комментарий;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КодОрганаФССИзДанныхОтчета(ХранилищеДанныхОтчета)
	
	Код = "";
	ДанныеОтчета = ХранилищеДанныхОтчета.Получить();
	Если ЗначениеЗаполнено(ДанныеОтчета) Тогда
		ТитульныйЛист = ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
		Если ТитульныйЛист.Свойство("КодПодчиненности") Тогда
			Код = ТитульныйЛист.КодПодчиненности;
		ИначеЕсли ТитульныйЛист.Свойство("КодПодчиненности_1") Тогда
			Код = ТитульныйЛист.КодПодчиненности_1
			+ ТитульныйЛист.КодПодчиненности_2
			+ ТитульныйЛист.КодПодчиненности_3
			+ ТитульныйЛист.КодПодчиненности_4
			+ ТитульныйЛист.КодПодчиненности_5;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Лев(Код, 4);
	
КонецФункции

#КонецОбласти

#Область ПодпискаНаСобытие

// Обработчик подписки на событие "ЗаписьОбъектовРегламентированнойОтчетности".
//
Процедура ЗаписьОбъектовРегламентированнойОтчетности(Источник, Отказ) Экспорт
	
	Ссылка = Источник.Ссылка;
	Если Ссылка <> Источник Тогда
		// Проверка только если это объект, а не ссылка 
		Если Источник.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// От записи объекта можно отказаться
	СтандартнаяОбработка = Истина;
	РегламентированнаяОтчетностьПереопределяемый.ЗаписьОбъектовРегламентированнойОтчетности(Ссылка, Отказ, СтандартнаяОбработка);
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка объектов типов, входящих в БРО
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ЗаписатьРегламентированныйОтчетВРегистрЖурналОтчетовСтатусы(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьЭлектронныеПредставленияРегламентированныхОтчетовВРегистрЖурналОтчетовСтатусы(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") 
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьЗапросНаИнформационноеОбслуживаниеВРегистрЖурналОтправокВКонтролирующиеОрганы(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИПВРегистрЖурналОтправокВКонтролирующиеОрганы(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьПерепискаСКонтролирующимиОрганамиВРегистрЖурналОтправокВКонтролирующиеОрганы(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ОписиИсходящихДокументовВНалоговыеОрганы") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьОписиИсходящихДокументовВНалоговыеОрганыВРегистрЖурналОтправокВКонтролирующиеОрганы(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоясненияКДекларацииПоНДС") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьПоясненияКДекларацииПоНДСВРегистрЖурналОтправокВКонтролирующиеОрганы(Ссылка);	
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьУведомлениеОСпецрежимахНалогообложенияВРегистрЖурналОтправокВКонтролирующиеОрганы(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.МакетыПенсионныхДел") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьМакетПенсионногоДелаВРегистрЖурналОтчетовСтатусы(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда 
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьДокументыРеализацииПолномочийНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ОписиВходящихДокументовИзНалоговыхОрганов") Тогда 
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьОписиВходящихДокументовИзНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.УведомлениеОПолучателеДокументов") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьУведомлениеОПолучателеДокументовВРегистрЖурналОтправокВКонтролирующиеОрганы(Ссылка);
	Иначе
		// Определяем, является ли этот объект объектом, не входящим в БРО
		ТаблицаОписанияОбъектовНеВходящихВБРО = ТаблицаОписанияОбъектовРегламентированнойОтчетности();
		СтрокаТаблицыОписания = ТаблицаОписанияОбъектовНеВходящихВБРО.Найти(ТипЗнч(Ссылка), "ТипОбъекта");
		Если СтрокаТаблицыОписания <> Неопределено Тогда
			
			РазделФормы1СОтчетность = СтрокаТаблицыОписания.ВидДокумента;
			Если РазделФормы1СОтчетность = Перечисления.СтраницыЖурналаОтчетность.Уведомления Тогда
				// Это объект закладки Уведомления
				ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьПрочиеУведомленияВРегистрЖурналОтправокВКонтролирующиеОрганы(Ссылка);
			ИначеЕсли РазделФормы1СОтчетность = Перечисления.СтраницыЖурналаОтчетность.Отчеты Тогда
				// Это объект закладки Отчеты
				ЗаписатьПрочиеОтчетыВЖурналОтчетовСтатусы(Ссылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "ВыполнитьДействияПередУдалениемПрисоединенногоФайлаБРО"
// (для изменения индекса картинки в регистре сведений "Журнал отчетов статусы" и признака
// наличия присоединенных файлов в регистре сведений "Журнал отправок в контролирующие органы").
//
// Параметры:
//  Источник   - СправочникОбъект - объект справочника с именем "*ПрисоединенныеФайлы".
//  Отказ      - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ВыполнитьДействияПередУдалениемПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВладелецФайлов = Источник.ВладелецФайла;
	
	МодульПрисоединенныеФайлыСлужебный = ОбщегоНазначения.ОбщийМодуль("ПрисоединенныеФайлыСлужебный");
	
	МассивФайловВладельца = МодульПрисоединенныеФайлыСлужебный.ПолучитьВсеПодчиненныеФайлы(ВладелецФайлов);
	
	ОбъектИмеетФайлыНеПомеченныеНаУдаление = Ложь;
	
	Для каждого ФайлВладельца Из МассивФайловВладельца Цикл
		
		Если НЕ ФайлВладельца.ПометкаУдаления Тогда
			
			ОбъектИмеетФайлыНеПомеченныеНаУдаление = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОбъектИмеетФайлыНеПомеченныеНаУдаление Тогда
		
		ИмяРегистраСведенийНПФ = "НаличиеПрисоединенныхФайлов";
		
		Если Метаданные.РегистрыСведений.Найти(ИмяРегистраСведенийНПФ) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОтборНПФ = Новый Структура("ОбъектСФайлами", ВладелецФайлов);
		ВыборкаНПФ = РегистрыСведений[ИмяРегистраСведенийНПФ].Выбрать(ОтборНПФ);
		
		Если ВыборкаНПФ.Следующий() Тогда
			
			Если ТипЗнч(ВладелецФайлов) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
				
				УстановитьПризнакНаличияФайловПрисоединенныхКУведомлению(ВладелецФайлов, "УдалениеФайла");
				
			Иначе
				
				УстановитьИндексКартинкиОтчета(ВладелецФайлов, "УдалениеФайла");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "ВыполнитьДействияПриЗаписиПрисоединенногоФайлаБРО"
// (для изменения индекса картинки в регистре сведений "Журнал отчетов статусы" и признака
// наличия присоединенных файлов в регистре сведений "Журнал отправок в контролирующие органы").
//
// Параметры:
//  Источник   - СправочникОбъект - объект справочника с именем "*ПрисоединенныеФайлы".
//  Отказ      - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ВыполнитьДействияПриЗаписиПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВладелецФайлов = Источник.ВладелецФайла;
	
	Если ТипЗнч(ВладелецФайлов) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		
		УстановитьПризнакНаличияФайловПрисоединенныхКУведомлению(ВладелецФайлов, "ПрисоединениеФайла");
		
	Иначе
		
		УстановитьИндексКартинкиОтчета(ВладелецФайлов, "ПрисоединениеФайла");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Формирует таблицу для получения данных из переопределяемого метода
Функция ТаблицаОписанияОбъектовРегламентированнойОтчетности() Экспорт
	
	ТаблицаОписания = ПустаяТаблицаОписанияОбъектовРегламентированнойОтчетности();
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
	
	РегламентированнаяОтчетностьПереопределяемый.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
	
	ЗаполнитьНаименованиеВТаблицеОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
	
	Возврат ТаблицаОписания;
	
КонецФункции

// Устанавливает переменную "ОбъектОтправляется" в "Ложь", если регламентированный отчет не отправляется в контролирующие органы
Процедура РегламентированныйОтчетОтправляетсяВКонтролирующиеОрганы(ДокСсылка, ОбъектОтправляется) Экспорт
	
	РеглОтчетыНеОтправляютсяВКонтролирующиеОрганы = Новый Массив;
	РеглОтчетыНеОтправляютсяВКонтролирующиеОрганы.Добавить("РегламентированныйОтчетДвижениеСредствПоСчетуВБанкеЗаПределамиРФ");
	РеглОтчетыНеОтправляютсяВКонтролирующиеОрганы.Добавить("РегламентированныйОтчетПодтверждениеВидаДеятельности");
	РеглОтчетыНеОтправляютсяВКонтролирующиеОрганы.Добавить("РегламентированныйОтчетСведенияОрублевыхСчетах");
	РеглОтчетыНеОтправляютсяВКонтролирующиеОрганы.Добавить("РегламентированныйОтчетСведенияОСчетахвВиностраннойВалюте");
	РеглОтчетыНеОтправляютсяВКонтролирующиеОрганы.Добавить("РегламентированныйОтчетСтатистикаФорма1ДМ");
	РеглОтчетыНеОтправляютсяВКонтролирующиеОрганы.Добавить("РегламентированныйОтчетСтатистикаФорма2ДМДавальческоеСырье");
	РеглОтчетыНеОтправляютсяВКонтролирующиеОрганы.Добавить("РегламентированныйОтчетСтатистикаФорма4ДМ");
	
	Если РеглОтчетыНеОтправляютсяВКонтролирующиеОрганы.Найти(ДокСсылка.ИсточникОтчета) <> Неопределено Тогда
	
		ОбъектОтправляется = Ложь;
	
	КонецЕсли;
	
КонецПроцедуры

// Дополняет дерево видов отчетов другими видами, входящими и не входящими в БРО
Процедура ДобавитьВДеревоРегламентированныхОтчетовДругиеОтчеты(ДеревоОтчетов) Экспорт
	
	ЗначенияКолонок = Новый Структура;
	
	// Дополним единичными отчетами, не входящими в БРО
	ТаблицаОписанияОбъектов = ТаблицаОписанияОбъектовРегламентированнойОтчетности();
	ТаблицаОписанияОтчетов = ТаблицаОписанияОбъектов.Скопировать(Новый Структура("ВидДокумента, ЯвляетсяАктуальным", Перечисления.СтраницыЖурналаОтчетность.Отчеты, Истина));
	
	ДобавитьВДеревоРегламентированныхОтчетовОтчетыИзТаблицы(ДеревоОтчетов, ТаблицаОписанияОтчетов);
	
	// Добавим дерево отчетов из пользовательских конфигураций
	РегламентированнаяОтчетностьПереопределяемый.ДобавитьВДеревоРегламентированныхОтчетовДругиеОтчеты(ДеревоОтчетов);
	
КонецПроцедуры

Процедура ДобавитьОтчетВДеревоРегламентированныхОтчетов(ДеревоОтчетов, ЗначенияКолонок)
	
	Перем Категория;
	
	УзелДерева = ДеревоОтчетов;
	
	Если ЗначенияКолонок.Свойство("Категория", Категория) И ЗначениеЗаполнено(Категория) Тогда
		НайденныеГруппы = ДеревоОтчетов.Строки.НайтиСтроки(Новый Структура("Наименование,ЭтоГруппа", Категория, Истина), Истина);
		Если НайденныеГруппы.Количество() > 0 Тогда
			УзелДерева = НайденныеГруппы[0];
		Иначе // создаем папку
			УзелДерева = ДеревоОтчетов.Строки.Добавить();
			УзелДерева.Наименование = Категория;
			УзелДерева.ЭтоГруппа = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева = УзелДерева.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаДерева, ЗначенияКолонок);
	
КонецПроцедуры

Процедура ФормаРегламентированнойОтчетности_ПриСозданииНаСервере(Форма) Экспорт

	РегламентированнаяОтчетностьПереопределяемый.ФормаРегламентированнойОтчетности_ПриСозданииНаСервере(Форма);

КонецПроцедуры

Функция КоличествоОбъектовНеЗаписанныхВРегистр(ПараметрыЗапуска) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Проверка полноты данных журнала регламентированной отчетности'");
	Результат = ЗапуститьВыполнениеВФоне(
		ПараметрыЗапуска.УникальныйИдентификаторФормы,
		"РегламентированнаяОтчетность.ВыполнитьПроверку",
		ПараметрыЗапуска,
		НаименованиеЗадания);
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьПроверку(Параметры, АдресХранилища) Экспорт
	
	КоличествоОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы =
		ДокументооборотСКОВызовСервера.КоличествоОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы();
		
	КоличествоОбъектовНеЗаписанныхВРегистрЖурналОтчетовСтатусы =
		РегламентированнаяОтчетностьВызовСервера.КоличествоОбъектовНеЗаписанныхВРегистрЖурналОтчетовСтатусы();
		
	ОбщееКоличествоОбъектов = КоличествоОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы
							+ КоличествоОбъектовНеЗаписанныхВРегистрЖурналОтчетовСтатусы;
		
	КоличествоОбъектовНеЗаписанныхВРегистрЖурналОтчетовСтатусы =
		РегламентированнаяОтчетностьВызовСервера.КоличествоНекорректныхЗаписейРегистраЖурналОчетовСтатусы();
	
	РезультатОбработки = Новый Структура();
	РезультатОбработки.Вставить("КоличествоНезаписанныхОбъектов", ОбщееКоличествоОбъектов);
	РезультатОбработки.Вставить("КоличествоНекорректныхЗаписей", КоличествоОбъектовНеЗаписанныхВРегистрЖурналОтчетовСтатусы);
	
	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);
	
КонецПроцедуры

Функция ДобавлениеОбъектовОтсутствующихВРегистре(ПараметрыЗапуска) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение данных журнала регламентированной отчетности'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		ПараметрыЗапуска.УникальныйИдентификаторФормы,
		"РегламентированнаяОтчетность.ВыполнитьДобавлениеВРегистр",
		ПараметрыЗапуска,
		НаименованиеЗадания);
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьДобавлениеВРегистр(Параметры, АдресХранилища) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		Если Параметры.СОчисткойРегистров Тогда
			
			НаборЗаписей = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьНаборЗаписей();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
			НаборЗаписей = РегистрыСведений.ЖурналОтчетовСтатусы.СоздатьНаборЗаписей();
			НаборЗаписей.Очистить();
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		ДокументооборотСКОВызовСервера.ЗаполнитьРегистрЖурналОтправокВКонтролирующиеОрганы();
		
		РегламентированнаяОтчетностьВызовСервера.ЗаполнитьРегистрЖурналОчетовСтатусы();
		
		РегламентированнаяОтчетностьВызовСервера.УдалитьНекорректныеЗаписиИзРегистраЖурналОчетовСтатусы();
		
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ДобавлениеВыполнено", Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Заполнение данных журнала регламентированной отчетности'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();
		
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ДобавлениеВыполнено", Ложь);
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);
	
КонецПроцедуры

Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);

	Задание = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания,, НаименованиеЗадания);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор));
	Результат.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьСобытие1СОтчетности(ИмяСобытия, СсылкаНаИсточник = Неопределено, ДопПараметрСтруктура = Неопределено) Экспорт
			
	Если СсылкаНаИсточник = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяСобытия = НСтр("ru = 'Регламентированный отчет. Создание'") Тогда
		
		СтатистикаБРОКлиентСервер.ДобавитьСобытие(ИмяСобытия + ". " + КомментарийКСозданиюРеглОтчета(СсылкаНаИсточник));
		
	ИначеЕсли ИмяСобытия = НСтр("ru = 'Регламентированный отчет. Выгрузка'") Тогда
		
		СтатистикаБРОКлиентСервер.ДобавитьСобытие(ИмяСобытия + ". " + КомментарийКВыгрузкеРеглОтчета(СсылкаНаИсточник));
		
	ИначеЕсли ИмяСобытия = НСтр("ru = 'Регламентированный отчет. Проверка выгрузки'") Тогда
		
		СтатистикаБРОКлиентСервер.ДобавитьСобытие(ИмяСобытия + ". " + КомментарийКПроверкеВыгрузки(СсылкаНаИсточник));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииФильтрацииОрганизацийВСтартовойФормеРегламентированногоОтчета

// Процедура возвращает список организаций - юридических лиц.
//
// Параметры:
//  СписокЮрЛиц - СписокЗначений - список организаций, являющихся юридическими лицами
//  Текст       - Строка - подстрока поиска в наименовании организации.
//
Процедура ПолучитьСписокДоступныхЮридическихЛиц(СписокЮрЛиц = Неопределено, Знач Текст = Неопределено) Экспорт
	
	Если СписокЮрЛиц = Неопределено ИЛИ ТипЗнч(СписокЮрЛиц) <> Тип("СписокЗначений") Тогда
		
		СписокЮрЛиц = Новый СписокЗначений;
		
	КонецЕсли;
	
	ДополнитьСтрокуСпециальнымиСимволами(Текст);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	Организации.Ссылка,
				   |	Организации.Наименование
				   |ИЗ
				   |	Справочник.Организации КАК Организации
				   |ГДЕ
				   |	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
				   |	И НЕ Организации.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Запрос.Текст = Запрос.Текст + " И Организации.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""";
		Запрос.УстановитьПараметр("Текст", Текст);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Наименование";
	
	РегламентированнаяОтчетностьПереопределяемый.СформироватьТекстЗапросаДляПолученияДоступныхЮридическихЛиц(
		Запрос.Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СписокЮрЛиц.Добавить(Выборка.Ссылка, Выборка.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура возвращает список организаций - индивидуальных предпринимателей.
//
// Параметры:
//  СписокФизЛиц - СписокЗначений - список организаций, являющихся индивидуальными предпринимателями
//  Текст        - Строка - подстрока поиска в наименовании организации.
//
Процедура ПолучитьСписокДоступныхИндивидуальныхПредпринимателей(СписокФизЛиц = Неопределено, Знач Текст = Неопределено) Экспорт
	
	Если СписокФизЛиц = Неопределено ИЛИ ТипЗнч(СписокФизЛиц) <> Тип("СписокЗначений") Тогда
		
		СписокФизЛиц = Новый СписокЗначений;
		
	КонецЕсли;
	
	ДополнитьСтрокуСпециальнымиСимволами(Текст);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	Организации.Ссылка,
				   |	Организации.Наименование
				   |ИЗ
				   |	Справочник.Организации КАК Организации
				   |ГДЕ
				   |	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
				   |	И НЕ Организации.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Запрос.Текст = Запрос.Текст + " И Организации.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""";
		Запрос.УстановитьПараметр("Текст", Текст);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Наименование";
	
	РегламентированнаяОтчетностьПереопределяемый.СформироватьТекстЗапросаДляПолученияДоступныхИндивидуальныхПредпринимателей(
		Запрос.Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СписокФизЛиц.Добавить(Выборка.Ссылка, Выборка.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная процедура, дополняющая передаваемую строку спец. символами.
//
// Параметры:
//  Текст - Строка.
//
Процедура ДополнитьСтрокуСпециальнымиСимволами(Знач Текст = Неопределено)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Текст = СтрЗаменить(Текст, "~", "~~");
		Текст = СтрЗаменить(Текст, "%", "~%");
		Текст = СтрЗаменить(Текст, "_", "~_");
		Текст = СтрЗаменить(Текст, "[", "~[");
		Текст = СтрЗаменить(Текст, "-", "~-");
		Текст = Текст + "%";
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВсеЮрФизЛица(ЮрЛицо) Экспорт
	
	Попытка
		ЮФЛ = Метаданные.Перечисления.Найти("ЮридическоеФизическоеЛицо");
		ЮФЛРек = Метаданные.Справочники.Организации.Реквизиты.Найти("ЮридическоеФизическоеЛицо");
		Если ЮФЛ <> Неопределено И ЮФЛРек <> Неопределено Тогда 
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ФЛ", ?(ЮрЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Организации.*
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	НЕ Организации.ПометкаУдаления
				|	И Организации.ЮридическоеФизическоеЛицо = &ФЛ";
				
			Результат = Новый Массив;
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Результат.Добавить(Выборка.Ссылка);
			КонецЦикла;
			
			Возврат Результат;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.*
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления";
		
	Результат = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Выборка.Ссылка) = ЮрЛицо Тогда 
			Результат.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивФормСтатистикиТолькоДляОрганизации()
	
	Результат = Новый Массив;
	
	Результат.Добавить("РегламентированныйОтчетАвансыИмущество");
	Результат.Добавить("РегламентированныйОтчетДоходыЗаПределамиРФ");
	Результат.Добавить("РегламентированныйОтчетИмущество");
	Результат.Добавить("РегламентированныйОтчетПрибыль");
	Результат.Добавить("РегламентированныйОтчетПрибыльИностраннойОрганизации");
	Результат.Добавить("РегламентированныйОтчетПрибыльСколковоРасчетПрибыли");
	Результат.Добавить("РегламентированныйОтчетПрибыльСРП");
	Результат.Добавить("РегламентированныйОтчетСведенияОДолеДоходовОтОбразовательнойИлиМедДеятельности");
	Результат.Добавить("РегламентированныйОтчетТранспортныйНалог");
	Результат.Добавить("РегламентированныйОтчетФинансовыйРезультатИнвестиционногоТоварищества");
	
	// Статистические отчеты.
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма11");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма11К");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма11НА");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма11Сделка");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма11ТЭР");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма12Строительство");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма12Ф");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма14МЕТлом");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1Автотранс");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1Администрация");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1Алкоголь");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1АлкогольОпт");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ВЭС");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ГС");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ДАП");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ДАуслуги");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1Закупки");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1И");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ИЖС");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1Кадры");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1Контракт");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1КСРКраткая");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1МБ");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1МО");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1МС");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1НатураБМ");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1П");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1РабочаяСила");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1РП");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1СХцены");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1Т");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ТГМС");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ТЕП");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1Технология");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ТОРГ");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ТРавто");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1Туст");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1Тчзп");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1Услуги");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1Учет");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ФП");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ФПинд");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ЦеныПриобр");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма22ЖКХсв");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма24Энергетика");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма26ЖКХ");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма2ГСГЗ");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма2МС");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма2НаукаКр");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма2Приватизация");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма2СБСеверСр");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма2ЦеныПриобр");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма3Информ");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма3Приватизация");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма3СБвывоз");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма3ТОРГПМ");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма3Ф");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма4Запасы");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма4Инновация");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма4ТЭР");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма57Т");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма5З");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма65Автотранс");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма7Травматизм");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма85К");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма8ВЭСТрусл");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма8ВЭСуслуги");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма9КС");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма9ФОМС");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма9ФПФ");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма9ФСС");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаДАППМ");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаДАС");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаДАФЛ");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаИЖС");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаЗПЗдрав");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаЗПКультура");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаЗПНаука");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаЗПОбразование");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаЗПСоц");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаМПм");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаМПмсх");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаП1");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаП1Приложение3");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаП1СХ");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаП2");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаП2инв");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаП2к");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаП3");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаП4");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаП4НЗ");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаП5М");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаП6");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаПМ");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаПМТорг");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаС1");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаС2");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаТОРГм");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаМПСП");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаТЗВМП");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаТЗВбюджет");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФормаПУслуги");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивФормСтатистикиТолькоДляИП()
	
	Результат = Новый Массив;
	
	// Статистические отчеты.
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПсвед");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1Предприниматель");
	Результат.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПмес");
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьОтборВФормеВыбораОтчета(Форма) Экспорт
	
	ИмяОтчета = Форма.ИмяФормы;
	Если СтрНайти(ИмяОтчета, "ОсновнаяФорма") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОтчета = Сред(ИмяОтчета, СтрДлина("Отчет.") + 1);
	ИмяОтчета = Лев(ИмяОтчета, СтрНайти(ИмяОтчета, ".") - 1);
	
	Попытка
		Отчеты[ИмяОтчета].УстановитьФильтр(Форма);
		Возврат;
	Исключение
	КонецПопытки;
	
	Если ПолучитьМассивФормСтатистикиТолькоДляОрганизации().Найти(ИмяОтчета) <> Неопределено Тогда
		
		МассивОтбора = ВсеЮрФизЛица(Истина);
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивОтбора)));
		Форма.Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		Если МассивОтбора.Найти(Форма.Организация) = Неопределено Тогда
			Форма.Организация = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ПолучитьМассивФормСтатистикиТолькоДляИП().Найти(ИмяОтчета) <> Неопределено Тогда
		
		МассивОтбора = ВсеЮрФизЛица(Ложь);
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивОтбора)));
		Форма.Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		Если МассивОтбора.Найти(Форма.Организация) = Неопределено Тогда
			Форма.Организация = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПоказателиОценкиРискаВыезднойНалоговойПроверки

Функция ОтчетыОценкиРисков(Организация, ДатаНачала, ДатаОкончания)
	
	ТаблицаОтчетов = Новый ТаблицаЗначений;
	ТаблицаОтчетов.Колонки.Добавить("РегламентированныйОтчет");
	ТаблицаОтчетов.Колонки.Добавить("ИсточникОтчета");
	ТаблицаОтчетов.Колонки.Добавить("ВыбраннаяФорма");
	ТаблицаОтчетов.Колонки.Добавить("ПериодДокумента");
	ТаблицаОтчетов.Колонки.Добавить("КодНалоговогоОргана");
	ТаблицаОтчетов.Колонки.Добавить("Вид");
	ТаблицаОтчетов.Колонки.Добавить("МоментВремени");
	ТаблицаОтчетов.Колонки.Добавить("ДатаОтчета");
	ТаблицаОтчетов.Колонки.Добавить("ОтчетныйПериод");
	ТаблицаОтчетов.Колонки.Добавить("Периодичность");
	ТаблицаОтчетов.Колонки.Добавить("ДатаНачала");
	ТаблицаОтчетов.Колонки.Добавить("ДатаОкончания");
	
	ВидыОтчетов = ВидыОтчетовОценкиРисков();
	Выборка = ВыборкаРегламентированныхОтчетов(Организация, ДатаНачала, ДатаОкончания, ВидыОтчетов);
	
	Пока Выборка.Следующий() Цикл
		
		УсловияПоиска = Новый Структура("ИсточникОтчета, ПериодДокумента, КодНалоговогоОргана");
		ЗаполнитьЗначенияСвойств(УсловияПоиска, Выборка);
		
		СтрокиТаблицыОтчетов = ТаблицаОтчетов.НайтиСтроки(УсловияПоиска);
		
		Если СтрокиТаблицыОтчетов.Количество() = 0 Тогда
			// Отчет еще не учитывался.
			НоваяСтрокаТаблицы = ТаблицаОтчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, Выборка);
			
		Иначе
			СтрокаТаблицы = СтрокиТаблицыОтчетов[0];
			
			Если СтрСравнить(Выборка.ВыбраннаяФорма, СтрокаТаблицы.ВыбраннаяФорма) > 0 Тогда
				// Поздняя форма отчета вытесняет предшествующие.
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
				
			ИначеЕсли СтрСравнить(Выборка.ВыбраннаяФорма, СтрокаТаблицы.ВыбраннаяФорма) = 0 Тогда
				Если Выборка.Вид > СтрокаТаблицы.Вид Тогда
					// Поздние корректировки вытесняют предшествующие.
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
					
				ИначеЕсли Выборка.Вид = СтрокаТаблицы.Вид Тогда
					Если Выборка.МоментВремени.Сравнить(СтрокаТаблицы.МоментВремени) > 0 Тогда
						// Отчеты созданные позже вытесняют предшествующие.
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОтчетов;
	
КонецФункции

Функция ВидыОтчетовОценкиРисков()
	
	ВидыОтчетов = Новый Массив;
	
	ВидыОтчетов.Добавить("РегламентированныйОтчетИмущество");
	ВидыОтчетов.Добавить("РегламентированныйОтчетЗемельныйНалог");
	ВидыОтчетов.Добавить("РегламентированныйОтчетНДПИ");
	ВидыОтчетов.Добавить("РегламентированныйОтчетНедра");
	ВидыОтчетов.Добавить("РегламентированныйОтчетНалогНаИгорныйБизнес");
	ВидыОтчетов.Добавить("РегламентированныйОтчетЖивотныйМир");
	ВидыОтчетов.Добавить("РегламентированныйОтчетВодныеБиоресурсы");
	ВидыОтчетов.Добавить("РегламентированныйОтчетКосвенныеНалогиТамСоюз");
	ВидыОтчетов.Добавить("РегламентированныйОтчетТранспортныйНалог");
	ВидыОтчетов.Добавить("РегламентированныйОтчетРасчетПоОплатеЗаВоду");
	ВидыОтчетов.Добавить("РегламентированныйОтчетПрибыль");
	ВидыОтчетов.Добавить("РегламентированныйОтчетУСН");
	ВидыОтчетов.Добавить("РегламентированныйОтчетБухОтчетность");
	ВидыОтчетов.Добавить("РегламентированныйОтчетНДС");
	ВидыОтчетов.Добавить("РегламентированныйОтчет3НДФЛ");
	ВидыОтчетов.Добавить("РегламентированныйОтчет4ФСС");
	ВидыОтчетов.Добавить("РегламентированныйОтчетАкцизыПриложение1");
	ВидыОтчетов.Добавить("РегламентированныйОтчетАкцизыПриложение5");
	ВидыОтчетов.Добавить("РегламентированныйОтчетАкцизыПриложение7");
	ВидыОтчетов.Добавить("РегламентированныйОтчетАкцизыГСМ");
	ВидыОтчетов.Добавить("РегламентированныйОтчетАкцизыАлкоголь");
	ВидыОтчетов.Добавить("РегламентированныйОтчетАкцизыТабак");
	ВидыОтчетов.Добавить("РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход");
	
	Возврат ВидыОтчетов;
	
КонецФункции

Функция НоваяТаблицаПоказателейОценкиРисков();
	
	ТипСтрока  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	ТипСтрока4 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
	ТипДата    = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты);
	ТипЧисло   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Показатель", ТипСтрока);
	ТаблицаПоказателей.Колонки.Добавить("ИсточникОтчета", ТипСтрока);
	ТаблицаПоказателей.Колонки.Добавить("ДатаОтчета", ТипДата);
	ТаблицаПоказателей.Колонки.Добавить("РегламентированныйОтчет", ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	ТаблицаПоказателей.Колонки.Добавить("ОтчетныйПериод", ТипДата);
	ТаблицаПоказателей.Колонки.Добавить("КодНалоговогоОргана", ТипСтрока4);
	ТаблицаПоказателей.Колонки.Добавить("Периодичность");
	ТаблицаПоказателей.Колонки.Добавить("ДатаНачала", ТипДата);
	ТаблицаПоказателей.Колонки.Добавить("ДатаОкончания", ТипДата);
	ТаблицаПоказателей.Колонки.Добавить("ПериодДокумента", ТипСтрока);
	ТаблицаПоказателей.Колонки.Добавить("ЗначениеПоказателя", ТипЧисло);
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Процедура ВставитьПоказательВТаблицуОценкиРисков(ТаблицаПоказателей, ОписаниеОтчета)
	
	Если ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетИмущество" Тогда
		ВставитьПоказатели_Имущество(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетЗемельныйНалог" Тогда
		ВставитьПоказатели_ЗемельныйНалог(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетНДПИ" Тогда
		ВставитьПоказатели_НДПИ(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетНедра" Тогда
		ВставитьПоказатели_Недра(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетНалогНаИгорныйБизнес" Тогда
		ВставитьПоказатели_НалогНаИгорныйБизнес(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетЖивотныйМир" Тогда
		ВставитьПоказатели_ЖивотныйМир(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетВодныеБиоресурсы" Тогда
		ВставитьПоказатели_ВодныеБиоресурсы(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетКосвенныеНалогиТамСоюз" Тогда
		ВставитьПоказатели_КосвенныеНалогиТамСоюз(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетТранспортныйНалог" Тогда
		ВставитьПоказатели_ТранспортныйНалог(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетРасчетПоОплатеЗаВоду" Тогда
		ВставитьПоказатели_РасчетПоОплатеЗаВоду(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетПрибыль" Тогда
		ВставитьПоказатели_Прибыль(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетУСН" Тогда
		ВставитьПоказатели_УСН(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
		ВставитьПоказатели_БухОтчетность(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетНДС" Тогда
		ВставитьПоказатели_НДС(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчет3НДФЛ" Тогда
		ВставитьПоказатели_3НДФЛ(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчет4ФСС" Тогда
		ВставитьПоказатели_4ФСС(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетАкцизыПриложение1" Тогда
		ВставитьПоказатели_АкцизыПриложение1(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетАкцизыПриложение5" Тогда
		ВставитьПоказатели_АкцизыПриложение5(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетАкцизыПриложение7" Тогда
		ВставитьПоказатели_АкцизыПриложение7(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетАкцизыГСМ" Тогда
		ВставитьПоказатели_АкцизыГСМ(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетАкцизыАлкоголь" Тогда
		ВставитьПоказатели_АкцизыАлкоголь(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетАкцизыТабак" Тогда
		ВставитьПоказатели_АкцизыТабак(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход" Тогда
		ВставитьПоказатели_ЕдиныйНалогНаВмененныйДоход(ТаблицаПоказателей, ОписаниеОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьПоказатели_Имущество(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел2 Цикл
		ДанныеЛиста = Лист.Данные;
		ЗначениеПоказателя = ЗначениеПоказателя
		                   + ПоказательОтчета(ДанныеЛиста, "П000020022003")
		                   - ПоказательОтчета(ДанныеЛиста, "П000020025003");
	КонецЦикла;
	
	Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел3 Цикл
		ДанныеЛиста = Лист.Данные;
		ЗначениеПоказателя = ЗначениеПоказателя
		                   + ПоказательОтчета(ДанныеЛиста, "П000030010003")
		                   - ПоказательОтчета(ДанныеЛиста, "П000030013003");
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаНалогаНаИмущество";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_ЗемельныйНалог(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Если ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2009Кв1" Тогда
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1 Цикл
			ДанныеЛиста = Лист.Данные;
			Для Инд = 1 По 5 Цикл
				Постфикс = "_" + ЧислоВСтрокуЧГ0(Инд);
				ЗначениеПоказателя = ЗначениеПоказателя
				                   + ПоказательОтчета(ДанныеЛиста, "П000010003003" + Постфикс)
				                   - ПоказательОтчета(ДанныеЛиста, "П000010004003" + Постфикс);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1 Цикл
			ДанныеЛиста = Лист.Данные;
			Для Инд = 1 По 2 Цикл
				Постфикс = "_" + ЧислоВСтрокуЧГ0(Инд);
				ЗначениеПоказателя = ЗначениеПоказателя
				                   + ПоказательОтчета(ДанныеЛиста, "П000010002103" + Постфикс);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаНалогаНаЗемлю";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_НДПИ(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	Если ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2015Кв2" Тогда
		Если СведенияОтчета.Свойство("ОкружениеСохранения") Тогда
			Префикс = "П0000100030";
		Иначе
			Префикс = "П0001000001";
		КонецЕсли;
	Иначе
		Префикс = "П0001000010";
	КонецЕсли;
	
	ЗначениеПоказателя = 0;
	
	Раздел1 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
	НомерСтроки = 1;
	Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
	Пока Раздел1.Свойство(Префикс + "03" + Постфикс) Цикл
		ЗначениеПоказателя = ЗначениеПоказателя + Раздел1[Префикс + "03" + Постфикс];
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаНДПИ";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_Недра(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1 Цикл
		ДанныеЛиста = Лист.Данные;
		Для Инд = 1 По 5 Цикл
			Постфикс = "_" + ЧислоВСтрокуЧГ0(Инд);
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П000010003000" + Постфикс);
		КонецЦикла;
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаНедра";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_НалогНаИгорныйБизнес(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	Если ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2007Кв1" Тогда
		ИмяПоказателя = "СумНалогДопл";
	Иначе
		ИмяПоказателя = "П000100003003";
	КонецЕсли;
	
	Раздел1 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
	
	ЗначениеПоказателя = ПоказательОтчета(Раздел1, ИмяПоказателя);
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаНалогаНаИгорныйБизнес";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_ЖивотныйМир(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1 Цикл
		ДанныеЛиста = Лист.Данные;
		Для Инд = 1 По 10 Цикл
			Постфикс = ЧислоВСтрокуЧГ0(Инд);
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "Сумма" + Постфикс);
		КонецЦикла;
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаСбораЖивотныйМир";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_ВодныеБиоресурсы(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1 Цикл
		ДанныеЛиста = Лист.Данные;
		НомерСтроки = 1;
		Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
		ЗначениеПоказателя = ЗначениеПоказателя + ПоказательОтчета(ДанныеЛиста, "П000010003003");
		
		Пока ДанныеЛиста.Свойство("П000010005001" + Постфикс) Цикл
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ДанныеЛиста["П000010005001" + Постфикс];
			НомерСтроки = НомерСтроки + 1;
			Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
		КонецЦикла;
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаСбораВодныеБиоресурсы";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_КосвенныеНалогиТамСоюз(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	Раздел1 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
	
	ЗначениеПоказателя = 0;
	
	Если Раздел1.Свойство("П000100003001") Тогда
		ЗначениеПоказателя = ПоказательОтчета(Раздел1, "П000100003001");
	КонецЕсли;
	
	Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел2 Цикл
		ДанныеЛиста = Лист.Данные;
		ЗначениеПоказателя = ЗначениеПоказателя
		                   + ПоказательОтчета(ДанныеЛиста, "П000200003001");
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаКосвенныхНалоговТаможенныйСоюз";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_ТранспортныйНалог(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Если ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2007Кв1" Тогда
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "Сумма1_1");
		КонецЦикла;
	Иначе
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1 Цикл
			ДанныеЛиста = Лист.Данные;
			Для Инд = 1 По 3 Цикл
				Постфикс = "_" + ЧислоВСтрокуЧГ0(Инд);
				ЗначениеПоказателя = ЗначениеПоказателя
				                   + ПоказательОтчета(ДанныеЛиста, "П000010002103" + Постфикс);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаТранспортногоНалога";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_РасчетПоОплатеЗаВоду(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ФормаОтчета = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	ЗначениеПоказателя = ПоказательОтчета(ФормаОтчета, "П010010009");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаОплатыЗаВоду";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_Прибыль(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Если ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2016Кв4"
		ИЛИ ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2015Кв1" Тогда
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П000200006003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаПрибылиОСНО";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П000200019003")
			                   + ПоказательОтчета(ДанныеЛиста, "П000200020003");
		КонецЦикла;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1_3 Цикл
			ДанныеЛиста = Лист.Данные;
			НомерСтроки = 1;
			Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
			Пока ДанныеЛиста.Свойство("П000130004003" + Постфикс) Цикл
				ЗначениеПоказателя = ЗначениеПоказателя
				                   + ДанныеЛиста["П000130004003" + Постфикс];
				НомерСтроки = НомерСтроки + 1;
				Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
			КонецЦикла;
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаНалогаНаПрибыль";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П000200003003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаРасходовПоРеализации";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П000200001003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаДоходовОтРеализации";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
	Иначе
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П002000006003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаПрибылиОСНО";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П002000019003")
			                   + ПоказательОтчета(ДанныеЛиста, "П002000020003");
		КонецЦикла;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1_3 Цикл
			ДанныеЛиста = Лист.Данные;
			НомерСтроки = 1;
			Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
			Пока ДанныеЛиста.Свойство("П000130004003" + Постфикс) Цикл
				ЗначениеПоказателя = ЗначениеПоказателя
				                   + ДанныеЛиста["П000130004003" + Постфикс];
				НомерСтроки = НомерСтроки + 1;
				Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
			КонецЦикла;
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаНалогаНаПрибыль";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П002000003003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаРасходовПоРеализации";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П002000001003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаДоходовОтРеализации";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьПоказатели_УСН(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Если ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2015Кв1" Тогда
		
		Раздел11 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел11;
		Раздел21 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел21;
		
		Раздел12 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел12;
		Раздел22 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел22;
		
		ЗаполненРаздел11 = Ложь;
		Если ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110002003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110004003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110005003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110007003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110008003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110010003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110011003")) Тогда
			ЗаполненРаздел11 = Истина;
		КонецЕсли;
		
		ЗаполненРаздел12 = Ложь;
		Если ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120002003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120004003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120005003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120007003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120008003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120010003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120011003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120012003")) Тогда
			ЗаполненРаздел12 = Истина;
		КонецЕсли;
		
		Если ЗаполненРаздел11 И НЕ ЗаполненРаздел12 Тогда
			
			ЗначениеПоказателя = ПоказательОтчета(Раздел21, "П002110011303");
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаДоходовУСН";
			НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
			
			ЗначениеПоказателя = ПоказательОтчета(Раздел21, "П002110011303");
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаПрибылиУСН";
			НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
			
			ЗначениеПоказателя = ПоказательОтчета(Раздел21, "П002110013303")
							   - ПоказательОтчета(Раздел21, "П002110014303");
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаНалогаУСН";
			НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
			
		ИначеЕсли ЗаполненРаздел12 И НЕ ЗаполненРаздел11 Тогда
			
			ЗначениеПоказателя = ПоказательОтчета(Раздел22, "П000220021303");
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаДоходовУСН";
			НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
			
			ЗначениеПоказателя = ПоказательОтчета(Раздел22, "П000220021303")
							   - ПоказательОтчета(Раздел22, "П000220022303");
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаПрибылиУСН";
			НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
			
			ЗначениеПоказателя = Макс(ПоказательОтчета(Раздел22, "П000220028003"),
									  ПоказательОтчета(Раздел22, "П000220027303"));
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаНалогаУСН";
			НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
			
		Иначе
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаДоходовУСН";
			НоваяСтрока.ЗначениеПоказателя = 0;
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаПрибылиУСН";
			НоваяСтрока.ЗначениеПоказателя = 0;
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаНалогаУСН";
			НоваяСтрока.ЗначениеПоказателя = 0;
			
		КонецЕсли;
		
	ИначеЕсли ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2014Кв1" Тогда
		
		Раздел11 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел11;
		Раздел21 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел21;
		
		Раздел12 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел12;
		Раздел22 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел22;
		
		ЗаполненРаздел11 = Ложь;
		Если ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110002003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110004003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110005003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110007003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110008003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110010003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел11, "П000110011003")) Тогда
			ЗаполненРаздел11 = Истина;
		КонецЕсли;
		
		ЗаполненРаздел12 = Ложь;
		Если ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120002003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120004003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120005003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120007003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120008003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120010003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120011003"))
		 ИЛИ ЗначениеЗаполнено(ПоказательОтчета(Раздел12, "П000120012003")) Тогда
			ЗаполненРаздел12 = Истина;
		КонецЕсли;
		
		Если ЗаполненРаздел11 И НЕ ЗаполненРаздел12 Тогда
			
			ЗначениеПоказателя = ПоказательОтчета(Раздел21, "П000210011303");
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаДоходовУСН";
			НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
			
			ЗначениеПоказателя = ПоказательОтчета(Раздел21, "П000210011303");
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаПрибылиУСН";
			НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
			
			ЗначениеПоказателя = ПоказательОтчета(Раздел21, "П000210013303")
							   - ПоказательОтчета(Раздел21, "П000210014303");
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаНалогаУСН";
			НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
			
		ИначеЕсли ЗаполненРаздел12 И НЕ ЗаполненРаздел11 Тогда
			
			ЗначениеПоказателя = ПоказательОтчета(Раздел22, "П000220021303");
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаДоходовУСН";
			НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
			
			ЗначениеПоказателя = ПоказательОтчета(Раздел22, "П000220021303")
							   - ПоказательОтчета(Раздел22, "П000220022303");
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаПрибылиУСН";
			НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
			
			ЗначениеПоказателя = Макс(ПоказательОтчета(Раздел22, "П000220028003"),
									  ПоказательОтчета(Раздел22, "П000220027303"));
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаНалогаУСН";
			НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
			
		Иначе
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаДоходовУСН";
			НоваяСтрока.ЗначениеПоказателя = 0;
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаПрибылиУСН";
			НоваяСтрока.ЗначениеПоказателя = 0;
			
			НоваяСтрока = ТаблицаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
			НоваяСтрока.Показатель = "СуммаНалогаУСН";
			НоваяСтрока.ЗначениеПоказателя = 0;
			
		КонецЕсли;
		
	Иначе
		
		Раздел1 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
		Раздел2 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел2;
		
		Если ПоказательОтчета(Раздел1, "П000010000103") = "1" Тогда
			ЗначениеПоказателя = ПоказательОтчета(Раздел2, "П000020021003");
			
		ИначеЕсли ПоказательОтчета(Раздел1, "П000010000103") = "2" Тогда
			ЗначениеПоказателя = ПоказательОтчета(Раздел2, "П000020021003")
			                   - ПоказательОтчета(Раздел2, "П000020022003");
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаПрибылиУСН";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = 0;
		
		Если ПоказательОтчета(Раздел1, "П000010000103") = "1" Тогда
			ЗначениеПоказателя = ПоказательОтчета(Раздел2, "П000020026003") - ПоказательОтчета(Раздел2, "П000020028003");
			
		ИначеЕсли ПоказательОтчета(Раздел1, "П000010000103") = "2" Тогда
			ЗначениеПоказателя = Макс(ПоказательОтчета(Раздел2, "П000020026003"), ПоказательОтчета(Раздел2, "П000020027003"));
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаНалогаУСН";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = ПоказательОтчета(Раздел2, "П000020021003");
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаДоходовУСН";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьПоказатели_БухОтчетность(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ОФР = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	ЗначениеПоказателя = ПоказательОтчета(ОФР, "П000100230004");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаПрибылиБУ";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_НДС(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	Если ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2015Кв1" Тогда
		
		Раздел1 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
		Раздел3 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел3;
		
		ЗначениеПоказателя = ПоказательОтчета(Раздел1, "П000100004003")
		                   - ПоказательОтчета(Раздел1, "П000100005003");
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаНалогаНДС";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = ПоказательОтчета(Раздел3, "П000300019003");
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаВычетовПоНДС";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = ПоказательОтчета(Раздел3, "П000300011005");
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаНачисленногоНДС";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
	Иначе
		
		Раздел1 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
		Раздел3 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел3;
		
		ЗначениеПоказателя = ПоказательОтчета(Раздел1, "П000100004003")
		                   - ПоказательОтчета(Раздел1, "П000100005003");
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаНалогаНДС";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = ПоказательОтчета(Раздел3, "П000300022003");
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаВычетовПоНДС";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = ПоказательОтчета(Раздел3, "П000300012005");
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "СуммаНачисленногоНДС";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьПоказатели_3НДФЛ(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Если ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2015кв1" Тогда
		ОбщаяСуммаДоходаКлюч = "П000500001110";
		СуммаФактическиПроизведенныхРасходовКлюч = "П000500001040";
	Иначе
		ОбщаяСуммаДоходаКлюч = "П000090001101";
		СуммаФактическиПроизведенныхРасходовКлюч = "П000090001004";
	КонецЕсли;

	Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.ЛистВ Цикл
		ДанныеЛиста = Лист.Данные;
		ЗначениеПоказателя = ЗначениеПоказателя
		                   + ПоказательОтчета(ДанныеЛиста, ОбщаяСуммаДоходаКлюч);
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаДоходовИП";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
	ЗначениеПоказателя = 0;
	
	Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.ЛистВ Цикл
		ДанныеЛиста = Лист.Данные;
		ЗначениеПоказателя = ЗначениеПоказателя
		                   + ПоказательОтчета(ДанныеЛиста, СуммаФактическиПроизведенныхРасходовКлюч);
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаПрофессиональныхВычетовПоНДФЛ";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_4ФСС(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ТитульныйЛист = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1_3 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_3;
	
	ЗначениеПоказателя = 0;
	
	Если ОписаниеОтчета.ВыбраннаяФорма <> "ФормаОтчета2010Кв4" Тогда
		Если ТитульныйЛист.Свойство("ЧислРаботников") Тогда
			ЗначениеПоказателя = ТитульныйЛист["ЧислРаботников"];
		ИначеЕсли ТитульныйЛист.Свойство("ЧислРаботников_1") Тогда
			Для Ном = 1 По 6 Цикл
				ЗначениеПоказателя = "";
				ЗначениеПоказателя = ЗначениеПоказателя + СокрЛП(ТитульныйЛист["ЧислРаботников_" + Ном]);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СреднесписочнаяЧисленность";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
	ЗначениеПоказателя = 0;
	
	Если ОписаниеОтчета.ВыбраннаяФорма <> "ФормаОтчета2010Кв4" Тогда
		ЗначениеПоказателя = ПоказательОтчета(Раздел1_3, "П000030001003");
	КонецЕсли;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаВыплатФизическимЛицам";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_АкцизыПриложение1(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1 Цикл
		ДанныеЛиста = Лист.Данные;
		НомерСтроки = 1;
		Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
		Пока ДанныеЛиста.Свойство("П000110002030" + Постфикс) Цикл
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П000110002030" + Постфикс)
			                   - ПоказательОтчета(ДанныеЛиста, "П000110002040" + Постфикс);
			НомерСтроки = НомерСтроки + 1;
			Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел12 Цикл
		ДанныеЛиста = Лист.Данные;
		НомерСтроки = 1;
		Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
		Пока ДанныеЛиста.Свойство("П000120002030" + Постфикс) Цикл
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П000120002030" + Постфикс)
			                   - ПоказательОтчета(ДанныеЛиста, "П000120002040" + Постфикс);
			НомерСтроки = НомерСтроки + 1;
			Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
		КонецЦикла;
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаАкцизовЗаИсключениемТабачныхИзделий";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_АкцизыПриложение5(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1 Цикл
		ДанныеЛиста = Лист.Данные;
		Для Инд = 1 По 3 Цикл
			Постфикс = "_" + ЧислоВСтрокуЧГ0(Инд);
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "СуммаРаздел1" + Постфикс)
			                   - ПоказательОтчета(ДанныеЛиста, "СуммаВозмещенияРаздел1" + Постфикс);
		КонецЦикла;
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаАкцизовНаНефтепродукты";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_АкцизыПриложение7(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1 Цикл
		ДанныеЛиста = Лист.Данные;
		ЗначениеПоказателя = ЗначениеПоказателя
		                   + ПоказательОтчета(ДанныеЛиста, "СуммаНалога1");
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаАкцизовНаМинеральноеСырье";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_АкцизыГСМ(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1 Цикл
		ДанныеЛиста = Лист.Данные;
		НомерСтроки = 1;
		Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
		Пока ДанныеЛиста.Свойство("П000010000102" + Постфикс) Цикл
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П000010000102" + Постфикс)
			                   - ПоказательОтчета(ДанныеЛиста, "П000010000103" + Постфикс);
			НомерСтроки = НомерСтроки + 1;
			Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
		КонецЦикла;
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаАкцизовГСМ";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_АкцизыАлкоголь(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	ИмяРаздела = "Раздел11";
	Если СведенияОтчета.Свойство("ОкружениеСохранения") Тогда // отчет сохранен в 2.0
		ИмяРаздела = "Раздел1";
	КонецЕсли;
	
	Раздел11 = СведенияОтчета.ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела];
	
	НомерСтроки = 1;
	Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
	Пока Раздел11.Свойство("П000110000102" + Постфикс) Цикл
		ЗначениеПоказателя = ЗначениеПоказателя
		                   + ПоказательОтчета(Раздел11, "П000110000102" + Постфикс)
		                   - ПоказательОтчета(Раздел11, "П000110000103" + Постфикс);
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаАкцизовАлкоголь";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_АкцизыТабак(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	Раздел1 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
	
	// Конвертация данных при переходе с 2.0 на 3.0.
	ОтчетСформированВ20 = Ложь;
	Для Каждого Показатель Из Раздел1 Цикл
		ИмяПоказателя = Показатель.Ключ;
		Если ИмяПоказателя = "СуммаНалога25Число1_1" Тогда
			ОтчетСформированВ20 = Истина;
			СуммаНалога25 = "";
			Для Ном = 1 По 15 Цикл
				СуммаНалога25 = СуммаНалога25 + СокрЛП(Раздел1["СуммаНалога25Число1_" + Ном]);
			КонецЦикла;
			Если ЗначениеЗаполнено(СуммаНалога25) Тогда
				СуммаНалога25 = Число(СуммаНалога25);
			Иначе
				СуммаНалога25 = 0;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "СуммаНалога15Число1_1" Тогда
			ОтчетСформированВ20 = Истина;
			СуммаНалога15 = "";
			Для Ном = 1 По 15 Цикл
				СуммаНалога15 = СуммаНалога15 + СокрЛП(Раздел1["СуммаНалога15Число1_" + Ном]);
			КонецЦикла;
			Если ЗначениеЗаполнено(СуммаНалога15) Тогда
				СуммаНалога15 = Число(СуммаНалога15);
			Иначе
				СуммаНалога15 = 0;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "СуммаНалогаКУменьшению1_1" Тогда
			ОтчетСформированВ20 = Истина;
			СуммаНалогаКУменьшению = "";
			Для Ном = 1 По 15 Цикл
				СуммаНалогаКУменьшению = СуммаНалогаКУменьшению + СокрЛП(Раздел1["СуммаНалогаКУменьшению1_" + Ном]);
			КонецЦикла;
			Если ЗначениеЗаполнено(СуммаНалогаКУменьшению) Тогда
				СуммаНалогаКУменьшению = Число(СуммаНалогаКУменьшению);
			Иначе
				СуммаНалогаКУменьшению = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтчетСформированВ20 Тогда
		ЗначениеПоказателя = СуммаНалога25 + СуммаНалога15 - СуммаНалогаКУменьшению;
	Иначе
		ЗначениеПоказателя = ПоказательОтчета(Раздел1, "СуммаНалога25Число1")
		                   + ПоказательОтчета(Раздел1, "СуммаНалога15Число1")
		                   - ПоказательОтчета(Раздел1, "СуммаНалогаКУменьшению1");
	КонецЕсли;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаАкцизовНаТабачныеИзделия";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ВставитьПоказатели_ЕдиныйНалогНаВмененныйДоход(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Если ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2016Кв1"
	 ИЛИ ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2015Кв1" Тогда
		
		Если СведенияОтчета.ДанныеМногострочныхРазделов.Свойство("П00001000") Тогда
			Для Каждого СтрТаблицы Из СведенияОтчета.ДанныеМногострочныхРазделов.П00001000 Цикл
				ЗначениеПоказателя = ЗначениеПоказателя + СтрТаблицы.П000010002003;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Раздел1 Цикл
			ДанныеЛиста = Лист.Данные;
			Для Инд = 1 По 8 Цикл
				Постфикс = "_" + ЧислоВСтрокуЧГ0(Инд);
				ЗначениеПоказателя = ЗначениеПоказателя
				                   + ПоказательОтчета(ДанныеЛиста, "П000010003003" + Постфикс);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаНалогаЕНВД";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
КонецПроцедуры

Функция ЧислоВСтрокуЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

Процедура ЗапомнитьИменаСправочниковОбособленныхПодразделений(Форма) Экспорт 
	Форма.ИмяСправочникаОбособленныхПодразделений        = РегламентированнаяОтчетностьПереопределяемый.ИмяСправочникаОбособленныхПодразделений();
	Форма.ИмяРеквизитаПризнакаОбособленногоПодразделения = РегламентированнаяОтчетностьПереопределяемый.ИмяРеквизитаПризнакаОбособленногоПодразделения();
КонецПроцедуры

Процедура ЗаполнитьДанныеВШапкеОбособленныхПодразделений(Форма) Экспорт 
	ТабДок = Форма.ПолеТабличногоДокументаФормаОтчета;
	ИсключитьДанныеОбособленныхПодразделений = Форма.ИсключитьДанныеОбособленныхПодразделений;
	ТабДок.Области.ИсключитьДанныеОбособленныхПодразделений.Значение = ИсключитьДанныеОбособленныхПодразделений;
	ОблОбособленноеПодразделение = ТабДок.Области.ОбособленноеПодразделение;
	Если ИсключитьДанныеОбособленныхПодразделений Тогда 
		ОблОбособленноеПодразделение.Значение = "";
		ОблОбособленноеПодразделение.Защита = Истина;
		ОблОбособленноеПодразделение.ЦветФона = Новый Цвет(255,255,255);
	Иначе
		ОблОбособленноеПодразделение.Значение = Форма.ОбособленноеПодразделение;
		ОблОбособленноеПодразделение.Защита = Ложь;
		ОблОбособленноеПодразделение.ЦветФона = Новый Цвет(255,255,192);
	КонецЕсли;
КонецПроцедуры

// Процедура возвращает список организаций - юридических лиц и индивидуальных предпринимателей.
//
// Параметры:
//  СписокЮрФизЛиц - СписокЗначений - список юридических лиц и индивидуальных предпринимателей
//  Текст          - Строка - подстрока поиска в наименовании организации.
//
Процедура ПолучитьСписокДоступныхОрганизаций(СписокЮрФизЛиц = Неопределено, Знач Текст = Неопределено) Экспорт
	
	Если СписокЮрФизЛиц = Неопределено ИЛИ ТипЗнч(СписокЮрФизЛиц) <> Тип("СписокЗначений") Тогда
		
		СписокЮрФизЛиц = Новый СписокЗначений;
		
	КонецЕсли;
	
	ДополнитьСтрокуСпециальнымиСимволами(Текст);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	Организации.Ссылка,
				   |	Организации.Наименование
				   |ИЗ
				   |	Справочник.Организации КАК Организации
				   |ГДЕ
				   |	НЕ Организации.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Запрос.Текст = Запрос.Текст + " И Организации.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""";
		Запрос.УстановитьПараметр("Текст", Текст);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Наименование";
	
	РегламентированнаяОтчетностьПереопределяемый.СформироватьТекстЗапросаДляПолученияДоступныхОрганизаций(
		Запрос.Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СписокЮрФизЛиц.Добавить(Выборка.Ссылка, Выборка.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПоказательОтчета(ИсточникСведений, ИмяПоказателя)
	
	ЗначениеПоказателя = 0;
	
	Если ТипЗнч(ИсточникСведений) = Тип("Структура") Тогда
		Если ИсточникСведений.Свойство(ИмяПоказателя) Тогда
			ЗначениеПоказателя = ИсточникСведений[ИмяПоказателя];
		КонецЕсли;
		
	Иначе
		ВызватьИсключение "Попытка получить значение показателя, сохраненного в неподдерживаемом типе данных";
		
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

#КонецОбласти

#Область ЗаписьСведенийВЖурналРегистрации

Функция КомментарийКПроверкеВыгрузки(СсылкаНаСтрокуСообщения)
	
	СсылкаНаОбъект 		   = СсылкаНаСтрокуСообщения.ОтчетДок;
	Наименование  		   = СсылкаНаОбъект.НаименованиеОтчета;
	Период 		  		   = СсылкаНаОбъект.ПредставлениеПериода;
	Вид			  		   = СсылкаНаОбъект.Вид;
	ТекстСообщенияОбОшибке = СсылкаНаСтрокуСообщения.Описание;
		
	ПозицияОКТМО = СтрНайти(ТекстСообщенияОбОшибке, "ОКТМО ");
	
	Если ПозицияОКТМО > 0 Тогда
		
		ЛеваяЧастьТекстаСообщенияОбОшибке  = Лев(ТекстСообщенияОбОшибке, ПозицияОКТМО - 1);
		ПраваяЧастьТекстаСообщенияОбОшибке = Сред(ТекстСообщенияОбОшибке, ПозицияОКТМО + 6);
		
		Если СтрЧислоВхождений("0123456789""", Лев(ПраваяЧастьТекстаСообщенияОбОшибке, 1)) > 0 Тогда
			
			ПозицияПробела = СтрНайти(ПраваяЧастьТекстаСообщенияОбОшибке, " ");
			
			Если ПозицияПробела > 0 Тогда
				
				ПраваяЧастьТекстаСообщенияОбОшибке = Сред(ПраваяЧастьТекстаСообщенияОбОшибке, ПозицияПробела);
				
			Иначе
				
				ПраваяЧастьТекстаСообщенияОбОшибке = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстСообщенияОбОшибке = ЛеваяЧастьТекстаСообщенияОбОшибке + "ОКТМО" + ПраваяЧастьТекстаСообщенияОбОшибке;
		
	КонецЕсли;
	
	ПозицияНекорректныйКонтрагент = СтрНайти(ТекстСообщенияОбОшибке, "некорректные ИНН/КПП покупателя в строке");
	
	Если ПозицияНекорректныйКонтрагент > 0 Тогда
		
		ЛеваяЧастьТекстаСообщенияОбОшибке = Лев(ТекстСообщенияОбОшибке, ПозицияНекорректныйКонтрагент - 1);
		
		ТекстСообщенияОбОшибке = ЛеваяЧастьТекстаСообщенияОбОшибке + "некорректные ИНН/КПП покупателя в строке";
		
	КонецЕсли;
	
	ПозицияПродавцаВСтроке = СтрНайти(ТекстСообщенияОбОшибке, "продавца в строке");
	
	Если ПозицияПродавцаВСтроке > 0 Тогда
		
		ЛеваяЧастьТекстаСообщенияОбОшибке = Лев(ТекстСообщенияОбОшибке, ПозицияПродавцаВСтроке - 1);
		
		ТекстСообщенияОбОшибке = ЛеваяЧастьТекстаСообщенияОбОшибке + "продавца в строке";
		
	КонецЕсли;
	
	ПозицияОплатуВСтроке = СтрНайти(ТекстСообщенияОбОшибке, "оплату в строке");
	
	Если ПозицияОплатуВСтроке > 0 Тогда
		
		ЛеваяЧастьТекстаСообщенияОбОшибке = Лев(ТекстСообщенияОбОшибке, ПозицияОплатуВСтроке - 1);
		
		ТекстСообщенияОбОшибке = ЛеваяЧастьТекстаСообщенияОбОшибке + "оплату в строке";
		
	КонецЕсли;
	
	ПозицияВСтроке = СтрНайти(ТекстСообщенияОбОшибке, "В строке ");
	
	Если ПозицияВСтроке > 0 Тогда
		
		ЛеваяЧастьТекстаСообщенияОбОшибке  = Лев(ТекстСообщенияОбОшибке, ПозицияВСтроке - 1);
		ПраваяЧастьТекстаСообщенияОбОшибке = Сред(ТекстСообщенияОбОшибке, ПозицияВСтроке + 9);
		
		Если СтрЧислоВхождений("0123456789""", Лев(ПраваяЧастьТекстаСообщенияОбОшибке, 1)) > 0 Тогда
			
			ПозицияПробела = СтрНайти(ПраваяЧастьТекстаСообщенияОбОшибке, " ");
			
			Если ПозицияПробела > 0 Тогда
				
				ПраваяЧастьТекстаСообщенияОбОшибке = Сред(ПраваяЧастьТекстаСообщенияОбОшибке, ПозицияПробела);
				
			Иначе
				
				ПраваяЧастьТекстаСообщенияОбОшибке = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстСообщенияОбОшибке = ЛеваяЧастьТекстаСообщенияОбОшибке + "В строке" + ПраваяЧастьТекстаСообщенияОбОшибке;
		
	КонецЕсли;
	
	Возврат Наименование + ". " + Вид + ". " + Период + ". " + ТекстСообщенияОбОшибке;
	
КонецФункции

Функция КомментарийКВыгрузкеРеглОтчета(СсылкаНаОбъект)
			
	Наименование = СсылкаНаОбъект.НаименованиеОтчета;
	Период 		 = СсылкаНаОбъект.ПредставлениеПериода;
	Вид			 = СсылкаНаОбъект.Вид;
	
	Возврат Наименование + ". " + Вид + ". " + Период;
	
КонецФункции

Функция КомментарийКСозданиюРеглОтчета(СсылкаНаОбъект)
	
	Наименование = СсылкаНаОбъект.НаименованиеОтчета;
	Период 		 = СсылкаНаОбъект.ПредставлениеПериода;
	Вид			 = СсылкаНаОбъект.Вид;
	
	Возврат Наименование + ". " + Вид + ". " + Период;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсРаботыСДаннымиДекларацииНДС

// Удаляет все записи регистра дополнительных файлов, ссылающиеся
// на указанный документ регламентированного отчета.
// Параметры:
//   ДекларацияНДС - ДокументСсылка.РегламентированныйОтчет - ссылка на документ, в котором сохраняются данные декларации.
//
Процедура УдалитьДополнительныеФайлыДекларацииНДС(ДекларацияНДС) Экспорт
	
	ЗаписиРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьНаборЗаписей();
	ЗаписиРегистраСведений.Отбор.РегламентированныйОтчет.Установить(ДекларацияНДС);
	
	ЗаписиРегистраСведений.Записать();
	
КонецПроцедуры

// Сохраняет сформированный сегмент пользовательского представления раздела декларации по НДС.
// Параметры:
//   ДекларацияНДС - ДокументСсылка.РегламентированныйОтчет - ссылка на документ, в котором сохраняются данные декларации;
//   ИмяРаздела - Строка - имя раздела;
//   НомерПервойСтроки - Число - номер первой строки, отраженной в сегменте;
//   ПредставлениеСегмента - Табличный документ - сегмент пользовательского представления раздела декларации по НДС.
//
Процедура ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(ДекларацияНДС, ИмяРаздела, НомерПервойСтроки, ПредставлениеСегмента) Экспорт
	
	ВидДополнительногоФайла = "ТабличныйДокумент" + ИмяРаздела + "." + Формат(НомерПервойСтроки, "ЧН=; ЧГ=0");
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", ДекларацияНДС);
	ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ВидДополнительногоФайла);
	
	ПараметрыЗаписи.Вставить("Данные", ПредставлениеСегмента);
	
	ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	
КонецПроцедуры

// Считывает из регистра сформированный сегмент пользовательского представления раздела декларации по НДС.
// Параметры:
//   ДекларацияНДС - ДокументСсылка.РегламентированныйОтчет - ссылка на документ, в котором сохраняются данные декларации;
//   ИмяРаздела - Строка - имя раздела;
//   НомерПервойСтроки - Число - номер первой строки, отраженной в сегменте;
// Возвращаемое значение:
//   Табличный документ - сегмент пользовательского представления раздела декларации по НДС.
//
Функция СегментТабличногоДокументаРазделаДекларацииНДС(ДекларацияНДС, ИмяРаздела, НомерПервойСтроки) Экспорт
	
	ВидДополнительногоФайла = "ТабличныйДокумент" + ИмяРаздела + "." + Формат(НомерПервойСтроки, "ЧН=; ЧГ=0");
	
	ПараметрыЧтения = Новый Структура;
	ПараметрыЧтения.Вставить("РегламентированныйОтчет", ДекларацияНДС);
	ПараметрыЧтения.Вставить("ВидДополнительногоФайла", ВидДополнительногоФайла);
	
	Возврат ДанныеРегистраДополнительныхФайлов(ПараметрыЧтения);
	
КонецФункции

// Удаляет сегменты пользовательского представления раздела декларации по НДС.
// Параметры:
//   ДекларацияНДС - ДокументСсылка.РегламентированныйОтчет - ссылка на документ, в котором сохраняются данные декларации;
//   ИмяРаздела - Строка - имя раздела;
//
Процедура УдалитьСегментыТабличногоДокументаРазделаДекларацииНДС(ДекларацияНДС, ИмяРаздела) Экспорт
	
	Выборка = ВыборкаСегментовРазделаДекларации(ДекларацияНДС, ИмяРаздела, "ТабличныйДокумент");
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		Запись.РегламентированныйОтчет = ДекларацияНДС;
		Запись.ВидДополнительногоФайла = Выборка.ВидДополнительногоФайла;
		
		Запись.Удалить();
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет итоги для выгрузки электронного представления декларации по НДС.
// Параметры:
//   ДекларацияНДС - ДокументСсылка.РегламентированныйОтчет - ссылка на документ, в котором сохраняются данные декларации;
//   ИмяРаздела - Строка - имя раздела;
//   Итоги - Структура - Структура с итогами для формирования электронного представления декларации.
//
Процедура ЗаписатьИтогиРазделаДекларацииНДС(ДекларацияНДС, ИмяРаздела, Итоги) Экспорт
	
	ВидДополнительногоФайла = "Итоги" + ИмяРаздела;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", ДекларацияНДС);
	ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ВидДополнительногоФайла);
	
	ПараметрыЗаписи.Вставить("Данные", Итоги);
	
	ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	
КонецПроцедуры

// Считывает из регистра итоги для выгрузки электронного представления декларации по НДС.
// Параметры:
//   ДекларацияНДС - ДокументСсылка.РегламентированныйОтчет - ссылка на документ, в котором сохраняются данные декларации;
//   ИмяРаздела - Строка - имя раздела, с которым связаны данные;
// Возвращаемое значение:
//   Структура - Структура с итогами для формирования электронного представления декларации.
//
Функция ИтогиРазделаДекларацииНДС(ДекларацияНДС, ИмяРаздела) Экспорт
	
	ВидДополнительногоФайла = "Итоги" + ИмяРаздела;
	
	ПараметрыЧтения = Новый Структура;
	ПараметрыЧтения.Вставить("РегламентированныйОтчет", ДекларацияНДС);
	ПараметрыЧтения.Вставить("ВидДополнительногоФайла", ВидДополнительногоФайла);
	
	Возврат ДанныеРегистраДополнительныхФайлов(ПараметрыЧтения);
	
КонецФункции

// Удаляет из регистра итоги для выгрузки электронного представления декларации по НДС.
// Параметры:
//   ДекларацияНДС - ДокументСсылка.РегламентированныйОтчет - ссылка на документ, в котором сохраняются данные декларации;
//   ИмяРаздела - Строка - имя раздела, с которым связаны данные;
//
Процедура УдалитьИтогиРазделаДекларацииНДС(ДекларацияНДС, ИмяРаздела) Экспорт
	
	Запись = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	Запись.РегламентированныйОтчет = ДекларацияНДС;
	Запись.ВидДополнительногоФайла = "Итоги" + ИмяРаздела;
	
	Запись.Удалить();
	
КонецПроцедуры

// Сохраняет сформированный сегмент данных раздела для выгрузки электронного представления декларации по НДС.
// Параметры:
//   ДекларацияНДС - ДокументСсылка.РегламентированныйОтчет - ссылка на документ, в котором сохраняются данные декларации;
//   Раздел - Строка - имя раздела;
//   НомерПервойСтроки - Число - номер первой строки, отраженной в сегменте;
//   СегментДанных - Таблица значений - сегмент данных раздела для выгрузки.
//
Процедура ЗаписатьСегментДанныхРазделаДекларацииНДС(ДекларацияНДС, ИмяРаздела, НомерПервойСтроки, СегментДанных) Экспорт
	
	ВидДополнительногоФайла = "Данные" + ИмяРаздела + "." + Формат(НомерПервойСтроки, "ЧН=; ЧГ=0");
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", ДекларацияНДС);
	ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ВидДополнительногоФайла);
	
	ПараметрыЗаписи.Вставить("Данные", СегментДанных);
	
	ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	
КонецПроцедуры

// Считывает из регистра сегмент данных раздела для выгрузки электронного представления декларации по НДС.
// Параметры:
//   ДекларацияНДС - ДокументСсылка.РегламентированныйОтчет - ссылка на документ, в котором сохраняются данные декларации;
//   Раздел - Строка - имя раздела;
//   НомерПервойСтроки - Число - номер первой строки, отраженной в сегменте;
// Возвращаемое значение:
//   Таблица значений - сегмент данных раздела для выгрузки.
//
Функция СегментДанныхРазделаДекларацииНДС(ДекларацияНДС, ИмяРаздела, НомерПервойСтроки) Экспорт
	
	ВидДополнительногоФайла = "Данные" + ИмяРаздела + "." + Формат(НомерПервойСтроки, "ЧН=; ЧГ=0");
	
	ПараметрыЧтения = Новый Структура;
	ПараметрыЧтения.Вставить("РегламентированныйОтчет", ДекларацияНДС);
	ПараметрыЧтения.Вставить("ВидДополнительногоФайла", ВидДополнительногоФайла);
	
	Возврат ДанныеРегистраДополнительныхФайлов(ПараметрыЧтения);
	
КонецФункции

// Удаляет из регистра сегменты данных раздела для выгрузки электронного представления декларации по НДС.
// Параметры:
//   ДекларацияНДС - ДокументСсылка.РегламентированныйОтчет - ссылка на документ, в котором сохраняются данные декларации;
//   Раздел - Строка - имя раздела;
//
Процедура УдалитьСегментыДанныхРазделаДекларацииНДС(ДекларацияНДС, ИмяРаздела) Экспорт
	
	Выборка = ВыборкаСегментовРазделаДекларации(ДекларацияНДС, ИмяРаздела, "Данные");
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		Запись.РегламентированныйОтчет = ДекларацияНДС;
		Запись.ВидДополнительногоФайла = Выборка.ВидДополнительногоФайла;
		
		Запись.Удалить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура СообщитьПользователюОбОшибкеВУведомлении(Текст, УИД) Экспорт 
	Сообщ = Новый СообщениеПользователю;
	Если ТипЗнч(УИД) = Тип("УникальныйИдентификатор") Тогда 
		Сообщ.ИдентификаторНазначения = УИД;
	КонецЕсли;
	Сообщ.Текст = Текст;
	Сообщ.Сообщить();
КонецПроцедуры

Функция ПолучитьПризнакУчетаПоВсемОрганизациям() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт

	Если ВРег(Настройка) = ВРег("ОсновнаяОрганизация") Тогда
		
		ПустоеЗначение = Справочники["Организации"].ПустаяСсылка();
		
	ИначеЕсли ВРег(Настройка) = ВРег("ОсновноеПодразделениеОрганизации") Тогда
		
		ПустоеЗначение = Справочники["ПодразделенияОрганизаций"].ПустаяСсылка();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(ВРег(Настройка), , , Пользователь);
	
	Возврат ?(ЗначениеНастройки = Неопределено, ПустоеЗначение, ЗначениеНастройки);
	  
КонецФункции

Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	
	Организация = ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если НЕ Организация.Пустая() Тогда
		Если Организация.ПолучитьОбъект() = Неопределено Тогда
			// Нарушена ссылочная целостность информационной базы.
			Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля)
	
	ЭлементыОтбора = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы;
		
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементыОтбора.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		
КонецПроцедуры

Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
			
КонецПроцедуры

Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИнформациюДляПеремещенияОМетаданных(Ссылка) Экспорт
	
	Информация = Новый Структура;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	МетаданныеРеквизита = МетаданныеОбъекта.СтандартныеРеквизиты.Код;
	
	Информация.Вставить("ПолноеИмя",    МетаданныеОбъекта.ПолноеИмя());
	
	ЭтоСправочник = Метаданные.Справочники.Содержит(МетаданныеОбъекта);
	ЭтоПВХ        = Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта);
	
	Если ЭтоСправочник ИЛИ ЭтоПВХ Тогда
		
		Информация.Вставить("ЕстьГруппы",
					МетаданныеОбъекта.Иерархический
					И ?(ЭтоПВХ, Истина, МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов));
		
		Информация.Вставить("ДляГрупп",     Истина);
		Информация.Вставить("ДляЭлементов", Истина);
		Информация.Вставить("ЕстьРодитель",  МетаданныеОбъекта.Иерархический);
		Информация.Вставить("ГруппыСверху", ?(НЕ Информация.ЕстьРодитель, Ложь, МетаданныеОбъекта.ГруппыСверху));
		Информация.Вставить("ЕстьВладелец", ?(ЭтоПВХ, Ложь, (МетаданныеОбъекта.Владельцы.Количество() <> 0)));
		
	Иначе
		
		Информация.Вставить("ЕстьГруппы",   Ложь);
		Информация.Вставить("ДляГрупп",     Ложь);
		Информация.Вставить("ДляЭлементов", Истина);
		Информация.Вставить("ЕстьРодитель", Ложь);
		Информация.Вставить("ЕстьВладелец", Ложь);
		Информация.Вставить("ГруппыСверху", Ложь);
		
	КонецЕсли;
	
	Возврат Информация;
	
КонецФункции

Функция РеглОтчеты(Наим, НеЗапоминатьВКэше = Ложь) Экспорт
	Перем ВременныйФайл;
	Перем ПараметрыОтчета;
	
	НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Наим);
	Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
		Если Метаданные.Отчеты.Найти(Наим) <> Неопределено Тогда
			Возврат Отчеты[Наим];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(НайденныйЭлемент, НеЗапоминатьВКэше) ИЛИ НайденныйЭлемент.ВнешнийОтчетХранилище = Неопределено Тогда // используется внутренний отчет
		Если Метаданные.Документы.Найти(Наим) <> Неопределено Тогда
			
			Возврат Документы[Наим];
			
		ИначеЕсли Метаданные.Отчеты.Найти(Наим) <> Неопределено Тогда
			
			Возврат Отчеты[Наим];
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден отчет %1!'"), СокрП(Наим));
			Сообщение.Сообщить();
			Возврат Неопределено;
			
		КонецЕсли; 
	Иначе // используется внешний отчет
		Попытка
			ВременныйФайл = ФайлОтчетаСУчетомКэша(НайденныйЭлемент);
			ВнешнийОтчет = ВнешниеОтчеты.Создать(ВременныйФайл, Истина);
			Попытка
				ВнешнийОтчет.мПолноеИмяФайлаВнешнейОбработки = ВременныйФайл;
			Исключение
			КонецПопытки;
			Возврат ВнешнийОтчет;
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось запустить внешний отчет %1!'"), СокрП(Наим));
			Сообщение.Сообщить();
			
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет, с учетом кэша, является ли отчет, заданный строкой-идентификатором Наим, внешним.
// Параметры:
//		Наим - строка-идентификатор отчета.
// ВозвращаемоеЗначение:
//		Булево - Истина, если для заданной строки-идентификатора используется внешний отчет.
//				 Ложь - в противном случае.
//				 Неопределено - информация по отчету, заданному строкой-идентификатором 
//  			 отсутствует в справочнике РегламентированныеОтчеты.
Функция ЭтоВнешнийОтчет(Наим) Экспорт
	
	НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Наим);
	Если НайденныйЭлемент.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(НайденныйЭлемент);
	
КонецФункции

Функция ФормаРеглОтчета(Наим, ВыбраннаяФорма = Неопределено, Владелец = Неопределено, КлючУникальности = Неопределено) Экспорт
	Перем ВременныйФайл;
	
	НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Наим);
	Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(НайденныйЭлемент) ИЛИ НайденныйЭлемент.ВнешнийОтчетХранилище = Неопределено Тогда // используется внутренний отчет
		
		Если Метаданные.Документы.Найти(Наим) <> Неопределено Тогда
			
			Возврат Документы[Наим];
			
		ИначеЕсли Метаданные.Отчеты.Найти(Наим) <> Неопределено Тогда
			
			Возврат Отчеты[Наим];
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден отчет %1!'"), СокрП(Наим));
			
			Сообщение.Сообщить();
			
			Возврат Неопределено;
			
		КонецЕсли; 
		
	Иначе // используется внешний отчет
		
		Попытка
			
			ВременныйФайл = ФайлОтчетаСУчетомКэша(НайденныйЭлемент);
			
			ВнешнийОтчет = ВнешниеОтчеты.Создать(ВременныйФайл, Ложь);
			
			Попытка
				
				ВнешнийОтчет.мПолноеИмяФайлаВнешнейОбработки = ВременныйФайл;
				
			Исключение
				
			КонецПопытки;

			Возврат ВнешнийОтчет;
			
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден отчет %1!'"), СокрП(Наим));
			
			Сообщение.Сообщить();
			
			Возврат Неопределено;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗаблокироватьДокумент(мСохраненныйДок)
	
	Попытка
		мСохраненныйДок.Заблокировать();
		Возврат Истина;
	Исключение
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удается заблокировать документ!%1Возможно, документ уже открыт другим пользователем!'"), Символы.ПС);

		Сообщение.Сообщить();
        
		Возврат Ложь;
		
	КонецПопытки;
			
КонецФункции

Функция ПродолжитьПриНесоответствииВерсийФорм(Знач ВерсияФормы, Знач мВерсияФормы) Экспорт
	
	ПервыйСлеш = СтрНайти(ВерсияФормы, "/");
	ВторойСлеш = СтрНайти(Лев(ВерсияФормы, ПервыйСлеш - 1) + " " + Сред(ВерсияФормы, ПервыйСлеш + 1), "/");
	Если ПервыйСлеш = Неопределено ИЛИ ВторойСлеш = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	ГодВерсияФормы = Сред(ВерсияФормы, ВторойСлеш + 1);
	МесяцВерсияФормы = Сред(ВерсияФормы, ПервыйСлеш + 1, ВторойСлеш - ПервыйСлеш - 1);
	ДеньВерсияФормы = Сред(ВерсияФормы, 1, ПервыйСлеш - 1);
	Если СтрДлина(ГодВерсияФормы) = 2 Тогда
		ГодВерсияФормы = "20" + ГодВерсияФормы;
	КонецЕсли;
	Если СтрДлина(МесяцВерсияФормы) = 1 Тогда
		МесяцВерсияФормы = "0" + МесяцВерсияФормы;
	КонецЕсли;
	Если СтрДлина(ДеньВерсияФормы) = 1 Тогда
		ДеньВерсияФормы = "0" + ДеньВерсияФормы;
	КонецЕсли;
	ДатаВерсияФормы = Дата(ГодВерсияФормы + МесяцВерсияФормы + ДеньВерсияФормы);
	
	ПервыйСлеш = СтрНайти(мВерсияФормы, "/");
	ВторойСлеш = СтрНайти(Лев(мВерсияФормы, ПервыйСлеш - 1) + " " + Сред(мВерсияФормы, ПервыйСлеш + 1), "/");
	Если ПервыйСлеш = Неопределено ИЛИ ВторойСлеш = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	ГодмВерсияФормы = Сред(мВерсияФормы, ВторойСлеш + 1);
	МесяцмВерсияФормы = Сред(мВерсияФормы, ПервыйСлеш + 1, ВторойСлеш - ПервыйСлеш - 1);
	ДеньмВерсияФормы = Сред(мВерсияФормы, 1, ПервыйСлеш - 1);
	Если СтрДлина(ГодмВерсияФормы) = 2 Тогда
		ГодмВерсияФормы = "20" + ГодмВерсияФормы;
	КонецЕсли;
	Если СтрДлина(МесяцмВерсияФормы) = 1 Тогда
		МесяцмВерсияФормы = "0" + МесяцмВерсияФормы;
	КонецЕсли;
	Если СтрДлина(ДеньмВерсияФормы) = 1 Тогда
		ДеньмВерсияФормы = "0" + ДеньмВерсияФормы;
	КонецЕсли;
	ДатамВерсияФормы = Дата(ГодмВерсияФормы + МесяцмВерсияФормы + ДеньмВерсияФормы);
	
	Если ДатамВерсияФормы < ДатаВерсияФормы Тогда
						
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраненные данные не могут быть открыты текущей версией отчета!%1Версия отчета - от %2Версия данных - от %3'"), Символы.ПС, Формат(ДатамВерсияФормы, "ДЛФ=DD; ДП='Пустая дата'") + Символы.ПС, Формат(ДатаВерсияФормы,  "ДЛФ=DD; ДП='Пустая дата'"));
		
		Сообщение.Сообщить();
                  						
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном) Экспорт
	
	стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
	ПозицияРазделителя = СтрНайти(стрВариантЗаполнения, ",");

	// Указан общий вариант заполнения показателя, для всех конфигураций.
	Если ПозицияРазделителя = 0 Тогда
		стрВариантЗаполнения = ?(стрВариантЗаполнения = "4", "4", "");
		Возврат стрВариантЗаполнения;
	КонецЕсли;
	
	Если ПозицияРазделителя > 0 Тогда
		
		ВариантыЗаполнения = СтрЗаменить(стрВариантЗаполнения, ",", Символы.ПС);
		ВариантыЗаполнения = СтрЗаменить(ВариантыЗаполнения, " ", "");
		
		ВариантЗаполнения = СтрПолучитьСтроку(ВариантыЗаполнения, 1);
		ВариантЗаполнения = ?(ВариантЗаполнения = "4", "4", "");
		
		Возврат ВариантЗаполнения;

	КонецЕсли;

КонецФункции

Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(Форма) Экспорт

	Если ТипЗнч(Форма.мСвойстваРазделовДекларации) <> Тип("ДанныеФормыДерево") Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если СтрокаУровня1.ПредставлениеДанных Тогда
			Форма.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(СтрокаУровня1.ИмяСтраницы);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДокФизЛица(ФизЛицо, ДатаЗначения) Экспорт
	
	Удостоверения = РегистрыСведений.ДокументыФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФизЛицо));

	Если Удостоверения.Количество() > 0 Тогда
		Возврат Удостоверения[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПредставительЯвляетсяФизЛицом(Представитель) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Представитель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Справочники.Найти("ФизическиеЛица") = Неопределено Тогда
		Возврат Представитель.ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Иначе
		Возврат ТипЗнч(Представитель) = Тип("СправочникСсылка.ФизическиеЛица");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьФИОФизЛица(ФизЛицо, НаДату = Неопределено) Экспорт
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	Если Метаданные.Справочники.Найти("ФизическиеЛица") = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ФизЛицо);
	Иначе
		ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(?(ЗначениеЗаполнено(НаДату), НаДату, ТекущаяДатаСеанса()), Новый Структура("ФизическоеЛицо", ФизЛицо));
		Если ДанныеФЛ.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат, ДанныеФЛ[0]);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ПриЗаписиРегламентированногоОтчетаНаСервере(Форма, КодИФНС = "не применимо", Автосохранение = Ложь, Вариант, ВидДокументаНомерКорректировкиИзменен, мСохраненныйДок) Экспорт
	
	Если КодИФНС = Неопределено Тогда
		КодИФНС = "не применимо";
	КонецЕсли;
	
	Если Автосохранение = Неопределено Тогда
		Автосохранение = Ложь;
	КонецЕсли;
			
	Форма.СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (мСохраненныйДок = Неопределено ИЛИ Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((мСохраненныйДок = Неопределено) ИЛИ (Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> Форма.СтруктураРеквизитовФормы.мВариант)) Тогда
		
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено ИЛИ Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
			// Создаем новый документ вида РегламентированныйОтчет.
						
			мСохраненныйДок = Документы.РегламентированныйОтчет.СоздатьДокумент();
			ЗаблокироватьДокумент(мСохраненныйДок);
			Форма.СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = Истина;
			мСохраненныйДок.Дата = Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
			мСохраненныйДок.УстановитьВремя();
			мСохраненныйДок.УстановитьНовыйНомер();
						
		ИначеЕсли Вариант <> Форма.СтруктураРеквизитовФормы.мВариант Тогда
	
			Если ВидДокументаНомерКорректировкиИзменен Тогда
				
				Если мСохраненныйДок.Заблокирован() Тогда
					мСохраненныйДок.Разблокировать();
				КонецЕсли;
				
				мСохраненныйДок = Документы.РегламентированныйОтчет.СоздатьДокумент();
				ЗаблокироватьДокумент(мСохраненныйДок);
				Форма.СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = Истина;
				мСохраненныйДок.Дата = Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
				мСохраненныйДок.УстановитьВремя();
				мСохраненныйДок.УстановитьНовыйНомер();
							
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СуществуетДокументСАналогичнымиРеквизитами(Форма, КодИФНС, КПП = "") Экспорт	
	
	Попытка
		Вариант = Форма.СтруктураРеквизитовФормы.ВидДокумента*Форма.НомерКорректировки;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мСохраненныйДок", ?(Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено, Неопределено, Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка));
	
	Запрос.УстановитьПараметр("ИсточникОтчета", Метаданные.Отчеты[Сред(Лев(СтрЗаменить(Форма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(Форма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя);
	
	Запрос.УстановитьПараметр("Организация", Форма.СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ДатаНачалаНач", НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачалаКон", КонецДня(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКонцаНач", НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКонцаКон", КонецДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КодНалоговогоОргана", КодИФНС);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("Вариант", Вариант);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РегламентированныйОтчет.Ссылка)
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.Ссылка <> &мСохраненныйДок
	               |	И НЕ РегламентированныйОтчет.ПометкаУдаления
	               |	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	               |	И РегламентированныйОтчет.Организация = &Организация
	               |	И РегламентированныйОтчет.ДатаНачала МЕЖДУ &ДатаНачалаНач И &ДатаНачалаКон
	               |	И РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаКонцаНач И &ДатаКонцаКон
	               |	И РегламентированныйОтчет.Вид = &Вариант";
				   
	Если КодИФНС <> "не применимо" Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И РегламентированныйОтчет.КодНалоговогоОргана = &КодНалоговогоОргана
				   |	И РегламентированныйОтчет.КПП = &КПП";
	КонецЕсли;
			   
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();			   
	Если РезультатЗапроса.Количество() = 0 ИЛИ РезультатЗапроса.Получить(0).Получить(0) = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ОперацииПриВосстановленииРегламентированногоОтчета(Форма) Экспорт

	Форма.СтруктураРеквизитовФормы.мВариант = Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	Если Форма.СтруктураРеквизитовФормы.мВариант = Неопределено Тогда
		Форма.СтруктураРеквизитовФормы.мВариант = 0;
	КонецЕсли;

	Если Форма.СтруктураРеквизитовФормы.мВариант = 0 Тогда
		Если Форма.СтруктураРеквизитовФормы.Свойство("ВидДокумента") Тогда
			Форма.СтруктураРеквизитовФормы.ВидДокумента = 0;
		КонецЕсли;
	Иначе
		Если Форма.СтруктураРеквизитовФормы.Свойство("ВидДокумента") Тогда
			Форма.СтруктураРеквизитовФормы.ВидДокумента = 1;
		КонецЕсли;
		Форма.НомерКорректировки = Форма.СтруктураРеквизитовФормы.мВариант;
	КонецЕсли;
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты("");
	
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
	
		Если РеквизитФормы.Имя = "мДеревоСтраницОтчета"
		   И Форма.мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() > 0 Тогда
			
			Форма.мДеревоСтраницОтчета.ПолучитьЭлементы()[0].ПоказатьСтраницу = 1;
			Форма.мДеревоСтраницОтчета.ПолучитьЭлементы()[0].ВыводНаПечать    = 1;
			
		КонецЕсли;	
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме) Экспорт
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = СтрокаТаблицы[КолонкаИмя];
		Иначе
			Строка1.Области[НазвЯчейки].Текст = СтрокаТаблицы[КолонкаИмя];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция БылиИзмененыКлючевыеРеквизитыОтчета(Форма, КодИФНС, КПП = "") Экспорт
	
	Попытка
		Вариант = Форма.СтруктураРеквизитовФормы.ВидДокумента*Форма.НомерКорректировки;
		мСохраненныйДок = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если мСохраненныйДок = Неопределено ИЛИ Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Если КодИФНС = "не применимо" Тогда
			Возврат Вариант <> мСохраненныйДок.Вид;
		Иначе
			Возврат Вариант <> мСохраненныйДок.Вид ИЛИ СокрЛП(КодИФНС) <> СокрЛП(мСохраненныйДок.КодНалоговогоОргана) ИЛИ СокрЛП(КПП) <> СокрЛП(мСохраненныйДок.КПП);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеВидаДокумента(Вид) Экспорт
	
	Если Вид = 0 Тогда
		Возврат "П";
	ИначеЕсли Вид = Неопределено Тогда
		Возврат "-";
	Иначе
		Возврат "К/" + Вид;
	КонецЕсли;
	
КонецФункции

Функция ВывестиСведенияСлужебнойЧасти30(Текст, Организация = Неопределено, Знач ДатаДок = Неопределено, Знач ОргИНН = Неопределено, Знач ОргКПП = Неопределено, Знач КодИнсп = Неопределено, ТипИнф = "ОТЧЕТНОСТЬНП", ВерсияФормата = "3.00") Экспорт
	
	Если ДатаДок = Неопределено Тогда
		ДатаДок = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДатаДокС = Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy");
	
	Если Организация <> Неопределено Тогда
		
		Если ОргИНН = Неопределено ИЛИ ПустаяСтрока(ОргИНН) Тогда
			ОргИНН = СокрЛП(Организация.ИНН);
		КонецЕсли;
		
		Если ОргКПП = Неопределено ИЛИ ПустаяСтрока(ОргКПП) Тогда
			ОргКПП = Организация.КПП;
		КонецЕсли;
		
		Если КодИНСП = Неопределено ИЛИ ПустаяСтрока(КодИНСП) Тогда
			КодИНСП = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ОргИНН) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Невозможно определить ИНН организации! Выгрузка прервана!'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
				
	КонецЕсли;
	
	Если ПустаяСтрока(КодИНСП) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Невозможно определить код налоговой инспекции! Выгрузка прервана!'");
		
		Сообщение.Сообщить();
                 		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОргИНН = СокрЛП(ОргИНН);
	
	КатегорияНП = 1;
	Если СтрДлина(СокрЛП(ОргИНН)) = 12 Тогда
		// Налогоплательщик - физическое лицо.
		КатегорияНП = 2;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОргКПП) Тогда
		// Если КПП указан.
		Если СтрДлина(ОргИНН) = 10 Тогда
			ИДОтпр = ОргИНН + "**" + ОргКПП;
		Иначе
			ИДОтпр = ОргИНН + ОргКПП;
		КонецЕсли;
	Иначе
		// Если КПП не указан.
		Если КатегорияНП = 1 Тогда 
			// Налогоплательщик - ЮЛ.
			ИДОтпр = ОргИНН + "***********";
		Иначе
			// Налогоплательщик - ФЛ.
			ИДОтпр = ОргИНН + "*********";
		КонецЕсли;
	КонецЕсли;
	
	ИдФайл  = ИДОтпр + Прав(ДатаДокС,4) + Сред(ДатаДокС,4,2) + Лев(ДатаДокС,2)
			+ Формат(Час(ДатаДок),"ЧЦ=2; ЧН=; ЧВН=") + Формат(Минута(ДатаДок),"ЧЦ=2; ЧН=; ЧВН=") + Формат(Секунда(ДатаДок),"ЧЦ=2; ЧН=; ЧВН=");	
	                                         
	Текст.ДобавитьСтроку("ИдФайл:" + ИдФайл);
	Текст.ДобавитьСтроку("ТипИнф:" + ТипИнф);
	Текст.ДобавитьСтроку("ВерсФорм:" + ВерсияФормата); 
	Текст.ДобавитьСтроку("ИдПол:"  + КодИнсп); 
	Текст.ДобавитьСтроку("ВерсПрог:" + НазваниеИВерсияПрограммы());
	Текст.ДобавитьСтроку("КолДок:1");

	Возврат Истина;
	
КонецФункции

Функция ВерсияПрограммы() Экспорт
	
	Возврат СокрЛП(Метаданные.Версия);
	
КонецФункции

Функция НазваниеПрограммы() Экспорт
	
	Возврат РегламентированнаяОтчетностьПереопределяемый.КраткоеНазваниеПрограммы();
	
КонецФункции

Функция НазваниеИВерсияПрограммы() Экспорт
	
	Возврат ВРЕГ(Лев(НазваниеПрограммы() + " " + ВерсияПрограммы(), 40));
	
КонецФункции

Функция ВывестиСведенияОбОтправителе30(Текст, Организация = Неопределено, Знач ОргНазв = Неопределено, Знач ОргТелефон = Неопределено, Знач ОргБухгалтер = Неопределено, ВыгрузкаДекларацииПоАлкоголю = Ложь) Экспорт
	
	Если Организация <> Неопределено Тогда
		
		Если ОргНазв = Неопределено Тогда
			ОргНазв = СокрЛП(Организация.НаименованиеПолное);
		КонецЕсли;
		
		Если ОргТелефон = Неопределено Тогда
			ОргТелефон = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДатаСеанса(), "ТелОрганизации").ТелОрганизации);
		КонецЕсли;
		
		Если ОргБухгалтер = Неопределено Тогда
			ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДатаСеанса(), "ФИОБух");
			ОргБухгалтер = СокрЛП(ОргСведения.ФИОБух);
		КонецЕсли;
		
	КонецЕсли;
	
	ИНН = СокрЛП(Организация.ИНН);
	Если ПустаяСтрока(ИНН) Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Невозможно определить вид налогоплательщика! Выгрузка прервана!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	КатегорияНП = 1;
	Если СтрДлина(СокрЛП(ИНН)) = 12 Тогда
		// Налогоплательщик - физическое лицо.
		КатегорияНП = 2;
	КонецЕсли;
	
	Если ПустаяСтрока(ОргНазв) Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Невозможно определить полное название организации! Выгрузка прервана!'");

		Сообщение.Сообщить();
        		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если КатегорияНП = 1 И ПустаяСтрока(ОргБухгалтер) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Невозможно определить ФИО главного бухгалтера организации! Выгрузка прервана!'");
		
		Сообщение.Сообщить();

		Возврат Ложь;
		
	КонецЕсли;
	
	Если КатегорияНП = 1 ИЛИ ВыгрузкаДекларацииПоАлкоголю Тогда
		// Отправитель - ЮЛ.
		Текст.ДобавитьСтроку("НаимОтпрЮл:" + ВРЕГ(СтрЗаменить(ОргНазв, Символы.ПС, "")));
		Текст.ДобавитьСтроку("ТелОтпр:"    + СокрЛП(ВРЕГ(Лев(ОргТелефон, 20))));
		Текст.ДобавитьСтроку("ДолжнОтпр:ГЛАВНЫЙ БУХГАЛТЕР");
		Текст.ДобавитьСтроку("ФИООтпр:"   + СтрЗаменитьПробелы(ОргБухгалтер));
		Текст.ДобавитьСтроку("@@@"); 
	Иначе
		// Отправитель - ФЛ.
		Если НЕ ПустаяСтрока(ОргБухгалтер) Тогда
			ФИООтпрФЛ = ОргБухгалтер;
		Иначе
			ФИООтпрФЛ = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДатаСеанса(), "ФИО").ФИО;
		КонецЕсли;
		Если ПустаяСтрока(ФИООтпрФЛ) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Невозможно определить ФИО главного бухгалтера и ФИО индивидуального предпринимателя! Выгрузка прервана!'");
			
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Текст.ДобавитьСтроку("ФИООтпрФЛ:" + СтрЗаменитьПробелы(ФИООтпрФЛ));
		Текст.ДобавитьСтроку("ТелОтпр:"   + СокрЛП(ВРЕГ(Лев(ОргТелефон, 20))));
		Текст.ДобавитьСтроку("@@@");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СвернутьДанныеТабличногоПоля(Данные) Экспорт
	
	ТП = Новый ТаблицаЗначений;
	ТП.Колонки.Добавить("Имя");
	ТП.Колонки.Добавить("Кол");
	ТП.Колонки.Добавить("Номер");
	ТП.Колонки.Добавить("Знач");
	
	Для Каждого Стр Из Данные Цикл
		НоваяСтрока = ТП.Добавить();
		НоваяСтрока.Имя = Стр.Ключ;
		НоваяСтрока.Кол = 1;
		НоваяСтрока.Знач = Стр.Значение;
	КонецЦикла;
	
	ТП.Сортировать("Имя");
	
	Для Каждого Стр Из ТП Цикл
		Имя = Стр.Имя;
		
		Если ЭтоКодПоказателяП(Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ПризнакКвадратика = Ложь; // Признак того, что значение является частью другого значения.
		
		НомерСимвола = СтрДлина(Имя);
		Было_ = Ложь; // Признак того, что в текущем наименовании показателя уже встречался символ "_".
		БылаЦифра = Ложь;
		
		Пока НомерСимвола > 0 Цикл
			
			Симв = Сред(Имя, НомерСимвола, 1);
			КодСимв = КодСимвола(Симв);
			
			Если (КодСимв >= КодСимвола("0") И КодСимв <= КодСимвола("9")) ИЛИ (Симв = "_") Тогда
				
				Если Симв = "_" Тогда
					Если БылаЦифра Тогда
						
						ПризнакКвадратика = Истина;
						НомерСимвола = НомерСимвола - 1;
						Прервать;
						
					КонецЕсли;
				Иначе
					БылаЦифра = Истина;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
			НомерСимвола = НомерСимвола - 1;
			
		КонецЦикла;
		
		Если БылаЦифра Тогда
			Корень = Лев(Стр.Имя, НомерСимвола);
			Номер = Сред(Стр.Имя, НомерСимвола + 1);
			Попытка
				Стр.Номер = Число( ?( Лев(Номер, 1) = "_", Сред(Номер, 2), Номер));
			Исключение
				
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибки преобразования номера из окончания: %1 === %2'"), Корень, Номер);
	
				Сообщение.Сообщить();
				
			КонецПопытки;
			Стр.Имя = Корень;
		КонецЕсли;
		
	КонецЦикла;
	
	ТП.Сортировать("Имя, Номер");
	
	ТП2 = ТП.Скопировать();
	ТП2.Свернуть("Имя", "Кол");
	
	Для Каждого Стр Из ТП2 Цикл
		Если Стр.Имя = "П" ИЛИ Стр.Имя = "ЧНП" Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.Кол > 1 Тогда
			ЗначениеСводногоПоказателя = ВычислитьЗначениеПоКорню(ТП, Стр.Имя);
			НайдЗнач = Неопределено;
			Если НЕ Данные.Свойство(Стр.Имя, НайдЗнач) Тогда
				Данные.Вставить(Стр.Имя, ЗначениеСводногоПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(Форма) Экспорт 
	
	Форма.мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = Форма.СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		Форма.мДанныеОтчета.Вставить(Раздел.Ключ, СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
КонецПроцедуры

Функция ВычислитьЗначениеПоКорню(Табл, Корень)
	
	Табл2 = Табл.Скопировать();
	ИтоговоеЗначение = "";
	
	Для Каждого Стр Из Табл2 Цикл
		
		Имя = Стр.Имя;
		Если Имя = Корень Тогда
			ИтоговоеЗначение = ИтоговоеЗначение + Стр.Знач;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ((ВРЕГ(Лев(Корень, 4)) = "ДАТА") ИЛИ (СтрЧислоВхождений(Корень, "Дата") <> 0)) 
		И (((СтрДлина(ИтоговоеЗначение)=8) ИЛИ (СтрДлина(ИтоговоеЗначение)=6)) ИЛИ (ПустаяСтрока(ИтоговоеЗначение)))Тогда
		
		Если ПустаяСтрока(ИтоговоеЗначение) Тогда
			ИтоговоеЗначение = "00.00.0000";
		Иначе
			ИтоговоеЗначение = Лев(ИтоговоеЗначение, 2) + "." + Сред(ИтоговоеЗначение, 3, 2) + "." + Сред(ИтоговоеЗначение, 5);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИтоговоеЗначение;
	
КонецФункции

Функция ИННСоответствуетТребованиямБезТипаНаСервере(Знач ИНН) Экспорт
	
	ИННСтр = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИННСтр);
	
	Если ДлинаИНН = 10 Тогда
		ВладелецИННФизЛицо = Ложь;
	ИначеЕсли ДлинаИНН = 12 Тогда
		ВладелецИННФизЛицо = Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ИНН, ВладелецИННФизЛицо);
	
КонецФункции

Функция ФИОНаписаноВерно(Знач СтрокаПараметр, ПроверятьТолькоРусскиеБуквы = Ложь) Экспорт
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);
	
	СписокДопустимыхЗначений = Новый Соответствие;
	СписокДопустимыхЗначений.Вставить(КодСимвола(" "), " ");
	СписокДопустимыхЗначений.Вставить(КодСимвола("."), ".");
	СписокДопустимыхЗначений.Вставить(КодСимвола("-"), "-");
	СписокДопустимыхЗначений.Вставить(КодСимвола("ё"), "ё");
	СписокДопустимыхЗначений.Вставить(КодСимвола("Ё"), "Ё");
	
	КодA = КодСимвола("A");
	КодZ = КодСимвола("z");
	КодА = КодСимвола("А");
	КодЯ = КодСимвола("я");
	Если  ПроверятьТолькоРусскиеБуквы Тогда
		Для Сч = 1 По СтрДлина(СтрокаПараметр) Цикл
			Код = КодСимвола(СтрокаПараметр, Сч);
			Если ((Код >= КодА) И (Код <= КодЯ)) ИЛИ (СписокДопустимыхЗначений.Получить(Код) <> Неопределено) Тогда
				Продолжить;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Сч = 1 По СтрДлина(СтрокаПараметр) Цикл
			Код = КодСимвола(СтрокаПараметр, Сч);
			Если (((Код >= КодA) И (Код <= КодZ)) ИЛИ ((Код >= КодА) И (Код <= КодЯ))) ИЛИ (СписокДопустимыхЗначений.Получить(Код) <> Неопределено) Тогда
				Продолжить;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Возврат 1;
	
КонецФункции

Функция РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения = Неопределено) Экспорт

	Подразделы = Новый Структура;
	СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
	ПослМногостр = "^^^";
	ПослКодПоказателя = "П000000000000";

	Для Каждого Стр Из СтрокиФорматаТекРаздела Цикл

		КодПоказателя = Стр.КодПоказателяПоСоставу;
		Многостр = Стр.ПризнМногострочности;
		Если КодПоказателя = "###" ИЛИ КодПоказателя = "===" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		Если Многостр <> ПослМногостр Тогда
			Подразделы.Вставить(КодПоказателя, Многостр);
			ПослМногостр = Многостр;
		ИначеЕсли (Многостр = ПослМногостр) И (МногоСтр = "/") И (Лев(ПослКодПоказателя, 11) <> Лев(КодПоказателя, 11))
					И ?(МногострочныеИсключения = Неопределено, Истина, МногострочныеИсключения.НайтиПоЗначению(КодПоказателя) = Неопределено) Тогда
			Подразделы.Вставить(КодПоказателя, Многостр);
			ПослМногостр = Многостр;
		КонецЕсли;

		ПослКодПоказателя = КодПоказателя;

	КонецЦикла;

	Возврат Подразделы;

КонецФункции

Функция СкопированнаяСтруктура(Структура1) Экспорт
	
	Структура2 = Новый Структура;
	
	Для Каждого Зап Из Структура1 Цикл
		Структура2.Вставить(Зап.Ключ, Зап.Значение);
	КонецЦикла;
	
	Возврат Структура2;
	
КонецФункции

Функция ПроверитьНаПустоеЗначение(НазваниеОтчета, Стр, Значение, ВыводитьСообщения, НомерСтраницы = Неопределено, НомерСтроки = Неопределено, ПроверкаЗаполненияСтр = 0, ФормаВыводаСообщений = Неопределено) Экспорт
		
	Если СтрНайти(Стр.Обязательность, "Н") <> 0 И ПроверкаЗаполненияСтр = 1 Тогда
		Возврат 1; 
	КонецЕсли;
	
	Если СтрНайти(Стр.Обязательность, "Н") <> 0 И ПроверкаЗаполненияСтр = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Стр.Обязательность = "" и ПроверкаЗаполненияСтр = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Если ВыводитьСообщения Тогда
			Раздел = РазделПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
			Стрк = СтрокаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
			Графа = ГрафаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
			
			Если ФормаВыводаСообщений <> Неопределено Тогда
				НовСтр = ФормаВыводаСообщений.ТаблицаСообщений.Добавить();
				НовСтр.Раздел = Стр.ИмяПоляТаблДокумента;
				НовСтр.Строка = Стрк;
				НовСтр.Графа = Графа;
				НовСтр.Страница = НомерСтраницы;
				НовСтр.СтрокаПП = НомерСтроки;
				КодНаФорме = Стр.КодПоказателяПоСтруктуре;
				Если НЕ ЗначениеЗаполнено(КодНаФорме) Тогда
					КодНаФорме = Стр.КодПоказателяПоФорме;
				КонецЕсли;
				НовСтр.ИмяЯчейки = ?(ПустаяСтрока(КодНаФорме), Стр.КодПоказателяПоСоставу, КодНаФорме); 
				НовСтр.Описание = "Не задано значение";
			КонецЕсли;

		КонецЕсли;
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
		
КонецФункции

Функция ПроверитьНаКорректность(НазваниеОтчета, Стр, Значение, ВыводитьСообщения, НомерСтраницы = Неопределено, ФормаВыводаСообщений = Неопределено) Экспорт
	
	ДопОписание = СокрЛП(Стр.ДопОписание);
	Если ПустаяСтрока(ДопОписание) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") И ЭтоКодПоказателяП(Стр.КодПоказателяПоСоставу) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ДопОписание = "ИНН" Тогда
		Если НЕ ИННСоответствуетТребованиямБезТипаНаСервере(Значение) Тогда
			Если ФормаВыводаСообщений <> Неопределено Тогда
				НовСтр = ФормаВыводаСообщений.ТаблицаСообщений.Добавить();
				НовСтр.Раздел = Стр.ИмяПоляТаблДокумента;
				НовСтр.Строка = СтрокаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Графа = ГрафаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Страница = НомерСтраницы;
				НовСтр.СтрокаПП = Неопределено;
				КодНаФорме = Стр.КодПоказателяПоСтруктуре;
				Если НЕ ЗначениеЗаполнено(КодНаФорме) Тогда
					КодНаФорме = Стр.КодПоказателяПоФорме;
				КонецЕсли;
				НовСтр.ИмяЯчейки = ?(ПустаяСтрока(КодНаФорме), Стр.КодПоказателяПоСоставу, КодНаФорме); 
				НовСтр.Описание = "Неверно задан ИНН";
			КонецЕсли;
			Возврат 1;
		КонецЕсли;
		
	ИначеЕсли ДопОписание = "КПП" Тогда
		
		Если НЕ РегламентированнаяОтчетностьКлиентСервер.КППСоответствуетТребованиям(Значение) Тогда
			Если ФормаВыводаСообщений <> Неопределено Тогда
				НовСтр = ФормаВыводаСообщений.ТаблицаСообщений.Добавить();
				НовСтр.Раздел = Стр.ИмяПоляТаблДокумента;
				НовСтр.Строка = СтрокаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Графа = ГрафаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Страница = НомерСтраницы;
				НовСтр.СтрокаПП = Неопределено;
				КодНаФорме = Стр.КодПоказателяПоСтруктуре;
				Если НЕ ЗначениеЗаполнено(КодНаФорме) Тогда
					КодНаФорме = Стр.КодПоказателяПоФорме;
				КонецЕсли;
				НовСтр.ИмяЯчейки = ?(ПустаяСтрока(КодНаФорме), Стр.КодПоказателяПоСоставу, КодНаФорме); 
				НовСтр.Описание = "Неверно задан КПП";
			КонецЕсли;
			Возврат 1;
		КонецЕсли;
		
	ИначеЕсли ДопОписание = "КБК" Тогда
		
	ИначеЕсли ДопОписание = "ОКАТО" Тогда
		
	ИначеЕсли ДопОписание = "ОГРН" Тогда
		
		Если НЕ ОГРНСоответствуетТребованиям(Значение) Тогда
			Если ФормаВыводаСообщений <> Неопределено Тогда
				НовСтр = ФормаВыводаСообщений.ТаблицаСообщений.Добавить();
				НовСтр.Раздел = Стр.ИмяПоляТаблДокумента;
				НовСтр.Строка = СтрокаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Графа = ГрафаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Страница = НомерСтраницы;
				НовСтр.СтрокаПП = Неопределено;
				КодНаФорме = Стр.КодПоказателяПоСтруктуре;
				Если НЕ ЗначениеЗаполнено(КодНаФорме) Тогда
					КодНаФорме = Стр.КодПоказателяПоФорме;
				КонецЕсли;
				НовСтр.ИмяЯчейки = ?(ПустаяСтрока(КодНаФорме), Стр.КодПоказателяПоСоставу, КодНаФорме); 
				НовСтр.Описание = "Неверно задан ОГРН";
			КонецЕсли;
			Возврат 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Процедура СообщитьВТаблицуСообщений(Форма, Описание, Раздел, ИмяЯчейки = "", ФИО = "") Экспорт
	
	НовСтр = Форма.ТаблицаСообщений.Добавить();
	НовСтр.Раздел = Раздел;
	НовСтр.ИмяЯчейки = ИмяЯчейки;
	НовСтр.Описание = Описание;
	НовСтр.Страница = ФИО;
	
КонецПроцедуры

Функция ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Организация = Неопределено, Знач ОргИНН = Неопределено, Знач ОргКПП = Неопределено, Знач ДатаДок = Неопределено, КодИФНС = Неопределено) Экспорт
	
	Если ДатаДок = Неопределено Тогда
		ДатаДок = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДатаДокС = Формат(ДатаДок, "ДФ=dd.MM.yyyy");
	
	Если Организация <> Неопределено Тогда
		
		Если ОргИНН = Неопределено Тогда
			ОргИНН = СокрЛП(Организация.ИНН);
		КонецЕсли;
		
		Если ОргКПП = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ОргКПП) Тогда	
			Если КодИФНС <> Неопределено Тогда
				ОргКПП = РегламентированнаяОтчетностьВызовСервера.КПППоКомбинацииОрганизацииИКодаИФНС(Организация, КодИФНС);
			Иначе
				ОргКПП = Организация.КПП;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ОргИНН) Тогда
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = НСтр("ru='Невозможно определить ИНН организации! Выгрузка прервана!'");
				
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	КатегорияНП = 1;
	Если СтрДлина(СокрЛП(ОргИНН)) = 12 Тогда
		// Налогоплательщик - физическое лицо.
		КатегорияНП = 2;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОргКПП) Тогда
		// Если КПП указан.
		Если СтрДлина(ОргИНН) = 10 Тогда
			ИДОтпр = ОргИНН + "**" + ОргКПП;
		Иначе
			ИДОтпр = ОргИНН + ОргКПП;
		КонецЕсли;
	Иначе
		// Если КПП не указан.
		Если КатегорияНП = 1 Тогда 
			// Налогоплательщик - ЮЛ.
			ИДОтпр = ОргИНН + "***********";
		Иначе
			// Налогоплательщик - ФЛ.
			ИДОтпр = ОргИНН + "*********";
		КонецЕсли;
	КонецЕсли;
	
	СчДок = ПолучитьСчетчикВыгруженныхДокументов(Организация, ДатаДок) + 1;
	ИдДок = ИДОтпр + Прав(ДатаДокС, 4) + Формат(СчДок, "ЧЦ=8; ЧН=; ЧВН=; ЧГ=");
	
	Текст.ДобавитьСтроку("ИдДок:" + СокрЛП(ИдДок)); 
	Текст.ДобавитьСтроку("ДатаДок:" + Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy")); 
	Текст.ДобавитьСтроку("###");
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПоКодамРегистрациюВИФНС(Организация, КодНО, КПП = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	РегистрацииВНалоговомОргане.Ссылка
	               |ИЗ
	               |	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	               |ГДЕ
	               |	РегистрацииВНалоговомОргане.Владелец = &Организация
				   |	И РегистрацииВНалоговомОргане.Код = &КодНО
				   |	И РегистрацииВНалоговомОргане.ПометкаУдаления = &ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);			   
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодНО", КодНО);
	
	Если КПП <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И РегистрацииВНалоговомОргане.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСчетчикВыгруженныхДокументов(Организация, Знач ДатаДокумента = Неопределено, НомерКвартала = 0, Знач ТипСчетчика = Неопределено) Экспорт
	
	Если Организация = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТипСчетчика = Неопределено Тогда
		ТипСчетчика = Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовВФормате300;
	КонецЕсли;
	
	Если ДатаДокумента = Неопределено Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СчетчикиВыгрузок.Значение
	                      |ИЗ
	                      |	РегистрСведений.СчетчикиВыгрузок КАК СчетчикиВыгрузок
	                      |ГДЕ
	                      |	СчетчикиВыгрузок.Период = &Период
	                      |	И СчетчикиВыгрузок.Тип = &Тип
	                      |	И СчетчикиВыгрузок.Организация = &Организация
	                      |	И СчетчикиВыгрузок.НомерКвартала = &НомерКвартала");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Тип", ТипСчетчика);
	Запрос.УстановитьПараметр("Период", НачалоГода(ДатаДокумента));
	Запрос.УстановитьПараметр("НомерКвартала", НомерКвартала);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипСчетчика = Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовАлко И Выборка.Значение = 99 Тогда
			Возврат 0;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция СтрЗаменитьПробелы(ИсхСтрока) Экспорт
	
	ПромСтр=СокрЛП(ИсхСтрока); 
	
	Если ПустаяСтрока(ПромСтр) Тогда
		ПромСтр = ",,";
		
		Возврат ПромСтр;
	КонецЕсли;

	// Сначала удаляем возможный недопустимый символ '.'.
	ЧП = СтрЧислоВхождений(ПромСтр,".");
	Если ЧП>0 Тогда
		Для К=1 По ЧП Цикл
			РезСтр=СтрЗаменить(ПромСтр,"."," ");
			ПромСтр=РезСтр;
		КонецЦикла; 
	КонецЕсли;
	
	// Число разделительных пробелов.
	ЧП=СтрЧислоВхождений(ПромСтр," ");
	Если ЧП>0 Тогда
		Для К=1 По ЧП Цикл
			РезСтр  = СтрЗаменить(ПромСтр," ",",");
			ПромСтр = РезСтр;
		КонецЦикла; 
	КонецЕсли;
	
	// Проверяем соответствие формату представления.
	КолЗап = СтрЧислоВхождений(ПромСтр,",");
	Если КолЗап < 2 Тогда
		// Дополняем недостающими запятыми.
		Для Ном=(КолЗап+1) По 2 Цикл
			ПромСтр=ПромСтр+",";
		КонецЦикла;
	ИначеЕсли КолЗап > 2 Тогда
		Пока СтрЧислоВхождений(ПромСтр, ",") <> 2 Цикл
			НайденПовтор = 0;
			
			ПозицияЗапятой = СтрНайти(ПромСтр, ",");
			Если Сред(ПромСтр, ПозицияЗапятой + 1, 1) = "," Тогда
				НачПозиция	 = ПозицияЗапятой;
				НайденПовтор = 1;
			Иначе
				ПозицияЗапятой2 = СтрНайти(Сред(ПромСтр, ПозицияЗапятой + 1), ",");
				Если Сред(ПромСтр, ПозицияЗапятой + ПозицияЗапятой2 + 1, 1) = "," Тогда
					НачПозиция	 = ПозицияЗапятой + ПозицияЗапятой2;
					НайденПовтор = 1;
				КонецЕсли;
			КонецЕсли;	
			
			Если НайденПовтор = 1 Тогда
				ПромСтр = Лев(ПромСтр, НачПозиция) + Сред(ПромСтр, НачПозиция + 2);
			Иначе
				Если Прав(ПромСтр, 1) = "," Тогда
					// Лишние хвостовые пробелы удаляем.
					ПромСтр = Лев(ПромСтр, СтрДлина(ПромСтр) - 1);
				Иначе
					// Лишние запятые заменяем пробелами.
					ПромСтр = Лев(ПромСтр, ПозицияЗапятой - 1) + " " + Сред(ПромСтр, ПозицияЗапятой + 1); 
				КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
		
	Возврат ВРег(ПромСтр);         
	
КонецФункции

Функция НайтиКолПокФОтч(Текст) Экспорт

	Для Сч = 1 По Текст.Количествострок() Цикл

		ТекИнд = Текст.Количествострок() - Сч + 1;
		Если Лев(Текст.ПолучитьСтроку(ТекИнд), 11) = "КолПокФОтч:" Тогда
			Возврат ТекИнд;
		КонецЕсли;

	КонецЦикла;

	Возврат -1;

КонецФункции

Функция ПолучитьКоличествоПоказателей(Текст) Экспорт
    
	КоличествоПоказателей = 0;

	Для НомСтр = 1 По Текст.КоличествоСтрок() Цикл

		ТекСтр = СокрЛ(Текст.ПолучитьСтроку(Текст.КоличествоСтрок() - НомСтр + 1));

		Если Лев(ТекСтр, 11) = "КолПокФОтч:" Тогда
			Прервать;
		КонецЕсли;

		Если СтрДлина(ТекСтр)<14 Тогда
			Продолжить;
		КонецЕсли;

		Если (Сред(ТекСтр, 1, 1) = "П") и (Сред(ТекСтр, 14, 1) = ":") Тогда

			ЭтоПоказатель = Ложь;

			Для НСимв = 2 По 13 Цикл

				ТекСимв = Сред(ТекСтр, НСимв, 1);

				Если (ТекСимв = "0") ИЛИ (ТекСимв = "1") ИЛИ (ТекСимв = "2") ИЛИ (ТекСимв = "3") ИЛИ (ТекСимв = "4")
					ИЛИ (ТекСимв = "5") ИЛИ (ТекСимв = "6") ИЛИ (ТекСимв = "7") ИЛИ (ТекСимв = "8") ИЛИ (ТекСимв = "9") Тогда

					ЭтоПоказатель = Истина;

				Иначе

					ЭтоПоказатель = Ложь;
					Прервать;

				КонецЕсли;

			КонецЦикла;

			Если ЭтоПоказатель Тогда
				КоличествоПоказателей = КоличествоПоказателей + 1;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
    	
	Возврат Формат(КоличествоПоказателей, "ЧН=; ЧГ=0");

КонецФункции

Процедура СтандартнаяПостобработкаТекстаВыгрузки(Текст) Экспорт
	
	КоличествоСтрок = Текст.КоличествоСтрок();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Текст.ПолучитьСтроку(Инд);
		ВхождениеДвоеточия = СтрНайти(ТекСтр, ":");
		Если ВхождениеДвоеточия <> 0 Тогда
			Текст.ЗаменитьСтроку(Инд, Лев(ТекСтр, ВхождениеДвоеточия) + ВРЕГ(СокрЛП(Сред(ТекСтр, ВхождениеДвоеточия + 1))));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСчетчикВыгруженныхДокументов(Организация, СчДок, ДатаДокумента = Неопределено, НомерКвартала = 0, ТипСчетчика = Неопределено) Экспорт
	
	МенЗап = РегистрыСведений.СчетчикиВыгрузок.СоздатьМенеджерЗаписи();
	МенЗап.Период = НачалоГода(?(ДатаДокумента = Неопределено, ТекущаяДатаСеанса(), ДатаДокумента));
	МенЗап.Организация = Организация;
	МенЗап.Тип = ?(ТипСчетчика = Неопределено, Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовВФормате300, ТипСчетчика);
	МенЗап.НомерКвартала = НомерКвартала;
	МенЗап.Значение = СчДок;
	МенЗап.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьСчетчикВыгруженныхФайлов(Организация, ТипСчетчика = Неопределено, Знач ДатаОтчета = Неопределено, ИФНС = "") Экспорт
	
	Если ТипСчетчика = "СчетчикФайловАлко" Тогда
		ТипСчетчика = Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайловАлко;
	КонецЕсли;
		
	Если ДатаОтчета = Неопределено Тогда
		ДатаОтчета = ТекущаяДатаСеанса();
	Иначе
		ДатаОтчета = НачалоГода(ДатаОтчета);
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СчетчикиВыгрузок.Значение КАК Значение
	                      |ИЗ
	                      |	РегистрСведений.СчетчикиВыгрузок КАК СчетчикиВыгрузок
	                      |ГДЕ
	                      |	СчетчикиВыгрузок.Тип = &Тип
	                      |	И СчетчикиВыгрузок.Организация = &Организация
	                      |	И СчетчикиВыгрузок.Период = &Период
						  |	И СчетчикиВыгрузок.ИФНС = &ИФНС");
	Запрос.УстановитьПараметр("Тип", ?(ТипСчетчика = Неопределено, Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайлов, ТипСчетчика));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", НачалоГода(ДатаОтчета));
	Запрос.УстановитьПараметр("ИФНС", ?(ТекущаяДатаСеанса() < '20070701000000', "", ИФНС));
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат ?(НЕ ЗначениеЗаполнено(Выборка.Значение), 0, Выборка.Значение) + 1;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
	
КонецФункции

Функция ОГРНсоответствуетТребованиям(Знач ОГРН) Экспорт
	Попытка
		ОГРНБезВедущихНулей = Формат(ОГРН,"ЧГ=0");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	ОГРН = Строка(ОГРНБезВедущихНулей);
	Если СтрДлина(ОГРН) <> 13 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина; // Проверка временно отключена.
	КонецЕсли;
	ОГРН12 = Число(Лев(ОГРН, 12));
	Если Прав(Формат(ОГРН12%11, "ЧН=0; ЧГ=0"), 1) = Прав(ОГРН, 1) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция СобратьАдрес(Знач СтруктураАдрес) Экспорт

	Возврат ""+ СтруктураАдрес.Страна + "," + СтруктураАдрес.Индекс + ","+ СтруктураАдрес.Регион + ","
	+ СтруктураАдрес.Район  + "," + СтруктураАдрес.Город  + ","+ СтруктураАдрес.НаселенныйПункт + ","
	+ СтруктураАдрес.Улица  + "," + СтруктураАдрес.Дом    + ","+ СтруктураАдрес.Корпус + "," + СтруктураАдрес.Квартира

КонецФункции

Функция ПредставлениеПериодаДокументаВыгрузкаРегламентированныхОтчетов(Док) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Док.ПериодПо) Тогда
		Возврат "";
	КонецЕсли;
	
	ГодДокСтрока = Формат(Год(Док.ПериодПо), "ЧГ=");
	МесяцДок = Месяц(Док.ПериодПо);
	Если МесяцДок = 1 Тогда
		Возврат "По итогам января " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 2 Тогда
		Возврат "По итогам февраля " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 3 Тогда
		Возврат "По итогам I квартала " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 4 Тогда
		Возврат "По итогам апреля " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 5 Тогда
		Возврат "По итогам мая " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 6 Тогда
		Возврат "По итогам II квартала " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 7 Тогда
		Возврат "По итогам июля " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 8 Тогда
		Возврат "По итогам августа " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 9 Тогда
		Возврат "По итогам III квартала " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 10 Тогда
		Возврат "По итогам октября " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 11 Тогда
		Возврат "По итогам ноября " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 12 Тогда
		Возврат "По итогам " + ГодДокСтрока + "г.";
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм(ИмяФайлаШаблона = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ШаблоныПечатиМашиночитаемыхФорм.ИмяФайлаШаблона,
	                      |	ШаблоныПечатиМашиночитаемыхФорм.Шаблон
	                      |ИЗ
	                      |	РегистрСведений.ШаблоныПечатиМашиночитаемыхФорм КАК ШаблоныПечатиМашиночитаемыхФорм");
	Если ИмяФайлаШаблона <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
						  |ГДЕ
						  |	ШаблоныПечатиМашиночитаемыхФорм.ИмяФайлаШаблона ПОДОБНО &ИмяФайлаШаблона
						  |УПОРЯДОЧИТЬ ПО
						  |	ШаблоныПечатиМашиночитаемыхФорм.ИмяФайлаШаблона УБЫВ";
		Запрос.УстановитьПараметр("ИмяФайлаШаблона", ИмяФайлаШаблона);
	КонецЕсли;
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ДобавитьПрефиксОрганизации(ДокументОбъект, Префикс) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(ДокументОбъект.Организация.Префикс) Тогда
		Префикс = "0";
	Иначе
		Префикс = ДокументОбъект.Организация.Префикс;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов) Экспорт
	
	Для Каждого ЭлементМассива Из МассивНепроверяемыхРеквизитов Цикл
				
		ПорядковыйНомер = МассивРеквизитов.Найти(ЭлементМассива);
		Если ПорядковыйНомер <> Неопределено Тогда
			МассивРеквизитов.Удалить(ПорядковыйНомер);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиОбласти(СписокВыводимыхНаПечатьОбластей, ТабличноеПоле, ПечатнаяФорма)
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		// В том случае, если в имени области не встречается строка "ПустаяСтрока", то
		// выводим область в результирующую таблицу и удаляем из списка.
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), ВРег("ПустаяСтрока")) = 0 Тогда
			
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
			
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
				
		// Создаем массив выводимых областей.
		ВыводимыеОбласти = Новый Массив();
		
		// Добавляем в массив выводимые области таблицы для того, 
		// чтобы проверить: поместятся ли они на текущий лист.
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		ОбластьОграничителиУмещаетсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ОбластьОграничители, Ложь);
		
		Пока ОбластьОграничителиУмещаетсяНаСтраницу Цикл
			
			// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
			ВыводимыеОбластиУмещаютсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ВыводимыеОбласти, Ложь);
			
			Если ВыводимыеОбластиУмещаютсяНаСтраницу Тогда
				ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
			Иначе
				ПечатнаяФорма.Вывести(ОбластьОграничители);
				ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;		
	
КонецПроцедуры

Функция ВывестиНаПечатьЛистРаздела(ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле)
	Перем ИмяЛиста;           
	Перем Ориентация;         
	Перем ИмяТабличногоПоля;  
	Перем ИмяОбластиТаблПоля; 
	Перем ВидПечати;          
	Перем ИмяОбластиМногострочнойЧасти;
	Перем ИмяРаздела;
	Перем МногострочныеЧасти;
	Перем Верх;
	Перем Низ;
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("ИмяРаздела",         ИмяРаздела);
	СтруктураПараметровЛиста.Свойство("МногострочнаяЧасть", ИмяОбластиМногострочнойЧасти);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
	
	Если ИмяОбластиМногострочнойЧасти = Неопределено Тогда
		СписокПечатныхФорм.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле));
		Возврат СписокПечатныхФорм;
	КонецЕсли;

    // Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для Каждого Область Из ТабличноеПоле.Области Цикл
		
		Если НЕ Тип(Область) = Тип("РисунокТабличногоДокумента") И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ВРЕГ(Область.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				СписокВыводимыхНаПечатьОбластей.Добавить(ПолучитьНизМногоСтрочнойЧасти(ТабличноеПоле, Область.Имя), Область.Имя);
			Иначе
				СписокВыводимыхНаПечатьОбластей.Добавить(Область.Низ, Область.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочныеЧасти = Новый Структура;
	Если ТипЗнч(ИмяОбластиМногострочнойЧасти) = Тип("Строка") Тогда
		МногострочныеЧасти.Вставить(ИмяОбластиМногострочнойЧасти, ПолучитьОбластиМногоСтрочнойЧасти(ТабличноеПоле, ИмяОбластиМногострочнойЧасти));
	Иначе
		Для Каждого Эл Из ИмяОбластиМногострочнойЧасти Цикл
			МногострочныеЧасти.Вставить(Эл, ПолучитьОбластиМногоСтрочнойЧасти(ТабличноеПоле, Эл));
		КонецЦикла;
	КонецЕсли;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	КоличествоСтрок = 0;
	
	Строки = Новый Массив;
	
	ПустойТабличныйДокумент = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(ПустойТабличныйДокумент, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	ПустыеСтрокиМногострочныхЧастей = Новый Массив(МногострочныеЧасти.Количество());
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		ПустыеСтрокиМногострочныхЧастей[НомСтр] = ПолучитьПустуюСтрокуМногострочнойЧасти(Эл, 0);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Если Эл.Значение.Количество() = 0 Тогда
			Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	КолВоЛистов = 0;
	Пока МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Цикл
		
		ПечатнаяФорма = Новый ТабличныйДокумент();
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		
		ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
		
		НомСтр = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Если Эл.Значение.Количество() = 0 Тогда
				Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 Тогда
				ОбластьОграничители = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				ОбластьПустаяСтрока = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;                                                                                   
			Если МногострочныеЧасти.Свойство(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление) Тогда
				Продолжить;
			КонецЕсли;
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
		КонецЦикла;
		
		Строки.Очистить();
		Инд = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Попытка
				Строки.Добавить(Эл.Значение.Получить(0).Значение);
			Исключение
				Строки.Добавить(ПустыеСтрокиМногострочныхЧастей[Инд]);
			КонецПопытки;
			Инд = Инд + 1;
		КонецЦикла;
		Строки.Добавить(ОбластьПустаяСтрока);
		Строки.Добавить(ОбластьОграничители);
		
		Ном = 1;
		Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма, Строки, Ложь) Цикл
			Ном = Ном + 1;
			НомерЭлементаТабличнойЧасти = 0;
			Для Каждого Эл Из МногострочныеЧасти Цикл
				Если Эл.Значение.Количество() > 0 Тогда
					ПечатнаяФорма.Вывести(Строки[НомерЭлементаТабличнойЧасти]);				
					НомерЭлементаТабличнойЧасти = НомерЭлементаТабличнойЧасти + 1;
				КонецЕсли;
			КонецЦикла;

			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) >= Ном Тогда
				НомерМнЧ = 0;
				Для Каждого Эл Из МногострочныеЧасти Цикл
					Попытка
						Строки[НомерМнЧ] = Эл.Значение.Получить(Ном - 1).Значение;
					Исключение
						Строки[НомерМнЧ] = ПустойТабличныйДокумент;
					КонецПопытки;
					НомерМнЧ = НомерМнЧ + 1;
				КонецЦикла;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		КоличествоВыводимыхСтрок = Ном - 1;
		// Защита против частей разделов, которые не помещаются на лист, если даже
		// выводить по одной строке из каждой многострочной части.
		Если КоличествоВыводимыхСтрок = 0 Тогда
			КоличествоВыводимыхСтрок = 1;
		КонецЕсли;
		
		ИтоговыйТаблДок = Новый ТабличныйДокумент;
		ИтоговыйТаблДок.ОтображатьЗаголовки = Ложь;
		ИтоговыйТаблДок.ОтображатьСетку     = Ложь;
		ИтоговыйТаблДок.ЧерноБелыйПросмотр  = Истина;
		ИтоговыйТаблДок.ЧерноБелаяПечать    = Истина;
		ИтоговыйТаблДок.Автомасштаб         = Истина;
		ИтоговыйТаблДок.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		ЗаполнитьЗначенияСвойств(ИтоговыйТаблДок, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

		КолвоЛистов = КолвоЛистов + 1;
		
		НомерМногострочнойЧасти = -1;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 
				  ИЛИ СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			Рез = ЭтоОднаИзМногострочныхЧастей(СписокВыводимыхНаПечатьОбластей.Получить(Сч), МногострочныеЧасти, ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление)));
			Если Рез <> Ложь ИЛИ СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				НомерМногострочнойЧасти = НомерМногострочнойЧасти + 1;
				ТаблЧастьВыведена = Истина;
				Если Рез = Ложь Тогда
					НомМнЧ = -1;
					Для Каждого ЭлСтр Из МногострочныеЧасти Цикл
						НомМнЧ = НомМнЧ + 1;
						Если НомМнЧ = НомерМногострочнойЧасти Тогда
							ИтоговыйТаблДок.Вывести(ЭлСтр.Значение.Получить(0).Значение);
							ЭлСтр.Значение.Удалить(0);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() >= Инд + 1 Тогда
							ИтоговыйТаблДок.Вывести(Рез.Получить(Инд).Значение);
						КонецЕсли;
					КонецЦикла;
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() > 0 Тогда
							Рез.Удалить(0);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ИтоговыйТаблДок.Вывести(ОбластьВыводимаяНаПечать);				
		КонецЦикла;
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		ОбластьОграничителиУмещаетсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти, Ложь);
		
		// Поиск "Правого присоединения" - секции с ИНН, КПП, номером страницы, находящейся справа.
		ТаблПоле = ТабличноеПоле.ПолучитьОбласть(Верх, , Низ, );
		ПравоеПрисоединение = Неопределено;
		Для НомерПравогоПрисоединения = 0 По 10 Цикл
			ПравоеПрисоединение = ТаблПоле.Области.Найти("ПравоеПрисоединение" + Формат(НомерПравогоПрисоединения, ""));
			Если ПравоеПрисоединение <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбластьОграничителиУмещаетсяНаСтраницу Тогда
			
			ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
			
			Пока ОбластьОграничителиУмещаетсяНаСтраницу Цикл
				
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				ВыводимыеОбластиУмещаютсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти);
				
				Если ВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ИтоговыйТаблДок.Вывести(ОбластьПустаяСтрока);
				Иначе
					ИтоговыйТаблДок.Вывести(ОбластьОграничители);
					Если ПравоеПрисоединение <> Неопределено Тогда
						ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
					КонецЕсли;
					ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
					
					Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
						ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
					КонецЕсли;
					Если КолВоЛистов <> 1 Тогда
						ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
					КонецЕсли;
					
					Если ВидПечати = "ПоказатьБланк" Тогда
						ИтоговыйТаблДок.Показать(СокрП(ЗаголовокФормы) + " (" + СокрП(ИмяЛиста) + ")");
					ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
						ИтоговыйТаблДок.Напечатать();
					Иначе
						СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ИтоговыйТаблДок.Вывести(ОбластьОграничители);
			Если ПравоеПрисоединение <> Неопределено Тогда
				ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
			КонецЕсли;
			ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
				ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
			КонецЕсли;

			Если КолВоЛистов <> 1 Тогда
				ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
			КонецЕсли;

			Если ВидПечати = "ПоказатьБланк" Тогда
				ИтоговыйТаблДок.Показать(СокрП(ЗаголовокФормы) + " (" + СокрП(ИмяЛиста) + ")");
			ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
				ИтоговыйТаблДок.Напечатать();
			Иначе
				СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
		
	Возврат СписокПечатныхФорм;
	
КонецФункции

Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле)
	Перем ИмяЛиста;           
	Перем Ориентация;         
	Перем ИмяТабличногоПоля;  
	Перем ИмяОбластиТаблПоля; 
	Перем ВидПечати;          
	Перем Верх;
	Перем Низ;

	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);

	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	// Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для каждого Область Из ТабличноеПоле.Области Цикл
		
		Если НЕ Тип(Область) = Тип("РисунокТабличногоДокумента") И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			// Добавляем в список имя области и ее верхнюю координату.
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	ВывестиОбласти(СписокВыводимыхНаПечатьОбластей, ТабличноеПоле, ПечатнаяФорма);
		
	Если ВидПечати = "ПоказатьБланк" Тогда
		ПечатнаяФорма.Показать(СокрП(ЗаголовокФормы) + " (" + СокрП(ИмяЛиста) + ")");
	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
		ПечатнаяФорма.Напечатать();
	КонецЕсли;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция ПолучитьНизМногострочнойЧасти(ТаблПоле, ИмяОбласти)
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(ТаблПоле);
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	Низ = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(Низ, ГруппыСтрок) Цикл
		Низ = Низ + 1;
	КонецЦикла;
	Возврат Низ - 1;
КонецФункции

Функция ПолучитьКартуИменованныхГруппСтрок(ТаблПоле)
	
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	
	Для Каждого Обл Из ТаблПоле.Области Цикл
		Если НЕ Тип(Обл) = Тип("РисунокТабличногоДокумента") И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = Обл.Верх;
			НовСтр.Низ = Обл.Низ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Карта;
	
КонецФункции

Функция ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок)
	Для Каждого ГруппаСтрок Из ГруппыСтрок Цикл
		Если ГруппаСтрок.Верх <= СледСтрока И ГруппаСтрок.Низ >= СледСтрока Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПолучитьОбластиМногострочнойЧасти(ТаблПоле, ИмяОбласти)
	
	ОбластиМногострочнойЧасти = Новый СписокЗначений;
	Если ИмяОбласти = Неопределено Тогда
		Возврат ОбластиМногострочнойЧасти;
	КонецЕсли;
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(ТаблПоле);
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	
	Шаг = ПолучитьШагСтрокиДляТабличногоПоля(Обл);
	
	Для Сч = 1 По Обл.ВысотаТаблицы / Шаг Цикл
		ОблВрем = Обл.ПолучитьОбласть((Сч - 1) * Шаг + 1, 0, Сч * Шаг, 0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, ТаблПоле.Области.Найти(ИмяОбласти).Верх + (Сч - 1) * Шаг);
	КонецЦикла;
	СледСтрока = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок) Цикл
		ОблВрем = ТаблПоле.ПолучитьОбласть(СледСтрока,0,СледСтрока + Шаг - 1,0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, СледСтрока);
		СледСтрока = СледСтрока + Шаг;
	КонецЦикла;
	Возврат ОбластиМногострочнойЧасти;
	
КонецФункции

Функция ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле)
	
	Для Инд = 0 По 9 Цикл
		ОблОпределениеВысоты = ТабличноеПоле.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, ""));
		Если ОблОпределениеВысоты <> Неопределено Тогда
			Возврат ТабличноеПоле.ПолучитьОбласть("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, "")).ВысотаТаблицы;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
	
КонецФункции

Функция ПолучитьПустуюСтрокуМногострочнойЧасти(МногострочныеЧасти, НомСтр)
	ПерваяСтрока = МногострочныеЧасти.Значение.Получить(НомСтр).Значение;
	ИтоговыйТабличныйДокумент = Новый ТабличныйДокумент;
	ИтоговыйТабличныйДокумент.Вывести(ПерваяСтрока);
	Для Каждого Область Из ИтоговыйТабличныйДокумент.Области Цикл
		Если (Тип(Область) = Тип("РисунокТабличногоДокумента") ИЛИ Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник) И Область.СодержитЗначение Тогда //И НЕ Область.Защита Тогда
			Область.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговыйТабличныйДокумент;
КонецФункции

Функция МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти)
	Максимум = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Максимум = Макс(Максимум, Эл.Значение.Количество());
	КонецЦикла;
	Возврат Максимум;
КонецФункции

Функция ЭтоОднаИзМногострочныхЧастей(ЭлСпКоорд, МногострочныеЧасти, ШагСтроки = 1)
	Коорд = ЭлСпКоорд.Значение;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Для Каждого ЭлСп Из Эл.Значение Цикл
			Если Число(ЭлСп.Представление) + ШагСтроки - 1 = Коорд Тогда
				Возврат Эл.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Процедура ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если (Тип(ТекОбл) = Тип("РисунокТабличногоДокумента") ИЛИ ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник) И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбнулитьФиксированныеЧастиНаЛистах(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ФиксируетсяНаПервомЛисте" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если (Тип(ТекОбл) = Тип("РисунокТабличногоДокумента") ИЛИ ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник) И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиНаПечатьЛистОбщая(ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле, мПечатныеФормы) Экспорт
	Перем ИмяЛиста;
	Перем Ориентация;
	Перем ВидПечати;
	Перем ИмяОбластиМногострочнойЧасти;
		
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	СтруктураПараметровЛиста.Вставить("ВидПечати", "Пакетная печать");		

	СтруктураПараметровЛиста.Вставить("ИмяРаздела", ИмяЛиста);	
		
	КартаСтраницРаздела = ПолучитьКартуЛистовРаздела(ТабличноеПоле);
	НомЛиста = 0;
	
	Для Каждого Стр Из КартаСтраницРаздела Цикл
		
		НомЛиста = НомЛиста + 1;
		СтруктураПараметровЛиста.Вставить("Верх", Стр.Верх);
		СтруктураПараметровЛиста.Вставить("Низ", Стр.Низ);
		
		МассивМногострочныхЧастей = Неопределено;
				
		СтруктураПараметровЛиста.Вставить("МногострочнаяЧасть", ПолучитьКартуМногострочныхСекцийЛиста(ТабличноеПоле, Стр.Верх, Стр.Низ));
				
		ПечатныеЛисты = ВывестиНаПечатьЛистРаздела(ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле);
				
		Для Каждого Эл Из ПечатныеЛисты Цикл
			мПечатныеФормы.Добавить(Эл.Значение, ИмяЛиста);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКартуЛистовРаздела(ТаблПоле)
	
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	КолСтрок = ТаблПоле.ВысотаТаблицы;
	НачСтрока = 1;
	Для Сч = 1 По КолСтрок Цикл
		Если ТаблПоле.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НачСтрока;
			НовСтр.Низ = Сч;
			НачСтрока = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	Если (Карта.Количество() = 0) ИЛИ (Карта.Получить(Карта.Количество() - 1).Низ <> КолСтрок) Тогда
		НовСтр = Карта.Добавить();
		НовСтр.Верх = ?(Карта.Количество() = 1, 1, Карта.Получить(Карта.Количество() - 2).Низ + 1);
		НовСтр.Низ = КолСтрок;
	КонецЕсли;
	Возврат Карта;
	
КонецФункции

Функция	ПолучитьКартуМногострочныхСекцийЛиста(ТаблДок, Верх, Низ)
	МассивМногострочныхЧастей = Новый Массив;
	Для Каждого Обл Из ТаблДок.Области Цикл
		Если НЕ Тип(Обл) = Тип("РисунокТабличногоДокумента") И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки И Обл.Верх >= Верх И Обл.Низ <= Низ И СтрНайти(ВРЕГ(Обл.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
			МассивМногострочныхЧастей.Добавить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
	Если МассивМногострочныхЧастей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивМногострочныхЧастей;
	КонецЕсли;
КонецФункции

Функция ПечататьРаздел(Форма, СтрокаРаздела, ЧтоИскать = Неопределено) Экспорт
	Перем КлючФизЛица;
	
	Если ЧтоИскать <> Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	
	// Если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим.
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		Форма.СтруктураРеквизитовФормы.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ЭтоКодПоказателяП(КодПок)
	
	Если СтрДлина(КодПок) < 13 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пок = СокрЛП(КодПок);
	
	Если Сред(Пок, 1, 1) = "П" Тогда
		
		Для Сч = 2 По 13 Цикл
			
			КодСимв = КодСимвола(Пок, Сч);
			
			Если НЕ ((КодСимв >= КодСимвола("0")) И (КодСимв <= КодСимвола("9"))) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ВывестиПоказатель(Текст, ЗначениеЯчейки, ИмяЯчейки, ПризнакФормата, ФорматВыгрузки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗначениеЯчейки) И ПризнакФормата <> "Д" Тогда
		Текст.ДобавитьСтроку(ИмяЯчейки + ":")
	Иначе
		Если ПризнакФормата = "Е" Тогда
			ТекстЯчейкиКакЧисло = Число(СокрЛ(ЗначениеЯчейки));
			Если ТекстЯчейкиКакЧисло = 0 Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":")
			Иначе
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,ФорматВыгрузки)));
			КонецЕсли;
		ИначеЕсли ПризнакФормата = "Д" Тогда 
			Если НЕ ЗначениеЗаполнено(Дата(ЗначениеЯчейки)) = 1 Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":");
			Иначе
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,"ДФ=dd.MM.yyyy; ДЛФ=D")));
			КонецЕсли;	
		Иначе
			Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда
				Знч = Формат(ЗначениеЯчейки, "ЧРД=.; ЧГ=0");
			Иначе
				Знч = ЗначениеЯчейки;
			КонецЕсли;
			Если ЗначениеЯчейки = "0" Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":")
			Иначе	
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + ВРЕГ(СокрЛП(Знч)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Функция РазделПоКодуПоказателя(КодПоказателя)
	Возврат Сред(КодПоказателя, 2, 5);
КонецФункции

Функция СтрокаПоКодуПоказателя(КодПоказателя)
	Возврат Сред(КодПоказателя, 9, 3);
КонецФункции

Функция ГрафаПоКодуПоказателя(КодПоказателя)
	КодГрафы = Строка(Число(Сред(КодПоказателя, 12, 2)));
	Возврат ?(КодГрафы = "0", "", КодГрафы);
КонецФункции

Процедура ПриЗакрытииРегламентированногоОтчета(Форма) Экспорт
		
	Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено И Форма.СтруктураРеквизитовФормы.мСохраненныйДок <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Форма.СтруктураРеквизитовФормы.мСохраненныйДок)) И Форма.СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект().Заблокирован() Тогда
		Форма.СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект().Разблокировать();
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено
	   И Форма.СтруктураРеквизитовФормы.мСохраненныйДок <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Форма.СтруктураРеквизитовФормы.мСохраненныйДок)) Тогда
	
		РазблокироватьДанныеДляРедактирования(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьРегионы(Регионы) Экспорт
	
	Регионы.Очистить();
	
	МакетРегионы = Обработки.ОбщиеОбъектыРеглОтчетности.ПолучитьМакет("Регионы");
	
	Для НомерСтроки = 1 По МакетРегионы.ВысотаТаблицы Цикл
		
		НовСтр = Регионы.Добавить();
		НовСтр.Наим = СокрЛП(МакетРегионы.Область(НомерСтроки, 1, НомерСтроки, 1).Текст);
		НовСтр.Код = СокрЛП(МакетРегионы.Область(НомерСтроки, 2, НомерСтроки, 2).Текст);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьНомерПачкиВыгруженныхФайловПФР(Организация, Год, НомерПачки) Экспорт
	
	МенЗап = РегистрыСведений.НумераторПачекПФР.СоздатьМенеджерЗаписи();
	МенЗап.Организация = Организация;
	МенЗап.Год = Год;
	МенЗап.НомерПачки = НомерПачки;
	МенЗап.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьНомерПачкиВыгруженныхФайловПФР(Организация, Год) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НумераторПачекПФР.НомерПачки КАК НомерПачки
	                      |ИЗ
	                      |	РегистрСведений.НумераторПачекПФР КАК НумераторПачекПФР
	                      |ГДЕ
	                      |	НумераторПачекПФР.Организация = &Организация
	                      |	И НумераторПачекПФР.Год = &Год");
						  
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Год", Год);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат ?(НЕ ЗначениеЗаполнено(Выборка.НомерПачки), 0, Выборка.НомерПачки);
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
	
КонецФункции

Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт

	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = СтрНайти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = СтрНайти(Буфер, " ");
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеОбъекты.Сокращение
	|ИЗ
	|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	|ГДЕ
	|	АдресныеОбъекты.Сокращение = &Сокращение";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
		Возврат СтрокаЭлемента;
	Иначе
		АдресноеСокращение = Сред(СтрокаЭлемента, ПозицияПослПробела + 1);
		Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
	КонецЕсли;
	
КонецФункции

Процедура ПослеВставкиДополнительнойСтраницыНаСервере(Форма, ИмяВставляемойСтраницы, ПерейтиНаВставленныйЛист = Истина) Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеВставкиДополнительнойСтраницы(Форма, ИмяВставляемойСтраницы, ПерейтиНаВставленныйЛист);

КонецПроцедуры

Процедура УдалитьДополнительнуюСтраницуНаСервере(Форма, ИмяТекущейСтраницыПанели = Неопределено) Экспорт
	Перем ТаблицаСтраницРаздела;
        	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	// Если одна страница в разделе, то ее удалять нельзя.
	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = Форма[ИмяТекТабличногоПоля];

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);
		
		// Очищаем редактируемые ячейки удаляемой страницы.
		Форма.ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
				
		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();

		Если КолвоДопСтраниц > 0 Тогда
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];

			// Для страниц многостраничного раздела, содержащих многострочную часть,
			// восстанавливаем структуру дополнительных строк.
			//
			// Предварительно проверим, содержит ли страница многострочные части.

			КолвоМногострочныхБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе").Количество();
			
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "СохранятьМногострКакТЗ");

			Если КолвоМногострочныхБлоков > 0 Тогда
				
				ДанныеДопСтрокРаздела = СтрТаблицаСтраницыЗамена.ДанныеДопСтрок;
				
				Если (ТипЗнч(ДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
					И (ДанныеДопСтрокРаздела.Количество() > 0)
					И (ДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
					
					ДанныеДопСтрокРаздела = ДанныеДопСтрокРаздела[0].Значение;
					
				Иначе
					
					ДанныеДопСтрокРаздела = Неопределено;
					
				КонецЕсли;
				
			Иначе
				ДанныеДопСтрокРаздела = Неопределено;
			КонецЕсли;

			Если ДанныеДопСтрокРаздела <> Неопределено Тогда

				Если (КолвоМногострочныхБлоков > 0) И (НЕ СохранятьМногострКакТЗ) Тогда

					Для Каждого ГруппаСтрок Из ДанныеДопСтрокРаздела Цикл
						ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
						ДанныеГруппыСтрок = ГруппаСтрок.Значение;
						
						ПромТаблицаГруппыСтрок = Форма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
						
						КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);

						// Заменяем таблицу значений с данными текущей страницы.
						КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, Форма[ИмяГруппыДопСтрок]);
						
						// Выводим в табличный документ строки многострочной группы.
						Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
						
					КонецЦикла;

				ИначеЕсли (КолвоМногострочныхБлоков > 0) И (СохранятьМногострКакТЗ) Тогда

					ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
					
					ПромТаблицаДопСтрокРаздела = Форма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
						
					КопироватьДанныеФормы(ДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, Форма[ИмяГруппыДопСтрок]);
					
					// Выводим строки многострочной группы замещающей страницы.
					Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

				КонецЕсли;
				
			КонецЕсли;

			ПредставлениеДанных = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "ПредставлениеДанных");
			// Восстановим данные замещаемой страницы.
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные[0].Значение;

			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл
				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;

				Если ПредставлениеДанных Тогда
					
					Если Форма.ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Тогда
						Продолжить;
					КонецЕсли;

				КонецЕсли;

				Попытка
					ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;

			КонецЦикла;
			
			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
			
		КонецЕсли;
        				
		Форма.РасчетНаСервере(ИмяТекущейСтраницыПанели);
		
		Форма.Модифицированность = Истина;

	КонецЕсли;
   	
КонецПроцедуры

Процедура ВставитьДополнительнуюСтраницуНаСервере(Форма, ИмяТекущейСтраницыПанели = Неопределено, СохранятьДанныеТекущейСтраницы = Истина) Экспорт

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;
   	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз=РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз<>0 И Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			
			Сообщение.Сообщить();
                
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = Форма[ИмяТекТабличногоПоля];
	
	Если СохранятьДанныеТекущейСтраницы Тогда
		// Сначала сохраним данные текущей страницы.
		// Если на листе есть многострочность, то удалим ее.
		РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Истина);
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
	КонецЕсли;

	// Найдем активную страницу.
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы.
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
        						                                   
	КонецЕсли;
	
	// Добавляем новую страницу.
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию.
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы.
	СтрНоваяСтраница.АктивнаяСтраница   = Истина;
	
	КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе").Количество();
	
	Если КолМногострочныхЧастей = 0 Тогда
		Форма.ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	Если КолМногострочныхЧастей = 0 Тогда
		Форма.РасчетНаСервере(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
    		
КонецПроцедуры

Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование  КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.Ссылка <> &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	СписокОП = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		СписокОП.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОП;

КонецФункции

Функция ПолучитьСписокВыбораИзОбщихСписков(ИмяСписка) Экспорт
	
	МакетСоставаПоказателей = Обработки.ОбщиеОбъектыРеглОтчетности.ПолучитьМакет("ОбщиеСпискиВыбора");
	Область = МакетСоставаПоказателей.Области[ИмяСписка];
	
	ВерхОбласти = Область.Верх;
	НизОбласти = Область.Низ;
	
	ТаблицаСписка = Новый ТаблицаЗначений;
	ТаблицаСписка.Колонки.Добавить("Код", , , МакетСоставаПоказателей.Область(ВерхОбласти, 1).ШиринаКолонки);
	ТаблицаСписка.Колонки.Добавить("Название", , , МакетСоставаПоказателей.Область(ВерхОбласти, 2).ШиринаКолонки);
	ТаблицаСписка.Колонки.Добавить("РезультатПроверки", , , 0);
	
	Для Инд = ВерхОбласти По НизОбласти Цикл
		НовСтрока = ТаблицаСписка.Добавить();
		НовСтрока.Код               = СокрП(МакетСоставаПоказателей.Область(Инд, 1).Текст);
		НовСтрока.Название          = СокрП(МакетСоставаПоказателей.Область(Инд, 2).Текст);
		НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(Инд, 3).Текст);
	КонецЦикла;
	
	Возврат ТаблицаСписка;
	
КонецФункции

Процедура УстановитьПримечаниеНаТитульныхЛистахГруппыАлкогольныхДеклараций(Форма) Экспорт
	
	мТитульный = Форма.ТабличныйДокумент;

	СохрДопИнфо1 = мТитульный.Области.ДопИнфо1.Значение;
	
	ТекстПрим = "";
	ПредставляетсяЗнач = Число(Форма.Представляется);
	Если ПредставляетсяЗнач = 1 Тогда
		ТекстПрим = "с учетом обособленных подразделений";
	ИначеЕсли ПредставляетсяЗнач = 2 Тогда
		ТекстПрим = "без учета обособленных подразделений";
	ИначеЕсли ПредставляетсяЗнач = 3 Тогда
		ТекстПрим = "за подразделение из того же региона";
	ИначеЕсли ПредставляетсяЗнач = 4 Тогда
		ТекстПрим = "за подразделение из другого региона";
	КонецЕсли;

	Если ЗначениеЗаполнено(мТитульный.Области.ТипОрг1.Значение) Тогда
		
		мТитульный.Области.ДопИнфо1.Значение = ТекстПрим;
		Форма.Элементы.Представляется.Видимость = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(мТитульный.Области.ТипОрг2.Значение)
	      Или НЕ ЗначениеЗаполнено(мТитульный.Области.ТипОрг1.Значение) Тогда

		мТитульный.Области.ДопИнфо1.Значение = "";
		Форма.Элементы.Представляется.Видимость = Ложь;
		
	КонецЕсли;
	
	Если НЕ СохрДопИнфо1 = мТитульный.Области.ДопИнфо1.Значение Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруТаблицыРО(ТаблицаИсточник) Экспорт

	Результат = Новый ТаблицаЗначений;
	Для каждого Стр Из ТаблицаИсточник.Колонки Цикл
		Результат.Колонки.Добавить(Стр.Имя, Стр.ТипЗначения);
	КонецЦикла;
	Возврат Результат;

КонецФункции

Функция ПринтерДоступен() Экспорт
	
	ТаблДок = Новый ТабличныйДокумент;
	Возврат ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТаблДок, ТаблДок, Ложь);
	
КонецФункции

Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаФормыРСВ1(ПоказателиОтчета, СтруктураДанныхТитульный) Экспорт
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "НомРег1" Тогда
			СтруктураДанныхТитульный.Вставить("НомРег");
			Для Ном = 1 По 14 Цикл
				СтруктураДанныхТитульный.НомРег = СокрЛП(СтруктураДанныхТитульный.НомРег) + ПоказателиТаблПоле["НомРег" + Ном];
				СтруктураДанныхТитульный.Удалить("НомРег" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомТФОМС1" Тогда
			СтруктураДанныхТитульный.Вставить("НомТФОМС");
			Для Ном = 1 По 15 Цикл
				СтруктураДанныхТитульный.НомТФОМС = СокрЛП(СтруктураДанныхТитульный.НомТФОМС) + ПоказателиТаблПоле["НомТФОМС" + Ном];
				СтруктураДанныхТитульный.Удалить("НомТФОМС" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ИНН1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН = СокрЛП(СтруктураДанныхТитульный.ИНН) + ПоказателиТаблПоле["ИНН" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН = Сред(СтруктураДанныхТитульный.ИНН, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП = СокрЛП(СтруктураДанныхТитульный.КПП) + ПоказателиТаблПоле["КПП" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРН1" Тогда
			СтруктураДанныхТитульный.Вставить("ОГРН");
			Для Ном = 1 По 15 Цикл
				СтруктураДанныхТитульный.ОГРН = СокрЛП(СтруктураДанныхТитульный.ОГРН) + ПоказателиТаблПоле["ОГРН" + Ном];
				СтруктураДанныхТитульный.Удалить("ОГРН" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРНИП1" Тогда
			СтруктураДанныхТитульный.Вставить("ОГРНИП");
			Для Ном = 1 По 15 Цикл
				СтруктураДанныхТитульный.ОГРНИП = СокрЛП(СтруктураДанныхТитульный.ОГРНИП) + ПоказателиТаблПоле["ОГРНИП" + Ном];
				СтруктураДанныхТитульный.Удалить("ОГРНИП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ТелОрганизации1" Тогда
			СтруктураДанныхТитульный.Вставить("ТелОрганизации");
			Для Ном = 1 По 15 Цикл
				Если ПоказателиТаблПоле.Свойство("ТелОрганизации" + Ном) Тогда
					СтруктураДанныхТитульный.ТелОрганизации = СокрЛП(СтруктураДанныхТитульный.ТелОрганизации) + ПоказателиТаблПоле["ТелОрганизации" + Ном];
					СтруктураДанныхТитульный.Удалить("ТелОрганизации" + Ном);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКАТО1" Тогда
			СтруктураДанныхТитульный.Вставить("ОКАТО");
			Для Ном = 1 По 11 Цикл
				СтруктураДанныхТитульный.ОКАТО = СокрЛП(СтруктураДанныхТитульный.ОКАТО) + ПоказателиТаблПоле["ОКАТО" + Ном];
				СтруктураДанныхТитульный.Удалить("ОКАТО" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКВЭД1" Тогда
			СтруктураДанныхТитульный.Вставить("ОКВЭД");
			Для Ном = 1 По 8 Цикл
				СтруктураДанныхТитульный.ОКВЭД = СокрЛП(СтруктураДанныхТитульный.ОКВЭД) + ПоказателиТаблПоле["ОКВЭД" + Ном];
				СтруктураДанныхТитульный.Удалить("ОКВЭД" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКПО1" Тогда
			СтруктураДанныхТитульный.Вставить("ОКПО");
			Для Ном = 1 По 10 Цикл
				СтруктураДанныхТитульный.ОКПО = СокрЛП(СтруктураДанныхТитульный.ОКПО) + ПоказателиТаблПоле["ОКПО" + Ном];
				СтруктураДанныхТитульный.Удалить("ОКПО" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКОПФ1" Тогда
			СтруктураДанныхТитульный.Вставить("ОКОПФ");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.ОКОПФ = СокрЛП(СтруктураДанныхТитульный.ОКОПФ) + ПоказателиТаблПоле["ОКОПФ" + Ном];
				СтруктураДанныхТитульный.Удалить("ОКОПФ" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКФС1" Тогда
			СтруктураДанныхТитульный.Вставить("ОКФС");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.ОКФС = СокрЛП(СтруктураДанныхТитульный.ОКФС) + ПоказателиТаблПоле["ОКФС" + Ном];
				СтруктураДанныхТитульный.Удалить("ОКФС" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки) + ПоказателиТаблПоле["НомерКорректировки" + Ном];
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период" + Ном];
				СтруктураДанныхТитульный.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КолЗастрахованных1" Тогда
			СтруктураДанныхТитульный.Вставить("КолЗастрахованных");
			Для Ном = 1 По 6 Цикл
				СтруктураДанныхТитульный.КолЗастрахованных = СокрЛП(СтруктураДанныхТитульный.КолЗастрахованных) + ПоказателиТаблПоле["КолЗастрахованных" + Ном];
				СтруктураДанныхТитульный.Удалить("КолЗастрахованных" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СрСписЧисл1" Тогда
			СтруктураДанныхТитульный.Вставить("СрСписЧисл");
			Для Ном = 1 По 6 Цикл
				Если ПоказателиТаблПоле.Свойство("СрСписЧисл" + Ном) Тогда
					СтруктураДанныхТитульный.СрСписЧисл = СокрЛП(СтруктураДанныхТитульный.СрСписЧисл) + ПоказателиТаблПоле["СрСписЧисл" + Ном];
					СтруктураДанныхТитульный.Удалить("СрСписЧисл" + Ном);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Тариф1" Тогда
			СтруктураДанныхТитульный.Вставить("Тариф");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Тариф = СокрЛП(СтруктураДанныхТитульный.Тариф) + ПоказателиТаблПоле["Тариф" + Ном];
				СтруктураДанныхТитульный.Удалить("Тариф" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СоставленаНа1" Тогда
			СтруктураДанныхТитульный.Вставить("СоставленаНа");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.СоставленаНа = СокрЛП(СтруктураДанныхТитульный.СоставленаНа) + ПоказателиТаблПоле["СоставленаНа" + Ном];
				СтруктураДанныхТитульный.Удалить("СоставленаНа" + Ном);
			КонецЦикла;
			// В форме с 1 кв. 2014 г. предусмотрено 6 ячеек ("на ХХХХХХ страницах")
			// вместо 3 ячеек ("на ХХХ страницах"), предусмотренных в ранних формах.
			Попытка
				Для Ном = 4 По 6 Цикл
					СтруктураДанныхТитульный.СоставленаНа = СокрЛП(СтруктураДанныхТитульный.СоставленаНа) + ПоказателиТаблПоле["СоставленаНа" + Ном];
					СтруктураДанныхТитульный.Удалить("СоставленаНа" + Ном);
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертироватьДанныеРаздела12СтарогоОбразцаФормыРСВ1(Раздел12) Экспорт
	
	Для Каждого СтраницаРаздела12 Из Раздел12 Цикл
		
		Если ТипЗнч(СтраницаРаздела12.Данные) = Тип("Структура") Тогда
			
			СтраницаРаздела12 = СтраницаРаздела12.Данные;
			
		ИначеЕсли ТипЗнч(СтраницаРаздела12.Данные) = Тип("СписокЗначений") Тогда
			
			СтраницаРаздела12 = СтраницаРаздела12.Данные[0].Значение;
			
		КонецЕсли;
		
		Если СтраницаРаздела12.Свойство("П000200001001_1") Тогда
			
			СтраницаРаздела12.Вставить("П000200001001", СокрЛП(СтраницаРаздела12.П000200001001_1
											  	  			 + СтраницаРаздела12.П000200001001_2));
			Для Ном = 1 По 2 Цикл
				СтраницаРаздела12.Удалить("П000200001001_" + Ном);
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

Процедура КонвертироватьДанныеРаздела2СтарогоОбразцаФормыРСВ1(Раздел2) Экспорт
	
	Для Каждого СтраницаРаздела2 Из Раздел2 Цикл
		
		Если ТипЗнч(СтраницаРаздела2.Данные) = Тип("Структура") Тогда
			
			СтраницаРаздела2 = СтраницаРаздела2.Данные;
			
		ИначеЕсли ТипЗнч(СтраницаРаздела2.Данные) = Тип("СписокЗначений") Тогда
			
			СтраницаРаздела2 = СтраницаРаздела2.Данные[0].Значение;
			
		КонецЕсли;
		
		Если СтраницаРаздела2.Свойство("П000200001002") Тогда
			
			СтраницаРаздела2.Вставить(
				"П000200001001", СокрЛП(СтраницаРаздела2.П000200001001 + СтраницаРаздела2.П000200001002));
			СтраницаРаздела2.Удалить("П000200001002");
			
		КонецЕсли;
		
		// В форме с 1 кв. 2014 г. имя показателя изменено,
		// т.к. появился "Раздел21" (вместо "Раздел2" в форме 2013 г.)
		Если СтраницаРаздела2.Свойство("П000210001002") Тогда
			
			СтраницаРаздела2.Вставить(
				"П000210001001", СокрЛП(СтраницаРаздела2.П000210001001 + СтраницаРаздела2.П000210001002));
			СтраницаРаздела2.Удалить("П000210001002");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет структуру данных раздела регламентированного отчета
// значениями из данных дополнительных строк.
//
// Параметры:
//  СтруктураДанных - Структура - структура данных раздела рег. отчета.
//  ДанныеДопСтрок  - ДанныеФормыКоллекция или Массив элементов ДанныеФормыКоллекция - данные
//                    дополнительных строк раздела рег. отчета.
//
Процедура ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(СтруктураДанных, ДанныеДопСтрок) Экспорт
	
	Если ТипЗнч(ДанныеДопСтрок) <> Тип("Массив") Тогда
		
		МассивДанныхДопСтрок = Новый Массив;
		МассивДанныхДопСтрок.Добавить(ДанныеДопСтрок);
		
	Иначе
		
		МассивДанныхДопСтрок = ДанныеДопСтрок;
		
	КонецЕсли;
	
	Для Каждого ДопСтроки Из МассивДанныхДопСтрок Цикл
		
		ТЗ = ДанныеФормыВЗначение(ДопСтроки, Тип("ТаблицаЗначений"));
		
		Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
			
			Для ИндексТЗ = 0 По ТЗ.Количество() - 1 Цикл
				
				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
					
					СтруктураДанных.Вставить(
						КолонкаТЗ.Имя + "_" + Формат(ИндексТЗ + 1, "ЧГ="), ТЗ[ИндексТЗ][КолонкаТЗ.Имя]);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает результат сравнения значений из данных дополнительных строк
// со значениями структуры данных раздела регламентированного отчета.
//
// Параметры:
//  СтруктураДанных - Структура - структура данных раздела рег. отчета.
//  ДанныеДопСтрок  - ДанныеФормыКоллекция или Массив элементов ДанныеФормыКоллекция - данные
//                    дополнительных строк раздела рег. отчета.
//
// Возвращаемое значение:
//  Истина - значения из данных доп. строк равны соотв. значениям структуры данных раздела;
//   Ложь  - хотя бы одно значение из данных доп. строк не равно соотв. значению структуры данных раздела.
//
Функция ЗначенияИзДопСтрокСоответствуютСтруктуреДанныхРаздела(СтруктураДанных, ДанныеДопСтрок) Экспорт
	
	Если ТипЗнч(ДанныеДопСтрок) <> Тип("Массив") Тогда
		
		МассивДанныхДопСтрок = Новый Массив;
		МассивДанныхДопСтрок.Добавить(ДанныеДопСтрок);
		
	Иначе
		
		МассивДанныхДопСтрок = ДанныеДопСтрок;
		
	КонецЕсли;
	
	Для Каждого ДопСтроки Из МассивДанныхДопСтрок Цикл
		
		ТЗ = ДанныеФормыВЗначение(ДопСтроки, Тип("ТаблицаЗначений"));
		
		Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
			
			Для ИндексТЗ = 0 По ТЗ.Количество() - 1 Цикл
				
				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
					
					ТекЗначение = Неопределено;
					
					Если СтруктураДанных.Свойство(КолонкаТЗ.Имя + "_" + Формат(ИндексТЗ + 1, "ЧГ="), ТекЗначение) Тогда
						
						Если ТекЗначение = ТЗ[ИндексТЗ][КолонкаТЗ.Имя] Тогда
							
							Продолжить;
							
						Иначе
							
							Возврат Ложь;
							
						КонецЕсли;
						
					Иначе
						
						Возврат Ложь;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПлательщикТорговогоСбораЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	ПризнакПлательщикаТС = Ложь;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакПлательщикаТорговогоСбораЗаПериод(
		Организация, НачалоПериода, КонецПериода, ПризнакПлательщикаТС);
	
	Возврат ПризнакПлательщикаТС;
	
КонецФункции

Функция ОбъектНалогообложенияУСНЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	ОбъектНалУСН = Неопределено;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьОбъектНалогообложенияУСНЗаПериод(
		Организация, НачалоПериода, КонецПериода, ОбъектНалУСН);
	
	Возврат ОбъектНалУСН;
	
КонецФункции

// Функция возвращает признак - является ли индивидуальный предприниматель работодателем для наемных сотрудников.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//  Истина - ИП является работодателем;
//  Ложь   - ИП не является работодателем.
//
Функция ИПИспользуетТрудНаемныхРаботников(Организация) Экспорт
	
	ИПИспользуетТрудНаемныхРаботников = Ложь;
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакИспользованияИПТрудаНаемныхРаботников(
		Организация, ИПИспользуетТрудНаемныхРаботников);
	Возврат ИПИспользуетТрудНаемныхРаботников;
	
КонецФункции

// Устанавливает индекс картинки в регистре сведений "Журнал отчетов статусы"
// (актуализирует значение индекса картинки в случае присоединения/удаления файлов).
//
// Параметры:
//  ВладелецФайлов - ДокументСсылка, СправочникСсылка - ссылка на объект
//                   в регистре сведений "Журнал отчетов статусы";
//  Действие       - Строка - "ПрисоединениеФайла" или "УдалениеФайла".
//
Процедура УстановитьИндексКартинкиОтчета(ВладелецФайлов, Действие = "")
	
	Если ЗначениеЗаполнено(ВладелецФайлов) И ЗначениеЗаполнено(Действие) Тогда
		
		ВыборкаЖОС = РегистрыСведений.ЖурналОтчетовСтатусы.Выбрать(
		Новый Структура("Ссылка", ВладелецФайлов));
		
		Если ВыборкаЖОС.Следующий() Тогда
			
			ЗаписьЖОС = ВыборкаЖОС.ПолучитьМенеджерЗаписи();
			
			Если Действие = "ПрисоединениеФайла" Тогда
				
				ЗаписьЖОС.ИндексКартинки = ?(ЗаписьЖОС.ПометкаУдаления, 1, 3);
				
			ИначеЕсли Действие = "УдалениеФайла" Тогда
				
				ЗаписьЖОС.ИндексКартинки = ?(ЗаписьЖОС.ПометкаУдаления, 0, 2);
				
			КонецЕсли;
			
			ЗаписьЖОС.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак наличия присоединенных файлов в регистре сведений "Журнал отправок в
// контролирующие органы" (актуализирует значение признака в случае присоединения/удаления файлов).
//
// Параметры:
//  ВладелецФайлов - ДокументСсылка, СправочникСсылка - ссылка на объект
//                   в регистре сведений "Журнал отправок в контролирующие органы";
//  Действие       - Строка - "ПрисоединениеФайла" или "УдалениеФайла".
//
Процедура УстановитьПризнакНаличияФайловПрисоединенныхКУведомлению(ВладелецФайлов, Действие = "")
	
	Если ЗначениеЗаполнено(ВладелецФайлов) И ЗначениеЗаполнено(Действие) Тогда
		
		ВыборкаЖОКО = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.Выбрать(
		Новый Структура("Ссылка", ВладелецФайлов));
		
		Если ВыборкаЖОКО.Следующий() Тогда
			
			ЗаписьЖОКО = ВыборкаЖОКО.ПолучитьМенеджерЗаписи();
			
			Если Действие = "ПрисоединениеФайла" Тогда
				
				ЗаписьЖОКО.ЕстьПриcоединенныйФайл = Истина;
				
			ИначеЕсли Действие = "УдалениеФайла" Тогда
				
				ЗаписьЖОКО.ЕстьПриcоединенныйФайл = Ложь;
				
			КонецЕсли;
			
			ЗаписьЖОКО.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции механизма автоматического заполнения.

Процедура ВставитьПоказательВСтруктуру(СтруктураПоказателей, ИмяПоказателя, ПризнакАвтозаполнения, ПризнакРасшифровки) Экспорт
	
	// Вставляем в структуру новый показатель.
	СтруктураПоказателей.Вставить(ИмяПоказателя, Новый Массив(2));	
	// Устанавливаем признак автозаполнения показателя.
	СтруктураПоказателей[ИмяПоказателя][0] = ПризнакАвтозаполнения;
	// Устанавливаем признак расшифровки показателя.
	СтруктураПоказателей[ИмяПоказателя][1] = ПризнакРасшифровки;
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхУведомления(Форма, ПараметрыОтчета = Неопределено) Экспорт
	
	Попытка
		СтруктураРеквизитов = Форма.СтруктураРеквизитов;
	Исключение
		Возврат;
	КонецПопытки;
	
	Форма_ИмяФормы = СтрЗаменить(Форма.ИмяФормы, "Внешний", "");
	АвтозаполняемыеПоказателиОтчета = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(Сред(Лев(Форма_ИмяФормы, СтрНайти(Форма_ИмяФормы, ".Форма.") - 1), 7), Сред(Форма_ИмяФормы, СтрНайти(Форма_ИмяФормы, ".Форма.") + 7), ПараметрыОтчета);
	
	Если АвтозаполняемыеПоказателиОтчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого АвтозаполняемыйПоказательОтчета Из АвтозаполняемыеПоказателиОтчета Цикл
		Если АвтозаполняемыйПоказательОтчета.Значение[0] Тогда
			СтруктураРеквизитов.ОтображатьКнопкуЗаполнить = Истина;
			Если СтруктураРеквизитов.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если АвтозаполняемыйПоказательОтчета.Значение[1] Тогда
			СтруктураРеквизитов.ОтображатьКнопкуРасшифровать = Истина;
			Если СтруктураРеквизитов.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьТаблицыВариантовЗаполненияУведомления(Форма, АвтозаполняемыеПоказателиОтчета);
КонецПроцедуры

Процедура ОбновитьТаблицыВариантовЗаполненияУведомления(Форма, АвтозаполняемыеПоказателиОтчета)
	
	Для Каждого АвтозаполняемыйПоказатель Из АвтозаполняемыеПоказателиОтчета Цикл
		
		Если АвтозаполняемыйПоказатель.Значение[0] Тогда
			
			НайденноеЗначение = Новый Массив;
			
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
				Форма, "мТаблицаСоставПоказателей") Тогда
				
				ТаблицаСоставПоказателей = Форма.мТаблицаСоставПоказателей;
				
			ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
				Форма.СтруктураРеквизитовФормы, "АдресВоВремХранилищеТаблицаСоставПоказателей") Тогда
				
				ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
				
			КонецЕсли;
			
			НайденноеЗначение = ТаблицаСоставПоказателей.НайтиСтроки(
				Новый Структура("КодПоказателяПоСоставу", АвтозаполняемыйПоказатель.Ключ));
			
			Если НайденноеЗначение.Количество() > 0 Тогда
				
				Для Каждого Элемент Из НайденноеЗначение Цикл
					
					Для Каждого ТаблВариантовЗаполн Из Форма["ТаблицаВариантыЗаполнения" + Элемент.ИмяПоляТаблДокумента] Цикл
						
						ТаблицаВариантыЗаполнения = ТаблВариантовЗаполн.ТаблицаВариантовЗаполнения;
						
						НайденныеПоказатели = ТаблицаВариантыЗаполнения.НайтиСтроки(
						Новый Структура("КодПоказателя", АвтозаполняемыйПоказатель.Ключ));
						
						Если НайденныеПоказатели.Количество() = 0 Тогда
							
							СтрТабл = ТаблицаВариантыЗаполнения.Добавить();
							СтрТабл.КодПоказателя = АвтозаполняемыйПоказатель.Ключ;
							СтрТабл.ВариантЗаполнения = 3;
							
						ИначеЕсли НЕ (НайденныеПоказатели[0].ВариантЗаполнения = 1
							ИЛИ НайденныеПоказатели[0].ВариантЗаполнения = 2
							ИЛИ НайденныеПоказатели[0].ВариантЗаполнения = 4) Тогда
							
							НайденныйПоказатель = НайденныеПоказатели[0];
							
							НайденныйПоказатель.ВариантЗаполнения = 3;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСоставПоказателей(Форма, ИмяМакета) Экспорт 
	
	ЭтаФормаИмя = Форма.ИмяФормы;
	МакетСоставаПоказателей = Отчеты[Форма.Объект.ИмяОтчета].ПолучитьМакет(ИмяМакета);
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		
		ИмяСтраницы   = ТекОбласть.Имя;
		
		Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			НоваяСтрока = Форма.мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			Форма.мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчета(Форма, ПараметрыОтчета = Неопределено) Экспорт
	
	Форма_ИмяФормы = СтрЗаменить(Форма.ИмяФормы, "Внешний", "");
	АвтозаполняемыеПоказателиОтчета = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(Сред(Лев(Форма_ИмяФормы, СтрНайти(Форма_ИмяФормы, ".Форма.") - 1), 7), Сред(Форма_ИмяФормы, СтрНайти(Форма_ИмяФормы, ".Форма.") + 7), ПараметрыОтчета);
	
	Если ТипЗнч(ПараметрыОтчета) = Тип("Структура") Тогда
		Если ПараметрыОтчета.Свойство("АвтозаполняемыеПоказатели") Тогда
			ПараметрыОтчета.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказателиОтчета);
		КонецЕсли;
	КонецЕсли;
	
	Если АвтозаполняемыеПоказателиОтчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого АвтозаполняемыйПоказательОтчета Из АвтозаполняемыеПоказателиОтчета Цикл
		
		Если АвтозаполняемыйПоказательОтчета.Значение[0] Тогда
			
			Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			
			Если Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
											
		КонецЕсли;	
		
		Если АвтозаполняемыйПоказательОтчета.Значение[1] Тогда
			
			Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Истина;
			
			Если Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
								
		КонецЕсли;	
			
	КонецЦикла;
	
	ОбновитьТаблицыВариантовЗаполнения(Форма, АвтозаполняемыеПоказателиОтчета);
			
КонецПроцедуры

Процедура ОбновитьТаблицыВариантовЗаполнения(Форма, АвтозаполняемыеПоказателиОтчета)
	
	Для Каждого АвтозаполняемыйПоказатель Из АвтозаполняемыеПоказателиОтчета Цикл
		
		Если АвтозаполняемыйПоказатель.Значение[0] Тогда
			
			НайденноеЗначение = Новый Массив;
			
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
				Форма, "мТаблицаСоставПоказателей") Тогда
				
				ТаблицаСоставПоказателей = Форма.мТаблицаСоставПоказателей;
				
			ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
				Форма.СтруктураРеквизитовФормы, "АдресВоВремХранилищеТаблицаСоставПоказателей") Тогда
				
				ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
				
			КонецЕсли;
			
			НайденноеЗначение = ТаблицаСоставПоказателей.НайтиСтроки(
				Новый Структура("КодПоказателяПоСоставу", АвтозаполняемыйПоказатель.Ключ));
			
			Если НайденноеЗначение.Количество() > 0 Тогда
				
				Для Каждого Элемент Из НайденноеЗначение Цикл
					
					Для Каждого ТаблВариантовЗаполн Из Форма["ТаблицаВариантыЗаполнения" + Элемент.ИмяПоляТаблДокумента] Цикл
						
						ТаблицаВариантыЗаполнения = ТаблВариантовЗаполн.ТаблицаВариантовЗаполнения;
						
						НайденныеПоказатели = ТаблицаВариантыЗаполнения.НайтиСтроки(
						Новый Структура("КодПоказателя", АвтозаполняемыйПоказатель.Ключ));
						
						Если НайденныеПоказатели.Количество() = 0 Тогда
							
							СтрТабл = ТаблицаВариантыЗаполнения.Добавить();
							СтрТабл.КодПоказателя = АвтозаполняемыйПоказатель.Ключ;
							СтрТабл.ВариантЗаполнения = 3;
							
						ИначеЕсли НЕ (НайденныеПоказатели[0].ВариантЗаполнения = 1
							ИЛИ НайденныеПоказатели[0].ВариантЗаполнения = 2
							ИЛИ НайденныеПоказатели[0].ВариантЗаполнения = 4) Тогда
							
							НайденныйПоказатель = НайденныеПоказатели[0];
							
							НайденныйПоказатель.ВариантЗаполнения = 3;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс взаимодействия с конфигурациями (библиотеками) - потребителями.

// Функция возвращает массив ссылок на сохраненные первичные регламентированные отчеты заданного вида
// для указанной организации за нужный отчетный период. Ссылки на регл. отчеты отсортированы
// в хронологическом порядке по убыванию.
//
// Возвращаемое значение: массив ссылок.
//
// Параметры:
//	ИсточникОтчета - строка с наименованием регламентированного отчета (совпадает с именем объекта метаданных).
// 	Организация    - ссылка на элемент справочника организаций.
//  ДатаОкончания  - дата окончания отчетного периода (правая граница отчетного периода).
//  КорректирующийОтчет - если значение данного параметра = Истина, то отчет является корректирующим.
//
// Пример:
// 	РегламентированнаяОтчетность.ПолучитьСсылкуНаРеглОтчет("РегламентированныйОтчетРСВ1", Организация, '20120331');
//
Функция ПолучитьСсылкуНаРеглОтчет(ИсточникОтчета, Организация, ДатаОкончания, КорректирующийОтчет = Ложь, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацииВНалоговомОргане.Код
		|ПОМЕСТИТЬ НалоговыйОрган
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|ГДЕ
		|	РегистрацииВНалоговомОргане.Ссылка = &РегистрацияВНалоговомОргане";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегламентированныйОтчет.Дата,
	|	РегламентированныйОтчет.Ссылка
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ "
	+ ?(КорректирующийОтчет, "РегламентированныйОтчет.Вид > 0", "РегламентированныйОтчет.Вид = 0")
	+ " И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.ВыбраннаяФорма ПОДОБНО &ВыбраннаяФорма
	|	И РегламентированныйОтчет.Организация = &Организация
	|	И РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания
	|	И НЕ РегламентированныйОтчет.ПометкаУдаления"
	+ ?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), 
	" 	И РегламентированныйОтчет.КодНалоговогоОргана В
	|		(ВЫБРАТЬ
	|			НалоговыйОрган.Код
	|		ИЗ
	|			НалоговыйОрган)", "");
	 
	Запрос.Текст = ТекстЗапроса;
	 
	ВыбраннаяФорма = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ИсточникОтчета, ДатаОкончания);
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "";
	КонецЕсли;
		 
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("ВыбраннаяФорма", ВыбраннаяФорма);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	РезультатЗапроса.Сортировать("Дата Убыв");
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Функция возвращает структуру с данными регламентированного отчета.
// Ключ структуры совпадает с наименованием раздела регл. отчета,
// значение структуры содержит данные раздела регл. отчета.
// Все разделы регл. отчета подразделяются на два вида: одностраничные, многостраничные.
// Одностраничные разделы имеют тип Структура, в которой содержатся имена показателей
// вместе с их значениями.
// Многостраничные разделы имеют тип ТаблицаЗначений. Каждый элемент таблицы значений
// - это отдельная страница раздела. Данные страницы содержатся в колонке Данные
// с типом Структура, в которой содержатся имена показателей вместе с их значениями.
//
// Возвращаемое значение: структура с данными регл. отчета.
//
// Параметры:
//  СсылкаНаСохрРеглОтчет - ссылка на сохраненный регламентированный отчет, данные которого нужно получить.
//
Функция ПолучитьДанныеРеглОтчета(СсылкаНаСохрРеглОтчет) Экспорт
	
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеМногострочныхРазделов;
	Перем ПоказателиРеглОтчета;
	
	ДанныеРеглОтчета = Новый Структура;
	
	Если СсылкаНаСохрРеглОтчет.ИсточникОтчета = "РегламентированныйОтчетРСВ1"
		И Год(СсылкаНаСохрРеглОтчет.ДатаОкончания) >= 2015 Тогда
		
		ПризнакАктуальностиФормы = РегламентированнаяОтчетностьВызовСервера.ФормаРеглОтчетаДействуетВОтчетномПериоде(
			СсылкаНаСохрРеглОтчет.ИсточникОтчета, СсылкаНаСохрРеглОтчет.ДатаОкончания, СсылкаНаСохрРеглОтчет.ВыбраннаяФорма);
		
	Иначе
		
		ПризнакАктуальностиФормы = (СсылкаНаСохрРеглОтчет.ВыбраннаяФорма
			= РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
			СсылкаНаСохрРеглОтчет.ИсточникОтчета, СсылкаНаСохрРеглОтчет.ДатаОкончания));
		
	КонецЕсли;
	
	ДанныеРеглОтчета.Вставить("ФормаРеглОтчетаДействуетВТекущемОтчетномПериоде", ПризнакАктуальностиФормы);
	
	ДанныеРеглОтчета.Вставить("Организация", СсылкаНаСохрРеглОтчет.Организация.Ссылка);
	
	ДанныеРазделовРеглОтчета = Новый Структура;
	
	СписокСохранения = СсылкаНаСохрРеглОтчет.ДанныеОтчета.Получить();
	
	Если СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиРеглОтчета) Тогда
		
		ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаФормыРСВ1(ПоказателиРеглОтчета, ПоказателиРеглОтчета["ПолеТабличногоДокументаТитульный"]);
		
		Для Каждого ЭлементСтруктуры Из ПоказателиРеглОтчета Цикл
			
			ДанныеРазделовРеглОтчета.Вставить(СтрЗаменить(ЭлементСтруктуры.Ключ, "ПолеТабличногоДокумента", ""), ЭлементСтруктуры.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Если ДанныеМногостраничныхРазделов.Свойство("Раздел12") Тогда
			
			КонвертироватьДанныеРаздела12СтарогоОбразцаФормыРСВ1(ДанныеМногостраничныхРазделов.Раздел12);
			
		КонецЕсли;
		
		Если ДанныеМногостраничныхРазделов.Свойство("Раздел2") Тогда
			
			КонвертироватьДанныеРаздела2СтарогоОбразцаФормыРСВ1(ДанныеМногостраничныхРазделов.Раздел2);
			
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			ДанныеРазделовРеглОтчета.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			Для Каждого РазделРеглОтчета Из ПоказателиРеглОтчета Цикл
				
				Для Каждого ПоказательРеглОтчета Из РазделРеглОтчета.Значение Цикл
					
					Если Лев(ПоказательРеглОтчета.Ключ, 11) = ЭлементСтруктуры.Ключ Тогда
						
						ДанныеРазделовРеглОтчета.Вставить(СтрЗаменить(РазделРеглОтчета.Ключ, "ПолеТабличногоДокумента", "") + "_ДанныеДопСтрок", ЭлементСтруктуры.Значение);
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеРеглОтчета.Вставить("ДанныеРазделовРеглОтчета", ДанныеРазделовРеглОтчета);
	
	Если СсылкаНаСохрРеглОтчет.ПолучитьОбъект().ИсточникОтчета = "РегламентированныйОтчетРСВ1" Тогда
		
		ДанныеРеглОтчета.Вставить("КорректирующаяФорма", СсылкаНаСохрРеглОтчет.ПолучитьОбъект().Вид > 0);
		
	КонецЕсли;
	
	Возврат ДанныеРеглОтчета;
	
КонецФункции

// Функция возвращает номер пачки регл. отчета РСВ-1.
//
// Возвращаемое значение: номер пачки регл. отчета РСВ-1.
//
// Параметры:
//  СсылкаНаСохрРеглОтчет - ссылка на сохраненный регламентированный отчет РСВ-1, номер пачки которого нужно получить.
//
Функция НомерПачкиРСВ1(СсылкаНаСохрРеглОтчет) Экспорт
	
	Возврат СсылкаНаСохрРеглОтчет.ПолучитьОбъект().НомерПачки;
	
КонецФункции

// Процедура возвращает структуру с табличными документами разделов 2.5 и 6 формы РСВ-1.
//
// Параметры:
//  СсылкаНаСохрРеглОтчет           - ссылка на сохраненный документ "РегламентированныйОтчет".
//  СтруктураРазделов               - структура:
//    ключ     - имя раздела;
//    значение - массив структур с полями:
//      Описание          - строка;
//      ТабличныйДокумент - табличный документ;
//  НумероватьСтраницы              - булево;
//  НомерПервойстраницыРаздела25    - число;
//  НомерПоследнейстраницыРаздела25 - число;
//  НомерПервойстраницыРаздела6     - число;
//  ОбщееКоличествоСтраницРаздела6  - число.
//
Процедура ПолучитьРаздел25иРаздел6ФормыРСВ1(СсылкаНаСохрРеглОтчет, СтруктураРазделов,
	НумероватьСтраницы = Ложь, НомерПервойстраницыРаздела25 = 0, НомерПоследнейстраницыРаздела25 = 0,
	НомерПервойстраницыРаздела6 = 0, ОбщееКоличествоСтраницРаздела6 = 0) Экспорт
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьРаздел25иРаздел6ФормыРСВ1(
		СсылкаНаСохрРеглОтчет, СтруктураРазделов, НумероватьСтраницы, НомерПервойстраницыРаздела25,
		НомерПоследнейстраницыРаздела25, НомерПервойстраницыРаздела6, ОбщееКоличествоСтраницРаздела6);
	
КонецПроцедуры

// Функция возвращает для формы РСВ-1 пустую структуру с ключами:
//   "Описание", "ТабличныйДокумент", "Идентификатор".
//
Функция ПустаяСтруктураДляРазделовФормыРСВ_1() Экспорт
	
	ПустаяСтруктура = Новый Структура;
	
	ПустаяСтруктура.Вставить("Описание");
	ПустаяСтруктура.Вставить("ТабличныйДокумент");
	ПустаяСтруктура.Вставить("Идентификатор");
	
	Возврат ПустаяСтруктура;
	
КонецФункции

// Функция возвращает для формы РСВ-1 структуру с ключами:
//   "СтраницыРаздела", "ПолучатьСтруктуруРаздела", "ПолучатьТабличныеДокументыРаздела".
//
Функция ОписаниеЗапрашиваемыхДанныхРазделаРСВ_1() Экспорт
	
	СтруктураОписание = Новый Структура;
	
	СтруктураОписание.Вставить("СтраницыРаздела",                   Новый Массив);
	СтруктураОписание.Вставить("ПолучатьСтруктуруРаздела",          Истина);
	СтруктураОписание.Вставить("ПолучатьТабличныеДокументыРаздела", Истина);
	
	Возврат СтруктураОписание;
	
КонецФункции

// Процедура устанавливает номер пачки регл. отчета РСВ-1.
//
// Параметры:
//  СсылкаНаСохрРеглОтчет - ссылка на сохраненный регламентированный отчет РСВ-1, номер пачки которого нужно установить.
//  НомерПачки            - номер пачки.
//
Процедура УстановитьНомерПачкиРСВ1(СсылкаНаСохрРеглОтчет, НомерПачки) Экспорт
	
	РеглОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
	
	РеглОтчет.Заблокировать();
	
	РеглОтчет.НомерПачки = НомерПачки;
	
	РеглОтчет.Записать();
	
	РеглОтчет.Разблокировать();
	
КонецПроцедуры

// Функция возвращает признак изменения данных отчета вручную.
//
// Возвращаемое значение: Истина - данные отчета изменены вручную
//                        Ложь   - данные отчета вручную не изменялись.
//
// Параметры:
//  СсылкаНаСохрРеглОтчет - ссылка на сохраненный регламентированный отчет РСВ-1,
//  для которого необходимо получить признак изменения данных.
//
Функция ДанныеОтчетаИзмененыВручную(СсылкаНаСохрРеглОтчет) Экспорт
	
	СписокСохранения = СсылкаНаСохрРеглОтчет.ДанныеОтчета.Получить();
	
	ДанныеОтчетаИзмененыВручную = Ложь;
	
	Если СписокСохранения.Свойство("ДанныеОтчетаИзмененыВручную") Тогда
		СписокСохранения.Свойство("ДанныеОтчетаИзмененыВручную", ДанныеОтчетаИзмененыВручную);
	КонецЕсли;
		
	Возврат ДанныеОтчетаИзмененыВручную;
			
КонецФункции

// Функция возвращает ссылку на головную организацию.
//
// Возвращаемое значение: ссылка на элемент справочника организаций.
//
// Параметры:
// 	Организация - ссылка на элемент справочника организаций.
//
Функция ГоловнаяОрганизация(Организация) Экспорт
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
	Если НЕ ЗначениеЗаполнено(Организация)
	 ИЛИ НЕ ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
	 
		Возврат Организация;
		
	Иначе
		
		Возврат ГоловнаяОрганизация; 
		
	КонецЕсли;

КонецФункции 

// Функция возвращает признак ведения персонифицированного учета во внешней программе.
//
// Возвращаемое значение:
//  Истина - персонифицированный учет ведется во внешней программе;
//  Ложь   - персонифицированный учет ведется в конфигурации.
//
Функция ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме() Экспорт
	
	ПризнакПерсУчета = Ложь;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакВеденияПерсонифицированногоУчетаВоВнешнейПрограмме(ПризнакПерсУчета);
	
	Возврат ПризнакПерсУчета;
	
КонецФункции

// Функция возвращает массив ссылок на элементы справочника "РегистрацииВНалоговомОргане".
//
// Возвращаемое значение: массив ссылок на элементы справочника "РегистрацииВНалоговомОргане".
//
// Параметры:
//  Организация     - ссылка на элемент справочника организаций.
//  ПараметрыОтбора - структура (необязательный):
//    ключ "КодНО" (необязательный), значение - код налогового органа (строка);
//    ключ "КПП"   (необязательный), значение - КПП (строка);
//    ключ "ОКТМО" (необязательный), значение - код по ОКТМО (строка);
//    ключ "КодыПричиныПостановкиНаУчет" (необязательный), значение - символы в КПП на 5-6 позициях (массив).
//
Функция РегистрацииОрганизацииВНалоговомОргане(Организация, ПараметрыОтбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникИФНС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК СправочникИФНС
		|ГДЕ
		|	(СправочникИФНС.Владелец = &Организация ИЛИ СправочникИФНС.Владелец = &ГоловнаяОрганизация)
		|	И НЕ СправочникИФНС.ПометкаУдаления
		|";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация(Организация));
	
	Регистрации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Если ТипЗнч(ПараметрыОтбора) = Тип("Структура") Тогда
		КолРегистраций = Регистрации.Количество();
		Для Инд = 0 По КолРегистраций - 1 Цикл
			ОбрИнд = КолРегистраций - 1 - Инд;
			Если ПараметрыОтбора.Свойство("КодНО") Тогда
				Если СокрЛП(Регистрации[ОбрИнд].Код) <> СокрЛП(ПараметрыОтбора.КодНО) Тогда
					Регистрации.Удалить(ОбрИнд);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если ПараметрыОтбора.Свойство("КПП") Тогда
				Если ВРег(СокрЛП(Регистрации[ОбрИнд].КПП)) <> ВРег(СокрЛП(ПараметрыОтбора.КПП)) Тогда
					Регистрации.Удалить(ОбрИнд);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если ПараметрыОтбора.Свойство("КодыПричиныПостановкиНаУчет") Тогда
				Если ПараметрыОтбора.КодыПричиныПостановкиНаУчет.Найти(
					Сред(ВРег(СокрЛП(Регистрации[ОбрИнд].КПП)), 5, 2)) = Неопределено Тогда
					Регистрации.Удалить(ОбрИнд);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если ПараметрыОтбора.Свойство("ОКТМО") Тогда
				Если СокрЛП(Регистрации[ОбрИнд].КодПоОКТМО) <> СокрЛП(ПараметрыОтбора.ОКТМО) Тогда
					Регистрации.Удалить(ОбрИнд);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Регистрации;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры обновления информационной базы.

Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОтключитьВнешнийМодульДокументооборотаСФНС();
	
	// Заполнение реквизитов предопределенных элементов справочника ВидыОтправляемыхДокументов.
	Справочники.ВидыОтправляемыхДокументов.ЗаполнитьПредопределенныеВидыОтправляемыхДокументов();
	
КонецПроцедуры

// При обновлении конфигурации с редакции 2.0 на редакцию 3.0 необходимо заполнить значениями реквизиты "ПредставлениеВида",
// "ПредставлениеПериода" документа "РегламентированныйОтчет" и реквизит "ПредставлениеПериода" документа
// "ВыгрузкаРегламентированныхОтчетов".
//	
Процедура ЗаполнитьПредставлениеПериодаИВидаРеглОтчета() Экспорт

	 Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	РегламентированныйОтчет.Ссылка
	 |ИЗ
	 |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	 |ГДЕ
	 |	(РегламентированныйОтчет.ПредставлениеВида = """"
	 |			ИЛИ РегламентированныйОтчет.ПредставлениеПериода = """")");

	 ТаблицаРеглОтч = Запрос.Выполнить().Выгрузить();

	 Если ТаблицаРеглОтч.Количество() > 0 Тогда

		 НачатьТранзакцию();
		 
		 Попытка
			 
			 Для Каждого Элемент Из ТаблицаРеглОтч Цикл
				 
				 Док = Элемент.Ссылка.ПолучитьОбъект();
				 
				 Док.Заблокировать();
				 
				 Док.ПредставлениеВида    = ПредставлениеВидаДокумента(Док.Вид);
				 Док.ПредставлениеПериода = ПредставлениеПериода(Док.ДатаНачала, КонецДня(Док.ДатаОкончания));
				 
				 ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док, , Истина);
				 
				 Док.Разблокировать();
				 
			 КонецЦикла;
			 
			 ЗафиксироватьТранзакцию();
			 
		 Исключение
			 
			 ОтменитьТранзакцию();
			 
		 КонецПопытки;

	 КонецЕсли;

	 Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ВыгрузкаРегламентированныхОтчетов.Ссылка
	 |ИЗ
	 |	Документ.ВыгрузкаРегламентированныхОтчетов КАК ВыгрузкаРегламентированныхОтчетов
	 |ГДЕ
	 |	ВыгрузкаРегламентированныхОтчетов.ПредставлениеПериода = """"");

	 ТаблицаРеглОтч = Запрос.Выполнить().Выгрузить();

	 Если ТаблицаРеглОтч.Количество() > 0 Тогда

		 НачатьТранзакцию();
		 
		 Попытка
			 
			 Для Каждого Элемент Из ТаблицаРеглОтч Цикл
				 
				 Док = Элемент.Ссылка.ПолучитьОбъект();
				 
				 Док.Заблокировать();
				 
				 Док.ПредставлениеПериода = ПредставлениеПериодаДокументаВыгрузкаРегламентированныхОтчетов(Док.Ссылка);
				 
				 ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док, , Истина);
				 
				 Док.Разблокировать();
				 
			 КонецЦикла;
			 
			 ЗафиксироватьТранзакцию();
			 
		 Исключение
			 
			 ОтменитьТранзакцию();
			 
		 КонецПопытки

	 КонецЕсли;

КонецПроцедуры

Процедура ЗаменитьСсылкиРазделенныйСпрУдалитьРеглОтчетыНаНеРазделенныйСпрРеглОтчеты() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ТипУдалитьРегламентированныеОтчеты = Тип("СправочникСсылка.УдалитьРегламентированныеОтчеты");
		
		// Справочник "ОтправкиОтчетности".
		//
		
		ВыборкаОтправкиОтчетности = Справочники.ОтправкиОтчетности.Выбрать();
		
		Пока ВыборкаОтправкиОтчетности.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаОтправкиОтчетности.УдалитьВидОтчета) Тогда
				
				РеглОтчет = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ВыборкаОтправкиОтчетности.УдалитьВидОтчета.ИсточникОтчета);
				
				Если НЕ РеглОтчет.Пустая() Тогда
					
					ОбъектСправочникОтправкиОтчетности = ВыборкаОтправкиОтчетности.ПолучитьОбъект();
					
					ОбъектСправочникОтправкиОтчетности.ОбменДанными.Загрузка = Истина;
					
					ОбъектСправочникОтправкиОтчетности.ВидОтчета = РеглОтчет.Ссылка;
					ОбъектСправочникОтправкиОтчетности.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Справочник "УдалитьЭлектронныеПредставленияРегламентированныхОтчетов".
		//
		
		ВыборкаУдалитьЭлектронныеПредставленияРегламентированныхОтчетов = Справочники.УдалитьЭлектронныеПредставленияРегламентированныхОтчетов.Выбрать();
		
		Пока ВыборкаУдалитьЭлектронныеПредставленияРегламентированныхОтчетов.Следующий() Цикл
			
			ИсточникЗамены = Неопределено;
			
			Если ЗначениеЗаполнено(ВыборкаУдалитьЭлектронныеПредставленияРегламентированныхОтчетов.УдалитьВидОтчета) И ТипЗнч(ВыборкаУдалитьЭлектронныеПредставленияРегламентированныхОтчетов.УдалитьВидОтчета) = ТипУдалитьРегламентированныеОтчеты Тогда
				ИсточникЗамены = ВыборкаУдалитьЭлектронныеПредставленияРегламентированныхОтчетов.УдалитьВидОтчета;	
			ИначеЕсли ЗначениеЗаполнено(ВыборкаУдалитьЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета) И ТипЗнч(ВыборкаУдалитьЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета) = ТипУдалитьРегламентированныеОтчеты Тогда
				ИсточникЗамены = ВыборкаУдалитьЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета;	
			КонецЕсли;
			
			Если ИсточникЗамены <> Неопределено Тогда
				
				РеглОтчет = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ИсточникЗамены.ИсточникОтчета);
				
				Если НЕ РеглОтчет.Пустая() Тогда
					
					ОбъектСправочникУдалитьЭлектронныеПредставленияРегламентированныхОтчетов = ВыборкаУдалитьЭлектронныеПредставленияРегламентированныхОтчетов.ПолучитьОбъект();
					
					ОбъектСправочникУдалитьЭлектронныеПредставленияРегламентированныхОтчетов.ОбменДанными.Загрузка = Истина;
					
					ОбъектСправочникУдалитьЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = РеглОтчет.Ссылка;
					ОбъектСправочникУдалитьЭлектронныеПредставленияРегламентированныхОтчетов.УдалитьВидОтчета = Неопределено;
					ОбъектСправочникУдалитьЭлектронныеПредставленияРегламентированныхОтчетов.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Справочник "ЦиклыОбмена".
		//
		
		ВыборкаЦиклыОбмена = Справочники.ЦиклыОбмена.Выбрать();
		
		Пока ВыборкаЦиклыОбмена.Следующий() Цикл
			
			ИсточникЗамены = Неопределено;
			
			Если ЗначениеЗаполнено(ВыборкаЦиклыОбмена.УдалитьВидОтчета) И ТипЗнч(ВыборкаЦиклыОбмена.УдалитьВидОтчета) = ТипУдалитьРегламентированныеОтчеты Тогда
				ИсточникЗамены = ВыборкаЦиклыОбмена.УдалитьВидОтчета;	
			ИначеЕсли ЗначениеЗаполнено(ВыборкаЦиклыОбмена.ВидОтчета) И ТипЗнч(ВыборкаЦиклыОбмена.ВидОтчета) = ТипУдалитьРегламентированныеОтчеты Тогда
				ИсточникЗамены = ВыборкаЦиклыОбмена.ВидОтчета;	
			КонецЕсли;
			
			Если ИсточникЗамены <> Неопределено Тогда
				
				РеглОтчет = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ИсточникЗамены.ИсточникОтчета);
				
				Если НЕ РеглОтчет.Пустая() Тогда
					
					ОбъектСправочникЦиклыОбмена = ВыборкаЦиклыОбмена.ПолучитьОбъект();
					
					ОбъектСправочникЦиклыОбмена.ОбменДанными.Загрузка = Истина;
					
					ОбъектСправочникЦиклыОбмена.ВидОтчета = РеглОтчет.Ссылка;
					ОбъектСправочникЦиклыОбмена.УдалитьВидОтчета = Неопределено;
					ОбъектСправочникЦиклыОбмена.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Справочник "ЭлектронныеПредставленияРегламентированныхОтчетов".
		//
		
		ВыборкаЭлектронныеПредставленияРегламентированныхОтчетов = Справочники.ЭлектронныеПредставленияРегламентированныхОтчетов.Выбрать();
		
		Пока ВыборкаЭлектронныеПредставленияРегламентированныхОтчетов.Следующий() Цикл
			
			ИсточникЗамены = Неопределено;
			
			Если ЗначениеЗаполнено(ВыборкаЭлектронныеПредставленияРегламентированныхОтчетов.УдалитьВидОтчета) И ТипЗнч(ВыборкаЭлектронныеПредставленияРегламентированныхОтчетов.УдалитьВидОтчета) = ТипУдалитьРегламентированныеОтчеты Тогда
				ИсточникЗамены = ВыборкаЭлектронныеПредставленияРегламентированныхОтчетов.УдалитьВидОтчета;	
			ИначеЕсли ЗначениеЗаполнено(ВыборкаЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета) И ТипЗнч(ВыборкаЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета) = ТипУдалитьРегламентированныеОтчеты Тогда
				ИсточникЗамены = ВыборкаЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета;	
			КонецЕсли;
			
			Если ИсточникЗамены <> Неопределено Тогда
				
				РеглОтчет = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ИсточникЗамены.ИсточникОтчета);
				
				Если НЕ РеглОтчет.Пустая() Тогда
					
					ОбъектСправочникЭлектронныеПредставленияРегламентированныхОтчетов = ВыборкаЭлектронныеПредставленияРегламентированныхОтчетов.ПолучитьОбъект();
					
					ОбъектСправочникЭлектронныеПредставленияРегламентированныхОтчетов.ОбменДанными.Загрузка = Истина;
					
					ОбъектСправочникЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = РеглОтчет.Ссылка;
					ОбъектСправочникЭлектронныеПредставленияРегламентированныхОтчетов.УдалитьВидОтчета = Неопределено;
					ОбъектСправочникЭлектронныеПредставленияРегламентированныхОтчетов.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Регистр сведений "СкрытыеРегламентированныеОтчеты".
		//
		
		ВыборкаРегистрСведенийСкрытыеРегламентированныеОтчеты = РегистрыСведений.СкрытыеРегламентированныеОтчеты.Выбрать();
		
		Пока ВыборкаРегистрСведенийСкрытыеРегламентированныеОтчеты.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаРегистрСведенийСкрытыеРегламентированныеОтчеты.УдалитьРегламентированныйОтчет) Тогда
				
				РеглОтчет = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ВыборкаРегистрСведенийСкрытыеРегламентированныеОтчеты.УдалитьРегламентированныйОтчет.ИсточникОтчета);
				
				Если НЕ РеглОтчет.Пустая() Тогда
					
					ЗаписьРегистрСведенийСкрытыеРегламентированныеОтчеты = ВыборкаРегистрСведенийСкрытыеРегламентированныеОтчеты.ПолучитьМенеджерЗаписи();
					ЗаписьРегистрСведенийСкрытыеРегламентированныеОтчеты.УдалитьРегламентированныйОтчет = ВыборкаРегистрСведенийСкрытыеРегламентированныеОтчеты.УдалитьРегламентированныйОтчет.Ссылка;
					ЗаписьРегистрСведенийСкрытыеРегламентированныеОтчеты.Прочитать();
					ЗаписьРегистрСведенийСкрытыеРегламентированныеОтчеты.РегламентированныйОтчет = РеглОтчет.Ссылка;
					ЗаписьРегистрСведенийСкрытыеРегламентированныеОтчеты.Записать();
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

// Вспомогательная процедура для ЗаменитьСсылкиНаРегламентированныеОтчеты().
// Заменяет ссылки на справочник РегламентированныеОтчеты, 
// расположенные в реквизите справочника ВидОтчета,
// на соответствующие ссылки на справочник ВидыОтправляемыхДокументов.
// Имя изменяемого справочника передается в параметре.
//
Процедура ЗаменитьРеквизитВидОтчета(ИмяСправочника)
	
	Выборка = Справочники[ИмяСправочника].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектСпр = Выборка.Ссылка.ПолучитьОбъект();
		
		ВидОтчетаСтарый = Выборка.ВидОтчета;
		
		Если ТипЗнч(ВидОтчетаСтарый) = Тип("СправочникСсылка.ВидыОтправляемыхДокументов") ИЛИ ТипЗнч(ВидОтчетаСтарый) = Тип("СправочникСсылка.УдалитьВидыОтправляемыхДокументов") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидОтчетаСтарый) Тогда
			
			ОбъектСпр.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка();
			
		Иначе
			
			ИсточникСтарогоВидаОтчета = ВидОтчетаСтарый.ИсточникОтчета;
			
			ВидОтчетаНовый = Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", ИсточникСтарогоВидаОтчета);
			
			Если ВидОтчетаНовый = Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка() Тогда
				ВидОтчетаНовый = Справочники.ВидыОтправляемыхДокументов.СоздатьЭлемент();	
				ВидОтчетаНовый.Наименование = ВидОтчетаСтарый.Наименование;
				ВидОтчетаНовый.Описание 	= ВидОтчетаСтарый.Описание;
				ВидОтчетаНовый.Источник 	= ВидОтчетаСтарый.ИсточникОтчета;
				
				ВидОтчетаНовый.ОбменДанными.Загрузка = Истина;
				ВидОтчетаНовый.Записать();
				
				ОбъектСпр.ВидОтчета = ВидОтчетаНовый.Ссылка;
			Иначе
				ОбъектСпр.ВидОтчета = ВидОтчетаНовый;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбъектСпр.ОбменДанными.Загрузка = Истина;
		ОбъектСпр.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БРО 1.0.1.29
//
Процедура ЗаменитьСсылкиНаРегламентированныеОтчеты() Экспорт
	ЗаменитьРеквизитВидОтчета("ЦиклыОбмена");
	ЗаменитьРеквизитВидОтчета("ЭлектронныеПредставленияРегламентированныхОтчетов");
КонецПроцедуры

Процедура ОтключитьВнешнийМодульДокументооборотаСФНС() Экспорт
	
	Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Установить(Ложь);
	
КонецПроцедуры

// Обработчик обновления БРО 1.0.1.58
//
Процедура ПереносДанныхЭДОПриОбновлении10158() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Обновление данных информационной базы по ЭДО с КО'");
	ЗаписатьИнформацию(ТекстСообщения);
	
	СоответствиеКонвертированныхОбъектов = Новый Соответствие;
	
	// Документы
	КонвертироватьДокументыЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП10158(СоответствиеКонвертированныхОбъектов);
		
	// Регистры сведений
	ОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИПКонвертация10158(СоответствиеКонвертированныхОбъектов);

	
	ЗаполнитьЦиклыОбмена10158(СоответствиеКонвертированныхОбъектов);
	ЗаполнитьСтатусыОтправки10158(СоответствиеКонвертированныхОбъектов);
	ЗаполнитьСодержимоеТранспортныхКонтейнеров10158(СоответствиеКонвертированныхОбъектов);
	ЗаполнитьТранспортноеСообщение10158(СоответствиеКонвертированныхОбъектов);
	
	ЗаполнитьВидыОтправляемыхДокументов10158();
	ЗаполнитьЗаявлениеАбонентаСпецоператораСвязи10158();
	ЗаполнитьРегламентированныйОтчет10158();
		
КонецПроцедуры

// Обработчик обновления БРО.
//
// Вызывается после синхронизации с обычным приложением предопределенных значений группы ОтчетностьПоАлкоголю справочника.
//
Процедура ОбновитьОтправкиПослеЗаменыПредопределенныхЗначенийДляФСРАР() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ОтправкиФСРАР.Ссылка
				   |ИЗ
				   |	Справочник.ОтправкиФСРАР КАК ОтправкиФСРАР
				   |ГДЕ
				   |	ОтправкиФСРАР.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьПроизводствоИОборотЭтиловогоСпирта)
				   |	ИЛИ ОтправкиФСРАР.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьИспользованиеЭтиловогоСпирта)
				   |	ИЛИ ОтправкиФСРАР.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьПроизводствоИОборотАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ОтправкиФСРАР.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьИспользованиеАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ОтправкиФСРАР.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьОборотЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ОтправкиФСРАР.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьПоставкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ОтправкиФСРАР.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьЗакупкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ОтправкиФСРАР.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьОбъемПеревозкиЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ОтправкиФСРАР.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьПеревозкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ОтправкиФСРАР.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьИспользованиеМощностейПоПроизводствуЭтиловогоСпиртаИАлкогольнойПродукции)
				   |	ИЛИ ОтправкиФСРАР.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьРозничнаяПродажаАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ОтправкиФСРАР.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьРозничнаяПродажаПиваИПивныхНапитков)";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		ОтправкиФСРАРОбъект = СтрокаЗапроса.Ссылка.ПолучитьОбъект();
		
		Если ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьПроизводствоИОборотЭтиловогоСпирта Тогда
			ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ПроизводствоИОборотЭтиловогоСпирта;
			
		ИначеЕсли ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьИспользованиеЭтиловогоСпирта Тогда
			ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ИспользованиеЭтиловогоСпирта;
			
		ИначеЕсли ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьПроизводствоИОборотАлкогольнойИСпиртосодержащейПродукции Тогда
			ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ПроизводствоИОборотАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьИспользованиеАлкогольнойИСпиртосодержащейПродукции Тогда
			ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ИспользованиеАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьОборотЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции Тогда
			ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ОборотЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьПоставкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции Тогда
			ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ПоставкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьЗакупкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции Тогда
			ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ЗакупкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьОбъемПеревозкиЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции Тогда
			ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ОбъемПеревозкиЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьПеревозкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции Тогда
			ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ПеревозкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьИспользованиеМощностейПоПроизводствуЭтиловогоСпиртаИАлкогольнойПродукции Тогда
			ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ИспользованиеМощностейПоПроизводствуЭтиловогоСпиртаИАлкогольнойПродукции;
			
		ИначеЕсли ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьРозничнаяПродажаАлкогольнойИСпиртосодержащейПродукции Тогда
			ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.РозничнаяПродажаАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьРозничнаяПродажаПиваИПивныхНапитков Тогда
			ОтправкиФСРАРОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.РозничнаяПродажаПиваИПивныхНапитков;
		КонецЕсли;
			
		ОтправкиФСРАРОбъект.ОбменДанными.Загрузка = Истина;
		ОтправкиФСРАРОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		ОтправкиФСРАРОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		ОтправкиФСРАРОбъект.Записать();
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ЭлектронныеПредставленияРегламентированныхОтчетов.Ссылка
				   |ИЗ
				   |	Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов КАК ЭлектронныеПредставленияРегламентированныхОтчетов
				   |ГДЕ
				   |	ЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьПроизводствоИОборотЭтиловогоСпирта)
				   |	ИЛИ ЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьИспользованиеЭтиловогоСпирта)
				   |	ИЛИ ЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьПроизводствоИОборотАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьИспользованиеАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьОборотЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьПоставкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьЗакупкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьОбъемПеревозкиЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьПеревозкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьИспользованиеМощностейПоПроизводствуЭтиловогоСпиртаИАлкогольнойПродукции)
				   |	ИЛИ ЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьРозничнаяПродажаАлкогольнойИСпиртосодержащейПродукции)
				   |	ИЛИ ЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьРозничнаяПродажаПиваИПивныхНапитков)";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		ЭлектронныеПредставленияРегламентированныхОтчетовОбъект = СтрокаЗапроса.Ссылка.ПолучитьОбъект();
		
		Если ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьПроизводствоИОборотЭтиловогоСпирта Тогда
			ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ПроизводствоИОборотЭтиловогоСпирта;
			
		ИначеЕсли ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьИспользованиеЭтиловогоСпирта Тогда
			ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ИспользованиеЭтиловогоСпирта;
			
		ИначеЕсли ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьПроизводствоИОборотАлкогольнойИСпиртосодержащейПродукции Тогда
			ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ПроизводствоИОборотАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьИспользованиеАлкогольнойИСпиртосодержащейПродукции Тогда
			ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ИспользованиеАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьОборотЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции Тогда
			ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ОборотЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьПоставкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции Тогда
			ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ПоставкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьЗакупкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции Тогда
			ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ЗакупкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьОбъемПеревозкиЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции Тогда
			ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ОбъемПеревозкиЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьПеревозкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции Тогда
			ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ПеревозкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьИспользованиеМощностейПоПроизводствуЭтиловогоСпиртаИАлкогольнойПродукции Тогда
			ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ИспользованиеМощностейПоПроизводствуЭтиловогоСпиртаИАлкогольнойПродукции;
			
		ИначеЕсли ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьРозничнаяПродажаАлкогольнойИСпиртосодержащейПродукции Тогда
			ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.РозничнаяПродажаАлкогольнойИСпиртосодержащейПродукции;
			
		ИначеЕсли ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.УдалитьРозничнаяПродажаПиваИПивныхНапитков Тогда
			ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.РозничнаяПродажаПиваИПивныхНапитков;
		КонецЕсли;
		
		ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ОбменДанными.Загрузка = Истина;
		ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		ЭлектронныеПредставленияРегламентированныхОтчетовОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БРО 1.0.14.1
//
Процедура ОбновитьРеквизитВидОбменаСКонтролирующимиОрганамиСправочникаОрганизации() Экспорт

    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
                   |	Организации.Ссылка КАК Ссылка
                   |ИЗ
                   |	Справочник.Организации КАК Организации
                   |ГДЕ
                   |	Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыОбменаСКонтролирующимиОрганами.ОбменОтключен)";

    Выборка = Запрос.Выполнить().Выбрать();

    Пока Выборка.Следующий() Цикл

        Объект = Выборка.Ссылка.ПолучитьОбъект();

        Объект.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменОтключен;

        Попытка
            Объект.ОбменДанными.Загрузка = Истина;
            Объект.Записать();
        Исключение
            ТекстСообщения = НСтр("ru = 'Электронный документооборот с контролирующими органами'");
            ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        КонецПопытки;

    КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные функции для обработчика обновления БРО 1.0.1.58.

Процедура ЗаполнитьЗаявлениеАбонентаСпецоператораСвязи10158()
	
	Выборка = Документы.ЗаявлениеАбонентаСпецоператораСвязи.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.ПолучитьОбъект();
		
		Объект.ВладелецЭЦПСНИЛС	= Объект.УдалитьВладелецЭЦПСНИЛС;
		Объект.ОГРН 			= Объект.УдалитьОГРН;
		
		Попытка
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьОшибку(ТекстСообщения);
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчет10158()
	
	Выборка = Документы.РегламентированныйОтчет.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.ПолучитьОбъект();
		
		Объект.КПП	= Объект.УдалитьКПП;
		
		Попытка
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьОшибку(ТекстСообщения);
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыОтправляемыхДокументов10158()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВидыОтправляемыхДокументов.Ссылка
	               |ИЗ
	               |	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
	               |ГДЕ
	               |	ВидыОтправляемыхДокументов.ТипДокумента =  ЗНАЧЕНИЕ(Перечисление.ТипыОтправляемыхДокументов.УдалитьИсходящееУведомлениеФНС)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Объект.ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС;
		
		Попытка
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьОшибку(ТекстСообщения);
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертироватьДокументыЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП10158(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.Ссылка
				   |ИЗ
				   |	Документ.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП КАК ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП";
	Если НЕ Запрос.Выполнить().Пустой() Тогда 
		Возврат; // Объект не пустой, значит конвертация уже производилась.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
				   |	УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.Ссылка,
				   |	УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.ВерсияДанных,
				   |	УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.ПометкаУдаления,
				   |	УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.Номер,
				   |	УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.Дата,
				   |	УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.Проведен,
				   |	УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.Организация,
				   |	УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.ПараметрЗапроса,
				   |	УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.ВидПараметраЗапроса
				   |ИЗ
				   |	Документ.УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП КАК УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПоДокументам = Результат.Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		СтруктураДанныхДокумента = ВписатьДанныеВыборкиПоДокументуВСтруктуры(ВыборкаПоДокументам, Результат.Колонки);
		
		КонвертироватьДанные10158(СтруктураДанныхДокумента, СоответствиеКонвертированныхОбъектов);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИПКонвертация10158(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП.Запрос
	                      |ИЗ
	                      |	РегистрСведений.ОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП КАК ОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП");
	
	Если Запрос.Выполнить().Пустой() Тогда 
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП.Запрос,
		|	УдалитьОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП.ИмяФайла,
		|	УдалитьОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП.Данные,
		|	УдалитьОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП.Размер,
		|	УдалитьОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП.РезультатОбработкиЗапроса
		|ИЗ
		|	РегистрСведений.УдалитьОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП КАК УдалитьОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.ОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Запрос 						= КонвертироватьДанные10158(Выборка.Запрос, СоответствиеКонвертированныхОбъектов);
			Запись.ИмяФайла						= Выборка.ИмяФайла;
			Запись.Данные						= Выборка.Данные;
			Запись.Размер						= Выборка.Размер;
			Запись.РезультатОбработкиЗапроса	= Выборка.РезультатОбработкиЗапроса;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВписатьДанныеВыборкиПоДокументуВСтруктуры(Выборка, Колонки)
	
	Структура = Новый Структура;
	
	Для Каждого Колонка Из Колонки Цикл
		Структура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура ЗаполнитьТранспортноеСообщение10158(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТранспортноеСообщение.Тип КАК Тип,
				   |	ТранспортноеСообщение.Ссылка
	               |ИЗ
	               |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	               |ГДЕ
	               |	ТранспортноеСообщение.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.УдалитьЗапросНаВыпискуЕРГЮЛ_ЕГРИП)
	               |			ИЛИ ТранспортноеСообщение.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.УдалитьРезультатОбработкиЗапросаНаВыпискуЕРГЮЛ_ЕГРИП)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТранспортноеСообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(Выборка.Тип) Тогда
			ТранспортноеСообщениеОбъект.Тип = КонвертироватьДанные10158(Выборка.Тип, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Попытка
			ТранспортноеСообщениеОбъект.ОбменДанными.Загрузка = Истина;
			ТранспортноеСообщениеОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьОшибку(ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСодержимоеТранспортныхКонтейнеров10158(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение,
	               |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
	               |	СодержимоеТранспортныхКонтейнеров.Тип
	               |ИЗ
	               |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	               |ГДЕ
	               |	СодержимоеТранспортныхКонтейнеров.Тип В (&Тип)";
	
	ТипыСодержимого = Новый Массив;
	ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП);
	ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьРезультатОбработкиЗапросаНаВыпискуЕГРЮЛ_ЕГРИП);
	ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьОтветНаЗапросВыпискиИзЕГРЮЛ_ЕГРИП);
	
	Запрос.УстановитьПараметр("Тип", ТипыСодержимого);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Запись = РегистрыСведений.СодержимоеТранспортныхКонтейнеров.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		Запись.ТранспортноеСообщение = Выборка.ТранспортноеСообщение;
		Запись.ИмяФайла = Выборка.ИмяФайла;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда 
			
			Запись.Тип = КонвертироватьДанные10158(Выборка.Тип, СоответствиеКонвертированныхОбъектов);
			
			Попытка
				Запись.Записать();
			Исключение
				ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписатьОшибку(ТекстСообщения);
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыОтправки10158(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыОтправки.Объект
	               |ИЗ
	               |	РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
	               |ГДЕ
	               |	СтатусыОтправки.Объект ССЫЛКА Документ.УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Запись = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		Запись.Объект	 = Выборка.Объект;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда 
			Запись.Объект	 = КонвертироватьДанные10158(Выборка.Объект, СоответствиеКонвертированныхОбъектов);
			
			Попытка
				Запись.Записать();
			Исключение
				ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписатьОшибку(ТекстСообщения);
			КонецПопытки;

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЦиклыОбмена10158(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦиклыОбмена.Вид,
				   |	ЦиклыОбмена.Тип,
				   |	ЦиклыОбмена.Предмет,
				   |	ЦиклыОбмена.Ссылка
	               |ИЗ
	               |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
	               |ГДЕ
	               |	ЦиклыОбмена.Предмет ССЫЛКА Документ.УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП
				   |	ИЛИ ЦиклыОбмена.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыЦикловОбмена.УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП)
				   |	ИЛИ ЦиклыОбмена.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЦикловОбмена.УдалитьЦиклОбменаССОС)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП") И ЗначениеЗаполнено(Выборка.Предмет) Тогда 
			Объект.Предмет = КонвертироватьДанные10158(Выборка.Предмет, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Если Объект.Тип = Перечисления.ТипыЦикловОбмена.УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП Тогда 
			Объект.Тип = КонвертироватьДанные10158(Выборка.Тип, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Если Объект.Вид = Перечисления.ВидыЦикловОбмена.УдалитьЦиклОбменаССОС Тогда 
			Объект.Вид = КонвертироватьДанные10158(Выборка.Вид, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Попытка
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьОшибку(ТекстСообщения);
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

Функция КонвертироватьДанные10158(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов = Неопределено, СсылкаНаПриемник = Неопределено)
	
	Если (Не ЗначениеЗаполнено(КонвертируемыеДанные)) ИЛИ НеПроизводитьКонвертациюЗначения(ТипЗнч(КонвертируемыеДанные)) Тогда
		Возврат КонвертируемыеДанные;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонвертируемыеДанные)) Тогда
		СсылкаНаКонвертируемоеЗначение = КонвертируемыеДанные;
	Иначе
		Структура = Новый Структура("Ссылка");
		ЗаполнитьЗначенияСвойств(Структура, КонвертируемыеДанные);
		
		Если ЗначениеЗаполнено(Структура.Ссылка) Тогда
			СсылкаНаКонвертируемоеЗначение = КонвертируемыеДанные.Ссылка;
		Иначе
			Возврат КонвертируемыеДанные;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаКонвертируемоеЗначение)) Тогда
		Возврат КонвертироватьДокумент10158(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов);
	Иначе
		Возврат КонвертироватьСсылочныеДанные10158(СсылкаНаКонвертируемоеЗначение, 
			КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоответствиеРеквизитовЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП10158(ДанныеДокумента)
	
	СоответствиеРеквизитов = Новый Структура;
				   
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("ПараметрЗапроса", "ПараметрЗапроса");
	СоответствиеРеквизитов.Вставить("ВидПараметраЗапроса", "ВидПараметраЗапроса");
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции

Процедура КонвертацияДанныхДокумента10158(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	
КонецПроцедуры

Функция ПолучитьСоответствиеЭлементаПеречисленияВидыПараметровЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП10158(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЗначениеПеречисления = Метаданные.Перечисления.УдалитьВидыПараметровЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП.ЗначенияПеречисления.Получить(
			Перечисления.УдалитьВидыПараметровЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП.Индекс(Элемент));
		ИмяЗначения = ЗначениеПеречисления.Имя;
		Возврат Перечисления.ВидыПараметровЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП[ИмяЗначения];
	Иначе
		Возврат Перечисления.ВидыПараметровЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ПолучитьСоответствиеЭлементаПеречисленияТипыЦикловОбмена10158(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Если Элемент = Перечисления.ТипыЦикловОбмена.УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП Тогда 
			Возврат Перечисления.ТипыЦикловОбмена.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП;
		Иначе
			Возврат Элемент;
		КонецЕсли;
	Иначе
		Возврат Перечисления.ТипыЦикловОбмена.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ПолучитьСоответствиеЭлементаПеречисленияТипыСодержимогоТранспортногоКонтейнера10158(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Если Элемент = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП Тогда 
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП;
		ИначеЕсли Элемент = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьРезультатОбработкиЗапросаНаВыпискуЕГРЮЛ_ЕГРИП Тогда 
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.РезультатОбработкиЗапросаНаВыпискуЕГРЮЛ_ЕГРИП;
		ИначеЕсли Элемент = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьОтветНаЗапросВыпискиИзЕГРЮЛ_ЕГРИП Тогда 
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросВыпискиИзЕГРЮЛ_ЕГРИП;
		Иначе
			Возврат Элемент;
		КонецЕсли;
	Иначе
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ПолучитьСоответствиеЭлементаПеречисленияТипыТранспортныхСообщений10158(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Если Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьЗапросНаВыпискуЕРГЮЛ_ЕГРИП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ЗапросНаВыпискуЕРГЮЛ_ЕГРИП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьРезультатОбработкиЗапросаНаВыпискуЕРГЮЛ_ЕГРИП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросаНаВыпискуЕРГЮЛ_ЕГРИП;
		Иначе
			Возврат Элемент;
		КонецЕсли;
	Иначе
		Возврат Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ПолучитьСоответствиеЭлементаПеречисленияВидыЦикловОбмена10158(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Если Элемент = Перечисления.ВидыЦикловОбмена.УдалитьЦиклОбменаССОС Тогда
			Возврат Перечисления.ВидыЦикловОбмена.ЦиклОбменаССОС;
		Иначе
			Возврат Элемент;
		КонецЕсли;
	Иначе
		Возврат Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция КонвертироватьСсылочныеДанные10158(СсылкаНаКонвертируемоеЗначение, КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник)
	
	ТипЗначения = ТипЗнч(СсылкаНаКонвертируемоеЗначение);
	
	Если ТипЗначения = Тип("ПеречислениеСсылка.УдалитьВидыПараметровЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияВидыПараметровЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП10158(КонвертируемыеДанные);
		
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ТипыСодержимогоТранспортногоКонтейнера") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыСодержимогоТранспортногоКонтейнера10158(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ТипыТранспортныхСообщений") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыТранспортныхСообщений10158(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ТипыЦикловОбмена") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыЦикловОбмена10158(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ВидыЦикловОбмена") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияВидыЦикловОбмена10158(КонвертируемыеДанные);
	Иначе 
		ВозвращаемоеЗначение = СсылкаНаКонвертируемоеЗначение;
	КонецЕсли;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция КонвертироватьДокумент10158(ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	
	СсылкаНаНовыйДокумент = ПолучитьСсылкуНаКонвертированныйОбъект(ДанныеДокумента.Ссылка, СоответствиеКонвертированныхОбъектов);
	
	Если СсылкаНаНовыйДокумент <> Неопределено Тогда 
		Возврат СсылкаНаНовыйДокумент;
	КонецЕсли;
	
	ДокументОбъект = ПолучитьДокументСоответствующийКонвертируемому10158(ДанныеДокумента.Ссылка);
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> ТипЗнч(ДанныеДокумента.Ссылка) Тогда
		
		ПолноеИмяДокумента = ДокументОбъект.Метаданные().ПолноеИмя();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументПриемник.Ссылка
		|ИЗ
		|	#ДокументПриемник КАК ДокументПриемник
		|ГДЕ
		|	ДокументПриемник.Номер = &Номер
		|	И ДокументПриемник.Дата = &Дата";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументПриемник", ПолноеИмяДокумента);
		Запрос.УстановитьПараметр("Номер", ДанныеДокумента.Номер);
		Запрос.УстановитьПараметр("Дата", ДанныеДокумента.Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			ВставитьСсылкуНаКонвертированныйОбъект(ДанныеДокумента.Ссылка, Выборка.Ссылка, СоответствиеКонвертированныхОбъектов);
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьБизнесЛогикуПриЗаписи", Истина);
	Если ТипЗнч(ДокументОбъект.Ссылка) <> ТипЗнч(ДанныеДокумента.Ссылка) Тогда 
		ЗаполнитьРеквизитыНовогоДокумента10158(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	КонецЕсли;
	
	КонвертацияДанныхДокумента10158(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ВставитьСсылкуНаКонвертированныйОбъект(ДанныеДокумента.Ссылка, ДокументОбъект.Ссылка, СоответствиеКонвертированныхОбъектов);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Процедура ЗаполнитьРеквизитыНовогоДокумента10158(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	
	СоответствиеРеквизитов = ПолучитьСоответствиеРеквизитовКонвертируемогоДокумента10158(ДанныеДокумента);
	
	Для Каждого Реквизит Из СоответствиеРеквизитов Цикл
		Если ТипЗнч(Реквизит.Значение) = Тип("Структура") Тогда 
			ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект[Реквизит.Ключ],
				ДанныеДокумента[Реквизит.Значение.ИмяТЧ], Реквизит.Значение, СоответствиеКонвертированныхОбъектов);
		Иначе
			ДокументОбъект[Реквизит.Ключ] = КонвертироватьДанные10158(ДанныеДокумента[Реквизит.Значение],
				СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоответствиеРеквизитовКонвертируемогоДокумента10158(ДанныеДокумента)
	
	Если ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП") Тогда 
		Возврат ПолучитьСоответствиеРеквизитовЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП10158(ДанныеДокумента);
	Иначе
		Возврат Новый Соответствие;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДокументСоответствующийКонвертируемому10158(ДанныеДокумента)
	
	Если ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП") Тогда
		Возврат Документы.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.СоздатьДокумент();
	Иначе
		Возврат ДанныеДокумента.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные функции для обновления.

Функция ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов)
	
	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(Ссылка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СоответствиеКонвертированныхОбъектовПоТипу.Получить(Ссылка);
	КонецЕсли;
	
КонецФункции

Процедура ВставитьСсылкуНаКонвертированныйОбъект(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта, СоответствиеКонвертированныхОбъектов)
	
	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(СсылкаИсходногоОбъетка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		СоответствиеКонвертированныхОбъектовПоТипу = Новый Соответствие;
		СоответствиеКонвертированныхОбъектов.Вставить(ТипЗнч(СсылкаИсходногоОбъетка), СоответствиеКонвертированныхОбъектовПоТипу);
	КонецЕсли;
	
	СоответствиеКонвертированныхОбъектовПоТипу.Вставить(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта);
	
КонецПроцедуры	

Функция НеПроизводитьКонвертациюЗначения(Тип)
	
	Если Тип = Тип("Число") 
		Или Тип = Тип("Строка")
		Или Тип = Тип("Дата") 
		Или Тип = Тип("Булево")
		Или Тип = Тип("УникальныйИдентификатор") 
		Или Тип = Тип("ХранилищаНастроекМенеджер") 
		Или Тип = Тип("Null") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьДокумента(ТЧПриемник, ДанныеИсточник, СоответствиеРеквизитовТЧ, СоответствиеКонвертированныхОбъектов)
	
	Если ТипЗнч(ДанныеИсточник) = Тип("РезультатЗапроса") Тогда
		ТЧИсточник = ДанныеИсточник.Выгрузить();
	Иначе 
		ТЧИсточник = ДанныеИсточник;
	КонецЕсли;
	
	ТЧПриемник.Очистить();
	Для Каждого СтрокаТЧИсточник Из ТЧИсточник Цикл
		СтрокаТЧПриемник = ТЧПриемник.Добавить();
		Для Каждого РеквизитТЧ Из СоответствиеРеквизитовТЧ Цикл
			Если РеквизитТЧ.Ключ <> "ИмяТЧ" Тогда
				СтрокаТЧПриемник[РеквизитТЧ.Ключ] = КонвертироватьДанные10158(СтрокаТЧИсточник[РеквизитТЧ.Значение], СоответствиеКонвертированныхОбъектов);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Протоколирование хода обновления.

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обновление информационной базы'");
	
КонецФункции	

Процедура ЗаписатьИнформацию(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, Текст);
	
КонецПроцедуры

Процедура ЗаписатьОшибку(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Текст);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с механизмом проверки контрольных соотношений.
//

Функция СоздатьСписокРасшифровкиПоказателей() Экспорт 
	
	СписокРасшифровкиПоказателей = Новый ТаблицаЗначений;
	СписокРасшифровкиПоказателей.Колонки.Добавить("Номер"); // ссылка на формулу
	СписокРасшифровкиПоказателей.Колонки.Добавить("ИмяПоказателя");
	СписокРасшифровкиПоказателей.Колонки.Добавить("ПредставлениеПоказателя");
	СписокРасшифровкиПоказателей.Колонки.Добавить("ЗначениеПоказателя");
	СписокРасшифровкиПоказателей.Колонки.Добавить("ФормулаПоказателя");
	СписокРасшифровкиПоказателей.Колонки.Добавить("СсылкаНаДокументРО"); // ссылка на декларацию
	СписокРасшифровкиПоказателей.Колонки.Добавить("ИмяСтраницы");
	СписокРасшифровкиПоказателей.Колонки.Добавить("Страница"); // Номер страницы для многостраничных разделов, для остальных "".
	СписокРасшифровкиПоказателей.Колонки.Добавить("ДополнительныеВозможности"); // Для вывода сообщений в расшифровках, например, если показатель отсутствует.
	
	Возврат СписокРасшифровкиПоказателей;
	
КонецФункции

Процедура ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, ПредставлениеПоказателя,
	ЗначениеПоказателя, ФормулаПоказателя, СсылкаНаДокументРО, ИмяСтраницы, ДополнительныеВозможности,
	НомерСтраницыДляМногостраничныхРазделов, СчетчикФормулДляРасшифровок) Экспорт
	
	НовСтр = СписокРасшифровкиПоказателей.Добавить();
	НовСтр.Номер = СчетчикФормулДляРасшифровок;
	НовСтр.ИмяПоказателя = ИмяПоказателя;
	НовСтр.ПредставлениеПоказателя = ПредставлениеПоказателя;
	НовСтр.ЗначениеПоказателя = ЗначениеПоказателя;
	НовСтр.ФормулаПоказателя = ФормулаПоказателя;
	НовСтр.СсылкаНаДокументРО = СсылкаНаДокументРО;
	НовСтр.ИмяСтраницы = ИмяСтраницы;
	НовСтр.Страница = ?(НомерСтраницыДляМногостраничныхРазделов = Неопределено, "", НомерСтраницыДляМногостраничныхРазделов);
	НовСтр.ДополнительныеВозможности = ДополнительныеВозможности;

КонецПроцедуры

Функция СоздатьСписокРасшифровкиформулы() Экспорт 
	
	СписокРасшифровкиформулы = Новый ТаблицаЗначений;
	СписокРасшифровкиформулы.Колонки.Добавить("Номер");
	СписокРасшифровкиформулы.Колонки.Добавить("ТекстовоеПредставлениеФормулы");
	
	Возврат СписокРасшифровкиформулы;
	
КонецФункции

Процедура ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ТекстовоеПредставлениеФормулы, 
	ТребуемыйНомерДляСоставныхФормул, СчетчикФормулДляРасшифровок) Экспорт
	
	НовСтр = СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы = ТекстовоеПредставлениеФормулы;
	НовСтр.Номер = ?(ТребуемыйНомерДляСоставныхФормул = Неопределено, СчетчикФормулДляРасшифровок, ТребуемыйНомерДляСоставныхФормул);
	
КонецПроцедуры

Функция ПолучитьДокументПНП(ТекущийДокумент, ОтчетныйПериод = Неопределено, НарастающийИтог = Ложь) Экспорт 
	
	Шаг = 0;
	
	Если ОтчетныйПериод = Неопределено Тогда
		
		ПериодичностьОтчета = ТекущийДокумент.Периодичность;
		
		Если ПериодичностьОтчета = Перечисления.Периодичность.ПустаяСсылка()
		   И ТекущийДокумент.ИсточникОтчета = "РегламентированныйОтчетНалогНаИгорныйБизнес" Тогда
			Шаг = -1;
		ИначеЕсли ПериодичностьОтчета = Перечисления.Периодичность.ПустаяСсылка()
			    И СтрЧислоВхождений(ТекущийДокумент.ИсточникОтчета, "РегламентированныйОтчетАлкоПриложение") > 0 Тогда
			ПериодичностьОтчета = Перечисления.Периодичность.Квартал;
		КонецЕсли;
		
		Если ПериодичностьОтчета = Перечисления.Периодичность.Год Тогда
			Шаг = -12;
		ИначеЕсли ПериодичностьОтчета = Перечисления.Периодичность.Квартал Тогда
			Шаг = -3;
		ИначеЕсли ПериодичностьОтчета = Перечисления.Периодичность.Месяц Тогда
			Шаг = -1;
		ИначеЕсли ПериодичностьОтчета = Перечисления.Периодичность.Полугодие Тогда
			Шаг = -6;
		КонецЕсли;
		
		НачалоПериодаДокумента = ?(НарастающийИтог, НачалоГода(ТекущийДокумент.ДатаНачала),
			НачалоМесяца(ДобавитьМесяц(ТекущийДокумент.ДатаНачала, Шаг)));
		ПериодДокумента = Новый Структура("Начало, Окончание", НачалоПериодаДокумента,
			НачалоДня(КонецМесяца(ДобавитьМесяц(ТекущийДокумент.ДатаОкончания, Шаг))));
		
	ИначеЕсли ОтчетныйПериод = -109 Тогда // 9 мес. предыдущего отчетного периода.
		НачалоПНП = НачалоГода(ДобавитьМесяц(ТекущийДокумент.ДатаНачала, -12));
		ПериодДокумента = Новый Структура("Начало, Окончание", НачалоПНП, НачалоДня(КонецМесяца(ДобавитьМесяц(НачалоПНП, 8))));
	ИначеЕсли ОтчетныйПериод = -112 Тогда // 12 мес. (год) предыдущего отчетного периода.
		НачалоПНП = НачалоГода(ДобавитьМесяц(ТекущийДокумент.ДатаНачала, -12));
		ПериодДокумента = Новый Структура("Начало, Окончание", НачалоПНП, НачалоДня(КонецГода(НачалоПНП)));
	ИначеЕсли ОтчетныйПериод = 1 Тогда // 1 квартал.
		НачалоПНП = НачалоГода(ТекущийДокумент.ДатаНачала);
		ПериодДокумента = Новый Структура("Начало, Окончание", НачалоПНП, НачалоДня(КонецМесяца(ДобавитьМесяц(НачалоПНП, 2))));
	ИначеЕсли ОтчетныйПериод = 2 Тогда // 2 квартал.
		НачалоПНП = ДобавитьМесяц(НачалоГода(ТекущийДокумент.ДатаНачала), 3);
		ПериодДокумента = Новый Структура("Начало, Окончание", ?(НарастающийИтог, НачалоГода(ТекущийДокумент.ДатаНачала), НачалоПНП), 
			НачалоДня(КонецМесяца(ДобавитьМесяц(НачалоПНП, 2))));
	ИначеЕсли ОтчетныйПериод = 3 Тогда // 3 квартал.
		НачалоПНП = ДобавитьМесяц(НачалоГода(ТекущийДокумент.ДатаНачала), 6);
		ПериодДокумента = Новый Структура("Начало, Окончание", ?(НарастающийИтог, НачалоГода(ТекущийДокумент.ДатаНачала), НачалоПНП), 
			НачалоДня(КонецМесяца(ДобавитьМесяц(НачалоПНП, 2))));
	ИначеЕсли ОтчетныйПериод = 4 Тогда // 4 квартал.
		НачалоПНП = ДобавитьМесяц(НачалоГода(ТекущийДокумент.ДатаНачала), 9);
		ПериодДокумента = Новый Структура("Начало, Окончание",  ?(НарастающийИтог, НачалоГода(ТекущийДокумент.ДатаНачала), НачалоПНП), 
			НачалоДня(КонецМесяца(ДобавитьМесяц(НачалоПНП, 2))));
	КонецЕсли;
	
	ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ТекущийДокумент.ИсточникОтчета, ПериодДокумента.Окончание);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ТекущийДокумент.ИсточникОтчета);
	Запрос.УстановитьПараметр("Организация", ТекущийДокумент.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодДокумента.Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодДокумента.Окончание);
	Запрос.УстановитьПараметр("ИмяФормыОтчета", "%" + ИмяФормыОтчета + "%");
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегламентированныйОтчет.Вид КАК Вид,
	|	РегламентированныйОтчет.КодНалоговогоОргана,
	|	РегламентированныйОтчет.Ссылка,
	|	РегламентированныйОтчет.ВыбраннаяФорма,
	|	РегламентированныйОтчет.ДатаНачала,
	|	РегламентированныйОтчет.ДатаОкончания
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.Организация = &Организация
	|	И РегламентированныйОтчет.ДатаНачала = &ДатаНачала
	|	И РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания
	|	И РегламентированныйОтчет.ВыбраннаяФорма ПОДОБНО &ИмяФормыОтчета
	|	И НЕ РегламентированныйОтчет.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид УБЫВ";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

// Функция возвращает структуру с данными регламентированного отчета.
//
// Возвращаемое значение: структура с данными регл. отчета.
//
// Параметры:
//  СсылкаНаСохрРегОтчет - ссылка на сохраненный регламентированный отчет, данные которого нужно получить.
//
Функция ПолучитьДанныеСохрРегОтчета(СсылкаНаСохрРегОтчет) Экспорт
	
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеМногострочныхРазделов;
	Перем ПоказателиРеглОтчета;
	
	ДанныеСохрРегОтчета = Новый Структура;
	
	ДанныеРазделовРеглОтчета = Новый Структура;
	
	СписокСохранения = СсылкаНаСохрРегОтчет.ДанныеОтчета.Получить();
	
	Если СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиРеглОтчета) Тогда
		
		Для Каждого ЭлементСтруктуры Из ПоказателиРеглОтчета Цикл
			
			ДанныеРазделовРеглОтчета.Вставить(СтрЗаменить(ЭлементСтруктуры.Ключ, "ПолеТабличногоДокумента", ""), ЭлементСтруктуры.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			ДанныеРазделовРеглОтчета.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			Для Каждого РазделРеглОтчета Из ПоказателиРеглОтчета Цикл
				
				Для Каждого ПоказательРеглОтчета Из РазделРеглОтчета.Значение Цикл
					
					Если Лев(ПоказательРеглОтчета.Ключ, 11) = ЭлементСтруктуры.Ключ Тогда
						
						ДанныеРазделовРеглОтчета.Вставить(СтрЗаменить(РазделРеглОтчета.Ключ, "ПолеТабличногоДокумента", "") + "_ДанныеДопСтрок",
							ЭлементСтруктуры.Значение);
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеСохрРегОтчета.Вставить("ДанныеРазделовРеглОтчета", ДанныеРазделовРеглОтчета);
	
	Возврат ДанныеСохрРегОтчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции механизма поддержки внешних регламентированных отчетов.

Функция ЗакэшироватьСтруктуруОписанияОтчета(РеглОтч)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать,
	                      |	РегламентированныеОтчеты.ИсточникОтчета,
	                      |	ВЫБОР
	                      |		КОГДА РегламентированныеОтчеты.ВнешнийОтчетИспользовать
	                      |			ТОГДА РегламентированныеОтчеты.ВнешнийОтчетХранилище
	                      |		ИНАЧЕ NULL
	                      |	КОНЕЦ КАК ВнешнийОтчетХранилище
	                      |ИЗ
	                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	                      |ГДЕ
	                      |	РегламентированныеОтчеты.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", РеглОтч);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ПризнакИспользованияВнешнегоОтчета = Выборка.ВнешнийОтчетИспользовать;
	СтруктураПараметровОтчета = Новый Структура("Признак", ПризнакИспользованияВнешнегоОтчета);
	Если ПризнакИспользованияВнешнегоОтчета Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Выборка.ВнешнийОтчетХранилище.Получить());
		ИмяОбработки = ВнешниеОтчеты.Подключить(АдресВоВременномХранилище, , Истина);
		СтруктураПараметровОтчета.Вставить("Файл", ИмяОбработки);
	КонецЕсли;
	
	СоответствиеПараметров = Новый Соответствие;
	Если ТипЗнч(ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов) = Тип("ФиксированноеСоответствие") И ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов.Количество() > 0 Тогда 
		Для Каждого ЭлементСоответствия Из ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов Цикл 
			СоответствиеПараметров.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
	КонецЕсли;
	
	СоответствиеПараметров[Выборка.ИсточникОтчета] = Новый ФиксированнаяСтруктура(СтруктураПараметровОтчета);
	ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов = Новый ФиксированноеСоответствие(СоответствиеПараметров);
	
	Возврат СтруктураПараметровОтчета;
	
КонецФункции

// Возвращает двоичные данные с файлом - внешним отчетом с учетом кэша (реквизит ВнешнийОтчетХранилище), 
// для переданного в качестве параметра элемента справочника РегламентированныеОтчеты.
// Параметры:
//		РеглОтч - ссылка на элемент справочника РегламентированныеОтчеты.
// Возвращаемое значение:
//		Содержимое реквизита ВнешнийОтчетХранилище элемента справочника с учетом кэша.
Функция ФайлОтчетаСУчетомКэша(РеглОтч, НеЗапоминатьВКэше = Ложь)
	Перем ПараметрыОтчета;
	
	ПараметрыОтчета = ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов.Получить(РеглОтч.ИсточникОтчета);
	Если ПараметрыОтчета <> Неопределено Тогда
		Возврат ПараметрыОтчета.Файл;
	Иначе
		Если НеЗапоминатьВКэше Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(РеглОтч.ВнешнийОтчетХранилище.Получить());
			ВременныйФайл = ВнешниеОтчеты.Подключить(АдресВоВременномХранилище, , Истина);
			Возврат ВременныйФайл;
		Иначе
			Возврат ЗакэшироватьСтруктуруОписанияОтчета(РеглОтч).Файл;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает признак использования внешнего отчета с учетом кэша (реквизит ВнешнийОтчетИспользовать), 
// для переданного в качестве параметра элемента справочника РегламентированныеОтчеты.
// Параметры:
//		РеглОтч - ссылка на элемент справочника РегламентированныеОтчеты.
// Возвращаемое значение:
//		Признак использования внешнего отчета для заданного элемента справочника с учетом кэша.
Функция ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(РеглОтч, НеЗапоминатьВКэше = Ложь)
	Перем ПараметрыОтчета;
	
	ПараметрыОтчета = ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов.Получить(РеглОтч.ИсточникОтчета);
	Если ПараметрыОтчета <> Неопределено Тогда
		Возврат ПараметрыОтчета.Признак;
	Иначе
		Если НеЗапоминатьВКэше Тогда
			Возврат РеглОтч.ВнешнийОтчетИспользовать;
		Иначе
			Возврат ЗакэшироватьСтруктуруОписанияОтчета(РеглОтч).Признак;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция КодТерриториальногоОбразования(Организация, ДатаПодписиОтчета, ДатаПериодаОтчета) Экспорт
	
	Результат = "";
	
	Если ДатаПодписиОтчета >= '2014-01-01'
	   И Год(ДатаПериодаОтчета) >= 2013 Тогда
	   
		РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписиОтчета, "ОКТМО").Свойство("ОКТМО", Результат);
		
	Иначе
		
		РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписиОтчета, "ОКАТО").Свойство("ОКАТО", Результат);
				
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьДанныеРасшифровкиСтатистическогоОтчета(Форма, СписокСохранения) Экспорт 
	Если Форма.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено 
		И Форма.СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
	КонецЕсли;
КонецПроцедуры

Процедура ВосстановитьДанныеРасшифровкиСтатистическогоОтчета(Форма, СписокСохранения) Экспорт
	
	ТаблицаРасшифровки = Неопределено;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
									
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(, "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		Форма.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, Форма.УникальныйИдентификатор);
		
		Форма.Элементы.Расшифровать.Доступность = Истина;
		
	Иначе 
		
		Форма.Элементы.Расшифровать.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеАвтозаполненияСтатистическогоОтчета(Форма) Экспорт
	СтруктураДанных = ПолучитьИзВременногоХранилища(Форма.АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Контейнер = Неопределено;
	СтруктураДанных.Свойство("Контейнер", Контейнер);
	
	Если ТипЗнч(Контейнер) <> Тип("Структура") Тогда
		Контейнер = СтруктураДанных;
		Форма.Элементы.Расшифровать.Доступность = Ложь;
	Иначе 
		ТаблицаРасшифровки = Неопределено;
		Если СтруктураДанных.Свойство("ТаблицаРасшифровки", ТаблицаРасшифровки) И ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
			Форма.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, Форма.УникальныйИдентификатор);
			Форма.Элементы.Расшифровать.Доступность = Истина;
		Иначе
			Форма.Элементы.Расшифровать.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Контейнер;
КонецФункции

Функция ВидКонтактнойИнформации(НаимВидаКИ) Экспорт
	
	ВидКИ = Неопределено;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьВидКонтактнойИнформации(ВидКИ, НаимВидаКИ);
	
	Если ВидКИ = Неопределено Тогда
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации[НаимВидаКИ];
		
	КонецЕсли;	
	
	Возврат ВидКИ;
	
КонецФункции

Функция ПолучитьДокументМДКС(ТекущийДокумент, ИсточникОтчета, ОтчетныйПериод = Неопределено, НарастающийИтог = Ложь) Экспорт 
	
	СписокРегламентированныхОтчетов = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСписокРегламентированныхОтчетов();
	Если СписокРегламентированныхОтчетов.НайтиПоЗначению(ИсточникОтчета) = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Шаг = 0;
	
	Если ИсточникОтчета = "РегламентированныйОтчет3НДФЛ" Тогда
		ОтчетныйПериод = 112;
	КонецЕсли;
	
	Если ОтчетныйПериод = Неопределено Тогда 
		ПериодичностьОтчета = ТекущийДокумент.Периодичность;
		
		Если ИсточникОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
			НарастающийИтог = Истина;
		ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетРСВ1" Тогда
			НарастающийИтог = Истина;
		ИначеЕсли ИсточникОтчета = "РегламентированныйОтчет4ФСС" Тогда
			НарастающийИтог = Истина;
		КонецЕсли;
		
		НачалоПериодаДокумента = ?(НарастающийИтог, НачалоГода(ТекущийДокумент.ДатаНачала), НачалоМесяца(ДобавитьМесяц(ТекущийДокумент.ДатаНачала, Шаг)));
		ПериодДокумента = Новый Структура("Начало, Окончание", НачалоПериодаДокумента,
			НачалоДня(КонецМесяца(ДобавитьМесяц(ТекущийДокумент.ДатаОкончания, Шаг))));
			
	ИначеЕсли ОтчетныйПериод = -109 Тогда // 9 мес. предыдущего отчетного периода.
		НачалоПНП = НачалоГода(ДобавитьМесяц(ТекущийДокумент.ДатаНачала, -12));
		ПериодДокумента = Новый Структура("Начало, Окончание", НачалоПНП, НачалоДня(КонецМесяца(ДобавитьМесяц(НачалоПНП, 8))));
	ИначеЕсли ОтчетныйПериод = 112 Тогда // 12 мес. (год).
		НачалоПериода = НачалоГода(ТекущийДокумент.ДатаНачала);
		ПериодДокумента = Новый Структура("Начало, Окончание", НачалоПериода, НачалоДня(КонецГода(НачалоПериода)));
	КонецЕсли;
		
	ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ИсточникОтчета, ПериодДокумента.Окончание);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("Организация", ТекущийДокумент.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодДокумента.Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодДокумента.Окончание);
	Запрос.УстановитьПараметр("ИмяФормыОтчета", "%" + ИмяФормыОтчета + "%");
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегламентированныйОтчет.Вид КАК Вид,
	|	РегламентированныйОтчет.КодНалоговогоОргана,
	|	РегламентированныйОтчет.Ссылка,
	|	РегламентированныйОтчет.ВыбраннаяФорма,
	|	РегламентированныйОтчет.ДатаНачала,
	|	РегламентированныйОтчет.ДатаОкончания
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.Организация = &Организация
	|	И РегламентированныйОтчет.ДатаНачала = &ДатаНачала
	|	И РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания
	|	И РегламентированныйОтчет.ВыбраннаяФорма ПОДОБНО &ИмяФормыОтчета
	|	И НЕ РегламентированныйОтчет.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид УБЫВ";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Процедура ПолучитьТаблицуПараметровИБ(ТаблицаПараметров) Экспорт
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИспользоватьСервисФормированияМЧБсPDF417");
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИспользоватьСервисФормированияМЧБсPDF417ТолькоВРежимеВебКлиента");
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресСервисаФормированияМЧБсPDF417");
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИмяПользователяСервисаФормированияМЧБсPDF417");
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ПарольПользователяСервисаФормированияМЧБсPDF417");
	
КонецПроцедуры

Функция ВыборкаСегментовРазделаДекларации(ДекларацияНДС, ИмяРаздела, Префикс)
	
	ШаблонОтбора = Префикс + ИмяРаздела + ".%";
	
	ЗапросПоДанным = Новый Запрос;
	ЗапросПоДанным.Текст = "ВЫБРАТЬ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла Как ВидДополнительногоФайла
	                       |ИЗ
	                       |	РегистрСведений.ДополнительныеФайлыРегламентированныхОтчетов КАК ДополнительныеФайлыРегламентированныхОтчетов
	                       |ГДЕ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
	                       |	И ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла ПОДОБНО &ШаблонОтбора";
	
	ЗапросПоДанным.УстановитьПараметр("ШаблонОтбора", ШаблонОтбора);
	ЗапросПоДанным.УстановитьПараметр("РегламентированныйОтчет", ДекларацияНДС);
	
	ВыборкаСегментов = ЗапросПоДанным.Выполнить().Выбрать();
	
	Возврат ВыборкаСегментов;
	
КонецФункции

Процедура ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи) Экспорт
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	
	ЗаписьРегистраСведений.РегламентированныйОтчет = ПараметрыЗаписи.РегламентированныйОтчет;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = ПараметрыЗаписи.ВидДополнительногоФайла;
	
	ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(ПараметрыЗаписи.Данные);
	
	ЗаписьРегистраСведений.ИмяФайла           = ПараметрыЗаписи.ВидДополнительногоФайла;
	ЗаписьРегистраСведений.Размер             = 1;
	ЗаписьРегистраСведений.ДатаИзмененияФайла = ТекущаяДатаСеанса();
	ЗаписьРегистраСведений.ДатаДобавления     = ЗаписьРегистраСведений.ДатаИзмененияФайла;
	
	ЗаписьРегистраСведений.Записать();
	
КонецПроцедуры

Функция ДанныеРегистраДополнительныхФайлов(ПараметрыЧтения) Экспорт
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	
	ЗаписьРегистраСведений.РегламентированныйОтчет = ПараметрыЧтения.РегламентированныйОтчет;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = ПараметрыЧтения.ВидДополнительногоФайла;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
		Данные = ЗаписьРегистраСведений.СодержимоеФайла.Получить();
	Иначе
		Данные = Неопределено;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Обработчик подписки на событие "ВыполнитьДействияПриКопированииОрганизацииБРО".
//
Процедура ВыполнитьДействияПриКопированииОрганизацииБРО(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Организации")
	   И НЕ Источник.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане") = Неопределено
	   И НЕ Метаданные.НайтиПоПолномуИмени("Справочник.РегистрацииВНалоговомОргане") = Неопределено Тогда
	   
		Источник.РегистрацияВНалоговомОргане = Справочники["РегистрацииВНалоговомОргане"].ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает фиксированное соответствие, содержащее некоторые параметры клиента:
//  ПараметрЗапуска                    - Строка,
//  СтрокаСоединенияИнформационнойБазы - Строка - строка соединения, полученная на клиенте.
//
// Возвращает пустое фиксированное соответствие, если ТекущийРежимЗапуска() = Неопределено.
//
Функция ПараметрыКлиентаНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПараметрыКлиента.Количество() = 0
	   И ТекущийРежимЗапуска() <> Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Не заполнены параметры клиента на сервере.'");
	КонецЕсли;
	
	Возврат ПараметрыКлиента;
	
КонецФункции

Функция ВыборкаРегламентированныхОтчетов(Организация, ДатаНачала, ДатаОкончания, ВидыОтчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегламентированныеОтчеты.Ссылка КАК РегламентированныйОтчет,
	               |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета,
	               |	РегламентированныеОтчеты.ВыбраннаяФорма КАК ВыбраннаяФорма,
	               |	РегламентированныеОтчеты.Период КАК ПериодДокумента,
	               |	РегламентированныеОтчеты.КодНалоговогоОргана КАК КодНалоговогоОргана,
	               |	РегламентированныеОтчеты.Вид КАК Вид,
	               |	РегламентированныеОтчеты.МоментВремени КАК МоментВремени,
	               |	РегламентированныеОтчеты.Дата КАК ДатаОтчета,
	               |	РегламентированныеОтчеты.ДатаНачала КАК ОтчетныйПериод,
	               |	РегламентированныеОтчеты.Периодичность КАК Периодичность,
	               |	РегламентированныеОтчеты.ДатаНачала КАК ДатаНачала,
	               |	РегламентированныеОтчеты.ДатаОкончания КАК ДатаОкончания
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныеОтчеты
	               |ГДЕ
	               |	НЕ РегламентированныеОтчеты.ПометкаУдаления
	               |	И РегламентированныеОтчеты.Организация = &Организация
	               |	И РегламентированныеОтчеты.ДатаНачала >= &ДатаНачала
	               |	И РегламентированныеОтчеты.ДатаОкончания <= &ДатаОкончания
	               |	И РегламентированныеОтчеты.ИсточникОтчета В(&ВидыОтчетов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МоментВремени";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ВидыОтчетов", ВидыОтчетов);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр) Экспорт
	
	ФИОСтр = СокрЛП(ФИОСтр);
	
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = СтрНайти(ФИОСтр, " ");
	
	Если ПервыйПробел = 0 Тогда
		
		ФИО.Фамилия = ФИОСтр;
		
		Возврат ФИО;
		
	КонецЕсли;
	
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = СтрНайти(ФИОСтр, " ");
	
	Если ВторойПробел = 0 Тогда
		
		ФИО.Имя = ФИОСтр;
		
		Возврат ФИО;
		
	КонецЕсли;
	
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ФИОФизическихЛицСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	ФизическиеЛица.Наименование ПОДОБНО &Фамилия";
	
	Запрос.УстановитьПараметр("Фамилия", СокрЛП(ФИО.Фамилия) + "%");
		
	Результат = Запрос.Выполнить();
	
	ФИОФизическихЛиц = Результат.Выбрать();
	
	Пока ФИОФизическихЛиц.Следующий() Цикл
		
		ФИОФизическогоЛица = СокрЛП(ФИОФизическихЛиц.Фамилия) + " " + СокрЛП(ФИОФизическихЛиц.Имя) + " " + СокрЛП(ФИОФизическихЛиц.Отчество);
		
		Если ВРег(СокрЛП(ФИОФизическогоЛица)) = ВРег(СокрЛП(СокрЛП(ФИО.Фамилия) + " " + СокрЛП(ФИО.Имя) + " " + СокрЛП(ФИО.Отчество))) Тогда
			
			ФИО.Фамилия  = СокрЛП(ФИОФизическихЛиц.Фамилия);
			ФИО.Имя      = СокрЛП(ФИОФизическихЛиц.Имя);
			ФИО.Отчество = СокрЛП(ФИОФизическихЛиц.Отчество);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФИО;
	
КонецФункции

Функция ЛьготыПоКадастровымНомерам(ОрганизацияВладелец, ДатаСреза) Экспорт
	
	ТаблицаЗемельныхУчастков = Новый ТаблицаЗначений;
	ТаблицаЗемельныхУчастков.Колонки.Добавить("КадастровыйНомер");
	ТаблицаЗемельныхУчастков.Колонки.Добавить("ПроцентУменьшенияСуммыНалога");
	ТаблицаЗемельныхУчастков.Колонки.Добавить("СниженнаяНалоговаяСтавка");
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьЛьготыПоКадастровымНомерам(ТаблицаЗемельныхУчастков, ОрганизацияВладелец, ДатаСреза);
	
	Возврат ТаблицаЗемельныхУчастков;
	
КонецФункции

Функция АдресВФормате9Запятых(Запись) Экспорт
	
	Если СтрЧислоСтрок(Запись.ЗначенияПолей) = 1
	   И СтрЧислоВхождений(Запись.ЗначенияПолей, "КонтактнаяИнформация") = 2 Тогда
		
		СтруктураАдресаЗаписи = УправлениеКонтактнойИнформацией.СведенияОбАдресе(Запись.ЗначенияПолей);
		
		АдресБезКодаСтраны = СокрЛП(СтруктураАдресаЗаписи.Индекс) + "," + СокрЛП(СокрЛП(СтруктураАдресаЗаписи.Регион) + " " + СокрЛП(СтруктураАдресаЗаписи.РегионСокращение)) + "," + СокрЛП(СокрЛП(СтруктураАдресаЗаписи.Район) + " " + СокрЛП(СтруктураАдресаЗаписи.РайонСокращение)) + ","
		+ СокрЛП(СокрЛП(СтруктураАдресаЗаписи.Город) + " " + СокрЛП(СтруктураАдресаЗаписи.ГородСокращение)) + "," + СокрЛП(СокрЛП(СтруктураАдресаЗаписи.НаселенныйПункт) + " " + СокрЛП(СтруктураАдресаЗаписи.НаселенныйПунктСокращение)) + "," + СокрЛП(СокрЛП(СтруктураАдресаЗаписи.Улица) + " " + СокрЛП(СтруктураАдресаЗаписи.УлицаСокращение)) + ","
		+ СокрЛП(?(СтруктураАдресаЗаписи.Свойство("Здание") И СтруктураАдресаЗаписи.Здание.Свойство("Номер"), СтруктураАдресаЗаписи.Здание.Номер, "")) + ","
		+ СокрЛП(?(СтруктураАдресаЗаписи.Свойство("Корпуса") И СтруктураАдресаЗаписи.Корпуса.Количество() > 0 И СтруктураАдресаЗаписи.Корпуса[0].Свойство("Номер"), СтруктураАдресаЗаписи.Корпуса[0].Номер, "")) + ","
		+ СокрЛП(?(СтруктураАдресаЗаписи.Свойство("Помещения") И СтруктураАдресаЗаписи.Помещения.Количество() > 0 И СтруктураАдресаЗаписи.Помещения[0].Свойство("Номер"), СтруктураАдресаЗаписи.Помещения[0].Номер, ""));
		
		АдресБезКодаСтраны = АдресБезКодаСтраны + "," + ?(СтруктураАдресаЗаписи.Свойство("Здание") И СтруктураАдресаЗаписи.Здание.Свойство("ТипЗдания") И НЕ СокрЛП(СтруктураАдресаЗаписи.Здание.ТипЗдания) = "", НРег(СокрЛП(СтруктураАдресаЗаписи.Здание.ТипЗдания)), "") + ","
		+ ?(СтруктураАдресаЗаписи.Свойство("Корпуса") И СтруктураАдресаЗаписи.Корпуса.Количество() > 0 И СтруктураАдресаЗаписи.Корпуса[0].Свойство("ТипКорпуса") И НЕ СокрЛП(СтруктураАдресаЗаписи.Корпуса[0].ТипКорпуса) = "", НРег(СокрЛП(СтруктураАдресаЗаписи.Корпуса[0].ТипКорпуса)), "") + ","
		+ ?(СтруктураАдресаЗаписи.Свойство("Помещения") И СтруктураАдресаЗаписи.Помещения.Количество() > 0 И СтруктураАдресаЗаписи.Помещения[0].Свойство("ТипПомещения") И НЕ СокрЛП(СтруктураАдресаЗаписи.Помещения[0].ТипПомещения) = "", НРег(СокрЛП(СтруктураАдресаЗаписи.Помещения[0].ТипПомещения)), "");
		
	Иначе
			
		СтруктураАдреса = Новый Структура("Индекс, Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира, ТипДома, ТипКорпуса, ТипКвартиры");
		
		СтруктураАдресаЗаписи = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(Запись.ЗначенияПолей);
		ЗаполнитьЗначенияСвойств(СтруктураАдреса, СтруктураАдресаЗаписи);
		
		АдресБезКодаСтраны = СокрЛП(СтруктураАдреса.Индекс) + "," + СокрЛП(СтруктураАдреса.Регион) + "," + СокрЛП(СтруктураАдреса.Район) + ","
		+ СокрЛП(СтруктураАдреса.Город) + "," + СокрЛП(СтруктураАдреса.НаселенныйПункт) + "," + СокрЛП(СтруктураАдреса.Улица) + ","
		+ СокрЛП(СтруктураАдреса.Дом) + "," + СокрЛП(СтруктураАдреса.Корпус) + "," + СокрЛП(СтруктураАдреса.Квартира);
		
		Если СтруктураАдреса.Свойство("ТипДома") И СтруктураАдреса.Свойство("ТипКорпуса") И СтруктураАдреса.Свойство("ТипКвартиры") Тогда
			
			АдресБезКодаСтраны = АдресБезКодаСтраны + "," + ?(СокрЛП(СтруктураАдреса.Дом) = "", "", НРег(СокрЛП(СтруктураАдреса.ТипДома))) + ","
			+ ?(СокрЛП(СтруктураАдреса.Корпус) = "", "", НРег(СокрЛП(СтруктураАдреса.ТипКорпуса))) + ","
			+ ?(СокрЛП(СтруктураАдреса.Квартира) = "", "", НРег(СокрЛП(СтруктураАдреса.ТипКвартиры)));
			
		КонецЕсли;												  					
		
	КонецЕсли;
	
	Если АдресБезКодаСтраны = ",,,,,,,,,,," Тогда
		
		Возврат ",,,,,,,,,";
		
	Иначе
		
		Возврат "643," + АдресБезКодаСтраны;
		
	КонецЕсли;
	
КонецФункции

Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.ОператорОтправкиОтчетностиЧерезПредставителя.Имя);
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.ДобавлениеИзменениеНеразделяемыхДанныхРегламентированнойОтчетности.Имя);
	
КонецПроцедуры

Функция СформироватьСтруктуруОбязательныхРеквизитовУведомления() Экспорт
	СтруктураРеквизитовФормы = Новый Структура;
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветАвтоЗаполнение", Новый Цвет(230, 240, 220));
	СтруктураРеквизитовФормы.Вставить("ЦветАвтоРасчет", Новый Цвет(192, 220, 192));
	СтруктураРеквизитовФормы.Вставить("ЦветВручную", Новый Цвет(255, 255, 192));
	
	Возврат СтруктураРеквизитовФормы;
КонецФункции

// Возвращает строку с актуальной формой на дату, либо последней формой в списке, если дата не указана
//  ВидУведомления                    - Перечисление.ВидыУведомленийОСпецрежимахНалогообложения,
//  Дата                              - На какую дату требуется форма, если не указано - не сегодня
//
Функция ПолучитьАктуальнуюФормуУведомления(ВидУведомления, Дата = Неопределено) Экспорт 
	ИмяОтчета = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(ВидУведомления);
	ТаблицаФорм = Отчеты[ИмяОтчета].ПолучитьТаблицуФорм();
	Если Не ЗначениеЗаполнено(Дата) Тогда 
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТаблицаФорм.Количество() = 1 Тогда
		Возврат ТаблицаФорм[0].ИмяФормы;
	Иначе
		Для Каждого Стр Из ТаблицаФорм Цикл 
			Если Дата >= НачалоДня(Стр.ДатаНачала) И Дата <= КонецДня(Стр.ДатаКонца) Тогда 
				Возврат Стр.ИмяФормы;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат "";
КонецФункции

Процедура ПолучитьПоказателиОдностраничногоУведомления(Форма, ИмяМакета) Экспорт 
	Попытка
		СтруктураРеквизитов = Форма.СтруктураРеквизитов;
	Исключение
		Возврат;
	КонецПопытки;
	
	АвтозаполняемыеПоказателиОтчета = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(Сред(Лев(Форма.ИмяФормы, СтрНайти(Форма.ИмяФормы, ".Форма.") - 1), 7), Сред(Форма.ИмяФормы, СтрНайти(Форма.ИмяФормы, ".Форма.") + 7));
	
	Если АвтозаполняемыеПоказателиОтчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого АвтозаполняемыйПоказательОтчета Из АвтозаполняемыеПоказателиОтчета Цикл
		Если АвтозаполняемыйПоказательОтчета.Значение[0] Тогда
			СтруктураРеквизитов.ОтображатьКнопкуЗаполнить = Истина;
			Если СтруктураРеквизитов.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если АвтозаполняемыйПоказательОтчета.Значение[1] Тогда
			СтруктураРеквизитов.ОтображатьКнопкуРасшифровать = Истина;
			Если СтруктураРеквизитов.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	АвтозаполняемыеПараметры = Форма.АвтозаполняемыеПараметры;
	АвтозаполняемыеПараметры.Очистить();
	
	ЭтаФормаИмя = Форма.ИмяФормы;
	МакетСоставаПоказателей = Отчеты[Форма.Объект.ИмяОтчета].ПолучитьМакет(ИмяМакета);
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		ТекОбласть = МакетСоставаПоказателей.Области[Инд];
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			Если АвтозаполняемыеПоказателиОтчета.Свойство(КодПоказателя) Тогда 
				АвтозаполняемыеПараметры.Добавить(КодПоказателя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура Раскрасить(Форма, ТабДок) Экспорт
	Для Каждого Элемент Из Форма.АвтозаполняемыеПараметры Цикл
		Обл = ТабДок.Области.Найти(Элемент);
		Если Обл <> Неопределено Тогда 
			Обл.ЦветФона = Форма.СтруктураРеквизитов.ЦветАвтоЗаполнение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ИнициализироватьПоказателиПоВекторам(Показатели, ВекторСтрок, ВекторПериодов)
	
	Строки = СтрРазделить(ВекторСтрок, ",");
	Периоды = СтрРазделить(ВекторПериодов, ",");
	
	Для Каждого Строка Из Строки Цикл
		Если Не ЗначениеЗаполнено(Строка) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Период Из Периоды Цикл
			Если Не ЗначениеЗаполнено(Период) Тогда
				Продолжить;
			КонецЕсли;
			
			Показатели.Вставить(СокрЛП(Строка) + СокрЛП(Период), 0);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Определяет возможность восстановления данных регламентированного отчета, сохраненного в 2.0.
//
// Возвращаемое значение:
//   Истина - возможно восстановить данные сохраненного в 2.0 регламентированного отчета;
//   Ложь   - в случае несовместимости регламентированного отчета.
//
// Параметры:
//   ОбъектРегОтчет          - ссылка на проверяемый регламентированный отчет, сохраненный в 2.0;
//   ДополнительныеПараметры - структура, по ключу "ТекстСообщения" возвращается текст для
//                             информирования пользователя (необязательный параметр).
//
Функция ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении(ОбъектРегОтчет, ДополнительныеПараметры = Неопределено) Экспорт
	
	СписокСохранения = ОбъектРегОтчет.ДанныеОтчета.Получить();
	
	Если СокрЛП(ОбъектРегОтчет.НаименованиеОтчета) = "Доходы, выплаченные иностранным организациям" Тогда
		
		Если СокрЛП(ОбъектРегОтчет.ВыбраннаяФорма) = "ФормаОтчета2016Кв1" Тогда
			
			ТипЧисло12_0 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0));
			
			Описание = НСтр("ru='Отчет сохранен в конфигурации предыдущей версии с неуникальными значениями показателя ""Уникальный номер"" в Разделе 3.1 и(или) неуникальными сочетаниями значений показателей ""Уникальный номер"" и ""Порядковый номер"" в Разделе 3.2.'");
			ДопПараметры = Новый Структура("ТекстСообщения", Описание);
			// Подразделы 3.1.
			СтарТабл31 = СписокСохранения.ДанныеМногостраничныхРазделов["Раздел31"];
			ТЗПров31 = Новый ТаблицаЗначений;
			ТЗПров31.Колонки.Добавить("УникНом", ТипЧисло12_0);
			Для каждого СтрСтарТабл31 Из СтарТабл31 Цикл
				НовСтрТЗПров31 = ТЗПров31.Добавить();
				НовСтрТЗПров31.УникНом = СтрСтарТабл31.Данные.П000310000103;
			КонецЦикла;
			ТЗПров31_ = ТЗПров31.Скопировать();
			ТЗПров31_.Свернуть("УникНом");
			Если ТЗПров31.Количество() <> ТЗПров31_.Количество() Тогда
				// Не пройдена проверка на неуникальность значений показателя
				// "Уникальный номер" в разделе 3.1.
				ДополнительныеПараметры = ДопПараметры;
				Возврат Ложь;
			КонецЕсли;
			// Подразделы 3.2.
			СтарТабл32 = СписокСохранения.ДанныеМногостраничныхРазделов["Раздел32"];
			ТЗПров32 = Новый ТаблицаЗначений;
			ТЗПров32.Колонки.Добавить("УникНом",  ТипЧисло12_0);
			ТЗПров32.Колонки.Добавить("ПорядНом", ТипЧисло12_0);
			Для каждого СтрСтарТабл32 Из СтарТабл32 Цикл
				НовСтрТЗПров32 = ТЗПров32.Добавить();
				НовСтрТЗПров32.УникНом  = СтрСтарТабл32.Данные.П000320000103;
				НовСтрТЗПров32.ПорядНом = СтрСтарТабл32.Данные.П000320001003;
			КонецЦикла;
			ТЗПров32_ = ТЗПров32.Скопировать();
			ТЗПров32_.Свернуть("УникНом,ПорядНом");
			Если ТЗПров32.Количество() <> ТЗПров32_.Количество() Тогда
				// Не пройдена проверка на неуникальность сочетаний значений показателей
				// "Уникальный номер" и "Порядковый номер дохода" в разделе 3.2.
				ДополнительныеПараметры = ДопПараметры;
				Возврат Ложь;
			КонецЕсли;
			
			Описание = НСтр("ru='В отчете, сохраненном в конфигурации предыдущей версии, не соблюдена последовательность в нумерации значений показателя ""Уникальный номер"" в Разделе 3.1 и(или) сочетаний значений показателей ""Уникальный номер"" и ""Порядковый номер"" в Разделе 3.2 и(или) Разделе 3.3.'");
			ДопПараметры.Вставить("ТекстСообщения", Описание);
			// Подразделы 3.1.
			ТЗПров31.Сортировать("УникНом");
			Для Инд = 0 По ТЗПров31.Количество() - 1 Цикл
				Если Инд = 0 Тогда
					Если ТЗПров31[Инд].УникНом > 1 Тогда
						// Не пройдена проверка на первый номер среди
						// значений "Уникальный номер" в разделе 3.1.
						// (Нумерация начинается со значения больше 1.)
						ДополнительныеПараметры = ДопПараметры;
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Если ТЗПров31[Инд].УникНом - ТЗПров31[Инд - 1].УникНом > 1 Тогда
						// Не пройдена проверка на последовательность в нумерации
						// среди значений "Уникальный номер" в разделе 3.1.
						// Например, после номера 3 идет номер 5, а должен 4.
						ДополнительныеПараметры = ДопПараметры;
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			// Подразделы 3.2.
			ТЗПров32_.Свернуть("УникНом");
			ТЗПров32_.Сортировать("УникНом");
			Для Инд = 0 По ТЗПров32_.Количество() - 1 Цикл
				Если Инд = 0 Тогда
					Если ТЗПров32_[Инд].УникНом > 1 Тогда
						// Не пройдена проверка на первый номер среди
						// значений "Уникальный номер" в разделе 3.2.
						// (Нумерация начинается со значения больше 1.)
						ДополнительныеПараметры = ДопПараметры;
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Если ТЗПров32_[Инд].УникНом - ТЗПров32_[Инд - 1].УникНом > 1 Тогда
						// Не пройдена проверка на последовательность в нумерации
						// среди значений "Уникальный номер" в разделе 3.2.
						// Например, после номера 3 идет номер 5, а должен 4.
						ДополнительныеПараметры = ДопПараметры;
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ТЗПров32_ = ТЗПров32.Скопировать();
			ТЗПров32_.Свернуть("УникНом,ПорядНом");
			ТЗПров32_.Сортировать("УникНом,ПорядНом");
			ПредУникНом = Неопределено;
			Для Инд = 0 По ТЗПров32_.Количество() - 1 Цикл
				ТекУникНом = ТЗПров32_[Инд].УникНом;
				Если ТекУникНом <> ПредУникНом Тогда
					Если ТЗПров32_[Инд].ПорядНом > 1 Тогда
						// Не пройдена проверка на первый номер среди
						// значений "Порядковый номер" в разделе 3.2.
						// (Нумерация начинается со значения больше 1.)
						ДополнительныеПараметры = ДопПараметры;
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Если ТЗПров32_[Инд].ПорядНом - ТЗПров32_[Инд - 1].ПорядНом > 1 Тогда
						// Не пройдена проверка на последовательность в нумерации
						// среди значений "Порядковый номер" в разделе 3.2.
						// Например, после номера 3 идет номер 5, а должен 4.
						ДополнительныеПараметры = ДопПараметры;
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
				ПредУникНом = ТекУникНом;
			КонецЦикла;
			// Подразделы 3.3.
			СтарТабл33 = СписокСохранения.ДанныеМногостраничныхРазделов["Раздел33"];
			ТЗПров33 = Новый ТаблицаЗначений;
			ТЗПров33.Колонки.Добавить("УникНом",  ТипЧисло12_0);
			ТЗПров33.Колонки.Добавить("ПорядНом", ТипЧисло12_0);
			Для каждого СтрСтарТабл33 Из СтарТабл33 Цикл
				НовСтрТЗПров33 = ТЗПров33.Добавить();
				НовСтрТЗПров33.УникНом  = СтрСтарТабл33.Данные.П000330000103;
				НовСтрТЗПров33.ПорядНом = СтрСтарТабл33.Данные.П000330001003;
			КонецЦикла;
			ТЗПров33_ = ТЗПров33.Скопировать();
			ТЗПров33_.Свернуть("УникНом");
			ТЗПров33_.Сортировать("УникНом");
			Для Инд = 0 По ТЗПров33_.Количество() - 1 Цикл
				Если Инд = 0 Тогда
					Если ТЗПров33_[Инд].УникНом > 1 Тогда
						// Не пройдена проверка на первый номер среди
						// значений "Уникальный номер" в разделе 3.3.
						// (Нумерация начинается со значения больше 1.)
						ДополнительныеПараметры = ДопПараметры;
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Если ТЗПров33_[Инд].УникНом - ТЗПров33_[Инд - 1].УникНом > 1 Тогда
						// Не пройдена проверка на последовательность в нумерации
						// среди значений "Уникальный номер" в разделе 3.3.
						// Например, после номера 3 идет номер 5, а должен 4.
						ДополнительныеПараметры = ДопПараметры;
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ТЗПров33_ = ТЗПров33.Скопировать();
			ТЗПров33_.Свернуть("УникНом,ПорядНом");
			ТЗПров33_.Сортировать("УникНом,ПорядНом");
			ПредУникНом = Неопределено;
			Для Инд = 0 По ТЗПров33_.Количество() - 1 Цикл
				ТекУникНом = ТЗПров33_[Инд].УникНом;
				Если ТекУникНом <> ПредУникНом Тогда
					Если ТЗПров33_[Инд].ПорядНом > 1 Тогда
						// Не пройдена проверка на первый номер среди
						// значений "Порядковый номер" в разделе 3.3.
						// (Нумерация начинается со значения больше 1.)
						ДополнительныеПараметры = ДопПараметры;
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Если ТЗПров33_[Инд].ПорядНом - ТЗПров33_[Инд - 1].ПорядНом > 1 Тогда
						// Не пройдена проверка на последовательность в нумерации
						// среди значений "Порядковый номер" в разделе 3.3.
						// Например, после номера 3 идет номер 5, а должен 4.
						ДополнительныеПараметры = ДопПараметры;
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
				ПредУникНом = ТекУникНом;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, ДатаПриказа = '00010101', НомерПриказа = "",
			ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, ИмяОбъекта = "", Описание = "") Экспорт 
	
	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

// Получает значение ОКВЭД-1 и ОКВЭД-2 из справочника организаций.
//
// Параметры:
//  ДатаПодписи - Дата - дата подписи регл. отчета.
//  СтруктураРеквизитовФормы - Структура - структура реквизитов формы регл. отчета.
//
Процедура ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы) Экспорт
	
	СтрокаСведений = "ОКВЭД, ОКВЭД2";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  СокрЛП(СведенияОбОрганизации.ОКВЭД));
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", СокрЛП(СведенияОбОрганизации.ОКВЭД2));
		
КонецПроцедуры

// Получает значения видов экономической деятельности (редакция 1, редакция 2) из справочника организаций.
//
// Параметры:
//  ДатаПодписи - Дата - дата подписи регл. отчета.
//  СтруктураРеквизитовФормы - Структура - структура реквизитов формы регл. отчета.
//
Процедура ПолучитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи, СтруктураРеквизитовФормы) Экспорт
	
	СтрокаСведений = "ОснВидДеят, ОснВидДеят2";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	СтруктураРеквизитовФормы.Вставить("ОснВидДеят",  СокрЛП(СведенияОбОрганизации.ОснВидДеят));
	СтруктураРеквизитовФормы.Вставить("ОснВидДеят2", СокрЛП(СведенияОбОрганизации.ОснВидДеят2));
		
КонецПроцедуры

#КонецОбласти
