///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ С ПРОВЕРКОЙ ДАННЫХ НА СЕРВЕРЕ


//--------------------------------------------------------------------------------------------------
//-ОПИСАНИЕ:
//	Обработка, согласно различным правилам выполняет контроль данных, внесенных в систему
//	на соответствие различным параметрам.
//	
//	Обработка может работать встроено в какую-либо последовательность или же отдельно. 
//	Предусматривает входы и выходы для работы в последовательности
//	
//-ПРИНЦИПЫ РАБОТЫ:
//                               ______________________________________________
//          ВХОДНОЙ ПЕРЕХОД  -> |                                              |
//                              |                                              |
//          ВЫХОДНОЙ ПЕРЕХОД -> |          ФОРМА  "ПРОВЕРКА ДАННЫХ"            | -> РЕЗУЛЬТАТ РАБОТЫ
//                              |                                              |
//          ПАРАМЕТРЫ РАБОТЫ -> |______________________________________________|
//	
//	Обработка работает через форму "Проверка данных", которая принимает входные параметры
//	и отражает результат в регистре сведений "ПротоколыПроверкиДанных" и на экране (опционально)
//	Для выполнения проверки, необходимо открыть форму "Проверка данных", передав в параметрах
//	соответствующую входную информацию. 
//	Результат работы возвращается через те же параметры по ссылке. 
//	
//-ОПИСАНИЕ ПАРАМЕТРОВ:
//
//-- ВХОДНОЙ ПЕРЕХОД (Структура) - ВходнойПереход
//		|
//		|- ИмяПерехода (Строка) - текст, отражаемый на кнопках перехода
//		|	|
//		|	|-Значение по умолчанию - Пустая строка
//		|
//		|- НавигационныйПереход (Булево) - используется ли входной переход по нав. ссылке, или же
//		|	|		отрабатывать через "ОткрытьФорму".
//		|	|
//		|	|-Значение по умолчанию - Ложь
//		|
//		|- Адресация (Строка) - адрес входного перехода, либо путь до формы, либо нав. ссылка, в
//		|	|		зависимости от значения параметра НавигационныйПереход.
//		|	|
//		|	|-Значение по умолчанию - ПустаяСтрока
//		|
//		|- Параметры (Структура) - параметры для открытия входного перехода, если используется
//		|	|		нав. переход, то это буду параметры навигационного клиентского перехода
//		|	|		(блок модулей НавигационныеПереходы), если же не используется нав. переход,
//		|	|		тогда это параметры для открытия формы.
//		|	|-Значение по умолчанию - Пустая структура
//
//-- ВЫХОДНОЙ ПЕРЕХОД (Структура) - ВыходнойПереход
//		|
//		|- ИмяПерехода (Строка) - текст, отражаемый на кнопках перехода
//		|	|
//		|	|-Значение по умолчанию - Пустая строка
//		|
//		|- НавигационныйПереход (Булево) - используется ли выходно переход по нав. ссылке, или же
//		|	|		отрабатывать через "ОткрытьФорму"
//		|	|
//		|	|-Значение по умолчанию - Ложь
//		|
//		|- Адресация (Строка) - адрес выходного перехода, либо путь до формы, либо нав. ссылка, в
//		|	|		зависимости от значения параметра НавигационныйПереход.
//		|	|
//		|	|-Значение по умолчанию - ПустаяСтрока
//		|
//		|- Параметры (Структура) - параметры для открытия входного перехода, если используется
//		|	|		нав. переход, то это буду параметры навигационного клиентского перехода
//		|	|		(блок модулей НавигационныеПереходы), если же не используется нав. переход,
//		|	|		тогда это параметры для открытия формы.
//		|	|
//		|	|-Значение по умолчанию - Пустая структура
//		|
//		|- РазрешитьПереходПриОшибках (Булево) - в случае ошибок при проверке данных, возможно
//		|	|		разрешить выходной переход в любом случае
//		|	|
//		|	|-Значение по умолчанию - Ложь
//
//-- ПАРАМЕТРЫ РАБОТЫ (Структура) - ПараметрыРаботы
//		|
//		|- Организация (СправочникСсылка.Организации) - организация, по которой необходимо выполнить
//		|	|		проверку первичных данных
//		|	|
//		|	|- Значение по умолчанию - текущая организация
//		|
//		|- СобытиеКПроверке (СправочникСсылка.КалендарьПодготовкиОтчетности) - событие, для которого 
//		|	|		необходимо выполнить проверку первичных данных. Обработка в этом случае сама
//		|	|		выберет параметры, по которым необходимо выполнить проверку.
//		|	|		Если параметр не задан, тогда используется произвольная проверка
//		|	|
//		|	|- Значение по умолчанию - Неопределено
//		|
//		|- ПараметрыКонтроля (Структура) - содержит перечень возможных параметров для контроля.
//		|	|		Ключ структуры - параметр для контроля
//		|	|		Значение - булево - проводить ли контроль данного параметра
//		|	|		Обрабатывается, если не задано СобытиеКПроверке
//		|	|
//		|	|- Значение по умолчанию - Стуркутра, заполненная возможными параметрами контроля
//		|	|		в ключах, в значениях для всех параметров - ложь.
//		|	|
//		|	|- Ключи:
//		|	|	|
//		|	|	|- СведенияПоОрганизации - контроль всех базовый сведений по организации
//		|	|	|- ПараметрыУчета - контроль параметров учета по органиации
//		|	|	|- БанковскиеСчета - контроль наличия активных банковских счетов
//		|	|	|- ПериодыРаботыСотрудников - все сотрудники трудоустроены
//		|	|	|- КонтрольПроведенных - непроведенные документы - это странно
//		|
//		|- ПериодПроизвольногоКонтроля (Структура) - содержит период, за который необходимо 
//		|	|		выполнить произвольный контроль.
//		|	|		Содержит ключи:
//		|	|			ДатаНачала
//		|	|			ДатаОкончания
//		|	|
//		|	|- Значение по умолчанию - Стуркутра
//		|	|		Содержит ключи:
//		|	|			ДатаНачала - нулевая дата
//		|	|			ДатаОкончания - текущая дата
//
//-- РЕЗУЛЬТАТ РАБОТЫ (Структура) - РезультатРаботы - содержит возвращаемые данные через параметры формы
//		|
//		|- ЕстьКритическаяОшибка(булево) - была ошибка времени выполнения
//		|
//		|- ЕстьОшибки (Булево) - означает, были ли выявлены в процессе проверки отчетности выявлены
//		|	|		 ошибки
//		|
//		|- ЕстьПредупреждения (булево) - означает, были ли выявлены в процессе проверки отчетности 
//		|	|		выявлены предупреждения
//		|
//		|- КлючПротоколаПроверки - регистр сведений Протоколы проверок
//
//-- ДЕРЕВО РЕЗУЛЬТАТА - дерево, сохраняемое в регистре сведений
//		|- ДеревоРезультата (ДеревоЗначений) - дерево значений с результатом выполнения проверки
//		|	|
//		|	|- Описание дерева:
//		|	|	|
//		|	|	|- Описание - Строка - для вершин содержит параметр контроля, для узлов - представление
//		|	|	|		элемента проверки
//		|	|	|
//		|	|	|- РезультатКонтроля - Число
//		|	|	|	|
//		|	|	|	|- 0 - проверка пройдена успешно, актуально для вершин дерева
//		|	|	|	|- 1 - имеются предупреждения(для вершин), предупреждение - для строки
//		|	|	|	|- 2 - имеются ошибки(для вершин), ошибка - для строки
//		|	|	|
//		|	|	|- ПараметрКонтроля - Строка - из перечня ПараметрыРаботы.ПараметрыКонтроля.Ключ
//		|	|	|
//		|	|	|- Расшифровка - Структура - служит для вывода деталей ошибок и предупрежденией
//		|	|	|	|
//		|	|	|	|- ТипРасшифровки - Строка - какой тип расшифровки используется
//		|	|	|	|	|
//		|	|	|	|	|- "Объектная" - расшифровка - объект
//		|	|	|	|	|- "НоваяЗаписьРегистраСведений" - расшифровка - запись регистра (может не существовать)
//		|	|	|	|	|- "Списочная" - расшифровка - список
//		|	|	|	|	|- "Отчет" - расшифровка - отчет
//		|	|	|	|	|- "Произвольная" - расшифровка - ТаблицаЗначений,ДеревоЗначений,СписокЗначений,Макет
//		|	|	|	|
//		|	|	|	|- ЗначениеРасшифровки - Произвольный - зависит от ТипРасшифровки
//		|	|	|	|	|
//		|	|	|	|	|- "Объектная" - ЛюбойОбъект
//		|	|	|	|	|- "НоваяЗаписьРегистраСведений" - имя формы регистра
//		|	|	|	|	|- "Списочная" - Строка - имя формы списка
//		|	|	|	|	|- "Отчет" - Строка - имя отчета в формете "Отчет.[ИмяОтчета].Форма.[ФормаОтчета]"
//		|	|	|	|	|- "Произвольная" - ЛюбаяСсылка
//		|	|	|	|
//		|	|	|	|- ПараметрыРасшифровки - Соответствие - зависит от ТипРасшифровки
//		|	|	|	|	|
//		|	|	|	|	|- "Объектная" - Ключи - полные имена полей, значения - ошибки заполнения
//		|	|	|	|	|- "НоваяЗаписьРегистраСведений" - параметры открываемой формы
//		|	|	|	|	|- "Списочная" - Ключи - параметры отбора, значения - значения отбора
//		|	|	|	|	|- "Отчет" - Ключи - параметры отчета, значения - значения параметров
//		|	|	|	|	|- "Произвольная" - Игнорируется


// Функция выполняет данные в зависимости от события календаря отчетности
// Например, очевидно, что для Единого налога код ОКВЭД не нужен, а для
// Декларации по УСН - требуется. 
//
Функция ВыполнитьПроверкуПоСобытию(Организация, СобытиеКалендаря, ОграниченияПараметровКонтроля=Неопределено, СохранятьПротокол = Истина) Экспорт
	
	ПараметрыСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия,Задача");
	
	
	СтруктураПараметровКонтроля = ПроверкаДанныхКлиентСервер.ПолучитьОписаниеСтруктурПараметровПроверкиДанных(Организация).ПараметрыРаботы.ПараметрыКонтроля;
	ОграниченияПроверки = Новый Структура;
	
	Если ОграниченияПараметровКонтроля = Неопределено Тогда
		ОпределитьОграниченияПараметровКонтроляПоЗадаче(ПараметрыСобытия.Задача, ОграниченияПараметровКонтроля);
	КонецЕсли;
	// Проверяем все
	Для Каждого ЭлементКонтроля Из СтруктураПараметровКонтроля Цикл
		
		Если ОграниченияПараметровКонтроля = Неопределено Тогда
			СтруктураПараметровКонтроля[ЭлементКонтроля.Ключ] = Истина;
		Иначе
			
			// Если Используются ограничения параметров контроля, тогда в массиве ограничений ключ
			// должен присутствовать и находится через Найти
			СтруктураПараметровКонтроля[ЭлементКонтроля.Ключ] = (ОграниченияПараметровКонтроля.Найти(ЭлементКонтроля.Ключ)<>Неопределено);
			
		КонецЕсли;
		
		ОграниченияПроверки.Вставить(ЭлементКонтроля.Ключ,Неопределено);
	КонецЦикла;
	
	ОграниченияПроверки.СведенияПоОрганизации = Новый Массив;
	ОграниченияПроверки.СведенияПоСотрудникам = Новый Массив;
	
	Если ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалог Тогда
		
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ЮрАдрес");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодНалоговогоОрганаПолучателя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ДатаРегистрации");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПлательщикаПриПеречисленииНалогов");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КассаПоУмолчанию");
		Если Год(ПараметрыСобытия.ДатаДокументаОбработкиСобытия) < 2013 Тогда
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКАТО");
		Иначе
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКТМО");
		КонецЕсли;
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН Тогда
		
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ЮрАдрес");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодНалоговогоОрганаПолучателя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ДатаРегистрации");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПлательщикаПриПеречисленииНалогов");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КассаПоУмолчанию");
		Если Год(ПараметрыСобытия.ДатаДокументаОбработкиСобытия) < 2013 Тогда
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКАТО");
		Иначе
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКТМО");
		КонецЕсли;
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоУСН Тогда
		
		// Сведения по организации
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодНалоговогоОрганаПолучателя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодОКВЭД");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ЮрАдрес");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Телефон");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Руководитель");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ДатаРегистрации");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеИФНС");
		Если Год(ПараметрыСобытия.ДатаДокументаОбработкиСобытия) < 2013 Тогда
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКАТО");
		Иначе
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКТМО");
		КонецЕсли;
		
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоЕНВД Тогда
		
		// Сведения по организации
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодОКВЭД");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Телефон");
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалогЕНВД Тогда
		
		// Сведения по организации
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПлательщикаПриПеречисленииНалогов");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КассаПоУмолчанию");
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП Тогда
		
		// Сведения по организации
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ДатаРегистрации");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ЮрАдрес");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ДатаРождения");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодНалоговогоОрганаПолучателя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("РегистрационныйНомерПФР_ИП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПлательщикаПриПеречисленииНалогов");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КассаПоУмолчанию");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодОрганаПФР");
		Если Год(ПараметрыСобытия.ДатаДокументаОбработкиСобытия) < 2013 Тогда
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКАТО");
		Иначе
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКТМО");
		КонецЕсли;
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СреднесписочнаяЧисленность Тогда
		
		// Сведения по организации
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодНалоговогоОрганаПолучателя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Руководитель");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ГлавныйБухгалтер");
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Справки2НДФЛ Тогда
		
		// Сведения по организации
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
		Если Год(ПараметрыСобытия.ДатаДокументаОбработкиСобытия) < 2013 Тогда
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКАТО");
		Иначе
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКТМО");
		КонецЕсли;
		
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодНалоговогоОрганаПолучателя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Руководитель");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ГлавныйБухгалтер");
		
		// Сведения по сотрудникам
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Имя");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("ДатаРождения");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("СтраховойНомерПФР");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Гражданство");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("АдресПоПрописке");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("УдостоверениеЛичности");
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ОтчетностьВПФР Тогда
		
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("РегистрационныйНомерПФР");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодОрганаПФР");
		Если Год(ПараметрыСобытия.ДатаДокументаОбработкиСобытия) < 2013 Тогда
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКАТО");
		Иначе
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКТМО");
		КонецЕсли;
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодОКВЭД");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодОКФС");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ОГРН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ОГРНИП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодОКОПФ");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ЮрАдрес");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Телефон");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Руководитель");
		
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Имя");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("СтраховойНомерПФР");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("АдресПоПрописке");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Индекс");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("ДатаРождения");
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогиСотрудников Тогда
		
		// Сведения по организации
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ЮрАдрес");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("РегистрационныйНомерПФР");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("РегистрационныйНомерФСС");
		Если Год(ПараметрыСобытия.ДатаДокументаОбработкиСобытия) < 2014 Тогда
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКАТО");
		Иначе
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКТМО");
		КонецЕсли;
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПлательщикаПриПеречисленииНалогов");
		
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодНалоговогоОрганаПолучателя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодОрганаПФР");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодОрганаФСС");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ТарифНаТравматизм");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КассаПоУмолчанию");
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма4ФСС Тогда
		
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("РегистрационныйНомерФСС");
		Если Год(ПараметрыСобытия.ДатаДокументаОбработкиСобытия) < 2013 Тогда
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКАТО");
		Иначе
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКТМО");
		КонецЕсли;
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодОКВЭД");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ОГРН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ОГРНИП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ЮрАдрес");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Телефон");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Руководитель");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ТарифНаТравматизм");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодОрганаФСС");
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыПриДоходахСвыше300тр Тогда
		
		// Сведения по организации
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ДатаРегистрации");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ЮрАдрес");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ДатаРождения");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодНалоговогоОрганаПолучателя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("РегистрационныйНомерПФР_ИП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодОрганаПФР");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КассаПоУмолчанию");
		Если Год(ПараметрыСобытия.ДатаДокументаОбработкиСобытия) < 2013 Тогда
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКАТО");
		Иначе
			ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКТМО");
		КонецЕсли;
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ТорговыйСбор Тогда
		
		// Сведения по организации
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
	
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма1Предприниматель Тогда
		
		// Сведения по организации
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКПО");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ЮрАдрес");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Телефон");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("EmailОрганизации");
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма6НДФЛ Тогда
		
		// Сведения по организации
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Имя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодПоОКТМО");
		
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КодНалоговогоОрганаПолучателя");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Руководитель");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ГлавныйБухгалтер");
		
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СведенияОЗастрахованныхЛицах Тогда
		
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("РегистрационныйНомерПФР");
		// Сведения по сотрудникам
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Фамилия");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Имя");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("Отчество");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("ДатаРождения");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоСотрудникам.Добавить("СтраховойНомерПФР");
	ИначеЕсли ПараметрыСобытия.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Декларация12 Тогда
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Наименование");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("НаименованиеПолное");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ИНН");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("КПП");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("ЮрАдрес");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("Телефон");
		ОграниченияПроверки.СведенияПоОрганизации.Добавить("EmailОрганизации");
	КонецЕсли;
	
	
	// выполняем произвольную проверку
	Результат =  ВыполнитьПроизвольнуюПроверку(
		Организация,
		СтруктураПараметровКонтроля,
		НачалоГода(ПараметрыСобытия.ДатаДокументаОбработкиСобытия),
		КонецДня(ПараметрыСобытия.ДатаДокументаОбработкиСобытия),
		ОграниченияПроверки,
		Ложь,
		Истина);
		
	Если СохранятьПротокол Тогда
		Результат.КлючПротоколаПроверки = СохранитьРезультатПроверки(
			Организация,
			СобытиеКалендаря,
			НачалоГода(ПараметрыСобытия.ДатаДокументаОбработкиСобытия),
			КонецДня(ПараметрыСобытия.ДатаДокументаОбработкиСобытия),
			Результат);
			
		Результат.Удалить("ДеревоРезультата");
		
		Возврат Результат;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции
// Функция выполняет проверку данных согласно переданным параметрам
//
// Параметры:
//		Организация
//		ПараметрыКонтроля - 
//			|- СведенияПоОрганизации - контроль всех базовый сведений по организации
//			|- ПараметрыУчета - контроль параметров учета по органиации
//			|- БанковскиеСчета - контроль наличия активных банковских счетов
//			|- НачальныеОстатки - контроль ввода начальных остатков 
//			|- ОтрицательныеДенежныеОстаткиБанк - контроль банковских разрывов
//			|- ОтрицательныеДенежныеОстаткиКасса - контроль кассовых  разрывов
//			|- ОтрицательныеСкладскиеОстатки - контроль товарных разрывов
//			|- ВзаиморасчетыСКонтрагентами - анализ по долгам и авансам, что потенциально можно закрыть
//			|- ВзаиморасчетыССотрудниками - анализ начислено-выплачено
//			|- КонтрольПроведенных - непроведенные документы - это странно
//		ДатаНачала
//		ДатаОкончания
//		ОграниченияПроверки - Структура - ключи идентичные ключам Параметрам Контроля, значения - произвольные,
//			зависят от контекста проверки
//
// Возвращает:
//		ДеревоЗначений согласено описания
//
Функция ВыполнитьПроизвольнуюПроверку(Организация, ПараметрыКонтроля, ДатаНачала, ДатаОкончания, ОграниченияПроверки = Неопределено, СохранятьПротокол = Истина, ПолныйРезультат = Ложь) Экспорт
	
	// критический участок - обертываем в попытку
	Попытка 
		// описание результата
		ДеревоРезультата = ПолучитьОписаниеДереваРезультата();
		
		
		// выполнение проверок
		
		Если ПараметрыКонтроля.СведенияПоОрганизации Тогда
			ВыполнитьПроверкуСведенийПоОрганизации(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания,ОграниченияПроверки.СведенияПоОрганизации);
		КонецЕсли;
		
		Если ПараметрыКонтроля.ПараметрыУчета Тогда
			ВыполнитьПроверкуПараметровУчета(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания,ОграниченияПроверки.ПараметрыУчета);
		КонецЕсли;
		
		Если ПараметрыКонтроля.БанковскиеСчета Тогда
			ВыполнитьПроверкуБанковскихСчетов(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания,ОграниченияПроверки.БанковскиеСчета);
		КонецЕсли;
		
		Если ПараметрыКонтроля.КонтрольПроведенных Тогда
			ВыполнитьПроверкуКонтрольПроведенных(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания,ОграниченияПроверки.КонтрольПроведенных);
		КонецЕсли;
		
		Если ПараметрыКонтроля.НачальныеОстатки Тогда
			ВыполнитьПроверкуНачальныхОстатков(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания,ОграниченияПроверки.НачальныеОстатки);
		КонецЕсли;
		
		Если ПараметрыКонтроля.НаличиеПоказателейЕНВД Тогда
			ВыполнитьПроверкуНаличияПоказателейЕНВД(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания,ОграниченияПроверки.ВзаиморасчетыССотрудниками);
		КонецЕсли;
		
		Если ПараметрыКонтроля.СведенияПоСотрудникам Тогда
			ВыполнитьПроверкуСведенийПоСотрудникам(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания,ОграниченияПроверки.СведенияПоСотрудникам);
		КонецЕсли;
		
		Если ПараметрыКонтроля.ТарифыСтраховыхВзносов Тогда
			ВыполнитьПроверкуТарифаСтраховыхВзносов(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания,ОграниченияПроверки.ПараметрыУчета);
		КонецЕсли;
		
		Если ПараметрыКонтроля.СведенияПоТорговымТочкам Тогда
			ВыполнитьПроверкуТорговыхТочек(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания,ОграниченияПроверки.ПараметрыУчета);
		КонецЕсли;
		
		Если ПараметрыКонтроля.ТорговыеТочкиРозничнойПродажиАлкоголя Тогда
			ВыполнитьПроверкуТорговыхТочекРозничнойПродажиАлкоголя(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания,ОграниченияПроверки.ПараметрыУчета);
		КонецЕсли;
		
		// обработка дерева результата
		
		СтруктураРезультата = ПолучитьСтруктуруРезультатаРаботы(ДеревоРезультата);
		
		Если СохранятьПротокол Тогда
			
			СтруктураРезультата.КлючПротоколаПроверки = СохранитьРезультатПроверки(
				Организация,
				Неопределено,
				ДатаНачала,
				ДатаОкончания,
				СтруктураРезультата);
			
		КонецЕсли;
		
		Если НЕ ПолныйРезультат Тогда
			СтруктураРезультата.Удалить("ДеревоРезультата");
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка данных.Ошибка проверки данных'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru= 'При выполнении проверки данных для области данных «%1» по организации «%2» произошла ошибка:
						|%3'"),
				ОбщегоНазначения.ЗначениеРазделителяСеанса(),
				Организация,
				ОписаниеОшибки()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		СтруктураРезультата =  Новый Структура(
			"ЕстьКритическаяОшибка, ЕстьОшибки, ЕстьПредупреждения, ДеревоРезультата,КлючПротоколаПроверки",
			Истина,
			Ложь,
			Ложь,
			Неопределено, 
			Неопределено);
		
	КонецПопытки;
		
	Возврат СтруктураРезультата;
	
КонецФункции

// Функция для определенного параметра выполняет повторную проверку
//
Функция ВыполнитьПовторнуюПроверкуПараметраКонтроля(ПараметрКонтроля, Организация, СобытиеКалендаря = Неопределено, ДатаНачала, ДатаОкончания, ОргиниальноеДеревоРезультата) Экспорт
	
	Попытка
		// выполняем повторную проверку
		// по определенному параметру контроля
		Если СобытиеКалендаря <> Неопределено Тогда
			
			МассивОграниченияПараметровКонтроля = Новый Массив;
			МассивОграниченияПараметровКонтроля.Добавить(ПараметрКонтроля);
			
			Результат = ВыполнитьПроверкуПоСобытию(
				Организация,
				СобытиеКалендаря,
				МассивОграниченияПараметровКонтроля,
				Ложь);
		Иначе
			
			Результат = ВыполнитьПроизвольнуюПроверку(
				Организация,
				Новый Структура(ПараметрКонтроля, Истина),
				ДатаНачала, 
				ДатаОкончания,
				,
				Ложь,
				Истина);
			
		КонецЕсли;
		
		Если Результат.ЕстьКритическаяОшибка Тогда
			Возврат Результат;
		КонецЕсли;
		
		СтрокаПредшествующая = Неопределено;
		
		// удаляем ветку оригинального дерева результата
		// 
		Для Каждого ВеткаПоиска Из ОргиниальноеДеревоРезультата.Строки Цикл
			Если ВеткаПоиска.ПараметрКонтроля = ПараметрКонтроля Тогда
				ОргиниальноеДеревоРезультата.Строки.Удалить(ВеткаПоиска);
				Прервать;
			Иначе
				СтрокаПредшествующая = ВеткаПоиска;
			КонецЕсли;
		КонецЦикла;
		
		
		// добавляем на место удаленного
		//
		Если СтрокаПредшествующая = Неопределено Тогда
			Индекс = -1;
		Иначе
			Индекс = ОргиниальноеДеревоРезультата.Строки.Индекс(СтрокаПредшествующая);
		КонецЕсли;
		
		Для Каждого НоваяСтрокаРезультата Из Результат.ДеревоРезультата.Строки Цикл
			ДобавленнаяСтрока = ОргиниальноеДеревоРезультата.Строки.Вставить(Индекс+1);
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,НоваяСтрокаРезультата);
			СкопироватьСтрокиДереваЗначений(ДобавленнаяСтрока.Строки, НоваяСтрокаРезультата.Строки);
			Индекс = Индекс+1;
		КонецЦикла;
		
		Результат = ПолучитьСтруктуруРезультатаРаботы(ОргиниальноеДеревоРезультата);
		
		Результат.КлючПротоколаПроверки = СохранитьРезультатПроверки(
				Организация,
				СобытиеКалендаря,
				ДатаНачала,
				ДатаОкончания,
				Результат);
				
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка данных.Ошибка повторной проверки данных'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru= 'При выполнении повторной проверки данных для области данных «%1» по организации «%2» произошла ошибка:
						|%3'"),
				ОбщегоНазначения.ЗначениеРазделителяСеанса(),
				Организация,
				ОписаниеОшибки()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		СтруктураРезультата =  Новый Структура(
			"ЕстьКритическаяОшибка, ЕстьОшибки, ЕстьПредупреждения, ДеревоРезультата,КлючПротоколаПроверки",
			Истина,
			Ложь,
			Ложь,
			Неопределено, 
			Неопределено);
		
	КонецПопытки;
	Возврат Результат;
	
КонецФункции

//-----------------------------------------------------------------------------
// Процедуры проверок

// Проверяет реквизиты Налогоплательщика
//
Процедура ВыполнитьПроверкуСведенийПоОрганизации(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания, ОграниченияПроверки=Неопределено) Экспорт
	
	КорневаяСтрока = ДеревоРезультата.Строки.Добавить();
	КорневаяСтрока.Описание = НСтр("ru='Реквизиты Налогоплательщика'");
	КорневаяСтрока.РезультатКонтроля = 0;
	КорневаяСтрока.ПараметрКонтроля = "СведенияПоОрганизации";
	КорневаяСтрока.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
	
	Если ОграниченияПроверки = Неопределено Тогда
		ОграниченияПроверки = Новый Массив;
		
		// все контролируемые поля
		ОграниченияПроверки.Добавить("Фамилия");
		ОграниченияПроверки.Добавить("Имя");
		ОграниченияПроверки.Добавить("Отчество");
		ОграниченияПроверки.Добавить("НаименованиеПолное");
		ОграниченияПроверки.Добавить("Пол");
		ОграниченияПроверки.Добавить("ДатаРождения");
		ОграниченияПроверки.Добавить("ИНН");
		ОграниченияПроверки.Добавить("Наименование");
		ОграниченияПроверки.Добавить("КПП");
		ОграниченияПроверки.Добавить("СвидетельствоСерияНомер");
		ОграниченияПроверки.Добавить("СвидетельствоДатаВыдачи");
		ОграниченияПроверки.Добавить("ОГРН");
		ОграниченияПроверки.Добавить("ОГРНИП");
		ОграниченияПроверки.Добавить("КодПоОКАТО");
		ОграниченияПроверки.Добавить("КодПоОКТМО");
		ОграниченияПроверки.Добавить("КодНалоговогоОрганаПолучателя");
		ОграниченияПроверки.Добавить("КодПоОКПО");
		ОграниченияПроверки.Добавить("КодОКОПФ");
		ОграниченияПроверки.Добавить("КодОКФС");
		ОграниченияПроверки.Добавить("КодОКВЭД");
		ОграниченияПроверки.Добавить("СтраховойНомерПФР");
		ОграниченияПроверки.Добавить("ЮрАдрес");
		ОграниченияПроверки.Добавить("Телефон");
		ОграниченияПроверки.Добавить("РегистрационныйНомерПФР");
		ОграниченияПроверки.Добавить("КодОрганаПФР");
		ОграниченияПроверки.Добавить("Руководитель");
		ОграниченияПроверки.Добавить("ДатаРегистрации");
		ОграниченияПроверки.Добавить("РегистрационныйНомерПФР_ИП");
		ОграниченияПроверки.Добавить("РегистрационныйНомерТФОМС_ИП");
		ОграниченияПроверки.Добавить("РегистрационныйНомерТФОМС");
		ОграниченияПроверки.Добавить("РегистрационныйНомерФСС");
		ОграниченияПроверки.Добавить("КодОрганаФСС");
	КонецЕсли;
	
	// ключ - имя поля, значение - описание
	ПоляСОшибками = Новый Соответствие;
	// ключ - имя поля, значение - описание
	ПоляСПредупреждениями = Новый Соответствие;
	
	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ФизЛицо = Организация.ФизическоеЛицо;
		ФИОФизическихЛиц = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаОкончания, Новый Структура("ФизЛицо", ФизЛицо));
		Если ФИОФизическихЛиц.Количество() > 0 Тогда
			ФИОФизическихЛиц = ФИОФизическихЛиц[0];
		Иначе
			ФИОФизическихЛиц = Новый Структура("Фамилия, Имя, Отчество");
		КонецЕсли;
		Если ПустаяСтрока(ФИОФизическихЛиц.Фамилия) И (ОграниченияПроверки.Найти("Фамилия")<>Неопределено ИЛИ ОграниченияПроверки.Найти("Наименование")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("ФИОФизическихЛиц.Фамилия",НСтр("ru='Не указана фамилия'"));
		КонецЕсли;
		
		Если ПустаяСтрока(ФИОФизическихЛиц.Имя) И (ОграниченияПроверки.Найти("Имя")<>Неопределено ИЛИ ОграниченияПроверки.Найти("Наименование")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("ФИОФизическихЛиц.Имя",НСтр("ru='Не указано имя'"));
		КонецЕсли;
		
		Если ПустаяСтрока(ФИОФизическихЛиц.Отчество) И (ОграниченияПроверки.Найти("Отчество")<>Неопределено ИЛИ ОграниченияПроверки.Найти("Наименование")<>Неопределено) Тогда
			ПоляСПредупреждениями.Вставить("ФИОФизическихЛиц.Отчество",НСтр("ru='Не указано отчество'"));
		КонецЕсли;
		
		Если ПустаяСтрока(Организация.НаименованиеПолное) И (ОграниченияПроверки.Найти("НаименованиеПолное")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.НаименованиеПолное",НСтр("ru='Не указано юридическое название предпринимателя'"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ФизЛицо.Пол) И (ОграниченияПроверки.Найти("Пол")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("ФизическоеЛицо.Пол",НСтр("ru='Не указан пол'"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ФизЛицо.ДатаРождения) И (ОграниченияПроверки.Найти("ДатаРождения")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("ФизическоеЛицо.ДатаРождения",НСтр("ru='Не указана дата рождения'"));
		КонецЕсли;
		
		Если ПустаяСтрока(Организация.ИНН) И (ОграниченияПроверки.Найти("ИНН")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.ИНН",НСтр("ru='Не указан ИНН'"));
		ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СокрЛП(Организация.ИНН), Ложь, "") И (ОграниченияПроверки.Найти("ИНН")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.ИНН",НСтр("ru='Некорректное значение ИНН'"));
		КонецЕсли;
		
		Если ПустаяСтрока(Организация.ОГРН) И (ОграниченияПроверки.Найти("ОГРНИП")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.ОГРН",НСтр("ru='Не указан ОГРН'"));
		ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(СокрЛП(Организация.ОГРН), Ложь, "") И (ОграниченияПроверки.Найти("ОГРНИП")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.ОГРН",НСтр("ru='Некорректное значение ОГРНИП'"));
		КонецЕсли;
		
		Если ПустаяСтрока(Организация.КодПоОКПО) И (ОграниченияПроверки.Найти("КодПоОКПО")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.КодПоОКПО",НСтр("ru='Не указан Код по ОКПО'"));
		КонецЕсли;
		
		Если ПустаяСтрока(Организация.РегистрационныйНомерПФР_ИП) И (ОграниченияПроверки.Найти("РегистрационныйНомерПФР_ИП")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.РегистрационныйНомерПФР_ИП",НСтр("ru='Не указан Регистрационный номер в ПФР (на себя)'"));
		ИначеЕсли СтрДлина(СокрЛП(Организация.РегистрационныйНомерПФР_ИП))<> 14 И (ОграниченияПроверки.Найти("РегистрационныйНомерПФР_ИП")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.РегистрационныйНомерПФР_ИП",НСтр("ru='Некорректное значение Регистрационного номера в ПФР (на себя)'"));
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(Организация.Наименование) И (ОграниченияПроверки.Найти("Наименование")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.Наименование",НСтр("ru='Не указано представление организации в программе'"));
		КонецЕсли;
		
		Если ПустаяСтрока(Организация.НаименованиеПолное) И (ОграниченияПроверки.Найти("НаименованиеПолное")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.НаименованиеПолное",НСтр("ru='Не указано юридическое название организации'"));
		КонецЕсли;
		
		Если ПустаяСтрока(Организация.ИНН) И (ОграниченияПроверки.Найти("ИНН")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.ИНН",НСтр("ru='Не указан ИНН'"));
		ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СокрЛП(Организация.ИНН), Истина, "") И (ОграниченияПроверки.Найти("ИНН")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.ИНН",НСтр("ru='Некорректное значение ИНН'"));
		КонецЕсли;
		
		Если ПустаяСтрока(Организация.КПП) И (ОграниченияПроверки.Найти("КПП")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.КПП",НСтр("ru='Не указан КПП'"));
		ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(СокрЛП(Организация.КПП), "") И (ОграниченияПроверки.Найти("КПП")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.КПП",НСтр("ru='Некорректное значение КПП'"));
		КонецЕсли;
		
		Если ПустаяСтрока(Организация.ОГРН) И (ОграниченияПроверки.Найти("ОГРН")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.ОГРН",НСтр("ru='Не указан ОГРН'"));
		ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(СокрЛП(Организация.ОГРН), Истина, "") И (ОграниченияПроверки.Найти("ОГРН")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.ОГРН",НСтр("ru='Некорректное значение ОГРН'"));
		КонецЕсли;
		
		Если ПустаяСтрока(Организация.КодПоОКПО) И (ОграниченияПроверки.Найти("КодПоОКПО")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.КодПоОКПО",НСтр("ru='Не указан Код по ОКПО'"));
		ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(СокрЛП(Организация.КодПоОКПО), Истина, "") И (ОграниченияПроверки.Найти("КодПоОКПО")<>Неопределено) Тогда
			ПоляСОшибками.Вставить("Объект.КодПоОКПО",НСтр("ru='Некорректное значение кода по ОКПО'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.НаименованиеПлательщикаПриПеречисленииНалогов) И (ОграниченияПроверки.Найти("НаименованиеПлательщикаПриПеречисленииНалогов")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.НаименованиеПлательщикаПриПеречисленииНалогов",НСтр("ru='Не указано наименование организации при оплате налогов в бюджет'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация.КассаПоУмолчанию) И (ОграниченияПроверки.Найти("КассаПоУмолчанию")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.КассаПоУмолчанию",НСтр("ru='Не указана основная касса'"));
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.СвидетельствоСерияНомер) И (ОграниченияПроверки.Найти("СвидетельствоСерияНомер")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.СвидетельствоСерияНомер",НСтр("ru='Не указан номер свидетельства'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация.СвидетельствоДатаВыдачи) И (ОграниченияПроверки.Найти("СвидетельствоДатаВыдачи")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.СвидетельствоДатаВыдачи",НСтр("ru='Не указан дата выдачи свидетельства'"));
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.КодПоОКАТО) И (ОграниченияПроверки.Найти("КодПоОКАТО")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.КодПоОКАТО",НСтр("ru='Не указан Код по ОКАТО'"));
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.КодПоОКТМО) И (ОграниченияПроверки.Найти("КодПоОКТМО")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.КодПоОКТМО",НСтр("ru='Не указан Код по ОКТМО'"));
	КонецЕсли;
	
	Если (ОграниченияПроверки.Найти("КодНалоговогоОрганаПолучателя")<>Неопределено) Тогда
		Если ПустаяСтрока(Организация.КодНалоговогоОрганаПолучателя) Тогда
			ПоляСОшибками.Вставить("Объект.КодНалоговогоОрганаПолучателя",НСтр("ru='Не указан Код ИФНС'"));
		КонецЕсли;
	КонецЕсли;
	
	Если (ОграниченияПроверки.Найти("НаименованиеИФНС")<>Неопределено) Тогда
		ГосОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, Организация.КодНалоговогоОрганаПолучателя);
		Если Не ЗначениеЗаполнено(ГосОрган.Ссылка) Тогда
			ПоляСОшибками.Вставить("ПлатежныеРеквизитыФНСПредставление",НСтр("ru='Не указано наименование налогового органа'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.КодОКОПФ) И (ОграниченияПроверки.Найти("КодОКОПФ")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.КодОКОПФ",НСтр("ru='Не указан Код ОКОПФ'"));
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.КодОКФС) И (ОграниченияПроверки.Найти("КодОКФС")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.КодОКФС",НСтр("ru='Не указан Код ОКФС'"));
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.КодОКВЭД) И (ОграниченияПроверки.Найти("КодОКВЭД")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.КодОКВЭД",НСтр("ru='Не указан Код ОКВЭД'"));
	ИначеЕсли НЕ ПроверкаДанныхКлиентСервер.КодОКВЭДСоответствуетТребованиям(Организация.КодОКВЭД) И (ОграниченияПроверки.Найти("КодОКВЭД")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.КодОКВЭД",НСтр("ru='Некорректное значение кода вида деятельности по ОКВЭД'"));
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.СтраховойНомерПФР) И (ОграниченияПроверки.Найти("СтраховойНомерПФР")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.СтраховойНомерПФР",НСтр("ru='Не указан страховой номер ПФР'"));
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СокрЛП(Организация.СтраховойНомерПФР),"") И (ОграниченияПроверки.Найти("СтраховойНомерПФР")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.СтраховойНомерПФР",НСтр("ru='Некорректное значение страхового номера ПФР'"));
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.РегистрационныйНомерПФР) И (ОграниченияПроверки.Найти("РегистрационныйНомерПФР")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.РегистрационныйНомерПФР",НСтр("ru='Не указан Регистрационный номер в ПФР в качестве работодателя'"));
	ИначеЕсли НЕ ПроверкаДанныхКлиентСервер.РегНомерПФРСоответствуетТребованиям(СокрЛП(Организация.РегистрационныйНомерПФР)) И (ОграниченияПроверки.Найти("РегистрационныйНомерПФР")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.РегистрационныйНомерПФР",НСтр("ru='Значение рег. номера в ПФР не соответствует шаблону:""XXX-XXX-XXXXXX"" (X - любая цифра)!'"));
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.КодОрганаПФР) И (ОграниченияПроверки.Найти("КодОрганаПФР")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.КодОрганаПФР",НСтр("ru='Не указан Код органа ПФР'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация.ДатаРегистрации) И (ОграниченияПроверки.Найти("ДатаРегистрации")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.ДатаРегистрации",НСтр("ru='Не указана дата регистрации'"));
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(Организация.КодОрганаФСС) И (ОграниченияПроверки.Найти("КодОрганаФСС")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.КодОрганаФСС",НСтр("ru='Не указан код органа ФСС'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация.ТарифНаТравматизм) И (ОграниченияПроверки.Найти("ТарифНаТравматизм")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.ТарифНаТравматизм",НСтр("ru='Не указан тариф на травматизм'"));
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.РегистрационныйНомерФСС) И (ОграниченияПроверки.Найти("РегистрационныйНомерФСС")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.РегистрационныйНомерФСС",НСтр("ru='Не указан Регистрационный номер в ФСС'"));
	ИначеЕсли СтрДлина(СокрЛП(Организация.РегистрационныйНомерФСС))<> 10 И (ОграниченияПроверки.Найти("РегистрационныйНомерФСС")<>Неопределено) Тогда
		ПоляСОшибками.Вставить("Объект.РегистрационныйНомерФСС",НСтр("ru='Некорректное значение Регистрационного номера в ФСС'"));
	КонецЕсли;
	
	Если (ОграниченияПроверки.Найти("ЮрАдрес")<>Неопределено) Тогда
		Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ТекстОшибки = НСтр("ru='Не указан юридический адрес (Адрес по прописке)'")
		Иначе
			ТекстОшибки = НСтр("ru='Не указан юридический адрес'");
		КонецЕсли;
		
		Строки = Организация.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации));
		Если Строки.Количество() = 0 Тогда
			ПоляСОшибками.Вставить("ПредставлениеКИ_2", ТекстОшибки);
		Иначе
			Если ПустаяСтрока(Строки[0].Представление) Тогда
				ПоляСОшибками.Вставить("ПредставлениеКИ_2", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ОграниченияПроверки.Найти("Телефон")<>Неопределено) Тогда
		
		Строки = Организация.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации));
		Если Строки.Количество() = 0 Тогда
			ПоляСОшибками.Вставить("ПредставлениеКИ_0",НСтр("ru='Не указан контактный телефон'"));
		Иначе
			Если ПустаяСтрока(Строки[0].Представление) Тогда
				ПоляСОшибками.Вставить("ПредставлениеКИ_0",НСтр("ru='Не указан контактный телефон'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ОграниченияПроверки.Найти("EmailОрганизации")<>Неопределено) Тогда
		
		Строки = Организация.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.EmailОрганизации));
		Если Строки.Количество() = 0 Тогда
			ПоляСОшибками.Вставить("ПредставлениеКИ_1",НСтр("ru='Не указана e-mail'"));
		Иначе
			Если ПустаяСтрока(Строки[0].Представление) Тогда
				ПоляСОшибками.Вставить("ПредставлениеКИ_1",НСтр("ru='Не указан e-mail'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Основные реквизиты
	Если ПоляСОшибками.Количество() > 0 Тогда
		
		Строка = КорневаяСтрока.Строки.Добавить();
		Строка.Описание = НСтр("ru='Не заполнены необходимые реквизиты'");
		Строка.РезультатКонтроля = 2;
		Строка.ПараметрКонтроля = "СведенияПоОрганизации";
		
		Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
		Строка.Расшифровка.ТипРасшифровки = "Объектная";
		Строка.Расшифровка.ЗначениеРасшифровки = Организация;
		Строка.Расшифровка.ПараметрыРасшифровки = ПоляСОшибками
		
	КонецЕсли;
	
	Если ПоляСПредупреждениями.Количество() > 0 Тогда
		
		Строка = КорневаяСтрока.Строки.Добавить();
		Строка.Описание = НСтр("ru='Есть проблемы с некоторыми полями'");
		Строка.РезультатКонтроля = 1;
		Строка.ПараметрКонтроля = "СведенияПоОрганизации";
		
		Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
		Строка.Расшифровка.ТипРасшифровки = "Объектная";
		Строка.Расшифровка.ЗначениеРасшифровки = Организация;
		Строка.Расшифровка.ПараметрыРасшифровки = ПоляСПредупреждениями;
		
	КонецЕсли;
	
	Если ПоляСОшибками.Количество() = 0 И ПоляСПредупреждениями.Количество() = 0 Тогда
		
		Строка = КорневаяСтрока.Строки.Добавить();
		Строка.Описание = НСтр("ru='Основные реквизиты заполнены'");
		Строка.РезультатКонтроля = 0;
		Строка.ПараметрКонтроля = "СведенияПоОрганизации";
		
	КонецЕсли;
	
	// сведения по руководителю
	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Если (ОграниченияПроверки.Найти("Руководитель")<>Неопределено) Тогда
			
			ДатаПроверки = ТекущаяДатаСеанса();
			
			Если ЗначениеЗаполнено(ДатаНачала) Тогда
				ДатаПроверки = ДатаНачала;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаОкончания) Тогда
				ДатаПроверки = ДатаОкончания;
			КонецЕсли;
			
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОтветственныеЛицаОрганизацийСрезПоследних.Сотрудник,
			|	ОтветственныеЛицаОрганизацийСрезПоследних.Сотрудник.Наименование КАК Наименование,
			|	ОтветственныеЛицаОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо
			|ИЗ
			|	РегистрСведений.ОтветственныеЛица.СрезПоследних(
			|			&ДатаПроверки,
			|			Организация = &Организация
			|				И ТипОтветственногоЛица = ЗНАЧЕНИЕ(Перечисление.ТипыОтветственныхЛиц.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних");
			
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ДатаПроверки", ДатаПроверки);
			
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ФизЛицо = Выборка.ФизЛицо;
				Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
					Строка = КорневаяСтрока.Строки.Добавить();
					Строка.Описание = НСтр("ru='У сотрудника "+ Выборка.Наименование+" не указано физическое лицо'");
					Строка.РезультатКонтроля = 2;
					Строка.ПараметрКонтроля = "СведенияОбОрганизации";
					
					Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
					Строка.Расшифровка.ТипРасшифровки = "Объектная";
					Строка.Расшифровка.ЗначениеРасшифровки = Выборка.Сотрудник;
					ОшибочныеПоля = Новый Соответствие;
					ОшибочныеПоля.Вставить("Объект.ФизЛицо",НСтр("ru='Не указано физическое лицо'"));
					Строка.Расшифровка.ПараметрыРасшифровки = ОшибочныеПоля;
				Иначе
					ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаОкончания, Новый Структура("ФизЛицо",ФизЛицо));
					Если ДанныеФЛ.Количество() > 0 Тогда
						ФИО = ДанныеФЛ[0];
						Если ПустаяСтрока(ФИО.Фамилия) ИЛИ ПустаяСтрока(ФИО.Имя) Тогда
							Строка = КорневаяСтрока.Строки.Добавить();
							Строка.Описание = НСтр("ru='Не указано ФИО руководителя - физического лица'");
							Строка.РезультатКонтроля = 2;
							Строка.ПараметрКонтроля = "СведенияОбОрганизации";
							
							Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
							Строка.Расшифровка.ТипРасшифровки = "Объектная";
							Строка.Расшифровка.ЗначениеРасшифровки = ФизЛицо;
							ОшибочныеПоля = Новый Соответствие;
							ОшибочныеПоля.Вставить("Объект.Наименование",НСтр("ru='Не указано ФИО'"));
							Строка.Расшифровка.ПараметрыРасшифровки = ОшибочныеПоля;
						Иначе
							Строка = КорневаяСтрока.Строки.Добавить();
							Строка.Описание = НСтр("ru='Руководитель организации установлен'");
							Строка.РезультатКонтроля = 0;
							Строка.ПараметрКонтроля = "СведенияОбОрганизации";
						КонецЕсли;
					Иначе
						Строка = КорневаяСтрока.Строки.Добавить();
						Строка.Описание = НСтр("ru='Не указано ФИО физического лица'");
						Строка.РезультатКонтроля = 2;
						Строка.ПараметрКонтроля = "СведенияОбОрганизации";
						
						Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
						Строка.Расшифровка.ТипРасшифровки = "Объектная";
						Строка.Расшифровка.ЗначениеРасшифровки = ФизЛицо;
						ОшибочныеПоля = Новый Соответствие;
						ОшибочныеПоля.Вставить("Объект.Наименование",НСтр("ru='Не указано ФИО'"));
						Строка.Расшифровка.ПараметрыРасшифровки = ОшибочныеПоля;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Строка = КорневаяСтрока.Строки.Добавить();
				Строка.Описание = НСтр("ru='Не задан руководитель организации'");
				Строка.РезультатКонтроля = 2;
				Строка.ПараметрКонтроля = "СведенияОбОрганизации";
				
				Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
				Строка.Расшифровка.ТипРасшифровки = "НоваяЗаписьРегистраСведений";
				Строка.Расшифровка.ЗначениеРасшифровки = "РегистрСведений.ОтветственныеЛица.ФормаЗаписи";
				Строка.Расшифровка.ПараметрыРасшифровки = Новый Структура(
					"ЕстьСобственныеДанныеЗаполнения, СобственныеДанныеЗаполнения",
					Истина,
					Новый Структура("Организация,ТипОтветственногоЛица,Период",
						Организация,
						Перечисления.ТипыОтветственныхЛиц.Руководитель,
						НачалоГода(ДатаПроверки)-1)
					);
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ОграниченияПроверки.Найти("ГлавныйБухгалтер")<>Неопределено) Тогда
			
			ДатаПроверки = ТекущаяДатаСеанса();
			
			Если ЗначениеЗаполнено(ДатаНачала) Тогда
				ДатаПроверки = ДатаНачала;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаОкончания) Тогда
				ДатаПроверки = ДатаОкончания;
			КонецЕсли;
			
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОтветственныеЛицаОрганизацийСрезПоследних.Сотрудник,
			|	ОтветственныеЛицаОрганизацийСрезПоследних.Сотрудник.Наименование КАК Наименование,
			|	ОтветственныеЛицаОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо
			|ИЗ
			|	РегистрСведений.ОтветственныеЛица.СрезПоследних(
			|			&ДатаПроверки,
			|			Организация = &Организация
			|				И ТипОтветственногоЛица = ЗНАЧЕНИЕ(Перечисление.ТипыОтветственныхЛиц.ГлавныйБухгалтер)) КАК ОтветственныеЛицаОрганизацийСрезПоследних");
			
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ДатаПроверки", ДатаПроверки);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ФизЛицо = Выборка.ФизЛицо;
				
				Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
					Строка = КорневаяСтрока.Строки.Добавить();
					Строка.Описание = НСтр("ru='У сотрудника "+ Выборка.Наименование+" не указано физическое лицо'");
					Строка.РезультатКонтроля = 2;
					Строка.ПараметрКонтроля = "СведенияОбОрганизации";
					
					Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
					Строка.Расшифровка.ТипРасшифровки = "Объектная";
					Строка.Расшифровка.ЗначениеРасшифровки = Выборка.Сотрудник;
					ОшибочныеПоля = Новый Соответствие;
					ОшибочныеПоля.Вставить("Объект.ФизЛицо",НСтр("ru='Не указано физическое лицо'"));
					Строка.Расшифровка.ПараметрыРасшифровки = ОшибочныеПоля;
				Иначе
					ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаОкончания, Новый Структура("ФизЛицо",ФизЛицо));
					Если ДанныеФЛ.Количество() > 0 Тогда
						ФИО = ДанныеФЛ[0];
						Если ПустаяСтрока(ФИО.Фамилия) ИЛИ ПустаяСтрока(ФИО.Имя) Тогда
							Строка = КорневаяСтрока.Строки.Добавить();
							Строка.Описание = НСтр("ru='Не указано ФИО главного бухгалтера - физического лица'");
							Строка.РезультатКонтроля = 2;
							Строка.ПараметрКонтроля = "СведенияОбОрганизации";
							
							Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
							Строка.Расшифровка.ТипРасшифровки = "Объектная";
							Строка.Расшифровка.ЗначениеРасшифровки = ФизЛицо;
							ОшибочныеПоля = Новый Соответствие;
							ОшибочныеПоля.Вставить("Объект.Наименование",НСтр("ru='Не указано ФИО'"));
							Строка.Расшифровка.ПараметрыРасшифровки = ОшибочныеПоля;
						Иначе
							Строка = КорневаяСтрока.Строки.Добавить();
							Строка.Описание = НСтр("ru='Главный бухгалтер организации установлен'");
							Строка.РезультатКонтроля = 0;
							Строка.ПараметрКонтроля = "СведенияОбОрганизации";
						КонецЕсли;
					Иначе
						Строка = КорневаяСтрока.Строки.Добавить();
						Строка.Описание = НСтр("ru='Не указано ФИО физического лица'");
						Строка.РезультатКонтроля = 2;
						Строка.ПараметрКонтроля = "СведенияОбОрганизации";
						
						Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
						Строка.Расшифровка.ТипРасшифровки = "Объектная";
						Строка.Расшифровка.ЗначениеРасшифровки = ФизЛицо;
						ОшибочныеПоля = Новый Соответствие;
						ОшибочныеПоля.Вставить("Объект.Наименование",НСтр("ru='Не указано ФИО'"));
						Строка.Расшифровка.ПараметрыРасшифровки = ОшибочныеПоля;
					КонецЕсли;
				КонецЕсли;
			Иначе
					
				Строка = КорневаяСтрока.Строки.Добавить();
				Строка.Описание = НСтр("ru='Не задан главный бухгалтер организации'");
				Строка.РезультатКонтроля = 2;
				Строка.ПараметрКонтроля = "СведенияОбОрганизации";
				
				Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
				Строка.Расшифровка.ТипРасшифровки = "НоваяЗаписьРегистраСведений";
				Строка.Расшифровка.ЗначениеРасшифровки = "РегистрСведений.ОтветственныеЛица.ФормаЗаписи";
				Строка.Расшифровка.ПараметрыРасшифровки = Новый Структура(
					"ЕстьСобственныеДанныеЗаполнения, СобственныеДанныеЗаполнения",
					Истина,
					Новый Структура("Организация,ТипОтветственногоЛица,Период",
						Организация,
						Перечисления.ТипыОтветственныхЛиц.ГлавныйБухгалтер,
						НачалоГода(ДатаПроверки)-1)
					);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполненность параметров на дату начала, если она есть, дату окончания,
// если она есть, или текущую дату
Процедура ВыполнитьПроверкуПараметровУчета(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания, ОграниченияПроверки=Неопределено) Экспорт
	
	КорневаяСтрока = ДеревоРезультата.Строки.Добавить();
	КорневаяСтрока.Описание = НСтр("ru='Настройки параметров учета'");
	КорневаяСтрока.РезультатКонтроля = 0;
	КорневаяСтрока.ПараметрКонтроля = "ПараметрыУчета";
	КорневаяСтрока.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
	
	ДатаПроверки = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаПроверки = ДатаОкончания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаПроверки = ДатаНачала;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетностьУСН.ПараметрыУСНЗаполнены(Организация, ДатаПроверки) Тогда
		
		КорневаяСтрока.РезультатКонтроля = 2;
		
		Строка = КорневаяСтрока.Строки.Добавить();
		Строка.Описание = НСтр("ru='Параметры учета не заполнены'");
		Строка.РезультатКонтроля = 2;
		Строка.ПараметрКонтроля = "ПараметрыУчета";
		
		Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
		Строка.Расшифровка.ТипРасшифровки = "НоваяЗаписьРегистраСведений";
		Строка.Расшифровка.ЗначениеРасшифровки = "РегистрСведений.СистемыНалогообложенияОрганизаций.ФормаЗаписи";
		Строка.Расшифровка.ПараметрыРасшифровки = Новый Структура(
			"ЕстьСобственныеДанныеЗаполнения, СобственныеДанныеЗаполнения",
			Истина,
			Новый Структура("Организация,Период",
				Организация,
				НачалоГода(ДатаПроверки)-1)
			);
			
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что все счета имеют дату открытия, что основной банковский счет актуален и задан
//
Процедура ВыполнитьПроверкуБанковскихСчетов(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания, ОграниченияПроверки=Неопределено) Экспорт
	
	КорневаяСтрока = ДеревоРезультата.Строки.Добавить();
	КорневаяСтрока.Описание = НСтр("ru='Банковские счета'");
	КорневаяСтрока.РезультатКонтроля = 0;
	КорневаяСтрока.ПараметрКонтроля = "БанковскиеСчета";
	КорневаяСтрока.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
	
	// Основной банковский счет
	
	ОсновнойБанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "БанковскийСчетПоУмолчанию");
	Строка = КорневаяСтрока.Строки.Добавить();
	
	Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
		Строка.Описание = НСтр("ru='Основной банковский счет задан'");
		Строка.РезультатКонтроля = 0;
		Строка.ПараметрКонтроля = "БанковскиеСчета";
	Иначе
		ПоляСПредупреждениями = Новый Соответствие;
		ПоляСПредупреждениями.Вставить("Объект.БанковскийСчетПоУмолчанию", НСтр("ru='Не задан основной банковский счет'"));
		
		Строка.Описание = НСтр("ru='Основной банковский счет не задан'");
		Строка.РезультатКонтроля = 1;
		Строка.ПараметрКонтроля = "БанковскиеСчета";
		Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
		Строка.Расшифровка.ТипРасшифровки = "Объектная";
		Строка.Расшифровка.ЗначениеРасшифровки = Организация;
		
		Строка.Расшифровка.ПараметрыРасшифровки = ПоляСПредупреждениями;
		
	КонецЕсли;
	
	// проверка дат открытия банковских счетов
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК БанкСчет,
	|	БанковскиеСчета.Представление КАК ПредставлениеБанкСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И (НЕ БанковскиеСчета.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьБанковскиеСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И (НЕ БанковскиеСчета.ПометкаУдаления)");
	Запрос.УстановитьПараметр("Владелец",Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	
	
	Если Результат[1].Пустой() Тогда
		
		Строка = КорневаяСтрока.Строки.Добавить();
		Строка.Описание = НСтр("ru='Нет банковских счетов'");
		Строка.РезультатКонтроля = 1;
		Строка.ПараметрКонтроля = "БанковскиеСчета";
		Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
		Строка.Расшифровка.ТипРасшифровки = "Списочная";
		Строка.Расшифровка.ЗначениеРасшифровки = "Справочник.БанковскиеСчета.ФормаСписка";
		
		Строка.Расшифровка.ПараметрыРасшифровки = Новый Структура(
			"Отбор", Новый Структура("Владелец", Организация));
		
	ИначеЕсли Результат[0].Пустой() Тогда
		Строка = КорневаяСтрока.Строки.Добавить();
		Строка.Описание = НСтр("ru='Даты открытия банковских счетов заданы'");
		Строка.РезультатКонтроля = 0;
		Строка.ПараметрКонтроля = "БанковскиеСчета";
	Иначе
		Пока Выборка.Следующий() Цикл
			
			ПоляСПредупреждениями = Новый Соответствие;
			ПоляСПредупреждениями.Вставить("Объект.ДатаОткрытия", НСтр("ru='Не указана дата открытия счета «'")+Выборка.ПредставлениеБанкСчета+"»");
			
			Строка.Описание = НСтр("ru='Не указана дата открытия счета «'")+ Выборка.ПредставлениеБанкСчета + "»";
			Строка.РезультатКонтроля = 1;
			Строка.ПараметрКонтроля = "БанковскиеСчета";
			Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
			Строка.Расшифровка.ТипРасшифровки = "Объектная";
			Строка.Расшифровка.ЗначениеРасшифровки = Выборка.БанкСчет;
			
			Строка.Расшифровка.ПараметрыРасшифровки = ПоляСПредупреждениями;
			
		КонецЦикла;
	КонецЕсли;
	
	
	// простановка результата контроля
	Для Каждого Строка Из КорневаяСтрока.Строки Цикл
		КорневаяСтрока.РезультатКонтроля = Макс(КорневаяСтрока.РезультатКонтроля, Строка.РезультатКонтроля);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет введеность начальных остатков
//
Процедура ВыполнитьПроверкуНачальныхОстатков(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания, ОграниченияПроверки=Неопределено) Экспорт
	
	КорневаяСтрока = ДеревоРезультата.Строки.Добавить();
	КорневаяСтрока.Описание = НСтр("ru='Начальные остатки'");
	КорневаяСтрока.РезультатКонтроля = 0;
	КорневаяСтрока.ПараметрКонтроля = "НачальныеОстатки";
	КорневаяСтрока.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
	
	ДатаПроверки = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаПроверки = ДатаОкончания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаПроверки = ДатаНачала;
	КонецЕсли;
	
	Строка = КорневаяСтрока.Строки.Добавить();
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	ГодСдачиОтчетности = НачалоГода(ДатаНачала);
	// 1 Проверяем существование хотя бы одного проведенного документа ввода начальных остатков
	// на дату проверки.
	// 2 Проверяем, была ли сдана отчетность в предыдущем году
	//
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатков.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.Организация = &Организация
	|	И ВводНачальныхОстатков.Дата <= &Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря
	|ИЗ
	|	(ВЫБРАТЬ
	|		КалендарьПодготовкиОтчетности.Ссылка КАК Событие
	|	ИЗ
	|		Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|	ГДЕ
	|		НЕ КалендарьПодготовкиОтчетности.ПометкаУдаления
	|		И КалендарьПодготовкиОтчетности.ДатаДокументаОбработкиСобытия МЕЖДУ &НачалоГода И &КонецГода) КАК СобытияКалендаря
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|		ПО (ЗаписиКалендаряПодготовкиОтчетности.Организация = &Организация)
	|			И (ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря = СобытияКалендаря.Событие)
	|			И НЕ ЗаписиКалендаряПодготовкиОтчетности.ПометкаУдаления
	|			И ЗаписиКалендаряПодготовкиОтчетности.Завершено
	|;");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", ДатаПроверки);
	Запрос.УстановитьПараметр("НачалоГода", ДобавитьМесяц(ГодСдачиОтчетности, -12));
	Запрос.УстановитьПараметр("КонецГода", Дата(ГодСдачиОтчетности-1));
	МассивРезультатов = Запрос.ВыполнитьПакет();
		
	// проверяем дату регистрации и год отчетности
	Если Не ЗначениеЗаполнено(ДатаРегистрации) Или (ДатаРегистрации >= ГодСдачиОтчетности) Тогда
		// Организация начала вести учет в том же году, что и открылась - начальных остатков нет.
		КорневаяСтрока.РезультатКонтроля = 0;
		
		Строка.Описание = НСтр("ru='Начальные остатки заполнены'");
		Строка.РезультатКонтроля = 0;
		Строка.ПараметрКонтроля = "НачальныеОстатки";
	Иначе
		Если МассивРезультатов[1].Пустой() Тогда
			ВыборкаВНО = МассивРезультатов[0].Выбрать();
			Если ВыборкаВНО.Количество() = 0 Тогда
				// Если документа нет, то
				// Начальные остатки не заполнены
				КорневаяСтрока.РезультатКонтроля = 1;
				Строка.Описание = НСтр("ru='Начальные остатки не заполнены'");
				Строка.РезультатКонтроля = 1;
				Строка.ПараметрКонтроля = "НачальныеОстатки";
				Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
				Строка.Расшифровка.ТипРасшифровки = "Объектная";
				Строка.Расшифровка.ЗначениеРасшифровки = ПолучитьДокументНачальныхОстатков(
					Организация,
					Истина);
			Иначе
				// Документ есть, проводим его анализ
				КорневаяСтрока.РезультатКонтроля = 0;
				
				Строка.Описание = НСтр("ru='Начальные остатки заполнены'");
				Строка.РезультатКонтроля = 0;
				Строка.ПараметрКонтроля = "НачальныеОстатки";
				
			КонецЕсли;
		Иначе
			// Организация начала вести учет в том же году, что и открылась - начальных остатков нет.
			КорневаяСтрока.РезультатКонтроля = 0;
			Строка.Описание = НСтр("ru='Начальные остатки заполнены'");
			Строка.РезультатКонтроля = 0;
			Строка.ПараметрКонтроля = "НачальныеОстатки";
		КонецЕсли;
		
	КонецЕсли;
		
		
КонецПроцедуры


// Процедура выполняет контроль по непроведенным документам, не помеченным на удаление
//
Процедура ВыполнитьПроверкуКонтрольПроведенных(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания, ОграниченияПроверки=Неопределено) Экспорт
	
	КорневаяСтрока = ДеревоРезультата.Строки.Добавить();
	КорневаяСтрока.Описание = НСтр("ru='Контроль непроведенных документов'");
	КорневаяСтрока.РезультатКонтроля = 0;
	КорневаяСтрока.ПараметрКонтроля = "КонтрольПроведенных";
	КорневаяСтрока.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
	
	Если ОграниченияПроверки = Неопределено Тогда
		ОграниченияПроверки = Новый Массив;
		ОграниченияПроверки.Добавить("ВводНачальныхОстатков");
		ОграниченияПроверки.Добавить("ЗаписиУСН");
		ОграниченияПроверки.Добавить("НачислениеЗарплаты");
		ОграниченияПроверки.Добавить("НачислениеНалогов");
		ОграниченияПроверки.Добавить("АвансовыйОтчет");
		ОграниченияПроверки.Добавить("ПоступлениеВКассу");
		ОграниченияПроверки.Добавить("ПоступлениеНаСчет");
		ОграниченияПроверки.Добавить("ОтчетОРозничныхПродажах");
		ОграниченияПроверки.Добавить("ПриходнаяНакладная");
		ОграниченияПроверки.Добавить("РасходИзКассы");
		ОграниченияПроверки.Добавить("РасходСоСчета");
		ОграниченияПроверки.Добавить("РасходнаяНакладная");
	КонецЕсли;
	
	
	ДатаПроверки = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаПроверки = ДатаОкончания;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Для Каждого Проверка Из ОграниченияПроверки Цикл
		
		ТекстЗапроса = 
			ТекстЗапроса +
			?(ТекстЗапроса = "","","
			|ОБЪЕДИНИТЬ ВСЕ ") +
			"
			|ВЫБРАТЬ 
			|	ОбрабатываемыйДокумент.Ссылка Как Ссылка,
			|	ПредставлениеСсылки(ОбрабатываемыйДокумент.Ссылка) Как СсылкаПредставление
			|ИЗ Документ."+Проверка + " КАК ОбрабатываемыйДокумент
			|ГДЕ
			|ОбрабатываемыйДокумент.Дата МЕЖДУ &ДатаНачала И &ДатаПроверки
			|И ОбрабатываемыйДокумент.Организация = &Организация
			|И НЕ(ОбрабатываемыйДокумент.Проведен ИЛИ ОбрабатываемыйДокумент.ПометкаУдаления)";
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	" ВЫБРАТЬ ПЕРВЫЕ 11 * ИЗ ("+ ТекстЗапроса + ") КАК ВложенныйЗапрос");
	
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаПроверки", ДатаПроверки);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Строка = КорневаяСтрока.Строки.Добавить();
		Строка.Описание = НСтр("ru='Непроведенных документов нет'");
		Строка.РезультатКонтроля = 0;
		Строка.ПараметрКонтроля = "КонтрольПроведенных";
	Иначе
		// если непроведенных документов больше 10, тогда показываем общий журнал с фильтром
		// по непроведенным документам
		ТаблицаРезультата = Результат.Выгрузить();
		Если ТаблицаРезультата.Количество() = 11 Тогда
			Строка = КорневаяСтрока.Строки.Добавить();
			Строка.Описание = НСтр("ru='Есть непроведенные документы. Эти документы игнорируются отчетностью. Если они не нужны, то пометьте их на удаление'");
			Строка.РезультатКонтроля = 1;
			Строка.ПараметрКонтроля = "КонтрольПроведенных";
			Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
			Строка.Расшифровка.ТипРасшифровки = "Списочная";
			Строка.Расшифровка.ЗначениеРасшифровки = "ЖурналДокументов.ОбщийЖурнал.ФормаСписка";
			Строка.Расшифровка.ПараметрыРасшифровки = Новый Структура(
				"ОтборНепроведенныхДокументов, ДатаНачала, ДатаОкончания", 
				Истина,
				ДатаНачала,
				ДатаПроверки);
		Иначе
			
			Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
				Строка = КорневаяСтрока.Строки.Добавить();
				Строка.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ «%1» не проведен и не помечен на удаление'"),
					СтрокаРезультата.СсылкаПредставление);
				Строка.РезультатКонтроля = 1;
				Строка.ПараметрКонтроля = "КонтрольПроведенных";
				Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
				Строка.Расшифровка.ТипРасшифровки = "Объектная";
				Строка.Расшифровка.ЗначениеРасшифровки = СтрокаРезультата.Ссылка;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Процедура выполняет контроль наличия объектов ЕНВД
//
Процедура ВыполнитьПроверкуНаличияПоказателейЕНВД(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания, ОграниченияПроверки=Неопределено) Экспорт
	
	КорневаяСтрока = ДеревоРезультата.Строки.Добавить();
	КорневаяСтрока.Описание = НСтр("ru='Показатели ЕНВД'");
	КорневаяСтрока.РезультатКонтроля = 0;
	КорневаяСтрока.ПараметрКонтроля = "НаличиеПоказателейЕНВД";
	КорневаяСтрока.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыДеятельностиЕНВД.Ссылка
	|ИЗ
	|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельностиЕНВД
	|ГДЕ
	|	ВидыДеятельностиЕНВД.Владелец = &Организация
	|	И ВидыДеятельностиЕНВД.Актуально
	|	И ВидыДеятельностиЕНВД.ДатаНачала < &ДатаОкончания");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ПоляСОшибкам = Новый Соответствие;
		ПоляСОшибкам.Вставить("Команда.НастроитьЕНВД",НСтр("ru='Нет актуальных видов деятельности по ЕНВД'"));
		
		Строка = КорневаяСтрока.Строки.Добавить();
		
		Строка.Описание = НСтр("ru='Нет актуальных видов деятельности по ЕНВД'");
		
		Строка.РезультатКонтроля = 2;
		Строка.ПараметрКонтроля = "НаличиеПоказателейЕНВД";
		Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
		Строка.Расшифровка.ТипРасшифровки = "Списочная";
		Строка.Расшифровка.ЗначениеРасшифровки = "Справочник.ВидыДеятельностиЕНВД.ФормаСписка";
		Строка.Расшифровка.ПараметрыРасшифровки = Новый Структура("Отбор", Новый Структура("Владелец",Организация));
	
	Иначе
		
		КорневаяСтрока.РезультатКонтроля = 0;
		Строка = КорневаяСтрока.Строки.Добавить();
		Строка.Описание = НСтр("ru='Показатели ЕНВД заполнены'");
		Строка.РезультатКонтроля = 0;
		Строка.ПараметрКонтроля = "НаличиеПоказателейЕНВД";
		
		ВыполнитьПроверкуЗаполненияПоказателейЕНВД(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания,ОграниченияПроверки);
		КорректностьЗаполненияВидовДеятельностиЕНВД(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания,ОграниченияПроверки);
	КонецЕсли;
	
КонецПроцедуры


// Процедура выполняет контроль заполненности документа показателей енвд
//
Процедура ВыполнитьПроверкуЗаполненияПоказателейЕНВД(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания, ОграниченияПроверки=Неопределено) Экспорт
	
	КорневаяСтрока = ДеревоРезультата.Строки.Добавить();
	КорневаяСтрока.Описание = НСтр("ru='Показатели ЕНВД'");
	КорневаяСтрока.РезультатКонтроля = 0;
	КорневаяСтрока.ПараметрКонтроля = "ЗаполнениеПоказателейЕНВД";
	КорневаяСтрока.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
	
	ДокументЕНВД = РегламентированнаяОтчетностьЕНВД.ПолучитьДокументПоказателейЕНВД(Организация, ДатаОкончания);
	
	ПоляСОшибками = Новый Соответствие;
	
	Для Каждого Строка Из ДокументЕНВД.ПоказателиЕНВД Цикл
		
		Если Строка.ЗначениеФизическогоПоказателя1 = 0 И Строка.ВыработкаДней1 > 0 Тогда
			ПоляСОшибками.Вставить("Объект.ПоказателиЕНВД["+(Строка.НомерСтроки-1)+"].ЗначениеФизическогоПоказателя1", НСтр("ru='Нет физ. показателя'"));
		КонецЕсли;
		
		Если Строка.ЗначениеФизическогоПоказателя2 = 0  И Строка.ВыработкаДней2 > 0 Тогда
			ПоляСОшибками.Вставить("Объект.ПоказателиЕНВД["+(Строка.НомерСтроки-1)+"].ЗначениеФизическогоПоказателя2", НСтр("ru='Нет физ. показателя'"));
		КонецЕсли;
		
		Если Строка.ЗначениеФизическогоПоказателя3 = 0  И Строка.ВыработкаДней3 > 0 Тогда
			ПоляСОшибками.Вставить("Объект.ПоказателиЕНВД["+(Строка.НомерСтроки-1)+"].ЗначениеФизическогоПоказателя3", НСтр("ru='Нет физ. показателя'"));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПоляСОшибками.Количество() > -0 Тогда
		Строка = КорневаяСтрока.Строки.Добавить();
		Строка.Описание = НСтр("ru='Не заполнены некоторые показатели по ЕНВД'");
		Строка.РезультатКонтроля = 2;
		Строка.ПараметрКонтроля = "ЗаполнениеПоказателейЕНВД";
		Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
		Строка.Расшифровка.ТипРасшифровки = "Объектная";
		Строка.Расшифровка.ЗначениеРасшифровки = ДокументЕНВД;
		Строка.Расшифровка.ПараметрыРасшифровки = ПоляСОшибками
	Иначе
		КорневаяСтрока.РезультатКонтроля = 0;
		Строка = КорневаяСтрока.Строки.Добавить();
		Строка.Описание = НСтр("ru='Показатели ЕНВД заполнены корректно'");
		Строка.РезультатКонтроля = 0;
		Строка.ПараметрКонтроля = "ЗаполнениеПоказателейЕНВД";
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет контроль корректности заполнения показателей енвд
//
Процедура КорректностьЗаполненияВидовДеятельностиЕНВД(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания, ОграниченияПроверки=Неопределено) Экспорт
	
	КорневаяСтрока = ДеревоРезультата.Строки.Добавить();
	КорневаяСтрока.Описание = НСтр("ru='Корректность видов деятельности ЕНВД'");
	КорневаяСтрока.РезультатКонтроля = 0;
	КорневаяСтрока.ПараметрКонтроля = "КорректностьЗаполненияВидовДеятельностиЕНВД";
	КорневаяСтрока.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
	
	РегламентированнаяОтчетностьЕНВД.ПолучитьДокументПоказателейЕНВД(Организация, ДатаОкончания);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыДеятельностиЕНВД.Ссылка,
	|	ВидыДеятельностиЕНВД.КодПоОКАТО КАК КодПоОКАТО,
	|	ВидыДеятельностиЕНВД.СтавкаЕНВД КАК СтавкаЕНВД,
	|	ВидыДеятельностиЕНВД.КодНалоговогоОрганаПолучателя КАК КодНалоговогоОрганаПолучателя,
	|	ЕСТЬNULL(АдресОсуществленияДеятельности.ЗначенияПолей, """") КАК АдресОсуществленияДеятельности,
	|	ЕСТЬNULL(ВложенныйЗапрос.КоличествоОкун, 0) КАК КоличествоОкун,
	|	ВЫБОР КОГДА (ВидыДеятельностиЕНВД.ВидПредпринимательскойДеятельности.Код = ""01""
	|			ИЛИ ВидыДеятельностиЕНВД.ВидПредпринимательскойДеятельности.Код = ""02""
	|			ИЛИ ВидыДеятельностиЕНВД.ВидПредпринимательскойДеятельности.Код = ""03"")
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Код010203
	|ИЗ
	|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельностиЕНВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВидыДеятельностиЕНВДЗначенияОКУН.Ссылка КАК Ссылка,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыДеятельностиЕНВДЗначенияОКУН.ОКУН) КАК КоличествоОкун
	|		ИЗ
	|			Справочник.ВидыДеятельностиЕНВД.ЗначенияОКУН КАК ВидыДеятельностиЕНВДЗначенияОКУН
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВидыДеятельностиЕНВДЗначенияОКУН.Ссылка) КАК ВложенныйЗапрос
	|		ПО (ВложенныйЗапрос.Ссылка = ВидыДеятельностиЕНВД.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиЕНВД.КонтактнаяИнформация КАК АдресОсуществленияДеятельности
	|		ПО ВидыДеятельностиЕНВД.Ссылка = АдресОсуществленияДеятельности.Ссылка
	|			И (АдресОсуществленияДеятельности.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДеятельностиЕНВД))
	|ГДЕ
	|	ВидыДеятельностиЕНВД.Владелец = &Организация
	|	И ВидыДеятельностиЕНВД.Актуально");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		КорневаяСтрока.РезультатКонтроля = 0;
		Строка = КорневаяСтрока.Строки.Добавить();
		Строка.Описание = НСтр("ru='Виды деятельности ЕНВД заполнены корректно'");
		Строка.РезультатКонтроля = 0;
		Строка.ПараметрКонтроля = "КорректностьЗаполненияВидовДеятельностиЕНВД";
		
	Иначе
		Выборка = Результат.Выбрать();
		Ошибка = Ложь;
		Пока Выборка.Следующий() Цикл
			ПоляСОшибкам = Новый Соответствие;
			ПоляСПредупреждениями = Новый Соответствие;
			
			Если Выборка.Код010203 И Выборка.КоличествоОкун = 0 И Год(ДатаНачала) < 2015 Тогда
				ПоляСОшибкам.Вставить("СсылкаЗаполненияОКУН",НСтр("ru='Для кодов видов деятельности 01, 02, 03 необходимы коды ОКУН'"));
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.КодНалоговогоОрганаПолучателя) Тогда
				ПоляСОшибкам.Вставить("Объект.КодНалоговогоОрганаПолучателя",НСтр("ru='Не заполнен код налогового органа получателя'"));
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.СтавкаЕНВД) Тогда
				ПоляСОшибкам.Вставить("Объект.СтавкаЕНВД",НСтр("ru='Не заполнена ставка ЕНВД'"));
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.КодПоОКАТО) Тогда
				ПоляСОшибкам.Вставить("Объект.КодПоОКАТО",НСтр("ru='Не заполнен код по ОКТМО'"));
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.АдресОсуществленияДеятельности) Тогда
				ПоляСОшибкам.Вставить("КонтактнаяИнформацияПоле0",НСтр("ru='Не заполнено место осуществления деятельности'"));
			КонецЕсли;
			
			Если ПоляСОшибкам.Количество() > 0 Тогда
				Ошибка = Истина;
				Строка = КорневаяСтрока.Строки.Добавить();
				
				Строка.Описание = НСтр("ru='У вида деятельности «'") + Выборка.Ссылка + НСтр("ru='» не заполнены реквизиты'");
				
				Строка.РезультатКонтроля = 2;
				Строка.ПараметрКонтроля = "КорректностьЗаполненияВидовДеятельностиЕНВД";
				Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
				Строка.Расшифровка.ТипРасшифровки = "Объектная";
				Строка.Расшифровка.ЗначениеРасшифровки = Выборка.Ссылка;
				Строка.Расшифровка.ПараметрыРасшифровки = ПоляСОшибкам;
			КонецЕсли;
			
			Если ПоляСПредупреждениями.Количество() > 0 Тогда
				Ошибка = Истина;
				Строка = КорневаяСтрока.Строки.Добавить();
				
				Строка.Описание = НСтр("ru='У вида деятельности «'") + Выборка.Ссылка + НСтр("ru='» есть проблемы с некоторыми полями'");
				
				Строка.РезультатКонтроля = 1;
				Строка.ПараметрКонтроля = "КорректностьЗаполненияВидовДеятельностиЕНВД";
				Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
				Строка.Расшифровка.ТипРасшифровки = "Объектная";
				Строка.Расшифровка.ЗначениеРасшифровки = Выборка.Ссылка;
				Строка.Расшифровка.ПараметрыРасшифровки = ПоляСПредупреждениями;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не Ошибка Тогда
			
			КорневаяСтрока.РезультатКонтроля = 0;
			Строка = КорневаяСтрока.Строки.Добавить();
			Строка.Описание = НСтр("ru='Виды деятельности ЕНВД заполнены корректно'");
			Строка.РезультатКонтроля = 0;
			Строка.ПараметрКонтроля = "КорректностьЗаполненияВидовДеятельностиЕНВД";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет реквизиты сотрудников организации
//
Процедура ВыполнитьПроверкуСведенийПоСотрудникам(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания, ОграниченияПроверки=Неопределено) Экспорт
	
	КорневаяСтрока = ДеревоРезультата.Строки.Добавить();
	КорневаяСтрока.Описание = НСтр("ru='Реквизиты сотрудников'");
	КорневаяСтрока.РезультатКонтроля = 0;
	КорневаяСтрока.ПараметрКонтроля = "СведенияПоСотрудникам";
	КорневаяСтрока.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
	
	Если ОграниченияПроверки = Неопределено Тогда
		ОграниченияПроверки = Новый Массив;
		
		// все контролируемые поля
		ОграниченияПроверки.Добавить("Фамилия");
		ОграниченияПроверки.Добавить("Имя");
		ОграниченияПроверки.Добавить("Отчество");
		ОграниченияПроверки.Добавить("ИНН");
		ОграниченияПроверки.Добавить("ДатаРождения");
		ОграниченияПроверки.Добавить("СтраховойНомерПФР");
		ОграниченияПроверки.Добавить("Гражданство");
		ОграниченияПроверки.Добавить("АдресПоПрописке");
		ОграниченияПроверки.Добавить("Индекс");
		ОграниченияПроверки.Добавить("Телефон");
		ОграниченияПроверки.Добавить("УдостоверениеЛичности");
		
	КонецЕсли;
	
	
	// Получим список сотрудников, работающих в организации в указанный период
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыРаботыСотрудниковДатаПриема.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиОрганизации
	|ИЗ
	|	Документ.ПриемНаРаботу.Сотрудники КАК ПериодыРаботыСотрудниковДатаПриема
	|ГДЕ
	|	ПериодыРаботыСотрудниковДатаПриема.Ссылка.Организация = &Организация
	|	И ПериодыРаботыСотрудниковДатаПриема.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	И ПериодыРаботыСотрудниковДатаПриема.Период <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ПериодыРаботыСотрудниковДатаПриема.Период <= &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник
	|ПОМЕСТИТЬ ВтСотрудники
	|ИЗ
	|	(ВЫБРАТЬ
	|		СотрудникиСрезПоследних.Сотрудник КАК Сотрудник
	|	ИЗ
	|		РегистрСведений.Сотрудники.СрезПоследних(&ДатаНачала, ) КАК СотрудникиСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации
	|			ПО (ВТСотрудникиОрганизации.Сотрудник = СотрудникиСрезПоследних.Сотрудник)
	|	ГДЕ
	|		СотрудникиСрезПоследних.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)

	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПериодыРаботыСотрудников.Сотрудник
	|	ИЗ
	|		РегистрСведений.Сотрудники КАК ПериодыРаботыСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации
	|			ПО (ВТСотрудникиОрганизации.Сотрудник = ПериодыРаботыСотрудников.Сотрудник)
	|	ГДЕ
	|		ПериодыРаботыСотрудников.Период МЕЖДУ &ДатаНачала И &ДатаОкончания

	|		И ПериодыРаботыСотрудников.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтСотрудники.Сотрудник,
	|	Сотрудники.Физлицо КАК ФизЛицо,
	|	ФИОФизЛиц.Фамилия,
	|	ФИОФизЛиц.Имя,
	|	ФИОФизЛиц.Отчество,
	|	Сотрудники.Представление КАК СотрудникПредставление
	|ПОМЕСТИТЬ ВтДанныеПоСотрудникам
	|ИЗ
	|	ВтСотрудники КАК ВтСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = ВтСотрудники.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛиц
	|		ПО (ФИОФизЛиц.ФизЛицо = Сотрудники.Физлицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.ФизЛицо,
	|	Сотрудники.Фамилия,
	|	Сотрудники.Имя,
	|	Сотрудники.Отчество,
	|	Сотрудники.СотрудникПредставление
	|ИЗ
	|	ВтДанныеПоСотрудникам КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПаспортныеДанныеФизЛицСрезПоследних.Физлицо КАК Физлицо,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ВидДокумента.КодМВД КАК Код,
	|	ПаспортныеДанныеФизЛицСрезПоследних.Серия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.Номер
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			,
	|			Физлицо В
	|				(ВЫБРАТЬ
	|					Сотрудники.ФизЛицо
	|				ИЗ
	|					ВтДанныеПоСотрудникам КАК Сотрудники)) КАК ПаспортныеДанныеФизЛицСрезПоследних";
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаСотрудники = ПакетЗапросов[3].Выбрать();
	ДокументыФизЛиц = ПакетЗапросов[4].Выгрузить();
	
	Пока ВыборкаСотрудники.Следующий() Цикл
		
		// ключ - имя поля, значение - описание
		ПоляСОшибками = Новый Соответствие;
		// ключ - имя поля, значение - описание
		ПоляСПредупреждениями = Новый Соответствие;
		
		Сотрудник = ВыборкаСотрудники.Сотрудник;
		ФизЛицо = ВыборкаСотрудники.ФизЛицо;
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			Если ПустаяСтрока(ВыборкаСотрудники.Фамилия) И (ОграниченияПроверки.Найти("Фамилия")<>Неопределено) Тогда
				ПоляСОшибками.Вставить("Наименование",НСтр("ru='Не указана фамилия'"));
			КонецЕсли;
			
			Если ПустаяСтрока(ВыборкаСотрудники.Имя) И (ОграниченияПроверки.Найти("Имя")<>Неопределено) Тогда
				ПоляСОшибками.Вставить("Наименование",НСтр("ru='Не указано имя'"));
			КонецЕсли;
			
			Если ПустаяСтрока(ВыборкаСотрудники.Отчество) И (ОграниченияПроверки.Найти("Отчество")<>Неопределено) Тогда
				ПоляСПредупреждениями.Вставить("Наименование",НСтр("ru='Не указано отчество'"));
			КонецЕсли;
			
			Если ПустаяСтрока(ФизЛицо.ИНН) И (ОграниченияПроверки.Найти("ИНН")<>Неопределено) Тогда
				ПоляСОшибками.Вставить("ФизическоеЛицо.ИНН",НСтр("ru='Не указан ИНН'"));
			ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СокрЛП(ФизЛицо.ИНН), Ложь, "") И (ОграниченияПроверки.Найти("ИНН")<>Неопределено) Тогда
				ПоляСОшибками.Вставить("ФизическоеЛицо.ИНН",НСтр("ru='Некорректное значение ИНН'"));
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ФизЛицо.ДатаРождения) И (ОграниченияПроверки.Найти("ДатаРождения")<>Неопределено) Тогда
				ПоляСОшибками.Вставить("ФизическоеЛицо.ДатаРождения",НСтр("ru='Не указана дата рождения'"));
			КонецЕсли;
			
			Если ПустаяСтрока(ФизЛицо.СтраховойНомерПФР) И (ОграниченияПроверки.Найти("СтраховойНомерПФР")<>Неопределено) Тогда
				ПоляСОшибками.Вставить("ФизическоеЛицо.СтраховойНомерПФР",НСтр("ru='Не указан страховой номер ПФР'"));
			ИначеЕсли Не РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СокрЛП(ФизЛицо.СтраховойНомерПФР),"") И (ОграниченияПроверки.Найти("СтраховойНомерПФР")<>Неопределено) Тогда
				ПоляСОшибками.Вставить("ФизическоеЛицо.СтраховойНомерПФР",НСтр("ru='Некорректное значение Страхового номера в ПФР'"));
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ФизЛицо.Гражданство) И (ОграниченияПроверки.Найти("Гражданство")<>Неопределено) Тогда
				ПоляСОшибками.Вставить("ФизическоеЛицо.Гражданство",НСтр("ru='Не указано гражданство'"));
			КонецЕсли;
			
			Если (ОграниченияПроверки.Найти("АдресПоПрописке")<>Неопределено) Тогда
				
				Строки = ФизЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке));
				Если Строки.Количество() = 0 Тогда
					ПоляСОшибками.Вставить("ПредставлениеКИ_0",НСтр("ru='Не указан адрес по прописке'"));
				Иначе
					Если ПустаяСтрока(Строки[0].Представление) Тогда
						ПоляСОшибками.Вставить("ПредставлениеКИ_0",НСтр("ru='Не указан адрес по прописке'"));
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если (ОграниченияПроверки.Найти("Индекс")<>Неопределено) Тогда
				
				Строки = ФизЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке));
				Если Строки.Количество() = 0 Тогда
					ПоляСОшибками.Вставить("ПредставлениеКИ_0",НСтр("ru='Не указан индекс адреса по прописке'"));
				Иначе
					СтруктураАдреса = УчетСтраховыхВзносов.СтруктураПолейАдресаИзСпискаПолейКонтактнойИнформации(Строки[0].ЗначенияПолей, Строки[0].Представление);
					Если ПустаяСтрока(СтруктураАдреса.Индекс) Тогда
						ПоляСОшибками.Вставить("ПредставлениеКИ_0",НСтр("ru='Не указан индекс адреса по прописке'"));
					ИначеЕсли СтрДлина(СокрЛП(СтруктураАдреса.Индекс))<> 6 Тогда
						ПоляСОшибками.Вставить("ПредставлениеКИ_0",НСтр("ru='Некорректно заполнен индекс адреса по прописке'"));
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если (ОграниченияПроверки.Найти("Телефон")<>Неопределено) Тогда
				
				Строки = ФизЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица));
				Если Строки.Количество() = 0 Тогда
					ПоляСОшибками.Вставить("Физлицо",НСтр("ru='Не указан контактный телефон'"));
				Иначе
					Если ПустаяСтрока(Строки[0].Представление) Тогда
						ПоляСОшибками.Вставить("Физлицо",НСтр("ru='Не указан контактный телефон'"));
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// удостоверение личности
			
			Если (ОграниченияПроверки.Найти("УдостоверениеЛичности")<>Неопределено) Тогда
				
				ДокументУдЛичности = ДокументыФизЛиц.Найти(Физлицо,"Физлицо");
				Если ДокументУдЛичности = Неопределено Тогда
					ПоляСОшибками.Вставить("КлючДокументФизЛица.Серия", НСтр("ru='Не указан документ, удостоверяющий личность'"));
				Иначе
					
					Если ПустаяСтрока(ДокументУдЛичности.Серия) Тогда
						ПоляСОшибками.Вставить("КлючДокументФизЛица.Серия", НСтр("ru='Не указана серия документа, удостоверяющего личность'"));
					КонецЕсли;
					
					Если ПустаяСтрока(ДокументУдЛичности.Номер) Тогда
						ПоляСОшибками.Вставить("КлючДокументФизЛица.Номер", НСтр("ru='Не указан номер документа, удостоверяющего личность'"));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ПоляСОшибками.Вставить("Физлицо",НСтр("ru='Не заполнено физическое лицо'"));
		КонецЕсли;
		
		
		Если ПоляСОшибками.Количество() > 0 Тогда
			Строка = КорневаяСтрока.Строки.Добавить();
			Строка.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='У сотрудника «%1» не заполнены необходимые реквизиты'"),
				ВыборкаСотрудники.СотрудникПредставление);
			
			Строка.РезультатКонтроля = 2;
			Строка.ПараметрКонтроля = "СведенияПоСотрудникам";
			
			Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
			Строка.Расшифровка.ТипРасшифровки = "Объектная";
			Строка.Расшифровка.ЗначениеРасшифровки = Сотрудник;
			Строка.Расшифровка.ПараметрыРасшифровки = ПоляСОшибками;
		КонецЕсли;
		
		Если ПоляСПредупреждениями.Количество() > 0 Тогда
			Строка = КорневаяСтрока.Строки.Добавить();
			Строка.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='У сотрудника «%1» есть проблемы с некоторыми полями'"),
				ВыборкаСотрудники.СотрудникПредставление);
			
			Строка.РезультатКонтроля = 1;
			Строка.ПараметрКонтроля = "СведенияПоСотрудникам";
			
			Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
			Строка.Расшифровка.ТипРасшифровки = "Объектная";
			Строка.Расшифровка.ЗначениеРасшифровки = Сотрудник;
			Строка.Расшифровка.ПараметрыРасшифровки = ПоляСПредупреждениями;
			
		КонецЕсли;
		
		Если ПоляСОшибками.Количество() = 0 И ПоляСПредупреждениями.Количество() = 0 Тогда
			Строка = КорневаяСтрока.Строки.Добавить();
			Строка.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Основные реквизиты по сотруднику «%1» заполнены'"),
				ВыборкаСотрудники.СотрудникПредставление);
			Строка.РезультатКонтроля = 0;
			Строка.ПараметрКонтроля = "СведенияПоСотрудникам";
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет заполненность тарифа на страховые взносы на дату начала, если она есть, дату окончания,
// если она есть, или текущую дату
Процедура ВыполнитьПроверкуТарифаСтраховыхВзносов(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания, ОграниченияПроверки=Неопределено) Экспорт
	
	КорневаяСтрока = ДеревоРезультата.Строки.Добавить();
	КорневаяСтрока.Описание = НСтр("ru='Настройки тарифа страховых взносов'");
	КорневаяСтрока.РезультатКонтроля = 0;
	КорневаяСтрока.ПараметрКонтроля = "ТарифыСтраховыхВзносов";
	КорневаяСтрока.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
	
	ДатаПроверки = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаПроверки = ДатаОкончания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаПроверки = ДатаНачала;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетностьУСН.ТарифыСтраховыхВзносовЗаполнены(Организация, ДатаПроверки) Тогда
		
		КорневаяСтрока.РезультатКонтроля = 2;
		
		Строка = КорневаяСтрока.Строки.Добавить();
		Строка.Описание = НСтр("ru='Тарифы страховых взносов не заполнены'");
		Строка.РезультатКонтроля = 2;
		Строка.ПараметрКонтроля = "ТарифыСтраховыхВзносов";
		
		Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
		Строка.Расшифровка.ТипРасшифровки = "НоваяЗаписьРегистраСведений";
		Строка.Расшифровка.ЗначениеРасшифровки = "РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.ФормаЗаписи";
		Строка.Расшифровка.ПараметрыРасшифровки = Новый Структура(
			"ЕстьСобственныеДанныеЗаполнения, СобственныеДанныеЗаполнения",
			Истина,
			Новый Структура("Организация,Период",
				Организация,
				НачалоГода(ДатаПроверки)-1)
			);
			
	КонецЕсли;
	
КонецПроцедуры



// Процедура выполняет контроль наличия объектов ЕНВД
//
Процедура ВыполнитьПроверкуТорговыхТочек(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания, ОграниченияПроверки=Неопределено) Экспорт
	
	КорневаяСтрока = ДеревоРезультата.Строки.Добавить();
	КорневаяСтрока.Описание = НСтр("ru='Торговые точки'");
	КорневаяСтрока.РезультатКонтроля = 0;
	КорневаяСтрока.ПараметрКонтроля = "СведенияПоТорговымТочкам";
	КорневаяСтрока.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТорговыеТочки.Ссылка
	|ИЗ
	|	Справочник.ТорговыеТочки КАК ТорговыеТочки
	|ГДЕ
	|	ТорговыеТочки.Владелец = &Владелец
	|	И ТорговыеТочки.ДатаНачалаОсуществленияДеятельности <= &ДатаНачалаОсуществленияДеятельности");
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("ДатаНачалаОсуществленияДеятельности", ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ПоляСОшибкам = Новый Соответствие;
		ПоляСОшибкам.Вставить("Команда.ТорговыеТочки",НСтр("ru='Нет актуальных торговых точек'"));
		
		Строка = КорневаяСтрока.Строки.Добавить();
		
		Строка.Описание = НСтр("ru='Нет актуальных торговых точек'");
		
		Строка.РезультатКонтроля = 2;
		Строка.ПараметрКонтроля = "СведенияПоТорговымТочкам";
		Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
		Строка.Расшифровка.ТипРасшифровки = "Списочная";
		Строка.Расшифровка.ЗначениеРасшифровки = "Справочник.ТорговыеТочки.ФормаСписка";
		Строка.Расшифровка.ПараметрыРасшифровки = Новый Структура("Отбор", Новый Структура("Владелец",Организация));
	
	Иначе
		
		КорневаяСтрока.РезультатКонтроля = 0;
		Строка = КорневаяСтрока.Строки.Добавить();
		Строка.Описание = НСтр("ru='Показатели торговых точек заполнены'");
		Строка.РезультатКонтроля = 0;
		Строка.ПараметрКонтроля = "СведенияПоТорговымТочкам";
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет контроль наличия объектов ЕНВД
//
Процедура ВыполнитьПроверкуТорговыхТочекРозничнойПродажиАлкоголя(ДеревоРезультата, Организация, ДатаНачала, ДатаОкончания, ОграниченияПроверки=Неопределено) Экспорт
	
	КорневаяСтрока = ДеревоРезультата.Строки.Добавить();
	КорневаяСтрока.Описание = НСтр("ru='Торговые точки розничной продажи алкоголя'");
	КорневаяСтрока.РезультатКонтроля = 0;
	КорневаяСтрока.ПараметрКонтроля = "ТорговыеТочкиРозничнойПродажиАлкоголя";
	КорневаяСтрока.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
	
	ТорговыеТочки = РегламентированнаяОтчетностьУСН.ПолучитьТорговыеТочкиРозничнойПродажиАлкоголяПоОрганизации(Организация);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	СтруктурныеЕдиницы.Наименование,
	|	ЕСТЬNULL(АдресаСтруктурныеЕдиницы.Представление, """") КАК Представление
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы.КонтактнаяИнформация КАК АдресаСтруктурныеЕдиницы
	|		ПО (АдресаСтруктурныеЕдиницы.Ссылка = СтруктурныеЕдиницы.Ссылка)
	|			И (АдресаСтруктурныеЕдиницы.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы))
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&МассивТорговыхТочек)");
	
	Запрос.УстановитьПараметр("МассивТорговыхТочек", ТорговыеТочки);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		// Складов нет, предупреждаем пользователя об этом
		//
		
		Строка = КорневаяСтрока.Строки.Добавить();
		
		Строка.Описание = НСтр("ru='Нет торговых точек, подключенных к ЕГАИС'");
		
		Строка.РезультатКонтроля = 1;
		Строка.ПараметрКонтроля = "ТорговыеТочкиРозничнойПродажиАлкоголя";
		Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
		Строка.Расшифровка.ТипРасшифровки = "Списочная";
		Строка.Расшифровка.ЗначениеРасшифровки = "РегистрСведений.НастройкиОбменаЕГАИС.ФормаСписка";
		Строка.Расшифровка.ПараметрыРасшифровки = Новый Структура("Отбор", Новый Структура("Организация",Организация));
		
	Иначе
		// Проверяем заполненность адресов складов
		Выборка = Результат.Выбрать();
		
		ЕстьОшибка = Ложь;
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Представление) Тогда
				ЕстьОшибка = Истина;
				ПоляСОшибками = Новый Соответствие;
				ПоляСОшибками.Вставить("ПредставлениеКИ_1", НСтр("ru='Не указан фактический адрес'"));
				
				Строка = КорневаяСтрока.Строки.Добавить();
				Строка.Описание = НСтр("ru='Не указан адрес торговой точки «'")+ Выборка.Наименование + "»";
				Строка.РезультатКонтроля = 2;
				Строка.ПараметрКонтроля = "ТорговыеТочкиРозничнойПродажиАлкоголя";
				Строка.Расшифровка = ПолучитьСтруктуруРасшифровкиРезультата();
				Строка.Расшифровка.ТипРасшифровки = "Объектная";
				Строка.Расшифровка.ЗначениеРасшифровки = Выборка.ТорговаяТочка;
				
				Строка.Расшифровка.ПараметрыРасшифровки = ПоляСОшибками;
				
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьОшибка Тогда
			КорневаяСтрока.РезультатКонтроля = 0;
			Строка = КорневаяСтрока.Строки.Добавить();
			Строка.Описание = НСтр("ru='Торговые точки розничной продажи алкоголя заполнены'");
			Строка.РезультатКонтроля = 0;
			Строка.ПараметрКонтроля = "ТорговыеТочкиРозничнойПродажиАлкоголя";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Конец Процедур проверок
//-----------------------------------------------------------------------------



//-----------------------------------------------------------------------------
// Вспомогательные процедуры и функции

Функция ПолучитьОписаниеДереваРезультата() Экспорт
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	Дерево.Колонки.Добавить("ПараметрКонтроля", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	Дерево.Колонки.Добавить("РезультатКонтроля", Новый ОписаниеТипов("Число",
												 Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	Дерево.Колонки.Добавить("Расшифровка",);
	
	Возврат Дерево;
	
КонецФункции

Функция ПолучитьСтруктуруРасшифровкиРезультата() Экспорт
	
	Возврат Новый Структура("ТипРасшифровки,ЗначениеРасшифровки,ПараметрыРасшифровки");
	
КонецФункции

// Определяет по дереву результа наличие ошибок и предупреждений
//
Функция ПолучитьСтруктуруРезультатаРаботы(ДеревоРезультата)
	
	ЕстьОшибки = Ложь;
	ЕстьПредупреждения = Ложь;
	
	ОбработатьРезультатыДерева(ДеревоРезультата);
	
	Для Каждого СтрокаРезультата Из ДеревоРезультата.Строки Цикл
		
		Если СтрокаРезультата.РезультатКонтроля = 1 Тогда
			ЕстьПредупреждения = Истина;
		ИначеЕсли СтрокаРезультата.РезультатКонтроля = 2 Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ЕстьОшибки И ЕстьПредупреждения Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура(
		"ЕстьКритическаяОшибка, ЕстьОшибки, ЕстьПредупреждения, ДеревоРезультата,КлючПротоколаПроверки",
		Ложь,
		ЕстьОшибки,
		ЕстьПредупреждения,
		ДеревоРезультата,
		Неопределено);
	
КонецФункции

// Функция выполняет сохранение результата проверки в регистре сведений
//
Функция СохранитьРезультатПроверки(Организация, СобытиеКалендаря, ДатаНачала, ДатаОкончания, СтруктураРезультата) Экспорт
	
	Менеджер = РегистрыСведений.ПротоколыПроверкиДанных.СоздатьМенеджерЗаписи();
	Менеджер.Организация = Организация;
	Менеджер.СобытиеКалендаря = СобытиеКалендаря;
	Менеджер.ДатаПроверки = ТекущаяДатаСеанса();
	Менеджер.Протокол = Новый ХранилищеЗначения(СтруктураРезультата.ДеревоРезультата);
	Менеджер.ЕстьОшибки = СтруктураРезультата.ЕстьОшибки;
	Менеджер.ЕстьПредупреждения = СтруктураРезультата.ЕстьПредупреждения;
	Менеджер.ДатаНачала = ДатаНачала;
	Менеджер.ДатаОкончания = ДатаОкончания;
	Менеджер.Записать();
	
	СтруктураКлюча = Новый Структура("Организация,СобытиеКалендаря,ДатаПроверки");
	ЗаполнитьЗначенияСвойств(СтруктураКлюча, Менеджер);
	
	СсылкаПротоколаЗачета = РегистрыСведений.ПротоколыПроверкиДанных.СоздатьКлючЗаписи(СтруктураКлюча);
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(СсылкаПротоколаЗачета));
	
	Возврат СсылкаПротоколаЗачета;
	
КонецФункции

// Процедура проставляет результаты контроля для родителских ветвей
//
Функция ОбработатьРезультатыДерева(ДеревоРезультата)
	
	Макс = 0;
	
	Для Каждого Строка Из ДеревоРезультата.Строки Цикл
		
		Строка.РезультатКонтроля = ОбработатьРезультатыДерева(Строка);
		Макс = Макс(Макс,Строка.РезультатКонтроля);
		
	КонецЦикла;
	
	ИндексПеретаскивания = 0;
	// перетаскиваем предупреждения наверх
	Для Каждого Строка Из ДеревоРезультата.Строки Цикл
		Если Строка.РезультатКонтроля = 1 Тогда
			ДеревоРезультата.Строки.Сдвинуть(Строка, -ИндексПеретаскивания);
			Продолжить;
		КонецЕсли;
		ИндексПеретаскивания = ИндексПеретаскивания+1;
	КонецЦикла;
	
	ИндексПеретаскивания = 0;
	// перетаскиваем ошибки наверх
	Для Каждого Строка Из ДеревоРезультата.Строки Цикл
		Если Строка.РезультатКонтроля = 2 Тогда
			ДеревоРезультата.Строки .Сдвинуть(Строка, -ИндексПеретаскивания);
			Продолжить;
		КонецЕсли;
		ИндексПеретаскивания = ИндексПеретаскивания+1;
	КонецЦикла;
	
	Если ТипЗнч(ДеревоРезультата) = Тип("СтрокаДереваЗначений") Тогда
		Макс = Макс(Макс, ДеревоРезультата.РезультатКонтроля);
	КонецЕсли;
	
	Возврат Макс;
	
КонецФункции


Процедура СкопироватьСтрокиДереваЗначений(СтрокиПриемника, СтрокиИсточника)
	
	Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
		НоваяСтрока = СтрокиПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		СкопироватьСтрокиДереваЗначений(НоваяСтрока.Строки, СтрокаИсточника.Строки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьОграниченияПараметровКонтроляПоЗадаче(Задача, ОграниченияПараметровКонтроля)
	
	ОграниченияПараметровКонтроля = Новый Массив;
	
	Если Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалог Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		ОграниченияПараметровКонтроля.Добавить("ПараметрыУчета");
		ОграниченияПараметровКонтроля.Добавить("НачальныеОстатки");
		ОграниченияПараметровКонтроля.Добавить("КонтрольПроведенных");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		ОграниченияПараметровКонтроля.Добавить("ПараметрыУчета");
		ОграниченияПараметровКонтроля.Добавить("НачальныеОстатки");
		ОграниченияПараметровКонтроля.Добавить("КонтрольПроведенных");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоУСН Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		ОграниченияПараметровКонтроля.Добавить("ПараметрыУчета");
		ОграниченияПараметровКонтроля.Добавить("НачальныеОстатки");
		ОграниченияПараметровКонтроля.Добавить("КонтрольПроведенных");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоЕНВД Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		ОграниченияПараметровКонтроля.Добавить("НаличиеПоказателейЕНВД");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалогЕНВД Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		ОграниченияПараметровКонтроля.Добавить("НаличиеПоказателейЕНВД");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СреднесписочнаяЧисленность Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Справки2НДФЛ Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		ОграниченияПараметровКонтроля.Добавить("СведенияПоСотрудникам");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ОтчетностьВПФР Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		ОграниченияПараметровКонтроля.Добавить("СведенияПоСотрудникам");
		ОграниченияПараметровКонтроля.Добавить("ТарифыСтраховыхВзносов");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогиСотрудников Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма4ФСС Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		ОграниченияПараметровКонтроля.Добавить("ТарифыСтраховыхВзносов");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыПриДоходахСвыше300тр Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогПатент Тогда
		
			
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ТорговыйСбор Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		ОграниченияПараметровКонтроля.Добавить("СведенияПоТорговымТочкам");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма1Предприниматель Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма6НДФЛ Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СведенияОЗастрахованныхЛицах Тогда
		
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		ОграниченияПараметровКонтроля.Добавить("СведенияПоСотрудникам");
		
	ИначеЕсли Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Декларация12 Тогда
		ОграниченияПараметровКонтроля.Добавить("СведенияПоОрганизации");
		ОграниченияПараметровКонтроля.Добавить("ТорговыеТочкиРозничнойПродажиАлкоголя");
	Иначе
		ОграниченияПараметровКонтроля = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает полное имя объекта метаданных по переданному значению ссылки
// Например,
//  "Справочник.Номенклатура";
//  "Документ.ПриходнаяНакладная"
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - значение ссылки, для которого необходимо получить имя таблицы ИБ
// 
// Возвращаемое значение:
//  Строка - полное имя объекта метаданных для указанного значения ссылки
//
Функция ИмяТаблицыПоСсылке(Ссылка) Экспорт
	
	Возврат Ссылка.Метаданные().ПолноеИмя();
	
КонецФункции

// Функция производит поиск документа ВводНачальныхОстатков, для текущей отчетной единицы
//
// Возвращает:
//		ДокументСсылка.ВводНачальныхОстатков - Ссылка на документ ВводНачальныхОстатков, для текущей отчетной единицы
Функция ПолучитьДокументНачальныхОстатков(Организация, СоздаватьПриНеобходимости=Ложь) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатков.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.Организация = &Организация
	|	И ВводНачальныхОстатков.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если СоздаватьПриНеобходимости Тогда
			Возврат СоздатьДокументВводаНачальныхОстатков(Организация);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

// Функция создает документ ввода начальных остатков
//
// Возвращает:
//		ДокументОбъект.ВводНачальныхОстатков - Объект документа ВводНачальныхОстатков, для текущей отчетной единицы
Функция СоздатьДокументВводаНачальныхОстатков(Организация)
	
	ДокументОбъект = Документы.ВводНачальныхОстатков.СоздатьДокумент();
	ДокументОбъект.Организация = Организация;
	
	
	// Если сейчас май или что-то дальше, то создаем документ прошлого года
	// Если январь-март то позапрошлого, так как по сценарию, скорее всего, они будут заполнять
	// данные за прошлый год или текущий.
	ДокументОбъект.Дата = Дата(2000,1,1);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Кассы.Ссылка КАК БанковскийСчетКасса
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	НЕ Кассы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	НЕ БанковскиеСчета.ПометкаУдаления
	|	И БанковскиеСчета.Владелец = &Организация");
	
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	
	ДокументОбъект.ДенежныеСредства.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции
