////////////////////////////////////////////////////////////////////////////////
// Подсистема "Удаленное администрирование".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕНЫЕ ОБРАБОТЧИКИ.
	СерверныеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов"].Добавить(
			"УдаленноеАдминистрированиеБТССлужебный");
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики["СтандартныеПодсистемы.ЗавершениеРаботыПользователей\ПриЗавершенииСеансов"].Добавить(
		"УдаленноеАдминистрированиеБТСКлиент");
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.0.1");
	СтруктураПоддерживаемыхВерсий.Вставить("ManagedApplication", МассивВерсий);
	
КонецПроцедуры

// Возвращает прокси web-сервиса для синхронизации административных действий в сервисе.
// 
// Возвращаемое значение: 
// WSПрокси.
// Прокси менеджера сервиса.
// 
Функция ПроксиСервисаУправляющегоПриложения(Знач ПарольПользователя = "") Экспорт
	
	ИспользуемаяВерсия = ИспользуемаяВерсияСервисаУправляющегоПриложения(ПарольПользователя);
	
	ПараметрыАвторизации = Новый Структура;
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАвторизации.Вставить("URL", РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(ПарольПользователя) Тогда
		ПараметрыАвторизации.Вставить("UserName", ИмяПользователя());
		ПараметрыАвторизации.Вставить("Password", ПарольПользователя);
	Иначе
		ПараметрыАвторизации.Вставить("UserName", РаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса());
		ПараметрыАвторизации.Вставить("Password", РаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса());
	КонецЕсли;
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL = ПараметрыАвторизации.URL + "/ws/ManageApplication_" + СтрЗаменить(ИспользуемаяВерсия, ".", "_") + "?wsdl";
	ПараметрыПодключения.URIПространстваИмен = "http://www.1c.ru/SaaS/ManageApplication/" + ИспользуемаяВерсия;
	ПараметрыПодключения.ИмяСервиса = "ManageApplication_" + СтрЗаменить(ИспользуемаяВерсия, ".", "_");
	ПараметрыПодключения.ИмяТочкиПодключения = "";
	ПараметрыПодключения.ИмяПользователя = ПараметрыАвторизации.UserName;
	ПараметрыПодключения.Пароль = ПараметрыАвторизации.Password;
	ПараметрыПодключения.Таймаут = 60;
	
	Возврат ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	
КонецФункции

// Возвращает используемую версию сервиса управляющего приложения.
//
// Параметры:
//  ПарольПользователя - Строка, пароль пользователя.
//
// Возвращаемое значение - Строка, максимальная версия сервиса управляющего приложения, которая
//  может быть использована текущей информационной базой.
//
Функция ИспользуемаяВерсияСервисаУправляющегоПриложения(Знач ПарольПользователя = "") Экспорт
	
	ИмяИнтерфейса = "ManageApplication"; // Не локализуется
	ИспользуемаяВерсия = "1.0.3.4";
	
	ПараметрыПодключения = Новый Структура;
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПодключения.Вставить("URL", РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса());
	ПараметрыПодключения.Вставить("UserName", РаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса());
	ПараметрыПодключения.Вставить("Password", РаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса());
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоддерживаемыеВерсии = ОбщегоНазначения.ПолучитьВерсииИнтерфейса(ПараметрыПодключения, ИмяИнтерфейса);
	
	Если ПоддерживаемыеВерсии.Найти(ИспользуемаяВерсия) = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Корреспондент %1 не поддерживает интерфейс %2!'"),
			ПараметрыПодключения.URL,
			ИмяИнтерфейса
		);

	КонецЕсли;
	
	Возврат ИспользуемаяВерсия;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает название интерфейса управляющего приложения.
//
// Возвращаемое значение - Строка - имя интерфейса.
//
Функция ИнтерфейсСервисаУправляющегоПриложения() Экспорт
	
	Возврат "ManageApplication"; // Не локализуется
	
КонецФункции

// Завершает сеанс пользователя области данных.
//
// Параметры:
//  НомераСеансов - Массив - массив номеров сеансов,
//  ПарольПользователя - Строка - пароль текущего пользователя области данных.
//
Процедура ЗавершитьСеансыОбластиДанных(Знач НомераСеансов, Знач ПарольПользователя) Экспорт
	
	ВерсияСервисаУправляющегоПриложения = ИспользуемаяВерсияСервисаУправляющегоПриложения(ПарольПользователя);
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияСервисаУправляющегоПриложения, "1.0.3.3") = 0 Тогда
		
		ИнформацияОбОшибке = Неопределено;
		
		Прокси = ПроксиСервисаУправляющегоПриложения(ПарольПользователя);
		
		УстановитьПривилегированныйРежим(Истина);
		ТекущаяОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
		КлючТекущийОбластиДанных = Константы.КлючОбластиДанных.Получить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Для Каждого НомерСеанса Из НомераСеансов Цикл
			
			Прокси.TerminateSession(
				ТекущаяОбластьДанных,
				КлючТекущийОбластиДанных,
				НомерСеанса,
				ИнформацияОбОшибке
			);
			
			РаботаВМоделиСервиса.ОбработатьИнформациюОбОшибкеWebСервиса(
				ИнформацияОбОшибке,
				Метаданные.Подсистемы.ТехнологияСервиса.Подсистемы.РаботаВМоделиСервиса.Подсистемы.УдаленноеАдминистрированиеВМоделиСервиса,
				ИнтерфейсСервисаУправляющегоПриложения(),
				"TerminateSession");
			
		КонецЦикла;
		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияСервисаУправляющегоПриложения, "1.0.3.4") >= 0 Тогда
		
		ИнформацияОбОшибке = Неопределено;
		
		Прокси = ПроксиСервисаУправляющегоПриложения(ПарольПользователя);
		
		УстановитьПривилегированныйРежим(Истина);
		ТекущаяОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
		КлючТекущийОбластиДанных = Константы.КлючОбластиДанных.Получить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ИнформацияОНомерахСеанса = ПривестиНомераСеансов(НомераСеансов, Прокси.ФабрикаXDTO);
		
		Прокси.TerminateSessions(
			ТекущаяОбластьДанных,
			КлючТекущийОбластиДанных,
			ИнформацияОНомерахСеанса,
			ИнформацияОбОшибке
		);
		
		РаботаВМоделиСервиса.ОбработатьИнформациюОбОшибкеWebСервиса(
			ИнформацияОбОшибке,
			Метаданные.Подсистемы.ТехнологияСервиса.Подсистемы.РаботаВМоделиСервиса.Подсистемы.УдаленноеАдминистрированиеВМоделиСервиса,
			ИнтерфейсСервисаУправляющегоПриложения(),
			"TerminateSessions");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Текущая версия управляющего приложения не поддерживает завершение сеанса из приложений. Необходимо обновить управляющее приложение.'");
		
	КонецЕсли;
	
КонецПроцедуры

// Отправляет запросы на использование внешних ресурсов (для информационной базы) в менеджер сервиса.
//
// Параметры:
//  СериализацияЗапросов - ОбъектXDTO {http://www.1c.ru/1cFresh/Application/Permissions/Management/a.b.c.d}PermissionsRequestsList.
//
Процедура ОтправитьЗапросыНаИспользованиеВнешнихРесурсов(Знач СериализацияЗапросов) Экспорт
	
	ВерсияСервисаУправляющегоПриложения = ИспользуемаяВерсияСервисаУправляющегоПриложения();
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияСервисаУправляющегоПриложения, "1.0.3.3") >= 0 Тогда
		
		ИнформацияОбОшибке = Неопределено;
		
		Прокси = ПроксиСервисаУправляющегоПриложения();
		
		Прокси.ProcessInfoBasePermissionsRequests(
			СериализацияЗапросов,
			ИнформацияОбОшибке
		);
		
		РаботаВМоделиСервиса.ОбработатьИнформациюОбОшибкеWebСервиса(
			ИнформацияОбОшибке,
			Метаданные.Подсистемы.ТехнологияСервиса.Подсистемы.РаботаВМоделиСервиса.Подсистемы.УдаленноеАдминистрированиеВМоделиСервиса,
			ИнтерфейсСервисаУправляющегоПриложения(),
			"TerminateSession");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Текущая версия управляющего приложения не поддерживает запросы разрешений на использование внешних ресурсов. Необходимо обновить управляющее приложение.'");
		
	КонецЕсли;
	
КонецПроцедуры

// Отправляет запросы на использование внешних ресурсов (для области данных) в менеджер сервиса.
//
// Параметры:
//  ПарольПользователя - Строка - пароль текущего пользователя системы,
//  СериализацияЗапросов - ОбъектXDTO {http://www.1c.ru/1cFresh/Application/Permissions/Management/a.b.c.d}PermissionsRequestsList.
//
Процедура ОтправитьЗапросыНаИспользованиеВнешнихРесурсовОбластиДанных(Знач СериализацияЗапросов, ПарольПользователя) Экспорт
	
	ВерсияСервисаУправляющегоПриложения = ИспользуемаяВерсияСервисаУправляющегоПриложения(ПарольПользователя);
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияСервисаУправляющегоПриложения, "1.0.3.3") >= 0 Тогда
		
		ИнформацияОбОшибке = Неопределено;
		
		Прокси = ПроксиСервисаУправляющегоПриложения(ПарольПользователя);
		
		Прокси.ProcessZonePermissionsRequests(
			ОбщегоНазначения.ЗначениеРазделителяСеанса(),
			Константы.КлючОбластиДанных.Получить(),
			СериализацияЗапросов,
			ИнформацияОбОшибке
		);
		
		РаботаВМоделиСервиса.ОбработатьИнформациюОбОшибкеWebСервиса(
			ИнформацияОбОшибке,
			Метаданные.Подсистемы.ТехнологияСервиса.Подсистемы.РаботаВМоделиСервиса.Подсистемы.УдаленноеАдминистрированиеВМоделиСервиса,
			ИнтерфейсСервисаУправляющегоПриложения(),
			"TerminateSession");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Текущая версия управляющего приложения не поддерживает запросы разрешений на использование внешних ресурсов. Необходимо обновить управляющее приложение.'");
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет принадлежность сеанса текущей области данных.
//
// Параметры:
//  НомерСеанса - Число, номер сеанса, принадлежность которого проверяется.
//
// Возвращаемое значение - Булево, признак принадлежности сеанса текущей
//  области данных.
//
Функция ПроверитьПринадлежностьСеансаТекущейОбластиДанных(Знач НомерСеанса) Экспорт
	
	СеансыОбласти = ПолучитьСеансыИнформационнойБазы();
	Для Каждого СеансОбласти Из СеансыОбласти Цикл
		Если СеансОбласти.НомерСеанса = НомерСеанса Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Приводит массив номеров сеансов к ОбъектуXDTO.
//
// Параметры:
//  НомераСеансов - Массив, массив номеров сеансов.
//  Фабрика - ФабрикаXDTO, фабрика XDTO.
//
// Возвращаемое значение:
//  ОбъектXDTO - список номеров сеансов.
//
Функция ПривестиНомераСеансов(Знач НомераСеансов, Знач Фабрика) Экспорт
	
	ТипСпискаНомеровСеансов = Фабрика.Тип("http://www.1c.ru/1cFresh/ManageApplication/1.0.3.4", "SessionNumberList");
	СписокНомеровСеансов = Фабрика.Создать(ТипСпискаНомеровСеансов);
	
	Для Каждого НомерСеанса Из НомераСеансов Цикл
		СписокНомеровСеансов.SessionNumbers.Добавить(НомерСеанса);
	КонецЦикла;
	
	Возврат СписокНомеровСеансов;
	
КонецФункции

#КонецОбласти