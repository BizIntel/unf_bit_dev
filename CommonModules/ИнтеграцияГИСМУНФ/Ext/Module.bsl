#Область ПрограммныйИнтерфейс

Функция ПредставлениеОбъекта(ПараметрОбъект) Экспорт
	
	Если ПараметрОбъект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	МетаданныеОбъекта = ?(ТипЗнч(ПараметрОбъект) = Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ПараметрОбъект), ПараметрОбъект);
	
	Представление = Новый Структура("ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(Представление, МетаданныеОбъекта);
	Если Не ПустаяСтрока(Представление.ПредставлениеОбъекта) Тогда
		Возврат Представление.ПредставлениеОбъекта;
	КонецЕсли;
	
	Возврат МетаданныеОбъекта.Представление();
КонецФункции

Функция ИННКПППоКонтрагенту(Контрагент) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ИНН, КПП");
	
КонецФункции

Функция КонтрагентПоИННКПП(ИНН, КПП) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И (Контрагенты.ВидКонтрагента = &ВидКонтрагента
	|			ИЛИ Контрагенты.КПП = &КПП)");
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("ВидКонтрагента", Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьКорректностьПерсонифицованностиЗаказываемыхКиЗ(Объект, ИмяТабличнойЧасти, Отказ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказанныеКиЗ.Номенклатура,
	|	ЗаказанныеКиЗ.Характеристика
	|ПОМЕСТИТЬ ЗаказанныеКиЗ
	|ИЗ
	|	&ЗаказанныеКиЗ КАК ЗаказанныеКиЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ХарактеристикиНоменклатуры.КиЗГИСМGTIN, СправочникНоменклатура.КиЗГИСМGTIN) = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Персонифицирован
	|ИЗ
	|	ЗаказанныеКиЗ КАК ЗаказанныеКиЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ЗаказанныеКиЗ.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ЗаказанныеКиЗ.Номенклатура = СправочникНоменклатура.Ссылка";
	
	ЗаказанныеКиЗ = Объект[ИмяТабличнойЧасти].Выгрузить(, "Номенклатура, Характеристика");
	Запрос.УстановитьПараметр("ЗаказанныеКиЗ", ЗаказанныеКиЗ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 1 Тогда
		
		ТекстОшибки = НСтр("ru='Нельзя заказывать в одном документе персонифицированные и неперсонифицированные КиЗ.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,ИмяТабличнойЧасти
				,"Объект"
				,
				Отказ);
		
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьСтатусЗаявкиНаВыпускКиЗ(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		РассчитатьСтатусЗаявкиНаВыпускКиЗПоЗаказуПоставщику(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаВыпускКиЗГИСМ") Тогда
		
		РассчитатьСтатусЗаявкиНаВыпускКиЗПоЗаявкеНаВыпускКиЗ(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтатусЗаявкиНаВыпускКиЗПоЗаказуПоставщику(Источник) 
	
	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статусы.Документ,
	|	Статусы.ТекущаяЗаявкаНаВыпускКиЗ,
	|	Статусы.СтатусЗаявкиНаВыпускКиЗ,
	|	Статусы.СтатусОбработкиЭмитентом,
	|	Статусы.ДальнейшееДействие,
	|	Статусы.ПоступлениеТоваров,
	|	Статусы.КоличествоПоступленийТоваров,
	|	Статусы.СтатусПоступления
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК Статусы
	|ГДЕ
	|	Статусы.Документ = &ЗаказПоставщику
	|");
	
	Запрос.УстановитьПараметр("ЗаказПоставщику", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если (Не Источник.Проведен Или Не Источник.ЕстьКиЗГИСМ)
			И Не ЗначениеЗаполнено(Выборка.ТекущаяЗаявкаНаВыпускКиЗ) Тогда
			РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.УдалитьЗаписьИзРегистра(Источник.Ссылка);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли  Источник.ЕстьКиЗГИСМ Тогда
		
		ВыполнятьЗаписьВРегистр = Истина;
		
		ДанныеЗаписи.Документ                   = Источник.Ссылка;
		ДанныеЗаписи.ДальнейшееДействие         = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
		ДанныеЗаписи.СтатусЗаявкиНаВыпускКиЗ = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.Отсутствует;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтатусЗаявкиНаВыпускКиЗПоЗаявкеНаВыпускКиЗ(Источник)
	
	ЗаписьНового = Источник.ДополнительныеСвойства.Свойство("ЗаписьНового")
	             И Источник.ДополнительныеСвойства.ЗаписьНового;
	
	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статусы.Документ,
	|	Статусы.ТекущаяЗаявкаНаВыпускКиЗ,
	|	Статусы.СтатусЗаявкиНаВыпускКиЗ,
	|	Статусы.СтатусОбработкиЭмитентом,
	|	Статусы.ДальнейшееДействие,
	|	Статусы.ПоступлениеТоваров,
	|	Статусы.КоличествоПоступленийТоваров,
	|	Статусы.СтатусПоступления
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК Статусы
	|ГДЕ
	|	    Статусы.Документ = &Основание
	|	ИЛИ Статусы.Документ = &Заявка");
	
	Запрос.УстановитьПараметр("Основание", Источник.Основание);
	Запрос.УстановитьПараметр("Заявка", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ЗаписьНового Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.ТекущаяЗаявкаНаВыпускКиЗ) 
				Или РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ЭтоСтатусНеАктуальнойЗаявки(Выборка.СтатусЗаявкиНаВыпускКиЗ)  Тогда
				
				ВыполнятьЗаписьВРегистр = Истина;
				
				ДанныеЗаписи.Документ                 = Выборка.Документ;
				ДанныеЗаписи.ТекущаяЗаявкаНаВыпускКиЗ = Источник.Ссылка;
				ДанныеЗаписи.СтатусЗаявкиНаВыпускКиЗ  = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.Черновик;
				ДанныеЗаписи.ДальнейшееДействие       = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаписи, Выборка);
			
			Регистр = РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ;
			Если Регистр.СтатусТребуетРасчетаПоступления(ДанныеЗаписи.СтатусЗаявкиНаВыпускКиЗ,
				                                         ДанныеЗаписи.СтатусОбработкиЭмитентом) Тогда
				
				ВыполнятьЗаписьВРегистр = Истина;
				РассчитатьСтатусПоступленияПоДокументу(Источник, ДанныеЗаписи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗаписьНового Тогда
			
			ВыполнятьЗаписьВРегистр = Истина;
			
			ДанныеЗаписи.Документ                    = Источник.Ссылка;
			ДанныеЗаписи.ТекущаяЗаявкаНаВыпускКиЗ = Источник.Ссылка;
			ДанныеЗаписи.СтатусЗаявкиНаВыпускКиЗ  = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.Черновик;
			ДанныеЗаписи.ДальнейшееДействие          = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтатусПоступленияПоДокументу(Источник, ДанныеЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаВыпускКиЗГИСМ") Тогда
		
		ДокументСсылка      = ДанныеЗаписи.ТекущаяЗаявкаНаВыпускКиЗ;
		ЗначенияПоУмолчанию = РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ЗначенияПоУмолчанию();
		
		Текст = 
		"ВЫБРАТЬ
		|	НомераКиЗ.НомерКиЗ               КАК НомерКиЗ,
		|	НомераКиЗ.СостояниеПодтверждения КАК СостояниеПодтверждения,
		|	НомераКиЗ.ДокументПоступления    КАК ДокументПоступления
		|ПОМЕСТИТЬ НомераКиЗ
		|ИЗ
		|	Документ.ЗаявкаНаВыпускКиЗГИСМ.ВыпущенныеКиЗ КАК НомераКиЗ
		|ГДЕ
		|	НомераКиЗ.Ссылка = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОПоступленииМаркированныхТоваровГИСМ") Тогда
		
		ДокументСсылка      = ДанныеЗаписи.Документ;
		ЗначенияПоУмолчанию = РегистрыСведений.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ.ЗначенияПоУмолчанию();
		
		Текст = 
		"ВЫБРАТЬ
		|	НомераКиЗ.НомерКиЗ               КАК НомерКиЗ,
		|	НомераКиЗ.СостояниеПодтверждения КАК СостояниеПодтверждения,
		|	НомераКиЗ.ДокументПоступления    КАК ДокументПоступления
		|ПОМЕСТИТЬ НомераКиЗ
		|ИЗ
		|	Документ.УведомлениеОПоступленииМаркированныхТоваровГИСМ.НомераКиЗ КАК НомераКиЗ
		|ГДЕ
		|	НомераКиЗ.Ссылка = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		ДанныеЗаписи,
		ЗначенияПоУмолчанию,
		"ПоступлениеТоваров, КоличествоПоступленийТоваров, СтатусПоступления, КПередачеПодтверждения, ПроцентПодтвержденныхКиЗ");
	
	Подтверждено = 0;
	КПередаче    = 0;
	Передано     = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = Текст +
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НомераКиЗ.НомерКиЗ) КАК ВсегоСтрок,
	|	СУММА(ВЫБОР
	|			КОГДА НомераКиЗ.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Поступило,
	|	СУММА(ВЫБОР
	|			КОГДА НомераКиЗ.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ПринятоГИСМ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Подтверждено,
	|	СУММА(ВЫБОР
	|			КОГДА НомераКиЗ.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.КПередаче))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КПередаче,
	|	СУММА(ВЫБОР
	|			КОГДА НомераКиЗ.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.Передано))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Передано
	|ИЗ
	|	НомераКиЗ КАК НомераКиЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераКиЗ.ДокументПоступления
	|ИЗ
	|	НомераКиЗ КАК НомераКиЗ
	|ГДЕ
	|	Не НомераКиЗ.ДокументПоступления В (&МассивПустыхЗначенийДокументовПоступления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	НомераКиЗ.НомерКиЗ
	|ПОМЕСТИТЬ НеподтвержденныеКиЗ
	|ИЗ
	|	НомераКиЗ КАК НомераКиЗ
	|ГДЕ
	|	НомераКиЗ.СостояниеПодтверждения В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.Подтвердить),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ОжидаетсяПоступление),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ВыбратьПоступление),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ОтклоненоГИСМ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	ДвиженияСерийТоваров.Регистратор КАК ДокументПоступления,
	|	СерииНоменклатуры.НомерКиЗГИСМ КАК НомерКиЗ
	|ПОМЕСТИТЬ ВсеДокументыПоступленияПоКиЗ
	|ИЗ
	|	РегистрНакопления.СерийныеНомера КАК ДвиженияСерийТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК СерииНоменклатуры
	|		ПО ДвиженияСерийТоваров.СерийныйНомер = СерииНоменклатуры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
	|		ПО ДвиженияСерийТоваров.Регистратор = ПоступлениеТоваровУслуг.Ссылка
	|		                     И &Организация = ПоступлениеТоваровУслуг.Организация
	|		                      И &Контрагент = ПоступлениеТоваровУслуг.Контрагент
	|ГДЕ
	|	СерииНоменклатуры.НомерКиЗГИСМ В
	|			(ВЫБРАТЬ
	|				НеподтвержденныеКиЗ.НомерКиЗ
	|			ИЗ
	|				НеподтвержденныеКиЗ КАК НеподтвержденныеКиЗ)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	НомераКиЗ.НомерКиЗ,
	|	НомераКиЗ.ДокументПоступления
	|ПОМЕСТИТЬ РанееСопоставленныеПоступления
	|ИЗ
	|	НомераКиЗ КАК НомераКиЗ
	|ГДЕ
	|	НомераКиЗ.ДокументПоступления НЕ В (
	|		ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка),
	|		Неопределено)
	|	И НомераКиЗ.НомерКиЗ В
	|			(ВЫБРАТЬ
	|				НеподтвержденныеКиЗ.НомерКиЗ
	|			ИЗ
	|				НеподтвержденныеКиЗ КАК НеподтвержденныеКиЗ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	ВсеДокументыПоступленияПоКиЗ.ДокументПоступления,
	|	ВсеДокументыПоступленияПоКиЗ.НомерКиЗ
	|ПОМЕСТИТЬ ДокументыПоступленияКандидаты
	|ИЗ
	|	ВсеДокументыПоступленияПоКиЗ КАК ВсеДокументыПоступленияПоКиЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РанееСопоставленныеПоступления КАК РанееСопоставленныеПоступления
	|		ПО ВсеДокументыПоступленияПоКиЗ.НомерКиЗ = РанееСопоставленныеПоступления.НомерКиЗ
	|			И ВсеДокументыПоступленияПоКиЗ.ДокументПоступления = РанееСопоставленныеПоступления.ДокументПоступления
	|ГДЕ
	|	РанееСопоставленныеПоступления.ДокументПоступления ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////6
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НеподтвержденныеКиЗ.НомерКиЗ КАК НомерКиЗ
	|ИЗ
	|	НеподтвержденныеКиЗ КАК НеподтвержденныеКиЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоступленияКандидаты КАК ДокументыПоступленияКандидаты
	|		ПО НеподтвержденныеКиЗ.НомерКиЗ = ДокументыПоступленияКандидаты.НомерКиЗ";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Организация",    Источник.Организация);
	Запрос.УстановитьПараметр("Контрагент",     Источник.Контрагент);
	Запрос.УстановитьПараметр("МассивПустыхЗначенийДокументовПоступления", ИнтеграцияГИСМ.МассивПустыхЗначенийДокументовПоступленияМаркированнойПродукции());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоступилоПодтверждено = Результат[1].Выбрать();
	
	Если ВыборкаПоступилоПодтверждено.Следующий() Тогда
		
		ВсегоСтрок   = ВыборкаПоступилоПодтверждено.ВсегоСтрок;
		Поступило    = ?(ВыборкаПоступилоПодтверждено.Поступило = NULL, 0, ВыборкаПоступилоПодтверждено.Поступило);
		Подтверждено = ?(ВыборкаПоступилоПодтверждено.Подтверждено = NULL, 0, ВыборкаПоступилоПодтверждено.Подтверждено);
		КПередаче    = ?(ВыборкаПоступилоПодтверждено.КПередаче = NULL, 0, ВыборкаПоступилоПодтверждено.КПередаче);
		Передано     = ?(ВыборкаПоступилоПодтверждено.Передано = NULL, 0, ВыборкаПоступилоПодтверждено.Передано);
		
		Если ВсегоСтрок <> 0 Тогда
		
			Если Поступило = ВсегоСтрок Тогда
				ДанныеЗаписи.СтатусПоступления = Перечисления.СтатусыПоступленийГИСМ.Поступило;
			ИначеЕсли Поступило > 0 Тогда
				ДанныеЗаписи.СтатусПоступления = Перечисления.СтатусыПоступленийГИСМ.ПоступилоЧастично;
			Иначе
				ДанныеЗаписи.СтатусПоступления = Перечисления.СтатусыПоступленийГИСМ.ОжидаетсяПоступление;
			КонецЕсли;
			
			ДанныеЗаписи.ПроцентПодтвержденныхКиЗ = Окр(Подтверждено / ВсегоСтрок, 2) * 100;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыборкаДокументыПоступления = Результат[2].Выбрать();
	
	КоличествоДокументовПоступления = ВыборкаДокументыПоступления.Количество();
	Если ВыборкаДокументыПоступления.Количество() = 1 Тогда
		Если ВыборкаДокументыПоступления.Следующий() Тогда
			ДанныеЗаписи.ПоступлениеТоваров = ВыборкаДокументыПоступления.ДокументПоступления;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаписи.КоличествоПоступленийТоваров = КоличествоДокументовПоступления;
	
	ВыборкаДокументыЕстьЧтоПодтверждать = Результат[7].Выбрать();
	Если ВыборкаДокументыЕстьЧтоПодтверждать.Следующий() Тогда
		
		ДанныеЗаписи.КПередачеПодтверждения  = Истина;
		ДанныеЗаписи.ДальнейшееДействие      = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПодтвердитеПолучение;
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаНаВыпускКиЗГИСМ") Тогда
			ДанныеЗаписи.СтатусЗаявкиНаВыпускКиЗ = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОбрабатываетсяПоступление;
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОПоступленииМаркированныхТоваровГИСМ") Тогда
			ДанныеЗаписи.Статус = Перечисления.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ.ОбрабатываетсяПоступление;
		КонецЕсли;
		
	Иначе
		
		ДанныеЗаписи.КПередачеПодтверждения = Ложь;
		
		Если КПередаче > 0 Тогда
			
			ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПодтвердитеПолучение;
			
		ИначеЕсли Передано > 0 Тогда
			
			ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации;
			
		Иначе
			
			Если Подтверждено = ВсегоСтрок И Подтверждено > 0 Тогда
				ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ЗакройтеЗаявку;
			Иначе
				ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПоступлениеТоваров;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// См. описание процедуры ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусУведомленияОПоступлении
//
Процедура РассчитатьСтатусУведомленияОПоступлении(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОПоступленииМаркированныхТоваровГИСМ") Тогда
		
		РассчитатьСтатусУведомленияОПоступленииПоУведомлениюОПоступлении(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусУведомленияОПоступленииПоУведомлениюОПоступлении
//
Процедура РассчитатьСтатусУведомленияОПоступленииПоУведомлениюОПоступлении(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = Источник.ДополнительныеСвойства.Свойство("ЗаписьНового")
	             И Источник.ДополнительныеСвойства.ЗаписьНового;
	
	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статусы.Документ,
	|	Статусы.Статус,
	|	Статусы.ДальнейшееДействие,
	|	Статусы.ПоступлениеТоваров,
	|	Статусы.КоличествоПоступленийТоваров,
	|	Статусы.СтатусПоступления
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ КАК Статусы
	|ГДЕ
	|	Статусы.Документ = &УведомлениеОПоступлении");
	
	Запрос.УстановитьПараметр("УведомлениеОПоступлении", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаписи, Выборка);
		
		Регистр = РегистрыСведений.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ;
		Если Регистр.СтатусТребуетРасчетаПоступления(ДанныеЗаписи.Статус) Тогда
			
			ВыполнятьЗаписьВРегистр = Истина;
			РассчитатьСтатусПоступленияПоДокументу(Источник, ДанныеЗаписи);
			
		КонецЕсли;
		
	Иначе
		
		Если ЗаписьНового Тогда
			
			ВыполнятьЗаписьВРегистр = Истина;
			
			ДанныеЗаписи.Документ           = Источник.Ссылка;
			ДанныеЗаписи.Статус             = Перечисления.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ.Получено;
			ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПоступлениеТоваров;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры


// См. описание процедуры ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусУведомленияОбОтгрузке
//
Процедура РассчитатьСтатусУведомленияОбОтгрузке(Источник, Отказ) Экспорт
	
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		
		РассчитатьСтатусУведомленияОбОтгрузкеПоРеализацииТоваровУслуг(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ") Тогда
		
		РассчитатьСтатусУведомленияОбОтгрузкеПоУведомлениюОбОтгрузке(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусУведомленияОбОтгрузкеПоРеализацииТоваровУслуг
//
Процедура РассчитатьСтатусУведомленияОбОтгрузкеПоРеализацииТоваровУслуг(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статусы.Документ,
	|	Статусы.ТекущееУведомлениеОбОтгрузке,
	|	Статусы.Статус,
	|	Статусы.ДальнейшееДействие
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК Статусы
	|ГДЕ
	|	Статусы.Документ = &Реализация
	|");
	
	Запрос.УстановитьПараметр("Реализация", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если (Не Источник.Проведен Или Не Источник.ЕстьМаркируемаяПродукцияГИСМ)
			И Не ЗначениеЗаполнено(Выборка.ТекущееУведомлениеОбОтгрузке) Тогда
			РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.УдалитьЗаписьИзРегистра(Источник.Ссылка);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Источник.ЕстьМаркируемаяПродукцияГИСМ Тогда
		
		ВыполнятьЗаписьВРегистр = Истина;
		
		ДанныеЗаписи.Документ           = Источник.Ссылка;
		ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
		ДанныеЗаписи.Статус             = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Отсутствует;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусУведомленияОбОтгрузкеПоУведомлениюОбОтгрузке
//
Процедура РассчитатьСтатусУведомленияОбОтгрузкеПоУведомлениюОбОтгрузке(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = Источник.ДополнительныеСвойства.Свойство("ЗаписьНового")
	             И Источник.ДополнительныеСвойства.ЗаписьНового;
	
	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статусы.Документ,
	|	Статусы.ТекущееУведомлениеОбОтгрузке,
	|	Статусы.Статус,
	|	Статусы.ДальнейшееДействие
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК Статусы
	|ГДЕ
	|	    Статусы.Документ = &Основание
	|	ИЛИ Статусы.Документ = &Уведомление");
	
	Запрос.УстановитьПараметр("Основание", Источник.Основание);
	Запрос.УстановитьПараметр("Уведомление", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ЗаписьНового Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.ТекущееУведомлениеОбОтгрузке) Тогда
				
				ВыполнятьЗаписьВРегистр = Истина;
				
			ИначеЕсли РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ЭтоСтатусНеАктуальногоУведомления(Выборка.Статус) Тогда
				
				ВыполнятьЗаписьВРегистр = Истина;
				
			КонецЕсли;
			
			ДанныеЗаписи.Документ                     = Выборка.Документ;
			ДанныеЗаписи.ТекущееУведомлениеОбОтгрузке = Источник.Ссылка;
			ДанныеЗаписи.Статус                       = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Черновик;
			ДанныеЗаписи.ДальнейшееДействие           = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗаписьНового Тогда
			
			ВыполнятьЗаписьВРегистр = Истина;
			
			ДанныеЗаписи.Документ                     = Источник.Основание;
			ДанныеЗаписи.ТекущееУведомлениеОбОтгрузке = Источник.Ссылка;
			ДанныеЗаписи.Статус                       = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Черновик;
			ДанныеЗаписи.ДальнейшееДействие           = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры



Функция ВалютаРегламентированногоУчета() Экспорт
	
	Возврат Константы.ВалютаУчета.Получить();
	
КонецФункции

Функция ЭтоГИСМНоменклатура(Номенклатура) Экспорт
	
	ВидМаркировки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидМаркировки");
	
	Если ЗначениеЗаполнено(ВидМаркировки)
		И ВидМаркировки <> Перечисления.ВидыМаркировки.НеМаркируется Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Рассчитывает GTIN, записываемый эмитентом в КиЗ ГИСМ
//
// Параметры:
//  Номенклатура	 - СправочникСсылка.Номенклатура 
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры
// 
// Возвращаемое значение:
// 		Строка 
//
Функция GTINКиЗ(Номенклатура, Характеристика) Экспорт
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика ,"КиЗГИСМGTIN");
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат "";
	Иначе
		
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "КиЗГИСМGTIN,ИспользоватьХарактеристики");
		
		Если РеквизитыНоменклатуры.ИспользоватьХарактеристики Тогда
			ТекстИсключения = НСтр("ru = 'Невозможно определить GTIN КиЗ, т.к. не передана характеристика.'");
			ВызватьИсключение ТекстИсключения;
		Иначе
			Возврат РеквизитыНоменклатуры.КиЗГИСМGTIN;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция РассчитатьВидИмпорта(Контрагент) Экспорт
	
	КодСтраныПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СтранаРегистрации.Код");
	
	// если поставщик Россия, то это не импортная поставка
	Если ПустаяСтрока(КодСтраныПоставщика) ИЛИ КодСтраныПоставщика = "643" Тогда
		Возврат "НеИмпорт";
	КонецЕсли;
	
	// если код страны поставщика не из страны ЕАЭС (Белоруссия, Казахстан, Россия, Армения, Киргизия),
	// то оформляем поступление по общему импорту
	Если СтрНайти("112;398;051;417",КодСтраныПоставщика) = 0 Тогда
		Возврат "ПоступлениеПоИмпорту";
	Иначе
		Возврат "ПоступлениеИзЕАЭС";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

#Область ЗаявкаНаВыпускКиЗГИСМ

Функция ТекстЗапросаЗаявкиНаВыпускКиЗГИСМ() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыЗаявокНаВыпускКиЗГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК СтатусыЗаявокНаВыпускКиЗГИСМ
	|ГДЕ
	|	(СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаЭмитентом),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаГИСМ),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ПустаяСсылка))

	|	И (СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО))
	|	ИЛИ
	|	(СтатусыЗаявокНаВыпускКиЗГИСМ.ДальнейшееДействие В (
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПолучитеСчетНаОплату),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОплатитеСчет),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПодтвердитеПолучение),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ЗакройтеЗаявку),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.Аннулируйте)
	|	)
	|	И (СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО))
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаявкиНаВыпускКиЗГИСМОформите() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыЗаявокНаВыпускКиЗГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК СтатусыЗаявокНаВыпускКиЗГИСМ
	|ГДЕ
	|	НЕ СтатусыЗаявокНаВыпускКиЗГИСМ.Документ ССЫЛКА Документ.ЗаявкаНаВыпускКиЗГИСМ
	|	И (СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаЭмитентом),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаГИСМ),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ПустаяСсылка)
	|	))
	|	И (СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует массив пустых ссылок документов, являющихся документами поступления маркированной продукции и Неопределено.
// 
// Возвращаемое значение:
//  Массив - сформированный массив.
//
Функция МассивПустыхЗначенийДокументовПоступленияМаркированнойПродукции() Экспорт
	
	МассивПустыхЗначений = Новый Массив;
	МассивПустыхЗначений.Добавить(Неопределено);
	Для Каждого ТипыДокументаПоступления Из Метаданные.ОпределяемыеТипы.ДокументПоступленияМаркированныхТоваровГИСМ.Тип.Типы() Цикл
		МассивПустыхЗначений.Добавить(Документы[Метаданные.НайтиПоТипу(ТипыДокументаПоступления).Имя].ПустаяСсылка());
	КонецЦикла;
	
	Возврат МассивПустыхЗначений;
	
КонецФункции

#КонецОбласти


#Область ЗапросыДинамическихСписковРаспоряжений

Функция ТекстЗапросаДинамическогоСпискаРаспоряженийУведомлениеОбИмпорте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыИнформированияГИСМ.Документ КАК Документ,
	|	СтатусыИнформированияГИСМ.ТекущееУведомление КАК ТекущееУведомление,
	|	ВЫБОР
	|		КОГДА СтатусыИнформированияГИСМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует)
	|		ИНАЧЕ СтатусыИнформированияГИСМ.Статус
	|	КОНЕЦ КАК СтатусГИСМУведомленияКОформлению,
	|	СтатусыИнформированияГИСМ.Документ.Дата КАК Дата,
	|	СтатусыИнформированияГИСМ.Документ.Номер КАК Номер,
	|	СтатусыИнформированияГИСМ.Документ.Организация КАК Организация,
	|	ИСТИНА КАК Картинка
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ПриходнаяНакладная
	|	И СтатусыИнформированияГИСМ.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И СтатусыИнформированияГИСМ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует), ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ОтклоненоГИСМ))
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДинамическогоСпискаРаспоряженийУведомлениеОВвозеИзЕАЭС() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыИнформированияГИСМ.Документ КАК Документ,
	|	СтатусыИнформированияГИСМ.ТекущееУведомление КАК ТекущееУведомление,
	|	ВЫБОР
	|		КОГДА СтатусыИнформированияГИСМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует)
	|		ИНАЧЕ СтатусыИнформированияГИСМ.Статус
	|	КОНЕЦ КАК СтатусГИСМУведомленияКОформлению,
	|	СтатусыИнформированияГИСМ.Документ.Дата КАК Дата,
	|	СтатусыИнформированияГИСМ.Документ.Номер КАК Номер,
	|	СтатусыИнформированияГИСМ.Документ.Организация КАК Организация,
	|	СтатусыИнформированияГИСМ.Документ.Контрагент КАК Контрагент,
	|	ИСТИНА КАК Картинка
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ПриходнаяНакладная
	|	И СтатусыИнформированияГИСМ.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И СтатусыИнформированияГИСМ.Статус В
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ОтклоненоГИСМ))
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДинамическогоСпискаРаспоряженийУведомлениеОСписании() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыИнформированияГИСМ.Документ КАК Документ,
	|	СтатусыИнформированияГИСМ.ТекущееУведомление КАК ТекущееУведомление,
	|	ВЫБОР
	|		КОГДА СтатусыИнформированияГИСМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует)
	|		ИНАЧЕ СтатусыИнформированияГИСМ.Статус
	|	КОНЕЦ КАК СтатусГИСМКОформлению,
	|	СтатусыИнформированияГИСМ.Документ.Дата КАК Дата,
	|	СтатусыИнформированияГИСМ.Документ.Номер КАК Номер,
	|	СтатусыИнформированияГИСМ.Документ.Организация КАК Организация,
	|	ИСТИНА КАК Картинка
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.СписаниеЗапасов
	|	И СтатусыИнформированияГИСМ.Статус В
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ОтклоненоГИСМ))
	|	И НЕ СтатусыИнформированияГИСМ.Документ.Ссылка ЕСТЬ NULL 
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДинамическогоСпискаРаспоряженийУведомлениеОбОтгрузке() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Дата КАК ДатаУведомления,
	|	УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.НомерГИСМ КАК НомерГИСМ,
	|	УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Контрагент КАК Контрагент,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ КАК Документ,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ.Организация КАК Организация,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке КАК ТекущееУведомлениеОбОтгрузке,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Статус КАК СтатусГИСМУведомленияКОформлению,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ.Дата КАК Дата,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ.Номер КАК Номер,
	|	ИСТИНА КАК Картинка
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ КАК УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ
	|		ПО СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке = УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Ссылка
	|ГДЕ
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Статус В 
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоКлиентом),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоГИСМ),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ПустаяСсылка))
	|	И НЕ СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ.Ссылка ЕСТЬ NULL 
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДинамическогоСпискаРаспоряженийЗаявкаНаВыпускКиЗ() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ,
	|	ВЫБОР
	|		КОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ПустаяСсылка)
	|			ТОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.Отсутствует)
	|	КОНЕЦ КАК СтатусГИСМКОформлению,
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.ПометкаУдаления КАК ПометкаУдаления,
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Проведен КАК Проведен,
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Организация КАК Организация,
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Контрагент КАК Контрагент,
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Ссылка КАК Ссылка,
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Ответственный КАК Ответственный,
	|	ИСТИНА КАК Картинка
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК СтатусыЗаявокНаВыпускКиЗГИСМ
	|ГДЕ
	|	(СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВыпускКиЗГИСМ.ПустаяСсылка)
	|			ИЛИ НЕ СтатусыЗаявокНаВыпускКиЗГИСМ.Документ ССЫЛКА Документ.ЗаявкаНаВыпускКиЗГИСМ
	|				И СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаГИСМ), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаЭмитентом)))
	|	И НЕ СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Ссылка ЕСТЬ NULL 
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти


#КонецОбласти

#Область РассчетСтатусовДокументов

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусИнформированияГИСМДляДокументаРаспоряжения
//
Процедура РассчитатьСтатусИнформированияГИСМДляДокументаРаспоряжения(Источник, ЗаписьТребуется) Экспорт

	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыИнформированияГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыИнформированияГИСМ.Документ,
	|	СтатусыИнформированияГИСМ.ТекущееУведомление,
	|	СтатусыИнформированияГИСМ.Статус,
	|	СтатусыИнформированияГИСМ.ДальнейшееДействие
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ = &Основание";
	
	Запрос.УстановитьПараметр("Основание", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если (Не Источник.Проведен Или Не ЗаписьТребуется)
			И Не ЗначениеЗаполнено(Выборка.ТекущееУведомление) Тогда
			
			РегистрыСведений.СтатусыИнформированияГИСМ.УдалитьЗаписьИзРегистра(Источник.Ссылка);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Источник.Проведен И ЗаписьТребуется Тогда
		
		ВыполнятьЗаписьВРегистр = Истина;
		
		ДанныеЗаписи.Документ            = Источник.Ссылка;
		ДанныеЗаписи.ДальнейшееДействие  = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
		ДанныеЗаписи.Статус              = Перечисления.СтатусыИнформированияГИСМ.Отсутствует;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыИнформированияГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусИнформированияГИСМДляДокументаСРаспоряжением
//
Процедура РассчитатьСтатусИнформированияГИСМДляДокументаСРаспоряжением(Источник) Экспорт

	ЗаписьНового = Источник.ДополнительныеСвойства.Свойство("ЗаписьНового")
	             И Источник.ДополнительныеСвойства.ЗаписьНового;
	
	Если Не ЗаписьНового Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыИнформированияГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыИнформированияГИСМ.Документ,
	|	СтатусыИнформированияГИСМ.ТекущееУведомление,
	|	СтатусыИнформированияГИСМ.Статус,
	|	СтатусыИнформированияГИСМ.ДальнейшееДействие
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Источник.Основание);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ВыполнятьЗаписьВРегистр         = Истина;
		ДанныеЗаписи.Документ           = Выборка.Документ;
		ДанныеЗаписи.ТекущееУведомление = Источник.Ссылка;
		ДанныеЗаписи.Статус             = Перечисления.СтатусыИнформированияГИСМ.Черновик;
		ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыИнформированияГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусИнформированияГИСМДляДокумента
//
Процедура РассчитатьСтатусИнформированияГИСМДляДокумента(Источник, ЗаписьТребуется) Экспорт

	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыИнформированияГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыИнформированияГИСМ.Документ,
	|	СтатусыИнформированияГИСМ.ТекущееУведомление,
	|	СтатусыИнформированияГИСМ.Статус,
	|	СтатусыИнформированияГИСМ.ДальнейшееДействие
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ = &Основание";
	
	Запрос.УстановитьПараметр("Основание", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если (Не Источник.Проведен Или Не ЗаписьТребуется) Тогда
			РегистрыСведений.СтатусыИнформированияГИСМ.УдалитьЗаписьИзРегистра(Источник.Ссылка);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Если Источник.Проведен И ЗаписьТребуется Тогда
			
			ВыполнятьЗаписьВРегистр = Истина;
			
			ДанныеЗаписи.Документ            = Источник.Ссылка;
			ДанныеЗаписи.ДальнейшееДействие  = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			ДанныеЗаписи.Статус              = Перечисления.СтатусыИнформированияГИСМ.Черновик;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыИнформированияГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПрикладнымиДокументами

Функция ЕстьКиЗГИСМ(Товары) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаТовары.Номенклатура
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.КиЗГИСМ";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура ОбработкаЗаполненияЗаявкиНаВыпускКиЗ(ЗаявкаОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ЗаполнитьЗаявкуНаВыпускКиЗНаОснованииДругогоДокумента(ЗаявкаОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		
	КонецЕсли;
	
	ЗаявкаОбъект.Ответственный = Пользователи.ТекущийПользователь();
	Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.Организация) Тогда
		ЗаявкаОбъект.Организация   = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ЗаявкаОбъект.Ответственный, "ОсновнаяОрганизация");
	КонецЕсли;
	
КонецПроцедуры

// Предоставляет возможность переопределить заполение документа "Заявка на выпуск КиЗ" .
//
// Параметры:
//  ЗаявкаОбъект         - ДокументОбъект.ЗаявкаНаВыпускКиЗ - документ, для которого выполняется заполнение.
//  ДанныеЗаполнения     - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  ТекстЗаполнения      - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  СтандартнаяОбработка - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//
Процедура ЗаполнитьЗаявкуНаВыпускКиЗНаОснованииДругогоДокумента(ЗаявкаОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокументЗаказПоставщику.Контрагент,
	|	ДокументЗаказПоставщику.Организация,
	|	ДокументЗаказПоставщику.Ссылка КАК Основание,
	|	НЕ ДокументЗаказПоставщику.Проведен КАК ЕстьОшибкиПроведен,
	|	Ложь КАК ЕстьОшибкиСтатус,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.Отсутствует)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОбрабатываетсяЭмитентом)
	|			ТОГДА ВЫБОР
	|					КОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусОбработкиЭмитентом = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЭмитентомКиЗГИСМ.ПустаяСсылка)
	|						ТОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ
	|					ИНАЧЕ СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусОбработкиЭмитентом
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.Отсутствует))
	|	КОНЕЦ КАК СтатусЗаявкиНаВыпускКиЗ,
	|	ЕСТЬNULL(СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ, ЗНАЧЕНИЕ(Документ.ЗаявкаНаВыпускКиЗГИСМ.ПустаяСсылка)) КАК ТекущаяЗаявкаНаВыпускКиЗ,
	|	ДокументЗаказПоставщику.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ДатаДоговора, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)) КАК ДатаДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.НомерДоговора, """") КАК НомерДоговора
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК СтатусыЗаявокНаВыпускКиЗГИСМ
	|		ПО (СтатусыЗаявокНаВыпускКиЗГИСМ.Документ = ДокументЗаказПоставщику.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ДокументЗаказПоставщику.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ДокументЗаказПоставщику.Ссылка = &ЗаказПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Номенклатура,
	|	ЗаказПоставщикуТовары.Характеристика,
	|	ЗаказПоставщикуТовары.Количество
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ЗаказПоставщикуТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	| СправочникНоменклатура.КиЗГИСМ
	|	И ЗаказПоставщикуТовары.Ссылка = &ЗаказПоставщику";
	
	Запрос.УстановитьПараметр("ЗаказПоставщику", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
	РеквизитыЗаказа.Следующий();
	
	
	Если Не РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ЭтоСтатусНеАктуальнойЗаявки(РеквизитыЗаказа.СтатусЗаявкиНаВыпускКиЗ) Тогда
		
		ТекстОшибки = НСтр("ru='Для %Документ% уже существует актуальная заявка на выпуск КиЗ - %Заявка%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Заявка%", РеквизитыЗаказа.ТекущаяЗаявкаНаВыпускКиЗ);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если РезультатЗапроса[1].Пустой() Тогда
		
		ТекстОшибки = НСтр("ru='В %Документ% отсутствуют контрольные (идентификационные) знаки.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(ЗаявкаОбъект, РеквизитыЗаказа);
	ЗаявкаОбъект.ЗаказанныеКиЗ.Загрузить(РезультатЗапроса[1].Выгрузить());
	
КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.ЗаполнитьУведомлениеОСписанииКиЗНаОснованииВнутреннегоПотребления
//
Процедура ЗаполнитьУведомлениеОСписанииКиЗНаОснованииВнутреннегоПотребления(УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВнутреннееПотреблениеТоваров.Ссылка КАК Основание,
	|	НЕ ВнутреннееПотреблениеТоваров.Проведен КАК ЕстьОшибкиПроведен,
	|	ВнутреннееПотреблениеТоваров.Организация,
	|	ВнутреннееПотреблениеТоваров.ХозяйственнаяОперация,
	|	ЕСТЬNULL(СтатусыИнформированияГИСМ.ТекущееУведомление, ЗНАЧЕНИЕ(Документ.УведомлениеОСписанииКизГИСМ.ПустаяСсылка)) КАК ТекущееУведомление,
	|	ЕСТЬNULL(СтатусыИнформированияГИСМ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка)) КАК Статус
	|ИЗ
	|	Документ.СписаниеЗапасов КАК ВнутреннееПотреблениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ПО ВнутреннееПотреблениеТоваров.Ссылка = СтатусыИнформированияГИСМ.Документ
	|ГДЕ
	|	ВнутреннееПотреблениеТоваров.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СерииНоменклатуры.НомерКиЗГИСМ КАК НомерКиЗ,
	|	СерииНоменклатуры.RFIDTID КАК RFIDTID,
	|	СерииНоменклатуры.RFIDEPC КАК RFIDEPC,
	|	ВЫБОР
	|		КОГДА СписаниеЗапасовЗапасы.Номенклатура.КиЗГИСМ ТОГДА
	|			ЛОЖЬ
	|		КОГДА СписаниеЗапасовЗапасы.Номенклатура.ВидМаркировки = Значение(Перечисление.ВидыМаркировки.МаркируемаяПродукция) ТОГДА
	|			ИСТИНА
	|	КОНЕЦ КАК Индивидуализирован,
	|	ЗаявкаНаВыпускКиЗГИСМВыпущенныеКиЗ.Ссылка КАК ЗаявкаНаВыпускКиЗ
	|ИЗ
	|	Документ.СписаниеЗапасов.СерийныеНомера КАК ВнутреннееПотреблениеТоваровСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК СерииНоменклатуры
	|		ПО ВнутреннееПотреблениеТоваровСерии.СерийныйНомер = СерииНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеЗапасов.Запасы КАК СписаниеЗапасовЗапасы
	|		ПО ВнутреннееПотреблениеТоваровСерии.Ссылка = СписаниеЗапасовЗапасы.Ссылка
	|			И ВнутреннееПотреблениеТоваровСерии.КлючСвязи = СписаниеЗапасовЗапасы.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВыпускКиЗГИСМ.ВыпущенныеКиЗ КАК ЗаявкаНаВыпускКиЗГИСМВыпущенныеКиЗ
	|		ПО ЗаявкаНаВыпускКиЗГИСМВыпущенныеКиЗ.НомерКиЗ = СерииНоменклатуры.НомерКиЗГИСМ
	|		 И СписаниеЗапасовЗапасы.Номенклатура.КиЗГИСМ
	|ГДЕ
	|	(СписаниеЗапасовЗапасы.Номенклатура.КиЗГИСМ
	|			ИЛИ СписаниеЗапасовЗапасы.Номенклатура.ВидМаркировки = Значение(Перечисление.ВидыМаркировки.МаркируемаяПродукция))
	|	И (СерииНоменклатуры.НомерКиЗГИСМ <> """" ИЛИ СерииНоменклатуры.RFIDTID <> """" ИЛИ СерииНоменклатуры.RFIDEPC <> """")
	|	И ВнутреннееПотреблениеТоваровСерии.Ссылка = &ДокументОснование";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыОснования = РезультатЗапроса[0].Выбрать();
	РеквизитыОснования.Следующий();
	
	
	
	Если Не РегистрыСведений.СтатусыИнформированияГИСМ.ЭтоСтатусНеАктуальногоУведомления(РеквизитыОснования.Статус) Тогда
		
		ТекстОшибки = НСтр("ru='Для %Документ% уже существует актуальное уведомление об списании КиЗ - %Уведомление%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Уведомление%", РеквизитыОснования.ТекущееУведомление);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если РезультатЗапроса[1].Пустой() Тогда
		
		ТекстОшибки = НСтр("ru='В %Документ% отсутствуют товары, маркированные контрольными (идентификационными) знаками и контрольные (идентификационные) знаки.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(УведомлениеОбъект, РеквизитыОснования);
	УведомлениеОбъект.НомераКиЗ.Загрузить(РезультатЗапроса[1].Выгрузить());

	
КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.ЗаполнитьУведомлениеОбОтгрузкеГИСМНаОснованииРеализации
//
Процедура ЗаполнитьУведомлениеОбОтгрузкеГИСМНаОснованииРеализации(УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",   Константы.ВалютаУчета.Получить());
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Дата,ВалютаДокумента");
	Запрос.УстановитьПараметр("ДатаОснования", РеквизитыОснования.Дата);
	Запрос.УстановитьПараметр("ВалютаОснования", РеквизитыОснования.ВалютаДокумента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Ссылка КАК Основание,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидОборотаТовараГИСМ.Продажа)
	|		КОГДА РеализацияТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидОборотаТовараГИСМ.Комиссия)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидОборотаТовараГИСМ.Продажа)
	|	КОНЕЦ КАК ВидОборотаТовара,
	|	НЕ РеализацияТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен,
	|	ЕСТЬNULL(СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке,
	|		ЗНАЧЕНИЕ(Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.ПустаяСсылка)) КАК АктуальноеУведомлениеОбОтгрузкеГИСМ,
	|	ЕСТЬNULL(СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Статус,
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ПустаяСсылка)) КАК Статус
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ
	|		ПО (СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ = РеализацияТоваровУслуг.Ссылка)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	РеализацияТоваровУслугСерии.Ссылка.СтруктурнаяЕдиница КАК Склад,
	|	КОЛИЧЕСТВО(РеализацияТоваровУслугСерии.СерийныйНомер) КАК КоличествоСерий
	|ПОМЕСТИТЬ
	|	втСерии
	|ИЗ
	|	Документ.РасходнаяНакладная.СерийныеНомера КАК РеализацияТоваровУслугСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Запасы КАК Запасы
	|		ПО РеализацияТоваровУслугСерии.КлючСвязи = Запасы.КлючСвязи И РеализацияТоваровУслугСерии.Ссылка = Запасы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Запасы.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = Значение(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|	И РеализацияТоваровУслугСерии.Ссылка = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	РеализацияТоваровУслугСерии.Ссылка.СтруктурнаяЕдиница
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	РеализацияТоваровУслугСерии.Ссылка.СтруктурнаяЕдиница
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ
	|	втКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОснования,
	|		Валюта = &ВалютаРеглУчета ИЛИ Валюта = &ВалютаОснования) КАК КурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
	|	РеализацияТоваровУслугТовары.Ссылка.СтруктурнаяЕдиница КАК Склад,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС
	|	* ВЫБОР
	|		КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|						/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК СуммаНДС,
	|	СУММА(РеализацияТоваровУслугТовары.Всего
	|	* ВЫБОР
	|		КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|						/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК СуммаСНДС
	|ПОМЕСТИТЬ
	|	втТовары
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РеализацияТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	втКурсыВалют КАК КурсВалютыОснования
	|ПО
	|	КурсВалютыОснования.Валюта = &ВалютаОснования
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	втКурсыВалют КАК КурсВалютыРегл
	|ПО
	|	КурсВалютыРегл.Валюта = &ВалютаРеглУчета
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = Значение(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|	И РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	РеализацияТоваровУслугТовары.Ссылка.СтруктурнаяЕдиница 
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	РеализацияТоваровУслугТовары.Ссылка.СтруктурнаяЕдиница 
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Характеристика КАК Характеристика,
	|	втТовары.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втТовары.СуммаНДС, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ 
	|			втТовары.СуммаНДС /
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(втСерии.КоличествоСерий, 0) = 0
	|					ТОГДА 1
	|				ИНАЧЕ 
	|					втСерии.КоличествоСерий
	|			КОНЕЦ
	|	КОНЕЦ КАК НДСКиЗ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втТовары.СуммаСНДС, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ 
	|			втТовары.СуммаСНДС /
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(втСерии.КоличествоСерий, 0) = 0
	|					ТОГДА 1
	|				ИНАЧЕ 
	|					втСерии.КоличествоСерий
	|			КОНЕЦ
	|	КОНЕЦ КАК СтоимостьКиЗ
	|ПОМЕСТИТЬ
	|	втСтоимостьКиЗ
	|ИЗ
	|	втСерии КАК втСерии 
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	втТовары КАК втТовары
	|ПО
	|	втСерии.Номенклатура = втТовары.Номенклатура И
	|	втСерии.Характеристика = втТовары.Характеристика И
	|	втСерии.Склад = втТовары.Склад
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугСерии.СерийныйНомер.НомерКиЗГИСМ КАК НомерКиЗ,
	|	РеализацияТоваровУслугСерии.СерийныйНомер.RFIDTID КАК RFIDTID,
	|	РеализацияТоваровУслугСерии.СерийныйНомер.RFIDEPC КАК RFIDEPC,
	|	втСтоимостьКиЗ.НДСКиЗ КАК СуммаНДС,
	|	втСтоимостьКиЗ.СтоимостьКиЗ КАК Стоимость
	|ИЗ
	|	Документ.РасходнаяНакладная.СерийныеНомера КАК РеализацияТоваровУслугСерии
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Запасы КАК Запасы
	|	ПО Запасы.КлючСвязи = РеализацияТоваровУслугСерии.КлючСвязи И Запасы.Ссылка = РеализацияТоваровУслугСерии.Ссылка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ПО
	|	Запасы.Номенклатура = СправочникНоменклатура.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	втСтоимостьКиЗ КАК втСтоимостьКиЗ
	|ПО
	|	втСтоимостьКиЗ.Номенклатура = Запасы.Номенклатура И
	|	втСтоимостьКиЗ.Характеристика = Запасы.Характеристика И
	|	втСтоимостьКиЗ.Склад = РеализацияТоваровУслугСерии.Ссылка.СтруктурнаяЕдиница
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = Значение(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|	И РеализацияТоваровУслугСерии.Ссылка = &ДокументОснование
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыОснования = РезультатЗапроса[0].Выбрать();
	РеквизитыОснования.Следующий();
	
	
	Если Не РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ЭтоСтатусНеАктуальногоУведомления(РеквизитыОснования.Статус) Тогда
		
		ТекстОшибки = НСтр("ru='Для %Документ% уже существует актуальное уведомление об отгрузке ГИСМ - %Уведомление%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Уведомление%", РеквизитыОснования.АктуальноеУведомлениеОбОтгрузкеГИСМ);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если РезультатЗапроса[5].Пустой() Тогда
		
		ТекстОшибки = НСтр("ru='В %Документ% отсутствуют товары, маркированные контрольными (идентификационными) знаками.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(УведомлениеОбъект, РеквизитыОснования);
	УведомлениеОбъект.НомераКиЗ.Загрузить(РезультатЗапроса[5].Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТекстЗаявкаНаВыпускКиЗ(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТекстЗаявкаНаВыпускКиЗ", "Видимость", Форма.Объект.ЕстьКиЗГИСМ);
	Если НЕ Форма.Объект.ЕстьКиЗГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеЗаявки = Метаданные.Документы.ЗаявкаНаВыпускКиЗГИСМ;
	ПравоДобавления = ПравоДоступа("Добавление", МетаданныеЗаявки);
	ПравоЧтения     = ПравоДоступа("Чтение", МетаданныеЗаявки);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи =  НСтр("ru = 'Создать заявку на выпуск КиЗ'");
		ИмяКоманды   = "СоздатьЗаявкуНаВыпускКиЗ";
	Иначе
		ТекстНадписи =  НСтр("ru = 'Заявка на выпуск КиЗ не создана'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаявкаНаВыпускКиЗГИСМ.Ссылка,
	|	ВЫБОР
	|		КОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОбрабатываетсяЭмитентом)
	|			ТОГДА ВЫБОР
	|					КОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусОбработкиЭмитентом = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЭмитентомКиЗГИСМ.ПустаяСсылка)
	|						ТОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ
	|					ИНАЧЕ СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусОбработкиЭмитентом
	|				КОНЕЦ
	|		ИНАЧЕ СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ
	|	КОНЕЦ КАК СостояниеЗаявкиНаВыпускКиЗ
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК СтатусыЗаявокНаВыпускКиЗГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВыпускКиЗГИСМ КАК ЗаявкаНаВыпускКиЗГИСМ
	|		ПО (СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ = ЗаявкаНаВыпускКиЗГИСМ.Ссылка)
	|ГДЕ
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ = &ЗаказПоставщику
	|	И СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВыпускКиЗГИСМ.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ЗаказПоставщику", Форма.Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи = СтрШаблон(НСтр("ru = 'Заявка на выпуск КиЗ: %1'"), Выборка.СостояниеЗаявкиНаВыпускКиЗ);
		ИмяКоманды   = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	Форма.ТекстЗаявкаНаВыпускКиЗ = Новый ФорматированнаяСтрока(
	                                     ТекстНадписи, ,
	                                     ЦветаСтиля.ЦветГиперссылкиГИСМ, ,
	                                     ИмяКоманды);

КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭС
//
Процедура СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭС(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТекстУведомленияГИСМ", "Видимость", Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ);
	Если Не Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеУведомлениеОбИпморте      = Метаданные.Документы.УведомлениеОбИмпортеМаркированныхТоваровГИСМ;
	ПравоДобавленияУведомлениеОбИпморте = ПравоДоступа("Добавление", МетаданныеУведомлениеОбИпморте);
	ПравоЧтенияУведомлениеОбИпморте     = ПравоДоступа("Чтение", МетаданныеУведомлениеОбИпморте);
	
	МетаданныеУведомлениеОВвозеЕАЭС  = Метаданные.Документы.УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ;
	ПравоДобавленияУведомлениеОВвозе = ПравоДоступа("Добавление", МетаданныеУведомлениеОВвозеЕАЭС);
	ПравоЧтенияУведомлениеОВвозе     = ПравоДоступа("Чтение", МетаданныеУведомлениеОВвозеЕАЭС);
	
	ВидИмпорта = РассчитатьВидИмпорта(Форма.Объект.Контрагент);
	
	// если поставщик Россия, то это не импортная поставка
	Если ВидИмпорта = "НеИмпорт" Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидИмпорта = "ПоступлениеПоИмпорту" Тогда
		Если Не ПравоЧтенияУведомлениеОбИпморте Тогда
			Возврат;
		КонецЕсли;
		Если ПравоДобавленияУведомлениеОбИпморте Тогда
			ТекстНадписи = НСтр("ru = 'Создать уведомление об импорте ГИСМ'");
			ИмяКоманды   = "СоздатьУведомлениеГИСМ";
		Иначе
			ТекстНадписи = НСтр("ru = 'Уведомление об импорте ГИСМ не созадано'");
			ИмяКоманды   = "";
		КонецЕсли;
	ИначеЕсли ВидИмпорта = "ПоступлениеИзЕАЭС" Тогда
		Если Не ПравоЧтенияУведомлениеОВвозе Тогда
			Возврат;
		КонецЕсли;
		Если ПравоДобавленияУведомлениеОВвозе Тогда
			ТекстНадписи = НСтр("ru = 'Создать уведомление о ввозе из ЕАЭС ГИСМ'");
			ИмяКоманды   = "СоздатьУведомлениеГИСМЕАЭС";
		Иначе
			ТекстНадписи = НСтр("ru = 'Уведомление о ввозе из ЕАЭС ГИСМ не созадано'");
			ИмяКоманды   = "";
		КонецЕсли;
	Иначе 
		ВызватьИсключение (НСтр("ru='Ошибочный вид импорта'"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтатусыИнформированияГИСМ.ТекущееУведомление,
	|	СтатусыИнформированияГИСМ.ДальнейшееДействие,
	|	СтатусыИнформированияГИСМ.Статус
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ = &ДокументОснование
	|	И СтатусыИнформированияГИСМ.ТекущееУведомление <> НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("ДокументОснование", Форма.Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ВидИмпорта = "ПоступлениеПоИмпорту" Тогда
			ТекстНадписи = СтрШаблон(НСтр("ru = 'Уведомление об импорте ГИСМ: %1'"), Выборка.Статус);
		ИначеЕсли ВидИмпорта = "ПоступлениеИзЕАЭС" Тогда
			ТекстНадписи = СтрШаблон(НСтр("ru = 'Уведомление о ввозе из ЕАЭС ГИСМ: %1'"), Выборка.Статус);
		КонецЕсли;
		
	
		ИмяКоманды    = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	Форма.ТекстУведомленияГИСМПредставление = Новый ФорматированнаяСтрока(
	                                        ТекстНадписи,,
	                                        ЦветаСтиля.ЦветГиперссылкиГИСМ,,
	                                        ИмяКоманды)
	
КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.СформироватьТекстУведомлениеОСписанииКиЗ
//
Процедура СформироватьТекстУведомлениеОСписанииКиЗ(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ТекстУведомленияОСписанииГИСМ", 
		"Видимость", 
		Форма.Объект.ЕстьКиЗГИСМ ИЛИ Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ);
		
	Если Не Форма.Объект.ЕстьКиЗГИСМ И Не Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОСписанииКиЗГИСМ;
	ПравоДобавления      = ПравоДоступа("Добавление", МетаданныеУведомления);
	ПравоЧтения          = ПравоДоступа("Чтение",     МетаданныеУведомления);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи =  НСтр("ru = 'Создать уведомление о списании КиЗ ГИСМ'");
		ИмяКоманды   = "СоздатьУведомлениеГИСМ";
	Иначе
		ТекстНадписи = НСтр("ru = 'Уведомление о списании КиЗ ГИСМ не создано'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	ТекстНадписи =  НСтр("ru = 'Создать уведомление о списании КиЗ ГИСМ'");
	ИмяКоманды   = "СоздатьУведомлениеГИСМ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтатусыИнформированияГИСМ.ТекущееУведомление,
	|	СтатусыИнформированияГИСМ.ДальнейшееДействие,
	|	СтатусыИнформированияГИСМ.Статус
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ = &ДокументОснование
	|	И СтатусыИнформированияГИСМ.ТекущееУведомление <> НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("ДокументОснование", Форма.Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи  = СтрШаблон(НСтр("ru = 'Уведомление о списании КиЗ ГИСМ: %1'"), Выборка.Статус);
		ИмяКоманды    = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	
	Форма.ТекстУведомленияОСписанииГИСМ = Новый ФорматированнаяСтрока(
	                                        ТекстНадписи,,
	                                        ЦветаСтиля.ЦветГиперссылкиГИСМ,,
	                                        ИмяКоманды)
	
КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусИнформированияГИСМДляДокумента
//
Процедура СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукции(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТекстУведомленияОбОтгрузкеГИСМ", "Видимость", Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ);
	Если Не Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ;
	ПравоДобавления       = ПравоДоступа("Добавление", МетаданныеУведомления);
	ПравоЧтения           = ПравоДоступа("Чтение", МетаданныеУведомления);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи =  НСтр("ru = 'Создать уведомление об отгрузке ГИСМ'");
		ИмяКоманды   = "СоздатьУведомлениеГИСМ";
	Иначе
		ТекстНадписи = НСтр("ru = 'Уведомление об отгрузке ГИСМ не создано'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Статус
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ КАК УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ
	|		ПО (СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке = УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Ссылка)
	|ГДЕ
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ = &Документ
	|	И СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке <> ЗНАЧЕНИЕ(Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Документ", Форма.Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи = СтрШаблон(НСтр("ru = 'Уведомление об отгрузке ГИСМ: %1'"), Выборка.Статус);
		ИмяКоманды   = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	Форма.ТекстУведомленияОбОтгрузкеГИСМ = Новый ФорматированнаяСтрока(
	                                  ТекстНадписи,,
	                                  ЦветаСтиля.ЦветГиперссылкиГИСМ,,
	                                  ИмяКоманды);

КонецПроцедуры

Процедура ЗаполнитьНоменклатуруКиЗВСтроке(ТекущаяСтрока, СписокНоменклатураКиЗ, КиЗГИСМСИндивидуализацией) Экспорт
	
	GTIN = ?(КиЗГИСМСИндивидуализацией, ТекущаяСтрока.GTIN, "");
	ТаблицаРезультат = ПолучитьКизы(СписокНоменклатураКиЗ, GTIN);
	
	Если ТаблицаРезультат.Количество() = 1 Тогда
		СтрокаРезультат = ТаблицаРезультат.Получить(0);
		ТекущаяСтрока.НоменклатураКиЗ = СтрокаРезультат.НоменклатураКиЗ;
		ТекущаяСтрока.ХарактеристикаКиЗ = СтрокаРезультат.ХарактеристикаКиЗ;

	ИначеЕсли ТаблицаРезультат.Количество() = 0 Тогда
		ТекущаяСтрока.НоменклатураКиЗ = Неопределено;
		ТекущаяСтрока.ХарактеристикаКиЗ = Неопределено;

	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКизы(СписокНоменклатураКиЗ, GTIN)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК НоменклатураКИЗ,
	|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаКиЗ,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.КиЗГИСМGTIN, Номенклатура.КиЗГИСМGTIN) КАК GTIN,
	|	Номенклатура.ИспользоватьХарактеристики КАК ХарактеристикиКиЗИспользуются
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец	
	|				)
	|ГДЕ
	|	Номенклатура.Ссылка В (&СписокНоменклатураКиЗ)
	|	И ЕСТЬNULL(ХарактеристикиНоменклатуры.КиЗГИСМGTIN, Номенклатура.КиЗГИСМGTIN) В(&GTIN)";
	
	Запрос.УстановитьПараметр("GTIN", GTIN);
	Запрос.УстановитьПараметр("СписокНоменклатураКиЗ", СписокНоменклатураКиЗ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаПроведенияМаркировкаТоваров(Отказ, РежимПроведения, ДокументОбъект) Экспорт
	
	Ссылка = ДокументОбъект.Ссылка;
	ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
	Движения =  ДокументОбъект.Движения;
	ЭтотОбъект = ДокументОбъект;
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	ИнициализироватьДанныеДокументаМаркировкиТоваров(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыКРасходуСоСкладов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);

	// СерийныеНомера
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераГарантии(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераОстатки(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	ВыполнитьКонтрольМаркировкаТоваровГИСМ(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
	
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокументаМаркировкиТоваров(ДокументСсылкаМаркировкиТоваров,СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркировкаТоваровГИСМТовары.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	МаркировкаТоваровГИСМТовары.Ссылка КАК Ссылка,
	|	МаркировкаТоваровГИСМТовары.Ссылка.Дата КАК Период,
	|	МаркировкаТоваровГИСМТовары.Ссылка.Склад.ОрдерныйСклад КАК ОрдерныйСклад,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	МаркировкаТоваровГИСМТовары.Ссылка.Склад КАК СтруктурнаяЕдиница,
	|	МаркировкаТоваровГИСМТовары.НоменклатураКиЗ.СчетУчетаЗапасов КАК СчетУчета,
	|	МаркировкаТоваровГИСМТовары.НоменклатураКиЗ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА МаркировкаТоваровГИСМТовары.ХарактеристикаКиЗ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	МаркировкаТоваровГИСМТовары.Номенклатура КАК НоменклатураТовар,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА МаркировкаТоваровГИСМТовары.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаТовар,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка) КАК Ячейка,
	|	МаркировкаТоваровГИСМТовары.Количество КАК Количество,
	|	0 КАК Сумма,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы) КАК СчетДт,
	|	МаркировкаТоваровГИСМТовары.НоменклатураКиЗ.СчетУчетаЗапасов КАК СчетКт,
	|	&СписаниеЗапасов КАК СодержаниеПроводки,
	|	МаркировкаТоваровГИСМТовары.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.МаркировкаТоваровГИСМ.Товары КАК МаркировкаТоваровГИСМТовары
	|ГДЕ
	|	МаркировкаТоваровГИСМТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Ссылка КАК ДокументПродажи,
	|	ТаблицаЗапасы.СчетДт КАК СчетДт,
	|	ТаблицаЗапасы.СчетКт КАК СчетКт,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК Содержание,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Ссылка,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.СчетДт,
	|	ТаблицаЗапасы.СчетКт,
	|	ТаблицаЗапасы.СодержаниеПроводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Ячейка КАК Ячейка,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Расход) КАК Операция,
	|	МаркировкаТоваровГИСМСерии.Серия КАК СерийныйНомер,
	|	&Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Ячейка КАК Ячейка,
	|	1 КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровГИСМ.СерииКиЗ КАК МаркировкаТоваровГИСМСерии
	|		ПО ТаблицаЗапасы.Ссылка = МаркировкаТоваровГИСМСерии.Ссылка
	|			И ТаблицаЗапасы.КлючСвязи = МаркировкаТоваровГИСМСерии.КлючСвязи
	|ГДЕ
	|	МаркировкаТоваровГИСМСерии.Ссылка = &Ссылка
	|	И ТаблицаЗапасы.Ссылка = &Ссылка
	|	И &ИспользоватьСерийныеНомера
	|	И НЕ ТаблицаЗапасы.ОрдерныйСклад
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.Период,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Приход),
	|	МаркировкаТоваровГИСМСерии.Серия,
	|	&Организация,
	|	ТаблицаЗапасы.НоменклатураТовар,
	|	ТаблицаЗапасы.ХарактеристикаТовар,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Ячейка,
	|	1
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровГИСМ.Серии КАК МаркировкаТоваровГИСМСерии
	|		ПО ТаблицаЗапасы.Ссылка = МаркировкаТоваровГИСМСерии.Ссылка
	|			И ТаблицаЗапасы.КлючСвязи = МаркировкаТоваровГИСМСерии.КлючСвязи
	|ГДЕ
	|	МаркировкаТоваровГИСМСерии.Ссылка = &Ссылка
	|	И ТаблицаЗапасы.Ссылка = &Ссылка
	|	И &ИспользоватьСерийныеНомера
	|	И НЕ ТаблицаЗапасы.ОрдерныйСклад";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаМаркировкиТоваров);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	
	Запрос.УстановитьПараметр("ИспользоватьСерийныеНомера", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера);
	
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
    СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", МассивРезультатов[3].Выгрузить());
	
	// Серийные номера
	РезультатЗапроса4 = МассивРезультатов[4].Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", РезультатЗапроса4);
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийныхНомеров Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", РезультатЗапроса4);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
	КонецЕсли; 
	
	// Сформируем путую таблицу проводок.
	УправлениеНебольшойФирмойСервер.СформироватьТаблицуПроводок(ДокументСсылкаМаркировкиТоваров, СтруктураДополнительныеСвойства);
	
	// Расчет стоимости списания запасов.
	СформироватьТаблицаЗапасы(ДокументСсылкаМаркировкиТоваров, СтруктураДополнительныеСвойства);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СписаниеЗапасовЗапасы.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельности,
	|	&Сумма КАК СуммаРасходов,
	|	&Сумма КАК Сумма,
	|	СписаниеЗапасовЗапасы.Ссылка.Корреспонденция КАК СчетУчета,
	|	&ПоступлениеРасходов КАК СодержаниеПроводки
	|ИЗ
	|	Документ.СписаниеЗапасов.Запасы КАК СписаниеЗапасовЗапасы
	|ГДЕ
	|	СписаниеЗапасовЗапасы.Ссылка = &Ссылка
	|	И &Сумма > 0
	|	И СписаниеЗапасовЗапасы.Ссылка.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеЗапасовЗапасы.Ссылка,
	|	СписаниеЗапасовЗапасы.Ссылка.Дата,
	|	СписаниеЗапасовЗапасы.Ссылка.Корреспонденция");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаМаркировкиТоваров);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("Сумма", СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Итог("Сумма"));
	
	Запрос.УстановитьПараметр("ПоступлениеРасходов", НСтр("ru = 'Прочие расходы'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", МассивРезультатов[0].Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасы(ДокументСсылкаСписаниеЗапасов, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСписаниеЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия");
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуется = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуется > 0 Тогда
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуется Тогда

				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуется / КоличествоОстаток , 2, 1);

				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуется;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

			ИначеЕсли КоличествоОстаток = КоличествоТребуется Тогда

				СуммаКСписанию = СуммаОстаток;

				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;

			Иначе
				СуммаКСписанию = 0;	
			КонецЕсли;
	
			СтрокаТаблицаЗапасы.Сумма = СуммаКСписанию;
			СтрокаТаблицаЗапасы.Количество = КоличествоТребуется;
					
		КонецЕсли;
		
		// Сформируем проводки.
		Если Окр(СтрокаТаблицаЗапасы.Сумма, 2, 1) <> 0 Тогда
			СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаЗапасов()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтрольМаркировкаТоваровГИСМ(ДокументСсылкаСписаниеЗапасов, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Не УправлениеНебольшойФирмойСервер.ВыполнитьКонтрольОстатков() Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыНаСкладахИзменение", "ДвиженияЗапасыИзменение"
	// содержат записи, необходимо выполнить контроль реализации товаров.
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияСерийныеНомераИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Ячейка) КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыНаСкладахИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|					ИЗ
		|						ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СчетУчета) КАК СчетУчетаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчета,
		|						ДвиженияЗапасыИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателя
		|					ИЗ
		|						ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение)) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСерийныеНомераИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияСерийныеНомераИзменение.СерийныйНомер КАК СерийныйНомерПредставление,
		|	ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияСерийныеНомераИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияСерийныеНомераИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияСерийныеНомераИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияСерийныеНомераИзменение.Ячейка КАК ЯчейкаПредставление,
		|	СерийныеНомераОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	СерийныеНомераОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияСерийныеНомераИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК ОстатокСерийныеНомера,
		|	ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокСерийныеНомера
		|ИЗ
		|	ДвиженияСерийныеНомераИзменение КАК ДвиженияСерийныеНомераИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомера.Остатки(&МоментКонтроля, ) КАК СерийныеНомераОстатки
		|		ПО ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница = СерийныеНомераОстатки.СтруктурнаяЕдиница
		|			И ДвиженияСерийныеНомераИзменение.Номенклатура = СерийныеНомераОстатки.Номенклатура
		|			И ДвиженияСерийныеНомераИзменение.Характеристика = СерийныеНомераОстатки.Характеристика
		|			И ДвиженияСерийныеНомераИзменение.Партия = СерийныеНомераОстатки.Партия
		|			И ДвиженияСерийныеНомераИзменение.СерийныйНомер = СерийныеНомераОстатки.СерийныйНомер
		|			И ДвиженияСерийныеНомераИзменение.Ячейка = СерийныеНомераОстатки.Ячейка
		|			И (ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой() Тогда
			ДокументОбъектСписаниеЗапасов = ДокументСсылкаСписаниеЗапасов.ПолучитьОбъект()
		КонецЕсли;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладах(ДокументОбъектСписаниеЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов и затрат.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасы(ДокументОбъектСписаниеЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета серийных номеров.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструСерийныеНомера(ДокументОбъектСписаниеЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

Функция ЕстьМаркируемаяПродукцияГИСМ(Товары) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаТовары.Номенклатура
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = Значение(Перечисление.ВидыМаркировки.МаркируемаяПродукция)";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ЕстьПродукцияКИЗ(Товары) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаТовары.Номенклатура
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = Значение(Перечисление.ВидыМаркировки.КонтрольныйИдентификационныйЗнак)";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Заполняет номенклатуру КиЗ в строках документа
//
// Параметры:
//  Объект				 		 - ДокументОбъект.* - текущая строка таблицы Товары.
//  СписокНоменклатураКиЗ		 - СписокЗначений - список номенклатуры КиЗ, подходящих под выбранную категорию КиЗ в документе.
//  ЗаполнятьСерии				 - Булево - Признак заполнения серий в ТЧ Серии.
//
Процедура ЗаполнитьНоменклатуруКиЗВСтроках(ДокументОбъект, СписокНоменклатураКиЗ, ЗаполнятьСерии = Истина) Экспорт
	
	GTIN = ?(ДокументОбъект.КиЗГИСМСИндивидуализацией, ДокументОбъект.Товары.Выгрузить(,"GTIN").ВыгрузитьКолонку("GTIN"),"");
	ТаблицаРезультат = ПолучитьКизы(СписокНоменклатураКиЗ, GTIN);
	
	СтруктураПоиска = Новый Структура("GTIN","");
	Для каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
		
		Если ДокументОбъект.КиЗГИСМСИндивидуализацией Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
		КонецЕсли;
		НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 1 Тогда
			НайденнаяСтрока = НайденныеСтроки.Получить(0);
			СтрокаТовары.НоменклатураКиЗ = НайденнаяСтрока.НоменклатураКиЗ;
			СтрокаТовары.ХарактеристикаКиЗ = НайденнаяСтрока.ХарактеристикаКиЗ;
			СтрокаТовары.ХарактеристикиКизИспользуются = НайденнаяСтрока.ХарактеристикиКизИспользуются;
		ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары.НоменклатураКиЗ = Неопределено;
			СтрокаТовары.ХарактеристикаКиЗ = Неопределено;
			СтрокаТовары.ХарактеристикиКизИспользуются = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполнятьСерии Тогда
		Для каждого СтрокаСерии Из ДокументОбъект.Серии Цикл
			Если ДокументОбъект.КиЗГИСМСИндивидуализацией Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСерии);
			КонецЕсли;
			НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 1 Тогда
				НайденнаяСтрока = НайденныеСтроки.Получить(0);
				СтрокаСерии.НоменклатураКиЗ = НайденнаяСтрока.НоменклатураКиЗ;
				СтрокаСерии.ХарактеристикаКиЗ = НайденнаяСтрока.ХарактеристикаКиЗ;
			ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
				СтрокаСерии.НоменклатураКиЗ = Неопределено;
				СтрокаСерии.ХарактеристикаКиЗ = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.ЗаполнитьПредставлениеТоваровУведомленияОПоступлении
//
Процедура ЗаполнитьПредставлениеТоваровУведомленияОПоступлении(НомераКиЗ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НомераКиЗ.НомерСтроки КАК НомерСтроки,
	|	НомераКиЗ.НомерКиЗ КАК НомерКиЗ,
	|	НомераКиЗ.ДокументПоступления КАК ДокументПоступления
	|ПОМЕСТИТЬ втНомераКиЗ
	|ИЗ
	|	&НомераКиЗ КАК НомераКиЗ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерКиЗ,
	|	ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	СерииОснования.СерийныйНомер КАК Серия,
	|	СерииОснования.Ссылка КАК ДокументПоступления,
	|	СерииОснования.СерийныйНомер.НомерКиЗГИСМ КАК НомерКиЗ
	|ПОМЕСТИТЬ втСерииОснования
	|ИЗ
	|	Документ.ПриходнаяНакладная.СерийныеНомера КАК СерииОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Запасы КАК Запасы
	|		ПО (Запасы.Ссылка = СерииОснования.Ссылка)
	|			И (Запасы.КлючСвязи = СерииОснования.КлючСвязи)
	|ГДЕ
	|	СерииОснования.Ссылка В
	|			(ВЫБРАТЬ
	|				втНомераКиЗ.ДокументПоступления КАК ДокументПоступления
	|			ИЗ
	|				втНомераКиЗ КАК втНомераКиЗ)
	|	И СерииОснования.СерийныйНомер.НомерКиЗГИСМ В
	|			(ВЫБРАТЬ
	|				втНомераКиЗ.НомерКиЗ КАК НомерКиЗ
	|			ИЗ
	|				втНомераКиЗ КАК втНомераКиЗ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНомераКиЗ.НомерСтроки КАК НомерСтроки,
	|	втСерииОснования.Номенклатура КАК Номенклатура,
	|	втСерииОснования.Характеристика КАК Характеристика,
	|	втСерииОснования.Серия КАК Серия
	|ИЗ
	|	втСерииОснования КАК втСерииОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНомераКиЗ КАК втНомераКиЗ
	|		ПО (втНомераКиЗ.НомерКиЗ = втСерииОснования.НомерКиЗ)
	|			И (втНомераКиЗ.ДокументПоступления = втСерииОснования.ДокументПоступления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("НомераКиЗ", НомераКиЗ.Выгрузить(, "НомерСтроки, НомерКиЗ, ДокументПоступления"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Для Каждого ТекСтрока Из НомераКиЗ Цикл
		
		Если Выборка.НайтиСледующий(ТекСтрока.НомерСтроки, "НомерСтроки") Тогда
			
			ТекСтрока.Номенклатура   = Выборка.Номенклатура;
			ТекСтрока.Характеристика = Выборка.Характеристика;
			ТекСтрока.Серия          = Выборка.Серия;
			ТекСтрока.НоменклатураПредставление = УправлениеНебольшойФирмойСервер.ПредставлениеНоменклатуры(
					Выборка.Номенклатура,
					Выборка.Характеристика);
			
		Иначе
			
			ТекСтрока.Номенклатура   = Неопределено;
			ТекСтрока.Характеристика = Неопределено;
			ТекСтрока.Серия                     = Неопределено;
			ТекСтрока.НоменклатураПредставление = Неопределено;
			
		КонецЕсли;
		
		Выборка.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

