////////////////////////////////////////////////////////////////////////////////
// Состояние сдачи отчетности
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Заказчик функции - БП 3.0
// Возвращает сведения по всем отправкам отчета или уведомления, 
// отсортированные по убыванию даты отправки.
// Сведения по прочим объектам не возвращает.
//
// Параметры:
//  Ссылка	 - ДокументСсылка, СправочникСсылка - отправляемый отчет или уведомление.
// 
// Возвращаемое значение:
//  Массив структур - сведения по отправкам.
// 		Набор данных в структуре - см в функции ШаблонОбщихСведенийОтправке.
//
Функция СведенияПоВсемОтправкам(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Массив;
	
	ТаблицаВсехОтправок = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ВсеОтправки(Ссылка);
	
	Для каждого Отправка Из ТаблицаВсехОтправок Цикл
		
		Сведения = ШаблонОбщихСведенийОтправке();
		ЗаполнитьЗначенияСвойств(Сведения, Отправка);
		
		Результат.Добавить(Сведения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заказчик функции - БП 3.0
// Возвращает подробные сведения по идентификатору отправки и ссылке.
// Только для отчетов и уведомлений.
// Сведения по прочим объектам не возвращает.
//
// Параметры:
//  Ссылка					 - ДокументСсылка, СправочникСсылка - отправляемый отчет или уведомление.
//  ИдентификаторОтправки	 - Идентификатор цикла обмена, если есть цикл обмена, 
// 			или ИдентификаторОтправкиНаСервере соответствующей отправки, если нет цикла обмена
//			или Транспортное сообщение.
//  ДополнительныеПараметры	 - Структура - Структура с полями из ШаблонОбщихСведенийОтправке()
// 
// Возвращаемое значение:
//  Структура - описание см в ШаблонПодробныхСведенийПоОтправкам. 
//		Если заполнен параметр ДополнительныеПараметры, то структура так же дополняется
//		значениями, указанными в дополнительных параметрах.
//
Функция СведенияПоОтправке(Ссылка, ИдентификаторОтправки, ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	Результат = ШаблонПодробныхСведенийПоОтправкам();
	
	// Проверяем, отправлялся ли отчет и есть ли отправка с нужным идентификатором или транспортным сообщением.
	Отправки = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ВсеОтправки(Ссылка);
	
	Если ТипЗнч(ИдентификаторОтправки) = Тип("Строка") Тогда
		СведенияПоОтправке  = Отправки.Найти(ИдентификаторОтправки, "ИдентификаторОтправки");
	Иначе
		СведенияПоОтправке  = Отправки.Найти(ИдентификаторОтправки, "Сообщение");
	КонецЕсли;

	ЗаполнитьИмяИДанныеФайла(Результат, СведенияПоОтправке, КонтекстЭДОСервер);
	ЗаполнитьДатуРезультата(Ссылка, Результат, СведенияПоОтправке, КонтекстЭДОСервер);
	ЗаполнитьСтатусОтправки(Результат, СведенияПоОтправке, КонтекстЭДОСервер);
	
	ДополнитьОбщимиСведениями(Результат, СведенияПоОтправке, ДополнительныеПараметры);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СведенияПоВсемОтправкамСДопСведениями(Ссылка) Экспорт

	ВсеОбщиеСведения = СведенияПоОтправкам.СведенияПоВсемОтправкам(Ссылка);
	
	ДополнительныеПараметры = ШаблонОбщихСведенийОтправке();
	
	Результат = Новый Массив;
	Для каждого ДанныеОднойОтправка Из ВсеОбщиеСведения Цикл
		 Результат.Добавить(СведенияПоОтправкам.СведенияПоОтправке(Ссылка, ДанныеОднойОтправка.ИдентификаторОтправки, ДополнительныеПараметры)); 
	КонецЦикла;
	 
	Возврат Результат; 

КонецФункции

Функция СтатусОтправкиРеглОтчета(Ссылка) Экспорт
	
	Результат = "";
	
	Если Ссылка = Неопределено Тогда
		
		Возврат Результат;
		
	КонецЕсли;
		
	Отправки = СведенияПоВсемОтправкам(Ссылка);
			
	Если Отправки.Количество() > 0 Тогда
	
		Результат = СведенияПоОтправке(Ссылка, Отправки[0].ИдентификаторОтправки).Статус;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьИмяИДанныеФайла(Результат, СведенияПоОтправке, КонтекстЭДОСервер)
	
	Если СведенияПоОтправке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СведенияПоОтправке.Сообщение)
		ИЛИ НЕ ТипЗнч(СведенияПоОтправке.Сообщение) = Тип("ДокументСсылка.ТранспортноеСообщение") Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрПоТипу = ДокументооборотСКОВызовСервера.ТипыСодержимогоТранспортногоКонтейнераПервичныхСообщений();
	
	ТаблицаСРезультатом = КонтекстЭДОСервер.ПолучитьВложенияТранспортногоСообщения(
		СведенияПоОтправке.Сообщение,
		Истина, 
		ФильтрПоТипу,
		,
		Истина);
		
	Для Каждого СтрокаРезультата Из ТаблицаСРезультатом Цикл
			
		Результат.ИмяФайла 		= СтрокаРезультата.ИмяФайла;
		Результат.АдресДвДанных = СтрокаРезультата.Адрес;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДатуРезультата(Ссылка, Результат, СведенияПоОтправке, КонтекстЭДОСервер)
	
	Если СведенияПоОтправке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СведенияПоОтправке.Отправка) Тогда
		Возврат;
	КонецЕсли;
	
	ОтправкаСсылка = СведенияПоОтправке.Отправка;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Отправка", 		ОтправкаСсылка);
	ДополнительныеПараметры.Вставить("ПолучатьДаты", 	Истина);
	
	ТекущееСостояние = КонтекстЭДОСервер.ТекущееСостояниеОтправки(
		Ссылка, 
		СведенияПоОтправке.ВидКонтролирующегоОргана, 
		ДополнительныеПараметры);
	
	Если ТекущееСостояние = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеСдачиОтчетности = ТекущееСостояние.ТекущийЭтапОтправки.СостояниеСдачиОтчетности;
	
	Если СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота
		ИЛИ СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота Тогда
			
		Результат.ДатаРезультата = ТекущееСостояние.ТекущийЭтапОтправки.Дата;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтатусОтправки(Результат, СведенияПоОтправке, КонтекстЭДОСервер)
	
	Если СведенияПоОтправке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СведенияПоОтправке.Отправка) Тогда
		Возврат;
	КонецЕсли;
	
	ВидКонтролирующегоОргана = СведенияПоОтправке.ВидКонтролирующегоОргана;
	
	Если ВидКонтролирующегоОргана = "ФНС" 
		ИЛИ ВидКонтролирующегоОргана = "ПФР"
		ИЛИ ВидКонтролирующегоОргана = "ФСГС" Тогда 
		
		ЦиклОбмена = СведенияПоОтправке.Отправка;
		Результат.Статус = КонтекстЭДОСервер.РассчитатьСтатусЦиклаОбмена(ЦиклОбмена);
		
	ИначеЕсли ВидКонтролирующегоОргана = "ФСС" 
		ИЛИ ВидКонтролирующегоОргана = "ФСРАР"
		ИЛИ ВидКонтролирующегоОргана = "РПН"
		ИЛИ ВидКонтролирующегоОргана = "ФТС" Тогда
		
		Отправка = СведенияПоОтправке.Отправка;
		
		Результат.Статус = Отправка.СтатусОтправки;
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ШаблонОбщихСведенийОтправке()
	
	Параметры = Новый Структура();
	// Дата начала документооборота.
	Параметры.Вставить("ДатаОтправки", 				Дата(1,1,1));
	// Дата полного завершения документооборота.
	Параметры.Вставить("ДатаЗавершения", 			Дата(1,1,1));
	Параметры.Вставить("ВидКонтролирующегоОргана", 	Перечисления.ТипыКонтролирующихОрганов.ПустаяСсылка());
	Параметры.Вставить("КодКонтролирующегоОргана", 	"");
	// Идентификатор цикла обмена, если есть цикл обмена, 
	// или ИдентификаторОтправкиНаСервере соответствующей отправки, если нет цикла обмена.
	Параметры.Вставить("ИдентификаторОтправки", 	"");
	
	Возврат Параметры;
	
КонецФункции

Функция ШаблонПодробныхСведенийПоОтправкам()
	
	Параметры = Новый Структура();
	// Имя отправленного файла отчета или уведомления.
	// Возвращается только для ФНС, ПФР, Росстат.
	Параметры.Вставить("ИмяФайла", 			"");
	// Адрес временного хранилища с двоичными данными отправленного файла.
	// Возвращается только для ФНС, ПФР, Росстат.
	Параметры.Вставить("АдресДвДанных", 	"");
	// Дата сдачи или отказа.
	Параметры.Вставить("ДатаРезультата", 	Дата(1,1,1));
	// Текущее состояние отправки, тип - Перечисления.СтатусыОтправки
	Параметры.Вставить("Статус", 			Перечисления.СтатусыОтправки.ПустаяСсылка());
	
	Возврат Параметры;
	
КонецФункции

Процедура ДополнитьОбщимиСведениями(Результат, СведенияПоОтправке, Знач ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияПоОтправке <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, СведенияПоОтправке);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДополнительныеПараметры, Ложь);
	
КонецПроцедуры 

// Описание см. в функции ТекущееСостояниеОтправки в модуле объекта обработки ДокументооборотСКонтролирующимиОрганами
Функция ТекущееСостояниеОтправки(Знач Ссылка, Знач КонтролирующийОрган = "ФНС", Отправка = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПолучатьДаты", 			Истина);
	ДополнительныеПараметры.Вставить("ПолучатьОшибкиОтправки", 	Истина);
	
	Если ЗначениеЗаполнено(Отправка) Тогда
		ДополнительныеПараметры.Вставить("Отправка", Отправка);
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	СостояниеОтправки = КонтекстЭДОСервер.ТекущееСостояниеОтправки(Ссылка, КонтролирующийОрган, ДополнительныеПараметры);
	
	Возврат СостояниеОтправки;

КонецФункции

#КонецОбласти