////////////////////////////////////////////////////////////////////////////////
//
// ИнтеграцияГИСМКлиент : клиентские процедуры и функции подсистемы "Интеграция с ГИСМ"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Начинает выполнение обмена с ГИСМ в формах списков документов подсистемы.
//
Процедура ВыполнитьОбмен() Экспорт
	
	НачатьВыполнениеОбмена();
	
КонецПроцедуры

#Область РаботаВСписках

// Обработчик команд по выполнению требуемого дальнейшего действия в динамических списках
//
// Параметры:
//  ДинамическийСписок - ЭлементФормы - список в котором выполняется команда
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюГИСМ - действие, которое будет выполнено.
//
Процедура ВыполнитьДальнейшееДействиеДляДокументовИзСписка(ДинамическийСписок, ДальнейшееДействие) Экспорт
	
	ПередачаПодтверждения = ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаПодтверждения");
	
	Если ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ЗакройтеЗаявку") Тогда
		Операция = ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявки");
		
	ИначеЕсли ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные") Тогда
		Операция = ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаДанных");
	ИначеЕсли ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанныеСписаниеКиЗ") Тогда
		Операция = ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаДанныхСписаниеКиЗ");
	ИначеЕсли ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанныеМаркировкаТоваров") Тогда
		Операция = ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаДанныхМаркировкаТоваров");
	ИначеЕсли ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанныеПеремаркировкаТоваров") Тогда
		Операция = ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаДанныхПеремаркировкаТоваров");
		
	ИначеЕсли ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПодтвердитеПолучение") Тогда
		Операция = ПередачаПодтверждения;
	ИначеЕсли ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.Аннулируйте") Тогда
		Операция = ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаАннулирования");
	КонецЕсли;
	
	Если Операция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Операция = ПередачаПодтверждения Тогда
		
		ПодтвердитьПолучениеДляДокументовИзСписка(ДинамическийСписок);
		
	Иначе
		
		МассивДокументов = Новый Массив;
		
		ВыделенныеСтроки = ДинамическийСписок.ВыделенныеСтроки;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = ДинамическийСписок.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеСтроки.ДальнейшееДействиеГИСМ = ДальнейшееДействие Тогда
				МассивДокументов.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		ПодготовитьСообщенияКПередачеДляДокументовИзСписка(МассивДокументов, Операция, ДинамическийСписок);
		
	КонецЕсли;
	
КонецПроцедуры

// Подтверждает получение КиЗ или маркированной продукции выбранных в списке документов
//
// Параметры:
//  ДинамическийСписок	 - ЭлементФормы - динамический список, из которого вызвана команда.
//
Процедура ПодтвердитьПолучениеДляДокументовИзСписка(ДинамическийСписок) Экспорт
	
	ДокументыКПодтверждению = Новый СписокЗначений;
	
	ТипЗаявкаНаВыпускКиЗГИСМ = Тип("ДокументСсылка.ЗаявкаНаВыпускКиЗГИСМ");
	ТипУведомлениеОПоступленииМаркированныхТоваровГИСМ = Тип("ДокументСсылка.УведомлениеОПоступленииМаркированныхТоваровГИСМ");
	ПодтвердитеПолучение = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПодтвердитеПолучение");
	
	Для Каждого ВыделеннаяСтрока Из ДинамическийСписок.ВыделенныеСтроки Цикл
		
		Если  ТипЗнч(ВыделеннаяСтрока) <> ТипЗаявкаНаВыпускКиЗГИСМ
			И ТипЗнч(ВыделеннаяСтрока) <> ТипУведомлениеОПоступленииМаркированныхТоваровГИСМ Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки = ДинамическийСписок.ДанныеСтроки(ВыделеннаяСтрока);
		
		Если ДанныеСтроки.ДальнейшееДействиеГИСМ = ПодтвердитеПолучение Тогда
			ДокументыКПодтверждению.Добавить(ВыделеннаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДокументыКПодтверждению.Количество() > 0 Тогда
		
		Контекст = Новый Структура;
		Контекст.Вставить("ДинамическийСписок", ДинамическийСписок);
		
		ПараметрыФормы = Новый Структура("ДокументыКПодтверждению", ДокументыКПодтверждению);
		ОткрытьФорму(
			"Обработка.ПодтверждениеПоступившихКиЗГИСМ.Форма.Форма",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ПодтвердитьПоступление_ПослеПолученияДокументовКПодтверждению", ЭтотОбъект, Контекст));
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'В указанных строках нет документов, для которых требуется подтверждение поступления КиЗ.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность выбора пользоватем строк динамического списка при выполнени определенной команды.
//
// Параметры:
//  Форма	          - УправляемаяФорма - Форма, в которой находится динамический список.
//  ИмяСписка       - ЭлементФормы - элемент формы, содержащий динамический список, в котором для выбираются строки.
//  ПоТекущейСтроке - Булево - Ложь, если проверяется множественный выбор, истина в обратном случае.
// 
// Возвращаемое значение:
//  Булево - Истина, если выбор корректнен. Ложь если выбор не позволит выполнить команду.
//
Функция ВыборСтрокиДинамическогоСпискаКорректен(Форма, ИмяСписка, ПоТекущейСтроке = Ложь) Экспорт
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	Если ПоТекущейСтроке Тогда
		
		Если ТипЗнч(Форма.Элементы[ИмяСписка].ТекущаяСтрока) <> ТипГруппировка И Форма.Элементы[ИмяСписка].ТекущиеДанные <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		Для Каждого Элемент Из Форма.Элементы[ИмяСписка].ВыделенныеСтроки Цикл
			Если ТипЗнч(Элемент) <> ТипГруппировка Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсныеФункции

// Устанавливает отбор строк в табличной части докукумента или обработки.
//
// Параметры:
//  Форма          - УправляемаяФорма - форма, для одной из ТЧ, которой устанавливается отбор.
//  ИмяТЧ          - Строка - имя табличной, для которой устанавливается отбор строк.
//  ЗначениеОтбора - Произвольный - значение отбор.
//  Команда        - КомандаФормы - команда, которую выполнил пользователь для установки отбора.
//
Процедура УстановитьОтборСтрокВТЧ(Форма, ИмяТЧ, ЗначениеОтбора, Команда) Экспорт
	
	Если ЗначениеОтбора = Форма.ЗначениеОтбораСтрок Тогда
		Отбор = Неопределено;
	ИначеЕсли ЗначениеОтбора = Истина Тогда
		Отбор = Новый ФиксированнаяСтруктура("ЕстьПроблема", ЗначениеОтбора);
	Иначе
		Отбор = Новый ФиксированнаяСтруктура("СостояниеПодтверждения", ЗначениеОтбора);
	КонецЕсли;
	
	Форма.Элементы[ИмяТЧ].ОтборСтрок = Отбор;
	Форма.ЗначениеОтбораСтрок = ?(Отбор = Неопределено, Неопределено, ЗначениеОтбора);
	
	Для Каждого ЭлементКоманда Из Форма.Элементы.УстановитьОтбор.ПодчиненныеЭлементы Цикл
		
		Если Отбор = Неопределено Тогда
			ЭлементКоманда.Пометка = Ложь;
		Иначе
			ЭлементКоманда.Пометка = (ЭлементКоманда.ИмяКоманды = Команда.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму протокола обмена
//
// Параметры:
//  Документ        - ДокументСсылка - документ, для которого открывается протокол обмена.
//  ФормаВладелец   - УправляемаяФорма, Неопределено - форма, которая будет являться владельцем формы протокола обмена.
//
Процедура ОткрытьПротоколОбмена(Документ, ФормаВладелец = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Документ);
	
	ОткрытьФорму(
		"Справочник.ГИСМПрисоединенныеФайлы.Форма.ФормаПротоколОбмена",
		ПараметрыФормы,
		ФормаВладелец,
		Новый УникальныйИдентификатор,
		ВариантОткрытияОкна.ОтдельноеОкно,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Получает GLN с сервиса ГИСМ по данным ИНН и КПП контрагента.
// Параметры:
//  Форма - УправляемаяФорма - форма, из которой выполняется получение GLN.
//
Процедура ПолучитьGLNПоИННКПП(Форма) Экспорт
	
	ОчиститьСообщения();
	
	Контрагент = Форма.Объект.Контрагент;
	Данные = ИнтеграцияГИСМВызовСервера.ИННКПППоКонтрагенту(Контрагент);
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Контрагент""'"), Форма.Объект.Ссылка, "Объект.Контрагент");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.ИНН) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен ИНН контрагента'"), Форма.Объект.Ссылка, "Объект.Контрагент");
		Возврат;
	КонецЕсли;
	
	СообщениеЗапросаGLN = ИнтеграцияГИСМВызовСервера.СообщениеЗапросаGLN(Форма.Объект.Организация, Данные.ИНН, Данные.КПП);
	Если ЗначениеЗаполнено(СообщениеЗапросаGLN.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеЗапросаGLN.ТекстОшибки, Форма.Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	Сообщения = Новый Массив;
	Сообщения.Добавить(СообщениеЗапросаGLN);
	СообщенияПоОрганизациям = ИнтеграцияГИСМКлиент.СообщенияПоОрганизациям(Сообщения);
	
	Данные = ИнтеграцияГИСМКлиент.СообщенияСледующейОрганизацииКПодписанию(СообщенияПоОрганизациям);
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", Форма);
	
	ИнтеграцияГИСМКлиент.Подписать(
		Данные.Сообщения,
		Данные.Организация,
		Новый ОписаниеОповещения("ПолучитьGLNПоИННКПП_ПриЗавершенииОперацииПодписи", ЭтотОбъект, Контекст));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик завершения подписи при запросе списка входящих документов и квитанций.
//
// Параметры:
//  Сообщения                - Массив - содержит передаваемые сообщения.
//  ДополнительныеПараметры  - Структура - содержит дополнительные параметры обработчика.
//
Процедура НачатьВыполнениеОбмена_ПриЗавершенииОперацииПодписи(Сообщения, ДополнительныеПараметры) Экспорт
	
	Если Сообщения = Неопределено Тогда
		
		ОповеститьПользователяОРезультатахВыполненияОбмена(ДополнительныеПараметры.Изменения);
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Сообщение Из Сообщения Цикл
		ДополнительныеПараметры.ПодписанныеСообщения.Добавить(Сообщение);
	КонецЦикла;
	
	Данные = ИнтеграцияГИСМКлиент.СообщенияСледующейОрганизацииКПодписанию(ДополнительныеПараметры.СообщенияПоОрганизациям);
	Если Данные = Неопределено Тогда
		
		Результат = ИнтеграцияГИСМВызовСервера.ОбработатьПодписанныеСообщенияЗапросыСписковВходящихДокументовИКвитанций(
			ДополнительныеПараметры.ПодписанныеСообщения);
		
		ВыполнитьОбновлениеСписков = Ложь;
		Для Каждого ЭлементДанных Из Результат.Изменения Цикл
			
			ДополнительныеПараметры.Изменения.Добавить(ЭлементДанных);
			
			Выполнено = ЭлементДанных.Выполнено;
			Документ  = ЭлементДанных.Документ;
			Основание = ЭлементДанных.Основание;
			
			Если Выполнено Тогда
				
				ВыполнитьОбновлениеСписков = Истина;
				
				ПараметрОповещения = Новый Структура;
				ПараметрОповещения.Вставить("Ссылка",    Документ);
				ПараметрОповещения.Вставить("Основание", Основание);
				Оповестить("ИзменениеСостоянияГИСМ", ПараметрОповещения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Результат.ИнформацияОВерсиях <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(Результат.ИнформацияОВерсиях.ТекстСообщения) Тогда
				Если Результат.ИнформацияОВерсиях.ТребуетсяОбновление Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ИнформацияОВерсиях.ТекстСообщения);
				Иначе
					ПоказатьОповещениеПользователя(Результат.ИнформацияОВерсиях.ТекстСообщения,,НСтр("ru = 'Версия обмена обновлена'"), БиблиотекаКартинок.Информация32);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыполнитьОбновлениеСписков Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("ОбновлятьСтатусГИСМФормахВДокументах", Ложь);
			Оповестить("ВыполненОбменГИСМ", ПараметрОповещения);
			
		КонецЕсли;
		
		ОбработатьСообщенияНаПолучениеВходящихДокументов(Результат.СообщенияXML, ДополнительныеПараметры.Изменения);
		Возврат;
		
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СообщенияПоОрганизациям", Данные.СообщенияПоОрганизациям);
	Контекст.Вставить("ПодписанныеСообщения", ДополнительныеПараметры.ПодписанныеСообщения);
	Контекст.Вставить("Изменения", ДополнительныеПараметры.Изменения);
	
	ИнтеграцияГИСМКлиент.Подписать(
		Данные.Сообщения,
		Данные.Организация,
		Новый ОписаниеОповещения("НачатьВыполнениеОбмена_ПриЗавершенииОперацииПодписи", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Обработчик завершения подписи при непосредственном получении входящих документов, по ранее полученному списку документов к загрузке.
//
// Параметры:
//  Сообщения                - Массив - содержит передаваемые сообщения.
//  ДополнительныеПараметры  - Структура - содержит дополнительные параметры обработчика.
//
Процедура ОбработатьСообщенияНаПолучениеВходящихДокументов_ПриЗавершенииОперацииПодписи(Сообщения, ДополнительныеПараметры) Экспорт
	
	Если Сообщения = Неопределено Тогда
		
		ОповеститьПользователяОРезультатахВыполненияОбмена(ДополнительныеПараметры.Изменения);
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Сообщение Из Сообщения Цикл
		ДополнительныеПараметры.ПодписанныеСообщения.Добавить(Сообщение);
	КонецЦикла;
	
	Данные = ИнтеграцияГИСМКлиент.СообщенияСледующейОрганизацииКПодписанию(ДополнительныеПараметры.СообщенияПоОрганизациям);
	Если Данные = Неопределено Тогда
		
		Результат = ИнтеграцияГИСМВызовСервера.ОбработатьПодписанныеСообщенияПолучитьВходящиеДокументы(
			ДополнительныеПараметры.ПодписанныеСообщения);
		
		ВыполнитьОбновлениеСписков = Ложь;
		Для Каждого ЭлементДанных Из Результат.Изменения Цикл
			
			ДополнительныеПараметры.Изменения.Добавить(ЭлементДанных);
			
			Выполнено = ЭлементДанных.Выполнено;
			Документ  = ЭлементДанных.Документ;
			Основание = ЭлементДанных.Основание;
			
			Если Выполнено Тогда
				
				ВыполнитьОбновлениеСписков = Истина;
				
				ПараметрОповещения = Новый Структура;
				ПараметрОповещения.Вставить("Ссылка",    Документ);
				ПараметрОповещения.Вставить("Основание", Основание);
				Оповестить("ИзменениеСостоянияГИСМ", ПараметрОповещения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыполнитьОбновлениеСписков Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("ОбновлятьСтатусГИСМФормахВДокументах", Ложь);
			Оповестить("ВыполненОбменГИСМ", ПараметрОповещения);
			
		КонецЕсли;
		
		ОповеститьПользователяОРезультатахВыполненияОбмена(ДополнительныеПараметры.Изменения);
		Возврат;
		
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СообщенияПоОрганизациям", Данные.СообщенияПоОрганизациям);
	Контекст.Вставить("ПодписанныеСообщения", ДополнительныеПараметры.ПодписанныеСообщения);
	Контекст.Вставить("Изменения", ДополнительныеПараметры.Изменения);
	
	ИнтеграцияГИСМКлиент.Подписать(
		Данные.Сообщения,
		Данные.Организация,
		Новый ОписаниеОповещения("ОбработатьСообщенияНаПолучениеВходящихДокументов_ПриЗавершенииОперацииПодписи", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Обработчик завершения выбора пользователем документов к потдверждению.
//
// Параметры:
//  ДокументыКПодтверждению - СписокЗначений - список документов, по которым передаются потдверждения.
//  ДополнительныеПараметры - Структура - содержит дополнительные параметры обработчика.
//
Процедура ПодтвердитьПоступление_ПослеПолученияДокументовКПодтверждению(ДокументыКПодтверждению, ДополнительныеПараметры) Экспорт
	
	Если ДокументыКПодтверждению = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияГИСМКлиент.ПодготовитьСообщенияКПередачеДляДокументовИзСписка(
		ДокументыКПодтверждению,
		ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаПодтверждения"),
		ДополнительныеПараметры.ДинамическийСписок);
	
КонецПроцедуры

// Обработчик завершения подписи при запросе GLN по данным контрагента.
//
// Параметры:
//  Сообщения               - Массив - массив, содержащий одно сообщение с запросом GLN.
//  ДополнительныеПараметры - Структура - содержит дополнительные параметры обработчика.
//
Процедура ПолучитьGLNПоИННКПП_ПриЗавершенииОперацииПодписи(Сообщения, ДополнительныеПараметры) Экспорт
	
	Если Сообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Сообщения.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ИнтеграцияГИСМВызовСервера.ОбработатьПодписанноеСообщениеЗапросаGLN(Сообщения[0]);
	
	Если ЗначениеЗаполнено(Результат.GLN) Тогда
		ДополнительныеПараметры.Форма.Объект.GLNКонтрагента = Результат.GLN;
	КонецЕсли;
	
КонецПроцедуры


// Выполняет подпись сообщений обмена с ГИСМ от имени организации.
//
// Параметры:
//  Сообщения                - Массив - массив сообщений, которые необходимо подписать.
//  Организация              - ОпределяемыйТип.Организация - организация, от имени которой отправляются сообщения.
//  ОповещениеПриЗавершении  - ОписаниеОповещения - оповещение, которое будет выполнено после завершения процесса подписи.
//
Процедура Подписать(Сообщения, Организация, ОповещениеПриЗавершении) Экспорт
	
	КоличествоСообщений = Сообщения.Количество();
	Если КоличествоСообщений = 1 Тогда
		ЗаголовокДанных = НСтр("ru = 'Сообщение'");
	Иначе
		ЗаголовокДанных = НСтр("ru = 'Сообщения'");
	КонецЕсли;
	
	НаборДанныхДляПодписания = Новый Массив;
	Для Каждого Сообщение Из Сообщения Цикл
		
		Данные = Новый Структура;
		Данные.Вставить("КонвертSOAP",      Сообщение.КонвертSOAP);
		Данные.Вставить("Сообщение",        Сообщение);
		Данные.Вставить("ПараметрыXMLDSig", ИнтеграцияГИСМКлиентСервер.ПараметрыXMLDSig());
		
		ПредставлениеДанных = Новый Структура;
		ПредставлениеДанных.Вставить("Значение",      Новый ОписаниеОповещения("ПодписатьПоказатьТекстСообщенияXML", ЭтотОбъект, Сообщение));
		ПредставлениеДанных.Вставить("Представление", Сообщение.Описание);
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Данные",        Данные);
		СтруктураДанные.Вставить("Представление", ПредставлениеДанных);
		
		НаборДанныхДляПодписания.Добавить(СтруктураДанные);
		
	КонецЦикла;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Обмен с ГИСМ'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     ЗаголовокДанных);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	
	Сертификаты = ИнтеграцияГИСМВызовСервера.СертификатыПользователяДляПодписиПоОрганизации(Организация);
	Если Сертификаты.Количество() > 0 Тогда
		ОписаниеДанных.Вставить("ОтборСертификатов", Сертификаты);
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'В информационной базе для пользователя %1 не найдено зарегистрированных сертификатов
				            |электронной подписи, связанных с организацией %2, необходимых для обмена с ГИСМ.'"),
				ПользователиКлиентСервер.АвторизованныйПользователь(), Организация));
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	ОписаниеДанных.Вставить("ВыполнятьНаСервере",  Неопределено);
	ОписаниеДанных.Вставить("НаборДанных",         НаборДанныхДляПодписания);
	ОписаниеДанных.Вставить("ПредставлениеНабора", СтрШаблон(НСтр("ru = 'Показать (%1)'"), КоличествоСообщений));
	
	ДанныеДляОповещения = Новый Структура;
	ДанныеДляОповещения.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДанныеДляОповещения.Вставить("Сообщения", Сообщения);
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ЭтотОбъект, Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект, ДанныеДляОповещения));
	
КонецПроцедуры

// Обработчик завершения подписи.
//
// Параметры:
//  Результат - Структура - содержит свойство "Успех", оно установлено в Истина, если подпись была выполнена.
//  ДополнительныеПараметры - Структура - содержит дополнительные параметры обработчика.
//
Процедура ПодписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		
		Сообщения = Новый Массив;
		
		Для Каждого ТекущийЭлементНабораДанных Из Результат.НаборДанных Цикл
			
			СвойстваПодписи = ТекущийЭлементНабораДанных.СвойстваПодписи;
			
			Сообщение = ТекущийЭлементНабораДанных.Данные.Сообщение;
			Сообщение.Вставить("СвойстваПодписи", СвойстваПодписи);
			
			Сообщения.Добавить(Сообщение);
			
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Сообщения);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры


// Обработчик завершения подписи, который отображает форму передаваемого сообщения в формате XML/
//
// Параметры:
//  Результат	 - Булево    - не анализуруется в данной процедуре.
//  Сообщение	 - Структура - см. описание в ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML.
//
Процедура ПодписатьПоказатьТекстСообщенияXML(Результат, Сообщение) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сообщение", Сообщение);
	
	ОткрытьФорму("Справочник.ГИСМПрисоединенныеФайлы.Форма.ФормаПодписываемоеСообщение", ПараметрыФормы);
	
КонецПроцедуры

// Проверяет подпись, указанную пользователем при выполнении обмена.
//
// Параметры:
//  Сообщение                - СправочникСсылка.ГИСМПрисоединенныеФайлы - подписываемое сообщение.
//  ОповещениеПриЗавершении  - ОписаниеОповещения - описание обработчика, который будет вызван при закрытии формы проверки подписи.
//
Процедура ПроверитьПодпись(Сообщение, ОповещениеПриЗавершении) Экспорт
	
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("КонвертSOAP",      ИнтеграцияГИСМВызовСервера.КонвертSOAPИзПротокола(Сообщение));
	ИсходныеДанные.Вставить("ПараметрыXMLDSig", ИнтеграцияГИСМКлиентСервер.ПараметрыXMLDSig());
	
	ЭлектроннаяПодписьКлиент.ПроверитьПодпись(
		ОповещениеПриЗавершении, ИсходныеДанные, Неопределено);
	
КонецПроцедуры

// Из соотвествия с сообщениями организаций, исключает первое, как отработанное.
//
// Параметры:
//  СообщенияПоОрганизациям - Соответствие - содержит организации и массивы сообщений по ним.
//
// Возвращаемое значение:
//  Соответствие - теперь содержит только те организации и их сообщения которые не подписаны.
//
Функция СообщенияСледующейОрганизацииКПодписанию(СообщенияПоОрганизациям) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Организация");
	ВозвращаемоеЗначение.Вставить("Сообщения");
	ВозвращаемоеЗначение.Вставить("СообщенияПоОрганизациям", Новый Соответствие);
	
	Индекс = 0;
	Для Каждого КлючИЗначение Из СообщенияПоОрганизациям Цикл
		
		Организация = КлючИЗначение.Ключ;
		Сообщения = КлючИЗначение.Значение;
		
		Индекс = Индекс + 1;
		
		Если Индекс = 1 Тогда
			ВозвращаемоеЗначение.Организация = Организация;
			ВозвращаемоеЗначение.Сообщения   = Сообщения;
		Иначе
			ВозвращаемоеЗначение.СообщенияПоОрганизациям.Вставить(Организация, Сообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Индекс = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
КонецФункции

// Из массива сообщений формирует соответствие, группируя сообщения по организациям.
//
// Параметры:
//  Сообщения - Массив - массив сообщений к обработке.
// 
// Возвращаемое значение:
//  Соответствие - В качестве ключа выступают организации, в качестве значений массивы сообщений по данной организации.
//
Функция СообщенияПоОрганизациям(Сообщения) Экспорт
	
	СообщенияПоОрганизациям = Новый Соответствие;
	
	Для Каждого Сообщение Из Сообщения Цикл
		
		Если ЗначениеЗаполнено(Сообщение.ТекстОшибки) Тогда
			ЗаголовокСообщения = СтрШаблон(НСтр("ru = 'Сообщение ""%1"" не подготовлено к отправке в ГИСМ:'"), Сообщение.Описание) + Символы.ПС;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗаголовокСообщения + Сообщение.ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Сообщения = СообщенияПоОрганизациям.Получить(Сообщение.Организация);
		Если Сообщения = Неопределено Тогда
			Сообщения = Новый Массив;
		КонецЕсли;
		
		Сообщения.Добавить(Сообщение);
		
		СообщенияПоОрганизациям.Вставить(Сообщение.Организация, Сообщения);
		
	КонецЦикла;
	
	Возврат СообщенияПоОрганизациям;
	
КонецФункции

// Подготавливает сообщения по выбранным строкам в динамическом списке.
//
// Параметры:
//  ВходящиеДанные     - Массив - массив документов, по которым подготавливаются сообщения.
//  Операция           - ПеречислениеСсылка.ОперацииОбменаГИСМ - выполняемая операция.
//  ДинамическийСписок - ЭлементФормы - динамический список, в котором выполняется операция.
//
Процедура ПодготовитьСообщенияКПередачеДляДокументовИзСписка(ВходящиеДанные, Операция, ДинамическийСписок = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	Если ВходящиеДанные.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	Сообщения = ИнтеграцияГИСМВызовСервера.СообщенияКПередачеXML(ВходящиеДанные, Операция);
	
	СообщенияПоОрганизациям = СообщенияПоОрганизациям(Сообщения);
	
	Данные = СообщенияСледующейОрганизацииКПодписанию(СообщенияПоОрганизациям);
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Операция", Операция);
	Контекст.Вставить("ДинамическийСписок", ДинамическийСписок);
	Контекст.Вставить("СообщенияПоОрганизациям", Данные.СообщенияПоОрганизациям);
	
	Подписать(
		Данные.Сообщения,
		Данные.Организация,
		Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеДляДокументовИзСписка_ПриЗавершенииОперацииПодписи", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Обработчик закрытия формы подписи передаваемых сообщений.
//
// Параметры:
//  Сообщения               - Массив - готовящиеся к передаче сообщения.
//  ДополнительныеПараметры - ДополнительныеПараметры - структура, содержащая дополнительные параметры.
//
Процедура ПодготовитьСообщенияКПередачеДляДокументовИзСписка_ПриЗавершенииОперацииПодписи(Сообщения, ДополнительныеПараметры) Экспорт
	
	Если Сообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ИнтеграцияГИСМВызовСервера.ПодготовитьСообщенияКПередаче(Сообщения);
	
	КоличествоВсего = Результат.Количество();
	КоличествоОбработанных = 0;
	Для Каждого ЭлементДанных Из Результат Цикл
		
		Выполнено = ЭлементДанных.Выполнено;
		Документ  = ЭлементДанных.Документ;
		Основание = ЭлементДанных.Основание;
		
		Если Выполнено Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Ссылка",    Документ);
			ПараметрОповещения.Вставить("Основание", Основание);
			Оповестить("ИзменениеСостоянияГИСМ", ПараметрОповещения);
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОповеститьПользователяОВыполненнойОперации(
		ДополнительныеПараметры.ДинамическийСписок,
		КоличествоОбработанных,
		КоличествоВсего, ДополнительныеПараметры.Операция);
	
	Данные = СообщенияСледующейОрганизацииКПодписанию(ДополнительныеПараметры.СообщенияПоОрганизациям);
	Если Данные = Неопределено Тогда
		
		Если КоличествоОбработанных > 0 Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("ОбновлятьСтатусГИСМФормахВДокументах", Ложь);
			Оповестить("ВыполненОбменГИСМ", ПараметрОповещения);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Операция", ДополнительныеПараметры.Операция);
	Контекст.Вставить("ДинамическийСписок", ДополнительныеПараметры.ДинамическийСписок);
	Контекст.Вставить("СообщенияПоОрганизациям", Данные.СообщенияПоОрганизациям);
	
	Подписать(
		Данные.Сообщения,
		Данные.Организация,
		Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеДляДокументовИзСписка_ПриЗавершенииОперацииПодписи", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Готовит сообщение по документу к передаче в сервис ГИСМ, согласно указанной операции.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому готовится сообщение.
//  Операция       - ПеречислениеСсылка.ОперацииОбменаГИСМ - выполняемая операция обмена.
//
Процедура ПодготовитьСообщениеКПередаче(ДокументСсылка, Операция) Экспорт
	
	ОчиститьСообщения();
	
	Сообщения = ИнтеграцияГИСМВызовСервера.СообщениеКПередачеXML(ДокументСсылка, Операция);
	
	Если Сообщения = Неопределено И Операция <> Неопределено Тогда
		ПоказатьПредупреждение(,СтрШаблон(НСтр("ru = 'По операции ""%1"" передача данных в ГИСМ не требуется'"), Операция));
	КонецЕсли;
	Если Сообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Сообщение Из Сообщения Цикл
		Если ЗначениеЗаполнено(Сообщение.ТекстОшибки) Тогда
			ЗаголовокСообщения = СтрШаблон(НСтр("ru = 'Сообщение ""%1"" не подготовлено к отправке в ГИСМ:'"), Сообщение.Описание) + Символы.ПС;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗаголовокСообщения + Сообщение.ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Организация = Неопределено;
	Для Каждого Сообщение Из Сообщения Цикл
		Организация = Сообщение.Организация;
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Операция", Операция);
	
	Подписать(
		Сообщения,
		Организация,
		Новый ОписаниеОповещения("ПодготовитьСообщениеКПередаче_ПриЗавершенииОперацииПодписи", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

// Обработчик закрытия формы подписи передаваемого сообщения при отправке из формы документа.
//
// Параметры:
//  Сообщения               - Массив - содержит одно подготавливаемое к отправке сообщение.
//  ДополнительныеПараметры - ДополнительныеПараметры - структура, содержащая дополнительные параметры.
//
Процедура ПодготовитьСообщениеКПередаче_ПриЗавершенииОперацииПодписи(Сообщения, ДополнительныеПараметры) Экспорт
	
	Если Сообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ИнтеграцияГИСМВызовСервера.ПодготовитьСообщенияКПередаче(Сообщения);
	
	Операция = ДополнительныеПараметры.Операция;
	
	ВыполнитьОбновлениеСписков = Ложь;
	Для Каждого ЭлементДанных Из Результат Цикл
		
		Выполнено          = ЭлементДанных.Выполнено;
		ИсходящееСообщение = ЭлементДанных.ИсходящееСообщение;
		Документ           = ЭлементДанных.Документ;
		Основание          = ЭлементДанных.Основание;
		
		Если Не Выполнено Тогда
			
			ТекстЗаголовка = НСтр("ru='При подготовке сообщения к передаче в ГИСМ возникла ошибка:'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстЗаголовка + Символы.ПС + ЭлементДанных.ТекстОшибки);
			
		Иначе
			
			ТекстЗаголовка = НСтр("ru='Сообщение подготовлено к передаче в ГИСМ'");
			Если Операция = ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаДанных") Тогда
				ТекстСообщения = НСтр("ru='Для документа %Документ% подготовлено к отправке сообщение передачи данных'");
			ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявки") Тогда
				ТекстСообщения = НСтр("ru='Для документа %Документ% подготовлено к отправке сообщение о закрытии заявки'");
			ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаПодтверждения") Тогда
				ТекстСообщения = НСтр("ru='Для документа %Документ% подготовлено к отправке подтверждение о поступлении товаров'");
			КонецЕсли;
			
			ВыполнитьОбновлениеСписков = Истина;
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Ссылка",    Документ);
			ПараметрОповещения.Вставить("Основание", Основание);
			Оповестить("ИзменениеСостоянияГИСМ", ПараметрОповещения);
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Документ);
			
			ПоказатьОповещениеПользователя(
				ТекстЗаголовка,
				ПолучитьНавигационнуюСсылку(ИсходящееСообщение),
				ТекстСообщения,
				БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыполнитьОбновлениеСписков Тогда
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("ОбновлятьСтатусГИСМФормахВДокументах", Ложь);
		Оповестить("ВыполненОбменГИСМ", ПараметрОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура показывает оповещение после обработки статусов выделенных в списке документов
//
// Параметры:
//	СписокДокументов       - ДинамическийСписок - элемент формы
//	КоличествоОбработанных - Число - количество успешно обработанных документов
//	КоличествоВсего 	   - Число - количество выделенных в списке документов
//	Статус                 - Строка - устанавливаемый статус
//
Процедура ОповеститьПользователяОВыполненнойОперации(СписокДокументов, КоличествоОбработанных, КоличествоВсего, Операция) Экспорт
	
	ТекстЗаголовка = НСтр("ru='Подготовка сообщения к передаче в ГИСМ'");
	
	Если КоличествоОбработанных > 0 Тогда
		
		Если СписокДокументов <> Неопределено Тогда
			СписокДокументов.Обновить();
		КонецЕсли;
		
		Если Операция = ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявки") Тогда
			ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке документов закрытие заявки подготовлено к отправке'");
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаПодтверждения") Тогда
			ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке документов подтверждение о поступлении подготовлено к отправке'");
		Иначе
			ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке документов данные подготовлены к отправке'");
		КонецЕсли;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Подготовлено сообщений: 0.'");
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

//Процедура показывает оповещение после обработки статусов выделенных в списке документов
//
// Параметры:
//	СписокДокументов       - ДинамическийСписок - элемент формы
//	КоличествоОбработанных - Число - количество успешно обработанных документов
//	КоличествоВсего 	   - Число - количество выделенных в списке документов
//	Статус                 - Строка - устанавливаемый статус
//
Процедура ОповеститьПользователяОРезультатахВыполненияОбмена(Изменения) Экспорт
	
	ТекстЗаголовка = НСтр("ru='Выполнение обмена с ГИСМ'");
	
	СтатусыДокументов = Новый Соответствие;
	Для Каждого ЭлементДанных Из Изменения Цикл
		
		Если Не ЭлементДанных.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭлементДанных.НовыйСтатус) Тогда
			Продолжить;
		КонецЕсли;
		
		СтатусыДокументов.Вставить(ЭлементДанных.Документ, ЭлементДанных.НовыйСтатус);
		
	КонецЦикла;
	
	Если СтатусыДокументов.Количество() = 0 Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru='Документов с измененным статусом: %1.'"), СтатусыДокументов.Количество());
		
	ИначеЕсли СтатусыДокументов.Количество() = 1 Тогда
		
		Для Каждого КлючИЗначение Из СтатусыДокументов Цикл
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(КлючИЗначение.Ключ);
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Для документа %1 изменен статус ГИСМ: %2.'"),
				КлючИЗначение.Ключ,
				КлючИЗначение.Значение);
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр("ru='Документов с измененным статусом: %1.'"), СтатусыДокументов.Количество());
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбменНаКлиенте

Процедура НачатьВыполнениеОбмена()
	
	ОчиститьСообщения();
	
	Изменения = Новый Массив;
	
	Результат = ИнтеграцияГИСМВызовСервера.СообщенияКПередачеЗапросыСписковВходящихДокументовИКвитанцийXML();
	
	ВыполнитьОбновлениеСписков = Ложь;
	Для Каждого ЭлементДанных Из Результат.Изменения Цикл
		
		Изменения.Добавить(ЭлементДанных);
		
		Выполнено = ЭлементДанных.Выполнено;
		Документ  = ЭлементДанных.Документ;
		Основание = ЭлементДанных.Основание;
		
		Если Выполнено Тогда
			
			ВыполнитьОбновлениеСписков = Истина;
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Ссылка",    Документ);
			ПараметрОповещения.Вставить("Основание", Основание);
			Оповестить("ИзменениеСостоянияГИСМ", ПараметрОповещения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СообщенияПоОрганизациям = ИнтеграцияГИСМКлиент.СообщенияПоОрганизациям(Результат.СообщенияXML);
	
	Данные = ИнтеграцияГИСМКлиент.СообщенияСледующейОрганизацииКПодписанию(СообщенияПоОрганизациям);
	Если Данные = Неопределено Тогда
		
		Если ВыполнитьОбновлениеСписков Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("ОбновлятьСтатусГИСМФормахВДокументах", Ложь);
			Оповестить("ВыполненОбменГИСМ", ПараметрОповещения);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'В информационной базе для пользователя %1 не найдено зарегистрированных сертификатов
				           |электронной подписи, необходимых для обмена с ГИСМ.
				           |Проверьте, что для сертификатов электронной подписи указаны организации с заполненным GLN.'"),
				ПользователиКлиентСервер.АвторизованныйПользователь()));
		
		ОповеститьПользователяОРезультатахВыполненияОбмена(Изменения);
		Возврат;
		
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СообщенияПоОрганизациям", Данные.СообщенияПоОрганизациям);
	Контекст.Вставить("ПодписанныеСообщения", Новый Массив);
	Контекст.Вставить("Изменения", Изменения);
	
	ИнтеграцияГИСМКлиент.Подписать(
		Данные.Сообщения,
		Данные.Организация,
		Новый ОписаниеОповещения("НачатьВыполнениеОбмена_ПриЗавершенииОперацииПодписи", ЭтотОбъект, Контекст));
	
КонецПроцедуры

Процедура ОбработатьСообщенияНаПолучениеВходящихДокументов(Сообщения, Изменения)
	
	СообщенияПоОрганизациям = ИнтеграцияГИСМКлиент.СообщенияПоОрганизациям(Сообщения);
	
	Данные = ИнтеграцияГИСМКлиент.СообщенияСледующейОрганизацииКПодписанию(СообщенияПоОрганизациям);
	Если Данные = Неопределено Тогда
		
		ОповеститьПользователяОРезультатахВыполненияОбмена(Изменения);
		Возврат;
		
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СообщенияПоОрганизациям", Данные.СообщенияПоОрганизациям);
	Контекст.Вставить("ПодписанныеСообщения", Новый Массив);
	Контекст.Вставить("Изменения", Изменения);
	
	ИнтеграцияГИСМКлиент.Подписать(
		Данные.Сообщения,
		Данные.Организация,
		Новый ОписаниеОповещения("ОбработатьСообщенияНаПолучениеВходящихДокументов_ПриЗавершенииОперацииПодписи", ЭтотОбъект, Контекст));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти