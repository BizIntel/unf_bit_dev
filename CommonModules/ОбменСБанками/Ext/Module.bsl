////////////////////////////////////////////////////////////////////////////////
// ОбменСБанками: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет, возможен ли прямой обмен с банком
//
// Параметры:
//  БИК - Строка - БИК банка
//  Проект - Число, Неопределено - Признак проекта, которые поддерживает банк.
//     * 1 - Платежные документы.
//     * 2 - Зарплатные документы.
//     * Неопределено - любой из проектов.
//  Рекомендуется - Булево - (возвращаемый параметр) - признак, что в банке поддержано автоматическое получение настроек обмена.
//
// Возвращаемое значение:
// Булево - Если Истина, то возможен прямой обмен с банком, иначе Ложь.
//
Функция ВозможенПрямойОбменСБанком(БИК, Проект = Неопределено, Рекомендуется = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Ложь;
	
	Макет = ОбменСБанкамиСлужебныйПовтИсп.СписокБанков();
	
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	
	Для Индекс = 1 По КоличествоЗаписей Цикл
		БИКБанка = Макет.Область(Индекс, 2).Текст;
		Если БИК <> БИКБанка Тогда
			Продолжить;
		КонецЕсли;
		Рекомендуется = Макет.Область(Индекс, 6).Текст = "1";
		
		Если Проект = Неопределено Тогда
			ВозвращаемоеЗначение = Истина;
			Прервать;
		КонецЕсли;
		
		ПроектыВФайлеСтрокой = Макет.Область(Индекс, 8).Текст;
		Если ЗначениеЗаполнено(ПроектыВФайлеСтрокой) Тогда
			МассивПроектовВФайле = СтрРазделить(ПроектыВФайлеСтрокой, ",", Ложь);
			ВозвращаемоеЗначение = МассивПроектовВФайле.Найти(Строка(Проект)) <> Неопределено;
		Иначе
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		Прервать;
	КонецЦикла;

	Возврат ВозвращаемоеЗначение;

КонецФункции

// Получает выписку банка в виде дерева значений.
//
// Параметры:
//  ЭлектронныеДокументы - ДокументСсылка.СообщениеОбменСБанками, Массив - содержит выписку банка;
//  ДанныеВыписки - ДеревоЗначений - содержит дерево данных выписки.
//
Процедура ПолучитьДанныеВыпискиБанкаДеревоЗначений(ЭлектронныеДокументы, ДанныеВыписки) Экспорт
	
	МассивСообщенийОбмена = Новый Массив;
	
	Если ТипЗнч(ЭлектронныеДокументы) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		
		МассивСообщенийОбмена.Добавить(ЭлектронныеДокументы);
		
	Иначе // массив
		
		МассивСообщенийОбмена = ЭлектронныеДокументы;
		
	КонецЕсли;
	
	ДанныеВыписки = Неопределено;
	
	Для Каждого СообщениеОбмена Из МассивСообщенийОбмена Цикл
	
		ДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
	
		Если Не ЗначениеЗаполнено(ДанныеЭД) Тогда
			Возврат;
		КонецЕсли;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
					
		ДанныеЭД.Записать(ИмяФайла);
		
		СтруктураДанных = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(ИмяФайла, СообщениеОбмена.Направление);
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		
		Если СтруктураДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
			
		ДополнитьДанныеВыписки(ДанныеВыписки, СтруктураДанных.ДеревоРазбора);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает выписку банка в текстовом формате, а также массив ссылок на банковские счета организаций в выписке.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками, Массив - содержит ссылку или массив ссылок на выписки банка;
//  СсылкаНаХранилище - Строка - содержит ссылку на хранилище тестовых данных;
//  МассивСчетов - Массив - содержит ссылки на банковские счета организации.
//
Процедура ПолучитьДанныеВыпискиБанкаТекстовыйФормат(Знач СообщениеОбмена, СсылкаНаХранилище, МассивСчетов) Экспорт

	Если ТипЗнч(СообщениеОбмена) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		МассивСообщений = Новый Массив;
		МассивСообщений.Добавить(СообщениеОбмена);
	Иначе
		МассивСообщений = СообщениеОбмена;
	КонецЕсли;
	
	МассивСчетов = Новый Массив;
	МассивДанных = Новый Массив;
	
	Для Каждого ВыпискаБанка Из МассивСообщений Цикл
		
		ДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(ВыпискаБанка);
		
		Если ДанныеЭД = Неопределено Тогда
			Продолжить; // нет присоединенного файла
		КонецЕсли;

		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			
		ДанныеЭД.Записать(ИмяФайла);
		РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыпискаБанка, "Направление, Организация");
		СтруктураДанных = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(ИмяФайла, РеквизитыСообщения.Направление);
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		
		Если СтруктураДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
		СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ДеревоРазбора", ДеревоРазбора);
		СтруктураДанных.Вставить("СтрокаОбъекта", СтрокаОбъекта);
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Если НЕ МассивДанных.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	Текст = Новый ЗаписьТекста(ИмяФайла, "windows-1251");

	Текст.ЗаписатьСтроку("1CClientBankExchange");
	Текст.ЗаписатьСтроку("ВерсияФормата=1.02");
	Текст.ЗаписатьСтроку("Кодировка=Windows");
	ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, "Отправитель");
	ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, "Получатель");
		
	ДатаСоздания = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаСоздания");
	Если ЗначениеЗаполнено(ДатаСоздания) Тогда
		Текст.ЗаписатьСтроку("ДатаСоздания=" + Формат(ДатаСоздания, "ДЛФ=D"));
	КонецЕсли;
	ВремяСоздания = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ВремяСоздания");
	Если ЗначениеЗаполнено(ВремяСоздания) Тогда
		Текст.ЗаписатьСтроку("ВремяСоздания=" + Формат(ВремяСоздания, "ДЛФ=D"));
	КонецЕсли;
	
	ДатаНачала = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			МассивДанных[0].ДеревоРазбора, МассивДанных[0].СтрокаОбъекта, "ДатаНачала");
	ДатаКонца = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		МассивДанных[МассивДанных.Количество()-1].ДеревоРазбора,
		МассивДанных[МассивДанных.Количество()-1].СтрокаОбъекта, "ДатаКонца");
	Текст.ЗаписатьСтроку("ДатаНачала=" + Формат(ДатаНачала, "ДЛФ=D"));
	Текст.ЗаписатьСтроку("ДатаКонца="  + Формат(ДатаКонца,  "ДЛФ=D"));

	СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
	БанковскиеСчетаОрганизаций = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
				
	Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
		НомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.РасчСчет");
		Текст.ЗаписатьСтроку("РасчСчет=" + НомерСчета);
	КонецЦикла;
		
	Текст.ЗаписатьСтроку("СекцияРасчСчет");
	Текст.ЗаписатьСтроку("ДатаНачала=" + Формат(ДатаНачала, "ДЛФ=D"));
	Текст.ЗаписатьСтроку("ДатаКонца="  + Формат(ДатаКонца,  "ДЛФ=D"));
	НомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.РасчСчет");
	ДополнительныеРеквизиты = Новый Структура("Владелец", РеквизитыСообщения.Организация);
	СчетОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
		"БанковскиеСчетаОрганизаций", НомерСчета, ДополнительныеРеквизиты);
	МассивСчетов.Добавить(СчетОрганизации);
	
	Текст.ЗаписатьСтроку("РасчСчет=" + НомерСчета);
			
	НачальныйОстаток = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		МассивДанных[0].ДеревоРазбора, МассивДанных[0].СтрокаОбъекта, "БанковскийСчет.НачальныйОстаток");
	Если ЗначениеЗаполнено(НачальныйОстаток) Тогда
		Текст.ЗаписатьСтроку("НачальныйОстаток=" + Формат(НачальныйОстаток, "ЧРД=.; ЧГ="));
	КонецЕсли;
	
	ВсегоПоступило = 0;
	ВсегоСписано = 0;
	
	Для Каждого СтруктураДанных Из МассивДанных Цикл
		СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
		БанковскиеСчетаОрганизаций = СтруктураДанных.СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
		СтрокаБанковскийСчет = БанковскиеСчетаОрганизаций[0];
		ТекВсегоПоступило = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			СтруктураДанных.ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.ВсегоПоступило");
		Если ЗначениеЗаполнено(ТекВсегоПоступило) Тогда
			ВсегоПоступило = ВсегоПоступило + ТекВсегоПоступило;
		КонецЕсли;
		ТекВсегоСписано = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			СтруктураДанных.ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.ВсегоСписано");
		Если ЗначениеЗаполнено(ТекВсегоСписано) Тогда
			ВсегоСписано = ВсегоСписано + ТекВсегоСписано;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВсегоПоступило) Тогда
		Текст.ЗаписатьСтроку("ВсегоПоступило=" + Формат(ВсегоПоступило, "ЧРД=.; ЧГ="));
	КонецЕсли;
	Если ЗначениеЗаполнено(ВсегоСписано) Тогда
		Текст.ЗаписатьСтроку("ВсегоСписано=" + Формат(ВсегоСписано, "ЧРД=.; ЧГ="));
	КонецЕсли;
	
	КонечныйОстаток = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.КонечныйОстаток");
	Если ЗначениеЗаполнено(КонечныйОстаток) Тогда
		Текст.ЗаписатьСтроку("КонечныйОстаток=" + Формат(КонечныйОстаток, "ЧРД=.; ЧГ="));
	КонецЕсли;

	Текст.ЗаписатьСтроку("КонецРасчСчет");
			
	Для Каждого СтруктураДанных Из МассивДанных Цикл

		СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
		ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
		
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			СекцияДокумент = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СекцияДокумент");
			Текст.ЗаписатьСтроку("СекцияДокумент=" + СекцияДокумент);
			Номер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Номер");
			Текст.ЗаписатьСтроку("Номер=" + Номер);
			Дата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Дата");
			Текст.ЗаписатьСтроку("Дата=" + Формат(Дата, "ДЛФ=D"));
			Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Сумма");
			Текст.ЗаписатьСтроку("Сумма=" + Формат(Сумма, "ЧРД=.; ЧГ="));
			КвитанцияДата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "КвитанцияДата");
			Если ЗначениеЗаполнено(КвитанцияДата) Тогда
				Текст.ЗаписатьСтроку("КвитанцияДата=" + Формат(КвитанцияДата, "ДЛФ=D"));
			КонецЕсли;
			КвитанцияВремя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "КвитанцияВремя");
			Если ЗначениеЗаполнено(КвитанцияВремя) Тогда
				Текст.ЗаписатьСтроку("КвитанцияВремя=" + Формат(КвитанцияВремя, "ДЛФ=T"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "КвитанцияСодержание");
			
			ПлательщикСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикСчет");
			Текст.ЗаписатьСтроку("ПлательщикСчет=" + ПлательщикСчет);
			ДатаСписано = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаСписано");
			Если ЗначениеЗаполнено(ДатаСписано) Тогда
				Текст.ЗаписатьСтроку("ДатаСписано=" + Формат(ДатаСписано, "ДЛФ=D"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик", "ПлательщикНаименование");
			ПлательщикИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикИНН");
			Текст.ЗаписатьСтроку("ПлательщикИНН=" + ПлательщикИНН);
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикКПП");
			
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикРасчСчет", "ПлательщикКоррСчетБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБанк1", "ПлательщикНаименованиеБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБанк2", "ПлательщикГородБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБИК", "ПлательщикБИКБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикКорсчет");
			ПолучательСчет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательСчет");
			Текст.ЗаписатьСтроку("ПолучательСчет=" + ПолучательСчет);
			ДатаПоступило = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаПоступило");
			Если ЗначениеЗаполнено(ДатаПоступило) Тогда
				Текст.ЗаписатьСтроку("ДатаПоступило=" + Формат(ДатаПоступило, "ДЛФ=D"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель", "ПолучательНаименование");
			ПолучательИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательИНН");
			Текст.ЗаписатьСтроку("ПолучательИНН=" + ПолучательИНН);
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательКПП");
			
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательРасчСчет", "ПолучательКоррСчетБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБанк1", "ПолучательНаименованиеБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБанк2", "ПолучательГородБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБИК", "ПолучательБИКБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательКорсчет");
			
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидПлатежа");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидОплаты");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Код");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа5");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа6");
				
			ЭтоПлатежВБюджет = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ЭтоПлатежВБюджет");
			Если ЭтоПлатежВБюджет = Истина Тогда
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "СтатусСоставителя");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательКБК");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ОКАТО", "ОКТМО");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательОснования");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательПериода");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательНомера");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательДаты");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательТипа");
			КонецЕсли;
				
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Очередность");
			СрокАкцепта = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СрокАкцепта");
			Если ЗначениеЗаполнено(СрокАкцепта) Тогда
				Текст.ЗаписатьСтроку("СрокАкцепта=" + Формат(СрокАкцепта,"ЧДЦ=0; ЧГ="));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидАккредитива");
			СрокПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СрокПлатежа");
			Если ЗначениеЗаполнено(СрокПлатежа) Тогда
				Текст.ЗаписатьСтроку("СрокПлатежа=" + Формат(СрокПлатежа, "ДЛФ=D"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "УсловиеОплаты1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "УсловиеОплаты2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "УсловиеОплаты3");

			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлатежПоПредст");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ДополнУсловия");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НомерСчетаПоставщика");
			ДатаОтсылкиДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаОтсылкиДок");
			Если ЗначениеЗаполнено(ДатаОтсылкиДок) Тогда
				ДатаОтсылкиДок = Формат(ДатаОтсылкиДок, "ДФ=dd.MM.yyyy");
				Текст.ЗаписатьСтроку("ДатаОтсылкиДок=" + Формат(ДатаОтсылкиДок, "ДЛФ=D"));
			КонецЕсли;
			Текст.ЗаписатьСтроку("КонецДокумента");
		КонецЦикла;
	КонецЦикла;
	
	Текст.ЗаписатьСтроку("КонецФайла");
	Текст.Закрыть();
	
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор());
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
	
КонецПроцедуры

// Получает дерево разбора, содержащее данные выписки.
//
// Параметры:
//  ТекстДляРазбора - Строка - текст выписки.
//
// Возвращаемое значение:
//  ДеревоЗначений - данные выписки.
//
Функция ДеревоРазбораВыпискиБанка(ТекстДляРазбора) Экспорт
	
	ПространствоИмен = "urn:1C.ru:ClientBankExchange";
	
	ClientBankExchange = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "ClientBankExchange", ПространствоИмен);
	СекцияРасчСчет = ОбменСБанкамиСлужебный.ОбъектТипаCML(
		ФабрикаXDTO, "ClientBankExchange.СекцияРасчСчет", ПространствоИмен);
	УсловияОтбора = ОбменСБанкамиСлужебный.ОбъектТипаCML(
		ФабрикаXDTO, "ClientBankExchange.УсловияОтбора", ПространствоИмен);
	
	Импорт_ТекстДляРазбора = ТекстДляРазбора;
	Импорт_КоличествоСтрок = СтрЧислоСтрок(Импорт_ТекстДляРазбора);
	Импорт_ТекущаяСтрока   = 1;
	Импорт_ПризнакОбмена = Ложь;
	Отказ = Ложь;
	
	СтруктураДокумента = СоздатьСтруктуруИзСтроки(
		  "Номер,Дата,Сумма,"
		+ "ВидПлатежа,ВидОплаты,"
		+ "КвитанцияДата,КвитанцияВремя,КвитанцияСодержание,"
		+ "ДатаСписано,"
		+ "ДатаПоступило,"
		+ "ПлательщикСчет,Плательщик,ПлательщикИНН,Плательщик1,"
		+ "ПлательщикРасчСчет,ПлательщикБанк1,ПлательщикБанк2,ПлательщикБИК,ПлательщикКорсчет,"
		+ "Плательщик2,Плательщик3,Плательщик4,"
		+ "ПолучательСчет,Получатель,ПолучательИНН,Получатель1,"
		+ "ПолучательРасчСчет,ПолучательБанк1,ПолучательБанк2,ПолучательБИК,ПолучательКорсчет,"
		+ "Получатель2,Получатель3,Получатель4,"
		+ "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,"
		+ "ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа,"
		+ "Код,"
		+ "НазначениеПлатежа,"
		+ "НазначениеПлатежа1,НазначениеПлатежа2,НазначениеПлатежа3,"
		+ "НазначениеПлатежа4,НазначениеПлатежа5,НазначениеПлатежа6,"
		+ "СрокПлатежа,Очередность,"
		+ "УсловиеОплаты1,УсловиеОплаты2,УсловиеОплаты3,"
		+ "СрокАкцепта,ВидАккредитива,ПлатежПоПредст,ДополнУсловия,"
		+ "НомерСчетаПоставщика,ДатаОтсылкиДок");
		
	СтрокаТеговСчета = "ДатаНачала,ДатаКонца,РасчСчет,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток";
	СтруктураСчета = СоздатьСтруктуруИзСтроки(СтрокаТеговСчета);
		
	ПоляДат = СоздатьСтруктуруИзСтроки("ДатаСоздания,Дата,КвитанцияДата,ДатаСписано,ДатаПоступило,"
									+ "СрокПлатежа,ДатаОтсылкиДок,ДатаНачала,ДатаКонца");
	ПоляЧисел = СоздатьСтруктуруИзСтроки("НачальныйОстаток,ВсегоПоступило,ВсегоСписано,"
									+ "КонечныйОстаток,Сумма,СрокАкцепта");
									
	СтрокаТеговЗаголовка = "ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,"
							+ "ВремяСоздания,ДатаНачала,ДатаКонца,РасчСчет";
	ПоляЗаголовка = СоздатьСтруктуруИзСтроки(СтрокаТеговЗаголовка);
	
	Пока Импорт_ТекущаяСтрока <= Импорт_КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
		
		Если Лев(ВРег(СокрЛП(Стр)), 14) = "СЕКЦИЯДОКУМЕНТ" Тогда
			
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда
				СекцияПлатежногоДокумента = ОбменСБанкамиСлужебный.ОбъектТипаCML(
					ФабрикаXDTO, "ClientBankExchange.СекцияПлатежногоДокумента", ПространствоИмен);
				ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "СекцияДокумент", Значение);
				СекцияЗагружена = ЗагрузитьСекциюДокумента(
									СекцияПлатежногоДокумента,
									Импорт_ТекущаяСтрока,
									Импорт_КоличествоСтрок,
									Импорт_ТекстДляРазбора,
									СтруктураДокумента,
									ПоляДат,
									ПоляЧисел);
				Если НЕ СекцияЗагружена Тогда
					Возврат Неопределено;
				Иначе
					ClientBankExchange.СекцияПлатежногоДокумента.Добавить(СекцияПлатежногоДокумента);
				КонецЕсли;
				
			Иначе
				Сообщение = Новый СообщениеПользователю;
				ТекстОшибки = НСтр("ru = 'Нарушена структура файла импорта, строка %1 : %2'");
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																						ТекстОшибки,
																						Импорт_ТекущаяСтрока - 1,
																						Стр);
				Сообщение.Сообщить();
				Возврат Неопределено;
			КонецЕсли;
			
		ИначеЕсли Лев(ВРег(СокрЛП(Стр)), 14) = "СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			СчетЗагружен = ЗагрузитьСекциюРасчСчета(СекцияРасчСчет,
													Импорт_ТекущаяСтрока,
													Импорт_КоличествоСтрок,
													Импорт_ТекстДляРазбора,
													СтруктураСчета,
													ПоляДат,
													ПоляЧисел);
			
			Если НЕ СчетЗагружен Тогда
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщения = НСтр("ru = 'Нарушена структура файла импорта в секции описания расчетного счета. Строка: %1'");
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	ТекстСообщения,
																	Импорт_ТекущаяСтрока - 1);
				Сообщение.Сообщить();
				Возврат Неопределено;
			КонецЕсли;

		ИначеЕсли Лев(ВРег(СокрЛП(Стр)), 10) = "КОНЕЦФАЙЛА" Тогда
			Если НЕ Импорт_ПризнакОбмена Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'В файле импорта отсутствует признак обмена ""1CClientBankExchange"".'");
				Сообщение.Сообщить();
				Возврат Неопределено;
			КонецЕсли;
			НайденКонецФайла = Истина;
			НомерСтроки = 0;
		ИначеЕсли Лев(ВРег(СокрЛП(Стр)), 20) = "1CCLIENTBANKEXCHANGE" Тогда
			Импорт_ПризнакОбмена = Истина;
		Иначе
			Поля = Новый Структура("ПоляЗаголовка, ПоляДат, ПоляЧисел", ПоляЗаголовка, ПоляДат, ПоляЧисел);
			ЗагрузитьСтрокуЗаголовка(ClientBankExchange, УсловияОтбора, Стр, Импорт_ТекущаяСтрока, Поля, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если НЕ НайденКонецФайла Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Файл загрузки не соответствует стандарту (не найдена секция КонецФайла).'");
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ClientBankExchange, "СекцияРасчСчет", СекцияРасчСчет);
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ClientBankExchange, "УсловияОтбора",  УсловияОтбора);
	
	Если ClientBankExchange.Отправитель = Неопределено Тогда
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ClientBankExchange, "Отправитель", "Клиент-банк");
	КонецЕсли;
	
	Если ClientBankExchange.Получатель = Неопределено Тогда
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ClientBankExchange, "Получатель", "1С:Предприятие");
	КонецЕсли;
	
	Попытка
		ClientBankExchange.Проверить();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат Неопределено;
	КонецПопытки;
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ОбменСБанкамиСлужебный.ВыгрузитьЭДВФайл(ФабрикаXDTO, ClientBankExchange, ВремФайл);
	
	СтруктураДанных = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(ВремФайл, Перечисления.НаправленияЭД.Входящий);
	
	Если ОбменСБанкамиСлужебный.ФайлИзменен(ФабрикаXDTO, ClientBankExchange, ВремФайл) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтруктураДанных.ДеревоРазбора;
	
КонецФункции

// Добавление команд ЭДО в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - текущая форма.
//  МестоРазмещенияКомандПоУмолчанию - ГруппаФормы - группа подменю для добавления команд.
//  ТолькоВМенюЕще - Булево - признак размещения команд в меню "Еще".
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКомандПоУмолчанию = Неопределено, ТолькоВМенюЕще = Ложь) Экспорт
	
	ЭлектронноеВзаимодействиеСлужебный.РазместитьНаФормеКомандыЭДО(
		Форма, МестоРазмещенияКомандПоУмолчанию, "ОбменСБанками", , ТолькоВМенюЕще);
	
КонецПроцедуры

// Формирование команд ЭДО.
//
// Параметры:
//  ПолноеИмя - Строка - имя объекта, например "Документ.РеализацияТоваровУслуг";
//  КомандыЭДО - ТаблицаЗначений - подготавливаемый список команд ЭДО;
//  НаправлениеЭД - Перечисление.НаправлениеЭД - параметр отбора входящих или исходящих документов;
//  ТолькоВМенюЕще - Булево - признак размещения команд в меню "Еще".
//
Процедура СформироватьКомандыЭДО(ПолноеИмя, КомандыЭДО, НаправлениеЭД = Неопределено, ТолькоВМенюЕще = Ложь) Экспорт
	
	СоставКоманд = Новый Массив;
	ОбменСБанкамиПереопределяемый.ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКоманд);
	
	ЗначениеФОИспользоватьОбменСБанками = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");
	
	ЕстьПравоПросмотраЭД = Пользователи.ЭтоПолноправныйПользователь()
		ИЛИ Пользователи.РолиДоступны("ЧтениеЭД");
		
	ЕстьПравоОбменаЭД = Пользователи.ЭтоПолноправныйПользователь()
		ИЛИ Пользователи.РолиДоступны("ВыполнениеОбменаЭД");
		
	Если СоставКоманд.Найти(ПолноеИмя) <> Неопределено Тогда
		
		Если ЗначениеФОИспользоватьОбменСБанками Тогда
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ОбменСБанкамиСлужебныйКлиент.ОткрытьАктуальныйЭД";
			КомандаЭДО.СписокФорм = "";
			КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
			КомандаЭДО.Порядок = 10;
			КомандаЭДО.Картинка = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна = Не ЕстьПравоПросмотраЭД;
			КомандаЭДО.ТолькоВоВсехДействиях = ТолькоВМенюЕще;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ОбменСБанкамиСлужебныйКлиент.СформироватьЭД";
			КомандаЭДО.СписокФорм = "";
			КомандаЭДО.Идентификатор = "СформироватьЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Создать электронный документ'");
			КомандаЭДО.Порядок = 11;
			КомандаЭДО.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна = Не ЕстьПравоОбменаЭД;
			КомандаЭДО.ТолькоВоВсехДействиях = ТолькоВМенюЕще;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ОбменСБанкамиСлужебныйКлиент.СформироватьПодписатьОтправитьЭД";
			КомандаЭДО.СписокФорм = "";
			КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Отправить электронный документ'");
			КомандаЭДО.Порядок = 12;
			КомандаЭДО.Картинка = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна = Не ЕстьПравоОбменаЭД;
			КомандаЭДО.ТолькоВоВсехДействиях = ТолькоВМенюЕще;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ОбменСБанкамиСлужебныйКлиент.СписокЭД";
			КомандаЭДО.СписокФорм = "";
			КомандаЭДО.Идентификатор = "ДеревоЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Открыть электронные документы'");
			КомандаЭДО.Порядок = 13;
			КомандаЭДО.Картинка = БиблиотекаКартинок.Подсистема;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна = Не ЕстьПравоПросмотраЭД;
			КомандаЭДО.ТолькоВоВсехДействиях = ТолькоВМенюЕще;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из одноименной процедуры модуля ЭлектроннаяПодписьПереопределяемый
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - проверяемый сертификат.
// 
//  ДополнительныеПроверки - ТаблицаЗначений - с полями:
//    * Имя           - Строка - имя дополнительной проверки, например, АвторизацияВТакском.
//    * Представление - Строка - пользовательское имя проверки, например, "Авторизация на сервере Такском".
//    * Подсказка     - Строка - подсказка, которая будет показана пользователю при нажатии на знак вопроса.
//
//  ПараметрыДополнительныхПроверок - Произвольный - значение одноименного параметра, указанное
//    в процедуре ПроверитьСертификатСправочника общего модуля ЭлектроннаяПодписьКлиент.
//
//  СтандартныеПроверки - Булево - если установить Ложь, тогда все стандартные проверки будут
//    пропущены и скрыты. Скрытые проверки не попадают в свойство Результат
//    процедуры ПроверитьСертификатСправочника общего модуля ЭлектроннаяПодписьКлиент, кроме того
//    параметр МенеджерКриптографии не будет определен в процедурах ПриДополнительнойПроверкеСертификата
//    общих модулей ЭлектроннаяПодписьПереопределяемый и ЭлектроннаяПодписьКлиентПереопределяемый.
//
Процедура ПриСозданииФормыПроверкаСертификата(Сертификат, ДополнительныеПроверки, ПараметрыДополнительныхПроверок, СтандартныеПроверки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОСертификатахОбменСБанками.ПрограммаБанка
	|ИЗ
	|	РегистрСведений.СведенияОСертификатахОбменСБанками КАК СведенияОСертификатахОбменСБанками
	|ГДЕ
	|	СведенияОСертификатахОбменСБанками.СертификатЭП = &СертификатЭП";
	Запрос.УстановитьПараметр("СертификатЭП", Сертификат);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если НЕ Результат.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		СтандартныеПроверки = Ложь;
		НовСтрока = ДополнительныеПроверки.Добавить();
		НовСтрока.Имя = "УстановкаПодписиСбербанк";
		НовСтрока.Представление = НСтр("ru = 'Подписание данных'");
		НовСтрока.Подсказка = НСтр("ru = 'Показывает возможность подписания данных закрытым
										|ключом сертификата с помощью банковского ключа.
										|Требуется PIN.'");
		НовСтрока = ДополнительныеПроверки.Добавить();
		НовСтрока.Имя = "ПроверкаПодписиСбербанк";
		НовСтрока.Представление = НСтр("ru = 'Проверка созданной подписи'");
		НовСтрока.Подсказка = НСтр("ru = 'Показывает возможность проверки имеющейся подписи открытым ключом сертификата
										|с помощью банковского ключа.'");
	КонецЕсли;
	
КонецПроцедуры

// Формирует табличный документ на основании данных электронного документа
//
// Параметры:
//    СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена с банком.
//
// Возвращаемое значение:
//    ТабличныйДокумент, Неопределено - сформированная форма просмотра электронного документа или Неопределено.
//
Функция ФормаПросмотраЭД(СообщениеОбмена) Экспорт
	
	Возврат Документы.СообщениеОбменСБанками.ФайлДанныхЭД(СообщениеОбмена);
	
КонецФункции

// Определяет готовые к отправке платежные документы
//
// Параметры:
//  МассивДокументов - Массив - исходный массив документов, которые предполагается отправить в банк.
//      * ДокументСсылка - ссылка на платежный документ в информационной базе.
// 
// Возвращаемое значение:
//   Массив - массив документов, которые можно отправить в банк.
//      * ДокументСсылка - ссылка на платежный документ в информационной базе.
//
Функция ГотовыеКОтправкеДокументы(МассивДокументов) Экспорт

	ОписаниеТипов = Метаданные.РегистрыСведений.СостоянияОбменСБанками.Измерения.СсылкаНаОбъект.Тип;

	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("СсылкаНаДокумент", ОписаниеТипов);
	Для Каждого ЭлементМассива Из МассивДокументов Цикл
		ТаблицаДокументов.Добавить().СсылкаНаДокумент = ЭлементМассива;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.СсылкаНаДокумент
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументы.СсылкаНаДокумент,
	|	СостоянияОбменСБанками.Состояние
	|ПОМЕСТИТЬ ВТСостоянияОбменов
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|		ПО ВТДокументы.СсылкаНаДокумент = СостоянияОбменСБанками.СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСостоянияОбменов.СсылкаНаДокумент
	|ИЗ
	|	ВТСостоянияОбменов КАК ВТСостоянияОбменов
	|ГДЕ
	|	ВТСостоянияОбменов.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.НеСформирован), ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.НаПодписи), ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.НаУтверждении), ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ТребуетсяОтправка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСостоянияОбменов.СсылкаНаДокумент
	|ИЗ
	|	ВТСостоянияОбменов КАК ВТСостоянияОбменов
	|ГДЕ
	|	ВТСостоянияОбменов.Состояние ЕСТЬ NULL ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНаДокумент");
	
КонецФункции

// Производит поиск настройки обмена с банком. Возвращает первую найденную настройку обмена.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - организация, указанная в настройке;
//   Банк - ОпределяемыйТип.СправочникБанки - банк, указанный в настройке;
//   ТолькоДействительная - Булево - Истина - поиск только действующей настройки, Ложь - поиск любой настройки.
//
// Возвращаемое значение:
//   СправочникСсылка.НастройкиОбменСБанками или Неопределено - найденная настройка обмена с банком.
//
Функция НастройкаОбмена(Организация, Банк = Неопределено, ТолькоДействительная = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	НастройкиОбменСБанками.Ссылка
	               |ИЗ
	               |	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	               |ГДЕ
	               |	НастройкиОбменСБанками.Организация = &Организация
	               |	И &УсловиеПоБанку
	               |	И НЕ НастройкиОбменСБанками.Недействительна
	               |	И НЕ НастройкиОбменСБанками.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	НастройкиОбменСБанками.Ссылка
	               |ИЗ
	               |	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	               |ГДЕ
	               |	НастройкиОбменСБанками.Организация = &Организация
	               |	И &УсловиеПоБанку";
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоБанку", "НастройкиОбменСБанками.Банк = &Банк");
		Запрос.УстановитьПараметр("Банк", Банк);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоБанку", "Истина");
	КонецЕсли;

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат = МассивРезультатов[0].Выбрать();

	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	Если НЕ ТолькоДействительная Тогда
		Результат = МассивРезультатов[1].Выбрать();
		Если Результат.Следующий() Тогда
			Возврат Результат.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает текущие статусы документов.
//
// Параметры:
//  МассивОбъектов - Массив - документы, для которых требуется получить статусы
//    * ДокументСсылка - ссылка на документ информационной базы
//  МассивСтатусов - Массив - статусы документов из первого параметра
//    * ПеречислениеСсылка.СтатусыОбменСБанками - текущий статус электронного документа,
//    * Неопределено - нет актуального электронного документа для документа информационной базы.
//
Процедура ПолучитьСтатусыДокументов(МассивОбъектов, МассивСтатусов) Экспорт
	
	ОписаниеТипов = Метаданные.РегистрыСведений.СостоянияОбменСБанками.Измерения.СсылкаНаОбъект.Тип;

	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ", ОписаниеТипов);
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		ТаблицаДокументов.Добавить().Документ = ЭлементМассива;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СсылкиНаДокументы.Документ
	               |ПОМЕСТИТЬ Документы
	               |ИЗ
	               |	&СсылкиНаДокументы КАК СсылкиНаДокументы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Документы.Документ,
	               |	СостоянияОбменСБанками.СообщениеОбмена.Статус КАК Статус
	               |ИЗ
	               |	Документы КАК Документы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	               |		ПО Документы.Документ = СостоянияОбменСБанками.СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкиНаДокументы", ТаблицаДокументов);
	МассивСтатусов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статус");
	
КонецПроцедуры
 
#Область ПоставляемыеДанные

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
// и если да - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор - ОбъектXDTO - Descriptor.
//   Загружать  - Булево - возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	// Загрузка списка банков.
	Если Дескриптор.DataType = "DirectBankList" Тогда
		
		ДанныеВнешнихФайлов = Константы.ОбщиеФайлыОбменСБанками.Получить().Получить();
	
		Если ДанныеВнешнихФайлов = Неопределено ИЛИ НЕ ДанныеВнешнихФайлов.Свойство("СписокБанков") Тогда
			Загружать = Истина;
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанныеВБазе = ДанныеВнешнихФайлов.СписокБанков;
		РасчетХеш = Новый ХешированиеДанных(ХешФункция.CRC32);
		РасчетХеш.Добавить(ДвоичныеДанныеВБазе);
		Если Формат(РасчетХеш.ХешСумма, "ЧГ=") <> Дескриптор.Properties.Property.Получить(0).Value Тогда
			Загружать = Истина;
		КонецЕсли;

	КонецЕсли;
	
	// Загрузка внешних компонент.
	Если Дескриптор.DataType = "DirectBankExtComp" Тогда
		
		ДанныеВнешнихФайлов = Константы.ОбщиеФайлыОбменСБанками.Получить().Получить();
	
		Если ДанныеВнешнихФайлов = Неопределено ИЛИ НЕ ДанныеВнешнихФайлов.Свойство("ВнешниеКомпоненты") Тогда
			Загружать = Истина;
			Возврат;
		КонецЕсли;
		
		ВнешниеКомпонентыИзКеша = ДанныеВнешнихФайлов.ВнешниеКомпоненты;
		
		КомпонентаВИБ = ВнешниеКомпонентыИзКеша.Получить(Дескриптор.Properties.Property.Получить(0).Value);
		
		Если КомпонентаВИБ = Неопределено ИЛИ КомпонентаВИБ.Версия <> Дескриптор.Properties.Property.Получить(1).Value Тогда
			Загружать = Истина;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор - ОбъектXDTO - Дескриптор.
//   ПутьКФайлу - Строка - Полное имя извлеченного файла. Файл будет автоматически удален
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType = "DirectBankList" Тогда
		
		Данные = Новый ДвоичныеДанные(ПутьКФайлу);
		
		ДанныеВнешнихФайлов = Константы.ОбщиеФайлыОбменСБанками.Получить().Получить();
	
		Если ДанныеВнешнихФайлов = Неопределено Тогда
			ДанныеВнешнихФайлов = Новый Структура;
		КонецЕсли;

		ДанныеВнешнихФайлов.Вставить("СписокБанков", Данные);
	
		ХранилищеДанных = Новый ХранилищеЗначения(ДанныеВнешнихФайлов);
	
		Константы.ОбщиеФайлыОбменСБанками.Установить(ХранилищеДанных);
	
		ОбновитьПовторноИспользуемыеЗначения();
	
	КонецЕсли;
	
	Если Дескриптор.DataType = "DirectBankExtComp" Тогда
		
		Данные = Новый ДвоичныеДанные(ПутьКФайлу);
		
		Адрес = ПоместитьВоВременноеХранилище(Данные);
		ИнформацияОВК = ОбменСБанкамиСлужебный.ИнформацияОВКБанка(Адрес);
		Если ИнформацияОВК = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ОбменСБанкамиСлужебный.СохранитьВКБанка(Адрес, ИнформацияОВК);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя.
//
// Параметры:
//   Дескриптор - ОбъектXDTO - Descriptor.
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ДляБП3

// Получает сводное состояние банковского документа в виде строки.
//
// Параметры:
//  СостояниеЭД - ПеречислениеСсылка.СостоянияОбменСБанками - текущее состояние электронного документооборота.
// 
// Возвращаемое значение:
// Строка - сводное упрощенное состояние.
//
Функция СостояниеБанковскогоДокументаСтрокой(СостояниеЭД) Экспорт
	
	Если СостояниеЭД = Перечисления.СостоянияОбменСБанками.НаУтверждении
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.НеСформирован
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка Тогда
		
		Возврат "Подготовлено";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.НаПодписи Тогда
		
		Возврат "НаПодписи";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.Отклонен
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.Аннулирован
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОшибкаПередачи Тогда
		
		Возврат "Отклонено";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяВыписка
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение Тогда
		
		Возврат "Отправлено";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Общие

Функция ПолучитьДатуИзСтроки(Знач ДатаСтрокой, ТекстОшибки)
	
	ПозицияТочки = СтрНайти(ДатаСтрокой, ".");
	
	Если ПозицияТочки = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Неверный формат строки с датой'");
		Возврат Неопределено;
	КонецЕсли;
	
	ЧислоДаты = Лев(ДатаСтрокой, ПозицияТочки - 1);
	ДатаСтрокой = Сред(ДатаСтрокой, ПозицияТочки + 1);
	ПозицияТочки = СтрНайти(ДатаСтрокой, ".");
	
	Если ПозицияТочки = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Неверный формат строки с датой'");
		Возврат Неопределено;
	КонецЕсли;
	
	МесяцДаты = Лев(ДатаСтрокой, ПозицияТочки - 1);
	ГодДаты = Сред(ДатаСтрокой, ПозицияТочки + 1);
	
	Если СтрДлина(ГодДаты) = 2 Тогда
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
	Исключение
		ТекстОшибки = НСтр("ru = 'Неверный формат строки с датой'");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = СтрНайти(СтрокаРазбора, "=");
	
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции

Функция СоздатьСтруктуруИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НоваяСтруктура = Новый Структура;
	ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	Пока ПозицияРазделителя > 0 Цикл
		ИмяЭлемента = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НоваяСтруктура.Вставить(ИмяЭлемента, ИмяЭлемента);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	КонецЦикла;
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НоваяСтруктура.Вставить(СтрокаЧерезЗапятую, СтрокаЧерезЗапятую);
	КонецЕсли;
	Возврат НоваяСтруктура;
	
КонецФункции

#КонецОбласти

#Область ОбработкаДанных

Функция ЗагрузитьСекциюДокумента(СекцияПлатежногоДокумента, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора, СтруктураДокумента, ПоляДат, ПоляЧисел)
	
	Перем НазваниеРеквизита;
	
	ПространствоИмен = "urn:1C.ru:ClientBankExchange";
	
	Квитанция = ОбменСБанкамиСлужебный.ОбъектТипаCML(
		ФабрикаXDTO, "ClientBankExchange.СекцияПлатежногоДокумента.Квитанция", ПространствоИмен);
	РеквизитыПлательщика = ОбменСБанкамиСлужебный.ОбъектТипаCML(
		ФабрикаXDTO, "ClientBankExchange.СекцияПлатежногоДокумента.РеквизитыПлательщика", ПространствоИмен);
	РеквизитыПолучателя = ОбменСБанкамиСлужебный.ОбъектТипаCML(
		ФабрикаXDTO, "ClientBankExchange.СекцияПлатежногоДокумента.РеквизитыПолучателя", ПространствоИмен);
	РеквизитыПлатежа = ОбменСБанкамиСлужебный.ОбъектТипаCML(
		ФабрикаXDTO, "ClientBankExchange.СекцияПлатежногоДокумента.РеквизитыПлатежа", ПространствоИмен);
	ПлатежиВБюджетCML = ОбменСБанкамиСлужебный.ОбъектТипаCML(
		ФабрикаXDTO, "ClientBankExchange.СекцияПлатежногоДокумента.ПлатежиВБюджет", ПространствоИмен);
	ДополнительныеРеквизиты = ОбменСБанкамиСлужебный.ОбъектТипаCML(
		ФабрикаXDTO, "ClientBankExchange.СекцияПлатежногоДокумента.ДополнительныеРеквизиты", ПространствоИмен);
						
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
	ЭтоПлатежВБюджет = Ложь;
	НазначениеПлатежаОднойСтрокой = "";
	НазначениеПлатежаСборное = "";
	УсловиеОплаты = "";
	ТекстОшибки = "";
	
	Пока Лев(ВРег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		
		Значение = "";
		Тег = "";
		ЕстьОшибка = Ложь;
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			Если СтруктураДокумента.Свойство(Тег, НазваниеРеквизита) Тогда
				Если Тег = ВРег("СтатусСоставителя") И ЗначениеЗаполнено(Значение) Тогда
					ЭтоПлатежВБюджет = Истина;
				КонецЕсли;
				Если ПоляДат.Свойство(Тег) Тогда
					Значение = ПолучитьДатуИзСтроки(Значение, ТекстОшибки);
				ИначеЕсли ПоляЧисел.Свойство(Тег) Тогда
					Значение = Число(Значение);
				КонецЕсли;
				Если Тег = ВРег("КвитанцияДата") ИЛИ Тег = ВРег("КвитанцияВремя") ИЛИ Тег = ВРег("КвитанцияСодержание") Тогда
					ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Квитанция, СтруктураДокумента[Тег], Значение);
				ИначеЕсли Тег = ВРег("ДатаСписано") Тогда
					ДатаСписано = ОбменСБанкамиСлужебный.ОбъектТипаCML(
						ФабрикаXDTO, "ClientBankExchange.СекцияПлатежногоДокумента.РеквизитыПлательщика.ДатаСписано", ПространствоИмен);
					ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДатаСписано, "__content", Значение);
					ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ДатаСписано", ДатаСписано);
				ИначеЕсли Тег = ВРег("ДатаПоступило") Тогда
					ДатаПоступило = ОбменСБанкамиСлужебный.ОбъектТипаCML(
						ФабрикаXDTO, "ClientBankExchange.СекцияПлатежногоДокумента.РеквизитыПолучателя.ДатаПоступило", ПространствоИмен);
					ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДатаПоступило, "__content", Значение);
					ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ДатаПоступило", ДатаПоступило);
				ИначеЕсли Тег = ВРег("ПлательщикСчет") ИЛИ Тег = ВРег("Плательщик")
						ИЛИ Тег = ВРег("ПлательщикИНН") ИЛИ Тег = ВРег("ПлательщикКПП") ИЛИ Тег = ВРег("Плательщик1")
						ИЛИ Тег = ВРег("Плательщик2") ИЛИ Тег = ВРег("Плательщик3") ИЛИ Тег = ВРег("Плательщик4")
						ИЛИ Тег = ВРег("ПлательщикРасчСчет") ИЛИ Тег = ВРег("ПлательщикБанк1") ИЛИ Тег = ВРег("ПлательщикБанк2")
						ИЛИ Тег = ВРег("ПлательщикБИК") ИЛИ Тег = ВРег("ПлательщикКорсчет") Тогда
					ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, СтруктураДокумента[Тег], Значение);
				ИначеЕсли Тег = ВРег("ПолучательСчет") ИЛИ Тег = ВРег("Получатель")
						ИЛИ Тег = ВРег("ПолучательИНН") ИЛИ Тег = ВРег("ПолучательКПП") ИЛИ Тег = ВРег("Получатель1")
						ИЛИ Тег = ВРег("Получатель2") ИЛИ Тег = ВРег("Получатель3") ИЛИ Тег = ВРег("Получатель4")
						ИЛИ Тег = ВРег("ПолучательРасчСчет") ИЛИ Тег = ВРег("ПолучательБанк1") ИЛИ Тег = ВРег("ПолучательБанк2")
						ИЛИ Тег = ВРег("ПолучательБИК") ИЛИ Тег = ВРег("ПолучательКорсчет") Тогда
					ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, СтруктураДокумента[Тег], Значение);
				ИначеЕсли Тег = ВРег("ВидПлатежа") ИЛИ Тег = ВРег("ВидОплаты") ИЛИ Тег = ВРег("Очередность")
						ИЛИ Тег = ВРег("Код") Тогда
					ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, СтруктураДокумента[Тег], Значение);
				ИначеЕсли Тег = ВРег("НазначениеПлатежа") Тогда
					НазначениеПлатежаОднойСтрокой = Значение;
				ИначеЕсли ЗначениеЗаполнено(Значение)
						И (Тег = ВРег("НазначениеПлатежа1") ИЛИ Тег = ВРег("НазначениеПлатежа2") ИЛИ Тег = ВРег("НазначениеПлатежа3")
							ИЛИ Тег = ВРег("НазначениеПлатежа4") ИЛИ Тег = ВРег("НазначениеПлатежа5")
							ИЛИ Тег = ВРег("НазначениеПлатежа6")) Тогда
					НазначениеПлатежаСборное = НазначениеПлатежаСборное + Значение + Символы.ПС;
				ИначеЕсли Тег = ВРег("СтатусСоставителя") ИЛИ Тег = ВРег("ПоказательКБК") ИЛИ Тег = ВРег("ОКАТО")
						ИЛИ Тег = ВРег("ПоказательОснования") ИЛИ Тег = ВРег("ПоказательПериода") ИЛИ Тег = ВРег("ПоказательНомера")
						ИЛИ Тег = ВРег("ПоказательДаты") ИЛИ Тег = ВРег("ПоказательТипа") Тогда
					Если ЭтоПлатежВБюджет Тогда
						ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, СтруктураДокумента[Тег], Значение, Истина, ТекстОшибки);
					КонецЕсли
				ИначеЕсли Тег = ВРег("СрокАкцепта") ИЛИ Тег = ВРег("ВидАккредитива") ИЛИ Тег = ВРег("СрокПлатежа")
						ИЛИ Тег = ВРег("УсловиеОплаты") ИЛИ Тег = ВРег("ПлатежПоПредст") ИЛИ Тег = ВРег("ДополнУсловия")
						ИЛИ Тег = ВРег("НомерСчетаПоставщика") ИЛИ Тег = ВРег("ДатаОтсылкиДок") Тогда
					ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДополнительныеРеквизиты, СтруктураДокумента[Тег], Значение);
				ИначеЕсли ЗначениеЗаполнено(Значение)
						И (Тег = ВРег("УсловиеОплаты1") ИЛИ Тег = ВРег("УсловиеОплаты2") ИЛИ Тег = ВРег("УсловиеОплаты3")) Тогда
					УсловиеОплаты = УсловиеОплаты + Значение + Символы.ПС;
				ИначеЕсли Тег = ВРег("Номер") ИЛИ Тег = ВРег("Дата") ИЛИ Тег = ВРег("Сумма") Тогда
					ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, СтруктураДокумента[Тег], Значение, Истина, ТекстОшибки);
				Иначе
					ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, СтруктураДокумента[Тег], Значение);
				КонецЕсли;
			
			Иначе
				ЕстьОшибка = Истина;
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекстОшибки) ИЛИ ЕстьОшибка Тогда
				Сообщение = Новый СообщениеПользователю;
				Шаблон = НСтр("ru = 'Неверный реквизит платежного документа, строка %1 : %2'");
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																			Шаблон,
																			Импорт_ТекущаяСтрока - 1,
																			СтрокаРазбора);
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Шаблон = НСтр("ru = 'Нарушена структура платежного документа, строка %1 : %2'");
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																			Шаблон,
																			Импорт_ТекущаяСтрока - 1,
																			СтрокаРазбора);
			Сообщение.Сообщить();
			Возврат Ложь;

		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НазначениеПлатежаСборное) Тогда
		НазначениеПлатежаСборное = Сред(НазначениеПлатежаСборное, 1, СтрДлина(НазначениеПлатежаСборное) - 1);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "НазначениеПлатежа", НазначениеПлатежаСборное);
	ИначеЕсли ЗначениеЗаполнено(НазначениеПлатежаОднойСтрокой) Тогда
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "НазначениеПлатежа", НазначениеПлатежаОднойСтрокой);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОплаты) Тогда
		УсловиеОплаты = Сред(УсловиеОплаты, 1, СтрДлина(УсловиеОплаты) - 1);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДополнительныеРеквизиты, "УсловиеОплаты", УсловиеОплаты);
	КонецЕсли;
	
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "Квитанция",               Квитанция);
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "РеквизитыПлательщика",    РеквизитыПлательщика);
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "РеквизитыПолучателя",     РеквизитыПолучателя);
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "РеквизитыПлатежа",        РеквизитыПлатежа);
	Если ЭтоПлатежВБюджет Тогда
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "ПлатежиВБюджет", ПлатежиВБюджетCML);
	КонецЕсли;
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьСекциюРасчСчета(СекцияРасчСчет, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора, СтруктураСчета, ПоляДат, ПоляЧисел)
	
	Перем НазваниеРеквизита;
	
	РасчСчета = ОбменСБанкамиСлужебный.ОбъектТипаCML(
		ФабрикаXDTO, "ClientBankExchange.СекцияРасчСчет.РасчСчета", "urn:1C.ru:ClientBankExchange");
		
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
	
	ТекстОшибки = "";
	Значение = "";
	Тег = "";
	
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		Если СтруктураСчета.Свойство(Тег, НазваниеРеквизита) Тогда
			Если ПоляДат.Свойство(Тег) Тогда
				Значение = ПолучитьДатуИзСтроки(Значение, ТекстОшибки);
			ИначеЕсли ПоляЧисел.Свойство(Тег) Тогда
				Значение = ?(ПустаяСтрока(Значение), 0, Число(Значение));
			КонецЕсли;
			Если Тег = ВРег("ВсегоПоступило") ИЛИ Тег = ВРег("ВсегоСписано") ИЛИ Тег = ВРег("КонечныйОстаток") Тогда

				ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(РасчСчета, СтруктураСчета[Тег], Значение);
			ИначеЕсли Тег = ВРег("НачальныйОстаток") ИЛИ Тег = ВРег("РасчСчет") Тогда
				ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(РасчСчета, СтруктураСчета[Тег], Значение, Истина, ТекстОшибки);
			Иначе
				ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(СекцияРасчСчет, СтруктураСчета[Тег], Значение);
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'Есть ошибка'");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			Сообщение = Новый СообщениеПользователю;
			ШаблонСообщения = НСтр("ru='Неверный реквизит в секции описания расчетного счета, строка %1 : %2'");
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	ШаблонСообщения,
																	Импорт_ТекущаяСтрока - 1,
																	СтрокаРазбора);
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
		Значение = "";
		Тег = "";
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		СекцияРасчСчет.РасчСчета.Добавить(РасчСчета);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьСтрокуЗаголовка(ЗначениеXDTO, УсловияОтбора, ТекстСтрокиЗаголовка, ТекущаяСтрока, Поля, Отказ)

	СтруктураПолей = Поля.ПоляЗаголовка;
	ПоляДат = Поля.ПоляДат;
	ПоляЧисел = Поля.ПоляЧисел;
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	ЕстьОшибка = Ложь;
	
	Если ПустаяСтрока(Тег) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПолей.Свойство(Тег) Тогда
		
		Если ПоляДат.Свойство(Тег) Тогда
			ТекстОшибки = Неопределено;
			Значение = ПолучитьДатуИзСтроки(Значение, ТекстОшибки);
			ЕстьОшибка = ЗначениеЗаполнено(ТекстОшибки);
		ИначеЕсли ПоляЧисел.Свойство(Тег) Тогда
			Значение = Число(Значение);
		КонецЕсли;
		Попытка
			Если Тег = ВРег("ДатаНачала") ИЛИ Тег = ВРег("ДатаКонца") Тогда
				ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(УсловияОтбора, СтруктураПолей[Тег], Значение);
			ИначеЕсли Тег = ВРег("РасчСчет") Тогда
				УсловияОтбора.РасчСчет.Добавить(Значение);
			ИначеЕсли Тег = ВРег("Документ") Тогда
				УсловияОтбора.Документ.Добавить(Значение);
			ИначеЕсли Тег = ВРег("ВерсияФормата") Тогда
				ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗначениеXDTO, СтруктураПолей[Тег], "1.05");
			ИначеЕсли Тег = ВРег("Кодировка") Тогда
			Иначе
				ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗначениеXDTO,  СтруктураПолей[Тег], Значение);
			КонецЕсли
		Исключение
			ЕстьОшибка = Истина;
		КонецПопытки;
		
	Иначе
		ЕстьОшибка = Истина;
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = НСтр("ru = 'Неверный реквизит заголовка, строка %1 : %2'");
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																ТекстСообщения,
																ТекущаяСтрока - 1,
																ТекстСтрокиЗаголовка);
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора)
	
	Буфер = "";
	
	Пока ПустаяСтрока(Буфер)
	 ИЛИ Лев(Буфер, 2) = "//" Цикл
		
		Если Импорт_ТекущаяСтрока > Импорт_КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
			
		Буфер = СокрЛП(СтрПолучитьСтроку(Импорт_ТекстДляРазбора, Импорт_ТекущаяСтрока));
		Импорт_ТекущаяСтрока = Импорт_ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Процедура ДополнитьДанныеВыписки(ДеревоПолучатель, ДеревоИсходное)
	
	Если ДеревоПолучатель = Неопределено Тогда
		ДеревоПолучатель = ДеревоИсходное;
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоИсходное.Строки.Найти("ОбменСБанками", "ТипОбъекта"); // раздел ОбменСБанками
	СтрокаОбъектаИсходное = НайденнаяСтрока.Строки[0];
	
	НайденнаяСтрока = ДеревоПолучатель.Строки.Найти("ОбменСБанками", "ТипОбъекта"); // раздел ОбменСБанками
	СтрокаОбъектаПолучатель = НайденнаяСтрока.Строки[0];
	
	ДатаНачалаПолучатель = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоИсходное, СтрокаОбъектаИсходное, "ДатаНачала");
		
	ДатаНачалаИсходное = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоПолучатель, СтрокаОбъектаПолучатель, "ДатаНачала");
		
	Если ДатаНачалаПолучатель > ДатаНачалаИсходное Тогда
		СтрокаРеквизиты = СтрокаОбъектаПолучатель.Строки.Найти("ДатаНачала", "Реквизит");
		СтрокаРеквизиты.ЗначениеРеквизита = ДатаНачалаИсходное;
		СтрокаРеквизиты = СтрокаОбъектаПолучатель.Строки.Найти("НачальныйОстаток", "Реквизит");
		СтрокаРеквизиты.ЗначениеРеквизита = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоИсходное, СтрокаОбъектаИсходное, "НачальныйОстаток");
	КонецЕсли;

	ДатаКонцаПолучатель = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоИсходное, СтрокаОбъектаИсходное, "ДатаКонца");
		
	ДатаКонцаИсходное = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоПолучатель, СтрокаОбъектаПолучатель, "ДатаКонца");
		
	Если ДатаКонцаПолучатель < ДатаКонцаИсходное Тогда
		СтрокаРеквизиты = СтрокаОбъектаПолучатель.Строки.Найти("ДатаКонца", "Реквизит");
		СтрокаРеквизиты.ЗначениеРеквизита = ДатаКонцаИсходное;
		СтрокаРеквизиты = СтрокаОбъектаПолучатель.Строки.Найти("КонечныйОстаток", "Реквизит");
		СтрокаРеквизиты.ЗначениеРеквизита = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоИсходное, СтрокаОбъектаИсходное, "КонечныйОстаток");
	КонецЕсли;

	СтрокаРеквизиты = СтрокаОбъектаПолучатель.Строки.Найти("ВсегоПоступило", "Реквизит");
	СтрокаРеквизиты.ЗначениеРеквизита = СтрокаРеквизиты.ЗначениеРеквизита
		+ ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоИсходное, СтрокаОбъектаИсходное, "ВсегоПоступило");
	СтрокаРеквизиты = СтрокаОбъектаПолучатель.Строки.Найти("ВсегоСписано", "Реквизит");
	СтрокаРеквизиты.ЗначениеРеквизита = СтрокаРеквизиты.ЗначениеРеквизита
		+ ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоИсходное, СтрокаОбъектаИсходное, "ВсегоСписано");
			
	СтрокиТЧИсходной = СтрокаОбъектаИсходное.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));

	Для Каждого СтрокаТЧИсходная Из СтрокиТЧИсходной Цикл
		
		РеквизитыПлатежа = Новый СписокЗначений;
		
		Для Каждого СтрокаРеквизита Из СтрокаТЧИсходная.Строки Цикл
			РеквизитыПлатежа.Добавить(СтрокаРеквизита.ЗначениеРеквизита, СтрокаРеквизита.Реквизит);
		КонецЦикла;
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(СтрокаОбъектаПолучатель, "СтрокаТЧ", РеквизитыПлатежа);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, ИмяПараметра, ИмяРеквизитаДерева = "")
	
	Если ИмяРеквизитаДерева = "" Тогда
		ИмяРеквизитаДерева = ИмяПараметра;
	КонецЕсли;
	
	ЗначениеПараметра = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
													ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаДерева);
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, Символы.ПС, "");
		ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, Символы.ВК, "");
		Текст.ЗаписатьСтроку(ИмяПараметра + "=" + ЗначениеПараметра);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Подсистема ОбменСБанками стала самодостаточной
//
// Параметры:
//  Параметры - Структура - см. описание создания процедур обработчиков обновления.
//
Процедура ПеренестиДанныеОбменаСБанками(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.УдалитьЧерезВебРесурсБанка)
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.УдалитьЧерезВебРесурсБанка)
	|	И СоглашенияОбИспользованииЭД.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.УдалитьЧерезВебРесурсБанка)";
	
	ПакетСоглашения = Запрос.ВыполнитьПакет();
	
	ВыборкаСоглашенийЭДКОбработке = ПакетСоглашения[0].Выбрать();
	ВыборкаОбработанныхСоглашенийЭД = ПакетСоглашения[1].Выбрать();
	ВсегоСоглашенийЭД = ПакетСоглашения[2].Выбрать();
	
	Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВсегоСоглашенийЭД.Количество();
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = ВыборкаОбработанныхСоглашенийЭД.Количество();
	
	СоответствиеВидовЭД = СоответствиеВидовЭД();
	СоответствиеСостояний = СоответствиеСостояний();
	СоответствиеСтатусов = СоответствиеСтатусов();
	
	Если НЕ ВыборкаСоглашенийЭДКОбработке.Следующий() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
		
	Параметры.ОбработкаЗавершена = Ложь;
	
	ЗапросПоСоглашениям = Новый Запрос;
	ЗапросПоСоглашениям.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.УдалитьАдресСервера КАК АдресСервера,
	|	СоглашенияОбИспользованииЭД.УдалитьАутентификацияПоСертификату КАК АутентификацияПоСертификату,
	|	СоглашенияОбИспользованииЭД.Контрагент КАК Банк,
	|	СоглашенияОбИспользованииЭД.Организация,
	|	СоглашенияОбИспользованииЭД.УдалитьВнешняяКомпонента КАК ВнешняяКомпонента,
	|	НЕ СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует) КАК Недействительна,
	|	СоглашенияОбИспользованииЭД.УдалитьДополнительнаяОбработка КАК ДополнительнаяОбработка,
	|	СоглашенияОбИспользованииЭД.ИдентификаторОрганизации,
	|	СоглашенияОбИспользованииЭД.УдалитьПользователь КАК ИмяПользователя,
	|	СоглашенияОбИспользованииЭД.УдалитьИспользуетсяКриптография КАК ИспользуетсяКриптография,
	|	СоглашенияОбИспользованииЭД.Комментарий,
	|	СоглашенияОбИспользованииЭД.УдалитьПрограммаБанка КАК ПрограммаБанка,
	|	СоглашенияОбИспользованииЭД.РесурсВходящихДокументов,
	|	СоглашенияОбИспользованииЭД.РесурсИсходящихДокументов,
	|	СоглашенияОбИспользованииЭД.СертификатКонтрагентаДляШифрования,
	|	СоглашенияОбИспользованииЭД.УдалитьСжиматьДанныеПакетаЭД КАК СжиматьДанныеПакетаЭД,
	|	СоглашенияОбИспользованииЭД.ПометкаУдаления,
	|	СоглашенияОбИспользованииЭД.Наименование
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат КАК СертификатЭП
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &Ссылка";
	
	ЗапросПоСоглашениям.УстановитьПараметр("Ссылка", ВыборкаСоглашенийЭДКОбработке.Ссылка);
	
	ВыборкаПакетов = ЗапросПоСоглашениям.ВыполнитьПакет();
	ВыборкаПараметровСоглашенияЭД = ВыборкаПакетов[0].Выбрать();
	ВыборкаПараметровСоглашенияЭД.Следующий();
	
	НачатьТранзакцию();
	Попытка
			
		#Область СозданиеНастройкиОбмена
		
		НастройкаОбменаОбъект = Справочники.НастройкиОбменСБанками.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НастройкаОбменаОбъект, ВыборкаПараметровСоглашенияЭД);
		ДанныеВнешнейКомпоненты = ВыборкаПараметровСоглашенияЭД.ВнешняяКомпонента.Получить();
		НастройкаОбменаОбъект.ВнешняяКомпонента = Новый ХранилищеЗначения(ДанныеВнешнейКомпоненты);
		ДанныеСертификатаБанка = ВыборкаПараметровСоглашенияЭД.СертификатКонтрагентаДляШифрования.Получить();
		НастройкаОбменаОбъект.СертификатБанка = Новый ХранилищеЗначения(ДанныеСертификатаБанка);
		
		ВыборкаИсходящихДокументов = ВыборкаПакетов[1].Выбрать();
		Пока ВыборкаИсходящихДокументов.Следующий() Цикл
			
			НовСтрока = НастройкаОбменаОбъект.ИсходящиеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаИсходящихДокументов, "ИспользоватьЭП, Формировать");
			НовСтрока.ИсходящийДокумент = СоответствиеВидовЭД.Получить(ВыборкаИсходящихДокументов.ИсходящийДокумент);
			
		КонецЦикла;
		
		ВыборкаСертификатов = ВыборкаПакетов[2].Выбрать();
		Пока ВыборкаСертификатов.Следующий() Цикл
			
			НовСтрока = НастройкаОбменаОбъект.СертификатыПодписейОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаСертификатов);
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаОбменаОбъект);
		
		НастройкаОбмена = НастройкаОбменаОбъект.Ссылка;
		
		СоглашениеЭДОбъект = ВыборкаСоглашенийЭДКОбработке.Ссылка.ПолучитьОбъект();
		СоглашениеЭДОбъект.ПометкаУдаления = Истина;
		СоглашениеЭДОбъект.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СоглашениеЭДОбъект);
		
		#КонецОбласти
		
		#Область ПереносПрисоединенныхФайлов
		
		ЗапросЭДПрисоединенныеФайлы = Новый Запрос;
		ЗапросЭДПрисоединенныеФайлы.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	ЭДПрисоединенныеФайлы.Наименование,
		|	ЭДПрисоединенныеФайлы.УдалитьВидЭД КАК ВидЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла,
		|	ЭДПрисоединенныеФайлы.Автор,
		|	ЭДПрисоединенныеФайлы.ДатаМодификацииУниверсальная,
		|	ЭДПрисоединенныеФайлы.ДатаСоздания,
		|	ЭДПрисоединенныеФайлы.Изменил,
		|	ЭДПрисоединенныеФайлы.ИндексКартинки,
		|	ЭДПрисоединенныеФайлы.Описание,
		|	ЭДПрисоединенныеФайлы.ПодписанЭП,
		|	ЭДПрисоединенныеФайлы.ПутьКФайлу,
		|	ЭДПрисоединенныеФайлы.Размер,
		|	ЭДПрисоединенныеФайлы.Расширение,
		|	ЭДПрисоединенныеФайлы.Редактирует,
		|	ЭДПрисоединенныеФайлы.СтатусИзвлеченияТекста,
		|	ЭДПрисоединенныеФайлы.ТекстХранилище,
		|	ЭДПрисоединенныеФайлы.ТипХраненияФайла,
		|	ЭДПрисоединенныеФайлы.Том,
		|	ЭДПрисоединенныеФайлы.ФайлХранилище,
		|	ЭДПрисоединенныеФайлы.СтатусЭД,
		|	СостоянияЭД.СсылкаНаОбъект,
		|	СостоянияЭД.СостояниеВерсииЭД,
		|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний КАК ВнешнийИдентификатор,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаИзмененияВнешнегоСтатусаЭД КАК ДатаИзмененияВнешнегоСтатуса,
		|	ЭДПрисоединенныеФайлы.ДатаИзмененияСтатусаЭД КАК ДатаИзмененияСтатуса,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаВыпискиБанка КАК ДатаСообщения,
		|	ЭДПрисоединенныеФайлы.ДополнительнаяИнформация,
		|	ЭДПрисоединенныеФайлы.ДополнительныеРеквизиты,
		|	ЭДПрисоединенныеФайлы.НомерЭД КАК Идентификатор,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК Направление,
		|	ЭДПрисоединенныеФайлы.УдалитьНомерДокументаОтправителя КАК НомерДокументаОтправителя,
		|	ЭДПрисоединенныеФайлы.УдалитьОрганизация КАК Организация,
		|	ЭДПрисоединенныеФайлы.УдалитьПричинаОтклонения КАК ПричинаОтклонения,
		|	ЭДПрисоединенныеФайлы.УдалитьСуммаДокумента КАК СуммаДокумента,
		|	ЭДПрисоединенныеФайлы.ПометкаУдаления
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка)
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД = &СоглашениеЭД
		|	И НЕ ЭДПрисоединенныеФайлы.УдалитьВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПустаяСсылка)";
		
		ЗапросЭДПрисоединенныеФайлы.УстановитьПараметр("СоглашениеЭД", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		
		ВыборкаРеквизитыЭД = ЗапросЭДПрисоединенныеФайлы.Выполнить().Выбрать();
		
		СоответствиеЭДИСообщенийОбмена = Новый Соответствие;
		
		Пока ВыборкаРеквизитыЭД.Следующий() Цикл
			НовСообщение = Документы.СообщениеОбменСБанками.СоздатьДокумент();
			НовСообщение.Банк = НастройкаОбменаОбъект.Банк;
			НовСообщение.ВидЭД = СоответствиеВидовЭД.Получить(ВыборкаРеквизитыЭД.ВидЭД);
			ЗаполнитьЗначенияСвойств(НовСообщение, ВыборкаРеквизитыЭД, "ВнешнийИдентификатор, ДатаДокументаОтправителя,
				|ДатаИзмененияВнешнегоСтатуса, ДатаИзмененияСтатуса, ДатаСообщения, ДополнительнаяИнформация, Идентификатор,
				|Направление, НомерДокументаОтправителя, Организация, ПричинаОтклонения, ПометкаУдаления");
			НовСообщение.Дата = ВыборкаРеквизитыЭД.ДатаСоздания;
			НовСообщение.ДополнительныеДанные = Новый ХранилищеЗначения(ВыборкаРеквизитыЭД.ДополнительныеРеквизиты.Получить());
			НовСообщение.НастройкаОбмена = НастройкаОбмена;
			Если ВыборкаРеквизитыЭД.ВидЭД = Перечисления["ВидыЭД"].УдалитьВыпискаБанка Тогда
				НовСообщение.НомерСчета = ВыборкаРеквизитыЭД.ДополнительнаяИнформация;
			КонецЕсли;
			
			НовСообщение.Состояние = СоответствиеСостояний.Получить(ВыборкаРеквизитыЭД.СостояниеВерсииЭД);
			НовСообщение.Статус = СоответствиеСтатусов.Получить(ВыборкаРеквизитыЭД.СтатусЭД);
			НовСообщение.УстановитьНовыйНомер();
			НовСообщение.Представление = ПредставлениеЭД(
				ВыборкаРеквизитыЭД.Наименование, НовСообщение.ВидЭД, ВыборкаРеквизитыЭД.ВладелецФайла);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовСообщение);

			ЗапросПоЭП = Новый Запрос;
			ЗапросПоЭП.Текст =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.НомерСтроки КАК НомерСтроки,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ПодписьВерна,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ДатаПроверкиПодписи,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ДатаПодписи,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ИмяФайлаПодписи,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Комментарий,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.КомуВыданСертификат,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Отпечаток,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Подпись,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Сертификат,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.УстановившийПодпись
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
			|ГДЕ
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			ЗапросПоЭП.УстановитьПараметр("Ссылка", ВыборкаРеквизитыЭД.Ссылка);
			ВыборкаПоЭП = ЗапросПоЭП.Выполнить().Выбрать();
			
			СообщениеОбмена = НовСообщение.Ссылка;
			СоответствиеЭДИСообщенийОбмена.Вставить(ВыборкаРеквизитыЭД.Ссылка, СообщениеОбмена);
			
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаРеквизитыЭД.Ссылка);
			
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", СообщениеОбмена);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ДанныеФайла.ИмяФайла);
			ПараметрыФайла.Вставить("РасширениеБезТочки", ДанныеФайла.Расширение);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
				ПараметрыФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			
			ОбъектПрисоединенныйФайл = ПрисоединенныйФайл.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ОбъектПрисоединенныйФайл, ВыборкаРеквизитыЭД,
				"Автор, ДатаМодификацииУниверсальная, ДатаСоздания, Изменил, Описание, ПутьКФайлу, Наименование, ПодписанЭП");
			
			Пока ВыборкаПоЭП.Следующий() Цикл
				НовСтрока = ОбъектПрисоединенныйФайл.ЭлектронныеПодписи.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаПоЭП, , "НомерСтроки, Подпись, Сертификат");
				НовСтрока.Подпись = Новый ХранилищеЗначения(ВыборкаПоЭП.Подпись.Получить());
				НовСтрока.Сертификат = Новый ХранилищеЗначения(ВыборкаПоЭП.Сертификат.Получить());
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектПрисоединенныйФайл);
			
			ЭД = ВыборкаРеквизитыЭД.Ссылка.ПолучитьОбъект();
			ЭД.ПометкаУдаления = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭД);
		
		КонецЦикла;
		
		// Заполнение родителей
		ЗапросПоВладельцам = Новый Запрос;
		ЗапросПоВладельцам.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	НЕ ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
		|	И ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД = &СоглашениеЭД";
		ЗапросПоВладельцам.УстановитьПараметр("СоглашениеЭД", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		ВыборкаЭДПоВладельцам = ЗапросПоВладельцам.Выполнить().Выбрать();
		Пока ВыборкаЭДПоВладельцам.Следующий() Цикл
			
			СообщениеОбмена = СоответствиеЭДИСообщенийОбмена.Получить(ВыборкаЭДПоВладельцам.Ссылка);
			СообщениеОбменаРодитель = СоответствиеЭДИСообщенийОбмена.Получить(
				ВыборкаЭДПоВладельцам.ЭлектронныйДокументВладелец);
				
			Если ЗначениеЗаполнено(СообщениеОбменаРодитель) И ЗначениеЗаполнено(СообщениеОбмена) Тогда
				СообщениеОбменаОбъект = СообщениеОбмена.ПолучитьОбъект();
				СообщениеОбменаОбъект.СообщениеРодитель = СообщениеОбменаРодитель;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СообщениеОбменаОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область ПереносСостоянийЭД
		
		ЗапросПоСостояниям = Новый Запрос();
		ЗапросПоСостояниям.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект,
		|	СостоянияЭД.СостояниеВерсииЭД,
		|	СостоянияЭД.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент.УдалитьСоглашениеЭД = &СоглашениеЭД";
		ЗапросПоСостояниям.УстановитьПараметр("СоглашениеЭД", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		ВыборкаПоСостояниям = ЗапросПоСостояниям.Выполнить().Выбрать();
		Пока ВыборкаПоСостояниям.Следующий() Цикл
			
			СообщениеОбмена = СоответствиеЭДИСообщенийОбмена.Получить(ВыборкаПоСостояниям.ЭлектронныйДокумент);
			Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
				МенеджерРегистраСостоянияОбменСБанками = РегистрыСведений.СостоянияОбменСБанками.СоздатьМенеджерЗаписи();
				МенеджерРегистраСостоянияОбменСБанками.СсылкаНаОбъект = ВыборкаПоСостояниям.СсылкаНаОбъект;
				МенеджерРегистраСостоянияОбменСБанками.СообщениеОбмена = СообщениеОбмена;
				МенеджерРегистраСостоянияОбменСБанками.Состояние = СоответствиеСостояний.Получить(
					ВыборкаПоСостояниям.СостояниеВерсииЭД);
				МенеджерРегистраСостоянияОбменСБанками.Записать();
			КонецЕсли;
			
			МенеджерРегистраСостоянияЭД = РегистрыСведений["СостоянияЭД"].СоздатьМенеджерЗаписи();
			МенеджерРегистраСостоянияЭД.СсылкаНаОбъект = ВыборкаПоСостояниям.СсылкаНаОбъект;
			МенеджерРегистраСостоянияЭД.Удалить();
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область УдалениеПакетовЭД
		
		ЗапросПоПакетам = Новый Запрос;
		ЗапросПоПакетам.Текст =
		"ВЫБРАТЬ
		|	ПакетЭД.Ссылка
		|ИЗ
		|	Документ.ПакетЭД КАК ПакетЭД
		|ГДЕ
		|	ПакетЭД.НастройкаЭДО = &НастройкаЭДО
		|	И НЕ ПакетЭД.ПометкаУдаления";
		
		ЗапросПоПакетам.УстановитьПараметр("НастройкаЭДО", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		ВыборкаПакетов = ЗапросПоПакетам.Выполнить().Выбрать();
		Пока ВыборкаПакетов.Следующий() Цикл
			ПакетОбъект = ВыборкаПакетов.Ссылка.ПолучитьОбъект();
			ПакетОбъект.ПометкаУдаления = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПакетОбъект);
		КонецЦикла;
		
		#КонецОбласти

		#Область ОбработкаРегистраПараметрыОбменСБанками
		
		МенеджерРегистраПараметрыОбменСБанками = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
		МенеджерРегистраПараметрыОбменСБанками.НастройкаОбмена = ВыборкаСоглашенийЭДКОбработке.Ссылка;
		МенеджерРегистраПараметрыОбменСБанками.Прочитать();
		Если МенеджерРегистраПараметрыОбменСБанками.Выбран() Тогда
			НаборЗаписейРегистраПараметрыОбменСБанками = РегистрыСведений.ПараметрыОбменСБанками.СоздатьНаборЗаписей();
			НаборЗаписейРегистраПараметрыОбменСБанками.Отбор.НастройкаОбмена.Установить(НастройкаОбмена);
			НовЗапись = НаборЗаписейРегистраПараметрыОбменСБанками.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, МенеджерРегистраПараметрыОбменСБанками, "ПоследняяДатаПолученияЭД, Метка");
			НовЗапись.НастройкаОбмена = НастройкаОбмена;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейРегистраПараметрыОбменСБанками);
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ТикетыОбменСБанками
		
		СтарыйНаборЗаписейРегистраТикетыОбменСБанками = РегистрыСведений.ТикетыОбменСБанками.СоздатьНаборЗаписей();
		СтарыйНаборЗаписейРегистраТикетыОбменСБанками.Отбор.НастройкаОбмена.Установить(ВыборкаСоглашенийЭДКОбработке.Ссылка);
		СтарыйНаборЗаписейРегистраТикетыОбменСБанками.Прочитать();
		
		НовыйНаборЗаписейРегистраТикетыОбменСБанками = РегистрыСведений.ТикетыОбменСБанками.СоздатьНаборЗаписей();
		НовыйНаборЗаписейРегистраТикетыОбменСБанками.Отбор.НастройкаОбмена.Установить(НастройкаОбмена);
		
		Для Каждого СтараяЗапись Из СтарыйНаборЗаписейРегистраТикетыОбменСБанками Цикл
			НоваяЗапись = НовыйНаборЗаписейРегистраТикетыОбменСБанками.Добавить();
			НоваяЗапись.ВидЭД = СоответствиеВидовЭД.Получить(СтараяЗапись.ВидЭД);
			НоваяЗапись.Идентификатор = СтараяЗапись.Идентификатор;
			НоваяЗапись.НастройкаОбмена = НастройкаОбмена;
		КонецЦикла;
		
		Если НовыйНаборЗаписейРегистраТикетыОбменСБанками.Количество() Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНаборЗаписейРегистраТикетыОбменСБанками);
		КонецЕсли;
	
		#КонецОбласти
		
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы прямого обмена с банками'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы прямого обмена с банками произошла ошибка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробныйТекстОшибки, ТекстСообщения, 1, ВыборкаСоглашенийЭДКОбработке.Ссылка);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Добавление новых подписываемых видов ЭД и удаление старых
//
// Параметры:
//  Параметры - Структура - см. описание создания процедур обработчиков обновления.
//
Процедура ОбработатьРегистрПодписываемыеВидыЭД(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	НачатьТранзакцию();
	Попытка
	
		НаборЗаписейРегистра = РегистрыСведений.ПодписываемыеВидыЭД.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Прочитать();
	
		СоответствиеВидовЭД = СоответствиеВидовЭД();
	
		Для Каждого Запись Из НаборЗаписейРегистра Цикл
			
			НовыйВидЭД = СоответствиеВидовЭД.Получить(Запись.ВидЭД);
			Если НовыйВидЭД <> Неопределено Тогда
				Запись.ВидЭД = НовыйВидЭД;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаСвертки = НаборЗаписейРегистра.Выгрузить();
		ТаблицаСвертки.Свернуть("СертификатЭП, ВидЭД, Использовать");
		НаборЗаписейРегистра.Загрузить(ТаблицаСвертки);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейРегистра);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы прямого обмена с банками'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы прямого обмена с банками произошла ошибка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, 1);
		ВызватьИсключение;
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

// Переносить данные дополнительной обработки из справочника в константу
//
// Параметры:
//  Параметры - Структура - см. описание создания процедур обработчиков обновления.
//
Процедура ПеренестиДанныеДополнительныхОбработокВКонстанту(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
		
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиОбменСБанками.Ссылка,
		|	НастройкиОбменСБанками.УдалитьДополнительнаяОбработка.ИмяОбъекта КАК ИмяОбъекта,
		|	НастройкиОбменСБанками.УдалитьДополнительнаяОбработка.ХранилищеОбработки КАК ХранилищеОбработки,
		|	НастройкиОбменСБанками.УдалитьДополнительнаяОбработка.Версия КАК Версия,
		|	НастройкиОбменСБанками.УдалитьДополнительнаяОбработка.Наименование КАК Наименование
		|ИЗ
		|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
		|ГДЕ
		|	НастройкиОбменСБанками.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку)
		|	И НЕ НастройкиОбменСБанками.Недействительна
		|	И НЕ НастройкиОбменСБанками.ПометкаУдаления
		|	И НЕ НастройкиОбменСБанками.УдалитьДополнительнаяОбработка = ЗНАЧЕНИЕ(Справочник.ДополнительныеОтчетыИОбработки.ПустаяСсылка)
		|	И НастройкиОбменСБанками.ИмяВнешнегоМодуля = """"";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущаяВерсия = "";
			ОбменСБанкамиСлужебныйВызовСервера.ПроверитьАктуальностьВнешнейОбработки(
				Выборка.ИмяОбъекта, Выборка.Версия, ТекущаяВерсия);
			Если НЕ ЗначениеЗаполнено(ТекущаяВерсия) ИЛИ ТекущаяВерсия < Выборка.Версия Тогда
				АдресВнешнейОбработки = ПоместитьВоВременноеХранилище(Выборка.ХранилищеОбработки.Получить());
				ОбменСБанкамиСлужебный.СохранитьВнешнююОбработку(
					АдресВнешнейОбработки, Выборка.Версия, Выборка.ИмяОбъекта, Выборка.Наименование);
			КонецЕсли;
			
			НастройкаОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НастройкаОбменаОбъект.ИмяВнешнегоМодуля = Выборка.ИмяОбъекта;
			НастройкаОбменаОбъект.УдалитьДополнительнаяОбработка = Справочники["ДополнительныеОтчетыИОбработки"].ПустаяСсылка();
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаОбменаОбъект);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы прямого обмена с банками'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы прямого обмена с банками произошла ошибка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, 1);
		ВызватьИсключение;
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

// Переносит статусы электронных подписей в справочник присоединенных файлов
//
// Параметры:
//  Параметры - Структура - см. описание создания процедур обработчиков обновления.
//
Процедура ПеренестиСтатусыЭлектронныхПодписей(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеОбменСБанками.Ссылка КАК СообщениеОбмена,
		|	СообщениеОбменСБанками.УдалитьСтатусыЭлектронныхПодписей.(
		|		НомерСтроки,
		|		ДатаПроверкиПодписи,
		|		ПодписьВерна
		|	),
		|	СообщениеОбменСБанкамиПрисоединенныеФайлы.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы КАК СообщениеОбменСБанкамиПрисоединенныеФайлы
		|		ПО (СообщениеОбменСБанкамиПрисоединенныеФайлы.ВладелецФайла = СообщениеОбменСБанками.Ссылка)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ЭлектронныйДокумент) Цикл
			ЗаписатьОбъект = Ложь;
			ВыборкаСтатусовЭП = Выборка.УдалитьСтатусыЭлектронныхПодписей.Выбрать();
			Если ВыборкаСтатусовЭП.Количество() Тогда
				ПрисоединенныйФайлОбъект = Выборка.ЭлектронныйДокумент.ПолучитьОбъект();
				Пока ВыборкаСтатусовЭП.Следующий() Цикл
					ИскомаяСтрока = ПрисоединенныйФайлОбъект.ЭлектронныеПодписи.Найти(ВыборкаСтатусовЭП.НомерСтроки, "НомерСтроки");
					Если ИскомаяСтрока = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ЗаписатьОбъект = Истина;
					ЗаполнитьЗначенияСвойств(ИскомаяСтрока, ВыборкаСтатусовЭП);
				КонецЦикла;
			КонецЕсли;
			Если ЗаписатьОбъект Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрисоединенныйФайлОбъект);
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы прямого обмена с банками'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы прямого обмена с банками произошла ошибка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, 1);
		ВызватьИсключение;
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

// Включает рег.задание по обновлению списка банков
//
// Параметры:
//  Параметры - Структура - см. описание создания процедур обработчиков обновления.
//
Процедура ВключитьАвтоматическоеОбновлениеСпискаБанков(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;

	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Истина);
		
		ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(
			Метаданные.РегламентныеЗадания.ЗагрузкаСпискаDirectBank);
		РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторЗадания, ПараметрыЗадания);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

Функция СоответствиеВидовЭД()
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить(Перечисления["ВидыЭД"].ДопДанные,
		Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
	СоответствиеВозврата.Вставить(Перечисления["ВидыЭД"].УдалитьВыпискаБанка, Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьЗапросВыписки, Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
	СоответствиеВозврата.Вставить(Перечисления["ВидыЭД"].УдалитьЗапросЗонд, Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьЗапросНаОтзывЭД, Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьЗапросНочнойВыписки, Перечисления.ВидыЭДОбменСБанками.ЗапросНочнойВыписки);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьЗапросОСостоянииЭД, Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьИзвещениеОСостоянииЭД, Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД);
	СоответствиеВозврата.Вставить(Перечисления["ВидыЭД"].УдалитьКвитанция, Перечисления.ВидыЭДОбменСБанками.Квитанция);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьПлатежноеПоручение, Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьПлатежноеТребование, Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование);
		
	Возврат СоответствиеВозврата
		
КонецФункции

Функция СоответствиеСостояний()
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].Аннулирован, Перечисления.СостоянияОбменСБанками.Аннулирован);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].НаПодписи, Перечисления.СостоянияОбменСБанками.НаПодписи);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].НаУтверждении, Перечисления.СостоянияОбменСБанками.НаУтверждении);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].НеСформирован, Перечисления.СостоянияОбменСБанками.НеСформирован);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].УдалитьОжидаетсяВыписка, Перечисления.СостоянияОбменСБанками.ОжидаетсяВыписка);
	СоответствиеВозврата.Вставить(Перечисления["СостоянияВерсийЭД"].ОжидаетсяИзвещениеОПолучении,
		Перечисления.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].УдалитьОжидаетсяИсполнение, Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].ОжидаетсяОтправка, Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка);
	СоответствиеВозврата.Вставить(Перечисления["СостоянияВерсийЭД"].Отклонен, Перечисления.СостоянияОбменСБанками.Отклонен);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].ОшибкаПередачи, Перечисления.СостоянияОбменСБанками.ОшибкаПередачи);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].УдалитьПлатежИсполнен, Перечисления.СостоянияОбменСБанками.ПлатежИсполнен);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].УдалитьТребуетсяПодтверждение, Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение);
	
	Возврат СоответствиеВозврата
		
КонецФункции

Функция СоответствиеСтатусов()
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Аннулирован, Перечисления.СтатусыОбменСБанками.Аннулирован);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Доставлен, Перечисления.СтатусыОбменСБанками.Доставлен);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].НеСформирован, Перечисления.СтатусыОбменСБанками.НеСформирован);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Обработан, Перечисления.СтатусыОбменСБанками.Обработан);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Отклонен, Перечисления.СтатусыОбменСБанками.Отклонен);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Отправлен, Перечисления.СтатусыОбменСБанками.Отправлен);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].ОшибкаПередачи, Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].ПодготовленКОтправке, Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Подписан, Перечисления.СтатусыОбменСБанками.Подписан);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Получен, Перечисления.СтатусыОбменСБанками.Получен);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Принят, Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Сформирован, Перечисления.СтатусыОбменСБанками.Сформирован);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Утвержден, Перечисления.СтатусыОбменСБанками.Утвержден);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].УдалитьИсполнен, Перечисления.СтатусыОбменСБанками.Исполнен);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьКартотека2, Перечисления.СтатусыОбменСБанками.Приостановлен);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьОтказанАБС, Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьОтклоненБанком, Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьОшибкаРеквизитов, Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьПодтвержден, Перечисления.СтатусыОбменСБанками.Подтвержден);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьПриостановлен, Перечисления.СтатусыОбменСБанками.Приостановлен);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьЭПНеВерна, Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].ЧастичноПодписан, Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
	Возврат СоответствиеВозврата
		
КонецФункции

Функция ПредставлениеЭД(Наименование, ВидЭД, СсылкаНаОбъект)
	
	ПутьКСправочникуСоглашенийЭД = "СправочникСсылка.СоглашенияОбИспользованииЭД";
	
	Если СсылкаНаОбъект = Неопределено ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип(ПутьКСправочникуСоглашенийЭД) Тогда
		Возврат Наименование;
	КонецЕсли;
	
	ШаблонПредставленияЭД = НСтр("ru = '%1 %2 от %3'");
	
	ПечатныйНомерДокумента = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект);
	ДатаСтрокой = Формат(СсылкаНаОбъект.Дата, "ДЛФ=D");
	СтрокаИмениФайла = СтрШаблон(ШаблонПредставленияЭД, ВидЭД, ПечатныйНомерДокумента, ДатаСтрокой);
	
	Возврат СтрокаИмениФайла;
	
КонецФункции



#КонецОбласти

#КонецОбласти
