
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Получение обновлений программы".
// ОбщийМодуль.ПолучениеОбновленийПрограммыКлиент.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает помощник обновления программы в режиме рабочего обновления:
// обновление версии конфигурации и/или платформы 1С:Предприятие.
//
Процедура ОбновитьПрограмму() Экспорт
	
	ОткрытьФорму("Обработка.ОбновлениеПрограммы.Форма.Форма",
		Новый Структура("Сценарий, ОбновитьИнформацию", "РабочееОбновление", Истина));
	
КонецПроцедуры

// Открывает помощник обновления программы в режиме перехода на новую редакцию
// конфигурации.
//
// Параметры:
//	НомерРедакции - Строка - номер редакции, на которую выполняется переход.
//		Заполняется в формате <Номер редакции>.<Номер подредакции>,
//		например "3.0", "3.1" или др.
//	ДополнительныеПараметры - Структура - дополнительные параметры открытия
//		помощника обновления. Поля структуры:
//		* ЗаголовокОкна - Строка - заголовок окна помощника обновления;
//		* ЗаголовокДоступноОбновление - Строка - заголовок информации о
//			доступном обновлении. Если не передан или не заполнен, тогда
//			заголовок не отображается;
//		* ЗаголовокНетОбновления - Строка - текст заголовка информации о
//			доступном обновлении, который должен отображаться при отсутствии обновления.
//			Если не передан или не заполнен, тогда
//			заголовок не отображается.
//
Процедура ПерейтиНаНовуюРедакцию(НомерРедакции, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(НомерРедакции) Тогда
		ВызватьИсключение НСтр("ru = 'Не передан номер редакции.'");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сценарий"          , "ПереходНаДругуюПрограммуИлиРедакцию");
	ПараметрыФормы.Вставить("НомерНовойРедакции", НомерРедакции);
	ПараметрыФормы.Вставить("ОбновитьИнформацию", Истина);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Для Каждого КлючЗначение Из ДополнительныеПараметры Цикл
			ПараметрыФормы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ОбновлениеПрограммы.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

// Открывает помощник обновления программы в режиме перехода на
// другую программу.
//
// Параметры:
//	ИмяНовойПрограммы - Строка - имя программы, на которую выполняется переход
//		(см. ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииИмениПрограммы());
//	НомерРедакции - Строка - номер редакции другой программы. Заполняется в
//		формате <Номер редакции>.<Номер подредакции>, например "3.0", "3.1" или др.
//		Если не передан, тогда выполняется переход на версию с наивысшим номером;
//	ДополнительныеПараметры - Структура - дополнительные параметры открытия
//		помощника обновления. Поля структуры:
//		* ЗаголовокОкна - Строка - заголовок окна помощника обновления;
//		* ЗаголовокДоступноОбновление - Строка - заголовок информации о
//			доступном обновлении. Если не передан или не заполнен, тогда
//			заголовок не отображается;
//		* ЗаголовокНетОбновления - Строка - текст заголовка информации о
//			доступном обновлении, который должен отображаться при отсутствии обновления.
//			Если не передан или не заполнен, тогда
//			заголовок не отображается.
//
Процедура ПерейтиНаДругуюПрограмму(
	ИмяНовойПрограммы,
	НомерРедакции = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяНовойПрограммы) Тогда
		ВызватьИсключение НСтр("ru = 'Не передано имя новой программы.'");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сценарий"          , "ПереходНаДругуюПрограммуИлиРедакцию");
	ПараметрыФормы.Вставить("ИмяНовойПрограммы" , ИмяНовойПрограммы);
	ПараметрыФормы.Вставить("НомерНовойРедакции", НомерРедакции);
	ПараметрыФормы.Вставить("ОбновитьИнформацию", Истина);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Для Каждого КлючЗначение Из ДополнительныеПараметры Цикл
			ПараметрыФормы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ОбновлениеПрограммы.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

// Возвращает информацию о доступном обновлении
// программы в сценарии рабочего обновления.
//
// Возвращаемое значение:
//	Структура - информация о доступном обновлении.
//		Поля:
//		* Ошибка - Булево - признак возникновения ошибки при получении
//			информации о доступном обновлении. Истина - возникла ошибка,
//			Ложь - в противном случае;
//		* Сообщение - Строка - сообщение об ошибке, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое
//			может быть записано в журнал регистрации;
//		* ДоступноОбновление - Булево - признак наличия обновлений.
//			Истина - доступно по меньшей мере одно обновление,
//			Ложь - в противном случае.
//		* Конфигурация - Структура - информация о доступном обновлении конфигурации.
//			Если обновление отсутствует, тогда значение Неопределено.
//			Поля:
//			** Версия - Строка - номер версии конфигурации;
//			** МинимальнаяВерсияПлатформы - Строка - минимальная версия платформы,
//				необходимая для перехода на эту версию конфигурации;
//			** РазмерОбновления - Число - размер обновления в байтах;
//			** URLНовоеВВерсии - Строка - URL файла описания "Новое в версии";
//			** URLПорядокОбновления - Строка - URL файла описания "Порядок обновления";
//		* Платформа - Структура - информация о доступном обновлении платформы 1С:Предприятие.
//			Если обновление отсутствует, тогда значение Неопределено.
//			Поля:
//			** Версия - Строка - номер версии платформы;
//			** РазмерОбновления - Число - размер обновления в байтах;
//			** URLОсобенностиПерехода - Строка - URL файла описания "Особенности перехода на
//				новую версию платформы 1С:Предприятие";
//			** URLСтраницыПлатформы - Строка - URL веб-страницы для ручного
//				получения дистрибутива;
//			** ОбязательностьУстановки - Число - обязательность применения обновления платформы:
//				0 - обязательно;
//				1 - рекомендуется;
//				2 - не обязательно.
//
Функция ИнформацияОДоступномОбновлении() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	
	#Если ВебКлиент Тогда
	Результат = ПолучениеОбновленийПрограммыВызовСервера.ИнформацияОДоступномОбновлении(
		ПараметрыРаботыКлиента.ИмяПрограммы,
		ПараметрыРаботыКлиента.ВерсияКонфигурации,
		"",
		"",
		"РабочееОбновление");
	#Иначе
		Если ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами().УстанавливатьПодключениеНаСервере Тогда
			Результат = ПолучениеОбновленийПрограммыВызовСервера.ИнформацияОДоступномОбновлении(
				ПараметрыРаботыКлиента.ИмяПрограммы,
				ПараметрыРаботыКлиента.ВерсияКонфигурации,
				"",
				"",
				"РабочееОбновление");
		Иначе
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыКлиента", ИнтернетПоддержкаПользователейКлиент.ПараметрыКлиента());
			Результат = ПолучениеОбновленийПрограммыКлиентСервер.ИнформацияОДоступномОбновлении(
				ПараметрыРаботыКлиента.ИмяПрограммы,
				ПараметрыРаботыКлиента.ВерсияКонфигурации,
				"",
				"",
				"РабочееОбновление",
				ДополнительныеПараметры);
		КонецЕсли;
	#КонецЕсли
	
	Результат.Вставить("Ошибка", Не ПустаяСтрока(Результат.ИмяОшибки));
	Результат.Удалить("ИмяОшибки");
	Результат.Удалить("Сценарий");
	
	Если Не Результат.Конфигурация.ДоступноОбновление Тогда
		Результат.Конфигурация = Неопределено;
	Иначе
		Результат.Конфигурация.Удалить("ФайлыДляЗагрузки");
		Результат.Конфигурация.Удалить("ИдентификаторВерсии");
		Результат.Конфигурация.Удалить("ДоступноОбновление");
	КонецЕсли;

	Если Не Результат.Платформа.ДоступноОбновление Тогда
		Результат.Платформа = Неопределено;
	Иначе
		Результат.Платформа.Удалить("ИдентификаторФайла");
		Результат.Платформа.Удалить("РекомендуетсяПереход");
		Результат.Платформа.Удалить("ДоступноОбновление");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Будет удалена в следующей редакции библиотеки.
// Необходимо использовать метод ОбновитьПрограмму(), котором пользователь
// сможет выбрать устанавливаемые обновления.
//
// Вызывает механизм поиска и установки обновлений платформы.
// Параметры:
//	ВерсияКонфигурации - Строка - версия конфигурации, для которой выполняется
//		получение и установка новой версии платформы 1С:Предприятие.
//		Если значение параметра заполнено, тогда версия платформы будет определена
//		сервисом Интернет-обновлений для указанной версии конфигурации,
//		иначе - для текущей версии конфигурации.
//	ДанныеАвторизации - Структура - логин и пароль пользователя на портале
//		сервисов 1С:ИТС. Посредством этого параметра можно указывать произвольные
//		логин и пароль для получения дистрибутива обновления платформы 1С:Предприятие.
//		Если значение параметра не заполнено, тогда по умолчанию будут использованы
//		логин и пароль из подсистемы «Базовая функциональность Интернет-поддержки
//		пользователей». Поля:
//		* Логин - Строка - логин пользователя;
//		* Пароль - Строка - пароль пользователя;
//	ОповещениеОбАвторизацииВСервисеОбновлений - ОписаниеОповещения -
//		описание обработчика успешной авторизации в сервисе обновлений,
//		для возвращения логина и пароля в вызывающий механизм. Обработчик
//		вызывается после успешного получения дистрибутива платформы с указанным
//		логином и паролем.
//		В обработчик передается параметр типа Структура с полями:
//			* Логин - Строка - логин пользователя сервиса обновлений,
//				введенный пользователем при получении обновления платформы;
//			* Пароль - пароль пользователя сервиса обновлений;
//				введенный при получении обновления платформы;
//
Процедура УстановитьОбновлениеПлатформы1СПредприятие(
	ВерсияКонфигурации = Неопределено,
	ДанныеАвторизации = Неопределено,
	ОповещениеОбАвторизацииВСервисеОбновлений = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сценарий"          , "ПереходНаНовуюВерсиюПлатформы");
	ПараметрыФормы.Вставить("ВерсияКонфигурации", ВерсияКонфигурации);
	ПараметрыФормы.Вставить("ДанныеАвторизации" , ДанныеАвторизации);
	ПараметрыФормы.Вставить("ОбновитьИнформацию", Истина);
	ПараметрыФормы.Вставить("СкрытьЗаголовки"   , Истина);
	
	ФормаОбработки = ОткрытьФорму("Обработка.ОбновлениеПрограммы.Форма.Форма", ПараметрыФормы);
	ФормаОбработки.ОповещениеОбАвторизацииВСервисеОбновлений = ОповещениеОбАвторизацииВСервисеОбновлений;
	
КонецПроцедуры

// Устарела. Будет удалена в следующей редакции библиотеки.
// Необходимо использовать функцию ДоступноИспользованиеОбновленияПрограммы()
// общего модуля ПолучениеОбновленийПрограммы.
// Определяет возможность использования механизма автоматического обновления
// платформы 1С:Предприятие в текущем режиме работы.
//
// Возвращаемое значение:
//	Булево - признак возможности использования: Истина, если использование
//		возможно, Ложь - в противном случае.
//
Функция ДоступноИспользованиеПолученияОбновленийПлатформы() Экспорт
	
	#Если ЭтоВебКлиент Тогда
	Возврат Ложь;
	
	#Иначе
	
	СистИнфо = Новый СистемнаяИнформация;
	Если СистИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86
		И СистИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	Возврат (Не ПараметрыКлиента.РазделениеВключено
		И ПараметрыКлиента.ЭтоПолноправныйПользователь
		И Не ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя())
		И ПараметрыКлиента.ИнформационнаяБазаФайловая;
	
	#КонецЕсли
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Вызывается при начале работы системы из
// ИнтернетПоддержкаПользователейКлиент.ПриНачалеРаботыСистемы().
//
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	ПараметрыИПП = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске().ИнтернетПоддержкаПользователей;
	Если Не ПараметрыИПП.Свойство("ПолучениеОбновленийПрограммы") Тогда
		// Использование обновления платформы недоступно в текущем режиме работы.
		Возврат;
	КонецЕсли;
	
	НастройкиОбновления = ИнтернетПоддержкаПользователейКлиент.ЗначениеИзФиксированногоТипа(
		ПараметрыИПП.ПолучениеОбновленийПрограммы);
	ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
		"ПолучениеОбновленийПрограммы\НастройкиОбновления",
		НастройкиОбновления);
	
	Если НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = 0 Тогда
		// Если не используется автоматическая проверка обновлений
		ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
			"ПолучениеОбновленийПрограммы\ПроверкаПриЗапускеВыполнена", Истина);
		Возврат;
	ИначеЕсли НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы <> 1 Тогда
		ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
			"ПолучениеОбновленийПрограммы\ПроверкаПриЗапускеВыполнена", Истина);
	КонецЕсли;
	
	// Вызвать автоматическую проверку обновления через 1 секунду после начала работы программы.
	ПодключитьОбработчикОжидания("ПолучениеОбновленийПрограммы_ПроверитьНаличиеОбновлений", 1.0, Истина);
	
КонецПроцедуры

// Отображает при начале работы программы форму помощника "Переход на новую
// версию платформы 1С:Предприятие" в режиме "Используется нерекомендуемая
// версия платформы 1С:Предприятие".
// Первый шаг помощника - информация о том, что используется версия платформы
// ниже рекомендуемой. Доступны кнопки: "Перейти на новую версию платформы",
// "Завершить работу", "Продолжить работу на текущей версии" (в зависимости от
// переданных параметров).
// Форма помощника отображается в режиме "Блокировать весь интерфейс".
// Предназначена для Интеграции с библиотекой стандартных подсистем (БСП).
//
// Параметры:
//	ОповещениеОЗакрытии - ОписаниеОповещения - обработчик оповещения о завершении
//		работы помощника. В обработчик оповещения передается значение:
//		- "Продолжить", если пользователь нажал кнопку "Продолжить работу на текущей версии",
//		- Неопределено - во всех остальных случаях;
//	СтандартнаяОбработка - Булево - в параметре возвращается значение Ложь,
//		если необходимо выполнить стандартную обработку версии платформы,
//		из-за недоступности использования помощника в текущем режиме
//		работы.
//
// Возвращаемое значение:
//	УправляемаяФорма - форма помощника перехода на новую версию платформы.
//
Процедура ПриПроверкеВерсииПлатформыПриЗапуске(ОповещениеОЗакрытии, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Попытка
		СлужебнаяПриПроверкеВерсииПлатформыПриЗапуске(ОповещениеОЗакрытии, СтандартнаяОбработка);
	Исключение
		СтандартнаяОбработка = Истина;
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка проверки версии платформы при запуске. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Общего назначения.

Функция ГлобальнаяИнформацияОДоступномОбновлении() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения(
		"ПолучениеОбновленийПрограммы\ИнформацияОДоступномОбновлении");
	
КонецФункции

Функция ГлобальныеНастройкиОбновления() Экспорт
	
	НастройкиОбновления = ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения(
		"ПолучениеОбновленийПрограммы\НастройкиОбновления");
	Если НастройкиОбновления = Неопределено Тогда
		НастройкиОбновления = ПолучениеОбновленийПрограммыВызовСервера.НастройкиОбновления();
		ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
			"ПолучениеОбновленийПрограммы\НастройкиОбновления", НастройкиОбновления);
	КонецЕсли;
	
	Возврат НастройкиОбновления;
	
КонецФункции

Функция ОткрытаФормаОбработкиПолученияОбновлений()
	
	ПараметрОповещения = Новый Структура("Форма", Неопределено);
	Оповестить("ПолучениеОбновленийПрограммы_ПроверкаОткрытияФормы", ПараметрОповещения, ЭтотОбъект);
	Возврат (ПараметрОповещения.Форма <> Неопределено);
	
КонецФункции

Функция ЗаписатьОшибкуВЖурналРегистрации(Сообщение) Экспорт
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		ПолучениеОбновленийПрограммыКлиентСервер.ИмяСобытияЖурналаРегистрации(),
		"Ошибка",
		Сообщение);
	
КонецФункции

Функция ЗаписатьИнформациюВЖурналРегистрации(Сообщение) Экспорт
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		ПолучениеОбновленийПрограммыКлиентСервер.ИмяСобытияЖурналаРегистрации(),
		,
		Сообщение);
	
КонецФункции

Процедура СлужебнаяПриПроверкеВерсииПлатформыПриЗапуске(ОповещениеОЗакрытии, СтандартнаяОбработка)
	
	ПараметрыПроверки = ПолучениеОбновленийПрограммыВызовСервера.ПараметрыПроверкиВерсииПлатформыПриЗапуске();
	Если ПараметрыПроверки.Продолжить Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, "Продолжить");
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки.ЭтоАдминистраторСистемы Тогда
		
		// Отобразить сообщение в помощнике обновления программы.
		ОткрытьФорму("Обработка.ОбновлениеПрограммы.Форма",
			Новый Структура("Сценарий, РаботаВПрограммеЗапрещена, ТекстСообщения",
				"СообщениеОНерекомендуемойВерсииПлатформы",
				ПараметрыПроверки.РаботаВПрограммеЗапрещена,
				ПараметрыПроверки.ТекстСообщения),
			,
			,
			,
			,
			ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		
		// Обычному пользователю показать сообщение в отдельной форме.
		ОткрытьФорму("ОбщаяФорма.СообщениеНеобходимоОбновитьВерсиюПлатформы",
			Новый Структура("ТекстСообщения", ПараметрыПроверки.ТекстСообщения),
			,
			,
			,
			,
			ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверка наличия обновлений.

Процедура ПроверитьНаличиеОбновлений() Экспорт
	
	НастройкиОбновления = ГлобальныеНастройкиОбновления();
	ИДЗадания = ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения("ПолучениеОбновленийПрограммы\ИДЗадания");
	ДатаПроверки = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если ИДЗадания = Неопределено Тогда
		
		// Обработать настройки автоматической проверки обновления.
		
		ВыполнитьПроверку = Ложь;
		Если НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = 1 Тогда
			Если Не ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения(
				"ПолучениеОбновленийПрограммы\ПроверкаПриЗапускеВыполнена", Ложь) Тогда
				ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
					"ПолучениеОбновленийПрограммы\ПроверкаПриЗапускеВыполнена", Истина);
				ВыполнитьПроверку = Истина;
			КонецЕсли;
			
		ИначеЕсли НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = 2 Тогда
			// Определение необходимости выполнения проверки по расписанию
			
			Расписание = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(НастройкиОбновления.Расписание);
			ДатаПоследнейПроверки = Неопределено;
			Если НЕ НастройкиОбновления.Свойство("ДатаПоследнейПроверки", ДатаПоследнейПроверки) Тогда
				ДатаПоследнейПроверки = '00010101';
			КонецЕсли;
			
			Если Расписание.ТребуетсяВыполнение(ДатаПроверки, ДатаПоследнейПроверки) Тогда
				ВыполнитьПроверку = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ВыполнитьПроверку Тогда
			Если НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = 2 Тогда
				// Если проверка по расписанию, тогда повторить вызов через 5 минут.
				ПодключитьПроверкуПоРасписанию();
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		// Очистить информацию о доступном обновлении перед выполнением проверки.
		ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
			"ПолучениеОбновленийПрограммы\ИнформацияОДоступномОбновлении",
			Неопределено);
		
		Если НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = 2 Тогда
			// Записать дату последней проверки.
			НастройкиОбновления.Вставить("ДатаПоследнейПроверки", ДатаПроверки);
			ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьНастройкиОбновления(НастройкиОбновления);
		КонецЕсли;
		
		Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая
			И Не ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами().УстанавливатьПодключениеНаСервере Тогда
			ВыполнитьВФоне = Ложь;
		Иначе
			ВыполнитьВФоне = Истина;
		КонецЕсли;
		
		Если ВыполнитьВФоне Тогда
			
			ИДЗадания = ПолучениеОбновленийПрограммыВызовСервера.НачатьПроверкуНаличияОбновления();
			Если ИДЗадания <> Неопределено Тогда
				
				ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
					"ПолучениеОбновленийПрограммы\ИДЗадания", ИДЗадания);
				ПодключитьОбработкуРезультатаПроверки();
				
			ИначеЕсли НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = 2 Тогда
				ПодключитьПроверкуПоРасписанию();
				
			КонецЕсли;
			
		Иначе
			
			// Выполняется проверка на клиенте.
			Состояние(, , НСтр("ru = 'Проверка наличия обновлений программы'"));
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыКлиента",
				ИнтернетПоддержкаПользователейКлиент.ПараметрыКлиента());
			ИнформацияОДоступномОбновлении =
				ПолучениеОбновленийПрограммыКлиентСервер.ИнформацияОДоступномОбновлении(
					ИнтернетПоддержкаПользователейКлиентСервер.ИмяПрограммы(),
					ИнтернетПоддержкаПользователейКлиентСервер.ВерсияКонфигурации(),
					Неопределено,
					Неопределено,
					"РабочееОбновление",
					ДополнительныеПараметры);
			Состояние();
			
			ОбработатьИнформациюОДоступномОбновлении(ИнформацияОДоступномОбновлении, ДатаПроверки);
			
			Если НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = 2 Тогда
				ПодключитьПроверкуПоРасписанию();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Выполняется проверка, определить состояние проверки.
		ИнформацияОДоступномОбновлении = ПолучениеОбновленийПрограммыВызовСервера.РезультатЗаданияПроверкиНаличияОбновлений(ИДЗадания);
		Если ИнформацияОДоступномОбновлении = Неопределено Тогда
			// Задание еще не завершено, повторить вызов через 10 секунд
			ПодключитьОбработкуРезультатаПроверки();
			
		Иначе
			
			// Задание завершено.
			ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
				"ПолучениеОбновленийПрограммы\ИДЗадания", Неопределено);
			
			// Обработка результата выполнения задания
			Если ТипЗнч(ИнформацияОДоступномОбновлении) = Тип("Структура") Тогда
				ОбработатьИнформациюОДоступномОбновлении(ИнформацияОДоступномОбновлении, ДатаПроверки);
			КонецЕсли;
			
			Если НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = 2 Тогда
				ПодключитьПроверкуПоРасписанию();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИнформациюОДоступномОбновлении(ИнформацияОДоступномОбновлении, ДатаПроверки)
	
	ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
		"ПолучениеОбновленийПрограммы\ШтампВремениИнформацииОбОбновлении",
		ДатаПроверки);
	
	ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
		"ПолучениеОбновленийПрограммы\ИнформацияОДоступномОбновлении",
		ИнформацияОДоступномОбновлении);
	
	Если ПолучениеОбновленийПрограммыКлиентСервер.ВстроенаПодсистемаТекущиеДела() Тогда
		ПоказатьОповещение = Ложь;
		ПолучениеОбновленийПрограммыКлиентПереопределяемый.ПриОпределенииНеобходимостиПоказаОповещенийОДоступныхОбновлениях(ПоказатьОповещение);
		Если Не ПоказатьОповещение Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Отображение оповещения.
	Если Не ПустаяСтрока(ИнформацияОДоступномОбновлении.ИмяОшибки) Тогда
		
		Если ИнформацияОДоступномОбновлении.ИмяОшибки = "ConnectError"
			ИЛИ ИнформацияОДоступномОбновлении.ИмяОшибки = "ServerError"
			ИЛИ ИнформацияОДоступномОбновлении.ИмяОшибки = "ClientError" Тогда
			
			// Обработать ошибку подключения
			Если Не ОткрытаФормаОбработкиПолученияОбновлений() Тогда
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Обновление программы'"),
					"e1cib/app/Обработка.ОбновлениеПрограммы",
					НСтр("ru = 'Не удалось проверить наличие обновлений программы.'"),
					БиблиотекаКартинок.Ошибка32);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ИнформацияОДоступномОбновлении.ДоступноОбновление Тогда
			
			Если ОткрытаФормаОбработкиПолученияОбновлений() Тогда
				Возврат;
			КонецЕсли;
			
			ЭтоФайловаяИБ = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
			ОбновлениеКомКонф = ИнформацияОДоступномОбновлении.Конфигурация;
			ОбновлениеКомПл   = ИнформацияОДоступномОбновлении.Платформа;
			РазмерОбновления = ?(ОбновлениеКомКонф.ДоступноОбновление, ОбновлениеКомКонф.РазмерОбновления, 0)
				+ ?(ОбновлениеКомПл.ДоступноОбновление И ЭтоФайловаяИБ
					И (Не ОбновлениеКомКонф.ДоступноОбновление Или ОбновлениеКомПл.ОбязательностьУстановки < 2),
					ОбновлениеКомПл.РазмерОбновления,
					0);
			
			ТекстОповещения = НСтр("ru = 'Доступно обновление программы.'");
			Если РазмерОбновления <> 0 Тогда
				ТекстОповещения = ТекстОповещения + Символы.ПС
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Размер дистрибутива: %1.'"),
						ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРазмераФайла(РазмерОбновления));
			КонецЕсли;
			
			Если Не ОбновлениеКомКонф.ДоступноОбновление
				И ОбновлениеКомПл.ДоступноОбновление
				И ОбновлениеКомПл.ОбязательностьУстановки < 2 Тогда
				ТекстОповещения = ТекстОповещения + Символы.ПС
					+ НСтр("ru = 'Рекомендуется установить это обновление.'");
				Картинка = БиблиотекаКартинок.Предупреждение32;
			Иначе
				Картинка = БиблиотекаКартинок.Информация32;
			КонецЕсли;
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Обновление программы'"),
				"e1cib/app/Обработка.ОбновлениеПрограммы",
				ТекстОповещения,
				Картинка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьПроверкуПоРасписанию() Экспорт
	
	ПодключитьОбработчикОжидания("ПолучениеОбновленийПрограммы_ПроверитьНаличиеОбновлений", 300, Истина);
	
КонецПроцедуры

Процедура ПодключитьОбработкуРезультатаПроверки()
	
	ПодключитьОбработчикОжидания("ПолучениеОбновленийПрограммы_ПроверитьНаличиеОбновлений", 10, Истина);
	
КонецПроцедуры

Процедура ОтключитьПроверкуПоРасписанию() Экспорт
	
	ОтключитьОбработчикОжидания("ПолучениеОбновленийПрограммы_ПроверитьНаличиеОбновлений");
	
КонецПроцедуры

#КонецОбласти
