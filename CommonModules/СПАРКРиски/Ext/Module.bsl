////////////////////////////////////////////////////////////////////////////////
// Подсистема "СПАРКРиски".
// ОбщийМодуль.СПАРКРиски.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет возможность использования сервиса в соответствии с текущим
// режимом работы и правами пользователя.
//
// Параметры:
//	ДополнительныеПрава - Строка - дополнительные права для проверки,
//		заполненные через ";".
//		Возможные значения: "ПостановкаНаМониторинг;", "ЗапросСправки;".
//
// Возвращаемое значение:
//	Булево - признак разрешенности использования. Истина - использование разрешено,
//		Ложь - в противном случае.
//
Функция ИспользованиеРазрешено(ДополнительныеПрава = Неопределено) Экспорт
	
	Возврат (ИспользованиеСПАРКРискиВключено()
		И СПАРКРискиПовтИсп.ИспользованиеРазрешено(ДополнительныеПрава));
	
КонецФункции

// Добавляет подключаемые команды в подменю.
//
// Параметры:
//	Форма - УправляемаяФорма - форма, на которую добавляются команды;
//	Источник - ДанныеФормыСтруктура - объект контрагент на форме карточки контрагента;
//			 - ТаблицаФормы - список контрагентов в форме списка;
//	ЭлементПодменю - ГруппаФормы - подменю, в которое необходимо добавить команды.
//	ДополнительныеПараметры - Структура - дополнительные параметры заполнения подменю команд.
//		Поля структуры:
//		* КонтрагентСсылка - ОпределяемыйТип.КонтрагентБИП - ссылка на элемент справочника
//			контрагентов, для которого выполняется команда. Необходимо использовать в том
//			случае, если реквизит Ссылка в параметре Источник не соответствует контрагенту.
//
Процедура ДобавитьПодключаемыеКомандыКонтрагента(Форма, Источник, ЭлементПодменю, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ИспользованиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	Команды = ПодключаемыеКомандыФормыКонтрагента(ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура"));
	ТипКнопкаФормы = Тип("КнопкаФормы");
	Для Каждого ТекущаяКоманда Из Команды Цикл
		
		ИмяКоманды = ТекущаяКоманда.Имя;
		
		// Создание команды.
		КомандаФормы = Форма.Команды.Добавить(ТекущаяКоманда.Имя);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду1СПАРКРиски";
		КомандаФормы.Заголовок                 = ТекущаяКоманда.Синоним;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение               = ОтображениеКнопки.КартинкаИТекст;
		
		// Создание кнопки.
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяКоманды, ТипКнопкаФормы, ЭлементПодменю);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды            = ИмяКоманды;
		НовыйЭлемент.Видимость             = Истина;
		НовыйЭлемент.ТолькоВоВсехДействиях = Ложь;
		
		Если ТекущаяКоманда.Имя = "СПАРКРиски_ВключитьМониторингСобытий" Тогда
			
			// Установка отметки кнопки.
			КонтрагентСсылка = Неопределено;
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
				И ДополнительныеПараметры.Свойство("КонтрагентСсылка") Тогда
				КонтрагентСсылка = ДополнительныеПараметры.КонтрагентСсылка;
			Иначе
				КонтрагентСсылка = Источник.Ссылка;
			КонецЕсли;
			
			НовыйЭлемент.Пометка = СПАРКРиски.МониторингСобытийВключен(КонтрагентСсылка, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ИндексыСПАРККонтрагента

// Возвращает информацию о контрагенте (индексы и прочая информация).
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  Контрагент            - Определяемый тип КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  ПризнакЗагрузкиДанных - Булево, УникальныйИдентификатор - если ИСТИНА, то в случае, если данных нет или они просрочены,
//            то запустить фоновое задание загрузки данных. Если передан УникальныйИдентификатор, то это идентификатор фонового задания.
//
// Возвращаемое значение:
//  Структура: структура с ключами как описано в СПАРКРискиКлиентСервер.НовыйДанныеИндексов().
//
Функция ИндексыСПАРККонтрагента(Контрагент, ПризнакЗагрузкиДанных = Ложь) Экспорт

	Результат = СПАРКРискиКлиентСервер.НовыйДанныеИндексов();

	Если НЕ ИспользованиеРазрешено() Тогда
		Результат.Вставить("ВидОшибки", Перечисления.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено);
		Возврат Результат;
	КонецЕсли;

	УслугаПодключена = ИнтернетПоддержкаПользователей.УслугаПодключена(
		СПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска(),
		Неопределено); // Предполагаем, что клиент всегда запущен в какой-то области данных, поэтому явно можно не передавать номер области.
	Если УслугаПодключена <> Истина Тогда
		Результат.Вставить("ВидОшибки", Перечисления.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит);
		Результат.Вставить("СообщениеОбОшибке", НСтр("ru = 'Услуга не подключена.'"));
		Результат.Вставить("ИнформацияОбОшибке", СтрШаблон(
			НСтр("ru = 'Не удалось загрузить индексы 1СПАРК Риски.
				|Услуга с идентификатором %1 не подключена.'"),
			СПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска()));
		Возврат Результат;
	КонецЕсли;

	ТипСтрока                  = Тип("Строка");
	ТипСтруктура               = Тип("Структура");
	ТипТаблицаЗначений         = Тип("ТаблицаЗначений");
	ТипУникальныйИдентификатор = Тип("УникальныйИдентификатор");

	КонтрагентИНН = "";

	ДатаДляРегистров           = ТекущаяДатаСеанса();
	ДатаАктуальностиИнформации = ДатаДляРегистров - 12*60*60; // Данные за прошедшие 12 часов считаются актуальными.

	Если ТипЗнч(Контрагент) = ТипСтрока Тогда
		КонтрагентИНН = СокрЛП(Контрагент);
		Результат.Вставить("ИНН", КонтрагентИНН);
		Результат.Вставить("Контрагент", Неопределено);
		Если СПАРКРискиКлиентСервер.ИННСоответствуетТребованиям(КонтрагентИНН) Тогда
			Результат.Вставить("ПодлежитПроверке", Истина);
		Иначе
			Результат.Вставить("ПодлежитПроверке", Ложь);
		КонецЕсли;
	Иначе
		Результат.Вставить("Контрагент", Контрагент);
		// Получение вспомогательных данных.
		МассивКонтрагентов = Новый Массив;
		МассивКонтрагентов.Добавить(Контрагент);
		ТаблицаЗначенийРеквизитов = ЗначенияРеквизитовКонтрагентов(МассивКонтрагентов);
		Если ТаблицаЗначенийРеквизитов.Количество() >= 1 Тогда
			КонтрагентИНН = СокрЛП(ТаблицаЗначенийРеквизитов[0].ИНН);
			Результат.Вставить("ИНН", КонтрагентИНН);
			Результат.Вставить("ПодлежитПроверке", ТаблицаЗначенийРеквизитов[0].ПодлежитПроверке);
		КонецЕсли;
	КонецЕсли;

	НеобходимоЗагрузитьИнформацию = Ложь;
	// Передали ИНН - загружать всегда, кэш не используется.
	Если ТипЗнч(Контрагент) = ТипСтрока Тогда
		ТекстОшибки = "";
		Если СПАРКРискиКлиентСервер.ИННСоответствуетТребованиям(КонтрагентИНН, ТекстОшибки) = Истина Тогда
			НеобходимоЗагрузитьИнформацию = Истина;
			// Для ИНН данные всегда получаются из фонового задания, надо и указать, что в кэше нет данных.
			Результат.Вставить("СостояниеВыводаДанных", Перечисления.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных);
			Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
		Иначе
			Результат.Вставить("СостояниеВыводаДанных", Перечисления.СостоянияВыводаИндексовСПАРКРиски.НеправильныйИНН);
			Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
			Результат.Вставить("ВидОшибки", Перечисления.ВидыОшибокСПАРКРиски.НекорректныйИНН);
			Результат.Вставить("ТекстОшибки", ТекстОшибки); // Текст ошибки заполнен в "ИННСоответствуетТребованиям".
		КонецЕсли;
	Иначе // Передали ссылку на контрагента.
		// 1. Если есть информация в кэше и она актуальна, то вернуть ее.
		Запись = РегистрыСведений.ИндексыСПАРКРиски.СоздатьМенеджерЗаписи();
		Запись.Контрагент = Контрагент;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			// Основные данные.
			Результат.Вставить("Контрагент",                    Запись.Контрагент);
			Результат.Вставить("ИНН",                           Запись.ИНН);
			// Индексы.
			Результат.Вставить("ИндексДолжнойОсмотрительности", Запись.ИндексДолжнойОсмотрительности);
			Результат.Вставить("ИДОГрадация",                   СПАРКРискиКлиентСервер.ГрадацияИндекса(Запись.ИндексДолжнойОсмотрительности, "ИндексДолжнойОсмотрительности"));
			Результат.Вставить("ИндексФинансовогоРиска",        Запись.ИндексФинансовогоРиска);
			Результат.Вставить("ИФРГрадация",                   СПАРКРискиКлиентСервер.ГрадацияИндекса(Запись.ИндексФинансовогоРиска, "ИндексФинансовогоРиска"));
			Результат.Вставить("ИндексПлатежнойДисциплины",     Запись.ИндексПлатежнойДисциплины);
			Результат.Вставить("ИПДГрадация",                   СПАРКРискиКлиентСервер.ГрадацияИндекса(Запись.ИндексПлатежнойДисциплины, "ИндексПлатежнойДисциплины"));
			Результат.Вставить("Активен",                       Запись.Активен);
			Результат.Вставить("ТекстСтатуса",                  Запись.ТекстСтатуса);
			Результат.Вставить("ДатаСтатуса",                   Запись.ДатаСтатуса);
			Результат.Вставить("КодСтатуса",                    Запись.КодСтатуса);
			
			// Монитор событий.
			Результат.Вставить("ИдентификаторСобытия",          Запись.ИдентификаторСобытия);
			Результат.Вставить("ИдентификаторТипаСобытия",      Запись.ИдентификаторТипаСобытия);
			Результат.Вставить("ТипСобытияНазвание",            НазваниеТипаСобытия(Запись.ИдентификаторТипаСобытия));
			Результат.Вставить("ДатаСобытия",                   Запись.ДатаСобытия);
			Результат.Вставить("ЗначениеСтарое",                Запись.ЗначениеСтарое);
			Результат.Вставить("ЗначениеНовое",                 Запись.ЗначениеНовое);
			
			// Адреса и навигационные ссылки команд - менять не требуется.
			// Прочее.
			Результат.Вставить("ВидОшибки",                     Запись.ВидОшибки);
			Результат.Вставить("ТекстОшибки",                   Запись.ТекстОшибки);
			Результат.Вставить("ДатаОбновления",                Запись.ДатаОбновления);
			Результат.Вставить("ИдентификаторФоновогоЗадания",  Неопределено);
			Результат.Вставить("АдресХранилищаФоновогоЗадания", Неопределено);
			Если Запись.ДатаОбновления < ДатаАктуальностиИнформации Тогда
				НеобходимоЗагрузитьИнформацию = Истина;
				Результат.Вставить("СостояниеВыводаДанных", Перечисления.СостоянияВыводаИндексовСПАРКРиски.ВКэшеУстаревшиеДанные);
				Если ПризнакЗагрузкиДанных = Истина Тогда
					Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание);
				Иначе
					Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
				КонецЕсли;
			Иначе
				Результат.Вставить("СостояниеВыводаДанных", Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзКэша);
				Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
			КонецЕсли;
		Иначе
			НеобходимоЗагрузитьИнформацию = Истина;
			Результат.Вставить("СостояниеВыводаДанных", Перечисления.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных);
			Если ПризнакЗагрузкиДанных = Истина Тогда
				Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание);
			Иначе
				Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
			КонецЕсли;
		КонецЕсли;
		Запись = Неопределено;
	КонецЕсли;

	// 2. Если информации в кэше нет, то получить ее фоновым заданием.
	Если (НеобходимоЗагрузитьИнформацию = Истина) Тогда

		Если НЕ ПустаяСтрока(КонтрагентИНН) Тогда

			ТекстОшибки = "";
			Если СПАРКРискиКлиентСервер.ИННСоответствуетТребованиям(КонтрагентИНН, ТекстОшибки) Тогда

				ИдентификаторФормы = Новый УникальныйИдентификатор;
				АдресХранилищаФоновогоЗадания = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
				Результат.Вставить("АдресХранилищаФоновогоЗадания", АдресХранилищаФоновогоЗадания);

				РезультатЗапускаФоновогоЗадания = Новый Структура;
				РезультатЗапускаФоновогоЗадания.Вставить("ИдентификаторЗадания", Неопределено);
				РезультатЗапускаФоновогоЗадания.Вставить("АдресРезультата", АдресХранилищаФоновогоЗадания);
				РезультатЗапускаФоновогоЗадания.Вставить("АдресДополнительногоРезультата", "");
				РезультатЗапускаФоновогоЗадания.Вставить("КраткоеПредставлениеОшибки", "");
				РезультатЗапускаФоновогоЗадания.Вставить("ПодробноеПредставлениеОшибки", "");

				// Ограничение: в один момент времени нельзя запустить несколько фоновых заданий по получению индексов для одинакового ИНН.
				КлючФоновогоЗадания = "ЗагрузкаИндексаСПАРКРискиДляИНН_" + КонтрагентИНН;

				Если ТипЗнч(ПризнакЗагрузкиДанных) = ТипУникальныйИдентификатор Тогда // Задание было запущено ранее.
					ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ПризнакЗагрузкиДанных);
					Если ФоновоеЗадание <> Неопределено Тогда
						РезультатЗапускаФоновогоЗадания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.УникальныйИдентификатор);
						Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
							РезультатЗапускаФоновогоЗадания.Вставить("Статус", "Выполняется");
						ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
							РезультатЗапускаФоновогоЗадания.Вставить("Статус", "Выполнено");
							СообщенияФоновогоЗадания = ДлительныеОперации.ПрочитатьПрогресс(ФоновоеЗадание.УникальныйИдентификатор);
							Если (ТипЗнч(СообщенияФоновогоЗадания) = ТипСтруктура)
									И (СообщенияФоновогоЗадания.Свойство("АдресРезультата"))
									И НЕ ПустаяСтрока(СообщенияФоновогоЗадания.АдресРезультата) Тогда
								РезультатЗапускаФоновогоЗадания.Вставить("АдресРезультата", СообщенияФоновогоЗадания.АдресРезультата);
							КонецЕсли;
						ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
							РезультатЗапускаФоновогоЗадания.Вставить("Статус", "Ошибка");
							РезультатЗапускаФоновогоЗадания.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке));
						ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
							РезультатЗапускаФоновогоЗадания.Вставить("Статус", "Отменено");
						КонецЕсли;
					Иначе
						Результат.Вставить("ВидОшибки",               Перечисления.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка);
						Результат.Вставить("ТекстОшибки",             НСтр("ru='Не найдено фоновое задание'"));
						Результат.Вставить("СостояниеВыводаДанных",   Перечисления.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных);
						Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания);
					КонецЕсли;
				Иначе
					// Фоновое задание не было запущено.
					// Запускать фоновое задание только если это явно указано.
					Если (ПризнакЗагрузкиДанных = Истина) Тогда
						МассивОписанийКонтрагентов = Новый Массив;
						ОбластьДанныхЛокальная = -1;
						ОписаниеКонтрагента = СПАРКРискиКлиентСервер.НовыйОписаниеКонтрагента();
						Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
							ОбластьДанныхЛокальная = ОбщегоНазначения.ЗначениеРазделителяСеанса();
							ОписаниеКонтрагента.ОбластьДанных = ОбластьДанныхЛокальная;
						КонецЕсли;
						Если ТипЗнч(Контрагент) = ТипСтрока Тогда
							ОписаниеКонтрагента.Контрагент = Неопределено;
						Иначе
							ОписаниеКонтрагента.Контрагент = Контрагент;
						КонецЕсли;
						ОписаниеКонтрагента.ИНН        = КонтрагентИНН; // Уже без пробелов.
						МассивОписанийКонтрагентов.Добавить(ОписаниеКонтрагента);
						ПараметрыЗапускаПроцедуры = Новый Структура("ОбластьДанных, МассивОписанийКонтрагентов",
							ОбластьДанныхЛокальная,
							МассивОписанийКонтрагентов);
						ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
						ПараметрыВыполнения.Вставить("НаименованиеФоновогоЗадания",
							СтрШаблон(
								НСтр("ru='Загрузка индексов СПАРК Риски для контрагента %1 с ИНН %2'"),
								Контрагент,
								КонтрагентИНН));
						ПараметрыВыполнения.Вставить("КлючФоновогоЗадания", КлючФоновогоЗадания);
						ПараметрыВыполнения.Вставить("АдресРезультата", АдресХранилищаФоновогоЗадания);
						ПараметрыВыполнения.Вставить("ЗапуститьВФоне", Истина); // Всегда запускать в фоне, даже если в очереди уже есть фоновые задания.
						ОжидатьЗавершение = ПараметрыВыполнения.ОжидатьЗавершение;
						СПАРКРискиПереопределяемый.ВремяОжиданияФоновогоЗадания(ОжидатьЗавершение);
						ПараметрыВыполнения.Вставить("ОжидатьЗавершение", ОжидатьЗавершение);

						РезультатЗапускаФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
							"СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентовВФоне",
							ПараметрыЗапускаПроцедуры,
							ПараметрыВыполнения);
					КонецЕсли;
				КонецЕсли;

				Если РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
					// СостояниеВыводаДанных заполняется раньше - 
					Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание);
					Результат.Вставить("ИдентификаторФоновогоЗадания", РезультатЗапускаФоновогоЗадания.ИдентификаторЗадания);
				ИначеЕсли РезультатЗапускаФоновогоЗадания.Статус = "Выполнено" Тогда
					// Если задание выполнено, значит значения уже или записаны в кэш (в регистр сведений) (если передан Контрагент)
					//  или сохранены во временном хранилище.
					РезультатВыполненияФоновогоЗадания = ПолучитьИзВременногоХранилища(РезультатЗапускаФоновогоЗадания.АдресРезультата);
					Если РезультатВыполненияФоновогоЗадания <> Неопределено Тогда
						Если РезультатВыполненияФоновогоЗадания.Свойство("ЗначенияИндексов")
								И (ТипЗнч(РезультатВыполненияФоновогоЗадания.ЗначенияИндексов) = ТипТаблицаЗначений)
								И (РезультатВыполненияФоновогоЗадания.ЗначенияИндексов.Количество() > 0) Тогда
							ЗаполнитьЗначенияСвойств(Результат, РезультатВыполненияФоновогоЗадания.ЗначенияИндексов[0]);
						КонецЕсли;
						// ВидОшибки может быть общий или по каждому ИНН. Если есть по ИНН - вставить его, иначе подставить общий.
						Если Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка() Тогда
							Результат.Вставить("ВидОшибки", РезультатВыполненияФоновогоЗадания.ВидОшибки);
						КонецЕсли;
						Результат.Вставить("ТекстОшибки",             РезультатВыполненияФоновогоЗадания.СообщениеОбОшибке);
						Результат.Вставить("СостояниеВыводаДанных",   Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания);
						Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
					Иначе
						Результат.Вставить("ВидОшибки",                Перечисления.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка);
						Результат.Вставить("ТекстОшибки",              НСтр("ru='Ошибка получения индексов СПАРК Риски'"));
						Результат.Вставить("ДатаОбновления",           ДатаДляРегистров);
						Результат.Вставить("СостояниеВыводаДанных",    Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка());
						Результат.Вставить("СостояниеЗагрузкиДанных",  Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания);
					КонецЕсли;
					Результат.Вставить("ИдентификаторФоновогоЗадания", Неопределено);
				ИначеЕсли РезультатЗапускаФоновогоЗадания.Статус = "Ошибка" Тогда
					Результат.Вставить("ТекстОшибки",                  РезультатЗапускаФоновогоЗадания.ПодробноеПредставлениеОшибки);
					Результат.Вставить("СостояниеВыводаДанных",        Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка());
					Результат.Вставить("СостояниеЗагрузкиДанных",      Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания);
					Результат.Вставить("ИдентификаторФоновогоЗадания", Неопределено);
				ИначеЕсли РезультатЗапускаФоновогоЗадания.Статус = "Отменено" Тогда
					Результат.Вставить("ТекстОшибки",                  НСтр("ru='Выполнение фонового задания отменено администратором'"));
					Результат.Вставить("СостояниеВыводаДанных",        Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка());
					Результат.Вставить("СостояниеЗагрузкиДанных",      Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ОтменаФоновогоЗадания);
					Результат.Вставить("ИдентификаторФоновогоЗадания", Неопределено);
				КонецЕсли;

			Иначе
				Результат.Вставить("ТекстОшибки",             ТекстОшибки);
				Результат.Вставить("СостояниеВыводаДанных",   Перечисления.СостоянияВыводаИндексовСПАРКРиски.НеправильныйИНН);
				Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
			КонецЕсли;

		Иначе
			Результат.Вставить("СостояниеВыводаДанных", Перечисления.СостоянияВыводаИндексовСПАРКРиски.НеправильныйИНН);
			Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
		КонецЕсли;

	КонецЕсли;

	Если Результат.Свойство("ИНН") И Не СПАРКРискиКлиентСервер.ИННСоответствуетТребованиям(Результат.ИНН) Тогда
		Результат.Вставить("ВидОшибки", Перечисления.ВидыОшибокСПАРКРиски.НекорректныйИНН);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выводит информацию об индексах СПАРК Риски в элемент управления.
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  РезультатИндексыКонтрагента - Структура, Неопределено - результата выполнения функции ИндексыСПАРККонтрагента
//                                 (ключи описаны в СПАРКРискиКлиентСервер.НовыйДанныеИндексов()),
//                                 или Неопределено, если необходимо вызвать эту функцию;
//  КонтрагентОбъект - Объект, Неопределено - заполняется в том случае, если форма - это форма элемента справочника, а не форма документа.
//  Контрагент - Определяемый тип КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  Форма      - УправляемаяФорма - форма, в которой необходимо вывести информацию об индексах СПАРК Риски.
//                   В этой форме должен присутствовать реквизит "ИндексыСПАРКРиски" произвольного типа
//                     и (если заполнение будет осуществляться стандартным библиотечным способом), то элементы с именами:
//    * ДекорацияИндексыСПАРКРиски - Декорация текст;
//    * КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски - Декорация картинка;
//  ПараметрыОтображения - Структура - прочие параметры. Возможные ключи:
//    * ВариантОтображения - Строка - см. СПАРКРискиКлиентСервер.ОтобразитьИндексыСПАРК;
//  ПризнакЗагрузкиДанных - Булево, УникальныйИдентификатор - если ИСТИНА, то в случае, если данных нет или они просрочены,
//            то запустить фоновое задание загрузки данных. Если передан УникальныйИдентификатор, то это идентификатор фонового задания.
//
Процедура ОтобразитьИндексыСПАРК(
			РезультатИндексыКонтрагента,
			КонтрагентОбъект,
			Контрагент,
			Форма,
			ПараметрыОтображения = Неопределено,
			ПризнакЗагрузкиДанных = Ложь) Экспорт

	ТипСтруктура = Тип("Структура");

	ИспользованиеРазрешено = ИспользованиеРазрешено();

	Если ИспользованиеРазрешено И ТипЗнч(РезультатИндексыКонтрагента) <> ТипСтруктура Тогда
		РезультатИндексыКонтрагента = ИндексыСПАРККонтрагента(Контрагент, ПризнакЗагрузкиДанных);
	КонецЕсли;

	Форма.ИндексыСПАРКРиски = РезультатИндексыКонтрагента;
	СПАРКРискиКлиентСервер.ОтобразитьИндексыСПАРК(
		РезультатИндексыКонтрагента,
		КонтрагентОбъект,
		Контрагент,
		Форма,
		ИспользованиеРазрешено,
		ПараметрыОтображения);

КонецПроцедуры

// Возвращает информацию об индексах СПАРК Риски в виде структуры форматированных строк.
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  РезультатИндексыКонтрагента - Структура, Неопределено - результата выполнения функции ИндексыСПАРККонтрагента
//                                 (ключи описаны в СПАРКРискиКлиентСервер.НовыйДанныеИндексов()),
//                                 или Неопределено, если необходимо вызвать эту функцию;
//  Контрагент - Определяемый тип КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  Форма      - УправляемаяФорма - форма, в которой необходимо вывести информацию об индексах СПАРК Риски.
//  ПризнакЗагрузкиДанных - Булево, УникальныйИдентификатор - если ИСТИНА, то в случае, если данных нет или они просрочены,
//            то запустить фоновое задание загрузки данных. Если передан УникальныйИдентификатор, то это идентификатор фонового задания.
//
// Возвращаемое значение:
//   Структура - Структура представлений индексов и других показателей с ключами, как СПАРКРискиКлиентСервер.НовыйПредставленияИндексов().
//
Функция ПолучитьПредставленияИндексов(
			РезультатИндексыКонтрагента,
			Контрагент,
			Форма,
			ПризнакЗагрузкиДанных = Истина) Экспорт

	ТипСтруктура = Тип("Структура");

	Результат = СПАРКРискиКлиентСервер.НовыйПредставленияИндексов();
	Результат.Вставить("Контрагент", Контрагент);

	Если НЕ ИспользованиеРазрешено() Тогда
		РезультатИндексыКонтрагента.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено"));
		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(РезультатИндексыКонтрагента) <> ТипСтруктура Тогда
		РезультатИндексыКонтрагента = ИндексыСПАРККонтрагента(Контрагент, ПризнакЗагрузкиДанных);
	КонецЕсли;

	Форма.ИндексыСПАРКРиски = РезультатИндексыКонтрагента;
	СПАРКРискиКлиентСервер.ПолучитьПредставленияИндексов(
		РезультатИндексыКонтрагента,
		Контрагент,
		Форма);

	Возврат Результат;

КонецФункции

// Записывает данные в кэш индексов СПАРК Риски.
//
// Параметры:
//  Данные - Структура - данные, необходимые для заполнения записи регистра сведений "ИндексыСПАРКРиски".
//
Процедура СохранитьЗначенияИндексовВКэше(Данные) Экспорт

	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(Данные) = ТипСтруктура
			И (НЕ ЗначениеЗаполнено(Данные.ВидОшибки)
				ИЛИ Данные.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.НеизвестныйИНН) Тогда
		Если Данные.Свойство("ИНН") Тогда
			Данные.Вставить("ИНН", СокрЛП(Данные.ИНН));
		КонецЕсли;
		УстановитьПривилегированныйРежим(Истина);
		Запись = РегистрыСведений.ИндексыСПАРКРиски.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Данные);
		Запись.Записать(Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область МониторингСобытий

// Загружает события мониторинга из сервиса 1СПАРК Риски:
//	- все события, если последняя загрузка событий выполнялась
//	  не в текущий день;
//	- события по контрагентам, поставленным на мониторинг, события
//	  по которым еще не загружались в информационную базу.
//
// Возвращаемое значение:
//	- ПеречислениеСсылка.ВидыОшибокСПАРКРиски - вид ошибки,
//		возникшей при загрузке событий из сервиса 1СПАРК Риски.
//		При успешном выполнении возвращается пустая ссылка.
//
Функция ОбновитьСобытияМониторинга() Экспорт
	
	Возврат СПАРКРискиМониторингСобытий.ОбновитьСобытияМониторинга();
	
КонецФункции

// Заполняет контрагентов на мониторинге в соответствии.
// См. СПАРКРискиПереопределяемый.КонтрагентыДляМониторинга().
//
Процедура ЗаполнитьКонтрагентовНаМониторинге() Экспорт
	
	СПАРКРискиМониторингСобытий.ЗаполнитьКонтрагентовНаМониторинге();
	
КонецПроцедуры

// Включает или отключает мониторинг контрагентов.
//
// Параметры:
//	Контрагенты - Массив - контрагенты для добавления или удаления. Тип элемента -
//		ссылка, определенная в определяемом типе КонтрагентБИП.
//	Включить - Булево - Истина - включить мониторинг, Ложь - в противном случае;
//	Вручную - Булево - установить признак ручной постановки на мониторинг.
//
Процедура ВключитьОтключитьМониторингСобытий(Контрагенты, Включить, Вручную = Ложь) Экспорт
	
	СПАРКРискиМониторингСобытий.ВключитьОтключитьМониторингСобытий(Контрагенты, Включить, Вручную);
	
КонецПроцедуры

// Возвращает признак постановки контрагента на мониторинг.
//
// Параметры:
//	Контрагент - ОпределяемыйТип.КонтрагентБИП - проверяемый контрагент;
//	Вручную - Булево - проверить признак ручной или автоматической постановки.
//		Если не передан, тогда не учитывается.
//
// Возвращаемое значение:
//	Булево - Истина - мониторинг включен, Ложь - в противном случае.
//
Функция МониторингСобытийВключен(Контрагент, Вручную = Неопределено) Экспорт
	
	Возврат СПАРКРискиМониторингСобытий.МониторингСобытийВключен(Контрагент, Вручную);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий_ИндексыСПАРКРиски

// Вызывается из форм, в которые встроен показ индексов 1СПАРК Риски.
//
// Параметры:
//  Форма                - УправляемаяФорма - форма, в которой инициировано событие;
//  КонтрагентОбъект     - Объект, Неопределено - заполняется в том случае, если форма - это форма элемента справочника, а не форма документа.
//  Контрагент           - Определяемый тип КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  ПараметрыОтображения - Структура - прочие параметры. Возможные ключи:
//    * ВариантОтображения - Строка - см. описание в СПАРКРиски.ОтобразитьИндексыСПАРК.
//
Процедура ПриСозданииНаСервере(Форма, КонтрагентОбъект, Контрагент, ПараметрыОтображения) Экспорт

	ИспользованиеРазрешено = ИспользованиеРазрешено();

	СтандартнаяОбработкаБиблиотекой = Истина;
	СПАРКРискиПереопределяемый.ПриСозданииНаСервере(
		Форма,
		КонтрагентОбъект,
		Контрагент,
		ПараметрыОтображения,
		ИспользованиеРазрешено,
		СтандартнаяОбработкаБиблиотекой);

	Если СтандартнаяОбработкаБиблиотекой = Истина Тогда
		// Есть несколько способов отображения данных индексов на форме:
		//  - библиотека самостоятельно заполняет декорацию,
		//  - ответственные за внедрение пишут код, который (на основании данных индексов) рисует их на форме
		//      в произвольных элементах управления.
		// По умолчанию библиотека самостоятельно заполняет декорацию. Если это поведение необходимо изменить,
		//  то надо прописать код в "СПАРКРискиПереопределяемый.ПриСозданииНаСервере".
		ОтобразитьИндексыСПАРК(
			Форма.ИндексыСПАРКРиски,
			КонтрагентОбъект,
			Контрагент,
			Форма,
			ПараметрыОтображения,
			Истина);
	КонецЕсли;

КонецПроцедуры

// Вызывается из форм объектов, в которые встроен показ индексов 1СПАРК Риски.
// Сценарий использования такой: при создании нового объекта и ввода ИНН, инициируется получение индексов СПАРК Риски.
//  НО! Так как ссылки еще нет, то полученные данные не сохраняются в кэше и при повторном открытии этой же формы, данные получаются заново.
//  В этой процедуре реализована запись полученных индексов в кэш.
//
// Параметры:
//  Форма           - УправляемаяФорма - форма, в которой инициировано событие;
//  ТекущийОбъект   - Объект - Записываемый объект;
//  ПараметрыЗаписи - Параметры записи объекта.
//    * ВключитьМониторингСобытий1СПАРКРиски - Булево - добавить контрагента
//        в список контрагентов на мониторинге 1СПАРК Риски.
//        Истина - добавить, Ложь - не добавлять;
//    * КонтрагентСсылка - ссылка на контрагента. Необходимо заполнять в том случае,
//        если ТекущийОбъект.Ссылка не указывает на Контрагента, информацию о котором необходимо сохранить в кэше.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт

	ТипСтруктура = Тип("Структура");

	КонтрагентСсылка = ТекущийОбъект.Ссылка;

	Если ТипЗнч(ПараметрыЗаписи) = ТипСтруктура Тогда
		Если ПараметрыЗаписи.Свойство("КонтрагентСсылка") Тогда
			КонтрагентСсылка = ПараметрыЗаписи.КонтрагентСсылка;
		КонецЕсли;
		Если ПараметрыЗаписи.Свойство("ВключитьМониторингСобытий1СПАРКРиски")
				И ПараметрыЗаписи.ВключитьМониторингСобытий1СПАРКРиски = Истина Тогда
			// Включить события мониторинга по контрагенту
			УстановитьПривилегированныйРежим(Истина);
				ВключитьОтключитьМониторингСобытий(КонтрагентСсылка, Истина);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ИспользованиеРазрешено() Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Форма.ИндексыСПАРКРиски) = ТипСтруктура Тогда
		Если Форма.ИндексыСПАРКРиски.СостояниеВыводаДанных = Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания Тогда
			Форма.ИндексыСПАРКРиски.Вставить("Контрагент", КонтрагентСсылка);
			СохранитьЗначенияИндексовВКэше(Форма.ИндексыСПАРКРиски);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияПодсистемБиблиотеки

// Возвращает реквизит Название элемента справочника ТипыСобытийСПАРКРиски.
//
// Параметры:
//  ТипСобытия - СправочникСсылка.ТипыСобытийСПАРКРиски - событие, у которого надо получить название.
//
// Возвращаемое значение:
//   Строка - Название типа события.
//
Функция НазваниеТипаСобытия(Знач ТипСобытия) Экспорт
	
	Если Не ЗначениеЗаполнено(ТипСобытия) Тогда
		Возврат "";
	КонецЕсли;
	
	Попытка
		Результат = СПАРКРискиПовтИсп.НазваниеТипаСобытия(ТипСобытия);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Вызывается при сохранении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль) Экспорт
	
	СПАРКРискиМониторингСобытий.ОчиститьРезультатыПостановкиНаМониторинг();
	
КонецПроцедуры

// Вызывается при удалении логина и пароля пользователя ИПП из
// информационной базы из всех контекстов использования библиотеки.
//
Процедура ПриУдаленииЛогинаИПароляИзИБ() Экспорт
	
	СПАРКРискиМониторингСобытий.ОчиститьРезультатыПостановкиНаМониторинг();
	
КонецПроцедуры

// Функция проверяет правильность внедрения подсистемы Новости.
// В случае ошибок возвращаются тексты ошибок.
//
// Возвращаемое значение:
//  - Строка - тексты ошибок или пустая строка, если ошибок не было.
//
Функция ПроверитьПравильностьВнедренияПодсистемы() Экспорт

	Результат = "";

	// 1. Проверить правильность настройки состава общих реквизитов.
	Свойство_Использовать   = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	Свойство_НеИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
	РезультатЛокальный = "";

	ИмяРеквизита = "ОбластьДанныхОсновныеДанные";
	НайденныйРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
	Если НайденныйРеквизит <> Неопределено Тогда
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегламентныеЗадания.ВсеОбновленияСПАРКРискиОбщее,        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегламентныеЗадания.ВсеОбновленияСПАРКРискиРазделенное,  РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегламентныеЗадания.ПроверкаГотовностиСправкиСПАРКРиски, РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ВсеОбновленияСПАРКОбщее,                РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ВсеОбновленияСПАРКРазделенное,          РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ИндексыСПАРКРиски,                      РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КонтрагентыНаМониторингеСПАРКРиски,     РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.СвойстваКонтрагентовСПАРКРиски,         РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.СобытияМониторингаСПАРКРиски,           РезультатЛокальный);
	КонецЕсли;
	Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
		Результат = Результат
			+ СтрШаблон(
				НСтр("ru='Ошибки настройки общего реквизита ОбластьДанныхОсновныеДанные:
					|%1
					|
					|'"),
				РезультатЛокальный);
	КонецЕсли;

	РезультатЛокальный = "";
	ИмяРеквизита = "ОбластьДанныхВспомогательныеДанные";
	НайденныйРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
	Если НайденныйРеквизит <> Неопределено Тогда
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегламентныеЗадания.ВсеОбновленияСПАРКРискиОбщее,        РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегламентныеЗадания.ВсеОбновленияСПАРКРискиРазделенное,  РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегламентныеЗадания.ПроверкаГотовностиСправкиСПАРКРиски, РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ВсеОбновленияСПАРКОбщее,                РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.ВсеОбновленияСПАРКРазделенное,          РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.ИндексыСПАРКРиски,                      РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.КонтрагентыНаМониторингеСПАРКРиски,     РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.СвойстваКонтрагентовСПАРКРиски,         РезультатЛокальный);
		Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.СобытияМониторингаСПАРКРиски,           РезультатЛокальный);
	КонецЕсли;
	Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
		Результат = Результат
			+ СтрШаблон(
				НСтр("ru='Ошибки настройки общего реквизита ОбластьДанныхВспомогательныеДанные:
					|%1
					|
					|'"),
				РезультатЛокальный);
	КонецЕсли;

	// 2. Проверить правильность настройки прав для ролей АдминистраторСистемы и ПолныеПрава.
	// Проверяются не все права, а минимально необходимые: Чтение и Редактирование.
	РольАС = Метаданные.Роли.АдминистраторСистемы;
	РольПП = Метаданные.Роли.ПолныеПрава;

	РезультатЛокальный = "";
	Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.Константы.ДатаОбновленияСобытийСПАРКРиски,        РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.Справочники.СправкиСПАРКРискиПрисоединенныеФайлы, РезультатЛокальный);
	Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.Справочники.ТипыСобытийСПАРКРиски,                РезультатЛокальный);
	Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
		Результат = Результат
			+ НСтр("ru='Ошибки настройки прав для роли АдминистраторСистемы:'")
			+ Символы.ПС + РезультатЛокальный
			+ Символы.ПС + Символы.ПС;
	КонецЕсли;

	РезультатЛокальный = "";
	Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.Константы.ДатаОбновленияСобытийСПАРКРиски,        РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.Справочники.СправкиСПАРКРискиПрисоединенныеФайлы, РезультатЛокальный);
	Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.Справочники.ТипыСобытийСПАРКРиски,                РезультатЛокальный);
	Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
		Результат = Результат
			+ НСтр("ru='Ошибки настройки прав для роли ПолныеПрава:'")
			+ Символы.ПС + РезультатЛокальный
			+ Символы.ПС + Символы.ПС;
	КонецЕсли;

	Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
		Результат = Результат
			+ НСтр("ru='Ошибки настройки версии конфигурации:'")
			+ Символы.ПС + РезультатЛокальный
			+ Символы.ПС + Символы.ПС;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// Возвращает список процедур-обработчиков обновления ИБ для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Вызывается перед началом обновления данных ИБ.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики обновления общих данных.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "";
	Обработчик.Процедура           = "СПАРКРиски.ОбщиеДанныеНачальноеЗаполнениеДанныхСПАРКРиски";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Начальное заполнение.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.7.11";
	Обработчик.Процедура           = "СПАРКРиски.ПерейтиНаВерсию_2_1_7_11";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Переход на версию 2.1.7.11'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.8.15";
	Обработчик.Процедура           = "СПАРКРиски.ОбщиеДанныеПерейтиНаВерсию_2_1_8_15";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Переход на версию 2.1.8.15'");
	
	// Обработчики обновления областей данных.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "";
	Обработчик.Процедура           = "СПАРКРиски.НачальноеЗаполнениеДанныхСПАРКРиски";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Начальное заполнение.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "СПАРКРиски.НачальноеЗаполнениеДанныхСПАРКРиски";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Переход на новую версию'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.7.10";
	Обработчик.Процедура           = "СПАРКРиски.ПерейтиНаВерсию_2_1_7_10";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Переход на версию 2.1.7.10'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.9.2";
	Обработчик.Процедура           = "СПАРКРиски.ОбновлениеИнформационнойБазы_ОчиститьРезультатыПостановкиНаМониторинг_2_1_9_2";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Переход на версию 2.1.9.2'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTP",
		"assessment.1c.ru",
		443,
		НСтр("ru = 'Сервис 1СПАРК Риски (зона ru)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTP",
		"assessment.1c.eu",
		443,
		НСтр("ru = 'Сервис 1СПАРК Риски (зона eu)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.ТекущиеДела.
// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ИспользованиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов процедуры предполагает наличие подсистемы СтандартныеПодсистемы.ТекущиеДела.
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Отчеты.СобытияМониторингаСПАРКРиски.ПолноеИмя());
	Если Разделы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Количество критичных событий по разрешенным контрагентам.
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КонтрагентыНаМониторингеСПАРКРиски.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ КонтрагентыДляМониторинга
	|ИЗ
	|	РегистрСведений.КонтрагентыНаМониторингеСПАРКРиски КАК КонтрагентыНаМониторингеСПАРКРиски
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК СвойстваКонтрагентовСПАРКРиски
	|		ПО КонтрагентыНаМониторингеСПАРКРиски.Контрагент = СвойстваКонтрагентовСПАРКРиски.Контрагент
	|ГДЕ
	|	СвойстваКонтрагентовСПАРКРиски.ИННКорректный
	|	И НЕ КонтрагентыНаМониторингеСПАРКРиски.Контрагент.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент");
	ЧастиЗапроса.Добавить(";");
	
	
	ШаблонЗапроса =
	"ИЗ
	|	РегистрСведений.СобытияМониторингаСПАРКРиски КАК СобытияМониторингаСПАРКРиски
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыСобытийСПАРКРиски КАК ТипыСобытийСПАРКРиски
	|		ПО СобытияМониторингаСПАРКРиски.ТипСобытияИдентификатор = ТипыСобытийСПАРКРиски.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонтрагентыДляМониторинга КАК КонтрагентыДляМониторинга
	|		ПО СобытияМониторингаСПАРКРиски.Контрагент = КонтрагентыДляМониторинга.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.%ИмяСправочникаКонтрагенты КАК СправочникКонтрагенты
	|		ПО (СправочникКонтрагенты.Ссылка = СобытияМониторингаСПАРКРиски.Контрагент)
	|ГДЕ
	|	ТипыСобытийСПАРКРиски.Критичное";
	
	СвойстваСправочников = СвойстваСправочниковКонтрагентов();
	ЭтоПерваяИтерация = Истина;
	Для Каждого ОписаниеСправочника Из СвойстваСправочников Цикл
		
		Если ЭтоПерваяИтерация Тогда
			ЧастиЗапроса.Добавить("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|ЕСТЬNULL(КОЛИЧЕСТВО(СобытияМониторингаСПАРКРиски.Идентификатор), 0) КАК КоличествоСобытий");
		Иначе
			ЧастиЗапроса.Добавить("ОБЪЕДИНИТЬ ВСЕ");
			ЧастиЗапроса.Добавить("ВЫБРАТЬ ЕСТЬNULL(КОЛИЧЕСТВО(СобытияМониторингаСПАРКРиски.Идентификатор), 0)");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(
			ШаблонЗапроса,
			"%ИмяСправочникаКонтрагенты",
			ОписаниеСправочника.Имя);
		
		ЧастиЗапроса.Добавить(ТекстЗапроса);
		
		ЭтоПерваяИтерация = Ложь;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	Выборка           = Неопределено;
	КоличествоСобытий = 0;
	ПараметрыФормы    = Неопределено;
	НаименованиеДела  = Неопределено;
	
	Для Каждого ТекущийРаздел Из Разделы Цикл
		
		ИдентификаторДела = "СобытияМониторингаСПАРКРиски" + СтрЗаменить(ТекущийРаздел.ПолноеИмя(), ".", "");
		Если МодульТекущиеДелаСервер.ДелоОтключено(ИдентификаторДела) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка = Неопределено Тогда
			
			// Получить данные только при необходимости
			// показать дело в разделе.
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				КоличествоСобытий = КоличествоСобытий + Выборка.КоличествоСобытий;
			КонецЦикла;
			
			Если КоличествоСобытий = 0 Тогда
				Возврат;
			КонецЕсли;
			
			НаименованиеДела =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '1СПАРК Риски. Критичных событий мониторинга %1'"),
					КоличествоСобытий);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СформироватьПриОткрытии"           , Истина);
			ПараметрыФормы.Вставить("КлючВарианта"                      , "Основной");
			ПараметрыФормы.Вставить("КлючНазначенияИспользования"       , "ТекущиеДела");
			ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов"   , Ложь);
			
		КонецЕсли;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторДела;
		Дело.ЕстьДела       = Истина;
		Дело.Важное         = Истина;
		Дело.Представление  = НаименованиеДела;
		Дело.Владелец       = ТекущийРаздел;
		Дело.Форма          = "Отчет.СобытияМониторингаСПАРКРиски.ФормаОбъекта";
		Дело.ПараметрыФормы = ПараметрыФормы;
		
	КонецЦикла;
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.ВариантыОтчетов.
//
// Содержит настройки размещения вариантов отчетов в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоПредопределенных().
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	ОписаниеОтчета = МодульВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИндексыСПАРКРиски);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ИндексыСПАРКРиски, "СписокКонтрагентовДляОбновления");
	НастройкиВарианта.Включен = Ложь;
	
	ОписаниеОтчета = МодульВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СобытияМониторингаСПАРКРиски);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриПолученииСпискаШаблонов(Шаблоны) Экспорт
	
	Шаблоны.Добавить("ВсеОбновленияСПАРКРискиРазделенное");
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ВсеОбновленияСПАРКРискиРазделенное.ИмяМетода);
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ПроверкаГотовностиСправкиСПАРКРиски.ИмяМетода);
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
//  и если ДА - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = "ТипыСобытийМониторинга1СПАРКРиски" Тогда
		Загружать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - строка. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType = "ТипыСобытийМониторинга1СПАРКРиски" Тогда
		СПАРКРискиМониторингСобытий.ОбновитьТипыСобытийИзПоставляемыхДанных(Дескриптор, ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСБиблиотекойТехнологияСервиса

// См. описание этой же процедуры в общем модуле
// ВыгрузкаЗагрузкаДанныхПереопределяемый.
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Константы.ДатаОбновленияСобытийСПАРКРиски);
	Типы.Добавить(Метаданные.РегистрыСведений.ВсеОбновленияСПАРКОбщее);
	Типы.Добавить(Метаданные.РегистрыСведений.ВсеОбновленияСПАРКРазделенное);
	Типы.Добавить(Метаданные.РегистрыСведений.ИндексыСПАРКРиски);
	Типы.Добавить(Метаданные.РегистрыСведений.СобытияМониторингаСПАРКРиски);
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ВыгрузкаЗагрузкаДанныхПереопределяемый.
//
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	СПАРКРискиМониторингСобытий.ОчиститьРезультатыПостановкиНаМониторинг();
	
КонецПроцедуры

// См. процедуру
// ИнтернетПоддержкаПользователей.ПриФормированииСпискаУслуг().
//
Процедура ПриФормированииСпискаУслуг(Услуги) Экспорт
	
	// Оператор [] используется для исключения ошибки компиляции,
	// если не внедрена Библиотека "Технология сервиса".
	ТипУслугиБезлимитная = Перечисления["ТипыУслуг"]["Безлимитная"];
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", СПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Индикаторы риска для компаний'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", СПАРКРискиКлиентСервер.ИдентификаторУслугиМониторингКомпаний());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Мониторинг компаний'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", СПАРКРискиКлиентСервер.ИдентификаторУслугиСправкиПоКомпаниям());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Справки по компаниям'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

Функция ИспользованиеСПАРКРискиВключено() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСервисСПАРКРиски");
	
КонецФункции

Функция СвойстваСправочниковКонтрагентов() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Иерархический"          , Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Имя"                    , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("РеквизитИНН"            , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ИмяФормыПодбора"        , ОписаниеТипаСтрока);
	
	СПАРКРискиПереопределяемый.ПриОпределенииСвойствСправочниковКонтрагентов(Результат);
	
	Если Результат.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось определить свойства справочника Контрагенты.
			|Не заполнена реализация метода ПриОпределенииСвойствСправочниковКонтрагентов()
			|общего модуля СПАРКРискиПереопределяемый.'");
	КонецЕсли;
	
	Результат.Колонки.Добавить("ТипСсылка", Новый ОписаниеТипов("Тип"));
	
	Для Каждого СтрокаОписаниеСправочника Из Результат Цикл
		СтрокаОписаниеСправочника.ТипСсылка = Тип("СправочникСсылка." + СтрокаОписаниеСправочника.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначенияРеквизитовКонтрагентов(Контрагенты) Экспорт
	
	Если ТипЗнч(Контрагенты) = Тип("Массив") Тогда
		КонтрагентыМассив = Контрагенты;
	Иначе
		КонтрагентыМассив = Новый Массив;
		КонтрагентыМассив.Добавить(Контрагенты);
	КонецЕсли;
	
	ЗапросКонтрагенты = Новый Запрос;
	// Текст запроса.
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		СвойстваСправочников = СвойстваСправочниковКонтрагентов();
		
		КонтрагентыПоТипам = Новый Соответствие;
		Если СвойстваСправочников.Количество() = 1 Тогда
			КонтрагентыПоТипам.Вставить(СвойстваСправочников[0].ТипСсылка, КонтрагентыМассив);
		Иначе
			// Распределение контрагентов по типам для запросов к разным справочникам.
			Для Каждого ТекущийКонтрагент Из КонтрагентыМассив Цикл
				ТипТекущийКонтрагент = ТипЗнч(ТекущийКонтрагент);
				КонтрагентыПоТипу = КонтрагентыПоТипам.Получить(ТипТекущийКонтрагент);
				Если КонтрагентыПоТипу = Неопределено Тогда
					КонтрагентыПоТипу = Новый Массив;
					КонтрагентыПоТипам.Вставить(ТипТекущийКонтрагент, КонтрагентыПоТипу);
				КонецЕсли;
				КонтрагентыПоТипу.Добавить(ТекущийКонтрагент);
			КонецЦикла;
		КонецЕсли;
		
		ШаблонТекстаЗапроса = "
			|СправочникКонтрагенты.%Ссылка,
			|	СвойстваКонтрагентовСПАРКРиски.%ИмяРеквизитаИНН,
			|	СвойстваКонтрагентовСПАРКРиски.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
			|	ВЫБОР
			|		КОГДА СвойстваКонтрагентовСПАРКРиски.Контрагент ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ %ИмяПодлежитПроверке
			|ИЗ
			|	Справочник.%ИмяСправочникаКонтрагенты КАК СправочникКонтрагенты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК СвойстваКонтрагентовСПАРКРиски
			|		ПО СправочникКонтрагенты.Ссылка = СвойстваКонтрагентовСПАРКРиски.Контрагент
			|ГДЕ
			|	СправочникКонтрагенты.Ссылка В (&%ИмяПараметрКонтрагенты)
			|	%УсловиеЭтоГруппа
			|";
		
		ЧастиЗапроса     = Новый Массив;
		
		НомерИтерации = 0;
		Для Каждого КлючЗначение Из КонтрагентыПоТипам Цикл
			
			ТипЭлемента = КлючЗначение.Ключ;
			ОписаниеСправочника = СвойстваСправочников.Найти(ТипЭлемента, "ТипСсылка");
			Если ОписаниеСправочника = Неопределено Тогда
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неизвестный тип справочника контрагентов (%1). Описание справочника отсутствует в методе
						|ПриОпределенииСвойствСправочниковКонтрагентов() общего модуля СПАРКРискиПереопределяемый.'"),
					Строка(ТипЭлемента));
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			Если НомерИтерации > 0 Тогда
				ЧастиЗапроса.Добавить("ОБЪЕДИНИТЬ ВСЕ");
			КонецЕсли;
			
			Если НомерИтерации = 0 Тогда
				ИмяРеквизитаСсылка  = "Ссылка КАК Контрагент";
				ИмяРеквизитаИНН     = "ИНН КАК ИНН";
				ИмяПодлежитПроверке = "КАК ПодлежитПроверке";
				ЧастиЗапроса.Добавить("ВЫБРАТЬ РАЗРЕШЕННЫЕ");
			Иначе
				ИмяРеквизитаСсылка  = "Ссылка";
				ИмяРеквизитаИНН     = "ИНН";
				ИмяПодлежитПроверке = "";
				ЧастиЗапроса.Добавить("ВЫБРАТЬ");
			КонецЕсли;
			
			Если ОписаниеСправочника.Иерархический Тогда
				УсловиеЭтоГруппа = "И НЕ СправочникКонтрагенты.ЭтоГруппа";
			Иначе
				УсловиеЭтоГруппа = "";
			КонецЕсли;
			
			ИмяПараметрКонтрагенты = "ИмяПараметрКонтрагенты" + Формат(НомерИтерации, "ЧГ=0");
			
			ТекстТекущегоЗапроса = СтрЗаменить(
				ШаблонТекстаЗапроса,
				"%Ссылка",
				ИмяРеквизитаСсылка);
			ТекстТекущегоЗапроса = СтрЗаменить(
				ТекстТекущегоЗапроса,
				"%ИмяРеквизитаИНН",
				ИмяРеквизитаИНН);
			ТекстТекущегоЗапроса = СтрЗаменить(
				ТекстТекущегоЗапроса,
				"%ИмяПодлежитПроверке",
				ИмяПодлежитПроверке);
			ТекстТекущегоЗапроса = СтрЗаменить(
				ТекстТекущегоЗапроса,
				"%ИмяСправочникаКонтрагенты",
				ОписаниеСправочника.Имя);
			ТекстТекущегоЗапроса = СтрЗаменить(
				ТекстТекущегоЗапроса,
				"%ИмяПараметрКонтрагенты",
				ИмяПараметрКонтрагенты);
			ТекстТекущегоЗапроса = СтрЗаменить(
				ТекстТекущегоЗапроса,
				"%УсловиеЭтоГруппа",
				УсловиеЭтоГруппа);
			
			ЧастиЗапроса.Добавить(ТекстТекущегоЗапроса);
			ЗапросКонтрагенты.УстановитьПараметр(ИмяПараметрКонтрагенты, КлючЗначение.Значение);
			
			НомерИтерации = НомерИтерации + 1;
			
		КонецЦикла;
		
		ЗапросКонтрагенты.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
		
	Иначе
		
		ЗапросКонтрагенты.Текст = "
			|ВЫБРАТЬ
			|	СвойстваКонтрагентовСПАРКРиски.Контрагент                         КАК Контрагент,
			|	СвойстваКонтрагентовСПАРКРиски.ИНН                                КАК ИНН,
			|	СвойстваКонтрагентовСПАРКРиски.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
			|	ИСТИНА                                                            КАК ПодлежитПроверке
			|ИЗ
			|	РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК СвойстваКонтрагентовСПАРКРиски
			|ГДЕ
			|	СвойстваКонтрагентовСПАРКРиски.Контрагент В (&Контрагенты)
			|";
		
		ЗапросКонтрагенты.УстановитьПараметр("Контрагенты", КонтрагентыМассив);
		
	КонецЕсли;
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ЗапросКонтрагенты.Текст = СтрЗаменить(
			ЗапросКонтрагенты.Текст,
			"СвойстваКонтрагентовСПАРКРиски.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,",
			"");
	КонецЕсли;
	
	Результат = ЗапросКонтрагенты.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Контрагент");
	Результат.Индексы.Добавить("ИНН");
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеАутентификацииПользователяИнтернетПоддержки(НомерОбласти = Неопределено) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Новый Структура("Тикет, НомерОбласти", "", НомерОбласти);
	Иначе
		Возврат ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	
КонецФункции

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
// См. также:
//   "Расширение управляемой формы для отчета.ПередЗагрузкойВариантаНаСервере" в синтакс-помощнике.
//   ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере().
//
Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ПараметрыОтображения = Новый Структура;
	ПараметрыОтображения.Вставить("ИмяМакетаОформления", "");
	СПАРКРискиПереопределяемый.ПараметрыОтображенияОтчетов(ПараметрыОтображения);
	
	Если Не ПустаяСтрока(ПараметрыОтображения.ИмяМакетаОформления) Тогда
		
		ПараметрМакетОформления = НовыеНастройкиКД.ПараметрыВывода.Элементы.Найти("МакетОформления");
		Если ПараметрМакетОформления.Значение = "Main" 
			Или ПараметрМакетОформления.Значение = "Основной" Тогда
			ПараметрМакетОформления.Значение = ПараметрыОтображения.ИмяМакетаОформления;
			ПараметрМакетОформления.Использование = Истина;
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из НовыеНастройкиКД.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				ПараметрМакетОформления = ЭлементСтруктуры.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
				Если ПараметрМакетОформления.Значение = "Main" 
					Или ПараметрМакетОформления.Значение = "Основной" Тогда
					ПараметрМакетОформления.Значение = ПараметрыОтображения.ИмяМакетаОформления;
					ПараметрМакетОформления.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		СообщениеОбОшибке);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = '1СПАРК Риски'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область ПодключаемыеКомандыФормыКонтрагента

Функция ПодключаемыеКомандыФормыКонтрагента(ЭтоФормаОбъекта)
	
	Результат = Новый ТаблицаЗначений;
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	Результат.Колонки.Добавить("Имя"     , ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("Синоним" , ОписаниеТиповСтрока);
	
	Если ЭтоФормаОбъекта И ИспользованиеРазрешено("ПостановкаНаМониторинг;") Тогда
		СтрКоманды = Результат.Добавить();
		СтрКоманды.Имя     = "СПАРКРиски_ВключитьМониторингСобытий";
		СтрКоманды.Синоним = НСтр("ru = 'Включить мониторинг событий'");
	КонецЕсли;
	
	СтрКоманды = Результат.Добавить();
	СтрКоманды.Имя     = "СПАРКРиски_ОткрытьСписокСправокКонтрагента";
	СтрКоманды.Синоним = НСтр("ru = 'Справки'");
	
	СтрКоманды = Результат.Добавить();
	СтрКоманды.Имя     = "СПАРКРиски_СобытияМониторингаПоКонтрагенту";
	СтрКоманды.Синоним = НСтр("ru = 'События мониторинга'");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СправкиСПАРКРиски

Процедура УстановитьСостояниеСправки(СправкаСсылка, Состояние) Экспорт
	
	Если Не Пользователи.РолиДоступны("ЧтениеДанныхСПАРКРиски") Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав.'");
	КонецЕсли;
	
	СправкаОбъект = СправкаСсылка.ПолучитьОбъект();
	СправкаОбъект.Состояние = Состояние;
	СправкаОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ИндексыСПАРКРиски

// Процедура предназначена для проверки завершенности фоновых заданий.
//
// Параметры:
//  ПроверяемыеФоновыеЗадания - Массив - массив структур, описанных в СПАРКРискиКлиент.НовыйПроверкаЗавершенностиФоновогоЗадания.
//
// Возвращаемое значение:
//   Массив - массив структур, описанных в СПАРКРискиКлиент.НовыйПроверкаЗавершенностиФоновогоЗадания.
//
Функция ПроверкаЗавершенностиФоновыхЗаданий(ПроверяемыеФоновыеЗадания) Экспорт

	ТипМассив = Тип("Массив");

	Результат = Новый Массив;

	Если (ТипЗнч(ПроверяемыеФоновыеЗадания) = ТипМассив)
			И (ПроверяемыеФоновыеЗадания.Количество() > 0) Тогда
		Для Каждого ТекущееПроверяемоеФоновоеЗадание Из ПроверяемыеФоновыеЗадания Цикл
			ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ТекущееПроверяемоеФоновоеЗадание.ИдентификаторФоновогоЗадания);
			Если ФоновоеЗадание <> Неопределено Тогда
				ТекущееПроверяемоеФоновоеЗадание.Вставить("КоличествоПроверок", ТекущееПроверяемоеФоновоеЗадание.КоличествоПроверок + 1);
				Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					ТекущееПроверяемоеФоновоеЗадание.Вставить("Статус", "Выполняется");
				ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
					ТекущееПроверяемоеФоновоеЗадание.Вставить("Статус", "Выполнено");
				ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					ТекущееПроверяемоеФоновоеЗадание.Вставить("Статус", "Ошибка");
				ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
					ТекущееПроверяемоеФоновоеЗадание.Вставить("Статус", "Отменено");
				КонецЕсли;
				Если ТипЗнч(ФоновоеЗадание.ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
					ТекущееПроверяемоеФоновоеЗадание.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке));
				КонецЕсли;
				Результат.Добавить(ТекущееПроверяемоеФоновоеЗадание);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий_КонтрагентБИПОбъект

// Процедура-обработчик события перед записью элемента справочника определяемого типа КонтрагентыБИП.
// Определяет разные параметры:
//  - что записывается новый контрагент;
//  - реквизиты контрагента ДО записи (ФизЛицо / ЮрЛицо, ИНН);
// и передает эту информацию дальше, в подписку на событие "ПриЗаписи".
//
// Параметры:
//  КонтрагентОбъект - ОпределяемыеТипы.КонтрагентБИПОбъект - записываемый объект.
//
Процедура КонтрагентБИПОбъектПередЗаписьюОбработчик(КонтрагентОбъект, Отказ) Экспорт
	
	// Если происходит загрузка данных, то выйти из обработчика.
	Если КонтрагентОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтернетПоддержкаПользователей.ЭтоИдентификаторОбъектаМетаданных(КонтрагентОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Или КонтрагентОбъект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДополнительныеСвойства = КонтрагентОбъект.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", КонтрагентОбъект.ЭтоНовый());
	
	// Определение прежних значений свойств контрагента.
	Если Не ДополнительныеСвойства.ЭтоНовыйОбъект
		И Не ДополнительныеСвойства.Свойство("СПАРКРискиСвойстваКонтрагентаПередИзменением") Тогда
		// Если свойства не переданы из формы элемента, тогда
		// получить их из информационной базы.
		ЗначенияРеквизитов = ЗначенияРеквизитовКонтрагентов(КонтрагентОбъект.Ссылка);
		Если ЗначенияРеквизитов.Количество() > 0 Тогда
			ДополнительныеСвойства.Вставить("СПАРКРискиСвойстваКонтрагентаПередИзменением", ЗначенияРеквизитов[0]);
		Иначе
			// Контрагент не подлежит проверке.
			СвойстваКонтрагента = СПАРКРискиКлиентСервер.НовыйСвойстваКонтрагента();
			ДополнительныеСвойства.Вставить("СПАРКРискиСвойстваКонтрагентаПередИзменением", СвойстваКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	// Определение текущих значений свойств контрагента.
	Если Не ДополнительныеСвойства.Свойство("СПАРКРискиСвойстваКонтрагента") Тогда
		// Если свойства контрагента не были переданы из формы, тогда
		// определить их при необходимости.
		СвойстваКонтрагента = СПАРКРискиКлиентСервер.СвойстваКонтрагентаВОбъекте(КонтрагентОбъект);
		ДополнительныеСвойства.Вставить("СПАРКРискиСвойстваКонтрагента", СвойстваКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события при записи элемента справочника определяемого типа КонтрагентыБИП.
//
// Параметры:
//  КонтрагентОбъект - ОпределяемыеТипы.КонтрагентБИПОбъект - записываемый объект.
//
Процедура КонтрагентБИПОбъектПриЗаписиОбработчик(КонтрагентОбъект, Отказ) Экспорт
	
	// Если происходит загрузка данных, то выйти из обработчика.
	Если КонтрагентОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтернетПоддержкаПользователей.ЭтоИдентификаторОбъектаМетаданных(КонтрагентОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Или КонтрагентОбъект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	// Запись в регистры сведений запрещена для роли "ЧтениеДанныхСПАРКРиски", поэтому писать будем в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);

	ДополнительныеСвойства = КонтрагентОбъект.ДополнительныеСвойства;
	
	// Запись значений свойств в РС СвойстваКонтрагентовСПАРКРиски.
	Если ДополнительныеСвойства.Свойство("СПАРКРискиСвойстваКонтрагента") Тогда
		
		СвойстваКонтрагента = ДополнительныеСвойства.СПАРКРискиСвойстваКонтрагента;
		ЗаписатьСвойстваКонтрагента(КонтрагентОбъект.Ссылка, СвойстваКонтрагента);
		
		// Мониторинг событий.
		// Обработка события изменения свойств контрагента.
		СвойстваИзменены = Ложь;
		Если ДополнительныеСвойства.Свойство("СПАРКРискиСвойстваКонтрагентаПередИзменением") Тогда
			СвойстваКонтрагентаПередИзменением = ДополнительныеСвойства.СПАРКРискиСвойстваКонтрагентаПередИзменением;
			СвойстваИзменены = СвойстваКонтрагентаИзменены(
				СвойстваКонтрагентаПередИзменением,
				СвойстваКонтрагента);
		КонецЕсли;
		
		Если СвойстваИзменены Тогда
			СПАРКРискиМониторингСобытий.ПриИзмененииСвойствКонтрагента(КонтрагентОбъект.Ссылка, СвойстваКонтрагента);
			// Удалить кэш индексов, если изменились свойства контрагента.
			Запись = РегистрыСведений.ИндексыСПАРКРиски.СоздатьМенеджерЗаписи();
			Запись.Контрагент = КонтрагентОбъект.Ссылка;
			Запись.Удалить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСвойстваКонтрагента(Контрагент, СвойстваКонтрагента)
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.СвойстваКонтрагентовСПАРКРиски.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
	Если СвойстваКонтрагента.ПодлежитПроверке Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.Контрагент      = Контрагент;
		Запись.ИНН             = СвойстваКонтрагента.ИНН;
		Запись.СвояОрганизация = СвойстваКонтрагента.СвояОрганизация;
	КонецЕсли;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция СвойстваКонтрагентаИзменены(ПрежниеЗначения, НовыеЗначения)
	
	Если Не ПрежниеЗначения.ПодлежитПроверке И Не НовыеЗначения.ПодлежитПроверке Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ПрежниеЗначения.ПодлежитПроверке <> ПрежниеЗначения.ПодлежитПроверке
		Или ПрежниеЗначения.ИНН <> НовыеЗначения.ИНН);
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Регламентное задание ВсеОбновленияСПАРКРискиОбщее.
//
Процедура ВсеОбновленияСПАРКРискиОбщее() Экспорт
	
	// Регламентные задания блокируются на время служебных операций с информационной базой.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если Не ИспользованиеСПАРКРискиВключено() Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Проверка надежности контрагентов в сервисе 1СПАРК Риски отключена.
				|Задание не выполнено.'"));
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	ТекущаяДатаСеансаДляПроверки = ТекущаяДатаСеанса();

	НаименованиеПроцедурыФункции = "СПАРКРиски.ВсеОбновленияСПАРКРискиОбщее";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультата = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ВсеОбновленияСПАРКРискиОбщее", // Идентификатор
		НСтр("ru='Выполнение ВсеОбновленияСПАРКРискиОбщее'"));

		КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

		ЕстьОшибки = Ложь;

		Если МонопольныйРежим() Тогда

			// Если база работает в монопольном режиме (например, запущено фоновое задание, которое включило монопольный режим
			//  и выгружает данные из области данных для последующей загрузки в модели сервиса),
			//  то будут ошибки при всех попытках записи данных в базу.
			// Поэтому в монопольном режиме не следует выполнять никаких обновлений в подсистеме новостей.
			КодРезультатаОбщий = 101;
			ОписаниеРезультата = НСтр("ru='Информационная база запущена в монопольном режиме.'");
			ЕстьОшибки = Истина;

		КонецЕсли;

		Если ЕстьОшибки = Ложь Тогда

			// Даты последних обновлений хранятся в регистре сведений ВсеОбновленияСПАРКОбщее.
			// Измерение ВидОбновления может содержать следующие значения:
			// 1. Загрузка индексов СПАРК;

#Область Шаг_ЗагрузкаИндексовСПАРК

			// 1. Загрузка индексов СПАРК.
			ВидОбновления = "Загрузка индексов СПАРК"; // Идентификатор.
			КодРезультатаПоШагам = 0;
			ОписаниеРезультатаПоШагам = "";
			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияПоШагам,
				"ВсеОбновленияСПАРКРискиОбщее_ЗагрузкаИндексовСПАРК", // Идентификатор
				НСтр("ru='Выполнение ВсеОбновленияСПАРКРискиОбщее, Загрузка индексов СПАРК'"));

				КонтекстВыполненияПоШагамВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

				Запись = РегистрыСведений.ВсеОбновленияСПАРКОбщее.СоздатьМенеджерЗаписи();
				Запись.ВидОбновления = ВидОбновления;
				Запись.Прочитать();
				Если Запись.Выбран() Тогда
					ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
				Иначе
					ДатаСледующегоОбновления = '00010101';
				КонецЕсли;

				Если ДатаСледующегоОбновления <= ТекущаяДатаСеансаДляПроверки Тогда

					Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда

						// Для ИБ с включенной технологией фреш необходимо загрузить данные по каждой области данных.

						// По каждой области данных индексы загружаются со своим логином и паролем.
						// Области данных со статусом <> Перечисление.СтатусыОбластейДанных.Используется НЕ обрабатываются.
						// Определим список контрагентов, по которым есть кэш - их и надо обновить.
						// Обновлять надо:
						//  - дата обновления кэша > 12 часов;
						//  - изменился ИНН;
						Запрос = Новый Запрос;
						Запрос.Текст = "
							|ВЫБРАТЬ
							|	РегСвойства.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
							|	РегСвойства.Контрагент                         КАК Контрагент,
							|	РегСвойства.ИНН                                КАК ИНН
							|ИЗ
							|	РегистрСведений.ИндексыСПАРКРиски КАК РегИндексы
							|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
							|	РегистрСведений.ОбластиДанных КАК ОбластиДанных
							|	ПО
							|		(ОбластиДанных.ОбластьДанныхВспомогательныеДанные = РегИндексы.ОбластьДанныхВспомогательныеДанные)
							|		И (ОбластиДанных.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется))
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|	РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК РегСвойства
							|	ПО
							|		РегИндексы.ОбластьДанныхВспомогательныеДанные = РегСвойства.ОбластьДанныхВспомогательныеДанные
							|		И РегИндексы.Контрагент = РегСвойства.Контрагент
							|ГДЕ
							|	РегСвойства.ИННКорректный = ИСТИНА // Основное условие
							|	И ( // Условия, что надо обновить
							|		РегИндексы.ИНН <> РегСвойства.ИНН
							|		ИЛИ РегИндексы.ДатаОбновления <= &СрокГодности
							|	)
							|УПОРЯДОЧИТЬ ПО
							|	РегСвойства.ОбластьДанныхВспомогательныеДанные,
							|	РегСвойства.ИНН
							|";
						Запрос.УстановитьПараметр("СрокГодности", ТекущаяДатаСеансаДляПроверки - 12*60*60);

						РезультатЗапроса = Запрос.Выполнить();
						Если НЕ РезультатЗапроса.Пустой() Тогда
							Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
							Пока Выборка.СледующийПоЗначениюПоля("ОбластьДанных") Цикл
								// Если услуга не подключена, то продолжить со следующей области данных.
								// В этой области данных данные останутся просроченными и при получении индексов будет выдана ошибка.
								// В кэш ошибка записываться не будет.
								УслугаПодключена = ИнтернетПоддержкаПользователей.УслугаПодключена(
									СПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска(),
									Выборка.ОбластьДанных);
								Если УслугаПодключена <> Истина Тогда
									Продолжить;
								КонецЕсли;
								ВсегоКонтрагентовПоОбластиДанных = 0;
								МассивОписанийКонтрагентов = Новый Массив;
								Пока Выборка.СледующийПоЗначениюПоля("ИНН") Цикл
									ОписаниеКонтрагента = СПАРКРискиКлиентСервер.НовыйОписаниеКонтрагента();
									ОписаниеКонтрагента.ОбластьДанных = Выборка.ОбластьДанных;
									ОписаниеКонтрагента.Контрагент    = Выборка.Контрагент;
									ОписаниеКонтрагента.ИНН           = СокрЛП(Выборка.ИНН);
									МассивОписанийКонтрагентов.Добавить(ОписаниеКонтрагента);
									ВсегоКонтрагентовПоОбластиДанных = ВсегоКонтрагентовПоОбластиДанных + 1;
									Если МассивОписанийКонтрагентов.Количество() >= 1000 Тогда
										РезультатВызоваВебСервиса = СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов(
											Выборка.ОбластьДанных,
											МассивОписанийКонтрагентов,
											,
											КонтекстВыполненияПоШагамВложенный);
										МассивОписанийКонтрагентов = Новый Массив;
										// Если в процессе загрузки индексов возникали ошибки (ошибки соединения, ошибки подключения и т.п.),
										//  то пропустить загрузку данных по этой области.
										Если НЕ РезультатВызоваВебСервиса.ВидОшибки.Пустая() Тогда
											// Ошибка будет зафиксирована в КонтекстВыполненияПоШагамВложенный.
											// Прервать цикл по ИНН, продолжить цикл по областям.
											Прервать;
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								Если МассивОписанийКонтрагентов.Количество() > 0 Тогда
									РезультатВызоваВебСервиса = СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов(
										Выборка.ОбластьДанных,
										МассивОписанийКонтрагентов,
										,
										КонтекстВыполненияПоШагамВложенный);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;

					Иначе

						// Для ИБ с отключенной технологией фреш необходимо загрузить данные по списку из кэша.

						// Определим список контрагентов, по которым есть кэш - их и надо обновить.
						// Обновлять надо:
						//  - дата обновления кэша > 12 часов;
						//  - изменился ИНН;
						Запрос = Новый Запрос;
						Запрос.Текст = "
							|ВЫБРАТЬ
							|	-1                     КАК ОбластьДанных,
							|	РегСвойства.Контрагент КАК Контрагент,
							|	РегСвойства.ИНН        КАК ИНН
							|ИЗ
							|	РегистрСведений.ИндексыСПАРКРиски КАК РегИндексы
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|	РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК РегСвойства
							|		ПО РегИндексы.Контрагент = РегСвойства.Контрагент
							|ГДЕ
							|	РегСвойства.ИННКорректный = ИСТИНА // Основное условие
							|	И ( // Условия, что надо обновить
							|		РегИндексы.ИНН <> РегСвойства.ИНН
							|		ИЛИ РегИндексы.ДатаОбновления <= &СрокГодности
							|	)
							|УПОРЯДОЧИТЬ ПО
							|	РегСвойства.ИНН
							|";
						Запрос.УстановитьПараметр("СрокГодности", ТекущаяДатаСеансаДляПроверки - 12*60*60);

						РезультатЗапроса = Запрос.Выполнить();
						Если НЕ РезультатЗапроса.Пустой() Тогда
							МассивОписанийКонтрагентов = Новый Массив;
							Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
							Пока Выборка.Следующий() Цикл
								ОписаниеКонтрагента = СПАРКРискиКлиентСервер.НовыйОписаниеКонтрагента();
								ОписаниеКонтрагента.ОбластьДанных = Выборка.ОбластьДанных;
								ОписаниеКонтрагента.Контрагент    = Выборка.Контрагент;
								ОписаниеКонтрагента.ИНН           = СокрЛП(Выборка.ИНН);
								МассивОписанийКонтрагентов.Добавить(ОписаниеКонтрагента);
								Если МассивОписанийКонтрагентов.Количество() >= 1000 Тогда
									РезультатВызоваВебСервиса = СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов(
										Выборка.ОбластьДанных,
										МассивОписанийКонтрагентов,
										,
										КонтекстВыполненияПоШагамВложенный);
									МассивОписанийКонтрагентов = Новый Массив;
								КонецЕсли;
							КонецЦикла;
							Если МассивОписанийКонтрагентов.Количество() > 0 Тогда
								РезультатВызоваВебСервиса = СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов(
									Выборка.ОбластьДанных,
									МассивОписанийКонтрагентов,
									,
									КонтекстВыполненияПоШагамВложенный);
							КонецЕсли;
						КонецЕсли;

					КонецЕсли;

					// Установить дату следующего запуска (+11 часов 55 минут).
					Запись = РегистрыСведений.ВсеОбновленияСПАРКОбщее.СоздатьМенеджерЗаписи();
						Запись.ВидОбновления = ВидОбновления;
						Запись.ДатаПоследнегоОбновления = ТекущаяДатаСеансаДляПроверки;
						Запись.ДатаСледующегоОбновления = ТекущаяДатаСеансаДляПроверки + 11*60*60 + 55*60;
					Запись.Записать(Истина);

				Иначе
					КодРезультатаПоШагам = 0;
					ОписаниеРезультатаПоШагам = СтрШаблон(
						НСтр("ru='Время выполнения шага %1 еще не наступило.
							|Текущая дата сеанса: %2
							|Дата планируемого запуска: %3'"),
						ВидОбновления,
						ТекущаяДатаСеансаДляПроверки,
						ДатаСледующегоОбновления);
				КонецЕсли;

			ШагВыполненияТекущий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияПоШагам,
				КодРезультатаПоШагам, // Код результата.
				ОписаниеРезультатаПоШагам, // Описание результата.
				КонтекстВыполненияПоШагамВложенный); // Вложенный контекст выполнения.

#КонецОбласти

#Область ПостановкаНаМониторинг

			// 2. Постановка контрагентов на мониторинг в сервисе 1СПАРК Риски.
			ВидОбновления = "Постановка контрагентов на мониторинг"; // Идентификатор.
			КодРезультатаПоШагам = 0;
			ОписаниеРезультатаПоШагам = "";
			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияПоШагам,
				"ВсеОбновленияСПАРКРискиОбщее_ПостановкаКонтрагентовНаМониторинг", // Идентификатор
				НСтр("ru='Выполнение ВсеОбновленияСПАРКРискиОбщее, постановка контрагентов на мониторинг'"));

			КонтекстВыполненияПоШагамВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

			Запись = РегистрыСведений.ВсеОбновленияСПАРКОбщее.СоздатьМенеджерЗаписи();
			Запись.ВидОбновления = ВидОбновления;
			Запись.Прочитать();
			Если Запись.Выбран() Тогда
				ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
			Иначе
				ДатаСледующегоОбновления = '00010101';
			КонецЕсли;

			Если ДатаСледующегоОбновления <= ТекущаяДатаСеансаДляПроверки Тогда

				СПАРКРискиМониторингСобытий.ПоставитьКонтрагентовНаМониторингЗаданиеНеразделенное(КонтекстВыполненияПоШагамВложенный);

				// Установить дату следующего запуска (+55 минут).
				Запись = РегистрыСведений.ВсеОбновленияСПАРКОбщее.СоздатьМенеджерЗаписи();
				Запись.ВидОбновления = ВидОбновления;
				Запись.ДатаПоследнегоОбновления = ТекущаяДатаСеансаДляПроверки;
				Запись.ДатаСледующегоОбновления = ТекущаяДатаСеансаДляПроверки + 55*60;
				Запись.Записать(Истина);

			Иначе
				КодРезультатаПоШагам = 0;
				ОписаниеРезультатаПоШагам = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Время выполнения шага %1 еще не наступило.
						|Текущая дата сеанса: %2
						|Дата планируемого запуска: %3'"),
					ВидОбновления,
					ТекущаяДатаСеансаДляПроверки,
					ДатаСледующегоОбновления);
			КонецЕсли;

			ШагВыполненияТекущий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияПоШагам,
				КодРезультатаПоШагам, // Код результата.
				ОписаниеРезультатаПоШагам, // Описание результата.
				КонтекстВыполненияПоШагамВложенный); // Вложенный контекст выполнения.

#КонецОбласти

		КонецЕсли;

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультата, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтрШаблон(
		НСтр("ru='%1, результат.
			|Длительность (мс): %2
			|Результат выполнения:
			|%3
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %4
			|  Разделение включено: %5
			|  Доступно использование разделенных данных: %6
			|  Сеанс запущен без разделителей: %7
			|'"),
		НаименованиеПроцедурыФункции,
		СтрШаблон(
			"%1 (%2 - %3)",
			ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
			ШагВыполненияОбщий.ВремяОкончания,
			ШагВыполненияОбщий.ВремяНачала),
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначенияПовтИсп.РазделениеВключено(),
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных(),
		ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		ИмяСобытияЖурналаРегистрации(), // ИмяСобытия
		НСтр("ru='СПАРК Риски. Сервис и регламент. Все обновления СПАРК Риски (общее)'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		СПАРКРискиКлиентСервер.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Регламентное задание ВсеОбновленияСПАРКРискиРазделенное.
//
Процедура ВсеОбновленияСПАРКРискиРазделенное() Экспорт

	// Регламентные задания блокируются на время служебных операций с информационной базой.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ВсеОбновленияСПАРКРискиРазделенное);

	Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;

	Если Не ИспользованиеСПАРКРискиВключено() Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Проверка надежности контрагентов в сервисе 1СПАРК Риски отключена.
				|Задание не выполнено.'"));
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ТекущаяДатаСеансаДляПроверки = ТекущаяУниверсальнаяДата();

	НаименованиеПроцедурыФункции = "СПАРКРиски.ВсеОбновленияСПАРКРискиРазделенное";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультата = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ВсеОбновленияСПАРКРискиРазделенное", // Идентификатор
		НСтр("ru='Выполнение ВсеОбновленияСПАРКРискиРазделенное'"));

	КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	ЕстьОшибки = Ложь;
	Если МонопольныйРежим() Тогда
		// Если база работает в монопольном режиме (например, запущено фоновое задание, которое включило монопольный режим
		//  и выгружает данные из области данных для последующей загрузки в модели сервиса),
		//  то будут ошибки при всех попытках записи данных в базу.
		// Поэтому в монопольном режиме не следует выполнять никаких обновлений в подсистеме новостей.
		КодРезультатаОбщий = 101;
		ОписаниеРезультата = НСтр("ru='Информационная база запущена в монопольном режиме.'");
		ЕстьОшибки = Истина;
	КонецЕсли;

	Если ЕстьОшибки = Ложь Тогда

		// Даты последних обновлений хранятся в регистре сведений ВсеОбновленияСПАРКРазделенный.
		// Измерение ВидОбновления может содержать следующие значения:
		// 1. СПАРКРискиПостановкаНаМониторинг.

		ВидОбновления = "Заполнение контрагентов на мониторинге"; // Идентификатор.
		Запись = РегистрыСведений.ВсеОбновленияСПАРКРазделенное.СоздатьМенеджерЗаписи();
		Запись.ВидОбновления = ВидОбновления;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
		Иначе
			ДатаСледующегоОбновления = '00010101';
		КонецЕсли;

		Если ДатаСледующегоОбновления <= ТекущаяДатаСеансаДляПроверки Тогда

			СПАРКРискиМониторингСобытий.ЗаполнитьИПоставитьКонтрагентовНаМониторингЗадание(
				КонтекстВыполненияПоШагам);

			// Установить дату следующего запуска (+23 часа 55 минут).
			Запись = РегистрыСведений.ВсеОбновленияСПАРКРазделенное.СоздатьМенеджерЗаписи();
			Запись.ВидОбновления = ВидОбновления;
			Запись.ДатаПоследнегоОбновления = ТекущаяДатаСеансаДляПроверки;
			Запись.ДатаСледующегоОбновления = ТекущаяДатаСеансаДляПроверки + 23*60*60 + 55*60;
			Запись.Записать(Истина);

		КонецЕсли;

	КонецЕсли;

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультата, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтрШаблон(
		НСтр("ru='%1, результат.
			|Длительность (мс): %2
			|Результат выполнения:
			|%3
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %4
			|  Разделение включено: %5
			|  Доступно использование разделенных данных: %6
			|  Сеанс запущен без разделителей: %7
			|'"),
		НаименованиеПроцедурыФункции,
		СтрШаблон(
			"%1 (%2 - %3)",
			ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
			ШагВыполненияОбщий.ВремяОкончания,
			ШагВыполненияОбщий.ВремяНачала),
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначенияПовтИсп.РазделениеВключено(),
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных(),
		ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		ИмяСобытияЖурналаРегистрации(), // ИмяСобытия
		НСтр("ru='СПАРК Риски. Сервис и регламент. Все обновления СПАРК Риски (разделенное)'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		СПАРКРискиКлиентСервер.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Регламентное задание ПроверкаГотовностиСправкиСПАРКРиски.
//
Процедура ПроверитьГотовностьСправкиСПАРКРиски(СправкаСПАРКРиски) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаГотовностиСправкиСПАРКРиски);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкиСПАРКРиски.Состояние КАК Состояние,
	|	СправкиСПАРКРиски.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.СправкиСПАРКРиски КАК СправкиСПАРКРиски
	|ГДЕ
	|	СправкиСПАРКРиски.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СправкаСПАРКРиски);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка включения использования сервиса 1СПАРК Риски в конфигурации.
	Если Не ИспользованиеСПАРКРискиВключено() Тогда
		ОтменитьЗаданиеПроверкиГотовностиСправкиСПАРКРиски(Выборка.Идентификатор);
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Проверка надежности контрагентов в сервисе 1СПАРК Риски отключена.
				|Задание не выполнено.'"));
		Возврат;
	КонецЕсли;
	
	СостоянияСправки = Перечисления.СостоянияСправкиСПАРКРиски;
	// Если состояние справки уже проверено, тогда отменить задание.
	Если Выборка.Состояние <> СостоянияСправки.Готовится Тогда
		ОтменитьЗаданиеПроверкиГотовностиСправкиСПАРКРиски(Выборка.Идентификатор);
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить(Выборка.Идентификатор);
	РезультатВызоваОперации = СервисСПАРКРиски.СостояниеПодготовкиСправок(Идентификаторы);
	Если Не РезультатВызоваОперации.ВидОшибки.Пустая() Тогда
		ОтменитьЗаданиеПроверкиГотовностиСправкиСПАРКРиски(Выборка.Идентификатор);
		Возврат;
	КонецЕсли;
	
	Состояние = РезультатВызоваОперации.СостояниеСправок[Выборка.Идентификатор];
	Если Состояние = СостоянияСправки.Готовится Тогда
		Возврат;
	КонецЕсли;
	
	Если Состояние = Неопределено Тогда
		Состояние = СостоянияСправки.ОшибкаПодготовки;
	КонецЕсли;
	
	УстановитьСостояниеСправки(СправкаСПАРКРиски, Состояние);
	ОтменитьЗаданиеПроверкиГотовностиСправкиСПАРКРиски(Выборка.Идентификатор);
	
КонецПроцедуры

// Отменяет регламентное задание ПроверкаГотовностиСправкиСПАРКРиски.
//
Процедура ОтменитьЗаданиеПроверкиГотовностиСправкиСПАРКРиски(Ключ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Отбор = Новый Структура("Ключ", Строка(Ключ));
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	ТипЗадания = ТипЗнч(Задания);
	Если ТипЗадания = Тип("Массив") Тогда
		Если Задания.Количество() > 0 Тогда
			РегламентныеЗаданияСервер.УдалитьЗадание(Задания[0].УникальныйИдентификатор);
		КонецЕсли;
	ИначеЕсли ТипЗадания = Тип("ТаблицаЗначений") Тогда
		Если Задания.Количество() > 0 Тогда
			Если Задания.Колонки.Найти("УникальныйИдентификатор") <> Неопределено Тогда
				РегламентныеЗаданияСервер.УдалитьЗадание(Задания[0].УникальныйИдентификатор);
			ИначеЕсли Задания.Колонки.Найти("Идентификатор") <> Неопределено Тогда
				РегламентныеЗаданияСервер.УдалитьЗадание(Задания[0].Идентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

// Вызывается при начальном заполнении общих данных информационной базы.
//
Процедура ОбщиеДанныеНачальноеЗаполнениеДанныхСПАРКРиски() Экспорт
	
	ОбновлениеИнформационнойБазыВключитьИспользованиеСервиса1СПАРКРиски();
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации, в которую внедрена
// подсистема СПАРКРиски. Выполняет начальное заполнение данных в
// объектах метаданных подсистемы.
//
Процедура НачальноеЗаполнениеДанныхСПАРКРиски() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяСвойстваБИП = "СПАРКРиски.НачальноеЗаполнениеДанныхВыполнено";
	Если ИнтернетПоддержкаПользователей.ЗначениеСвойстваБИП(ИмяСвойстваБИП) = Истина Тогда
		// Начальное заполнение данных уже выполнено.
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗапросСвойствКонтрагентов"              , Неопределено);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКонтрагентовНаМониторинге"     , Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьИндексыКонтрагентов"           , Ложь);
	ПараметрыЗаполнения.Вставить("ЗапросКонтрагентовДляЗаполненияИндексов", "");
	
	СПАРКРискиПереопределяемый.ПараметрыНачальногоЗаполненияДанных1СПАРКРиски(ПараметрыЗаполнения);
	
	НаборСвойстваКонтрагентов = Неопределено;
	Если ПараметрыЗаполнения.ЗапросСвойствКонтрагентов = Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Не заполнена реализация переопределяемого метода
			|СПАРКРискиПереопределяемый.ПараметрыНачальногоЗаполненияДанных1СПАРКРиски().
			|Не определено значение поля ПараметрыЗаполнения.ЗапросСвойствКонтрагентов.'");
		
	ИначеЕсли Не ПустаяСтрока(ПараметрыЗаполнения.ЗапросСвойствКонтрагентов) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПараметрыЗаполнения.ЗапросСвойствКонтрагентов;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			НаборСвойстваКонтрагентов = РегистрыСведений.СвойстваКонтрагентовСПАРКРиски.СоздатьНаборЗаписей();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Запись = НаборСвойстваКонтрагентов.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
			КонецЦикла;
			НаборСвойстваКонтрагентов.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьКонтрагентовНаМониторинге Тогда
		ЗаполнитьКонтрагентовНаМониторинге();
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексыКонтрагентов Тогда
		
		НаборЗаписейИндексы = Неопределено;
		Если ПустаяСтрока(ПараметрыЗаполнения.ЗапросКонтрагентовДляЗаполненияИндексов) Тогда
			
			// Заполнение по всем контрагентам.
			НаборЗаписейИндексы = РегистрыСведений.ИндексыСПАРКРиски.СоздатьНаборЗаписей();
			Если Не ПустаяСтрока(ПараметрыЗаполнения.ЗапросСвойствКонтрагентов) Тогда
				
				Если НаборСвойстваКонтрагентов <> Неопределено Тогда
					Для Каждого ЗаписьСвойства Из НаборСвойстваКонтрагентов Цикл
						Запись = НаборЗаписейИндексы.Добавить();
						Запись.Контрагент                    = ЗаписьСвойства.Контрагент;
						Запись.ИндексДолжнойОсмотрительности = -1;
						Запись.ИндексПлатежнойДисциплины     = -1;
						Запись.ИндексФинансовогоРиска        = -1;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = ПараметрыЗаполнения.ЗапросКонтрагентовДляЗаполненияИндексов;
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				НаборЗаписейИндексы = РегистрыСведений.ИндексыСПАРКРиски.СоздатьНаборЗаписей();
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					Запись = НаборЗаписейИндексы.Добавить();
					Запись.Контрагент                    = Выборка.Контрагент;
					Запись.ИндексДолжнойОсмотрительности = -1;
					Запись.ИндексПлатежнойДисциплины     = -1;
					Запись.ИндексФинансовогоРиска        = -1;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НаборЗаписейИндексы <> Неопределено Тогда
			НаборЗаписейИндексы.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	// Сохранить результат заполнения данных.
	ИнтернетПоддержкаПользователей.УстановитьЗначениеСвойстваБИП(ИмяСвойстваБИП, Истина);
	
КонецПроцедуры

// Вызывается при переходе на версию 2.1.7.10
//
Процедура ПерейтиНаВерсию_2_1_7_10() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		СПАРКРискиМониторингСобытий.ОчиститьРезультатыПостановкиНаМониторинг();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при переходе на версию 2.1.7.11
//
Процедура ПерейтиНаВерсию_2_1_7_11() Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ОтборЗаданий = Новый Структура;
		ОтборЗаданий.Вставить("Метаданные",
			Метаданные.РегламентныеЗадания.ВсеОбновленияСПАРКРискиРазделенное);
		ОтборЗаданий.Вставить("Предопределенное", Истина);
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗаданий);
		Если ТипЗнч(Задания) = Тип("Массив") Тогда
			ИдентификаторЗадания = Задания[0].УникальныйИдентификатор;
			РасписаниеЗадания = Новый РасписаниеРегламентногоЗадания;
			РасписаниеЗадания.ПериодПовтораДней        = 1;
			РасписаниеЗадания.ПериодПовтораВТечениеДня = 43200;
			РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(
				ИдентификаторЗадания,
				РасписаниеЗадания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при переходе на версию 2.1.8.15
//
Процедура ОбщиеДанныеПерейтиНаВерсию_2_1_8_15() Экспорт
	
	ОбновлениеИнформационнойБазыВключитьИспользованиеСервиса1СПАРКРиски();
	
КонецПроцедуры

// Очищает в области данных результаты постановки контрагентов на мониторинг
// в связи со сменой модели аутентификации в сервисе 1СПАРК Риски в релизе 2.1.9.
Процедура ОбновлениеИнформационнойБазы_ОчиститьРезультатыПостановкиНаМониторинг_2_1_9_2() Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Очистка результатов постановки на мониторинг в области данных при переходе на версию 2.1.9.2.'"));
	СПАРКРискиМониторингСобытий.ОчиститьРезультатыПостановкиНаМониторинг();
	
КонецПроцедуры

// Процедура проверяет правильность установки свойств состава общего реквизита для объекта метаданных.
//
// Параметры:
//  лкОбщийРеквизит                 - ОбщийРеквизит - общий реквизит, для которого осуществляется проверка;
//  лкОбъектМетаданных              - ОбъектМетаданных - проверяемый объект;
//  ПравильноеЗначениеИспользования - ИспользованиеОбщегоРеквизита - правильное значение, которое должно быть;
//  Результат                       - Строка - сюда будет дописан текст ошибки.
//
Процедура Проверка_ОбщиеРеквизиты(
			лкОбщийРеквизит,
			ПравильноеЗначениеИспользования,
			лкОбъектМетаданных,
			Результат)

	Свойство_ОбъектАвто           = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто;
	Свойство_ОбъектИспользовать   = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	Свойство_ОбъектНеИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
	Свойство_АвтоИспользовать     = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать;
	Свойство_АвтоНеИспользовать   = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать;
	СоответствующееСвойствоОбщегоРеквизита = Неопределено;
	Если ПравильноеЗначениеИспользования = Свойство_ОбъектИспользовать Тогда
		СоответствующееСвойствоОбщегоРеквизита = Свойство_АвтоИспользовать;
	ИначеЕсли ПравильноеЗначениеИспользования = Свойство_ОбъектНеИспользовать Тогда
		СоответствующееСвойствоОбщегоРеквизита = Свойство_АвтоНеИспользовать;
	КонецЕсли;

	НайденныйЭлемент = лкОбщийРеквизит.Состав.Найти(лкОбъектМетаданных);
	Если НайденныйЭлемент <> Неопределено Тогда
		Если (НайденныйЭлемент.Использование = ПравильноеЗначениеИспользования)
				ИЛИ ((НайденныйЭлемент.Использование = Свойство_ОбъектАвто)
					И (лкОбщийРеквизит.АвтоИспользование = СоответствующееСвойствоОбщегоРеквизита)) Тогда
			// Допустимо, если:
			//  признак Использование = ПравильноеЗначениеИспользования;
			//  признак Использование = Авто и лкОбщийРеквизит.Автоиспользование = соответствующее ПравильноеЗначениеИспользования.
		Иначе
			ТекущийРезультат = НСтр("ru='Неправильно установлено использование для %ПолноеИмяМетаданных% в общем реквизите %ИмяОбщегоРеквизита%. Установлено: %НайденныйЭлемент.Использование%, ожидается: %ПравильноеЗначениеИспользования%.
				|Также допустимо, что у %ПолноеИмяМетаданных% установлено использование Авто, но тогда у общего реквизита %ИмяОбщегоРеквизита% должно быть установлено Автоиспользование в %ПравильноеЗначениеИспользования%.'");
			ТекущийРезультат = СтрЗаменить(
				ТекущийРезультат,
				"%ПолноеИмяМетаданных%",
				ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(лкОбъектМетаданных) + "." + лкОбъектМетаданных.Имя);
			ТекущийРезультат = СтрЗаменить(
				ТекущийРезультат,
				"%ИмяОбщегоРеквизита%",
				лкОбщийРеквизит.Имя);
			ТекущийРезультат = СтрЗаменить(
				ТекущийРезультат,
				"%НайденныйЭлемент.Использование%",
				Строка(НайденныйЭлемент.Использование));
			ТекущийРезультат = СтрЗаменить(
				ТекущийРезультат,
				"%ПравильноеЗначениеИспользования%",
				Строка(ПравильноеЗначениеИспользования));
			Результат = Результат + ТекущийРезультат + Символы.ПС;
		КонецЕсли;
	Иначе
		ТекущийРезультат = НСтр("ru='Не найден требуемый объект метаданных: %ПолноеИмяМетаданных%'");
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%ПолноеИмяМетаданных%",
			ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(лкОбъектМетаданных) + "." + лкОбъектМетаданных.Имя);
		Результат = Результат + ТекущийРезультат + Символы.ПС;
	КонецЕсли;

КонецПроцедуры

// Процедура проверяет правильность установки прав для объекта метаданных.
//
// Параметры:
//  лкРоль                  - Роль - проверяемая роль;
//  лкПраво                 - Строка - проверяемое право;
//  ПравильноеЗначениеПрава - Булево - правильное значение, которое должно быть;
//  лкОбъектМетаданных      - ОбъектМетаданных - проверяемый объект;
//  Результат               - Строка - сюда будет дописан текст ошибки.
//
Процедура Проверка_Права(
			лкРоль,
			лкПраво,
			ПравильноеЗначениеПрава,
			лкОбъектМетаданных,
			Результат)

	ТекущееЗначениеПрава = ПравоДоступа(лкПраво, лкОбъектМетаданных, лкРоль);
	Если ТекущееЗначениеПрава <> ПравильноеЗначениеПрава Тогда
		ТекущийРезультат = НСтр("ru='Неправильно установлено право %Право% в роли %Роль% для %ПолноеИмяМетаданных%. Установлено: %ТекущееЗначениеПрава%, ожидается: %ПравильноеЗначениеПрава%'");
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%ПолноеИмяМетаданных%",
			ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(лкОбъектМетаданных) + "." + лкОбъектМетаданных.Имя);
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%Право%",
			лкПраво);
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%Роль%",
			лкРоль.Имя);
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%ТекущееЗначениеПрава%",
			ТекущееЗначениеПрава);
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%ПравильноеЗначениеПрава%",
			ПравильноеЗначениеПрава);
		Результат = Результат + ТекущийРезультат + Символы.ПС;
	КонецЕсли;

КонецПроцедуры

// Включает использование сервиса 1СПАРК Риски по умолчанию.
Процедура ОбновлениеИнформационнойБазыВключитьИспользованиеСервиса1СПАРКРиски()
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИспользоватьСервисСПАРКРиски.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти