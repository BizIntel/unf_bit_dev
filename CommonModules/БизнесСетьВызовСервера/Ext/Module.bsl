
#Область СлужебныйПрограммныйИнтерфейс

// Получение сведений об участнике сервиса.
//
// Параметры:
//   ПараметрыКоманды - Структура, СправочникСсылка.Контрагент, СправочникСсылка.Организация - ссылка на объект поиска.
//   Результат - Структура - возвращаемые данные.
//   Отказ - Булево - признак отказа выполнения.
//
Процедура ПолучитьРеквизитыУчастника(Знач ПараметрыКоманды, Результат, Отказ) Экспорт
	
	// Если не структура, значит получена ссылка.
	Если ТипЗнч(ПараметрыКоманды) <> Тип("Структура") Тогда
		ПараметрыКоманды = Новый Структура("Ссылка, ИНН, КПП", ПараметрыКоманды);
	КонецЕсли;
	
	БизнесСеть.ВыполнитьКомандуСервиса("ПолучитьРеквизитыУчастника", ПараметрыКоманды, Результат, Отказ);
	
КонецПроцедуры

// Отправление приглашение контрагенту для подключения к сервису.
//
// Параметры:
//   Организация - СправочникСсылка - ссылка на объект организация.
//   Контрагент - СправочникСсылка - ссылка на объект контрагент.
//   ЭлектроннаяПочта - Строка - адрес электронной почты контрагента.
//   Результат - Структура - возвращаемые данные.
//   Отказ - Булево - признак отказа выполнения.
//
Процедура ОтправитьПриглашениеКонтрагенту(Организация, Контрагент, ЭлектроннаяПочта, Результат, Отказ) Экспорт
	
	ПараметрыПриглашения = Новый Структура();
	ПараметрыПриглашения.Вставить("Организация", Организация);
	ПараметрыПриглашения.Вставить("Контрагент", Контрагент);
	ПараметрыПриглашения.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
	
	БизнесСеть.ВыполнитьКомандуСервиса("ОтправкаПриглашения", ПараметрыПриглашения, Результат, Отказ);
	
КонецПроцедуры

// Получение списка входящих документов из сервиса.
// Параметры:
//   ПараметрыКоманды - Структура - дополнительные параметры
//     * УникальныйИдентификатор - УникальныйИдентификатор - определяет место временного хранилища.
//   Результат - Структура, Неопределено - возвращаемые данные.
//   Отказ - Булево - признак отказа выполнения.
//
Процедура ПолучитьВходящиеДокументы(ПараметрыКоманды, Результат, Отказ) Экспорт
	
	БизнесСеть.ВыполнитьКомандуСервиса("СписокВходящихДокументов", ПараметрыКоманды, Результат, Отказ);
	
КонецПроцедуры

// Удаление документов в сервисе.
//
// Параметры:
//   ПараметрыУдаления - Структура
//     * Организация - СправочникСсылка.Организация - организация документа.
//     * МассивИдентификаторов - Массив - массив с идентификаторами ГУИД удаляемых документов.
//   Результат - Структура - возвращаемые данные.
//   Отказ - Булево - признак отказа выполнения.
//
Процедура УдалитьДокументы(Организация, МассивИдентификаторов, Результат, Отказ) Экспорт
	
	ПараметрыУдаления = Новый Структура;
	ПараметрыУдаления.Вставить("Организация", Организация);
	ПараметрыУдаления.Вставить("МассивИдентификаторов", МассивИдентификаторов);
	БизнесСеть.ВыполнитьКомандуСервиса("УдалитьДокументы", ПараметрыУдаления, Результат, Отказ);
	
КонецПроцедуры

// Отправка уведомлений об отправлении электронного документа.
//
// Параметры:
//   ПараметрыУдаления - Структура
//     * Организация - СправочникСсылка.Организация - организация документа.
//     * МассивИдентификаторов - Массив - массив с идентификаторами ГУИД удаляемых документов.
//   Результат - Структура - возвращаемые данные.
//   Отказ - Булево - признак отказа выполнения.
//
Процедура ОтправитьУведомлениеОбОтправке(Контрагент, МассивИдентификаторов, АдресПочты, Результат, Отказ) Экспорт
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Получатель", Контрагент);
	ПараметрыУведомления.Вставить("МассивИдентификаторов", МассивИдентификаторов);
	ПараметрыУведомления.Вставить("ЭлектроннаяПочта", АдресПочты);

	БизнесСеть.ВыполнитьКомандуСервиса("ОтправитьУведомлениеОбОтправке", ПараметрыУведомления, Результат, Отказ);
	
КонецПроцедуры

// Отправка документа контрагенту через сервис.
// Параметры:
//   ПараметрыКоманды - Структура - дополнительные параметры
//     * УникальныйИдентификатор - УникальныйИдентификатор - определяет место временного хранилища.
//   Результат - Структура, Неопределено - возвращаемые данные.
//   Отказ - Булево - признак отказа выполнения.
//
Процедура ОтправитьДокумент(ПараметрыКоманды, Результат, Отказ) Экспорт
	
	БизнесСеть.ВыполнитьКомандуСервиса("ОтправитьДокумент", ПараметрыКоманды, Результат, Отказ);
	
КонецПроцедуры

// Отключение организаций от сервиса.
//
// Параметры:
//  МассивОрганизаций			 - Массив - отключаемые организации.
//  РежимОтключенияВСервисе		 - Булево - Истина - отключение в сервисе, Ложь - только локально.
//  Отказ						 - Булево - Возвращает результат исполнения.
//  ТребуетсяОбновитьИнтерфейс	 - Булево - Возвращает Истина, если после исполнения требуется обновления интерфейса.
//
Процедура ОтключитьОрганизации(МассивОрганизаций, РежимОтключенияВСервисе, Отказ, ТребуетсяОбновитьИнтерфейс) Экспорт
	
	БизнесСеть.ОтключитьОрганизации(МассивОрганизаций, РежимОтключенияВСервисе, Отказ, ТребуетсяОбновитьИнтерфейс);
	
КонецПроцедуры

// Обновление пользователей в сервисе по данным информационной базы.
//
// Параметры:
//   ТекущийАбонент - Строка - идентификатор абонента в сервисе.
//   ОбновлятьИдентификаторыДоступа - Булево.
//   Результат - Произвольный - результат выполнения.
//   Отказ - Булево - признак ошибки выполнения.
//
Процедура ОбновитьПользователейВСервисе(ТекущийАбонент, ОбновлятьИдентификаторыДоступа, Результат, Отказ) Экспорт
	
	БизнесСеть.ОбновитьПользователейВСервисе(ТекущийАбонент, ОбновлятьИдентификаторыДоступа, Результат, Отказ);

КонецПроцедуры

// Получение данных электронного документа в сервисе.
//
Функция ПолучитьДанныеДокументаСервиса(МассивИдентификаторов, ЭтоРежимЗагрузки, УникальныйИдентификатор) Экспорт
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Результат = Неопределено;
	
	ПараметрыКоманды.Вставить("МассивСсылокНаОбъект", МассивИдентификаторов);
	ПараметрыКоманды.Вставить("РежимВходящихДокументов", ?(ЭтоРежимЗагрузки = Истина, "true", "false"));
	ПараметрыКоманды.Вставить("withData", "true");
	
	Отказ = Ложь;
	БизнесСеть.ВыполнитьКомандуСервиса("ПолучитьДокументы", ПараметрыКоманды, Результат, Отказ);
	Если Отказ ИЛИ Результат.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	МассивАдресовДанных = КонвертацияДанныхВХранилищеBase64(Результат.Данные, "documentData", УникальныйИдентификатор);
	
	Возврат МассивАдресовДанных;
	
КонецФункции

// Получение массива организаций, подключенных к сервису.
//
// Возвращаемое значение:
//   Массив - подключенные организации к сервису из информационной базы.
//
Функция МассивПодключенныхОрганизаций() Экспорт

	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.Организации1СБизнесСеть КАК Организации1СБизнесСеть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник_Организации КАК Организации
	|		ПО Организации1СБизнесСеть.Организация = Организации.Ссылка
	|ГДЕ
	|	НЕ Организации.Ссылка ЕСТЬ NULL ";

	ИмяСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник_Организации", "Справочник." + ИмяСправочникаОрганизации);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

// Формирование документа ИБ по электронному документу.
//
// Параметры:
//   ПараметрыФормирования - Структура - структура данных формирования.
//   ДанныеФормы - ДанныеФормыКоллекция - форма получатель.
//   ТекстСообщения - Строка - текст при возникновении ошибки.
//   Записывать - Булево - записывать документ.
//   Отказ - Булево - результат выполнения.
//
Процедура СформироватьДокументИБ(ПараметрыФормирования, ДокументСсылка, ТекстСообщения, Записывать = Ложь,
	ОбновитьСтруктуруРазбора = Ложь, Отказ = Ложь) Экспорт
	
	БизнесСеть.СформироватьДокументИБ(ПараметрыФормирования, ДокументСсылка, ТекстСообщения, Записывать,
		ОбновитьСтруктуруРазбора, Отказ);
	
КонецПроцедуры

// Проверка возможности отправки документа.
//
// Параметры:
//  Ссылка		 - ДокументСсылка - ссылка на отправляемый документ.
//  Организация	 - ОпределяемыйТип.Организация - заполняется в функции, в случае если ИБ не подключена,
//                                                требуется для дальнейшего подключения организации.
// 
// Возвращаемое значение:
//  Булево - результат проверки.
//
Функция ВозможнаОтправкаДокумента(МассивСсылок, Организация, ТекстОшибки, Отказ) Экспорт
	
	Если МассивСсылок.Количество() > 1 Тогда
		// Проверка совпадения отправителя и получателя в документах.
		БизнесСетьПереопределяемый.ВыполнитьКонтрольРеквизитовДокументов(МассивСсылок, ТекстОшибки, Отказ);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразование данных документа сервиса во временном хранилище из Base64.
//
// Параметры:
//   МассивДокументов - Массив - электронные документы, тип Структура.
//   ИмяСвойства - Строка - наименование свойства.
//   УникальныйИдентификатор - УникальныйИдентификатор, Строка - идентификатор для сохранения хранилища.
//
// Возвращаемое значение:
//   Массив - список адресов временного хранилища с конвертированными данными.
//
Функция КонвертацияДанныхВХранилищеBase64(МассивДокументов, ИмяСвойства, УникальныйИдентификатор)
	
	МассивВозврата = Новый Массив();
	Для каждого ЭлементМассива Из МассивДокументов Цикл
		ДанныеДокумента = ЭлементМассива[ИмяСвойства];
		МассивВозврата.Добавить(ПоместитьВоВременноеХранилище(Base64Значение(ДанныеДокумента), УникальныйИдентификатор));
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти