
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Монитор Интернет-поддержки".
// ОбщийМодуль.МониторИнтернетПоддержки.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет описание обработчиков событий, реализуемых подсистемой.
//
// Описание формата процедур-обработчиков см. в описании функции
// ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий().
//
// Параметры:
//	СерверныеОбработчики - Структура - серверные обработчики;
//		* ПараметрыРаботыКлиентаПриЗапуске - Массив - элементы типа Строка -
//			имена модулей, реализующих обработку заполнения параметров
//			работы клиента при запуске;
//		* ОчиститьНастройкиИПППользователя - элементы типа Строка -
//			имена модулей, реализующих обработку очистки настроек
//			пользователя при выходе авторизованного пользователя из ИПП;
//		* БизнесПроцессы - Соответствие - серверные обработчики
//			бизнес-процессов:
//			** Ключ - Строка - <Точка входа бизнес-процесса>\<Имя события>;
//			** Значение - Строка - имя серверного модуля, реализующего
//				обработчик бизнес-процесса;
//	КлиентскиеОбработчики - Структура - клиентские обработчики;
//		* ПриНачалеРаботыСистемы - элементы типа Строка -
//			имена клиентских модулей, реализующих обработку
//			события "При начале работы системы"
//		* БизнесПроцессы - Соответствие - клиентские обработчики
//			бизнес-процессов:
//			** Ключ - Строка - <Точка входа бизнес-процесса>\<Имя события>;
//			** Значение - Строка - имя клиентского модуля, реализующего
//				обработчик бизнес-процесса;
//
Процедура ДобавитьОбработчикиСобытий(СерверныеОбработчики, КлиентскиеОбработчики) Экспорт
	
	СерверныеОбработчики.ПараметрыРаботыКлиентаПриЗапуске.Добавить("МониторИнтернетПоддержки");
	СерверныеОбработчики.ОчиститьНастройкиИПППользователя.Добавить("МониторИнтернетПоддержки");
	КлиентскиеОбработчики.ПриНачалеРаботыСистемы.Добавить("МониторИнтернетПоддержкиКлиент");
	
	// Серверные обработчики бизнес-процессов
	БизнесПроцессыСервер = СерверныеОбработчики.БизнесПроцессы;
	БизнесПроцессыСервер.Вставить("systemStartNew\ПараметрыСозданияКонтекста",
		"МониторИнтернетПоддержки");
	БизнесПроцессыСервер.Вставить("systemStartNew\ОпределитьВозможностьЗапуска",
		"МониторИнтернетПоддержкиКлиентСервер");
	БизнесПроцессыСервер.Вставить("systemStartNew\ПриСозданииКонтекстаВзаимодействия",
		"МониторИнтернетПоддержки");
	БизнесПроцессыСервер.Вставить("systemStartNew\КонтекстВыполненияКоманды",
		"МониторИнтернетПоддержкиКлиентСервер");
	БизнесПроцессыСервер.Вставить("systemStartNew\ВыполнитьКомандуСервиса",
		"МониторИнтернетПоддержки");
	БизнесПроцессыСервер.Вставить("systemStartNew\СтруктурироватьКомандуСервиса",
		"МониторИнтернетПоддержкиКлиентСервер");
	БизнесПроцессыСервер.Вставить("systemStartNew\ЗаполнитьПараметрыВнутреннейФормы",
		"МониторИнтернетПоддержкиКлиентСервер");
	
	БизнесПроцессыСервер.Вставить("handStartNew\ПараметрыСозданияКонтекста",
		"МониторИнтернетПоддержки");
	БизнесПроцессыСервер.Вставить("handStartNew\ОпределитьВозможностьЗапуска",
		"МониторИнтернетПоддержкиКлиентСервер");
	БизнесПроцессыСервер.Вставить("handStartNew\ПриСозданииКонтекстаВзаимодействия",
		"МониторИнтернетПоддержки");
	БизнесПроцессыСервер.Вставить("handStartNew\КонтекстВыполненияКоманды",
		"МониторИнтернетПоддержкиКлиентСервер");
	БизнесПроцессыСервер.Вставить("handStartNew\ВыполнитьКомандуСервиса",
		"МониторИнтернетПоддержки");
	БизнесПроцессыСервер.Вставить("handStartNew\СтруктурироватьКомандуСервиса",
		"МониторИнтернетПоддержкиКлиентСервер");
	БизнесПроцессыСервер.Вставить("handStartNew\ЗаполнитьПараметрыВнутреннейФормы",
		"МониторИнтернетПоддержкиКлиентСервер");
	
	
	// Клиентские обработчики бизнес-процессов
	
	БизнесПроцессыКлиент = КлиентскиеОбработчики.БизнесПроцессы;
	БизнесПроцессыКлиент.Вставить("systemStartNew\ОпределитьВозможностьЗапуска",
		"МониторИнтернетПоддержкиКлиентСервер");
	БизнесПроцессыКлиент.Вставить("systemStartNew\КонтекстВыполненияКоманды",
		"МониторИнтернетПоддержкиКлиентСервер");
	БизнесПроцессыКлиент.Вставить("systemStartNew\ПараметрыОткрытияФормы",
		"МониторИнтернетПоддержкиКлиент");
	БизнесПроцессыКлиент.Вставить("systemStartNew\СтруктурироватьКомандуСервиса",
		"МониторИнтернетПоддержкиКлиентСервер");
	БизнесПроцессыКлиент.Вставить("systemStartNew\ЗаполнитьПараметрыВнутреннейФормы",
		"МониторИнтернетПоддержкиКлиентСервер");
	
	БизнесПроцессыКлиент.Вставить("handStartNew\ОпределитьВозможностьЗапуска",
		"МониторИнтернетПоддержкиКлиентСервер");
	БизнесПроцессыКлиент.Вставить("handStartNew\КонтекстВыполненияКоманды",
		"МониторИнтернетПоддержкиКлиентСервер");
	БизнесПроцессыКлиент.Вставить("handStartNew\ПараметрыОткрытияФормы",
		"МониторИнтернетПоддержкиКлиент");
	БизнесПроцессыКлиент.Вставить("handStartNew\СтруктурироватьКомандуСервиса",
		"МониторИнтернетПоддержкиКлиентСервер");
	БизнесПроцессыКлиент.Вставить("handStartNew\ЗаполнитьПараметрыВнутреннейФормы",
		"МониторИнтернетПоддержкиКлиентСервер");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общего назначения

// Добавляет необходимые параметры работы клиента при запуске.
// Добавленные параметры доступны в
// СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске().ИнтернетПоддержкаПользователей.<ИмяПараметра>;
// Используется в том случае, если подсистема реализует сценарий, выполняемый
// при начале работы системы.
// Вызывается из ИнтернетПоддержкаПользователей.ПараметрыРаботыКлиентаПриЗапуске().
//
// Параметры:
//	Параметры - Структура - заполняемые параметры;
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	// Создание контекста для запуска бизнес-процесса
	// отображения монитора Интернет-поддержки.
	
	КонтекстВзаимодействия = ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия(
		"systemStartNew",
		Ложь,
		Неопределено,
		Истина);
	
	Параметры.Вставить("МониторИнтернетПоддержки", КонтекстВзаимодействия);
	
КонецПроцедуры

// Вызывается при выходе авторизованного пользователя из Интернет-
// поддержки при нажатии ссылки "Выход".
// Выполняет очистку настроек пользователя, реализуемых подсистемой.
// Вызывается из ИнтернетПоддержкаПользователейВызовСервера.ОчиститьНастройкиИПППользователя().
//
Процедура ОчиститьНастройкиИПППользователя() Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ИнтернетПоддержкаПользователей",
		"ХэшОбновленияИнформационногоОкна",
		Неопределено);
	
КонецПроцедуры

// Определяет возможность использования монитора Интернет-поддержки
// пользователей в соответствии с текущим режимом работы информационной базы
// и правами пользователя.
//
// Возвращаемое значение:
//	Булево - Истина - возможно использование, Ложь - в противном случае.
//
Функция ДоступноИспользованиеМонитораИнтернетПоддержки() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	// Вызов устаревшей процедуры для обратной совместимости
	ИнтернетПоддержкаПользователейПереопределяемый.ИспользоватьИнтернетПоддержку(Отказ);
	Если Отказ = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МониторИнтернетПоддержкиПереопределяемый.ИспользоватьМониторИнтернетПоддержки(Отказ);
	Если Отказ = Истина Тогда
		Возврат ложь;
	КонецЕсли;
	
	Возврат Пользователи.РолиДоступны("ИспользованиеМонитораИПП", , Ложь);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики бизнес-процессов

// Вызывается при заполнении параметров создания контекста бизнес-процесса.
// См. процедуру ИнтернетПоддержкаПользователейВызовСервера.ПараметрыСозданияКонтекста().
//
// Параметры:
//	Параметры - Структура - предзаполненные параметры:
//	* МестоЗапуска - Строка - точка входа бизнес-процесса;
//	* ПриНачалеРаботыСистемы - Булево - Истина, если запуск бизнес-процесса
//		выполняется при начале работы системы;
//	* ИспользоватьИнтернетПоддержку - Булево - Истина, если разрешено
//		использование ИПП для текущего режима работы ИБ;
//	* ЗапускРазрешен - Булево - Истина, если текущему пользователю разрешен
//		запуск ИПП;
//	ПрерватьОбработку - Булево - в параметре возвращается признак завершения
//		дальнейшей обработки, если известно, что дальнейшая обработка не
//		требуется.
//
Процедура ПараметрыСозданияКонтекста(Параметры, ПрерватьОбработку) Экспорт
	
	Если НЕ Пользователи.РолиДоступны("ИспользованиеМонитораИПП", , Ложь) Тогда
		Параметры.ЗапускРазрешен = Ложь;
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	// Вызов устаревшей процедуры для обратной совместимости
	ИнтернетПоддержкаПользователейПереопределяемый.ИспользоватьИнтернетПоддержку(Отказ);
	Если Отказ <> Истина Тогда
		МониторИнтернетПоддержкиПереопределяемый.ИспользоватьМониторИнтернетПоддержки(Отказ);
	КонецЕсли;
	ИспользоватьМонитор = (Отказ <> Истина);
	
	Параметры.Вставить("ИспользоватьМонитор", ИспользоватьМонитор);
	
	Если ИспользоватьМонитор Тогда
		Параметры.Вставить("ПоказыватьМониторПриНачалеРаботы",
			ПоказатьМониторПриНачалеРаботыСПрограммой());
	Иначе
		Параметры.Вставить("ПоказыватьМониторПриНачалеРаботы", Ложь);
	КонецЕсли;
	
	Если Параметры.ПриНачалеРаботыСистемы
		И НЕ Параметры.ПоказыватьМониторПриНачалеРаботы Тогда
		ПрерватьОбработку = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет необходимые параметры к созданному контексту выполнения
// бизнес-процесса.
// Вызывается из ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия().
//
// Параметры:
//	Контекст - см. функцию
//		ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия()
Процедура ПриСозданииКонтекстаВзаимодействия(Контекст) Экспорт
	
	Контекст.КСКонтекст.Вставить("ХэшИнформацииМонитора", "");
	Контекст.Вставить("СообщениеОНедоступностиДействия",
		НСтр("ru = 'Отображение монитора Интернет-поддержки недоступно для этой конфигурации.'"));
	
КонецПроцедуры

// Выполнение команды сервиса ИПП на стороне сервера 1С:Предприятия.
// Вызывается из ИнтернетПоддержкаПользователейВызовСервера.ВыполнитьКомандуСервиса().
// Параметры:
//	КСКонтекст - см. описание функции
//		ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия();
//	СтруктураКоманды - см. описание функции
//		ИнтернетПоддержкаПользователейКлиентСервер.СтруктурироватьОтветСервера();
//	КонтекстОбработчика - см. описание функции
//		ИнтернетПоддержкаПользователейКлиентСервер.НовыйКонтекстОбработчикаКоманд()
//
Процедура ВыполнитьКомандуСервиса(КСКонтекст, СтруктураКоманды, КонтекстОбработчика) Экспорт
	
	Если СтруктураКоманды.ИмяКоманды = "check.updatehash" Тогда
		ПроверитьХэшОбновления(КСКонтекст, СтруктураКоманды, КонтекстОбработчика);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет команду сравнения хеша обновления информации монитора
// Интернет-поддержки.
//
Процедура ПроверитьХэшОбновления(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	Если ОсновныеПараметры.МестоЗапуска <> "systemStartNew"
		И ОсновныеПараметры.МестоЗапуска <> "handStartNew" Тогда
		// Если не показ монитора ИПП, тогда не обрабатывать команду
		Возврат;
	КонецЕсли;
	
	ХэшОбновленияСохраненный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтернетПоддержкаПользователей",
		"ХэшОбновленияИнформационногоОкна");
	
	КСКонтекст.ХэшИнформацииМонитора = СтруктураКоманды.ХэшОбновления;
	
	ЕстьИзмененияХешаОбновления = (ХэшОбновленияСохраненный <> КСКонтекст.ХэшИнформацииМонитора);
	
	Если НЕ КСКонтекст.ПриНачалеРаботыСистемы Тогда
		Возврат;
	Иначе
		
		// Если ПриНачалеРаботыСистемы, тогда настройка показа при запуске установлена в Истина.
		// Прочитать настройку отображения по изменению и показать при необходимости
		// информационное окно.
		
		НастройкаПоказыватьПриОбновлении = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ИнтернетПоддержкаПользователей",
			"ПоказПриСтартеТолькоПриИзменении");
		Если НастройкаПоказыватьПриОбновлении = Истина
			И НЕ ЕстьИзмененияХешаОбновления Тогда
			
			КонтекстОбработчика.ВыполнитьОстановку = Истина;
			КонтекстОбработчика.Вставить("ОписаниеПричиныОстановки",
				НСтр("ru = 'Новой информации на сервере Интернет-поддержки пользователей нет.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость запуска механизма при старте приложения
// в соответствии с пользовательскими настройками и реализацией
// переопределяемых модулей.
//
// Возвращаемое значение:
//	Булево - Истина, если запускать при старте, Ложь - в противном случае.
//
Функция ПоказатьМониторПриНачалеРаботыСПрограммой()
	
	НеобходимоЗапускатьПриСтарте = Ложь;
	МониторИнтернетПоддержкиПереопределяемый.ИспользоватьОтображениеМонитораПриНачалеРаботы(
		НеобходимоЗапускатьПриСтарте);
	
	Если НеобходимоЗапускатьПриСтарте <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВсегдаПоказыватьПриСтартеПрограммы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтернетПоддержкаПользователей",
		"ВсегдаПоказыватьПриСтартеПрограммы",
		Истина);
	
	ВсегдаПоказыватьПриСтартеПрограммы = (ВсегдаПоказыватьПриСтартеПрограммы = Истина);
	
	Возврат ВсегдаПоказыватьПриСтартеПрограммы
		И ТекущаяДатаСеанса() >= ИнтернетПоддержкаПользователейВызовСервера.ЗначениеНастройкиИППНеНапоминатьОбАвторизацииДо();
	
КонецФункции

#КонецОбласти