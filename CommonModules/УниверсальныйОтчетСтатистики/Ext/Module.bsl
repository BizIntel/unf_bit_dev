#Область ЗагрузкаОтчета

Функция ПолучитьПредставлениеНуляИзСтрокиФормата(Знач СтрокаФормата)
	
	Если ПустаяСтрока(СтрокаФормата) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, ";", Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки);
		Если СтрНайти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			Возврат СокрЛП(ПодстрокаФормата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ЗначениеОбластиПоАдресуИзСсылки(КонтекстФормы, СтрСсылка, ИндексЯчейки = 1, ИмяЯчейкиФильтра = "", НомерРаздела = "", НомерСтроки = "", ИмяКолонки = "");
	
	КодАдреса = СокрЛП(СтрСсылка);
	
	ПредставлениеАдреса = "";
	ПозРазд = СтрНайти(КодАдреса, ",");
	Если ПозРазд > 0 Тогда
		СтрНомерРаздела = Лев(КодАдреса, ПозРазд - 1);
		НомерРаздела = Число("0" + СтрНомерРаздела);
		ПредставлениеАдреса = ПредставлениеАдреса + "s" + Формат(НомерРаздела, "ЧН=; ЧГ=");
		КодАдреса = Сред(КодАдреса, ПозРазд + 1);
	КонецЕсли;
	ПозРазд = СтрНайти(КодАдреса, ",");
	Если ПозРазд > 0 Тогда
		СтрНомерСтроки = Лев(КодАдреса, ПозРазд - 1);
		НомерСтроки = Число("0" + СтрНомерСтроки);
		ИмяКолонки = Сред(КодАдреса, ПозРазд + 1);
		ПредставлениеАдреса = ПредставлениеАдреса + "r" + Формат(НомерСтроки, "ЧН=; ЧГ=");
		ПредставлениеАдреса = ПредставлениеАдреса + "c" + ИмяКолонки;
	КонецЕсли;
	
	ИмяОбласти   = "ПО" + ПредставлениеАдреса;
	ИмяМнОбласти = "ПМ" + ПредставлениеАдреса;
	
	ЗначениеОбласти = Неопределено;
	Если КонтекстФормы.СтруктураДанныхОтчета.Свойство(ИмяМнОбласти + "_" + Формат(ИндексЯчейки, "ЧН=; ЧГ="), ЗначениеОбласти) Тогда
		ИмяЯчейкиФильтра = ИмяМнОбласти;
	ИначеЕсли КонтекстФормы.СтруктураДанныхОтчета.Свойство(ИмяОбласти, ЗначениеОбласти) Тогда
		ИмяЯчейкиФильтра = ИмяОбласти;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеОбласти) = Тип("Число") Тогда
		ЗначениеЯчейкиФильтра = Формат(ЗначениеОбласти, "ЧН=; ЧГ=");
	Иначе
		ЗначениеЯчейкиФильтра = СокрЛП(ЗначениеОбласти);
	КонецЕсли;
	
	Возврат ЗначениеЯчейкиФильтра;
	
КонецФункции

Функция ИдентификаторЭлементаСпискаФормПоПредставлениюУниверсальногоОтчета(КонтекстФормы, ПредставлениеЭлемента);
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеЭлемента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого ЭлементФормаРаздела Из КонтекстФормы.СтруктураРеквизитовФормы.СписокФормРазделов Цикл
		Если СокрЛП(ЭлементФормаРаздела.Представление) = СокрЛП(ПредставлениеЭлемента) Тогда
			Возврат ЭлементФормаРаздела.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СохранитьДанныеРаздела(КонтекстФормы, НаимРаздела)
	ИдЭлементаФормыРаздела = ИдентификаторЭлементаСпискаФормПоПредставлениюУниверсальногоОтчета(КонтекстФормы, НаимРаздела);
	
	Если ИдЭлементаФормыРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормаРаздела = КонтекстФормы.СтруктураРеквизитовФормы.СписокФормРазделов.НайтиПоИдентификатору(ИдЭлементаФормыРаздела);
	ЭлементФормаРаздела.Значение.Очистить();
	ЭлементФормаРаздела.Значение.Вывести(КонтекстФормы.ТабличныйДокумент);
КонецПроцедуры

Процедура УстановитьПредставлениеКлючевыхЯчеек(КонтекстФормы, СтруктураОпцийСтроки, ИндексСтроки, ТабДок = Неопределено)
	
	ПредставлениеКлючевыхЯчеек = "";
	Для каждого КодКлючевойЯчейки Из СтруктураОпцийСтроки.КлючевыеЯчейки Цикл
		ИмяКлючевойЯчейки = ?(ЗначениеЗаполнено(ИндексСтроки), КодКлючевойЯчейки + "_" + Формат(ИндексСтроки, "ЧГ="), КодКлючевойЯчейки);
		Если ТабДок = Неопределено Тогда 
			ЗначениеКлючевойЯчейки = КонтекстФормы.ТабличныйДокумент.Области[ИмяКлючевойЯчейки].Значение;
			СтрЗначениеКлючевойЯчейки = СокрЛП(КонтекстФормы.ТабличныйДокумент.Области[ИмяКлючевойЯчейки].Текст);
		Иначе
			ЗначениеКлючевойЯчейки = ТабДок.Области[ИмяКлючевойЯчейки].Значение;
			СтрЗначениеКлючевойЯчейки = СокрЛП(ТабДок.Области[ИмяКлючевойЯчейки].Текст);
		КонецЕсли;
		Если ПустаяСтрока(СтрЗначениеКлючевойЯчейки) Тогда
			Продолжить;
		КонецЕсли;
		ПредставлениеЯчейки = ?(ТипЗнч(ЗначениеКлючевойЯчейки) = Тип("Число"), Формат(ЗначениеКлючевойЯчейки, "ЧГ="), СокрЛП(ЗначениеКлючевойЯчейки));
		Если НЕ КонтекстФормы.СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			ПредставлениеКлючевойЯчейки = Неопределено;
			Если КонтекстФормы.СтруктураДанныхОтчета.Свойство("ПР" + ИмяКлючевойЯчейки, ПредставлениеКлючевойЯчейки) Тогда
				ПредставлениеЯчейки = ПредставлениеКлючевойЯчейки;
			КонецЕсли;
		КонецЕсли;
		ПредставлениеКлючевыхЯчеек = ПредставлениеКлючевыхЯчеек + ?(ПустаяСтрока(ПредставлениеКлючевыхЯчеек), "", "; ") + ПредставлениеЯчейки;
	КонецЦикла;
	
	Если ПустаяСтрока(ПредставлениеКлючевыхЯчеек) Тогда
		ПредставлениеКлючевыхЯчеек = СтруктураОпцийСтроки.ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ИмяВычисляемойЯчейки = ?(ЗначениеЗаполнено(ИндексСтроки), СтруктураОпцийСтроки.ВычисляемаяЯчейка + "_" + Формат(ИндексСтроки, "ЧГ="), СтруктураОпцийСтроки.ВычисляемаяЯчейка);
	
	Если ТабДок = Неопределено Тогда
		КонтекстФормы.ТабличныйДокумент.Области[ИмяВычисляемойЯчейки].Значение = ПредставлениеКлючевыхЯчеек;
	Иначе
		ТабДок.Области[ИмяВычисляемойЯчейки].Значение = ПредставлениеКлючевыхЯчеек;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьСекциюTitle(ФайлОбмена, ПараметрыTitle)
	ФайлОбмена.Прочитать();
	Если Не (ФайлОбмена.ИмеетИмя И ФайлОбмена.ТипУзла = ТипУзлаXML.НачалоЭлемента И "title" = НРег(ФайлОбмена.ЛокальноеИмя)) Тогда
		ВызватьИсключение "Это не отчет статистики (ожидается секция title)";
	КонецЕсли;
	
	СчКонецЭлемента = 1;
	Пока Истина Цикл 
		ФайлОбмена.Прочитать();
		Если ФайлОбмена.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
			Если (Не ФайлОбмена.ИмеетИмя) Или ФайлОбмена.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или "item" <> НРег(ФайлОбмена.ЛокальноеИмя) Тогда 
				ВызватьИсключение "Ошибка при чтении отчета в секции title (ожидается секция item)";
			КонецЕсли;
			
			СчКонецЭлемента = СчКонецЭлемента + 1;
			ПараметрыTitle.Вставить(ФайлОбмена.ПолучитьАтрибут(0), ФайлОбмена.ПолучитьАтрибут(1));
		ИначеЕсли ФайлОбмена.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
			СчКонецЭлемента = СчКонецЭлемента - 1;
			Если СчКонецЭлемента = 0 Тогда 
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПрочитатьСекциюReport(КонтекстФормы, ФайлОбмена, ПараметрыReport)
	ФайлОбмена.Прочитать();
	Если (Не ФайлОбмена.ИмеетИмя) Или ФайлОбмена.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или "report" <> НРег(ФайлОбмена.ЛокальноеИмя) Тогда 
		ВызватьИсключение "Это не отчет статистики";
	КонецЕсли;
	
	Инд = 0;
	Пока ЗначениеЗаполнено(ФайлОбмена.ИмяАтрибута(Инд)) Цикл
		ПараметрыReport.Вставить(ФайлОбмена.ИмяАтрибута(Инд), ФайлОбмена.ПолучитьАтрибут(Инд));
		Инд = Инд + 1;
	КонецЦикла;
	
	Если (Не ЗначениеЗаполнено(ПараметрыReport["code"])) Или (Не ЗначениеЗаполнено(ПараметрыReport["shifr"]))Тогда 
		ВызватьИсключение "Это не отчет статистики";
	КонецЕсли;
	
	Если КонтекстФормы.СтруктураРеквизитовФормы.мКодШаблона <> ПараметрыReport["code"] Тогда 
		ВызватьИсключение "Не соответствует код шаблона";
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКолонкуВМассив(ФайлОбмена, МассивКолонок, СчКонецЭлемента)
	Если Не (ФайлОбмена.ИмеетИмя И ФайлОбмена.ТипУзла = ТипУзлаXML.НачалоЭлемента И "col" = НРег(ФайлОбмена.ЛокальноеИмя)) Тогда
		ВызватьИсключение "Это не отчет статистики (ожидается секция col)";
	КонецЕсли;
	
	Если НРег(ФайлОбмена.ИмяАтрибута(0)) <> "code" Тогда
		ВызватьИсключение "Это не отчет статистики (в колонке должен быть аттрибут code)";
	КонецЕсли;
	
	КодКолонки = ФайлОбмена.ПолучитьАтрибут(0);
	ФайлОбмена.Прочитать();
	Если ФайлОбмена.ИмеетЗначение И НРег(ФайлОбмена.ТипУзла) = НРег("Текст") Тогда 
		МассивКолонок.Добавить(Новый Структура("КодКолонки, ЗначениеКолонки", КодКолонки, ФайлОбмена.Значение));
	ИначеЕсли ФайлОбмена.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		СчКонецЭлемента = СчКонецЭлемента - 1;
	Иначе
		ВызватьИсключение "Это не отчет статистики";
	КонецЕсли;
КонецПроцедуры

Процедура ПрочитатьRow(ФайлОбмена, Результаты, СчКонецЭлемента)
	Если Не (ФайлОбмена.ИмеетИмя И ФайлОбмена.ТипУзла = ТипУзлаXML.НачалоЭлемента И "row" = НРег(ФайлОбмена.ЛокальноеИмя)) Тогда
		ВызватьИсключение "Это не отчет статистики (ожидается секция row)";
	КонецЕсли;
	
	ЗначениеСтроки = Новый Структура("Аттрибуты, Колонки", Новый Соответствие, Новый Массив);
	Инд = 0;
	Пока ЗначениеЗаполнено(ФайлОбмена.ИмяАтрибута(Инд)) Цикл
		ЗначениеСтроки["Аттрибуты"].Вставить(ФайлОбмена.ИмяАтрибута(Инд), ФайлОбмена.ПолучитьАтрибут(Инд));
		Инд = Инд + 1;
	КонецЦикла;
	
	Пока Истина Цикл 
		ФайлОбмена.Прочитать();
		Если ФайлОбмена.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
			СчКонецЭлемента = СчКонецЭлемента + 1;
			ДобавитьКолонкуВМассив(ФайлОбмена, ЗначениеСтроки.Колонки, СчКонецЭлемента)
		ИначеЕсли ФайлОбмена.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
			СчКонецЭлемента = СчКонецЭлемента - 1;
			Если СчКонецЭлемента = 1 Тогда 
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результаты["rows"].Добавить(ЗначениеСтроки);
КонецПроцедуры

Функция ПрочитатьСекциюSection(ФайлОбмена, Результаты)
	ФайлОбмена.Прочитать();
	Если Не (ФайлОбмена.ИмеетИмя И ФайлОбмена.ТипУзла = ТипУзлаXML.НачалоЭлемента И "section" = НРег(ФайлОбмена.ЛокальноеИмя)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НРег(ФайлОбмена.ИмяАтрибута(0)) <> "code" Или ЗначениеЗаполнено(ФайлОбмена.ИмяАтрибута(1)) Тогда
		ВызватьИсключение "Это не отчет статистики (ожидается секция code в section)";
	КонецЕсли;
	
	Результаты = Новый Структура("code, rows", ФайлОбмена.ПолучитьАтрибут(0), Новый Массив);
	
	СчКонецЭлемента = 1;
	Пока Истина Цикл 
		ФайлОбмена.Прочитать();
		Если ФайлОбмена.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
			СчКонецЭлемента = СчКонецЭлемента + 1;
			ПрочитатьRow(ФайлОбмена, Результаты, СчКонецЭлемента);
		ИначеЕсли ФайлОбмена.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
			СчКонецЭлемента = СчКонецЭлемента - 1;
			Если СчКонецЭлемента = 0 Тогда 
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Процедура ПрочитатьСекциюSections(ФайлОбмена, ПараметрыSections)
	ФайлОбмена.Прочитать();
	Если Не (ФайлОбмена.ИмеетИмя И ФайлОбмена.ТипУзла = ТипУзлаXML.НачалоЭлемента И "sections" = НРег(ФайлОбмена.ЛокальноеИмя)) Тогда
		ВызватьИсключение "Это не отчет статистики (ожидается секция sections)";
	КонецЕсли;
	
	Результаты = Неопределено;
	Пока ПрочитатьСекциюSection(ФайлОбмена, Результаты) Цикл 
		МассивСекций = ПараметрыSections[Результаты["code"]];
		Если МассивСекций = Неопределено Тогда 
			МассивСекций = Новый Массив;
		КонецЕсли;
		МассивСекций.Добавить(Результаты["rows"]);
		ПараметрыSections[Результаты["code"]] = МассивСекций;
	КонецЦикла;
КонецПроцедуры

Функция УбратьЛидирующиеНули(Строка)
	Рез = СокрЛП(Строка);
	Пока Лев(Рез, 1) = "0" Цикл 
		Рез = Сред(Рез, 2);
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция ЗаменитьПредставлениеНуляВСтрокеФормата(Знач СтрокаФормата, ПредставлениеНуля)
	
	НоваяСтрокаФормата = "";
	
	РазделительПодстрок = ";";
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, РазделительПодстрок, Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СокрЛП(СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки));
		Если ПустаяСтрока(ПодстрокаФормата) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			ПодстрокаФормата = ПредставлениеНуля;
		КонецЕсли;
		НоваяСтрокаФормата = НоваяСтрокаФормата + ?(ПустаяСтрока(НоваяСтрокаФормата), "", РазделительПодстрок) + ПодстрокаФормата;
	КонецЦикла;
	
	Если ПустаяСтрока(НоваяСтрокаФормата) Тогда
		Возврат ПредставлениеНуля;
	КонецЕсли;
	
	Возврат НоваяСтрокаФормата;
	
КонецФункции

Функция ИмяПервойЯчейкиОбласти(КонтекстФормы, ОбластьДокумента)
	
	Если ТипЗнч(ОбластьДокумента) = Тип("РисунокТабличногоДокумента") Тогда
		ИмяБазовойОбласти = ОбластьДокумента.Имя;
	Иначе
		Если ОбластьДокумента.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			// Передаем имя в 2 колонке верхней ячейки выбранной области
			ИмяБазовойОбласти = КонтекстФормы.ТабличныйДокумент.Область(ОбластьДокумента.Верх, 2, ОбластьДокумента.Верх, 2).Имя;
		ИначеЕсли ОбластьДокумента.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ИмяБазовойОбласти = КонтекстФормы.ТабличныйДокумент.Область(ОбластьДокумента.Верх, 2, ОбластьДокумента.Верх, 2).Имя;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(ИмяБазовойОбласти, "ДСПМs") Тогда
		ИмяПервойЯчейкиСтрокиОбласти = Сред(ИмяБазовойОбласти, 4);
	ИначеЕсли СтрНайти(ИмяБазовойОбласти, "УСПМs") Тогда
		ИмяПервойЯчейкиСтрокиОбласти = Сред(ИмяБазовойОбласти, 4);
	ИначеЕсли СтрНайти(ИмяБазовойОбласти, "ДЗПМs")
		  ИЛИ СтрНайти(ИмяБазовойОбласти, "ДГПМs") Тогда
		ИмяПервойЯчейкиСтрокиОбласти = Сред(ИмяБазовойОбласти, 4) + "_1";
	Иначе
		ИмяПервойЯчейкиСтрокиОбласти = КонтекстФормы.ТабличныйДокумент.Область(ОбластьДокумента.Верх, 2, ОбластьДокумента.Верх, 2).Имя;
	КонецЕсли;
	
	Возврат ИмяПервойЯчейкиСтрокиОбласти;
	
КонецФункции

Процедура СпециальногоУдаленияСтроки(КонтекстФормы, ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти, НомерУдаляемойСтроки, КолСтрокРаздела)
	
	МассивИменОбластей = Новый Массив;
	УдаляемаяОбластьТаблДок = ТекТабличноеПоле.ПолучитьОбласть(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Для каждого ИменованнаяОбласть Из УдаляемаяОбластьТаблДок.Области Цикл
		Если ТипЗнч(ИменованнаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		МассивИменОбластей.Добавить(Лев(ИменованнаяОбласть.Имя, СтрНайти(ИменованнаяОбласть.Имя, "_") - 1));
	КонецЦикла;
	
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомерСтроки = НомерУдаляемойСтроки + 1 По КолСтрокРаздела Цикл
		Для каждого ИмяОбластиБезИндекса Из МассивИменОбластей Цикл
			
			СтароеИмяЯчейки = ИмяОбластиБезИндекса + "_" + Формат(НомерСтроки, "ЧГ=0");
			НовоеИмяЯчейки = ИмяОбластиБезИндекса + "_" + Формат(НомерСтроки - 1, "ЧГ=0");
			
			НайденнаяОбласть = ТекТабличноеПоле.Области.Найти(СтароеИмяЯчейки);
			Если НайденнаяОбласть <> Неопределено Тогда
				НайденнаяОбласть.Имя = НовоеИмяЯчейки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДополнительнуюСтроку(КонтекстФормы, ИмяПервойЯчейкиСтроки)
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	ТекТабличноеПоле = КонтекстФормы[ТекТабличноеПолеИмя];
	
	НомерУдаляемойСтроки = 0;
	ИмяПервойЯчейкиСтрокиБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(ИмяПервойЯчейкиСтроки, НомерУдаляемойСтроки);
	
	// определяем количество строк в многострочном разделе
	КолСтрокРаздела = НомерУдаляемойСтроки;
	КолСтрокСтр1 = Формат(КолСтрокРаздела + 1, "ЧГ=0");
	Пока ТекТабличноеПоле.Области.Найти(ИмяПервойЯчейкиСтрокиБезИндекса + "_" + КолСтрокСтр1) <> Неопределено Цикл
		КолСтрокРаздела = КолСтрокРаздела + 1;
		КолСтрокСтр1 = Формат(КолСтрокРаздела + 1, "ЧГ=0");
	КонецЦикла;
	
	// область первой ячейки удаляемой строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиСтроки];
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	
	КонтекстФормы.СтруктураДанныхОтчета  = КонтекстФормы["СтруктураДанныхОтчета"];
	КонтекстФормы.СтруктураОписанийЯчеек = КонтекстФормы["СтруктураОписанийЯчеек"];
	
	МассивИменПоказателей = Новый Массив;
	
	Для НомСтроки = НомерВерхЯчейкиОбласти По НомерНижнЯчейкиОбласти Цикл
		Для НомКолонки = 2 По ТекТабличноеПоле.ШиринаТаблицы - 1 Цикл // без первой и последней колонок
			
			ТекОбласть = ТекТабличноеПоле.Область(НомСтроки, НомКолонки, НомСтроки, НомКолонки);
			ИмяТекОбласти = ТекОбласть.Имя;
			ПозРазделителя = СтрНайти(ИмяТекОбласти, "_");
			
			Если ПозРазделителя > 0 И НЕ ТекОбласть.Защита Тогда
				
				МассивИменПоказателей.Добавить(Лев(ИмяТекОбласти, ПозРазделителя - 1));
				
				Если КолСтрокРаздела = 1 Тогда // единственную строку раздела только очищаем
					
					ТекОбласть.Значение = ТекОбласть.ТипЗначения.ПривестиЗначение();
					КонтекстФормы.СтруктураДанныхОтчета.Вставить(ИмяТекОбласти, ТекОбласть.Значение);
					КонтекстФормы.СтруктураДанныхОтчета.Вставить("ПР" + ИмяТекОбласти, "");
					Если ТипЗнч(ТекОбласть.Значение) = Тип("Число") Тогда
						ФорматПредставленияНуля = "ЧН=' '";
						ТекОбласть.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ТекОбласть.Формат, ФорматПредставленияНуля);
						КонтекстФормы.СтруктураДанныхОтчета.Вставить("ЧН" + ИмяТекОбласти, ФорматПредставленияНуля);
					КонецЕсли;
					
					ПараметрыОбласти = Неопределено;
					Если КонтекстФормы.СтруктураОписанийЯчеек.Свойство(Лев(ИмяТекОбласти, ПозРазделителя - 1), ПараметрыОбласти) Тогда
						Если ПараметрыОбласти["inputType"] <> 0 Тогда
							ИмяОпцийСтроки = Неопределено;
							Если ПараметрыОбласти.Свойство("grv", ИмяОпцийСтроки) И ЗначениеЗаполнено(ИмяОпцийСтроки) Тогда
								СтруктураОпцийСтроки = Неопределено;
								Если КонтекстФормы.СтруктураОписанийЯчеек.Свойство(ИмяОпцийСтроки, СтруктураОпцийСтроки) И ТипЗнч(СтруктураОпцийСтроки) = Тип("Структура") Тогда
									УстановитьПредставлениеКлючевыхЯчеек(КонтекстФормы, СтруктураОпцийСтроки, 1);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если КолСтрокРаздела > 1 Тогда
		
		СпециальногоУдаленияСтроки(КонтекстФормы, ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти, НомерУдаляемойСтроки, КолСтрокРаздела);
		КонтекстФормы[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		// Переназначим имена в структуре данных отчета
		Для НомерСтроки = НомерУдаляемойСтроки По КолСтрокРаздела Цикл
			Для каждого ИмяПоказателяБезИндекса Из МассивИменПоказателей Цикл
				
				НовоеИмя  = ИмяПоказателяБезИндекса + "_" + Формат(НомерСтроки, "ЧГ=0");
				СтароеИмя = ИмяПоказателяБезИндекса + "_" + Формат(НомерСтроки + 1, "ЧГ=0");
				
				Если КонтекстФормы.СтруктураДанныхОтчета.Свойство(НовоеИмя) Тогда
					КонтекстФормы.СтруктураДанныхОтчета.Удалить(НовоеИмя);
					Если КонтекстФормы.СтруктураДанныхОтчета.Свойство("ЧН" + НовоеИмя) Тогда
						КонтекстФормы.СтруктураДанныхОтчета.Удалить("ЧН" + НовоеИмя);
					КонецЕсли;
				КонецЕсли;
				
				ЗначениеПоказателя = Неопределено;
				Если КонтекстФормы.СтруктураДанныхОтчета.Свойство(СтароеИмя, ЗначениеПоказателя) Тогда
					КонтекстФормы.СтруктураДанныхОтчета.Удалить(СтароеИмя);
					КонтекстФормы.СтруктураДанныхОтчета.Вставить(НовоеИмя, ЗначениеПоказателя);
					ЗначениеФормата = Неопределено;
					Если КонтекстФормы.СтруктураДанныхОтчета.Свойство("ЧН" + СтароеИмя, ЗначениеФормата) Тогда
						КонтекстФормы.СтруктураДанныхОтчета.Удалить("ЧН" + СтароеИмя);
						КонтекстФормы.СтруктураДанныхОтчета.Вставить("ЧН" + НовоеИмя, ЗначениеФормата);
					КонецЕсли;
					ЗначениеПредставления = Неопределено;
					Если КонтекстФормы.СтруктураДанныхОтчета.Свойство("ПР" + СтароеИмя, ЗначениеПредставления) Тогда
						КонтекстФормы.СтруктураДанныхОтчета.Удалить("ПР" + СтароеИмя);
						КонтекстФормы.СтруктураДанныхОтчета.Вставить("ПР" + НовоеИмя, ЗначениеПредставления);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// определяем текущую область таблицы
	СтрНомТекущейСтроки  = Формат(Макс(1, Мин(КолСтрокРаздела - 1, НомерУдаляемойСтроки)), "ЧГ=");
	Если МассивИменПоказателей.Количество() > 0 Тогда
		ИмяТекущейОбласти = МассивИменПоказателей[0] + "_" + СтрНомТекущейСтроки;
	Иначе
		ИмяТекущейОбласти = ИмяПервойЯчейкиСтрокиБезИндекса + "_" + СтрНомТекущейСтроки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьТабличноеПоле(КонтекстФормы, ВыбТабличноеПолеИмя)
	
	Перем СписокПоказателейНеПодлежащихОчистке;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить(КонтекстФормы.СтруктураАтрибутовОтчета["obj"]);
	СписокПоказателейНеПодлежащихОчистке.Добавить("name");
	СписокПоказателейНеПодлежащихОчистке.Добавить("leader_fio");
	СписокПоказателейНеПодлежащихОчистке.Добавить("responsible_post");
	СписокПоказателейНеПодлежащихОчистке.Добавить("responsible_fio");
	СписокПоказателейНеПодлежащихОчистке.Добавить("phone");
	
	СписокПоказателейНеПодлежащихОчистке.Добавить("okfs");
	СписокПоказателейНеПодлежащихОчистке.Добавить("okved");
	СписокПоказателейНеПодлежащихОчистке.Добавить("org_adress");
	СписокПоказателейНеПодлежащихОчистке.Добавить("org_type");
	СписокПоказателейНеПодлежащихОчистке.Добавить("stroyka");
	СписокПоказателейНеПодлежащихОчистке.Добавить("document_cretaion_date");
	
	ПозицияПервогоМнПоказателяВСтроке = Новый Соответствие;
	МинИндексыМнПоказателейВГруппе    = Новый Соответствие;
	
	ВыбТабличноеПоле = КонтекстФормы["ТабличныйДокумент"];
	
	ТабличноеПолеРаздела = Неопределено;
	
	РазделМногострочный = Ложь;
	ИдЭлементаРаздела = ИдентификаторЭлементаСпискаФормПоПредставлениюУниверсальногоОтчета(КонтекстФормы, ВыбТабличноеПолеИмя);
	Если ИдЭлементаРаздела <> Неопределено Тогда
		ЭлементРаздела = КонтекстФормы.СтруктураРеквизитовФормы.СписокФормРазделов.НайтиПоИдентификатору(ИдЭлементаРаздела);
		РазделМногострочный = ЭлементРаздела.Пометка;
		ТабличноеПолеРаздела = ЭлементРаздела.Значение;
	КонецЕсли; 
	
	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		// Ячейки не подлежащие очистке
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") И НЕ ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
		КонтекстФормы.СтруктураДанныхОтчета.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		Если ТипЗнч(ТекущаяОбласть.Значение) = Тип("Число") Тогда
			ТекущаяОбласть.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ТекущаяОбласть.Формат, "ЧН=' '");
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(ТекущаяОбласть.Формат);
			КонтекстФормы.СтруктураДанныхОтчета.Вставить("ЧН" + ТекущаяОбласть.Имя, ФорматПредставленияНуля);
		КонецЕсли;
		Если КонтекстФормы.СтруктураДанныхОтчета.Свойство("ПР" + ТекущаяОбласть.Имя) Тогда
			КонтекстФормы.СтруктураДанныхОтчета.Удалить("ПР" + ТекущаяОбласть.Имя);
		КонецЕсли;
		
		Если РазделМногострочный Тогда
			Если СтрНайти(ТекущаяОбласть.Имя, "_") > 0 Тогда
				НомерКолонкиПоказателя = ПозицияПервогоМнПоказателяВСтроке[ТекущаяОбласть.Верх];
				Если НомерКолонкиПоказателя = Неопределено Тогда
					ПозицияПервогоМнПоказателяВСтроке.Вставить(ТекущаяОбласть.Верх, ТекущаяОбласть.Лево);
				Иначе
					ПозицияПервогоМнПоказателяВСтроке.Вставить(ТекущаяОбласть.Верх, Мин(ТекущаяОбласть.Лево, НомерКолонкиПоказателя));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим дополнительные строки многострочного раздела, если есть
	Если РазделМногострочный Тогда
		
		Для каждого ЭлементПозицииПоказателя Из ПозицияПервогоМнПоказателяВСтроке Цикл
			ИндексПоказателя = 0;
			ИмяПоказателя = ВыбТабличноеПоле.Область(ЭлементПозицииПоказателя.Ключ, ЭлементПозицииПоказателя.Значение, ЭлементПозицииПоказателя.Ключ, ЭлементПозицииПоказателя.Значение).Имя;
			ИмяПоказателяБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(ИмяПоказателя, ИндексПоказателя);
			
			ИндексПредыдущегоПоказателя = МинИндексыМнПоказателейВГруппе[ИмяПоказателяБезИндекса];
			Если ИндексПредыдущегоПоказателя = Неопределено Тогда
				МинИндексыМнПоказателейВГруппе.Вставить(ИмяПоказателяБезИндекса, ИндексПоказателя);
			Иначе
				МинИндексыМнПоказателейВГруппе.Вставить(ИмяПоказателяБезИндекса, Мин(ИндексПоказателя, ИндексПредыдущегоПоказателя));
			КонецЕсли;
		КонецЦикла; 
		
		Для каждого ЭлементПоказателяВГруппе Из МинИндексыМнПоказателейВГруппе Цикл
			ИндексПоказателя = ЭлементПоказателяВГруппе.Значение;
			
			ИмяОпцийСтроки = Лев(ЭлементПоказателяВГруппе.Ключ, СтрНайти(ЭлементПоказателяВГруппе.Ключ, "c"));
			СтруктураОпцийСтроки = Неопределено;
			Если КонтекстФормы.СтруктураОписанийЯчеек.Свойство(ИмяОпцийСтроки, СтруктураОпцийСтроки) И ТипЗнч(СтруктураОпцийСтроки) = Тип("Структура") Тогда
				УстановитьПредставлениеКлючевыхЯчеек(КонтекстФормы, СтруктураОпцийСтроки, ИндексПоказателя);
			КонецЕсли;
			
			ИмяПоказателяТекСтроки  = ЭлементПоказателяВГруппе.Ключ + "_" + Формат(ИндексПоказателя, "ЧГ=");
			ИмяПоказателяСледСтроки = ЭлементПоказателяВГруппе.Ключ + "_" + Формат(ИндексПоказателя + 1, "ЧГ=");
			Пока ВыбТабличноеПоле.Области.Найти(ИмяПоказателяСледСтроки) <> Неопределено Цикл
				
				УдалитьДополнительнуюСтроку(КонтекстФормы, ИмяПервойЯчейкиОбласти(КонтекстФормы, ВыбТабличноеПоле.Области[ИмяПоказателяСледСтроки]));
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТабличноеПолеРаздела <> Неопределено Тогда
		ТабличноеПолеРаздела.Очистить();
		ТабличноеПолеРаздела.Вывести(ВыбТабличноеПоле);
	КонецЕсли;
	
	ИмяСтраницыПанели = ВыбТабличноеПолеИмя;
	
	Расчет(КонтекстФормы, ИмяСтраницыПанели);
	
КонецПроцедуры

Процедура ОчиститьОбласть(КонтекстФормы, ИмяСтраницы, ИмяОбласти)
	
	ОчищаемаяОбласть = КонтекстФормы.ТабличныйДокумент.Области.Найти(ИмяОбласти);
	
	Если ОчищаемаяОбласть <> Неопределено Тогда
		
		ОчищаемаяОбласть.Очистить();
		Если ОчищаемаяОбласть.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			ОчищаемаяОбласть.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ОчищаемаяОбласть.Формат, "ЧН=' '");
			КонтекстФормы.СтруктураДанныхОтчета.Вставить("ЧН" + ИмяОбласти, "ЧН=' '");
		КонецЕсли; 
		КонтекстФормы.СтруктураДанныхОтчета.Вставить(ИмяОбласти, ОчищаемаяОбласть.Значение);
		Если КонтекстФормы.СтруктураДанныхОтчета.Свойство("ПР" + ИмяОбласти) Тогда
			КонтекстФормы.СтруктураДанныхОтчета.Вставить("ПР" + ИмяОбласти, "");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Расчет(КонтекстФормы, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	
	Если ИмяТекущейСтраницы = "" ИЛИ ОбластьИмя = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницы <> "ОбщаяИнформация" Тогда
		
		ИндексОбласти = 0;
		ИмяОбластиБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(ОбластьИмя, ИндексОбласти);
		
		ДопПараметрыОбласти = Неопределено;
		Если КонтекстФормы.СтруктураОписанийЯчеек.Свойство(ИмяОбластиБезИндекса, ДопПараметрыОбласти) Тогда
			
			// Очистим зависимые от текущей ячейки, если указаны
			МассивЗависимыхЯчеек = Неопределено;
			Если ДопПараметрыОбласти.Свойство("refs", МассивЗависимыхЯчеек) И ТипЗнч(МассивЗависимыхЯчеек) = Тип("Массив") Тогда
				Для каждого ИмяЗависимойЯчейки Из МассивЗависимыхЯчеек Цикл
					Если Лев(ИмяЗависимойЯчейки, 2) = "ПМ" Тогда
						Если ИндексОбласти = 0 Тогда
							ИндексОчищаемойОбласти = 1;
							ИмяОчищаемойОбласти = ИмяЗависимойЯчейки + "_1";
							Пока КонтекстФормы.СтруктураДанныхОтчета.Свойство(ИмяОчищаемойОбласти) Цикл
								ОчиститьОбласть(КонтекстФормы, ИмяТекущейСтраницы, ИмяОчищаемойОбласти);
								ИндексОчищаемойОбласти = ИндексОчищаемойОбласти + 1;
								ИмяОчищаемойОбласти = ИмяЗависимойЯчейки + "_" + Формат(ИндексОчищаемойОбласти, "ЧГ=");
							КонецЦикла; 
						Иначе
							ОчиститьОбласть(КонтекстФормы, ИмяТекущейСтраницы, ИмяЗависимойЯчейки + "_" + Формат(ИндексОбласти, "ЧГ="));
						КонецЕсли;
					Иначе
						ОчиститьОбласть(КонтекстФормы, ИмяТекущейСтраницы, ИмяЗависимойЯчейки);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Установим представление ключевых ячеек, если существуют опции для строки
			Если ИндексОбласти > 0 Тогда
				ИмяОпцийСтроки = Неопределено;
				Если ДопПараметрыОбласти.Свойство("grv", ИмяОпцийСтроки) И ЗначениеЗаполнено(ИмяОпцийСтроки) Тогда
					СтруктураОпцийСтроки = Неопределено;
					Если КонтекстФормы.СтруктураОписанийЯчеек.Свойство(ИмяОпцийСтроки, СтруктураОпцийСтроки) И ТипЗнч(СтруктураОпцийСтроки) = Тип("Структура") Тогда
						УстановитьПредставлениеКлючевыхЯчеек(КонтекстФормы, СтруктураОпцийСтроки, ИндексОбласти);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСекцию(КонтекстФормы, Код)
	РазделДляОчистки = "Раздел" + Код;
	СохранитьДанныеРаздела(КонтекстФормы, КонтекстФормы.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Для каждого ЭлементФормаРаздела Из КонтекстФормы.СтруктураРеквизитовФормы.СписокФормРазделов Цикл
		ИмяРаздела = ЭлементФормаРаздела.Представление;
		ТабДокументРаздела = ЭлементФормаРаздела.Значение;
		
		Если ИмяРаздела <> РазделДляОчистки Тогда
			Продолжить;
		КонецЕсли;
		
		КонтекстФормы.ТабличныйДокумент.Очистить();
		КонтекстФормы.ТабличныйДокумент.Вывести(ТабДокументРаздела);
		ОчиститьТабличноеПоле(КонтекстФормы, ИмяРаздела);
	КонецЦикла;
	ВывестиМакетВТаблДокНаСервере(КонтекстФормы, КонтекстФормы.СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
КонецПроцедуры

Процедура ВывестиМакетВТаблДокНаСервере(КонтекстФормы, ИмяТекРаздела, НомерСтраницыРазделаОтчета, ИдЭлементаФормыРаздела = Неопределено)
	Если НЕ ЗначениеЗаполнено(ИдЭлементаФормыРаздела) Тогда
		ИдЭлементаФормыРаздела = ИдентификаторЭлементаСпискаФормПоПредставлениюУниверсальногоОтчета(КонтекстФормы, ИмяТекРаздела);
	КонецЕсли;
	
	Если ИдЭлементаФормыРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормаРаздела = КонтекстФормы.СтруктураРеквизитовФормы.СписокФормРазделов.НайтиПоИдентификатору(ИдЭлементаФормыРаздела);
	КонтекстФормы.ТабличныйДокумент.Очистить();
	КонтекстФормы.ТабличныйДокумент.Вывести(ЭлементФормаРаздела.Значение);
КонецПроцедуры

Функция ПолучитьКодСтроки(Строка)
	Для Каждого Стр Из Строка.Строки Цикл 
		Если Стр.Код = "code" Тогда 
			Рез = "";
			Для Инд = 1 По СтрДлина(Стр.ЗначениеПоУмолчанию) Цикл 
				Элт = Сред(Стр.ЗначениеПоУмолчанию, Инд, 1);
				Если Элт >= "0" И Элт <= "9" Тогда 
					Рез = Рез + Элт;
				КонецЕсли;
			КонецЦикла;
			Возврат Рез;
		КонецЕсли;
	КонецЦикла;
	Возврат "";
КонецФункции

Функция НайтиСтрокуВЗагружаемомОтчете(СекцияИзЗагружаемогоОтчета, КодСтроки)
	Результат = Неопределено;
	Секция = СекцияИзЗагружаемогоОтчета[0];
	КоличествоНайденых = 0;
	Для Каждого Элемент Из Секция Цикл
		Аттрибуты = Элемент.Аттрибуты;
		Если УбратьЛидирующиеНули(Аттрибуты["code"]) = УбратьЛидирующиеНули(КодСтроки) Тогда 
			Результат = Элемент.Колонки;
			КоличествоНайденых = КоличествоНайденых + 1;
		КонецЕсли;
	КонецЦикла;
	Если КоличествоНайденых > 1 Тогда 
		ВызватьИсключение "Не соответствует формату";
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ЗагрузитьПростуюСтроку(КонтекстФормы, СекцияИзЗагружаемогоОтчета, Строка, КодСтроки, ТабДок)
	Данные = НайтиСтрокуВЗагружаемомОтчете(СекцияИзЗагружаемогоОтчета, КодСтроки);
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Строка.Строки Цикл 
		Если "col" <> Стр.Код Или Стр.Строки.Количество() <> 1 Или "code" <> Стр.Строки[0].Код Тогда 
			Продолжить;
		КонецЕсли;
		
		Ключ = Стр.Ключ;
		Если Не ЗначениеЗаполнено(Ключ) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗначениеПоУмолчанию = СокрЛП(Стр.Строки[0].ЗначениеПоУмолчанию);
		Для Каждого Элемент Из Данные Цикл
			Если СокрЛП(Элемент.КодКолонки) = ЗначениеПоУмолчанию Тогда 
				Обл = ТабДок.Области.Найти(Ключ);
				Если Обл <> Неопределено И Обл.СодержитЗначение = Истина И Обл.Защита = Ложь Тогда 
					Обл.Значение = Элемент.ЗначениеКолонки;
					КонтекстФормы.СтруктураДанныхОтчета.Вставить(Ключ, Элемент.ЗначениеКолонки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ИмяПервойЯчейкиОбластиДляЗаполнения(ТабДок, ОбластьДокумента)
	
	Если ТипЗнч(ОбластьДокумента) = Тип("РисунокТабличногоДокумента") Тогда
		ИмяБазовойОбласти = ОбластьДокумента.Имя;
	Иначе
		Если ОбластьДокумента.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			// Передаем имя в 2 колонке верхней ячейки выбранной области
			ИмяБазовойОбласти = ТабДок.Область(ОбластьДокумента.Верх, 2, ОбластьДокумента.Верх, 2).Имя;
		ИначеЕсли ОбластьДокумента.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ИмяБазовойОбласти = ТабДок.Область(ОбластьДокумента.Верх, 2, ОбластьДокумента.Верх, 2).Имя;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(ИмяБазовойОбласти, "ДСПМs") Тогда
		ИмяПервойЯчейкиСтрокиОбласти = Сред(ИмяБазовойОбласти, 4);
	ИначеЕсли СтрНайти(ИмяБазовойОбласти, "УСПМs") Тогда
		ИмяПервойЯчейкиСтрокиОбласти = Сред(ИмяБазовойОбласти, 4);
	ИначеЕсли СтрНайти(ИмяБазовойОбласти, "ДЗПМs")
		  ИЛИ СтрНайти(ИмяБазовойОбласти, "ДГПМs") Тогда
		ИмяПервойЯчейкиСтрокиОбласти = Сред(ИмяБазовойОбласти, 4) + "_1";
	Иначе
		ИмяПервойЯчейкиСтрокиОбласти = ТабДок.Область(ОбластьДокумента.Верх, 2, ОбластьДокумента.Верх, 2).Имя;
	КонецЕсли;
	
	Возврат ИмяПервойЯчейкиСтрокиОбласти;
	
КонецФункции

Процедура СпециальногоДобавленияСтроки(КонтекстФормы, ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	
	ВставляемаяОбластьТаблДок = ТекТабличноеПоле.ПолучитьОбласть(НомерВерхЯчейкиОбласти, , НомерВерхЯчейкиОбласти, );
	
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для каждого ТекОбласть Из ВставляемаяОбластьТаблДок.Области Цикл
		
		ИмяОбласти = ТекОбласть.Имя;
		ПозРазделителя = СтрНайти(ИмяОбласти, "_");
		
		Если ПозРазделителя > 0 Тогда
			
			ИмяЯчейкиОбластиБезИндекса = Лев(ИмяОбласти, ПозРазделителя - 1);
			ИндексСтроки = Число(СтрЗаменить(ИмяОбласти, ИмяЯчейкиОбластиБезИндекса + "_", ""));
			НовоеИмяОбласти = ИмяЯчейкиОбластиБезИндекса + "_" + Формат(ИндексСтроки + 1, "ЧГ=0");
			
			Если ТипЗнч(ТекОбласть) = Тип("РисунокТабличногоДокумента") Тогда
				Продолжить;
			Иначе
				ОбластьЯчейкиНовойСтроки = ТекТабличноеПоле.Области[ИмяОбласти];
				Если ОбластьЯчейкиНовойСтроки.СодержитЗначение И НЕ ОбластьЯчейкиНовойСтроки.Защита Тогда
					Если ОбластьЯчейкиНовойСтроки.ТипЗначения.СодержитТип(Тип("Число")) Тогда
						ОбластьЯчейкиНовойСтроки.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьЯчейкиНовойСтроки.Формат, "ЧН=' '");
					КонецЕсли;
				КонецЕсли;
				ОбластьЯчейкиНовойСтроки.Имя = НовоеИмяОбласти;
				НомерВерхнейЯчейкиОбласти = НомерВерхЯчейкиОбласти + ТекОбласть.Верх - 1;
				ТекТабличноеПоле.Область(НомерВерхнейЯчейкиОбласти, ТекОбласть.Лево, НомерВерхнейЯчейкиОбласти, ТекОбласть.Лево).Имя = ИмяОбласти;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДополнительнуюСтроку(КонтекстФормы, ИмяПервойЯчейкиСтроки, ТабДок = Неопределено)
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	Если ТабДок = Неопределено Тогда 
		ТекТабличноеПоле = КонтекстФормы[ТекТабличноеПолеИмя];
	Иначе
		ТекТабличноеПоле = ТабДок;
	КонецЕсли;
	
	ПерваяЯчейкаСтроки = Неопределено;
	
	Если ЗначениеЗаполнено(ИмяПервойЯчейкиСтроки) Тогда
		
		ПерваяЯчейкаСтроки = ТекТабличноеПоле.Области.Найти(ИмяПервойЯчейкиСтроки);
		
	КонецЕсли;
	
	Если (ПерваяЯчейкаСтроки = Неопределено) ИЛИ (СтрНайти(ИмяПервойЯчейкиСтроки, "_") = 0) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ИндексСтроки = 0;
	ИмяПервойЯчейкиСтрокиБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(ИмяПервойЯчейкиСтроки, ИндексСтроки);
	
	// определяем последнюю строку многострочного раздела
	КолСтрок = ИндексСтроки;
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейкиСтроки;
	Пока ТекТабличноеПоле.Области.Найти(ИмяПервойЯчейкиСтрокиБезИндекса + "_" + КолСтрокСтр1) <> Неопределено Цикл
		ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейкиСтрокиБезИндекса + "_" + КолСтрокСтр1;
		КолСтрок = КолСтрок + 1;
		КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	КонецЦикла;
	
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// номера строк вставленной области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	СпециальногоДобавленияСтроки(КонтекстФормы, ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Если ТабДок = Неопределено Тогда 
		КонтекстФормы[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	КонецЕсли;
	
	СтруктураДанныхОтчета  = КонтекстФормы["СтруктураДанныхОтчета"];
	СтруктураОписанийЯчеек = КонтекстФормы["СтруктураОписанийЯчеек"];
	
	ИмяПервойЯчейкиНовойОбл = ИмяПервойЯчейкиСтрокиБезИндекса + "_" + КолСтрокСтр1;
	
	ЭтоПерваяРедактируемаяЯчейка = Истина;
	Для НомСтрокиНовОбл = НомерВерхЯчейкиНовойОбласти По НомерНижнЯчейкиНовойОбласти Цикл
		Для НомКолонкиНовОбл = 1 По ТекТабличноеПоле.ШиринаТаблицы Цикл
			
			ТекОбласть = ТекТабличноеПоле.Область(НомСтрокиНовОбл, НомКолонкиНовОбл, НомСтрокиНовОбл, НомКолонкиНовОбл);
			ИмяОбласти = ТекОбласть.Имя;
			Если СтрНайти(ИмяОбласти, "_") > 0 Тогда
				Если ТекОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
				Если ЭтоПерваяРедактируемаяЯчейка Тогда
					ИмяПервойЯчейкиНовойОбл = ИмяОбласти;
					ЭтоПерваяРедактируемаяЯчейка = Ложь;
				КонецЕсли;
				// Если есть значение для области в структуре данных отчета - установим значение.
				ЗначениеДанныхОтчета = Неопределено;
				Если СтруктураДанныхОтчета.Свойство(ИмяОбласти, ЗначениеДанныхОтчета) Тогда
					ТекОбласть.Значение = ЗначениеДанныхОтчета;
					ЗначениеФорматаОбласти = Неопределено;
					Если СтруктураДанныхОтчета.Свойство("ЧН" + ИмяОбласти, ЗначениеФорматаОбласти) Тогда
						ТекОбласть.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ТекОбласть.Формат, ЗначениеФорматаОбласти);
					КонецЕсли;
				Иначе
					ТекОбласть.Значение = ТекОбласть.ТипЗначения.ПривестиЗначение();
					СтруктураДанныхОтчета.Вставить(ИмяОбласти, ТекОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ИмяОпцийСтроки = Лев(ИмяПервойЯчейкиСтрокиБезИндекса, СтрНайти(ИмяПервойЯчейкиСтрокиБезИндекса, "c"));
	СтруктураОпцийСтроки = Неопределено;
	Если СтруктураОписанийЯчеек.Свойство(ИмяОпцийСтроки, СтруктураОпцийСтроки) И ТипЗнч(СтруктураОпцийСтроки) = Тип("Структура") Тогда
		УстановитьПредставлениеКлючевыхЯчеек(КонтекстФормы, СтруктураОпцийСтроки, КолСтрок + 1, ТабДок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьМногострочнуюСтроку(КонтекстФормы, СекцияИзЗагружаемогоОтчета, Строка, КодСтроки, ТабДок)
	Индекс = 0;
	Данные = СекцияИзЗагружаемогоОтчета[0];
	МассивСтрок = Новый Массив;
	Для Каждого Элемент Из Данные Цикл
		Аттрибуты = Элемент.Аттрибуты;
		Если УбратьЛидирующиеНули(Аттрибуты["code"]) = УбратьЛидирующиеНули(КодСтроки) Тогда 
			МассивСтрок.Вставить(Индекс, Элемент);
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Индекс = 0 Тогда 
		Возврат;
	ИначеЕсли Индекс > 1 Тогда 
		ИмяПервойЯчейкиСтроки = "";
		Для Каждого Стр Из Строка.Строки Цикл
			Ключ = Стр.Ключ;
			Если ЗначениеЗаполнено(Ключ) Тогда
				Обл = ТабДок.Области.Найти(Ключ + "_1");
				Если Обл <> Неопределено Тогда 
					ИмяПервойЯчейкиСтроки = ИмяПервойЯчейкиОбластиДляЗаполнения(ТабДок, Обл);
					Если ЗначениеЗаполнено(ИмяПервойЯчейкиСтроки) Тогда 
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяПервойЯчейкиСтроки) Тогда 
			Для Ном = 2 По Индекс Цикл
				ДобавитьДополнительнуюСтроку(КонтекстФормы, ИмяПервойЯчейкиСтроки, ТабДок);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	НомСтр = 0;
	Пока НомСтр < Индекс Цикл
		Данные = МассивСтрок[НомСтр];
		Постфикс = "_" + Формат((НомСтр+1), "ЧГ=;ЧН=");
		Для Каждого Стр Из Строка.Строки Цикл
			Если Данные.Аттрибуты[Стр.Код] <> Неопределено Тогда
				Ключ = Стр.Ключ;
				Если ЗначениеЗаполнено(Ключ) Тогда
					Обл = ТабДок.Области.Найти(Ключ + Постфикс);
					Если Обл <> Неопределено И Обл.СодержитЗначение = Истина И Обл.Защита = Ложь Тогда 
						Обл.Значение = Данные.Аттрибуты[Стр.Код];
						КонтекстФормы.СтруктураДанныхОтчета.Вставить(Ключ + Постфикс, Данные.Аттрибуты[Стр.Код]);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли "col" = Стр.Код И "code" = Стр.Строки[0].Код Тогда 
				Для Каждого Колонка Из Данные.Колонки Цикл 
					Если Колонка.КодКолонки = Стр.Строки[0].ЗначениеПоУмолчанию И ЗначениеЗаполнено(Стр.Ключ) Тогда
						Обл = ТабДок.Области.Найти(Стр.Ключ + Постфикс);
						Если Обл <> Неопределено И Обл.СодержитЗначение = Истина И Обл.Защита = Ложь Тогда 
							Обл.Значение = Колонка.ЗначениеКолонки;
							КонтекстФормы.СтруктураДанныхОтчета.Вставить(Стр.Ключ + Постфикс, Колонка.ЗначениеКолонки);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		НомСтр = НомСтр + 1;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьСекцию(КонтекстФормы, СекцияИзЗагружаемогоОтчета, Секция, Код)
	
	ИдЭлементаФормыРаздела = ИдентификаторЭлементаСпискаФормПоПредставлениюУниверсальногоОтчета(КонтекстФормы, "Раздел" + Код);
	Если ИдЭлементаФормыРаздела = Неопределено Тогда 
		ВызватьИсключение "Не найден раздел " + Код;
	КонецЕсли;
	ЭлементФормаРаздела = КонтекстФормы.СтруктураРеквизитовФормы.СписокФормРазделов.НайтиПоИдентификатору(ИдЭлементаФормыРаздела);
	ТабДок = ЭлементФормаРаздела.Значение;
	
	Для Каждого Строка Из Секция.Строки Цикл 
		Если Нрег(Строка.Код) <> "row" Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Врег(Строка.Тип) <> "С" И Врег(Строка.Тип) <> "C" Тогда 
			Продолжить;
		КонецЕсли;
		
		КодСтроки = ПолучитьКодСтроки(Строка);
		Если Не ЗначениеЗаполнено(КодСтроки) Тогда 
			ВызватьИсключение "Не удалось получить код строки";
		КонецЕсли;
		
		Если Строка.Многострочность Тогда
			ЗагрузитьМногострочнуюСтроку(КонтекстФормы, СекцияИзЗагружаемогоОтчета, Строка, КодСтроки, ТабДок);
		Иначе
			ЗагрузитьПростуюСтроку(КонтекстФормы, СекцияИзЗагружаемогоОтчета, Строка, КодСтроки, ТабДок);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Обл Из ТабДок.Области Цикл 
		ИндексОбласти = 0;
		ДопПараметрыОбласти = Неопределено;
		ИмяОбластиБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(Обл.Имя, ИндексОбласти);
		Если КонтекстФормы.СтруктураОписанийЯчеек.Свойство(ИмяОбластиБезИндекса, ДопПараметрыОбласти) 
				И ДопПараметрыОбласти["inputType"] <> 0
				И ДопПараметрыОбласти["vldType"] <> 0 Тогда
				
				ИндПоказателя = 0;
				ИмяПоказателяБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(Обл.Имя, ИндПоказателя);
				
				ИмяСправочника  = "";
				ИмяПриложения   = "";
				ЗначениеФильтра = "";
				
				НомерРаздела = 0;
				НомерСтроки  = 0;
				КодСтолбца   = "";
				
				Если ДопПараметрыОбласти["vldType"] = 1 Тогда
					ИмяСправочника = ДопПараметрыОбласти["dic"];
				ИначеЕсли ДопПараметрыОбласти["vldType"] = 2 Тогда
					Возврат;
				ИначеЕсли ДопПараметрыОбласти["vldType"] = 3 Тогда 
					Возврат;
				ИначеЕсли ДопПараметрыОбласти["vldType"] = 4 Тогда
					ИмяСправочника = ДопПараметрыОбласти["dic"];
					ИмяПриложения = ДопПараметрыОбласти["vld"];
				ИначеЕсли ДопПараметрыОбласти["vldType"] = 5 Тогда 
					ИмяСправочника = ДопПараметрыОбласти["dic"];
					ПозАдреса = СтрНайти(ДопПараметрыОбласти["vld"], "#");
					Если ПозАдреса > 0 Тогда
						ПолеФильтра     = Лев(ДопПараметрыОбласти["vld"], ПозАдреса - 1);
						АдресИзСсылки   = Сред(ДопПараметрыОбласти["vld"], ПозАдреса + 1);
						ЗначениеОбласти = ЗначениеОбластиПоАдресуИзСсылки(КонтекстФормы, АдресИзСсылки, ИндПоказателя, , НомерРаздела, НомерСтроки, КодСтолбца);
						ЗначениеФильтра = ПолеФильтра + ЗначениеОбласти;
					КонецЕсли;
				КонецЕсли;
				
				ТаблицаВыбора = КонтекстФормы.ТаблицаЗначений;
				ТаблицаВыбора.Очистить();
				СтрокиСправочников = КонтекстФормы.ТаблицаСправочников.НайтиСтроки(Новый Структура("Идентификатор", ИмяСправочника));
				Если СтрокиСправочников.Количество() = 0 ИЛИ СтрокиСправочников[0].Пустой Тогда
					Возврат;
				КонецЕсли;
				
				ТаблицаЭлементовСправочника = СтрокиСправочников[0].ТаблицаЭлементовСправочника;
				ТаблицаЭлементовПриложения = Неопределено;
				Если ЗначениеЗаполнено(ИмяПриложения) Тогда
					СтрокиПриложений = КонтекстФормы.ТаблицаСправочников.НайтиСтроки(Новый Структура("Идентификатор", ИмяПриложения));
					Если СтрокиПриложений.Количество() > 0 И СтрокиПриложений[0].ИдентификаторРодителя = ИмяСправочника Тогда
						ТаблицаЭлементовПриложения = СтрокиПриложений[0].ТаблицаЭлементовСправочника;
					КонецЕсли;
				КонецЕсли;
				
				ЗначениеФильтраУстановлено = ЗначениеЗаполнено(ЗначениеФильтра);
				КоличествоПолейКлюча = 0;
				Если ЗначениеФильтраУстановлено Тогда
					КоличествоПолейКлюча = СтрЧислоВхождений(ТаблицаЭлементовСправочника[0].СоставнойКлюч, "=");
				КонецЕсли;
				
				Если ТипЗнч(ТаблицаЭлементовСправочника) <> тип("ТаблицаЗначений") Тогда 
					Если ТаблицаЭлементовПриложения = Неопределено И КоличествоПолейКлюча = 0 Тогда
						//КопироватьДанныеФормы(ТаблицаЭлементовСправочника, ТаблицаВыбора);
						ТаблицаВыбора.Очистить();
						Для Каждого Стр Из ТаблицаЭлементовСправочника Цикл 
							ЗаполнитьЗначенияСвойств(ТаблицаВыбора.Добавить(), Стр);
						КонецЦикла;
					ИначеЕсли КоличествоПолейКлюча = 1 Тогда
						ТаблицаЭлементовСправочникаОтбор = ТаблицаЭлементовСправочника.НайтиСтроки(Новый Структура("СоставнойКлюч", ЗначениеФильтра));
						Для каждого ЭлементСправочника Из ТаблицаЭлементовСправочникаОтбор Цикл
							НовыйЭлементСправочника = ТаблицаВыбора.Добавить();
							ЗаполнитьЗначенияСвойств(НовыйЭлементСправочника, ЭлементСправочника);
						КонецЦикла;
					ИначеЕсли ТаблицаЭлементовПриложения <> Неопределено Тогда
						Для каждого ЭлементПриложения Из ТаблицаЭлементовПриложения Цикл
							Если ТипЗнч(ЭлементПриложения.ИдСтрокиРодителя) = Тип("Число") Тогда 
								ЭлементСправочника = ТаблицаЭлементовСправочника.НайтиПоИдентификатору(ЭлементПриложения.ИдСтрокиРодителя);
								Если ЭлементСправочника <> Неопределено Тогда
									НовыйЭлементСправочника = ТаблицаВыбора.Добавить();
									ЗаполнитьЗначенияСвойств(НовыйЭлементСправочника, ЭлементСправочника);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Иначе
						Для каждого ЭлементСправочника Из ТаблицаЭлементовСправочника Цикл
							Если ЗначениеФильтраУстановлено Тогда
								Если СтрНайти(ЭлементСправочника.СоставнойКлюч, ЗначениеФильтра) = 0 Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							НовыйЭлементСправочника = ТаблицаВыбора.Добавить();
							ЗаполнитьЗначенияСвойств(НовыйЭлементСправочника, ЭлементСправочника);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			
				ЗначениеПоиска = ?(ТипЗнч(Обл.Значение) = Тип("Число"), СокрЛП(Формат(Обл.Значение, "ЧГ=;" + ПолучитьПредставлениеНуляИзСтрокиФормата(Обл.Формат))), СокрЛП(Обл.Значение));
				
				ИсходнаяСтрока = ТаблицаВыбора.НайтиСтроки(Новый Структура("Код", ЗначениеПоиска));
				Если ИсходнаяСтрока.Количество() > 0 Тогда
					КонтекстФормы.СтруктураДанныхОтчета.Вставить("ПР" + Обл.Имя, ИсходнаяСтрока[0].Название);
					РасчетПриЗагрузке(КонтекстФормы, ТабДок, "Раздел" + Код, Обл.Имя);
				КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РасчетПриЗагрузке(КонтекстФормы, ТабДок, ИмяТекущейСтраницы, ОбластьИмя = "")
	ИндексОбласти = 0;
	ИмяОбластиБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(ОбластьИмя, ИндексОбласти);
	
	ДопПараметрыОбласти = Неопределено;
	Если КонтекстФормы.СтруктураОписанийЯчеек.Свойство(ИмяОбластиБезИндекса, ДопПараметрыОбласти) Тогда
		Если ИндексОбласти > 0 Тогда
			ИмяОпцийСтроки = Неопределено;
			Если ДопПараметрыОбласти.Свойство("grv", ИмяОпцийСтроки) И ЗначениеЗаполнено(ИмяОпцийСтроки) Тогда
				СтруктураОпцийСтроки = Неопределено;
				Если КонтекстФормы.СтруктураОписанийЯчеек.Свойство(ИмяОпцийСтроки, СтруктураОпцийСтроки) И ТипЗнч(СтруктураОпцийСтроки) = Тип("Структура") Тогда
					УстановитьПредставлениеКлючевыхЯчеек(КонтекстФормы, СтруктураОпцийСтроки, ИндексОбласти, ТабДок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьСтруктураДанныхОтчета(КонтекстФормы, ДеревоВыгрузки, ПараметрыSections)
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Строки = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код", "report"));
	Строки = Строки[0].Строки.НайтиСтроки(Новый Структура("Код", "sections"))[0].Строки;
	
	Для Каждого Секция Из Строки Цикл 
		Если НРег(Секция.Строки[0].Код) <> "code" Тогда 
			ВызватьИсключение "Это не отчет статистики";
		КонецЕсли;
		
		Код = Секция.Строки[0].ЗначениеПоУмолчанию;
		КодЧисло = ТипЧисло.ПривестиЗначение(Код);
		
		СекцияИзЗагружаемогоОтчета = ПараметрыSections[Код];
		ОчиститьСекцию(КонтекстФормы, Код);
		Если СекцияИзЗагружаемогоОтчета <> Неопределено Тогда
			ЗагрузитьСекцию(КонтекстФормы, СекцияИзЗагружаемогоОтчета, Секция, Код);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПоместитьДанныеВОтчет(КонтекстФормы, ПараметрыSections)
	ДеревоВыгрузки = КонтекстФормы.СхемаВыгрузкиОтчета;
	СформироватьСтруктураДанныхОтчета(КонтекстФормы, ДеревоВыгрузки, ПараметрыSections);
КонецПроцедуры

Процедура СформироватьТитульный(КонтекстФормы, ПараметрыTitle)
	Для Каждого Область Из КонтекстФормы.ТабличныйДокумент.Области Цикл
		Значение = ПараметрыTitle[Область.Имя];
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
			И Область.СодержитЗначение = Истина И Значение <> Неопределено Тогда 
			
			Область.Значение = Значение;
			КонтекстФормы.СтруктураДанныхОтчета.Вставить(Область.Имя, Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗагрузитьОтчет(КонтекстФормы, ВХ, Ошибка, ПараметрСтрокаXML = Ложь) Экспорт 
	ФайлОткрыт = Ложь;
	
	ПараметрыSections = Новый Соответствие;
	ПараметрыTitle = Новый Соответствие;
	ПараметрыReport = Новый Соответствие;
	ОшибкаЧтенияXML = Ложь;
	Попытка
		ФайлОбмена = Новый ЧтениеXML();
		Если ПараметрСтрокаXML = Истина Тогда 
			ФайлОбмена.УстановитьСтроку(ВХ);
		Иначе
			ФайлСрвДанные = ПолучитьИзВременногоХранилища(ВХ);
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ФайлСрвДанные.Записать(ИмяФайла);
			ФайлОбмена.ОткрытьФайл(ИмяФайла);
			ФайлОткрыт = Истина;
		КонецЕсли;
		ПрочитатьСекциюReport(КонтекстФормы, ФайлОбмена, ПараметрыReport);
		ПрочитатьСекциюTitle(ФайлОбмена, ПараметрыTitle);
		ПрочитатьСекциюSections(ФайлОбмена, ПараметрыSections);
		Если ФайлОткрыт Тогда 
			ФайлОбмена.Закрыть();
			Попытка
				УдалитьФайлы(ИмяФайла);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось удалить файл:" + ИмяФайла);
			КонецПопытки;
		КонецЕсли;
		
		ФайлОткрыт = Ложь;
	Исключение
		ОшибкаЧтенияXML = Истина;
		Ошибка = ИнформацияОбОшибке().Описание;
		ЗаписьЖурналаРегистрации(Ошибка);
	КонецПопытки;
	
	Если ФайлОткрыт Тогда 
		ФайлОбмена.Закрыть();
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось удалить файл:" + ИмяФайла);
		КонецПопытки;
	КонецЕсли;
	
	Если ОшибкаЧтенияXML Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ПоместитьДанныеВОтчет(КонтекстФормы, ПараметрыSections);
		СформироватьТитульный(КонтекстФормы, ПараметрыTitle);
	Исключение
		Ошибка = ИнформацияОбОшибке().Описание;
		ЗаписьЖурналаРегистрации(Ошибка);
	КонецПопытки;

	Возврат Истина;
КонецФункции
#КонецОбласти

#Область ЗагрузкаШаблона
Процедура ПодготовитьДанныеОтчетаПоШаблону(КонтекстФормы, ДанныеШаблонаОтчета, Отказ = Ложь) Экспорт 
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла("." + ДанныеШаблонаОтчета.ИмяФайлаШаблона);
	
	Попытка
		
		ДанныеШаблонаОтчета.Шаблон.Получить().Записать(ИмяВремФайла);
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось получить текст XML-шаблона:%1'"), Символы.ПС + ОписаниеОшибки());
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
		Возврат;
		
	КонецПопытки;
	
	ДокументШаблон = ЗагрузитьФайлXML(ИмяВремФайла);
	
	УдалитьФайлы(ИмяВремФайла);
	
	КорневойУзел = ДокументШаблон.ДочерниеУзлы[0]; //metaForm
	
	КонтекстФормы.СтруктураАтрибутовОтчета = Новый Структура;
	КонтекстФормы.СтруктураАтрибутовОтчета.Вставить("code",            ДанныеШаблонаОтчета.КодШаблона);
	КонтекстФормы.СтруктураАтрибутовОтчета.Вставить("idp",             ДанныеШаблонаОтчета.КодПериодичности);
	КонтекстФормы.СтруктураАтрибутовОтчета.Вставить("idf",             ДанныеШаблонаОтчета.КодФормы);
	КонтекстФормы.СтруктураАтрибутовОтчета.Вставить("shifr",           ДанныеШаблонаОтчета.Шифр);
	КонтекстФормы.СтруктураАтрибутовОтчета.Вставить("name",            ДанныеШаблонаОтчета.Наименование);
	КонтекстФормы.СтруктураАтрибутовОтчета.Вставить("OKUD",            ДанныеШаблонаОтчета.ОКУД);
	КонтекстФормы.СтруктураАтрибутовОтчета.Вставить("version",         ДанныеШаблонаОтчета.Версия);
	КонтекстФормы.СтруктураАтрибутовОтчета.Вставить("format_version",  КорневойУзел.ПолучитьАтрибут("format-version"));
	КонтекстФормы.СтруктураАтрибутовОтчета.Вставить("obj",             КорневойУзел.ПолучитьАтрибут("obj"));
	
	КонтекстФормы.СтруктураАтрибутовОтчета.Вставить("ИмяФайлаШаблона", ДанныеШаблонаОтчета.ИмяФайлаШаблона);
	
	ИмяТекущегоУзла = "settings";
	КонтекстФормы.СтруктураАтрибутовОтчета.Вставить(ИмяТекущегоУзла, Новый Структура);
	КонтекстФормы.СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Вставить("sign",       "true");
	КонтекстФормы.СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Вставить("validation", "always");
	КонтекстФормы.СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Вставить("notEmpty",   "true");
	
	УзлыНастройки = КорневойУзел.ПолучитьЭлементыПоИмени(ИмяТекущегоУзла);
	Если УзлыНастройки.Количество() > 0 Тогда
		УзлыПодписать = УзлыНастройки[0].ПолучитьЭлементыПоИмени("sign");
		Если УзлыПодписать.Количество() > 0 Тогда
			КонтекстФормы.СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Вставить("sign",       УзлыПодписать[0].ТекстовоеСодержимое);
		КонецЕсли;
		УзлыКонтроль  = УзлыНастройки[0].ПолучитьЭлементыПоИмени("validation");
		Если УзлыКонтроль.Количество() > 0 Тогда
			КонтекстФормы.СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Вставить("validation", УзлыКонтроль[0].ТекстовоеСодержимое);
		КонецЕсли;
		УзлыНеПустой  = УзлыНастройки[0].ПолучитьЭлементыПоИмени("notEmpty");
		Если УзлыНеПустой.Количество() > 0 Тогда
			КонтекстФормы.СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Вставить("notEmpty",   УзлыНеПустой[0].ТекстовоеСодержимое);
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекущегоУзла = "title";
	КонтекстФормы.СтруктураАтрибутовОтчета.Вставить(ИмяТекущегоУзла, Новый СписокЗначений);
	КонтекстФормы.СтруктураАтрибутовОтчета.Вставить("title_detail",  Новый Структура);
	
	СписокПолей = КонтекстФормы.СтруктураАтрибутовОтчета["obj"] + ", " + "name, leader_fio, responsible_post, responsible_fio, phone";
	СписокОсновныхПолей = Новый Структура(СписокПолей);
	
	УзлыОбщаяИнформация = КорневойУзел.ПолучитьЭлементыПоИмени(ИмяТекущегоУзла);
	Если УзлыОбщаяИнформация.Количество() > 0 Тогда
		УзлыОбщаяИнформацияЭлементы = УзлыОбщаяИнформация[0].ПолучитьЭлементыПоИмени("item");
		Для каждого УзелОбщаяИнформацияЭлемент Из УзлыОбщаяИнформацияЭлементы Цикл
			
			ИмяПоля = УзелОбщаяИнформацияЭлемент.ПолучитьАтрибут("field");
			ОписаниеПоля = УзелОбщаяИнформацияЭлемент.ПолучитьАтрибут("name");
			ИмяСправочника = УзелОбщаяИнформацияЭлемент.ПолучитьАтрибут("dic");
			ИмяСправочника = ?(ИмяСправочника = Неопределено, "", ИмяСправочника);
			
			КонтекстФормы.СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Добавить(ИмяПоля, ОписаниеПоля, СписокОсновныхПолей.Свойство(ИмяПоля));
			КонтекстФормы.СтруктураАтрибутовОтчета["title_detail"].Вставить(ИмяПоля, Новый Структура("dic, var", ИмяСправочника));
			
		КонецЦикла;
	КонецЕсли;
	
	КонтекстФормы.СхемаВыгрузкиОтчета.Строки.Очистить();
	
	ЭлементДереваОтчет = КонтекстФормы.СхемаВыгрузкиОтчета.Строки.Добавить();
	ЭлементДереваОтчет.Код                     = "report";
	ЭлементДереваОтчет.Тип                     = "C";
	ЭлементДереваОтчет.Обязательность          = "О";
	ЭлементДереваОтчет.Представление           = КонтекстФормы.СтруктураАтрибутовОтчета["name"];
	СформироватьАтрибутыКорневогоЭлементаСхемыВыгрузки(КонтекстФормы, ЭлементДереваОтчет);
	
	ЭлементДереваОбщаяИнформация = ЭлементДереваОтчет.Строки.Добавить();
	ЭлементДереваОбщаяИнформация.Код            = "title";
	ЭлементДереваОбщаяИнформация.Тип            = "C";
	ЭлементДереваОбщаяИнформация.Обязательность = "О";
	СформироватьЭлементыРазделаОбщаяИнформацияСхемыВыгрузки(КонтекстФормы, ЭлементДереваОбщаяИнформация);
	
	ЭлементДереваРазделыОтчета = ЭлементДереваОтчет.Строки.Добавить();
	ЭлементДереваРазделыОтчета.Код              = "sections";
	ЭлементДереваРазделыОтчета.Тип              = "C";
	ЭлементДереваРазделыОтчета.Обязательность   = "О";
	ЭлементДереваРазделыОтчета.Раздел           = "ПолеТабличногоДокумента";
	
	КонтекстФормы.СтруктураДанныхОтчета  = Новый Структура;
	КонтекстФормы.СтруктураОписанийЯчеек = Новый Структура;
	КонтекстФормы.СтруктураРеквизитовФормы.СписокФормРазделов.Очистить();
	
	ГенерироватьМакетИСтруктуруДанныхРазделаОбщаяИнформация(КонтекстФормы);
	
	КонтекстФормы.ПараметрыГрафРазделов = Новый Структура;
	
	УзлыСекции = КорневойУзел.ПолучитьЭлементыПоИмени("sections")[0].ПолучитьЭлементыПоИмени("section");
	Для каждого УзелСекция Из УзлыСекции Цикл
		ГенерироватьМакетИСтруктуруДанныхРаздела(КонтекстФормы, УзелСекция, ЭлементДереваРазделыОтчета);
	КонецЦикла;
	ДобавитьКОписаниюЯчеекСсылкиНаЗависимыеЯчейки(КонтекстФормы);
	
	КонтекстФормы.ТаблицаКонтрольныхСоотношений.Очистить();
	
	УзлыКонтрольныеСоотношения = КорневойУзел.ПолучитьЭлементыПоИмени("controls")[0].ПолучитьЭлементыПоИмени("control");
	Для каждого УзелКонтрольноеСоотношение Из УзлыКонтрольныеСоотношения Цикл
		ДобавитьКонтрольноеСоотношениеВТаблицу(КонтекстФормы, УзелКонтрольноеСоотношение);
	КонецЦикла;
	
	КонтекстФормы.ТаблицаСправочников.Очистить();
	
	УзлыСправочники = КорневойУзел.ПолучитьЭлементыПоИмени("dics")[0].ПолучитьЭлементыПоИмени("dic");
	Для каждого УзелСправочник Из УзлыСправочники Цикл
		ДобавитьСправочникВТаблицу(КонтекстФормы, УзелСправочник);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСправочникВТаблицу(КонтекстФормы, УзелСправочник)
	
	НовыйСправочник = КонтекстФормы.ТаблицаСправочников.Добавить();
	
	ИдентификаторСпр = УзелСправочник.ПолучитьАтрибут("id");
	НаименованиеСпр  = УзелСправочник.ПолучитьАтрибут("name");
	НаименованиеСпр  = СокрЛП(СтрЗаменить(СтрЗаменить(НаименованиеСпр, НРег(ИдентификаторСпр), ""), ВРег(ИдентификаторСпр), ""));
	
	НовыйСправочник.Наименование  = НаименованиеСпр;
	НовыйСправочник.Идентификатор = ИдентификаторСпр;
	
	ИдентификаторРодителя         = УзелСправочник.ПолучитьАтрибут("parent");
	НовыйСправочник.ИдентификаторРодителя = ?(ЗначениеЗаполнено(ИдентификаторРодителя), ИдентификаторРодителя, "");
	
	НовыйСправочник.ТаблицаЭлементовСправочника.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	НовыйСправочник.ТаблицаЭлементовСправочника.Колонки.Добавить("Название", Новый ОписаниеТипов("Строка"));
	НовыйСправочник.ТаблицаЭлементовСправочника.Колонки.Добавить("СоставнойКлюч", Новый ОписаниеТипов("Строка"));
	НовыйСправочник.ТаблицаЭлементовСправочника.Колонки.Добавить("ИдСтрокиРодителя", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаЭлементовСправочника = НовыйСправочник.ТаблицаЭлементовСправочника;
	
	ЭтоПриложение = Истина;
	УзлыЭлементыСправочника = УзелСправочник.ПолучитьЭлементыПоИмени("term");
	Для каждого УзелЭлементСправочника Из УзлыЭлементыСправочника Цикл
		НовыйЭлементСправочника = ТаблицаЭлементовСправочника.Добавить();
		НовыйЭлементСправочника.Код   = УзелЭлементСправочника.ПолучитьАтрибут("id");
		ТекстЭлемента = СокрЛП(УзелЭлементСправочника.ТекстовоеСодержимое);
		Если НЕ ПустаяСтрока(ТекстЭлемента) Тогда
			ЭтоПриложение = Ложь;
			НовыйЭлементСправочника.Название = ТекстЭлемента;
		КонецЕсли;
		СоставнойКлюч = "";
		Для ИндексАтрибута = 0 По УзелЭлементСправочника.Атрибуты.Количество() - 1 Цикл
			УзелАтрибута = УзелЭлементСправочника.Атрибуты[ИндексАтрибута];
			ИмяАтрибута = НРег(УзелАтрибута.Имя);
			Если ИмяАтрибута = "id" Тогда
				Продолжить;
			КонецЕсли;
			СоставнойКлюч = СоставнойКлюч + ?(ПустаяСтрока(СоставнойКлюч), "", "|") + ИмяАтрибута + "=" + СокрЛП(УзелАтрибута.ТекстовоеСодержимое);
		КонецЦикла;
		НовыйЭлементСправочника.СоставнойКлюч = СоставнойКлюч;
	КонецЦикла;
	Если ТаблицаЭлементовСправочника.Количество() = 0 Тогда
		ЭтоПриложение = Ложь;
		НовыйСправочник.Пустой = Истина;
	Иначе
		НовыйСправочник.Пустой = Ложь;
	КонецЕсли;
	
	НовыйСправочник.ЭтоПриложение = ?(ПустаяСтрока(НовыйСправочник.ИдентификаторРодителя), ЭтоПриложение, Истина);
	
КонецПроцедуры

Функция ЗагрузитьФайлXML(ИмяФайла)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла); 
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
КонецФункции

Процедура СформироватьАтрибутыКорневогоЭлементаСхемыВыгрузки(КонтекстФормы, ЭлементДереваОтчет)
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.Строки.Добавить();
	ЭлементДереваАтрибут.Код = "code";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = КонтекстФормы.СтруктураАтрибутовОтчета["code"];
	ЭлементДереваАтрибут.Представление = "Код формы для идентификации в программе ""Заполнение форм статистической отчетности""";
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.Строки.Добавить();
	ЭлементДереваАтрибут.Код = "form";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = Формат(КонтекстФормы.СтруктураАтрибутовОтчета["idf"], "ЧГ=");
	ЭлементДереваАтрибут.Представление = "Внутренний номер формы в пределах кода ОКУД";
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.Строки.Добавить();
	ЭлементДереваАтрибут.Код = "shifr";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = КонтекстФормы.СтруктураАтрибутовОтчета["shifr"];
	ЭлементДереваАтрибут.Представление = "Шифр формы для программы ""Заполнение форм статистической отчетности""";
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.Строки.Добавить();
	ЭлементДереваАтрибут.Код = "year";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = Формат(Год(КонтекстФормы.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),"ЧГ=");
	ЭлементДереваАтрибут.Представление = "Отчетный год";
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.Строки.Добавить();
	ЭлементДереваАтрибут.Код = "period";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = "&ОтчПериод";
	ЭлементДереваАтрибут.Представление = "Код отчетного периода";
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.Строки.Добавить();
	ЭлементДереваАтрибут.Код = "version";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = КонтекстФормы.СтруктураАтрибутовОтчета["version"];
	ЭлементДереваАтрибут.Представление = "Версия XML-шаблона (дата выпуска в формате: 29-02-2013)";
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.Строки.Добавить();
	ЭлементДереваАтрибут.Код = "format-version";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = КонтекстФормы.СтруктураАтрибутовОтчета["format_version"];
	ЭлементДереваАтрибут.Представление = "Версия формата XML-отчета";
	
КонецПроцедуры

Процедура СформироватьЭлементыРазделаОбщаяИнформацияСхемыВыгрузки(КонтекстФормы, ЭлементДереваОбщаяИнформация)
	
	СписокРеквизитов = КонтекстФормы.СтруктураАтрибутовОтчета["title"];
	
	Для каждого ЭлементРеквизит Из СписокРеквизитов Цикл
		
		ИмяПоля = ЭлементРеквизит.Значение;
		ОписаниеПоля = СокрЛП(ЭлементРеквизит.Представление);
		
		ЭлементДереваПоле = ЭлементДереваОбщаяИнформация.Строки.Добавить();
		ЭлементДереваПоле.Код = "item";
		ЭлементДереваПоле.Тип = "C";
		ЭлементДереваПоле.Обязательность = "О";
		
		ЭлементДереваАтрибутИмяПоля = ЭлементДереваПоле.Строки.Добавить();
		ЭлементДереваАтрибутИмяПоля.Код = "name";
		ЭлементДереваАтрибутИмяПоля.Тип = "A";
		ЭлементДереваАтрибутИмяПоля.Обязательность = "О";
		ЭлементДереваАтрибутИмяПоля.ЗначениеПоУмолчанию = ИмяПоля;
		
		ЭлементДереваАтрибутЗначениеПоля = ЭлементДереваПоле.Строки.Добавить();
		ЭлементДереваАтрибутЗначениеПоля.Код = "value";
		ЭлементДереваАтрибутЗначениеПоля.Тип = "A";
		ЭлементДереваАтрибутЗначениеПоля.Формат = "T";
		ЭлементДереваАтрибутЗначениеПоля.МаксРазмерность = 99999;
		ЭлементДереваАтрибутЗначениеПоля.МинРазмерность  = 0;
		ЭлементДереваАтрибутЗначениеПоля.Обязательность = "О";
		ЭлементДереваАтрибутЗначениеПоля.ЗначениеПоУмолчанию = "&" + ИмяПоля;
		ЭлементДереваАтрибутЗначениеПоля.Представление = ОписаниеПоля;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ГенерироватьМакетИСтруктуруДанныхРазделаОбщаяИнформация(КонтекстФормы)
	
	ОбразцыОбластей = Отчеты[Сред(Лев(КонтекстФормы.ИмяФормы, СтрНайти(КонтекстФормы.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета");
	
	МакетРаздела = Новый ТабличныйДокумент;
	
	// Номер корректировки
	ПустаяСтрока         = ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая");
	ОбластьНомераКорр    = ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая");
	ОбластьПодразделение = ОбразцыОбластей.ПолучитьОбласть("ШапкаОбособленныеПодразделения");
	
	МакетРаздела.Вывести(ПустаяСтрока);
	
	ЦелеваяЯчейка = ОбластьНомераКорр.Область(1, 3, 1, 3);
	ЦелеваяЯчейка.СодержитЗначение = Истина;
	ЦелеваяЯчейка.Имя = "НомерКорректировки";
	ЦелеваяЯчейка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЦелеваяЯчейка.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЦелеваяЯчейка.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЦелеваяЯчейка.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЦелеваяЯчейка.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
	ЦелеваяЯчейка.Шрифт = Новый Шрифт(ЦелеваяЯчейка.Шрифт, , 9);
	ЦелеваяЯчейка.Формат = "ЧН=0";
	ЦелеваяЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ЦелеваяЯчейка.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
	ЦелеваяЯчейка.Значение = ЦелеваяЯчейка.ТипЗначения.ПривестиЗначение();
	ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеФормы"));
	ЦелеваяЯчейка.Защита = Ложь;
	ЦелеваяЯчейка.ЦветФона = КонтекстФормы.СтруктураРеквизитовФормы.мЦветЖелтый;
	
	ЦелеваяЯчейка = ОбластьНомераКорр.Область(1, 2, 1, 2);
	ЦелеваяЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	ЦелеваяЯчейка.Текст = "Номер корректировки ";
	ЦелеваяЯчейка.Шрифт = Новый Шрифт(ЦелеваяЯчейка.Шрифт, , 9);
	
	МакетРаздела.Вывести(ОбластьНомераКорр);
	
	МакетРаздела.Вывести(ПустаяСтрока);
	
	ОбластьШапки = ОбразцыОбластей.ПолучитьОбласть(2, , 2, );
	ОбластьШапки.Область(1, 2, 1, 2).Текст = "Общая информация";
	МакетРаздела.Вывести(ОбластьШапки);
	
	МакетРаздела.Вывести(ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая"));
	
	СписокРеквизитов = КонтекстФормы.СтруктураАтрибутовОтчета["title"];
	ДетализацияСпискаРеквизитов = КонтекстФормы.СтруктураАтрибутовОтчета["title_detail"];
	
	МакетРаздела.Вывести(ОбластьПодразделение);
	
	Для каждого ЭлементРеквизит Из СписокРеквизитов Цикл
		
		ИмяПоля = ЭлементРеквизит.Значение;
		ОписаниеПоля = СокрЛП(ЭлементРеквизит.Представление);
		СтруктураДопРеквизитов = ДетализацияСпискаРеквизитов[ИмяПоля];
		
		ОбластьСтроки = ОбразцыОбластей.ПолучитьОбласть("ОбщаяИнформация");
		ОбластьСтроки.Область(1, 2, 1, 2).Текст = ВРег(Лев(ОписаниеПоля, 1)) + Сред(ОписаниеПоля, 2);
		
		ЦелеваяЯчейка = ОбластьСтроки.Область(1, 4, 1, 4);
		ЦелеваяЯчейка.СодержитЗначение = Истина;
		ЦелеваяЯчейка.Имя = ИмяПоля;
		ЦелеваяЯчейка.ТипЗначения = ОписаниеТиповИзСтрокиФормата("", , "Строка");
		ЦелеваяЯчейка.Значение = ЦелеваяЯчейка.ТипЗначения.ПривестиЗначение();
		ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеФормы"));
		ЦелеваяЯчейка.Защита = Ложь;
		ЦелеваяЯчейка.ЦветФона = КонтекстФормы.СтруктураРеквизитовФормы.мЦветЖелтый;
		
		КонтекстФормы.СтруктураДанныхОтчета.Вставить(ЦелеваяЯчейка.Имя, ЦелеваяЯчейка.Значение);
		
		ИмяСправочника = СтруктураДопРеквизитов["dic"];
		ТипПроверки = ?(ПустаяСтрока(ИмяСправочника), 0, 1);
		ПараметрыЦелевойЯчейки = Новый Структура;
		ПараметрыЦелевойЯчейки.Вставить("inputType", 1);
		ПараметрыЦелевойЯчейки.Вставить("vldType", ТипПроверки);
		ПараметрыЦелевойЯчейки.Вставить("vld", "");
		ПараметрыЦелевойЯчейки.Вставить("dic", ИмяСправочника);
		
		КонтекстФормы.СтруктураОписанийЯчеек.Вставить(ИмяПоля, ПараметрыЦелевойЯчейки);
		
		ОбластьВывода = МакетРаздела.Вывести(ОбластьСтроки);
		ОбластьВывода.Имя = "";
		ОбластьВывода = МакетРаздела.Вывести(ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая"));
		ОбластьВывода.Имя = "";
		
	КонецЦикла;
	
	// Дата составления отчета
	ПустаяСтрока   = ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая");
	ОбластьДаты    = ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая");
	ОбластьДатыНиз = ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая");
	
	МакетРаздела.Вывести(ПустаяСтрока);
	
	ЦелеваяЯчейка = ОбластьДаты.Область(1, 2, 1, 2);
	ЦелеваяЯчейка.СодержитЗначение = Истина;
	ЦелеваяЯчейка.Имя = "ДатаСоставленияОтчета";
	ЦелеваяЯчейка.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЦелеваяЯчейка.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ЦелеваяЯчейка.Формат = "Л=; ДФ='dd MMMM yyyy ""г.""'";
	ЦелеваяЯчейка.Шрифт = Новый Шрифт(ЦелеваяЯчейка.Шрифт, , 9, Истина);
	ЦелеваяЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ЦелеваяЯчейка.Значение = ЦелеваяЯчейка.ТипЗначения.ПривестиЗначение();
	ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеФормы"));
	ЦелеваяЯчейка.Защита = Ложь;
	ЦелеваяЯчейка.ЦветФона = КонтекстФормы.СтруктураРеквизитовФормы.мЦветЖелтый;
	
	МакетРаздела.Вывести(ОбластьДаты);
	
	ЦелеваяЯчейка = ОбластьДатыНиз.Область(1, 2, 1, 2);
	ЦелеваяЯчейка.ВертикальноеПоложение   = ВертикальноеПоложение.Верх;
	ЦелеваяЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ЦелеваяЯчейка.Текст = "(дата составления документа)";
	
	МакетРаздела.Вывести(ОбластьДатыНиз);
	
	МакетРаздела.Область("C2").ШиринаКолонки = 58;
	МакетРаздела.Область("C3").ШиринаКолонки = 10;
	МакетРаздела.Область("C4").ШиринаКолонки = 60;
	
	МакетРаздела.Область("R4C2:R4C4").ПоВыделеннымКолонкам = Истина;
	МакетРаздела.Вывод = ИспользованиеВывода.Разрешить;
	
	КонтекстФормы.СтруктураРеквизитовФормы.СписокФормРазделов.Добавить(МакетРаздела, "ОбщаяИнформация");
	
КонецПроцедуры

Функция ОписаниеТиповИзСтрокиФормата(СтрокаФорматаЯчейки, МинШиринаЯчейкиВСимв = 0, ТипСтрокойУмолч = "Число")
	
	ОписаниеТиповСтрокаУмолч  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));
	ОписаниеТиповЧислоУмолч   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	Если НЕ ЗначениеЗаполнено(СтрокаФорматаЯчейки) Тогда
		Если ТипСтрокойУмолч = "Число" Тогда
			Возврат ОписаниеТиповЧислоУмолч;
		Иначе
			Возврат ОписаниеТиповСтрокаУмолч;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаФормата = СтрЗаменить(СтрокаФорматаЯчейки, " ", "");
	
	ПозОткрСкобки = СтрНайти(СтрокаФормата, "(");
	ПозЗакрСкобки = СтрНайти(СтрокаФормата, ")");
	ДанныеВСкобках = Сред(СтрокаФормата, ПозОткрСкобки + 1, Макс(0, ПозЗакрСкобки - ПозОткрСкобки - 1));
	
	Инд = 0;
	МассивСтрок = Новый Массив(2);
	МассивСтрок[0] = "0"; МассивСтрок[1] = "0";
	Для Поз = 1 По СтрДлина(ДанныеВСкобках) Цикл
		Сим = Сред(ДанныеВСкобках, Поз, 1);
		Если СтрНайти("0123456789", Сим) > 0 Тогда
			МассивСтрок[Инд] = МассивСтрок[Инд] + Сим;
		Иначе
			Инд = 1;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрНайти(ВРег(СтрокаФормата), "N") > 0 Тогда
		РазрядностьЦелойЧасти   = Число(МассивСтрок[0]);
		РазрядностьДробнойЧасти = Число(МассивСтрок[1]);
		Если РазрядностьЦелойЧасти = 0 Тогда
			РазрядностьЦелойЧасти   = 15;
			РазрядностьДробнойЧасти = 2;
		ИначеЕсли РазрядностьДробнойЧасти > 10 Тогда
			РазрядностьДробнойЧасти = 6;
		КонецЕсли;
		Разрядность = РазрядностьЦелойЧасти + РазрядностьДробнойЧасти;
		ТипФорматаСтрокой = "Число";
		ОписаниеТиповФормата   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти));
		МинШиринаЯчейкиВСимв = Разрядность + ?(РазрядностьДробнойЧасти = 0, 1, 2);
	Иначе
		ДлинаСтроки = Число(МассивСтрок[0]);
		ТипФорматаСтрокой = "Строка";
		ОписаниеТиповФормата  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
		МинШиринаЯчейкиВСимв = ДлинаСтроки + 1;
	КонецЕсли;
	
	Возврат ОписаниеТиповФормата;
	
КонецФункции

Процедура ГенерироватьМакетИСтруктуруДанныхРаздела(КонтекстФормы, УзелСекция, ЭлементДереваРазделыОтчета)
	
	КодСекцииТекст = УзелСекция.ПолучитьАтрибут("code");
	КодСекции      = ?(ПустаяСтрока(КодСекцииТекст), 0, Число(КодСекцииТекст));
	ИмяСекции      = СокрЛП(СтрЗаменить(СтрЗаменить(УзелСекция.ПолучитьАтрибут("name"), Символы.НПП, " "), "  ", " "));
	ИмяСекции      = ВРег(Лев(ИмяСекции, 1)) + Сред(ИмяСекции, 2);
	ИДСекцииТекст  = УзелСекция.ПолучитьАтрибут("nb");
	ИДСекции       = ?(ПустаяСтрока(ИДСекцииТекст), 0, Число(ИДСекцииТекст));
	
	ЭлементДереваРазделОтчета = ЭлементДереваРазделыОтчета.Строки.Добавить();
	ЭлементДереваРазделОтчета.Код                   = "section";
	ЭлементДереваРазделОтчета.Тип                   = "C";
	ЭлементДереваРазделОтчета.Обязательность        = "О";
	ЭлементДереваРазделОтчета.Раздел                = "ПолеТабличногоДокумента";
	ЭлементДереваРазделОтчета.Представление         = ИмяСекции;
	
	ЭлементДереваАтрибутРаздела = ЭлементДереваРазделОтчета.Строки.Добавить();
	ЭлементДереваАтрибутРаздела.Код                 = "code";
	ЭлементДереваАтрибутРаздела.Тип                 = "A";
	ЭлементДереваАтрибутРаздела.Обязательность      = "О";
	ЭлементДереваАтрибутРаздела.ЗначениеПоУмолчанию = КодСекцииТекст;
	
	ОбразцыОбластей = Отчеты[Сред(Лев(КонтекстФормы.ИмяФормы, СтрНайти(КонтекстФормы.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета");
	
	МакетРаздела = Новый ТабличныйДокумент;
	МакетРаздела.Вывести(ОбразцыОбластей.ПолучитьОбласть("ШапкаРаздела|ПустойСтолбец"));
	
	СписокПараметровКолонок = Новый СписокЗначений;
	
	УзлыОписанияКолонок = УзелСекция.ПолучитьЭлементыПоИмени("columns")[0].ПолучитьЭлементыПоИмени("column");
	Для каждого УзелОписанияКолонки Из УзлыОписанияКолонок Цикл
		
		ПараметрыКолонки = Новый Соответствие;
		ПараметрыКолонки.Вставить("codesection", КодСекции);
		ПараметрыКолонки.Вставить("code", УзелОписанияКолонки.ПолучитьАтрибут("code"));
		ПараметрыКолонки.Вставить("name", УзелОписанияКолонки.ПолучитьАтрибут("name"));
		// Типы столбцов:
		// B - столбец-боковик
		// Z - столбец-значение
		// S - столбец-специфика
		ПараметрыКолонки.Вставить("type", УзелОписанияКолонки.ПолучитьАтрибут("type"));
		
		Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 И УзелОписанияКолонки.УзелИдентичен(УзлыОписанияКолонок[0]) Тогда
			ОбластьШапки = ОбразцыОбластей.ПолучитьОбласть("ШапкаРаздела|Боковик"); // только для первой колонки
			ОбластьШапки.Область(2, 1).Текст = ИмяСекции;
			ОбластьШапки.Область(4, 2).Текст = ПараметрыКолонки["name"];
			ОбластьШапки.Область(5, 2).Текст = ПараметрыКолонки["code"];
		Иначе // столбец-значение
			ОбластьШапки = ОбразцыОбластей.ПолучитьОбласть("ШапкаРаздела|Значение");
			ОбластьШапки.Область(4, 1).Текст = ПараметрыКолонки["name"];
			ОбластьШапки.Область(5, 1).Текст = ПараметрыКолонки["code"];
		КонецЕсли;
		МакетРаздела.Присоединить(ОбластьШапки);
		
		КлючСпецифики       = УзелОписанияКолонки.ПолучитьАтрибут("fld");    // необязательный
		ПараметрыКолонки.Вставить("fld", ?(КлючСпецифики = Неопределено, "", КлючСпецифики));
		УсловиеЗакрещивания = УзелОписанияКолонки.ПолучитьАтрибут("pr_inp"); // необязательный
		ПараметрыКолонки.Вставить("pr_inp", ?(УсловиеЗакрещивания = Неопределено, "false", УсловиеЗакрещивания));
		
		УзлыОписанияЯчеекПоУмолч = УзелОписанияКолонки.ПолучитьЭлементыПоИмени("default-cell");
		Если УзлыОписанияЯчеекПоУмолч.Количество() > 0 Тогда
			
			ПараметрыКолонки.Вставить("column", УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("column"));
			ПараметрыКолонки.Вставить("format", УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("format"));
			// Тип ячейки:
			// 0 - ячейка запрещена для ввода
			// 1 - ячейка, обязательная для ввода
			// 2 - ячейка, не обязательная для ввода
			ПараметрыКолонки.Вставить("inputType", УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("inputType"));
			СправочникЯчейки  = УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("dic");
			ПараметрыКолонки.Вставить("dic", ?(СправочникЯчейки = Неопределено, "", СправочникЯчейки));
			// Тип проверки в ячейке:
			// 0 - проверки не требуется (по умолчанию)
			// 1 - проверка по справочнику, указанному в атрибуте dic
			// 2 - проверка на диапазон значений, указанных в атрибуте vld
			// 3 - проверка по списку значений, указанных в атрибуте vld
			// 4 - проверка по приложения, справочник указывается в атрибуте dic, приложение - в атрибуте vld
			// 5 - проверка по справочнику, используя фильтрацию по формуле, указанной в атрибуте vld
			ТипПроверкиЯчейки = УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("vldType");
			ПараметрыКолонки.Вставить("vldType", ?(ТипПроверкиЯчейки = Неопределено, "0", ТипПроверкиЯчейки));
			// Дополнительные параметры фильтрации зависит от атрибута vldType:
			// vldType=0: проверки не требуется. По умолчанию 
			// vldType=1: проверка по справочнику, указанному в атрибуте dic 
			// vldType=2: диапазон значений вида "1-10"
			// vldType=3: список значений вида "1,2,5,7"
			// vldType=4: идентификатор приложения, по которому усекается справочник
			// vldType=5: фильтр для справочника вида "okp=#5,50,Г" - где:
			//   "okp" - дополнительный атрибут в теге "term" справочника,
			//   "#5,50,Г" - координата ячейки, из которой берется значение для фильтрации ("5" - раздел формы, "50" - код строки, "Г" - код столбца)
			ДопПарамЯчейки    = УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("vld");
			ПараметрыКолонки.Вставить("vld", ?(ДопПарамЯчейки = Неопределено, "", ДопПарамЯчейки));
			ЗначЯчейкиПоУмолч = УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("default");
			ПараметрыКолонки.Вставить("default", ?(ЗначЯчейкиПоУмолч = Неопределено, "", ЗначЯчейкиПоУмолч));
			
		КонецЕсли;
		
		СписокПараметровКолонок.Добавить(ПараметрыКолонки, ПараметрыКолонки["code"]);
		
	КонецЦикла;
	
	МакетРаздела.Присоединить(ОбразцыОбластей.ПолучитьОбласть("ШапкаРаздела|ПустойСтолбец"));
	МакетРаздела.Область(2, 1, 2, СписокПараметровКолонок.Количество() + 2).ПоВыделеннымКолонкам = Истина;
	МакетРаздела.ПовторятьПриПечатиСтроки = МакетРаздела.Область(4, , 4, );
	
	ЕстьМногострочностьВРазделе = Ложь;
	
	УзлыОписанияСтрок   = УзелСекция.ПолучитьЭлементыПоИмени("rows")[0].ПолучитьЭлементыПоИмени("row");
	
	Для каждого УзелОписанияСтроки Из УзлыОписанияСтрок Цикл
		
		ПараметрыСтроки = Новый Соответствие;
		
		КодСтрокиТекст      = УзелОписанияСтроки.ПолучитьАтрибут("code");
		ПараметрыСтроки.Вставить("code_text", КодСтрокиТекст);
		ПараметрыСтроки.Вставить("code", ?(ПустаяСтрока(КодСтрокиТекст), "", Число(КодСтрокиТекст)));
		ПараметрыСтроки.Вставить("name", УзелОписанияСтроки.ПолучитьАтрибут("name"));
		// Тип строки:
		// C - текстовая строка, не предназначена для ввода данных
		// F - фиксированная строка, предназначенная для ввода данных
		// M - множественная строка, пользователь имеет возможность ввести данную строку несколько раз
		ПараметрыСтроки.Вставить("type", УзелОписанияСтроки.ПолучитьАтрибут("type"));
		Если СтрНайти(ВРег(ПараметрыСтроки["type"]), "M") > 0 Тогда
			ЕстьМногострочностьВРазделе = Истина;
		КонецЕсли;
		// Атрибут grv имеет смысл для множественных строк (type="M").
		// Указываются перечисленные через запятую коды столбцов специфик (например, "В"), которые являются ключевыми для данной множественной строки
		КлючМнСтроки = УзелОписанияСтроки.ПолучитьАтрибут("grv");
		ПараметрыСтроки.Вставить("grv", ?(КлючМнСтроки = Неопределено, "", КлючМнСтроки));
		УсловиеЗакрещиванияСтроки = УзелОписанияСтроки.ПолучитьАтрибут("pr_inp");
		ПараметрыСтроки.Вставить("pr_inp", ?(УсловиеЗакрещиванияСтроки = Неопределено, "false", УсловиеЗакрещиванияСтроки));
		
		ПараметрыЯчеекСтроки = Новый Соответствие;
		
		УзлыОписанияЯчеек = УзелОписанияСтроки.ПолучитьЭлементыПоИмени("cell");
		Для каждого УзелОписанияЯчейки Из УзлыОписанияЯчеек Цикл
			
			ПараметрыЯчейки = Новый Соответствие;
			
			ПараметрыЯчейки.Вставить("column", УзелОписанияЯчейки.ПолучитьАтрибут("column"));
			ПараметрыЯчейки.Вставить("format", УзелОписанияЯчейки.ПолучитьАтрибут("format"));
			// Тип ячейки:
			// 0 - ячейка запрещена для ввода
			// 1 - ячейка, обязательная для ввода
			// 2 - ячейка, не обязательная для ввода
			ПараметрыЯчейки.Вставить("inputType", УзелОписанияЯчейки.ПолучитьАтрибут("inputType"));
			СправочникЯчейки  = УзелОписанияЯчейки.ПолучитьАтрибут("dic");
			ПараметрыЯчейки.Вставить("dic", ?(СправочникЯчейки = Неопределено, "", СправочникЯчейки));
			// Тип проверки в ячейке:
			// 0 - проверки не требуется (по умолчанию)
			// 1 - проверка по справочнику, указанному в атрибуте dic
			// 2 - проверка на диапазон значений, указанных в атрибуте vld
			// 3 - проверка по списку значений, указанных в атрибуте vld
			// 4 - проверка по приложения, справочник указывается в атрибуте dic, приложение - в атрибуте vld
			// 5 - проверка по справочнику, используя фильтрацию по формуле, указанной в атрибуте vld
			ТипПроверкиЯчейки = УзелОписанияЯчейки.ПолучитьАтрибут("vldType");
			ПараметрыЯчейки.Вставить("vldType", ?(ТипПроверкиЯчейки = Неопределено, "0", ТипПроверкиЯчейки));
			// Дополнительные параметры фильтрации зависит от атрибута vldType:
			// vldType=2: диапазон значений вида "1-10"
			// vldType=3: список значений вида "1,2,5,7"
			// vldType=4: идентификатор приложения, по которому усекается справочник
			// vldType=5: фильтр для справочника вида "okp=#5,50,Г" - где:
			//   "okp" - дополнительный атрибут в теге "term" справочника,
			//   "#5,50,Г" - координата ячейки, из которой берется значение для фильтрации ("5" - раздел формы, "50" - код строки, "Г" - код столбца)
			ДопПарамЯчейки    = УзелОписанияЯчейки.ПолучитьАтрибут("vld");
			ПараметрыЯчейки.Вставить("vld", ?(ДопПарамЯчейки = Неопределено, "", ДопПарамЯчейки));
			ЗначЯчейкиПоУмолч = УзелОписанияЯчейки.ПолучитьАтрибут("default");
			ПараметрыЯчейки.Вставить("default", ?(ЗначЯчейкиПоУмолч = Неопределено, "", ЗначЯчейкиПоУмолч));
			УсловиеЗакрещивания = УзелОписанияЯчейки.ПолучитьАтрибут("pr_inp");
			ПараметрыЯчейки.Вставить("pr_inp", ?(УсловиеЗакрещивания = Неопределено, "false", УсловиеЗакрещивания));
			
			ПараметрыЯчеекСтроки.Вставить(ПараметрыЯчейки["column"], ПараметрыЯчейки);
			
		КонецЦикла;
		
		Если ПараметрыЯчеекСтроки.Количество() > 0 Тогда
			ПараметрыСтроки.Вставить("cell", ПараметрыЯчеекСтроки);
		КонецЕсли;
		
		НомерПоследнейСтрокиМакета = МакетРаздела.ВысотаТаблицы;
		КоличествоСтолбцовВМакете  = МакетРаздела.ШиринаТаблицы;
		
		Если СтрНайти(ВРег(ПараметрыСтроки["type"]), "M") > 0 Тогда
			МакетРаздела.Вывести(ОбразцыОбластей.ПолучитьОбласть("МнСтрокаРаздела|ПустойСтолбец"));
		Иначе
			МакетРаздела.Вывести(ОбразцыОбластей.ПолучитьОбласть("СтрокаРаздела|ПустойСтолбец"));
		КонецЕсли;
		
		СформироватьСтрокуМакетаРаздела(КонтекстФормы, МакетРаздела, ОбразцыОбластей, СписокПараметровКолонок, ПараметрыСтроки, ЭлементДереваРазделОтчета);
		
		Если СтрНайти(ВРег(ПараметрыСтроки["type"]), "M") > 0 Тогда
			МакетРаздела.Присоединить(ОбразцыОбластей.ПолучитьОбласть("МнСтрокаРаздела|ПустойСтолбец2"));
		Иначе
			МакетРаздела.Присоединить(ОбразцыОбластей.ПолучитьОбласть("СтрокаРаздела|ПустойСтолбец2"));
		КонецЕсли;
		
		Если Лев(МакетРаздела.Область(НомерПоследнейСтрокиМакета, 2, НомерПоследнейСтрокиМакета, 2).Имя, 3) = "ОДЗ" Тогда
			НетЛинии           = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			ЛинияСплошная      = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ЛинияРедкийПунктир = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
			Для НомСтолбца = 1 По КоличествоСтолбцовВМакете Цикл
				ОбластьЯчейкиПредСтроки = МакетРаздела.Область(НомерПоследнейСтрокиМакета, НомСтолбца, НомерПоследнейСтрокиМакета, НомСтолбца);
				ОбластьЯчейкиСтроки = МакетРаздела.Область(НомерПоследнейСтрокиМакета + 1, НомСтолбца, НомерПоследнейСтрокиМакета + 1, НомСтолбца);
				Если ОбластьЯчейкиПредСтроки.ГраницаСнизу = ЛинияРедкийПунктир Тогда
					ОбластьЯчейкиПредСтроки.ГраницаСнизу = НетЛинии;
					ОбластьЯчейкиСтроки.ГраницаСверху = ЛинияСплошная;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьШиринуКолонокМакетаРаздела(МакетРаздела, СписокПараметровКолонок);
	
	МакетРаздела.ФиксацияСверху = 3;
	МакетРаздела.ФиксацияСлева  = 3;
	
	МакетРаздела.Вывод = ИспользованиеВывода.Разрешить;
	
	КонтекстФормы.СтруктураРеквизитовФормы.СписокФормРазделов.Добавить(МакетРаздела, "Раздел" + Формат(КодСекции, "ЧГ=;ЧН="), ЕстьМногострочностьВРазделе);
	
	ДобавитьВРеквизитСписокПараметровКолонок(КонтекстФормы, КодСекции, СписокПараметровКолонок);
	
КонецПроцедуры

Процедура ДобавитьВРеквизитСписокПараметровКолонок(КонтекстФормы, КодСекции, СписокПараметровКолонок)
	
	СтрКодСекции = Формат(КодСекции, "ЧГ=");
	
	ВремСписокПараметровКолонок = Новый СписокЗначений;
	Для каждого ЭлементСпискаПараметровКолонок Из СписокПараметровКолонок Цикл
		СтруктураПараметровКолонок = Новый Структура("code, type, fld");
		НаборПараметров = ЭлементСпискаПараметровКолонок.Значение;
		Для каждого ЭлементСтруктуры Из СтруктураПараметровКолонок Цикл
			СтруктураПараметровКолонок[ЭлементСтруктуры.Ключ] = НаборПараметров[ЭлементСтруктуры.Ключ];
		КонецЦикла;
		ВремСписокПараметровКолонок.Добавить(СтруктураПараметровКолонок, НаборПараметров["code"]);
	КонецЦикла;
	
	КонтекстФормы.ПараметрыГрафРазделов.Вставить("Раздел" + СтрКодСекции, ВремСписокПараметровКолонок);
	
КонецПроцедуры

Процедура СформироватьСтрокуМакетаРаздела(КонтекстФормы, МакетРаздела, МакетОбразцовОбластей, СписокПараметровКолонок, ПараметрыСтроки, ЭлементДереваРазделОтчета)
	
	Перем ЭлементДереваСтрокаРаздела;
	
	Многострочный = Ложь;
	ДляВводаДанных  = Истина;
	Если СтрНайти(ВРег(ПараметрыСтроки["type"]), "M") > 0 Тогда
		ИмяГоризонтальнойСекции = "МнСтрокаРаздела";
		Многострочный = Истина;
	ИначеЕсли СтрНайти(ВРег(ПараметрыСтроки["type"]), "C") > 0 Тогда
		ИмяГоризонтальнойСекции = "СтрокаРаздела";
		ДляВводаДанных  = Ложь;
	Иначе
		ИмяГоризонтальнойСекции = "СтрокаРаздела";
	КонецЕсли;
	
	Если ДляВводаДанных Тогда
		
		ЭлементДереваСтрокаРаздела = ЭлементДереваРазделОтчета.Строки.Добавить();
		ЭлементДереваСтрокаРаздела.Код                 = "row";
		ЭлементДереваСтрокаРаздела.Тип                 = "C";
		ЭлементДереваСтрокаРаздела.Обязательность      = "Н";
		ЭлементДереваСтрокаРаздела.Многострочность     = Многострочный;
		ЭлементДереваСтрокаРаздела.Представление       = ПараметрыСтроки["name"];
		
		ЭлементДереваАтрибутСтроки = ЭлементДереваСтрокаРаздела.Строки.Добавить();
		ЭлементДереваАтрибутСтроки.Код                 = "code";
		ЭлементДереваАтрибутСтроки.Тип                 = "A";
		ЭлементДереваАтрибутСтроки.Обязательность      = "Н";
		ЭлементДереваАтрибутСтроки.Многострочность     = Многострочный;
		ЭлементДереваАтрибутСтроки.ЗначениеПоУмолчанию = Формат(Число("0" + ПараметрыСтроки["code"]), "ЧН=; ЧГ=");
		
	КонецЕсли;
	
	Для Инд = 0 По СписокПараметровКолонок.Количество() - 1 Цикл
		
		ПараметрыКолонки = СписокПараметровКолонок[Инд].Значение;
		
		ПараметрыЯчейки = РезультирующиеПараметрыЯчейки(ПараметрыКолонки, ПараметрыСтроки);
		
		Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 И Инд = 0 Тогда
			ОбластьСтроки = МакетОбразцовОбластей.ПолучитьОбласть(ИмяГоризонтальнойСекции + "|Боковик");
			ОбластьСтроки.Область(1, 2, 1, 2).Текст = СтрокаСНеразрывнымПробелом(ПараметрыСтроки["name"]);
			ЦелеваяЯчейка = ОбластьСтроки.Область(1, 2, 1, 2);
			Если Многострочный Тогда
				ОбластьСтроки.Область(2, 2, 2, 2).Текст = СтрокаСНеразрывнымПробелом(ПараметрыСтроки["name"]);
				ИмяЯчейки = ИмяПоказателяЯчейки(ПараметрыКолонки["codesection"], ПараметрыСтроки["code"], ПараметрыКолонки["code"], Многострочный);
				ОбластьСтроки.Область(1, 1, 1, 1).Имя = "ОДС" + ИмяЯчейки + "_1";
				ОбластьСтроки.Область(2, 1, 2, 1).Имя = "ОУС" + ИмяЯчейки + "_1";
				ОбластьСтроки.Область(3, 1, 3, 1).Имя = "ОДЗ" + ИмяЯчейки;
				ОбластьСтроки.Область(3, 2, 3, 2).Имя = "ОДГ" + ИмяЯчейки;
				ЦелеваяЯчейка = ОбластьСтроки.Область(2, 2, 2, 2);
			КонецЕсли;
		ИначеЕсли СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 И Инд = 1 Тогда
			ОбластьСтроки = МакетОбразцовОбластей.ПолучитьОбласть(ИмяГоризонтальнойСекции + "|Значение");
			Если Многострочный Тогда
				ОбластьСтроки.Область(2, 1, 2, 1).Текст = Формат(ПараметрыСтроки["code"], "ЧН=; ЧГ=");
				ОбластьСтроки.Область(2, 1, 2, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ЦелеваяЯчейка = ОбластьСтроки.Область(2, 1, 2, 1);
			Иначе
				ОбластьСтроки.Область(1, 1, 1, 1).Текст = Формат(ПараметрыСтроки["code"], "ЧН=; ЧГ=");
				ОбластьСтроки.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ЦелеваяЯчейка = ОбластьСтроки.Область(1, 1, 1, 1);
			КонецЕсли;
		Иначе
			ОбластьСтроки = МакетОбразцовОбластей.ПолучитьОбласть(ИмяГоризонтальнойСекции + "|Значение");
			ЦелеваяЯчейка = ОбластьСтроки.Область(1, 1, 1, 1);
			Если Многострочный Тогда
				ЦелеваяЯчейка = ОбластьСтроки.Область(2, 1, 2, 1);
			КонецЕсли;
		КонецЕсли;
		
		ПрименитьПараметрыЯчейки(КонтекстФормы, ЦелеваяЯчейка, ПараметрыЯчейки, ПараметрыКолонки, ПараметрыСтроки, ЭлементДереваСтрокаРаздела);
		
		Если ЦелеваяЯчейка.Защита Тогда
			ЦелеваяЯчейка.ЦветФона = КонтекстФормы.СтруктураРеквизитовФормы.мЦветБелый;
		Иначе
			ЦелеваяЯчейка.ЦветФона = КонтекстФормы.СтруктураРеквизитовФормы.мЦветЖелтый;
		КонецЕсли;
		
		МакетРаздела.Присоединить(ОбластьСтроки);
		
	КонецЦикла;
	
	Если СписокПараметровКолонок.Количество() > 0 Тогда
		
		ПараметрыПервойКолонки = СписокПараметровКолонок[0].Значение;
		
		КлючевыеЯчейки = ПараметрыСтроки["КлючевыеЯчейки"];
		Если КлючевыеЯчейки <> Неопределено Тогда
			ИмяОпцийСтроки = ИмяПоказателяЯчейки(ПараметрыПервойКолонки["codesection"], ПараметрыСтроки["code"], "", Многострочный);
			ЦелеваяОбласть = МакетРаздела.Область(МакетРаздела.ВысотаТаблицы, 3, МакетРаздела.ВысотаТаблицы, 3);
			ИмяЦелевойОбласти = ЦелеваяОбласть.Имя;
			Если Лев(ИмяЦелевойОбласти, 3) = "ОДГ" Тогда
				ЦелеваяОбласть = МакетРаздела.Область(МакетРаздела.ВысотаТаблицы - 1, 3, МакетРаздела.ВысотаТаблицы - 1, 3);
				ИмяЦелевойОбласти = ЦелеваяОбласть.Имя;
			КонецЕсли;
			Если Лев(ИмяЦелевойОбласти, 2) = "ПМ" И СтрНайти(ИмяЦелевойОбласти, "_") Тогда
				ИмяЦелевойОбласти = Лев(ИмяЦелевойОбласти, СтрНайти(ИмяЦелевойОбласти, "_") - 1);
			КонецЕсли;
			СтруктураОпцийСтроки = Новый Структура;
			СтруктураОпцийСтроки.Вставить("ВычисляемаяЯчейка",   ИмяЦелевойОбласти);
			СтруктураОпцийСтроки.Вставить("КлючевыеЯчейки",      КлючевыеЯчейки);
			СтруктураОпцийСтроки.Вставить("ЗначениеПоУмолчанию", СокрП(?(ЦелеваяОбласть.СодержитЗначение, ЦелеваяОбласть.Значение, ЦелеваяОбласть.Текст)));
			КонтекстФормы.СтруктураОписанийЯчеек.Вставить(ИмяОпцийСтроки, СтруктураОпцийСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьШиринуКолонокМакетаРаздела(МакетРаздела, СписокПараметровКолонок);
	
	МаксШиринаМакета   = 149;
	
	МаксШиринаСтолбцаZ = 20;
	МинШиринаСтолбцаZ  = 6;
	
	МаксШиринаСтолбцаS = 20;
	МинШиринаСтолбцаS  = 6;
	
	МинШиринаСтолбцаB1 = 30;
	
	ОписаниеТиповСтрока1  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1));
	ОписаниеТиповЧисло4   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло52  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево   = Новый ОписаниеТипов("Булево");
	
	ТаблицаПараметровКолонок = Новый ТаблицаЗначений;
	ТаблицаПараметровКолонок.Колонки.Добавить("НомКолонки",        ОписаниеТиповЧисло4);
	ТаблицаПараметровКолонок.Колонки.Добавить("ТипКолонки",        ОписаниеТиповСтрока1);
	ТаблицаПараметровКолонок.Колонки.Добавить("ШиринаФикс",        ОписаниеТиповЧисло52);
	ТаблицаПараметровКолонок.Колонки.Добавить("ШиринаПерем",       ОписаниеТиповЧисло52);
	ТаблицаПараметровКолонок.Колонки.Добавить("МинШиринаСтолбца",  ОписаниеТиповЧисло52);
	ТаблицаПараметровКолонок.Колонки.Добавить("МаксШиринаСтолбца", ОписаниеТиповЧисло52);
	ТаблицаПараметровКолонок.Колонки.Добавить("ИзменятьШирину",    ОписаниеТиповБулево);
	
	Для Инд = 0 По СписокПараметровКолонок.Количество() - 1 Цикл
		
		ПараметрыКолонки = СписокПараметровКолонок[Инд].Значение;
		
		НомКолонки = Инд + 3;
		ШиринаКолонки = МакетРаздела.Область( , НомКолонки, , НомКолонки).ШиринаКолонки;
		
		НовСтрокаТаблицы = ТаблицаПараметровКолонок.Добавить();
		НовСтрокаТаблицы.НомКолонки = НомКолонки;
		
		Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 И Инд = 0 Тогда
			НовСтрокаТаблицы.ТипКолонки = "B";
			НовСтрокаТаблицы.ШиринаФикс = ШиринаКолонки;
			НовСтрокаТаблицы.МинШиринаСтолбца = МинШиринаСтолбцаB1;
			НовСтрокаТаблицы.ИзменятьШирину   = Ложь;
		ИначеЕсли СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 И Инд = 1 Тогда
			НовСтрокаТаблицы.ТипКолонки = "B";
			НовСтрокаТаблицы.ШиринаФикс = ШиринаКолонки;
			НовСтрокаТаблицы.ИзменятьШирину   = Ложь;
		ИначеЕсли СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 Тогда
			НовСтрокаТаблицы.ТипКолонки = "B";
			НовСтрокаТаблицы.ШиринаФикс = ШиринаКолонки;
			НовСтрокаТаблицы.ИзменятьШирину   = Ложь;
		ИначеЕсли СтрНайти(ВРег(ПараметрыКолонки["type"]), "S") > 0  Тогда
			НовСтрокаТаблицы.ТипКолонки  = "S";
			НовСтрокаТаблицы.ШиринаПерем = ШиринаКолонки;
			НовСтрокаТаблицы.МинШиринаСтолбца  = МинШиринаСтолбцаS;
			НовСтрокаТаблицы.МаксШиринаСтолбца = МаксШиринаСтолбцаS;
			НовСтрокаТаблицы.ИзменятьШирину    = Истина;
		ИначеЕсли СтрНайти(ВРег(ПараметрыКолонки["type"]), "V") > 0  Тогда
			НовСтрокаТаблицы.ТипКолонки  = "V";
			НовСтрокаТаблицы.ШиринаФикс  = ШиринаКолонки;
			НовСтрокаТаблицы.ИзменятьШирину   = Ложь;
		ИначеЕсли СтрНайти(ВРег(ПараметрыКолонки["type"]), "Z") > 0  Тогда
			НовСтрокаТаблицы.ТипКолонки  = "Z";
			НовСтрокаТаблицы.ШиринаПерем = ШиринаКолонки;
			НовСтрокаТаблицы.МинШиринаСтолбца  = МинШиринаСтолбцаZ;
			НовСтрокаТаблицы.МаксШиринаСтолбца = МаксШиринаСтолбцаZ;
			НовСтрокаТаблицы.ИзменятьШирину    = Истина;
		Иначе
			НовСтрокаТаблицы.ТипКолонки  = СокрЛП(ВРег(ПараметрыКолонки["type"]));
			НовСтрокаТаблицы.ШиринаПерем = ШиринаКолонки;
			НовСтрокаТаблицы.МинШиринаСтолбца  = МинШиринаСтолбцаZ;
			НовСтрокаТаблицы.МаксШиринаСтолбца = МаксШиринаСтолбцаZ;
			НовСтрокаТаблицы.ИзменятьШирину    = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ШиринаФиксЧасти  = ТаблицаПараметровКолонок.Итог("ШиринаФикс");
	ШиринаПеремЧасти = ТаблицаПараметровКолонок.Итог("ШиринаПерем");
	
	Для каждого СтрокаТаблицы Из ТаблицаПараметровКолонок Цикл
		
		Если НЕ СтрокаТаблицы.ИзменятьШирину Тогда
			Продолжить;
		КонецЕсли;
		
		КоэфПроп = ?(ШиринаПеремЧасти = 0, 1, Макс(0, МаксШиринаМакета - ШиринаФиксЧасти - 2) / ШиринаПеремЧасти);
		ОгрМинШиринаСтролбца = Макс(СтрокаТаблицы.МинШиринаСтолбца, СтрокаТаблицы.ШиринаПерем * КоэфПроп);
		ШиринаКолонки = ?(СтрокаТаблицы.МаксШиринаСтолбца = 0, ОгрМинШиринаСтролбца, Мин(СтрокаТаблицы.МаксШиринаСтолбца, ОгрМинШиринаСтролбца));
		ШиринаКолонки = Окр(ШиринаКолонки / 0.25) * 0.25;
		
		СтрокаТаблицы.ШиринаПерем = ШиринаКолонки;
		
		МакетРаздела.Область( , СтрокаТаблицы.НомКолонки, , СтрокаТаблицы.НомКолонки).ШиринаКолонки = ШиринаКолонки;
		
	КонецЦикла;
	
	НовШиринаПеремЧасти = ТаблицаПараметровКолонок.Итог("ШиринаПерем");
	ШиринаСлужебнойКолонки = МакетРаздела.Область( , 2, , 2).ШиринаКолонки;
	
	Разница = МаксШиринаМакета - ШиринаФиксЧасти - НовШиринаПеремЧасти - ШиринаСлужебнойКолонки - 2;
	
	ШиринаБоковойКолонки = Макс(МинШиринаСтолбцаB1, ТаблицаПараметровКолонок[0].ШиринаФикс + Разница); // корректируем шириной боковой колонки
	МакетРаздела.Область( , ТаблицаПараметровКолонок[0].НомКолонки, , ТаблицаПараметровКолонок[0].НомКолонки).ШиринаКолонки = ШиринаБоковойКолонки; 
	
КонецПроцедуры

Процедура ДобавитьКОписаниюЯчеекСсылкиНаЗависимыеЯчейки(КонтекстФормы)
	
	Для каждого ОписаниеЯчейки Из КонтекстФормы.СтруктураОписанийЯчеек Цикл
		
		ИмяЯчейки = ОписаниеЯчейки.Ключ;
		ПараметрыЯчейки = ОписаниеЯчейки.Значение;
		ИмяЯчейкиФильтра = "";
		
		ТипВвода = Неопределено;
		Если (ПараметрыЯчейки.Свойство("inputType", ТипВвода) И ТипВвода <> 0) И ПараметрыЯчейки["vldType"] = 5 Тогда
			ФильтрДляСправочника = ПараметрыЯчейки["vld"];
			ПозАдреса = СтрНайти(ФильтрДляСправочника, "#");
			Если ПозАдреса > 0 Тогда
				АдресИзСсылки   = Сред(ФильтрДляСправочника, ПозАдреса + 1);
				ЗначениеОбласти = ЗначениеОбластиПоАдресуИзСсылки(КонтекстФормы, АдресИзСсылки, 1, ИмяЯчейкиФильтра);
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		// Добавляем в описание ячейки фильтра ссылки на показатели, использующие этот фильтр (для очистки зависимых ячеек)
		ПараметрыЯчейки = Неопределено;
		Если КонтекстФормы.СтруктураОписанийЯчеек.Свойство(ИмяЯчейкиФильтра, ПараметрыЯчейки) И ТипЗнч(ПараметрыЯчейки) = Тип("Структура") Тогда
			ЗависимыеЯчейки = Неопределено;
			Если НЕ (ПараметрыЯчейки.Свойство("refs", ЗависимыеЯчейки) И ТипЗнч(ЗависимыеЯчейки) = Тип("Массив")) Тогда
				ЗависимыеЯчейки = Новый Массив;
				ПараметрыЯчейки.Вставить("refs", ЗависимыеЯчейки);
			КонецЕсли;
			ЗависимыеЯчейки.Добавить(ИмяЯчейки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКонтрольноеСоотношениеВТаблицу(КонтекстФормы, УзелКонтрольноеСоотношение)
	
	НоваяСтрокаКонтроля = КонтекстФормы.ТаблицаКонтрольныхСоотношений.Добавить();
	
	НоваяСтрокаКонтроля.Идентификатор = Число("0" + УзелКонтрольноеСоотношение.ПолучитьАтрибут("id"));
	НоваяСтрокаКонтроля.Описание      = УзелКонтрольноеСоотношение.ПолучитьАтрибут("name");
	НоваяСтрокаКонтроля.Условие       = УзелКонтрольноеСоотношение.ПолучитьАтрибут("condition");
	НоваяСтрокаКонтроля.Формула       = УзелКонтрольноеСоотношение.ПолучитьАтрибут("rule");
	
	УсловиеПериод          = УзелКонтрольноеСоотношение.ПолучитьАтрибут("periodClause");
	НоваяСтрокаКонтроля.УсловиеПериод          = ?(ЗначениеЗаполнено(УсловиеПериод), УсловиеПериод, "true");
	
	РазрядностьОкругления  = УзелКонтрольноеСоотношение.ПолучитьАтрибут("precision");
	НоваяСтрокаКонтроля.РазрядностьОкругления  = ?(ЗначениеЗаполнено(РазрядностьОкругления), Число(РазрядностьОкругления), 2);
	
	ДопустимоеОтклонение   = УзелКонтрольноеСоотношение.ПолучитьАтрибут("fault");
	НоваяСтрокаКонтроля.ДопустимоеОтклонение   = ?(ЗначениеЗаполнено(ДопустимоеОтклонение), Число(ДопустимоеОтклонение), 0);
	
	ОбязательностьКонтроля = УзелКонтрольноеСоотношение.ПолучитьАтрибут("tip");
	НоваяСтрокаКонтроля.ОбязательностьКонтроля = ?(ЗначениеЗаполнено(ОбязательностьКонтроля), Число(ОбязательностьКонтроля), 1);
	
КонецПроцедуры

Функция СтрокаСНеразрывнымПробелом(ИсхСтрока)
	
	ОбрСтрока = "";
	
	Для НомСимв = 1 По СтрДлина(ИсхСтрока) Цикл
		Если ПустаяСтрока(Сред(ИсхСтрока, НомСимв, 1)) Тогда
			ОбрСтрока = ОбрСтрока + Символы.НПП;
		Иначе
			ОбрСтрока = ОбрСтрока + Сред(ИсхСтрока, НомСимв);
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ОбрСтрока;
	
КонецФункции 

Процедура ПрименитьПараметрыЯчейки(КонтекстФормы, ЦелеваяЯчейка, ПараметрыЯчейки, ПараметрыКолонки, ПараметрыСтроки, ЭлементДереваСтрокаРаздела)
	
	Многострочный = Ложь;
	
	Если СтрНайти(ВРег(ПараметрыСтроки["type"]), "C") > 0 Тогда
		Возврат;
	ИначеЕсли СтрНайти(ВРег(ПараметрыСтроки["type"]), "M") > 0 Тогда
		Многострочный = Истина;
	КонецЕсли;
	
	ТекстЯчейки = ЦелеваяЯчейка.Текст;
	
	ЦелеваяЯчейка.СодержитЗначение = Истина;
	
	ИмяЯчейки = ИмяПоказателяЯчейки(ПараметрыКолонки["codesection"], ПараметрыСтроки["code"], ПараметрыКолонки["code"], Многострочный);
	
	Если Многострочный Тогда
		ЦелеваяЯчейка.Имя = ИмяЯчейки + "_1";
	Иначе
		ЦелеваяЯчейка.Имя = ИмяЯчейки;
	КонецЕсли;
	
	ЭтоКлючеваяЯчейка = Ложь;
	ЭтоСпецифика      = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрыКолонки["fld"]) Тогда
		ЭтоСпецифика = Истина;
		МассивИменКолонок = РегламентированнаяОтчетностьКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(ПараметрыСтроки["grv"], ",");
		ИндексЭлемента = МассивИменКолонок.Найти(ПараметрыКолонки["code"]);
		Если ИндексЭлемента <> Неопределено Тогда
			ЭтоКлючеваяЯчейка = Истина;
			КлючевыеЯчейки = ПараметрыСтроки["КлючевыеЯчейки"];
			Если КлючевыеЯчейки = Неопределено Тогда
				ПараметрыСтроки.Вставить("КлючевыеЯчейки", Новый Массив);
				КлючевыеЯчейки = ПараметрыСтроки["КлючевыеЯчейки"];
			КонецЕсли;
			КлючевыеЯчейки.Вставить(ИндексЭлемента, ИмяЯчейки);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 Тогда
		МинШиринаЯчейкиВСимволах = 0;
		ЦелеваяЯчейка.ТипЗначения = ОписаниеТиповИзСтрокиФормата(ПараметрыЯчейки["format"], МинШиринаЯчейкиВСимволах, "Строка");
		ЦелеваяЯчейка.ШиринаКолонки = Макс(6, ?(МинШиринаЯчейкиВСимволах = 0, 60, Мин(60, МинШиринаЯчейкиВСимволах)));
		Если ПустаяСтрока(ТекстЯчейки) Тогда
			ЦелеваяЯчейка.Значение = ПараметрыЯчейки["default"];
		Иначе
			ЦелеваяЯчейка.Значение = ТекстЯчейки;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РезультатВычисленияУсловияДляЯчейки(КонтекстФормы, ПараметрыЯчейки["pr_inp"]) Тогда // ячейка закрещена
		ЦелеваяЯчейка.ТипЗначения = ОписаниеТиповИзСтрокиФормата("С(1)");
		ЦелеваяЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ЦелеваяЯчейка.Значение = "Х";
		Возврат;
	КонецЕсли;
	
	МинШиринаЯчейкиВСимволах = 0;
	ТипЗначения = ОписаниеТиповИзСтрокиФормата(ПараметрыЯчейки["format"], МинШиринаЯчейкиВСимволах);
	МаксШиринаЯчейкиВСимволах = Макс(?(ПараметрыКолонки["ШиринаКолонки"] = Неопределено, 0, ПараметрыКолонки["ШиринаКолонки"]), МинШиринаЯчейкиВСимволах);
	ПараметрыКолонки.Вставить("ШиринаКолонки", МаксШиринаЯчейкиВСимволах);
	
	ЦелеваяЯчейка.ШиринаКолонки = Мин(20, Макс(6, МаксШиринаЯчейкиВСимволах));
	
	ЦелеваяЯчейка.ТипЗначения = ТипЗначения;
	Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "S") > 0 И ПараметрыЯчейки["inputType"] = 0 Тогда
		Если ПараметрыЯчейки["default"] = "0" Тогда
			ЦелеваяЯчейка.Формат = ?(ТипЗначения.СодержитТип(Тип("Число")), "ЧГ=;ЧН=0", "");
		Иначе
			ЦелеваяЯчейка.Формат = ?(ТипЗначения.СодержитТип(Тип("Число")), "ЧГ=;ЧН=' '", "");
		КонецЕсли;
	Иначе
		ЦелеваяЯчейка.Формат = ?(ТипЗначения.СодержитТип(Тип("Число")), "ЧН=' '", "");
		Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Если (ТипЗначения.КвалификаторыЧисла.Разрядность = 4 И ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0)         // для года формат без группировки
				ИЛИ (ПараметрыЯчейки["vldType"] = 1) ИЛИ (ПараметрыЯчейки["vldType"] = 4) ИЛИ (ПараметрыЯчейки["vldType"] = 5) Тогда   // выбор из справочника
				
				ЦелеваяЯчейка.Формат = "ЧГ=;ЧН=' '";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЦелеваяЯчейка.ГоризонтальноеПоложение = ?(ТипЗначения.СодержитТип(Тип("Число")), ГоризонтальноеПоложение.Право, ГоризонтальноеПоложение.Авто);
	ЦелеваяЯчейка.Значение = ТипЗначения.ПривестиЗначение(ПараметрыЯчейки["default"]);
	ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеФормы"));
	
	Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "S") > 0 ИЛИ СтрНайти(ВРег(ПараметрыКолонки["type"]), "Z") > 0 Тогда
		
		Если ЭтоСпецифика Тогда
			
			ЭлементДереваЯчейка = ЭлементДереваСтрокаРаздела.Строки.Добавить();
			ЭлементДереваЯчейка.Код = ПараметрыКолонки["fld"];
			ЭлементДереваЯчейка.Тип = "A";
			ЭлементДереваЯчейка.Обязательность = "Н";
			
		Иначе
			
			ЭлементДереваЯчейка = ЭлементДереваСтрокаРаздела.Строки.Добавить();
			ЭлементДереваЯчейка.Код = "col";
			ЭлементДереваЯчейка.Тип = "C";
			ЭлементДереваЯчейка.Обязательность = "Н";
			
			ЭлементДереваАтрибутЯчейка = ЭлементДереваЯчейка.Строки.Добавить();
			ЭлементДереваАтрибутЯчейка.Код = "code";
			ЭлементДереваАтрибутЯчейка.Тип = "A";
			ЭлементДереваАтрибутЯчейка.Обязательность = "Н";
			ЭлементДереваАтрибутЯчейка.Многострочность     = Многострочный;
			ЭлементДереваАтрибутЯчейка.ЗначениеПоУмолчанию = ПараметрыКолонки["code"];
			
		КонецЕсли;
		
		Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
			ЭлементДереваЯчейка.Формат = "N";
			ЭлементДереваЯчейка.МаксРазмерность = ?(ТипЗначения.КвалификаторыЧисла.Разрядность = 0, 99999, ТипЗначения.КвалификаторыЧисла.Разрядность);
			ЭлементДереваЯчейка.МинРазмерность  = ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		Иначе
			ЭлементДереваЯчейка.Формат = "T";
			ЭлементДереваЯчейка.МаксРазмерность = ?(ТипЗначения.КвалификаторыСтроки.Длина = 0, 99999, ТипЗначения.КвалификаторыСтроки.Длина);
			ЭлементДереваЯчейка.МинРазмерность  = 0;
		КонецЕсли;
		
		ЭлементДереваЯчейка.Многострочность = Многострочный;
		ЭлементДереваЯчейка.Представление   = ПараметрыКолонки["name"];
		
		Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "Z") = 0 ИЛИ ТипЗначения.СодержитТип(Тип("Число")) Тогда
			ЭлементДереваЯчейка.ЗначениеПоУмолчанию = ПараметрыЯчейки["default"];
		КонецЕсли;
		
		Если ПараметрыЯчейки["inputType"] <> 0 Тогда
			ЭлементДереваЯчейка.Раздел = "ПолеТабличногоДокумента";
			ЭлементДереваЯчейка.Ключ   = ИмяЯчейки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЯчейки["inputType"] = 0 Тогда // недоступна для редактирования
		Возврат;
	ИначеЕсли ПараметрыЯчейки["inputType"] = 1 Тогда // обязательное заполнение
		ЦелеваяЯчейка.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	ЦелеваяЯчейка.Защита = Ложь;
	
	КонтекстФормы.СтруктураДанныхОтчета.Вставить(ЦелеваяЯчейка.Имя, ЦелеваяЯчейка.Значение);
	
	Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
		ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(ЦелеваяЯчейка.Формат);
		Если ЗначениеЗаполнено(ФорматПредставленияНуля) Тогда
			КонтекстФормы.СтруктураДанныхОтчета.Вставить("ЧН" + ЦелеваяЯчейка.Имя, ФорматПредставленияНуля);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЦелевойЯчейки = Новый Структура("inputType, vldType, vld, dic");
	Для каждого ПараметрЦелевойЯчейки Из ПараметрыЦелевойЯчейки Цикл
		ПараметрыЦелевойЯчейки[ПараметрЦелевойЯчейки.Ключ] = ПараметрыЯчейки[ПараметрЦелевойЯчейки.Ключ];
	КонецЦикла;
	Если ЭтоКлючеваяЯчейка Тогда
		ИмяОпцийСтроки = ИмяПоказателяЯчейки(ПараметрыКолонки["codesection"], ПараметрыСтроки["code"], "", Многострочный);
		ПараметрыЦелевойЯчейки.Вставить("grv", ИмяОпцийСтроки);
	КонецЕсли;
	Если ЭтоСпецифика Тогда
		ПараметрыЦелевойЯчейки.Вставить("fld", ПараметрыКолонки["fld"]);
		Если ПустаяСтрока(ПараметрыСтроки["grv"]) Тогда
			ЦелеваяЯчейка.Защита = Истина;
			ЦелеваяЯчейка.АвтоОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЕсли;
	КонтекстФормы.СтруктураОписанийЯчеек.Вставить(ИмяЯчейки, ПараметрыЦелевойЯчейки);
	
КонецПроцедуры

Функция РезультирующиеПараметрыЯчейки(ПараметрыКолонки, ПараметрыСтроки)
	
	КодКолонки = ПараметрыКолонки["code"];
	
	ПараметрыЯчеекСтроки = ПараметрыСтроки["cell"];
	
	ПараметрыЯчейки = Новый Соответствие;
	
	МассивИменПараметров = Новый Массив;
	МассивИменПараметров.Добавить("column");
	МассивИменПараметров.Добавить("format");
	МассивИменПараметров.Добавить("inputType");
	МассивИменПараметров.Добавить("dic");
	МассивИменПараметров.Добавить("vldType");
	МассивИменПараметров.Добавить("vld");
	МассивИменПараметров.Добавить("pr_inp");
	МассивИменПараметров.Добавить("default");
	
	Для каждого ИмяПараметра Из МассивИменПараметров Цикл
		
		Если ПараметрыЯчеекСтроки = Неопределено Тогда
			ЗначениеПараметра = ПараметрыКолонки[ИмяПараметра];
		Иначе
			ПараметрыЯчейкиСтроки = ПараметрыЯчеекСтроки[КодКолонки];
			Если ПараметрыЯчейкиСтроки = Неопределено Тогда
				ЗначениеПараметра = ПараметрыКолонки[ИмяПараметра]
			Иначе
				ЗначениеПараметра = ПараметрыЯчейкиСтроки[ИмяПараметра];
			КонецЕсли; 
		КонецЕсли;
		
		ПараметрыЯчейки.Вставить(ИмяПараметра, ?(ЗначениеПараметра = Неопределено, "", ЗначениеПараметра));
		
	КонецЦикла;
	
	ЗначениеПараметра = ?(ЗначениеЗаполнено(ПараметрыЯчейки["pr_inp"]), ПараметрыЯчейки["pr_inp"], ПараметрыСтроки["pr_inp"]);
	ПараметрыЯчейки.Вставить("pr_inp",  ?(ЗначениеЗаполнено(ЗначениеПараметра), ЗначениеПараметра, "false"));
	ПараметрыЯчейки.Вставить("inputType", Число("0" + ПараметрыЯчейки["inputType"]));
	ПараметрыЯчейки.Вставить("vldType",   Число("0" + ПараметрыЯчейки["vldType"]));
	
	Возврат ПараметрыЯчейки;
	
КонецФункции

Функция РезультатВычисленияУсловияДляЯчейки(КонтекстФормы, Выражение)
	
	КонтекстФормы.КвоОшибокКС = 0;
	
	Возврат (ЗначениеЗаполнено(Выражение) И РезультатВычисленияВыраженияИзСтроки(КонтекстФормы, Выражение));
	
КонецФункции
#КонецОбласти

#Область ПроцедурыПроверкиУниверсальногоОтчета

Процедура ПроверитьКонтрольныеСоотношенияВОтчетеВФоне(ПараметрыДляПроверки, АдресХранилища) Экспорт 
	Результат = ПроверитьКонтрольныеСоотношенияВОтчете(ПараметрыДляПроверки.Параметры);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
КонецПроцедуры

Функция ПроверитьКонтрольныеСоотношенияВОтчете(ПараметрыДляПроверки) Экспорт 
	
	Если ПараметрыДляПроверки.Свойство("НеобходимоЗагрузитьШаблон") И ПараметрыДляПроверки.НеобходимоЗагрузитьШаблон Тогда
		ДанныеШаблона = ПолучитьШаблон(ПараметрыДляПроверки.ИмяФормыИсходной, ПараметрыДляПроверки.ИмяМакетаШаблона);
		ПараметрыДляПроверки.ДанныеШаблонаОтчета.ИмяФайлаШаблона = ДанныеШаблона.ИмяФайлаШаблона;
		ПараметрыДляПроверки.ДанныеШаблонаОтчета.Шаблон = Новый ХранилищеЗначения(ДанныеШаблона.Шаблон);
	КонецЕсли;
	
	Если ПараметрыДляПроверки.Свойство("ДанныеШаблонаОтчета") Тогда
		Ошибка = Неопределено;
		ПодготовитьДанныеОтчетаПоШаблону(ПараметрыДляПроверки, ПараметрыДляПроверки.ДанныеШаблонаОтчета, Ошибка);
		Если Ошибка = Истина Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось загрузить макет");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанныхПредидущегоПериода = Неопределено;
	Если ПараметрыДляПроверки.Свойство("ПредидущийПериод") Тогда 
		Док = ПолучитьДокументПериода(ПараметрыДляПроверки.ПредидущийПериод, ПараметрыДляПроверки.ОбособленноеПодразделение);
		Если ЗначениеЗаполнено(Док) Тогда 
			ВыгрузкаПредидущегоПериода = ТекстВыгрузкиОтчетаСтатистики(Док, ПараметрыДляПроверки);
			Если ЗначениеЗаполнено(ВыгрузкаПредидущегоПериода) Тогда 
				ЗагруженныеДанные = Новый ХранилищеЗначения(ПараметрыДляПроверки);
				Ошибка = Неопределено;
				Если Не ЗагрузитьОтчет(ПараметрыДляПроверки, ВыгрузкаПредидущегоПериода, Ошибка, Истина) Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить выгрузку предидущего периода:"+Ошибка);
				Иначе
					СтруктураДанныхПредидущегоПериода = Новый ХранилищеЗначения(ПараметрыДляПроверки.СтруктураДанныхОтчета);
					СписокФормРазделовПредидущегоПериода = Новый ХранилищеЗначения(ПараметрыДляПроверки.СтруктураРеквизитовФормы.СписокФормРазделов);
				КонецЕсли;
				
				ПараметрыДляПроверки = ЗагруженныеДанные.Получить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыДляПроверки.Свойство("НеобходимоПолучениеВыгрузкиТекущегоПериода") Тогда 
		АдресВоВремХранилище = ТекстВыгрузкиОтчетаСтатистики(ПараметрыДляПроверки.СтруктураРеквизитовФормы.мСохраненныйДок, ПараметрыДляПроверки);
		
		Ошибка = Неопределено;
		Если Не ЗагрузитьОтчет(ПараметрыДляПроверки, АдресВоВремХранилище, Ошибка, Истина) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось загрузить отчет:"+Ошибка);
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ПараметрыДляПроверки.Свойство("ВыгрузкаОтчетаТекущегоПериода") Тогда 
		ПараметрСтрокаXML = (ТипЗнч(ПараметрыДляПроверки.ВыгрузкаОтчетаТекущегоПериода.Получить()) = Тип("Строка"));
		Если ПараметрСтрокаXML Тогда 
			АдресВоВремХранилище = ПараметрыДляПроверки.ВыгрузкаОтчетаТекущегоПериода.Получить();
		Иначе 
			АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ПараметрыДляПроверки.ВыгрузкаОтчетаТекущегоПериода.Получить());
		КонецЕсли;
		
		Ошибка = Неопределено;
		Если Не ЗагрузитьОтчет(ПараметрыДляПроверки, АдресВоВремХранилище, Ошибка, ПараметрСтрокаXML) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось загрузить отчет:"+Ошибка);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанныхПредидущегоПериода <> Неопределено Тогда
		ПараметрыДляПроверки.Вставить("СтруктураДанныхПредидущегоПериода", СтруктураДанныхПредидущегоПериода.Получить());
		ПараметрыДляПроверки.СтруктураРеквизитовФормы.Вставить("СписокФормРазделовПредидущегоПериода", СписокФормРазделовПредидущегоПериода.Получить());
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);
	
	ОбщееЧислоОшибок    = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	
	СтруктураОшибок = Новый Структура;
	
	Для каждого КонтрольноеСоотношение Из ПараметрыДляПроверки.ТаблицаКонтрольныхСоотношений Цикл
		
		Идентификатор          = КонтрольноеСоотношение.Идентификатор;
		Условие                = СокрЛП(КонтрольноеСоотношение.Условие);
		Формула                = СокрЛП(КонтрольноеСоотношение.Формула);
		УсловиеПериод          = СокрЛП(КонтрольноеСоотношение.УсловиеПериод);
		Описание               = СокрЛП(КонтрольноеСоотношение.Описание);
		ОбязательностьКонтроля = КонтрольноеСоотношение.ОбязательностьКонтроля;
		РазрядностьОкругления  = КонтрольноеСоотношение.РазрядностьОкругления;
		ДопустимоеОтклонение   = КонтрольноеСоотношение.ДопустимоеОтклонение;
		
		СоотношениеВыполнено = РезультатПроверкиКонтрольногоСоотношения(ПараметрыДляПроверки, Формула, Условие, УсловиеПериод, РазрядностьОкругления, ДопустимоеОтклонение);
		
		Если НЕ СоотношениеВыполнено Тогда
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ЭтоОшибка = Истина;
		Иначе
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ЭтоОшибка = Ложь;
		КонецЕсли;
		
		Описание = СтрЗаменить(ВРег(Лев(Описание, 1)) + Сред(Описание, 2), "  ", " ");
		Расшифровка = СтрЗаменить(СтрЗаменить(?(ЗначениеЗаполнено(Условие), "Если" + Символы.ПС + Условие + "," + Символы.ПС + "тогда:" + Символы.ПС, "") + Формула, "|", " "),"  ", " ");
		ЭтоОшибка = ЭтоОшибка Или (ПараметрыДляПроверки.КвоОшибокКС > 0 И ОбязательностьКонтроля);
		
		Попытка
			ВерсияШаблона = "XML-шаблон Росстата версии от " + ПараметрыДляПроверки.СтруктураАтрибутовОтчета.version;
		Исключение
			ВерсияШаблона = "XML-шаблон Росстата";
		КонецПопытки;
		
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ""));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ВерсияШаблона));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Описание));
		Если ПараметрыДляПроверки.КвоОшибокКС > 0 Тогда
			Стр1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), "Не удалось вычислить условие! Соотношение не используется.");
			Стр2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ?(ОбязательностьКонтроля, "", "Контролировать не обязательно"));
			СтруктураОшибок.Вставить("Комментарий" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Стр2 + Символы.ПС + Стр1);
		Иначе
			Стр2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ?(ОбязательностьКонтроля, "", "Контролировать не обязательно"));
			СтруктураОшибок.Вставить("Комментарий" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Стр2);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
	СтруктураРезультата.Вставить("ЭтоАвтопроверкаСтатистики");
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ВидыОбрабатываемыхНеравенств()
	СтрокаНеравенств = "|>=|;|<=|;|>|;|<|";
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаНеравенств, ";", Истина);
КонецФункции

Функция КоличествоВхожденийНеравенств(Формула, ВидыНеравенств)
	Результат = 0;
	Для Каждого Элемент Из ВидыНеравенств Цикл 
		Результат = Результат + СтрЧислоВхождений(Формула, Элемент);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура РазложитьФормулуНаДвеПодформулы(Формула, Подформула1, Подформула2, ВидыНеравенств)
	Подформула1 = "";
	Подформула2 = "";
	ИнформацияОВхождениях = Новый Соответствие;
	Для Каждого Неравенство Из ВидыНеравенств Цикл
		ЧислоВхождений = СтрЧислоВхождений(Формула, Неравенство);
		Если ЧислоВхождений = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивНомеровВхождений = Новый Массив;
		НомерВхождения = 0;
		Пока Истина Цикл
			НомерВхождения = НомерВхождения + 1;
			Инд = СтрНайти(Формула, Неравенство, , , НомерВхождения);
			Если Инд = 0 Тогда 
				Прервать;
			КонецЕсли;
			МассивНомеровВхождений.Добавить(Инд);
		КонецЦикла;
		
		ИнформацияОВхождениях[Неравенство] = Новый Структура("Количество,МассивНомеровВхождений", ЧислоВхождений,МассивНомеровВхождений);
	КонецЦикла;
	
	В1 = "";
	В2 = "";
	Поз1 = 0;
	Поз2 = 0;
	Для Каждого КЗ Из ИнформацияОВхождениях Цикл 
		Для Каждого НВ Из КЗ.Значение.МассивНомеровВхождений Цикл 
			Если В1 = "" Тогда
				В1 = КЗ.Ключ;
				Поз1 = НВ;
			ИначеЕсли В2 = "" Тогда 
				В2 = КЗ.Ключ;
				Поз2 = НВ;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Поз1 > Поз2 Тогда 
		Т = Поз1;
		Поз1 = Поз2;
		Поз2 = Т;
		Т = В1;
		В1 = В2;
		В2 = Т;
	КонецЕсли;
	
	Подформула1 = Лев(Формула, Поз2 - 1);
	Подформула2 = Сред(Формула, Поз1 + СтрДлина(В1));
КонецПроцедуры

Функция ФормулаСодержитЛогическиеВыражения(Формула)
	Ф = ВРег(Формула);
	Возврат (СтрЧислоВхождений(Ф,"AND") > 0) Или (СтрЧислоВхождений(Ф,"OR") > 0) Или (СтрЧислоВхождений(Ф,"XOR") > 0);
КонецФункции

Функция РазложитьФормулуНаПодформулы(Формула, ВидыНеравенств)
	// Возврат преобразованной формулы для выражений вида A<=B<=C и им подобным
	// Их будем интерпретировать как (A<=B) И (B<=C)
	Если ФормулаСодержитЛогическиеВыражения(Формула) Тогда
		Возврат Формула;
	КонецЕсли;
	
	Результат = Новый Массив;
	Результат.Добавить(Формула);
	
	Подформула1 = "";
	Подформула2 = "";
	
	ПромежуточныйРезультат = Новый Массив;
	Пока Истина Цикл 
		Для Каждого Элт Из Результат Цикл 
			Если КоличествоВхожденийНеравенств(Элт, ВидыНеравенств) <= 1 Тогда 
				ПромежуточныйРезультат.Добавить(Элт);
			Иначе
				РазложитьФормулуНаДвеПодформулы(Формула, Подформула1, Подформула2, ВидыНеравенств);
				ПромежуточныйРезультат.Добавить(Подформула1);
				ПромежуточныйРезультат.Добавить(Подформула2);
			КонецЕсли;
		КонецЦикла;
		
		Если ПромежуточныйРезультат.Количество() <= Результат.Количество() Тогда 
			Прервать;
		КонецЕсли;
		
		Результат = ПромежуточныйРезультат;
		ПромежуточныйРезультат = Новый Массив;
	КонецЦикла;
	
	Если Результат.Количество() = 1 Тогда 
		Возврат Формула;
	КонецЕсли;
	
	РезСтр = "("+Результат[0]+")";
	Для Инд = 1 По Результат.ВГраница() Цикл 
		РезСтр = РезСтр + "AND("+Результат[Инд]+")";
	КонецЦикла;
	Возврат РезСтр;
КонецФункции

Функция РезультатПроверкиКонтрольногоСоотношения(ПараметрыДляПроверки, Формула, Условие, УсловиеПериод, РазрядностьОкругления, ДопустимоеОтклонение) Экспорт 
	
	ВидыНеравенств = ВидыОбрабатываемыхНеравенств();
	ПараметрыДляПроверки.КвоОшибокКС = 0;
	РезУсловиеПериод = РезультатВычисленияВыраженияИзСтроки(ПараметрыДляПроверки, УсловиеПериод, РазрядностьОкругления, ДопустимоеОтклонение);
	
	Если ПараметрыДляПроверки.КвоОшибокКС > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РезУсловиеПериод Тогда
		
		ПреобразованноеУсловие = РазложитьФормулуНаПодформулы(Условие, ВидыНеравенств);
		ПараметрыДляПроверки.КвоОшибокКС = 0;
		РезУсловие = РезультатВычисленияВыраженияИзСтроки(ПараметрыДляПроверки, ПреобразованноеУсловие, РазрядностьОкругления, ДопустимоеОтклонение);
		
		Если ПараметрыДляПроверки.КвоОшибокКС > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
		Попытка
			Если ЗначениеЗаполнено(Условие) Тогда 
				ВектРезУсловие = ВекторныйРезультатВычисленияВыраженияИзСтроки(ПараметрыДляПроверки, ПреобразованноеУсловие, РазрядностьОкругления, ДопустимоеОтклонение);
			КонецЕсли;
		Исключение
			ВектРезУсловие = Неопределено;
		КонецПопытки;
		
		Если ТипЗнч(ВектРезУсловие) <> Тип("Массив")
			Или (ВектРезУсловие.Количество() = 1 И ВектРезУсловие[0].Количество() = 1)
			Или ПараметрыДляПроверки.КвоОшибокКС > 0 Тогда
			
			ВектРезУсловие = Неопределено;
		КонецЕсли;
		
		ПреобразованнаяФормула = РазложитьФормулуНаПодформулы(Формула, ВидыНеравенств);
		Если Не ВектРезУсловие = Неопределено Тогда 
			ПараметрыДляПроверки.КвоОшибокКС = 0;
			Попытка
				ВектРезФормула = ВекторныйРезультатВычисленияВыраженияИзСтроки(ПараметрыДляПроверки, ПреобразованнаяФормула, РазрядностьОкругления, ДопустимоеОтклонение, ВектРезУсловие);
				Если ТипЗнч(ВектРезФормула) <> Тип("Массив")
					Или ПараметрыДляПроверки.КвоОшибокКС > 0 Тогда
					
					ВектРезФормула = Неопределено;
				КонецЕсли;
			Исключение
				ВектРезФормула = Неопределено;
			КонецПопытки;
			
			Если ВектРезФормула <> Неопределено
				И ПараметрыДляПроверки.КвоОшибокКС = 0
				И ВектРезФормула.Количество() = ВектРезУсловие.Количество()
				И ВектРезФормула[0].Количество() = ВектРезУсловие[0].Количество() Тогда 
				
				Результат = Истина;
				Для Инд1 = 0 По ВектРезФормула.ВГраница() Цикл
					Для Инд2 = 0 По ВектРезФормула[0].ВГраница() Цикл
						Если ВектРезУсловие[Инд1][Инд2] Тогда 
							Результат = Результат И ВектРезФормула[Инд1][Инд2];
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Возврат Результат;
			ИначеЕсли ВектРезФормула <> Неопределено
				И ПараметрыДляПроверки.КвоОшибокКС = 0
				И (ВектРезФормула.Количество() <> ВектРезУсловие.Количество()
				Или ВектРезФормула[0].Количество() <> ВектРезУсловие[0].Количество()) Тогда
				
				// Разные размерности!
				Результат = Ложь;
				Для Инд1 = 0 По ВектРезУсловие.ВГраница() Цикл
					Для Инд2 = 0 По ВектРезУсловие[0].ВГраница() Цикл
						Результат = Результат Или ВектРезУсловие[Инд1][Инд2];
					КонецЦикла;
				КонецЦикла;
				
				Если Результат Тогда 
					Результат = Ложь;
					Для Инд1 = 0 По ВектРезФормула.ВГраница() Цикл
						Для Инд2 = 0 По ВектРезФормула[0].ВГраница() Цикл
							Результат = Результат Или ВектРезФормула[Инд1][Инд2];
						КонецЦикла;
					КонецЦикла;
				Иначе 
					Возврат Истина;
				КонецЕсли;
				
				Возврат Результат;
			ИначеЕсли ВектРезФормула = Неопределено
				И ПараметрыДляПроверки.КвоОшибокКС = 0 Тогда
				
				РезФормула = РезультатВычисленияВыраженияИзСтроки(ПараметрыДляПроверки, ПреобразованнаяФормула, РазрядностьОкругления, ДопустимоеОтклонение);
				
				Результат = Истина;
				Для Инд1 = 0 По ВектРезУсловие.ВГраница() Цикл
					Для Инд2 = 0 По ВектРезУсловие[0].ВГраница() Цикл
						Если ВектРезУсловие[Инд1][Инд2] Тогда 
							Результат = Результат И РезФормула;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		Если РезУсловие Тогда
			
			Попытка
				ПараметрыДляПроверки.КвоОшибокКС = 0;
				ВектРезФормула = ВекторныйРезультатВычисленияВыраженияИзСтроки(ПараметрыДляПроверки, ПреобразованнаяФормула, РазрядностьОкругления, ДопустимоеОтклонение);
				Если ВектРезФормула <> Неопределено
					И ПараметрыДляПроверки.КвоОшибокКС = 0 Тогда 
					
					Результат = Истина;
					Для Инд1 = 0 По ВектРезФормула.ВГраница() Цикл
						Для Инд2 = 0 По ВектРезФормула[0].ВГраница() Цикл
							Результат = Результат И ВектРезФормула[Инд1][Инд2];
						КонецЦикла;
					КонецЦикла;
					
					Возврат Результат;
				КонецЕсли;
			Исключение
				ВектРезФормула = Неопределено;
			КонецПопытки;
			
			ПараметрыДляПроверки.КвоОшибокКС = 0;
			РезФормула = РезультатВычисленияВыраженияИзСтроки(ПараметрыДляПроверки, ПреобразованнаяФормула, РазрядностьОкругления, ДопустимоеОтклонение);
			
			Если ПараметрыДляПроверки.КвоОшибокКС > 0 Тогда
				Возврат Истина;
			Иначе
				Возврат РезФормула;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьМатрицу(КоличествоСтрок,КоличествоСтолбцов)
	Результат = Новый Массив(КоличествоСтолбцов);
	Для Инд =0 По КоличествоСтолбцов - 1 Цикл 
		Результат[Инд] = Новый Массив(КоличествоСтрок);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьСтроковыйКлюч(Парам)
	Возврат Прав("000000"+Парам.КодСтроки, 6) + Парам.Специфика;
КонецФункции

Функция СтроковыйКлючВПараметры(Ключ)
	Возврат Новый Структура("КодСтроки,Специфика", Число(Лев(Ключ, 6)), Сред(Ключ, 7));
КонецФункции

Процедура ДополнитьЗначенияЭлементов(ТаблицаЭлементов)
	ВсеКлючи = Новый Соответствие;
	ВсеСтрокиСИндексом = Новый Соответствие;
	Для Каждого СтрТаблицаЭлементов Из ТаблицаЭлементов Цикл 
		Для Каждого Стр Из СтрТаблицаЭлементов.ТаблЗначЭлем Цикл
			СтрКлюч = ПолучитьСтроковыйКлюч(Стр);
			ВсеКлючи.Вставить(СтрКлюч);
			
			Если Стр.ИндСтроки > 0 Тогда 
				ВсеСтрокиСИндексом.Вставить(Стр.КодСтроки, 1);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВсеКлючиЭлемента = Новый Соответствие;
	Для Каждого СтрТаблицаЭлементов Из ТаблицаЭлементов Цикл 
		ВсеКлючиЭлемента.Очистить();
		
		Для Каждого Стр Из СтрТаблицаЭлементов.ТаблЗначЭлем Цикл
			СтрКлюч = ПолучитьСтроковыйКлюч(Стр);
			ВсеКлючиЭлемента.Вставить(СтрКлюч, 0);
		КонецЦикла;
		
		Для Каждого КЗ Из ВсеКлючи Цикл 
			Если ВсеКлючиЭлемента.Получить(КЗ.Ключ) = Неопределено Тогда 
				НовСтр = СтрТаблицаЭлементов.ТаблЗначЭлем.Добавить();
				Ключ = СтроковыйКлючВПараметры(КЗ.Ключ);
				НовСтр.КодСтроки = Ключ.КодСтроки;
				НовСтр.Специфика = Ключ.Специфика;
				НовСтр.Сумма = 0;
				Инд = 0;
				Пока Истина Цикл 
					Инд = Инд + 1;
					Если СтрТаблицаЭлементов.ТаблЗначЭлем.Колонки.Найти("Графа" + Инд) = Неопределено Тогда 
						Прервать;
					КонецЕсли;
					НовСтр["Графа" + Инд] = 0;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		СтрТаблицаЭлементов.ТаблЗначЭлем.Сортировать("КодСтроки, Специфика");
	КонецЦикла;
	
	МаксимумыСтрок = Новый Соответствие;
	Для Каждого СтрТаблицаЭлементов Из ТаблицаЭлементов Цикл
		МаксимумыСтрок.Очистить();
		Для Каждого Стр Из СтрТаблицаЭлементов.ТаблЗначЭлем Цикл
			Если ВсеСтрокиСИндексом.Получить(Стр.КодСтроки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если МаксимумыСтрок.Получить(Стр.КодСтроки) = Неопределено Тогда 
				МаксимумыСтрок.Вставить(Стр.КодСтроки, 1);
			Иначе
				МаксимумыСтрок.Вставить(Стр.КодСтроки, МаксимумыСтрок.Получить(Стр.КодСтроки) + 1);
			КонецЕсли;
			
			Стр.ИндСтроки = МаксимумыСтрок.Получить(Стр.КодСтроки);
			Если Стр.Специфика = "" Тогда 
				Стр.Сумма = 0;
				Инд = 0;
				Пока Истина Цикл 
					Инд = Инд + 1;
					Если СтрТаблицаЭлементов.ТаблЗначЭлем.Колонки.Найти("Графа" + Инд) = Неопределено Тогда 
						Прервать;
					КонецЕсли;
					Стр["Графа" + Инд] = 0;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ВекторныйРезультатВычисленияВыраженияИзСтроки(ПараметрыДляПроверки, ТекстовоеПредставлениеВыражения, РазрядностьОкругления = 2, Допустимоетклонение = 0, МатрицаУсловий = Неопределено) Экспорт 
	
	ТекстовоеВыражение = СтрЗаменить(СтрЗаменить(СтрЗаменить(СокрЛП(ТекстовоеПредставлениеВыражения), " ", ""), Символы.НПП, ""), Символы.Таб, "");
	ТекстовоеВыражение = ВРег(СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекстовоеВыражение, Символы.ПС, ""), Символы.ВК, ""), Символ(7), ""));
	
	ТаблицаЭлементов = Новый ТаблицаЗначений; // таблица содержит координаты ячеек таблицы и дополнительные параметры
	ТаблицаЭлементов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("СтрЗаменитель", Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("ТекущийПериод", Новый ОписаниеТипов("Булево"));
	ТаблицаЭлементов.Колонки.Добавить("ОператорСуммы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0))); // номер оператора суммирования
	ТаблицаЭлементов.Колонки.Добавить("Раздел",        Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("Строки",        Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("Графы",         Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("Специфика1",    Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("Специфика2",    Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("Специфика3",    Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("МассивСтрок",   Новый ОписаниеТипов("Массив"));
	ТаблицаЭлементов.Колонки.Добавить("МассивГраф",    Новый ОписаниеТипов("Массив"));
	ТаблицаЭлементов.Колонки.Добавить("МассивСпец1",   Новый ОписаниеТипов("Массив"));
	ТаблицаЭлементов.Колонки.Добавить("МассивСпец2",   Новый ОписаниеТипов("Массив"));
	ТаблицаЭлементов.Колонки.Добавить("МассивСпец3",   Новый ОписаниеТипов("Массив"));
	ТаблицаЭлементов.Колонки.Добавить("ИндексЛогПодв", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0))); // индекс логического подвыражения
	ТаблицаЭлементов.Колонки.Добавить("СпособВывода",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2,0))); // способ вывода значений элемента
	ТаблицаЭлементов.Колонки.Добавить("ТаблЗначЭлем",  Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ВыделитьЭлементыИзСтрокиВыражения(ПараметрыДляПроверки, ТекстовоеВыражение, ТаблицаЭлементов);
	
	Если СтрНайти(ТекстовоеВыражение, "SUM") > 0 Тогда // есть оператор суммирования
		ОпределитьОбластьДействияОператораСуммы(ТекстовоеВыражение, ТаблицаЭлементов, ПараметрыДляПроверки.КвоОшибокКС);
	КонецЕсли;
	
	ДополнительныеДействияСравнения = ТипЗнч(ПараметрыДляПроверки) = Тип("Структура")
										И ПараметрыДляПроверки.Свойство("СтруктураДанныхПредидущегоПериода")
										И (СтрНайти(ТекстовоеПредставлениеВыражения, "{{") > 0);
	
	ПолучитьЗначенияОбластейЭлементов(ПараметрыДляПроверки, ТаблицаЭлементов, РазрядностьОкругления, ПараметрыДляПроверки.КвоОшибокКС);
	Если ДополнительныеДействияСравнения Тогда 
		ДополнитьЗначенияЭлементов(ТаблицаЭлементов);
	КонецЕсли;
	
	Если ПараметрыДляПроверки.КвоОшибокКС > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыполнитьЗаменуФункцийЯзыкаКС(ТекстовоеВыражение);
	
	Если СтрНайти(ТекстовоеВыражение, "AND") > 0 ИЛИ СтрНайти(ТекстовоеВыражение, "OR") > 0 Тогда // есть логические предикаты
		ТекстовоеВыражение = СтрЗаменить(ТекстовоеВыражение, "AND", ") И (");
		ТекстовоеВыражение = СтрЗаменить(ТекстовоеВыражение, "OR", ") ИЛИ (");
		ТекстовоеВыражение = "(" + ТекстовоеВыражение + ")";
	КонецЕсли;
	
	ТекстовоеВыражение = СтрЗаменить(ТекстовоеВыражение, "TRUE",  "Истина ");
	ТекстовоеВыражение = СтрЗаменить(ТекстовоеВыражение, "FALSE", "Ложь ");
	
	Если СтрНайти(ТекстовоеВыражение, "&NP") > 0 Тогда // есть условие на период
		ВычислитьИЗаменитьУсловиеНаПериод(ПараметрыДляПроверки, ТекстовоеВыражение);
	КонецЕсли;
	
	ТекстовоеВыражение = СтрЗаменить(ТекстовоеВыражение, "|", "");
	
	// Если нет логических предикатов в выражении - массив содержит всю строку выражения
	МассивПодвыражений = МассивЛогическихПодвыраженийВыделитьИНазначитьИндексВТаблице(ТекстовоеВыражение, ТаблицаЭлементов);
	ТекстовоеВыражениеИсходное = ТекстовоеВыражение;
	ИтоговыеМатрицы = Новый Массив(МассивПодвыражений.Количество());
	Для Инд = 0 По МассивПодвыражений.ВГраница() Цикл
		СтрРезультатВычисления = ?(ВекторныйРезультатВычисленияЛогическогоПодвыражения(ПараметрыДляПроверки, ДополнительныеДействияСравнения, ИтоговыеМатрицы[Инд],
									МассивПодвыражений[Инд], ТаблицаЭлементов, Инд, ПараметрыДляПроверки.КвоОшибокКС), "Истина", "Ложь");
	КонецЦикла;
	
	Для Инд = 0 По МассивПодвыражений.ВГраница() Цикл
		Если ТипЗнч(ИтоговыеМатрицы[Инд]) <> Тип("Массив")
			Или ИтоговыеМатрицы[Инд].Количество() = 0
			Или ИтоговыеМатрицы[Инд].Количество() <> ИтоговыеМатрицы[0].Количество()
			Или ИтоговыеМатрицы[Инд][0].Количество() <> ИтоговыеМатрицы[0][0].Количество() Тогда 
			
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	МатрицаРезультата = ПолучитьМатрицу(ИтоговыеМатрицы[0][0].Количество(), ИтоговыеМатрицы[0].Количество());
	ПроверятьПоУсловию = Ложь;
	Если ТипЗнч(МатрицаУсловий) = Тип("Массив")
		И МатрицаУсловий.ВГраница() = МатрицаРезультата.ВГраница()
		И МатрицаУсловий[0].ВГраница() = МатрицаРезультата[0].ВГраница() Тогда 
		ПроверятьПоУсловию = Истина;
	КонецЕсли;
	
	Для Инд1 = 0 По МатрицаРезультата.ВГраница() Цикл
		Для Инд2 = 0 По МатрицаРезультата[0].ВГраница() Цикл
			ТекстовоеВыражение = ТекстовоеВыражениеИсходное;
			Для Инд = 0 По МассивПодвыражений.ВГраница() Цикл
				ТекстовоеВыражение = СтрЗаменить(ТекстовоеВыражение, "~" + Формат(Инд, "ЧН=; ЧГ=") + "~", ИтоговыеМатрицы[Инд][Инд1][Инд2]);
			КонецЦикла;
			
			Если ПроверятьПоУсловию Тогда
				Если МатрицаУсловий[Инд1][Инд2] Тогда
					МатрицаРезультата[Инд1][Инд2] = Вычислить(ТекстовоеВыражение);
				Иначе
					МатрицаРезультата[Инд1][Инд2] = Истина;
				КонецЕсли;
			Иначе 
				МатрицаРезультата[Инд1][Инд2] = Вычислить(ТекстовоеВыражение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат МатрицаРезультата;

КонецФункции

Функция ВекторныйРезультатВычисленияЛогическогоПодвыражения(ПараметрыДляПроверки, ЭтоМежПериоднаяПроверка, МатрицаРезультата, ШаблонВыражения, ТаблицаЭлементов, ИндексПодвыражения = 0, СчетчикОшибок = 0)
	
	Если НЕ ЗначениеЗаполнено(ШаблонВыражения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭлементыВыражения = ТаблицаЭлементов.НайтиСтроки(Новый Структура("ИндексЛогПодв", ИндексПодвыражения));
	Если ЭлементыВыражения.Количество() = 0 Тогда
		Возврат Вычислить(ШаблонВыражения);
	КонецЕсли;
	
	ИспользуетсяПредыдущийПериод = Ложь;
	
	ТекСтроки = "";
	ТекГрафы  = "";
	КоличествоСтрок = 1;
	КоличествоГраф  = 1;
	ОТЧ = Новый ОписаниеТипов("Число");
	
	Для каждого ЭлементВыражения Из ЭлементыВыражения Цикл // первый цикл по свободным элементам
		НаличиеСравненияМногострочнойЧастиМеждуПериодами = (ЭтоМежПериоднаяПроверка И ЭлементВыражения.ТаблЗначЭлем.НайтиСтроки(Новый Структура("ИндСтроки", 1)).Количество() > 0);
		
		Если ЭлементВыражения.ОператорСуммы = 0 Тогда // элемент выражения не входит в оператор суммы
			
			Если НаличиеСравненияМногострочнойЧастиМеждуПериодами Тогда
				ЭлементВыражения.СпособВывода = 6;
			ИначеЕсли ЭлементВыражения.МассивСтрок.Количество() > 1 И ЭлементВыражения.МассивГраф.Количество() > 1 Тогда
				Если ТекГрафы  = "" Тогда
					ТекГрафы  = ЭлементВыражения.Графы;
				КонецЕсли;
				Если ТекСтроки = "" Тогда
					ТекСтроки = ЭлементВыражения.Строки;
				КонецЕсли;
				Если (КоличествоСтрок > 1 И ТекСтроки <> ЭлементВыражения.Строки)
					ИЛИ (КоличествоГраф > 1  И ТекГрафы  <> ЭлементВыражения.Графы) Тогда
					СчетчикОшибок = СчетчикОшибок + 1;
					Возврат Истина;
				КонецЕсли;
				ЭлементВыражения.СпособВывода = 3; // разворачивать элемент по строкам и столбцам
				КоличествоСтрок = ЭлементВыражения.МассивСтрок.Количество();
				КоличествоГраф  = ЭлементВыражения.МассивГраф.Количество();
			ИначеЕсли ЭлементВыражения.МассивГраф.Количество() > 1 Тогда
				Если ТекГрафы  = "" Тогда
					ТекГрафы  = ЭлементВыражения.Графы;
				КонецЕсли;
				Если КоличествоГраф > 1 И ТекГрафы <> ЭлементВыражения.Графы Тогда
					СчетчикОшибок = СчетчикОшибок + 1;
					Возврат Истина;
				КонецЕсли;
				ЭлементВыражения.СпособВывода = 2; // разворачивать элемент по графам
				КоличествоГраф  = ЭлементВыражения.МассивГраф.Количество();
			ИначеЕсли ЭлементВыражения.МассивСтрок.Количество() > 1 Тогда
				Если ТекСтроки = "" Тогда
					ТекСтроки = ЭлементВыражения.Строки;
				КонецЕсли;
				Если КоличествоСтрок > 1 И ТекСтроки <> ЭлементВыражения.Строки Тогда
					СчетчикОшибок = СчетчикОшибок + 1;
					Возврат Истина;
				КонецЕсли;
				ЭлементВыражения.СпособВывода = 1; // разворачивать элемент по строкам
				КоличествоСтрок = ЭлементВыражения.МассивСтрок.Количество();
			ИначеЕсли ЭлементВыражения.МассивСтрок.Количество() = 1 Тогда 
				ЧислоСтр = ОТЧ.ПривестиЗначение(ЭлементВыражения.МассивСтрок[0]);
				Если ЧислоСтр = 0 Или ЭлементВыражения.ТаблЗначЭлем.НайтиСтроки(Новый Структура("КодСтроки", ЧислоСтр)).Количество() <= 1 Тогда 
					ЭлементВыражения.СпособВывода = 0;
				Иначе
					ЭлементВыражения.СпособВывода = 5;
				КонецЕсли;
			Иначе 
				ЭлементВыражения.СпособВывода = 0; // не разворачивать - содержит единственное значение
			КонецЕсли
			
		КонецЕсли;
		Если НЕ ЭлементВыражения.ТекущийПериод Тогда
			ИспользуетсяПредыдущийПериод = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуетсяПредыдущийПериод 
		И (ТипЗнч(ПараметрыДляПроверки) <> Тип("Структура") Или Не ПараметрыДляПроверки.Свойство("СтруктураДанныхПредидущегоПериода")) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого ЭлементВыражения Из ЭлементыВыражения Цикл // второй цикл по элементам, входящим в операторы суммы
		Если ЭлементВыражения.ОператорСуммы > 0 Тогда // элемент выражения входит в оператор суммы
			
			Если КоличествоСтрок > 1 И КоличествоГраф > 1 Тогда
				Если ТекГрафы = ЭлементВыражения.Графы И ТекСтроки = ЭлементВыражения.Строки Тогда
					ЭлементВыражения.СпособВывода = 3; // разворачивать элемент по строкам и графам
				ИначеЕсли ТекГрафы = ЭлементВыражения.Графы Тогда
					ЭлементВыражения.СпособВывода = 2; // разворачивать элемент по графам
				ИначеЕсли ТекСтроки = ЭлементВыражения.Строки Тогда
					ЭлементВыражения.СпособВывода = 1; // разворачивать элемент по строкам
				Иначе
					ЭлементВыражения.СпособВывода = 0; // не разворачивать - содержит единственное значение
				КонецЕсли;
			ИначеЕсли КоличествоГраф > 1 Тогда
				Если ТекГрафы = ЭлементВыражения.Графы Тогда
					ЭлементВыражения.СпособВывода = 2; // разворачивать элемент по графам
				Иначе
					ЭлементВыражения.СпособВывода = 0; // не разворачивать - содержит единственное значение
				КонецЕсли;
			ИначеЕсли КоличествоСтрок > 1 Тогда
				Если ТекСтроки = ЭлементВыражения.Строки Тогда
					ЭлементВыражения.СпособВывода = 1; // разворачивать элемент по строкам
				Иначе
					ЭлементВыражения.СпособВывода = 0; // не разворачивать - содержит единственное значение
				КонецЕсли;
			Иначе
				ЭлементВыражения.СпособВывода = 0; // не разворачивать - содержит единственное значение
			КонецЕсли
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементВыражения.СпособВывода = 5 Тогда
		Строки = ЭлементВыражения.ТаблЗначЭлем.НайтиСтроки(Новый Структура("КодСтроки", ОТЧ.ПривестиЗначение(ЭлементВыражения.МассивСтрок[0])));
		КоличествоСтрок = Строки.Количество();
		МатрицаРезультата = ПолучитьМатрицу(КоличествоГраф, КоличествоСтрок);
		Для ИндСтроки = 1 По КоличествоСтрок Цикл
			Для ИндГрафы = 1 По КоличествоГраф Цикл
				
				ВычисляемоеВыражение = ШаблонВыражения;
				Для каждого ЭлементВыражения Из ЭлементыВыражения Цикл
					СтрЗначениеПоказателя = Формат(ЗначениеПоказателяИзТаблицы(ЭлементВыражения, ИндСтроки, ИндГрафы), "ЧРД=.; ЧН=; ЧГ=");
					ВычисляемоеВыражение = СтрЗаменить(ВычисляемоеВыражение, ЭлементВыражения.СтрЗаменитель, СтрЗначениеПоказателя);
				КонецЦикла;
				МатрицаРезультата[ИндСтроки - 1][ИндГрафы-1] = ВычисляемоеВыражение;
			КонецЦикла;
		КонецЦикла;
		
		Возврат Истина;
	ИначеЕсли ЭлементВыражения.СпособВывода = 6 Тогда
		ТаблЗначЭлем = ЭлементВыражения.ТаблЗначЭлем.Скопировать();
		Инд = 0;
		Пока Инд < ТаблЗначЭлем.Количество() Цикл 
			Если ТаблЗначЭлем[Инд].КодСтроки = 0 Тогда 
				ТаблЗначЭлем.Удалить(Инд);
			Иначе 
				Инд = Инд + 1;
			КонецЕсли;
		КонецЦикла;
		КоличествоСтрок = ТаблЗначЭлем.Количество();
		МатрицаРезультата = ПолучитьМатрицу(КоличествоГраф, КоличествоСтрок);
		Для ИндСтроки = 1 По КоличествоСтрок Цикл
			Для ИндГрафы = 1 По КоличествоГраф Цикл
				
				ВычисляемоеВыражение = ШаблонВыражения;
				Для каждого ЭлементВыражения Из ЭлементыВыражения Цикл
					ТаблЗначЭлем = ЭлементВыражения.ТаблЗначЭлем.Скопировать();
					Инд = 0;
					Пока Инд < ТаблЗначЭлем.Количество() Цикл 
						Если ТаблЗначЭлем[Инд].КодСтроки = 0 Тогда 
							ТаблЗначЭлем.Удалить(Инд);
						Иначе 
							Инд = Инд + 1;
						КонецЕсли;
					КонецЦикла;
					
					НомГрафы = ЭлементВыражения.МассивГраф[ИндГрафы - 1];
					НомСтроки = ИндСтроки - 1;
					СтрЗначениеПоказателя = ТаблЗначЭлем[НомСтроки]["Графа"+НомГрафы];
					Если ТипЗнч(СтрЗначениеПоказателя) = Тип("Число") Тогда
						СтрЗначениеПоказателя = Формат(СтрЗначениеПоказателя, "ЧРД=.; ЧН=; ЧГ=");
					КонецЕсли;
					ВычисляемоеВыражение = СтрЗаменить(ВычисляемоеВыражение, ЭлементВыражения.СтрЗаменитель, СтрЗначениеПоказателя);
				КонецЦикла;
				МатрицаРезультата[ИндСтроки - 1][ИндГрафы-1] = ВычисляемоеВыражение;
			КонецЦикла;
		КонецЦикла;
		
		Возврат Истина;
	КонецЕсли;
	
	Если КоличествоГраф = 1 И КоличествоСтрок = 1 Тогда 
		Возврат Истина;
	КонецЕсли;
	
	МатрицаРезультата = ПолучитьМатрицу(КоличествоГраф, КоличествоСтрок);
	
	Для ИндСтроки = 1 По КоличествоСтрок Цикл
		Для ИндГрафы = 1 По КоличествоГраф Цикл
			
			ВычисляемоеВыражение = ШаблонВыражения;
			Для каждого ЭлементВыражения Из ЭлементыВыражения Цикл
				СтрЗначениеПоказателя = Формат(ЗначениеПоказателяИзТаблицы(ЭлементВыражения, ИндСтроки, ИндГрафы), "ЧРД=.; ЧН=; ЧГ=");
				ВычисляемоеВыражение = СтрЗаменить(ВычисляемоеВыражение, ЭлементВыражения.СтрЗаменитель, СтрЗначениеПоказателя);
			КонецЦикла;
			МатрицаРезультата[ИндСтроки - 1][ИндГрафы-1] = ВычисляемоеВыражение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция РезультатВычисленияВыраженияИзСтроки(ПараметрыДляПроверки, ТекстовоеПредставлениеВыражения, РазрядностьОкругления = 2, ДопустимоеОтклонение = 0) Экспорт 
	
	ТекстовоеВыражение = СтрЗаменить(СтрЗаменить(СтрЗаменить(СокрЛП(ТекстовоеПредставлениеВыражения), " ", ""), Символы.НПП, ""), Символы.Таб, "");
	ТекстовоеВыражение = ВРег(СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекстовоеВыражение, Символы.ПС, ""), Символы.ВК, ""), Символ(7), ""));
	
	ТаблицаЭлементов = Новый ТаблицаЗначений; // таблица содержит координаты ячеек таблицы и дополнительные параметры
	ТаблицаЭлементов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("СтрЗаменитель", Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("ТекущийПериод", Новый ОписаниеТипов("Булево"));
	ТаблицаЭлементов.Колонки.Добавить("ОператорСуммы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0))); // номер оператора суммирования
	ТаблицаЭлементов.Колонки.Добавить("Раздел",        Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("Строки",        Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("Графы",         Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("Специфика1",    Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("Специфика2",    Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("Специфика3",    Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("МассивСтрок",   Новый ОписаниеТипов("Массив"));
	ТаблицаЭлементов.Колонки.Добавить("МассивГраф",    Новый ОписаниеТипов("Массив"));
	ТаблицаЭлементов.Колонки.Добавить("МассивСпец1",   Новый ОписаниеТипов("Массив"));
	ТаблицаЭлементов.Колонки.Добавить("МассивСпец2",   Новый ОписаниеТипов("Массив"));
	ТаблицаЭлементов.Колонки.Добавить("МассивСпец3",   Новый ОписаниеТипов("Массив"));
	ТаблицаЭлементов.Колонки.Добавить("ИндексЛогПодв", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0))); // индекс логического подвыражения
	ТаблицаЭлементов.Колонки.Добавить("СпособВывода",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2,0))); // способ вывода значений элемента
	ТаблицаЭлементов.Колонки.Добавить("ТаблЗначЭлем",  Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ВыделитьЭлементыИзСтрокиВыражения(ПараметрыДляПроверки, ТекстовоеВыражение, ТаблицаЭлементов);
	
	Если СтрНайти(ТекстовоеВыражение, "SUM") > 0 Тогда // есть оператор суммирования
		ОпределитьОбластьДействияОператораСуммы(ТекстовоеВыражение, ТаблицаЭлементов, ПараметрыДляПроверки.КвоОшибокКС);
	КонецЕсли;
	
	ПолучитьЗначенияОбластейЭлементов(ПараметрыДляПроверки, ТаблицаЭлементов, РазрядностьОкругления, ПараметрыДляПроверки.КвоОшибокКС);
	
	Если ПараметрыДляПроверки.КвоОшибокКС > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыполнитьЗаменуФункцийЯзыкаКС(ТекстовоеВыражение);
	
	Если СтрНайти(ТекстовоеВыражение, "AND") > 0 ИЛИ СтрНайти(ТекстовоеВыражение, "OR") > 0 Тогда // есть логические предикаты
		ТекстовоеВыражение = СтрЗаменить(ТекстовоеВыражение, "AND", ") И (");
		ТекстовоеВыражение = СтрЗаменить(ТекстовоеВыражение, "OR", ") ИЛИ (");
		ТекстовоеВыражение = "(" + ТекстовоеВыражение + ")";
	КонецЕсли;
	
	ТекстовоеВыражение = СтрЗаменить(ТекстовоеВыражение, "TRUE",  "Истина ");
	ТекстовоеВыражение = СтрЗаменить(ТекстовоеВыражение, "FALSE", "Ложь ");
	
	Если СтрНайти(ТекстовоеВыражение, "&NP") > 0 Тогда // есть условие на период
		ВычислитьИЗаменитьУсловиеНаПериод(ПараметрыДляПроверки, ТекстовоеВыражение);
	КонецЕсли;
	
	ТекстовоеВыражение = СтрЗаменить(ТекстовоеВыражение, "|", "");
	
	// Если нет логических предикатов в выражении - массив содержит всю строку выражения
	МассивПодвыражений = МассивЛогическихПодвыраженийВыделитьИНазначитьИндексВТаблице(ТекстовоеВыражение, ТаблицаЭлементов);
	Для Инд = 0 По МассивПодвыражений.ВГраница() Цикл
		СтрРезультатВычисления = ?(РезультатВычисленияЛогическогоПодвыражения(ПараметрыДляПроверки, МассивПодвыражений[Инд], ТаблицаЭлементов, Инд, ПараметрыДляПроверки.КвоОшибокКС), "Истина", "Ложь");
		ТекстовоеВыражение = СтрЗаменить(ТекстовоеВыражение, "~" + Формат(Инд, "ЧН=; ЧГ=") + "~", СтрРезультатВычисления);
	КонецЦикла;
	
	Возврат Вычислить(ТекстовоеВыражение);
	
КонецФункции

Процедура ВыделитьЭлементыИзСтрокиВыражения(ПараметрыДляПроверки, ТекстовоеВыражение, ТаблицаЭлементов);
	
	ОгрЛ = "{";
	ОгрП = "}";
	
	ТекущийПериод = Истина;
	НачалоЭлемента = Ложь;
	
	ВремВыражение  = "";
	ТекущийЭлемент = "";
	
	Для Инд = 1 По СтрДлина(ТекстовоеВыражение) Цикл
		
		СтрСимв = Сред(ТекстовоеВыражение, Инд, 1);
		
		Если СтрСимв = ОгрЛ Тогда
			
			Если НачалоЭлемента Тогда // второй разделитель - предыдущий период
				ТекущийПериод = Ложь;
			КонецЕсли;
			
			НачалоЭлемента = Истина;
			ТекущийЭлемент = "";
			Продолжить;
			
		ИначеЕсли СтрСимв = ОгрП Тогда
			
			Если НачалоЭлемента Тогда // добавим элемент в таблицу
				
				СтрокаЭлемента = ТаблицаЭлементов.Добавить();
				СтрокаЭлемента.Представление = ТекущийЭлемент;
				СтрокаЭлемента.СтрЗаменитель = "%" + Формат(ТаблицаЭлементов.Количество(), "ЧГ=") + "%";
				СтрокаЭлемента.ТекущийПериод = ТекущийПериод;
				СтрокаЭлемента.ОператорСуммы = 0;
				
				ЗаполнитьЗначенияСвойств(СтрокаЭлемента, СтруктураСоставляющихЭлемента(ТекущийЭлемент));
				
				СтрокаЭлемента.МассивСтрок  = МассивЗначенийИзСтрСпискаИДиапазонов(СтрокаЭлемента.Строки, , , ПараметрыДляПроверки.КвоОшибокКС);
				СтрокаЭлемента.МассивГраф   = МассивЗначенийИзСтрСпискаИДиапазонов(СтрокаЭлемента.Графы , , , ПараметрыДляПроверки.КвоОшибокКС);
				СтрокаЭлемента.МассивСпец1  = МассивЗначенийИзСтрСпискаИДиапазонов(СтрокаЭлемента.Специфика1, , Ложь, ПараметрыДляПроверки.КвоОшибокКС);
				СтрокаЭлемента.МассивСпец2  = МассивЗначенийИзСтрСпискаИДиапазонов(СтрокаЭлемента.Специфика2, , Ложь, ПараметрыДляПроверки.КвоОшибокКС);
				СтрокаЭлемента.МассивСпец3  = МассивЗначенийИзСтрСпискаИДиапазонов(СтрокаЭлемента.Специфика3, , Ложь, ПараметрыДляПроверки.КвоОшибокКС);
				
				ВремВыражение = ВремВыражение + СтрокаЭлемента.СтрЗаменитель;
				
			КонецЕсли;
			
			ТекущийПериод = Истина;
			НачалоЭлемента = Ложь;
			Продолжить;
			
		КонецЕсли;
		
		Если НачалоЭлемента Тогда
			ТекущийЭлемент = ТекущийЭлемент + СтрСимв;
			Продолжить;
		КонецЕсли;
		
		ВремВыражение = ВремВыражение + СтрСимв;
		
	КонецЦикла;
	
	ТекстовоеВыражение = ВремВыражение;
	
КонецПроцедуры

Процедура ОпределитьОбластьДействияОператораСуммы(ТекстовоеВыражение, ТаблицаЭлементов, СчетчикОшибок = 0) Экспорт 
	
	ОП = "SUM";
	
	ОбработанноеВыражение = "";
	
	НомерОператораСуммы = 0;
	ВремВыражение = ТекстовоеВыражение;
	
	Поз = СтрНайти(ВремВыражение, ОП);
	Пока Поз > 0 Цикл
		
		НомерОператораСуммы = НомерОператораСуммы + 1;
		
		ОбработанноеВыражение = ОбработанноеВыражение + Лев(ВремВыражение, Поз - 1);
		
		ВремВыражение = Сред(ВремВыражение, Поз + СтрДлина(ОП));
		
		Если Лев(ВремВыражение, 1) = "%" Тогда // элемент
			СтрЗаменитель = Лев(ВремВыражение, СтрНайти(Сред(ВремВыражение, 2), "%") + 1);
			СтрокиЭлементов = ТаблицаЭлементов.НайтиСтроки(Новый Структура("СтрЗаменитель", СтрЗаменитель));
			Если СтрокиЭлементов.Количество() > 0 Тогда
				СтрокиЭлементов[0].ОператорСуммы = НомерОператораСуммы;
			Иначе
				СчетчикОшибок = СчетчикОшибок + 1;
			КонецЕсли;
		Иначе // выражение или функция
			КвоОткрытыхСкобок = 0;
			ВключенСчетчикСкобок = Ложь;
			Для Инд = 1 По СтрДлина(ВремВыражение) Цикл
				СтрСим = Сред(ВремВыражение, Инд, 1);
				Если СтрСим = "(" Тогда // начинаем считать скобки
					ВключенСчетчикСкобок = Истина;
					КвоОткрытыхСкобок = КвоОткрытыхСкобок + 1;
				ИначеЕсли СтрСим = ")" Тогда
					Если НЕ ВключенСчетчикСкобок Тогда
						СчетчикОшибок = СчетчикОшибок + 1;
						Прервать;
					КонецЕсли;
					КвоОткрытыхСкобок = КвоОткрытыхСкобок - 1;
				КонецЕсли;
				Если ВключенСчетчикСкобок И КвоОткрытыхСкобок = 0 Тогда
					Для каждого СтрокаЭлемента Из ТаблицаЭлементов Цикл
						ОбластьДействияОператораСуммы = Лев(ВремВыражение, Инд);
						Если СтрНайти(ОбластьДействияОператораСуммы, СтрокаЭлемента.СтрЗаменитель) > 0 Тогда
							СтрокаЭлемента.ОператорСуммы = НомерОператораСуммы;
						КонецЕсли;
					КонецЦикла;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Поз = СтрНайти(ВремВыражение, ОП);
		
		Если Поз = 0 Тогда
			ОбработанноеВыражение = ОбработанноеВыражение + ВремВыражение;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстовоеВыражение = ОбработанноеВыражение;
	
КонецПроцедуры

Процедура ПолучитьЗначенияОбластейЭлементов(ПараметрыДляПроверки, ТаблицаЭлементов, РазрядностьОкругления, СчетчикОшибок = 0)
	
	Для каждого СтрокаЭлемента Из ТаблицаЭлементов Цикл
		
		ИдЭлементаФормыРаздела = ИдентификаторЭлементаСпискаФормПоПредставлению(ПараметрыДляПроверки, "Раздел" + СтрокаЭлемента.Раздел);
		Если ИдЭлементаФормыРаздела = Неопределено Тогда
			СчетчикОшибок = СчетчикОшибок + 1;
			Возврат;
		КонецЕсли;
		Если СтрокаЭлемента.МассивСтрок.Количество() = 0 ИЛИ СтрокаЭлемента.МассивГраф.Количество() = 0 Тогда
			СчетчикОшибок = СчетчикОшибок + 1;
			Возврат;
		КонецЕсли;
		
		Если (Не СтрокаЭлемента.ТекущийПериод)
			И ТипЗнч(ПараметрыДляПроверки) = Тип("Структура")
			И ПараметрыДляПроверки.Свойство("СтруктураДанныхПредидущегоПериода") Тогда 
			
			ТаблДокФормыРаздела = ПараметрыДляПроверки.СтруктураРеквизитовФормы.СписокФормРазделовПредидущегоПериода.НайтиПоИдентификатору(ИдЭлементаФормыРаздела).Значение;
		Иначе
			ТаблДокФормыРаздела = ПараметрыДляПроверки.СтруктураРеквизитовФормы.СписокФормРазделов.НайтиПоИдентификатору(ИдЭлементаФормыРаздела).Значение;
		КонецЕсли;
		
		СписокПараметровГраф = Неопределено;
		ПараметрыДляПроверки.ПараметрыГрафРазделов.Свойство("Раздел" + СтрокаЭлемента.Раздел, СписокПараметровГраф);
		Если СписокПараметровГраф = Неопределено Тогда
			СчетчикОшибок = СчетчикОшибок + 1;
			Возврат;
		КонецЕсли;
		
		МассивГраф = Новый Массив;
		СтруктураСпецифик = Новый Структура("s1, s2, s3", "", "" , "");
		Для каждого ЭлементСпискаПараметровГраф Из СписокПараметровГраф Цикл
			НаборПараметров = ЭлементСпискаПараметровГраф.Значение;
			Если СтрНайти(ВРег(НаборПараметров["type"]), "Z") > 0 Тогда
				МассивГраф.Добавить(НаборПараметров["code"]);
			ИначеЕсли СтрНайти(ВРег(НаборПараметров["type"]), "S") > 0 Тогда
				Если НРег(НаборПараметров["fld"]) = "s1" Тогда
					СтруктураСпецифик["s1"] = НаборПараметров["code"];
				ИначеЕсли НРег(НаборПараметров["fld"]) = "s2" Тогда
					СтруктураСпецифик["s2"] = НаборПараметров["code"];
				ИначеЕсли НРег(НаборПараметров["fld"]) = "s3" Тогда
					СтруктураСпецифик["s3"] = НаборПараметров["code"];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаЭлемента.МассивСтрок[0] = "*" Тогда
			СтрокаЭлемента.МассивСтрок.Очистить();
			Для НомСтрокиТабл = 6 По ТаблДокФормыРаздела.ВысотаТаблицы Цикл
				ИмяЯчейки = ТаблДокФормыРаздела.Область(НомСтрокиТабл, 3, НомСтрокиТабл, 3).Имя;
				Если Лев(ИмяЯчейки, 2) <> "ПО" И Лев(ИмяЯчейки, 2) <> "ПМ" Тогда
					Продолжить;
				КонецЕсли;
				НомерСтроки = 0;
				ИмяПоказателя = ИмяПоказателяБезИндексаИСоставляющиеАдреса(ИмяЯчейки, , , Истина, , НомерСтроки);
				СтрНомерСтроки = Формат(НомерСтроки, "ЧН=; ЧГ=");
				Если СтрокаЭлемента.МассивСтрок.Найти(СтрНомерСтроки) = Неопределено Тогда
					СтрокаЭлемента.МассивСтрок.Добавить(СтрНомерСтроки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаЭлемента.МассивГраф[0] = "*" Тогда
			СтрокаЭлемента.МассивГраф = МассивГраф;
		КонецЕсли;
		МаксИнд = СтрокаЭлемента.МассивГраф.ВГраница();
		Для Инд = 0 По МаксИнд Цикл
			ОбрИнд = МаксИнд - Инд;
			Если МассивГраф.Найти(СтрокаЭлемента.МассивГраф[ОбрИнд]) = Неопределено Тогда
				СтрокаЭлемента.МассивГраф.Удалить(ОбрИнд);
			КонецЕсли;
		КонецЦикла;
		Если СтрокаЭлемента.МассивГраф.Количество() = 0 Тогда
			СчетчикОшибок = СчетчикОшибок + 1;
			Возврат;
		КонецЕсли;
		
		ЗначенияОбластей = Новый ТаблицаЗначений;
		ЗначенияОбластей.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
		ЗначенияОбластей.Колонки.Добавить("ИндСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0)));
		ЗначенияОбластей.Колонки.Добавить("Специфика", Новый ОписаниеТипов("Строка"));
		Для каждого НомерГрафы Из СтрокаЭлемента.МассивГраф Цикл
			Если НомерГрафы = "*" Тогда
				Прервать;
			КонецЕсли;
			ЗначенияОбластей.Колонки.Добавить("Графа" + НомерГрафы);
		КонецЦикла;
		ЗначенияОбластей.Колонки.Добавить("Сумма");
		
		КодРаздела = ЧислоИзСтроки(СтрокаЭлемента.Раздел);
		
		ЕстьКлючевыеПоля = НЕ ПустаяСтрока(СтруктураСпецифик["s1"] + СтруктураСпецифик["s2"] + СтруктураСпецифик["s3"]);
		МассивКлючевыхПолей = Новый Массив;
		Если ЕстьКлючевыеПоля Тогда
			Для каждого ЭлементСтруктуры Из СтруктураСпецифик Цикл
				Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
					МассивКлючевыхПолей.Добавить(ЭлементСтруктуры.Ключ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СдвигГраницы = 0;
		МаксИнд = СтрокаЭлемента.МассивСтрок.ВГраница();
		Для Инд = 0 По МаксИнд Цикл
			ИндСтр = СдвигГраницы + Инд;
			СтрКодСтроки = СтрокаЭлемента.МассивСтрок[ИндСтр];
			Если СтрКодСтроки = "*" Тогда
				Прервать;
			КонецЕсли;
			
			КодСтроки = ЧислоИзСтроки(СтрКодСтроки);
			
			Многострочность = Ложь;
			ИмяОбласти = ИмяПоказателяЯчейки(КодРаздела, КодСтроки, СтрокаЭлемента.МассивГраф[0]);
			ИмяМнОбласти = ИмяПоказателяЯчейки(КодРаздела, КодСтроки, СтрокаЭлемента.МассивГраф[0], Истина);
			Если ТаблДокФормыРаздела.Области.Найти(ИмяОбласти) <> Неопределено Тогда
				Многострочность = Ложь;
			ИначеЕсли ТаблДокФормыРаздела.Области.Найти(ИмяМнОбласти + "_1") <> Неопределено Тогда
				ИмяОбласти = ИмяМнОбласти;
				Многострочность = Истина;
			Иначе
				СтрокаЭлемента.МассивСтрок.Удалить(ИндСтр);
				СдвигГраницы = СдвигГраницы - 1;
				Продолжить;
			КонецЕсли;
			
			ИндексСтроки = 1;
			Пока ИндексСтроки = 1 ИЛИ ТаблДокФормыРаздела.Области.Найти(ИмяОбласти + "_" + Формат(ИндексСтроки, "ЧГ=")) <> Неопределено Цикл
				
				СтрокаЗначений = ЗначенияОбластей.Добавить();
				СтрокаЗначений.КодСтроки = КодСтроки;
				СтрокаЗначений.ИндСтроки = ?(Многострочность, ИндексСтроки, 0);
				
				Если ЕстьКлючевыеПоля Тогда
					УдовлетворяетУсловиям = Истина;
					Для каждого ИмяКлючевогоПоля Из МассивКлючевыхПолей Цикл
						Если ИмяКлючевогоПоля = "s3" Тогда
							МассивСпецифик = СтрокаЭлемента.МассивСпец3;
						ИначеЕсли ИмяКлючевогоПоля = "s2" Тогда
							МассивСпецифик = СтрокаЭлемента.МассивСпец2;
						Иначе
							МассивСпецифик = СтрокаЭлемента.МассивСпец1;
						КонецЕсли;
						КодГрафыСпец = СтруктураСпецифик[ИмяКлючевогоПоля];
						ИмяПоказателя = ИмяПоказателяЯчейки(КодРаздела, КодСтроки, КодГрафыСпец, Многострочность);
						ЗначениеСпецифики = ТаблДокФормыРаздела.Области[ИмяПоказателя + ?(Многострочность, "_" + Формат(ИндексСтроки, "ЧГ="), "")].Значение;
						Результат = РезультатПроверкиЗначенияСпецифики(ЗначениеСпецифики, МассивСпецифик);
						Если НЕ Результат И Многострочность Тогда
							УдовлетворяетУсловиям = Ложь;
							ЗначениеСпецифики = "";
							Прервать;
						КонецЕсли;
						
						СтрокаЗначений.Специфика = СтрокаЗначений.Специфика + ?(Многострочность, ЗначениеСпецифики, "");
					КонецЦикла;
					Если НЕ УдовлетворяетУсловиям Тогда
						ИндексСтроки = ИндексСтроки + 1;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				

				СуммаПоГрафам = 0;
				Для ИндГрф = 0 По СтрокаЭлемента.МассивГраф.ВГраница() Цикл
					КодГрафы = СтрокаЭлемента.МассивГраф[ИндГрф];
					Если КодГрафы = "*" Тогда
						Прервать;
					КонецЕсли;
					ИмяПоказателя = ИмяПоказателяЯчейки(КодРаздела, КодСтроки, КодГрафы, Многострочность);
					ЗначениеПоказателя = ТаблДокФормыРаздела.Области[ИмяПоказателя + ?(Многострочность, "_" + Формат(ИндексСтроки, "ЧГ="), "")].Значение;
					Если НЕ ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
						ЗначениеПоказателя = ЧислоИзСтроки(ЗначениеПоказателя);
					КонецЕсли;
					ЗначениеПоказателя = Окр(ЗначениеПоказателя, РазрядностьОкругления);
					СуммаПоГрафам = СуммаПоГрафам + ЗначениеПоказателя;
					СтрокаЗначений["Графа" + КодГрафы] = ЗначениеПоказателя;
				КонецЦикла;
				СтрокаЗначений.Сумма = СуммаПоГрафам;
				
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла;
		КонецЦикла;
		
		СтрокаЗначений = ЗначенияОбластей.Добавить();
		СтрокаЗначений.КодСтроки = 0;
		СтрокаЗначений.ИндСтроки = 0;
		Для ИндГрф = 0 По СтрокаЭлемента.МассивГраф.ВГраница() Цикл
			КодГрафы = СтрокаЭлемента.МассивГраф[ИндГрф];
			Если КодГрафы = "*" Тогда
				Прервать;
			КонецЕсли;
			СтрокаЗначений["Графа" + КодГрафы] = ЗначенияОбластей.Итог("Графа" + КодГрафы);
		КонецЦикла;
		СтрокаЗначений["Сумма"] = ЗначенияОбластей.Итог("Сумма");
		
		СтрокаЭлемента.ТаблЗначЭлем = ЗначенияОбластей;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаменуФункцийЯзыкаКС(ТекстовоеВыражение) Экспорт 
	
	СоответствиеФункций = СоответствиеФункцийРеализациям();
	
	Для каждого ЭлементСоответствия Из СоответствиеФункций Цикл
		
		ТекстовоеВыражение = СтрЗаменить(ТекстовоеВыражение, ВРег(ЭлементСоответствия.Ключ), ЭлементСоответствия.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычислитьИЗаменитьУсловиеНаПериод(ПараметрыДляПроверки, ТекстовоеВыражение)
	
	ОпрПериода = "&NP";
	
	ОбработанноеВыражение = "";
	
	ВремВыражение = ТекстовоеВыражение;
	
	Поз = СтрНайти(ВремВыражение, ОпрПериода);
	Пока Поз > 0 Цикл
		
		ОбработанноеВыражение = ОбработанноеВыражение + Лев(ВремВыражение, Поз - 1);
		
		ВремВыражение = Сред(ВремВыражение, Поз + СтрДлина(ОпрПериода));
		
		ПозКодаПериода = 0;
		ЛогОператор = "";
		
		ПереходПоискСледующегоУсловияНаПериод = Истина;
		
		Если      Лев(ВремВыражение, 2) = ">="
			ИЛИ Лев(ВремВыражение, 2) = "<="
			ИЛИ Лев(ВремВыражение, 2) = "<>" Тогда
			ПозКодаПериода = 3;
			ЛогОператор = Лев(ВремВыражение, 2);
		ИначеЕсли Лев(ВремВыражение, 1) = ">"
			ИЛИ Лев(ВремВыражение, 1) = "<"
			ИЛИ Лев(ВремВыражение, 1) = "="  Тогда
			ПозКодаПериода = 2;
			ЛогОператор = Лев(ВремВыражение, 1);
		ИначеЕсли Лев(ВремВыражение, 2) = "IN" Тогда
			ПозКодаПериода = 3;
			ЛогОператор = Лев(ВремВыражение, 2);
		Иначе
			КодНомераПериода = ПорядковыйНомерПериодаВГоду(ПараметрыДляПроверки.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ПараметрыДляПроверки.СтруктураАтрибутовОтчета["idp"]);
			ОбработанноеВыражение = ОбработанноеВыражение + Формат(КодНомераПериода, "ЧГ=");
			ПереходПоискСледующегоУсловияНаПериод = Ложь;
		КонецЕсли;
		
		Если ПереходПоискСледующегоУсловияНаПериод Тогда 
			КодыПериодов = "";
			ПозПродолжения = 1;
			ФлагОтбора = 0;
			Для Инд = ПозКодаПериода По СтрДлина(ВремВыражение) Цикл
				ПозПродолжения = Инд + 1;
				Сим = Сред(ВремВыражение, Инд, 1);
				Если Сим = "(" Тогда
					ФлагОтбора = 1;
					Продолжить;
				ИначеЕсли Сим = ")" И ФлагОтбора = 1 Тогда
					Прервать;
				КонецЕсли;
				Если СтрНайти(",0123456789", Сим) > 0 Тогда
					Если ФлагОтбора = 0 Тогда
						ФлагОтбора = 2;
					КонецЕсли;
					КодыПериодов = КодыПериодов + Сим;
				ИначеЕсли ФлагОтбора > 0 Тогда
					ПозПродолжения = Инд;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ОбработанноеВыражение = ОбработанноеВыражение + ?(РезультатУсловияНаПериод(ПараметрыДляПроверки, ЛогОператор, КодыПериодов), "Истина ", "Ложь ");
			
			ВремВыражение = Сред(ВремВыражение, ПозПродолжения);
		КонецЕсли;
		
		Поз = СтрНайти(ВремВыражение, ОпрПериода);
		
		Если Поз = 0 Тогда
			ОбработанноеВыражение = ОбработанноеВыражение + ВремВыражение;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстовоеВыражение = ОбработанноеВыражение;
	
Конецпроцедуры

Функция МассивЛогическихПодвыраженийВыделитьИНазначитьИндексВТаблице(ТекстовоеВыражение, ТаблицаЭлементов) Экспорт 
	
	РазделительИ = " И ";
	РазделительИЛИ = " ИЛИ ";
	
	ОбработанноеВыражение = "";
	
	МассивПодвыражений = Новый Массив;
	ВремВыражение = ТекстовоеВыражение;
	
	ПозИ = СтрНайти(ВремВыражение, РазделительИ);
	ПозИЛИ = СтрНайти(ВремВыражение, РазделительИЛИ);
	Если ПозИ + ПозИЛИ = 0 Тогда
		МассивПодвыражений.Добавить(ТекстовоеВыражение);
		ТекстовоеВыражение = "~0~";
		Возврат МассивПодвыражений;
	КонецЕсли;
	
	Поз = ?(ПозИ > 0 И ПозИЛИ > 0, Мин(ПозИ, ПозИЛИ), ПозИ + ПозИЛИ);
	Пока Поз > 0 Цикл
		
		МассивПодвыражений.Добавить(ПодвыражениеИзСтроки(Лев(ВремВыражение, Поз - 1)));
		ОбработанноеВыражение = ОбработанноеВыражение + "~" + Формат(МассивПодвыражений.ВГраница(), "ЧН=; ЧГ=") + "~";
		Если Поз = ПозИ Тогда
			ВремВыражение = Сред(ВремВыражение, Поз + СтрДлина(РазделительИ));
			ОбработанноеВыражение = ОбработанноеВыражение + РазделительИ;
		Иначе
			ВремВыражение = Сред(ВремВыражение, Поз + СтрДлина(РазделительИЛИ));
			ОбработанноеВыражение = ОбработанноеВыражение + РазделительИЛИ;
		КонецЕсли;
		
		ПозИ = СтрНайти(ВремВыражение, РазделительИ);
		ПозИЛИ = СтрНайти(ВремВыражение, РазделительИЛИ);
		Поз = ?(ПозИ > 0 И ПозИЛИ > 0, Мин(ПозИ, ПозИЛИ), ПозИ + ПозИЛИ);
		
		Если Поз = 0 Тогда
			МассивПодвыражений.Добавить(ПодвыражениеИзСтроки(ВремВыражение, , Ложь));
			ОбработанноеВыражение = ОбработанноеВыражение + "~" + Формат(МассивПодвыражений.ВГраница(), "ЧН=; ЧГ=") + "~";
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаЭлемент Из ТаблицаЭлементов Цикл
		Для Инд = 0 По МассивПодвыражений.ВГраница() Цикл
			Если СтрНайти(МассивПодвыражений[Инд], СтрокаЭлемент.СтрЗаменитель) > 0 Тогда
				СтрокаЭлемент.ИндексЛогПодв = Инд;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекстовоеВыражение = ОбработанноеВыражение;
	
	Возврат МассивПодвыражений;
	
КонецФункции

Функция РезультатВычисленияЛогическогоПодвыражения(ПараметрыДляПроверки, ШаблонВыражения, ТаблицаЭлементов, ИндексПодвыражения = 0, СчетчикОшибок = 0)
	
	Если НЕ ЗначениеЗаполнено(ШаблонВыражения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭлементыВыражения = ТаблицаЭлементов.НайтиСтроки(Новый Структура("ИндексЛогПодв", ИндексПодвыражения));
	Если ЭлементыВыражения.Количество() = 0 Тогда
		Возврат Вычислить(ШаблонВыражения);
	КонецЕсли;
	
	ИспользуетсяПредыдущийПериод = Ложь;
	
	ТекСтроки = "";
	ТекГрафы  = "";
	КоличествоСтрок = 1;
	КоличествоГраф  = 1;
	
	Для каждого ЭлементВыражения Из ЭлементыВыражения Цикл // первый цикл по свободным элементам
		Если ЭлементВыражения.ОператорСуммы = 0 Тогда // элемент выражения не входит в оператор суммы
			
			Если ЭлементВыражения.МассивСтрок.Количество() > 1 И ЭлементВыражения.МассивГраф.Количество() > 1 Тогда
				Если ТекГрафы  = "" Тогда
					ТекГрафы  = ЭлементВыражения.Графы;
				КонецЕсли;
				Если ТекСтроки = "" Тогда
					ТекСтроки = ЭлементВыражения.Строки;
				КонецЕсли;
				Если (КоличествоСтрок > 1 И ТекСтроки <> ЭлементВыражения.Строки)
					ИЛИ (КоличествоГраф > 1  И ТекГрафы  <> ЭлементВыражения.Графы) Тогда
					СчетчикОшибок = СчетчикОшибок + 1;
					Возврат Истина;
				КонецЕсли;
				ЭлементВыражения.СпособВывода = 3; // разворачивать элемент по строкам и столбцам
				КоличествоСтрок = ЭлементВыражения.МассивСтрок.Количество();
				КоличествоГраф  = ЭлементВыражения.МассивГраф.Количество();
			ИначеЕсли ЭлементВыражения.МассивГраф.Количество() > 1 Тогда
				Если ТекГрафы  = "" Тогда
					ТекГрафы  = ЭлементВыражения.Графы;
				КонецЕсли;
				Если КоличествоГраф > 1 И ТекГрафы <> ЭлементВыражения.Графы Тогда
					СчетчикОшибок = СчетчикОшибок + 1;
					Возврат Истина;
				КонецЕсли;
				ЭлементВыражения.СпособВывода = 2; // разворачивать элемент по графам
				КоличествоГраф  = ЭлементВыражения.МассивГраф.Количество();
			ИначеЕсли ЭлементВыражения.МассивСтрок.Количество() > 1 Тогда
				Если ТекСтроки = "" Тогда
					ТекСтроки = ЭлементВыражения.Строки;
				КонецЕсли;
				Если КоличествоСтрок > 1 И ТекСтроки <> ЭлементВыражения.Строки Тогда
					СчетчикОшибок = СчетчикОшибок + 1;
					Возврат Истина;
				КонецЕсли;
				ЭлементВыражения.СпособВывода = 1; // разворачивать элемент по строкам
				КоличествоСтрок = ЭлементВыражения.МассивСтрок.Количество();
			Иначе
				ЭлементВыражения.СпособВывода = 0; // не разворачивать - содержит единственное значение
			КонецЕсли
			
		КонецЕсли;
		Если НЕ ЭлементВыражения.ТекущийПериод Тогда
			ИспользуетсяПредыдущийПериод = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуетсяПредыдущийПериод 
		И (ТипЗнч(ПараметрыДляПроверки) <> Тип("Структура") Или Не ПараметрыДляПроверки.Свойство("СтруктураДанныхПредидущегоПериода")) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого ЭлементВыражения Из ЭлементыВыражения Цикл // второй цикл по элементам, входящим в операторы суммы
		Если ЭлементВыражения.ОператорСуммы > 0 Тогда // элемент выражения входит в оператор суммы
			
			Если КоличествоСтрок > 1 И КоличествоГраф > 1 Тогда
				Если ТекГрафы = ЭлементВыражения.Графы И ТекСтроки = ЭлементВыражения.Строки Тогда
					ЭлементВыражения.СпособВывода = 3; // разворачивать элемент по строкам и графам
				ИначеЕсли ТекГрафы = ЭлементВыражения.Графы Тогда
					ЭлементВыражения.СпособВывода = 2; // разворачивать элемент по графам
				ИначеЕсли ТекСтроки = ЭлементВыражения.Строки Тогда
					ЭлементВыражения.СпособВывода = 1; // разворачивать элемент по строкам
				Иначе
					ЭлементВыражения.СпособВывода = 0; // не разворачивать - содержит единственное значение
				КонецЕсли;
			ИначеЕсли КоличествоГраф > 1 Тогда
				Если ТекГрафы = ЭлементВыражения.Графы Тогда
					ЭлементВыражения.СпособВывода = 2; // разворачивать элемент по графам
				Иначе
					ЭлементВыражения.СпособВывода = 0; // не разворачивать - содержит единственное значение
				КонецЕсли;
			ИначеЕсли КоличествоСтрок > 1 Тогда
				Если ТекСтроки = ЭлементВыражения.Строки Тогда
					ЭлементВыражения.СпособВывода = 1; // разворачивать элемент по строкам
				Иначе
					ЭлементВыражения.СпособВывода = 0; // не разворачивать - содержит единственное значение
				КонецЕсли;
			Иначе
				ЭлементВыражения.СпособВывода = 0; // не разворачивать - содержит единственное значение
			КонецЕсли
			
		КонецЕсли;
	КонецЦикла;
	
	Для ИндСтроки = 1 По КоличествоСтрок Цикл
		Для ИндГрафы = 1 По КоличествоГраф Цикл
			
			ВычисляемоеВыражение = ШаблонВыражения;
			Для каждого ЭлементВыражения Из ЭлементыВыражения Цикл
				СтрЗначениеПоказателя = Формат(ЗначениеПоказателяИзТаблицы(ЭлементВыражения, ИндСтроки, ИндГрафы), "ЧРД=.; ЧН=; ЧГ=");
				ВычисляемоеВыражение = СтрЗаменить(ВычисляемоеВыражение, ЭлементВыражения.СтрЗаменитель, СтрЗначениеПоказателя);
			КонецЦикла;
			
			РезультатВычисления = РезультатВычисленияЭлементарногоВыражения(ВычисляемоеВыражение, СчетчикОшибок);
			
			Если НЕ РезультатВычисления Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СтруктураСоставляющихЭлемента(Элемент) Экспорт 
	
	СтруктураРезультата = Новый Структура;
	
	ОгрЛ = "[";
	ОгрП = "]";
	
	НомерПоля   = 0;
	НачалоПоля  = Ложь;
	ТекущееПоле = "";
	
	Для Инд = 1 По СтрДлина(Элемент) Цикл
		
		СтрСимв = Сред(Элемент, Инд, 1);
		
		Если СтрСимв = ОгрЛ ИЛИ СтрСимв = ОгрП Тогда
			
			Если НачалоПоля Тогда
				
				НомерПоля = НомерПоля + 1;
				
				Если НомерПоля = 1 Тогда
					СтруктураРезультата.Вставить("Раздел",     ТекущееПоле);
				ИначеЕсли НомерПоля = 2 Тогда
					СтруктураРезультата.Вставить("Строки",     ТекущееПоле);
				ИначеЕсли НомерПоля = 3 Тогда
					СтруктураРезультата.Вставить("Графы",      ТекущееПоле);
				ИначеЕсли НомерПоля = 4 Тогда
					СтруктураРезультата.Вставить("Специфика1", ТекущееПоле);
				ИначеЕсли НомерПоля = 5 Тогда
					СтруктураРезультата.Вставить("Специфика2", ТекущееПоле);
				ИначеЕсли НомерПоля = 6 Тогда
					СтруктураРезультата.Вставить("Специфика3", ТекущееПоле);
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрСимв = ОгрЛ Тогда
				ТекущееПоле = "";
				НачалоПоля = Истина;
			Иначе
				НачалоПоля = Ложь;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НачалоПоля Тогда
			ТекущееПоле = ТекущееПоле + СтрСимв;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция МассивЗначенийИзСтрСпискаИДиапазонов(Стр, СтрРазделитель = ",", ИскатьДиапазон = Истина, СчетчикОшибок = 0) Экспорт 
	
	МассивРезультата = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Стр) Тогда
		Возврат МассивРезультата;
	КонецЕсли;
	
	МассивЗначений = РегламентированнаяОтчетностьКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(Стр, СтрРазделитель);
	
	Для каждого Значение Из МассивЗначений Цикл
		ПозРаздДиапазона = 0;
		Если ИскатьДиапазон Тогда
			ПозРаздДиапазона = СтрНайти(Значение, "-");
		КонецЕсли;
		Если ПозРаздДиапазона > 1 Тогда
			НачДиапазона = ЧислоИзСтроки(Лев(Значение, ПозРаздДиапазона - 1), СчетчикОшибок);
			КонДиапазона = ЧислоИзСтроки(Сред(Значение, ПозРаздДиапазона + 1), СчетчикОшибок);
			Если НачДиапазона < КонДиапазона Тогда
				КоличествоЗначений = 0;
				Для Зн = НачДиапазона По КонДиапазона Цикл
					МассивРезультата.Добавить(Формат(Зн, "ЧН=; ЧГ="));
					КоличествоЗначений = КоличествоЗначений + 1;
					Если КоличествоЗначений > 10000 Тогда
						МассивРезультата.Добавить("*");
						СчетчикОшибок = СчетчикОшибок + 1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				МассивРезультата.Добавить(Формат(НачДиапазона, "ЧН=; ЧГ="));
			КонецЕсли;
		Иначе
			МассивРезультата.Добавить(СокрЛП(Значение));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРезультата;
	
КонецФункции

Функция ИдентификаторЭлементаСпискаФормПоПредставлению(ПараметрыДляПроверки, ПредставлениеЭлемента);
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеЭлемента) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Для каждого ЭлементФормаРаздела Из ПараметрыДляПроверки.СтруктураРеквизитовФормы.СписокФормРазделов Цикл
		
		Если СокрЛП(ЭлементФормаРаздела.Представление) = СокрЛП(ПредставлениеЭлемента) Тогда
			
			Возврат ЭлементФормаРаздела.ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция РезультатУсловияНаПериод(ПараметрыДляПроверки, ЛогОператор, КодыПериодов)
	
	Если ПустаяСтрока(КодыПериодов) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КодНомераПериода = ПорядковыйНомерПериодаВГоду(ПараметрыДляПроверки.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ПараметрыДляПроверки.СтруктураАтрибутовОтчета["idp"]);
	
	Если ЛогОператор = "IN" Тогда
		МассивКодовПериодов = РегламентированнаяОтчетностьКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(КодыПериодов, ",");
		Для каждого СтрКодПериода Из МассивКодовПериодов Цикл
			Если КодНомераПериода = НомерПериодаИзСправочника(ПараметрыДляПроверки, СтрКодПериода) Тогда
				Возврат Истина;
			КонецЕсли;;
		КонецЦикла;
	Иначе
		Попытка
			Возврат Вычислить(Формат(КодНомераПериода, "ЧН=;ЧГ=") + ЛогОператор + Формат(НомерПериодаИзСправочника(ПараметрыДляПроверки, КодыПериодов), "ЧН=;ЧГ="));
		Исключение
			Возврат Ложь;
		КонецПопытки
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЧислоИзСтроки(Стр, СчетчикОшибок = 0) Экспорт 
	
	Если ЗначениеЗаполнено(Стр) Тогда
		
		Попытка
			Зн = Число(СокрЛП(СтрЗаменить(Стр, Символы.НПП, "")));
		Исключение
			Зн = 0;
			СчетчикОшибок = СчетчикОшибок + 1;
		КонецПопытки;
		
		Возврат Зн;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПодвыражениеИзСтроки(Стр, СтрОстаток = "", ВыделитьСлева = Истина) Экспорт 
	
	СкНач = ?(ВыделитьСлева, ")", "(");
	СкКон = ?(ВыделитьСлева, "(", ")");
	
	СчСк = 0;
	НачатСчет = Ложь;
	
	Для Инд = 1 По СтрДлина(Стр) Цикл
		НомСимв = ?(ВыделитьСлева, СтрДлина(Стр) - Инд + 1, Инд);
		СтрСим = Сред(Стр, НомСимв, 1);
		
		Если СтрСим = СкНач Тогда
			НачатСчет = Истина;
			СчСк = СчСк + 1;
		ИначеЕсли НачатСчет И СтрСим = СкКон Тогда
			СчСк = СчСк - 1;
		КонецЕсли;
		
		Если НачатСчет И СчСк = 0  Тогда
			СтрОстаток = ?(ВыделитьСлева, Лев(Стр, НомСимв - 1), Сред(Стр, НомСимв + 1));
			Возврат ?(ВыделитьСлева, Сред(Стр, НомСимв), Лев(Стр, НомСимв));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Стр;
	
КонецФункции

Функция ИмяПоказателяБезИндексаИСоставляющиеАдреса(ИмяПоказателя, ИндексПоказателя = 0, Многострочный = Ложь, ПолучитьСоставляющие = Ложь, НомерРаздела = 0, НомерСтроки = 0, КодКолонки = "");
	
	ИмяПоказателяБезИндекса = ИмяПоказателя;
	
	ИндексПоказателя = 0;
	Многострочный = Ложь;
	НомерРаздела = 0;
	НомерСтроки = 0;
	КодКолонки = "";
	
	Если Лев(ИмяПоказателя, 2) = "ПМ" ИЛИ Сред(ИмяПоказателя, 3, 2) = "ПМ" ИЛИ Сред(ИмяПоказателя, 4, 2) = "ПМ" Тогда
		Многострочный = Истина;
		ПозРазделителя = СтрНайти(ИмяПоказателя, "_");
		Если ПозРазделителя > 0 Тогда
			ИмяПоказателяБезИндекса = Лев(ИмяПоказателя, ПозРазделителя - 1);
			ИндексПоказателя = Число("0" + Сред(ИмяПоказателя, ПозРазделителя + 1));
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьСоставляющие Тогда
		АдреснаяЧасть = "";
		Если Многострочный Тогда
			АдреснаяЧасть = Сред(ИмяПоказателяБезИндекса, СтрНайти(ИмяПоказателяБезИндекса, "ПМ") + 2);
		ИначеЕсли Лев(ИмяПоказателяБезИндекса, 2) = "ПО" ИЛИ Сред(ИмяПоказателя, 3, 2) = "ПО" Тогда
			АдреснаяЧасть = Сред(ИмяПоказателяБезИндекса, СтрНайти(ИмяПоказателяБезИндекса, "ПО") + 2);
		КонецЕсли;
		Если НЕ ПустаяСтрока(АдреснаяЧасть) Тогда
			Если Лев(АдреснаяЧасть, 1) = "s" Тогда
				ПозНомСтроки = СтрНайти(АдреснаяЧасть, "r");
				Если ПозНомСтроки > 0 Тогда
					НомерРаздела  = Число("0" + Сред(АдреснаяЧасть, 2, ПозНомСтроки - 2));
					АдреснаяЧасть = Сред(АдреснаяЧасть, ПозНомСтроки);
					ПозКодКолонки = СтрНайти(АдреснаяЧасть, "c");
					Если ПозКодКолонки > 0 Тогда
						НомерСтроки   = Число("0" + Сред(АдреснаяЧасть, 2, ПозКодКолонки - 2));
						КодКолонки    = Сред(АдреснаяЧасть, ПозНомСтроки + 1);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяПоказателяБезИндекса;
	
КонецФункции

Функция ИмяПоказателяЯчейки(КодРаздела, КодСтроки, КодКолонки, Многострочный = Ложь) Экспорт 
	
	Префикс = ?(Многострочный, "ПМ", "ПО");
	
	АдреснаяЧастьПоказателя = "s" + Формат(КодРаздела, "ЧЦ=5; ЧН=; ЧГ=")
	+ "r" + Формат(КодСтроки, "ЧЦ=5; ЧН=; ЧГ=")
	+ "c" + КодКолонки;
	
	Возврат Префикс + АдреснаяЧастьПоказателя;
	
КонецФункции

Функция РезультатПроверкиЗначенияСпецифики(Значение, МассивЗначенийСпецифик) Экспорт 
	
	Если МассивЗначенийСпецифик.Количество() = 0 Тогда
		Возврат Истина;
	ИначеЕсли МассивЗначенийСпецифик.Найти("*") <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Для каждого ЗначениеСпецифики Из МассивЗначенийСпецифик Цикл
			Если Значение = ЧислоИзСтроки(ЗначениеСпецифики) Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если СтрНайти(ЗначениеСпецифики, "-") > 0 Тогда 
				Если СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗначениеСпецифики, "-", Ложь).Количество() = 2 Тогда 
					Ч1 = ЧислоИзСтроки(Лев(ЗначениеСпецифики, СтрНайти(ЗначениеСпецифики, "-") - 1));
					Ч2 = ЧислоИзСтроки(Сред(ЗначениеСпецифики, СтрНайти(ЗначениеСпецифики, "-") + 1));
					Если Ч1 <= Значение И Значение <= Ч2 Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат МассивЗначенийСпецифик.Найти(СокрЛП(Значение)) <> Неопределено;
	
КонецФункции

Функция ЗначениеПоказателяИзТаблицы(ЭлементВыражения, ИндСтроки, ИндГрафы) Экспорт 
	
	Если ЭлементВыражения.МассивГраф.Количество() = 0 ИЛИ ЭлементВыражения.МассивСтрок.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ТаблицаЗначенийЭлементов = ЭлементВыражения.ТаблЗначЭлем;
	
	СтрокиТаблицы = ТаблицаЗначенийЭлементов.НайтиСтроки(Новый Структура("КодСтроки", 0)); // ищем итоговую строку
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат 0;
	ИначеЕсли ТаблицаЗначенийЭлементов.Количество() = 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаСуммы = СтрокиТаблицы[0];
	
	Если ЭлементВыражения.СпособВывода = 1 Тогда
		НомСтроки = ЧислоИзСтроки(ЭлементВыражения.МассивСтрок[ИндСтроки - 1]);
		СтрокиТаблицы = ТаблицаЗначенийЭлементов.НайтиСтроки(Новый Структура("КодСтроки", НомСтроки));
		СуммаПоСтрокам = 0;
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			Если СтрокаТаблицы.Сумма = Неопределено Тогда 
				СтрокаТаблицы.Сумма = 0;
			КонецЕсли;
			СуммаПоСтрокам = СуммаПоСтрокам + СтрокаТаблицы.Сумма;
		КонецЦикла;
		Возврат СуммаПоСтрокам;
	ИначеЕсли ЭлементВыражения.СпособВывода = 2 Тогда
		НомГрафы  = ЭлементВыражения.МассивГраф[ИндГрафы - 1];
		Возврат СтрокаСуммы["Графа" + НомГрафы];
	ИначеЕсли ЭлементВыражения.СпособВывода = 3 Тогда
		НомГрафы  = ЭлементВыражения.МассивГраф[ИндГрафы - 1];
		НомСтроки = ЧислоИзСтроки(ЭлементВыражения.МассивСтрок[ИндСтроки - 1]);
		СтрокиТаблицы = ТаблицаЗначенийЭлементов.НайтиСтроки(Новый Структура("КодСтроки", НомСтроки));
		СуммаПоГрафе = 0;
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			СуммаПоГрафе = СуммаПоГрафе + СтрокаТаблицы["Графа" + НомГрафы];
		КонецЦикла;
		Возврат СуммаПоГрафе;
	ИначеЕсли ЭлементВыражения.СпособВывода = 5 Тогда
		НомГрафы  = ЭлементВыражения.МассивГраф[ИндГрафы - 1];
		НомСтроки = ЧислоИзСтроки(ЭлементВыражения.МассивСтрок[0]);
		СтрокиТаблицы = ТаблицаЗначенийЭлементов.НайтиСтроки(Новый Структура("КодСтроки,ИндСтроки", НомСтроки, ИндСтроки));
		Если СтрокиТаблицы.Количество() = 1 Тогда 
			Возврат СтрокиТаблицы[0]["Графа"+НомГрафы];
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаСуммы.Сумма;
	
КонецФункции

Функция СоответствиеФункцийРеализациям() Экспорт 
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить("abs",      "АбсЗначение");
	Соответствие.Вставить("coalesce", "ПервоеЗаполненное");
	Соответствие.Вставить("floor",    "НаибольшееЦелое");
	Соответствие.Вставить("isnull",   "ЕслиПусто");
	Соответствие.Вставить("nullif",   "НеопределеноЕсли");
	Соответствие.Вставить("round",    "ОкрЗначение");
	
	Возврат Соответствие;
	
	// "Поиск неиспользуемых процедур и функций" не будет регистрировать ошибку
	Рез = АбсЗначение(0);
	Рез = ПервоеЗаполненное(0, 0);
	Рез = НаибольшееЦелое(0);
	Рез = ЕслиПусто(0, 0);
	Рез = НеопределеноЕсли(0, 0);
	Рез = ОкрЗначение(0, 0, 0);
	
КонецФункции

Функция РезультатВычисленияЭлементарногоВыражения(ВычисляемоеВыражение, СчетчикОшибок) Экспорт 
	
	ПреобразоватьВыражение(ВычисляемоеВыражение);
	
	Попытка
		РезультатВычисления = Вычислить(ВычисляемоеВыражение);
	Исключение
		РезультатВычисления = Истина;
		СчетчикОшибок = СчетчикОшибок + 1;
	КонецПопытки;
	
	Возврат РезультатВычисления;
	
КонецФункции

Функция НомерПериодаИзСправочника(ПараметрыДляПроверки, СтрКодПериода)
	
	КодПериода = ЧислоИзСтроки(Прав("00" + СтрКодПериода, 2));
	
	СправочникиПериодов = ПараметрыДляПроверки.ТаблицаСправочников.НайтиСтроки(Новый Структура("Идентификатор", "s_mes"));
	Если СправочникиПериодов.Количество() = 0 Тогда
		СправочникиПериодов = ПараметрыДляПроверки.ТаблицаСправочников.НайтиСтроки(Новый Структура("Идентификатор", "s_time"));
		Если СправочникиПериодов.Количество() = 0 Тогда
			Возврат КодПериода;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаЭлементовСправочника = СправочникиПериодов[0].ТаблицаЭлементовСправочника;
	Для каждого ЭлементСправочника Из ТаблицаЭлементовСправочника Цикл
		Если КодПериода = ЧислоИзСтроки(Прав("00" + ЭлементСправочника.Код, 2)) Тогда
			Возврат ТаблицаЭлементовСправочника.Индекс(ЭлементСправочника) + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(СтрКодПериода) > 2 Тогда
		Возврат КодПериода;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция АбсЗначение(Выражение) Экспорт 
	
	Возврат ?(Выражение >= 0, Выражение, -Выражение);
	
КонецФункции

Функция ПервоеЗаполненное(В1 = Неопределено, В2 = Неопределено, В3 = Неопределено, В4 = Неопределено, В5 = Неопределено,
	В6 = Неопределено, В7 = Неопределено, В8 = Неопределено, В9 = Неопределено, В10 = Неопределено) Экспорт
	
	Если      ЗначениеЗаполнено(В1) Тогда
		Возврат В1;
	ИначеЕсли ЗначениеЗаполнено(В2) Тогда
		Возврат В2;
	ИначеЕсли ЗначениеЗаполнено(В3) Тогда
		Возврат В3;
	ИначеЕсли ЗначениеЗаполнено(В4) Тогда
		Возврат В4;
	ИначеЕсли ЗначениеЗаполнено(В5) Тогда
		Возврат В5;
	ИначеЕсли ЗначениеЗаполнено(В6) Тогда
		Возврат В6;
	ИначеЕсли ЗначениеЗаполнено(В7) Тогда
		Возврат В7;
	ИначеЕсли ЗначениеЗаполнено(В8) Тогда
		Возврат В8;
	ИначеЕсли ЗначениеЗаполнено(В9) Тогда
		Возврат В9;
	ИначеЕсли ЗначениеЗаполнено(В10) Тогда
		Возврат В10;
	КонецЕсли;
	
	ЕстьТипЧисло = (ТипЗнч(В1) = Тип("Число")) Или (ТипЗнч(В2) = Тип("Число")) Или (ТипЗнч(В3) = Тип("Число")) Или 
					(ТипЗнч(В4) = Тип("Число")) Или (ТипЗнч(В5) = Тип("Число")) Или (ТипЗнч(В6) = Тип("Число")) Или 
					(ТипЗнч(В7) = Тип("Число")) Или (ТипЗнч(В8) = Тип("Число")) Или (ТипЗнч(В9) = Тип("Число")) Или 
					(ТипЗнч(В10) = Тип("Число"));
					
	Если ЕстьТипЧисло Тогда 
		Возврат 0;
	КонецЕсли;
	
	ЕстьТипСтрока = (ТипЗнч(В1) = Тип("Строка")) Или (ТипЗнч(В2) = Тип("Строка")) Или (ТипЗнч(В3) = Тип("Строка")) Или 
					(ТипЗнч(В4) = Тип("Строка")) Или (ТипЗнч(В5) = Тип("Строка")) Или (ТипЗнч(В6) = Тип("Строка")) Или 
					(ТипЗнч(В7) = Тип("Строка")) Или (ТипЗнч(В8) = Тип("Строка")) Или (ТипЗнч(В9) = Тип("Строка")) Или 
					(ТипЗнч(В10) = Тип("Строка"));
					

	Если ЕстьТипСтрока Тогда 
		Возврат "";
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НаибольшееЦелое(Выражение) Экспорт 
	
	Возврат Цел(Выражение - ?(Выражение - Цел(Выражение) < 0, 1, 0));
	
КонецФункции

Функция ЕслиПусто(Выражение, ЗамещающееЗначение) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Выражение) Тогда
		Возврат ЗамещающееЗначение;
	КонецЕсли;
	
	Возврат Выражение;
	
КонецФункции

Функция НеопределеноЕсли(Выражение1, Выражение2) Экспорт 
	
	Если Выражение1 = Выражение2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Выражение1;
	
КонецФункции

Функция ОкрЗначение(Выражение, Точность, ТипОперации = 0) Экспорт 
	
	Если ТипОперации = 0 Тогда
		Возврат Окр(Выражение, Точность);
	КонецЕсли;
	
	Возврат Цел(Выражение);
	
КонецФункции

Процедура ПреобразоватьВыражение(Выражение) Экспорт 
	
	МассивЛогОп = Новый Массив;
	МассивЛогОп.Добавить(">=");
	МассивЛогОп.Добавить("<=");
	МассивЛогОп.Добавить("<>");
	МассивЛогОп.Добавить(">");
	МассивЛогОп.Добавить("<");
	МассивЛогОп.Добавить("=");
	
	ПреобразованноеВыражение = "";
	
	ВремВыражение = Выражение;
	ДлинаОп = 0;
	ПозОпер = ПозНайденногоИзМассива(ВремВыражение, МассивЛогОп, ДлинаОп);
	Пока ПозОпер > 0 Цикл
		Если ВремВыражение <> Выражение Тогда
			ПреобразованноеВыражение = ПреобразованноеВыражение + Лев(ВремВыражение, ПозОпер - 1);
			ПреобразованноеВыражение = ПреобразованноеВыражение + " И " + Лев(ВремВыражение, ПозОпер + ДлинаОп - 1);
		Иначе
			ПреобразованноеВыражение = ПреобразованноеВыражение + Лев(ВремВыражение, ПозОпер + ДлинаОп - 1);
		КонецЕсли;
		
		ВремВыражение = Сред(ВремВыражение, ПозОпер + ДлинаОп);
		
		ПозОпер = ПозНайденногоИзМассива(ВремВыражение, МассивЛогОп, ДлинаОп);
		Если ПозОпер = 0 Тогда
			ПреобразованноеВыражение = ПреобразованноеВыражение + ВремВыражение;
		КонецЕсли;
	КонецЦикла;
	
	Если ВремВыражение <> Выражение Тогда
		Выражение = ПреобразованноеВыражение;
	КонецЕсли
	
КонецПроцедуры

Функция ПозНайденногоИзМассива(Стр, МассивПодстрок, ДлинаНайденнойПодстроки = 0) Экспорт 
	
	Для НомПоз = 1 По СтрДлина(Стр) Цикл
		Для каждого ПодстрокаПоиска Из МассивПодстрок Цикл
			ДлинаПодстроки = СтрДлина(ПодстрокаПоиска);
			Если ДлинаПодстроки <= (СтрДлина(Стр) - НомПоз + 1) И ПодстрокаПоиска = Сред(Стр, НомПоз, ДлинаПодстроки) Тогда
				ДлинаНайденнойПодстроки = ДлинаПодстроки;
				Возврат НомПоз;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

Функция ПорядковыйНомерПериодаВГоду(ДатаВПериоде, Периодичность)
	
	Перем НомерПериода;
	
	ДатаМесяц = Месяц(ДатаВПериоде);
	ДатаГод   = Год(ДатаВПериоде);
	
	Если Периодичность = 1 Тогда       // годовая
		
		НомерПериода = 1;
		
	ИначеЕсли Периодичность = 2 Тогда  // полугодовая
		
		НомерПериода = 1;
		
		Если ДатаВПериоде > КонецМесяца(Дата(ДатаГод, 6, 1)) Тогда
			НомерПериода = 2;
		КонецЕсли;
		
	ИначеЕсли Периодичность = 4 Тогда  // квартальная
		
		НомерПериода = Число(Формат(ДатаВПериоде, "ДФ=к"));
		
	ИначеЕсли Периодичность = 12 Тогда // месячная
		
		НомерПериода = ДатаМесяц;
		
	ИначеЕсли Периодичность = 36 Тогда // декадная
		
		// Дата обязательно должна указывать на конец декады.
		НомерПериода = Окр((ДеньГода(ДатаВПериоде) - 2) / 10, 0);
		
	ИначеЕсли Периодичность = 52 Тогда // недельная
		
		НомерПериода = НеделяГода(ДатаВПериоде);
		
	Иначе // месячная по умолчанию
		
		НомерПериода = ДатаМесяц;
		
	КонецЕсли;
	
	Возврат НомерПериода;
	
КонецФункции

Функция ПолучитьШаблон(ИмяФормы, ИмяМакетаШаблона) Экспорт 
	Результат = Новый Структура("ИмяФайлаШаблона, Шаблон");
	ДД = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакетаШаблона);
	
	КаталогРазархивирования = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогРазархивирования);
	КаталогРазархивирования = КаталогРазархивирования + ПолучитьРазделительПути();
	
	ВФАрх = КаталогРазархивирования + Строка(Новый УникальныйИдентификатор);
	ДД.Записать(ВФАрх);
	
	ЧтениеZip = Новый ЧтениеZipФайла(ВФАрх);
	ЧтениеZip.Извлечь(ЧтениеZip.Элементы[0], КаталогРазархивирования);
	ИтоговыйФайл = КаталогРазархивирования + ЧтениеZip.Элементы[0].Имя;
	Результат.ИмяФайлаШаблона = ЧтениеZip.Элементы[0].Имя;
	Результат.Шаблон = Новый ДвоичныеДанные(ИтоговыйФайл);
	ЧтениеZip.Закрыть();
	
	УдалитьФайлы(КаталогРазархивирования);
	Возврат Результат;
КонецФункции

Функция ПолучитьПараметрыИнициализацииУниверсальногоОтчета(Форма, ИмяМакетаАтрибутов, ИмяМакетаШаблона, ИмяСхемы, ФормироватьТекстВыгрузки = Истина, ЗагружатьШаблон = Истина) Экспорт 
	Попытка
		Результат = Новый Структура;
		СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
		Результат.Вставить("мСохраненныйДок", СтруктураРеквизитовФормы.мСохраненныйДок);
		Результат.Вставить("мДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Результат.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		Результат.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
		Результат.Вставить("мАвтоВыборКодов", Истина);
		Результат.Вставить("мПериодичность", СтруктураРеквизитовФормы.мПериодичность);
		
		Результат.Вставить("ИмяМакетаАтрибутов", ИмяМакетаАтрибутов);
		Результат.Вставить("ИмяМакетаШаблона", ИмяМакетаШаблона);
		Результат.Вставить("ИмяСхемы", ИмяСхемы);
		Результат.Вставить("ИмяФормыИсходной", Форма.ИмяФормы);
		Результат.Вставить("НеобходимоЗагрузитьШаблон", (Не ЗагружатьШаблон));
		
		СведШаблон = ПолучитьСведенияОШаблоне(Форма, ИмяМакетаАтрибутов);
		Для Каждого КЗ Из СведШаблон Цикл 
			Результат.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		
		Если ЗагружатьШаблон Тогда 
			ДанныеШаблона = ПолучитьШаблон(Форма.ИмяФормы, ИмяМакетаШаблона);
			Результат.Вставить("ИмяФайлаШаблона", ДанныеШаблона.ИмяФайлаШаблона);
			Результат.Вставить("Шаблон", Новый ХранилищеЗначения(ДанныеШаблона.Шаблон));
		КонецЕсли;
		
		Если ФормироватьТекстВыгрузки Тогда 
			РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(Форма);
			ПараметрыВыгрузки = Форма.СформироватьСтруктуруПараметров();
			ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(Форма, ИмяСхемы);
			Форма.ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
			ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
			Результат.Вставить("ВХ", ТекстВыгрузки);
		КонецЕсли;
		
		Результат.Вставить("ОбособленноеПодразделение", ПолучитьРеквизитФормыОбособленноеПодразделение(Форма));
		
		Попытка
			ПредидущийПериод = Форма.ПолучитьПредидущийПериод();
			Если ПредидущийПериод <> Неопределено Тогда
				Результат.Вставить("ПредидущийПериод", ПредидущийПериод);
			КонецЕсли;
		Исключение
			ПредидущийПериод = Неопределено;
		КонецПопытки;
		
		Возврат Результат;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Функция ПолучитьРеквизитФормыОбособленноеПодразделение(Форма) Экспорт
	Для Каждого Рекизит Из Форма.ПолучитьРеквизиты() Цикл 
		Если Рекизит.Имя = "ОбособленноеПодразделение" Тогда 
			ОбособленноеПодразделение = ?(ЗначениеЗаполнено(Форма.ОбособленноеПодразделение), Форма.ОбособленноеПодразделение, Неопределено);
			Возврат ОбособленноеПодразделение;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция ПолучитьСведенияОШаблоне(Форма, ИмяМакетаАтрибутов) Экспорт 
	Результат = Новый Структура("ОКУД,КодШаблона,Версия,Шифр,КодФормы,Наименование,КодПериодичности");
	ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов(Форма, ИмяМакетаАтрибутов);
	ДопАтрибуты.Свойство("OKUD", Результат.ОКУД);
	ДопАтрибуты.Свойство("code", Результат.КодШаблона);
	ДопАтрибуты.Свойство("version", Результат.Версия);
	ДопАтрибуты.Свойство("shifr", Результат.Шифр);
	ДопАтрибуты.Свойство("name", Результат.Наименование);
	ДопАтрибуты.Свойство("idf", Результат.КодФормы);
	ДопАтрибуты.Свойство("idp", Результат.КодПериодичности);
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	Результат.КодФормы = ТипЧисло.ПривестиЗначение(Результат.КодФормы);
	Результат.КодПериодичности = ТипЧисло.ПривестиЗначение(Результат.КодПериодичности);
	Возврат Результат;
КонецФункции

Функция ТекстВыгрузкиОтчетаСтатистики(мСохраненныйДок, ПараметрыДляПроверки)
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(мСохраненныйДок, "ВыбраннаяФорма,ИсточникОтчета");
	Если СтрНачинаетсяС(ПараметрыДляПроверки.ИмяФормыИсходной, "Отчет.") Тогда 
		ТекстВыгрузки = Отчеты[РеквизитыДокумента.ИсточникОтчета].ТекстВыгрузкиОтчетаСтатистики(мСохраненныйДок, РеквизитыДокумента.ВыбраннаяФорма);
	ИначеЕсли СтрНачинаетсяС(ПараметрыДляПроверки.ИмяФормыИсходной, "ВнешнийОтчет.") Тогда
		ТекстВыгрузки = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПараметрыДляПроверки.ИмяФормыИсходной).ТекстВыгрузкиОтчетаСтатистики(мСохраненныйДок, РеквизитыДокумента.ВыбраннаяФорма);
	КонецЕсли;
	Возврат ТекстВыгрузки;
КонецФункции

Функция СформироватьКонтекстФормыДляПоказателей(мСохраненныйДок) Экспорт 
	КонтекстФормы = Новый Структура;
	КонтекстФормы.Вставить("мДанныеОтчета", Новый Структура);
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		КонтекстФормы.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
		КонтекстФормы.мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(мСохраненныйДок, "ВыбраннаяФорма,ИсточникОтчета");
	КонтекстФормы.Вставить("ИмяФормы", "Отчет." + РеквизитыДокумента.ИсточникОтчета + ".Форма." + РеквизитыДокумента.ВыбраннаяФорма);
	
	Если СохрСтруктура.Свойство("ДанныеМногостраничныхРазделов") Тогда 
		КонтекстФормы.Вставить("ДанныеМногостраничныхРазделов", СохрСтруктура.ДанныеМногостраничныхРазделов);
	КонецЕсли;
	
	Если СохрСтруктура.Свойство("ДанныеМногострочныхРазделов") Тогда 
		КонтекстФормы.Вставить("ДанныеМногострочныхРазделов", СохрСтруктура.ДанныеМногострочныхРазделов);
	КонецЕсли;
	
	Возврат КонтекстФормы;
КонецФункции

Функция ПолучитьДокументПериода(ПредидущийПериод, ОбособленноеПодразделение)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ПредидущийПериод.ИсточникОтчета);
	Запрос.УстановитьПараметр("Организация", ПредидущийПериод.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ПредидущийПериод.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ПредидущийПериод.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачала2", КонецДня(ПредидущийПериод.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаОкончания2", КонецДня(ПредидущийПериод.мДатаКонцаПериодаОтчета));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РегламентированныйОтчет.Ссылка,
	|	РегламентированныйОтчет.ДатаНачала
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	НЕ РегламентированныйОтчет.ПометкаУдаления
	|	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаНачала2
	|	И РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаОкончания И &ДатаОкончания2
	|	И РегламентированныйОтчет.Организация = &Организация";
	
	КоличествоПодходящихДокументов = 0;
	Результат = Неопределено;
	ДокументыПериода = Запрос.Выполнить().Выбрать();
	Пока ДокументыПериода.Следующий() Цикл 
		Док = ДокументыПериода.Ссылка;
		ДокОП = Неопределено;
		Док.ДанныеОтчета.Получить().Свойство("ОбособленноеПодразделение", ДокОП);
		ДокОП = ?(ЗначениеЗаполнено(ДокОП), ДокОП, Неопределено);
		Если ДокОП = ОбособленноеПодразделение Тогда 
			Результат = Док;
			КоличествоПодходящихДокументов = КоличествоПодходящихДокументов + 1;
			Если КоличествоПодходящихДокументов > 1 Тогда 
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел, НомерСтроки = Неопределено) Экспорт
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если Параметры.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если Параметры.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность И Стр.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Параметры, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(Параметры, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанными(КонтекстФормы, ДеревоВыгрузки, ПараметрыВыгрузки) Экспорт 
	РегламентированнаяОтчетность.ОбработатьУсловныеЭлементы(КонтекстФормы, ПараметрыВыгрузки, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	РегламентированнаяОтчетность.ОтсечьНезаполненныеНеобязательныеУзлыСтатистики(ДеревоВыгрузки);
КонецПроцедуры

Функция СформироватьСтруктуруПараметров(КонтекстФормы, мСохраненныйДок, ИмяМакетаАттрибутов) Экспорт 
	
	Перем ПолученноеЗначение;
	
	ТабДокумент = КонтекстФормы.ПолеТабличногоДокументаФормаОтчета;
	ИмяФормы = КонтекстФормы.ИмяФормы;
	ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов(ИмяФормы, ИмяМакетаАттрибутов);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(мСохраненныйДок, "Организация, ДатаПодписи");
	СтрокаСведений = "ФИОРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(РеквизитыДокумента.Организация, РеквизитыДокумента.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	ДопАтрибуты.Свойство("code", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("idf", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("shifr", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ШифрФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("format_version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияФормата", ПолученноеЗначение);
	
	ОтчПериод  = Месяц(мСохраненныйДок.ДатаОкончания);
	РасчПериод = Формат(Год(мСохраненныйДок.ДатаОкончания),"ЧГ=0");
	
	ПараметрыВыгрузки.Вставить("ОКПО", СокрЛП(ТабДокумент.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОтчПериод", СокрЛП(ОтчПериод));
	ПараметрыВыгрузки.Вставить("РасчПериод", СокрЛП(РасчПериод));
	ПараметрыВыгрузки.Вставить("ОргНазв", СокрЛП(ТабДокумент.ОргНазв));
	ПараметрыВыгрузки.Вставить("ОргДиректор", СокрЛП(СведенияОбОрганизации.ФИОРук));
	ПараметрыВыгрузки.Вставить("ОргДолжностьИсп", СокрЛП(ТабДокумент.ОргДолжностьИсп));
	ПараметрыВыгрузки.Вставить("ОргИсполнитель", СокрЛП(ТабДокумент.ОргИсполнитель));
	ПараметрыВыгрузки.Вставить("ОргТелефонИсп", СокрЛП(ТабДокумент.ОргТелефонИсп));
	Если ТабДокумент.Свойство("ОргАдресЭлектроннойПочты") Тогда 
		ПараметрыВыгрузки.Вставить("ОргЭлектроннаяПочта", СокрЛП(ТабДокумент.ОргАдресЭлектроннойПочты));
	КонецЕсли;
	
	// Преобразование выгружаемых атрибутов, в соответствии
	// с форматом выгрузки статотчетности.
	ДопАтрибуты.Свойство("idp", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодПериодичности", Число(СокрЛП(ПолученноеЗначение)));
	ПараметрыВыгрузки.Вставить("Документ", мСохраненныйДок);
	
	РегламентированнаяОтчетность.АтрибутыВФорматеВыгрузки(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", Строка(Новый УникальныйИдентификатор) + ".xml");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "row");
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции
#КонецОбласти
