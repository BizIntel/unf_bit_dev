
#Область ПрограммныйИнтерфейс

// Подписывает сообщение, подставляя в шаблон SOAP данные подписи.
//
// Параметры:
//  КонвертSOAP               - Строка - шаблон формируемого сообщения в формате SOAP
//  ДанныеАлгоритмаПодписания - Структура:
//     XPathПодписываемыйТег   - Строка - запрос для получения тега подписи.
//     XPathSignedInfo         - Строка - запрос для получения тега подписываемой информации.
//     OIDАлгоритмаХеширования - Строка - идентификатор алгоритма хеширования.
//     ИмяАлгоритмаПодписи     - Строка - имя алгоритма подписи.
//  СертификатКриптографии     - СертификатКриптографии -  используемый сертификат криптографии.
//  МенеджерКриптографии       - МенеджерКриптографии - используемый менеджер криптографии.
// 
// Возвращаемое значение:
//  Строка - шаблон SOAP, со вставленными данными подписи.
//
Функция Подписать(Знач КонвертSOAP, ДанныеАлгоритмаПодписания, СертификатКриптографии, МенеджерКриптографии) Экспорт
	
	XPathПодписываемыйТег   = ДанныеАлгоритмаПодписания.XPathПодписываемыйТег;
	XPathSignedInfo         = ДанныеАлгоритмаПодписания.XPathSignedInfo;
	OIDАлгоритмаХеширования = ДанныеАлгоритмаПодписания.OIDАлгоритмаХеширования;
	ИмяАлгоритмаПодписи     = ДанныеАлгоритмаПодписания.ИмяАлгоритмаПодписи;
	
	Пароль = МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу;
	
	ОбъектКомпоненты = ОбъектВнешнейКомпонентыXMLDSIG();
	
	ТипКриптопровайдера = ТипКриптопровайдера(МенеджерКриптографии);
	
	КонвертSOAP = СтрЗаменить(
		КонвертSOAP,
		"%BinarySecurityToken%",
		СертификатКриптографииBase64(СертификатКриптографии));
	
	ПроверитьАлгоритмПодписи(ОбъектКомпоненты,
		СертификатКриптографииBase64(СертификатКриптографии),
		ДанныеАлгоритмаПодписания);
	
	DigestValue = Hash(
		ОбъектКомпоненты,
		C14N(ОбъектКомпоненты, КонвертSOAP, XPathПодписываемыйТег),
		OIDАлгоритмаХеширования,
		ТипКриптопровайдера);
	
	КонвертSOAP = СтрЗаменить(КонвертSOAP, "%DigestValue%", DigestValue);
	
	SignatureValue = Sign(
		ОбъектКомпоненты,
		C14N(ОбъектКомпоненты, КонвертSOAP, XPathSignedInfo),
		СертификатКриптографии,
		Пароль);
	
	КонвертSOAP = СтрЗаменить(КонвертSOAP, "%SignatureValue%", SignatureValue);
	
	Возврат КонвертSOAP;
	
КонецФункции

// В параметре возвращается сертификат, с помощью которого была произведена подпись (если сертификат включен в данные подписи).
// Если проверка подписи завершилась неудачно, генерируется исключительная ситуация.
Функция ПроверитьПодпись(Знач КонвертSOAP, ДанныеАлгоритмаПодписания, МенеджерКриптографии) Экспорт
	
	XPathПодписываемыйТег   = ДанныеАлгоритмаПодписания.XPathПодписываемыйТег;
	XPathSignedInfo         = ДанныеАлгоритмаПодписания.XPathSignedInfo;
	OIDАлгоритмаХеширования = ДанныеАлгоритмаПодписания.OIDАлгоритмаХеширования;
	ИмяАлгоритмаПодписи     = ДанныеАлгоритмаПодписания.ИмяАлгоритмаПодписи;
	
	ОбъектКомпоненты = ОбъектВнешнейКомпонентыXMLDSIG();
	
	ТипКриптопровайдера = ТипКриптопровайдера(МенеджерКриптографии);
	
	СертификатКриптографииBase64 = ИнтеграцияГИСМКлиентСервер.НайтиВXML(КонвертSOAP, "wsse:BinarySecurityToken");
	
	ПроверитьАлгоритмПодписи(ОбъектКомпоненты, СертификатКриптографииBase64, ДанныеАлгоритмаПодписания);
	
	ПодписьВерна = VerifySign(
		ОбъектКомпоненты,
		C14N(ОбъектКомпоненты, КонвертSOAP, XPathSignedInfo),
		ИнтеграцияГИСМКлиентСервер.НайтиВXML(КонвертSOAP, "SignatureValue"),
		СертификатКриптографииBase64,
		ТипКриптопровайдера);
	
	DigestValue = Hash(
		ОбъектКомпоненты,
		C14N(ОбъектКомпоненты, КонвертSOAP, XPathПодписываемыйТег),
		OIDАлгоритмаХеширования,
		ТипКриптопровайдера);
	
	ХешСовпадает = Ложь;
	Если DigestValue = ИнтеграцияГИСМКлиентСервер.НайтиВXML(КонвертSOAP, "DigestValue") Тогда
		ХешСовпадает = Истина;
	КонецЕсли;
	
	Если ХешСовпадает И ПодписьВерна Тогда
		
		ДвоичныеДанные = Base64Значение(СертификатКриптографииBase64);
		
		ДатаПодписания = ЭлектроннаяПодпись.ДатаПодписания(ДвоичныеДанные);
		Если Не ЗначениеЗаполнено(ДатаПодписания) Тогда
			ДатаПодписания = Неопределено;
		КонецЕсли;
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Сертификат", Новый СертификатКриптографии(ДвоичныеДанные));
		ВозвращаемоеЗначение.Вставить("ДатаПодписания", ДатаПодписания);

		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		Если ПодписьВерна Тогда
			ВызватьИсключение НСтр("ru = 'Подпись не верна (SignatureValue корректно, отличается DigestValue).'")
		Иначе
			ВызватьИсключение НСтр("ru = 'Подпись не верна (SignatureValue не корректно.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодключитьВнешнююКомпонентуXMLDSIG()
	
	ВнешняяКомпонента = Неопределено;
	
	ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаXMLDSIG", "ОбъектXMLDSIG", ТипВнешнейКомпоненты.Native);
	
	// Создадим объект внешней компоненты.
	Если ПодключениеВыполнено Тогда
		
		Попытка
			ВнешняяКомпонента = Новый("Addin.ОбъектXMLDSIG.XMLDSignAddIn");
		Исключение
			ВнешняяКомпонента = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ВнешняяКомпонента;
	
КонецФункции

Функция ОбъектВнешнейКомпонентыXMLDSIG()
	
	ОбъектКомпоненты = ПодключитьВнешнююКомпонентуXMLDSIG();
	
	Если ОбъектКомпоненты = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не удалось подключить внешнюю компоненту XMLDSIG.'");
	КонецЕсли;
	
	Возврат ОбъектКомпоненты;
	
КонецФункции

Функция ТипКриптопровайдера(МенеджерКриптографии)
	
	ИнформацияМодуляКриптографии = МенеджерКриптографии.ПолучитьИнформациюМодуляКриптографии();
	
	ИмяКриптопровайдера = ИнформацияМодуляКриптографии.Имя;
	ТипКриптопровайдера = ЭлектроннаяПодписьXMLDSIGВызовСервераПовтИсп.ТипКриптопровайдераПоИмени(ИмяКриптопровайдера);
	
	Если ТипКриптопровайдера = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось определить тип криптопровайдера %1'"), ИмяКриптопровайдера);
	КонецЕсли;
	
	Возврат ТипКриптопровайдера;
	
КонецФункции

Функция GetSignOIDFromCert(ОбъектКомпоненты, СертификатКриптографииBase64)
	
	Попытка
		OIDАлгоритмаПодписи = ОбъектКомпоненты.GetSignOIDFromCert(СертификатКриптографииBase64);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка вызова метода GetSignOIDFromCert компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если OIDАлгоритмаПодписи = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка вызова метода GetSignOIDFromCert компоненты XMLDSIG.'") + Символы.ПС + ОбъектКомпоненты.GetLastError();
	КонецЕсли;
	
	Возврат OIDАлгоритмаПодписи;
	
КонецФункции

Функция C14N(ОбъектКомпоненты, КонвертSOAP, XPath)
	
	Попытка
		КаноникализированныйТекстXML = ОбъектКомпоненты.C14N(
			КонвертSOAP,
			XPath);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если КаноникализированныйТекстXML = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSIG.'") + Символы.ПС + ОбъектКомпоненты.GetLastError();
	КонецЕсли;
	
	Возврат КаноникализированныйТекстXML;
	
КонецФункции

Функция Hash(ОбъектКомпоненты, КаноникализированныйТекстXML, OIDАлгоритмаХеширования, ТипКриптопровайдера)
	
	Попытка
		DigestValue = ОбъектКомпоненты.Hash(
			КаноникализированныйТекстXML,
			OIDАлгоритмаХеширования,
			ТипКриптопровайдера);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка вызова метода Hash компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если DigestValue = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка вызова метода Hash компоненты XMLDSIG.'") + Символы.ПС + ОбъектКомпоненты.GetLastError();
	КонецЕсли;
	
	Возврат DigestValue;
	
КонецФункции

Функция Sign(ОбъектКомпоненты, КаноникализированныйТекстXMLSignedInfo, СертификатКриптографии, ПарольДоступаКЗакрытомуКлючу)
	
	Попытка
		SignatureValue = ОбъектКомпоненты.Sign(
			КаноникализированныйТекстXMLSignedInfo,
			СертификатКриптографииBase64(СертификатКриптографии),
			ПарольДоступаКЗакрытомуКлючу);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка вызова метода Sign компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если SignatureValue = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка вызова метода Sign компоненты XMLDSIG.'") + Символы.ПС + ОбъектКомпоненты.GetLastError();
	КонецЕсли;
	
	Возврат SignatureValue;
	
КонецФункции

Функция VerifySign(ОбъектКомпоненты, КаноникализированныйТекстXMLSignedInfo, SignatureValue, СертификатКриптографииBase64, ТипКриптопровайдера)
	
	Попытка
		ПодписьВерна = ОбъектКомпоненты.VerifySign(
			КаноникализированныйТекстXMLSignedInfo,
			SignatureValue,
			СертификатКриптографииBase64,
			ТипКриптопровайдера);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка вызова метода VerifySign компоненты XMLDSIG.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ПодписьВерна = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка вызова метода VerifySign компоненты XMLDSIG.'") + Символы.ПС + ОбъектКомпоненты.GetLastError();
	КонецЕсли;
	
	Возврат ПодписьВерна;
	
КонецФункции

Процедура ПроверитьАлгоритмПодписи(ОбъектКомпоненты, СертификатКриптографииBase64, ДанныеАлгоритмаПодписания)
	
	OIDАлгоритмаПодписи = GetSignOIDFromCert(ОбъектКомпоненты, СертификатКриптографииBase64);
	Если OIDАлгоритмаПодписи <> ДанныеАлгоритмаПодписания.OIDАлгоритмаПодписи Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Алгоритм подписи сертификата криптографии отличается от алгоритма %1.'"),
			ДанныеАлгоритмаПодписания.ИмяАлгоритмаПодписи);
	КонецЕсли;
	
КонецПроцедуры

// Преобразует сертификат криптографии в корретно отформатированную строку в формате Base64.
//
// Параметры:
//  СертификатКриптографии - СертификатКриптографии - сертификат, который подлежит преобразованию.
// 
// Возвращаемое значение:
//  Строка - преобразовнный в строку в формате Base64 сертификат.
//
Функция СертификатКриптографииBase64(СертификатКриптографии)
	
	Возврат ОтформатироватьСтрокуBase64(Base64Строка(СертификатКриптографии.Выгрузить()));
	
КонецФункции

// Форматирует строку в формате base64, удаляя символы перевода строки и возврата каретки.
//
// Параметры:
//  СтрокаBase64 - Строка - строка, которая подлежит преобразования.
// 
// Возвращаемое значение:
//   Строка - строка, из которой удалены символы перевода строки и возврата каретки.
//
Функция ОтформатироватьСтрокуBase64(СтрокаBase64)
	
	Значение = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	Значение = СтрЗаменить(Значение, Символы.ПС, "");
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти