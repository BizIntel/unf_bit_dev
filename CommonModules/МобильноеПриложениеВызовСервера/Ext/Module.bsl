
#Область ПрограммныйИнтерфейс

// Запускается при начале работы клиента. Устанавливает ограничения по тарификации.
//
Процедура ПередНачаломРаботыКлиента(ТребуетсяОбновлениеИнтерфейса = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если не включено разделение, то пропускаем
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Служебный
	|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИД
	|	И НЕ Пользователи.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПустойИД", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивПользователей = ТаблицаРезультатаЗапроса.ВыгрузитьКолонку("ИдентификаторПользователяИБ");
	
	Если НЕ ИспользуетсяСервисТарификации()
		ИЛИ НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Если ЭтоМобильноеПриложение() Тогда
			УстановитьЭтоМобильноеПриложение(Ложь);
			// Снимаем ограничения
			УстановитьОбычныйИнтерфейс(МассивПользователей);
			Для каждого ТекПользователь Из МассивПользователей Цикл
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекПользователь);
				Если ПользовательИБ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				УправлениеНебольшойФирмойСервер.УстановитьСоставФорм(ТребуетсяОбновлениеИнтерфейса, ПользовательИБ.Имя);
			КонецЦикла;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ НадоОбновлятьКеш()
		ИЛИ НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		СписокТарифиов = СписокАктивныхТарифов();
		
		Если СписокТарифиов = ТекстОшибкиПодключения() Тогда
			Возврат;
		КонецЕсли;
		ЕстьАктивныйТариф = ЕстьАктивныйТарифМобильногоУНФ(СписокТарифиов);
		Если ЕстьАктивныйТариф <> ЭтоМобильноеПриложение() Тогда
			УстановитьЭтоМобильноеПриложение(ЕстьАктивныйТариф);
			// Устанавливаем/снимаем ограничения
			Если ЕстьАктивныйТариф Тогда
				УстановитьМинимальныйИнтерфейс(МассивПользователей);
			Иначе
				УстановитьОбычныйИнтерфейс(МассивПользователей);
			КонецЕсли;
			Для каждого ТекПользователь Из МассивПользователей Цикл
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекПользователь);
				Если ПользовательИБ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				УправлениеНебольшойФирмойСервер.УстановитьСоставФорм(ТребуетсяОбновлениеИнтерфейса, ПользовательИБ.Имя);
			КонецЦикла;
		КонецЕсли;
	Исключение
		ПодробноеОписание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(Нстр("ru='Получение активных тарифов'"), УровеньЖурналаРегистрации.Ошибка, , , ?(ЗначениеЗаполнено(ПодробноеОписание), ПодробноеОписание, Строка(СписокТарифиов)));
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает признак того, что эта информационная база работает в режиме ограниченной функциональности.
//
Функция ЭтоМобильноеПриложение() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ЭтоМобильноеПриложение.Получить();
	
КонецФункции

// Возвращает признак того, что эта информационная база работает в режиме ограниченной функциональности.
//
Функция НужноОграничитьФункциональность() Экспорт
	
	Возврат ЭтоМобильноеПриложение();
	
КонецФункции

Функция КодТарифаМобильногоУНФ() Экспорт
	
	Возврат "sbm_mobile";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СписокАктивныхТарифов()
	
	Если НЕ ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Возврат ТекстОшибкиПодключения();
	КонецЕсли;
	
	МодульРаботаВМоделиСервиса = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("РаботаВМоделиСервиса");
	
	УстановитьПривилегированныйРежим(Истина);
	URL = URLВнешнегоAPIСистемыТарификации();
	ИмяПользователя    = МодульРаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса();
	ПарольПользователя = МодульРаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса();
	ОбластьДанныхСтрокой = Строка(Формат(ОбщегоНазначения.ЗначениеРазделителяСеанса(), "ЧН=0; ЧГ=0"));
	КлючОбластиДанных = Константы.КлючОбластиДанных.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	ЗащищенноеСоединение = ?(ВРег(СтруктураURI.Схема) = "HTTPS", Новый ЗащищенноеСоединениеOpenSSL, Неопределено);
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, ИмяПользователя, ПарольПользователя, , 10, ЗащищенноеСоединение);
	
	ОД_Параметр = "Zone";
	ОД_Значение = ОбластьДанныхСтрокой;
	Ключ_Параметр = "ZoneKey";
	Ключ_Значение = КлючОбластиДанных;
	
	ШаблонURLМетода = "%1?%2=%3&%4=%5";
	URLМетода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонURLМетода, СтруктураURI.ПутьНаСервере, ОД_Параметр, ОД_Значение, Ключ_Параметр, Ключ_Значение);
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET", Новый HTTPЗапрос(URLМетода));
	
	Возврат Ответ.ПолучитьТелоКакСтроку();
	
КонецФункции

Функция ИспользуетсяСервисТарификации()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьВнутреннийСервисТарификации.Получить();
	
КонецФункции

Функция ВремяЖизниКешаПоТарификацииВМинутах()
	
	Возврат 5;
	
КонецФункции

Функция НадоОбновлятьКеш()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаКеша = Константы.ДатаОбновленияКешаТарификации.Получить();
	Если Не ЗначениеЗаполнено(ДатаКеша) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат (ТекущаяДатаСеанса() - ДатаКеша)/60 > ВремяЖизниКешаПоТарификацииВМинутах();
	
КонецФункции

Функция ТекстОшибкиПодключения()
	
	Возврат(НСтр("ru = 'Не возможно подключиться к Менеджеру сервиса.'"));
	
КонецФункции

Функция ЕстьАктивныйТарифМобильногоУНФ(Знач ОтветСтрокой)
	
	Если ПустаяСтрока(ОтветСтрокой) Тогда
		ВызватьИсключение(НСтр("ru = 'Пустой ответ Менеджера сервиса по тарифам.'"));
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСтрокой);
	Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
	ЧтениеJSON.Закрыть();
	
	АктивныеТарифы = Неопределено;
	Данные.Свойство("TariffList", АктивныеТарифы);
	Если ТипЗнч(АктивныеТарифы) <> Тип("Массив") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекущийТариф Из АктивныеТарифы Цикл
		Если ТипЗнч(ТекущийТариф) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторТарифа = Неопределено;
		ТекущийТариф.Свойство("ID", ИдентификаторТарифа);
		Если ТипЗнч(ИдентификаторТарифа) = Тип("Строка") 
			И ИдентификаторТарифа = КодТарифаМобильногоУНФ() Тогда
				Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция УстановитьЭтоМобильноеПриложение(Знач Значение)
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ЭтоМобильноеПриложение.Установить(Значение);
	Константы.ЭтоОбычноеПриложение.Установить(НЕ Значение);
	
КонецФункции

Функция URLВнешнегоAPIСистемыТарификации()
	
	ВнутреннийАдресМенеджераСервиса = РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса();
	
	URL = ВнутреннийАдресМенеджераСервиса + "/hs/ApplicationTariffControl_1_0_1_1/Tariffes";
	
	Возврат URL;
	
КонецФункции

Процедура УстановитьОбычныйИнтерфейс(МассивПользователей)
	
	Для каждого ТекПользователь Из МассивПользователей Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекПользователь);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Неопределено,, ПользовательИБ.Имя);
	КонецЦикла;
	
КонецПроцедуры 

Процедура УстановитьМинимальныйИнтерфейс(МассивПользователей)

	Настройки = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава.Лево.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
	Настройки.УстановитьСостав(НастройкиСостава);
	
	Для каждого ТекПользователь Из МассивПользователей Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекПользователь);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Настройки,, ПользовательИБ.Имя);
	КонецЦикла;

КонецПроцедуры

Процедура СервисныеОперацииМобильногоПриложения() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МобильноеПриложение.Ссылка,
	|	МобильноеПриложение.ДатаПоследнейСинхронизации
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.ДатаПоследнейСинхронизации <= &ДатаПоследнейСинхронизации";
	
	Запрос.УстановитьПараметр("ДатаПоследнейСинхронизации", ТекущаяДатаСеанса() - 86400);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ДатаПоследнейСинхронизации) Тогда
			ОбменМобильноеПриложениеПереопределяемый.ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(Выборка.Ссылка);
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			Попытка
				Узел = Выборка.Ссылка.ПолучитьОбъект();
				Узел.ДатаПоследнейСинхронизации = ТекущаяДатаСеанса();
				Узел.Записать();
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Мобильное приложение.Установка даты последней синхронизации в регламентном задании'"),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

