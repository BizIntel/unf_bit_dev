////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Регистрация объектов для обмена электронными документами

// Обработчик события "ПередЗаписью" владельцев электронных документов.
//
// Параметры:
//  Источник        - Объект - владелец присоединенного файла.
//  Отказ           - Булево - признак отказа от записи.
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи владельца электронного документа.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения владельца электронного документа.
//
Процедура ОбменСКонтрагентамиВладелецПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;

	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", Истина);
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	// ЭД делаем только когда есть действующее соглашение об обмене
	Если (Не Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение") ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение)
		И Не ТипИсточника = Тип("ДокументОбъект.ПакетЭД") Тогда
		
		ПараметрыЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(Источник);
		НастройкаЭДСуществует = ОбменСКонтрагентамиСлужебныйВызовСервера.НастройкаЭДСуществует(Источник.Ссылка, ПараметрыЭД);
		Если Не НастройкаЭДСуществует Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьМодификациюОбъектаДляОбменаЭД(Источник);
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" владельцев электронных документов.
//
// Параметры:
//  Источник - Объект - владелец присоединенного файла,
//  Отказ    - Булево - признак отказа от записи.
//
Процедура ОбменСКонтрагентамиВладелецПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;

	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение Тогда
		
		ПроверитьНаличиеИУдалитьСостояниеДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьОбъект")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЗарегистрироватьОбъект Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЭтоНовыйОбъект") Тогда
		РедактированиеРазрешено = Истина;
		ОбменСКонтрагентамиПереопределяемый.ПроверитьВозможностьРедактированияОбъекта(Источник.Ссылка,
			РедактированиеРазрешено);
		Если НЕ РедактированиеРазрешено Тогда
			ТекстСообщения = НСтр("ru='Существует электронный документ. Изменение ключевых реквизитов документа запрещено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// При изменении ключевых реквизитов объекта устанавливается новая версия электронного документа.
	ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(Источник.Ссылка,,Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Изменение электронных документов

// Обработчик события "ПередЗаписью" электронных документов.
// 
// Параметры:
//  Источник - Объект - электронный документ.
//  Отказ    - Булево - признак отказа от записи.
//
Процедура ПередЗаписьюЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		ОбработатьУдалениеЭлектронногоДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.НаправлениеЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ТипЭлементаВерсииЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		Возврат;
	ИначеЕсли Источник.Ссылка.СтатусЭД = Источник.СтатусЭД Тогда
		
		Если Источник.Ссылка.Описание <> Источник.Описание Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
		Иначе
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
	Источник.ДополнительныеСвойства.Вставить("СостояниеВерсииЭД", ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка));
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" электронных документов.
// 
// Параметры:
//  Источник - Объект - электронный документ.
//  Отказ    - Булево - признак отказа от записи.
//
Процедура ПриЗаписиЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписатьСобытиеЖР")
		 И Источник.ДополнительныеСвойства.ЗаписатьСобытиеЖР Тогда
		ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(Источник.Ссылка);
	КонецЕсли;
	
	Если Источник.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО
	 ИЛИ Источник.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеВерсииЭД = Неопределено;
	
	Если Источник.ДополнительныеСвойства.Свойство("СоглашениеЭД") Тогда
		СостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка);
	КонецЕсли;
	
	ВерсияЭДОбновлена = Ложь;
	ПринудительнаяСменаСостоянияВерсии = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
	ВерсияФорматаПакета = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
	ОтклонениеАннулирования = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ОтклонениеАннулирования", ОтклонениеАннулирования);

	Если Источник.ДополнительныеСвойства.Свойство("СостояниеВерсииЭД") Тогда
		
		СледСостояниеВерсииЭД = Источник.ДополнительныеСвойства.СостояниеВерсииЭД;
		СтруктураТекВерсииЭД  = ПараметрыВерсииЭлектронногоДокумента(Источник.ВладелецФайла);
		
		ОбновитьВерсию = СостояниеВерсииЭД <> СтруктураТекВерсииЭД.СостояниеВерсииЭД
			И Не ЭтоОтветныйТитул(Источник.ТипЭлементаВерсииЭД);
		Если ОбновитьВерсию Тогда
			ВерсияЭДОбновлена = Истина;
			ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьВерсиюЭД(Источник.Ссылка, ПринудительнаяСменаСостоянияВерсии, ВерсияФорматаПакета, ОтклонениеАннулирования);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Получение выборки элементов справочника ЭДПрисоединенныеФайлы по отбору.
//
// Параметры:
//  Параметры - Структура - ключ - название реквизита отбора, значение - значение отбора.
//
// Возвращаемое значение:
//  ОбходРезультатаЗапроса - выборка электронных документов.
//
Функция ПолучитьВыборкуЭДПоОтбору(Параметры) Экспорт
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") ИЛИ Параметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ЭДПрисоединенныеФайлы.Наименование,
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ПакетЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|";
	
	ПервыйЭлемент = Истина;
	Для Каждого Элемент Из Параметры Цикл
		Запрос.Текст = Запрос.Текст + ?(НЕ ПервыйЭлемент," И ","") + " ЭДПрисоединенныеФайлы." + Элемент.Ключ + "=&" + Элемент.Ключ;
		ПервыйЭлемент = Ложь;
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Заполняет реквизит "Организация" при однофирменном учете.
//
// Параметры:
//  Источник - Ссылка - источник события
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//
Процедура ЗаполнитьЗначениеРеквизитаОрганизацияПриОдноФирменномУчете(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ИспользуетсяНесколькоОрганизаций = Ложь;
	ОрганизацияПоУмолчанию = Неопределено;
	
	ИспользуетсяНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД");
	
	Если НЕ ИспользуетсяНесколькоОрганизаций И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Источник.Метаданные())
		И Не ЗначениеЗаполнено(Источник.Организация) Тогда
		
		Источник.Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Источник.Организация) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось определить организацию.'");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Выполняет регламентное задание по получению новых электронных документов.
//
Процедура РегламентноеПолучениеНовыхЭД() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеНовыхЭД);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ВызватьИсключение
			НСтр("ru = 'Работа регламентного задания в режиме сервиса не предусмотрена.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Начато регламентное задание по получению новых эл.документов.'");
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
		Текст, 4, УровеньЖурналаРегистрации.Информация);
	
	Попытка
		СоотвСоглашений = Неопределено;
		КоличествоПакетов = 0; КолРаспакованныхЭД = 0;
		Если ОбменСКонтрагентамиСлужебныйВызовСервера.ДоступныПараметрыДляАвторизацииНаСервереОператора( , СоотвСоглашений) Тогда
			
			ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашений);
			НовыеДокументы = ПолучитьНовыеЭД(СоотвСоглашений);
			КоличествоПакетов = НовыеДокументы.МассивПакетовЭД.Количество();
			
			ОбменСКонтрагентамиСлужебныйВызовСервера.ДополнитьПакетамиКРаспаковке(НовыеДокументы.МассивПакетовЭД);
			
			// Распаковываем принятые пакеты с электронными документами.
			ОбменСКонтрагентамиСлужебныйВызовСервера.РаспаковатьПакетыЭДНаСервере(НовыеДокументы.МассивПакетовЭД, КолРаспакованныхЭД);
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Закончено регламентное задание.
									|Получено пакетов: %1. Распаковано: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоПакетов, КолРаспакованныхЭД);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 4,
			УровеньЖурналаРегистрации.Информация);
	Исключение
		
		Операция = НСтр("ru = 'Регламентное получение электронных документов'");
		
		ШаблонСообщения = НСтр("ru = 'При процессе выполнении произошла ошибка: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет регламентное задание по фактической отправке электронных документов.
Процедура РегламентнаяОтправкаОформленныхЭД() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаОформленныхЭД);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ВызватьИсключение
			НСтр("ru = 'Работа регламентного задания в режиме сервиса не предусмотрена.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Начато регламентное задание по отправке оформленных эл.документов.'");
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 4, УровеньЖурналаРегистрации.Информация);
	
	Попытка
		КоличествоПакетов = ОтправкаСформированныхЭД();
		Текст = НСтр("ru = 'Закончено регламентное задание. Отправлено пакетов: %КоличествоПакетов%.'");
		Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 4, УровеньЖурналаРегистрации.Информация);
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Во время регламентной отправки оформленных эл.документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеОшибки, 4, УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
КонецПроцедуры

// Метод регламентного задания по проверке контрагентов в справочнике.
// 		В модели сервиса обновляет состояния контрагентов по каждой записи регистра.
// 		В локальном режима записывает недостающих контрагентов в регистр и обновляет состояния по каждой записи регистра.
Процедура ПроверитьКонтрагентовРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭД);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияКонтрагентов.Контрагент,
	|	СостоянияКонтрагентов.ИНН,
	|	СостоянияКонтрагентов.КПП,
	|	СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	&Дата КАК Дата
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентов";

	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
			
	КонецЕсли;

	// Указываем дату, на которую будет выполняться проверка.
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Выполняется проверка только тех ИНН и КПП, которые записаны в регистр.
	ПроверитьКонтрагентов(ДанныеКонтрагентов);
	
	// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме.
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ПроверитьНепроверенныхКонтрагентов(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Проверка наличия новых электронных документов.
//
Процедура ПроверитьНаличиеНовыхЭД() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.НаличиеНовыхЭД);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписиЭД") Тогда
		Возврат;
	КонецЕсли;
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.СпособОбменаЭД = &СпособОбменаЭД
	|	И ПрофилиНастроекЭДО.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("СпособОбменаЭД", СпособОбмена);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(СпособОбмена);
	
	ИдентификаторыЕстьЭДО = Новый Массив;
	ИдентификаторыНетЭДО = Новый Массив;
	
	ВидОперации = НСтр("ru = 'Получение информации о новых электронных документах'");
	
	Пока Выборка.Следующий() Цикл
		
		ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
		
		Если Не УведомленияПодключены(ИдентификаторОрганизации, Соединение) Тогда
			ИдентификаторыНетЭДО.Добавить(ИдентификаторОрганизации);
			Продолжить;
		КонецЕсли;
		
		ИмяМетода = "IsMessagesExists?query=" + Выборка.ИдентификаторОрганизации;
		Запрос = Новый HTTPЗапрос(ИмяМетода);
		
		Попытка
			Ответ = Соединение.Получить(Запрос);
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса.'");
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
				
			Продолжить;
		КонецПопытки;
		
		Если Не Ответ.КодСостояния = 200 Тогда
			
			ШаблонСообщения = НСтр("ru = 'Код ответа сервиса %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Ответ.КодСостояния);
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		Результат = Ответ.ПолучитьТелоКакСтроку();
		
		ХМЛ = Новый ЧтениеXML;
		ХМЛ.УстановитьСтроку(Результат);
		ЭДО = ФабрикаXDTO.ПрочитатьXML(ХМЛ);
		
		ЕстьНовыйЭД = ЗначениеСтатуса(ЭДО.Result);
		Если ЕстьНовыйЭД Тогда
			ИдентификаторыЕстьЭДО.Добавить(ИдентификаторОрганизации);
		Иначе
			ИдентификаторыНетЭДО.Добавить(ИдентификаторОрганизации);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИдентификаторыЭДО(ИдентификаторыЕстьЭДО);
	ОбновитьИдентификаторыЭДО(ИдентификаторыНетЭДО, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭП

// Процедура - Сохранить вместе с последней ЭП.
//
// Параметры:
//  ПрисоединенныйФайл - Файл - файл для сохранения.
//  ДанныеФайла - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  АдресКаталога - Строка - путь для сохранения.
//  СоответствиеФайлЭД - Соответствие - соответствие файлов и электронных подписей.
//
Процедура СохранитьВместеСПоследнейЭП(ПрисоединенныйФайл, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД) Экспорт
	
	ПолноеИмяФайла = АдресКаталога + ДанныеФайла.ИмяФайла;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	Файл = Новый Файл(АдресКаталога);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(АдресКаталога);
	КонецЕсли;
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		КоличествоПодписей = МассивСтруктурПодписей.Количество();
		Для Сч = 1 По КоличествоПодписей - 1 Цикл
			МассивСтруктурПодписей.Удалить(0);
		КонецЦикла;
		СохранитьПодписи(
				ПрисоединенныйФайл,
				ПолноеИмяФайла,
				МассивСтруктурПодписей,
				АдресКаталога,
				СоответствиеФайлЭД,
				Истина);
	КонецЕсли;
	
КонецПроцедуры

// Сохранение электронного документа с электронной подписью.
//
// Параметры:
//  ПрисоединенныйФайл - Файл - файл для сохранения.
//  ДанныеФайла - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  АдресКаталога - Строка - путь для сохранения.
//  СоответствиеФайлЭД - Соответствие - соответствие файлов и электронных подписей.
//  ЭтоПроизвольныйДокумент - Булево - признак произвольного документа.
//
Процедура СохранитьВместеСЭП(ПрисоединенныйФайл,
								ДанныеФайла,
								АдресКаталога,
								СоответствиеФайлЭД,
								ЭтоПроизвольныйДокумент = Неопределено) Экспорт
	
	// Для подтверждения необходимо в каталог формирования файлов сохранить только последнюю подпись.
	ПолноеИмяФайла = СохранитьФайлКак(ДанныеФайла, АдресКаталога, ПрисоединенныйФайл, ЭтоПроизвольныйДокумент, СоответствиеФайлЭД);
	Если ПолноеИмяФайла = "" Тогда
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		СохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, МассивСтруктурПодписей, АдресКаталога,
			СоответствиеФайлЭД, , ЭтоПроизвольныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Проверка подписи.
//
// Параметры:
//  ДвоичныеДанныеПроверки - ДвоичныеДанные - данные проверки.
//  ЭлектронныйДокумент - Ссылка - электронный документ.
// 
// Возвращаемое значение:
//  Булево - признак проверки подписи.
//
Функция ЕстьТакаяПодпись(ДвоичныеДанныеПроверки, ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ПодписьДокумента Из ЭлектронныйДокумент.ЭлектронныеПодписи Цикл
		ДвоичныеДанныеПодписи = ПодписьДокумента.Подпись.Получить();
		Если ДвоичныеДанныеПодписи = ДвоичныеДанныеПроверки Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Использование криптосредств.
// 
// Возвращаемое значение:
//  Булево - Истина, если используются криптосредства.
//
Функция ИспользоватьКриптоСредства() Экспорт
	
	Отказ = Ложь;
	ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
	Возврат НЕ Отказ;
	
КонецФункции

// Сертификаты электронных документов

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр НастройкаЭДО, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных по данной настройке или профилю сертификатов.
//
// Параметры:
//  МассивОтпечатков - Массив - содержит строки отпечатков сертификатов, установленных в хранилище на Клиенте/Сервере
//                     (в зависимости от настроек работы с криптографией).
//  НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД, СправочникСсылка.ПрофилиНастроекЭДО - объект, для
//                                                                 которого требуется получить список сертификатов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица сертификатов.
//
Функция ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатков, НастройкаЭДО = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений;
	Если ТипЗнч(МассивОтпечатков) = Тип("Массив") Тогда
		ЗапросПоСертификатам = Новый Запрос;
		Если ТипЗнч(НастройкаЭДО) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Сертификаты.Ссылка,
			|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
			|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
			|	ЛОЖЬ КАК ПарольПолучен,
			|	Сертификаты.Отпечаток
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
			|			ПО Сертификаты.Ссылка = ВидыЭДЭП.СертификатЭП
			|		ПО СоглашенияЭДСертификаты.Сертификат = Сертификаты.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
			|		ПО СоглашенияЭДСертификаты.Ссылка = СоглашенияОбИспользованииЭД.Ссылка
			|ГДЕ
			|	СоглашенияОбИспользованииЭД.Ссылка = &НастройкаЭДО
			|	И Сертификаты.Отпечаток В(&МассивОтпечатков)";
			ЗапросПоСертификатам.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
		ИначеЕсли ТипЗнч(НастройкаЭДО) = Тип("СправочникСсылка.ПрофилиНастроекЭДО") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Сертификаты.Ссылка,
			|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
			|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
			|	ЛОЖЬ КАК ПарольПолучен,
			|	Сертификаты.Отпечаток
			|ИЗ
			|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофильНастроекЭДОСертификаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
			|			ПО Сертификаты.Ссылка = ВидыЭДЭП.СертификатЭП
			|		ПО ПрофильНастроекЭДОСертификаты.Сертификат = Сертификаты.Ссылка
			|ГДЕ
			|	ПрофильНастроекЭДОСертификаты.Ссылка = &НастройкаЭДО
			|	И Сертификаты.Отпечаток В (&МассивОтпечатков)";
			ЗапросПоСертификатам.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Сертификаты.Ссылка,
			|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
			|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
			|	ЛОЖЬ КАК ПарольПолучен,
			|	Сертификаты.Отпечаток
			|ИЗ
			|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
			|ГДЕ
			|	НЕ Сертификаты.Отозван
			|	И Сертификаты.Отпечаток В (&МассивОтпечатков)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|	И (Сертификаты.Пользователь = &ТекущийПользователь
			|			ИЛИ Сертификаты.Пользователь = &ПустойПользователь
			|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)
			|	И НЕ Сертификаты.ПометкаУдаления";
		
		ЗапросПоСертификатам.Текст = ТекстЗапроса;
			
		ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
		ЗапросПоСертификатам.УстановитьПараметр("ПустойПользователь",	Справочники.Пользователи.ПустаяСсылка());
		ЗапросПоСертификатам.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
		ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков",		МассивОтпечатков);
		ВозвращаемоеЗначение = ЗапросПоСертификатам.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр СоглашениеЭД, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных, по данному соглашению, сертификатов.
//
// Параметры:
//  МассивОтпечатковСертификатов - Массив - массив отпечатков сертификатов, установленных в хранилище на Клиенте/Сервере
//                                 (в зависимости от настроек работы с криптографией).
//  НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение об обмене ЭД через оператора ЭДО,
//                                                                список сертификатов которого требуется.
//
// Возвращаемое значение:
//  Массив - массив структур сертификатов.
//
Функция МассивСтруктурДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаЭДО = Неопределено) Экспорт
	
	МассивСтруктурДоступныхСертификатов = Новый Массив;
	
	ТаблицаДоступныхСертификатов = ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаЭДО);
	Для Каждого ТекЭл Из МассивОтпечатковСертификатов Цикл
		СтрокаТаблицы = ТаблицаДоступныхСертификатов.Найти(ТекЭл, "Отпечаток");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("Отпечаток",                   ТекЭл);
		СтруктураСертификата.Вставить("Сертификат",                  СтрокаТаблицы.Ссылка);
		СтруктураСертификата.Вставить("ПарольПолучен",               СтрокаТаблицы.ПарольПолучен);
		СтруктураСертификата.Вставить("ПарольПользователя",          СтрокаТаблицы.ПарольПользователя);
		СтруктураСертификата.Вставить("ЗапомнитьПарольКСертификату", СтрокаТаблицы.ЗапомнитьПарольКСертификату);
		СтруктураСертификата.Вставить("Комментарий",                 "");
		
		МассивСтруктурДоступныхСертификатов.Добавить(СтруктураСертификата);
	КонецЦикла;
	
	Возврат МассивСтруктурДоступныхСертификатов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Получает номер текущей версии электронного документа для владельца.
// 
// Параметры:
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, номер версии электронного документа которого надо получить.
//
// Возвращаемое значение:
//  Число - номер версии.
//
Функция НомерВерсииЭДПоВладельцу(СсылкаНаВладельца) Экспорт
	
	СтруктураВерсииЭД = ПараметрыВерсииЭлектронногоДокумента(СсылкаНаВладельца);
	Если ЗначениеЗаполнено(СтруктураВерсииЭД.НомерВерсииЭД) Тогда
		Возврат СтруктураВерсииЭД.НомерВерсииЭД;
	КонецЕсли;

	Возврат ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца) + 1;
	
КонецФункции

// Получение первого состояния версии электронного документа для владельца.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка - ссылка на владельца электронного документа.
//  ПризнакПолучения - Булево - признак получения для входящего документа.
// 
// Возвращаемое значение:
//  Перечисление.СостоянияВерсийЭД - состояние версии.
//
Функция ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаВладельца, ПризнакПолучения = Ложь) Экспорт
	
	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	
	СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	НаправлениеЭД = "";
	Если ПараметрыЭД.Свойство("НаправлениеЭД", НаправлениеЭД) И ЗначениеЗаполнено(НаправлениеЭД) Тогда
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
			ИЛИ НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован;
		ИначеЕсли НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			Если ПризнакПолучения Тогда 
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении;
			Иначе
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеВерсииЭД;
	
КонецФункции

// Получение данных состояния электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
// 
// Возвращаемое значение:
//  Структура - состояние электронного документа.
//    * СостояниеВерсииЭД - ПеречислениеСсылка.СостоянияВерсийЭД - состояние версии.
//    * КомментарийРС - Строка - комментарий.
//
Функция ДанныеСостоянияЭД(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеЭД = Новый Структура;
	
	Если ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		
			СостояниеЭД.Вставить("СостояниеВерсииЭД", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СсылкаНаВладельца,"СостояниеЭДО"));
				
			Если СостояниеЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда 
				СостояниеЭД.Вставить("КомментарийРС", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СсылкаНаВладельца,"ПричинаОтклонения"));
			КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
		|	СостоянияЭД.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			СостояниеЭД.Вставить("СостояниеВерсииЭД", Выборка.СостояниеВерсииЭД);
			СостояниеЭД.Вставить("КомментарийРС", Выборка.Комментарий);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через FTP

// Получение FTP соединения.
//
// Параметры:
//  ПрофильНастроекЭДО - СправочникСсылка.ПрофилиНастроекЭДО - профиль ЭДО.
//  ЭтоТест - Булево - признак тестового соединения.
// 
// Возвращаемое значение:
//  FTPСоединение - соединение FTP.
//
Функция ПолучитьFTPСоединение(ПрофильНастроекЭДО, ЭтоТест = Ложь) Экспорт
	
	Если ЭтоТест Тогда
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка установки FTP соединения.
			|%1'");
	Иначе
		ШаблонСообщения = "%1";
	КонецЕсли;
		
	ИспользоватьПрокси = Ложь;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ПараметрИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		Если НЕ ПараметрИспользоватьПрокси=Неопределено Тогда
			ИспользоватьПрокси = ПараметрИспользоватьПрокси;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		Если НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки") Тогда
			// Системные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси(Истина);
		Иначе
			// Ручные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси;
			Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"],
				НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
			Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
		КонецЕсли;
	Иначе
		Прокси = Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
		"АдресСервера, Логин, Пароль, Порт, ПассивноеСоединение");
	Таймаут = 30;
	
	Попытка
		FTPСоединение = Новый FTPСоединение(ПараметрыПрофиляНастроекЭДО.АдресСервера,
											ПараметрыПрофиляНастроекЭДО.Порт,
											ПараметрыПрофиляНастроекЭДО.Логин,
											ПараметрыПрофиляНастроекЭДО.Пароль,
											Прокси,
											ПараметрыПрофиляНастроекЭДО.ПассивноеСоединение,
											Таймаут);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
			|%2'");
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("121");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЭтоТест Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат FTPСоединение;
	
КонецФункции

// Подготовка пути FTP.
//
// Параметры:
//  Путь - Строка - путь для FTP сервера.
//
Процедура ПодготовитьПутьFTP(Путь) Экспорт
	
	Путь = СтрЗаменить(Путь, "\", "/");
	Если ЗначениеЗаполнено(Путь) Тогда
		Если НЕ Лев(Путь, 1) = "/" Тогда
			Путь = "/" + Путь;
		КонецЕсли;
		Если НЕ Прав(Путь, 1) = "/" Тогда
			Путь = Путь + "/";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура используется для проведения тестирования настроек обмена через FTP.
//
// Параметры:
//  ПрофильНастроекЭДО - СправочникСсылка.Соглашение - тестируемое соглашение.
//  КаталогВходящихДокументов - Строка - путь к каталогу обмена входящими документами.
//  КаталогИсходящихДокументов - Строка - путь к каталогу обмена исходящими документами.
//
Процедура ТестСвязиОбменаЧерезFTP(ПрофильНастроекЭДО, КаталогВходящихДокументов, КаталогИсходящихДокументов) Экспорт
	
	FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО, Истина);
	
	Если FTPСоединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Проверка каталога исходящих документов.
							|%1'");
	
	ТекстОшибки = "";
	Попытка
		ПодготовитьПутьFTP(КаталогИсходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(КаталогИсходящихДокументов);
	Исключение
		СоздатьКаталогиFTP(FTPСоединение, КаталогИсходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		РезультатТеста = ТекстОшибки;
	Иначе
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ТекстСообщения = НСтр("ru = 'Тест обмена по профилю %1.'") + " " + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'Проверка записи и чтения файлов в каталоге исходящих документов.
									|%1'");
		ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатТеста = ТекстОшибки;
		Иначе
			РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ТекстСообщения = НСтр("ru = 'Тест обмена по профилю %1.'") + " " + ТекстСообщения;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ТекстОшибки = "";
	
	ШаблонСообщения = НСтр("ru = 'Проверка каталога входящих документов.
		|%1'");
	Попытка
		ПодготовитьПутьFTP(КаталогВходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(КаталогВходящихДокументов);
	Исключение
		СоздатьКаталогиFTP(FTPСоединение, КаталогВходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
		
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		РезультатТеста = ТекстОшибки;
	Иначе
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ТекстСообщения = НСтр("ru = 'Тест обмена по профилю %1.'") + " " + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'Проверка записи и чтения файлов в каталоге входящих документов.
									|%1'");
		ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатТеста = ТекстОшибки;
		Иначе
			РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ТекстСообщения = НСтр("ru = 'Тест обмена по профилю %1.'") + " " + ТекстСообщения;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Создание каталогов на FTP сервере
//
// Параметры:
//  FTPСоединение - FTPСоединение - соединение с FTP сервером.
//  ПолныйПуть - Строка - путь для создания каталога.
//  ЭтоТест - Булево - признак тестирования.
//  ТекстОшибки - Строка - текст ошибки создания.
//
Процедура СоздатьКаталогиFTP(FTPСоединение, ПолныйПуть, ЭтоТест = Ложь, ТекстОшибки = Неопределено) Экспорт
	
	ПолныйПуть = СтрЗаменить(ПолныйПуть, "\", "/");
	МассивКаталогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолныйПуть, "/", Истина);
	ТекущийПуть = "/";
	FTPСоединение.УстановитьТекущийКаталог(ТекущийПуть);
	Для Каждого Элемент Из МассивКаталогов Цикл
		
		мКаталог = Новый Массив;
		
		НайтиФайлыВКаталогеFTP(FTPСоединение, Элемент, Неопределено, Истина, ТекстОшибки, мКаталог);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		Если мКаталог.Количество() = 1 Тогда 
			Если мКаталог[0].ЭтоФайл() Тогда 
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("122");
				Если НЕ ЭтоТест Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецЕсли;
			СоздаватьКаталог = Ложь;
		Иначе
			СоздаватьКаталог = Истина;
		КонецЕсли;

		Если СоздаватьКаталог Тогда
			Попытка
				FTPСоединение.СоздатьКаталог(Элемент);
			Исключение
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("123");
				Если НЕ ЭтоТест Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецПопытки
		КонецЕсли;
		
		ТекущийПуть = ТекущийПуть + Элемент + "/";
		
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(ТекущийПуть);
		Исключение
			ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("124");
			Если НЕ ЭтоТест Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

// Запись файла на FTP.
//
// Параметры:
//  FTPСоединение - FTPСоединение - соединение FTP.
//  Источник - Строка - информация для записи.
//  ИмяВыходногоФайла - Строка - имя файла.
//  ЭтоТест - Булево - для тестирования не выводится результат теста в случае ошибки.
//  РезультатТеста - Строка - сообщение об ошибке.
//
Процедура ЗаписатьФайлНаFTP(FTPСоединение,
							Источник,
							ИмяВыходногоФайла,
							ЭтоТест = Ложь,
							РезультатТеста = Неопределено) Экспорт
	
	Попытка
		FTPСоединение.Записать(Источник, ИмяВыходногоФайла);
	Исключение
		РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("127");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

// Загружает файл с FTP источника.
//
// Параметры:
//  FTPСоединение - FTPСоединение - используемое соединение для получения файла.
//  Источник - Строка - адрес ресурса.
//  ИмяВыходногоФайла - Строка - имя файла, в который помещаются данные полученного ресурса.
//  ЭтоТест - Булево - получение файла выполняется в рамках тестирования.
//  РезультатТеста - Строка - текст ошибки, если она возникнет.
//
Процедура ПолучитьФайлСFTP(FTPСоединение, Источник, ИмяВыходногоФайла, ЭтоТест = Ложь, РезультатТеста = Неопределено) Экспорт
	
	Попытка
		FTPСоединение.Получить(Источник, ИмяВыходногоФайла);
	Исключение
		РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("128");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет файл с FTP источника.
//
// Параметры:
//    FTPСоединение - FTPСоединение - используемое соединение для получения файла.
//    Путь - Строка - путь к удаляемым файлам на сервере.
//    РезультатТеста - Строка - текст ошибки, если она возникнет.
//    ЭтоТест - Булево - получение файла выполняется в рамках тестирования.
//
Процедура УдалитьФайлFTP(FTPСоединение, Путь, РезультатТеста = Неопределено, ЭтоТест = Ложь) Экспорт
	
	Попытка
		FTPСоединение.Удалить(Путь);
	Исключение
		РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("129");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка пакетов электронных документов

// Создание пакетов электронных документов.
// 
// Параметры:
//  МассивЭД - Массив - ссылки на электронные документы, которые надо включить в пакет.
//  ПризнакПодписи - Булево - признак, что документы подписаны ЭП.
//
// Возвращаемое значение:
//  Массив - список структур пакетов ЭД.
//
Функция СоздатьДокументыПакетовЭД(МассивЭД, ПризнакПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПакетовЭД = Новый ТаблицаЗначений;
	ТаблицаПакетовЭД.Колонки.Добавить("ПЭД");
	ТаблицаПакетовЭД.Колонки.Добавить("СпособОбменаЭД");
	ТаблицаПакетовЭД.Колонки.Добавить("АдресРесурсаПолучателя");
	ТаблицаПакетовЭД.Колонки.Добавить("ТребуетсяШифрованиеНаКлиенте");
	ТаблицаПакетовЭД.Колонки.Добавить("ВерсияФорматаПакета");
	ТаблицаПакетовЭД.Колонки.Добавить("ТребуетсяИзвещениеОПолучении");
	
	МассивПодготовленныхКОтправкеЭД = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, НаправлениеЭД, ОтправительЭД, ПолучательЭД, ВладелецФайла, ВладелецФайла.ВидЭД");
		
		ДокументНеПодписан = РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
						 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
						 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан;
		Если (ПризнакПодписи И ДокументНеПодписан) ИЛИ НЕ УстановленныеПодписиВалидны(ЭД) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидЭД = РеквизитыЭД.ВладелецФайлаВидЭД;
		
		// Поиск настройки ЭДО для исходящего пакета ЭД.
		Если РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПараметрыНастройкиЭДО = ПолучитьНастройкиОбменаЭДПоИД(РеквизитыЭД.ПолучательЭД, РеквизитыЭД.ОтправительЭД);
		ИначеЕсли РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ПараметрыНастройкиЭДО = ПолучитьНастройкиОбменаЭДПоИД(РеквизитыЭД.ОтправительЭД, РеквизитыЭД.ПолучательЭД, ВидЭД);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыНастройкиЭДО) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭДТабличнойЧасти = Новый Массив;
		ЭДТабличнойЧасти.Добавить(ЭД);
		
		ПЭД = СоздатьПакетЭД(ПараметрыНастройкиЭДО, ЭДТабличнойЧасти);
			
		Если ЗначениеЗаполнено(ПЭД) Тогда
			НовСтрока = ТаблицаПакетовЭД.Добавить();
			НовСтрока.ПЭД = ПЭД;
			Если ПараметрыНастройкиЭДО.Свойство("АдресПолучателя") Тогда
				НовСтрока.АдресРесурсаПолучателя = ПараметрыНастройкиЭДО.АдресПолучателя;
			КонецЕсли;
			НовСтрока.ТребуетсяШифрованиеНаКлиенте = ПараметрыНастройкиЭДО.Свойство("ТребуетсяШифрованиеНаКлиенте")
														И ПараметрыНастройкиЭДО.ТребуетсяШифрованиеНаКлиенте;
			НовСтрока.ВерсияФорматаПакета = ПараметрыНастройкиЭДО.ВерсияФорматаПакета;
			НовСтрока.СпособОбменаЭД = ПараметрыНастройкиЭДО.СпособОбменаЭД;
			НовСтрока.ТребуетсяИзвещениеОПолучении = ПараметрыНастройкиЭДО.ТребуетсяИзвещениеОПолучении;
			
			МассивПодготовленныхКОтправкеЭД.Добавить(ЭД);
			
		КонецЕсли;

	КонецЦикла;
	
	// Сформируем массив структур для обработки на клиенте.
	МассивСтруктурПЭД = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаПакетовЭД Цикл
		СтруктураПЭД = Новый Структура;
		СтруктураПЭД.Вставить("ПЭД",                    ТекСтрока.ПЭД);
		СтруктураПЭД.Вставить("АдресРесурсаПолучателя", ТекСтрока.АдресРесурсаПолучателя);
		СтруктураПЭД.Вставить("ТребуетсяШифрованиеНаКлиенте", Ложь);
		Если ТекСтрока.ТребуетсяШифрованиеНаКлиенте = Истина Тогда
			СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте = Истина;
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Продолжить;
		КонецЕсли;
		
		Если (ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			ИЛИ ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО)
			ИЛИ (ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту
				ИЛИ ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
				ИЛИ ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP
				И ТекСтрока.ВерсияФорматаПакета <> Перечисления.ВерсииФорматаПакетаЭД.Версия10) Тогда
			
				Если ОбменСКонтрагентамиВнутренний.СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(ТекСтрока.ПЭД, Неопределено,
						ТекСтрока.ТребуетсяИзвещениеОПолучении) Тогда
				МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Иначе
				Для Каждого ЭД Из ТекСтрока.ПЭД.ЭлектронныеДокументы Цикл
					ЭДВМассиве = МассивПодготовленныхКОтправкеЭД.Найти(ЭД.ЭлектронныйДокумент);
					Если ЭДВМассиве <> Неопределено Тогда
						МассивПодготовленныхКОтправкеЭД.Удалить(ЭДВМассиве);
					КонецЕсли;
				КонецЦикла;
				ПЭД = ТекСтрока.ПЭД.ПолучитьОбъект();
				ПЭД.СтатусПакета    = Перечисления.СтатусыПакетовЭД.Отменен;
				ПЭД.ПометкаУдаления = Истина;
				ПЭД.Записать();
			КонецЕсли;
		Иначе
			СформироватьЭДПрисоединенныйФайлПакета(ТекСтрока.ПЭД);
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
		КонецЕсли;
	КонецЦикла;
	ОбновитьСтатусыЭД(МассивПодготовленныхКОтправкеЭД, ПризнакПодписи);
	
	Возврат МассивСтруктурПЭД;
	
КонецФункции

// Формирование нового пакета электронного документа.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры для формирования.
// 
// Возвращаемое значение:
//  ДокументСсылка.ПакетЭД - сформированный документ ПакетЭД.
//
Функция СформироватьНовыйПакетЭД(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭД                         = Документы.ПакетЭД.СоздатьДокумент();
		ПакетЭД.Дата                    = ТекущаяДатаСеанса();
		ПакетЭД.СтатусПакета            = СтруктураПараметров.СтатусПакета;
		
		ПакетЭД.Направление             = СтруктураПараметров.НаправленияЭД;
		
		ПакетЭД.Контрагент              = СтруктураПараметров.Контрагент;
		ПакетЭД.Организация             = СтруктураПараметров.Организация;
		
		ПакетЭД.Отправитель             = СтруктураПараметров.Отправитель;
		ПакетЭД.Получатель              = СтруктураПараметров.Получатель;
		
		Если СтруктураПараметров.Свойство("ПрофильНастроекЭДО") Тогда
			ПакетЭД.ПрофильНастроекЭДО      = СтруктураПараметров.ПрофильНастроекЭДО;
		КонецЕсли;
		
		ПакетЭД.НастройкаЭДО            = СтруктураПараметров.НастройкаЭДО;
		ПакетЭД.СпособОбменаЭД          = СтруктураПараметров.СпособОбменаЭД;
		
		ПакетЭД.ВерсияФорматаПакета     = СтруктураПараметров.ВерсияФорматаПакета;
		
		ПакетЭД.ДанныеЗашифрованы       = СтруктураПараметров.Зашифрован;
		Если СтруктураПараметров.СертификатОрганизацииДляРасшифровки <> Неопределено Тогда
			ПакетЭД.СертификатШифрования = СтруктураПараметров.СертификатОрганизацииДляРасшифровки;
		КонецЕсли;
		
		ПакетЭД.АдресРесурсаКонтрагента = СтруктураПараметров.АдресОтправителя;
		ПакетЭД.АдресРесурсаОрганизации = СтруктураПараметров.АдресПолучателя;
		
		Если СтруктураПараметров.Свойство("ВнешнийУИД") Тогда
			ПакетЭД.ВнешнийУИД          = СтруктураПараметров.ВнешнийУИД;
		КонецЕсли;
		ПакетЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'создание нового ПакетаЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ПакетЭД.Ссылка;
	
КонецФункции

// Помещение пакета электронного документа в конверт.
//
// Параметры:
//  Конверт					 - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  АдресАрхиваКонтейнера	 - Строка - имя файла.
//
Процедура ПоместитьПакетЭДВКонверт(Конверт, АдресАрхиваКонтейнера) Экспорт
	
	// Так как теперь может быть несколько документов в одном пакете, надо проверять, есть ли
	// уже присоединенные файлы к пакету. Если есть - ничего не делать.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	
	Если ЗначениеЗаполнено(Выборка) И Выборка.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(АдресАрхиваКонтейнера);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(АдресАрхиваКонтейнера);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", Конверт);
	ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение,".", ""));
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
		ПараметрыФайла, АдресВоВременномХранилище);
	
КонецПроцедуры

// Обновление статусов документов пакета электронного документа.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - ссылка на пакет электронного документа.
//  НовыйСтатусПакетаЭД - ПеречислениеСсылка.СтатусыПакетовЭД - новый статус.
//  ДатаИзменения - Дата - дата изменения статуса.
//
Процедура ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД, НовыйСтатусПакетаЭД, ДатаИзменения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПакетЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПакетЭД.ЭлектронныеДокументы.Количество() = 0 Тогда
		
		ШаблонОшибки = НСтр("ru = 'Документ %1 не был отправлен. Подробнее см. Журнал регистрации'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ШаблонОшибки = НСтр("ru = 'Некорректно заполнен документ %1.
			|Не заполнена табличная часть ""ОбменСКонтрагентами""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			НСтр("ru = 'Отправка пакета ЭД и обновление статусов ЭД'"),
			ТекстОшибки,
			ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Документ Из ПакетЭД.ЭлектронныеДокументы Цикл
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				ЗаписатьДатуПолучения(Документ.ЭлектронныйДокумент, ДатаИзменения);
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ЗаписатьДатуОтправки(Документ.ЭлектронныйДокумент, ДатаИзменения);
			КонецЕсли;
			ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьВерсиюЭД(Документ.ЭлектронныйДокумент);
		КонецЦикла;
		ПакетОбъект = ПакетЭД.ПолучитьОбъект();
		ПакетОбъект.СтатусПакета = НовыйСтатусПакетаЭД;
		ПакетОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			НСтр("ru = 'смена статуса пакета ЭД и обновление статусов ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Определение настройки обмена ЭД по источнику - документу базы данных или по ЭД.
//
// Параметры:
//  Источник - Ссылка - ссылка на источник.
//  ВыводитьСообщения - Булево - выводить сообщения об ошибках.
//  МассивОтпечатковСертификатов - Массив - отпечатки сертификатов.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  ФлагДействующиеСоглашения - Булево - отбор по действующим настройкам ЭДО.
// 
// Возвращаемое значение:
//  Структура - настройки обмена.
//
Функция ОпределитьНастройкиОбменаЭДПоИсточнику(
				Источник,
				ВыводитьСообщения = Истина,
				МассивОтпечатковСертификатов = Неопределено,
				ЭД = Неопределено,
				ВидЭД = Неопределено,
				ФлагДействующиеСоглашения = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ЭД) Тогда
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
		
		ПараметрыЭД.Вставить("УстановленныеПодписи", ЭД.ЭлектронныеПодписи.ВыгрузитьКолонку("Отпечаток"));
	Иначе
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
	КонецЕсли;
	
	// Заполним ВидЭД в случае непосредственного выбора пользователем.
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		ПараметрыЭД.ВидЭД = ВидЭД;
	КонецЕсли;
	
	Результат = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, МассивОтпечатковСертификатов, ФлагДействующиеСоглашения);
	
	Если Результат = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			ПараметрыЭД.Удалить("ИмяРеквизитаОрганизации");
			ПараметрыЭД.Удалить("ИмяРеквизитаКонтрагента");
			СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры:
//  ИДОтправителя - Строка - строка с уникальный идентификатор отправителя.
//  ИДПолучателя - Строка - строка с уникальный идентификатор получателя.
//  ВидЭД - ПеречислениеСсылка - вид электронного документа.
//
// Возвращаемое значение:
//  Структура - структура параметров с настройками обмена.
//
Функция ПолучитьНастройкиОбменаЭДПоИД(ИДОтправителя, ИДПолучателя, ВидЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
	|	НастройкиЭДОИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогИсходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументовFTP,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогИсходящихДокументовFTP,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.ЭлектроннаяПочтаКонтрагента,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.РесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.РесурсИсходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.СертификатОрганизацииДляРасшифровки,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.СертификатКонтрагентаДляШифрования,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.ВерсияФорматаПакета
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ &ИдентификаторКонтрагента = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ИдентификаторОрганизации = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|	И ВЫБОР
	|			КОГДА НЕ &ВидЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДПолучателя);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОтправителя);
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Отправитель",         ИДОтправителя);
		СтруктураВозврата.Вставить("Получатель",          ИДПолучателя);
		СтруктураВозврата.Вставить("Организация",         Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",          Выборка.Контрагент);
		СтруктураВозврата.Вставить("ПрофильНастроекЭДО",  Выборка.ПрофильНастроекЭД);
		СтруктураВозврата.Вставить("НастройкаЭДО",        Выборка.НастройкаЭДО);
		СтруктураВозврата.Вставить("СпособОбменаЭД",      Выборка.СпособОбменаЭД);
		СтруктураВозврата.Вставить("СертификатОрганизацииДляРасшифровки", Выборка.СертификатОрганизацииДляРасшифровки);
		СтруктураВозврата.Вставить("СертификатКонтрагентаДляШифрования",  Выборка.СертификатКонтрагентаДляШифрования);
		СтруктураВозврата.Вставить("ВерсияФорматаПакета", Выборка.ВерсияФорматаПакета);
		СтруктураВозврата.Вставить("ТребуетсяИзвещениеОПолучении", Выборка.ТребуетсяИзвещениеОПолучении);
		
		АдресОтправителя = Выборка.РесурсВходящихДокументов;
		АдресПолучателя  = Выборка.РесурсИсходящихДокументов;
		Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			АдресОтправителя = Выборка.ОбщийРесурсВходящихДокументов;
			АдресПолучателя  = Выборка.ЭлектроннаяПочтаКонтрагента;
			
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			
			АдресОтправителя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогВходящихДокументов);
			АдресПолучателя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогИсходящихДокументов);
		
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			
			АдресОтправителя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогВходящихДокументовFTP);
			АдресПолучателя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогИсходящихДокументовFTP)
			
		КонецЕсли;
		СтруктураВозврата.Вставить("АдресОтправителя", АдресОтправителя);
		СтруктураВозврата.Вставить("АдресПолучателя",  АдресПолучателя);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получение представления электронного документа.
//
// Параметры:
//  СсылкаНаФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ, текстовое представление которого необходимо получить.
//
// Возвращаемое значение:
//  Строка - текстовое представление электронного документа.
//
Функция ПолучитьПредставлениеЭД(СсылкаНаФайлЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СсылкаНаФайлЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "ДатаФормированияЭДОтправителем,
		|НаправлениеЭД, ТипЭлементаВерсииЭД, ВладелецФайла, ДатаСоздания");
		
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайла.ВладелецФайла, "НомерВерсииЭД,
		|ВидЭД, ДатаДокументаОтправителя, НомерДокументаОтправителя, Номер, Дата");
		
		Версия = РеквизитыЭД.НомерВерсииЭД;
		Если РеквизитыФайла.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
			И ЗначениеЗаполнено(РеквизитыФайла.ДатаФормированияЭДОтправителем) Тогда
			Версия = РеквизитыФайла.ДатаФормированияЭДОтправителем;
		ИначеЕсли РеквизитыФайла.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			И ЗначениеЗаполнено(РеквизитыФайла.ДатаСоздания) Тогда
			Версия = РеквизитыФайла.ДатаСоздания;
		КонецЕсли;
		
		ТекстВерсии = ?(ЗначениеЗаполнено(Версия), " (версия " + Версия + ")", "");
		
		ТекстДаты = ?(ЗначениеЗаполнено(РеквизитыЭД.ДатаДокументаОтправителя),
		" " + "от" + " " + Формат(РеквизитыЭД.ДатаДокументаОтправителя, "ДЛФ=D"), " " + "от" + " " + Формат(РеквизитыЭД.Дата, "ДЛФ=D"));
		
		Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + ТекстДаты + ТекстВерсии;
		ИначеЕсли  ЭтоИзвещениеОПолучении(РеквизитыФайла.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоПодтверждение(РеквизитыФайла.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоУведомлениеОбУточнении(РеквизитыФайла.ТипЭлементаВерсииЭД)  Тогда
			Представление = "" + РеквизитыФайла.ТипЭлементаВерсииЭД + ТекстДаты;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
		Иначе
			НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыЭД.НомерДокументаОтправителя), РеквизитыЭД.НомерДокументаОтправителя, РеквизитыЭД.Номер);
			Представление = "" + РеквизитыЭД.ВидЭД + " "+"№"+" " + НомерДокумента + " " +ТекстДаты
			+ ТекстВерсии;
		КонецЕсли;
		
	Иначе
		
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "НомерВерсииЭД,
		|ВидЭД, ДатаДокументаОтправителя, НомерДокументаОтправителя, ТипЭлементаВерсииЭД, Номер, Дата");
		
		Версия = РеквизитыЭД.НомерВерсииЭД;
		ТекстВерсии = ?(ЗначениеЗаполнено(Версия), " (версия " + Версия + ")", "");
		ТекстДаты = ?(ЗначениеЗаполнено(РеквизитыЭД.ДатаДокументаОтправителя),
		" от " + Формат(РеквизитыЭД.ДатаДокументаОтправителя, "ДЛФ=D"), "");
		
		Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + ТекстДаты + ТекстВерсии;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ТекстЗаголовка = НСтр("ru = 'Произвольный документ %1 от %2'");
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстЗаголовка, РеквизитыЭД.Номер, РеквизитыЭД.Дата);
			
		ИначеЕсли РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
			
			Представление = НСтр("ru = 'Информация продавца №'") + " " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
		Иначе
			Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты
			+ ТекстВерсии;
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Представление;
	
КонецФункции

// Определение представления электронного документа.
//
// Параметры:
//  ВидЭД - Перечисление.ВидЭД - вид электронного документа.
//  СтруктураПараметров - Структура - НомерВладельца, ДатаВладельца, ВерсияЭД.
//
// Возвращаемое значение:
//  Строка - текстовое представление электронного документа.
//
Функция ОпределитьПредставлениеЭД(ВидЭД, СтруктураПараметров) Экспорт
	
	ТекстВидЭД  = "";
	ТекстНомера = "";
	ТекстДаты   = "";
	ТекстВерсии = "";
	ЗначениеСвойства = Неопределено;
	
	Если СтруктураПараметров.Свойство("НомерВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстНомера = " № " + ЗначениеСвойства;
		
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ДатаВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстДаты = " от " + Формат(ЗначениеСвойства, "ДЛФ=D");
	КонецЕсли;
	
	Если ВидЭД <> Перечисления.ВидыЭД.СчетФактура И ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
		И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
		И СтруктураПараметров.Свойство("ВерсияЭД", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		ШаблонТекстаВерсии = НСтр("ru = '(версия %1)'");
		ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВерсии, ЗначениеСвойства);
		
	КонецЕсли;
	
	ТипЭД = "";
	Если СтруктураПараметров.Свойство("ТипЭД", ТипЭД)
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДОП
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
		
		Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
			ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
			ТекстВидЭД = НСтр("ru = 'Информация покупателя'");
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель Тогда
			ТекстВидЭД = Строка(ТипЭД);
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ТекстВидЭД = Строка(ТипЭД);
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик Тогда
			ТекстВидЭД = Строка(ТипЭД);
		ИначеЕсли ЭтоИзвещениеОПолучении(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Извещение о получении'");
		ИначеЕсли ЭтоПодтверждение(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Подтверждение'");
			
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
				ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
				ТекстВидЭД = ТекстВидЭД + " " + НСтр("ru = 'даты получения'");
			Иначе
				ТекстВидЭД = ТекстВидЭД + " " + НСтр("ru = 'даты отправки'");
			КонецЕсли;
			
		ИначеЕсли ЭтоУведомлениеОбУточнении(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Уведомление об уточнении'");
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
			ТекстВидЭД = НСтр("ru = 'Предложение об аннулировании'");
		КонецЕсли;
	Иначе
		
		Если ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			ТекстВидЭД = НСтр("ru = 'Счет-фактура'");
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			ТекстВидЭД = НСтр("ru = 'Корректировочный счет-фактура'");
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
			
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
			ТекстВидЭД = НСтр("ru = 'Товарная накладная (ТОРГ-12)'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			ТекстВидЭД = Строка(ВидЭД);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			ТекстВидЭД = Строка(ВидЭД);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
			ТекстВидЭД = НСтр("ru = 'Акт'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			ТекстВидЭД = НСтр("ru = 'Акт на передачу прав'");
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			ТекстВидЭД = Строка(ВидЭД);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			ТекстВидЭД = НСтр("ru = 'Счет'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Заказ товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			ТекстВидЭД = НСтр("ru = 'Ответ на заказ'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			ТекстВидЭД = НСтр("ru = 'Прайс-лист'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			ТекстВидЭД = НСтр("ru = 'Каталог товаров'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Отчет о продажах комиссионного товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Отчет о списании комиссионного товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			ТекстВидЭД = НСтр("ru = 'Передача Интеркампани'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
			ТекстВидЭД = НСтр("ru = 'Возврат Интеркампани'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ТекстВидЭД = НСтр("ru = 'Произвольный документ'");
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеЭД = ТекстВидЭД + ТекстНомера + ТекстДаты + ТекстВерсии;
	
	Возврат ПредставлениеЭД;
	
КонецФункции

// Определение состояния версии электронного документа на основании статуса.
//
// Параметры:
//  СсылкаНаФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//  ВерсияФорматаПакетаЭД - ПеречислениеСсылка.ВерсииФорматаПакетаЭД - версия формата пакета ЭД.
//  ПринудительнаяСменаСостояния - Булево - Устарело. Не используется.
//  ОтклонениеАннулирования - Булево - признак отклонения аннулирования.
//
// Возвращаемое значение:
//  Перечисления.СостоянияВерсийЭД - значение состояния.
//
Функция ОпределитьСостояниеВерсииПоСтатусуЭД(СсылкаНаФайлЭД, ВерсияФорматаПакетаЭД = Неопределено, ПринудительнаяСменаСостояния = Ложь,
		ОтклонениеАннулирования = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если СсылкаНаФайлЭД = Неопределено Или СсылкаНаФайлЭД = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка() Тогда
		ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НеСформирован;
	Иначе
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаФайлЭД,"ТипЭлементаВерсииЭД");
		Если ЗначениеЗаполнено(ТипЭлементаВерсииЭД) И НЕ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД  Тогда
			
			РеквизитыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "СтатусЭД, ВладелецФайла");
			 
			ТекущийСтатус = РеквизитыФайлаЭД.СтатусЭД;
			
			НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаФайлЭД);
			
			Если ТекущийСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Отклонен
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
				
				Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
					ИЛИ НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					
					Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
						
						Если ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
						Иначе
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
						КонецЕсли;
						
					ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий
						И ТекущийСтатус = Перечисления.СтатусыЭД.Отклонен
						И НЕ ЭтоФНС(РеквизитыФайлаЭД.ВладелецФайла.ВидЭД) Тогда
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
						
					Иначе
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяКорректировка;
					КонецЕсли;
					
				Иначе
					Если ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
					Иначе
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Аннулирован Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Аннулирован;
			ИначеЕсли НастройкиОбмена <> Неопределено Тогда
				
				Если ВерсияФорматаПакетаЭД = Неопределено Тогда
					ВерсияФорматаПакетаЭД = ВерсияПакетаЭД(СсылкаНаФайлЭД);
				КонецЕсли;
				
				Если ВерсияФорматаПакетаЭД = Перечисления.ВерсииФорматаПакетаЭД.Версия30
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
					
					// Если у документа владельца ЭД есть неотправленное подтверждение о получении, то меняем состояние версии ЭД.
					Если (ТекущийСтатус = Перечисления.СтатусыЭД.Получен 
							И НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(СсылкаНаФайлЭД)
							И ЭтоСчетНаОплату(РеквизитыФайлаЭД.ВладелецФайла))
						
						Или ЭтоОтветныйТитул(СсылкаНаФайлЭД)
						// Последний статус для фнс документов через оператора.
						И (ТекущийСтатус = Перечисления.СтатусыЭД.ПереданОператору
						// Последний статус для фнс документов через прямой обмен.
						ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.Отправлен)
						
						// Для CML документов последний статус.
						Или (ТекущийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение
						И НЕ ЭтоCMLДокумент(РеквизитыФайлаЭД.ВладелецФайла)) Тогда
						
						Если ЕстьНеотправленноеПодтверждение(РеквизитыФайлаЭД.ВладелецФайла, ВозвращаемоеЗначение) Тогда
							Возврат ВозвращаемоеЗначение;
						КонецЕсли;
						
					КонецЕсли;
					
					
				КонецЕсли;
				
				МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
				Если МассивСтатусов.Количество() > 0 Тогда
					
					ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
					Если ИндексТекущегоСтатуса = Неопределено Тогда
					ИначеЕсли ИндексТекущегоСтатуса + 1 = МассивСтатусов.Количество() Тогда
						
						Если ТекущийСтатус = Перечисления.СтатусыЭД.Утвержден 
							И НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий 
							И ЭтоТитулФНС(НастройкиОбмена.ВидЭД)
							И Не ОтклонениеАннулирования
							И НастройкиОбмена.ТребуетсяПодтверждение Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаПодписи;
							
						Иначе
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
							
						КонецЕсли;
					Иначе
						СледующийСтатус = МассивСтатусов[ИндексТекущегоСтатуса + 1];
						Если СледующийСтатус = Перечисления.СтатусыЭД.Утвержден Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаУтверждении;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Подписан
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПолностьюПодписан
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ЧастичноПодписан Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаПодписи;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
							И Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыФайлаЭД.ВладелецФайла, "ПрофильНастроекЭДО.СпособОбменаЭД")) Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПереданОператору Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПередачаОператору;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Доставлен
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ДоставленоПодтверждение Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Определение валидности электронных подписей на электронном документе.
//
// Параметры: 
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
// Возвращаемое значение:
//  Булево - результат проверки, Истина - подпись валидна.
//
Функция УстановленныеПодписиВалидны(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ПодписьВерна
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка = &Ссылка
	|	И НЕ ЭДПрисоединенныеФайлыЭлектронныеПодписи.ПодписьВерна";
	Запрос.УстановитьПараметр("Ссылка", ЭД.Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() > 0 Тогда
		ШаблонТекста = НСтр("ru = 'Обработка электронного документа %1.
		|Документ не обработан, так как содержит невалидные подписи.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Отправка сформированных электронных документов.
//
// Параметры:
//  СоответствиеСоглашенийИСтруктурСертификатов - Соответствие - соглашения и сертификаты.
// 
// Возвращаемое значение:
//  Число - количество отправленных документов.
//
Функция ОтправкаСформированныхЭД(СоответствиеСоглашенийИСтруктурСертификатов = Неопределено) Экспорт
	
	Результат = 0;
	// Создание и заполнение документов ПакетыЭД
	ГотовыеКОтправкеПакеты = ОпределитьПодготовленныеКОтправкеЭД();
	Если ЗначениеЗаполнено(ГотовыеКОтправкеПакеты) Тогда
		Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправкаПакетовЭД(ГотовыеКОтправкеПакеты,
			СоответствиеСоглашенийИСтруктурСертификатов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение новых электронных документов на основе заведенных соглашений об обмене.
//
// Параметры:
//  СоотвСоглашенийИСтруктурСертификатов - Соответствие - соглашения и сертификаты.
//  ПовторноеПолучение - Булево - признак повторного получения.
// 
// Возвращаемое значение:
//  Структура - данные по результатам получения электронных документов.
//
Функция ПолучитьНовыеЭД(СоотвСоглашенийИСтруктурСертификатов = Неопределено, ПовторноеПолучение = Ложь) Экспорт
	
	СтруктураВозврата = Новый Структура("МассивПакетовЭД, ВызватьОповещение",
		Новый Массив, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)";
	
	РесурсыДляПроверки = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтборЭП = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	МассивРесурсовЭП = РесурсыДляПроверки.НайтиСтроки(ОтборЭП);

	Для Каждого СтрокаРесурсовЭП Из МассивРесурсовЭП Цикл
		Если ПустаяСтрока(СтрокаРесурсовЭП.ОбщийРесурсВходящихДокументов) Тогда
			Продолжить;
		КонецЕсли;
		
		УчетнаяЗаписьЭП = СтрокаРесурсовЭП.ОбщийРесурсВходящихДокументов;
		НаборСообщений = Новый Массив();
		Попытка
			НаборСообщений = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(УчетнаяЗаписьЭП);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при получении сообщения с сервера электронной почты.
			|%1'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
			
			ТекстСообщения = НСтр("ru = 'Ошибка при получении новых эл.документов.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				НСтр("ru = 'Получение новых эл.документов'"), ТекстОшибки, ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Для Каждого Сообщение Из НаборСообщений Цикл
			СтруктураПараметров = Новый Структура;
			Если НЕ НеобходимоПолучить(Сообщение, СтруктураПараметров) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(Сообщение.Тема, НСтр("ru = 'Подтверждение получения пакета электронных документов.'")) Тогда
				ОбработатьПодтверждениеПолучения(Сообщение);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			Для Каждого ЭлементВложенийПисьма Из Сообщение.Вложения Цикл
				ДвоичныеДанныеЭлемента = ЭлементВложенийПисьма.Значение;
				АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
				ПараметрыФайла = Новый Структура();
				ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", ПакетЭД);
				ИмяБезРасширения = Лев(ЭлементВложенийПисьма.Ключ, СтрДлина(ЭлементВложенийПисьма.Ключ) -4);
				ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", Прав(ЭлементВложенийПисьма.Ключ, 3));
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

				ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
					ПараметрыФайла, АдресВХранилище);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ВерсияФорматаПакета)  
				И Не СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД, УчетнаяЗаписьЭП, Сообщение.Отправитель,
												Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
			КонецЕсли;
				
			СтруктураВозврата.МассивПакетовЭД.Добавить(ПакетЭД);
		КонецЦикла;
	КонецЦикла;
	
	ОтборКаталог = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	МассивРесурсовКаталоги = РесурсыДляПроверки.НайтиСтроки(ОтборКаталог);
	Для Каждого СтрокаРесурсовКаталог Из МассивРесурсовКаталоги Цикл
		КаталогСФайлами = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			СтрокаРесурсовКаталог.ОбщийРесурсВходящихДокументов, СтрокаРесурсовКаталог.КаталогВходящихДокументов);
			
		МассивИменФайлов = Новый Массив;
		МассивФайлов = НайтиФайлы(КаталогСФайлами, "*");
		Для Каждого ЭлементФайл Из МассивФайлов Цикл
			Если ЭлементФайл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			Если Не НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ЭлементФайл.ПолноеИмя);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",       Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",      Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ПакетЭД);
			ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ЭлементФайл.Имя, СтрДлина(ЭлементФайл.Имя) -4));
			ПараметрыФайла.Вставить("РасширениеБезТочки", Прав(ЭлементФайл.Имя, 3));
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
				ПараметрыФайла, АдресВХранилище);

			Если ЗначениеЗаполнено(СтруктураПараметров.ВерсияФорматаПакета)
					И Не СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД, СтрокаРесурсовКаталог, СтруктураПараметров.АдресОтправителя,
					Перечисления.СпособыОбменаЭД.ЧерезКаталог);
			КонецЕсли;
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ЭлементФайл.ПолноеИмя);
			
			СтруктураВозврата.МассивПакетовЭД.Добавить(ПакетЭД);
		КонецЦикла;
	КонецЦикла;
	
	ОтборFTP = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезFTP);
	МассивРесурсовFTP = РесурсыДляПроверки.НайтиСтроки(ОтборFTP);
	Для Каждого СтрокаРесурсовFTP Из МассивРесурсовFTP Цикл
		ПрофильНастроекЭДО = СтрокаРесурсовFTP.ПрофильНастроекЭДО;
		FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО);
		Если FTPСоединение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КаталогВходящихДокументов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			СтрокаРесурсовFTP.ОбщийРесурсВходящихДокументов, СтрокаРесурсовFTP.КаталогВходящихДокументовFTP);
			
		МассивИменФайлов = Новый Массив;
		МассивФайловFTP = Новый Массив;
		ТекстОшибки = "";
		ПодготовитьПутьFTP(КаталогВходящихДокументов);
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(КаталогВходящихДокументов);
		Исключение
			Продолжить;
		КонецПопытки;
		НайтиФайлыВКаталогеFTP(FTPСоединение, КаталогВходящихДокументов, "*", Ложь, ТекстОшибки, МассивФайловFTP);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ФайлFTP Из МассивФайловFTP Цикл
			Если ФайлFTP.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			ВремКаталог = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", Новый УникальныйИдентификатор);
			ПолноеИмяФайла = ВремКаталог + ФайлFTP.Имя;
			ПолучитьФайлСFTP(FTPСоединение, ФайлFTP.ПолноеИмя, ПолноеИмяФайла, , ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			ЭлементФайл = Новый Файл(ПолноеИмяФайла);
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			СтруктураПараметров = Новый Структура;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ПакетЭД);
			ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ЭлементФайл.Имя, СтрДлина(ЭлементФайл.Имя) -4));
			ПараметрыФайла.Вставить("РасширениеБезТочки", Прав(ЭлементФайл.Имя, 3));
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
				ПараметрыФайла, АдресВХранилище);
			
			Если Не СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД, СтрокаРесурсовFTP, СтруктураПараметров.АдресОтправителя,
					Перечисления.СпособыОбменаЭД.ЧерезFTP);
			КонецЕсли;
			
			УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
			
			СтруктураВозврата.МассивПакетовЭД.Добавить(ПакетЭД);
		КонецЦикла;
	КонецЦикла;
	
	// Получаем документы из сервисов операторов ЭДО.
	ОбменСКонтрагентамиВнутренний.ПолучитьНовыеЭДОператораЭДО(СтруктураВозврата,
		СоотвСоглашенийИСтруктурСертификатов, , ПовторноеПолучение);
		
	Если СтруктураВозврата.Свойство("ИдентификаторыЭДО") Тогда
		ОчиститьИдентификаторыЭДО(СтруктураВозврата.ИдентификаторыЭДО);
	КонецЕсли;
		
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - Объект, Ссылка - объект либо ссылка документа/справочника-источника.
//  ФорматCML - Булево - если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//              в параметрах должны быть указаны соответствующие виды ЭД.
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид элекронного документа.
//  БыстрыйОбмен - Булево - признак того, что не будут использоваться УПД и УКД.
//
// Возвращаемое значение:
//  Структура - параметры источника, необходимые для определения
//              настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//              Контрагент, СоглашениеЭД или Организация.
//
Функция ЗаполнитьПараметрыЭДПоИсточнику(Источник, ФорматCML = Ложь, ВидЭД = Неопределено, БыстрыйОбмен = Ложь) Экспорт
	
	ПараметрыЭД = СтруктураПараметровЭД();
	
	ТипИсточника = ТипЗнч(Источник);
	
	СправочникОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
	
	Если ТипИсточника = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.СоглашенияОбИспользованииЭД") Тогда
		
		ПараметрыЭД.ВидЭД     = Перечисления.ВидыЭД.КаталогТоваров;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.СоглашениеЭД  = Источник.Ссылка;
		Если Не Источник.ЭтоИнтеркампани Тогда
			
			ПараметрыЭД.Контрагент  = Источник.Контрагент;
			ПараметрыЭД.Организация = Источник.Организация;
			ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка." + СправочникОрганизации)
		Или ТипИсточника = Тип("СправочникОбъект." + СправочникОрганизации) Тогда
		
		ПараметрыЭД.ВидЭД = "РеквизитыОрганизации";
		ПараметрыЭД.Организация = Источник;
		ПараметрыЭД.Вставить("РеквизитыОрганизации", Истина);
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЭлектронныйДокументВходящий") Тогда
		
		ПараметрыЭД.ВидЭД         = Источник.ВидЭД;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Контрагент    = Источник.Контрагент;
		ПараметрыЭД.Организация   = Источник.Организация;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		ПараметрыЭД.СоглашениеЭД  = Источник.НастройкаЭДО;
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЭлектронныйДокументИсходящий") Тогда
		
		ПараметрыЭД.ВидЭД         = Источник.ВидЭД;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Контрагент    = Источник.Контрагент;
		ПараметрыЭД.Организация   = Источник.Организация;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		ПараметрыЭД.СоглашениеЭД  = Источник.НастройкаЭДО;
	Иначе
		
		ПараметрыЭД.ВидЭД = ВидЭД;
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД.Контрагент) 
		И Не ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
		ДополнитьПараметрыЭД(Источник, ПараметрыЭД);
	КонецЕсли;
	
	Если БыстрыйОбмен Тогда
		Возврат ПараметрыЭД;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
	
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(?(ОбщегоНазначения.ЭтоСсылка(ТипИсточника), Источник, Источник.Ссылка));
	
		СоответствиеВладельцевИЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ВладельцыИЭлектронныеДокументы(МассивСсылок);
		Для Каждого ТекЭл Из МассивСсылок Цикл
			
			СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
			Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
				Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
					ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВладелецФайла");
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭД, "ВидЭД");
				Иначе
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбменСКонтрагентами.ИспользованиеУниверсальногоПередаточногоДокумента(ПараметрыЭД.Организация, ПараметрыЭД.Контрагент, ПараметрыЭД.ДоговорКонтрагента) Тогда
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
	КонецЕсли;
	Если ОбменСКонтрагентами.ИспользованиеУниверсальногоКорректировочногоДокумента(ПараметрыЭД.Организация, ПараметрыЭД.Контрагент, ПараметрыЭД.ДоговорКонтрагента) Тогда
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

// Изменение реквизитов элемента справочника ЭДПрисоединенныеФайлы.
//
// Параметры:
//  ДобавленныйФайл - СправочникСсылка - ссылка на элемент справочника с электронным документом.
//  СтруктураЭД - Структура - структура параметров, которые необходимо заполнить в справочнике.
//  ПоверятьОбязательныеРеквизиты - Булево - требуется проверка обязательных реквизитов.
//
Процедура ИзменитьПоСсылкеПрисоединенныйФайл(
				ДобавленныйФайл,
				СтруктураЭД,
				ПоверятьОбязательныеРеквизиты = Истина) Экспорт
				
	Если Не ЗначениеЗаполнено(ДобавленныйФайл) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	Попытка
	
		Если ПоверятьОбязательныеРеквизиты Тогда
			ТекстОшибки = "";
			СтруктураОбязательныхПолей = Новый Структура("ВладелецЭД, ТипЭлементаВерсииЭД, НаправлениеЭД");
			Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
				Значение = Неопределено;
				Если СтруктураЭД.Свойство(КлючЗначение.Ключ, Значение) Тогда
					Если НЕ ЗначениеЗаполнено(Значение) Тогда
						Текст = НСтр("ru = 'Значение параметра <%1> не заполнено.'");
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
						ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
					КонецЕсли;
				Иначе
					Текст = НСтр("ru = 'Не передан обязательный параметр <%1>.'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
					ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка заполнения доп.свойств электронного документа.
				|%1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		ОбменСКонтрагентамиПереопределяемый.ПриИзмененииПрисоединенногоФайла(ДобавленныйФайл, СтруктураЭД);
		
		ФайлОбъект = ДобавленныйФайл.ПолучитьОбъект();
		
		ПринудительнаяСменаСостоянияВерсии = Ложь;
		
		Если СтруктураЭД.Свойство("Автор") Тогда
			ФайлОбъект.Автор = СтруктураЭД.Автор;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаИзмененияСтатусаЭД") Тогда
			ФайлОбъект.ДатаИзмененияСтатусаЭД = СтруктураЭД.ДатаИзмененияСтатусаЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаИзмененияВнешнегоСтатусаЭД") Тогда
			ФайлОбъект.ДатаИзмененияВнешнегоСтатусаЭД = СтруктураЭД.ДатаИзмененияВнешнегоСтатусаЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаМодификацииУниверсальная") Тогда
			ФайлОбъект.ДатаМодификацииУниверсальная = СтруктураЭД.ДатаМодификацииУниверсальная;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаСоздания") Тогда
			ФайлОбъект.ДатаСоздания = СтруктураЭД.ДатаСоздания;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем") Тогда
			ФайлОбъект.ДатаФормированияЭДОтправителем = СтруктураЭД.ДатаФормированияЭДОтправителем;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДополнительнаяИнформация") Тогда
			ФайлОбъект.ДополнительнаяИнформация = СтруктураЭД.ДополнительнаяИнформация;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДополнительныеРеквизиты") Тогда
			Если ЗначениеЗаполнено(ФайлОбъект.ДополнительныеРеквизиты) Тогда
				ДополнительныеРеквизиты = ФайлОбъект.ДополнительныеРеквизиты.Получить();
				Если Не ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
					ДополнительныеРеквизиты = Новый Структура;
				КонецЕсли;
			Иначе
				ДополнительныеРеквизиты = СтруктураЭД.ДополнительныеРеквизиты;
			КонецЕсли;
			
			Для Каждого КлючЗначение Из СтруктураЭД.ДополнительныеРеквизиты Цикл
				ДополнительныеРеквизиты.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
			
			ФайлОбъект.ДополнительныеРеквизиты = Новый ХранилищеЗначения(СтруктураЭД.ДополнительныеРеквизиты);
		КонецЕсли;
				
		Если СтруктураЭД.Свойство("Изменил") Тогда
			ФайлОбъект.Изменил = СтруктураЭД.Изменил;
		КонецЕсли;
				
		Если СтруктураЭД.Свойство("Наименование") Тогда
			ФайлОбъект.Наименование = СтруктураЭД.Наименование;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("НаименованиеФайла") Тогда
			ФайлОбъект.НаименованиеФайла = СтруктураЭД.НаименованиеФайла;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("НаправлениеЭД") Тогда
			ФайлОбъект.НаправлениеЭД = СтруктураЭД.НаправлениеЭД;
		КонецЕсли;
						
		Если СтруктураЭД.Свойство("НомерЭД") Тогда 
			ФайлОбъект.НомерЭД = СтруктураЭД.НомерЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("Описание") Тогда
			ФайлОбъект.Описание = СокрЛП(СтруктураЭД.Описание);
		Иначе
			ФайлОбъект.Описание = "";
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(ФайлОбъект.ОтправительЭД) И СтруктураЭД.Свойство("Отправитель") Тогда
			ФайлОбъект.ОтправительЭД = СтруктураЭД.Отправитель;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ПодписанныеДанные") Тогда
			ХранилищеПодписанныхДанных = Новый ХранилищеЗначения(СтруктураЭД.ПодписанныеДанные);
			ФайлОбъект.ПодписанныеДанные = ХранилищеПодписанныхДанных;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ФайлОбъект.ПолучательЭД) И СтруктураЭД.Свойство("Получатель") Тогда
			ФайлОбъект.ПолучательЭД = СтруктураЭД.Получатель;
		КонецЕсли;
				
		Если СтруктураЭД.Свойство("Расширение") Тогда
			ФайлОбъект.Расширение = СтруктураЭД.Расширение;
		КонецЕсли;
				
		Если СтруктураЭД.Свойство("СтатусЭД") Тогда
			
			Если ФайлОбъект.СтатусЭД <> СтруктураЭД.СтатусЭД Тогда
				ПринудительнаяСменаСостоянияВерсии = Истина;
			КонецЕсли;
			
			ФайлОбъект.СтатусЭД = СтруктураЭД.СтатусЭД;
			Если Не СтруктураЭД.Свойство("ДатаИзмененияСтатусаЭД") Тогда
				ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьСостояниеЭД = Неопределено;
		Если СтруктураЭД.Свойство("ОбновитьСостояниеЭД", ОбновитьСостояниеЭД)
			И Не ОбновитьСостояниеЭД = Неопределено Тогда
			ПринудительнаяСменаСостоянияВерсии = ОбновитьСостояниеЭД;
		КонецЕсли;
		
		ОтклонениеАннулирования = Ложь;
		Если СтруктураЭД.Свойство("ОтклонениеАннулирования") Тогда
			ОтклонениеАннулирования = Истина;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ТекстУточнения") Тогда
			ЗаписатьПричинуОтклонения(ФайлОбъект.ВладелецФайла,СтруктураЭД.ТекстУточнения);
		КонецЕсли;  
		
		Если СтруктураЭД.Свойство("ПричинаОтклонения") Тогда
			ЗаписатьПричинуОтклонения(ФайлОбъект.ВладелецФайла,СтруктураЭД.ПричинаОтклонения);
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ТипЭлементаВерсииЭД") Тогда
			ФайлОбъект.ТипЭлементаВерсииЭД = СтруктураЭД.ТипЭлементаВерсииЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("УдалитьЭП") Тогда
			ФайлОбъект.ЭлектронныеПодписи.Очистить();
			ФайлОбъект.ПодписанЭП = Ложь;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("УникальныйИД") Тогда
			ФайлОбъект.УникальныйИД = СтруктураЭД.УникальныйИД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("УникальныйИДВнешний") Тогда
			ФайлОбъект.УникальныйИДВнешний = СтруктураЭД.УникальныйИДВнешний;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ЭлектронныйДокументВладелец") Тогда
			ФайлОбъект.ЭлектронныйДокументВладелец = СтруктураЭД.ЭлектронныйДокументВладелец;
		КонецЕсли;
		
		ВерсияФорматаПакета = Неопределено;
		СтруктураЭД.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
		
		ФайлОбъект.ДополнительныеСвойства.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
		ФайлОбъект.ДополнительныеСвойства.Вставить("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
		ФайлОбъект.ДополнительныеСвойства.Вставить("ОбновитьВерсиюЭД", Истина);
		ФайлОбъект.ДополнительныеСвойства.Вставить("ОтклонениеАннулирования", ОтклонениеАннулирования);

		ФайлОбъект.Записать();
				
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает структуру данных файла, полученную из одноименной функции общего модуля ПрисоединенныеФайлы.
// В полученной структуре данных меняет значение элемента с ключом Наименование на полное наименование,
// хранящееся в реквизите элемента справочника НаименованиеФайла, так же заново формирует значение элемента ИмяФайла.
// Используется в различных командах работы с файлами,
// и как значение параметра ДанныеФайла других процедур и функций.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка - Ссылка на присоединенный файл.
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, используется при 
//                                                 получении двоичных данных файла.
//  ПолучатьСсылкуНаДвоичныеДанные - Булево - начальное значение Истина, если передать Ложь, то ссылка на 
//                                            двоичные данные не будет получена, что существенно ускорит выполнение
//                                            для больших двоичных данных.
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//    * СсылкаНаДвоичныеДанныеФайла        - Строка - адрес во временном хранилище.
//    * ОтносительныйПуть                  - Строка - путь к файлу.
//    * ДатаМодификацииУниверсальная       - Дата - дата изменения.
//    * ИмяФайла                           - Строка - имя файла.
//    * Наименование                       - Строка - соответствует значению реквизита элемента справочника НаименованиеФайла.
//    * Расширение                         - Строка - расширение файла.
//    * Размер                             - Число - размер файла.
//    * Редактирует                        - СправочникСсылка.Пользователи - пользователь.
//    * ПодписанЭП                         - Булево - признак подписи.
//    * Зашифрован                         - Булево - признак шифрования.
//    * ФайлРедактируется                  - Булево - признак редактирования.
//    * ФайлРедактируетТекущийПользователь - Булево - признак редактирования текущим пользователем.
// 
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл,
		ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда 
		
		СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ВладелецФайла, УникальныйИД, НаименованиеФайла");
		Если ЗначениеЗаполнено(СтруктураПараметров.НаименованиеФайла) Тогда
			ДанныеФайла.Наименование = СокрЛП(СтруктураПараметров.НаименованиеФайла);
			ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		Иначе
			Если ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.ВладелецФайла,"ВидЭД") = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				СтрокаУИД = СтруктураПараметров.УникальныйИД;
				Наименование = ДанныеФайла.Наименование;
				ПозицияУИД = СтрНайти(Наименование, "_" + Лев(СтрокаУИД, 35));
				Если ПозицияУИД > 0 Тогда
					ДанныеФайла.Наименование = Лев(Наименование, ПозицияУИД) + СтрокаУИД;
					ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции


// Сохранение приглашений.
//
// Параметры:
//  ТаблицаПриглашений - ТаблицаЗначений - таблица с приглашениями.
//
Процедура СохранитьПриглашения(ТаблицаПриглашений) Экспорт
	
	Если ТаблицаПриглашений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.ТекстПриглашения,
	|	Приглашения.Идентификатор,
	|	Приглашения.ВнешнийИД КАК ВнешнийИД,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Состояние,
	|	Приглашения.Наименование,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки
	|ПОМЕСТИТЬ Приглашения
	|ИЗ
	|	&Приглашения КАК Приглашения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	ВнешнийИД,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.Идентификатор,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП,
	|	Приглашения.ВнешнийИД КАК ВнешнийИД,
	|	МАКСИМУМ(Приглашения.Изменен) КАК Изменен
	|ПОМЕСТИТЬ ПоследниеИзмененияЗаписей
	|ИЗ
	|	Приглашения КАК Приглашения
	|
	|СГРУППИРОВАТЬ ПО
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.Идентификатор,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.ВнешнийИД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	ВнешнийИД,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.ТекстПриглашения,
	|	Приглашения.Идентификатор,
	|	Приглашения.ВнешнийИД,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Наименование,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки,
	|	Приглашения.Состояние КАК СтатусУчастника
	|ИЗ
	|	ПоследниеИзмененияЗаписей КАК ПоследниеИзмененияЗаписей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приглашения КАК Приглашения
	|		ПО ПоследниеИзмененияЗаписей.ПрофильНастроекЭДО = Приглашения.ПрофильНастроекЭДО
	|			И ПоследниеИзмененияЗаписей.Идентификатор = Приглашения.Идентификатор
	|			И ПоследниеИзмененияЗаписей.ИНН = Приглашения.ИНН
	|			И ПоследниеИзмененияЗаписей.Изменен = Приглашения.Изменен
	|			И ПоследниеИзмененияЗаписей.ВнешнийИД = Приглашения.ВнешнийИД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Изменен";
	Запрос.УстановитьПараметр("Приглашения", ТаблицаПриглашений);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		УстановитьПривилегированныйРежим(Истина); // Приглашения сохранять можно с любыми правами, а вот принимать нет.
		
		// В случае ошибки, содержащейся в запросе на присоединение контрагента,
		// Такском возвращает запись с указанием ошибки, но без КПП. В результате
		// запрос может вернуть 2 записи по одному контрагенту (ИНН и ВнешнийИД совпадают,
		// а КПП в одной записи пустой, а в другой заполнен). Чтобы не вводить в заблуждение
		// пользователей, одну запись (более раннюю) надо удалить.
		ТЗПоследнихИзменений = Результат.Выгрузить();
		Для Сч = -ТЗПоследнихИзменений.Количество() + 1 По 0 Цикл
			СтрокаТЗ = ТЗПоследнихИзменений[-Сч];
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЗ.ПрофильНастроекЭДО,
				"СпособОбменаЭД") = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				
				Отбор = Новый Структура("ИНН, ВнешнийИД, ПрофильНастроекЭДО", СтрокаТЗ.ИНН, СтрокаТЗ.ВнешнийИД,
					СтрокаТЗ.ПрофильНастроекЭДО);
				МассивСтрок = ТЗПоследнихИзменений.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество() > 1 Тогда
					ПервыйЭлемент = МассивСтрок[0];
					ВторойЭлемент = МассивСтрок[1];
					Если НЕ ЗначениеЗаполнено(ПервыйЭлемент.КПП) ИЛИ НЕ ЗначениеЗаполнено(ВторойЭлемент.КПП) Тогда
						Если ПервыйЭлемент.Изменен > ВторойЭлемент.Изменен Тогда
							ТЗПоследнихИзменений.Удалить(ВторойЭлемент);
						Иначе
							ТЗПоследнихИзменений.Удалить(ПервыйЭлемент);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СдвигатьДату = Истина;
		Для Каждого НовыеПриглашения Из ТЗПоследнихИзменений Цикл
			Контрагент = Неопределено;
			Ошибка = (НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Ошибка);
			Если ЗначениеЗаполнено(НовыеПриглашения.ИНН) Тогда
				ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
				ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
				
				Запрос = Новый Запрос;
				ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	НастройкиЭДО.Контрагент
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкиЭДО
				|ГДЕ
				|	НЕ НастройкиЭДО.ПометкаУдаления
				|	И НастройкиЭДО.СпособОбменаЭД В (ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО), ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском))
				|	И &ОтборПоИННКонтрагента";
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоИННКонтрагента", "НастройкиЭДО.Контрагент."
					+ ИмяРеквизитаИННКонтрагента + " = &ИНН");
				Запрос.УстановитьПараметр("ИНН", НовыеПриглашения.ИНН);
				Если ЗначениеЗаполнено(НовыеПриглашения.КПП) И ИмяРеквизитаКППКонтрагента <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + "
						|	И НастройкиЭДО.Контрагент." + ИмяРеквизитаКППКонтрагента + " = &КПП";
					Запрос.УстановитьПараметр("КПП", НовыеПриглашения.КПП);
				КонецЕсли;
				Запрос.Текст = ТекстЗапроса;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Контрагент = Выборка.Контрагент;
				Иначе
					Контрагент = ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", НовыеПриглашения.ИНН,
						НовыеПриглашения.КПП);
				КонецЕсли;
			КонецЕсли;
			
			Если Контрагент = Неопределено Тогда
				СдвигатьДату = Ложь;
				Если Не Ошибка Тогда
					Текст = НСтр("ru = 'Обмен по профилю настроек ЭДО %1.
					|В базе не найден контрагент:
					|Наименование: %2
					|ИНН: %3
					|КПП: %4
					|Статус: %5.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НовыеПриглашения.ПрофильНастроекЭДО,
						НовыеПриглашения.Наименование, НовыеПриглашения.ИНН, НовыеПриглашения.КПП, НовыеПриглашения.СтатусУчастника);
				Иначе
					ОписаниеОшибки = ?(ЗначениеЗаполнено(НовыеПриглашения.ОписаниеОшибки),
						НовыеПриглашения.ОписаниеОшибки, НСтр("ru = 'Ошибка'"));
					Наименование = ?(ЗначениеЗаполнено(Контрагент), Контрагент.Наименование, "");
					Текст = НСтр("ru = 'Обмен по профилю настроек ЭДО %1.
					|%2 в приглашении для контрагента:
					|Наименование: %3
					|Адрес ЭП: %4
					|ИНН: %5
					|КПП: %6
					|Статус: %7.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НовыеПриглашения.ПрофильНастроекЭДО,
						ОписаниеОшибки, Наименование, НовыеПриглашения.Наименование, НовыеПриглашения.ИНН, НовыеПриглашения.КПП,
						НовыеПриглашения.СтатусУчастника);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			// Поиск существующей настройки ЭДО.
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкаЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения КАК РасширенныйРежимНастройки,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
			|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкаЭДОИсходящиеДокументы
			|ГДЕ
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
			|	И НастройкаЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
			|	И НастройкаЭДОИсходящиеДокументы.Ссылка.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
			|	И НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента В (&ИдентификаторКонтрагента, """")
			|
			|СГРУППИРОВАТЬ ПО
			|	НастройкаЭДОИсходящиеДокументы.Ссылка,
			|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПометкаУдаления,
			|	ИдентификаторКонтрагента УБЫВ";
			
			Запрос.УстановитьПараметр("Контрагент",  Контрагент);
			Запрос.УстановитьПараметр("ИдентификаторКонтрагента", НовыеПриглашения.Идентификатор);
			Запрос.УстановитьПараметр("Организация", НовыеПриглашения.ПрофильНастроекЭДО.Организация);
			Запрос.УстановитьПараметр("ПрофильНастроекЭДО", НовыеПриглашения.ПрофильНастроекЭДО);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				// Проверка наличия настройки ЭДО с искомым идентификатором.
				Если Выборка.СтатусПодключения = НовыеПриглашения.СтатусУчастника
					И Выборка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор Тогда
					Продолжить;
				КонецЕсли;
				
				НастройкаЭДО = Выборка.НастройкаЭДО.ПолучитьОбъект();
				Если НастройкаЭДО.ПометкаУдаления Тогда
					НастройкаЭДО.ПометкаУдаления = Ложь;
				КонецЕсли;
				
				Если Не Выборка.РасширенныйРежимНастройки
					И ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Выборка.СпособОбменаЭД) Тогда
					
					НастройкаЭДО.РасширенныйРежимНастройкиСоглашения = Истина;
					
					ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыеПриглашения.ПрофильНастроекЭДО,
						"ИдентификаторОрганизации, СпособОбменаЭД");
					
					Отбор = Новый Структура;
					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.СчетФактура);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.Формировать              = Истина;
						Строка.ИспользоватьЭП           = Истина;
						Строка.ПрофильНастроекЭДО       = НовыеПриглашения.ПрофильНастроекЭДО;
						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
						Строка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
					КонецЦикла;
					
					Отбор = Новый Структура;
					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.КорректировочныйСчетФактура);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.Формировать              = Истина;
						Строка.ИспользоватьЭП           = Истина;
						Строка.ПрофильНастроекЭДО       = НовыеПриглашения.ПрофильНастроекЭДО;
						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
						Строка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
					КонецЦикла;
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("ПрофильНастроекЭДО", НовыеПриглашения.ПрофильНастроекЭДО);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
					КонецЦикла;
				КонецЕсли;
			Иначе
				
				// Создаем новую настройку ЭДО по входящему приглашению.
				ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыеПриглашения.ПрофильНастроекЭДО,
					"Организация, ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений, ИсходящиеДокументы");
					
				НастройкаЭДО = Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
				НастройкаЭДО.ОбменДанными.Загрузка = Истина;
				НастройкаЭДО.Контрагент = Контрагент;
				НастройкаЭДО.Наименование = Строка(Контрагент);
				НастройкаЭДО.ПрофильНастроекЭДО = НовыеПриглашения.ПрофильНастроекЭДО;
				НастройкаЭДО.Организация              = ПараметрыПрофиляНастроек.Организация;
				НастройкаЭДО.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
				НастройкаЭДО.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
				НастройкаЭДО.ВерсияФорматаПакета      = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
				
				// Загрузка табличной части ИсходящиеДокументы из профиля настроек ЭДО.
				ИсходнаяТаблицаЭД = ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить();
				ИсходнаяТаблицаЭД.Колонки.Добавить("ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.Колонки.Добавить("СпособОбменаЭД");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторКонтрагента");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(НовыеПриглашения.ПрофильНастроекЭДО, "ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.СпособОбменаЭД, "СпособОбменаЭД");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.ИдентификаторОрганизации, "ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(НовыеПриглашения.Идентификатор, "ИдентификаторКонтрагента");
				НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
				
				// Загрузка табличной части ВходящиеДокументы из профиля настроек ЭДО.
				НастройкаЭДО.ВходящиеДокументы.Загрузить(ОбменСКонтрагентамиСлужебный.ТаблицаПредопределенногоПрофиля("Автоматически"));
			КонецЕсли;
			
			// Заполнение остальных реквизитов.
			НастройкаЭДО.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
			Если ЗначениеЗаполнено(НовыеПриглашения.ТекстПриглашения) Тогда
				НастройкаЭДО.ТекстПриглашения = НовыеПриглашения.ТекстПриглашения;
			КонецЕсли;
			
			НастройкаЭДО.СтатусПодключения = НовыеПриглашения.СтатусУчастника;
			ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(НастройкаЭДО);
			
			СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			Если НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен Тогда
				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости;
				
				// Проверка на существование уже присоединенной настройки по контрагенту.
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкаЭДОИсходящиеДокументы
				|ГДЕ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
				|	И НЕ НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
				|
				|СГРУППИРОВАТЬ ПО
				|	НастройкаЭДОИсходящиеДокументы.Ссылка";
				
				Запрос.УстановитьПараметр("Контрагент",  Контрагент);
				Запрос.УстановитьПараметр("Организация", НовыеПриглашения.ПрофильНастроекЭДО.Организация);
				Запрос.УстановитьПараметр("ДоговорКонтрагента", НастройкаЭДО.ДоговорКонтрагента);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НастройкаЭДО.ОбменДанными.Загрузка = Истина;
					НастройкаЭДО.СтатусПодключения     = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие;
					НастройкаЭДО.Комментарий           = НСтр("ru = '##Автоматически снят статус ""присоединен"". Уже существует настройка ЭДО по выбранному контрагенту.'");
				КонецЕсли;
				
			ИначеЕсли НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен Тогда
				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Закрыто;
			КонецЕсли;
			НастройкаЭДО.СостояниеСоглашения = СостояниеСоглашения;
			
			ТекстОписанияОшибки = "";
			Если Ошибка Тогда
				ШаблонОписанияОшибки = НСтр("ru = '%1. Повторите отправку.'");
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
					НовыеПриглашения.ОписаниеОшибки);
			КонецЕсли;
			НастройкаЭДО.ОписаниеОшибки = ТекстОписанияОшибки;
			НастройкаЭДО.АвтоПереходНаНовыеФорматы = Истина;
			НастройкаЭДО.Записать();
			
			// Сдвиг даты проверки приглашений.
			Если СдвигатьДату Тогда
				Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
				Запись.ПрофильНастроекЭДО = НовыеПриглашения.ПрофильНастроекЭДО;
				Запись.Прочитать();
				Запись.ДатаПоследнегоПолученияПриглашений = НовыеПриглашения.Изменен;
				Запись.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Получение имени файла для выгрузки ФНС
//
// Параметры:
//  СтруктураИмени - Структура - параметры для формирования.
// 
// Возвращаемое значение:
//  Строка - имя файла.
//
Функция ФНСИмяФайла(СтруктураИмени) Экспорт
	
	ИмяФайла = СтруктураИмени.Префикс + "_" + СтруктураИмени.ИДПолучателя + "_"
		+ СтруктураИмени.ИДОтправителя + "_" + СтруктураИмени.ГГГГММДД + "_" + СтруктураИмени.УникальныйИдентификатор;
	
	Возврат ИмяФайла;
	
КонецФункции

// Возврат имени временного файла.
//
// Параметры:
//  Расширение - Строка - строка расширения файла.
// 
// Возвращаемое значение:
//  Строка - имя временного файла.
//
Функция ТекущееИмяВременногоФайла(Расширение = "") Экспорт
	
	ИмяВременногоФайла = "";
	ОбменСКонтрагентамиПереопределяемый.ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение);
	Если НЕ ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Сравнение электронных документов

// Готовит файлы табличных документов MXL по данным электронных документов.
//
// Параметры:
//  МассивЭД - Массив - массив ссылок на электронные документы, которые необходимо обработать.
//
// Возвращаемое значение:
//  Массив структур - структура содержит имя файла данных и имя файла табличного документа MXL.
//
Функция ПодготовитьВременныеФайлыПросмотраЭД(МассивЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПереченьВременныхФайлов = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		
		ДопИнформацияПоЭД = ПолучитьДанныеФайла(ЭД, Новый УникальныйИдентификатор, Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			ДанныеЭД.Записать(ИмяФайла);
			
			ФайлыАрхива = Новый Массив;
			Если СтрНайти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
				АрхивЧтение = Новый ЧтениеZipФайла(ИмяФайла);
				ПапкаДляРаспаковки =  ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("proc", ЭД.УникальныйИдентификатор());
				
				Попытка
					АрхивЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(АрхивЧтение, ПапкаДляРаспаковки) Тогда
						ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
					КонецЕсли;
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"),
						ТекстОшибки, ТекстСообщения);
					АрхивЧтение.Закрыть();
				КонецПопытки;

				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			ИначеЕсли СтрНайти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				ФайлДанных = Новый Файл(ИмяФайла);
				ФайлыАрхива.Добавить(ФайлДанных);
			КонецЕсли;
			
			Для Каждого РаспакованныйФайл Из ФайлыАрхива Цикл
				ПараметрыПечати = Новый Структура;
				ПараметрыПечати.Вставить("ИД", ЭД.УникальныйИдентификатор());
				ТабличныйДокумент = ОбменСКонтрагентамиВнутренний.СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя,
					ЭД.НаправлениеЭД, ПараметрыПечати);
					
				Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
					АдресФайлаДанных = ПоместитьВоВременноеХранилище(ТабличныйДокумент, ЭД.УникальныйИдентификатор());
					НазваниеЭД = ПолучитьПредставлениеЭД(ЭД.Ссылка);
					
					СтруктураИменФайлов = Новый Структура("НазваниеЭД, АдресФайлаДанных", НазваниеЭД, АдресФайлаДанных);
					ПереченьВременныхФайлов.Добавить(СтруктураИменФайлов);
				КонецЕсли;
				
				Прервать; // Должен быть только один файл данных.
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		КонецЕсли;
	КонецЦикла;

	Возврат ПереченьВременныхФайлов;
	
КонецФункции

// Получение настроек обмена по электронному документу.
//
// Параметры:
//  СсылкаНаФайлЭД - Ссылка - электронный документ.
// 
// Возвращаемое значение:
//  Структура - параметры обмена электронными документами.
//
Функция НастройкиОбменаЭД(СсылкаНаФайлЭД) Экспорт
	
	НастройкиОбмена = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаФайлЭД) Тогда

		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД,
				"НаправлениеЭД, ПодписанЭП, ВладелецФайла, ТипЭлементаВерсииЭД, ЭлектронныйДокументВладелец");
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайла.ВладелецФайла,
				"ВидЭД, НастройкаЭДО, ПрофильНастроекЭДО, ВерсияРегламентаЭДО, ТребуетсяПодтверждение, ТребуетсяИзвещение");
			
		Если ЗначениеЗаполнено(РеквизитыЭД) Тогда
			НастройкиОбмена = Новый Структура;
			
			РеквизитыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.ПрофильНастроекЭДО,
			"СпособОбменаЭД");
			
			НастройкиОбмена.Вставить("СпособОбмена",          РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
			ВидЭД = Неопределено;
			
			НастройкиОбмена.Вставить("Направление",            РеквизитыФайла.НаправлениеЭД);
			НастройкиОбмена.Вставить("ВидЭД",                  РеквизитыЭД.ВидЭД);
			Если ЭтоИзвещениеОПолучении(РеквизитыФайла.ТипЭлементаВерсииЭД) Тогда
				ИспользоватьПодпись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыФайла.ЭлектронныйДокументВладелец,
					"ПодписанЭП");
			Иначе
				ИспользоватьПодпись = РеквизитыФайла.ПодписанЭП;
			КонецЕсли;
			НастройкиОбмена.Вставить("ИспользоватьПодпись",    ИспользоватьПодпись);
			НастройкиОбмена.Вставить("ИспользоватьКвитанции",  Ложь);
			НастройкиОбмена.Вставить("ТребуетсяПодтверждение", РеквизитыЭД.ТребуетсяПодтверждение);
			НастройкиОбмена.Вставить("ТребуетсяИзвещение",     РеквизитыЭД.ТребуетсяИзвещение);
			НастройкиОбмена.Вставить("ВерсияРегламентаЭДО",    РеквизитыЭД.ВерсияРегламентаЭДО);
			НастройкиОбмена.Вставить("ТипЭлементаВерсииЭД",    РеквизитыФайла.ТипЭлементаВерсииЭД);
			
			СоглашениеЭД = РеквизитыЭД.НастройкаЭДО;
			ВерсияФорматаПакета = ВерсияПакетаЭД(СсылкаНаФайлЭД);
			
			НастройкиОбмена.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
			
			ЗапросПоНастройкам = Новый Запрос;
			ЗапросПоНастройкам.УстановитьПараметр("СоглашениеЭД",    РеквизитыЭД.НастройкаЭДО);
			ЗапросПоНастройкам.УстановитьПараметр("НаправлениеЭД",   РеквизитыФайла.НаправлениеЭД);
			ЗапросПоНастройкам.УстановитьПараметр("ВидЭД",           РеквизитыЭД.ВидЭД);
			ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеПодписиЭД");
			
			ЗапросПоНастройкам.УстановитьПараметр("ИспользуетсяЭП", ИспользоватьЭП);
			
			ВидЭДВладельца = Неопределено;
			ЭтоСлужебныйЭД = Ложь;
			Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(СсылкаНаФайлЭД) Тогда
				ЭтоСлужебныйЭД = Истина;
				ЭДВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаФайлЭД, "ЭлектронныйДокументВладелец");
				Если ЗначениеЗаполнено(ЭДВладелец) Тогда
					ВидЭДВладельца = РеквизитыЭД.ВидЭД;
				КонецЕсли;
			КонецЕсли;
			ЗапросПоНастройкам.УстановитьПараметр("ВидЭДВладельца", ВидЭДВладельца);
			ЗапросПоНастройкам.УстановитьПараметр("ЭтоСлужебныйЭД", ЭтоСлужебныйЭД);
			
			ВидыЭДФНС = Новый Массив;
			ВидыЭДФНС.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
			ВидыЭДФНС.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
			ВидыЭДФНС.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
			ЗапросПоНастройкам.УстановитьПараметр("ВидыЭДФНС", ВидыЭДФНС);
			
			ЗапросПоНастройкам.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА &ИспользуетсяЭП
			|			ТОГДА Соглашение.ИспользоватьПодпись
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользоватьПодпись,
			|	Соглашение.ИспользоватьКвитанции
			|ИЗ
			|	(ВЫБРАТЬ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьПодпись,
			|		ВЫБОР
			|			КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета = ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаПакетаЭД.Версия30)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ КАК ИспользоватьКвитанции,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяОтветнаяПодпись КАК ТребуетсяПодтверждение,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
			|		ВЫБОР
			|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|			ИНАЧЕ ВЫБОР
			|					КОГДА &ВидЭД В (&ВидыЭДФНС)
			|							И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
			|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
			|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
			|				КОНЕЦ
			|		КОНЕЦ КАК НаправлениеЭД
			|	ИЗ
			|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
			|	ГДЕ
			|		ВЫБОР
			|				КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Покупатель)
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
			|				КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
			|				КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
			|				КОГДА &ЭтоСлужебныйЭД
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
			|				ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
			|			КОНЕЦ
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать) КАК Соглашение
			|ГДЕ
			|	Соглашение.НаправлениеЭД = &НаправлениеЭД";
			
			Результат = ЗапросПоНастройкам.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				ТЗ = Результат.Выгрузить();
				ЗаполнитьЗначенияСвойств(НастройкиОбмена, ТЗ[0],,
					?(ЭтоСлужебныйЭД, "ИспользоватьПодпись",""));
			КонецЕсли;
			
			Если РеквизитыФайла.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				НастройкиОбмена.ТребуетсяПодтверждение = РеквизитыЭД.ТребуетсяПодтверждение;
				НастройкиОбмена.ТребуетсяИзвещение = РеквизитыЭД.ТребуетсяИзвещение;
			ИначеЕсли ИспользоватьЭП И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				НастройкиОбмена.ТребуетсяПодтверждение = РеквизитыЭД.ТребуетсяПодтверждение;
			КонецЕсли;
	
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиОбмена;
	
КонецФункции

// Получение дополнительных данных электронного документа.
//
// Параметры:
//  ЭДВладелец - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
Функция ВыборкаДопДанныеЭД(ЭДВладелец) Экспорт
	
	// Для одного ЭД может быть сформирован один ЭД-доп.данных.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДополнительныйЭД)";

	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ЭДВладелец);

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Сохранение файлов дополнительных данных электронного документа.
//
// Параметры:
//  ПрисоединенныйФайл - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
//  ИмяКаталога - Строка - каталог сохранения.
//  СтруктураФайловЭД - Структура - параметры файлов электронных документов.
//
Процедура СохранитьФайлыДопДанныхЭД(ПрисоединенныйФайл, ИмяКаталога, СтруктураФайловЭД) Экспорт
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		// Для одного ЭД может быть сформирован один ЭД-доп.данных.
		Выборка = ВыборкаДопДанныеЭД(ПрисоединенныйФайл);

		Если Выборка.Следующий() Тогда
			Файл = Новый Файл(ИмяКаталога);
			Если НЕ Файл.Существует() Тогда
				СоздатьКаталог(ИмяКаталога);
			КонецЕсли;
			ДанныеФайла = ПолучитьДанныеФайла(Выборка.Ссылка);
			ИмяПолучаемогоФайла = ДанныеФайла.ИмяФайла;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
		
			СтруктураФайловЭД.Вставить("ДополнительныйФайл", ИмяПолучаемогоФайла);
			
			// Необходимо предусмотреть заполнение подписей для дополнительного файла в дереве транспортной информации.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция предназначена для проверки имени файла на наличие некорректных символов.
// Алгоритм взят с небольшими изменениями из процедуры клиентского общего модуля "ФайловыеФункции".
//
// Параметры:
//  СтрИмяФайла - Строка - проверяемое имя файла.
//  УдалятьНекорректные - Булево - удалять или нет некорректные символы из переданной строки.
// Возвращаемое значение:
//  Строка - имя файла.
//
Функция КорректноеИмяФайла(Знач СтрИмяФайла, УдалятьНекорректные = Ложь) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru
	// при этом были объединены запрещенные символы для файловых систем FAT и NTFS.
	СтрИсключения = """/\[]:;|=,?*<>№";
	Результат = Истина;
	
	Для Сч = 1 По СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если СтрНайти(СтрИмяФайла, Символ) <> 0 Тогда
			Если УдалятьНекорректные Тогда
				СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, "");
			Иначе
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		Текст = НСтр("ru = 'В имени файла не должно быть следующих символов: %1
		|Имя файла: %2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрИсключения, СтрИмяФайла);
		ВызватьИсключение ТекстОшибки;
	Иначе
		Возврат СтрИмяФайла;
	КонецЕсли;
	
КонецФункции

// Получение допустимого статуса электронного документа.
//
// Параметры:
//  НовыйСтатус - Перечисления.СтатусыЭД - устанавливаемый статус.
//  СсылкаНаЭД - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - ссылка на электронный документ.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыЭД - установленный статус.
//
Функция ПолучитьДопустимыйСтатусЭД(НовыйСтатус, СсылкаНаЭД) Экспорт
	
	ТекущийСтатус = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		
		СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "СтатусЭД, ВладелецФайла");
		ТекущийСтатус = СвойстваДокумента.СтатусЭД;
		
		Если НовыйСтатус = Перечисления.СтатусыЭД.Отклонен ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем
			ИЛИ НЕ ЗначениеЗаполнено(ТекущийСтатус) ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.Аннулирован
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании Тогда
			ТекущийСтатус = НовыйСтатус;
		ИначеЕсли НовыйСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			
			ТребуетсяПодтверждение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваДокумента.ВладелецФайла, "ТребуетсяПодтверждение");
			
			Если ТекущийСтатус = Перечисления.СтатусыЭД.ПолученоПодтверждение
				Или ЗначениеЗаполнено(ВторойТитулДокумента(СсылкаНаЭД))
				Или ТребуетсяПодтверждение Тогда
				ТекущийСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании;
				
			Иначе
				ТекущийСтатус = Перечисления.СтатусыЭД.Аннулирован;
			КонецЕсли;
			
		Иначе
			НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
			Если НастройкиОбмена <> Неопределено Тогда
				МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
				ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
				ИндексНовогоСтатуса   = МассивСтатусов.Найти(НовыйСтатус);
				Если ИндексНовогоСтатуса <> Неопределено И ИндексТекущегоСтатуса <> Неопределено Тогда
					Если ИндексНовогоСтатуса > ИндексТекущегоСтатуса Тогда
						ТекущийСтатус = НовыйСтатус;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийСтатус;
	
КонецФункции

// Получение массива статусов ЭД по настройке обмена.
//
// Параметры:
//  НастройкиОбмена - Структура - настройки обмена электронными документами.
// 
// Возвращаемое значение:
//  Массив - возможные статусы по настройке.
//
Функция ВернутьМассивСтатусовЭД(НастройкиОбмена) Экспорт
	
	МассивСтатусов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(НастройкиОбмена) Тогда
		Возврат МассивСтатусов;
	КонецЕсли;
	
	ТребуетсяПодтверждение = Истина;
	Если ТипЗнч(НастройкиОбмена) = Тип("Структура") Тогда
		Если Не НастройкиОбмена.Свойство("ТребуетсяПодтверждение", ТребуетсяПодтверждение) Тогда
			ТребуетсяПодтверждение = Истина;
		КонецЕсли;
	Иначе
		Если НастройкиОбмена.Владелец().Колонки.Найти("ТребуетсяПодтверждение") = Неопределено Тогда
			ТребуетсяПодтверждение = Истина;
		Иначе
			ТребуетсяПодтверждение = НастройкиОбмена.ТребуетсяПодтверждение;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ТребуетсяПодтверждение) <> Тип("Булево") Тогда
		ТребуетсяПодтверждение = Истина;
	КонецЕсли;
	
	Если ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
		ТребуетсяПодтверждение = Ложь;
	КонецЕсли;
	
	Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Если ЭтоИзвещениеОПолучении(НастройкиОбмена.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоУведомлениеОбУточнении(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
			
		ИначеЕсли НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД 
				И НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				Если ТребуетсяПодтверждение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
			Иначе
				
				// Изменяется набор статусов ЭД в зависимости от использования версии регламента.
				Если НастройкиОбмена.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
					
					Если НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
						
						Если НастройкиОбмена.ТребуетсяИзвещение Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
						КонецЕсли;
					КонецЕсли;
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				КонецЕсли;
				
				
				Если ТребуетсяПодтверждение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
				И НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				Если ТребуетсяПодтверждение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
			Иначе
				Если НастройкиОбмена.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
					// Не будем для ответных титулов добавлять статус Доставлен,
					// т.к. по ним не должны приходить Уведомления.
					Если НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
						
						Если НастройкиОбмена.ТребуетсяПодтверждение Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Если формат исходящих документов 2.0
					Если НастройкиОбмена.ИспользоватьКвитанции Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
					КонецЕсли;
					Если НастройкиОбмена.ИспользоватьПодпись
						И НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
		
		Если НЕ (ЭтоИзвещениеОПолучении(НастройкиОбмена.ТипЭлементаВерсииЭД)
				ИЛИ ЭтоПодтверждение(НастройкиОбмена.ТипЭлементаВерсииЭД)
				ИЛИ ЭтоУведомлениеОбУточнении(НастройкиОбмена.ТипЭлементаВерсииЭД)
				ИЛИ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД)) Тогда
			
			Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД 
					И НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
					Если ТребуетсяПодтверждение Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					КонецЕсли;
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
				Если НастройкиОбмена.ТипЭлементаВерсииЭД <> Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
					И НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД)
					И ТребуетсяПодтверждение Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
					И НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
					Если ТребуетсяПодтверждение Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					КонецЕсли;
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					Если НастройкиОбмена.ИспользоватьПодпись
						И НастройкиОбмена.ТребуетсяПодтверждение
						И НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
						Если НастройкиОбмена.ИспользоватьКвитанции
							И Не НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ДоставленоПодтверждение);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Интеркампани Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолностьюПодписан);
	КонецЕсли;
	
	
	Возврат МассивСтатусов;
	
КонецФункции

// Удаление лишнего слэша в пути.
//
// Параметры:
//  Путь - Строка - путь к каталогу (файлу).
//
Процедура УдалитьЛишнийСлэшВПути(Путь) Экспорт
	
	Пока СтрНайти(Путь, "\\") > 0 Цикл
		
		Путь = СтрЗаменить(Путь, "\\", "\");
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из клиентского модуля, удаляет папку,
// созданную на сервере и переданную на клиент в качестве параметра.
// 
// Параметры:
//  Папка - Строка - путь к временной папке на сервере.
//
Процедура УдалитьПапкуНаСервере(Папка) Экспорт
	
	Если ЗначениеЗаполнено(Папка) Тогда
		
		Файл = Новый Файл(Папка);
		Если Файл.Существует() Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Папка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определение настройки обмена электронными документами по параметрам.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры поиска.
//  МассивОтпечатковСертификатов - Массив - отпечатки сертификатов для проверки.
//  ФлагДействующиеСоглашения - Булево - признак поиска только действующих соглашений.
// 
// Возвращаемое значение:
//  Структура - данные настройки обмена.
//
Функция ОпределитьНастройкиОбменаЭД(СтруктураПараметров, МассивОтпечатковСертификатов = Неопределено, ФлагДействующиеСоглашения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбменаЭД = Неопределено;
	
	НаправлениеЭД = "";
	ВидЭД = "";
	Контрагент = "";
	Если СтруктураПараметров.Свойство("НаправлениеЭД", НаправлениеЭД)
		И СтруктураПараметров.Свойство("ВидЭД", ВидЭД)
		И СтруктураПараметров.Свойство("Контрагент", Контрагент)
		И ЗначениеЗаполнено(НаправлениеЭД) И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(Контрагент) Тогда
		
		Запрос  = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь",	Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("НаправлениеЭД",	НаправлениеЭД);
		
		Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;		
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидЭД",			ВидЭД);
		Запрос.УстановитьПараметр("Контрагент",		Контрагент);
		
		ДоговорКонтрагента = "";
		Если СтруктураПараметров.Свойство("ДоговорКонтрагента", ДоговорКонтрагента) И Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов");
		КонецЕсли;
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		
		ВидЭДВладельца = Неопределено;
		Если СтруктураПараметров.Свойство("ВидЭДВладельца", ВидЭДВладельца) Тогда
			Запрос.УстановитьПараметр("ЭтоСлужебныйЭД", Истина);
		Иначе
			Запрос.УстановитьПараметр("ЭтоСлужебныйЭД", Ложь);
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидЭДВладельца",				ВидЭДВладельца);
		Запрос.УстановитьПараметр("ДокументФНС",				ЭтоФНС(ВидЭДВладельца));
		Запрос.УстановитьПараметр("ТолькоДействующиеСоглашения",ФлагДействующиеСоглашения);
		Запрос.УстановитьПараметр("ПользовательНеУказан",		Пользователи.СсылкаНеуказанногоПользователя());
		
		СоглашениеЭД = "";
		Организация = "";
		ВыполнятьЗапрос = Истина;
		Если СтруктураПараметров.Свойство("СоглашениеЭД", СоглашениеЭД) И ЗначениеЗаполнено(СоглашениеЭД) Тогда
			Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
			ПолучитьТекстНастроекОбменаПоСоглашению(Запрос.Текст);
		ИначеЕсли СтруктураПараметров.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("Организация", Организация);
			Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
				Партнер = "";
				СтруктураПараметров.Свойство("Партнер", Партнер);
				Запрос.УстановитьПараметр("Партнер", Партнер);
			КонецЕсли;
			ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(Запрос.Текст);
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ВыполнятьЗапрос = Ложь;
			Если РезультатЗапроса[2].Пустой() Тогда
				// Поищем настройку ЭДО без указания договора контрагента.
				ДоговорКонтрагента = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов");
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
				ВыполнятьЗапрос = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			
			Если ВыполнятьЗапрос Тогда
				РезультатЗапроса = Запрос.ВыполнитьПакет();
			КонецЕсли;
			ТЗ = РезультатЗапроса[2].Выгрузить();
			
			Если Не ТЗ.Количество() = 0 Тогда
				ТекущаяНастройка = ТЗ[0];
				
				НастройкиОбменаЭД = Новый Структура;
				НастройкиОбменаЭД.Вставить("СертификатДоступен", Ложь);
				// Если с клиента были переданы установленные сертификаты криптографии,
				// то надо выбрать настройку с этими сертификатами.
				Если МассивОтпечатковСертификатов <> Неопределено Тогда

					Для Каждого СтрокаТЗ Из ТЗ Цикл
						Если СтрокаТЗ.Подписывать Тогда
							Если МассивОтпечатковСертификатов = Неопределено ИЛИ МассивОтпечатковСертификатов.Количество() = 0 Тогда
								Прервать;
							Иначе
								Если МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииПолучателяДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодтверждения.Отпечаток) <> Неопределено Тогда
									
									ТекущаяНастройка = СтрокаТЗ;
									НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
									Прервать;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
					НастройкиОбменаЭД.Вставить(ТекКолонка.Имя, ТекущаяНастройка[ТекКолонка.Имя]);
				КонецЦикла;
				
				Если НастройкиОбменаЭД.Свойство("Подписывать") Тогда
					ФлагПодписи = НастройкиОбменаЭД.Подписывать;
				Иначе
					ФлагПодписи = Ложь;
				КонецЕсли;
				НастройкиОбменаЭД.Вставить("Подписывать", ФлагПодписи);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Если заполнены не все обязательные реквизиты, то нельзя утверждать, что нет соглашения об обмене.
		НастройкиОбменаЭД = "";
	КонецЕсли;
	
	Возврат НастройкиОбменаЭД;
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ЛюбаяСсылка - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка, Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция ЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт
	
	СтруктураДанных = "";
	ОбменСКонтрагентамиПереопределяемый.ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Формирование электронных документов и помещение в справочник присоединенных файлов.
//
// Параметры:
//  МассивОбъектов - Массив - массив ссылок на объекты, к которым надо создать электронный документ.
//  ПараметрыОбмена - Соответствие - соответствие, содержащая настройки обмена ЭД для объектов.
//  ДопПараметры - Структура - дополнительные параметры.
//
// Возвращаемое значение:
//  Массив - сформированные документы.
//
Функция СформироватьПрисоединенныеФайлы(МассивОбъектов, ПараметрыОбмена, ДопПараметры = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктурОбмена = СформироватьХМЛФайлыДокументов(МассивОбъектов, ПараметрыОбмена, ДопПараметры);
	МассивСформированныхЭД = Новый Массив;
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
	
		ПолноеИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
		
		Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		ВремяСозданияЭД = СтруктураОбмена.СтруктураЭД.ДатаЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		УникальныйИдентификаторЭД = "";
		СтруктураОбмена.Свойство("УникальныйИдентификатор", УникальныйИдентификаторЭД);
		
		Если НЕ ЗначениеЗаполнено(УникальныйИдентификаторЭД) Тогда
			СтруктураОбмена.СтруктураЭД.Свойство("УникальныйИдентификатор", УникальныйИдентификаторЭД);
		КонецЕсли;
		
		Ответственный = ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД(СтруктураОбмена.СтруктураЭД.Контрагент,
			СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
		Если Не ЗначениеЗаполнено(Ответственный) Тогда 
			Ответственный = Пользователи.АвторизованныйПользователь();
		КонецЕсли;
		СтруктураОбмена.СтруктураЭД.Вставить("Ответственный",Ответственный);
		
		НовыйЭлектронныйДокумент = СоздатьЭлектронныйДокумент(СтруктураОбмена.СтруктураЭД);
		
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		СтруктураОбмена.СтруктураЭД.Вставить("ВладелецЭД", НовыйЭлектронныйДокумент);
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", НовыйЭлектронныйДокумент);
		ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение, ".", ""));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УникальныйИдентификаторЭД);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайла, , , НоваяСсылкаЭД);
	
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		
		ФлагПродолжить = Ложь;
		
		Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ФлагПродолжить = Истина;
		ИначеЕсли СтруктураОбмена.Свойство("ПолноеИмяДопФайла") Тогда
			ДопФайлСоздан = СоздатьПрисоединенныйДопФайл(СтруктураОбмена, ДобавленныйФайл);
			Если НЕ ДопФайлСоздан Тогда
				ФлагПродолжить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Файл.Путь);
		Если ФлагПродолжить Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураОбмена.Свойство("МассивФайлов") И СтруктураОбмена.МассивФайлов.Количество() > 0 Тогда
			АдресАрхива = АрхивДополнительныхФайлов(СтруктураОбмена.МассивФайлов);
			Если Не АдресАрхива = Неопределено Тогда
				ПараметрыФайла = Новый Структура();
				ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", НовыйЭлектронныйДокумент); 
				ПараметрыФайла.Вставить("ИмяБезРасширения", НСтр("ru = 'Дополнительные файлы'"));
				ПараметрыФайла.Вставить("РасширениеБезТочки", "zip");
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
				НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
				ДопФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресАрхива, , , НоваяСсылкаЭД);
			
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
				СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
				СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
				СтруктураПараметров.Вставить("Организация", СтруктураОбмена.СтруктураЭД.Организация);
				СтруктураПараметров.Вставить("Контрагент", СтруктураОбмена.СтруктураЭД.Контрагент);
				СтруктураПараметров.Вставить("СоглашениеЭД", СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
				СтруктураПараметров.Вставить("ВладелецЭД", НовыйЭлектронныйДокумент);
				СтруктураПараметров.Вставить("УникальныйИД", УникальныйИдентификаторЭД);
				ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, СтруктураПараметров, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураОбмена.СтруктураЭД.Вставить("УникальныйИД", УникальныйИдентификаторЭД);
		
		ДатаФормированияЭДОтправителем = "";
		Если НЕ СтруктураОбмена.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
			ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
		КонецЕсли;
		СтруктураОбмена.СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
		СтатусЭД = Неопределено;
		Если НЕ (СтруктураОбмена.СтруктураЭД.Свойство("СтатусЭД", СтатусЭД) И ЗначениеЗаполнено(СтатусЭД)) Тогда
			СтруктураОбмена.СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
		КонецЕсли;
		
		ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбмена.СтруктураЭД);
		Для каждого Строка Из СтруктураОбмена.СтруктураЭД.ДокументыОснования Цикл
			УстановитьСсылкуДляВладельцаВРегистреСостояний(Строка, НовыйЭлектронныйДокумент);
		КонецЦикла;
		МассивСформированныхЭД.Добавить(НовыйЭлектронныйДокумент);
		
	КонецЦикла;
	
	Возврат МассивСформированныхЭД;
	
КонецФункции

// Формирование ХМЛ файлов документов.
//
// Параметры:
//  МассивОбъектовДляВыгрузки - Массив - объекты для формирования.
//  ПараметрыОбмена - Структура - параметры формирования.
//  ДопПараметры - Структура - дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив - структуры возвратов.
//
Функция СформироватьХМЛФайлыДокументов(МассивОбъектовДляВыгрузки, ПараметрыОбмена, ДопПараметры = "") Экспорт
	
	МассивСтруктурВозврата = Новый Массив;
	СтруктураВидовЭД = Новый Соответствие;
	
	Для Каждого ТекЭлемент Из МассивОбъектовДляВыгрузки Цикл
		ВидЭД = "";
		Если НЕ ЗначениеЗаполнено(ДопПараметры) ИЛИ НЕ ДопПараметры.Свойство("ВидЭД", ВидЭД) Тогда
			ПараметрыЭД = ПараметрыОбмена.Получить(ТекЭлемент.Ссылка);
			ПараметрыЭД.Свойство("ВидЭД", ВидЭД);
		КонецЕсли;
	
		МассивОбъектовПоВидуЭД = СтруктураВидовЭД.Получить(ВидЭД);
		Если МассивОбъектовПоВидуЭД = Неопределено Тогда
			МассивОбъектовПоВидуЭД = Новый Массив;
		КонецЕсли;
		МассивОбъектовПоВидуЭД.Добавить(ТекЭлемент);
		СтруктураВидовЭД.Вставить(ВидЭД, МассивОбъектовПоВидуЭД);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураВидовЭД Цикл
		СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры);
	КонецЦикла;
	
	Возврат МассивСтруктурВозврата;
	
КонецФункции

// Проверка длины номера счета.
//
// Параметры:
//  НомерСчета - Строка - номер счета.
//  ШаблонСообщения - Строка - шаблон сообщения.
//  ЕстьОшибкиЗаполнения - Булево - результат проврки.
//  ТекстОшибки - Строка - текст ошибки проверки.
//
Процедура ПроверитьДлинуНомераСчета(НомерСчета, ШаблонСообщения, ЕстьОшибкиЗаполнения, ТекстОшибки) Экспорт
	
	ПространствоИменСхемы = ПространствоИменCML();
	Длина = Число(ОбменСКонтрагентамиВнутренний.ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, "РасчетныйСчет", "НомерСчета", ВидФасетаXDTO.Длина));

	Если Длина <> СтрДлина(СокрЛП(НомерСчета)) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Длина);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		ЕстьОшибкиЗаполнения = Истина;
			
	КонецЕсли;
	
КонецПроцедуры

// Меняет состояние ЭД документа ИБ
// Параметры:
// ИзменяемыеДокументы - массив - ссылка на документ ИБ
// НовоеСостояние - ПеречислениеСсылка.СостоянияВерсийЭД - значение нового состояния
// ИзменяемыеСостояния - Массив- ПеречислениеСсылка.СостоянияВерсийЭД - Массив состояний, менять которые не нужно.
//
Процедура ИзменитьСостояниеЭД(ИзменяемыеДокументы, НовоеСостояние, ИзменяемыеСостояния = Неопределено) Экспорт
	
	Если Не ТипЗнч(ИзменяемыеДокументы) = Тип("Массив") Тогда
		
		ДокументыИБ = Новый Массив;
		ДокументыИБ.Добавить(ИзменяемыеДокументы);
	Иначе
		ДокументыИБ = ИзменяемыеДокументы;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого ДокументИБ Из ДокументыИБ Цикл
			Если Не ИзменяемыеСостояния = Неопределено Тогда
				Если ИзменяемыеСостояния.Найти(ДокументИБ.СостояниеЭДО) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДокументОбъект = ДокументИБ.ПолучитьОбъект();
			ДокументОбъект.СостояниеЭДО = НовоеСостояние;
			ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
			ДокументОбъект.Записать();
			СводнаяИнформацияПоСтатусу = Новый Структура;
			СводнаяИнформацияПоСтатусу.Вставить("СНашейСтороны", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
			СводнаяИнформацияПоСтатусу.Вставить("СоСтороныДругогоУчастника", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
			ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьВерсиюЭДВРегистре(ДокументИБ, НовоеСостояние, СводнаяИнформацияПоСтатусу);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// БСП ЭлектроннаяПодпись

// Получает все подписи файла.
//
// Параметры:
//  СсылкаНаОбъект  - СправочникСсылка - ссылка объект, в табличной части которого содержатся подписи.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//  МассивВозврата - массив структур с возвращаемыми значениями.
//
Функция ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор) Экспорт
	
	МассивВозврата = Новый Массив;
	
	ПолноеИмяОбъектаСЭП = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
	               |	ЭлектронныеПодписи.Подпись КАК Подпись,
	               |	ЭлектронныеПодписи.ИмяФайлаПодписи КАК ИмяФайлаПодписи
	               |ИЗ
	               |	ПолноеИмяОбъектаСЭП КАК ЭлектронныеПодписи
	               |ГДЕ
	               |	ЭлектронныеПодписи.Ссылка = &СсылкаНаОбъект
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЭлектронныеПодписи.НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПолноеИмяОбъектаСЭП", ПолноеИмяОбъектаСЭП + ".ЭлектронныеПодписи");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		СтруктураВозврата = Новый Структура("АдресПодписи, КомуВыданСертификат, ИмяФайлаПодписи",
											АдресПодписи,
											ВыборкаЗапроса.КомуВыданСертификат,
											ВыборкаЗапроса.ИмяФайлаПодписи);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Получение отпечатков ожидаемых сертификатов
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
// 
// Возвращаемое значение:
//  Массив - отпечатки сертификатов.
//
Функция ОтпечаткиОжидаемыхСертификатов(ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		ИмяДокумента = "ЭлектронныйДокументВходящий";
	Иначе
		ИмяДокумента = "ЭлектронныйДокументИсходящий";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.ВидЭД,
	|	ЭДПрисоединенныеФайлы.НастройкаЭДО КАК СоглашениеЭД,
	|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО
	|ПОМЕСТИТЬ ВТ_ЭД
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыЭП.Отпечаток КАК Отпечаток
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыЭП
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
	|				ИЗ
	|					ВТ_ЭД КАК ВТ_ЭД
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
	|						ПО ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					СоглашенияЭДСертификаты.Сертификат
	|				ИЗ
	|					ВТ_ЭД КАК ВТ_ЭД
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
	|						ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
	|				ПО СертификатыЭП.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
	|			ПО ПодписываемыеВидыЭД.СертификатЭП = СертификатыЭП.Ссылка
	|		ПО ВТ_ЭД.ВидЭД = ПодписываемыеВидыЭД.ВидЭД
	|ГДЕ
	|	НЕ СертификатыЭП.Отозван
	|	И НЕ СертификатыЭП.ПометкаУдаления
	|	И ПодписываемыеВидыЭД.Использовать
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияЭДСертификатыКонтрагента.Отпечаток
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейКонтрагента КАК СоглашенияЭДСертификатыКонтрагента
	|		ПО СоглашенияЭДСертификатыКонтрагента.Ссылка = ВТ_ЭД.СоглашениеЭД";
	Запрос.УстановитьПараметр("Ссылка", ЭлектронныйДокумент);
	
	МассивОтпечатков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отпечаток");
	
	Возврат МассивОтпечатков;
	
КонецФункции

// Чтение текста из файла.
//
// Параметры:
//  ИмяФайла - Строка - имя файла.
//  Кодировка - КодировкаТекста - кодировка файла.
//  АвтоОпределениеКодировкиXML - Булево - признак автоопределения кодировки.
// 
// Возвращаемое значение:
//  Строка - текстовое содержимое файла.
//
Функция ПрочитатьТекстИзФайла(ИмяФайла, Кодировка = Неопределено, АвтоОпределениеКодировкиXML = Ложь) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ИмяФайла) Тогда
		ИмяФайлаНаДиске = ПолучитьИмяВременногоФайла();
		ПолучитьИзВременногоХранилища(ИмяФайла).Записать(ИмяФайлаНаДиске);
	Иначе
		ИмяФайлаНаДиске = ИмяФайла;
	КонецЕсли;
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяФайлаНаДиске, Кодировка);
	ТекстИзФайла = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	Если АвтоОпределениеКодировкиXML И ЗначениеЗаполнено(ТекстИзФайла) Тогда
		ПерваяСтрокаФайла = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 1), 100));
		Если СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-8""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		ИначеЕсли СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-16""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF16);
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаНаДиске);
	
	Возврат ТекстИзФайла;
	
КонецФункции

// Загрузка строки XML в дерево значений.
//
// Параметры:
//  СтрокаXML - Строка - строка с данными XML
//  ОписаниеОшибки - Строка - возвращаемое сообщение об ошибке.
//  ЧтениеXML - ЧтениеXML - возвращаемый объект ЧтениеXML
//  ТекущийУзел - СтрокаДереваЗначений, Неопределено - строка дерева значений.
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений - загруженная строка XML.
//
Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекущийУзел = Неопределено) Экспорт
	
	ПерваяИтерация = (ТекущийУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекущийУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Ошибка разбора XML:'") + " " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовыйУзел = ТекущийУзел.Строки.Добавить();
				НовыйУзел.Имя = ЧтениеXML.Имя;
				НовыйУзел.Тип = "Э";
				НовыйУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовыйАтрибут = НовыйУзел.Строки.Добавить();
					НовыйАтрибут.Имя = ЧтениеXML.Имя;
					НовыйАтрибут.Тип = "А";
					НовыйАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовыйУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекущийУзел) = Тип("СтрокаДереваЗначений") И ТекущийУзел.Тип = "Э" Тогда
				ТекущийУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Ошибка разбора XML:'") + " " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекущийУзел;
	КонецЕсли;
	
КонецФункции

// Создание дерева структуры XML.
// 
// Возвращаемое значение:
//  ДеревоЗначений - дерево с колонками Имя, Тип, Значение.
//
Функция СоздатьДеревоСтруктурыXML() Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

// Получение билета на сайте интернет-поддержки.
//
// Параметры:
//  Аутентификация - Структура - параметры аутентификации.
//    * Логин - Строка - логин доступа.
//    * Пароль - Строка - пароль доступа.
//  ПоказыватьОшибки - Булево - признак показа ошибок.
// 
// Возвращаемое значение:
//  Строка - контрольная строка для авторизации.
//
Функция БилетНаСайтПоддержки(ПоказыватьОшибки = Истина) Экспорт
	
	Билет = "";
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
	
		МодульТарификация = ОбщегоНазначения.ОбщийМодуль("Тарификация");
		Если Не МодульТарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(
			ОбменСКонтрагентамиКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС(),
			ОбменСКонтрагентамиКлиентСервер.ИдентификаторУслугиОбменаЭлектроннымиДокументами()) Тогда
			
			ЕстьОшибки = Истина;
			
			ТекстЗаголовкаСообщения = НСтр("ru = 'При аунтификациии на портале 1С:ИТС возникла ошибка:'");
			ОписаниеОшибки = НСтр("ru = 'Услуга ""Обмен электронными документами"" не подключена.'");
			ТекстСообщения = "";
			Если ПоказыватьОшибки Тогда
				ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ОписаниеОшибки;
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
				ОписаниеОшибки, ТекстСообщения);
			Возврат Билет;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПолученияТикета = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1C-EDO");
	Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
		Билет = РезультатПолученияТикета.Тикет;
	Иначе
		ЕстьОшибки = Истина;
		
		ТекстЗаголовкаСообщения = НСтр("ru = 'При аунтификациии на портале 1С:ИТС возникла ошибка:'");
		ТекстСообщения = "";
		Если ПоказыватьОшибки Тогда
			ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + РезультатПолученияТикета.СообщениеОбОшибке;
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
			РезультатПолученияТикета.ИнформацияОбОшибке, ТекстСообщения);
	КонецЕсли;
	
	Возврат Билет;
	
КонецФункции

// Формирование архива регистрационного пакета для оператора ЭДО.
//
// Параметры:
//  РеквизитыПакета - Структура - параметры пакета.
//  ЗашифрованныеДанныеОператораЭДО - ДвоичныеДанные - данные для оператора ЭДО
//  								- Строка - адрес временного хранилища
//  ПодписанныеДвоичныеДанныеДляОператораЭДО - ДвоичныеДанные - подписанные данные для оператора.
//  ДвоичныеДанныеСоглашенияНаПодключениеЭДО - ДвоичныеДанные - данные соглашения.
//  ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО - ДвоичныеДанные - подписанные данные соглашения.
// 
// Возвращаемое значение:
//  Строка - имя файла пакета.
//
Функция РегистрационныйПакетДляОператораЭДО(РеквизитыПакета, ЗашифрованныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО) Экспорт
		
	// Сформируем пакет для 1СЭДО
	ИмяФайлаПакетаДля1СЭДО = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог() + "EDI_"
		+ РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО + ".zip";
	
	АдресКаталогаРегистрации = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(
		"reg", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ИмяВременногоФайлаПакетаДляОператораЭДО            = АдресКаталогаРегистрации + "packet.zip";
	ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО = АдресКаталогаРегистрации + "LicenseCard.zip";
	ИмяВременногоФайлаЭДКарточки                       = АдресКаталогаРегистрации + "card.xml";
	ИмяВременногоФайлаЭДТранспортнойИнформации         = АдресКаталогаРегистрации + "meta.xml";
	
	// Готовим данные для ОператораЭДО
	Если ТипЗнч(ЗашифрованныеДанныеОператораЭДО) = Тип("ДвоичныеДанные") Тогда
		ЗашифрованныеДвоичныеДанныеОператораЭДО	= ЗашифрованныеДанныеОператораЭДО;
	Иначе
		ЗашифрованныеДвоичныеДанныеОператораЭДО = ПолучитьИзВременногоХранилища(ЗашифрованныеДанныеОператораЭДО);
	КонецЕсли;
	
	ИмяФайла = АдресКаталогаРегистрации + НовыйUUID() + ".bin";
	ЗашифрованныеДвоичныеДанныеОператораЭДО.Записать(ИмяФайла);
	
	ИмяФайлаПодписи = АдресКаталогаРегистрации + НовыйUUID() + ".bin";
	ПодписанныеДвоичныеДанныеДляОператораЭДО.Записать(ИмяФайлаПодписи);
	
	ИмяФайлаОписанияПакетаДляОператораЭДО = АдресКаталогаРегистрации + "packageDescription.xml";
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО = ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи);
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО.Записать(ИмяФайлаОписанияПакетаДляОператораЭДО);
	
	МассивФайловПакетаНаПодключениеЭДО = Новый Массив;
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайлаОписанияПакетаДляОператораЭДО);
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайла);
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайлаПодписи);
	СформироватьАрхивФайлов(ИмяВременногоФайлаПакетаДляОператораЭДО, МассивФайловПакетаНаПодключениеЭДО);
	
	// Готовим соглашение для 1СЭДО
	ИмяФайлаСоглашенияНаПодключениеЭДО       = АдресКаталогаРегистрации + "LicenseCard.xml";
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлаСоглашенияНаПодключениеЭДО);
	
	ИмяФайлПодписиСоглашенияНаПодключениеЭДО = АдресКаталогаРегистрации + "LicenseCard.p7s";
	ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлПодписиСоглашенияНаПодключениеЭДО);
	
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО = Новый Массив;
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО.Добавить(ИмяФайлаСоглашенияНаПодключениеЭДО);
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО.Добавить(ИмяФайлПодписиСоглашенияНаПодключениеЭДО);
	СформироватьАрхивФайлов(ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО, МассивФайловАрхиваСоглашенияНаПодключениеЭДО);
	
	// Готовим описание пакета для 1СЭДО
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДКарточки", ИмяВременногоФайлаЭДКарточки);
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДТранспортнойИнформации", ИмяВременногоФайлаЭДТранспортнойИнформации);
	СоздатьФайлыОписанияПакета(РеквизитыПакета);
	
	МассивФайловРегистрационногоПакета = Новый Массив;
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаПакетаДляОператораЭДО);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДКарточки);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДТранспортнойИнформации);
	СформироватьАрхивФайлов(ИмяФайлаПакетаДля1СЭДО, МассивФайловРегистрационногоПакета);
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаРегистрации);
	
	Возврат ИмяФайлаПакетаДля1СЭДО;

КонецФункции

// Отправка регистрационного пакета 1С-ЭДО.
//
// Параметры:
//  Файл - Файл - файл пакета.
//  ПараметрыАутентификации - Структура - параметры аутентификации.
//  ЕстьОшибки - Булево - возвращает результат отправки.
//
Процедура ОтправитьРегистрационныйПакет1СЭДО(Знач Файл, ПараметрыАутентификации, ЕстьОшибки) Экспорт
	
	// Если доступа к ВебСервису нет, то работу с ним прекращаем.
	Если Не ЕстьДоступКВебСервису1CЭДО(Истина) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	Билет = БилетНаСайтПоддержки();
	Если Не ЗначениеЗаполнено(Билет) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	АдресРесурса = "SendRequest?ticket=" + Билет;
	
	// возможно будет ответ от сервера
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("txt");
	Попытка
		Соединение.ОтправитьДляОбработки(Файл, АдресРесурса, ИмяФайлаРезультата);
	Исключение
		ЕстьОшибки = Истина;
		
		ФайлРезультата = Новый ТекстовыйДокумент;
		ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
		Результат = ФайлРезультата.ПолучитьТекст();
		
		ШаблонЗаголовкаСообщения = НСтр("ru = 'При отправке заявления о регистрации: %1 на сервисе 1С-ЭДО возникла ошибка:'");
		
		Файл = Новый Файл(Файл);
		ТекстЗаголовкаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗаголовкаСообщения, Файл.Имя);
			
		ТекстСообщения = "";
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = СтрЗаменить(Результат, """", "");
			Результат = СтрЗаменить(Результат, ":", ",");
			МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
			Если МассивПараметровОшибки.Количество() >= 7 Тогда
				
				КодОшибки = МассивПараметровОшибки[5];
				
				ШаблонОшибки = НСтр("ru = '%1: %2.'");
				ТекстОшибкиЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
				
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(
					КодОшибки, ТекстОшибкиЭДО);
				
				ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = '%1
			|Необходимо:
			|Проверить верность введения логина\пароля;
			|Проверить наличие ИТС по рег. номеру;
			|Проверить окончание срока действия договора ИТС на сайте;
			|Проверить актуальность платформы;
			|Проверить авторизацию на сайте интернет-поддержки;
			|Добавить в исключения антивируса\брандмауэра платформы 1С.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ТекстСообщения);
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
			Результат, ТекстСообщения);
		
	КонецПопытки;
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	
КонецПроцедуры

// Получение файла ответа от сервера ЭДО.
//
// Параметры:
//  АдресРесурса - Строка - адрес ресурса.
//  ПараметрЗапросаОтветаОтСервера - Строка - суффикс адреса ресурса.
// 
// Возвращаемое значение:
//  Строка - имя временного файла.
//
Функция ПолучитьФайлОтветаОтСервераЭДО(АдресРесурса, ПараметрЗапросаОтветаОтСервера = Неопределено) Экспорт
	
	// Если доступа к ВебСервису нет, то работу с ним прекращаем.
	Если Не ЕстьДоступКВебСервису1CЭДО(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml");
	Если ПараметрЗапросаОтветаОтСервера <> Неопределено Тогда
		АдресРесурса = АдресРесурса + "/" + ПараметрЗапросаОтветаОтСервера;
	КонецЕсли;
	
	Попытка
		Соединение.Получить(АдресРесурса, ИмяФайлаРезультата);
	Исключение
		ФайлРезультата = Новый ТекстовыйДокумент;
		ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
		Результат = ФайлРезультата.ПолучитьТекст();
		
		ТекстЗаголовкаСообщения = НСтр("ru = 'При работе с сервисом 1С-ЭДО возникла ошибка:'");
		
		ТекстСообщения = "";
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = СтрЗаменить(Результат, """", "");
			Результат = СтрЗаменить(Результат, ":", ",");
			МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
			Если МассивПараметровОшибки.Количество() >= 7 Тогда
				
				КодОшибки = МассивПараметровОшибки[5];
				
				ШаблонОшибки = НСтр("ru = '%1: %2.'");
				ТекстОшибкиЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
				
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(
					КодОшибки, ТекстОшибкиЭДО);
				
				ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
			Результат, ТекстСообщения);
			
	КонецПопытки;
	
	Возврат ИмяФайлаРезультата;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Сервис1CЭДО

// Проверяет наличие доступа к веб-сервису 1С-ЭДО.
//
// Параметры:
//  ВыводитьСообщения - Булево, требуется ли выводить сообщения.
//
// Возвращаемое значение:
//  Булево - наличие доступа к веб-сервису ФНС.
//
Функция ЕстьДоступКВебСервису1CЭДО(ВыводитьСообщения = Ложь) Экспорт
	
	Результат = Истина;
	
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml");
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	Попытка
		Соединение.Получить("GetInfo/1", ИмяФайлаРезультата);
	Исключение
		
		ТекстЗаголовкаСообщения = НСтр("ru = 'При работе с сервисом 1С-ЭДО возникла ошибка:'");
		
		ШаблонСообщения = НСтр("ru = '%1
		|Сервис 1С-ЭДО не доступен. Попробуйте чуть позже.'");
		
		ТекстСообщения = "";
		Если ВыводитьСообщения Тогда
			ТекстСообщения = ТекстЗаголовкаСообщения
				+ Символы.ПС + СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		ПодробныйТекстОшибки = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
			ПодробныйТекстОшибки, ТекстСообщения);
		
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура СформироватьДокумент(ДеревоРазбора, СтрокаОбъекта, ДокументСсылка, Контрагент, Записывать, ТекстСообщения, Отказ) Экспорт
	
	ЭтоПередачаРабот = Ложь;
	ЭтоПередачаТоваров = Ложь;
	ИмяРеквизитаКонтрагент = "Контрагент";
	Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		И ВРег(СтрокаОбъекта.ОписаниеОбъекта) = ВРег("ПередачаРезультатовРабот") Тогда
		
		ЭтоПередачаРабот = Истина;
		ИмяРеквизитаКонтрагент = "Заказчик";
		ДанныеВыбранногоКонтрагента = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Контрагент);
		Если ТипЗнч(ДанныеВыбранногоКонтрагента) = Тип("Структура") Тогда
			
			ДанныеВыбранногоКонтрагента.Вставить("ЭтоФизЛицо",
				ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(Контрагент));

			ЗаполнитьДанныеУчастникаСделки(ДанныеВыбранногоКонтрагента, СтрокаОбъекта.ЗначениеРеквизита, ИмяРеквизитаКонтрагент); 
			
		КонецЕсли;
		
	ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		И ВРег(СтрокаОбъекта.ОписаниеОбъекта) = ВРег("ПередачаТоваров") Тогда
		
		ЭтоПередачаТоваров = Истина;
		ИмяРеквизитаКонтрагент = "Поставщик";
		ДанныеВыбранногоКонтрагента = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Контрагент);
		Если ТипЗнч(ДанныеВыбранногоКонтрагента) = Тип("Структура") Тогда
			
			ДанныеВыбранногоКонтрагента.Вставить("ЭтоФизЛицо",
				ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(Контрагент));
				
			ЗаполнитьДанныеУчастникаСделки(ДанныеВыбранногоКонтрагента, СтрокаОбъекта.ЗначениеРеквизита, ИмяРеквизитаКонтрагент);
			
		КонецЕсли;

	Иначе
		
		СтрокаДерева = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаКонтрагент);
		Если СтрокаДерева.СсылкаНаОбъект <> Контрагент Тогда
			СтрокаДерева.СсылкаНаОбъект = Контрагент;
			// Замена партнера.
			Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
				СтрокаДереваПартнер = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, "Партнер");
				Если СтрокаДереваПартнер <> Неопределено Тогда
					РеквизитыПартнера = Новый Структура();
					РеквизитыПартнера.Вставить("Контрагент", Контрагент);
					ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Партнеры");
					СтрокаДереваПартнер.СсылкаНаОбъект = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Если ЭтоПередачаРабот Тогда
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаРезультатовРабот(СтрокаОбъекта.ЗначениеРеквизита, ДокументСсылка);
		ИначеЕсли ЭтоПередачаТоваров Тогда
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаТоваров(СтрокаОбъекта.ЗначениеРеквизита, ДокументСсылка);
		Иначе
			ДокументСсылка = ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД(СтрокаОбъекта, ДеревоРазбора,
				ДокументСсылка, Записывать);
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1.
								|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ИнформацияОбОшибке().Описание,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
		
КонецПроцедуры

Функция НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, ИмяОбъектаПоиска) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураПоиска = Новый Структура("Реквизит", ИмяОбъектаПоиска);
	МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		ИндексСтрокиКонтрагента = МассивСтрок[0].ЗначениеРеквизита;
		СтруктураПоиска = Новый Структура("ИндексСтроки", ИндексСтрокиКонтрагента);
		МассивСтрок = ДеревоРазбора.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаДерева = МассивСтрок[0];
			ВозвращаемоеЗначение = СтрокаДерева;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроверкаСостоянияКонтрагентовВ1СЭДО

#Область ПроверкаКонтрагентов

// Часть фонового задания по проверке контрагента из формы контрагента
Процедура ПроверитьКонтрагентаФоновоеЗадание(Параметры) Экспорт
	
	// Присвоение даты находится здесь, так как ТекущаяДатаСеанса работает только на сервере.
	Если Не Параметры.Свойство("Дата") Тогда
		Параметры.Вставить("Дата", НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	Попытка
		ПроверитьКонтрагента(Параметры, Параметры.АдресХранилища);
	Исключение
		
		Операция = НСтр("ru = 'Проверка подключения контрагента к 1С-ЭДО из формы контрагента.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Процедура - Проверка одного контрагента по ИНН, КПП и Дате.
//
// Параметры:
//  Параметры	 - Структура - Параметры запуска фонового задания. Ключи структуры:
//		"Контрагент" - СправочникСсылка.<Контрагенты> - Проверяемый контрагент.
//		"ИНН"		 - Строка - ИНН Контрагента.
//		"КПП"		 - Строка - КПП Контрагента.
//		"Дата"		 - Дата - Дата, на которую выполняется проверка контрагента. Может быть не указана,
//		                  тогда берется текущая дата.
//		"СохранятьРезультатСразуПослеПроверки" - Булево - Признак, указывающий нужно ли результат
//		                  проверки контрагента сразу сохранять в регистр.
//		"АдресХранилища" - Строка - Адрес, в который будет помещен результат проверки контрагента.
//  АдресХранилища	 - Строка - Адрес временного хранилища, в который будет помещен результат проверки контрагента.
Процедура ПроверитьКонтрагента(Параметры, АдресХранилища)
	
	// Готовим данные в нужном формате для передачи на проверку.
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	
	НоваяСтрока = ДанныеКонтрагентов.Добавить();
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		НоваяСтрока.ОбластьДанныхВспомогательныеДанные = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры);
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища, Истина, Параметры.СохранятьРезультатСразуПослеПроверки);
	
КонецПроцедуры

// Процедура - Проверка нескольких контрагентов.
//
// Параметры:
//  ДанныеКонтрагентов					 - ТаблицаЗначений - Содержит данные проверяемых контрагентов. 
//		Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагента.
//  АдресХранилища						 - Строка - Адрес, в который будет помещен результат проверки контрагента.
//  ЭтоПроверкаСправочника				 - Булево - Указывает, выполняется ли проверка справочника. 
//		Для справочника результат проверки сохраняется во временное хранилище, либо записывается в регистр.
//		Для остальных объектов результат проверки заполняется в колонке Состояние таблицы ДанныеКонтрагентов.
//  СохранятьРезультатСразуПослеПроверки - Булево - Признак, указывающий нужно ли результат проверки контрагента.
Процедура ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища = Неопределено, ЭтоПроверкаСправочника = Истина,
	СохранятьРезультатСразуПослеПроверки = Ложь)
	
	// Если доступа к ВебСервису нет, то проверку не делаем.
	Если Не ЕстьДоступКВебСервису1CЭДО() Тогда
		Возврат;
	КонецЕсли;
	
	// Если по некоторым контрагентам можно определить, что они не существуют, не обращаясь к сервису, то к сервису по ним
	// обращаться не будем.
	Если ЭтоПроверкаСправочника Тогда
		ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов);
	КонецЕсли;

	// Приведение данных к нужному формату, выявление записей с ошибками.
	ПодготовитьДанныеКПроверке(ДанныеКонтрагентов);
	
	// Получение результатов проверки от веб-сервиса.
	// Проверяем только тех контрагентов, у которых неопределено состояние и у которых нет ошибок.
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка());
	ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор);
	
	// Сохраняем результаты проверки, если это справочник.
	Если ЭтоПроверкаСправочника Тогда
		УстановитьПривилегированныйРежим(Истина);
		СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, АдресХранилища, СохранятьРезультатСразуПослеПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры = Неопределено) Экспорт
	
	// Выбираем контрагентов, которых нет в регистре сведений.
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ %5
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.%1 КАК ИНН,
	|	Контрагенты.%2 КАК КПП,
	|	&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	&Дата КАК Дата
	|ИЗ
	|	Справочник.%3 КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|		ПО Контрагенты.Ссылка = СостоянияКонтрагентовБЭД.Контрагент
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Состояние ЕСТЬ NULL 
	|	%4";
		
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Текст = СтрЗаменить(
			Текст,
			"&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
		
	КонецЕсли;
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	УсловиеНаГруппу = "";
	Если СправочникКонтрагентовИерархический() Тогда
		УсловиеНаГруппу = "И Контрагенты.ЭтоГруппа = ЛОЖЬ";
	КонецЕсли;
	
	ОграничениеНаПрава = "";
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		РазмерПорции = 1000;
		ОграничениеНаПрава = "РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=0");
	Иначе
		ОграничениеНаПрава = "РАЗЛИЧНЫЕ";
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон(Текст, 
		ИмяРеквизитаИННКонтрагента, 
		ИмяРеквизитаКППКонтрагента, 
		ИмяПрикладногоСправочника, 
		УсловиеНаГруппу,
		ОграничениеНаПрава);
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Запрос.УстановитьПараметр("ОбластьДанныхВспомогательныеДанные", ОбщегоНазначения.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Прерываем обновление, если не осталось необработанных данных.
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		Параметры.ОбработкаЗавершена = ДанныеКонтрагентов.Количество() = 0;
		Если Параметры.ОбработкаЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВСправочнике

// Подписка на событие. Добавление в регистр набора ИНН и КПП для последующей проверки регламентным заданием.
//
// Параметры:
//  КонтрагентОбъект - СправочникОбъект.<Контрагенты> - записываемый контрагент.
//  Отказ			 - Булево - Параметр обработчика подписки на событие.
Процедура СохранитьРезультатПроверкиКонтрагентаПриЗаписи(Объект, Отказ) Экспорт 
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Объект) Тогда
		Возврат;
	КонецЕсли;

	Если СправочникКонтрагентовИерархический() И Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияКонтрагентовБЭД.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент
	|	И СостоянияКонтрагентовБЭД.ИНН = &ИНН
	|	И СостоянияКонтрагентовБЭД.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", Объект[ИмяРеквизитаИННКонтрагента]);
	Запрос.УстановитьПараметр("КПП", Объект[ИмяРеквизитаКППКонтрагента]);
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = Новый Структура;
	
	ДанныеКонтрагента.Вставить("Контрагент",	Объект.Ссылка);
	ДанныеКонтрагента.Вставить("ИНН", 			Объект[ИмяРеквизитаИННКонтрагента]);
	ДанныеКонтрагента.Вставить("КПП",			Объект[ИмяРеквизитаКППКонтрагента]);
	ДанныеКонтрагента.Вставить("Дата", 			НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагента.Вставить("Состояние", 	Перечисления.СостоянияКонтрагентаБЭД.НеПодключен);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагента.Вставить("ОбластьДанныхВспомогательныеДанные", ОбщегоНазначения.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхКПроверке

// Проверка ошибок, удаление дублей.
Процедура ПодготовитьДанныеКПроверке(ДанныеКонтрагентовДляПроверки)
	
	ДанныеКонтрагентов = ДанныеКонтрагентовТипизированные(ДанныеКонтрагентовДляПроверки);
	ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов);
	СвернутьДанныеКонтрагентов(ДанныеКонтрагентов);
	
	ДанныеКонтрагентовДляПроверки = ДанныеКонтрагентов;
	
КонецПроцедуры

Функция ДанныеКонтрагентовТипизированные(ДанныеКонтрагентовДляПроверки)
	
	// Создаем таблицу
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	ЕстьОбластьДанных = ДанныеКонтрагентовДляПроверки.Колонки.Найти("ОбластьДанныхВспомогательныеДанные") <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса");
	
	// Копируем таблицу, сохраняя типы колонок.
	Для каждого ДанныеКонтрагентаДляПроверки Из ДанныеКонтрагентовДляПроверки Цикл
		
		// Копируем данные из таблицы с "сырыми данными" в таблицу с "типизированными" колонками.
		ДанныеКонтрагента = ДанныеКонтрагентов.Добавить();
		
		// В зависимости от наличия колонки ОбластьДанныхВспомогательныеДанные, копируем разный набор данных.
		СписокСвойств = "Контрагент, ИНН, КПП, Состояние, Дата";
		Если ЕстьОбластьДанных Тогда
			СписокСвойств = СписокСвойств + ", ОбластьДанныхВспомогательныеДанные";
		КонецЕсли;
		
		// Гарантировано контрагент не подключен, если поля не заполнены.
		Если Не ЗначениеЗаполнено(ДанныеКонтрагентаДляПроверки.ИНН) И Не ЗначениеЗаполнено(ДанныеКонтрагентаДляПроверки.КПП) Тогда
			ДанныеКонтрагентаДляПроверки.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НеПодключен;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, ДанныеКонтрагентаДляПроверки, СписокСвойств);
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура СвернутьДанныеКонтрагентов(ДанныеКонтрагентов)
	
	// Удаляем из таблицы дубли
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние, ОбластьДанныхВспомогательныеДанные");
	Иначе
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - В таблице ДанныеКонтрагентов оставляет только записи по контрагентам,
//		к которым есть доступ. В модели сервиса из неразделенной области проверку делать
//		не нужно, поскольку регламентное задание выполняется под администратором 
//		и нет доступа к разделенному справочнику контрагентов.
//
Процедура ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов)
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	Если НЕ РазделениеВключено
		ИЛИ РазделениеВключено И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние
			|ПОМЕСТИТЬ ВсеДанныеКонтрагентов
			|ИЗ
			|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент КАК Контрагент
			|ПОМЕСТИТЬ ВсеКонтрагенты
			|ИЗ
			|	Справочник.%1 КАК СправочникКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ПО СправочникКонтрагентов.Ссылка = ВсеДанныеКонтрагентов.Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеКонтрагенты КАК ВсеКонтрагенты
			|		ПО (ВсеКонтрагенты.Контрагент = ВсеДанныеКонтрагентов.Контрагент)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|ГДЕ
			|	ВсеДанныеКонтрагентов.Контрагент = ЗНАЧЕНИЕ(Справочник.%1.ПустаяСсылка)";
			
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
		КонецЕсли;
			
		ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
		Запрос.Текст = СтрШаблон(Запрос.Текст, ИмяПрикладногоСправочника);
			
		Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВебСервисом

Процедура ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор)
	
	// Проверяем только тех контрагентов, которые соответствуют указанному отбору
	ДанныеКонтрагентовДляПроверкиСервисом = ДанныеКонтрагентов.НайтиСтроки(Отбор);
	КоличествоКонтрагентов = ДанныеКонтрагентовДляПроверкиСервисом.Количество();

	Если КоличествоКонтрагентов = 0 Тогда
		// Нет данных для проверки
		Возврат;
	КонецЕсли;
	
	РазмерПорции = 10000;
	
	// Разбиваем всю таблицу на блоки запросов 
	КоличествоЗапросов = ?(КоличествоКонтрагентов % РазмерПорции = 0, КоличествоКонтрагентов / РазмерПорции, Цел(КоличествоКонтрагентов / РазмерПорции) + 1);
		
	// Выполняем несколько запросов. В каждом запросе не более 10000 строк
	Для НомерПорции = 1 По КоличествоЗапросов Цикл 
		
		МинимальныйНомерКонтрагента 	= Мин(РазмерПорции * (НомерПорции - 1), КоличествоКонтрагентов);
		МаксимальныйНомерКонтрагента 	= Мин(РазмерПорции * НомерПорции, КоличествоКонтрагентов) - 1;
		
		ИмяВременногоФайлаЗапросаСостояний = ТекущееИмяВременногоФайла("xml");
		ЗапросСостояний = Новый ЗаписьXML;
		ЗапросСостояний.ОткрытьФайл(ИмяВременногоФайлаЗапросаСостояний, "windows-1251");
		ЗапросСостояний.ЗаписатьОбъявлениеXML();
		ЗапросСостояний.ЗаписатьНачалоЭлемента("Abonents");
			
		Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
			
			ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
			
			ЗапросСостояний.ЗаписатьНачалоЭлемента("Abonent");
				ЗапросСостояний.ЗаписатьНачалоЭлемента("INN");
					ЗапросСостояний.ЗаписатьТекст(ДанныеКонтрагента.ИНН);
				ЗапросСостояний.ЗаписатьКонецЭлемента();
				ЗапросСостояний.ЗаписатьНачалоЭлемента("KPP");
					ЗапросСостояний.ЗаписатьТекст(ДанныеКонтрагента.КПП);
				ЗапросСостояний.ЗаписатьКонецЭлемента();
			ЗапросСостояний.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		ЗапросСостояний.ЗаписатьКонецЭлемента();
		ЗапросСостояний.Закрыть();
		
		Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
		АдресРесурса = "GetMassInfo";
		
		// возможно будет ответ от сервера
		ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml"); ДанныеФайла = "";
		Попытка
			Соединение.ОтправитьДляОбработки(ИмяВременногоФайлаЗапросаСостояний, АдресРесурса, ИмяФайлаРезультата);
			
			ДанныеФайла = ПрочитатьТекстИзФайла(ИмяФайлаРезультата, , Истина);
			ОбработатьОтветСервиса(ДанныеФайла, ДанныеКонтрагентовДляПроверкиСервисом, МинимальныйНомерКонтрагента, МаксимальныйНомерКонтрагента);
		Исключение
			ЕстьОшибки = Истина;
			
			ФайлРезультата = Новый ТекстовыйДокумент;
			ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
			Результат = ФайлРезультата.ПолучитьТекст();
			
			ШаблонСообщения = НСтр("ru = 'При проверке состояния контрагентов на сервисе 1С-ЭДО возникла ошибка:'");
			
			Файл = Новый Файл(Файл);
			ТекстЗаголовкаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Файл.Имя);
				
			ТекстСообщения = "";
			Если ЗначениеЗаполнено(Результат) Тогда
				Результат = СтрЗаменить(Результат, """", "");
				Результат = СтрЗаменить(Результат, ":", ",");
				МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
				Если МассивПараметровОшибки.Количество() >= 7 Тогда
					
					КодОшибки = МассивПараметровОшибки[5];
					
					ШаблонОшибки = НСтр("ru = '%1: %2.'");
					ТекстОшибкиЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
					
					ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(
						КодОшибки, ТекстОшибкиЭДО);
					
					ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецЕсли;
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
				Результат, ТекстСообщения);
		КонецПопытки;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаЗапросаСостояний);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОтветСервиса(ДанныеФайла, ДанныеКонтрагентовДляПроверкиСервисом, МинимальныйНомерКонтрагента, МаксимальныйНомерКонтрагента)
	
	Если НЕ ПустаяСтрока(ДанныеФайла) Тогда
		
		ИННКПП = Новый Массив;
		ПрочитатьИННКППИзФайла(ИННКПП, ДанныеФайла);
		
		Если ИННКПП.Количество() >0 Тогда
			
			Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
				
				ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
				
				КлючПоиска = ДанныеКонтрагента.ИНН + ?(ЗначениеЗаполнено(ДанныеКонтрагента.КПП), "/"+ДанныеКонтрагента.КПП, "");
				
				НайденныйКонтрагент = ИННКПП.Найти(КлючПоиска);
				Если Не НайденныйКонтрагент = Неопределено Тогда
					ДанныеКонтрагента.Состояние = Перечисления.СостоянияКонтрагентаБЭД.Подключен;
				Иначе
					ДанныеКонтрагента.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НеПодключен;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьРезультатаПроверкиВРегистрСведений

// Проверка нескольких контрагентов.
Процедура СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, АдресХранилища = Неопределено, СохранятьРезультатСразуПослеПроверки = Ложь)
	
	Если ДанныеКонтрагентов.Количество() = 1 Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[0]; 
	
		// Сохраняем во временное хранилище.
		Если ЗначениеЗаполнено(АдресХранилища)  Тогда
			ПоместитьВоВременноеХранилище(ДанныеКонтрагента.Состояние, АдресХранилища);
		КонецЕсли;
			
		// Сохраняем в регистр
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) 
			И (НЕ ЗначениеЗаполнено(АдресХранилища) ИЛИ СохранятьРезультатСразуПослеПроверки) Тогда
			
			СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
			
		КонецЕсли;
		
	Иначе
		
		СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов)
	
	Для каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента)
	
	Попытка
		
		Контрагент = ДанныеКонтрагента.Контрагент;
		
		// Блокируем по Контрагенту
		СтруктураКлюча = Новый Структура();
		СтруктураКлюча.Вставить("Контрагент", Контрагент);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			ОбластьДанныхВспомогательныеДанные	= ДанныеКонтрагента.ОбластьДанныхВспомогательныеДанные;
			СтруктураКлюча.Вставить("ОбластьДанныхВспомогательныеДанные", ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;

		Ключ = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		// Записываем данные в регистр.
		НаборЗаписей = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			НаборЗаписей.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;
		НаборЗаписей.Очистить();
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ДанныеКонтрагента); 
		
		НаборЗаписей.Записать();
		
	Исключение
		
		Операция = НСтр("ru = 'Запись результатов проверки подключения контрагентов к 1С-ЭДО в регистр.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Проверяет состояние уведомлений в сервисе 1С-ЭДО
//
// Параметры:
//  ИдентификаторОрганизации - Строка - Идентификатор организации
//  Соединение				 - Http соединение - Http соединение с сервером 1С-ЭДО.
// 
// Возвращаемое значение:
//  Булево - Состояние подключения уведомлений.
//
Функция УведомленияПодключены(ИдентификаторОрганизации, Соединение = Неопределено) Экспорт
	
	Если Соединение = Неопределено Тогда
		СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
		Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(СпособОбмена);
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Получение информации о состоянии уведомлений'");
	
	ИмяМетода = "CheckSubscriptions/" + ИдентификаторОрганизации;
	Запрос = Новый HTTPЗапрос(ИмяМетода);
	
	УведомленияВключены = Ложь;
	Попытка
		Ответ = Соединение.Получить(Запрос);
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса.'");
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
			
		Возврат УведомленияВключены;
		
	КонецПопытки;
		
	Если Не Ответ.КодСостояния = 200 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Код ответа сервиса %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Ответ.КодСостояния);
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстСообщения);
		
		Возврат УведомленияВключены;
		
	КонецЕсли;
		
	Результат = Ответ.ПолучитьТелоКакСтроку();
	
	УведомленияВключены = ЗначениеСтатуса(Результат);
	
	Возврат УведомленияВключены;
	
КонецФункции

// Функция - Шаблон таблицы, используемой для передачи данных в веб-сервис ФНС.
// Возвращаемое значение:
// ТаблицаЗначений - пустая таблица с колонками "Контрагент", "ИНН", "КПП", "Дата", "Состояние", "ДополнительныеПараметры"
//                   "ОбластьДанныхВспомогательныеДанные"(если есть подсистема РаботаВМоделиСервиса).
Функция ШаблонТаблицыДанныеКонтрагента()
	
	// Создаем таблицу
	ДанныеКонтрагентов = Новый ТаблицаЗначений;
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	Тип = "СправочникСсылка." + ИмяПрикладногоСправочника;
	
	// Проверяемый контрагент
	ДанныеКонтрагентов.Колонки.Добавить("Контрагент", 	Новый ОписаниеТипов(Тип));
	// ИНН контрагента
	ДанныеКонтрагентов.Колонки.Добавить(ИмяРеквизитаИННКонтрагента, 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	// КПП контрагента
	ДанныеКонтрагентов.Колонки.Добавить(ИмяРеквизитаКППКонтрагента, 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	// Дата, на которую выполняется проверка контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	// Результат проверки контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Состояние", 	Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияКонтрагентаБЭД"));
	// Область данных
	ДобавитьКолонкуОбластьДанных(ДанныеКонтрагентов);

	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура ДобавитьКолонкуОбластьДанных(Таблица)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Таблица.Колонки.Добавить("ОбластьДанныхВспомогательныеДанные", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;
	
КонецПроцедуры

Функция СправочникКонтрагентовИерархический()
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	Возврат Метаданные.Справочники[ИмяПрикладногоСправочника].Иерархический;
	
КонецФункции

Процедура ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов, ПолучатьВсеСостоянияИзРегистра = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент,
	              	|	ДанныеКонтрагентов.ИНН,
	              	|	ДанныеКонтрагентов.КПП,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
	              	|	ДанныеКонтрагентов.Дата
	              	|ПОМЕСТИТЬ ДанныеКонтрагентов
	              	|ИЗ
	              	|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент,
	              	|	ДанныеКонтрагентов.ИНН,
	              	|	ДанныеКонтрагентов.КПП,
	              	|	ДанныеКонтрагентов.Дата,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
	              	|	ВЫБОР
	              	|		КОГДА &ПолучатьВсеСостоянияИзРегистра
	              	|			ТОГДА СостоянияКонтрагентовБЭД.Состояние
	              	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.ПустаяСсылка)
	              	|	КОНЕЦ КАК Состояние
	              	|ИЗ
	              	|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	              	|		ПО ДанныеКонтрагентов.Контрагент = СостоянияКонтрагентовБЭД.Контрагент
	              	|			И ДанныеКонтрагентов.ИНН = СостоянияКонтрагентовБЭД.ИНН
	              	|			И ДанныеКонтрагентов.КПП = СостоянияКонтрагентовБЭД.КПП
	              	|			И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентовБЭД.ОбластьДанныхВспомогательныеДанные";
					
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
			"");
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентовБЭД.ОбластьДанныхВспомогательныеДанные",
			"");
		
	КонецЕсли;
				  
	Запрос.УстановитьПараметр("ПолучатьВсеСостоянияИзРегистра", ПолучатьВсеСостоянияИзРегистра); 
	
	Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Только для внутреннего использования
Функция НовыйUUID() Экспорт
	
	Возврат НРег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	
КонецФункции

// Функция - Значение статуса
// Преобразует бинарное значение статуса в файле xml или xdto в значение типа булево.
// Параметры:
//  ЗначениеСтатусаВФайле - Строка - значение статуса в файле xml.
// 
// Возвращаемое значение:
//  Булево - Значение статуса в файле.
//
Функция ЗначениеСтатуса(ЗначениеСтатусаВФайле) Экспорт
	
	Если ВРег(ЗначениеСтатусаВФайле) = ВРег("True") Тогда
		ЗначениеСтатуса = Истина;
	Иначе
		ЗначениеСтатуса = Ложь;
	КонецЕсли;
	
	Возврат ЗначениеСтатуса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбменДокументами

Процедура ОбработатьПодтверждениеПолучения(Сообщение, ЭтоФайл = Ложь)
	
	Если ЭтоФайл Тогда
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(Сообщение.ПолноеИмя);
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
			КонецЕсли;
			Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
			КонецЕсли;
		КонецЦикла;
		ЧтениеХМЛ.Закрыть();
		
		Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
			И ДатаПолучения <> Дата('00010101') Тогда
			ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Сообщение.ПолноеИмя);
	Иначе
		Если СтрНайти(Сообщение.Тема, НСтр("ru = 'Подтверждение получения пакета электронных документов'")) > 0 Тогда
			Для Каждого Вложение Из Сообщение.Вложения Цикл
				ДвоичныеДанныеПодтверждения = Вложение.Значение;
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
				ДвоичныеДанныеПодтверждения.Записать(ИмяФайла);
				
				ЧтениеХМЛ = Новый ЧтениеXML;
				ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
				Пока ЧтениеХМЛ.Прочитать() Цикл
					Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
					КонецЕсли;
					Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
					КонецЕсли;
				КонецЦикла;
				ЧтениеХМЛ.Закрыть();
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
				Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
					И ДатаПолучения <> Дата('00010101') Тогда
					
					ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьПодтверждениеПоПакету(ПакетЭД, РесурсОтправителя, АдресОтправителя, ТипОтправки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаПрисоединенныхФайлов = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
	Если ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) И ВыборкаПрисоединенныхФайлов.Следующий() Тогда
		Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			СоответствиеВложений = Новый Соответствие;
			СоответствиеВложений.Вставить(ФайлХМЛ.Имя, Новый ДвоичныеДанные(ФайлХМЛ.ПолноеИмя));
			
			Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(АдресОтправителя, "Пароль");

			ПараметрыОтправки = Новый Структура();
			ПараметрыОтправки.Вставить("Кому",     АдресОтправителя);
			ПараметрыОтправки.Вставить("Тема",     НСтр("ru = 'Подтверждение получения пакета электронных документов:'") + " " + ИмяПакетаЭД);
			ПараметрыОтправки.Вставить("Тело",     "");
			ПараметрыОтправки.Вставить("Вложения", СоответствиеВложений);
			ПараметрыОтправки.Вставить("Пароль",   Пароль);
			Попытка
				РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(РесурсОтправителя, ПараметрыОтправки);
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Текст = НСтр("ru = 'Ошибка при отправке сообщения на сервер электронной почты.
				|%1'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
				
				ТекстСообщения = НСтр("ru = 'Ошибка при отправке эл.документов.'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Отправка эл.документов'"),
				ТекстОшибки,
				ТекстСообщения);
			КонецПопытки;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлХМЛ.ПолноеИмя);
		ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			ПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "ПрофильНастроекЭДО");
			FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО);
			Если FTPСоединение = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			КаталогИсхДокументов = АдресОтправителя;
			
			ПодготовитьПутьFTP(КаталогИсхДокументов);
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			
			ТекстОшибки = "";
			Попытка
				FTPСоединение.УстановитьТекущийКаталог(КаталогИсхДокументов);
			Исключение
				СоздатьКаталогиFTP(FTPСоединение, КаталогИсхДокументов, , ТекстОшибки);
			КонецПопытки;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				Возврат;
			КонецЕсли;
			ЗаписатьФайлНаFTP(FTPСоединение, ФайлХМЛ.ПолноеИмя, ФайлХМЛ.Имя);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлХМЛ.ПолноеИмя);
		ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			АдресКаталога = АдресОтправителя + ?(Прав(АдресОтправителя, 1) <> "\", "\", "");
			КопироватьФайл(ФайлХМЛ.ПолноеИмя, АдресКаталога + ФайлХМЛ.Имя);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлХМЛ.ПолноеИмя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД)
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	// Корневой элемент
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подтверждение");
	// Имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ЭлектронныйДокумент");
	ЗаписьХМЛ.ЗаписатьТекст(ИмяПакетаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаПолучения");
	ЗаписьХМЛ.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();

	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	
	Возврат Новый Файл(ИмяФайла);
	
КонецФункции

Функция НеобходимоПолучить(Сообщение, СтруктураПараметров)
	
	Если Сообщение.Вложения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Сообщение.Вложения.Количество() = 1 Тогда 
	
		Если СтрНайти(Сообщение.Тема, НСтр("ru = 'Подтверждение'")) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если СтрНайти(Сообщение.Тема, НСтр("ru = 'Обмен эл.документами:'")) Тогда
			
			Для Каждого Вложение Из Сообщение.Вложения Цикл
				ДвоичныеДанныеВложения = Вложение.Значение;
			КонецЦикла;
		
			Результат = НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеВложения, Вложение.Ключ, СтруктураПараметров);
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанные, ИмяФайла, СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определим из файла вложений идентификаторы отправителя и получателя и сохраним файл на диск.
	ИмяВременногоФайлаЗИП = ТекущееИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяВременногоФайлаЗИП);
	
	АрхивЧтение = Новый ЧтениеZipФайла(ИмяВременногоФайлаЗИП);
	КлючУникальности = Новый УникальныйИдентификатор();
	ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("input", КлючУникальности);
	
	Попытка
		АрхивЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(АрхивЧтение, ПапкаДляРаспаковки) Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"),
			ТекстОшибки, ТекстСообщения);
		АрхивЧтение.Закрыть();
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаЗИП);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		Возврат Ложь;
	КонецПопытки;
	
	АрхивЧтение.Закрыть();
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаЗИП);
	РаспакованныеФайлы = НайтиФайлы(ПапкаДляРаспаковки, "*");
	
	ФайлИнформации      = Неопределено;
	ФайлКарточки        = Неопределено;
	НастройкиСоглашения = Неопределено;
	
	Для Каждого ТекФайл Из РаспакованныеФайлы Цикл
		Если СтрНайти(ТекФайл.Имя, "packageDescription") > 0 Тогда
			ФайлИнформации = ТекФайл;
			Прервать;
		ИначеЕсли СтрНайти(ТекФайл.Имя, "card") > 0 Тогда
			ФайлКарточки = ТекФайл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Зашифрован = Ложь;
	Если НЕ ФайлИнформации = Неопределено Тогда
		// Определим в этом файле строку с отправителем и получателем и признак шифрования и попытаемся найти соглашение.
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Отправитель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДОтправителя = ЧтениеХМЛ.Значение;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Зашифрован" Тогда
				ЧтениеХМЛ.Прочитать();
				Зашифрован = Зашифрован ИЛИ Булево(ЧтениеХМЛ.Значение);
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Получатель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДПолучателя = ЧтениеХМЛ.Значение;
			КонецЕсли;
				
		КонецЦикла;
		
		ЧтениеХМЛ.Закрыть();
		НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
		
		ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия10;
		
	КонецЕсли;
	
	Если НЕ ФайлКарточки = Неопределено Тогда
		
		ИДПолучателя  = Неопределено;
		ИДОтправителя = Неопределено;
		
		ОбъектXML = Новый ЧтениеXML;
		СтруктураЗначений = Новый Структура;
		
		Попытка
			ТипКарточки = ОбменСКонтрагентамиВнутренний.ПолучитьТипЗначенияCML("Card", "http://api-invoice.taxcom.ru/card");
			ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ТипКарточки);
			ОбъектXML.Закрыть();
			ИДОтправителя = ЭД.Sender.Abonent.ID;
			ИДПолучателя  = ЭД.Receiver.Abonent.ID;
			Если ЭД.Description <> Неопределено
				И ЭД.Description.Свойства().Получить("AdditionalData") <> Неопределено
				И ЭД.Description.AdditionalData <> Неопределено
				И ЭД.Description.AdditionalData.Свойства().Получить("AdditionalParameter") <> Неопределено
				И ЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
				
				Для Каждого Свойство Из ЭД.Description.AdditionalData.AdditionalParameter Цикл
					Если Свойство.Name = "Зашифрован" Тогда
						Зашифрован = Булево(Свойство.Value);
						Продолжить;
					КонецЕсли;
					Если Свойство.Name = "ВерсияФорматаПакета" Тогда
						ВерсияФорматаПакета = ВерсияФорматаИзСтроки(Свойство.Value);
						Продолжить;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
			
		Исключение
			
			ОбъектXML.Закрыть();
			
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ФайлКарточки.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
	Если (ФайлИнформации = Неопределено И ФайлКарточки = Неопределено)
		ИЛИ НастройкиСоглашения = Неопределено Тогда // не нашли файл с описанием или нет обмена
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		Возврат Ложь;
	КонецЕсли;
	
	// Теперь проверим, что такого транспортного пакета от этого отправителя еще не было.
	ИмяПакета = Лев(ИмяФайла, СтрДлина(ИмяФайла)-4);
	
	ЗапросПрисоединенногоФайла = Новый Запрос;
	ЗапросПрисоединенногоФайла.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьПрисоединенныйФайл
	|ИЗ
	|	Справочник.ПакетЭДПрисоединенныеФайлы КАК ПакетЭДПрисоединенныеФайлы
	|ГДЕ
	|	ПакетЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ПакетЭД
	|	И ВЫРАЗИТЬ(ПакетЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Направление = &Направление
	|	И ВЫРАЗИТЬ(ПакетЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Получатель ПОДОБНО &Получатель
	|	И ВЫРАЗИТЬ(ПакетЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Отправитель ПОДОБНО &Отправитель
	|	И ПакетЭДПрисоединенныеФайлы.Наименование ПОДОБНО &Наименование
	|	И ПакетЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Направление",  Перечисления.НаправленияЭД.Входящий);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Получатель",   ИДПолучателя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Отправитель",  ИДОтправителя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Наименование", ИмяПакета);
	
	РезультатПустой = ЗапросПрисоединенногоФайла.Выполнить().Пустой();
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
	
	Если РезультатПустой Тогда
		СтруктураПараметров.Вставить("Получатель",          ИДПолучателя);
		СтруктураПараметров.Вставить("Отправитель",         ИДОтправителя);
		СтруктураПараметров.Вставить("Организация",         НастройкиСоглашения.Организация);
		СтруктураПараметров.Вставить("Контрагент",          НастройкиСоглашения.Контрагент);
		СтруктураПараметров.Вставить("ПрофильНастроекЭДО",  НастройкиСоглашения.ПрофильНастроекЭДО);
		СтруктураПараметров.Вставить("НастройкаЭДО",        НастройкиСоглашения.НастройкаЭДО);
		СтруктураПараметров.Вставить("СпособОбменаЭД",      НастройкиСоглашения.СпособОбменаЭД);
		СтруктураПараметров.Вставить("СертификатОрганизацииДляРасшифровки", НастройкиСоглашения.СертификатОрганизацииДляРасшифровки);
		СтруктураПараметров.Вставить("АдресОтправителя",    НастройкиСоглашения.АдресОтправителя);
		СтруктураПараметров.Вставить("АдресПолучателя",     НастройкиСоглашения.АдресПолучателя);
		СтруктураПараметров.Вставить("Зашифрован",          Зашифрован);
		СтруктураПараметров.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
	
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьПодтверждаемыйПакетЭД(ПредставлениеПакета)
	
	СтрокаИдентификатора = СтрЗаменить(ПредставлениеПакета, "EDI_", "");
	Идентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатора);
	ДокументПакет = Документы.ПакетЭД.ПолучитьСсылку(Идентификатор);
	Если НЕ ОбщегоНазначения.СсылкаСуществует(ДокументПакет) Тогда
		ДокументПакет = Неопределено;
	КонецЕсли;
	
	Возврат ДокументПакет;
	
КонецФункции

Функция СоздатьПрисоединенныйДопФайл(СтруктураПараметров, ЭДВладелец)
	
	ДопЭДСоздан = Ложь;
	ПолноеИмяФайла = СтруктураПараметров.ПолноеИмяДопФайла;
	
	Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		
		ВремяСозданияЭД = СтруктураПараметров.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураПараметров.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
		ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение, ".", ""));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайла, , , НоваяСсылкаЭД);

		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПолноеИмяФайла);
		Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ДопЭДСоздан = Истина;
			ВспомогательнаяСтруктура = Новый Структура;
			ВспомогательнаяСтруктура.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
			ВспомогательнаяСтруктура.Вставить("Организация", СтруктураПараметров.СтруктураЭД.Организация);
			ВспомогательнаяСтруктура.Вставить("Контрагент", СтруктураПараметров.СтруктураЭД.Контрагент);
			ВспомогательнаяСтруктура.Вставить("ВладелецЭД", ВладелецЭД);
			ВспомогательнаяСтруктура.Вставить("СоглашениеЭД", СтруктураПараметров.СтруктураЭД.СоглашениеЭД);
			ВспомогательнаяСтруктура.Вставить("НомерЭД", СтруктураПараметров.СтруктураЭД.НомерЭД);
			ВспомогательнаяСтруктура.Вставить("УникальныйИД", СтруктураПараметров.УникальныйИдентификатор);
			ВспомогательнаяСтруктура.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
			ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
			ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
			ВспомогательнаяСтруктура.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
			ВспомогательнаяСтруктура.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
			
			ДатаФормированияЭДОтправителем = "";
			Если НЕ СтруктураПараметров.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
				ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
			КонецЕсли;
			ВспомогательнаяСтруктура.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, ВспомогательнаяСтруктура);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДопЭДСоздан;
	
КонецФункции

Функция ПреобразоватьДатуВКаноническийВид(ИскомаяДата)
	
	Если ТипЗнч(ИскомаяДата) = Тип("Дата") Тогда
		
		ДатаКаноническогоВида = Формат(Год(ИскомаяДата),"ЧГ=0") + Формат(Месяц(ИскомаяДата), "ЧЦ=2; ЧВН=")
			+ Формат(День(ИскомаяДата), "ЧЦ=2; ЧВН=") + Формат(Час(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=")
			+ Формат(Минута(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=") + Формат(Секунда(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=");
	Иначе
		ДатаКаноническогоВида = ИскомаяДата;
	КонецЕсли;
	
	Возврат ДатаКаноническогоВида;
	
КонецФункции

Процедура ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки)
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТестоваяСтрока = НСтр("ru = 'Тестовая строка 1С: Предприятие'");
	ТекстовыйДокумент.УстановитьТекст(ТестоваяСтрока);
	ТекстовыйДокумент.Записать(ВремФайл);
	ФайлТест = Новый Файл(ВремФайл);
		
	ЗаписатьФайлНаFTP(FTPСоединение, ВремФайл, ФайлТест.Имя, Истина, ТекстОшибки);
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлПолучатель = ПолучитьИмяВременногоФайла();
	
	ПолучитьФайлСFTP(FTPСоединение, ФайлТест.Имя, ФайлПолучатель, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлПолучатель);
		Возврат;
	КонецЕсли;
		
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлПолучатель);
	СтрокаРезультата = ТекстовыйДокумент.ПолучитьТекст();
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлПолучатель);
	Если НЕ СтрокаРезультата = ТестоваяСтрока Тогда
		ШаблонСообщения = НСтр("ru = '%1 %2.'");
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("126");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстСообщения,
			FTPСоединение.ТекущийКаталог());
		
		Возврат;
	КонецЕсли;
	
	УдалитьФайлFTP(FTPСоединение, ФайлТест.Имя, Истина, ТекстОшибки);
	
КонецПроцедуры

Процедура НайтиФайлыВКаталогеFTP(FTPСоединение, Путь, Маска, ЭтоТест, РезультатТеста, МассивФайлов)
	
	Попытка
		Если Маска = Неопределено Тогда
			МассивФайлов = FTPСоединение.НайтиФайлы(Путь);
		Иначе
			МассивФайлов = FTPСоединение.НайтиФайлы(Путь, Маска);
		КонецЕсли;
	Исключение
		РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("125");
		
		Если НЕ ЭтоТест = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет статусы электронных документов.
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на электронные документы, состояние которых надо обновить.
//  ПризнакПодписи - Булево - признак того, что документы подписаны ЭП.
//
Процедура ОбновитьСтатусыЭД(МассивДокументов, ПризнакПодписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлектронныйДокумент Из МассивДокументов Цикл
			Если ((ПризнакПодписи И ЭлектронныйДокумент.СтатусЭД <> Перечисления.СтатусыЭД.Подписан)
			
			ИЛИ (ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
				
			ИЛИ (ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение))
			
			И Не (ЭтоУведомлениеОбУточнении(ЭлектронныйДокумент.ТипЭлементаВерсииЭД)
			 		И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
			
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "НаправлениеЭД");
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленКОтправке, ЭлектронныйДокумент);
			Иначе
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленоПодтверждение, ЭлектронныйДокумент);
			КонецЕсли;
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
			ПринудительнаяСменаСостояния = Ложь;
			Если ЭтоИзвещениеОПолучении(ЭлектронныйДокумент.ТипЭлементаВерсииЭД)
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				ПринудительнаяСменаСостояния = Истина;
			КонецЕсли;
			ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостояния);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'подготовка к отправке ЭД'"),
																						ТекстОшибки,
																						ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДокументов

Функция ЭтоОтправкаПодтверждения(ПрисоединенныйФайл)
	
	Возврат ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

Процедура ЗаписатьДатуПолучения(ЭД, ДатаИзменения)
	
	ТекСтатусЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "СтатусЭД");
	
	Попытка
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ОтправленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.Отправлен) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, ЭД);
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
		КонецЕсли;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись даты получения ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьДатуОтправки(ЭД, ДатаИзменения)
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, ВладелецФайла, ТипЭлементаВерсииЭД");
	ТекСтатусЭД = РеквизитыЭД.СтатусЭД;
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.ВладелецФайла, "ПрофильНастроекЭДО.СпособОбменаЭД");
	
	Попытка
		
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленКОтправке) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
			Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД)
				
				И НЕ ЭтоИзвещениеОПолучении(РеквизитыЭД.ТипЭлементаВерсииЭД)
				И НЕ ЭтоУведомлениеОбУточнении(РеквизитыЭД.ТипЭлементаВерсииЭД) Тогда
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПереданОператору, ЭД);
				
			Иначе
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, ЭД);
				
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
			
			Если ЭтоОтветныйТитул(РеквизитыЭД.ТипЭлементаВерсииЭД) Тогда
				ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьВерсиюЭД(ЭД);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись даты отправки ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Функция СтруктураПараметровЭД()
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("ВидЭД",                Неопределено);
	ПараметрыЭД.Вставить("НаправлениеЭД",        Неопределено);
	ПараметрыЭД.Вставить("Контрагент",           Неопределено);
	ПараметрыЭД.Вставить("ДоговорКонтрагента",   Неопределено);
	ПараметрыЭД.Вставить("Организация",          Неопределено);
	ПараметрыЭД.Вставить("СоглашениеЭД",         Неопределено);
	ПараметрыЭД.Вставить("УстановленныеПодписи", Новый Массив);
	
	Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		ПараметрыЭД.Вставить("Партнер",          Неопределено);
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

// Создает документ ПакетЭД и заполняет его реквизиты.
//
// Параметры:
//  РеквизитыДокумента - Структура - значения реквизитов документа.
//  МассивЭД - Массив - содержит ссылки на справочник ЭДПрисоединенныеФайлы.
//
// Возвращаемое значение:
//  ДокументСсылка.ПакетЭД - ссылка на созданный документ.
//
Функция СоздатьПакетЭД(РеквизитыДокумента, МассивЭД, ТекстСообщения = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗашифрованы = Ложь;
	СертификатШифрования = Неопределено;
	ТребуетсяШифрованиеНаКлиенте = Ложь;
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	
	Если ИспользоватьЭП Тогда
		Если РеквизитыДокумента.Свойство("СертификатКонтрагентаДляШифрования") 
			И ЗначениеЗаполнено(РеквизитыДокумента.СертификатКонтрагентаДляШифрования)
			И РеквизитыДокумента.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			И РеквизитыДокумента.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			
			// Исторически сложилось, что шифруются только существенные данные - первичные ЭД (счета-фактуры
			// "ходят" только через операторов ЭДО, при обмене через операторов данные не шифруются).
			// Служебные ЭД не должны шифроваться (ответная подпись, извещения о получении, отклонение, аннулирование).
			Соответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "НаправлениеЭД, ТипЭлементаВерсииЭД");  
			ЗашифроватьДанные = Ложь;
			Для Каждого КлючЗначение Из Соответствие Цикл
				Если КлючЗначение.Значение.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
					И КлючЗначение.Значение.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
					
					ЗашифроватьДанные = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗашифроватьДанные Тогда
				СертификатШифрования = РеквизитыДокумента.СертификатКонтрагентаДляШифрования.Получить();
				Если ЗначениеЗаполнено(СертификатШифрования) Тогда
					ДанныеЗашифрованы = Истина;
					
					СертификатКриптографии = Новый СертификатКриптографии(СертификатШифрования);
					СертификатШифрования   = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
					
					Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
						ТребуетсяШифрованиеНаКлиенте = Истина;
						РеквизитыДокумента.Вставить("ТребуетсяШифрованиеНаКлиенте", Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПЭД = Документы.ПакетЭД.СоздатьДокумент();
	ПЭД.Дата = ТекущаяДатаСеанса();
	Если РеквизитыДокумента.Свойство("Отправитель") Тогда
		ПЭД.Отправитель = РеквизитыДокумента.Отправитель;
	КонецЕсли;
	Если РеквизитыДокумента.Свойство("Получатель") Тогда
		ПЭД.Получатель = РеквизитыДокумента.Получатель;
	КонецЕсли;
	ПЭД.Контрагент = РеквизитыДокумента.Контрагент;
	ПЭД.Организация = РеквизитыДокумента.Организация;
	
	ПЭД.СтатусПакета = Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке;
	ПЭД.Направление = Перечисления.НаправленияЭД.Исходящий;
	ПЭД.ДанныеЗашифрованы = ДанныеЗашифрованы;
	ПЭД.СертификатШифрования = СертификатШифрования;
	Если РеквизитыДокумента.Свойство("ВерсияФорматаПакета") Тогда
		ПЭД.ВерсияФорматаПакета = РеквизитыДокумента.ВерсияФорматаПакета;
	КонецЕсли;
	
	Если РеквизитыДокумента.Свойство("АдресОтправителя") Тогда
		ПЭД.АдресРесурсаОрганизации = РеквизитыДокумента.АдресОтправителя;
	КонецЕсли;
	Если РеквизитыДокумента.Свойство("АдресПолучателя") Тогда
		ПЭД.АдресРесурсаКонтрагента = РеквизитыДокумента.АдресПолучателя;
	КонецЕсли;

	Если РеквизитыДокумента.Свойство("СоглашениеЭД") Тогда
		ПЭД.НастройкаЭДО = РеквизитыДокумента.СоглашениеЭД;
	Иначе
		ПЭД.НастройкаЭДО = РеквизитыДокумента.НастройкаЭДО;
	КонецЕсли;
	
	ПЭД.СпособОбменаЭД = РеквизитыДокумента.СпособОбменаЭД;
	
	Если РеквизитыДокумента.Свойство("ПрофильНастроекЭДО") Тогда
		ПЭД.ПрофильНастроекЭДО = РеквизитыДокумента.ПрофильНастроекЭДО;
	КонецЕсли;
	
	ВладельцыЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЭД, "ВладелецФайла");
	
	Для Каждого ЭД Из МассивЭД Цикл
		НоваяСтрока = ПЭД.ЭлектронныеДокументы.Добавить();
		НоваяСтрока.ЭлектронныйДокумент = ЭД;
		НоваяСтрока.ОбъектВладелец = ВладельцыЭД.Получить(ЭД);
	КонецЦикла;
	
	Попытка
		ПЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'формирование пакета ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
								Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат ПЭД.Ссылка;
	
КонецФункции

Процедура ОбработатьУдалениеЭлектронногоДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(СсылкаНаОбъект) Тогда
		ЗапросДокументовИБ = Новый Запрос;
		ЗапросДокументовИБ.УстановитьПараметр("ЭлектронныйДокумент", СсылкаНаОбъект);
		ЗапросДокументовИБ.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент";
		
		ВыборкаДокументов = ЗапросДокументовИБ.Выполнить().Выбрать();
		Пока ВыборкаДокументов.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВыборкаДокументов.СсылкаНаОбъект);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			Иначе
				НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			КонецЕсли;
			НоваяЗаписьНабора.СостояниеВерсииЭД   = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(ВыборкаДокументов.СсылкаНаОбъект);
			НоваяЗаписьНабора.ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеИУдалитьСостояниеДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаОбъект;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДереваЗначений

Функция ЭлектронныеДокументыИзДереваЗначений(ДеревоЗначений)
	
	ТаблицаЭД = Новый ТаблицаЗначений;
	ТаблицаЭД.Колонки.Добавить("Ссылка");
	ТаблицаЭД.Колонки.Добавить("ИмяРеквизита");
	ТаблицаЭД.Колонки.Добавить("ТипЭД");
	ТаблицаЭД.Колонки.Добавить("ВидЭД");
	ТаблицаЭД.Колонки.Добавить("ДанныеЭД");
		
	ЗаполнитьТаблицуРекурсивно(ДеревоЗначений.Строки,ТаблицаЭД);
	
	Возврат ТаблицаЭД;
	
КонецФункции

Процедура ЗаполнитьДанныеУчастникаСделки(ДанныеВыбранногоКонтрагента, ДеревоЭД, ВидУчастника)
		
	Если ДанныеВыбранногоКонтрагента.ЭтоФизЛицо Тогда
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ИНН") Тогда
			ИНН = ДанныеВыбранногоКонтрагента.ИНН;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
				ИНН);
		КонецЕсли;
			
		Если ДанныеВыбранногоКонтрагента.Свойство("Фамилия") Тогда
			Фамилия = ДанныеВыбранногоКонтрагента.Фамилия;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
				Фамилия);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("Имя") Тогда
			Имя = ДанныеВыбранногоКонтрагента.Имя;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ФЛ.Имя",
				Имя);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("Отчество") Тогда
			Отчество = ДанныеВыбранногоКонтрагента.Отчество;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
				Отчество);
		КонецЕсли;
	
		ОчиститьСтрокиДереваЭД(ДеревоЭД, ВидУчастника + ".ТипУчастника.ЮЛ");
		
	Иначе
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ПолноеНаименование") Тогда
			Наименование = ДанныеВыбранногоКонтрагента.ПолноеНаименование;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
				Наименование);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ИНН") Тогда
			ИНН = ДанныеВыбранногоКонтрагента.ИНН;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
				ИНН);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("КПП") Тогда
			КПП = ДанныеВыбранногоКонтрагента.КПП;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
				КПП);
		КонецЕсли;
		
		ОчиститьСтрокиДереваЭД(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ")
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСтрокиДереваЭД(ДеревоЭД, ПутьКДанным)
	
	СтрокаДерева = ДеревоЭД.Строки.Найти(ПутьКДанным, "ПолныйПуть", Истина);
	Если Не СтрокаДерева = Неопределено Тогда
		СтрокаДерева.Строки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитДерева(Дерево, Реквизит, Значение, КорневойЭлементДерева = "")
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение, КорневойЭлементДерева = "");
	
КонецПроцедуры

#КонецОбласти

#Область НоваяАрхитектураЭДО

// Функция возвращает присоединенный файл с данными электронного документа
//
// Параметры:
//  ВладелецФайла		 - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - документ, для которого требуется найти
//  присоединенный файл
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип присоединенного файла, если не указан - то найдется основной присоединенный файл
//  СообщатьОбОшибке	 - Булево - признак необходимости сообщить пользователю, если файл не будет найден.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы, Неопределено - ссылка на присоединенный файл либо неопределено, если файл не найден.
//
Функция ПрисоединенныйФайл(ВладелецФайла, ТипЭлементаВерсииЭД = Неопределено,СообщатьОбОшибке = Ложь) Экспорт
	
	Перем ПрисоединенныйФайл;
	
	Если ТипЭлементаВерсииЭД = Неопределено Тогда
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ТипЭлементаВерсииЭД");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД";
	Запрос.УстановитьПараметр("ВладелецФайла",ВладелецФайла);
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД",ТипЭлементаВерсииЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПрисоединенныйФайл = Выборка.Ссылка;
	ИначеЕсли СообщатьОбОшибке Тогда
		Операция = НСтр("ru = 'Получение присоединенного файла'");
		ТекстОшибки = НСтр("ru = 'Не обнаружен присоединенный файл документа %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ВладелецФайла);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
		Операция, ТекстОшибки, ТекстОшибки, 1, ВладелецФайла);
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

// Функция создает электронный документ.
//
// Параметры:
//  СтруктураЭД - Структура - содержит значения реквизитов нового документа, для создания входящего документа структура 
//                            должна содержать элемент "Входящий" со значением Истина иначе будет создан исходящий документ.
//  УникальныйИдентификаторЭД - УникальныйИдентификатор - уникальный идентификатор для создания ссылки на объект.
// 
// Возвращаемое значение:
//  ДокументСсылка - ссылка на новый входящий или исходящий электронный документ.
//
Функция СоздатьЭлектронныйДокумент(СтруктураЭД = Неопределено) Экспорт 
	
	Если СтруктураЭД.Свойство("Входящий") И СтруктураЭД.Входящий Тогда
		НовыйЭлектронныйДокумент = Документы.ЭлектронныйДокументВходящий.СоздатьДокумент();
	Иначе
		НовыйЭлектронныйДокумент = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДокументыОснования") Тогда
		Для каждого Строка Из СтруктураЭД.ДокументыОснования Цикл
			НоваяСтрока = НовыйЭлектронныйДокумент.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Строка;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйЭлектронныйДокумент,СтруктураЭД);
	
	Если СтруктураЭД.Свойство("СоглашениеЭД") Тогда
		НовыйЭлектронныйДокумент.НастройкаЭДО = СтруктураЭД.СоглашениеЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УникальныйИдентификатор") Тогда
		НовыйЭлектронныйДокумент.УникальныйИД = СтруктураЭД.УникальныйИдентификатор;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаЭД") Тогда
		НовыйЭлектронныйДокумент.Дата = СтруктураЭД.ДатаЭД;
	Иначе
		НовыйЭлектронныйДокумент.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТребуетсяПодтверждение") Тогда
		НовыйЭлектронныйДокумент.ТребуетсяПодтверждение = СтруктураЭД.ТребуетсяПодтверждение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТребуетсяИзвещение") Тогда
		НовыйЭлектронныйДокумент.ТребуетсяИзвещение = СтруктураЭД.ТребуетсяИзвещение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ИдентификаторыДокументовИЭДОснований") Тогда
		Для Каждого СтрокаТаблицы Из СтруктураЭД.ИдентификаторыДокументовИЭДОснований Цикл
			НоваяСтрока = НовыйЭлектронныйДокумент.ИдентификаторыОснованийВладельцаФайла.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	НовыйЭлектронныйДокумент.Записать();
	НовыйЭлектронныйДокументСсылка = НовыйЭлектронныйДокумент.Ссылка; 
	
	Возврат НовыйЭлектронныйДокументСсылка;
	
КонецФункции

// Сохраняет текст причины отклонения в входящем или исходящем электронном документе.
//
// Параметры:
//  СсылкаНаЭД			 - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на отклоняемый документ
//  ПричинаОтклонения	 - Строка - строка, содержащая причину отклонения документа.
//
Процедура ЗаписатьПричинуОтклонения(СсылкаНаЭД,ПричинаОтклонения) Экспорт 
	
	ОбъектЭДО = СсылкаНаЭД.ПолучитьОбъект();
	ОбъектЭДО.ПричинаОтклонения = ПричинаОтклонения;
	ОбъектЭДО.Записать();
	
КонецПроцедуры

// Проверяет является ли переданный тип ЭД типом извещения о получении
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоИзвещениеОПолучении(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД;
	
КонецФункции

// Проверяет является ли переданный тип ЭД типом уведомления об уточнении.
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоУведомлениеОбУточнении(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
			
КонецФункции

// Проверяет является ли переданный тип ЭД типом подтверждения получения.
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоПодтверждение(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД;
			
КонецФункции

// Проверяет возможность удаления электронного документа по его состоянию
//
// Параметры:
//  СостояниеЭДО - ПеречислениеСсылка.СостоянияВерсийЭД - состояние электронного документа.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ВозможноУдалениеЭД(СостояниеЭДО) Экспорт 

	Возврат СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаУтверждении
			ИЛИ СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи;
КонецФункции

// Ищет среди присоединенных файлов электронного документа отправленное уведомление об уточнении.
//
// Параметры:
//  СсылкаНаФайлЭД	 - СправочникСсылка.ЭДПрисоединенныеФайлы - основной присоединенный файл среди связанных с которым будет происходить поиск уведомления.
// 
// Возвращаемое значение:
//  Булево - Возвращает ИСТИНА, если удалось найти уведомление об уточнении.
//
Функция ЕстьОтправленноеУведомление(СсылкаНаФайлЭД) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""1"" КАК Поле1
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	(ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УОУ)
	|			ИЛИ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УУЭСФ))
	|			И ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	|			И ЭДПрисоединенныеФайлы.СтатусЭД = &СтатусЭД";
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", СсылкаНаФайлЭД);
	Запрос.УстановитьПараметр("СтатусЭД", Перечисления.СтатусыЭД.Отправлен);
	
	Результат = Запрос.Выполнить();
	ЕстьУведомление = Истина;
	Если Результат.Пустой() Тогда
		ЕстьУведомление = Ложь;
	КонецЕсли;
	
	Возврат ЕстьУведомление;
	
КонецФункции

// Проверяет наличие подписи для второго титула электронного документа
//
// Параметры:
//  СсылкаНаФайлЭД	 - СправочникСсылка.ЭДПрисоединенныеФайлы - первый титул документа.
// 
// Возвращаемое значение:
//  Булево - Истина, если для второго титула установлена подпись.
//
Функция ВторойТитулПодписан(СсылкаНаФайлЭД) Экспорт 
	
	Результат = Ложь;
	ФайлВторогоТитула = ВторойТитулДокумента(СсылкаНаФайлЭД);
	Если ФайлВторогоТитула = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлВторогоТитула, "СтатусЭД");
	Если Статус = Перечисления.СтатусыЭД.ПодготовленКОтправке
		Или Статус = Перечисления.СтатусыЭД.Отправлен
		Или Статус = Перечисления.СтатусыЭД.ПереданОператору
		Или Статус = Перечисления.СтатусыЭД.Доставлен Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истина, если объект имеет один из статусов (ПереданОператору, Отправлен, ПолученоПодтверждение,
// ОтправленоПодтверждение, ДоставленоПодтверждение).
//
// Параметры:
//  Объект - ДокументСсылка.ПроизвольныйЭД - ссылка на документ.
//
// ВозвращаемоеЗначение:
//  Булево - документ в одном из перечисленных статусов.
//
Функция СтатусОбъектаПередан(Объект) Экспорт
	
	Результат = (Объект.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
		ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
		ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение
		ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение
		ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.ДоставленоПодтверждение
		ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
		ИЛИ (Объект.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
			И Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Получить()));
		
	Возврат Результат;
	
КонецФункции

// Получает из табличной части "Входящие электронные документы" настройки ЭДО способ обработки 
// электронного документа переданного вида.
//
// Параметры:
//  НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на настройку для которой определяется способ
//  ВидЭД		 - ПеречислениеСсылка.ВидыЭД - вид ЭД для поиска.
// 
// Возвращаемое значение:
//  Строка - способ обработки из табличной части настройки ЭДО.
//
Функция СпособОбработкиВходящегоДокумента(НастройкаЭДО,ВидЭД) Экспорт 
	
	СпособОбработки = "Автоматически";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДВходящиеДокументы.СпособОбработки
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
	|	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка = &НастройкаЭДО";
	Запрос.УстановитьПараметр("НастройкаЭДО",НастройкаЭДО);
	Запрос.УстановитьПараметр("ВидЭД",ВидЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СпособОбработки = Выборка.СпособОбработки;
	КонецЕсли;
	
	Возврат СпособОбработки;
	
КонецФункции

// Процедура - Удаляет запись регистра СостоянияЭД для пары документ учета и электронный документ.
//
// Параметры:
//  СсылкаНаОбъект		 - ДокументСсылка, СправочникСсылка.СоглашенияОбИспользованииЭД - объект-владелец записи в регистре
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на электронный документ.
//
Процедура УдалитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект,ЭлектронныйДокумент) Экспорт 
		
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект,Истина);
	НаборЗаписей.Прочитать();
	
	МассивКУдалению = Новый Массив;
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.ЭлектронныйДокумент = ЭлектронныйДокумент Тогда
			МассивКУдалению.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Запись Из МассивКУдалению Цикл
		НаборЗаписей.Удалить(Запись);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Формирует список способов отражения в учете входящего электронного документа определенного вида.
//
// Параметры:
//  ВидЭД							 - ПеречислениеСсылка.ВидыЭД - 
//  ДобавлятьПредопределенныеСпособы	 - Булево - признак добавления способов "Вручную" и "Автоматически"
// (последний - если в переопределяемом модуле не указаны способы отражения для вида ЭД)
//  Префикс							 - Строка - текст, который будет добавлен к представлению способа обработки.
// 
// Возвращаемое значение:
//  СписокЗначений - список способов обработки с указанием представления и отметки в списке используемого по-умолчанию способа.
//
Функция СписокОперацийВидаЭД(ВидЭД, ДобавлятьПредопределенныеСпособы = Ложь, Префикс = "") Экспорт 
	
	СписокОпераций = Новый СписокЗначений;
	
	ИспользуетсяНесколькоОрганизацийЭД = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД");

	СоставФОИспользуетсяНесколькоОрганизацийЭД = Метаданные.ФункциональныеОпции.ИспользоватьНесколькоОрганизацийЭД.Состав;
	
	Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		
		Основания = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументов.Тип.Типы();
		Для Каждого ТекущееОснование Из Основания Цикл
			
			Если Не ИспользуетсяНесколькоОрганизацийЭД
				И СоставФОИспользуетсяНесколькоОрганизацийЭД.Найти(Метаданные.НайтиПоТипу(ТекущееОснование)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СписокОпераций.Добавить(Метаданные.НайтиПоТипу(ТекущееОснование).Имя,
				Метаданные.НайтиПоТипу(ТекущееОснование).Синоним);
		КонецЦикла;
	Иначе
		ОбменСКонтрагентамиПереопределяемый.СписокОперацийВидаЭД(ВидЭД, СписокОпераций);
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		ЭлементСписка.Представление = Префикс + " " + ЭлементСписка.Представление;
	КонецЦикла;
	
	Если ДобавлятьПредопределенныеСпособы Тогда
		Если СписокОпераций.Количество() = 0 Тогда
			СписокОпераций.Добавить("Автоматически", НСтр("ru = 'Автоматически'"),Истина);
		КонецЕсли;
		
		СписокОпераций.Добавить("Вручную", НСтр("ru = 'Вручную в форме электронного документа'"));
	КонецЕсли;
	
	Возврат СписокОпераций;
	
КонецФункции

// Требуется для получения имени документа для открытия форм по способу обработки входящего документа.
//
// Параметры:
//  СпособОбработки	 - Строка - один из способов обработки входящего электронного документа.
// 
// Возвращаемое значение:
//  Строка - имя объекта метаданных (документа), соответствующего способу обработки.
//
Функция ИмяДокументаПоСпособуОбработки(СпособОбработки) Экспорт 
		
	ИмяДокумента = СпособОбработки; 
	
	ОбменСКонтрагентамиПереопределяемый.ИмяДокументаПоСпособуОбработки(СпособОбработки,ИмяДокумента);
		
	Возврат ИмяДокумента;
	
КонецФункции

// Формирует таблицу способов отражения входящих документов по имени профиля.
//
// Параметры:
//  Профиль	 - Строка - имя профиля настроек: "Автоматически", "Вручную", "Поставщик", "Покупатель".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица, содержащая колонки "ВходящийДокумент" и "СпособОбработки".
//
Функция ТаблицаПредопределенногоПрофиля(Профиль) Экспорт 
	
	ТаблицаПрофиля = Новый ТаблицаЗначений;
	ТаблицаПрофиля.Колонки.Добавить("ВходящийДокумент");
	ТаблицаПрофиля.Колонки.Добавить("СпособОбработки");
	
	АктуальныеВидыЭД = Новый Массив; 
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАктуальныеВидыЭД(АктуальныеВидыЭД);
	
	Для Каждого ВидЭД Из АктуальныеВидыЭД Цикл
		Если ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
			И ВидЭД <> Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
			И ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
			И ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
						
			СписокОпераций = СписокОперацийВидаЭД(ВидЭД,Истина);
			
			Для Каждого ЭлементСписка Из СписокОпераций Цикл
				Если ЭлементСписка.Пометка Тогда
					СпособОбработки = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВРег(Профиль) = ВРег("Вручную") Тогда
				СпособОбработки = "Вручную";
			ИначеЕсли ВРег(Профиль) = ВРег("Поставщик") Тогда
				Если ВидЭД = Перечисления.ВидыЭД.ЗаказТовара 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
					
					СпособОбработки = "Вручную";
				КонецЕсли;
			ИначеЕсли ВРег(Профиль) = ВРег("Покупатель") Тогда
				Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СчетФактура 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СчетНаОплату 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
					ИЛИ ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
					ИЛИ ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
					
					СпособОбработки = "Вручную";
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПрофиля.Добавить();
			НоваяСтрока.ВходящийДокумент = ВидЭД;
			НоваяСтрока.СпособОбработки	= СпособОбработки;
			
		КонецЕсли;            
	КонецЦикла;
	
	ТаблицаПрофиля.Сортировать("ВходящийДокумент");
	
	ОбменСКонтрагентамиПереопределяемый.ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля,Профиль);
	
	Возврат ТаблицаПрофиля;
	
КонецФункции

Процедура СформироватьДеревьяЭД(ДеревоОбъект,СоответствиеВладельцевИЭД, НастройкиОбмена, ВыводитьНеактуальные = Ложь) Экспорт 
	
	Если СоответствиеВладельцевИЭД.Количество() > 0 Тогда
		
		ОбъектСсылка = Неопределено;
		
		Для Каждого Элемент Из СоответствиеВладельцевИЭД Цикл
			ОбъектСсылка = Элемент.Ключ;
			АктуальныйЭД = "";
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
					НастройкиОбмена = ОпределитьНастройкиОбменаЭДПоИсточнику(
						Элемент.Значение, Ложь, , , , Ложь);
				КонецЕсли;
				АктуальныйЭД = Элемент.Значение;
				КорневойЭлемент = Неопределено;
				ПредварительноеЗаполнениеДерева(АктуальныйЭД, ДеревоОбъект, Истина, НастройкиОбмена, КорневойЭлемент);
				Если Не КорневойЭлемент = Неопределено Тогда
					ВывестиПодчиненныеДокументы(АктуальныйЭД, КорневойЭлемент, АктуальныйЭД);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(НастройкиОбмена) Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидЭД",               НастройкиОбмена.ВидЭД);
				СтруктураПараметров.Вставить("НаправлениеЭД",       НастройкиОбмена.НаправлениеЭД);
				СтруктураПараметров.Вставить("ВерсияРегламентаЭДО", НастройкиОбмена.ВерсияРегламентаЭДО);
				СтруктураПараметров.Вставить("СтатусЭД",            Перечисления.СтатусыЭД.ПустаяСсылка());
				СтруктураПараметров.Вставить("ПрофильНастроекЭДО",  НастройкиОбмена.ПрофильНастроекЭДО);
				СтруктураПараметров.Вставить("СоглашениеЭД",        НастройкиОбмена.СоглашениеЭД);
				СтруктураПараметров.Вставить("СостояниеЭДО",        Перечисления.СостоянияВерсийЭД.НеСформирован);
				
				СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
					
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
				КонецЕсли;
				
				Если НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УПД:Первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УКД:Первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
				КонецЕсли;
				
				ПредварительноеЗаполнениеДерева(СтруктураПараметров, ДеревоОбъект, Ложь, НастройкиОбмена);
				
			Иначе
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыводитьНеактуальные Тогда
			ВывестиНеАктуальныеЭД(ДеревоОбъект, АктуальныйЭД, ОбъектСсылка, НастройкиОбмена);
		КонецЕсли;
		
		ОбработатьДерево(ДеревоОбъект);
		
		ЗаполнитьДанныеВПустыхСтроках(ДеревоОбъект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПредварительноеЗаполнениеДерева(ЭД, ДеревоОбъект, ЭтоАктуальныйЭД, НастройкиОбмена,
	КорневойЭлемент = Неопределено)
	
	Если ЗначениеЗаполнено(НастройкиОбмена) И НастройкиОбмена.Свойство("СоглашениеЭД") Тогда
		ОбменЧерезОператора = Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(НастройкиОбмена.СпособОбменаЭД);
		ВерсияФорматаПакета = НастройкиОбмена.ВерсияФорматаПакета;
		
		СписокРеквизитов = "";
		Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
			Или ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			СписокРеквизитов = "ВерсияРегламентаЭДО, ВидЭД, СостояниеЭДО, ТребуетсяИзвещение, ТребуетсяПодтверждение";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СписокРеквизитов) Тогда
			СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, СписокРеквизитов);
		Иначе
			
			СвойстваЭД = ЭД;
			СвойстваЭД.Вставить("ТребуетсяИзвещение", НастройкиОбмена.ТребуетсяИзвещение);
			СвойстваЭД.Вставить("ТребуетсяПодтверждение", НастройкиОбмена.ТребуетсяПодтверждение);
		КонецЕсли;
		
		КорневойЭлемент = Неопределено;
		
		Если ОбменЧерезОператора
			И (ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД) Тогда
		
			СтрокаЭСФ                = ДеревоОбъект.Строки.Добавить();
			СтрокаЭСФ.ТипЭД          = ЭД.ТипЭлементаВерсииЭД;
			СтрокаЭСФ.ВидЭД          = ЭД.ВидЭД;
			СтрокаЭСФ.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаЭСФ.СтрокаДоступна = Истина;
			СтрокаЭСФ.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаЭСФ;
			
			ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД;
			Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД;
			КонецЕсли;
			
			Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				СтрокаПДО                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
				СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				НоваяСтрока               = СтрокаПДО.Строки.Добавить();
				НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
				НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
				НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					СтрокаИП                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					СтрокаПДОИП               = СтрокаИП.Строки.Добавить();
					СтрокаПДОИП.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
					СтрокаПДОИП.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДОИП.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаПДОИП.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
						
				КонецЕсли;
				
				Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
						
						Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
							ИПСтрока                  = СтрокаЭСФ.Строки.Добавить();
							ИПСтрока.ТипЭД            = ТипВстречногоЭД;
							ИПСтрока.ВидЭД            = ЭД.ВидЭД;
							ИПСтрока.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
							
							ПДОИПСтрока               = ИПСтрока.Строки.Добавить();
							ПДОИПСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД;
							ПДОИПСтрока.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
							ПДОИПСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
							
							ИППДОИПСтрока               = ПДОИПСтрока.Строки.Добавить();
							ИППДОИПСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД;
							ИППДОИПСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
							ИППДОИПСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
						
						КонецЕсли;
						
				КонецЕсли;
					
				Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен
					ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяКорректировка Тогда
					
					СтрокаУУ                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					НоваяСтрока               = СтрокаУУ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаПДП                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДП.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
				СтрокаПДП.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДП.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				НоваяСтрока               = СтрокаПДП.Строки.Добавить();
				НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
				НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
				НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					НоваяСтрока               = СтрокаЭСФ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
				КонецЕсли;
				
				Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						ИПСтрока                  = СтрокаЭСФ.Строки.Добавить();
						ИПСтрока.ТипЭД            = ТипВстречногоЭД;
						ИПСтрока.ВидЭД            = ЭД.ВидЭД;
						ИПСтрока.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент
					ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен Тогда
					
					СтрокаУУ                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаУУ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ОбменЧерезОператора
			И (ЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура) Тогда
		
			СтрокаЭСФ                = ДеревоОбъект.Строки.Добавить();
			СтрокаЭСФ.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
			СтрокаЭСФ.ВидЭД          = ЭД.ВидЭД;
			СтрокаЭСФ.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаЭСФ.СтрокаДоступна = Истина;
			СтрокаЭСФ.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаЭСФ;
			
			Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				СтрокаПДО                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
				СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					СтрокаИП                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					НоваяСтрока               = СтрокаПДО.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
					СтрокаПДОИП               = СтрокаИП.Строки.Добавить();
					СтрокаПДОИП.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
					СтрокаПДОИП.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДОИП.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаПДОИП.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
				КонецЕсли;
				
				Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен
					ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяКорректировка Тогда
					
					СтрокаУУ                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					НоваяСтрока               = СтрокаУУ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаПДП                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДП.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
				СтрокаПДП.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДП.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				НоваяСтрока               = СтрокаПДП.Строки.Добавить();
				НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
				НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
				НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					НоваяСтрока               = СтрокаЭСФ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
				КонецЕсли;

				Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент
					ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен Тогда
					
					СтрокаУУ                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаУУ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель;
			
			Если ЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
				
				ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик;
			ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				
				ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
			КонецЕсли;
			
			СтрокаПродавец                = ДеревоОбъект.Строки.Добавить();
			СтрокаПродавец.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			СтрокаПродавец.ВидЭД          = ЭД.ВидЭД;
			СтрокаПродавец.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаПродавец.СтрокаДоступна = Истина;
			СтрокаПродавец.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаПродавец;
			
			Если ОбменЧерезОператора
				Или ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
						СтрокаПокупатель.ТипЭД    = ТипВстречногоЭД;
						СтрокаПокупатель.ВидЭД    = ЭД.ВидЭД;
						СтрокаПокупатель.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
						
						// Изменяется набор служебных документов в зависимости от использования версии регламента.
						Если ЭД.ВерсияРегламентаЭДО <> Перечисления.ВерсииРегламентаОбмена1С.Версия20
							И ОбменЧерезОператора Тогда
							
							НоваяСтрока               = СтрокаПокупатель.Строки.Добавить();
							НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
							НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
							НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
							
							СтрокаИП                  = СтрокаПокупатель.Строки.Добавить();
							СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
							СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
							СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
						КонецЕсли;
					КонецЕсли;

					Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен
						ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяКорректировка Тогда
						
						СтрокаУУ                  = СтрокаПродавец.Строки.Добавить();
						СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
						СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
						СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					КонецЕсли;
				Иначе
					
					Если ОбменЧерезОператора Тогда
						СтрокаПДО                 = СтрокаПродавец.Строки.Добавить();
						СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
						СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
						СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
						СтрокаПокупатель.ТипЭД    = ТипВстречногоЭД;
						СтрокаПокупатель.ВидЭД    = ЭД.ВидЭД;
						СтрокаПокупатель.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
						
						// Изменяется набор служебных документов в зависимости от использования версии регламента.
						Если ЗначениеЗаполнено(ЭД.ВерсияРегламентаЭДО) 
							И ЭД.ВерсияРегламентаЭДО <> Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
							СтрокаИП                  = СтрокаПокупатель.Строки.Добавить();
							СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
							СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
							СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
						КонецЕсли;
					КонецЕсли;

					Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент
						ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен Тогда
						
						СтрокаУУ                  = СтрокаПродавец.Строки.Добавить();
						СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
						СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
						СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
				СтрокаПокупатель.ТипЭД    = ТипВстречногоЭД;
				СтрокаПокупатель.ВидЭД    = ЭД.ВидЭД;
				СтрокаПокупатель.НаправлениеЭД = ?(НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий,
					Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
			КонецЕсли;
		ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		
			СтрокаПродавец                = ДеревоОбъект.Строки.Добавить();
			СтрокаПродавец.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			СтрокаПродавец.ВидЭД          = ЭД.ВидЭД;
			СтрокаПродавец.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаПродавец.СтрокаДоступна = Истина;
			СтрокаПродавец.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаПродавец;
			
			Если ОбменЧерезОператора Тогда
				Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен
						ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяКорректировка Тогда
						
						СтрокаУУ                  = СтрокаПродавец.Строки.Добавить();
						СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
						СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
						СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					КонецЕсли;
					
				Иначе
					СтрокаПДО                 = СтрокаПродавец.Строки.Добавить();
					СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
					СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент
						ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен Тогда
						
						СтрокаУУ                  = СтрокаПродавец.Строки.Добавить();
						СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
						СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
						СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			СтрокаГлавная                = ДеревоОбъект.Строки.Добавить();
			СтрокаГлавная.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			СтрокаГлавная.ВидЭД          = ЭД.ВидЭД;
			СтрокаГлавная.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаГлавная.СтрокаДоступна = Истина;
			СтрокаГлавная.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаГлавная;
			
			Если ЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
				
				Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
					// Извещение о получении
					СтрокаДерева                  = СтрокаГлавная.Строки.Добавить();
					СтрокаДерева.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаДерева.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаДерева.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
				КонецЕсли;
					
			ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
				
				Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
					
					Если ОбменЧерезОператора Тогда
						// Подтверждение доставки
						СтрокаДерева                 = СтрокаГлавная.Строки.Добавить();
						СтрокаДерева.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
						СтрокаДерева.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
						СтрокаДерева.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
					// Извещение о получении
					СтрокаДерева                  = СтрокаГлавная.Строки.Добавить();
					СтрокаДерева.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаДерева.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаДерева.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
					
		Если КорневойЭлемент <> Неопределено И (ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование
			ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать
			ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Аннулирован) Тогда
			
			СтрокаПОА                  = КорневойЭлемент.Строки.Добавить();
			СтрокаПОА.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
			СтрокаПОА.ВидЭД            = Перечисления.ВидыЭД.ПредложениеОбАннулировании;
			СтрокаПОА.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодчиненныеДокументы(ТекущийДокумент, ДеревоРодитель, АктуальныйЭД = Неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПрисоединенныеФайлы.Ссылка,
	|	ПрисоединенныеФайлы.Ссылка.СтатусЭД КАК СтатусЭД,
	|	ПрисоединенныеФайлы.Ссылка.ДатаИзмененияСтатусаЭД КАК ДатаИзмененияСтатусаЭД,
	|	ПрисоединенныеФайлы.Ссылка.ЭлектронныйДокументВладелец КАК ЭлектронныйДокументВладелец,
	|	ПрисоединенныеФайлы.Ссылка.НаправлениеЭД КАК НаправлениеЭД,
	|	ПрисоединенныеФайлы.Ссылка.ВладелецФайла КАК ВладелецФайла,
	|	ПрисоединенныеФайлы.Ссылка.Представление КАК Представление,
	|	ПрисоединенныеФайлы.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ПодчиненныеПрисоединенныеФайлы.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НаличиеПодчиненныхДокументов,
	|	ПрисоединенныеФайлы.Ссылка.ТипЭлементаВерсииЭД КАК ТипЭД,
	|	ВЫБОР
	|		КОГДА ПрисоединенныеФайлы.Ссылка.ТипЭлементаВерсииЭД В (&СписокТиповЭД)
	|			ТОГДА ВЫБОР
	|					КОГДА ПрисоединенныеФайлы.Ссылка.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	|						ТОГДА ПрисоединенныеФайлы.Ссылка.ДатаСоздания
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПрисоединенныеФайлы.Ссылка.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА ПрисоединенныеФайлы.Ссылка.ДатаСоздания
	|							ИНАЧЕ ПрисоединенныеФайлы.Ссылка.ДатаФормированияЭДОтправителем
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Версия
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|	ГДЕ
	|		ПрисоединенныеФайлы.ВладелецФайла = &ОбъектВладелец
	|		И НЕ ПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|	ГДЕ
	|		ПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ОбъектВладелец
	|		И НЕ ПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения)) КАК ПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеПрисоединенныеФайлы
	|		ПО (НЕ ПодчиненныеПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения))
	|			И ПрисоединенныеФайлы.Ссылка = ПодчиненныеПрисоединенныеФайлы.ЭлектронныйДокументВладелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИзмененияСтатусаЭД";
		
	Запрос.УстановитьПараметр("СписокТиповЭД", МассивТиповЭДКорневыхЭлементовДерева());
	Запрос.УстановитьПараметр("ТиповЭДИсключения", МассивТиповЭДНеОтображаемыхВДереве());
	Запрос.УстановитьПараметр("ОбъектВладелец", ТекущийДокумент);
	Выборка = Запрос.Выполнить().Выбрать();

	ДатаАктуальногоЭД = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		ТипЭД = ?(Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО,
			Перечисления.ТипыЭлементовВерсииЭД.ПДП,
			Выборка.ТипЭД);
			
		Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
			ПараметрыПоиска = Новый Структура("ТипЭД", ТипЭД);
		Иначе 
			ПараметрыПоиска = Новый Структура("ТипЭД, НаправлениеЭД", ТипЭД, Выборка.НаправлениеЭД);
		КонецЕсли;
		
		Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(Выборка.Ссылка) Тогда
			ЗаполнитьСтрокуДерева(ДеревоРодитель, Выборка, ДатаАктуальногоЭД);
			Продолжить;
		КонецЕсли;
		
		МассивСтрокДерева = ДеревоРодитель.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
		
		Если МассивСтрокДерева.Количество() = 0 Тогда
			// Добавляются уведомления об уточнении подчиненных ЭД
			// (ТОРГ-12 титул покупателя, Акт титул заказчика).
			Если ЗначениеЗаполнено(Выборка.ЭлектронныйДокументВладелец) Тогда
				ПараметрыПоиска = Новый Структура("Ссылка",Выборка.ЭлектронныйДокументВладелец);
				МассивСтрокДереваВладельца = ДеревоРодитель.Строки.НайтиСтроки(ПараметрыПоиска, Ложь);
				Если МассивСтрокДереваВладельца.Количество() > 0 Тогда
					СтрокаДерева = МассивСтрокДереваВладельца[0].Строки.Добавить();
				Иначе
					СтрокаДерева = ДеревоРодитель.Строки.Добавить();
				КонецЕсли;
			Иначе
				СтрокаДерева = ДеревоРодитель.Строки.Добавить();
			КонецЕсли;
			ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка, ДатаАктуальногоЭД);
		КонецЕсли;
		
		Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
			ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка, ДатаАктуальногоЭД);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Процедура добавляет в дерево неактуальные первичные ЭД
// с полной структурой подчиненности.
Процедура ВывестиНеАктуальныеЭД(ДеревоОбъект, АктуальныйЭД, ОбъектСсылка, НастройкиОбмена)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК СсылкаНаОбъект,
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК Ссылка
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование = &ОбъектСсылка
	|	И НЕ ЭлектронныйДокументИсходящийДокументыОснования.Ссылка = &АктуальныйЭД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка,
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование = &ОбъектСсылка
	|	И НЕ ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &АктуальныйЭД";

	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("АктуальныйЭД", АктуальныйЭД);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		КорневойЭлемент = Неопределено;
		ПредварительноеЗаполнениеДерева(Выборка.СсылкаНаОбъект, ДеревоОбъект, Ложь, НастройкиОбмена, КорневойЭлемент);
		Если ЗначениеЗаполнено(КорневойЭлемент) Тогда
			ВывестиПодчиненныеДокументы(Выборка.СсылкаНаОбъект, КорневойЭлемент, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	ДеревоОбъект.Строки.Сортировать("Версия");
	
КонецПроцедуры

Процедура ОбработатьДерево(ДеревоОбъект)
	
	Отбор = Новый Структура("АктуальныйЭД", Истина);
	
	АктуальныеСтроки = ДеревоОбъект.Строки.НайтиСтроки(Отбор, Истина);
	
	ЭдНеСформирован = (АктуальныеСтроки.Количество()=0);
	
	Для Каждого Строка Из ДеревоОбъект.Строки Цикл
		
		Если Строка.АктуальныйЭД Или ЭдНеСформирован Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
				
				Если (НЕ ЗначениеЗаполнено(Строка.Родитель) ИЛИ ЗначениеЗаполнено(Строка.Родитель.Ссылка))
					И Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
					И НЕ ЭтоОтветныйТитул(Строка.ТипЭД) Тогда
					
					Если Не Строка.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда 
						Строка.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.Сформировать;
					КонецЕсли;
					Если ЗначениеЗаполнено(Строка.Родитель) Тогда
						Если ЗначениеЗаполнено(Строка.Родитель.Ссылка) Тогда
							
							Если ОбменСКонтрагентамиСлужебныйВызовСервера.ДОЗакрытПринудительно(Строка.Родитель.Ссылка.ВладелецФайла) Тогда
								Строка.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Ссылка, "ПометкаУдаления") Тогда
					Строка.ОжидаемоеДействие = ОжидаемоеДействиеПоТекущемуСтатусу(Строка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Строка.ОжидаемоеДействиеКонтрагента = ПолучитьОжидаемоеДействиеКонтрагента(Строка,Строка.Ссылка.ВладелецФайла);
		Иначе
			Строка.ОжидаемоеДействиеКонтрагента = ПолучитьОжидаемоеДействиеКонтрагента(Строка,Неопределено);
		КонецЕсли;
		Строка.СтрокаДоступна = ?(ЗначениеЗаполнено(Строка.ОжидаемоеДействие), Истина, Ложь);
		Строка.Представление = СтрЗаменить(Строка.Представление, "_", " ");
		
		Если Строка.Строки.Количество() > 0 Тогда
			ОбработатьДерево(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВПустыхСтроках(ДеревоОбъект)
	
	СтруктураПараметров = Новый Структура;
	Для Каждого Строка Из ДеревоОбъект.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			СтруктураПараметров.Вставить("ТипЭД", Строка.ТипЭД);
			Строка.Представление = ОпределитьПредставлениеЭД(Строка.ВидЭД, СтруктураПараметров);
			Строка.СтатусЭД = Перечисления.СтатусыЭД[?(Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий, "НеСформирован", "НеПолучен")];
		КонецЕсли;
		Если Строка.Строки.Количество() > 0 Тогда
			ЗаполнитьДанныеВПустыхСтроках(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка,ДатаАктуальногоЭД)
	
	ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка,
		"Ссылка, СтатусЭД, ДатаИзмененияСтатусаЭД, НаправлениеЭД, Представление, ПометкаУдаления, Версия, ТипЭД");
	
	СтруктураПараметров = Новый Структура;
	Если Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
		
		СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ВладелецФайла,"НомерДокументаОтправителя,ДатаДокументаОтправителя");

		СтруктураПараметров.Вставить("НомерВладельца", СвойстваЭД.НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаВладельца",  СвойстваЭД.ДатаДокументаОтправителя);
	КонецЕсли;
	СтруктураПараметров.Вставить("ТипЭД",              Выборка.ТипЭД);

	СтрокаДерева.Представление = ОпределитьПредставлениеЭД(СтрокаДерева.ВидЭД, СтруктураПараметров);
	
	// Для входящих ЭД актуальность меняется вручную. В связи с этим надо выделять в списке
	// цветом более актуальные ЭД. Для этого в дереве есть реквизит "ДатаЭДБольшеАктуального",
	// а так же для сравнивания текущей даты создания ЭД с датой актуального ЭД, существует
	// реквизит объекта "ДатаАктуальногоЭД". Необходимо заполнить их.
	СтрокаДерева.ДатаЭДБольшеАктуального = Ложь;
	Если СтрокаДерева.АктуальныйЭД Тогда
		Если НЕ ЗначениеЗаполнено(ДатаАктуальногоЭД) И ЗначениеЗаполнено(Выборка.Версия) Тогда
			ДатаАктуальногоЭД = Выборка.Версия;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДатаАктуальногоЭД) И ЗначениеЗаполнено(Выборка.Версия)
		И ДатаАктуальногоЭД < Выборка.Версия Тогда
		СтрокаДерева.ДатаЭДБольшеАктуального = Истина;
	КонецЕсли;
		
КонецПроцедуры

Функция ОжидаемоеДействиеПоТекущемуСтатусу(Строка)
	
	ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
	
	СостояниеЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Строка.Ссылка);
	Если СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		Или СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
		Или СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении Тогда
		
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ссылка, "ВладелецФайла, НаправлениеЭД");
	ДОЗакрыт = ОбменСКонтрагентамиСлужебныйВызовСервера.ДОЗакрытПринудительно(СвойстваЭД.ВладелецФайла);

	Если ДОЗакрыт Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ТекущийСтатусЭД = Строка.СтатусЭД;
	ЭтоСлужебныйЭД = ЭтоИзвещениеОПолучении(Строка.ТипЭД)
		ИЛИ ЭтоПодтверждение(Строка.ТипЭД)
		ИЛИ ЭтоУведомлениеОбУточнении(Строка.ТипЭД);
	
	Если ТекущийСтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
		
	ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Отклонен
		ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
		
	ИначеЕсли НЕ ЭтоСлужебныйЭД И ТекущийСтатусЭД = Перечисления.СтатусыЭД.Утвержден
		И ЭтоТитулФНС(СвойстваЭД.ВладелецФайла)
		И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		Возврат ВозвращаемоеЗначение;
		
	ИначеЕсли Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
		И ТекущийСтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
		ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Принять;
	Иначе
		НастройкиОбменаДляСтатусов = НастройкиОбменаЭД(Строка.Ссылка);
		МассивСтатусовЭД = ВернутьМассивСтатусовЭД(НастройкиОбменаДляСтатусов);
		
		Если МассивСтатусовЭД.Количество() > 0 Тогда
			ИндексТекСтатуса = МассивСтатусовЭД.Найти(ТекущийСтатусЭД);
			Если ИндексТекСтатуса <> Неопределено Тогда
				
				Если ИндексТекСтатуса + 1 < МассивСтатусовЭД.Количество() Тогда
					СледующийСтатус = МассивСтатусовЭД[ИндексТекСтатуса + 1];
					
					Если ТекущийСтатусЭД = Перечисления.СтатусыЭД.Сформирован
						ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						
						ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Утвердить;
						Если НЕ (НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.НемедленнаяОтправкаЭД()
								ИЛИ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД")) Тогда
								
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.УтвердитьОтправить;
						КонецЕсли;
						
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Утвержден
							ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Подписан Тогда
						Если СледующийСтатус = Перечисления.СтатусыЭД.Подписан Тогда
							
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Подписать;
							Если ОбменСКонтрагентамиСлужебныйВызовСервера.НемедленнаяОтправкаЭД() Тогда
								ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПодписатьОтправить;
							КонецЕсли;
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
							
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
						КонецЕсли;
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
						
						Если СледующийСтатус = Перечисления.СтатусыЭД.Доставлен Тогда
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
						Иначе
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
						КонецЕсли;
						
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение
						И СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
						ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьОжидаемоеДействиеКонтрагента(Строка,ВладелецФайла)
	
	ВозвращаемоеЗначение = "";
	
	ВерсияСтатусуЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Строка.Ссылка);
	Если ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	
	Если Строка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		Если Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение И НЕ ЗначениеЗаполнено(Строка.Ссылка)
			И ЗначениеЗаполнено(Строка.Родитель.Ссылка)
			И (Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Доставлен) Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Подтверждения оператора ЭДО'");
		ИначеЕсли (Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ
				ИЛИ Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ)
				И Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
				И ЗначениеЗаполнено(Строка.Родитель.Ссылка) И (Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
					ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
					ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Доставлен)
				И НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Извещения о получении'");
		КонецЕсли;
		
	Иначе
		Если Строка.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Подтверждения отправки'");
			
			// Изменения в поведении дерева для версии регламента 20.
			Если ВладелецФайла.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И ЭтоОтветныйТитул(Строка.ТипЭД) Тогда
				
				ВозвращаемоеЗначение = "";
			КонецЕсли;
		ИначеЕсли Строка.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Подтверждения о доставке'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция МассивТиповЭДКорневыхЭлементовДерева()
	
	СписокТиповЭД = Новый Массив;	
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	
	Возврат СписокТиповЭД;
	
КонецФункции

Функция МассивТиповЭДНеОтображаемыхВДереве()
	
	СписокТиповЭД = Новый Массив;
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
	
	Возврат СписокТиповЭД;
	
КонецФункции

// Добавляет на форму страницы для отображения электронных документов и реквизиты для хранения табличных документов.
//
// Параметры:
//  Форма			 - УправляемаяФорма - форма, на которую требуется добавить новые элементы
//  ДеревоЗначений	 - ДеревоЗначений - дерево, содержащее ссылки на справочник ЭДПрисоединенныеФайлы которые требуется вывести на форме.
//
Процедура СоздатьРеквизитыИЭлементыДляПечатныхФорм(Форма, ДеревоЗначений)  Экспорт 
	
	ТаблицаЭД = ЭлектронныеДокументыИзДереваЗначений(ДеревоЗначений);
		
	МассивНовыхРеквизитовЭД = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЭД Цикл
		
		Если СтрокаТаблицы.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПодписей = Новый Структура();
		
		Если СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
			Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
			Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
			
			ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Ссылка,"ВладелецФайла");
			
			Если ЭтоТитулФНС(ВладелецФайла) Тогда
				ЭлПодписи = ЭлектронныеПодписиДвухТитулов(СтрокаТаблицы.Ссылка);
			Иначе
				ЭлПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Ссылка,"ЭлектронныеПодписи").Выгрузить();
			КонецЕсли;
		Иначе
			ЭлПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Ссылка,"ЭлектронныеПодписи").Выгрузить();
		КонецЕсли;

		СтруктураПодписей.Вставить("Подписи", ЭлПодписи);
		
		ПараметрыПросмотра = Новый Структура;
		ПараметрыПросмотра.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
		ПараметрыПросмотра.Вставить("СтруктураПодписей", СтруктураПодписей);
		
		ДанныеЭД = ОбменСКонтрагентамиВнутренний.ФайлДанныхЭД(СтрокаТаблицы.Ссылка, ПараметрыПросмотра);
		
		Если Форма.ОтключитьВыводДопДанных Тогда
			ИменаОбластей = "ОбластьДД,ОбластьДДСЭП,ОбластьДДБезЭП,ОбластьДДСЭП_УС,ОбластьДДСЭП_У,ОбластьДДСЭП_С";
			ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ДанныеЭД, ИменаОбластей);
			
			ИменаОбластей = "ДопДанныеШапки_Шапка";
			ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ДанныеЭД, ИменаОбластей,
				ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// Добавление области Копия верна
		Если Не Форма.ОтключитьВыводКопияВерна Тогда
			ДанныеЭД.Вывести(Форма.ТабличныйДокументКопияВерна);
		КонецЕсли;
		
		СтрокаТаблицы.ДанныеЭД = ДанныеЭД;
		
		Если Форма.Элементы.Найти(СтрокаТаблицы.ИмяРеквизита) = Неопределено Тогда
			
			Если ТипЗнч(СтрокаТаблицы.ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
				РеквизитФормы = Новый РеквизитФормы(СтрокаТаблицы.ИмяРеквизита, Новый ОписаниеТипов("ТабличныйДокумент"));
			Иначе
				РеквизитФормы = Новый РеквизитФормы(СтрокаТаблицы.ИмяРеквизита, Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			
			МассивНовыхРеквизитовЭД.Добавить(РеквизитФормы);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНовыхРеквизитовЭД.Количество() > 0 Тогда	
		Форма.ИзменитьРеквизиты(МассивНовыхРеквизитовЭД);
	КонецЕсли;
		
	Для Каждого СтрокаТаблицы Из ТаблицаЭД Цикл
		
		Элемент = Форма.Элементы.Найти(СтрокаТаблицы.ИмяРеквизита); 
		
		Если Элемент = Неопределено Тогда
			
			ИмяСтраницы = "Страница" + СтрокаТаблицы.ИмяРеквизита;
			Страница = Форма.Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Форма.Элементы.СтраницыЭД);
			Страница.Вид = ВидГруппыФормы.Страница;
			Страница.ОтображатьЗаголовок = Ложь;
			Страница.Видимость = Истина;
			
			// Создание элементов под табличные документы.
			Если ТипЗнч(СтрокаТаблицы.ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
				
				Форма[СтрокаТаблицы.ИмяРеквизита] = СтрокаТаблицы.ДанныеЭД;
				
				НовыйЭлемент = Форма.Элементы.Добавить(СтрокаТаблицы.ИмяРеквизита, Тип("ПолеФормы"), Страница);
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
				НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				НовыйЭлемент.ПутьКДанным = СтрокаТаблицы.ИмяРеквизита;
				НовыйЭлемент.Редактирование = Ложь;
				
				НовыйЭлемент.УстановитьДействие("ОбработкаРасшифровки","Подключаемый_ТабличныйДокументОбработкаРасшифровки")
			Иначе
				
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(СтрокаТаблицы.ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
				Форма[СтрокаТаблицы.ИмяРеквизита].Очистить();
				Форма[СтрокаТаблицы.ИмяРеквизита].Вывести(СтрокаТаблицы.ДанныеЭД);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРекурсивно(ДеревоЗначений,ТаблицаЭД)
	
	Для Каждого СтрокаДерева Из ДеревоЗначений Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
			НоваяСтрока = ТаблицаЭД.Добавить();
			НоваяСтрока.Ссылка = СтрокаДерева.Ссылка;
			НоваяСтрока.ТипЭД = СтрокаДерева.ТипЭД;
			НоваяСтрока.ВидЭД = СтрокаДерева.ВидЭД;
			НоваяСтрока.ИмяРеквизита = "ТабличныйДокумент" 
				+ ?(СтрокаДерева.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий, "Входящий", "Исходящий")
				+ ?(СтрокаДерева.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД, "Произвольный", "")
				+ ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаДерева.ТипЭД);
			СтрокаДерева.ИмяРеквизита = НоваяСтрока.ИмяРеквизита;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьТаблицуРекурсивно(СтрокаДерева.Строки,ТаблицаЭД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭлектронныеПодписиДвухТитулов(Ссылка) Экспорт
	
	ЭПРезультат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ЭлектронныеПодписи");
	ЭП = ЭПРезультат.Выгрузить();
	
	ВторойТитул = ВторойТитулДокумента(Ссылка);
	
	Если ЗначениеЗаполнено(ВторойТитул) Тогда
		
		ЭПВторогоТитулаРезультат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВторойТитул, "ЭлектронныеПодписи");
		ЭПВторогоТитула = ЭПВторогоТитулаРезультат.Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭПВторогоТитула, ЭП);
		
	КонецЕсли;
	
	Возврат ЭП;
	
КонецФункции

// Получение параметров версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка - электронный документ или владелец.
// 
// Возвращаемое значение:
//  Структура - параметры структуры:
//    * НомерВерсииЭД - Строка - номер версии
//    * СсылкаНаДокумент - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
//    * СостояниеВерсииЭД - ПеречислениеСсылка.СостоянияВерсийЭД - состояние версии электронного документа.
//    * КомментарийРС - Строка - комментарий состояния.
//
Функция ПараметрыВерсииЭлектронногоДокумента(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВерсииЭД = Новый Структура;
	
	Если ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаВладельца,"СостояниеЭДО, НомерВерсииЭД");
		СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     РеквизитыДокумента.НомерВерсииЭД);
		СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаВладельца);
		СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", РеквизитыДокумента.СостояниеЭДО);
		СтруктураВерсииЭД.Вставить("КомментарийРС",     "");
	ИначеЕсли ТипЗнч(СсылкаНаВладельца) = Тип("Структура") Тогда
		// Бизнес-сеть.
		СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     1);
		СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  Неопределено);
		СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", Неопределено);
		СтруктураВерсииЭД.Вставить("КомментарийРС",     "");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент.НомерВерсииЭД, 0) КАК НомерВерсииЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СостоянияЭД.СостояниеВерсииЭД,
		|	СостоянияЭД.Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК СообщениеОбмена,
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.СостояниеЭДО КАК СообщениеОбменаСостояниеЭДО,
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.НомерВерсииЭД КАК НомерВерсииЭД
		|ПОМЕСТИТЬ вт_СвязанныеЭД
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект
		|	И НЕ ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка,
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка.СостояниеЭДО,
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка.НомерВерсииЭД
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект
		|	И НЕ ЭлектронныйДокументВходящийДокументыОснования.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(вт_СвязанныеЭД.НомерВерсииЭД) КАК НомерВерсииЭД
		|ПОМЕСТИТЬ вт_МаксимальныйНомер
		|ИЗ
		|	вт_СвязанныеЭД КАК вт_СвязанныеЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_СвязанныеЭД.НомерВерсииЭД,
		|	вт_СвязанныеЭД.СообщениеОбмена КАК ЭлектронныйДокумент,
		|	вт_СвязанныеЭД.СообщениеОбменаСостояниеЭДО КАК СостояниеЭДО
		|ИЗ
		|	вт_МаксимальныйНомер КАК вт_МаксимальныйНомер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_СвязанныеЭД КАК вт_СвязанныеЭД
		|		ПО вт_МаксимальныйНомер.НомерВерсииЭД = вт_СвязанныеЭД.НомерВерсииЭД";
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
		
		Результат = Запрос.ВыполнитьПакет();
		КомментарийРС = "";
		ВыборкаПоРегистру = Результат[0].Выбрать();
		Если ВыборкаПоРегистру.Следующий() Тогда
			НомерВерсииЭД     = ВыборкаПоРегистру.НомерВерсииЭД;
			СостояниеВерсииЭД = ВыборкаПоРегистру.СостояниеВерсииЭД;
			СсылкаНаДокумент  = ВыборкаПоРегистру.ЭлектронныйДокумент;
			КомментарийРС     = ВыборкаПоРегистру.Комментарий;
		Иначе
			НомерВерсииЭД     = 0;
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
			СсылкаНаДокумент  = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		КонецЕсли;
		
		Если НомерВерсииЭД = 0 Тогда
			ВыборкаПоСправочнику = Результат[3].Выбрать();
			Если ВыборкаПоСправочнику.Количество() > 0 Тогда
				ВыборкаПоСправочнику.Следующий();
				НомерВерсииЭД     = ВыборкаПоСправочнику.НомерВерсииЭД;
				СсылкаНаДокумент  = ВыборкаПоСправочнику.ЭлектронныйДокумент;
				СостояниеВерсииЭД = ВыборкаПоСправочнику.СостояниеЭДО;
			КонецЕсли;
		КонецЕсли;
		СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     НомерВерсииЭД);
		СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаДокумент);
		СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", СостояниеВерсииЭД);
		СтруктураВерсииЭД.Вставить("КомментарийРС",     КомментарийРС);
		
	КонецЕсли;
	
	Возврат СтруктураВерсииЭД;
	
КонецФункции

Функция ИнформацияОФайлахИПодписях(ИменаФайлов)
	
	Результат = Новый Соответствие;
	
	ИменаФайловПодписей = Новый Массив;
	ИменаФайловДанных   = Новый Массив;
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		Если Прав(ИмяФайла, 3) = "p7s" Тогда
			ИменаФайловПодписей.Добавить(ИмяФайла);
		Иначе
			ИменаФайловДанных.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексА = 1 По ИменаФайловДанных.Количество() Цикл
		ИндексМАКС = ИндексА;
		Для ИндексБ = ИндексА+1 По ИменаФайловДанных.Количество() Цикл
			Если СтрДлина(ИменаФайловДанных[ИндексМАКС - 1]) > СтрДлина(ИменаФайловДанных[ИндексБ - 1]) Тогда
				ИндексМАКС = ИндексБ;
			КонецЕсли;
		КонецЦикла;
		Своп = ИменаФайловДанных[ИндексА - 1];
		ИменаФайловДанных[ИндексА - 1] = ИменаФайловДанных[ИндексМАКС - 1];
		ИменаФайловДанных[ИндексМАКС - 1] = Своп;
	КонецЦикла;
	
	Для Каждого ИмяФайлаДанных Из ИменаФайловДанных Цикл
		Результат.Вставить(ИмяФайлаДанных, НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей));
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Результат.Вставить(ИмяФайлаПодписи, Новый Массив);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьАрхивФайлов(ИмяОсновногоФайла, МассивФайлов)
	
	Попытка
		Файл = Новый Файл(ИмяОсновногоФайла);
		ФайлАрхива = СтрЗаменить(ИмяОсновногоФайла, Файл.Расширение, ".zip");
		ЗаписьАрхива = Новый ЗаписьZIPФайла(ФайлАрхива);
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ЗаписьАрхива.Добавить(ИмяФайла);
		КонецЦикла;
		ЗаписьАрхива.Записать();
		Возврат ФайлАрхива;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись файла архива на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Получает адрес сертификата шифрования во временном хранилище данных.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на электронный документ, адрес сертификата шифрования по которому необходимо получить.
//
Функция АдресаСертификатовШифрования(ПрисоединенныйФайл) Экспорт
	
	ПараметрыСоглашения = ОпределитьНастройкиОбменаЭДПоИсточнику(ПрисоединенныйФайл.ВладелецФайла, , , ПрисоединенныйФайл);
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения)
		ИЛИ Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(ПараметрыСоглашения.СпособОбменаЭД) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	СертификатКонтрагентаШифрования = ПараметрыСоглашения.СертификатКонтрагентаДляШифрования;
	СертификатОрганизацииШифрования = ПараметрыСоглашения.СертификатОрганизацииДляРасшифровки;
	
	Если СертификатКонтрагентаШифрования = Неопределено ИЛИ СертификатОрганизацииШифрования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеСертификата            = СертификатКонтрагентаШифрования.Получить();
	ДвоичныеДанныеСертификатаОрганизации = СертификатОрганизацииШифрования.ДанныеСертификата.Получить();
	
	Если ДвоичныеДанныеСертификата = Неопределено ИЛИ ДвоичныеДанныеСертификатаОрганизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата);
	АдресСертификатаОрганизации = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификатаОрганизации);
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(АдресСертификата);
	МассивВозврата.Добавить(АдресСертификатаОрганизации);
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#Область МетодыЗаполненияДереваЭД

// Версия пакета XDTO схемы CML 2.06.
//
// Возвращаемое значение:
//  Строка - версия.
//
Функция ВерсияСхемыCML2() Экспорт
	
	Возврат "CML 2.08";
	
КонецФункции

// Версия пакета XDTO схемы CML 4.02.
//
// Возвращаемое значение:
//  Строка - версия.
//
Функция ВерсияСхемыCML402()
	
	Возврат "CML 4.02";
	
КонецФункции

// Пространство имен используемой схемы CML.
// 
// Возвращаемое значение:
//  Строка - пространство имен.
//
Функция ПространствоИменCML() Экспорт
	
	Возврат "urn:1C.ru:commerceml_2";
	
КонецФункции

Функция ВерсияСхемыФНС_2015()
	Возврат "ФНС 5.01";
КонецФункции

Функция ВерсияСхемыФНС_2016() Экспорт
	Возврат НСтр("ru = 'ФНС 5.01 (с 2016г.)'");
КонецФункции

Функция ВерсияСхемыФНС_СФ() Экспорт
	Возврат "ФНС 5.02";
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ПрочитатьИННКППИзФайла(ИННКПП, СтрокаXML)
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Исключение
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка разбора XML: %1.'"), ИнформацияОбОшибке().Описание);
		Возврат;
	КонецПопытки;
	
	ИННПрочитан = Ложь;
	КПППрочитан = Ложь;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если Врег(ЧтениеXML.Имя) = ВРег("INN") Тогда
					ЧтениеXML.Прочитать();
					ИНН = ЧтениеXML.Значение;
					ИННПрочитан = Истина;
				КонецЕсли;
				
				Если Врег(ЧтениеXML.Имя) = ВРег("KPP") Тогда
					ЧтениеXML.Прочитать();
					КПП = ЧтениеXML.Значение;
					КПППрочитан = Истина;
					
				КонецЕсли;
				
				Если ИННПрочитан И КПППрочитан Тогда
					
					ИННКППКонтрагента = ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП,"");
					Если ИННКПП.Найти(ИННКППКонтрагента) = Неопределено Тогда
						ИННКПП.Добавить(ИННКППКонтрагента);
					КонецЕсли;
					
					ИННПрочитан = Ложь;
					КПППрочитан = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка разбора XML: %1.'"), ИнформацияОбОшибке().Описание);
		Возврат ;
	КонецПопытки;
	
КонецПроцедуры

Функция ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи)
	
	ИмяВременногоФайлаОписаниеПакетаЭДО = ТекущееИмяВременногоФайла("xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента = Новый ЗаписьXML;
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ОткрытьФайл(ИмяВременногоФайлаОписаниеПакетаЭДО, "windows-1251");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьОбъявлениеXML();
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("ТрансИнф");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("ВерсПрог",
		ВРЕГ(Лев(Метаданные.Имя + " " + СокрЛП(Метаданные.Версия), 40)));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("версияФормата", "ФНС:1.0");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокументооборота",
		РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокументооборота", "Участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типТранзакции", "УчастникНП");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("отправитель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "абонент");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // отправитель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("получатель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторСубъекта", РеквизитыПакета.ОператорЭДОИд);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "спецоператор");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // получатель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("документ");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокумента", НовыйUUID());
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("сжат", XMLСтрока(Ложь));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("зашифрован", XMLСтрока(Истина));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокумента", "участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСодержимого", "xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("содержимое");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла",
		ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // содержимое
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("подпись");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла",
		ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаПодписи).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // подпись
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // документ
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента();
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.Закрыть();
	
	ДвоичныеДанныеОписаниеПакетаЭДО = Новый ДвоичныеДанные(ИмяВременногоФайлаОписаниеПакетаЭДО);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаОписаниеПакетаЭДО);
	
	Возврат ДвоичныеДанныеОписаниеПакетаЭДО;
	
КонецФункции

Процедура СоздатьФайлыОписанияПакета(РеквизитыПакета)
	
	// Card
	ЭДКарточки = Новый ЗаписьXML;
	ЭДКарточки.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДКарточки, "windows-1251");
	ЭДКарточки.ЗаписатьОбъявлениеXML();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("card");
	
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДКарточки.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/card");
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Identifiers");
	ЭДКарточки.ЗаписатьАтрибут("ExternalIdentifier", "packet.zip");
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Type");
	ЭДКарточки.ЗаписатьАтрибут("Name", "Registration");
	ЭДКарточки.ЗаписатьАтрибут("ResignRequired", XMLСтрока(Истина));
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Description");
	ЭДКарточки.ЗаписатьАтрибут("Title", "Регистрация");
	ЭДКарточки.ЗаписатьАтрибут("Date", XMLСтрока(ТекущаяДатаСеанса()));
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalData");
	
	Для каждого ДанныеСертификата Из РеквизитыПакета.Сертификат Цикл
		ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
		ЭДКарточки.ЗаписатьАтрибут("Name", "Certificate");
		ЭДКарточки.ЗаписатьАтрибут("Value", ДанныеСертификата);
		ЭДКарточки.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Электронная почта.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "Email");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ЭлектроннаяПочта);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "OperatorID");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ОператорЭДОИд);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ВерсияБЭД");
	ЭДКарточки.ЗаписатьАтрибут("Value", ОбновлениеИнформационнойБазыБЭД.ВерсияБиблиотеки());
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ПрикладноеРешение");
	ЭДКарточки.ЗаписатьАтрибут("Value", Метаданные.Имя);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ВерсияПрикладногоРешения");
	ЭДКарточки.ЗаписатьАтрибут("Value", Метаданные.Версия);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Sender");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Abonent");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.НаименованиеОрганизации);
	ЭДКарточки.ЗаписатьАтрибут("Inn", РеквизитыПакета.ИННОрганизации);
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.КППОрганизации) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Kpp", РеквизитыПакета.КППОрганизации);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.ИдентификаторОрганизации) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Id", РеквизитыПакета.ИдентификаторОрганизации);
	КонецЕсли;
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Receiver");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Organization");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.ОператорЭДО);
	ЭДКарточки.ЗаписатьАтрибут("Type", "SpecOperator");
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.Закрыть();
	
	// meta
	ЭДТранспортнойИнформации = Новый ЗаписьXML;
	ЭДТранспортнойИнформации.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДТранспортнойИнформации, "windows-1251");
	ЭДТранспортнойИнформации.ЗаписатьОбъявлениеXML();
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ContainerDescription");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/meta");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("DocFlow");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Id", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Documents");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "AccessionAgreement");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Documents
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // DocFlow
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ContainerDescription
	ЭДТранспортнойИнформации.Закрыть();
	
КонецПроцедуры

Процедура ОбновитьИдентификаторыЭДО(ИдентификаторыЭДО, Удалить = Ложь)
	
	Если ИдентификаторыЭДО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Удалить Тогда
		ОчиститьИдентификаторыЭДО(ИдентификаторыЭДО);
	Иначе
		ЗаполнитьИдентификаторыЭДО(ИдентификаторыЭДО);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыЭДО(ИдентификаторыЭДО)
	
	Если ИдентификаторыЭДО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильЭДО
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.ИдентификаторОрганизации В(&ИдентификаторОрганизации)";
	
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторыЭДО);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	НаборЗаписей = РегистрыСведений.НовыеДокументыВСервисеЭДО.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
	
		НаборЗаписей.Отбор.ПрофильЭДО.Установить(Выборка.ПрофильЭДО);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыЭДО(ИдентификаторыЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильЭДО,
	|	ИСТИНА КАК ЕстьНовыеЭД
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.ИдентификаторОрганизации В(&Идентификаторы)
	|	И ПрофилиНастроекЭДО.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Идентификаторы", ИдентификаторыЭДО);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.НовыеДокументыВСервисеЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрофильЭДО.Установить(Выборка.ПрофильЭДО);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЭДПрисоединенныйФайлПакета(Конверт, МассивСтруктурДанных = Неопределено) Экспорт
	
	ПодготовленныеДокументы = Конверт.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент");
	
	СоответствиеФайлЭД      = Новый Соответствие;
	
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога, "*");
	Для Каждого СтрокаЭД Из Конверт.ЭлектронныеДокументы Цикл
		ДокументНаОтправку = СтрокаЭД.ЭлектронныйДокумент;
		
		ДанныеФайла = ПолучитьДанныеФайла(ДокументНаОтправку);
		
		// Шифрование ЭД
		Если Конверт.ДанныеЗашифрованы Тогда
			Если МассивСтруктурДанных <> Неопределено Тогда // шифрование произведено на клиенте
				Для Каждого ЭлементДанных Из МассивСтруктурДанных Цикл
					Если ЭлементДанных.ЭлектронныйДокумент = СтрокаЭД.ЭлектронныйДокумент Тогда
						ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ЭлементДанных.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ПараметрыШифрования = АдресаСертификатовШифрования(ДокументНаОтправку);
				Если ПараметрыШифрования <> Неопределено Тогда
					Отказ = Ложь;
					МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
					Если Отказ Тогда
						ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
						ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
						Возврат;
					КонецЕсли;
					
					МассивСертификатов = Новый Массив;
					Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
						
						ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
						Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
						МассивСертификатов.Добавить(Сертификат);
					КонецЦикла;
					
					ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
					ЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанныеФайла, МассивСертификатов);
					ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоОтправкаПодтверждения(ДокументНаОтправку) Тогда
			СохранитьВместеСПоследнейЭП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		Иначе
			СохранитьВместеСЭП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		КонецЕсли;
		
	КонецЦикла;
	
	Файлы = НайтиФайлы(АдресКаталога, "*");
	Если Файлы.Количество() = 0 Тогда
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
		Возврат;
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив;
	Для Каждого НайденныйФайл Из Файлы Цикл
		МассивИменФайлов.Добавить(НайденныйФайл.Имя);
	КонецЦикла;
	
	АрхивКонтейнер = Новый ЗаписьZipФайла();
	ИмяФайла = "EDI_" + Конверт.УникальныйИдентификатор();
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	АрхивКонтейнер.Открыть(АдресКаталога + ИмяФайла + ".zip");
	
	Для Каждого Файл Из Файлы Цикл
		АрхивКонтейнер.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	СоответствиеВложений    = ИнформацияОФайлахИПодписях(МассивИменФайлов);
	ТекстОписанияУчастников = СоздатьТекстОписиЭД(
									Конверт,
									СоответствиеВложений,
									СоответствиеФайлЭД);
	
	КопироватьФайл(ТекстОписанияУчастников, АдресКаталога + "packageDescription.xml");
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ТекстОписанияУчастников);
	АрхивКонтейнер.Добавить(АдресКаталога + "packageDescription.xml");
	
	АрхивКонтейнер.Записать();
	
	ПоместитьПакетЭДВКонверт(Конверт, АдресКаталога + ИмяФайла + ".zip");
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
	
КонецПроцедуры

Функция ОпределитьПодготовленныеКОтправкеЭД()
	
	ЗапросПодготовленныхЭД = Новый Запрос;
	ЗапросПодготовленныхЭД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.СтатусПакета = &СтатусПакета";
	ЗапросПодготовленныхЭД.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
	
	Результат = ЗапросПодготовленныхЭД.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Функция НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей)
	
	ИменаПодписей = Новый Массив;
	
	Файл = Новый Файл(ИмяФайлаДанных);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Если СтрНайти(ИмяФайлаПодписи, ИмяБезРасширения) > 0 Тогда
			ИменаПодписей.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаПодписей Цикл
		ИменаФайловПодписей.Удалить(ИменаФайловПодписей.Найти(ИмяФайлаПодписи));
	КонецЦикла;
	
	Возврат ИменаПодписей;
	
КонецФункции

Процедура СохранитьПодписи(ФайлСсылка,
							ПолноеИмяФайла,

							МассивСтруктурПодписей,
							АдресКаталога,
							СоответствиеФайлЭД,
							БезИсходногоФайла = Ложь,
							ЭтоПроизвольныйЭД = Ложь)
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	МассивИмен = Новый Массив;
	
	Если НЕ БезИсходногоФайла Тогда
		МассивИмен.Добавить(ОсновнойФайл.Имя);
	КонецЕсли;
	
	Сч = 0;
	Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		
		Сч = Сч + 1;
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда
			Если ЗначениеЗаполнено(ЭтоПроизвольныйЭД) И ЭтоПроизвольныйЭД И Прав(ПолноеИмяФайла, 4) = ".zip" Тогда
				ИмяФайлаПодписи = Строка(ФайлСсылка)+"ЭП" + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + ".p7s";
			Иначе
				ИмяФайлаПодписи = Строка(ФайлСсылка) + "-" + Сч + ".p7s";
			КонецЕсли;
		КонецЕсли;
		
		ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
		
		ПолныйПутьПодписи = Путь;
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи);
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + ".p7s";
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
			
			ПолныйПутьПодписи = Путь;
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи);
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ФайлСсылка.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ФайлСсылка.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(Файл.Имя, СтруктураПараметровЭД);
		Иначе
			// СоответствиеФайлЭД - структура файлов ЭД.
			НоваяСтрока = СоответствиеФайлЭД.ГлавныйФайлПодписи.Добавить();
			НоваяСтрока.Имя = "";
			НоваяСтрока.Путь = Файл.Имя
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
		
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		ДвоичныеДанныеПодписи.Записать(ПолныйПутьПодписи);
		УдалитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СохранитьФайлКак(ДанныеФайла,
						ИмяКаталога,
						ПрисоединенныйФайл = Неопределено,
						ЭтоПроизвольныйЭД = Неопределено,
						СоответствиеФайлЭД = Неопределено)
	
	Файл = Новый Файл(ИмяКаталога);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	
	ИмяПолучаемогоФайла = ДанныеФайла.ИмяФайла;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ДанныеФайла.ИмяФайла, СтруктураПараметровЭД);
		Иначе
			СоответствиеФайлЭД.Вставить("ГлавныйФайл", ДанныеФайла.ИмяФайла);
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПроизвольныйЭД = Истина Тогда
		
		ИмяФайла      = ДанныеФайла.Наименование;
		ИмяКонтейнера = ИмяКаталога + ИмяФайла + ".zip";
		ИмяАрхива     = ИмяФайла + ".zip";
		
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			ИмяКонтейнера = ИмяКаталога+ИмяФайла+"ЭП.zip";
			ИмяАрхива     = ИмяФайла + "ЭП.zip";
		КонецЕсли;
		
		АрхивКонтейнер = Новый ЗаписьZipФайла(ИмяКонтейнера);
		АрхивКонтейнер.Добавить(ИмяКаталога + ИмяПолучаемогоФайла );
		
		АрхивКонтейнер.Записать();
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяКаталога + ИмяПолучаемогоФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ИмяАрхива, СтруктураПараметровЭД);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяКаталога + ИмяПолучаемогоФайла;
КонецФункции

Процедура СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры)
	
	МассивОбъектовДляВыгрузки = ТекЭлемент.Значение;
	
	ВерсияФНС_2016 = ВерсияСхемыФНС_2016();
	ВерсияФНС_2015 = ВерсияСхемыФНС_2015();
	ВерсияФНС_СФ = ВерсияСхемыФНС_СФ();
	ВерсияСхемыCML2 = ВерсияСхемыCML2();
	ВерсияСхемыCML402 = ВерсияСхемыCML402();
	
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров И НЕ ДопПараметры.Свойство("БыстрыйОбмен") Тогда
			НастройкиОбмена = ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДляВыгрузки);
		Иначе
			НастройкиОбмена = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НастройкиОбмена) Тогда
			Продолжить
		КонецЕсли;
		
		Если НастройкиОбмена.ПрофильНастроекЭДО.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
			ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		КонецЕсли;

		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетФактура Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияФНС_СФ Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьСчетФактуруФНС(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавца(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияФНС_СФ Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьСчетФактуруФНС(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавцаУКД(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияФНС_2016 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьПередачаТоваровПродавец(ОбъектДляВыгрузки, НастройкиОбмена);
			ИначеЕсли НастройкиОбмена.ВерсияФормата = ВерсияФНС_2015 ИЛИ НастройкиОбмена.ВерсияФормата = ВерсияСхемыCML2 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьТорг12ПродавецФНС(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавца(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияФНС_2016 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьПередачаРаботИсполнитель(ОбъектДляВыгрузки, НастройкиОбмена);
			ИначеЕсли НастройкиОбмена.ВерсияФормата = ВерсияФНС_2015 ИЛИ НастройкиОбмена.ВерсияФормата = ВерсияСхемыCML2 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьАкт501ИсполнительФНС(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавца(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияФНС_2015 ИЛИ НастройкиОбмена.ВерсияФормата = ВерсияСхемыCML2
				Или НастройкиОбмена.ВерсияФормата = ВерсияФНС_2016 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьКорДокументПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавцаУКД(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			Если НастройкиОбмена.ВерсияФормата = ВерсияСхемыCML2 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьАктНаПередачуПрав(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавца(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ТОРГ12 Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьНакладнуюПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетНаОплату Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияСхемыCML2 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьСчетНаОплатуПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.УдалитьСформироватьСчетНаОплатуПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПрайсЛист Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияСхемыCML2 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьПрайсПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.УдалитьСформироватьПрайсПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ЗаказТовара Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияСхемыCML2 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьЗаказПоставщикуПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.УдалитьСформироватьЗаказПоставщикуПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияСхемыCML2 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьЗаказКлиентаПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.УдалитьСформироватьЗаказКлиентаПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияСхемыCML2 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.УдалитьСформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияСхемыCML2 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.УдалитьСформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияСхемыCML2 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьКаталогНоменклатуры(НастройкиОбмена, ДопПараметры);
			ИначеЕсли НастройкиОбмена.ВерсияФормата = ВерсияСхемыCML402
					ИЛИ Не ЗначениеЗаполнено(НастройкиОбмена.ВерсияФормата) Тогда
					
				ТоварыКаталога = "";
				ДопПараметры.Свойство("ТоварыКаталога", ТоварыКаталога);
				СписокТоваровКаталога = ПолучитьИзВременногоХранилища(ТоварыКаталога);
				Результат = ОбменСКонтрагентамиВнутренний.УдалитьСформироватьКаталогНоменклатуры(ОбъектДляВыгрузки, СписокТоваровКаталога, НастройкиОбмена);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьАктВыполненныхРаботПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьПередачуТоваровМеждуОрганизациями(ОбъектДляВыгрузки, НастройкиОбмена);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьВозвратТоваровМеждуОрганизациями(ОбъектДляВыгрузки, НастройкиОбмена);
				
		ИначеЕсли ВРег(ТекЭлемент.Ключ) = ВРег("РеквизитыОрганизации") Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьРеквизитыОрганизации(ОбъектДляВыгрузки, НастройкиОбмена);

		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			
			ВерсияРегламентаЭДО = "";
			Если НЕ НастройкиОбмена.Свойство("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО)
				ИЛИ НЕ ЗначениеЗаполнено(ВерсияРегламентаЭДО) Тогда
				ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
			КонецЕсли;
			
			Результат.СтруктураЭД.Вставить("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО);
			
			ТребуетсяПодтверждение = Ложь;
			Если НастройкиОбмена.Свойство("ТребуетсяПодтверждение") Тогда
				ТребуетсяПодтверждение = НастройкиОбмена.ТребуетсяПодтверждение;
			КонецЕсли;
			Если Результат.СтруктураЭД.Свойство("ТипЭлементаВерсииЭД")
				И (Результат.СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
				ИЛИ Результат.СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
				ИЛИ Результат.СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ) Тогда
				ТребуетсяПодтверждение = Ложь;
			КонецЕсли;
			Результат.СтруктураЭД.Вставить("ТребуетсяПодтверждение", ТребуетсяПодтверждение);
			
			Результат.СтруктураЭД.Вставить("ТребуетсяИзвещение", ?(НастройкиОбмена.Свойство("ТребуетсяИзвещение"),
				НастройкиОбмена.ТребуетсяИзвещение, Ложь));
				
			МассивСтруктурВозврата.Добавить(Результат);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект, ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
			
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
	Иначе
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
	КонецЕсли;
	
	СтруктураИнформации = ОбменСКонтрагентамиСлужебныйВызовСервера.ОпределитьСводнуюИнформациюПоСтатусуЭД(ПрисоединенныйФайл(ЭлектронныйДокумент));
	
	НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
	НоваяЗаписьНабора.СостояниеВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,"СостояниеЭДО");
	НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураИнформации.СНашейСтороны;
	НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураИнформации.СоСтороныДругогоУчастника;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция СоздатьТекстОписиЭД(Конверт, СоответствиеВложений, СоответствиеФайлЭД)
	
	РеквизитыКонверта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Конверт, "Отправитель, Получатель");
	ЦентрОбменаЭД =    РеквизитыКонверта.Отправитель;
	УчастникОбменаЭД = РеквизитыКонверта.Получатель;
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ТранспортнаяИнформация");
	// Имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаИВремяФормирования");
	ЗаписьХМЛ.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// Идентификатор документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Идентификатор");
	ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.УникальныйИдентификатор()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
	// Дата получения
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Отправитель");
	ЗаписьХМЛ.ЗаписатьТекст(ЦентрОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Получатель");
	ЗаписьХМЛ.ЗаписатьТекст(УчастникОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	// Шифрование по документам
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НастройкиШифрования");
	Для Каждого ВложениеДокумент Из Конверт.ЭлектронныеДокументы Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументШифрования");
		ЗаписьХМЛ.ЗаписатьТекст(Строка(ВложениеДокумент.ЭлектронныйДокумент));
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Зашифрован");
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьХМЛ.ЗаписатьТекст("Да");
		Иначе
			ЗаписьХМЛ.ЗаписатьТекст("Нет");
		КонецЕсли;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СертификатШифрования");
			ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.СертификатШифрования));
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументыИПодписи");
	Для Каждого Вложение Из СоответствиеВложений Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Документ");
		ЗаписьХМЛ.ЗаписатьТекст(Вложение.Ключ);
		
		СтруктураПараметровЭД = СоответствиеФайлЭД.Получить(Вложение.Ключ);
		НомерЭД = ""; УникальныйИД = "";
		Если СтруктураПараметровЭД.Свойство("НомерЭД", НомерЭД) И ЗначениеЗаполнено(НомерЭД) Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НомерЭД");
			ЗаписьХМЛ.ЗаписатьТекст(НомерЭД);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		Если СтруктураПараметровЭД.Свойство("УникальныйИД", УникальныйИД) И ЗначениеЗаполнено(УникальныйИД) Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("УникальныйИД");
			ЗаписьХМЛ.ЗаписатьТекст(УникальныйИД);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Для Каждого Подпись Из Вложение.Значение Цикл
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подпись");
			ЗаписьХМЛ.ЗаписатьТекст(Подпись);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	ЗапросЭД.Текст =

	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.НомерВерсииЭД КАК НомерВерсииЭД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.НомерВерсииЭД КАК НомерВерсииЭД
	|	ИЗ
	|		Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|	ГДЕ
	|		ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЭлектронныйДокументВходящийДокументыОснования.Ссылка.НомерВерсииЭД
	|	ИЗ
	|		Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|	ГДЕ
	|		ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВерсииЭД УБЫВ";
	
	Результат = ЗапросЭД.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.НомерВерсииЭД;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Записывает в журнал регистрации событие записи ЭД.
//
// Параметры:
//  СсылкаНаЭД - ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(СсылкаНаЭД)
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		УстановитьПривилегированныйРежим(Истина);
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналСобытийЭД");
			ЭлементБлокировки.УстановитьЗначение("ПрисоединенныйФайл", СсылкаНаЭД);
			Блокировка.Заблокировать();
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(МАКСИМУМ(ЖурналСобытийЭД.НомерЗаписи), 0) + 1 КАК НомерЗаписи
			|ИЗ
			|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
			|ГДЕ
			|	ЖурналСобытийЭД.ПрисоединенныйФайл = &ПрисоединенныйФайл";
			Запрос.УстановитьПараметр("ПрисоединенныйФайл", СсылкаНаЭД);
			НомерЗаписи = Запрос.Выполнить().Выгрузить()[0].НомерЗаписи;
			МенеджерЗаписи                    = РегистрыСведений.ЖурналСобытийЭД.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНаЭД;
			МенеджерЗаписи.НомерЗаписи        = НомерЗаписи;
			МенеджерЗаписи.ВладелецЭД         = СсылкаНаЭД.ВладелецФайла;
			МенеджерЗаписи.СтатусЭД           = СсылкаНаЭД.СтатусЭД;
			МенеджерЗаписи.Дата               = ТекущаяДатаСеанса();
			МенеджерЗаписи.Пользователь       = Пользователи.ТекущийПользователь();
			МенеджерЗаписи.Ответственный      = СсылкаНаЭД.Автор;
			МенеджерЗаписи.Комментарий        = СсылкаНаЭД.Описание;
			МенеджерЗаписи.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на временное хранилище двоичных данных архива с дополнительными файлами каталога.
//
// Параметры:
//  МассивФайлов - Массив - ссылки на временное хранилище дополнительного файла.
//
// Возвращаемое значение:
//  Строка - ссылка на временное хранилище.
//
Функция АрхивДополнительныхФайлов(МассивФайлов) Экспорт
	
	ВремПапка = ЭлектронноеВзаимодействиеСлужебный.ТекущийКаталогВременныхФайлов()
				+ Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(ВремПапка);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремПапка, "*");
	Для Каждого Элемент Из МассивФайлов Цикл
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Элемент.АдресВременногоХранилища);
		СоздатьКаталог(ВремПапка + Элемент.ИдТовара + "\");
		ДвоичныеДанныеФайла.Записать(ВремПапка + Элемент.ИдТовара + "\" + Элемент.ИмяФайла);
	КонецЦикла;
	Архив = ПолучитьИмяВременногоФайла();
	Zip = Новый ЗаписьZipФайла(Архив);
	Zip.Добавить(
			ВремПапка + "*",
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Попытка
		Zip.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись файла архива на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Архив);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремПапка);
		Возврат Неопределено;
	КонецПопытки;
	ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(Архив);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремПапка);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Архив);
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеАрхива);
	
КонецФункции

Функция ВерсияПакетаЭД(ЭД) Экспорт
	
	Если ТипЗнч(ЭД.ВладелецФайла) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		
		ВерсияФормата = ФорматПакетаЭД(ЭД);
		
	Иначе
		
		Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			Или ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			Или ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ВерсияФормата = ФорматПакетаЭД(ЭД.ЭлектронныйДокументВладелец);
			
		Иначе
			 
			ВерсияФормата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД.ВладелецФайла,"НастройкаЭДО.ВерсияФорматаПакета");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ФорматПакетаЭД(ЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭД);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВерсияФормата = Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ВерсияФормата = Выборка.ВерсияФорматаПакета;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ВерсияФорматаИзСтроки(Версия)
	Если Версия = "2" Тогда
		Результат = Перечисления.ВерсииФорматаПакетаЭД.Версия20;
	ИначеЕсли Версия = "3" Тогда
		Результат = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоФНС(ВидЭД) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования
Функция ЕстьНеОтправленноеПодтверждение(ВладелецФайла, СостояниеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.СтатусЭД,
	|	ЭДПрисоединенныеФайлы.ПодписанЭП,
	|	ЕСТЬNULL(ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.ПодписанЭП, ЛОЖЬ) КАК ВладелецПодписанЭП
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТипыИзвещений)
	|	И ЭДПрисоединенныеФайлы.СтатусЭД В(&СтатусыНеотправленногоЭД)";
	
	СтатусыНеотправленногоЭД = Новый Массив;
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	
	Запрос.УстановитьПараметр("СтатусыНеотправленногоЭД", СтатусыНеотправленногоЭД);
	ТипыИзвещений = Новый Массив;
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИОП);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД);
	Запрос.УстановитьПараметр("ТипыИзвещений", ТипыИзвещений);
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если Выборка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
		
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.Подписан Тогда
		
		Если Выборка.ВладелецПодписанЭП И Не Выборка.ПодписанЭП Тогда
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
		Иначе
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
		КонецЕсли;
		
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция определяет есть ли подтверждение о доставке для документов ФНС.
Функция ЕстьНепринятоеПодтверждение(ВладелецФайла, СостояниеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТипыИзвещений)";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	ТипыИзвещений = Новый Массив;
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИОП);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
	Запрос.УстановитьПараметр("ТипыИзвещений", ТипыИзвещений);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет является ли ЭД титулом.
Функция ЭтоТитулФНС(ДанныеЭД) Экспорт
	
	Результат = Ложь;
	Если ТипЗнч(ДанныеЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") 
		ИЛИ ТипЗнч(ДанныеЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЭД, "ВидЭД, ТипЭлементаВерсииЭД");
	Иначе
		РеквизитыЭД = Новый Структура("ВидЭД, ТипЭлементаВерсииЭД", ДанныеЭД);
	КонецЕсли;
	
	Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или (РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД)
		ИЛИ ((РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
			И (РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД)) Тогда
			
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Определяется является ли ЭД ответным титулом.
Функция ЭтоОтветныйТитул(ДанныеЭД) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(ДанныеЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЭД, "ТипЭлементаВерсииЭД");
	Иначе
		ТипЭлементаВерсииЭД = ДанныеЭД;
	КонецЕсли;
	
	Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
		Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
		Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ответный титул.
// Параметры:
//  ПервыйТитул - ЭД вида Торг-12 титул продавца, Акт титул исполнителя, СоглашениеОбИзмененииСтоимостиОтправитель
// Возвращаемое значение:
//  Ссылка на электронный документ вида Торг-12 титул покупателя, Акт титул заказчика, СоглашениеОбИзмененииСтоимостиПолучатель
//   если такой документ есть или неопределено, если документа нет.
//
Функция ВторойТитулДокумента(ПервыйТитул) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ВторойТитул
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&МассивТиповТитулов)";
	
	МассивТиповТитулов = Новый Массив;
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	Запрос.УстановитьПараметр("МассивТиповТитулов",МассивТиповТитулов);
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ПервыйТитул);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВторойТитул = Неопределено;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ВторойТитул = Выборка.ВторойТитул;
		
	КонецЕсли;
	
	Возврат ВторойТитул
	
КонецФункции

Функция ЭтоСчетНаОплату(СсылкаНаЭД)
	
	Результат = Ложь;
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоCMLДокумент(СсылкаНаЭД)
	
	Результат = Ложь;

	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		Или ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		Или ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		Или ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		Или ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		Или ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Выводит сообщение пользователю об отсутствии настройки ЭДО.
// Параметры
// СтруктураЭД - структура - параметры, которыми по которым ищется настройка ЭД
// Источник - ДокументСсылка, СправочникаСсылка - объект информационной базы, которому принадлежит э.д.
//
Процедура СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник)
	
	Если НЕ ОбменСКонтрагентамиПереопределяемый.ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Обработка %1.
								 |Операция не выполнена.
								 |Необходимо создать ""Настройку ЭДО"" с реквизитами:'");
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Источник);
	
	ТаблицаПараметров = Новый ТаблицаЗначений();
	ТаблицаПараметров.Колонки.Добавить("Ключ");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	ТаблицаПараметров.Колонки.Добавить("Порядок");
	
	ЭтоСчетФактураВыданный = Ложь;
	Если ПараметрыЭД.Свойство("ЭтоСчетФактураВыданный") И ЗначениеЗаполнено(ПараметрыЭД.ЭтоСчетФактураВыданный) Тогда
		ЭтоСчетФактураВыданный = ПараметрыЭД.ЭтоСчетФактураВыданный;
	КонецЕсли;
	
	Для Каждого ТекПараметр Из ПараметрыЭД Цикл
		
		Порядок = 0;
		Если НРег(ТекПараметр.Ключ) = НРег("Организация") Тогда
			Порядок = 1;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Партнер") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 2;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
			Порядок = 3;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ДоговорКонтрагента") Тогда
			Порядок = 4;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ВидЭД") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 5;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") И ЭтоСчетФактураВыданный Тогда
			Порядок = 0.5;
		КонецЕсли;
		
		Если Порядок > 0 Тогда
			СтрокаПараметров = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметров, ТекПараметр);
			Если ЭтоСчетФактураВыданный Тогда
				Если НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") Тогда
					СтрокаПараметров.Ключ = НСтр("ru = 'Способ обмена'");
					СтрокаПараметров.Значение = НСтр("ru = 'через оператора ЭДО'");
				ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
					СтрокаПараметров.Ключ = "Участник";
				КонецЕсли;
				ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				Если ТекПараметр.Ключ = "Организация" Тогда
					СтрокаПараметров.Ключ = "Организация-отправитель";
				ИначеЕсли ТекПараметр.Ключ = "Контрагент" Тогда
					СтрокаПараметров.Ключ = "Организация-получатель";
				КонецЕсли;
			КонецЕсли;
			СтрокаПараметров.Порядок = Порядок;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("Порядок");
	Для Каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		Если ЗначениеЗаполнено(СтрокаПараметров.Значение) Тогда
			Текст = Текст + Символы.ПС + НСтр("ru = '<%1>: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаПараметров.Ключ, СтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры

// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Процедура ПолучитьТекстНастроекОбменаПоСоглашению(ТекстЗапроса)
	
	ТекстЗапроса = ОбменСКонтрагентамиПереопределяемый.ПолучитьТекстНастроекОбменаПоСоглашению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЧ_Соглашения.Организация КАК Организация,
		|	ТЧ_Соглашения.Контрагент КАК Контрагент,
		|	ТЧ_Соглашения.ВидЭД,
		|	ТЧ_Соглашения.НаправлениеЭД,
		|	ТЧ_Соглашения.ИспользоватьЭП КАК Подписывать,
		|	ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ТЧ_Соглашения.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещение,
		|	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
		|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументов КАК КаталогИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументовFTP КАК КаталогИсходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.ЭлектроннаяПочтаКонтрагента КАК ЭлектроннаяПочтаКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ТЧ_Соглашения.Ссылка КАК Основание,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ТЧ_Соглашения.ВерсияРегламентаЭДО,
		|	ТЧ_Соглашения.ВерсияФормата,
		|	ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ТЧ_Соглашения.НастройкаЭДОДействует
		|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
		|ИЗ
		|	(ВЫБРАТЬ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Ссылка,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяОтветнаяПодпись КАК ТребуетсяПодтверждение,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|		&НаправлениеЭД КАК НаправлениеЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация КАК Организация,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
		|		ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20) КАК ВерсияРегламентаЭДО,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|		ВЫБОР
		|			КОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|					И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК НастройкаЭДОДействует
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|	ГДЕ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
		|		И ВЫБОР
		|				КОГДА &ЭтоСлужебныйЭД
		|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
		|				ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
		|			КОНЕЦ
		|		И ВЫБОР
		|				КОГДА &ТолькоДействующиеСоглашения
		|					ТОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ) КАК ТЧ_Соглашения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	ВидыЭДЭП.ВидЭД КАК ВидДокумента,
		|	Сертификаты.Организация КАК Организация,
		|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|				ПО ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СоглашенияЭДСертификаты.Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|				ПО ВТ_ТЧ_Соглашения.Основание = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
		|		ПО Сертификаты.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И ВидыЭДЭП.ВидЭД = &ВидЭД
		|	И Сертификаты.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)
		|	И ВидыЭДЭП.Использовать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТЧ_Соглашения.Организация,
		|	ВТ_ТЧ_Соглашения.Контрагент,
		|	ВТ_ТЧ_Соглашения.ВидЭД,
		|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
		|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
		|	ВТ_ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ВТ_ТЧ_Соглашения.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
		|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
		|	ВТ_ТЧ_Соглашения.ОбщийРесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.ЭлектроннаяПочтаКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
		|	ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
		|	ВЫБОР
		|		КОГДА &НаправлениеЭД <> ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
		|	ВТ_Сертификаты.ПарольПользователя,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОрганизацииПолучателя,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольОрганизацииПолучателяПолучен,
		|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОрганизацииПолучателя,
		|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО,
		|	ВТ_ТЧ_Соглашения.ВерсияФормата,
		|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ВТ_ТЧ_Соглашения.НастройкаЭДОДействует
		|ИЗ
		|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|			И (ВТ_Сертификаты.Организация = ВТ_ТЧ_Соглашения.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат.Отпечаток КАК Отпечаток,
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка КАК Соглашение
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
		|ГДЕ
		|	НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
		|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД";
	КонецЕсли;
	
КонецПроцедуры

// Получает текст запроса по настройкам обмена с приоритетами.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(ТекстЗапроса)
	
	ТекстЗапроса = ОбменСКонтрагентамиПереопределяемый.ПолучитьТекстЗапросаНастроекОбменаСПриоритетами();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЧ_Соглашения.Организация КАК Организация,
		|	ТЧ_Соглашения.Контрагент КАК Контрагент,
		|	ТЧ_Соглашения.ВидЭД,
		|	ТЧ_Соглашения.НаправлениеЭД,
		|	ТЧ_Соглашения.ИспользоватьЭП КАК Подписывать,
		|	ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ТЧ_Соглашения.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещение,
		|	ИСТИНА КАК ОжидатьКвитанциюОДоставке,
		|	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
		|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументов КАК КаталогИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументовFTP КАК КаталогИсходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.ЭлектроннаяПочтаКонтрагента КАК ЭлектроннаяПочтаКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ТЧ_Соглашения.Ссылка КАК Основание,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ТЧ_Соглашения.ВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
		|	ТЧ_Соглашения.Приоритет,
		|	ТЧ_Соглашения.ВерсияФормата,
		|	ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ТЧ_Соглашения.НастройкаЭДОДействует
		|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
		|ИЗ
		|	(ВЫБРАТЬ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Ссылка,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяОтветнаяПодпись КАК ТребуетсяПодтверждение,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|		&НаправлениеЭД КАК НаправлениеЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация КАК Организация,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
		|		ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20) КАК ВерсияРегламентаЭДО,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|		0 КАК Приоритет,
		|		ВЫБОР
		|			КОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|					И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК НастройкаЭДОДействует
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|	ГДЕ
		|		ВЫБОР
		|				КОГДА &ТолькоДействующиеСоглашения
		|					ТОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И ВЫБОР
		|				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
		|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		|						И ВЫБОР
		|							КОГДА &ЭтоСлужебныйЭД
		|								ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
		|							ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
		|						КОНЕЦ
		|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
		|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрайсЛист)
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|						И &Партнер
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ) КАК ТЧ_Соглашения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	ВидыЭДЭП.ВидЭД КАК ВидДокумента,
		|	Сертификаты.Организация КАК Организация,
		|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|				ПО ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СоглашенияЭДСертификаты.Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|				ПО ВТ_ТЧ_Соглашения.Основание = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
		|		ПО Сертификаты.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВидыЭДЭП.ВидЭД = &ВидЭД
		|		КОНЕЦ
		|	И Сертификаты.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)
		|	И ВидыЭДЭП.Использовать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТЧ_Соглашения.Приоритет КАК Приоритет,
		|	ВТ_ТЧ_Соглашения.Организация,
		|	ВТ_ТЧ_Соглашения.Контрагент,
		|	ВТ_ТЧ_Соглашения.ВидЭД,
		|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
		|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
		|	ВТ_ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ВТ_ТЧ_Соглашения.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ВТ_ТЧ_Соглашения.ОжидатьКвитанциюОДоставке КАК ОжидатьКвитанциюОДоставке,
		|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
		|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
		|	ВТ_ТЧ_Соглашения.ОбщийРесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.ЭлектроннаяПочтаКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
		|	ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|				ИЛИ ВТ_Сертификаты.Организация <> &Организация
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
		|	ВЫБОР
		|		КОГДА НЕ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
		|	ВТ_Сертификаты.ПарольПользователя,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОрганизацииПолучателя,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольОрганизацииПолучателяПолучен,
		|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОрганизацииПолучателя,
		|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО,
		|	ВТ_ТЧ_Соглашения.ВерсияФормата,
		|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ВТ_ТЧ_Соглашения.НастройкаЭДОДействует
		|ИЗ
		|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Организация = ВТ_Сертификаты.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|					И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВТ_ТЧ_Соглашения.НаправлениеЭД = &НаправлениеЭД
		|					И ВЫБОР
		|						КОГДА &ЭтоСлужебныйЭД
		|							ТОГДА ВЫБОР
		|									КОГДА &ДокументФНС
		|										ТОГДА ИСТИНА
		|									ИНАЧЕ ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭДВладельца
		|								КОНЕЦ
		|						ИНАЧЕ ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭД
		|					КОНЕЦ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		ТекстЗапросаПартнеры = "ИСТИНА";
		Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
			ТекстЗапросаПартнеры = "&Партнер <> НЕОПРЕДЕЛЕНО
			|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент.Партнер = &Партнер";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Партнер", ТекстЗапросаПартнеры);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавление нового параметра в ПараметрыКлиентаНаСервере.
//
// Параметры:
//  ИмяПараметра      - Произвольный - имя добавляемого параметра.
//  ЗначениеПараметра - Произвольный - значение добавляемого параметра.
//
Процедура ПоместитьПараметрВПараметрыКлиентаНаСервере(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиентаНаСервере = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	
	ПараметрыОбменСКонтрагентами = ПараметрыКлиентаНаСервере.Получить("ОбменСКонтрагентами");
	Если ПараметрыОбменСКонтрагентами = Неопределено ИЛИ ТипЗнч(ПараметрыОбменСКонтрагентами) <> Тип("ФиксированноеСоответствие") Тогда
		// Параметр еще не установлен.
		ПараметрыОбменСКонтрагентами = Новый Соответствие;
	Иначе
		ПараметрыОбменСКонтрагентами = Новый Соответствие(ПараметрыОбменСКонтрагентами);
	КонецЕсли;
	
	ПараметрыОбменСКонтрагентами.Вставить(ИмяПараметра, ПреобразоватьКоллекциюЗначенийВФиксированную(ЗначениеПараметра));
	ПараметрыКлиентаНаСервере.Вставить("ОбменСКонтрагентами", Новый ФиксированноеСоответствие(ПараметрыОбменСКонтрагентами));
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиентаНаСервере);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получение хранящегося в ПараметрыКлиентаНаСервере параметра.
//
// Параметры:
//   ИмяПараметра                  - Произвольный - имя добавляемого параметра.
//   УдалитьПараметрПослеПолучения - Булево - признак необходимости удаления параметра из ПараметрыКлиентаНаСервере,
//                                  после получения значения.
//
// Возвращаемое значение:
//   Произвольный, Неопределено - хранимое в параметре значение, если параметра с таким именем нет, то неопределено.
//
Функция ПараметрИзПараметрыКлиентаНаСервере(ИмяПараметра, УдалитьПараметрПослеПолучения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиентаНаСервере = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	
	ЗначениеПараметра = Неопределено;
	
	ПараметрыОбменСКонтрагентами = ПараметрыКлиентаНаСервере.Получить("ОбменСКонтрагентами");
	Если ТипЗнч(ПараметрыОбменСКонтрагентами) = Тип("ФиксированноеСоответствие") Тогда
		ЗначениеПараметра = ПараметрыОбменСКонтрагентами.Получить(ИмяПараметра);
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра = ПреобразоватьФиксированнуюКоллекциюЗначенийВПростую(ЗначениеПараметра);
			Если УдалитьПараметрПослеПолучения И ЗначениеПараметра <> Неопределено Тогда
				ПараметрыОбменСКонтрагентами = Новый Соответствие(ПараметрыОбменСКонтрагентами);
				ПараметрыОбменСКонтрагентами.Удалить(ИмяПараметра);
				ПараметрыКлиентаНаСервере.Вставить("ОбменСКонтрагентами", Новый ФиксированноеСоответствие(ПараметрыОбменСКонтрагентами));
				ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиентаНаСервере);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция ПреобразоватьКоллекциюЗначенийВФиксированную(ЗначениеПараметра)
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Соответствие") Тогда
		ВозвращаемоеЗначение = Новый ФиксированноеСоответствие(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
		ВозвращаемоеЗначение = Новый ФиксированнаяСтруктура(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		ВозвращаемоеЗначение = Новый ФиксированныйМассив(ЗначениеПараметра);
	Иначе
		ВозвращаемоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПреобразоватьФиксированнуюКоллекциюЗначенийВПростую(ЗначениеПараметра)
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("ФиксированноеСоответствие") Тогда
		ВозвращаемоеЗначение = Новый Соответствие(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ФиксированнаяСтруктура") Тогда
		ВозвращаемоеЗначение = Новый Структура(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ФиксированныйМассив") Тогда
		ВозвращаемоеЗначение = Новый Массив(ЗначениеПараметра);
	Иначе
		ВозвращаемоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Только для внутреннего использования
Функция АктуальнаяВерсияФорматаЭД(ВидЭД) Экспорт
	
	Результат = Неопределено;
	
	Макет                         = Обработки.ОбменСКонтрагентами.ПолучитьМакет("АктуальныеВерсииФорматовЭД");
	ОбластьАктуальныхВерсий       = Макет.ПолучитьОбласть("СписокАктуальныхВерсийФорматов");
	ОбластьАктуальныхВерсийВысота = ОбластьАктуальныхВерсий.ВысотаТаблицы;

	Для НСтр = 1 По ОбластьАктуальныхВерсийВысота Цикл
		
		Если ВидЭД = Перечисления.ВидыЭД[СокрЛП(ОбластьАктуальныхВерсий.Область(НСтр, 1).Текст)] Тогда
			
			Результат = СокрЛП(ОбластьАктуальныхВерсий.Область(НСтр, 2).Текст);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьПараметрыЭД(ДокументИБ, ПараметрыЭД)
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокументИБ)) Тогда
		СсылкаНаОбъект = ДокументИБ.Ссылка;
	Иначе
		СсылкаНаОбъект = ДокументИБ
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент КАК ЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.ЭД) Тогда
		ЭД = Выборка.ЭД;
		СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "Организация, Контрагент");
		
		ПараметрыЭД.Контрагент = СвойстваЭД.Контрагент;
		ПараметрыЭД.Организация = СвойстваЭД.Организация;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
