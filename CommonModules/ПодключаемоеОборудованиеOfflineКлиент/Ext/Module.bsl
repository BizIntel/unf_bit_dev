#Область ПрограммныйИнтерфейс

// Функция выгружает изменения данных товаров в оборудовании Offline.
//
// Параметры:
//  МассивУстройств          - Массив <СправочникСсылка.ПодключаемоеОборудование> ссылок на устройства в которые
//                             выгрузить изменения.
//  ТекстСообщения           - <Строка> Сообщение об ошибке при выгрузке данных
//  ПоказыватьПредупреждение - <Булево> Флаг, определяющий возможность показа предупреждения об окончании действия
//
// Возвращаемое значение:
//  <Число> - Количество устройств, выгрузка в которые произведена успешно.
//
Процедура АсинхронныйВыгрузитьТоварыВОборудованиеOffline(ТипОборудования, МассивУстройств, ТекстСообщения = "", ПоказыватьПредупреждение = Истина, ОповещениеОВыполнении, ТолькоИзмененные = Истина) Экспорт
	
	Состояние(НСтр("ru = 'Выполняется выгрузка товаров в оборудование Offline...'"));
	
	Выполнено = 0;
	ТекУстройство = 0;
	ТребуетсяВыполнить = МассивУстройств.Количество();
	
	ОписаниеОшибок = "";
	
	Для каждого ИдентификаторУстройства Из МассивУстройств Цикл
		
		ТекУстройство = ТекУстройство + 1;
		ЭтоПоследнееУстройство = ТекУстройство = ТребуетсяВыполнить;
		ОписаниеОшибки = "";
		ИдентификаторКлиента = Новый УникальныйИдентификатор;
		
		Если ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККМOffline") Тогда
			СтруктураДанные = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьДанныеДляКассы(ИдентификаторУстройства, ТолькоИзмененные);
		Иначе
			СтруктураДанные = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьДанныеДляВесов(ИдентификаторУстройства, ТолькоИзмененные);
		КонецЕсли;
		
		Если СтруктураДанные.Данные.Количество() = 0 Тогда
			Результат = Ложь;
			Если СтруктураДанные.КоличествоНеВыгруженныхСтрокСОшибками = 0 Тогда
				ОписаниеОшибок = СформироватьОписаниеОшибкиДляУстройства(ИдентификаторУстройства, Неопределено, ОписаниеОшибок, НСтр("ru = 'Нет данных для выгрузки!'"));
			Иначе
				ОписаниеОшибок = СформироватьОписаниеОшибкиДляУстройства(ИдентификаторУстройства, Неопределено, ОписаниеОшибок, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Данные не выгружены. Обнаружено ошибок: %1'"), СтруктураДанные.КоличествоНеВыгруженныхСтрокСОшибками));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ОповещенияПриЗавершении = Новый ОписаниеОповещения(
			"ВыгрузитьВОборудованиеОффлайнЗавершение",
			ЭтотОбъект,
			Новый Структура(
				"ОписаниеОшибок, Выполнено, ТребуетсяВыполнить, ИдентификаторУстройства, ИдентификаторКлиента, ЭтоПоследнееУстройство, ПоказыватьПредупреждение, ОповещениеОВыполнении, СтруктураДанные",
				ОписаниеОшибок, Выполнено, ТребуетсяВыполнить, ИдентификаторУстройства, ИдентификаторКлиента, ЭтоПоследнееУстройство, ПоказыватьПредупреждение, ОповещениеОВыполнении, СтруктураДанные 
			)
		);
		
		Если ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККМOffline") Тогда
			МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВККМOffline(
				ОповещенияПриЗавершении, // ОповещениеПриВыгрузкеДанные
				ИдентификаторКлиента, // УникальныйИдентификатор
				ИдентификаторУстройства, // ИдентификаторУстройства
				СтруктураДанные.Данные, // ТаблицаВыгрузкиТоваров
				СтруктураДанные.ЧастичнаяВыгрузка // ЧастичнаяВыгрузка
			);
		Иначе
			МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток(
				ОповещенияПриЗавершении, // ОповещениеПриЗавершении
				ИдентификаторКлиента, // УникальныйИдентификатор
				СтруктураДанные.Данные, // ТаблицаВыгрузкиТоваров
				ИдентификаторУстройства, // ИдентификаторУстройства
				СтруктураДанные.ЧастичнаяВыгрузка // ЧастичнаяВыгрузка
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция очищает список товаров в оборудовании Offline.
//
// Параметры:
//  МассивУстройств          - Массив <СправочникСсылка.ПодключаемоеОборудование> ссылок на устройства в которые
//                             выгрузить изменения.
//  ТекстСообщения           - <Строка> Сообщение об ошибке при выгрузке данных
//  ПоказыватьПредупреждение - <Булево> Флаг, определяющий возможность показа предупреждения об окончании действия
//
// Возвращаемое значение:
//  <Число> - Количество устройств, выгрузка в которые произведена успешно.
//
Процедура АсинхронныйОчиститьТоварыВОборудованиеOffline(ТипОборудования, МассивУстройств, ТекстСообщения = "", ПоказыватьПредупреждение = Истина, ОповещениеОВыполнении) Экспорт
	
	Состояние(НСтр("ru = 'Выполняется очистка товаров в оборудовании Offline...'"));
	
	Выполнено = 0;
	ТекУстройство = 0;
	ТребуетсяВыполнить = МассивУстройств.Количество();
	
	ОписаниеОшибок = "";
	
	Для каждого ИдентификаторУстройства Из МассивУстройств Цикл
		
		ТекУстройство = ТекУстройство + 1;
		ЭтоПоследнееУстройство = ТекУстройство = ТребуетсяВыполнить;
		ОписаниеОшибки     = "";
		ИдентификаторКлиента = Новый УникальныйИдентификатор;
		
		ОповещенияПриЗавершении = Новый ОписаниеОповещения(
			"ОчиститьБазуОборудованиеОффлайнЗавершение",
			ЭтотОбъект,
			Новый Структура(
				"ОписаниеОшибок, Выполнено, ТребуетсяВыполнить, ИдентификаторУстройства, ИдентификаторКлиента, ЭтоПоследнееУстройство, ПоказыватьПредупреждение, ОповещениеОВыполнении",
				ОписаниеОшибок, Выполнено, ТребуетсяВыполнить, ИдентификаторУстройства, ИдентификаторКлиента, ЭтоПоследнееУстройство, ПоказыватьПредупреждение, ОповещениеОВыполнении
			)
		);
		Если ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККМOffline") Тогда
			МенеджерОборудованияКлиент.НачатьОчисткуТоваровВККМOffline(
				ОповещенияПриЗавершении,
				ИдентификаторКлиента,
				ИдентификаторУстройства
			);
		Иначе
			МенеджерОборудованияКлиент.НачатьОчисткуТоваровВВесахСПечатьюЭтикеток(
				ОповещенияПриЗавершении,
				ИдентификаторКлиента,
				ИдентификаторУстройства
			);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция очищает список товаров в ККМ Offline.
//
// Параметры:
//  МассивУстройств          - Массив <СправочникСсылка.ПодключаемоеОборудование> ссылок на устройства в которые
//                             выгрузить изменения.
//  ТекстСообщения           - <Строка> Сообщение об ошибке при выгрузке данных
//  ПоказыватьПредупреждение - <Булево> Флаг, определяющий возможность показа предупреждения об окончании действия
//
// Возвращаемое значение:
//  <Число> - Количество устройств, выгрузка в которые произведена успешно.
//
Процедура АсинхронныйЗагрузитьОтчетОРозничныхПродажах(МассивУстройств, ТекстСообщения = "", ПоказыватьПредупреждение = Истина, ОповещениеОВыполнении) Экспорт
	
	Состояние(НСтр("ru = 'Выполняется загрузка отчетов о розничных продажах из ККМ Offline...'"));
	
	ОтчетыОРозничныхПродажах = Новый Массив;
	
	Выполнено = 0;
	ТекУстройство = 0;
	ТребуетсяВыполнить = МассивУстройств.Количество();
	
	ОписаниеОшибок = "";
	
	Для каждого ИдентификаторУстройства Из МассивУстройств Цикл
		
		ТекУстройство = ТекУстройство + 1;
		ЭтоПоследнееУстройство = ТекУстройство = ТребуетсяВыполнить;
		ОписаниеОшибки  = "";
		ИдентификаторКлиента = Новый УникальныйИдентификатор;
		
		ОповещенияПриЗавершении = Новый ОписаниеОповещения(
			"ЗагрузитьОтчетККМОффлайнЗавершение",
			ЭтотОбъект,
			Новый Структура(
				"ОписаниеОшибок, Выполнено, ТребуетсяВыполнить, ИдентификаторУстройства, ИдентификаторКлиента, ЭтоПоследнееУстройство, ПоказыватьПредупреждение, ОповещениеОВыполнении, ОтчетыОРозничныхПродажах",
				ОписаниеОшибок, Выполнено, ТребуетсяВыполнить, ИдентификаторУстройства, ИдентификаторКлиента, ЭтоПоследнееУстройство, ПоказыватьПредупреждение, ОповещениеОВыполнении, ОтчетыОРозничныхПродажах
			)
		);
		МенеджерОборудованияКлиент.НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOffline(
			ОповещенияПриЗавершении,
			ИдентификаторКлиента,
			ИдентификаторУстройства
		);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыгрузитьВОборудованиеОффлайнЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		Параметры.Выполнено = Параметры.Выполнено + 1;
	Иначе
		Параметры.ОписаниеОшибок = СформироватьОписаниеОшибкиДляУстройства(Параметры.ИдентификаторУстройства, Неопределено, Параметры.ОписаниеОшибок, Результат.ОписаниеОшибки);
	КонецЕсли;
	
	ПодключаемоеОборудованиеOfflineВызовСервера.ПриВыгрузкеТоваровВУстройство(Параметры.ИдентификаторУстройства, Параметры.СтруктураДанные, Результат.Результат);
	
	Если Параметры.ЭтоПоследнееУстройство Тогда
		АсинхронныйВыгрузитьТоварыВОборудованиеOfflineФрагмент(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьБазуОборудованиеОффлайнЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		Параметры.Выполнено = Параметры.Выполнено + 1;
	Иначе
		Параметры.ОписаниеОшибок = СформироватьОписаниеОшибкиДляУстройства(Параметры.ИдентификаторУстройства, Неопределено, Параметры.ОписаниеОшибок, Результат.ОписаниеОшибки);
	КонецЕсли;
	
	ПодключаемоеОборудованиеOfflineВызовСервера.ПриОчисткеТоваровВУстройстве(Параметры.ИдентификаторУстройства, Результат.Результат);
	
	Если Параметры.ЭтоПоследнееУстройство Тогда
		АсинхронныйОчиститьТоварыВОборудованиеOfflineФрагмент(Параметры);
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьОтчетККМОффлайнЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОтчетыОРозничныхПродажах = ПодключаемоеОборудованиеOfflineВызовСервера.ПриЗагрузкеОтчетаОРозничныхПродажах(Параметры.ИдентификаторУстройства, Результат.ТаблицаТоваров);
		Если ЗначениеЗаполнено(ОтчетыОРозничныхПродажах)
			И ТипЗнч(ОтчетыОРозничныхПродажах) = Тип("Массив")
			И ОтчетыОРозничныхПродажах.Количество() > 0 Тогда
			МенеджерОборудованияКлиент.НачатьВыставитьФлагОтчетЗагруженККМOffline(
				Параметры.ИдентификаторКлиента,
				Параметры.ИдентификаторУстройства
			);
			Для каждого ТекОтчет Из ОтчетыОРозничныхПродажах Цикл
				Параметры.ОтчетыОРозничныхПродажах.Добавить(ТекОтчет);
			КонецЦикла;
			Параметры.Выполнено = Параметры.Выполнено + 1;
		КонецЕсли;
	Иначе
		Параметры.ОписаниеОшибок = СформироватьОписаниеОшибкиДляУстройства(Параметры.ИдентификаторУстройства, Неопределено, Параметры.ОписаниеОшибок, Результат.ОписаниеОшибки);
	КонецЕсли;
	
	Если Параметры.ЭтоПоследнееУстройство Тогда
		АсинхронныйЗагрузитьОтчетОРозничныхПродажахФрагмент(Параметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьОписаниеОшибкиДляУстройства(ИдентификаторУстройства, ВыходныеПараметры, ОписаниеОшибок, ОписаниеОшибки)
	
	Возврат ОписаниеОшибок
	      + Символы.ПС
	      + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Описание ошибок для устройства %1: %2'"), ИдентификаторУстройства, ОписаниеОшибки)
	      + ?(ВыходныеПараметры <> Неопределено, Символы.ПС + ВыходныеПараметры[1], "");
	
КонецФункции

Процедура АсинхронныйВыгрузитьТоварыВОборудованиеOfflineФрагмент(Параметры)
	
	Если Параметры.ТребуетсяВыполнить > 0 Тогда
		
		Если Параметры.Выполнено = Параметры.ТребуетсяВыполнить Тогда
			ТекстСообщения = НСтр("ru = 'Товары успешно выгружены!'");
		ИначеЕсли Параметры.Выполнено > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Товары успешно выгружены для %1 устройств из %2.'"), Параметры.Выполнено, Параметры.ТребуетсяВыполнить) + Параметры.ОписаниеОшибок;
		Иначе
			ТекстСообщения = НСтр("ru = 'Выгрузить товары не удалось:'") + Параметры.ОписаниеОшибок;
		КонецЕсли;
		
		Если Параметры.ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено, ТекстСообщения, 10);
		КонецЕсли;
		
	Иначе
		Если Параметры.ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо выбрать устройство, для которого требуется выгрузить товары.'"), 10);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОповещениеОВыполнении, Параметры.Выполнено > 0);
	
Конецпроцедуры

Процедура АсинхронныйОчиститьТоварыВОборудованиеOfflineФрагмент(Параметры)
	
	Если Параметры.ТребуетсяВыполнить > 0 Тогда
		
		Если Параметры.Выполнено = Параметры.ТребуетсяВыполнить Тогда
			ТекстСообщения = НСтр("ru = 'Товары успешно очищены!'");
		ИначеЕсли Параметры.Выполнено > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Товары успешно очищены для %1 устройств из %2. %3'"), Параметры.Выполнено, Параметры.ТребуетсяВыполнить, Параметры.ОписаниеОшибок);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Очистить товары не удалось: %1'"), Параметры.ОписаниеОшибок);
		КонецЕсли;
		
		Если Параметры.ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено, ТекстСообщения, 10);
		КонецЕсли;
		
	Иначе
		Если Параметры.ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо выбрать устройство, для которого требуется очистить товары.'"), 10);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОповещениеОВыполнении, Параметры.Выполнено > 0);
	
КонецПроцедуры

Процедура АсинхронныйЗагрузитьОтчетОРозничныхПродажахФрагмент(Параметры)
	
	Если Параметры.ТребуетсяВыполнить > 0 Тогда
		
		Если Параметры.Выполнено = Параметры.ТребуетсяВыполнить Тогда
			ТекстСообщения = НСтр("ru = 'Отчеты о розничных продажах успешно загружены!'");
		ИначеЕсли Параметры.Выполнено > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Успешно загружены отчеты о розничных продажах для %1 устройств из %2.'"), Параметры.Выполнено, Параметры.ТребуетсяВыполнить) + Параметры.ОписаниеОшибок;
		Иначе
			ТекстСообщения = НСтр("ru = 'Отчеты о розничных продажах загрузить не удалось:'") + Параметры.ОписаниеОшибок;
		КонецЕсли;
		
		Для каждого ОтчетОРозничныхПродажах Из Параметры.ОтчетыОРозничныхПродажах Цикл
			ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", Новый Структура("Ключ, ПровестиПриОткрытии", ОтчетОРозничныхПродажах, Истина));
		КонецЦикла;
		
		Если Параметры.ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено, ТекстСообщения, 10);
		КонецЕсли;
		
	Иначе
		Если Параметры.ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо выбрать устройство, для которого требуется очистить товары.'"), 10);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОповещениеОВыполнении, Параметры.Выполнено > 0);
	
КонецПроцедуры

#КонецОбласти


