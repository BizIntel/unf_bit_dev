////////////////////////////////////////////////////////////////////////////////
// Подсистема "Операции с файлами (служебный)".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СоздатьДвоичныеДанные

Процедура СоздатьДвоичныеДанные(ОповещениеОЗавершении, ВыводитьСообщения, ПослеУстановки = Ложь) Экспорт
	
	Попытка
		ДвоичныеДанные = Новый("Addin.ЭДОNative.BinaryDataS");
	Исключение
		ДвоичныеДанные = Неопределено;
	КонецПопытки;
	
	Если ДвоичныеДанные = Неопределено Тогда // компонента еще не подключена
		ПутьВК = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПутьВК();
		
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Контекст.Вставить("ПутьВК", ПутьВК);
		Контекст.Вставить("ПослеУстановки", ПослеУстановки);
		Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
		
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьДвоичныеДанныеПослеПодключенияКомпоненты", ЭтотОбъект, Контекст);
		НачатьПодключениеВнешнейКомпоненты(Оповещение, ПутьВК, "ЭДОNative");
	Иначе
		Результат = ПодготовитьРезультат(Истина, "ДвоичныеДанные", ДвоичныеДанные);
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	КонецЕсли;
			
КонецПроцедуры

Процедура СоздатьДвоичныеДанныеПослеПодключенияКомпоненты(Подключена, ВходящийКонтекст) Экспорт
	
	Если Подключена Тогда
		Результат = ПодготовитьРезультат(Истина, "ДвоичныеДанные", Новый("Addin.ЭДОNative.BinaryDataS"));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	Иначе
		Если ВходящийКонтекст.ПослеУстановки Тогда
			// Побробовали установить компоненту, но не вышло
			
			ОписаниеОшибки = ОписаниеОшибкиНеУдалосьСоздатьОбъектДвоичныеДанные();
			ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
			
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении, 
				ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки));
		Иначе
			// Возможно компонента еще не установлена
			Оповещение = Новый ОписаниеОповещения(
				"СоздатьДвоичныеДанныеПослеУстановкиКомпоненты", ЭтотОбъект, ВходящийКонтекст);
			НачатьУстановкуВнешнейКомпоненты(Оповещение, ВходящийКонтекст.ПутьВК);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьДвоичныеДанныеПослеУстановкиКомпоненты(ВходящийКонтекст) Экспорт
	
	СоздатьДвоичныеДанные(ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст.ВыводитьСообщения, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область КаталогВременныхФайловНаКлиенте

Процедура КаталогВременныхФайловНаКлиенте(ОповещениеОЗавершении, ВыводитьСообщения, ДвоичныеДанные) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(
		"КаталогВременныхФайловНаКлиентеПослеПодключенияРасширенияРаботыСФайлами", Контекст, Ложь);
	
КонецПроцедуры

Процедура КаталогВременныхФайловНаКлиентеПослеПодключенияРасширенияРаботыСФайлами(Подключено, ВходящийКонтекст) Экспорт
	
	Если Подключено Тогда
		#Если ВебКлиент Тогда
			ПредварительноСоздатьДвоичныеДанные(
				ВходящийКонтекст.ОповещениеОЗавершении, "КаталогВременныхФайловНаКлиентеПослеСозданияДвоичныхДанных",
				,
				ВходящийКонтекст.ДвоичныеДанные,
				ВходящийКонтекст.ВыводитьСообщения);
		#Иначе
			Оповещение = Новый ОписаниеОповещения(
				"КаталогВременныхФайловНаКлиентеПослеПолученияКаталогаВременныхФайлов", ЭтотОбъект, ВходящийКонтекст);
				
			НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
		#КонецЕсли
	Иначе
		ОписаниеОшибки = ОписаниеОшибкиРасширениеДляРаботыСФайламиНеПодключено();
		ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогВременныхФайловНаКлиентеПослеСозданияДвоичныхДанных(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ДвоичныеДанные", Результат.ДвоичныеДанные);
		
		Оповещение = Новый ОписаниеОповещения(
			"КаталогВременныхФайловНаКлиентеПослеВызоваПолучитьКаталогВременныхФайлов", ЭтотОбъект, ВходящийКонтекст,
			"КаталогВременныхФайловНаКлиентеПриОшибкеВызоваПолучитьКаталогВременныхФайлов", ЭтотОбъект);
		ВходящийКонтекст.ДвоичныеДанные.НачатьВызовПолучитьКаталогВременныхФайлов(Оповещение);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогВременныхФайловНаКлиентеПослеВызоваПолучитьКаталогВременныхФайлов(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Результат = СокрЛП(Результат);
	Если ЗначениеЗаполнено(Результат) Тогда
		Если НЕ СтрНайти("\/", Прав(Результат, 1)) Тогда
			Результат = Результат + ПолучитьРазделительПути();		
		КонецЕсли;
	КонецЕсли;
	
	КаталогВременныхФайловНаКлиентеПослеПолученияКаталогаВременныхФайлов(Результат, ВходящийКонтекст);
	
КонецПроцедуры

Процедура КаталогВременныхФайловНаКлиентеПриОшибкеВызоваПолучитьКаталогВременныхФайлов(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		ИмяСобытия(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),, Истина);
		
	КаталогВременныхФайловНаКлиентеПослеПолученияКаталогаВременныхФайлов(Неопределено, ВходящийКонтекст);
	
КонецПроцедуры

Процедура КаталогВременныхФайловНаКлиентеПослеПолученияКаталогаВременныхФайлов(ИмяКаталогаВременныхФайлов, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(ИмяКаталогаВременныхФайлов) Тогда
		Результат = ПодготовитьРезультат(Истина, "ИмяКаталога", ИмяКаталогаВременныхФайлов, ВходящийКонтекст);
	Иначе
		ОписаниеОшибки = ОписаниеОшибкиНеПолученКаталогВременныхФайлов();
		ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
		Результат = ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст);		
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьИмяВременногоФайлаНаКлиенте

Процедура ПолучитьИмяВременногоФайлаНаКлиенте(ОповещениеОЗавершении, Расширение, ВыводитьСообщения, ДвоичныеДанные) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("Расширение", Расширение);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьИмяВременногоФайлаНаКлиентеПослеПолученияКаталогаВременныхФайлов", ЭтотОбъект, Контекст);
	КаталогВременныхФайловНаКлиенте(Оповещение, ВыводитьСообщения, ДвоичныеДанные);	
	
КонецПроцедуры

Процедура ПолучитьИмяВременногоФайлаНаКлиентеПослеПолученияКаталогаВременныхФайлов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Расширение = СтрЗаменить(ВходящийКонтекст.Расширение, ".", "");
		Если Не ЗначениеЗаполнено(Расширение) Тогда
			Расширение = "bin";
		КонецЕсли;
		ИмяВременногоФайла = Результат.ИмяКаталога + СтрЗаменить(Новый УникальныйИдентификатор, "-", "") + "." + Расширение;
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "ИмяФайла", ИмяВременногоФайла, ВходящийКонтекст));
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СоздатьКаталогНаКлиенте

Процедура СоздатьКаталогНаКлиенте(ОповещениеОЗавершении, ВыводитьСообщения, ДвоичныеДанные) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	Оповещение = Новый ОписаниеОповещения("СоздатьКаталогНаКлиентеПослеПолученияКаталогаВременныхФайлов", ЭтотОбъект, Контекст);
	КаталогВременныхФайловНаКлиенте(Оповещение, ВыводитьСообщения, ДвоичныеДанные);
	
КонецПроцедуры

Процедура СоздатьКаталогНаКлиентеПослеПолученияКаталогаВременныхФайлов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ИмяНовогоКаталога = Результат.ИмяКаталога + СтрЗаменить(НРег(Новый УникальныйИдентификатор), "-", "") + ПолучитьРазделительПути();
		
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("ДвоичныеДанные", Результат.ДвоичныеДанные);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ИмяКаталога", ИмяНовогоКаталога);
		
		#Если ВебКлиент Тогда
			ПредварительноСоздатьДвоичныеДанные(
				ВходящийКонтекст.ОповещениеОЗавершении, "СоздатьКаталогНаКлиентеПослеСозданияДвоичныхДанных",
				Контекст,
				Результат.ДвоичныеДанные,
				ВходящийКонтекст.ВыводитьСообщения);
		#Иначе
			Оповещение = Новый ОписаниеОповещения(
				"СоздатьКаталогНаКлиентеПослеСозданияКаталога", ЭтотОбъект, Контекст);
			НачатьСозданиеКаталога(Оповещение, ИмяНовогоКаталога);
		#КонецЕсли
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКаталогНаКлиентеПослеСозданияДвоичныхДанных(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ДвоичныеДанные", Результат.ДвоичныеДанные);
		
		ИмяНовогоКаталога = ВходящийКонтекст.ВходящиеПараметры.ИмяКаталога;
		ВходящийКонтекст.Вставить("ИмяКаталога", ИмяНовогоКаталога);
		
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьКаталогНаКлиентеПослеВызоваСоздатьКаталог", ЭтотОбъект, ВходящийКонтекст,
			"СоздатьКаталогНаКлиентеПриОшибкеВызоваСоздатьКаталог", ЭтотОбъект);
		ВходящийКонтекст.ДвоичныеДанные.НачатьВызовСоздатьКаталог(Оповещение, ИмяНовогоКаталога);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКаталогНаКлиентеПослеВызоваСоздатьКаталог(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	СоздатьКаталогНаКлиентеПослеСозданияКаталога(ВходящийКонтекст.ИмяКаталога, ВходящийКонтекст);
	
КонецПроцедуры

Процедура СоздатьКаталогНаКлиентеПриОшибкеВызоваСоздатьКаталог(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		ИмяСобытия(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),, Истина);
	
	ОписаниеОшибки = ОписаниеОшибкиНеУдалосьСоздатьКаталог();
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст));
	
КонецПроцедуры

Процедура СоздатьКаталогНаКлиентеПослеСозданияКаталога(ИмяКаталога, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "ИмяКаталога", ВходящийКонтекст.ИмяКаталога, ВходящийКонтекст));
	
КонецПроцедуры

#КонецОбласти

#Область УдалитьФайлыНаКлиенте

Процедура УдалитьФайлыНаКлиенте(ОповещениеОЗавершении, Путь, ВыводитьСообщения) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("Путь", Путь);
	
	Если ЗначениеЗаполнено(Путь) Тогда		
		#Если ВебКлиент Тогда
			// FIX: Пока ничего не делаем, иначе окна с вопросам об удалении мешают
			
		#Иначе				
			Оповещение = Новый ОписаниеОповещения(
				"УдалитьФайлыНаКлиентеПослеУдаления", ЭтотОбъект, Контекст,
				"УдалитьФайлыНаКлиентеПриОшибкеУдаления", ЭтотОбъект);
					
			НачатьУдалениеФайлов(Оповещение, Путь);	
		#КонецЕсли
    Иначе
		УдалитьФайлыНаКлиентеПослеУдаления(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьФайлыНаКлиентеПослеУдаления(ВходящийКонтекст) Экспорт
	
	Если ВходящийКонтекст.ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина,,, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьФайлыНаКлиентеПриОшибкеУдаления(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = ОписаниеОшибкиНеУдалосьУдалитьФайл(ВходящийКонтекст.Путь, ИнформацияОбОшибке);
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия(), "Ошибка", ОписаниеОшибки,, Истина);
		
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
	Если ВходящийКонтекст.ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФайлВBase64

Процедура ФайлВBase64(ОповещениеОЗавершении, ИмяФайла, ВыводитьСообщения, ДвоичныеДанные) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(1, ИмяФайла);
	
	ПредварительноСоздатьДвоичныеДанные(
		ОповещениеОЗавершении, "ФайлВBase64ПослеСозданияДвоичныхДанных", ВходящиеПараметры,
		ДвоичныеДанные, ВыводитьСообщения);
	
КонецПроцедуры

Процедура ФайлВBase64ПослеСозданияДвоичныхДанных(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ДвоичныеДанные", Результат.ДвоичныеДанные);
		ВходящийКонтекст.Вставить("ИмяФайла", ВходящийКонтекст.ВходящиеПараметры[0]);
		
		Оповещение = Новый ОписаниеОповещения("ФайлВBase64ПослеПолученияСвойствФайла", ЭтотОбъект, ВходящийКонтекст);
		ПолучитьСвойстваФайла(Оповещение, ВходящийКонтекст.ИмяФайла);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ФайлВBase64ПослеПолученияСвойствФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Если Результат.СвойстваФайла.Существует Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ФайлВBase64ПослеЧтенияФайла", ЭтотОбъект, ВходящийКонтекст,
				"ФайлВBase64ПриОшибкеЧтенияФайла", ЭтотОбъект);
			ВходящийКонтекст.ДвоичныеДанные.НачатьВызовПрочитать(Оповещение, ВходящийКонтекст.ВходящиеПараметры[0]);
		Иначе
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении, 
				ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиФайлНеСуществует(ВходящийКонтекст.ИмяФайла)));	
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ФайлВBase64ПослеЧтенияФайла(Результат, Параметры, ВходящийКонтекст) Экспорт

	Оповещение = Новый ОписаниеОповещения(
		"ФайлВBase64ПослеПреобразованияВBase64", ЭтотОбъект, ВходящийКонтекст,
		"ФайлВBase64ПриОшибкеПреобразованияВBase64", ЭтотОбъект);
	
	ВходящийКонтекст.ДвоичныеДанные.НачатьВызовПолучитьСтрокуBase64(Оповещение);
	
КонецПроцедуры

Процедура ФайлВBase64ПриОшибкеЧтенияФайла(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "Прочитать",
		ОписаниеОшибкиОшибкаСохраненияФайла(ВходящийКонтекст.ИмяФайла));
		
КонецПроцедуры

Процедура ФайлВBase64ПослеПреобразованияВBase64(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Попытка
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "СтрокаBase64", Результат, ВходящийКонтекст));
	Исключение
		ВходящийКонтекст.Вставить("СтандартнаяОбработкаИсключения", Истина);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ФайлВBase64ПриОшибкеПреобразованияВBase64(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "ПолучитьСтрокуBase64",
		ОписаниеОшибкиОшибкаСохраненияФайла(ВходящийКонтекст.ИмяФайла));

КонецПроцедуры

#КонецОбласти

#Область Base64ВФайл

Процедура Base64ВФайл(ОповещениеОЗавершении, СтрокаBase64, ИмяФайлаИлиРасширение, ВыводитьСообщения, ДвоичныеДанные) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, СтрокаBase64, ИмяФайлаИлиРасширение);
	
	ПредварительноСоздатьДвоичныеДанные(
		ОповещениеОЗавершении, "Base64ВФайлПослеСозданияДвоичныхДанных", ВходящиеПараметры,
		ДвоичныеДанные, ВыводитьСообщения);
		
КонецПроцедуры

Процедура Base64ВФайлПослеСозданияДвоичныхДанных(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ДвоичныеДанные = Результат.ДвоичныеДанные;
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		
		Контекст = Новый Структура;
		Контекст.Вставить("ДвоичныеДанные", ДвоичныеДанные);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		
		Оповещение = Новый ОписаниеОповещения("Base64ВФайлПослеПолученияИмениФайла", ЭтотОбъект, Контекст);
		Если ЗначениеЗаполнено(ВходящиеПараметры[1]) И Лев(ВходящиеПараметры[1], 1) <> "." Тогда
			ВыполнитьОбработкуОповещения(
				Оповещение,
				ПодготовитьРезультат(Истина, "ИмяФайла", ВходящиеПараметры[1], Контекст));
		Иначе
			ПолучитьИмяВременногоФайлаНаКлиенте(Оповещение, ВходящиеПараметры[1], ВходящийКонтекст.ВыводитьСообщения, ДвоичныеДанные);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура Base64ВФайлПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайла", Результат.ИмяФайла);
		Оповещение = Новый ОписаниеОповещения(
			"Base64ВФайлПослеВыполненияДобавитьИзСтрокиBase64", ЭтотОбъект, ВходящийКонтекст,
			"Base64ВФайлПриОшибкеВыполненияДобавитьИзСтрокиBase64", ЭтотОбъект);
			
		ВходящийКонтекст.ДвоичныеДанные.НачатьВызовДобавитьИзСтрокиBase64(
			Оповещение, ВходящийКонтекст.ВходящиеПараметры[0], Ложь);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры
		
Процедура Base64ВФайлПослеВыполненияДобавитьИзСтрокиBase64(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"Base64ВФайлПослеВыполненияЗаписать", ЭтотОбъект, ВходящийКонтекст,
		"Base64ВФайлПриОшибкеВыполненияЗаписать", ЭтотОбъект);
	ВходящийКонтекст.ДвоичныеДанные.НачатьВызовЗаписать(Оповещение, ВходящийКонтекст.ИмяФайла, 0);
	
КонецПроцедуры

Процедура Base64ВФайлПриОшибкеВыполненияДобавитьИзСтрокиBase64(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
		
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "ДобавитьИзСтрокиBase64",
		ОписаниеОшибкиОшибкаСохраненияФайла(ВходящийКонтекст.ИмяФайла));
		
КонецПроцедуры

Процедура Base64ВФайлПослеВыполненияЗаписать(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "ИмяФайла", Параметры[0], ВходящийКонтекст));
	
КонецПроцедуры

Процедура Base64ВФайлПриОшибкеВыполненияЗаписать(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
		
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "Записать",
		ОписаниеОшибкиОшибкаСохраненияФайла(ВходящийКонтекст.ИмяФайла));
		
КонецПроцедуры

#КонецОбласти

#Область ФайлВТекст

Процедура ФайлВТекст(ОповещениеОЗавершении, ИмяФайла, КодировкаТекста, ВыводитьСообщения, ДвоичныеДанные) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, ИмяФайла, КодировкаТекста);
	
	ПредварительноСоздатьДвоичныеДанные(
		ОповещениеОЗавершении, "ФайлВТекстПослеСозданияДвоичныхДанных", ВходящиеПараметры,
		ДвоичныеДанные, ВыводитьСообщения);
	
КонецПроцедуры

Процедура ФайлВТекстПослеСозданияДвоичныхДанных(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ДвоичныеДанные = Результат.ДвоичныеДанные;
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		
		Контекст = Новый Структура;
		Контекст.Вставить("ДвоичныеДанные", ДвоичныеДанные);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		
		Оповещение = Новый ОписаниеОповещения(
			"ФайлВТекстПослеЧтенияФайла", ЭтотОбъект, Контекст,
			"ФайлВТекстПриОшибкеЧтенияФайла", ЭтотОбъект);
		ДвоичныеДанные.НачатьВызовПрочитать(Оповещение, ВходящиеПараметры[0]);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ФайлВТекстПослеЧтенияФайла(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ФайлВТекстПослеПолученияЗначенияСвойстваРазмер", ЭтотОбъект, ВходящийКонтекст,
		"ФайлВТекстПриОшибкеПолученияЗначенияСвойстваРазмер", ЭтотОбъект);
	
	ВходящийКонтекст.ДвоичныеДанные.НачатьПолучениеРазмер(Оповещение);
	
КонецПроцедуры

Процедура ФайлВТекстПриОшибкеЧтенияФайла(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "Прочитать",
		ОписаниеОшибкиОшибкаЧтенияФайла(ВходящийКонтекст.ВходящиеПараметры[0]));
		
КонецПроцедуры

Процедура ФайлВТекстПослеПолученияЗначенияСвойстваРазмер(Размер, ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ФайлВТекстПослеПолученияСтроки", ЭтотОбъект, ВходящийКонтекст,
		"ФайлВТекстПриОшибкеПолученияСтроки", ЭтотОбъект);
	
	ВходящийКонтекст.ДвоичныеДанные.НачатьВызовПолучитьСтроку(Оповещение, Размер, ВходящийКонтекст.ВходящиеПараметры[1]);
	
КонецПроцедуры

Процедура ФайлВТекстПриОшибкеПолученияЗначенияСвойстваРазмер(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "Размер",
		ОписаниеОшибкиОшибкаЧтенияФайла(ВходящийКонтекст.ВходящиеПараметры[0]));
		
КонецПроцедуры

Процедура ФайлВТекстПослеПолученияСтроки(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Попытка
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "Текст", Результат, ВходящийКонтекст));
	Исключение
		ВходящийКонтекст.Вставить("СтандартнаяОбработкаИсключения", Истина);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ФайлВТекстПриОшибкеПолученияСтроки(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "ПолучитьСтроку",
		ОписаниеОшибкиОшибкаЧтенияФайла(ВходящийКонтекст.ВходящиеПараметры[0]), ИнформацияОбОшибке);
		
КонецПроцедуры

#КонецОбласти

#Область ТекстВФайл

Процедура ТекстВФайл(ОповещениеОЗавершении, Текст, ИмяФайлаИлиРасширение, ВыводитьСообщения, ДвоичныеДанные) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, Текст, ИмяФайлаИлиРасширение);
	
	ПредварительноСоздатьДвоичныеДанные(
		ОповещениеОЗавершении, "ТекстВФайлПослеСозданияДвоичныхДанных", ВходящиеПараметры,
		ДвоичныеДанные, ВыводитьСообщения);
		
КонецПроцедуры

Процедура ТекстВФайлПослеСозданияДвоичныхДанных(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ДвоичныеДанные = Результат.ДвоичныеДанные;
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		
		Контекст = Новый Структура;
		Контекст.Вставить("ДвоичныеДанные", ДвоичныеДанные);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		
		Оповещение = Новый ОписаниеОповещения("ТекстВФайлПослеПолученияИмениФайла", ЭтотОбъект, Контекст);
		
		Если ЗначениеЗаполнено(ВходящиеПараметры[1]) И Лев(ВходящиеПараметры[1], 1) <> "." Тогда
			ВыполнитьОбработкуОповещения(
				Оповещение,
				ПодготовитьРезультат(Истина, "ИмяФайла", ВходящиеПараметры[1], Контекст));
		Иначе
			ПолучитьИмяВременногоФайлаНаКлиенте(Оповещение, ВходящиеПараметры[1], ВходящийКонтекст.ВыводитьСообщения, ДвоичныеДанные);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ТекстВФайлПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайла", Результат.ИмяФайла);
		ВходящийКонтекст.Вставить("ДобавленоБайт", 0);
		ВходящийКонтекст.Вставить("МаксРазмерБлока", 256 * 1024);
		Оповещение = Новый ОписаниеОповещения(
			"ТекстВФайлПослеВыполненияДобавитьСтроку", ЭтотОбъект, ВходящийКонтекст,
			"ТекстВФайлПриОшибкеВыполненияДобавитьСтроку", ЭтотОбъект);
			
		ДобавляемыйБлок = Лев(ВходящийКонтекст.ВходящиеПараметры[0], ВходящийКонтекст.МаксРазмерБлока);
		ВходящийКонтекст.ДвоичныеДанные.НачатьВызовДобавитьСтроку(
			Оповещение, ДобавляемыйБлок);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры
		
Процедура ТекстВФайлПослеВыполненияДобавитьСтроку(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.ДобавленоБайт = ВходящийКонтекст.ДобавленоБайт + ВходящийКонтекст.МаксРазмерБлока;
	Если ВходящийКонтекст.ДобавленоБайт < СтрДлина(ВходящийКонтекст.ВходящиеПараметры[0]) Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ТекстВФайлПослеВыполненияДобавитьСтроку", ЭтотОбъект, ВходящийКонтекст,
			"ТекстВФайлПриОшибкеВыполненияДобавитьСтроку", ЭтотОбъект);
		
		ДобавляемыйБлок = Сред(ВходящийКонтекст.ВходящиеПараметры[0], ВходящийКонтекст.ДобавленоБайт + 1,
			ВходящийКонтекст.МаксРазмерБлока);
		ВходящийКонтекст.ДвоичныеДанные.НачатьВызовДобавитьСтроку(
			Оповещение, ДобавляемыйБлок);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ТекстВФайлПослеВыполненияЗаписать", ЭтотОбъект, ВходящийКонтекст,
		"ТекстВФайлПриОшибкеВыполненияЗаписать", ЭтотОбъект);
	ВходящийКонтекст.ДвоичныеДанные.НачатьВызовЗаписать(Оповещение, ВходящийКонтекст.ИмяФайла, 0);
	
КонецПроцедуры

Процедура ТекстВФайлПриОшибкеВыполненияДобавитьСтроку(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
		
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "ДобавитьИзСтрокиBase64",
		ОписаниеОшибкиОшибкаСохраненияФайла(ВходящийКонтекст.ИмяФайла));
		
КонецПроцедуры

Процедура ТекстВФайлПослеВыполненияЗаписать(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "ИмяФайла", Параметры[0], ВходящийКонтекст));
	
КонецПроцедуры

Процедура ТекстВФайлПриОшибкеВыполненияЗаписать(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
		
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "Записать",
		ОписаниеОшибкиОшибкаСохраненияФайла(ВходящийКонтекст.ИмяФайла));
		
КонецПроцедуры

#КонецОбласти

#Область ПолучитьСвойстваФайла

Процедура ПолучитьСвойстваФайла(ОповещениеОЗавершении, ИмяФайла) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ИмяФайла", ИмяФайла);
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);

	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(
		"ПолучитьСвойстваФайлаПослеПодключенияРасширенияРаботыСФайлами", Контекст, Ложь);
		
КонецПроцедуры

Процедура ПолучитьСвойстваФайлаПослеПодключенияРасширенияРаботыСФайлами(Подключено, ВходящийКонтекст) Экспорт
	
	Если Подключено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьСвойстваФайлаПослеИнициализацииФайла", ЭтотОбъект, ВходящийКонтекст); 
			
		Файл = Новый Файл;
		Файл.НачатьИнициализацию(Оповещение, ВходящийКонтекст.ИмяФайла);
	Иначе
		ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибкиРасширениеДляРаботыСФайламиНеПодключено());
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиРасширениеДляРаботыСФайламиНеПодключено()));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСвойстваФайлаПослеИнициализацииФайла(Файл, ВходящийКонтекст) Экспорт
	
	Свойства = "Имя,ИмяБезРасширения,ПолноеИмя,Путь,Расширение,Размер,Существует,ЭтоКаталог";
	СвойстваФайла = Новый Структура(Свойства);
	
	ЗаполнитьЗначенияСвойств(СвойстваФайла, Файл);
	ВходящийКонтекст.Вставить("СвойстваФайла", СвойстваФайла);
	ВходящийКонтекст.Вставить("Файл", Файл);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьСвойстваФайлаПослеПроверкиСуществования", ЭтотОбъект, ВходящийКонтекст);
	Файл.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

Процедура ПолучитьСвойстваФайлаПослеПроверкиСуществования(Существует, ВходящийКонтекст) Экспорт

	ВходящийКонтекст.СвойстваФайла.Существует = Существует;
	
	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьСвойстваФайлаПослеПроверкиЭтоФайл", ЭтотОбъект, ВходящийКонтекст);
			
		ВходящийКонтекст.Файл.НачатьПроверкуЭтоФайл(Оповещение);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "СвойстваФайла", ВходящийКонтекст.СвойстваФайла));	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСвойстваФайлаПослеПроверкиЭтоФайл(ЭтоФайл, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.СвойстваФайла.ЭтоКаталог = Не ЭтоФайл;
	
	Если ЭтоФайл Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьСвойстваФайлаПослеПолученияРазмера", ЭтотОбъект, ВходящийКонтекст);
			
		ВходящийКонтекст.Файл.НачатьПолучениеРазмера(Оповещение);	
	Иначе		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "СвойстваФайла", ВходящийКонтекст.СвойстваФайла));
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьСвойстваФайлаПослеПолученияРазмера(Размер, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.СвойстваФайла.Размер = Размер;
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "СвойстваФайла", ВходящийКонтекст.СвойстваФайла));
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеССервераВФайл

Процедура ДанныеССервераВФайл(ОповещениеОЗавершении, Адрес, ИмяФайлаИлиРасширение, ВыводитьСообщения, ДвоичныеДанные) Экспорт

	Результат = ОперацииСФайламиЭДКОСлужебныйВызовСервера.ПолучитьФайлЧастямиССервераКакСтроку(Адрес);
	
	Если Результат.Продолжение.Количество() = 0 Тогда	
		Base64ВФайл(ОповещениеОЗавершении, Результат.СтрокаBase64, ИмяФайлаИлиРасширение, ВыводитьСообщения, ДвоичныеДанные);
	Иначе
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Контекст.Вставить("ТекущаяЧасть", -1);
		Контекст.Вставить("ЧастиФайла", Результат.Продолжение);
		Контекст.Вставить("РазмерФайла", Результат.РазмерФайла);
		Контекст.Вставить("ПерваяЧасть", Результат.СтрокаBase64);
		Контекст.Вставить("ИмяФайлаИлиРасширение", ИмяФайлаИлиРасширение);
		Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
		Контекст.Вставить("ДвоичныеДанные", ДвоичныеДанные);
		
		ДанныеССервераВФайлПоЧастямПоследовательно(Контекст);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеССервераВФайлПоЧастямПоследовательно(ВходящийКонтекст)
	
	Если ВходящийКонтекст.ТекущаяЧасть < ВходящийКонтекст.ЧастиФайла.Количество() Тогда
		Если ВходящийКонтекст.ТекущаяЧасть = -1 Тогда
			ДанныеССервераВФайлПоЧастямПреобразоватьПервуюЧасть(ВходящийКонтекст);	
		Иначе
			ДанныеССервераВФайлПоЧастямПреобразоватьСледующуюЧасть(ВходящийКонтекст);
		КонецЕсли;
	Иначе
		ОперацииСФайламиЭДКОСлужебныйВызовСервера.УдалитьДанныеИзВременногоХранилища(ВходящийКонтекст.ЧастиФайла);
		Оповещение = Новый ОписаниеОповещения(
			"Base64ВФайлПослеВыполненияЗаписать", ЭтотОбъект, ВходящийКонтекст,
			"Base64ВФайлПриОшибкеВыполненияЗаписать", ЭтотОбъект);
		ВходящийКонтекст.ДвоичныеДанные.НачатьВызовЗаписать(Оповещение, ВходящийКонтекст.ИмяФайла, 0);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеССервераВФайлПоЧастямПреобразоватьПервуюЧасть(ВходящийКонтекст) Экспорт
	
	ПредварительноСоздатьДвоичныеДанные(
		ВходящийКонтекст.ОповещениеОЗавершении, "ДанныеССервераВФайлПоЧастямПослеСозданияДвоичныхДанных", ВходящийКонтекст,
		ВходящийКонтекст.ДвоичныеДанные, ВходящийКонтекст.ВыводитьСообщения);
		
КонецПроцедуры

Процедура ДанныеССервераВФайлПоЧастямПослеСозданияДвоичныхДанных(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Контекст = ВходящийКонтекст.ВходящиеПараметры;
		Контекст.Вставить("ДвоичныеДанные", Результат.ДвоичныеДанные);
		Оповещение = Новый ОписаниеОповещения("ДанныеССервераВФайлПоЧастямПослеПолученияИмениФайла", ЭтотОбъект, Контекст);
		Если ЗначениеЗаполнено(Контекст.ИмяФайлаИлиРасширение) И Лев(Контекст.ИмяФайлаИлиРасширение, 1) <> "." Тогда
			ВыполнитьОбработкуОповещения(
				Оповещение,
				ПодготовитьРезультат(Истина, "ИмяФайла", Контекст.ИмяФайлаИлиРасширение, Контекст));
		Иначе
			ПолучитьИмяВременногоФайлаНаКлиенте(
				Оповещение, Контекст.ИмяФайлаИлиРасширение, Контекст.ВыводитьСообщения, Контекст.ДвоичныеДанные);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			Контекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеССервераВФайлПоЧастямПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайла", Результат.ИмяФайла);
		ВходящийКонтекст.Удалить("ИмяФайлаИлиРасширение");
		
		Оповещение = Новый ОписаниеОповещения(
			"ДанныеССервераВФайлПоЧастямПослеВыполненияДобавитьИзСтрокиBase64", ЭтотОбъект, ВходящийКонтекст,
			"ДанныеССервераВФайлПоЧастямПриОшибкеВыполненияДобавитьИзСтрокиBase64", ЭтотОбъект);
			
		ВходящийКонтекст.ДвоичныеДанные.НачатьВызовДобавитьИзСтрокиBase64(
			Оповещение, ВходящийКонтекст.ПерваяЧасть, Ложь);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеССервераВФайлПоЧастямПреобразоватьСледующуюЧасть(ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ДанныеССервераВФайлПоЧастямПослеВыполненияДобавитьИзСтрокиBase64", ЭтотОбъект, ВходящийКонтекст,
		"ДанныеССервераВФайлПоЧастямПриОшибкеВыполненияДобавитьИзСтрокиBase64", ЭтотОбъект);
		
	СледующаяЧасть = ОперацииСФайламиЭДКОСлужебныйВызовСервера.ПолучитьФайлССервераКакСтроку(
		ВходящийКонтекст.ЧастиФайла[ВходящийКонтекст.ТекущаяЧасть]);
		
	ВходящийКонтекст.ДвоичныеДанные.НачатьВызовДобавитьИзСтрокиBase64(
		Оповещение, СледующаяЧасть, Истина);
	
КонецПроцедуры

Процедура ДанныеССервераВФайлПоЧастямПослеВыполненияДобавитьИзСтрокиBase64(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.ТекущаяЧасть = ВходящийКонтекст.ТекущаяЧасть + 1;
	ДанныеССервераВФайлПоЧастямПоследовательно(ВходящийКонтекст);
	
КонецПроцедуры

Процедура ДанныеССервераВФайлПоЧастямПриОшибкеВыполненияДобавитьИзСтрокиBase64(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
		
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "ДобавитьИзСтрокиBase64",
		ОписаниеОшибкиОшибкаСохраненияФайла(ВходящийКонтекст.ИмяФайла));
		
КонецПроцедуры


#КонецОбласти

#Область ОткрытьФайл

Процедура ОткрытьФайл(ПолноеИмяФайлаИлиАдрес, ИмяФайла, ВыводитьСообщения) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПолноеИмяФайлаИлиАдрес", ПолноеИмяФайлаИлиАдрес);
	Контекст.Вставить("ИмяФайла", ИмяФайла);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);	
	
	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(
		"ОткрытьФайлПослеПодключенияРасширенияРаботыСФайлами", Контекст, Истина);
	
КонецПроцедуры

Процедура ОткрытьФайлПослеПодключенияРасширенияРаботыСФайлами(Подключено, ВходящийКонтекст) Экспорт
	
	Если Подключено Тогда
		Если ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ПолноеИмяФайлаИлиАдрес) Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ОткрытьФайлПослеПолученияКаталогаВременныхФайлов", ЭтотОбъект, ВходящийКонтекст);
			НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
		Иначе
			ОткрытьФайлЗапуститьПриложение(ВходящийКонтекст.ПолноеИмяФайлаИлиАдрес, ВходящийКонтекст);
		КонецЕсли;
	Иначе
		Если ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ПолноеИмяФайлаИлиАдрес) Тогда
			ПолучитьФайл(ВходящийКонтекст.ПолноеИмяФайлаИлиАдрес, ВходящийКонтекст.ИмяФайла, Истина);	
		Иначе
			ОписаниеОшибки = НСтр("ru = 'Не удалось открыть файл %1, т.к.
                      |расширение для работы с файлами не подключено.'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеОшибки, ВходящийКонтекст.ПолноеИмяФайлаИлиАдрес);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);		  
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФайлПослеПолученияКаталогаВременныхФайлов(ИмяКаталогаВременныхФайлов, ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ОткрытьФайлПослеПолученияФайлов", ЭтотОбъект, ВходящийКонтекст,
		"ОткрытьФайлПриОшибкеПолученияФайлов", ЭтотОбъект);
		
	ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла;
	ОписаниеПередаваемогоФайла.Хранение = ВходящийКонтекст.ПолноеИмяФайлаИлиАдрес;
	ОписаниеПередаваемогоФайла.Имя = 
		?(ЗначениеЗаполнено(ВходящийКонтекст.ИмяФайла), 
			ВходящийКонтекст.ИмяФайла, 
			СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));
		
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(ОписаниеПередаваемогоФайла);
	
	НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ИмяКаталогаВременныхФайлов, Ложь);
	
КонецПроцедуры

Процедура ОткрытьФайлПослеПолученияФайлов(ПолученныеФайлы, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(ПолученныеФайлы) Тогда
		ОткрытьФайлЗапуститьПриложение(ПолученныеФайлы[0].Имя, ВходящийКонтекст);
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Не удалось открыть файл.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФайлПриОшибкеПолученияФайлов(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
КонецПроцедуры

Процедура ОткрытьФайлЗапуститьПриложение(ПолноеИмяФайла, ВходящийКонтекст)
	
	Оповещение = Новый ОписаниеОповещения(
		"ОткрытьФайлПослеЗапускаПриложения", ЭтотОбъект, ВходящийКонтекст,
		"ОткрытьФайлПриОшибкеЗапускаПриложения", ЭтотОбъект);
	ЗапуститьПриложениеНаКлиенте(Оповещение, ПолноеИмяФайла, "", Ложь, Истина);
				
КонецПроцедуры

Процедура ОткрытьФайлПослеЗапускаПриложения(КодВозврата, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.Вставить("КодВозврата", КодВозврата);	

КонецПроцедуры

Процедура ОткрытьФайлПриОшибкеЗапускаПриложения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = НСтр("ru = 'Не удалось открыть файл %1.
                           |Возможно файл уже открыт.'");
	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ВходящийКонтекст.ПолноеИмяФайлаИлиАдрес);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		ИмяСобытия(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),, Истина);	

КонецПроцедуры

#КонецОбласти

#Область ЗапуститьПриложениеНаКлиенте

Процедура ЗапуститьПриложениеНаКлиенте(ОповещениеОЗавершении, СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, ВыводитьСообщения) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("СтрокаКоманды", СтрокаКоманды);
	Контекст.Вставить("ТекущийКаталог", ТекущийКаталог);
	Контекст.Вставить("ДождатьсяЗавершения", ДождатьсяЗавершения);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(
		"ЗапуститьПриложениеНаКлиентеПослеПодключенияРасширенияРаботыСФайлами", Контекст, Ложь);	
	
КонецПроцедуры

Процедура ЗапуститьПриложениеНаКлиентеПослеПодключенияРасширенияРаботыСФайлами(Подключено, ВходящийКонтекст) Экспорт
	
	Если Подключено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ЗапуститьПриложениеНаКлиентеПослеЗапускаПриложения", ЭтотОбъект, ВходящийКонтекст,
			"ЗапуститьПриложениеНаКлиентеПриОшибкеЗапускаПриложения", ЭтотОбъект);
		НачатьЗапускПриложения(
			Оповещение, ВходящийКонтекст.СтрокаКоманды, 
			ВходящийКонтекст.ТекущийКаталог, ВходящийКонтекст.ДождатьсяЗавершения);
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Не удалось запустить приложение,
                               |т.к. расширение для работы с файлами не подключено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);		  
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьПриложениеНаКлиентеПослеЗапускаПриложения(КодВозврата, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(ВходящийКонтекст.ОповещениеОЗавершении) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "КодВозврата", КодВозврата, ВходящийКонтекст));
	КонецЕсли;

КонецПроцедуры

Процедура ЗапуститьПриложениеНаКлиентеПриОшибкеЗапускаПриложения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = НСтр("ru = 'Не удалось открыть файл %1.
                           |Возможно файл уже открыт.'");
	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ВходящийКонтекст.СтрокаКоманды);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		ИмяСобытия(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),, Истина);	

КонецПроцедуры

#КонецОбласти

#Область СохранитьФайлы

Процедура СохранитьФайлы(Знач СохраняемыеФайлы, КаталогСохранения, ВыводитьСообщения) Экспорт
	
	// Преобразуем в массив, если свойства файла были переданы в виде
	// структуры или описания.
	Если ТипЗнч(СохраняемыеФайлы) = Тип("Структура")
		ИЛИ ТипЗнч(СохраняемыеФайлы) = Тип("ОписаниеПередаваемогоФайла") Тогда
		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(СохраняемыеФайлы);
		
		СохраняемыеФайлы = МассивФайлов;
		
	КонецЕсли;
	
	// Проверяем, что есть хоть один сохраняемый файл.
	// Если файлов для созранения нет - то прервываем сохранение.
	Если ТипЗнч(СохраняемыеФайлы) = Тип("Массив") И СохраняемыеФайлы.Количество() = 0 Тогда
		// Нет ни одного сохраняемого файла.
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Отсутствуют файлы для сохранения'"));
		Возврат;
	КонецЕсли;
	
	// Структуру передаваемого файла преобразуем в описание.
	СохраняемыеФайлыТипизированный = Новый Массив;
	Для Каждого СохраняемыйФайл Из СохраняемыеФайлы Цикл
		Если ТипЗнч(СохраняемыйФайл) = Тип("Структура") Тогда		
			Имя 	= СохраняемыйФайл.Имя;
			Адрес 	= СохраняемыйФайл.Адрес;
		
			СохраняемыеФайлыТипизированный.Добавить(Новый ОписаниеПередаваемогоФайла(Имя, Адрес));
		Иначе
			СохраняемыеФайлыТипизированный.Добавить(СохраняемыйФайл);
		КонецЕсли;
	КонецЦикла;
	
	// Проверяем, подключено ли расширение работы с файлами.
	Контекст = Новый Структура;
	Контекст.Вставить("СохраняемыеФайлы",  СохраняемыеФайлыТипизированный);
	Контекст.Вставить("КаталогСохранения", КаталогСохранения);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьФайлыПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, Контекст);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, , Истина)
	
КонецПроцедуры

Процедура СохранитьФайлыПослеПодключенияРасширенияРаботыСФайлами(Подключено, ВходящийКонтекст) Экспорт
	
	Если Подключено Тогда
		
		СохраняемыеФайлы 	= ВходящийКонтекст.СохраняемыеФайлы;
		КаталогСохранения 	= ВходящийКонтекст.КаталогСохранения;
		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("СохранитьФайлыПослеВыбораКаталога", ЭтотОбъект, ВходящийКонтекст);
		
		// Если не заполнен параметр Каталог и у файлов указан путь, не содеражщий каталога,
		// то отмечаем необходимость показать диалог выбора каталога.
		ТребуетсяПоказатьДиалогВыбораКаталога = Ложь;
		Для каждого СохраняемыйФайл Из СохраняемыеФайлы Цикл
			
			СвойстваФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СохраняемыйФайл.Имя);
			Если НЕ ЗначениеЗаполнено(СвойстваФайла.Путь) И НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
				ТребуетсяПоказатьДиалогВыбораКаталога = Истина;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		ВходящийКонтекст.Вставить("ТребуетсяПоказатьДиалогВыбораКаталога", ТребуетсяПоказатьДиалогВыбораКаталога);
		
		// При необходимости показываем диалог выбора каталога. 
		Если ТребуетсяПоказатьДиалогВыбораКаталога Тогда
			
			// Показываем диалог выбора каталога.
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
			Диалог.Заголовок = НСтр("ru = 'Выберите каталог для сохранения'");
			Диалог.Показать(ОписаниеОповещения);
			
		Иначе
			
			// Нет необходимости показывать диалог выбора каталога.
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
			
		КонецЕсли;
		
	Иначе
		// Сохраняем без использования расширения работы с файлами.
		СохранитьФайлыБезРасширенияРаботыСФайлами(Подключено, ВходящийКонтекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьФайлыБезРасширенияРаботыСФайлами(Подключено, ВходящийКонтекст)
	
	// Если расширение работы с файлами не подключено
	СохраняемыеФайлы = ВходящийКонтекст.СохраняемыеФайлы;
	Для Каждого СохраняемыйФайл Из СохраняемыеФайлы Цикл
		
		// Каталог получаем из полного имени файла.
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СохраняемыйФайл.Имя);
		Имя = СтруктураИмениФайла.Имя;
		
		Попытка
			ПолучитьФайл(СохраняемыйФайл.Хранение, Имя, Истина);
		Исключение
			
			Если ВходящийКонтекст.ВыводитьСообщения Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось выгрузить на диск файл 
                          |%1!
                          |%2'"), СохраняемыйФайл.Имя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьФайлыПослеВыбораКаталога(ВыбранныеФайлы, ВходящийКонтекст) Экспорт
	
	ТребуетсяПоказатьДиалогВыбораКаталога 	= ВходящийКонтекст.ТребуетсяПоказатьДиалогВыбораКаталога;
	КаталогСохранения 						= ВходящийКонтекст.КаталогСохранения;
	
	Если ВыбранныеФайлы <> Неопределено ИЛИ НЕ ТребуетсяПоказатьДиалогВыбораКаталога Тогда
		
		// Определем каталог как результат выбора в диалоге выбора либо как входящий параметр.
		Если ВыбранныеФайлы <> Неопределено Тогда
			КаталогСохранения = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВыбранныеФайлы[0]);
		ИначеЕсли ЗначениеЗаполнено(КаталогСохранения) Тогда
			КаталогСохранения = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогСохранения);
		КонецЕсли;
		
		СохраняемыеФайлы = ВходящийКонтекст.СохраняемыеФайлы;
		
		// К имени каждого файла при необходимости добавляем каталог.
		// В результата каждый файл будет иметь полный путь.
		Для каждого СохраняемыйФайл Из СохраняемыеФайлы Цикл
			СвойстваФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СохраняемыйФайл);
			Если ЗначениеЗаполнено(СвойстваФайла.Путь) Тогда
				// У файла указан полный путь. Ничего делать не нужно.
			ИначеЕсли ЗначениеЗаполнено(КаталогСохранения) Тогда
				// У файла не указан полный путь. Добавляем каталог к краткому имени файла.
				СохраняемыйФайл.Имя = КаталогСохранения + СохраняемыйФайл.Имя;
			КонецЕсли;
		КонецЦикла;
		
		// После предыдущего цикла у каждого файла будет полное имя, включающее каталог.
		// Каталог отдельно нам хранить больше не нужно.
		ВходящийКонтекст.Удалить("КаталогСохранения");
		
		ВходящийКонтекст.Вставить("ПолучаемыеФайлы", 	Новый Массив);
		ВходящийКонтекст.Вставить("ЧислоФайлов", 		СохраняемыеФайлы.Количество());
		ВходящийКонтекст.Вставить("НомерТекущегоФайла", 0);
		ВходящийКонтекст.Вставить("СохраняемыеФайлы", 	СохраняемыеФайлы);
		
		СохранитьФайлыПроверитьДлинуПутиИСуществование(Неопределено, ВходящийКонтекст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьФайлыПроверитьДлинуПутиИСуществование(Результат, ВходящийКонтекст) Экспорт
	
	НомерТекущегоФайла 	= ВходящийКонтекст.НомерТекущегоФайла;
	ЧислоФайлов 		= ВходящийКонтекст.ЧислоФайлов;
	СохраняемыеФайлы 	= ВходящийКонтекст.СохраняемыеФайлы;
	ПолучаемыеФайлы 	= ВходящийКонтекст.ПолучаемыеФайлы;
	
	Если НомерТекущегоФайла <= ЧислоФайлов - 1 Тогда
		
		СохраняемыйФайл = СохраняемыеФайлы[НомерТекущегоФайла];
		Имя 			= СохраняемыйФайл.Имя;
		
		// Проверка на длину файлов. Иначе возникнет ошибка платформы.
		Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			Если СтрДлина(Имя) > 260 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Длина пути одного или нескольких файлов превышает 260 символов.
                                               |Файлы не могут быть сохранены.
                                               |Выберите другой каталог сохранения файлов.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ПолучаемыеФайлы.Добавить(СохраняемыйФайл);
		
		ВходящийКонтекст.Вставить("ПолучаемыеФайлы", 	ПолучаемыеФайлы);
		ВходящийКонтекст.Вставить("НомерТекущегоФайла", НомерТекущегоФайла + 1);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СохранитьФайлыПослеПроверкиСуществованияФайла", 
			ЭтотОбъект, 
			ВходящийКонтекст);
			
		ПолучитьСвойстваФайла(ОписаниеОповещения, Имя);

	Иначе
		
		Если ВходящийКонтекст.Свойство("ЗапроситьПодтверждениеОбновитьФайлы") Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"СохранитьФайлыПередЗапросомРазрешенияПользователя", 
				ЭтотОбъект, 
				ВходящийКонтекст);
				
			ТекстВопроса = НСтр("ru = 'В выбранном каталоге присутствуют файлы с такими же именами.
				|Продолжить сохранение с заменой файлов?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
		Иначе
			СохранитьФайлыПередЗапросомРазрешенияПользователя(КодВозвратаДиалога.Да, ВходящийКонтекст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьФайлыПередЗапросомРазрешенияПользователя(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПолучаемыеФайлы 	= ВходящийКонтекст.ПолучаемыеФайлы;
	
	ВходящийКонтекст.Удалить("ЧислоФайлов");
	ВходящийКонтекст.Удалить("НомерТекущегоФайла");
	
	МассивВызовов = Новый Массив;
	МассивВызовов.Добавить(Новый Массив);
	МассивВызовов[0].Добавить("НачатьПолучениеФайлов");
	МассивВызовов[0].Добавить(ПолучаемыеФайлы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьФайлыПослеЗапросаРазрешенияПользователя", ЭтотОбъект, ВходящийКонтекст);
	НачатьЗапросРазрешенияПользователя(ОписаниеОповещения, МассивВызовов);
	
КонецПроцедуры

Процедура СохранитьФайлыПослеПроверкиСуществованияФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		Если Результат.СвойстваФайла.Существует Тогда
			ВходящийКонтекст.Вставить("ЗапроситьПодтверждениеОбновитьФайлы", Истина);
		КонецЕсли;
		
		СохранитьФайлыПроверитьДлинуПутиИСуществование(Неопределено, ВходящийКонтекст);

	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьФайлыПослеЗапросаРазрешенияПользователя(РазрешенияПолучены, ВходящийКонтекст) Экспорт
	
	Если РазрешенияПолучены Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьФайлыПослеПолученияФайлов", ЭтотОбъект, ВходящийКонтекст);
		
		НачатьПолучениеФайлов(
			ОписаниеОповещения, 
			ВходящийКонтекст.ПолучаемыеФайлы,,
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьФайлыПослеПолученияФайлов(ПолученныеФайлы, ВходящийКонтекст) Экспорт
	
	Если ВходящийКонтекст.ВыводитьСообщения Тогда
		
		КоличествоСохраняемыхФайлов	= ВходящийКонтекст.СохраняемыеФайлы.Количество();
		КоличествоСохраненныхФайлов	= ПолученныеФайлы.Количество();
		
		Если КоличествоСохраняемыхФайлов <> 0 Тогда
			
			СообщениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выгружено файлов: %1.'"), КоличествоСохраненныхФайлов);
			
			Если КоличествоСохраненныхФайлов <> КоличествоСохраняемыхФайлов Тогда
				СообщениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1
                                                                                               |Не удалось выгрузить: %2.'"),
																						СообщениеТекст, (КоличествоСохраняемыхФайлов - КоличествоСохраненныхФайлов));
			КонецЕсли;
			ПоказатьПредупреждение(, СообщениеТекст);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СкачатьФайлНаСервереВФоне

Процедура СкачатьФайлНаСервереВФоне(ОповещениеОЗавершении, Знач URL, Знач Параметры) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Оповещение = Новый ОписаниеОповещения("СкачатьФайлНаСервереВФонеПослеВыполнения", ЭтотОбъект, Контекст);
	
	ПараметрыФормы = Новый Структура("Параметры", Новый Структура("URL", URL));
	
	ПоясняющийТекст = Неопределено;
	ВладелецФормы = Неопределено;
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры.Свойство("ПоясняющийТекст", ПоясняющийТекст);
		Параметры.Свойство("ВладелецФормы", ВладелецФормы);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПоясняющийТекст", ПоясняющийТекст);
	
	СохраняемыеПараметры = Новый Структура;
	СохраняемыеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	СохраняемыеПараметры.Вставить("ВладелецФормы", ВладелецФормы);
	СохраняемыеПараметры.Вставить("ОповещениеОЗавершении", Оповещение);
	
	ПараметрыПриложения.Вставить("ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОперациСФайлами", СохраняемыеПараметры);
	
	ПодключитьОбработчикОжидания("СкачатьФайлНаСервереВФонеОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

Процедура СкачатьФайлНаСервереВФонеОткрытьИндикаторСкачивания() Экспорт
	
	СохраненныеПараметры = ПараметрыПриложения["ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОперациСФайлами"];
	ПараметрыПриложения.Удалить("ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОперациСФайлами");
	
	ОткрытьФорму("ОбщаяФорма.ИндикаторСкачиванияФайла", 
		СохраненныеПараметры.ПараметрыФормы, 
		СохраненныеПараметры.ВладелецФормы,,,, 
		СохраненныеПараметры.ОповещениеОЗавершении);
		
КонецПроцедуры
	
Процедура СкачатьФайлНаСервереВФонеПослеВыполнения(Результат, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Выполнено Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресХранилища);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
	Иначе
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Новый Структура("Выполнено, ОписаниеОшибки", Ложь, ""));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ДобавитьФайлы

Процедура ДобавитьФайлы(ОповещениеОЗавершении, ИдентификаторФормы, Заголовок, Параметры) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	Контекст.Вставить("Заголовок", Заголовок);
	Контекст.Вставить("Параметры", Параметры);
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);

	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(
		"ДобавитьФайлыПослеПодключенияРасширенияРаботыСФайлами", Контекст, Истина);
		
КонецПроцедуры

Процедура ДобавитьФайлыПослеПодключенияРасширенияРаботыСФайлами(Подключено, ВходящийКонтекст) Экспорт
	
	Если Подключено Тогда
		ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайлов.МножественныйВыбор = Истина;
		Если ЗначениеЗаполнено(ВходящийКонтекст.Заголовок) Тогда
			ДиалогВыбораФайлов.Заголовок = ВходящийКонтекст.Заголовок;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВходящийКонтекст.Параметры) И ВходящийКонтекст.Параметры.Свойство("Фильтр") Тогда
			ДиалогВыбораФайлов.Фильтр = ВходящийКонтекст.Фильтр;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ДобавитьФайлыПослеПомещенияФайлов", ЭтотОбъект, ВходящийКонтекст);
		НачатьПомещениеФайлов(Оповещение,, ДиалогВыбораФайлов, Истина, ВходящийКонтекст.ИдентификаторФормы);		
	Иначе
		Оповещение = Новый ОписаниеОповещения("ДобавитьФайлыПослеПомещенияФайла", ЭтотОбъект, ВходящийКонтекст);
		НачатьПомещениеФайла(Оповещение,,, Истина, ВходящийКонтекст.ИдентификаторФормы);		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьФайлыПослеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ВходящийКонтекст) Экспорт

	ОписанияФайлов = Новый Массив;
	Если Результат Тогда
		Файл = Новый Файл(ВыбранноеИмяФайла);
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Имя", Файл.Имя);
		ОписаниеФайла.Вставить("Адрес", Адрес);
		
		ОписанияФайлов.Добавить(ОписаниеФайла);
	КонецЕсли;
	
	ДобавитьФайлыПослеВыполнения(ОписанияФайлов, ВходящийКонтекст);
	
КонецПроцедуры

Процедура ДобавитьФайлыПослеПомещенияФайлов(ПомещенныеФайлы, ВходящийКонтекст) Экспорт
	
	ОписанияФайлов = Новый Массив;
	Если ЗначениеЗаполнено(ПомещенныеФайлы) Тогда
		Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
			Файл = Новый Файл(ПомещенныйФайл.Имя);
			
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("Имя", Файл.Имя);
			ОписаниеФайла.Вставить("Адрес", ПомещенныйФайл.Хранение);
			
			ОписанияФайлов.Добавить(ОписаниеФайла);
		КонецЦикла;	
	КонецЕсли;
	
	ДобавитьФайлыПослеВыполнения(ОписанияФайлов, ВходящийКонтекст);
		
КонецПроцедуры

Процедура ДобавитьФайлыПослеВыполнения(ОписанияФайлов, ВходящийКонтекст)
	
	РезультатВыполнения = Новый Структура("Выполнено", Истина);	
	Если ЗначениеЗаполнено(ВходящийКонтекст.Параметры) Тогда
		Если ВходящийКонтекст.Параметры.Свойство("ВозвращатьРазмер")
			И ВходящийКонтекст.Параметры.ВозвращатьРазмер
			ИЛИ ВходящийКонтекст.Параметры.Свойство("МаксимальныйРазмерФайла")
			И ЗначениеЗаполнено(ВходящийКонтекст.Параметры.МаксимальныйРазмерФайла)Тогда
			ОписанияФайлов = ОперацииСФайламиЭДКОСлужебныйВызовСервера.ДополнитьОписанияРазмерамиФайлов(ОписанияФайлов);
		КонецЕсли;
		
		ФайлыПревышающийМаксимальныйРазмерФайла = Новый Массив;
		Если ВходящийКонтекст.Параметры.Свойство("МаксимальныйРазмерФайла")
			И ЗначениеЗаполнено(ВходящийКонтекст.Параметры.МаксимальныйРазмерФайла)Тогда
			Для Каждого ОписаниеФайла Из ОписанияФайлов Цикл
				Если ОписаниеФайла.Размер > ВходящийКонтекст.Параметры.МаксимальныйРазмерФайла Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'Размер файла ""%1"" (%2) не соответствует требованиям: максимальный размер файла - %3.'"),
							ОписаниеФайла.Имя,
							ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(ОписаниеФайла.Размер),
							ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(ВходящийКонтекст.Параметры.МаксимальныйРазмерФайла)));
					РезультатВыполнения.Вставить("Выполнено", Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДопустимыеТипыФайлов = Новый Массив;
		Если ВходящийКонтекст.Параметры.Свойство("ДопустимыеТипыФайлов")
			И ЗначениеЗаполнено(ВходящийКонтекст.Параметры.ДопустимыеТипыФайлов)Тогда
			ДопустимыеТипыФайлов = СтрРазделить(ВходящийКонтекст.Параметры.ДопустимыеТипыФайлов, ";");
			
			Для Каждого ОписаниеФайла Из ОписанияФайлов Цикл
				Если ДопустимыеТипыФайлов.Найти(ОписаниеФайла.Расширение) = Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'Тип файла ""%1"" не соответствует требованиям: допустимые типы файлов - ""%2"".'"),
							ОписаниеФайла.Имя, СтрСоединить(ДопустимыеТипыФайлов, ", ")));
					РезультатВыполнения.Вставить("Выполнено", Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	РезультатВыполнения.Вставить("ОписанияФайлов", ОписанияФайлов);
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);	
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОписанияОшибок

Функция ОписаниеОшибкиНеПолученКаталогВременныхФайлов()
	
	Возврат НСтр("ru = 'Не удалось получить каталог временных файлов на клиенте.'");

КонецФункции

Функция ОписаниеОшибкиНеУдалосьСоздатьКаталог()
	
	Возврат НСтр("ru = 'Не удалось создать каталог на клиенте.'");
	
КонецФункции

Функция ОписаниеОшибкиРасширениеДляРаботыСФайламиНеПодключено()
	
	Возврат НСтр("ru = 'Расширение для работы с файлами не подключено. 
                  |Дальнейшее выполнение операции невозможно.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьСоздатьОбъектДвоичныеДанные()
	
	Возврат НСтр("ru = 'Не удалось создать объект для работы с двоичными данными.'");
	
КонецФункции

Функция ОписаниеОшибкиОшибкаЧтенияФайла(ИмяФайла)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка чтения файла %1.'"), ИмяФайла);
	
КонецФункции

Функция ОписаниеОшибкиОшибкаСохраненияФайла(ИмяФайла)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Во время сохранения файла %1 возникла ошибка.'"), ИмяФайла);	
	
КонецФункции

Функция ОписаниеОшибкиОбщийТекстПриОшибкахВОбъектеДляРаботыСДвоичнымиДанными()

	Возврат "Ошибка внешней компоненты для работы с файлами";
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьУдалитьФайл(ИмяФайла, ИнформацияОбОшибке)
	
	Шаблон = НСтр("ru = 'Не удалось удалить файл или каталог
                  |%1
                  |по причине:
                  |%2'");
				  
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));				  
	
КонецФункции

Функция ОписаниеОшибкиФайлНеСуществует(ИмяФайла)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка обращения к файлу %1 - файл не существует.'"), ИмяФайла);	
	
КонецФункции
	
#КонецОбласти

Процедура ПредварительноСоздатьДвоичныеДанные(ОповещениеОЗавершении, ИмяМетода, ВходящиеПараметры = Неопределено, ДвоичныеДанные = Неопределено, ВыводитьСообщения = Истина)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Если ЗначениеЗаполнено(ВходящиеПараметры) Тогда
		Контекст.Вставить("ВходящиеПараметры", ВходящиеПараметры);
	КонецЕсли;
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	Оповещение = Новый ОписаниеОповещения(
		ИмяМетода, ЭтотОбъект, Контекст);
		
	Если ДвоичныеДанные <> Неопределено Тогда
		ОповещениеПослеОчистки = Новый ОписаниеОповещения(
			"ПослеВыполненияОчисткиДвоичныхДанных", ЭтотОбъект, 
			Новый Структура("ОповещениеОЗавершении, ДвоичныеДанные", Оповещение, ДвоичныеДанные));
			
		ДвоичныеДанные.НачатьВызовОчистить(ОповещениеПослеОчистки);
	Иначе
		СоздатьДвоичныеДанные(Оповещение, ВыводитьСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыполненияОчисткиДвоичныхДанных(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Результат = ПодготовитьРезультат(Истина, "ДвоичныеДанные", ВходящийКонтекст.ДвоичныеДанные);
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибке(ИмяМетода, ОписаниеОшибки = "")
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		ИмяСобытия(), "Ошибка",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при вызове ""%1"" объекта для работы с файлами.
				|%2'"),
			ИмяМетода, ОписаниеОшибки),,
		Истина);
		
КонецПроцедуры
	
Процедура СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, ИмяМетода, ОписаниеОшибки = Неопределено, ИнформацияОбОшибке = Неопределено)
	
	Если ВходящийКонтекст.Свойство("СтандартнаяОбработкаИсключения") Тогда
		Если ТипЗнч(ВходящийКонтекст.ОповещениеОЗавершении) = Тип("ОписаниеОповещения") 
			И ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Свойство("АвтоТест") Тогда
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(
					Ложь, "ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ВходящийКонтекст));
			СтандартнаяОбработка = Ложь;
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВходящийКонтекст.Вставить("ИмяМетода", ИмяМетода);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ВходящийКонтекст.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	 
	ЗаписатьИнформациюОбОшибке(ВходящийКонтекст.ИмяМетода);
	
	Если ВходящийКонтекст.Свойство("ОписаниеОшибки") И ЗначениеЗаполнено(ВходящийКонтекст.ОписаниеОшибки) Тогда
		ОписаниеОшибки = ВходящийКонтекст.ОписаниеОшибки;
	Иначе
		ОписаниеОшибки = ОписаниеОшибкиОбщийТекстПриОшибкахВОбъектеДляРаботыСДвоичнымиДанными();
	КонецЕсли;
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
	Если ТипЗнч(ВходящийКонтекст.ОповещениеОЗавершении) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьРезультат(Выполнено, ИмяПоляРезультат = Неопределено, ЗначениеРезультат = Неопределено, ВходящийКонтекст = Неопределено)
	
	Результат = Новый Структура("Выполнено", Выполнено);
	
	Если ВходящийКонтекст <> Неопределено Тогда
		Если ВходящийКонтекст.Свойство("МенеджерКриптографии") Тогда
			Результат.Вставить("МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии);
		КонецЕсли;
		Если ВходящийКонтекст.Свойство("ДвоичныеДанные") Тогда
			Результат.Вставить("ДвоичныеДанные", ВходящийКонтекст.ДвоичныеДанные);
		КонецЕсли;
		Если ВходящийКонтекст.Свойство("ОписаниеОшибки") Тогда
			Результат.Вставить("ОписаниеОшибки", ВходящийКонтекст.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПоляРезультат) Тогда
		Результат.Вставить(ИмяПоляРезультат, ЗначениеРезультат);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура ВывестиСообщениеПриНеобходимости(ВыводитьСообщения, Сообщение)
	
	Если ВыводитьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыВМассив(КоличествоПараметров, Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено,
						Параметр4 = Неопределено, Параметр5 = Неопределено, Параметр6 = Неопределено, Параметр7 = Неопределено)
						
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Параметр1);
	
	Если КоличествоПараметров > 1 Тогда
		МассивПараметров.Добавить(Параметр2);
	КонецЕсли;
	
	Если КоличествоПараметров > 2 Тогда
		МассивПараметров.Добавить(Параметр3);
	КонецЕсли;
	
	Если КоличествоПараметров > 3 Тогда
		МассивПараметров.Добавить(Параметр4);
	КонецЕсли;
	
	Если КоличествоПараметров > 4 Тогда
		МассивПараметров.Добавить(Параметр5);
	КонецЕсли;
	
	Если КоличествоПараметров > 5 Тогда
		МассивПараметров.Добавить(Параметр6);
	КонецЕсли;
	
	Если КоличествоПараметров > 6 Тогда
		МассивПараметров.Добавить(Параметр7);
	КонецЕсли;
	
	Возврат МассивПараметров;
						
КонецФункции

Функция ИмяСобытия()
	
	Возврат НСтр("ru = 'Электронный документооборот с контролирующими органами. Операции с файлами'");
	
КонецФункции

Функция ЭтоАдресВоВременномХранилище(Адрес)
	
	Если СтрНайти(Адрес, "e1cib/tempstorage/") = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ИмяМетода, Контекст, ВозможноПродолжениеБезУстановки)
	
	Оповещение = Новый ОписаниеОповещения(ИмяМетода, ЭтотОбъект, Контекст);
	ТекстСообщения = НСтр("ru = 'Для работы подсистемы документооборота с контролирующими органами необходимо установить расширение работы с файлами.'");
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения, ВозможноПродолжениеБезУстановки);
	
КонецПроцедуры
	
#КонецОбласти