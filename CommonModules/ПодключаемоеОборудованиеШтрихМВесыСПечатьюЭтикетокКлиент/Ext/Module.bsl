
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	
	ВыходныеПараметры 	= Новый Массив();
	
	Интерфейс	 		= Неопределено;
	Порт         		= Неопределено;
	Скорость     		= Неопределено;
	Таймаут      		= Неопределено;
	IPАдрес      		= Неопределено;
    UDPПортПолучателя 	= Неопределено;
    UDPТаймаут  		= Неопределено;
	Пароль              = Неопределено;
	БыстраяЗагрузка		= Неопределено;

    Параметры.Свойство("Интерфейс"			, Интерфейс);
    Параметры.Свойство("Порт"				, Порт);
    Параметры.Свойство("Скорость"			, Скорость);
    Параметры.Свойство("Таймаут"			, Таймаут);
    Параметры.Свойство("IPАдрес"			, IPАдрес);
    Параметры.Свойство("UDPПортПолучателя"	, UDPПортПолучателя);
    Параметры.Свойство("UDPТаймаут"			, UDPТаймаут);
    Параметры.Свойство("Пароль"				, Пароль);
    Параметры.Свойство("БыстраяЗагрузка"	, БыстраяЗагрузка);
  

	Если Интерфейс			= Неопределено           
	 Или Порт				= Неопределено
	 Или Скорость			= Неопределено
	 Или Таймаут			= Неопределено
	 Или IPАдрес			= Неопределено
	 Или UDPПортПолучателя	= Неопределено
	 Или UDPТаймаут			= Неопределено 
	 Или Пароль				= Неопределено Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));

		Результат = Ложь;
	КонецЕсли; // Конец: Проверка параметров устройства.

	Если Результат Тогда	
		Попытка
			ОбъектДрайвера.ДобавитьЛУ();
    		ПараметрыПодключения.ИДУстройства	= ОбъектДрайвера.НомерЛУ;
    		ОбъектДрайвера.ИнтерфейсЛУ 			= Интерфейс;
    		ОбъектДрайвера.Пароль				= Пароль;

    		Если Интерфейс = 0 Тогда
    			ОбъектДрайвера.COMПортЛУ       	 = Порт;
    			ОбъектДрайвера.СкоростьОбменаЛУ	 = Скорость;
    			ОбъектДрайвера.ТаймаутЛУ       	 = Таймаут;
    		Иначе
    			ОбъектДрайвера.АдресПолучателяЛУ = IPАдрес;
    			ОбъектДрайвера.ПортПолучателяЛУ  = UDPПортПолучателя;
    			ОбъектДрайвера.UDPТаймаутЛУ      = UDPТаймаут;
    		КонецЕсли;
			ОбъектДрайвера.УстановитьПараметрыЛУ();
		                     
		Исключение
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
    		Результат = Ложь;	
		КонецПопытки;
	КонецЕсли;
 	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отключение устройства.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	// Обязательные выходные
	ВыходныеПараметры = Новый Массив();
	Результат = Истина;

	Попытка
		ОбъектДрайвера.НомерЛУ = ПараметрыПодключения.ИДУстройства;
		ОбъектДрайвера.УстановитьАктивноеЛУ();
		ОбъектДрайвера.РазорватьСоединение();
		ОбъектДрайвера.ИндексЛУ = 0;
		
		ОбъектДрайвера.ПеречислитьЛУ();
		ОбъектДрайвера.УстановитьАктивноеЛУ();
		ОбъектДрайвера.НомерЛУ = ПараметрыПодключения.ИДУстройства;
		ОбъектДрайвера.УдалитьЛУ();  
	Исключение
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка отключения устройства'"));
    	Результат = Ложь;	
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;
	ВыходныеПараметры = Новый Массив();

	// Выгрузка товаров в весы с печатью этикеток.
	Если Команда = "ВыгрузитьТовары" Тогда
		Товары 				= ВходныеПараметры[0];
		ЧастичнаяВыгрузка 	= ВходныеПараметры[1];
		Результат = ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры);
											  
	// Очистить базу весов с печатью этикеток.
	ИначеЕсли Команда = "ОчиститьБазу" Тогда
		Результат = ОчиститьТоварыВВесах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Указанная команда не поддерживается данным драйвером.
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);

		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция осуществляет выгрузку таблицы товаров в весы с печатью этикеток.
//
Функция ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	Если Товары.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.'"));
		Возврат Ложь;
	КонецЕсли;
		
	ТекущийПроцент = 0;
	Состояние(НСтр("ru='Инициализация выгрузки...'"), Окр(ТекущийПроцент));
	
	ОбъектДрайвера.НомерЛУ = ПараметрыПодключения.ИДУстройства;
	ОбъектДрайвера.УстановитьАктивноеЛУ();

	Если ОбъектДрайвера.УстановитьСоединение() <> 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
		
	Если Результат Тогда
		Если Не ЧастичнаяВыгрузка Тогда
			Результат = НачатьВыгрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;	
    КонецЕсли;	

	// Инициализация режим загрузки.
	Если Результат Тогда
		Если Не ЧастичнаяВыгрузка Тогда
			
			ОбъектДрайвера.БыстраяЗагрузка = 0;
			ОбъектДрайвера.УстановитьРежимЗагрузки();
			
			Если ОбъектДрайвера.ОчиститьБазуТоваровИСообщений() <> 0 Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Не удалось очистить базу товаров.'") + ОбъектДрайвера.ОписаниеРезультата);
				Результат = Ложь;	
			КонецЕсли;
		КонецЕсли;

		Если Результат Тогда
			ОбъектДрайвера.БыстраяЗагрузка = Параметры.БыстраяЗагрузка;
			Если ОбъектДрайвера.УстановитьРежимЗагрузки() <> 0 Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
				Результат = Ложь;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Результат Тогда	             
		
		Если Результат  Тогда
			
			ПроцентИнкремент = 100 / Товары.Количество();
			
			// Выгрузка данных в весы с печатью этикеток.
			Для каждого ТекущийЭлемент Из Товары Цикл
				
				НаименованиеТовара =  ?(ТекущийЭлемент.Свойство("Номенклатура"), ТекущийЭлемент.Номенклатура, "");
				НаименованиеТовара =  ?(ТекущийЭлемент.Свойство("Наименование"), ТекущийЭлемент.Наименование, "");
				Если ТекущийЭлемент.Свойство("НаименованиеПолное") И НЕ ПустаяСтрока(ТекущийЭлемент.НаименованиеПолное) Тогда
					НаименованиеТовара = ТекущийЭлемент.НаименованиеПолное;
				КонецЕсли;
				
				Если ПустаяСтрока(ТекущийЭлемент.Код) Или (ТекущийЭлемент.Код = 0) Тогда
					КодТовараВрем = Сред(ТекущийЭлемент.Штрихкод, 3, 6)
				Иначе
    				КодТовараВрем = ТекущийЭлемент.Код;
    			КонецЕсли;
	
				Если ТекущийЭлемент.Свойство("СрокХранения") Тогда	
					СрокХраненияВрем = ТекущийЭлемент.СрокХранения;
				Иначе
					СрокХраненияВрем = 0;
				КонецЕсли;
 			
				Результат = Выгрузить(ОбъектДрайвера, ВыходныеПараметры, ТекущийЭлемент.PLU, КодТовараВрем,
					НаименованиеТовара, ТекущийЭлемент.Цена, СрокХраненияВрем);
				Если НЕ Результат Тогда
					ЗавершитьВыгрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
					Прервать;
				КонецЕсли;
				
				ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
				Состояние(НСтр("ru='Выгрузка товаров...'"), Окр(ТекущийПроцент));
				
			КонецЦикла;
			
			Если Результат  Тогда
				Результат = ЗавершитьВыгрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
			КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли; 
		                
	Возврат Результат;

КонецФункции

// Функция осуществляет выгрузку позиции в весы с печатью этикеток.
//
Функция Выгрузить(ОбъектДрайвера, ВыходныеПараметры, PLU, КодТовара, Наименование, Цена, СрокХранения)
	
	Результат = Истина;
	ВремНаименование = СокрЛП(Наименование);
	ОбъектДрайвера.НомерПЛУ = PLU;
	ОбъектДрайвера.ПервоеНаименованиеТовара = ?(СтрДлина(ВремНаименование) > 28, Лев(ВремНаименование, 28), ВремНаименование);
	ОбъектДрайвера.ВтороеНаименованиеТовара = ?(СтрДлина(ВремНаименование) > 28, Сред(ВремНаименование, 29), "");
	ОбъектДрайвера.Тара                     = 0;
	Если СрокХранения > 0 Тогда
		ОбъектДрайвера.СрокХранения   = СрокХранения;     
		ОбъектДрайвера.ДатаРеализации = Дата(2001, 1, 1);
	Иначе
		ОбъектДрайвера.СрокХранения   = 0;     
		ОбъектДрайвера.ДатаРеализации = 0;
	КонецЕсли;
	ОбъектДрайвера.Цена             = Число(Цена);
	ОбъектДрайвера.ГрупповойКод     = 0;
	ОбъектДрайвера.КодТовара        = Число(КодТовара);
	ОбъектДрайвера.НомерИзображения = 0;
	ОбъектДрайвера.КодРОСТЕСТ       = " ";
	ОбъектДрайвера.ТипТовара        = 0;
	
	Если Число(ОбъектДрайвера.ВерсияКЭ) >= 3.0 Тогда
		
		ОбъектДрайвера.ДобавитьДанныеПЛУКБлокуДанных();
		
		Если ОбъектДрайвера.Результат = -21 Тогда // Блок полон - отправляем, а товар позже запишем в очищенный блок.
			Если ОбъектДрайвера.ЗаписатьБлокДанныхПЛУ() <> 0 Тогда 
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
				Результат = Ложь;
			КонецЕсли;
			ОбъектДрайвера.ОчиститьБлокДанных();
			ОбъектДрайвера.ДобавитьДанныеПЛУКБлокуДанных();
		КонецЕсли
		
	Иначе
		Если ОбъектДрайвера.ЗаписатьДанныеПЛУ() <> 0 Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
			Результат = Ложь;	
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ Результат  Тогда
		ОбъектДрайвера.БыстраяЗагрузка = 0;
		ОбъектДрайвера.УстановитьРежимЗагрузки();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НачатьВыгрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;

	ПрефиксШтрихкодаВесовогоТовара   = "2" + МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьПрефиксВесовогоТовара(Параметры.Идентификатор);
    ПрефиксШтучногоФасованногоТовара = "2" + МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьПрефиксШтучногоТовара(Параметры.Идентификатор);

	// Инициализация префиксов
	ОбъектДрайвера.ИтоговыйПрефиксШК = 0;
	ОбъектДрайвера.ТипПрефиксаШК = 2;

	Если ОбъектДрайвера.УстановитьИтоговыйПрефиксШК() <> 0
	   И ОбъектДрайвера.УстановитьТипПрефиксаШК() <> 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
		Результат = Ложь;	
	Иначе
		ОбъектДрайвера.ПолучитьПрефиксШК();
			
		Если ОбъектДрайвера.ШтучныйПрефиксШК = Число(ПрефиксШтрихкодаВесовогоТовара)
		   И ОбъектДрайвера.ВесовойПрефиксШК = Число(ПрефиксШтучногоФасованногоТовара) Тогда
			Для ПроизвольныйПрефикс = 20 По 29 Цикл
					
				Если ПроизвольныйПрефикс <> Число(ПрефиксШтрихкодаВесовогоТовара)
				   И ПроизвольныйПрефикс <> Число(ПрефиксШтучногоФасованногоТовара) Тогда
					ОбъектДрайвера.ВесовойПрефиксШК = ПроизвольныйПрефикс;
					ОбъектДрайвера.УстановитьВесовойПрефиксШК();
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			ОбъектДрайвера.ШтучныйПрефиксШК = Число(ПрефиксШтучногоФасованногоТовара);
			ОбъектДрайвера.УстановитьШтучныйПрефиксШК();
			ОбъектДрайвера.ВесовойПрефиксШК = Число(ПрефиксШтрихкодаВесовогоТовара);
			ОбъектДрайвера.УстановитьВесовойПрефиксШК();
				
			Если ОбъектДрайвера.Результат <> 0 Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
				Результат = Ложь;	
			КонецЕсли;
				                 
		ИначеЕсли ОбъектДрайвера.ШтучныйПрефиксШК = Число(ПрефиксШтрихкодаВесовогоТовара) Тогда
			ОбъектДрайвера.ШтучныйПрефиксШК = Число(ПрефиксШтучногоФасованногоТовара);
			ОбъектДрайвера.УстановитьШтучныйПрефиксШК();
			
			ОбъектДрайвера.ВесовойПрефиксШК = Число(ПрефиксШтрихкодаВесовогоТовара);
			ОбъектДрайвера.УстановитьВесовойПрефиксШК();

			Если ОбъектДрайвера.Результат <> 0 Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
				Результат = Ложь;	
			КонецЕсли;
		Иначе
			
			Если Число(ПрефиксШтрихкодаВесовогоТовара) > 9 Тогда	
				ОбъектДрайвера.ВесовойПрефиксШК = Число(ПрефиксШтрихкодаВесовогоТовара);
				ОбъектДрайвера.УстановитьВесовойПрефиксШК();
			Если ОбъектДрайвера.Результат <> 0 Тогда
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
					Результат = Ложь;	
				КонецЕсли;
			КонецЕсли;
			
			
			Если Число(ПрефиксШтучногоФасованногоТовара) > 9 Тогда	
				ОбъектДрайвера.ШтучныйПрефиксШК = Число(ПрефиксШтучногоФасованногоТовара);
				ОбъектДрайвера.УстановитьШтучныйПрефиксШК();
				Если ОбъектДрайвера.Результат <> 0 Тогда
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
					Результат = Ложь;	
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Завершение процедуры выгрузки данных в весы с печатью этикеток.
Функция ЗавершитьВыгрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) 
	
	Результат = Истина;
	
	Если Число(ОбъектДрайвера.ВерсияКЭ) >= 3.0 Тогда
		Если ОбъектДрайвера.ЗаписатьБлокДанныхПЛУ() <> 0 Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
			Результат = Ложь;	
		КонецЕсли;
		ОбъектДрайвера.ОчиститьБлокДанных(); 
	КонецЕсли;
	
	ОбъектДрайвера.БыстраяЗагрузка = 0;
	Если ОбъектДрайвера.УстановитьРежимЗагрузки() <> 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
		Результат = Ложь;	
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет очистку таблицы товаров в весы с печатью этикеток.
//
Функция ОчиститьТоварыВВесах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	// Обязательные выходные
	ВыходныеПараметры = Новый Массив();
	Результат = Истина;
	
	Состояние(НСтр("ru = 'Выполняется очистка товаров в весах с печатью этикеток...'"));
	
	ОбъектДрайвера.НомерЛУ = ПараметрыПодключения.ИДУстройства;
	ОбъектДрайвера.УстановитьАктивноеЛУ();

	Если ОбъектДрайвера.УстановитьСоединение() <> 0 Тогда	
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
		Результат = Ложь;
	Иначе
		Если ОбъектДрайвера.ОчиститьБазуТоваровИСообщений() <> 0 Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет проверку путей по которым хранятся файлы обмена.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	Попытка
		ОбъектДрайвера.ДобавитьЛУ();
   		ОбъектДрайвера.ИнтерфейсЛУ 			= Параметры.Интерфейс;
   		ОбъектДрайвера.Пароль				= Параметры.Пароль;
		
		Если Параметры.Интерфейс = 0 Тогда
    		ОбъектДрайвера.COMПортЛУ       	 = Параметры.Порт;
    		ОбъектДрайвера.СкоростьОбменаЛУ	 = Параметры.Скорость;
    		ОбъектДрайвера.ТаймаутЛУ       	 = Параметры.Таймаут;
    	Иначе
    		ОбъектДрайвера.АдресПолучателяЛУ = Параметры.IPАдрес;
    		ОбъектДрайвера.ПортПолучателяЛУ  = Параметры.UDPПортПолучателя;
    		ОбъектДрайвера.UDPТаймаутЛУ      = Параметры.UDPТаймаут;
    	КонецЕсли;
				
		ОбъектДрайвера.УстановитьПараметрыЛУ();
   		ОбъектДрайвера.УстановитьАктивноеЛУ();

				
		Если ОбъектДрайвера.УстановитьСоединение() <> 0 Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
	   		Результат = Ложь;	
		КонецЕсли;
	Исключение
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не опознанная ошибка.'"));
   		Результат = Ложь;	
	КонецПопытки;
				
	Возврат Результат;
	
КонецФункции

// Функция возвращает версию установленного драйвера.
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));

	Попытка
		ВыходныеПараметры[1] = СтрЗаменить(ОбработатьВерсиюДрайвера(ОбъектДрайвера.ВерсияФайлаСТ), "1.", "A ")  + "."
				              + ОбработатьВерсиюДрайвера(ОбъектДрайвера.ВерсияФайлаМЛ);
    Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Обработка версии драйвера
Функция ОбработатьВерсиюДрайвера(ВерсияИзДрайвера)
	
	// Преобразуем в двоичное значение.
	ДвоичноеЗначение = "";
	ОстатокЗначения = ВерсияИзДрайвера;
	Пока ОстатокЗначения > 0 Цикл
		РезультатДеления = ОстатокЗначения / 2;
		ДвоичноеЗначение = ?(РезультатДеления = Цел(РезультатДеления), "0", "1") + ДвоичноеЗначение;
		ОстатокЗначения  = Цел(РезультатДеления);
	КонецЦикла;

	// Выделим старшую и младшую части.
	СтаршаяЧасть = ?(СтрДлина(ДвоичноеЗначение) > 16, Сред(ДвоичноеЗначение, 1, СтрДлина(ДвоичноеЗначение) - 16), "0");
	МладшаяЧасть = ?(СтрДлина(ДвоичноеЗначение) > 16, Прав(ДвоичноеЗначение, 16), ДвоичноеЗначение);

	ДесятичноеЗначение = 0;
	Для ТекущийСимвол = 1 По СтрДлина(СтаршаяЧасть) Цикл
		ДесятичноеЗначение = ДесятичноеЗначение * 2 + Число(Сред(СтаршаяЧасть, ТекущийСимвол, 1));
	КонецЦикла;
	ВерсияДрайвера = Строка(ДесятичноеЗначение) + ".";

	ДесятичноеЗначение = 0;
	Для ТекущийСимвол = 1 По СтрДлина(МладшаяЧасть) Цикл
		ДесятичноеЗначение = ДесятичноеЗначение * 2 + Число(Сред(МладшаяЧасть, ТекущийСимвол, 1));
	КонецЦикла;
	ВерсияДрайвера = ВерсияДрайвера + Строка(ДесятичноеЗначение);

	Возврат ВерсияДрайвера;

КонецФункции

#КонецОбласти